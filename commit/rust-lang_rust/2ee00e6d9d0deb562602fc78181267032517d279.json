{"sha": "2ee00e6d9d0deb562602fc78181267032517d279", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlZTAwZTZkOWQwZGViNTYyNjAyZmM3ODE4MTI2NzAzMjUxN2QyNzk=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-06-08T18:03:06Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2016-06-09T12:21:43Z"}, "message": "add hook infrastructure for automatically dumping MIR on every pass", "tree": {"sha": "98476802b7565b0cd5721112d23caef581a32990", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98476802b7565b0cd5721112d23caef581a32990"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ee00e6d9d0deb562602fc78181267032517d279", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ee00e6d9d0deb562602fc78181267032517d279", "html_url": "https://github.com/rust-lang/rust/commit/2ee00e6d9d0deb562602fc78181267032517d279", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ee00e6d9d0deb562602fc78181267032517d279/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "798be90648d88f902f6381c859df451d7ddf05d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/798be90648d88f902f6381c859df451d7ddf05d2", "html_url": "https://github.com/rust-lang/rust/commit/798be90648d88f902f6381c859df451d7ddf05d2"}], "stats": {"total": 182, "additions": 152, "deletions": 30}, "files": [{"sha": "1480ecfc50e602ffe1e9c0dbc247debd49515386", "filename": "src/librustc/mir/transform.rs", "status": "modified", "additions": 47, "deletions": 5, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/2ee00e6d9d0deb562602fc78181267032517d279/src%2Flibrustc%2Fmir%2Ftransform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ee00e6d9d0deb562602fc78181267032517d279/src%2Flibrustc%2Fmir%2Ftransform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftransform.rs?ref=2ee00e6d9d0deb562602fc78181267032517d279", "patch": "@@ -17,6 +17,8 @@ use mir::repr::Mir;\n use ty::TyCtxt;\n use syntax::ast::NodeId;\n \n+use std::fmt;\n+\n /// Where a specific Mir comes from.\n #[derive(Debug, Copy, Clone)]\n pub enum MirSource {\n@@ -70,16 +72,32 @@ impl<'a, 'tcx> MirSource {\n \n /// Various information about pass.\n pub trait Pass {\n-    // fn name() for printouts of various sorts?\n     // fn should_run(Session) to check if pass should run?\n     fn dep_node(&self, def_id: DefId) -> DepNode<DefId> {\n         DepNode::MirPass(def_id)\n     }\n+    fn name(&self) -> &str;\n+    fn disambiguator<'a>(&'a self) -> Option<Box<fmt::Display+'a>> { None }\n }\n \n /// A pass which inspects the whole MirMap.\n pub trait MirMapPass<'tcx>: Pass {\n-    fn run_pass<'a>(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>, map: &mut MirMap<'tcx>);\n+    fn run_pass<'a>(\n+        &mut self,\n+        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        map: &mut MirMap<'tcx>,\n+        hooks: &mut [Box<for<'s> MirPassHook<'s>>]);\n+}\n+\n+pub trait MirPassHook<'tcx>: Pass {\n+    fn on_mir_pass<'a>(\n+        &mut self,\n+        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        src: MirSource,\n+        mir: &Mir<'tcx>,\n+        pass: &Pass,\n+        is_after: bool\n+    );\n }\n \n /// A pass which inspects Mir of functions in isolation.\n@@ -94,16 +112,33 @@ pub trait MirPass<'tcx>: Pass {\n }\n \n impl<'tcx, T: MirPass<'tcx>> MirMapPass<'tcx> for T {\n-    fn run_pass<'a>(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>, map: &mut MirMap<'tcx>) {\n+    fn run_pass<'a>(&mut self,\n+                    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                    map: &mut MirMap<'tcx>,\n+                    hooks: &mut [Box<for<'s> MirPassHook<'s>>])\n+    {\n         for (&id, mir) in &mut map.map {\n             let def_id = tcx.map.local_def_id(id);\n             let _task = tcx.dep_graph.in_task(self.dep_node(def_id));\n \n             let src = MirSource::from_node(tcx, id);\n+\n+            for hook in &mut *hooks {\n+                hook.on_mir_pass(tcx, src, mir, self, false);\n+            }\n             MirPass::run_pass(self, tcx, src, mir);\n+            for hook in &mut *hooks {\n+                hook.on_mir_pass(tcx, src, mir, self, true);\n+            }\n \n             for (i, mir) in mir.promoted.iter_mut().enumerate() {\n+                for hook in &mut *hooks {\n+                    hook.on_mir_pass(tcx, src, mir, self, false);\n+                }\n                 self.run_pass_on_promoted(tcx, id, i, mir);\n+                for hook in &mut *hooks {\n+                    hook.on_mir_pass(tcx, src, mir, self, true);\n+                }\n             }\n         }\n     }\n@@ -112,31 +147,38 @@ impl<'tcx, T: MirPass<'tcx>> MirMapPass<'tcx> for T {\n /// A manager for MIR passes.\n pub struct Passes {\n     passes: Vec<Box<for<'tcx> MirMapPass<'tcx>>>,\n+    pass_hooks: Vec<Box<for<'tcx> MirPassHook<'tcx>>>,\n     plugin_passes: Vec<Box<for<'tcx> MirMapPass<'tcx>>>\n }\n \n impl<'a, 'tcx> Passes {\n     pub fn new() -> Passes {\n         let passes = Passes {\n             passes: Vec::new(),\n+            pass_hooks: Vec::new(),\n             plugin_passes: Vec::new()\n         };\n         passes\n     }\n \n     pub fn run_passes(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>, map: &mut MirMap<'tcx>) {\n         for pass in &mut self.plugin_passes {\n-            pass.run_pass(tcx, map);\n+            pass.run_pass(tcx, map, &mut self.pass_hooks);\n         }\n         for pass in &mut self.passes {\n-            pass.run_pass(tcx, map);\n+            pass.run_pass(tcx, map, &mut self.pass_hooks);\n         }\n     }\n \n     /// Pushes a built-in pass.\n     pub fn push_pass(&mut self, pass: Box<for<'b> MirMapPass<'b>>) {\n         self.passes.push(pass);\n     }\n+\n+    /// Pushes a pass hook.\n+    pub fn push_hook(&mut self, hook: Box<for<'b> MirPassHook<'b>>) {\n+        self.pass_hooks.push(hook);\n+    }\n }\n \n /// Copies the plugin passes."}, {"sha": "593a997bed532b7f2e7533dd35bb5fbc1b77ef8b", "filename": "src/librustc_borrowck/borrowck/mir/elaborate_drops.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2ee00e6d9d0deb562602fc78181267032517d279/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ee00e6d9d0deb562602fc78181267032517d279/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs?ref=2ee00e6d9d0deb562602fc78181267032517d279", "patch": "@@ -23,7 +23,6 @@ use rustc::middle::const_val::ConstVal;\n use rustc::middle::lang_items;\n use rustc::util::nodemap::FnvHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n-use rustc_mir::pretty;\n use syntax::codemap::Span;\n \n use std::fmt;\n@@ -66,13 +65,13 @@ impl<'tcx> MirPass<'tcx> for ElaborateDrops {\n                 patch: MirPatch::new(mir),\n             }.elaborate()\n         };\n-        pretty::dump_mir(tcx, \"elaborate_drops\", &0, src, mir, None);\n         elaborate_patch.apply(mir);\n-        pretty::dump_mir(tcx, \"elaborate_drops\", &1, src, mir, None);\n     }\n }\n \n-impl Pass for ElaborateDrops {}\n+impl Pass for ElaborateDrops {\n+    fn name(&self) -> &str { \"elaborate-drops\" }\n+}\n \n struct InitializationData {\n     live: IdxSetBuf<MovePathIndex>,"}, {"sha": "60a4da68f032850869b7cdeac85f94ac4f03d46a", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ee00e6d9d0deb562602fc78181267032517d279/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ee00e6d9d0deb562602fc78181267032517d279/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=2ee00e6d9d0deb562602fc78181267032517d279", "patch": "@@ -976,6 +976,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n         time(time_passes, \"MIR passes\", || {\n             let mut passes = sess.mir_passes.borrow_mut();\n             // Push all the built-in passes.\n+            passes.push_hook(box mir::transform::dump_mir::DumpMir);\n             passes.push_pass(box mir::transform::simplify_cfg::SimplifyCfg::new(\"initial\"));\n             passes.push_pass(box mir::transform::qualify_consts::QualifyAndPromoteConstants);\n             passes.push_pass(box mir::transform::type_check::TypeckMir);\n@@ -1045,6 +1046,7 @@ pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // to LLVM code.\n     time(time_passes, \"Prepare MIR codegen passes\", || {\n         let mut passes = ::rustc::mir::transform::Passes::new();\n+        passes.push_hook(box mir::transform::dump_mir::DumpMir);\n         passes.push_pass(box mir::transform::no_landing_pads::NoLandingPads);\n         passes.push_pass(box mir::transform::simplify_cfg::SimplifyCfg::new(\"no-landing-pads\"));\n \n@@ -1056,7 +1058,7 @@ pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         passes.push_pass(box mir::transform::simplify_cfg::SimplifyCfg::new(\"elaborate-drops\"));\n \n         passes.push_pass(box mir::transform::add_call_guards::AddCallGuards);\n-        passes.push_pass(box mir::transform::dump_mir::DumpMir(\"pre_trans\"));\n+        passes.push_pass(box mir::transform::dump_mir::Marker(\"pre-trans\"));\n \n         passes.run_passes(tcx, &mut mir_map);\n     });"}, {"sha": "15cfa8046ed6360bc49280814ecadad9427393e4", "filename": "src/librustc_mir/transform/add_call_guards.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ee00e6d9d0deb562602fc78181267032517d279/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ee00e6d9d0deb562602fc78181267032517d279/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs?ref=2ee00e6d9d0deb562602fc78181267032517d279", "patch": "@@ -82,4 +82,6 @@ impl<'tcx> MirPass<'tcx> for AddCallGuards {\n     }\n }\n \n-impl Pass for AddCallGuards {}\n+impl Pass for AddCallGuards {\n+    fn name(&self) -> &str { \"add-call-guards\" }\n+}"}, {"sha": "941229d2c02941ca55dcb251ee718df7b0ca0fc6", "filename": "src/librustc_mir/transform/dump_mir.rs", "status": "modified", "additions": 55, "deletions": 7, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/2ee00e6d9d0deb562602fc78181267032517d279/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ee00e6d9d0deb562602fc78181267032517d279/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs?ref=2ee00e6d9d0deb562602fc78181267032517d279", "patch": "@@ -10,18 +10,66 @@\n \n //! This pass just dumps MIR at a specified point.\n \n+use std::fmt;\n+\n use rustc::ty::TyCtxt;\n use rustc::mir::repr::*;\n-use rustc::mir::transform::{Pass, MirPass, MirSource};\n+use rustc::mir::transform::{Pass, MirPass, MirPassHook, MirSource};\n use pretty;\n \n-pub struct DumpMir<'a>(pub &'a str);\n+pub struct Marker<'a>(pub &'a str);\n+\n+impl<'b, 'tcx> MirPass<'tcx> for Marker<'b> {\n+    fn run_pass<'a>(&mut self, _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                    _src: MirSource, _mir: &mut Mir<'tcx>)\n+    {}\n+}\n+\n+impl<'b> Pass for Marker<'b> {\n+    fn name(&self) -> &str { self.0 }\n+}\n+\n+pub struct Disambiguator<'a> {\n+    pass: &'a Pass,\n+    is_after: bool\n+}\n+\n+impl<'a> fmt::Display for Disambiguator<'a> {\n+    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+        let title = if self.is_after { \"after\" } else { \"before\" };\n+        if let Some(fmt) = self.pass.disambiguator() {\n+            write!(formatter, \"{}-{}\", fmt, title)\n+        } else {\n+            write!(formatter, \"{}\", title)\n+        }\n+    }\n+}\n+\n+pub struct DumpMir;\n \n-impl<'b, 'tcx> MirPass<'tcx> for DumpMir<'b> {\n-    fn run_pass<'a>(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                    src: MirSource, mir: &mut Mir<'tcx>) {\n-        pretty::dump_mir(tcx, self.0, &0, src, mir, None);\n+impl<'tcx> MirPassHook<'tcx> for DumpMir {\n+    fn on_mir_pass<'a>(\n+        &mut self,\n+        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        src: MirSource,\n+        mir: &Mir<'tcx>,\n+        pass: &Pass,\n+        is_after: bool)\n+    {\n+        pretty::dump_mir(\n+            tcx,\n+            pass.name(),\n+            &Disambiguator {\n+                pass: pass,\n+                is_after: is_after\n+            },\n+            src,\n+            mir,\n+            None\n+        );\n     }\n }\n \n-impl<'b> Pass for DumpMir<'b> {}\n+impl<'b> Pass for DumpMir {\n+    fn name(&self) -> &str { \"dump-mir\" }\n+}"}, {"sha": "4c71fe98ec2ade0ae38845c292baccf7de7c417d", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ee00e6d9d0deb562602fc78181267032517d279/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ee00e6d9d0deb562602fc78181267032517d279/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=2ee00e6d9d0deb562602fc78181267032517d279", "patch": "@@ -43,7 +43,9 @@ impl<'a, 'tcx> MutVisitor<'tcx> for EraseRegionsVisitor<'a, 'tcx> {\n \n pub struct EraseRegions;\n \n-impl Pass for EraseRegions {}\n+impl Pass for EraseRegions {\n+    fn name(&self) -> &str { \"erase-regions\" }\n+}\n \n impl<'tcx> MirPass<'tcx> for EraseRegions {\n     fn run_pass<'a>(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>,"}, {"sha": "610208de19a8dd0b3abbb8c0549fd018b72d1fa8", "filename": "src/librustc_mir/transform/no_landing_pads.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ee00e6d9d0deb562602fc78181267032517d279/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ee00e6d9d0deb562602fc78181267032517d279/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs?ref=2ee00e6d9d0deb562602fc78181267032517d279", "patch": "@@ -50,4 +50,6 @@ impl<'tcx> MirPass<'tcx> for NoLandingPads {\n     }\n }\n \n-impl Pass for NoLandingPads {}\n+impl Pass for NoLandingPads {\n+    fn name(&self) -> &str { \"no-landing-pads\" }\n+}"}, {"sha": "9f95342a68bce93ef8f074218a56d83853793392", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2ee00e6d9d0deb562602fc78181267032517d279/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ee00e6d9d0deb562602fc78181267032517d279/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=2ee00e6d9d0deb562602fc78181267032517d279", "patch": "@@ -25,8 +25,8 @@ use rustc::ty::{self, TyCtxt, Ty};\n use rustc::ty::cast::CastTy;\n use rustc::mir::repr::*;\n use rustc::mir::mir_map::MirMap;\n-use rustc::mir::transform::{Pass, MirMapPass, MirSource};\n use rustc::mir::traversal::{self, ReversePostorder};\n+use rustc::mir::transform::{Pass, MirMapPass, MirPassHook, MirSource};\n use rustc::mir::visit::{LvalueContext, Visitor};\n use rustc::util::nodemap::DefIdMap;\n use syntax::abi::Abi;\n@@ -906,10 +906,15 @@ fn qualify_const_item_cached<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n pub struct QualifyAndPromoteConstants;\n \n-impl Pass for QualifyAndPromoteConstants {}\n+impl Pass for QualifyAndPromoteConstants {\n+    fn name(&self) -> &str { \"qualify-consts\" }\n+}\n \n impl<'tcx> MirMapPass<'tcx> for QualifyAndPromoteConstants {\n-    fn run_pass<'a>(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>, map: &mut MirMap<'tcx>) {\n+    fn run_pass<'a>(&mut self,\n+                    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                    map: &mut MirMap<'tcx>,\n+                    hooks: &mut [Box<for<'s> MirPassHook<'s>>]) {\n         let mut qualif_map = DefIdMap();\n \n         // First, visit `const` items, potentially recursing, to get\n@@ -945,6 +950,10 @@ impl<'tcx> MirMapPass<'tcx> for QualifyAndPromoteConstants {\n             };\n             let param_env = ty::ParameterEnvironment::for_item(tcx, id);\n \n+            for hook in &mut *hooks {\n+                hook.on_mir_pass(tcx, src, mir, self, false);\n+            }\n+\n             if mode == Mode::Fn || mode == Mode::ConstFn {\n                 // This is ugly because Qualifier holds onto mir,\n                 // which can't be mutated until its scope ends.\n@@ -972,6 +981,10 @@ impl<'tcx> MirMapPass<'tcx> for QualifyAndPromoteConstants {\n                 qualifier.qualify_const();\n             }\n \n+            for hook in &mut *hooks {\n+                hook.on_mir_pass(tcx, src, mir, self, true);\n+            }\n+\n             // Statics must be Sync.\n             if mode == Mode::Static {\n                 let ty = mir.return_ty.unwrap();"}, {"sha": "8c267581980045865daf17276fbc7c356fdb99bd", "filename": "src/librustc_mir/transform/simplify_cfg.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2ee00e6d9d0deb562602fc78181267032517d279/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ee00e6d9d0deb562602fc78181267032517d279/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs?ref=2ee00e6d9d0deb562602fc78181267032517d279", "patch": "@@ -39,7 +39,8 @@ use rustc::ty::TyCtxt;\n use rustc::mir::repr::*;\n use rustc::mir::transform::{MirPass, MirSource, Pass};\n use rustc::mir::traversal;\n-use pretty;\n+\n+use std::fmt;\n use std::mem;\n \n pub struct SimplifyCfg<'a> { label: &'a str }\n@@ -51,20 +52,23 @@ impl<'a> SimplifyCfg<'a> {\n }\n \n impl<'l, 'tcx> MirPass<'tcx> for SimplifyCfg<'l> {\n-    fn run_pass<'a>(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>, src: MirSource, mir: &mut Mir<'tcx>) {\n-        pretty::dump_mir(tcx, \"simplify_cfg\", &format!(\"{}-before\", self.label), src, mir, None);\n+    fn run_pass<'a>(&mut self, _tcx: TyCtxt<'a, 'tcx, 'tcx>, _src: MirSource, mir: &mut Mir<'tcx>) {\n         simplify_branches(mir);\n         remove_dead_blocks(mir);\n         merge_consecutive_blocks(mir);\n         remove_dead_blocks(mir);\n-        pretty::dump_mir(tcx, \"simplify_cfg\", &format!(\"{}-after\", self.label), src, mir, None);\n \n         // FIXME: Should probably be moved into some kind of pass manager\n         mir.basic_blocks_mut().raw.shrink_to_fit();\n     }\n }\n \n-impl<'l> Pass for SimplifyCfg<'l> {}\n+impl<'l> Pass for SimplifyCfg<'l> {\n+    fn name(&self) -> &str { \"simplify-cfg\" }\n+    fn disambiguator<'a>(&'a self) -> Option<Box<fmt::Display+'a>> {\n+        Some(Box::new(self.label))\n+    }\n+}\n \n fn merge_consecutive_blocks(mir: &mut Mir) {\n     let mut pred_count: IndexVec<_, _> ="}, {"sha": "60698a184dab43a918cd00ed5aab055aa04e2f65", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ee00e6d9d0deb562602fc78181267032517d279/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ee00e6d9d0deb562602fc78181267032517d279/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=2ee00e6d9d0deb562602fc78181267032517d279", "patch": "@@ -717,4 +717,6 @@ impl Pass for TypeckMir {\n     fn dep_node(&self, def_id: DefId) -> DepNode<DefId> {\n         DepNode::MirTypeck(def_id)\n     }\n+\n+    fn name(&self) -> &str { \"typeck-mir\" }\n }"}, {"sha": "381bd24d9a4ae59f19938000e53e6d925df5199d", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2ee00e6d9d0deb562602fc78181267032517d279/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ee00e6d9d0deb562602fc78181267032517d279/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=2ee00e6d9d0deb562602fc78181267032517d279", "patch": "@@ -1844,7 +1844,10 @@ pub fn trans_closure<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         attributes::emit_uwtable(llfndecl, true);\n     }\n \n-    debug!(\"trans_closure(..., {})\", instance);\n+    // this is an info! to allow collecting monomorphization statistics\n+    // and to allow finding the last function before LLVM aborts from\n+    // release builds.\n+    info!(\"trans_closure(..., {})\", instance);\n \n     let fn_ty = FnType::new(ccx, abi, sig, &[]);\n "}, {"sha": "b7d49dbb83c75b8f19cb591d79d57ba989ddbd23", "filename": "src/test/run-pass-fulldeps/auxiliary/dummy_mir_pass.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2ee00e6d9d0deb562602fc78181267032517d279/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fdummy_mir_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ee00e6d9d0deb562602fc78181267032517d279/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fdummy_mir_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fdummy_mir_pass.rs?ref=2ee00e6d9d0deb562602fc78181267032517d279", "patch": "@@ -28,7 +28,10 @@ use rustc_plugin::Registry;\n \n struct Pass;\n \n-impl transform::Pass for Pass {}\n+impl transform::Pass for Pass {\n+    fn name(&self) -> &str { \"dummy-mir-pass\" }\n+}\n+\n impl<'tcx> MirPass<'tcx> for Pass {\n     fn run_pass<'a>(&mut self, _: TyCtxt<'a, 'tcx, 'tcx>,\n                     _: MirSource, mir: &mut Mir<'tcx>) {"}]}