{"sha": "3cf28f3002470f61a471c69b869e4f55ae1766f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjZjI4ZjMwMDI0NzBmNjFhNDcxYzY5Yjg2OWU0ZjU1YWUxNzY2Zjc=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-08-15T15:05:25Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-09-18T09:17:02Z"}, "message": "Use DefId instead of NodeId as identifier in resolve_lifetime::Region.\n\nThese Region values end up in crate metadata so they should not use NodeId.", "tree": {"sha": "877f05adf0a003f00d1b647a4afeb5f9ef48f8ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/877f05adf0a003f00d1b647a4afeb5f9ef48f8ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cf28f3002470f61a471c69b869e4f55ae1766f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cf28f3002470f61a471c69b869e4f55ae1766f7", "html_url": "https://github.com/rust-lang/rust/commit/3cf28f3002470f61a471c69b869e4f55ae1766f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cf28f3002470f61a471c69b869e4f55ae1766f7/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "caad2560bfbd0e2b0e0dcb6882395c1523a1aadc", "url": "https://api.github.com/repos/rust-lang/rust/commits/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc", "html_url": "https://github.com/rust-lang/rust/commit/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc"}], "stats": {"total": 87, "additions": 52, "deletions": 35}, "files": [{"sha": "ef28b5b42b0dddd5b0b08170ec1f9eb8db0181d3", "filename": "src/librustc/infer/error_reporting/different_lifetimes.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3cf28f3002470f61a471c69b869e4f55ae1766f7/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf28f3002470f61a471c69b869e4f55ae1766f7/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fdifferent_lifetimes.rs?ref=3cf28f3002470f61a471c69b869e4f55ae1766f7", "patch": "@@ -245,10 +245,8 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindNestedTypeVisitor<'a, 'gcx, 'tcx> {\n                     // region at the right depth with the same index\n                     (Some(rl::Region::EarlyBound(_, id)), ty::BrNamed(def_id, _)) => {\n                         debug!(\"EarlyBound self.infcx.tcx.hir.local_def_id(id)={:?} \\\n-                                        def_id={:?}\",\n-                               self.infcx.tcx.hir.local_def_id(id),\n-                               def_id);\n-                        if self.infcx.tcx.hir.local_def_id(id) == def_id {\n+                                        def_id={:?}\", id, def_id);\n+                        if id == def_id {\n                             self.found_type = Some(arg);\n                             return; // we can stop visiting now\n                         }\n@@ -260,11 +258,9 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindNestedTypeVisitor<'a, 'gcx, 'tcx> {\n                     (Some(rl::Region::LateBound(debruijn_index, id)), ty::BrNamed(def_id, _)) => {\n                         debug!(\"FindNestedTypeVisitor::visit_ty: LateBound depth = {:?}\",\n                                debruijn_index.depth);\n-                        debug!(\"self.infcx.tcx.hir.local_def_id(id)={:?}\",\n-                               self.infcx.tcx.hir.local_def_id(id));\n+                        debug!(\"self.infcx.tcx.hir.local_def_id(id)={:?}\", id);\n                         debug!(\"def_id={:?}\", def_id);\n-                        if debruijn_index.depth == self.depth &&\n-                           self.infcx.tcx.hir.local_def_id(id) == def_id {\n+                        if debruijn_index.depth == self.depth && id == def_id {\n                             self.found_type = Some(arg);\n                             return; // we can stop visiting now\n                         }"}, {"sha": "2d201e5935ec7c7ba8c8db2774fc1189dc0be855", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 33, "deletions": 17, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/3cf28f3002470f61a471c69b869e4f55ae1766f7/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf28f3002470f61a471c69b869e4f55ae1766f7/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=3cf28f3002470f61a471c69b869e4f55ae1766f7", "patch": "@@ -39,22 +39,24 @@ use hir::intravisit::{self, Visitor, NestedVisitorMap};\n #[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Debug)]\n pub enum Region {\n     Static,\n-    EarlyBound(/* index */ u32, /* lifetime decl */ ast::NodeId),\n-    LateBound(ty::DebruijnIndex, /* lifetime decl */ ast::NodeId),\n+    EarlyBound(/* index */ u32, /* lifetime decl */ DefId),\n+    LateBound(ty::DebruijnIndex, /* lifetime decl */ DefId),\n     LateBoundAnon(ty::DebruijnIndex, /* anon index */ u32),\n-    Free(DefId, /* lifetime decl */ ast::NodeId),\n+    Free(DefId, /* lifetime decl */ DefId),\n }\n \n impl Region {\n-    fn early(index: &mut u32, def: &hir::LifetimeDef) -> (ast::Name, Region) {\n+    fn early(hir_map: &Map, index: &mut u32, def: &hir::LifetimeDef) -> (ast::Name, Region) {\n         let i = *index;\n         *index += 1;\n-        (def.lifetime.name, Region::EarlyBound(i, def.lifetime.id))\n+        let def_id = hir_map.local_def_id(def.lifetime.id);\n+        (def.lifetime.name, Region::EarlyBound(i, def_id))\n     }\n \n-    fn late(def: &hir::LifetimeDef) -> (ast::Name, Region) {\n+    fn late(hir_map: &Map, def: &hir::LifetimeDef) -> (ast::Name, Region) {\n         let depth = ty::DebruijnIndex::new(1);\n-        (def.lifetime.name, Region::LateBound(depth, def.lifetime.id))\n+        let def_id = hir_map.local_def_id(def.lifetime.id);\n+        (def.lifetime.name, Region::LateBound(depth, def_id))\n     }\n \n     fn late_anon(index: &Cell<u32>) -> Region {\n@@ -64,7 +66,7 @@ impl Region {\n         Region::LateBoundAnon(depth, i)\n     }\n \n-    fn id(&self) -> Option<ast::NodeId> {\n+    fn id(&self) -> Option<DefId> {\n         match *self {\n             Region::Static |\n             Region::LateBoundAnon(..) => None,\n@@ -337,7 +339,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     0\n                 };\n                 let lifetimes = generics.lifetimes.iter().map(|def| {\n-                    Region::early(&mut index, def)\n+                    Region::early(self.hir_map, &mut index, def)\n                 }).collect();\n                 let scope = Scope::Binder {\n                     lifetimes,\n@@ -368,7 +370,9 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         match ty.node {\n             hir::TyBareFn(ref c) => {\n                 let scope = Scope::Binder {\n-                    lifetimes: c.lifetimes.iter().map(Region::late).collect(),\n+                    lifetimes: c.lifetimes.iter().map(|def| {\n+                            Region::late(self.hir_map, def)\n+                        }).collect(),\n                     s: self.scope\n                 };\n                 self.with(scope, |old_scope, this| {\n@@ -467,7 +471,9 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     if !bound_lifetimes.is_empty() {\n                         self.trait_ref_hack = true;\n                         let scope = Scope::Binder {\n-                            lifetimes: bound_lifetimes.iter().map(Region::late).collect(),\n+                            lifetimes: bound_lifetimes.iter().map(|def| {\n+                                    Region::late(self.hir_map, def)\n+                                }).collect(),\n                             s: self.scope\n                         };\n                         let result = self.with(scope, |old_scope, this| {\n@@ -512,7 +518,9 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                           \"nested quantification of lifetimes\");\n             }\n             let scope = Scope::Binder {\n-                lifetimes: trait_ref.bound_lifetimes.iter().map(Region::late).collect(),\n+                lifetimes: trait_ref.bound_lifetimes.iter().map(|def| {\n+                        Region::late(self.hir_map, def)\n+                    }).collect(),\n                 s: self.scope\n             };\n             self.with(scope, |old_scope, this| {\n@@ -647,10 +655,13 @@ fn extract_labels(ctxt: &mut LifetimeContext, body: &hir::Body) {\n                 Scope::Binder { ref lifetimes, s } => {\n                     // FIXME (#24278): non-hygienic comparison\n                     if let Some(def) = lifetimes.get(&label) {\n+                        let node_id = hir_map.as_local_node_id(def.id().unwrap())\n+                                             .unwrap();\n+\n                         signal_shadowing_problem(\n                             sess,\n                             label,\n-                            original_lifetime(hir_map.span(def.id().unwrap())),\n+                            original_lifetime(hir_map.span(node_id)),\n                             shadower_label(label_span));\n                         return;\n                     }\n@@ -749,7 +760,8 @@ fn object_lifetime_defaults_for_item(hir_map: &Map, generics: &hir::Generics)\n                     generics.lifetimes.iter().enumerate().find(|&(_, def)| {\n                         def.lifetime.name == name\n                     }).map_or(Set1::Many, |(i, def)| {\n-                        Set1::One(Region::EarlyBound(i as u32, def.lifetime.id))\n+                        let def_id = hir_map.local_def_id(def.lifetime.id);\n+                        Set1::One(Region::EarlyBound(i as u32, def_id))\n                     })\n                 }\n             }\n@@ -835,9 +847,9 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n         let lifetimes = generics.lifetimes.iter().map(|def| {\n             if self.map.late_bound.contains(&def.lifetime.id) {\n-                Region::late(def)\n+                Region::late(self.hir_map, def)\n             } else {\n-                Region::early(&mut index, def)\n+                Region::early(self.hir_map, &mut index, def)\n             }\n         }).collect();\n \n@@ -1483,10 +1495,14 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n                 Scope::Binder { ref lifetimes, s } => {\n                     if let Some(&def) = lifetimes.get(&lifetime.name) {\n+                        let node_id = self.hir_map\n+                                          .as_local_node_id(def.id().unwrap())\n+                                          .unwrap();\n+\n                         signal_shadowing_problem(\n                             self.sess,\n                             lifetime.name,\n-                            original_lifetime(self.hir_map.span(def.id().unwrap())),\n+                            original_lifetime(self.hir_map.span(node_id)),\n                             shadower_lifetime(&lifetime));\n                         return;\n                     }"}, {"sha": "5256bb22781175cbb561ad647d8eb58d89862077", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3cf28f3002470f61a471c69b869e4f55ae1766f7/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf28f3002470f61a471c69b869e4f55ae1766f7/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=3cf28f3002470f61a471c69b869e4f55ae1766f7", "patch": "@@ -96,36 +96,40 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         -> ty::Region<'tcx>\n     {\n         let tcx = self.tcx();\n+        let lifetime_name = |def_id| {\n+            tcx.hir.name(tcx.hir.as_local_node_id(def_id).unwrap())\n+        };\n+\n         let hir_id = tcx.hir.node_to_hir_id(lifetime.id);\n         let r = match tcx.named_region(hir_id) {\n             Some(rl::Region::Static) => {\n                 tcx.types.re_static\n             }\n \n             Some(rl::Region::LateBound(debruijn, id)) => {\n-                let name = tcx.hir.name(id);\n+                let name = lifetime_name(id);\n                 tcx.mk_region(ty::ReLateBound(debruijn,\n-                    ty::BrNamed(tcx.hir.local_def_id(id), name)))\n+                    ty::BrNamed(id, name)))\n             }\n \n             Some(rl::Region::LateBoundAnon(debruijn, index)) => {\n                 tcx.mk_region(ty::ReLateBound(debruijn, ty::BrAnon(index)))\n             }\n \n             Some(rl::Region::EarlyBound(index, id)) => {\n-                let name = tcx.hir.name(id);\n+                let name = lifetime_name(id);\n                 tcx.mk_region(ty::ReEarlyBound(ty::EarlyBoundRegion {\n-                    def_id: tcx.hir.local_def_id(id),\n+                    def_id: id,\n                     index,\n                     name,\n                 }))\n             }\n \n             Some(rl::Region::Free(scope, id)) => {\n-                let name = tcx.hir.name(id);\n+                let name = lifetime_name(id);\n                 tcx.mk_region(ty::ReFree(ty::FreeRegion {\n                     scope,\n-                    bound_region: ty::BrNamed(tcx.hir.local_def_id(id), name)\n+                    bound_region: ty::BrNamed(id, name)\n                 }))\n \n                     // (*) -- not late-bound, won't change"}, {"sha": "73ab286f185aa318b77e48545ada76109a40c9be", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3cf28f3002470f61a471c69b869e4f55ae1766f7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf28f3002470f61a471c69b869e4f55ae1766f7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=3cf28f3002470f61a471c69b869e4f55ae1766f7", "patch": "@@ -1835,7 +1835,8 @@ impl Clean<Type> for hir::Ty {\n                     for (i, lt_param) in generics.lifetimes.iter().enumerate() {\n                         if let Some(lt) = provided_params.lifetimes.get(i).cloned() {\n                             if !lt.is_elided() {\n-                                lt_substs.insert(lt_param.lifetime.id, lt.clean(cx));\n+                                let lt_def_id = cx.tcx.hir.local_def_id(lt_param.lifetime.id);\n+                                lt_substs.insert(lt_def_id, lt.clean(cx));\n                             }\n                         }\n                     }"}, {"sha": "277e2909ba9ed73433427d5df74b1e2affd84600", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3cf28f3002470f61a471c69b869e4f55ae1766f7/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf28f3002470f61a471c69b869e4f55ae1766f7/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=3cf28f3002470f61a471c69b869e4f55ae1766f7", "patch": "@@ -24,7 +24,7 @@ use rustc_trans::back::link;\n use rustc_resolve as resolve;\n use rustc_metadata::cstore::CStore;\n \n-use syntax::{ast, codemap};\n+use syntax::codemap;\n use syntax::feature_gate::UnstableFeatures;\n use syntax::fold::Folder;\n use errors;\n@@ -65,7 +65,7 @@ pub struct DocContext<'a, 'tcx: 'a> {\n     /// Table type parameter definition -> substituted type\n     pub ty_substs: RefCell<FxHashMap<Def, clean::Type>>,\n     /// Table node id of lifetime parameter definition -> substituted lifetime\n-    pub lt_substs: RefCell<FxHashMap<ast::NodeId, clean::Lifetime>>,\n+    pub lt_substs: RefCell<FxHashMap<DefId, clean::Lifetime>>,\n }\n \n impl<'a, 'tcx> DocContext<'a, 'tcx> {\n@@ -77,7 +77,7 @@ impl<'a, 'tcx> DocContext<'a, 'tcx> {\n     /// the substitutions for a type alias' RHS.\n     pub fn enter_alias<F, R>(&self,\n                              ty_substs: FxHashMap<Def, clean::Type>,\n-                             lt_substs: FxHashMap<ast::NodeId, clean::Lifetime>,\n+                             lt_substs: FxHashMap<DefId, clean::Lifetime>,\n                              f: F) -> R\n     where F: FnOnce() -> R {\n         let (old_tys, old_lts) ="}]}