{"sha": "ef07cf45183a6fe1ad44be69e0e98bebc3136b8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmMDdjZjQ1MTgzYTZmZTFhZDQ0YmU2OWUwZTk4YmViYzMxMzZiOGQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-04-13T02:36:37Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-04-13T02:36:37Z"}, "message": "Remove `FnCtxt::impl_self_ty`", "tree": {"sha": "ae43ac77dc1049d0836c398c3d12417136858e18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae43ac77dc1049d0836c398c3d12417136858e18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef07cf45183a6fe1ad44be69e0e98bebc3136b8d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXmatGLoofN5+9u4rsJhshcDi2qEFAl6T0DUACgkQsJhshcDi\n2qFaag//ZKKMONJ/UgaD9UKruAroaZFiWMwCwiJP5khbfSJkPrI3r+OavdJ2ByPU\nN3ovKBIpwbr0O1jrcbgiyzMJcHh2GODL59yrjRSbOikdilCBB8ChDnQFM/HVSy20\nghADWONL/81d0u6b1cxJ1WMreLvCSOutKuWaQnnsgN4Vung5qLgmxytcWuYk2N8D\nACID/tc1BhfyjsGD+wVXerM5O9D+Yh6moyrXnKi7WdZhg5U6wz6ZBNqemvatKeNC\nVOKc5VbdtuMUoiINLlytTeO7tmUVnQilYv1AOazl8SE6lJ8+G22Osb/zZb5vWEbo\nIcNMAMqXx0gWalkvAakp8nrRQPQb+0ob05TEiZgvwhTIJjLGLjTRnie2EoM001Kp\nk747V0sUY4TFEP1KksBx6jwCvdfrhoz7YBII5iSbqrxwLM51uBxpj4PMSajK34yQ\nXibFTjuul/pc3GhXsZ9OQ5USUmxKYMCF1lorCNAhlvV9if3TmrnAW4MpKFG2Dqk8\nwRxgkXrqkcWwsLUPE2boGOWLhCUiE3Fx0xdE/a1NTqt1UqNRY7Lgn+Rf6n8HCAs5\ntplOf9KAQoOhLNgSPnAyMhrhFK2UX7/eKYvGgDDug7xZM+Paf+8hfeE88gXmd0cn\nZO+vmUXdk2JIDLLi3rUvsZhZuVdFOEUOjvtaqa3fmFmeBL3g3xU=\n=v9Li\n-----END PGP SIGNATURE-----", "payload": "tree ae43ac77dc1049d0836c398c3d12417136858e18\nparent 9fed36055070168e5238d6bf6e58a36f519fe427\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1586745397 +0900\ncommitter Yuki Okushi <huyuumi.dev@gmail.com> 1586745397 +0900\n\nRemove `FnCtxt::impl_self_ty`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef07cf45183a6fe1ad44be69e0e98bebc3136b8d", "html_url": "https://github.com/rust-lang/rust/commit/ef07cf45183a6fe1ad44be69e0e98bebc3136b8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef07cf45183a6fe1ad44be69e0e98bebc3136b8d/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fed36055070168e5238d6bf6e58a36f519fe427", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fed36055070168e5238d6bf6e58a36f519fe427", "html_url": "https://github.com/rust-lang/rust/commit/9fed36055070168e5238d6bf6e58a36f519fe427"}], "stats": {"total": 44, "additions": 9, "deletions": 35}, "files": [{"sha": "3f81689cdc90f784195873eca8c8ded6ca42cb04", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef07cf45183a6fe1ad44be69e0e98bebc3136b8d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef07cf45183a6fe1ad44be69e0e98bebc3136b8d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=ef07cf45183a6fe1ad44be69e0e98bebc3136b8d", "patch": "@@ -209,7 +209,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n                     \"impl {:?} is not an inherent impl\",\n                     impl_def_id\n                 );\n-                self.impl_self_ty(self.span, impl_def_id).substs\n+                self.fresh_substs_for_item(self.span, impl_def_id)\n             }\n \n             probe::ObjectPick => {"}, {"sha": "fb1cde855657bcba494c36634b7bee82eb720c67", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef07cf45183a6fe1ad44be69e0e98bebc3136b8d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef07cf45183a6fe1ad44be69e0e98bebc3136b8d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=ef07cf45183a6fe1ad44be69e0e98bebc3136b8d", "patch": "@@ -1128,8 +1128,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n     ) -> Option<PickResult<'tcx>> {\n         let tcx = self.tcx;\n \n-        // In general, during probing we erase regions. See\n-        // `impl_self_ty()` for an explanation.\n+        // In general, during probing we erase regions.\n         let region = tcx.lifetimes.re_erased;\n \n         let autoref_ty = tcx.mk_ref(region, ty::TypeAndMut { ty: self_ty, mutbl });\n@@ -1614,8 +1613,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                 } else {\n                     match param.kind {\n                         GenericParamDefKind::Lifetime => {\n-                            // In general, during probe we erase regions. See\n-                            // `impl_self_ty()` for an explanation.\n+                            // In general, during probe we erase regions.\n                             self.tcx.lifetimes.re_erased.into()\n                         }\n                         GenericParamDefKind::Type { .. } | GenericParamDefKind::Const => {"}, {"sha": "6e33acf9afccba90f9f6d2237b4562a90cc5b02b", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef07cf45183a6fe1ad44be69e0e98bebc3136b8d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef07cf45183a6fe1ad44be69e0e98bebc3136b8d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=ef07cf45183a6fe1ad44be69e0e98bebc3136b8d", "patch": "@@ -117,7 +117,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             .span_if_local(item.def_id)\n                             .or_else(|| self.tcx.hir().span_if_local(impl_did));\n \n-                        let impl_ty = self.impl_self_ty(span, impl_did).ty;\n+                        let impl_ty = self.tcx.at(span).type_of(impl_did);\n \n                         let insertion = match self.tcx.impl_trait_ref(impl_did) {\n                             None => String::new(),\n@@ -537,7 +537,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         // When the \"method\" is resolved through dereferencing, we really want the\n                         // original type that has the associated function for accurate suggestions.\n                         // (#61411)\n-                        let ty = self.impl_self_ty(span, *impl_did).ty;\n+                        let ty = tcx.at(span).type_of(*impl_did);\n                         match (&ty.peel_refs().kind, &actual.peel_refs().kind) {\n                             (ty::Adt(def, _), ty::Adt(def_actual, _)) if def == def_actual => {\n                                 // Use `actual` as it will have more `substs` filled in."}, {"sha": "3aea6b2815fe401684a4571a2a61fba5c80bc64f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ef07cf45183a6fe1ad44be69e0e98bebc3136b8d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef07cf45183a6fe1ad44be69e0e98bebc3136b8d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ef07cf45183a6fe1ad44be69e0e98bebc3136b8d", "patch": "@@ -154,7 +154,6 @@ use std::slice;\n \n use crate::require_c_abi_if_c_variadic;\n use crate::util::common::indenter;\n-use crate::TypeAndSubsts;\n \n use self::autoderef::Autoderef;\n use self::callee::DeferredCallResolution;\n@@ -4251,24 +4250,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    // Determine the `Self` type, using fresh variables for all variables\n-    // declared on the impl declaration e.g., `impl<A,B> for Vec<(A,B)>`\n-    // would return `($0, $1)` where `$0` and `$1` are freshly instantiated type\n-    // variables.\n-    pub fn impl_self_ty(\n-        &self,\n-        span: Span, // (potential) receiver for this impl\n-        did: DefId,\n-    ) -> TypeAndSubsts<'tcx> {\n-        let ity = self.tcx.type_of(did);\n-        debug!(\"impl_self_ty: ity={:?}\", ity);\n-\n-        let substs = self.fresh_substs_for_item(span, did);\n-        let substd_ty = self.instantiate_type_scheme(span, &substs, &ity);\n-\n-        TypeAndSubsts { substs, ty: substd_ty }\n-    }\n-\n     /// Unifies the output type with the expected type early, for more coercions\n     /// and forward type information on the input expressions.\n     fn expected_inputs_for_expected_output("}, {"sha": "df8290fd018c5cd9d6bedd503ffe41f803e7940d", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ef07cf45183a6fe1ad44be69e0e98bebc3136b8d/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef07cf45183a6fe1ad44be69e0e98bebc3136b8d/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=ef07cf45183a6fe1ad44be69e0e98bebc3136b8d", "patch": "@@ -97,7 +97,6 @@ use rustc_infer::infer::{InferOk, TyCtxtInferExt};\n use rustc_infer::traits::TraitEngineExt as _;\n use rustc_middle::middle;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_middle::util;\n use rustc_session::config::EntryFnType;\n@@ -111,10 +110,6 @@ use rustc_trait_selection::traits::{\n use std::iter;\n \n use astconv::{AstConv, Bounds};\n-pub struct TypeAndSubsts<'tcx> {\n-    substs: SubstsRef<'tcx>,\n-    ty: Ty<'tcx>,\n-}\n \n fn require_c_abi_if_c_variadic(tcx: TyCtxt<'_>, decl: &hir::FnDecl<'_>, abi: Abi, span: Span) {\n     if decl.c_variadic && !(abi == Abi::C || abi == Abi::Cdecl) {"}, {"sha": "40cb86e5716a0b3a6aeac905242d90d9856ae406", "filename": "src/test/ui/issues/issue-18446.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef07cf45183a6fe1ad44be69e0e98bebc3136b8d/src%2Ftest%2Fui%2Fissues%2Fissue-18446.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef07cf45183a6fe1ad44be69e0e98bebc3136b8d/src%2Ftest%2Fui%2Fissues%2Fissue-18446.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18446.stderr?ref=ef07cf45183a6fe1ad44be69e0e98bebc3136b8d", "patch": "@@ -7,7 +7,7 @@ LL |     x.foo();\n    |     | multiple `foo` found\n    |     help: disambiguate the method call for candidate #2: `T::foo(&x)`\n    |\n-note: candidate #1 is defined in an impl for the type `dyn T`\n+note: candidate #1 is defined in an impl for the type `(dyn T + 'a)`\n   --> $DIR/issue-18446.rs:9:5\n    |\n LL |     fn foo(&self) {}"}, {"sha": "f6820be7e7709e957e4fdf0062deae16cc7ea533", "filename": "src/test/ui/methods/method-deref-to-same-trait-object-with-separate-params.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef07cf45183a6fe1ad44be69e0e98bebc3136b8d/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef07cf45183a6fe1ad44be69e0e98bebc3136b8d/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr?ref=ef07cf45183a6fe1ad44be69e0e98bebc3136b8d", "patch": "@@ -20,12 +20,12 @@ error[E0034]: multiple applicable items in scope\n LL |     let z = x.foo();\n    |               ^^^ multiple `foo` found\n    |\n-note: candidate #1 is defined in an impl of the trait `internal::X` for the type `_`\n+note: candidate #1 is defined in an impl of the trait `internal::X` for the type `T`\n   --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:43:9\n    |\n LL |         fn foo(self: Smaht<Self, u64>) -> u64 {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: candidate #2 is defined in an impl of the trait `nuisance_foo::NuisanceFoo` for the type `_`\n+note: candidate #2 is defined in an impl of the trait `nuisance_foo::NuisanceFoo` for the type `T`\n   --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:70:9\n    |\n LL |         fn foo(self) {}"}, {"sha": "f1c0cd6b543e4e4e3d2232de3848eedeb2fc6265", "filename": "src/test/ui/suggestions/suggest-assoc-fn-call-with-turbofish.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef07cf45183a6fe1ad44be69e0e98bebc3136b8d/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef07cf45183a6fe1ad44be69e0e98bebc3136b8d/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.stderr?ref=ef07cf45183a6fe1ad44be69e0e98bebc3136b8d", "patch": "@@ -11,7 +11,7 @@ LL |     x.default_hello();\n    |     help: use associated function syntax instead: `GenericAssocMethod::<i32>::default_hello`\n    |\n    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n-note: the candidate is defined in an impl for the type `GenericAssocMethod<_>`\n+note: the candidate is defined in an impl for the type `GenericAssocMethod<T>`\n   --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:4:5\n    |\n LL |     fn default_hello() {}"}]}