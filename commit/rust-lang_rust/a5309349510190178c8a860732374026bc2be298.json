{"sha": "a5309349510190178c8a860732374026bc2be298", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1MzA5MzQ5NTEwMTkwMTc4YzhhODYwNzMyMzc0MDI2YmMyYmUyOTg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-08-07T11:44:02Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-08-07T11:45:55Z"}, "message": "clean up const-hacks in int endianess conversion functions", "tree": {"sha": "bbff59615d58252bee94a6341d1a58adad6f1392", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbff59615d58252bee94a6341d1a58adad6f1392"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5309349510190178c8a860732374026bc2be298", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5309349510190178c8a860732374026bc2be298", "html_url": "https://github.com/rust-lang/rust/commit/a5309349510190178c8a860732374026bc2be298", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5309349510190178c8a860732374026bc2be298/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4c940f0821754a98491b2d23fbb5323c14a2bf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4c940f0821754a98491b2d23fbb5323c14a2bf5", "html_url": "https://github.com/rust-lang/rust/commit/d4c940f0821754a98491b2d23fbb5323c14a2bf5"}], "stats": {"total": 36, "additions": 8, "deletions": 28}, "files": [{"sha": "68937176270356a031ac23cf1fed6053f5edff5a", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 8, "deletions": 28, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a5309349510190178c8a860732374026bc2be298/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5309349510190178c8a860732374026bc2be298/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=a5309349510190178c8a860732374026bc2be298", "patch": "@@ -2346,17 +2346,12 @@ assert_eq!(\n             #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             // SAFETY: const sound because integers are plain old datatypes so we can always\n             // transmute them to arrays of bytes\n-            #[allow_internal_unstable(const_fn_union)]\n+            #[allow_internal_unstable(const_fn_transmute)]\n             #[inline]\n             pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n-                #[repr(C)]\n-                union Bytes {\n-                    val: $SelfT,\n-                    bytes: [u8; mem::size_of::<$SelfT>()],\n-                }\n                 // SAFETY: integers are plain old datatypes so we can always transmute them to\n                 // arrays of bytes\n-                unsafe { Bytes { val: self }.bytes }\n+                unsafe { mem::transmute(self) }\n             }\n         }\n \n@@ -2464,16 +2459,11 @@ fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n             #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             // SAFETY: const sound because integers are plain old datatypes so we can always\n             // transmute to them\n-            #[allow_internal_unstable(const_fn_union)]\n+            #[allow_internal_unstable(const_fn_transmute)]\n             #[inline]\n             pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n-                #[repr(C)]\n-                union Bytes {\n-                    val: $SelfT,\n-                    bytes: [u8; mem::size_of::<$SelfT>()],\n-                }\n                 // SAFETY: integers are plain old datatypes so we can always transmute to them\n-                unsafe { Bytes { bytes }.val }\n+                unsafe { mem::transmute(bytes) }\n             }\n         }\n \n@@ -4368,17 +4358,12 @@ assert_eq!(\n             #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             // SAFETY: const sound because integers are plain old datatypes so we can always\n             // transmute them to arrays of bytes\n-            #[allow_internal_unstable(const_fn_union)]\n+            #[allow_internal_unstable(const_fn_transmute)]\n             #[inline]\n             pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n-                #[repr(C)]\n-                union Bytes {\n-                    val: $SelfT,\n-                    bytes: [u8; mem::size_of::<$SelfT>()],\n-                }\n                 // SAFETY: integers are plain old datatypes so we can always transmute them to\n                 // arrays of bytes\n-                unsafe { Bytes { val: self }.bytes }\n+                unsafe { mem::transmute(self) }\n             }\n         }\n \n@@ -4486,16 +4471,11 @@ fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n             #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             // SAFETY: const sound because integers are plain old datatypes so we can always\n             // transmute to them\n-            #[allow_internal_unstable(const_fn_union)]\n+            #[allow_internal_unstable(const_fn_transmute)]\n             #[inline]\n             pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n-                #[repr(C)]\n-                union Bytes {\n-                    val: $SelfT,\n-                    bytes: [u8; mem::size_of::<$SelfT>()],\n-                }\n                 // SAFETY: integers are plain old datatypes so we can always transmute to them\n-                unsafe { Bytes { bytes }.val }\n+                unsafe { mem::transmute(bytes) }\n             }\n         }\n "}]}