{"sha": "7204374719f4021ce06c25e7dd72b09a56923954", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMDQzNzQ3MTlmNDAyMWNlMDZjMjVlN2RkNzJiMDlhNTY5MjM5NTQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-30T07:44:21Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-30T08:23:32Z"}, "message": "Report instructions in addition to time\n\nThey hopefully will be more stable on CI", "tree": {"sha": "2e589e4b57540a87ed46aa831a7ad1af6ab8ad40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e589e4b57540a87ed46aa831a7ad1af6ab8ad40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7204374719f4021ce06c25e7dd72b09a56923954", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7204374719f4021ce06c25e7dd72b09a56923954", "html_url": "https://github.com/rust-lang/rust/commit/7204374719f4021ce06c25e7dd72b09a56923954", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7204374719f4021ce06c25e7dd72b09a56923954/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bab553029da31f3e90e99d8b83d160a34fdf4b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bab553029da31f3e90e99d8b83d160a34fdf4b2", "html_url": "https://github.com/rust-lang/rust/commit/4bab553029da31f3e90e99d8b83d160a34fdf4b2"}], "stats": {"total": 135, "additions": 115, "deletions": 20}, "files": [{"sha": "e63dcc530fad8007bba7f003d8f2e9c66ee2f477", "filename": "Cargo.lock", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7204374719f4021ce06c25e7dd72b09a56923954/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7204374719f4021ce06c25e7dd72b09a56923954/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7204374719f4021ce06c25e7dd72b09a56923954", "patch": "@@ -840,6 +840,25 @@ version = \"2.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"d4fd5641d01c8f18a23da7b6fe29298ff4b55afcccdf78973b24cf3175fee32e\"\n \n+[[package]]\n+name = \"perf-event\"\n+version = \"0.4.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0cb38a2f363560fb3cfcb47f28848b245a41c7e0d63e0b190918b712b6bf6803\"\n+dependencies = [\n+ \"libc\",\n+ \"perf-event-open-sys\",\n+]\n+\n+[[package]]\n+name = \"perf-event-open-sys\"\n+version = \"0.3.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"95db63e37862bc1b842135d2234ef9418f222cc660c6752f45e7cf9ddfb97f96\"\n+dependencies = [\n+ \"libc\",\n+]\n+\n [[package]]\n name = \"petgraph\"\n version = \"0.5.1\"\n@@ -1126,6 +1145,7 @@ dependencies = [\n  \"cfg-if\",\n  \"libc\",\n  \"once_cell\",\n+ \"perf-event\",\n  \"ra_arena\",\n ]\n "}, {"sha": "e41cb5f5276706e27badd67e95ab6ed1f0a664ba", "filename": "crates/ra_prof/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7204374719f4021ce06c25e7dd72b09a56923954/crates%2Fra_prof%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7204374719f4021ce06c25e7dd72b09a56923954/crates%2Fra_prof%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2FCargo.toml?ref=7204374719f4021ce06c25e7dd72b09a56923954", "patch": "@@ -15,6 +15,7 @@ once_cell = \"1.3.1\"\n backtrace = { version = \"0.3.44\", optional = true }\n cfg-if = \"0.1.10\"\n libc = \"0.2.73\"\n+perf-event = \"0.4\"\n \n [features]\n cpu_profiler = []"}, {"sha": "eb50965ae6f07e7ad032ed4696699f8f02697d6a", "filename": "crates/ra_prof/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7204374719f4021ce06c25e7dd72b09a56923954/crates%2Fra_prof%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7204374719f4021ce06c25e7dd72b09a56923954/crates%2Fra_prof%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Flib.rs?ref=7204374719f4021ce06c25e7dd72b09a56923954", "patch": "@@ -1,5 +1,6 @@\n //! A collection of tools for profiling rust-analyzer.\n \n+mod stop_watch;\n mod memory_usage;\n #[cfg(feature = \"cpu_profiler\")]\n mod google_cpu_profiler;\n@@ -11,6 +12,7 @@ use std::cell::RefCell;\n pub use crate::{\n     hprof::{init, init_from, profile},\n     memory_usage::{Bytes, MemoryUsage},\n+    stop_watch::{StopWatch, StopWatchSpan},\n };\n \n /// Prints backtrace to stderr, useful for debugging."}, {"sha": "54bfb05594a60dd168a1f7443f33d16259e06004", "filename": "crates/ra_prof/src/stop_watch.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/7204374719f4021ce06c25e7dd72b09a56923954/crates%2Fra_prof%2Fsrc%2Fstop_watch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7204374719f4021ce06c25e7dd72b09a56923954/crates%2Fra_prof%2Fsrc%2Fstop_watch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Fstop_watch.rs?ref=7204374719f4021ce06c25e7dd72b09a56923954", "patch": "@@ -0,0 +1,72 @@\n+use crate::MemoryUsage;\n+use std::{\n+    fmt,\n+    time::{Duration, Instant},\n+};\n+\n+pub struct StopWatch {\n+    time: Instant,\n+    counter: Option<perf_event::Counter>,\n+    memory: Option<MemoryUsage>,\n+}\n+\n+pub struct StopWatchSpan {\n+    pub time: Duration,\n+    pub instructions: Option<u64>,\n+    pub memory: Option<MemoryUsage>,\n+}\n+\n+impl StopWatch {\n+    pub fn start() -> StopWatch {\n+        let mut counter = perf_event::Builder::new().build().ok();\n+        if let Some(counter) = &mut counter {\n+            let _ = counter.enable();\n+        }\n+        let time = Instant::now();\n+        StopWatch { time, counter, memory: None }\n+    }\n+    pub fn memory(mut self, yes: bool) -> StopWatch {\n+        if yes {\n+            self.memory = Some(MemoryUsage::current());\n+        }\n+        self\n+    }\n+    pub fn elapsed(&mut self) -> StopWatchSpan {\n+        let time = self.time.elapsed();\n+        let instructions = self.counter.as_mut().and_then(|it| it.read().ok());\n+        let memory = self.memory.map(|it| MemoryUsage::current() - it);\n+        StopWatchSpan { time, instructions, memory }\n+    }\n+}\n+\n+impl fmt::Display for StopWatchSpan {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{:.2?}\", self.time)?;\n+        if let Some(mut instructions) = self.instructions {\n+            let mut prefix = \"\";\n+            if instructions > 10000 {\n+                instructions /= 1000;\n+                prefix = \"k\"\n+            }\n+            if instructions > 10000 {\n+                instructions /= 1000;\n+                prefix = \"m\"\n+            }\n+            write!(f, \", {}{}i\", instructions, prefix)?;\n+        }\n+        if let Some(memory) = self.memory {\n+            write!(f, \", {}\", memory)?;\n+        }\n+        Ok(())\n+    }\n+}\n+\n+// Unclear if we need this:\n+// https://github.com/jimblandy/perf-event/issues/8\n+impl Drop for StopWatch {\n+    fn drop(&mut self) {\n+        if let Some(mut counter) = self.counter.take() {\n+            let _ = counter.disable();\n+        }\n+    }\n+}"}, {"sha": "37b8337ef8f31cc7e4535cabe2531a78d26d2d86", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7204374719f4021ce06c25e7dd72b09a56923954/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7204374719f4021ce06c25e7dd72b09a56923954/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=7204374719f4021ce06c25e7dd72b09a56923954", "patch": "@@ -3,7 +3,7 @@\n \n use std::{\n     path::Path,\n-    time::{Instant, SystemTime, UNIX_EPOCH},\n+    time::{SystemTime, UNIX_EPOCH},\n };\n \n use hir::{\n@@ -29,6 +29,7 @@ use crate::{\n     },\n     print_memory_usage,\n };\n+use ra_prof::StopWatch;\n \n /// Need to wrap Snapshot to provide `Clone` impl for `map_with`\n struct Snap<DB>(DB);\n@@ -54,11 +55,12 @@ pub fn analysis_stats(\n         Rand32::new(seed)\n     };\n \n-    let db_load_time = Instant::now();\n+    let mut db_load_sw = StopWatch::start().memory(memory_usage);\n     let (host, vfs) = load_cargo(path, load_output_dirs, with_proc_macro)?;\n     let db = host.raw_database();\n-    eprintln!(\"Database loaded {:?}\", db_load_time.elapsed());\n-    let analysis_time = Instant::now();\n+    eprintln!(\"Database loaded {}\", db_load_sw.elapsed());\n+\n+    let mut analysis_sw = StopWatch::start().memory(memory_usage);\n     let mut num_crates = 0;\n     let mut visited_modules = FxHashSet::default();\n     let mut visit_queue = Vec::new();\n@@ -110,8 +112,7 @@ pub fn analysis_stats(\n     eprintln!(\"Total modules found: {}\", visited_modules.len());\n     eprintln!(\"Total declarations: {}\", num_decls);\n     eprintln!(\"Total functions: {}\", funcs.len());\n-    let item_collection_memory = ra_prof::memory_usage();\n-    eprintln!(\"Item Collection: {:?}, {}\", analysis_time.elapsed(), item_collection_memory);\n+    eprintln!(\"Item Collection: {}\", analysis_sw.elapsed());\n \n     if randomize {\n         shuffle(&mut rng, &mut funcs);\n@@ -123,7 +124,7 @@ pub fn analysis_stats(\n     };\n \n     if parallel {\n-        let inference_time = Instant::now();\n+        let mut inference_sw = StopWatch::start().memory(memory_usage);\n         let snap = Snap(db.snapshot());\n         funcs\n             .par_iter()\n@@ -133,14 +134,10 @@ pub fn analysis_stats(\n                 snap.0.infer(f_id.into());\n             })\n             .count();\n-        eprintln!(\n-            \"Parallel Inference: {:?}, {}\",\n-            inference_time.elapsed(),\n-            ra_prof::memory_usage()\n-        );\n+        eprintln!(\"Parallel Inference: {}\", inference_sw.elapsed());\n     }\n \n-    let inference_time = Instant::now();\n+    let mut inference_sw = StopWatch::start().memory(memory_usage);\n     bar.tick();\n     let mut num_exprs = 0;\n     let mut num_exprs_unknown = 0;\n@@ -291,14 +288,17 @@ pub fn analysis_stats(\n     eprintln!(\"Type mismatches: {}\", num_type_mismatches);\n     report_metric(\"type mismatches\", num_type_mismatches, \"#\");\n \n-    let inference_time = inference_time.elapsed();\n-    let total_memory = ra_prof::memory_usage();\n-    eprintln!(\"Inference: {:?}, {}\", inference_time, total_memory - item_collection_memory);\n+    eprintln!(\"Inference: {}\", inference_sw.elapsed());\n \n-    let analysis_time = analysis_time.elapsed();\n-    eprintln!(\"Total: {:?}, {}\", analysis_time, total_memory);\n-    report_metric(\"total time\", analysis_time.as_millis() as u64, \"ms\");\n-    report_metric(\"total memory\", total_memory.allocated.megabytes() as u64, \"MB\");\n+    let total_span = analysis_sw.elapsed();\n+    eprintln!(\"Total: {}\", total_span);\n+    report_metric(\"total time\", total_span.time.as_millis() as u64, \"ms\");\n+    if let Some(instructions) = total_span.instructions {\n+        report_metric(\"total time\", instructions, \"#instr\");\n+    }\n+    if let Some(memory) = total_span.memory {\n+        report_metric(\"total memory\", memory.allocated.megabytes() as u64, \"MB\");\n+    }\n \n     if memory_usage {\n         print_memory_usage(host, vfs);"}]}