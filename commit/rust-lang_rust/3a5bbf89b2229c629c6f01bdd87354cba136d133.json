{"sha": "3a5bbf89b2229c629c6f01bdd87354cba136d133", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhNWJiZjg5YjIyMjljNjI5YzZmMDFiZGQ4NzM1NGNiYTEzNmQxMzM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-11T21:16:57Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-12T00:32:47Z"}, "message": "avoid unneeded subtype obligations in lub/glb\n\nIn some specific cases, the new scheme was failing to learn as much from\na LUB/GLB operaiton as the old code, which caused coercion to go awry. A\nslight ordering hack fixes this.", "tree": {"sha": "cee152b5c3f06d40b2b39e0c76e3c830ade9cb57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cee152b5c3f06d40b2b39e0c76e3c830ade9cb57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a5bbf89b2229c629c6f01bdd87354cba136d133", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a5bbf89b2229c629c6f01bdd87354cba136d133", "html_url": "https://github.com/rust-lang/rust/commit/3a5bbf89b2229c629c6f01bdd87354cba136d133", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a5bbf89b2229c629c6f01bdd87354cba136d133/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14f1e3459f02e3ce45232a84cd923c86eef55cb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/14f1e3459f02e3ce45232a84cd923c86eef55cb5", "html_url": "https://github.com/rust-lang/rust/commit/14f1e3459f02e3ce45232a84cd923c86eef55cb5"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "d4d090f0153d015b5b779dabf724dd4bfbf18d57", "filename": "src/librustc/infer/lattice.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3a5bbf89b2229c629c6f01bdd87354cba136d133/src%2Flibrustc%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5bbf89b2229c629c6f01bdd87354cba136d133/src%2Flibrustc%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flattice.rs?ref=3a5bbf89b2229c629c6f01bdd87354cba136d133", "patch": "@@ -44,6 +44,10 @@ pub trait LatticeDir<'f, 'gcx: 'f+'tcx, 'tcx: 'f> : TypeRelation<'f, 'gcx, 'tcx>\n \n     // Relates the type `v` to `a` and `b` such that `v` represents\n     // the LUB/GLB of `a` and `b` as appropriate.\n+    //\n+    // Subtle hack: ordering *may* be significant here. This method\n+    // relates `v` to `a` first, which may help us to avoid unecessary\n+    // type variable obligations. See caller for details.\n     fn relate_bound(&mut self, v: Ty<'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, ()>;\n }\n \n@@ -74,7 +78,29 @@ pub fn super_lattice_tys<'a, 'gcx, 'tcx, L>(this: &mut L,\n             Ok(v)\n         }\n \n-        (&ty::TyInfer(TyVar(..)), _) |\n+        // If one side is known to be a variable and one is not,\n+        // create a variable (`v`) to represent the LUB. Make sure to\n+        // relate `v` to the non-type-variable first (by passing it\n+        // first to `relate_bound`). Otherwise, we would produce a\n+        // subtype obligation that must then be processed.\n+        //\n+        // Example: if the LHS is a type variable, and RHS is\n+        // `Box<i32>`, then we current compare `v` to the RHS first,\n+        // which will instantiate `v` with `Box<i32>`.  Then when `v`\n+        // is compared to the LHS, we instantiate LHS with `Box<i32>`.\n+        // But if we did in reverse order, we would create a `v <:\n+        // LHS` (or vice versa) constraint and then instantiate\n+        // `v`. This would require further processing to achieve same\n+        // end-result; in partiular, this screws up some of the logic\n+        // in coercion, which expects LUB to figure out that the LHS\n+        // is (e.g.) `Box<i32>`. A more obvious solution might be to\n+        // iterate on the subtype obligations that are returned, but I\n+        // think this suffices. -nmatsakis\n+        (&ty::TyInfer(TyVar(..)), _) => {\n+            let v = infcx.next_ty_var(TypeVariableOrigin::LatticeVariable(this.cause().span));\n+            this.relate_bound(v, b, a)?;\n+            Ok(v)\n+        }\n         (_, &ty::TyInfer(TyVar(..))) => {\n             let v = infcx.next_ty_var(TypeVariableOrigin::LatticeVariable(this.cause().span));\n             this.relate_bound(v, a, b)?;"}]}