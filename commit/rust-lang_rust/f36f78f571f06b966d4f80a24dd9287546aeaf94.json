{"sha": "f36f78f571f06b966d4f80a24dd9287546aeaf94", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzNmY3OGY1NzFmMDZiOTY2ZDRmODBhMjRkZDkyODc1NDZhZWFmOTQ=", "commit": {"author": {"name": "Duddino", "email": "rezziandrea106@gmail.com", "date": "2020-04-16T12:04:12Z"}, "committer": {"name": "Duddino", "email": "rezziandrea106@gmail.com", "date": "2020-04-16T12:05:57Z"}, "message": "Fixed issue with self: &Box<Self>", "tree": {"sha": "46e1b17e712116d1d2912b5a8c6fa15db9916460", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46e1b17e712116d1d2912b5a8c6fa15db9916460"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f36f78f571f06b966d4f80a24dd9287546aeaf94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f36f78f571f06b966d4f80a24dd9287546aeaf94", "html_url": "https://github.com/rust-lang/rust/commit/f36f78f571f06b966d4f80a24dd9287546aeaf94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f36f78f571f06b966d4f80a24dd9287546aeaf94/comments", "author": null, "committer": null, "parents": [{"sha": "ad105ef9a4ad313fea5fb48329ab0795c8012644", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad105ef9a4ad313fea5fb48329ab0795c8012644", "html_url": "https://github.com/rust-lang/rust/commit/ad105ef9a4ad313fea5fb48329ab0795c8012644"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "9bb81c322ab1b9ed9a127a389fdd2df169b9e773", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f36f78f571f06b966d4f80a24dd9287546aeaf94/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f36f78f571f06b966d4f80a24dd9287546aeaf94/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f36f78f571f06b966d4f80a24dd9287546aeaf94", "patch": "@@ -2260,13 +2260,19 @@ fn fn_sig_suggestion(\n         .map(|(i, ty)| {\n             Some(match ty.kind {\n                 ty::Param(_) if assoc.fn_has_self_parameter && i == 0 => \"self\".to_string(),\n-                ty::Ref(reg, _ref_ty, mutability) => {\n+                ty::Ref(reg, ref_ty, mutability) if i == 0 => {\n                     let reg = match &format!(\"{}\", reg)[..] {\n                         \"'_\" | \"\" => String::new(),\n                         reg => format!(\"{} \", reg),\n                     };\n-                    if assoc.fn_has_self_parameter && i == 0 {\n-                        format!(\"&{}{}self\", reg, mutability.prefix_str())\n+                    if assoc.fn_has_self_parameter {\n+                        match ref_ty.kind {\n+                            ty::Param(param) if param.name == kw::SelfUpper => {\n+                                format!(\"&{}{}self\", reg, mutability.prefix_str())\n+                            }\n+\n+                            _ => format!(\"self: {}\", ty),\n+                        }\n                     } else {\n                         format!(\"_: {:?}\", ty)\n                     }"}, {"sha": "fcf52c9e88743093482a5c5365b1cb158638557e", "filename": "src/test/ui/missing/missing-items/auxiliary/m1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f36f78f571f06b966d4f80a24dd9287546aeaf94/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fauxiliary%2Fm1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f36f78f571f06b966d4f80a24dd9287546aeaf94/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fauxiliary%2Fm1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fauxiliary%2Fm1.rs?ref=f36f78f571f06b966d4f80a24dd9287546aeaf94", "patch": "@@ -5,4 +5,5 @@ pub trait X {\n     fn method2(self: Box<Self>, s: String) -> Self::Type;\n     fn method3(other: &Self, s: String) -> Self::Type;\n     fn method4(&self, other: &Self) -> Self::Type;\n+    fn method5(self: &Box<Self>) -> Self::Type;\n }"}, {"sha": "64e9530e61348276b9a7bc51ccb76b9d0697bdd4", "filename": "src/test/ui/missing/missing-items/m2.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f36f78f571f06b966d4f80a24dd9287546aeaf94/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fm2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f36f78f571f06b966d4f80a24dd9287546aeaf94/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fm2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fm2.stderr?ref=f36f78f571f06b966d4f80a24dd9287546aeaf94", "patch": "@@ -1,15 +1,16 @@\n-error[E0046]: not all trait items implemented, missing: `CONSTANT`, `Type`, `method`, `method2`, `method3`, `method4`\n+error[E0046]: not all trait items implemented, missing: `CONSTANT`, `Type`, `method`, `method2`, `method3`, `method4`, `method5`\n   --> $DIR/m2.rs:9:1\n    |\n LL | impl m1::X for X {\n-   | ^^^^^^^^^^^^^^^^ missing `CONSTANT`, `Type`, `method`, `method2`, `method3`, `method4` in implementation\n+   | ^^^^^^^^^^^^^^^^ missing `CONSTANT`, `Type`, `method`, `method2`, `method3`, `method4`, `method5` in implementation\n    |\n    = help: implement the missing item: `const CONSTANT: u32 = 42;`\n    = help: implement the missing item: `type Type = Type;`\n    = help: implement the missing item: `fn method(&self, _: std::string::String) -> <Self as m1::X>::Type { todo!() }`\n    = help: implement the missing item: `fn method2(self: std::boxed::Box<Self>, _: std::string::String) -> <Self as m1::X>::Type { todo!() }`\n    = help: implement the missing item: `fn method3(_: &Self, _: std::string::String) -> <Self as m1::X>::Type { todo!() }`\n    = help: implement the missing item: `fn method4(&self, _: &Self) -> <Self as m1::X>::Type { todo!() }`\n+   = help: implement the missing item: `fn method5(self: &std::boxed::Box<Self>) -> <Self as m1::X>::Type { todo!() }`\n \n error: aborting due to previous error\n "}]}