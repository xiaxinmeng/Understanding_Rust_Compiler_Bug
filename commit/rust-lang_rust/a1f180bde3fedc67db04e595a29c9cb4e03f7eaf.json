{"sha": "a1f180bde3fedc67db04e595a29c9cb4e03f7eaf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExZjE4MGJkZTNmZWRjNjdkYjA0ZTU5NWEyOWM5Y2I0ZTAzZjdlYWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-11T07:42:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-11T07:42:13Z"}, "message": "Auto merge of #43147 - oyvindln:deflate_fix, r=alexcrichton\n\nUse similar compression settings as before updating to use flate2\n\nFixes #42879\n\n(My first PR to rust-lang yay)\n\nThis changes the compression settings back to how they were before the change to use the flate2 crate rather than the in-tree flate library. The specific changes are to use the `Fast` compression level (which should be equivialent to what was used before), and use a raw deflate stream rather than wrapping the stream in a zlib wrapper. The [zlib](https://tools.ietf.org/html/rfc1950) wrapper adds an extra 2 bytes of header data, and 4 bytes for a checksum at the end. The change to use a faster compression level did give some compile speedups in the past (see #37298). Having to calculate a checksum also added a small overhead, which didn't exist before the change to flate2.\n\nr? @alexcrichton", "tree": {"sha": "e2f76e166ca7743ba29aea29fa95b36c84d12685", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2f76e166ca7743ba29aea29fa95b36c84d12685"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1f180bde3fedc67db04e595a29c9cb4e03f7eaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1f180bde3fedc67db04e595a29c9cb4e03f7eaf", "html_url": "https://github.com/rust-lang/rust/commit/a1f180bde3fedc67db04e595a29c9cb4e03f7eaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1f180bde3fedc67db04e595a29c9cb4e03f7eaf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1999bfaa9f961ce2e0c82e97f9bc152d5ce5ed72", "url": "https://api.github.com/repos/rust-lang/rust/commits/1999bfaa9f961ce2e0c82e97f9bc152d5ce5ed72", "html_url": "https://github.com/rust-lang/rust/commit/1999bfaa9f961ce2e0c82e97f9bc152d5ce5ed72"}, {"sha": "37f56a2ab1e4811d2fbbc91befba2d139828ed13", "url": "https://api.github.com/repos/rust-lang/rust/commits/37f56a2ab1e4811d2fbbc91befba2d139828ed13", "html_url": "https://github.com/rust-lang/rust/commit/37f56a2ab1e4811d2fbbc91befba2d139828ed13"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "9bcf590eb8bb3bcb73d25d81bccd9d2b0e1811c7", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1f180bde3fedc67db04e595a29c9cb4e03f7eaf/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f180bde3fedc67db04e595a29c9cb4e03f7eaf/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=a1f180bde3fedc67db04e595a29c9cb4e03f7eaf", "patch": "@@ -242,7 +242,7 @@ use std::io::{self, Read};\n use std::path::{Path, PathBuf};\n use std::time::Instant;\n \n-use flate2::read::ZlibDecoder;\n+use flate2::read::DeflateDecoder;\n use owning_ref::{ErasedBoxRef, OwningRef};\n \n pub struct CrateMismatch {\n@@ -862,7 +862,7 @@ fn get_metadata_section_imp(target: &Target,\n             let compressed_bytes = &buf[header_len..];\n             debug!(\"inflating {} bytes of compressed metadata\", compressed_bytes.len());\n             let mut inflated = Vec::new();\n-            match ZlibDecoder::new(compressed_bytes).read_to_end(&mut inflated) {\n+            match DeflateDecoder::new(compressed_bytes).read_to_end(&mut inflated) {\n                 Ok(_) => {\n                     let buf = unsafe { OwningRef::new_assert_stable_address(inflated) };\n                     buf.map_owner_box().erase_owner()"}, {"sha": "6cbdae7627714576fba5bbac009e075e5da66fb7", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1f180bde3fedc67db04e595a29c9cb4e03f7eaf/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f180bde3fedc67db04e595a29c9cb4e03f7eaf/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=a1f180bde3fedc67db04e595a29c9cb4e03f7eaf", "patch": "@@ -43,7 +43,7 @@ use std::path::{Path, PathBuf};\n use std::process::Command;\n use std::str;\n use flate2::Compression;\n-use flate2::write::ZlibEncoder;\n+use flate2::write::DeflateEncoder;\n use syntax::ast;\n use syntax::attr;\n use syntax_pos::Span;\n@@ -622,7 +622,7 @@ fn link_rlib<'a>(sess: &'a Session,\n                 }\n \n                 let mut bc_data_deflated = Vec::new();\n-                ZlibEncoder::new(&mut bc_data_deflated, Compression::Default)\n+                DeflateEncoder::new(&mut bc_data_deflated, Compression::Fast)\n                     .write_all(&bc_data).unwrap();\n \n                 let mut bc_file_deflated = match fs::File::create(&bc_deflated_filename) {"}, {"sha": "c402bdea2b23f74c5065dcf7417fa9f0ca36ea9e", "filename": "src/librustc_trans/back/lto.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1f180bde3fedc67db04e595a29c9cb4e03f7eaf/src%2Flibrustc_trans%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f180bde3fedc67db04e595a29c9cb4e03f7eaf/src%2Flibrustc_trans%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flto.rs?ref=a1f180bde3fedc67db04e595a29c9cb4e03f7eaf", "patch": "@@ -22,7 +22,7 @@ use rustc::hir::def_id::LOCAL_CRATE;\n use back::write::{ModuleConfig, with_llvm_pmb, CodegenContext};\n \n use libc;\n-use flate2::read::ZlibDecoder;\n+use flate2::read::DeflateDecoder;\n \n use std::io::Read;\n use std::ffi::CString;\n@@ -111,7 +111,7 @@ pub fn run(cgcx: &CodegenContext,\n                             (link::RLIB_BYTECODE_OBJECT_V1_DATA_OFFSET + data_size as usize)];\n \n                         let mut inflated = Vec::new();\n-                        let res = ZlibDecoder::new(compressed_data)\n+                        let res = DeflateDecoder::new(compressed_data)\n                             .read_to_end(&mut inflated);\n                         if res.is_err() {\n                             let msg = format!(\"failed to decompress bc of `{}`\",\n@@ -131,7 +131,7 @@ pub fn run(cgcx: &CodegenContext,\n                     // simply inflate everything and let LLVM decide if it can\n                     // make sense of it\n                     let mut inflated = Vec::new();\n-                    let res = ZlibDecoder::new(bc_encoded)\n+                    let res = DeflateDecoder::new(bc_encoded)\n                         .read_to_end(&mut inflated);\n                     if res.is_err() {\n                         let msg = format!(\"failed to decompress bc of `{}`\","}, {"sha": "ccb4742e4504af89d9cfaa9d37c3f95938cafa66", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1f180bde3fedc67db04e595a29c9cb4e03f7eaf/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f180bde3fedc67db04e595a29c9cb4e03f7eaf/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=a1f180bde3fedc67db04e595a29c9cb4e03f7eaf", "patch": "@@ -730,7 +730,7 @@ fn write_metadata<'a, 'gcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n                             -> (ContextRef, ModuleRef, EncodedMetadata) {\n     use std::io::Write;\n     use flate2::Compression;\n-    use flate2::write::ZlibEncoder;\n+    use flate2::write::DeflateEncoder;\n \n     let (metadata_llcx, metadata_llmod) = unsafe {\n         context::create_context_and_module(tcx.sess, \"metadata\")\n@@ -770,7 +770,7 @@ fn write_metadata<'a, 'gcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n \n     assert!(kind == MetadataKind::Compressed);\n     let mut compressed = cstore.metadata_encoding_version().to_vec();\n-    ZlibEncoder::new(&mut compressed, Compression::Default)\n+    DeflateEncoder::new(&mut compressed, Compression::Fast)\n         .write_all(&metadata.raw_data).unwrap();\n \n     let llmeta = C_bytes_in_context(metadata_llcx, &compressed);"}]}