{"sha": "b70493d095dd24a1b5c5721d2a1bd873444a63ec", "node_id": "C_kwDOAAsO6NoAKGI3MDQ5M2QwOTVkZDI0YTFiNWM1NzIxZDJhMWJkODczNDQ0YTYzZWM", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-01-07T13:38:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-07T13:38:23Z"}, "message": "Merge #11225\n\n11225: internal: Cleanup doc and attribute handling r=Veykril a=Veykril\n\n(very vague PR title but as I tried to fix the mentioned issue I ran into more and more subtle things that were interwoven)\r\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/11215\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "acf6032a6ebecb59a739a0f886fa8b14d1d6478d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acf6032a6ebecb59a739a0f886fa8b14d1d6478d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b70493d095dd24a1b5c5721d2a1bd873444a63ec", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh2EJPCRBK7hj4Ov3rIwAAU04IAH3QmZTCxRE6KthKqwCCNk4x\nUt4CAyTKHzmfmoymkN+AnrzstUkfnHMZwptQG6KSylkJ4z+scWNP5luTDDlZU9l1\nBwayQqRQQoPShobGeO/z+5Sa6b2eYR54wcj8JD/rzO4bA4/ZNNJNyOx1Z09wI1zd\ny9U9baaqUFl7Y6LBv4i9I0Tqsyc7/VxsXpAKFJ56CMjw93SkMft8Peu1pSFnP6vc\ngW0yzxwtznScOwk0XiZk54Y5Y0leVignDOgsGwWwjukMXSLxAa0t4myXFwyGWe2d\ng0IRWfR5Jsncye9iCu82TOalBmmAvltT7/dJy7kmSHIA9G7I+e/hbHtXOfgOho8=\n=66hd\n-----END PGP SIGNATURE-----\n", "payload": "tree acf6032a6ebecb59a739a0f886fa8b14d1d6478d\nparent c09504bd58db6fb59595af1b0e42eb04de35a3bf\nparent 87735e5e9e52e4960068fe6cc24b81757d0620f8\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1641562703 +0000\ncommitter GitHub <noreply@github.com> 1641562703 +0000\n\nMerge #11225\n\n11225: internal: Cleanup doc and attribute handling r=Veykril a=Veykril\n\n(very vague PR title but as I tried to fix the mentioned issue I ran into more and more subtle things that were interwoven)\r\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/11215\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b70493d095dd24a1b5c5721d2a1bd873444a63ec", "html_url": "https://github.com/rust-lang/rust/commit/b70493d095dd24a1b5c5721d2a1bd873444a63ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b70493d095dd24a1b5c5721d2a1bd873444a63ec/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c09504bd58db6fb59595af1b0e42eb04de35a3bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/c09504bd58db6fb59595af1b0e42eb04de35a3bf", "html_url": "https://github.com/rust-lang/rust/commit/c09504bd58db6fb59595af1b0e42eb04de35a3bf"}, {"sha": "87735e5e9e52e4960068fe6cc24b81757d0620f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/87735e5e9e52e4960068fe6cc24b81757d0620f8", "html_url": "https://github.com/rust-lang/rust/commit/87735e5e9e52e4960068fe6cc24b81757d0620f8"}], "stats": {"total": 445, "additions": 277, "deletions": 168}, "files": [{"sha": "c6d401a6d654bf11e34cfc032f1a356e0d6e4e1d", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=b70493d095dd24a1b5c5721d2a1bd873444a63ec", "patch": "@@ -649,8 +649,12 @@ impl Module {\n                             let node = ast_id.to_node(db.upcast());\n                             ast_id.with_value(SyntaxNodePtr::from(AstPtr::new(&node)))\n                         }\n-                        MacroCallKind::Derive { ast_id, .. }\n-                        | MacroCallKind::Attr { ast_id, .. } => {\n+                        MacroCallKind::Derive { ast_id, .. } => {\n+                            // FIXME: point to the attribute instead, this creates very large diagnostics\n+                            let node = ast_id.to_node(db.upcast());\n+                            ast_id.with_value(SyntaxNodePtr::from(AstPtr::new(&node)))\n+                        }\n+                        MacroCallKind::Attr { ast_id, .. } => {\n                             // FIXME: point to the attribute instead, this creates very large diagnostics\n                             let node = ast_id.to_node(db.upcast());\n                             ast_id.with_value(SyntaxNodePtr::from(AstPtr::new(&node)))"}, {"sha": "444fb4ea54c51f6f606693f72e7259823ebcd8c4", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=b70493d095dd24a1b5c5721d2a1bd873444a63ec", "patch": "@@ -18,7 +18,7 @@ use rustc_hash::{FxHashMap, FxHashSet};\n use smallvec::{smallvec, SmallVec};\n use syntax::{\n     algo::skip_trivia_token,\n-    ast::{self, HasAttrs, HasGenericParams, HasLoopBody},\n+    ast::{self, HasAttrs as _, HasGenericParams, HasLoopBody},\n     match_ast, AstNode, AstToken, Direction, SyntaxElement, SyntaxNode, SyntaxNodePtr, SyntaxToken,\n     TextSize, T,\n };\n@@ -27,9 +27,9 @@ use crate::{\n     db::HirDatabase,\n     semantics::source_to_def::{ChildContainer, SourceToDefCache, SourceToDefCtx},\n     source_analyzer::{resolve_hir_path, SourceAnalyzer},\n-    Access, AssocItem, BuiltinAttr, Callable, ConstParam, Crate, Field, Function, HasSource,\n-    HirFileId, Impl, InFile, Label, LifetimeParam, Local, MacroDef, Module, ModuleDef, Name, Path,\n-    ScopeDef, ToolModule, Trait, Type, TypeAlias, TypeParam, VariantDef,\n+    Access, AssocItem, BuiltinAttr, Callable, ConstParam, Crate, Field, Function, HasAttrs as _,\n+    HasSource, HirFileId, Impl, InFile, Label, LifetimeParam, Local, MacroDef, Module, ModuleDef,\n+    Name, Path, ScopeDef, ToolModule, Trait, Type, TypeAlias, TypeParam, VariantDef,\n };\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -486,7 +486,7 @@ impl<'db> SemanticsImpl<'db> {\n         let adt = InFile::new(file_id, &adt);\n         let src = InFile::new(file_id, attr.clone());\n         self.with_ctx(|ctx| {\n-            let res = ctx.attr_to_derive_macro_call(adt, src)?;\n+            let (_, res) = ctx.attr_to_derive_macro_call(adt, src)?;\n             Some(res.to_vec())\n         })\n     }\n@@ -917,15 +917,14 @@ impl<'db> SemanticsImpl<'db> {\n         let tt = derive.token_tree()?;\n         let file = self.find_file(derive.syntax());\n         let adt = derive.syntax().parent().and_then(ast::Adt::cast)?;\n-\n+        let adt_def = ToDef::to_def(self, file.with_value(adt.clone()))?;\n         let res = self.with_ctx(|ctx| {\n-            let attr_def = ctx.attr_to_def(file.with_value(derive.clone()))?;\n-            let derives = ctx.attr_to_derive_macro_call(\n+            let (attr_id, derives) = ctx.attr_to_derive_macro_call(\n                 file.with_value(&adt),\n                 file.with_value(derive.clone()),\n             )?;\n-\n-            let mut derive_paths = attr_def.parse_path_comma_token_tree()?;\n+            let attrs = adt_def.attrs(self.db);\n+            let mut derive_paths = attrs[attr_id].parse_path_comma_token_tree()?;\n \n             let derive_idx = tt\n                 .syntax()\n@@ -1225,7 +1224,6 @@ to_def_impls![\n     (crate::Local, ast::SelfParam, self_param_to_def),\n     (crate::Label, ast::Label, label_to_def),\n     (crate::Adt, ast::Adt, adt_to_def),\n-    (crate::Attr, ast::Attr, attr_to_def),\n ];\n \n fn find_root(node: &SyntaxNode) -> SyntaxNode {"}, {"sha": "f9c6564d01f201c00ea28af6831e96617877977c", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=b70493d095dd24a1b5c5721d2a1bd873444a63ec", "patch": "@@ -87,6 +87,7 @@\n \n use base_db::FileId;\n use hir_def::{\n+    attr::AttrId,\n     child_by_source::ChildBySource,\n     dyn_map::DynMap,\n     expr::{LabelId, PatId},\n@@ -210,19 +211,6 @@ impl SourceToDefCtx<'_, '_> {\n             ast::Adt::Union(it) => self.union_to_def(InFile::new(file_id, it)).map(AdtId::UnionId),\n         }\n     }\n-    pub(super) fn attr_to_def(\n-        &mut self,\n-        InFile { file_id, value }: InFile<ast::Attr>,\n-    ) -> Option<crate::Attr> {\n-        // FIXME: Use dynmap?\n-        let adt = value.syntax().parent().and_then(ast::Adt::cast)?;\n-        let attr_pos = ast::HasAttrs::attrs(&adt).position(|it| it == value)?;\n-        let attrs = {\n-            let def = self.adt_to_def(InFile::new(file_id, adt))?;\n-            self.db.attrs(def.into())\n-        };\n-        attrs.get(attr_pos).cloned()\n-    }\n     pub(super) fn bind_pat_to_def(\n         &mut self,\n         src: InFile<ast::IdentPat>,\n@@ -254,16 +242,16 @@ impl SourceToDefCtx<'_, '_> {\n \n     pub(super) fn item_to_macro_call(&mut self, src: InFile<ast::Item>) -> Option<MacroCallId> {\n         let map = self.dyn_map(src.as_ref())?;\n-        map[keys::ATTR_MACRO].get(&src).copied()\n+        map[keys::ATTR_MACRO_CALL].get(&src).copied()\n     }\n \n     pub(super) fn attr_to_derive_macro_call(\n         &mut self,\n         item: InFile<&ast::Adt>,\n         src: InFile<ast::Attr>,\n-    ) -> Option<&[Option<MacroCallId>]> {\n+    ) -> Option<(AttrId, &[Option<MacroCallId>])> {\n         let map = self.dyn_map(item)?;\n-        map[keys::DERIVE_MACRO].get(&src).map(AsRef::as_ref)\n+        map[keys::DERIVE_MACRO_CALL].get(&src).map(|(id, ids)| (*id, &**ids))\n     }\n \n     fn to_def<Ast: AstNode + 'static, ID: Copy + 'static>(\n@@ -328,7 +316,8 @@ impl SourceToDefCtx<'_, '_> {\n     }\n \n     pub(super) fn macro_to_def(&mut self, src: InFile<ast::Macro>) -> Option<MacroDefId> {\n-        let makro = self.dyn_map(src.as_ref()).and_then(|it| it[keys::MACRO].get(&src).copied());\n+        let makro =\n+            self.dyn_map(src.as_ref()).and_then(|it| it[keys::MACRO_CALL].get(&src).copied());\n         if let res @ Some(_) = makro {\n             return res;\n         }"}, {"sha": "30642f6cc61a3dc42cf03db3b91632c2b7e89ba6", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 38, "deletions": 54, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=b70493d095dd24a1b5c5721d2a1bd873444a63ec", "patch": "@@ -5,7 +5,7 @@ use std::{fmt, hash::Hash, ops, sync::Arc};\n use base_db::CrateId;\n use cfg::{CfgExpr, CfgOptions};\n use either::Either;\n-use hir_expand::{hygiene::Hygiene, name::AsName, AstId, InFile};\n+use hir_expand::{hygiene::Hygiene, name::AsName, AstId, HirFileId, InFile};\n use itertools::Itertools;\n use la_arena::ArenaMap;\n use mbe::{syntax_node_to_token_tree, DelimiterKind, Punct};\n@@ -84,6 +84,14 @@ impl ops::Deref for Attrs {\n     }\n }\n \n+impl ops::Index<AttrId> for Attrs {\n+    type Output = Attr;\n+\n+    fn index(&self, AttrId { ast_index, .. }: AttrId) -> &Self::Output {\n+        &(**self)[ast_index as usize]\n+    }\n+}\n+\n impl ops::Deref for AttrsWithOwner {\n     type Target = Attrs;\n \n@@ -509,23 +517,23 @@ fn inner_attributes(\n ) -> Option<(impl Iterator<Item = ast::Attr>, impl Iterator<Item = ast::Comment>)> {\n     let (attrs, docs) = match_ast! {\n         match syntax {\n-            ast::SourceFile(it) => (it.attrs(), ast::CommentIter::from_syntax_node(it.syntax())),\n+            ast::SourceFile(it) => (it.attrs(), ast::DocCommentIter::from_syntax_node(it.syntax())),\n             ast::ExternBlock(it) => {\n                 let extern_item_list = it.extern_item_list()?;\n-                (extern_item_list.attrs(), ast::CommentIter::from_syntax_node(extern_item_list.syntax()))\n+                (extern_item_list.attrs(), ast::DocCommentIter::from_syntax_node(extern_item_list.syntax()))\n             },\n             ast::Fn(it) => {\n                 let body = it.body()?;\n                 let stmt_list = body.stmt_list()?;\n-                (stmt_list.attrs(), ast::CommentIter::from_syntax_node(body.syntax()))\n+                (stmt_list.attrs(), ast::DocCommentIter::from_syntax_node(body.syntax()))\n             },\n             ast::Impl(it) => {\n                 let assoc_item_list = it.assoc_item_list()?;\n-                (assoc_item_list.attrs(), ast::CommentIter::from_syntax_node(assoc_item_list.syntax()))\n+                (assoc_item_list.attrs(), ast::DocCommentIter::from_syntax_node(assoc_item_list.syntax()))\n             },\n             ast::Module(it) => {\n                 let item_list = it.item_list()?;\n-                (item_list.attrs(), ast::CommentIter::from_syntax_node(item_list.syntax()))\n+                (item_list.attrs(), ast::DocCommentIter::from_syntax_node(item_list.syntax()))\n             },\n             // FIXME: BlockExpr's only accept inner attributes in specific cases\n             // Excerpt from the reference:\n@@ -542,27 +550,20 @@ fn inner_attributes(\n \n #[derive(Debug)]\n pub struct AttrSourceMap {\n-    attrs: Vec<InFile<ast::Attr>>,\n-    doc_comments: Vec<InFile<ast::Comment>>,\n+    source: Vec<Either<ast::Attr, ast::Comment>>,\n+    file_id: HirFileId,\n }\n \n impl AttrSourceMap {\n     fn new(owner: InFile<&dyn ast::HasAttrs>) -> Self {\n-        let mut attrs = Vec::new();\n-        let mut doc_comments = Vec::new();\n-        for (_, attr) in collect_attrs(owner.value) {\n-            match attr {\n-                Either::Left(attr) => attrs.push(owner.with_value(attr)),\n-                Either::Right(comment) => doc_comments.push(owner.with_value(comment)),\n-            }\n+        Self {\n+            source: collect_attrs(owner.value).map(|(_, it)| it).collect(),\n+            file_id: owner.file_id,\n         }\n-\n-        Self { attrs, doc_comments }\n     }\n \n     fn merge(&mut self, other: Self) {\n-        self.attrs.extend(other.attrs);\n-        self.doc_comments.extend(other.doc_comments);\n+        self.source.extend(other.source);\n     }\n \n     /// Maps the lowered `Attr` back to its original syntax node.\n@@ -571,24 +572,15 @@ impl AttrSourceMap {\n     ///\n     /// Note that the returned syntax node might be a `#[cfg_attr]`, or a doc comment, instead of\n     /// the attribute represented by `Attr`.\n-    pub fn source_of(&self, attr: &Attr) -> InFile<Either<ast::Attr, ast::Comment>> {\n+    pub fn source_of(&self, attr: &Attr) -> InFile<&Either<ast::Attr, ast::Comment>> {\n         self.source_of_id(attr.id)\n     }\n \n-    fn source_of_id(&self, id: AttrId) -> InFile<Either<ast::Attr, ast::Comment>> {\n-        if id.is_doc_comment {\n-            self.doc_comments\n-                .get(id.ast_index as usize)\n-                .unwrap_or_else(|| panic!(\"cannot find doc comment at index {:?}\", id))\n-                .clone()\n-                .map(Either::Right)\n-        } else {\n-            self.attrs\n-                .get(id.ast_index as usize)\n-                .unwrap_or_else(|| panic!(\"cannot find `Attr` at index {:?}\", id))\n-                .clone()\n-                .map(Either::Left)\n-        }\n+    fn source_of_id(&self, id: AttrId) -> InFile<&Either<ast::Attr, ast::Comment>> {\n+        self.source\n+            .get(id.ast_index as usize)\n+            .map(|it| InFile::new(self.file_id, it))\n+            .unwrap_or_else(|| panic!(\"cannot find attr at index {:?}\", id))\n     }\n }\n \n@@ -656,8 +648,7 @@ fn get_doc_string_in_attr(it: &ast::Attr) -> Option<ast::String> {\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub(crate) struct AttrId {\n-    is_doc_comment: bool,\n+pub struct AttrId {\n     pub(crate) ast_index: u32,\n }\n \n@@ -816,27 +807,20 @@ fn collect_attrs(\n         .map_or((None, None), |(attrs, docs)| (Some(attrs), Some(docs)));\n \n     let outer_attrs = owner.attrs().filter(|attr| attr.kind().is_outer());\n-    let attrs =\n-        outer_attrs.chain(inner_attrs.into_iter().flatten()).enumerate().map(|(idx, attr)| {\n-            (\n-                AttrId { ast_index: idx as u32, is_doc_comment: false },\n-                attr.syntax().text_range().start(),\n-                Either::Left(attr),\n-            )\n-        });\n+    let attrs = outer_attrs\n+        .chain(inner_attrs.into_iter().flatten())\n+        .map(|attr| (attr.syntax().text_range().start(), Either::Left(attr)));\n \n     let outer_docs =\n-        ast::CommentIter::from_syntax_node(owner.syntax()).filter(ast::Comment::is_outer);\n-    let docs =\n-        outer_docs.chain(inner_docs.into_iter().flatten()).enumerate().map(|(idx, docs_text)| {\n-            (\n-                AttrId { ast_index: idx as u32, is_doc_comment: true },\n-                docs_text.syntax().text_range().start(),\n-                Either::Right(docs_text),\n-            )\n-        });\n+        ast::DocCommentIter::from_syntax_node(owner.syntax()).filter(ast::Comment::is_outer);\n+    let docs = outer_docs\n+        .chain(inner_docs.into_iter().flatten())\n+        .map(|docs_text| (docs_text.syntax().text_range().start(), Either::Right(docs_text)));\n     // sort here by syntax node offset because the source can have doc attributes and doc strings be interleaved\n-    docs.chain(attrs).sorted_by_key(|&(_, offset, _)| offset).map(|(id, _, attr)| (id, attr))\n+    docs.chain(attrs)\n+        .sorted_by_key(|&(offset, _)| offset)\n+        .enumerate()\n+        .map(|(id, (_, attr))| (AttrId { ast_index: id as u32 }, attr))\n }\n \n pub(crate) fn variants_attrs_source_map("}, {"sha": "d314b7fc0155f427d09591aeabe6e12b225b5240", "filename": "crates/hir_def/src/child_by_source.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs?ref=b70493d095dd24a1b5c5721d2a1bd873444a63ec", "patch": "@@ -6,7 +6,7 @@\n \n use either::Either;\n use hir_expand::HirFileId;\n-use syntax::ast::HasAttrs;\n+use syntax::ast::HasDocComments;\n \n use crate::{\n     db::DefDatabase,\n@@ -110,7 +110,7 @@ impl ChildBySource for ItemScope {\n                     // FIXME: Do we need to add proc-macros into a PROCMACRO dynmap here?\n                     Either::Right(_fn) => return,\n                 };\n-                res[keys::MACRO].insert(src, makro);\n+                res[keys::MACRO_CALL].insert(src, makro);\n             }\n         });\n         self.unnamed_consts().for_each(|konst| {\n@@ -120,13 +120,16 @@ impl ChildBySource for ItemScope {\n         self.impls().for_each(|imp| add_impl(db, file_id, res, imp));\n         self.attr_macro_invocs().for_each(|(ast_id, call_id)| {\n             let item = ast_id.with_value(ast_id.to_node(db.upcast()));\n-            res[keys::ATTR_MACRO].insert(item, call_id);\n+            res[keys::ATTR_MACRO_CALL].insert(item, call_id);\n         });\n         self.derive_macro_invocs().for_each(|(ast_id, calls)| {\n-            let item = ast_id.to_node(db.upcast());\n+            let adt = ast_id.to_node(db.upcast());\n             for (attr_id, calls) in calls {\n-                if let Some(attr) = item.attrs().nth(attr_id.ast_index as usize) {\n-                    res[keys::DERIVE_MACRO].insert(ast_id.with_value(attr), calls.into());\n+                if let Some(Either::Right(attr)) =\n+                    adt.doc_comments_and_attrs().nth(attr_id.ast_index as usize)\n+                {\n+                    res[keys::DERIVE_MACRO_CALL]\n+                        .insert(ast_id.with_value(attr), (attr_id, calls.into()));\n                 }\n             }\n         });"}, {"sha": "258d1e0f6c5191a5c17cd97b5d3ef3ef31943344", "filename": "crates/hir_def/src/item_scope.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs?ref=b70493d095dd24a1b5c5721d2a1bd873444a63ec", "patch": "@@ -67,7 +67,7 @@ pub struct ItemScope {\n     /// The derive macro invocations in this scope, keyed by the owner item over the actual derive attributes\n     /// paired with the derive macro invocations for the specific attribute.\n     derive_macros:\n-        FxHashMap<AstId<ast::Item>, SmallVec<[(AttrId, SmallVec<[Option<MacroCallId>; 1]>); 1]>>,\n+        FxHashMap<AstId<ast::Adt>, SmallVec<[(AttrId, SmallVec<[Option<MacroCallId>; 1]>); 1]>>,\n }\n \n pub(crate) static BUILTIN_SCOPE: Lazy<FxHashMap<Name, PerNs>> = Lazy::new(|| {\n@@ -204,12 +204,12 @@ impl ItemScope {\n \n     pub(crate) fn set_derive_macro_invoc(\n         &mut self,\n-        item: AstId<ast::Item>,\n+        adt: AstId<ast::Adt>,\n         call: MacroCallId,\n         attr_id: AttrId,\n         idx: usize,\n     ) {\n-        if let Some(derives) = self.derive_macros.get_mut(&item) {\n+        if let Some(derives) = self.derive_macros.get_mut(&adt) {\n             if let Some((_, invocs)) = derives.iter_mut().find(|&&mut (id, _)| id == attr_id) {\n                 invocs[idx] = Some(call);\n             }\n@@ -221,17 +221,17 @@ impl ItemScope {\n     /// independent of their indices.\n     pub(crate) fn init_derive_attribute(\n         &mut self,\n-        item: AstId<ast::Item>,\n+        adt: AstId<ast::Adt>,\n         attr_id: AttrId,\n         len: usize,\n     ) {\n-        self.derive_macros.entry(item).or_default().push((attr_id, smallvec![None; len]));\n+        self.derive_macros.entry(adt).or_default().push((attr_id, smallvec![None; len]));\n     }\n \n     pub(crate) fn derive_macro_invocs(\n         &self,\n     ) -> impl Iterator<\n-        Item = (AstId<ast::Item>, impl Iterator<Item = (AttrId, &[Option<MacroCallId>])>),\n+        Item = (AstId<ast::Adt>, impl Iterator<Item = (AttrId, &[Option<MacroCallId>])>),\n     > + '_ {\n         self.derive_macros\n             .iter()"}, {"sha": "cb3fd9b94a0878414a702afdbbae48433d56e333", "filename": "crates/hir_def/src/item_tree/tests.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Ftests.rs?ref=b70493d095dd24a1b5c5721d2a1bd873444a63ec", "patch": "@@ -30,9 +30,9 @@ use crate::{A, B};\n use a::{c, d::{e}};\n         \"#,\n         expect![[r##\"\n-            #![doc = \" file comment\"]  // AttrId { is_doc_comment: true, ast_index: 0 }\n-            #![no_std]  // AttrId { is_doc_comment: false, ast_index: 0 }\n-            #![doc = \" another file comment\"]  // AttrId { is_doc_comment: true, ast_index: 1 }\n+            #![doc = \" file comment\"]  // AttrId { ast_index: 0 }\n+            #![no_std]  // AttrId { ast_index: 1 }\n+            #![doc = \" another file comment\"]  // AttrId { ast_index: 2 }\n \n             pub(self) extern crate self as renamed;\n \n@@ -42,7 +42,7 @@ use a::{c, d::{e}};\n \n             pub(self) use globs::*;\n \n-            #[doc = \" docs on import\"]  // AttrId { is_doc_comment: true, ast_index: 0 }\n+            #[doc = \" docs on import\"]  // AttrId { ast_index: 0 }\n             pub(self) use crate::{A, B};\n \n             pub(self) use a::{c, d::{e}};\n@@ -67,15 +67,15 @@ extern \"C\" {\n }\n         \"#,\n         expect![[r##\"\n-            #[on_extern_block]  // AttrId { is_doc_comment: false, ast_index: 0 }\n+            #[on_extern_block]  // AttrId { ast_index: 0 }\n             extern \"C\" {\n-                #[on_extern_type]  // AttrId { is_doc_comment: false, ast_index: 0 }\n+                #[on_extern_type]  // AttrId { ast_index: 0 }\n                 pub(self) type ExType;\n \n-                #[on_extern_static]  // AttrId { is_doc_comment: false, ast_index: 0 }\n+                #[on_extern_static]  // AttrId { ast_index: 0 }\n                 pub(self) static EX_STATIC: u8 = _;\n \n-                #[on_extern_fn]  // AttrId { is_doc_comment: false, ast_index: 0 }\n+                #[on_extern_fn]  // AttrId { ast_index: 0 }\n                 // flags = 0x20\n                 pub(self) fn ex_fn() -> ();\n             }\n@@ -116,14 +116,14 @@ enum E {\n         expect![[r##\"\n             pub(self) struct Unit;\n \n-            #[derive(Debug)]  // AttrId { is_doc_comment: false, ast_index: 0 }\n+            #[derive(Debug)]  // AttrId { ast_index: 0 }\n             pub(self) struct Struct {\n-                #[doc = \" fld docs\"]  // AttrId { is_doc_comment: true, ast_index: 0 }\n+                #[doc = \" fld docs\"]  // AttrId { ast_index: 0 }\n                 pub(self) fld: (),\n             }\n \n             pub(self) struct Tuple(\n-                #[attr]  // AttrId { is_doc_comment: false, ast_index: 0 }\n+                #[attr]  // AttrId { ast_index: 0 }\n                 pub(self) 0: u8,\n             );\n \n@@ -133,14 +133,14 @@ enum E {\n             }\n \n             pub(self) enum E {\n-                #[doc = \" comment on Unit\"]  // AttrId { is_doc_comment: true, ast_index: 0 }\n+                #[doc = \" comment on Unit\"]  // AttrId { ast_index: 0 }\n                 Unit,\n-                #[doc = \" comment on Tuple\"]  // AttrId { is_doc_comment: true, ast_index: 0 }\n+                #[doc = \" comment on Tuple\"]  // AttrId { ast_index: 0 }\n                 Tuple(\n                     pub(self) 0: u8,\n                 ),\n                 Struct {\n-                    #[doc = \" comment on a: u8\"]  // AttrId { is_doc_comment: true, ast_index: 0 }\n+                    #[doc = \" comment on a: u8\"]  // AttrId { ast_index: 0 }\n                     pub(self) a: u8,\n                 },\n             }\n@@ -171,11 +171,11 @@ trait Tr: SuperTrait + 'lifetime {\n \n             pub(self) const _: Anon = _;\n \n-            #[attr]  // AttrId { is_doc_comment: false, ast_index: 0 }\n-            #[inner_attr_in_fn]  // AttrId { is_doc_comment: false, ast_index: 1 }\n+            #[attr]  // AttrId { ast_index: 0 }\n+            #[inner_attr_in_fn]  // AttrId { ast_index: 1 }\n             // flags = 0x2\n             pub(self) fn f(\n-                #[attr]  // AttrId { is_doc_comment: false, ast_index: 0 }\n+                #[attr]  // AttrId { ast_index: 0 }\n                 arg: u8,\n                 _: (),\n             ) -> ();\n@@ -212,8 +212,8 @@ mod inline {\n mod outline;\n         \"#,\n         expect![[r##\"\n-            #[doc = \" outer\"]  // AttrId { is_doc_comment: true, ast_index: 0 }\n-            #[doc = \" inner\"]  // AttrId { is_doc_comment: true, ast_index: 1 }\n+            #[doc = \" outer\"]  // AttrId { ast_index: 0 }\n+            #[doc = \" inner\"]  // AttrId { ast_index: 1 }\n             pub(self) mod inline {\n                 pub(self) use super::*;\n "}, {"sha": "3a9cf6eb81200b0c0d96fac62f68f9caade0e024", "filename": "crates/hir_def/src/keys.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fhir_def%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fhir_def%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fkeys.rs?ref=b70493d095dd24a1b5c5721d2a1bd873444a63ec", "patch": "@@ -7,6 +7,7 @@ use rustc_hash::FxHashMap;\n use syntax::{ast, AstNode, AstPtr};\n \n use crate::{\n+    attr::AttrId,\n     dyn_map::{DynMap, Policy},\n     ConstId, ConstParamId, EnumId, EnumVariantId, FieldId, FunctionId, ImplId, LifetimeParamId,\n     StaticId, StructId, TraitId, TypeAliasId, TypeParamId, UnionId,\n@@ -31,9 +32,9 @@ pub const TYPE_PARAM: Key<ast::TypeParam, TypeParamId> = Key::new();\n pub const LIFETIME_PARAM: Key<ast::LifetimeParam, LifetimeParamId> = Key::new();\n pub const CONST_PARAM: Key<ast::ConstParam, ConstParamId> = Key::new();\n \n-pub const MACRO: Key<ast::Macro, MacroDefId> = Key::new();\n-pub const ATTR_MACRO: Key<ast::Item, MacroCallId> = Key::new();\n-pub const DERIVE_MACRO: Key<ast::Attr, Box<[Option<MacroCallId>]>> = Key::new();\n+pub const MACRO_CALL: Key<ast::Macro, MacroDefId> = Key::new();\n+pub const ATTR_MACRO_CALL: Key<ast::Item, MacroCallId> = Key::new();\n+pub const DERIVE_MACRO_CALL: Key<ast::Attr, (AttrId, Box<[Option<MacroCallId>]>)> = Key::new();\n \n /// XXX: AST Nodes and SyntaxNodes have identity equality semantics: nodes are\n /// equal if they point to exactly the same object."}, {"sha": "c38b498b9c6b4bf276e48281145790c424a08b1e", "filename": "crates/hir_def/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fhir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fhir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flib.rs?ref=b70493d095dd24a1b5c5721d2a1bd873444a63ec", "patch": "@@ -751,7 +751,7 @@ fn macro_call_as_call_id(\n }\n \n fn derive_macro_as_call_id(\n-    item_attr: &AstIdWithPath<ast::Item>,\n+    item_attr: &AstIdWithPath<ast::Adt>,\n     derive_attr: AttrId,\n     db: &dyn db::DefDatabase,\n     krate: CrateId,"}, {"sha": "dc75dc4d91a7e3114954f84b2d130727c16ebb96", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=b70493d095dd24a1b5c5721d2a1bd873444a63ec", "patch": "@@ -8,6 +8,7 @@ use std::iter;\n use base_db::{CrateId, Edition, FileId, ProcMacroId};\n use cfg::{CfgExpr, CfgOptions};\n use hir_expand::{\n+    ast_id_map::FileAstId,\n     builtin_attr_macro::find_builtin_attr,\n     builtin_derive_macro::find_builtin_derive,\n     builtin_fn_macro::find_builtin_macro,\n@@ -30,8 +31,8 @@ use crate::{\n     intern::Interned,\n     item_scope::{ImportType, PerNsGlobImports},\n     item_tree::{\n-        self, Fields, FileItemTreeId, ImportKind, ItemTree, ItemTreeId, MacroCall, MacroDef,\n-        MacroRules, Mod, ModItem, ModKind, TreeId,\n+        self, Fields, FileItemTreeId, ImportKind, ItemTree, ItemTreeId, ItemTreeNode, MacroCall,\n+        MacroDef, MacroRules, Mod, ModItem, ModKind, TreeId,\n     },\n     macro_call_as_call_id,\n     nameres::{\n@@ -217,7 +218,7 @@ struct MacroDirective {\n #[derive(Clone, Debug, Eq, PartialEq)]\n enum MacroDirectiveKind {\n     FnLike { ast_id: AstIdWithPath<ast::MacroCall>, expand_to: ExpandTo },\n-    Derive { ast_id: AstIdWithPath<ast::Item>, derive_attr: AttrId, derive_pos: usize },\n+    Derive { ast_id: AstIdWithPath<ast::Adt>, derive_attr: AttrId, derive_pos: usize },\n     Attr { ast_id: AstIdWithPath<ast::Item>, attr: Attr, mod_item: ModItem, tree: TreeId },\n }\n \n@@ -1129,8 +1130,11 @@ impl DefCollector<'_> {\n                     ) {\n                         // Resolved to `#[derive]`\n \n-                        match mod_item {\n-                            ModItem::Struct(_) | ModItem::Union(_) | ModItem::Enum(_) => (),\n+                        let item_tree = tree.item_tree(self.db);\n+                        let ast_adt_id: FileAstId<ast::Adt> = match *mod_item {\n+                            ModItem::Struct(strukt) => item_tree[strukt].ast_id().upcast(),\n+                            ModItem::Union(union) => item_tree[union].ast_id().upcast(),\n+                            ModItem::Enum(enum_) => item_tree[enum_].ast_id().upcast(),\n                             _ => {\n                                 let diag = DefDiagnostic::invalid_derive_target(\n                                     directive.module_id,\n@@ -1140,7 +1144,8 @@ impl DefCollector<'_> {\n                                 self.def_map.diagnostics.push(diag);\n                                 return recollect_without(self);\n                             }\n-                        }\n+                        };\n+                        let ast_id = ast_id.with_value(ast_adt_id);\n \n                         match attr.parse_path_comma_token_tree() {\n                             Some(derive_macros) => {\n@@ -1274,7 +1279,7 @@ impl DefCollector<'_> {\n                 if let Some(def) = def_map.exported_proc_macros.get(&loc.def) {\n                     if let ProcMacroKind::CustomDerive { helpers } = &def.kind {\n                         self.derive_helpers_in_scope\n-                            .entry(*ast_id)\n+                            .entry(ast_id.map(|it| it.upcast()))\n                             .or_default()\n                             .extend(helpers.iter().cloned());\n                     }"}, {"sha": "60b8601bdd6c87000cc7e87f659e80b1ab2a65bc", "filename": "crates/hir_def/src/nameres/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fhir_def%2Fsrc%2Fnameres%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fhir_def%2Fsrc%2Fnameres%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fdiagnostics.rs?ref=b70493d095dd24a1b5c5721d2a1bd873444a63ec", "patch": "@@ -33,7 +33,7 @@ pub enum DefDiagnosticKind {\n \n     InvalidDeriveTarget { ast: AstId<ast::Item>, id: u32 },\n \n-    MalformedDerive { ast: AstId<ast::Item>, id: u32 },\n+    MalformedDerive { ast: AstId<ast::Adt>, id: u32 },\n }\n \n #[derive(Debug, PartialEq, Eq)]\n@@ -121,7 +121,7 @@ impl DefDiagnostic {\n \n     pub(super) fn malformed_derive(\n         container: LocalModuleId,\n-        ast: AstId<ast::Item>,\n+        ast: AstId<ast::Adt>,\n         id: AttrId,\n     ) -> Self {\n         Self {"}, {"sha": "3e2e1ba630c7334be98a5c38d577c885113f261f", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=b70493d095dd24a1b5c5721d2a1bd873444a63ec", "patch": "@@ -121,7 +121,7 @@ pub enum MacroCallKind {\n         expand_to: ExpandTo,\n     },\n     Derive {\n-        ast_id: AstId<ast::Item>,\n+        ast_id: AstId<ast::Adt>,\n         derive_name: Box<str>,\n         /// Syntactical index of the invoking `#[derive]` attribute.\n         ///\n@@ -328,11 +328,10 @@ impl MacroDefId {\n impl MacroCallKind {\n     /// Returns the file containing the macro invocation.\n     fn file_id(&self) -> HirFileId {\n-        match self {\n-            MacroCallKind::FnLike { ast_id, .. } => ast_id.file_id,\n-            MacroCallKind::Derive { ast_id, .. } | MacroCallKind::Attr { ast_id, .. } => {\n-                ast_id.file_id\n-            }\n+        match *self {\n+            MacroCallKind::FnLike { ast_id: InFile { file_id, .. }, .. }\n+            | MacroCallKind::Derive { ast_id: InFile { file_id, .. }, .. }\n+            | MacroCallKind::Attr { ast_id: InFile { file_id, .. }, .. } => file_id,\n         }\n     }\n \n@@ -341,7 +340,10 @@ impl MacroCallKind {\n             MacroCallKind::FnLike { ast_id, .. } => {\n                 ast_id.with_value(ast_id.to_node(db).syntax().clone())\n             }\n-            MacroCallKind::Derive { ast_id, .. } | MacroCallKind::Attr { ast_id, .. } => {\n+            MacroCallKind::Derive { ast_id, .. } => {\n+                ast_id.with_value(ast_id.to_node(db).syntax().clone())\n+            }\n+            MacroCallKind::Attr { ast_id, .. } => {\n                 ast_id.with_value(ast_id.to_node(db).syntax().clone())\n             }\n         }\n@@ -352,9 +354,8 @@ impl MacroCallKind {\n             MacroCallKind::FnLike { ast_id, .. } => {\n                 Some(ast_id.to_node(db).token_tree()?.syntax().clone())\n             }\n-            MacroCallKind::Derive { ast_id, .. } | MacroCallKind::Attr { ast_id, .. } => {\n-                Some(ast_id.to_node(db).syntax().clone())\n-            }\n+            MacroCallKind::Derive { ast_id, .. } => Some(ast_id.to_node(db).syntax().clone()),\n+            MacroCallKind::Attr { ast_id, .. } => Some(ast_id.to_node(db).syntax().clone()),\n         }\n     }\n "}, {"sha": "46c55da1f98eb6dc1c52ec8d4432b003c4fb4622", "filename": "crates/ide/src/syntax_highlighting/html.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs?ref=b70493d095dd24a1b5c5721d2a1bd873444a63ec", "patch": "@@ -80,6 +80,7 @@ pre                 { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padd\n .numeric_literal    { color: #BFEBBF; }\n .bool_literal       { color: #BFE6EB; }\n .macro              { color: #94BFF3; }\n+.derive             { color: #94BFF3; font-style: italic; }\n .module             { color: #AFD8AF; }\n .value_param        { color: #DCDCCC; }\n .variable           { color: #DCDCCC; }"}, {"sha": "645e6c589dde8c937dbc13cd3450a11c682ac9ef", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_assoc_functions.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html", "raw_url": "https://github.com/rust-lang/rust/raw/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html?ref=b70493d095dd24a1b5c5721d2a1bd873444a63ec", "patch": "@@ -28,6 +28,7 @@\n .numeric_literal    { color: #BFEBBF; }\n .bool_literal       { color: #BFE6EB; }\n .macro              { color: #94BFF3; }\n+.derive             { color: #94BFF3; font-style: italic; }\n .module             { color: #AFD8AF; }\n .value_param        { color: #DCDCCC; }\n .variable           { color: #DCDCCC; }"}, {"sha": "37c8b566829ceb852b7442a4a626cc160e1b52bb", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_crate_root.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_crate_root.html", "raw_url": "https://github.com/rust-lang/rust/raw/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_crate_root.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_crate_root.html?ref=b70493d095dd24a1b5c5721d2a1bd873444a63ec", "patch": "@@ -28,6 +28,7 @@\n .numeric_literal    { color: #BFEBBF; }\n .bool_literal       { color: #BFE6EB; }\n .macro              { color: #94BFF3; }\n+.derive             { color: #94BFF3; font-style: italic; }\n .module             { color: #AFD8AF; }\n .value_param        { color: #DCDCCC; }\n .variable           { color: #DCDCCC; }"}, {"sha": "2f96a1be85cae5d50ac288844c3668e08ae5dab1", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_default_library.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_default_library.html", "raw_url": "https://github.com/rust-lang/rust/raw/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_default_library.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_default_library.html?ref=b70493d095dd24a1b5c5721d2a1bd873444a63ec", "patch": "@@ -28,6 +28,7 @@\n .numeric_literal    { color: #BFEBBF; }\n .bool_literal       { color: #BFE6EB; }\n .macro              { color: #94BFF3; }\n+.derive             { color: #94BFF3; font-style: italic; }\n .module             { color: #AFD8AF; }\n .value_param        { color: #DCDCCC; }\n .variable           { color: #DCDCCC; }"}, {"sha": "6e87147e8b35d6851caf8bfa7cf8aa8c2abc2d2f", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_doctest.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "raw_url": "https://github.com/rust-lang/rust/raw/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html?ref=b70493d095dd24a1b5c5721d2a1bd873444a63ec", "patch": "@@ -28,6 +28,7 @@\n .numeric_literal    { color: #BFEBBF; }\n .bool_literal       { color: #BFE6EB; }\n .macro              { color: #94BFF3; }\n+.derive             { color: #94BFF3; font-style: italic; }\n .module             { color: #AFD8AF; }\n .value_param        { color: #DCDCCC; }\n .variable           { color: #DCDCCC; }"}, {"sha": "3208770d7f1dd0b73ab8fb73b98ff7343ec81371", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_extern_crate.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_extern_crate.html", "raw_url": "https://github.com/rust-lang/rust/raw/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_extern_crate.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_extern_crate.html?ref=b70493d095dd24a1b5c5721d2a1bd873444a63ec", "patch": "@@ -28,6 +28,7 @@\n .numeric_literal    { color: #BFEBBF; }\n .bool_literal       { color: #BFE6EB; }\n .macro              { color: #94BFF3; }\n+.derive             { color: #94BFF3; font-style: italic; }\n .module             { color: #AFD8AF; }\n .value_param        { color: #DCDCCC; }\n .variable           { color: #DCDCCC; }"}, {"sha": "1713306dae2ac9c492f5dc3cd3bfeb8ce6e64b0c", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_injection.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_injection.html", "raw_url": "https://github.com/rust-lang/rust/raw/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_injection.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_injection.html?ref=b70493d095dd24a1b5c5721d2a1bd873444a63ec", "patch": "@@ -28,6 +28,7 @@\n .numeric_literal    { color: #BFEBBF; }\n .bool_literal       { color: #BFE6EB; }\n .macro              { color: #94BFF3; }\n+.derive             { color: #94BFF3; font-style: italic; }\n .module             { color: #AFD8AF; }\n .value_param        { color: #DCDCCC; }\n .variable           { color: #DCDCCC; }"}, {"sha": "07c7881a1f79a14ef657c8c0306f2bbb7b6202f6", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_strings.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "raw_url": "https://github.com/rust-lang/rust/raw/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html?ref=b70493d095dd24a1b5c5721d2a1bd873444a63ec", "patch": "@@ -28,6 +28,7 @@\n .numeric_literal    { color: #BFEBBF; }\n .bool_literal       { color: #BFE6EB; }\n .macro              { color: #94BFF3; }\n+.derive             { color: #94BFF3; font-style: italic; }\n .module             { color: #AFD8AF; }\n .value_param        { color: #DCDCCC; }\n .variable           { color: #DCDCCC; }"}, {"sha": "25bfcb6482f11358066c1e6e1eb609b399438c16", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_unsafe.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html", "raw_url": "https://github.com/rust-lang/rust/raw/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html?ref=b70493d095dd24a1b5c5721d2a1bd873444a63ec", "patch": "@@ -28,6 +28,7 @@\n .numeric_literal    { color: #BFEBBF; }\n .bool_literal       { color: #BFE6EB; }\n .macro              { color: #94BFF3; }\n+.derive             { color: #94BFF3; font-style: italic; }\n .module             { color: #AFD8AF; }\n .value_param        { color: #DCDCCC; }\n .variable           { color: #DCDCCC; }"}, {"sha": "793f554c6379e97fea4af7168076630613fe63bd", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=b70493d095dd24a1b5c5721d2a1bd873444a63ec", "patch": "@@ -28,6 +28,7 @@\n .numeric_literal    { color: #BFEBBF; }\n .bool_literal       { color: #BFE6EB; }\n .macro              { color: #94BFF3; }\n+.derive             { color: #94BFF3; font-style: italic; }\n .module             { color: #AFD8AF; }\n .value_param        { color: #DCDCCC; }\n .variable           { color: #DCDCCC; }\n@@ -89,7 +90,17 @@\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">use</span> <span class=\"self_keyword crate_root\">self</span><span class=\"operator\">::</span><span class=\"struct\">FooCopy</span><span class=\"operator\">::</span><span class=\"brace\">{</span><span class=\"self_keyword\">self</span> <span class=\"keyword\">as</span> <span class=\"struct declaration\">BarCopy</span><span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n+\n+<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"attribute attribute default_library library\">derive</span><span class=\"parenthesis attribute\">(</span><span class=\"derive attribute default_library library\">Copy</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute_bracket attribute\">]</span>\n+<span class=\"comment documentation\">/// This is a doc comment</span>\n+<span class=\"comment\">// This is a normal comment</span>\n+<span class=\"comment documentation\">/// This is a doc comment</span>\n+<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"attribute attribute default_library library\">derive</span><span class=\"parenthesis attribute\">(</span><span class=\"derive attribute default_library library\">Copy</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute_bracket attribute\">]</span>\n+<span class=\"comment\">// This is another normal comment</span>\n+<span class=\"comment documentation\">/// This is another doc comment</span>\n+<span class=\"comment\">// This is another normal comment</span>\n <span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"attribute attribute default_library library\">derive</span><span class=\"parenthesis attribute\">(</span><span class=\"derive attribute default_library library\">Copy</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute_bracket attribute\">]</span>\n+<span class=\"comment\">// The reason for these being here is to test AttrIds</span>\n <span class=\"keyword\">struct</span> <span class=\"struct declaration\">FooCopy</span> <span class=\"brace\">{</span>\n     <span class=\"field declaration\">x</span><span class=\"colon\">:</span> <span class=\"builtin_type\">u32</span><span class=\"comma\">,</span>\n <span class=\"brace\">}</span>"}, {"sha": "2e9ad144f19a420634b1c1334905cfeda1209958", "filename": "crates/ide/src/syntax_highlighting/test_data/injection.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Finjection.html", "raw_url": "https://github.com/rust-lang/rust/raw/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Finjection.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Finjection.html?ref=b70493d095dd24a1b5c5721d2a1bd873444a63ec", "patch": "@@ -28,6 +28,7 @@\n .numeric_literal    { color: #BFEBBF; }\n .bool_literal       { color: #BFE6EB; }\n .macro              { color: #94BFF3; }\n+.derive             { color: #94BFF3; font-style: italic; }\n .module             { color: #AFD8AF; }\n .value_param        { color: #DCDCCC; }\n .variable           { color: #DCDCCC; }"}, {"sha": "e0287f11858beeecaced66bdf87fa481e8062be1", "filename": "crates/ide/src/syntax_highlighting/test_data/rainbow_highlighting.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Frainbow_highlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Frainbow_highlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Frainbow_highlighting.html?ref=b70493d095dd24a1b5c5721d2a1bd873444a63ec", "patch": "@@ -28,6 +28,7 @@\n .numeric_literal    { color: #BFEBBF; }\n .bool_literal       { color: #BFE6EB; }\n .macro              { color: #94BFF3; }\n+.derive             { color: #94BFF3; font-style: italic; }\n .module             { color: #AFD8AF; }\n .value_param        { color: #DCDCCC; }\n .variable           { color: #DCDCCC; }"}, {"sha": "c9c23318f59ff28cbf18001d0ea0aa45ae2cf75b", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=b70493d095dd24a1b5c5721d2a1bd873444a63ec", "patch": "@@ -62,7 +62,17 @@ impl Foo {\n }\n \n use self::FooCopy::{self as BarCopy};\n+\n+#[derive(Copy)]\n+/// This is a doc comment\n+// This is a normal comment\n+/// This is a doc comment\n+#[derive(Copy)]\n+// This is another normal comment\n+/// This is another doc comment\n+// This is another normal comment\n #[derive(Copy)]\n+// The reason for these being here is to test AttrIds\n struct FooCopy {\n     x: u32,\n }"}, {"sha": "51eeea30d2e78017aa1feabcec615a784ddcf51d", "filename": "crates/profile/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fprofile%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fprofile%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2FCargo.toml?ref=b70493d095dd24a1b5c5721d2a1bd873444a63ec", "patch": "@@ -21,7 +21,7 @@ jemalloc-ctl = { version = \"0.4.1\", package = \"tikv-jemalloc-ctl\", optional = tr\n perf-event = \"0.4\"\n \n [target.'cfg(windows)'.dependencies]\n-winapi = { version = \"0.3.8\", features = [\"psapi\"] }\n+winapi = { version = \"0.3.8\", features = [\"processthreadsapi\", \"psapi\"] }\n \n [features]\n cpu_profiler = []"}, {"sha": "bfce91b1d352ecbbb006b005591d2d1c6ff51c25", "filename": "crates/stdx/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fstdx%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fstdx%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2FCargo.toml?ref=b70493d095dd24a1b5c5721d2a1bd873444a63ec", "patch": "@@ -17,7 +17,7 @@ always-assert = { version = \"0.1.2\", features = [\"log\"] }\n \n [target.'cfg(windows)'.dependencies]\n miow = \"0.4.0\"\n-winapi = \"0.3.9\"\n+winapi = { version = \"0.3.9\", features = [\"winerror\"] }\n \n [features]\n # Uncomment to enable for the whole crate graph"}, {"sha": "421120602ee988daf85f69177fa6065ef23a218e", "filename": "crates/syntax/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fsyntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fsyntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast.rs?ref=b70493d095dd24a1b5c5721d2a1bd873444a63ec", "patch": "@@ -30,7 +30,7 @@ pub use self::{\n         QuoteOffsets, Radix,\n     },\n     traits::{\n-        CommentIter, HasArgList, HasAttrs, HasDocComments, HasGenericParams, HasLoopBody,\n+        DocCommentIter, HasArgList, HasAttrs, HasDocComments, HasGenericParams, HasLoopBody,\n         HasModuleItem, HasName, HasTypeBounds, HasVisibility,\n     },\n };"}, {"sha": "8e55afb949eb29f15ca87687677620b71f810c1c", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=b70493d095dd24a1b5c5721d2a1bd873444a63ec", "patch": "@@ -216,6 +216,7 @@ pub struct SourceFile {\n }\n impl ast::HasAttrs for SourceFile {}\n impl ast::HasModuleItem for SourceFile {}\n+impl ast::HasDocComments for SourceFile {}\n impl SourceFile {\n     pub fn shebang_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![shebang]) }\n }\n@@ -227,6 +228,7 @@ pub struct Const {\n impl ast::HasAttrs for Const {}\n impl ast::HasName for Const {}\n impl ast::HasVisibility for Const {}\n+impl ast::HasDocComments for Const {}\n impl Const {\n     pub fn default_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![default]) }\n     pub fn const_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![const]) }\n@@ -246,6 +248,7 @@ impl ast::HasAttrs for Enum {}\n impl ast::HasName for Enum {}\n impl ast::HasVisibility for Enum {}\n impl ast::HasGenericParams for Enum {}\n+impl ast::HasDocComments for Enum {}\n impl Enum {\n     pub fn enum_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![enum]) }\n     pub fn variant_list(&self) -> Option<VariantList> { support::child(&self.syntax) }\n@@ -283,6 +286,7 @@ impl ast::HasAttrs for Fn {}\n impl ast::HasName for Fn {}\n impl ast::HasVisibility for Fn {}\n impl ast::HasGenericParams for Fn {}\n+impl ast::HasDocComments for Fn {}\n impl Fn {\n     pub fn default_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![default]) }\n     pub fn const_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![const]) }\n@@ -303,6 +307,7 @@ pub struct Impl {\n impl ast::HasAttrs for Impl {}\n impl ast::HasVisibility for Impl {}\n impl ast::HasGenericParams for Impl {}\n+impl ast::HasDocComments for Impl {}\n impl Impl {\n     pub fn default_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![default]) }\n     pub fn unsafe_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![unsafe]) }\n@@ -320,6 +325,7 @@ pub struct MacroRules {\n impl ast::HasAttrs for MacroRules {}\n impl ast::HasName for MacroRules {}\n impl ast::HasVisibility for MacroRules {}\n+impl ast::HasDocComments for MacroRules {}\n impl MacroRules {\n     pub fn macro_rules_token(&self) -> Option<SyntaxToken> {\n         support::token(&self.syntax, T![macro_rules])\n@@ -335,6 +341,7 @@ pub struct MacroDef {\n impl ast::HasAttrs for MacroDef {}\n impl ast::HasName for MacroDef {}\n impl ast::HasVisibility for MacroDef {}\n+impl ast::HasDocComments for MacroDef {}\n impl MacroDef {\n     pub fn macro_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![macro]) }\n     pub fn args(&self) -> Option<TokenTree> { support::child(&self.syntax) }\n@@ -348,6 +355,7 @@ pub struct Module {\n impl ast::HasAttrs for Module {}\n impl ast::HasName for Module {}\n impl ast::HasVisibility for Module {}\n+impl ast::HasDocComments for Module {}\n impl Module {\n     pub fn mod_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![mod]) }\n     pub fn item_list(&self) -> Option<ItemList> { support::child(&self.syntax) }\n@@ -361,6 +369,7 @@ pub struct Static {\n impl ast::HasAttrs for Static {}\n impl ast::HasName for Static {}\n impl ast::HasVisibility for Static {}\n+impl ast::HasDocComments for Static {}\n impl Static {\n     pub fn static_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![static]) }\n     pub fn mut_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![mut]) }\n@@ -379,6 +388,7 @@ impl ast::HasAttrs for Struct {}\n impl ast::HasName for Struct {}\n impl ast::HasVisibility for Struct {}\n impl ast::HasGenericParams for Struct {}\n+impl ast::HasDocComments for Struct {}\n impl Struct {\n     pub fn struct_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![struct]) }\n     pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![;]) }\n@@ -394,6 +404,7 @@ impl ast::HasName for Trait {}\n impl ast::HasVisibility for Trait {}\n impl ast::HasGenericParams for Trait {}\n impl ast::HasTypeBounds for Trait {}\n+impl ast::HasDocComments for Trait {}\n impl Trait {\n     pub fn unsafe_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![unsafe]) }\n     pub fn auto_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![auto]) }\n@@ -410,6 +421,7 @@ impl ast::HasName for TypeAlias {}\n impl ast::HasVisibility for TypeAlias {}\n impl ast::HasGenericParams for TypeAlias {}\n impl ast::HasTypeBounds for TypeAlias {}\n+impl ast::HasDocComments for TypeAlias {}\n impl TypeAlias {\n     pub fn default_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![default]) }\n     pub fn type_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![type]) }\n@@ -426,6 +438,7 @@ impl ast::HasAttrs for Union {}\n impl ast::HasName for Union {}\n impl ast::HasVisibility for Union {}\n impl ast::HasGenericParams for Union {}\n+impl ast::HasDocComments for Union {}\n impl Union {\n     pub fn union_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![union]) }\n     pub fn record_field_list(&self) -> Option<RecordFieldList> { support::child(&self.syntax) }\n@@ -437,6 +450,7 @@ pub struct Use {\n }\n impl ast::HasAttrs for Use {}\n impl ast::HasVisibility for Use {}\n+impl ast::HasDocComments for Use {}\n impl Use {\n     pub fn use_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![use]) }\n     pub fn use_tree(&self) -> Option<UseTree> { support::child(&self.syntax) }\n@@ -582,6 +596,7 @@ pub struct RecordField {\n impl ast::HasAttrs for RecordField {}\n impl ast::HasName for RecordField {}\n impl ast::HasVisibility for RecordField {}\n+impl ast::HasDocComments for RecordField {}\n impl RecordField {\n     pub fn colon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![:]) }\n     pub fn ty(&self) -> Option<Type> { support::child(&self.syntax) }\n@@ -593,6 +608,7 @@ pub struct TupleField {\n }\n impl ast::HasAttrs for TupleField {}\n impl ast::HasVisibility for TupleField {}\n+impl ast::HasDocComments for TupleField {}\n impl TupleField {\n     pub fn ty(&self) -> Option<Type> { support::child(&self.syntax) }\n }\n@@ -614,6 +630,7 @@ pub struct Variant {\n impl ast::HasAttrs for Variant {}\n impl ast::HasName for Variant {}\n impl ast::HasVisibility for Variant {}\n+impl ast::HasDocComments for Variant {}\n impl Variant {\n     pub fn field_list(&self) -> Option<FieldList> { support::child(&self.syntax) }\n     pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n@@ -1567,6 +1584,7 @@ pub enum Adt {\n     Union(Union),\n }\n impl ast::HasAttrs for Adt {}\n+impl ast::HasDocComments for Adt {}\n impl ast::HasGenericParams for Adt {}\n impl ast::HasName for Adt {}\n impl ast::HasVisibility for Adt {}\n@@ -1609,6 +1627,12 @@ pub struct AnyHasAttrs {\n }\n impl ast::HasAttrs for AnyHasAttrs {}\n \n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct AnyHasDocComments {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl ast::HasDocComments for AnyHasDocComments {}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct AnyHasGenericParams {\n     pub(crate) syntax: SyntaxNode,\n@@ -3869,6 +3893,27 @@ impl AstNode for AnyHasAttrs {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n+impl AnyHasDocComments {\n+    #[inline]\n+    pub fn new<T: ast::HasDocComments>(node: T) -> AnyHasDocComments {\n+        AnyHasDocComments { syntax: node.syntax().clone() }\n+    }\n+}\n+impl AstNode for AnyHasDocComments {\n+    fn can_cast(kind: SyntaxKind) -> bool {\n+        match kind {\n+            SOURCE_FILE | CONST | ENUM | FN | IMPL | MACRO_RULES | MACRO_DEF | MODULE | STATIC\n+            | STRUCT | TRAIT | TYPE_ALIAS | UNION | USE | RECORD_FIELD | TUPLE_FIELD | VARIANT => {\n+                true\n+            }\n+            _ => false,\n+        }\n+    }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        Self::can_cast(syntax.kind()).then(|| AnyHasDocComments { syntax })\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n impl AnyHasGenericParams {\n     #[inline]\n     pub fn new<T: ast::HasGenericParams>(node: T) -> AnyHasGenericParams {"}, {"sha": "705aa5edac48b9834b22681777d2ca0a48ba1fb9", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=b70493d095dd24a1b5c5721d2a1bd873444a63ec", "patch": "@@ -771,21 +771,14 @@ impl ast::HasLoopBody for ast::ForExpr {\n     }\n }\n \n-impl ast::HasDocComments for ast::SourceFile {}\n-impl ast::HasDocComments for ast::Fn {}\n-impl ast::HasDocComments for ast::Struct {}\n-impl ast::HasDocComments for ast::Union {}\n-impl ast::HasDocComments for ast::RecordField {}\n-impl ast::HasDocComments for ast::TupleField {}\n-impl ast::HasDocComments for ast::Enum {}\n-impl ast::HasDocComments for ast::Variant {}\n-impl ast::HasDocComments for ast::Trait {}\n-impl ast::HasDocComments for ast::Module {}\n-impl ast::HasDocComments for ast::Static {}\n-impl ast::HasDocComments for ast::Const {}\n-impl ast::HasDocComments for ast::TypeAlias {}\n-impl ast::HasDocComments for ast::Impl {}\n-impl ast::HasDocComments for ast::MacroRules {}\n-impl ast::HasDocComments for ast::MacroDef {}\n-impl ast::HasDocComments for ast::Macro {}\n-impl ast::HasDocComments for ast::Use {}\n+impl ast::HasAttrs for ast::AnyHasDocComments {}\n+\n+impl From<ast::Adt> for ast::Item {\n+    fn from(it: ast::Adt) -> Self {\n+        match it {\n+            ast::Adt::Enum(it) => ast::Item::Enum(it),\n+            ast::Adt::Struct(it) => ast::Item::Struct(it),\n+            ast::Adt::Union(it) => ast::Item::Union(it),\n+        }\n+    }\n+}"}, {"sha": "cc7e5150b36069e66d06cbc69f8b303316383099", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=b70493d095dd24a1b5c5721d2a1bd873444a63ec", "patch": "@@ -14,6 +14,10 @@ impl ast::Comment {\n         CommentKind::from_text(self.text())\n     }\n \n+    pub fn is_doc(&self) -> bool {\n+        self.kind().doc.is_some()\n+    }\n+\n     pub fn is_inner(&self) -> bool {\n         self.kind().doc == Some(CommentPlacement::Inner)\n     }"}, {"sha": "98b1087e641073745a797e015e38e3c819cddda5", "filename": "crates/syntax/src/ast/traits.rs", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fsyntax%2Fsrc%2Fast%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fsyntax%2Fsrc%2Fast%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftraits.rs?ref=b70493d095dd24a1b5c5721d2a1bd873444a63ec", "patch": "@@ -1,10 +1,12 @@\n //! Various traits that are implemented by ast nodes.\n //!\n //! The implementations are usually trivial, and live in generated.rs\n+use itertools::Either;\n+\n use crate::{\n     ast::{self, support, AstChildren, AstNode, AstToken},\n     syntax_node::SyntaxElementChildren,\n-    SyntaxToken, T,\n+    SyntaxElement, SyntaxToken, T,\n };\n \n pub trait HasName: AstNode {\n@@ -71,14 +73,17 @@ pub trait HasAttrs: AstNode {\n }\n \n pub trait HasDocComments: HasAttrs {\n-    fn doc_comments(&self) -> CommentIter {\n-        CommentIter { iter: self.syntax().children_with_tokens() }\n+    fn doc_comments(&self) -> DocCommentIter {\n+        DocCommentIter { iter: self.syntax().children_with_tokens() }\n+    }\n+    fn doc_comments_and_attrs(&self) -> AttrCommentIter {\n+        AttrCommentIter { iter: self.syntax().children_with_tokens() }\n     }\n }\n \n-impl CommentIter {\n-    pub fn from_syntax_node(syntax_node: &ast::SyntaxNode) -> CommentIter {\n-        CommentIter { iter: syntax_node.children_with_tokens() }\n+impl DocCommentIter {\n+    pub fn from_syntax_node(syntax_node: &ast::SyntaxNode) -> DocCommentIter {\n+        DocCommentIter { iter: syntax_node.children_with_tokens() }\n     }\n \n     #[cfg(test)]\n@@ -95,13 +100,31 @@ impl CommentIter {\n     }\n }\n \n-pub struct CommentIter {\n+pub struct DocCommentIter {\n     iter: SyntaxElementChildren,\n }\n \n-impl Iterator for CommentIter {\n+impl Iterator for DocCommentIter {\n     type Item = ast::Comment;\n     fn next(&mut self) -> Option<ast::Comment> {\n-        self.iter.by_ref().find_map(|el| el.into_token().and_then(ast::Comment::cast))\n+        self.iter.by_ref().find_map(|el| {\n+            el.into_token().and_then(ast::Comment::cast).filter(ast::Comment::is_doc)\n+        })\n+    }\n+}\n+\n+pub struct AttrCommentIter {\n+    iter: SyntaxElementChildren,\n+}\n+\n+impl Iterator for AttrCommentIter {\n+    type Item = Either<ast::Comment, ast::Attr>;\n+    fn next(&mut self) -> Option<Self::Item> {\n+        self.iter.by_ref().find_map(|el| match el {\n+            SyntaxElement::Node(node) => ast::Attr::cast(node).map(Either::Right),\n+            SyntaxElement::Token(tok) => {\n+                ast::Comment::cast(tok).filter(ast::Comment::is_doc).map(Either::Left)\n+            }\n+        })\n     }\n }"}, {"sha": "ac928402f30820be5ada5fbdf971388cc190c2f3", "filename": "crates/syntax/src/tests/sourcegen_ast.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70493d095dd24a1b5c5721d2a1bd873444a63ec/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs?ref=b70493d095dd24a1b5c5721d2a1bd873444a63ec", "patch": "@@ -777,6 +777,33 @@ fn extract_struct_traits(ast: &mut AstSrc) {\n             extract_struct_trait(node, name, methods);\n         }\n     }\n+\n+    let nodes_with_doc_comments = [\n+        \"SourceFile\",\n+        \"Fn\",\n+        \"Struct\",\n+        \"Union\",\n+        \"RecordField\",\n+        \"TupleField\",\n+        \"Enum\",\n+        \"Variant\",\n+        \"Trait\",\n+        \"Module\",\n+        \"Static\",\n+        \"Const\",\n+        \"TypeAlias\",\n+        \"Impl\",\n+        \"MacroRules\",\n+        \"MacroDef\",\n+        \"Macro\",\n+        \"Use\",\n+    ];\n+\n+    for node in &mut ast.nodes {\n+        if nodes_with_doc_comments.contains(&&*node.name) {\n+            node.traits.push(\"HasDocComments\".into());\n+        }\n+    }\n }\n \n fn extract_struct_trait(node: &mut AstNodeSrc, trait_name: &str, methods: &[&str]) {"}]}