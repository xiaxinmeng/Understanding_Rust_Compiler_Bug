{"sha": "55d5dcb1aaa656df115a326433cd33ab30237612", "node_id": "C_kwDOAAsO6NoAKDU1ZDVkY2IxYWFhNjU2ZGYxMTVhMzI2NDMzY2QzM2FiMzAyMzc2MTI", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@google.com", "date": "2022-07-20T09:30:29Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@google.com", "date": "2022-08-10T23:35:27Z"}, "message": "Fix flags when using clang as linker for Fuchsia\n\nDon't add C runtime or set dynamic linker when linking with clang for\nFuchsia. Clang already does this for us.", "tree": {"sha": "979a753820b5ea1268b292fd0a4b38ddfb63a877", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/979a753820b5ea1268b292fd0a4b38ddfb63a877"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55d5dcb1aaa656df115a326433cd33ab30237612", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55d5dcb1aaa656df115a326433cd33ab30237612", "html_url": "https://github.com/rust-lang/rust/commit/55d5dcb1aaa656df115a326433cd33ab30237612", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55d5dcb1aaa656df115a326433cd33ab30237612/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03d488b48af9f66b91e9400387f781b82411fa82", "url": "https://api.github.com/repos/rust-lang/rust/commits/03d488b48af9f66b91e9400387f781b82411fa82", "html_url": "https://github.com/rust-lang/rust/commit/03d488b48af9f66b91e9400387f781b82411fa82"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "662140d4a408c93a3d1c610aa8caadae65fe9df7", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/55d5dcb1aaa656df115a326433cd33ab30237612/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55d5dcb1aaa656df115a326433cd33ab30237612/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=55d5dcb1aaa656df115a326433cd33ab30237612", "patch": "@@ -1551,12 +1551,21 @@ fn crt_objects_fallback(sess: &Session, crate_type: CrateType) -> bool {\n fn add_pre_link_objects(\n     cmd: &mut dyn Linker,\n     sess: &Session,\n+    flavor: LinkerFlavor,\n     link_output_kind: LinkOutputKind,\n     self_contained: bool,\n ) {\n+    // FIXME: we are currently missing some infra here (per-linker-flavor CRT objects),\n+    // so Fuchsia has to be special-cased.\n     let opts = &sess.target;\n-    let objects =\n-        if self_contained { &opts.pre_link_objects_fallback } else { &opts.pre_link_objects };\n+    let empty = Default::default();\n+    let objects = if self_contained {\n+        &opts.pre_link_objects_fallback\n+    } else if !(sess.target.os == \"fuchsia\" && flavor == LinkerFlavor::Gcc) {\n+        &opts.pre_link_objects\n+    } else {\n+        &empty\n+    };\n     for obj in objects.get(&link_output_kind).iter().copied().flatten() {\n         cmd.add_object(&get_object_file_path(sess, obj, self_contained));\n     }\n@@ -1881,7 +1890,7 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     // ------------ Object code and libraries, order-dependent ------------\n \n     // Pre-link CRT objects.\n-    add_pre_link_objects(cmd, sess, link_output_kind, crt_objects_fallback);\n+    add_pre_link_objects(cmd, sess, flavor, link_output_kind, crt_objects_fallback);\n \n     add_linked_symbol_object(\n         cmd,\n@@ -2018,7 +2027,10 @@ fn add_order_independent_options(\n \n     add_link_script(cmd, sess, tmpdir, crate_type);\n \n-    if sess.target.os == \"fuchsia\" && crate_type == CrateType::Executable {\n+    if sess.target.os == \"fuchsia\"\n+        && crate_type == CrateType::Executable\n+        && flavor != LinkerFlavor::Gcc\n+    {\n         let prefix = if sess.opts.unstable_opts.sanitizer.contains(SanitizerSet::ADDRESS) {\n             \"asan/\"\n         } else {"}, {"sha": "962ad0c66d914b502f92b6640703b2c08b637814", "filename": "compiler/rustc_target/src/spec/fuchsia_base.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/55d5dcb1aaa656df115a326433cd33ab30237612/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55d5dcb1aaa656df115a326433cd33ab30237612/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs?ref=55d5dcb1aaa656df115a326433cd33ab30237612", "patch": "@@ -1,6 +1,11 @@\n use crate::spec::{crt_objects, cvs, LinkOutputKind, LinkerFlavor, LldFlavor, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n+    // This mirrors the linker options provided by clang. We presume lld for\n+    // now. When using clang as the linker it will supply these options for us,\n+    // so we only list them for ld/lld.\n+    //\n+    // https://github.com/llvm/llvm-project/blob/db9322b2066c55254e7691efeab863f43bfcc084/clang/lib/Driver/ToolChains/Fuchsia.cpp#L31\n     let pre_link_args = TargetOptions::link_args(\n         LinkerFlavor::Ld,\n         &["}]}