{"sha": "7b94fdb95cc3dd2bfb2cd6f58fe6f8943cd971e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiOTRmZGI5NWNjM2RkMmJmYjJjZDZmNThmZTZmODk0M2NkOTcxZTY=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-06-05T22:07:03Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-06-08T23:11:32Z"}, "message": "save_analysis: better handle paths", "tree": {"sha": "6716c3e210a32dbfebd9a417764dcefe50b16795", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6716c3e210a32dbfebd9a417764dcefe50b16795"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b94fdb95cc3dd2bfb2cd6f58fe6f8943cd971e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b94fdb95cc3dd2bfb2cd6f58fe6f8943cd971e6", "html_url": "https://github.com/rust-lang/rust/commit/7b94fdb95cc3dd2bfb2cd6f58fe6f8943cd971e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b94fdb95cc3dd2bfb2cd6f58fe6f8943cd971e6/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc10b68e798477066d4b1ec4886a3b1cdc4feb7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc10b68e798477066d4b1ec4886a3b1cdc4feb7e", "html_url": "https://github.com/rust-lang/rust/commit/bc10b68e798477066d4b1ec4886a3b1cdc4feb7e"}], "stats": {"total": 101, "additions": 74, "deletions": 27}, "files": [{"sha": "fdcf98b37af8c6497365a6393ffdb2e029771d0e", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 51, "deletions": 23, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/7b94fdb95cc3dd2bfb2cd6f58fe6f8943cd971e6/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b94fdb95cc3dd2bfb2cd6f58fe6f8943cd971e6/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=7b94fdb95cc3dd2bfb2cd6f58fe6f8943cd971e6", "patch": "@@ -199,23 +199,23 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         self.dumper.compilation_opts(data);\n     }\n \n-    fn write_sub_paths(&mut self, path: &'tcx hir::Path<'tcx>) {\n-        for seg in path.segments {\n+    fn write_segments(&mut self, segments: impl IntoIterator<Item = &'tcx hir::PathSegment<'tcx>>) {\n+        for seg in segments {\n             if let Some(data) = self.save_ctxt.get_path_segment_data(seg) {\n                 self.dumper.dump_ref(data);\n             }\n         }\n     }\n \n+    fn write_sub_paths(&mut self, path: &'tcx hir::Path<'tcx>) {\n+        self.write_segments(path.segments)\n+    }\n+\n     // As write_sub_paths, but does not process the last ident in the path (assuming it\n     // will be processed elsewhere). See note on write_sub_paths about global.\n     fn write_sub_paths_truncated(&mut self, path: &'tcx hir::Path<'tcx>) {\n         if let [segments @ .., _] = path.segments {\n-            for seg in segments {\n-                if let Some(data) = self.save_ctxt.get_path_segment_data(seg) {\n-                    self.dumper.dump_ref(data);\n-                }\n-            }\n+            self.write_segments(segments)\n         }\n     }\n \n@@ -643,7 +643,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         self.nest_tables(map.local_def_id(item.hir_id), |v| {\n             v.visit_ty(&typ);\n             if let &Some(ref trait_ref) = trait_ref {\n-                v.process_path(trait_ref.hir_ref_id, &trait_ref.path);\n+                v.process_path(trait_ref.hir_ref_id, &hir::QPath::Resolved(None, &trait_ref.path));\n             }\n             v.process_generic_params(generics, \"\", item.hir_id);\n             for impl_item in impl_items {\n@@ -746,7 +746,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         }\n     }\n \n-    fn dump_path_ref(&mut self, id: hir::HirId, path: &hir::Path<'tcx>) {\n+    fn dump_path_ref(&mut self, id: hir::HirId, path: &hir::QPath<'tcx>) {\n         let path_data = self.save_ctxt.get_path_data(id, path);\n         if let Some(path_data) = path_data {\n             self.dumper.dump_ref(path_data);\n@@ -760,14 +760,30 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         }\n     }\n \n-    fn process_path(&mut self, id: hir::HirId, path: &'tcx hir::Path<'tcx>) {\n-        if self.span.filter_generated(path.span) {\n+    fn process_path(&mut self, id: hir::HirId, path: &hir::QPath<'tcx>) {\n+        let span = match path {\n+            hir::QPath::Resolved(_, path) => path.span,\n+            hir::QPath::TypeRelative(_, segment) => segment.ident.span,\n+        };\n+        if self.span.filter_generated(span) {\n             return;\n         }\n         self.dump_path_ref(id, path);\n \n         // Type arguments\n-        for seg in path.segments {\n+        let segments = match path {\n+            hir::QPath::Resolved(ty, path) => {\n+                if let Some(ty) = ty {\n+                    self.visit_ty(ty);\n+                }\n+                path.segments\n+            }\n+            hir::QPath::TypeRelative(ty, segment) => {\n+                self.visit_ty(ty);\n+                std::slice::from_ref(*segment)\n+            }\n+        };\n+        for seg in segments {\n             if let Some(ref generic_args) = seg.args {\n                 for arg in generic_args.args {\n                     if let hir::GenericArg::Type(ref ty) = arg {\n@@ -777,7 +793,9 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n             }\n         }\n \n-        self.write_sub_paths_truncated(path);\n+        if let hir::QPath::Resolved(_, path) = path {\n+            self.write_sub_paths_truncated(path);\n+        }\n     }\n \n     fn process_struct_lit(\n@@ -931,9 +949,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         }\n \n         for (id, ref path) in collector.collected_paths {\n-            if let hir::QPath::Resolved(_, path) = path {\n-                self.process_path(id, path);\n-            }\n+            self.process_path(id, path);\n         }\n     }\n \n@@ -1135,7 +1151,10 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n     fn process_bounds(&mut self, bounds: hir::GenericBounds<'tcx>) {\n         for bound in bounds {\n             if let hir::GenericBound::Trait(ref trait_ref, _) = *bound {\n-                self.process_path(trait_ref.trait_ref.hir_ref_id, &trait_ref.trait_ref.path)\n+                self.process_path(\n+                    trait_ref.trait_ref.hir_ref_id,\n+                    &hir::QPath::Resolved(None, &trait_ref.trait_ref.path),\n+                )\n             }\n         }\n     }\n@@ -1330,13 +1349,16 @@ impl<'l, 'tcx> Visitor<'tcx> for DumpVisitor<'l, 'tcx> {\n     fn visit_ty(&mut self, t: &'tcx hir::Ty<'tcx>) {\n         self.process_macro_use(t.span);\n         match t.kind {\n-            hir::TyKind::Path(hir::QPath::Resolved(_, path)) => {\n+            hir::TyKind::Path(ref path) => {\n                 if generated_code(t.span) {\n                     return;\n                 }\n \n                 if let Some(id) = self.lookup_def_id(t.hir_id) {\n-                    let sub_span = path.segments.last().unwrap().ident.span;\n+                    let sub_span = match path {\n+                        hir::QPath::Resolved(_, path) => path.segments.last().unwrap().ident.span,\n+                        hir::QPath::TypeRelative(_, segment) => segment.ident.span,\n+                    };\n                     let span = self.span_from_span(sub_span);\n                     self.dumper.dump_ref(Ref {\n                         kind: RefKind::Type,\n@@ -1345,8 +1367,10 @@ impl<'l, 'tcx> Visitor<'tcx> for DumpVisitor<'l, 'tcx> {\n                     });\n                 }\n \n-                self.write_sub_paths_truncated(path);\n-                intravisit::walk_path(self, path);\n+                if let hir::QPath::Resolved(_, path) = path {\n+                    self.write_sub_paths_truncated(path);\n+                }\n+                intravisit::walk_qpath(self, path, t.hir_id, t.span);\n             }\n             hir::TyKind::Array(ref ty, ref anon_const) => {\n                 self.visit_ty(ty);\n@@ -1355,6 +1379,10 @@ impl<'l, 'tcx> Visitor<'tcx> for DumpVisitor<'l, 'tcx> {\n                     v.visit_expr(&map.body(anon_const.body).value)\n                 });\n             }\n+            hir::TyKind::Def(item_id, _) => {\n+                let item = self.tcx.hir().item(item_id.id);\n+                self.nest_tables(self.tcx.hir().local_def_id(item_id.id), |v| v.visit_item(item));\n+            }\n             _ => intravisit::walk_ty(self, t),\n         }\n     }\n@@ -1432,8 +1460,8 @@ impl<'l, 'tcx> Visitor<'tcx> for DumpVisitor<'l, 'tcx> {\n         self.visit_expr(&arm.body);\n     }\n \n-    fn visit_path(&mut self, p: &'tcx hir::Path<'tcx>, id: hir::HirId) {\n-        self.process_path(id, p);\n+    fn visit_qpath(&mut self, path: &'tcx hir::QPath<'tcx>, id: hir::HirId, _: Span) {\n+        self.process_path(id, path);\n     }\n \n     fn visit_stmt(&mut self, s: &'tcx hir::Stmt<'tcx>) {"}, {"sha": "2f46301e76b4158b412536366ce354b92eac3de0", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7b94fdb95cc3dd2bfb2cd6f58fe6f8943cd971e6/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b94fdb95cc3dd2bfb2cd6f58fe6f8943cd971e6/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=7b94fdb95cc3dd2bfb2cd6f58fe6f8943cd971e6", "patch": "@@ -579,7 +579,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                     ref_id: def_id.or(decl_id).map(id_from_def_id).unwrap_or_else(null_id),\n                 }))\n             }\n-            hir::ExprKind::Path(hir::QPath::Resolved(_, path)) => {\n+            hir::ExprKind::Path(ref path) => {\n                 self.get_path_data(expr.hir_id, path).map(Data::RefData)\n             }\n             _ => {\n@@ -631,8 +631,12 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n         }\n     }\n \n-    pub fn get_path_data(&self, id: hir::HirId, path: &hir::Path<'_>) -> Option<Ref> {\n-        path.segments.last().and_then(|seg| {\n+    pub fn get_path_data(&self, id: hir::HirId, path: &hir::QPath<'_>) -> Option<Ref> {\n+        let segment = match path {\n+            hir::QPath::Resolved(_, path) => path.segments.last(),\n+            hir::QPath::TypeRelative(_, segment) => Some(*segment),\n+        };\n+        segment.and_then(|seg| {\n             self.get_path_segment_data(seg).or_else(|| self.get_path_segment_data_with_id(seg, id))\n         })\n     }"}, {"sha": "52c1c3b99db8d4547fbbe8189bf494b1e71667d6", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7b94fdb95cc3dd2bfb2cd6f58fe6f8943cd971e6/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b94fdb95cc3dd2bfb2cd6f58fe6f8943cd971e6/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=7b94fdb95cc3dd2bfb2cd6f58fe6f8943cd971e6", "patch": "@@ -281,6 +281,22 @@ impl<'hir> Sig for hir::Ty<'hir> {\n                     })\n                 }\n             }\n+            hir::TyKind::Path(hir::QPath::TypeRelative(ty, segment)) => {\n+                let nested_ty = ty.make(offset + 1, id, scx)?;\n+                let prefix = format!(\"<{}>::\", nested_ty.text,);\n+\n+                let name = path_segment_to_string(segment);\n+                let res = scx.get_path_res(id.ok_or(\"Missing id for Path\")?);\n+                let id = id_from_def_id(res.def_id());\n+\n+                let start = offset + prefix.len();\n+                let end = start + name.len();\n+                Ok(Signature {\n+                    text: prefix + &name,\n+                    defs: vec![],\n+                    refs: vec![SigElement { id, start, end }],\n+                })\n+            }\n             hir::TyKind::TraitObject(bounds, ..) => {\n                 // FIXME recurse into bounds\n                 let bounds: Vec<hir::GenericBound<'_>> = bounds\n@@ -311,7 +327,6 @@ impl<'hir> Sig for hir::Ty<'hir> {\n             hir::TyKind::Typeof(_)\n             | hir::TyKind::Infer\n             | hir::TyKind::Def(..)\n-            | hir::TyKind::Path(..)\n             | hir::TyKind::Err => Err(\"Ty\"),\n         }\n     }"}]}