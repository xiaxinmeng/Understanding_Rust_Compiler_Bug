{"sha": "09e41b6784fcc67c4dc3ab681d3d751cc768ca89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5ZTQxYjY3ODRmY2M2N2M0ZGMzYWI2ODFkM2Q3NTFjYzc2OGNhODk=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-28T22:48:55Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-07T21:54:03Z"}, "message": "Add macros from plugins in `libsyntax_ext::register_builtins`.", "tree": {"sha": "e9723d9082470e1a806893d5353f7bde86cce930", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9723d9082470e1a806893d5353f7bde86cce930"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09e41b6784fcc67c4dc3ab681d3d751cc768ca89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09e41b6784fcc67c4dc3ab681d3d751cc768ca89", "html_url": "https://github.com/rust-lang/rust/commit/09e41b6784fcc67c4dc3ab681d3d751cc768ca89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09e41b6784fcc67c4dc3ab681d3d751cc768ca89/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2df25adbed10c4f12e3a0b2d092c6d06c3746454", "url": "https://api.github.com/repos/rust-lang/rust/commits/2df25adbed10c4f12e3a0b2d092c6d06c3746454", "html_url": "https://github.com/rust-lang/rust/commit/2df25adbed10c4f12e3a0b2d092c6d06c3746454"}], "stats": {"total": 44, "additions": 21, "deletions": 23}, "files": [{"sha": "84bd2bab76ce1e66383177bba17a684e589ef1ef", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09e41b6784fcc67c4dc3ab681d3d751cc768ca89/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e41b6784fcc67c4dc3ab681d3d751cc768ca89/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=09e41b6784fcc67c4dc3ab681d3d751cc768ca89", "patch": "@@ -649,7 +649,7 @@ pub fn phase_2_configure_and_expand<'a, F>(sess: &Session,\n     let resolver_arenas = Resolver::arenas();\n     let mut resolver =\n         Resolver::new(sess, &krate, make_glob_map, &mut crate_loader, &resolver_arenas);\n-    syntax_ext::register_builtins(&mut resolver, sess.features.borrow().quote);\n+    syntax_ext::register_builtins(&mut resolver, syntax_exts, sess.features.borrow().quote);\n \n     krate = time(time_passes, \"expansion\", || {\n         // Windows dlls do not have rpaths, so they don't know how to find their\n@@ -686,7 +686,7 @@ pub fn phase_2_configure_and_expand<'a, F>(sess: &Session,\n             ..syntax::ext::expand::ExpansionConfig::default(crate_name.to_string())\n         };\n         let mut ecx = ExtCtxt::new(&sess.parse_sess, krate.config.clone(), cfg, &mut resolver);\n-        let ret = syntax::ext::expand::expand_crate(&mut ecx, syntax_exts, krate);\n+        let ret = syntax::ext::expand::expand_crate(&mut ecx, krate);\n         if cfg!(windows) {\n             env::set_var(\"PATH\", &old_path);\n         }"}, {"sha": "ad1d65c8c5418ba67ee5f3cd1cec32d999b426d3", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/09e41b6784fcc67c4dc3ab681d3d751cc768ca89/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e41b6784fcc67c4dc3ab681d3d751cc768ca89/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=09e41b6784fcc67c4dc3ab681d3d751cc768ca89", "patch": "@@ -738,14 +738,9 @@ impl<'a> ExtCtxt<'a> {\n         token::intern(st)\n     }\n \n-    pub fn initialize(&mut self, user_exts: Vec<NamedSyntaxExtension>, krate: &ast::Crate) {\n+    pub fn initialize(&mut self, krate: &ast::Crate) {\n         self.crate_root = std_inject::injected_crate_name(krate);\n \n-        for (name, extension) in user_exts {\n-            let ident = ast::Ident::with_empty_ctxt(name);\n-            self.resolver.add_ext(ident, Rc::new(extension));\n-        }\n-\n         let mut module = ModuleData {\n             mod_path: vec![token::str_to_ident(&self.ecfg.crate_name)],\n             directory: PathBuf::from(self.parse_sess.codemap().span_to_filename(krate.span)),"}, {"sha": "16e53d270f02e9a6ca9cdb87ead1075403bb9c91", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/09e41b6784fcc67c4dc3ab681d3d751cc768ca89/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e41b6784fcc67c4dc3ab681d3d751cc768ca89/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=09e41b6784fcc67c4dc3ab681d3d751cc768ca89", "patch": "@@ -866,19 +866,15 @@ impl<'feat> ExpansionConfig<'feat> {\n     }\n }\n \n-pub fn expand_crate(cx: &mut ExtCtxt,\n-                    user_exts: Vec<NamedSyntaxExtension>,\n-                    c: Crate) -> Crate {\n-    cx.initialize(user_exts, &c);\n+pub fn expand_crate(cx: &mut ExtCtxt, c: Crate) -> Crate {\n+    cx.initialize(&c);\n     cx.monotonic_expander().expand_crate(c)\n }\n \n // Expands crate using supplied MacroExpander - allows for\n // non-standard expansion behaviour (e.g. step-wise).\n-pub fn expand_crate_with_expander(expander: &mut MacroExpander,\n-                                  user_exts: Vec<NamedSyntaxExtension>,\n-                                  c: Crate) -> Crate {\n-    expander.cx.initialize(user_exts, &c);\n+pub fn expand_crate_with_expander(expander: &mut MacroExpander, c: Crate) -> Crate {\n+    expander.cx.initialize(&c);\n     expander.expand_crate(c)\n }\n "}, {"sha": "195ad424adb0611002a64df13ab9980298a8c9a0", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/09e41b6784fcc67c4dc3ab681d3d751cc768ca89/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e41b6784fcc67c4dc3ab681d3d751cc768ca89/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=09e41b6784fcc67c4dc3ab681d3d751cc768ca89", "patch": "@@ -50,20 +50,23 @@ pub mod deriving;\n \n use std::rc::Rc;\n use syntax::ast;\n-use syntax::ext::base::{MacroExpanderFn, NormalTT, IdentTT, MultiModifier};\n+use syntax::ext::base::{MacroExpanderFn, NormalTT, IdentTT, MultiModifier, NamedSyntaxExtension};\n use syntax::ext::tt::macro_rules::MacroRulesExpander;\n use syntax::parse::token::intern;\n \n-pub fn register_builtins(resolver: &mut syntax::ext::base::Resolver, enable_quotes: bool) {\n+pub fn register_builtins(resolver: &mut syntax::ext::base::Resolver,\n+                         user_exts: Vec<NamedSyntaxExtension>,\n+                         enable_quotes: bool) {\n     let mut register = |name, ext| {\n-        resolver.add_ext(ast::Ident::with_empty_ctxt(intern(name)), Rc::new(ext));\n+        resolver.add_ext(ast::Ident::with_empty_ctxt(name), Rc::new(ext));\n     };\n \n-    register(\"macro_rules\", IdentTT(Box::new(MacroRulesExpander), None, false));\n+    register(intern(\"macro_rules\"), IdentTT(Box::new(MacroRulesExpander), None, false));\n \n     macro_rules! register {\n         ($( $name:ident: $f:expr, )*) => { $(\n-            register(stringify!($name), NormalTT(Box::new($f as MacroExpanderFn), None, false));\n+            register(intern(stringify!($name)),\n+                     NormalTT(Box::new($f as MacroExpanderFn), None, false));\n         )* }\n     }\n \n@@ -108,7 +111,11 @@ pub fn register_builtins(resolver: &mut syntax::ext::base::Resolver, enable_quot\n     }\n \n     // format_args uses `unstable` things internally.\n-    register(\"format_args\", NormalTT(Box::new(format::expand_format_args), None, true));\n+    register(intern(\"format_args\"), NormalTT(Box::new(format::expand_format_args), None, true));\n \n-    register(\"derive\", MultiModifier(Box::new(deriving::expand_derive)));\n+    register(intern(\"derive\"), MultiModifier(Box::new(deriving::expand_derive)));\n+\n+    for (name, ext) in user_exts {\n+        register(name, ext);\n+    }\n }"}]}