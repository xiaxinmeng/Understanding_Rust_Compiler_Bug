{"sha": "0e920fde4f686e2924ea3378ac55d26217b53eaf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlOTIwZmRlNGY2ODZlMjkyNGVhMzM3OGFjNTVkMjYyMTdiNTNlYWY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-03-24T16:31:41Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-04-25T09:04:34Z"}, "message": "Minimize single span suggestions into a note", "tree": {"sha": "e4c2e9500fae8182d65de89f7c79c754c013e8e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4c2e9500fae8182d65de89f7c79c754c013e8e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e920fde4f686e2924ea3378ac55d26217b53eaf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlj/ESIACgkQpp+NIls6\n19kxNQ/+I7fj8KXKM65YPKWCs/kO8z3CTNBeDdgLGLTuqXvZxgcbZq14W0h5tF6A\nthSB1nzAsmsJezkp/UelFhhgYZrC+zQdt0gP78r4anKNAM3B6jOXmPxqQ+OGJE8G\n/FqdPaHBLmU7F3QdHwLfE6rYUbZQ8K0Fxz6ztQ80mFNoPUpiX3VyaMvI0S2eevtK\nXfevWrOQ/yVR5kvq7YaK4m0K4sxmUXzzIfc2yFQJzldqiW40LgRsFbXJbA73Sy5L\nYi7nhUGdAZ7w9M7JEngS63mel8jjz0bkkhGpqPThUxDvbpOQfUCLyacijpCXJJu5\nMDNBkFhicHFpY6piFYZCNNsAJOHQTn7U2lHWGaZqlBeIE1BEe9fJtk4+ccnUumqa\nDvlqbztzQ1wyGlNC6AhZsXOQ0fvVHkh4hpLWPd3srhlkLANnt183pnm7SACfRE9s\nuX7J09aqpmuFCWAXFW7VobQdevvk26Cj+5I7r6IlRPw3jPIx5k3N0vCukk+ApWoL\nkhwIsNoyxmEWHWXrGCQYTCOqH0SzxAYmNwD34PaRVh62bd6B1UaKtwzSrjvGMYvZ\nmPAluM2BqdySDCWXGeAK8IZ3MI6zJtB3FG1yEQE37epjlv7/iNTajoiv3HFqrU1N\nP7o5n6veMi7FrVWxVhq6ol/8yRaCLxYLBjunRkyidChickSV26U=\n=82+t\n-----END PGP SIGNATURE-----", "payload": "tree e4c2e9500fae8182d65de89f7c79c754c013e8e1\nparent 0777c757a6832dc5f8f218377f99960f5477311f\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1490373101 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1493111074 +0200\n\nMinimize single span suggestions into a note\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e920fde4f686e2924ea3378ac55d26217b53eaf", "html_url": "https://github.com/rust-lang/rust/commit/0e920fde4f686e2924ea3378ac55d26217b53eaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e920fde4f686e2924ea3378ac55d26217b53eaf/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0777c757a6832dc5f8f218377f99960f5477311f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0777c757a6832dc5f8f218377f99960f5477311f", "html_url": "https://github.com/rust-lang/rust/commit/0777c757a6832dc5f8f218377f99960f5477311f"}], "stats": {"total": 75, "additions": 47, "deletions": 28}, "files": [{"sha": "38fa35ecb126299a7fec1f01638447bf3c510b07", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0e920fde4f686e2924ea3378ac55d26217b53eaf/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e920fde4f686e2924ea3378ac55d26217b53eaf/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=0e920fde4f686e2924ea3378ac55d26217b53eaf", "patch": "@@ -11,7 +11,6 @@\n use CodeSuggestion;\n use Level;\n use RenderSpan;\n-use RenderSpan::Suggestion;\n use std::fmt;\n use syntax_pos::{MultiSpan, Span};\n use snippet::Style;\n@@ -24,6 +23,7 @@ pub struct Diagnostic {\n     pub code: Option<String>,\n     pub span: MultiSpan,\n     pub children: Vec<SubDiagnostic>,\n+    pub suggestion: Option<CodeSuggestion>,\n }\n \n /// For example a note attached to an error.\n@@ -87,6 +87,7 @@ impl Diagnostic {\n             code: code,\n             span: MultiSpan::new(),\n             children: vec![],\n+            suggestion: None,\n         }\n     }\n \n@@ -202,19 +203,14 @@ impl Diagnostic {\n \n     /// Prints out a message with a suggested edit of the code.\n     ///\n-    /// See `diagnostic::RenderSpan::Suggestion` for more information.\n-    pub fn span_suggestion<S: Into<MultiSpan>>(&mut self,\n-                                               sp: S,\n-                                               msg: &str,\n-                                               suggestion: String)\n-                                               -> &mut Self {\n-        self.sub(Level::Help,\n-                 msg,\n-                 MultiSpan::new(),\n-                 Some(Suggestion(CodeSuggestion {\n-                     msp: sp.into(),\n-                     substitutes: vec![suggestion],\n-                 })));\n+    /// See `diagnostic::CodeSuggestion` for more information.\n+    pub fn span_suggestion(&mut self, sp: Span, msg: &str, suggestion: String) -> &mut Self {\n+        assert!(self.suggestion.is_none());\n+        self.suggestion = Some(CodeSuggestion {\n+            msp: sp.into(),\n+            substitutes: vec![suggestion],\n+            msg: msg.to_owned(),\n+        });\n         self\n     }\n "}, {"sha": "9dfd47b8464d78ed730e51879491f49f4a660133", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0e920fde4f686e2924ea3378ac55d26217b53eaf/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e920fde4f686e2924ea3378ac55d26217b53eaf/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=0e920fde4f686e2924ea3378ac55d26217b53eaf", "patch": "@@ -141,11 +141,11 @@ impl<'a> DiagnosticBuilder<'a> {\n                                                   sp: S,\n                                                   msg: &str)\n                                                   -> &mut Self);\n-    forward!(pub fn span_suggestion<S: Into<MultiSpan>>(&mut self,\n-                                                        sp: S,\n-                                                        msg: &str,\n-                                                        suggestion: String)\n-                                                        -> &mut Self);\n+    forward!(pub fn span_suggestion(&mut self,\n+                                    sp: Span,\n+                                    msg: &str,\n+                                    suggestion: String)\n+                                    -> &mut Self);\n     forward!(pub fn set_span<S: Into<MultiSpan>>(&mut self, sp: S) -> &mut Self);\n     forward!(pub fn code(&mut self, s: String) -> &mut Self);\n "}, {"sha": "8855859d7c4ac28498af972948544a67465b0a1c", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0e920fde4f686e2924ea3378ac55d26217b53eaf/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e920fde4f686e2924ea3378ac55d26217b53eaf/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=0e920fde4f686e2924ea3378ac55d26217b53eaf", "patch": "@@ -34,6 +34,22 @@ impl Emitter for EmitterWriter {\n     fn emit(&mut self, db: &DiagnosticBuilder) {\n         let mut primary_span = db.span.clone();\n         let mut children = db.children.clone();\n+\n+        if let Some(sugg) = db.suggestion.clone() {\n+            assert_eq!(sugg.msp.primary_spans().len(), sugg.substitutes.len());\n+            if sugg.substitutes.len() == 1 {\n+                let msg = format!(\"{} `{}`\", sugg.msg, sugg.substitutes[0]);\n+                primary_span.push_span_label(sugg.msp.primary_spans()[0], msg);\n+            } else {\n+                children.push(SubDiagnostic {\n+                    level: Level::Help,\n+                    message: Vec::new(),\n+                    span: MultiSpan::new(),\n+                    render_span: Some(Suggestion(sugg)),\n+                });\n+            }\n+        }\n+\n         self.fix_multispans_in_std_macros(&mut primary_span, &mut children);\n         self.emit_messages_default(&db.level,\n                                    &db.styled_message(),\n@@ -756,7 +772,7 @@ impl EmitterWriter {\n     /// displayed, keeping the provided highlighting.\n     fn msg_to_buffer(&self,\n                      buffer: &mut StyledBuffer,\n-                     msg: &Vec<(String, Style)>,\n+                     msg: &[(String, Style)],\n                      padding: usize,\n                      label: &str,\n                      override_style: Option<Style>) {\n@@ -1022,7 +1038,6 @@ impl EmitterWriter {\n     fn emit_suggestion_default(&mut self,\n                                suggestion: &CodeSuggestion,\n                                level: &Level,\n-                               msg: &Vec<(String, Style)>,\n                                max_line_num_len: usize)\n                                -> io::Result<()> {\n         use std::borrow::Borrow;\n@@ -1034,7 +1049,7 @@ impl EmitterWriter {\n             buffer.append(0, &level.to_string(), Style::Level(level.clone()));\n             buffer.append(0, \": \", Style::HeaderMsg);\n             self.msg_to_buffer(&mut buffer,\n-                               msg,\n+                               &[(suggestion.msg.to_owned(), Style::NoStyle)],\n                                max_line_num_len,\n                                \"suggestion\",\n                                Some(Style::HeaderMsg));\n@@ -1099,7 +1114,6 @@ impl EmitterWriter {\n                         Some(Suggestion(ref cs)) => {\n                             match self.emit_suggestion_default(cs,\n                                                                &child.level,\n-                                                               &child.styled_message(),\n                                                                max_line_num_len) {\n                                 Err(e) => panic!(\"failed to emit error: {}\", e),\n                                 _ => ()"}, {"sha": "15e73fa4e7600ea7116d22a8a7d626f05927f4d8", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e920fde4f686e2924ea3378ac55d26217b53eaf/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e920fde4f686e2924ea3378ac55d26217b53eaf/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=0e920fde4f686e2924ea3378ac55d26217b53eaf", "patch": "@@ -67,6 +67,7 @@ pub enum RenderSpan {\n pub struct CodeSuggestion {\n     pub msp: MultiSpan,\n     pub substitutes: Vec<String>,\n+    pub msg: String,\n }\n \n pub trait CodeMapper {"}, {"sha": "690fe59f8ce450030fd425259ff6f5bd0c3ec7b3", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e920fde4f686e2924ea3378ac55d26217b53eaf/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e920fde4f686e2924ea3378ac55d26217b53eaf/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=0e920fde4f686e2924ea3378ac55d26217b53eaf", "patch": "@@ -3804,9 +3804,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                       let snip = tcx.sess.codemap().span_to_snippet(base.span);\n                                       if let Ok(snip) = snip {\n                                           err.span_suggestion(expr.span,\n-                                                              \"to access tuple elements, \\\n-                                                               use tuple indexing syntax \\\n-                                                               as shown\",\n+                                                              \"to access tuple elements, use\",\n                                                               format!(\"{}.{}\", snip, i));\n                                           needs_note = false;\n                                       }"}, {"sha": "7d8064a6a450428d61cd90d2013ab2d9dfd6b344", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0e920fde4f686e2924ea3378ac55d26217b53eaf/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e920fde4f686e2924ea3378ac55d26217b53eaf/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=0e920fde4f686e2924ea3378ac55d26217b53eaf", "patch": "@@ -22,8 +22,9 @@\n use codemap::CodeMap;\n use syntax_pos::{self, MacroBacktrace, Span, SpanLabel, MultiSpan};\n use errors::registry::Registry;\n-use errors::{DiagnosticBuilder, SubDiagnostic, RenderSpan, CodeSuggestion, CodeMapper};\n+use errors::{Level, DiagnosticBuilder, SubDiagnostic, RenderSpan, CodeSuggestion, CodeMapper};\n use errors::emitter::Emitter;\n+use errors::snippet::Style;\n \n use std::rc::Rc;\n use std::io::{self, Write};\n@@ -152,12 +153,21 @@ impl Diagnostic {\n     fn from_diagnostic_builder(db: &DiagnosticBuilder,\n                                je: &JsonEmitter)\n                                -> Diagnostic {\n+        let sugg = db.suggestion.as_ref().map(|sugg| {\n+            SubDiagnostic {\n+                level: Level::Help,\n+                message: vec![(sugg.msg.clone(), Style::NoStyle)],\n+                span: MultiSpan::new(),\n+                render_span: Some(RenderSpan::Suggestion(sugg.clone())),\n+            }\n+        });\n+        let sugg = sugg.as_ref();\n         Diagnostic {\n             message: db.message(),\n             code: DiagnosticCode::map_opt_string(db.code.clone(), je),\n             level: db.level.to_str(),\n             spans: DiagnosticSpan::from_multispan(&db.span, je),\n-            children: db.children.iter().map(|c| {\n+            children: db.children.iter().chain(sugg).map(|c| {\n                 Diagnostic::from_sub_diagnostic(c, je)\n             }).collect(),\n             rendered: None,"}]}