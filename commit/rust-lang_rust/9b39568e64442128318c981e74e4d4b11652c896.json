{"sha": "9b39568e64442128318c981e74e4d4b11652c896", "node_id": "C_kwDOAAsO6NoAKDliMzk1NjhlNjQ0NDIxMjgzMThjOTgxZTc0ZTRkNGIxMTY1MmM4OTY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-14T17:24:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-14T17:24:43Z"}, "message": "Rollup merge of #108040 - eggyal:attributes_for_uninteresting_traversals, r=oli-obk\n\nUse derive attributes for uninteresting traversals\n\nIt appears that visiting and folding was implemented on `BitMatrix` solely so that the derive macros could be used on `GeneratorLayout`, however such implementation would not necessarily be correct for other uses (if there were any).  Adding attributes to the derive macro is more correct and potentially more generally useful.\n\nr? ``@oli-obk``", "tree": {"sha": "2a084d08a511da266aec83a2a2cc7cb2ee6cf172", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a084d08a511da266aec83a2a2cc7cb2ee6cf172"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b39568e64442128318c981e74e4d4b11652c896", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj68PbCRBK7hj4Ov3rIwAAKF4IACxQK9LC5ClNzHK+BUpYQTEP\nXv8GlEEWD1h0HqyD53XDajTPUlcVT8Dt+IrNmyTispo7TD3kt1wLmBSkJtmkL9ik\nDqGFxwBQ5j7JrRfrZmGVZxuuyy6HZs9QI9qeoKFVTnGPuwkmoSekw00JG3t0yvOH\nOh/zWKMxh4oc2rRXMLuypfx4ygj/5jDTbXn/mRJM9tIfxw3TZ6Tcw8QL3n2XSTub\n38gy01dzHkCCYjeTamL4iHa66TgPVxuKZMejqs14uL7AqNzs3yxyFkYQNQCPA41c\nUMIjuKNCXNpQDh8Lu+geMWg0j5L3ByKtVObw8U9IMFbolUP9Y122OijrZjVITiE=\n=UVa3\n-----END PGP SIGNATURE-----\n", "payload": "tree 2a084d08a511da266aec83a2a2cc7cb2ee6cf172\nparent 207d6e177ffb80c8f4bb4d49d6770be1e97177de\nparent 3b510e88efebb50c19776cfbaa7f43492cacf71d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1676395483 +0100\ncommitter GitHub <noreply@github.com> 1676395483 +0100\n\nRollup merge of #108040 - eggyal:attributes_for_uninteresting_traversals, r=oli-obk\n\nUse derive attributes for uninteresting traversals\n\nIt appears that visiting and folding was implemented on `BitMatrix` solely so that the derive macros could be used on `GeneratorLayout`, however such implementation would not necessarily be correct for other uses (if there were any).  Adding attributes to the derive macro is more correct and potentially more generally useful.\n\nr? ``@oli-obk``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b39568e64442128318c981e74e4d4b11652c896", "html_url": "https://github.com/rust-lang/rust/commit/9b39568e64442128318c981e74e4d4b11652c896", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b39568e64442128318c981e74e4d4b11652c896/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "207d6e177ffb80c8f4bb4d49d6770be1e97177de", "url": "https://api.github.com/repos/rust-lang/rust/commits/207d6e177ffb80c8f4bb4d49d6770be1e97177de", "html_url": "https://github.com/rust-lang/rust/commit/207d6e177ffb80c8f4bb4d49d6770be1e97177de"}, {"sha": "3b510e88efebb50c19776cfbaa7f43492cacf71d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b510e88efebb50c19776cfbaa7f43492cacf71d", "html_url": "https://github.com/rust-lang/rust/commit/3b510e88efebb50c19776cfbaa7f43492cacf71d"}], "stats": {"total": 90, "additions": 66, "deletions": 24}, "files": [{"sha": "d2cb6ee9f71fbeae63787cf12d42e09b6ddac8ea", "filename": "compiler/rustc_macros/src/lib.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9b39568e64442128318c981e74e4d4b11652c896/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b39568e64442128318c981e74e4d4b11652c896/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Flib.rs?ref=9b39568e64442128318c981e74e4d4b11652c896", "patch": "@@ -124,8 +124,27 @@ decl_derive!([TyDecodable] => serialize::type_decodable_derive);\n decl_derive!([TyEncodable] => serialize::type_encodable_derive);\n decl_derive!([MetadataDecodable] => serialize::meta_decodable_derive);\n decl_derive!([MetadataEncodable] => serialize::meta_encodable_derive);\n-decl_derive!([TypeFoldable, attributes(type_foldable)] => type_foldable::type_foldable_derive);\n-decl_derive!([TypeVisitable, attributes(type_visitable)] => type_visitable::type_visitable_derive);\n+decl_derive!(\n+    [TypeFoldable, attributes(type_foldable)] =>\n+    /// Derives `TypeFoldable` for the annotated `struct` or `enum` (`union` is not supported).\n+    ///\n+    /// The fold will produce a value of the same struct or enum variant as the input, with\n+    /// each field respectively folded using the `TypeFoldable` implementation for its type.\n+    /// However, if a field of a struct or an enum variant is annotated with\n+    /// `#[type_foldable(identity)]` then that field will retain its incumbent value (and its\n+    /// type is not required to implement `TypeFoldable`).\n+    type_foldable::type_foldable_derive\n+);\n+decl_derive!(\n+    [TypeVisitable, attributes(type_visitable)] =>\n+    /// Derives `TypeVisitable` for the annotated `struct` or `enum` (`union` is not supported).\n+    ///\n+    /// Each field of the struct or enum variant will be visited in definition order, using the\n+    /// `TypeVisitable` implementation for its type. However, if a field of a struct or an enum\n+    /// variant is annotated with `#[type_visitable(ignore)]` then that field will not be\n+    /// visited (and its type is not required to implement `TypeVisitable`).\n+    type_visitable::type_visitable_derive\n+);\n decl_derive!([Lift, attributes(lift)] => lift::lift_derive);\n decl_derive!(\n     [Diagnostic, attributes("}, {"sha": "51729a377d9577f063f536139df03a2602530ebb", "filename": "compiler/rustc_macros/src/type_foldable.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9b39568e64442128318c981e74e4d4b11652c896/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b39568e64442128318c981e74e4d4b11652c896/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs?ref=9b39568e64442128318c981e74e4d4b11652c896", "patch": "@@ -1,5 +1,5 @@\n-use quote::quote;\n-use syn::parse_quote;\n+use quote::{quote, ToTokens};\n+use syn::{parse_quote, Attribute, Meta, NestedMeta};\n \n pub fn type_foldable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2::TokenStream {\n     if let syn::Data::Union(_) = s.ast().data {\n@@ -16,8 +16,29 @@ pub fn type_foldable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2::\n         let bindings = vi.bindings();\n         vi.construct(|_, index| {\n             let bind = &bindings[index];\n-            quote! {\n-                ::rustc_middle::ty::fold::ir::TypeFoldable::try_fold_with(#bind, __folder)?\n+\n+            // retain value of fields with #[type_foldable(identity)]\n+            let fixed = bind\n+                .ast()\n+                .attrs\n+                .iter()\n+                .map(Attribute::parse_meta)\n+                .filter_map(Result::ok)\n+                .flat_map(|attr| match attr {\n+                    Meta::List(list) if list.path.is_ident(\"type_foldable\") => list.nested,\n+                    _ => Default::default(),\n+                })\n+                .any(|nested| match nested {\n+                    NestedMeta::Meta(Meta::Path(path)) => path.is_ident(\"identity\"),\n+                    _ => false,\n+                });\n+\n+            if fixed {\n+                bind.to_token_stream()\n+            } else {\n+                quote! {\n+                    ::rustc_middle::ty::fold::ir::TypeFoldable::try_fold_with(#bind, __folder)?\n+                }\n             }\n         })\n     });"}, {"sha": "0a16a371fdc94e25f11b994dfebfbd81151d492d", "filename": "compiler/rustc_macros/src/type_visitable.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9b39568e64442128318c981e74e4d4b11652c896/compiler%2Frustc_macros%2Fsrc%2Ftype_visitable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b39568e64442128318c981e74e4d4b11652c896/compiler%2Frustc_macros%2Fsrc%2Ftype_visitable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Ftype_visitable.rs?ref=9b39568e64442128318c981e74e4d4b11652c896", "patch": "@@ -1,11 +1,28 @@\n use quote::quote;\n-use syn::parse_quote;\n+use syn::{parse_quote, Attribute, Meta, NestedMeta};\n \n pub fn type_visitable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2::TokenStream {\n     if let syn::Data::Union(_) = s.ast().data {\n         panic!(\"cannot derive on union\")\n     }\n \n+    // ignore fields with #[type_visitable(ignore)]\n+    s.filter(|bi| {\n+        !bi.ast()\n+            .attrs\n+            .iter()\n+            .map(Attribute::parse_meta)\n+            .filter_map(Result::ok)\n+            .flat_map(|attr| match attr {\n+                Meta::List(list) if list.path.is_ident(\"type_visitable\") => list.nested,\n+                _ => Default::default(),\n+            })\n+            .any(|nested| match nested {\n+                NestedMeta::Meta(Meta::Path(path)) => path.is_ident(\"ignore\"),\n+                _ => false,\n+            })\n+    });\n+\n     if !s.ast().generics.lifetimes().any(|lt| lt.lifetime.ident == \"tcx\") {\n         s.add_impl_generic(parse_quote! { 'tcx });\n     }"}, {"sha": "13cf996303da112ed124847881e640670adf0a77", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b39568e64442128318c981e74e4d4b11652c896/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b39568e64442128318c981e74e4d4b11652c896/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=9b39568e64442128318c981e74e4d4b11652c896", "patch": "@@ -27,7 +27,6 @@ use polonius_engine::Atom;\n pub use rustc_ast::Mutability;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::graph::dominators::Dominators;\n-use rustc_index::bit_set::BitMatrix;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_serialize::{Decodable, Encodable};\n use rustc_span::symbol::Symbol;\n@@ -62,7 +61,6 @@ pub use terminator::*;\n \n pub mod traversal;\n mod type_foldable;\n-mod type_visitable;\n pub mod visit;\n \n pub use self::generic_graph::graphviz_safe_def_name;"}, {"sha": "e2ab3fd35b331c084cd9510a418e635aa314e087", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b39568e64442128318c981e74e4d4b11652c896/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b39568e64442128318c981e74e4d4b11652c896/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=9b39568e64442128318c981e74e4d4b11652c896", "patch": "@@ -161,6 +161,8 @@ pub struct GeneratorLayout<'tcx> {\n     /// Which saved locals are storage-live at the same time. Locals that do not\n     /// have conflicts with each other are allowed to overlap in the computed\n     /// layout.\n+    #[type_foldable(identity)]\n+    #[type_visitable(ignore)]\n     pub storage_conflicts: BitMatrix<GeneratorSavedLocal, GeneratorSavedLocal>,\n }\n "}, {"sha": "ce06a0ef0608fa09328f4e68087ecc4560cb108b", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b39568e64442128318c981e74e4d4b11652c896/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b39568e64442128318c981e74e4d4b11652c896/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=9b39568e64442128318c981e74e4d4b11652c896", "patch": "@@ -47,9 +47,3 @@ impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<PlaceElem<'tcx>> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_place_elems(v))\n     }\n }\n-\n-impl<'tcx, R: Idx, C: Idx> TypeFoldable<TyCtxt<'tcx>> for BitMatrix<R, C> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n-        Ok(self)\n-    }\n-}"}, {"sha": "e7c5d44b22ed6213267c39f454534d65371cd5a9", "filename": "compiler/rustc_middle/src/mir/type_visitable.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/207d6e177ffb80c8f4bb4d49d6770be1e97177de/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207d6e177ffb80c8f4bb4d49d6770be1e97177de/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs?ref=207d6e177ffb80c8f4bb4d49d6770be1e97177de", "patch": "@@ -1,9 +0,0 @@\n-//! `TypeVisitable` implementations for MIR types\n-\n-use super::*;\n-\n-impl<'tcx, R: Idx, C: Idx> ir::TypeVisitable<TyCtxt<'tcx>> for BitMatrix<R, C> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n-        ControlFlow::Continue(())\n-    }\n-}"}]}