{"sha": "5ab40c8f99607a28441c921690b4498f0186c701", "node_id": "C_kwDOAAsO6NoAKDVhYjQwYzhmOTk2MDdhMjg0NDFjOTIxNjkwYjQ0OThmMDE4NmM3MDE", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2021-12-21T15:40:50Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-01-09T09:21:23Z"}, "message": "Implement `#[rustc_must_implement_one_of]` attribute", "tree": {"sha": "fbd2199c8366c4aa602e15ecaab3a665342dbfed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbd2199c8366c4aa602e15ecaab3a665342dbfed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ab40c8f99607a28441c921690b4498f0186c701", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ab40c8f99607a28441c921690b4498f0186c701", "html_url": "https://github.com/rust-lang/rust/commit/5ab40c8f99607a28441c921690b4498f0186c701", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ab40c8f99607a28441c921690b4498f0186c701/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02fe61b381c2dedc0071e1aacfbe91e0bad1f656", "url": "https://api.github.com/repos/rust-lang/rust/commits/02fe61b381c2dedc0071e1aacfbe91e0bad1f656", "html_url": "https://github.com/rust-lang/rust/commit/02fe61b381c2dedc0071e1aacfbe91e0bad1f656"}], "stats": {"total": 209, "additions": 205, "deletions": 4}, "files": [{"sha": "6f119d5ab8892ab07c7a5d0e431c7970957c9970", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ab40c8f99607a28441c921690b4498f0186c701/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ab40c8f99607a28441c921690b4498f0186c701/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=5ab40c8f99607a28441c921690b4498f0186c701", "patch": "@@ -677,6 +677,12 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         \"the `#[rustc_skip_array_during_method_dispatch]` attribute is used to exclude a trait \\\n         from method dispatch when the receiver is an array, for compatibility in editions < 2021.\"\n     ),\n+    rustc_attr!(\n+        rustc_must_implement_one_of, Normal, template!(List: \"method1, method2, ...\"), ErrorFollowing,\n+        \"the `#[rustc_must_implement_one_of]` attribute is used to change minimal complete \\\n+        definition of a trait, it's currently in experimental form and should be changed before \\\n+        being exposed outside of the std\"\n+    ),\n \n     // ==========================================================================\n     // Internal attributes, Testing:"}, {"sha": "2cdbdfdd99b892ce99a43b59add737e8824023a5", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ab40c8f99607a28441c921690b4498f0186c701/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ab40c8f99607a28441c921690b4498f0186c701/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=5ab40c8f99607a28441c921690b4498f0186c701", "patch": "@@ -820,6 +820,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                     data.skip_array_during_method_dispatch,\n                     data.specialization_kind,\n                     self.def_path_hash(item_id),\n+                    data.must_implement_one_of,\n                 )\n             }\n             EntryKind::TraitAlias => ty::TraitDef::new(\n@@ -831,6 +832,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                 false,\n                 ty::trait_def::TraitSpecializationKind::None,\n                 self.def_path_hash(item_id),\n+                None,\n             ),\n             _ => bug!(\"def-index does not refer to trait or trait alias\"),\n         }"}, {"sha": "c2c231d5cf90e1bc78c47663cc94d37e7c69e6e8", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ab40c8f99607a28441c921690b4498f0186c701/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ab40c8f99607a28441c921690b4498f0186c701/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=5ab40c8f99607a28441c921690b4498f0186c701", "patch": "@@ -1514,6 +1514,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                     is_marker: trait_def.is_marker,\n                     skip_array_during_method_dispatch: trait_def.skip_array_during_method_dispatch,\n                     specialization_kind: trait_def.specialization_kind,\n+                    must_implement_one_of: trait_def.must_implement_one_of.clone(),\n                 };\n \n                 EntryKind::Trait(self.lazy(data))"}, {"sha": "c7e5a7c5d2c7c71d9d02ce45121fadc46f2b7666", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ab40c8f99607a28441c921690b4498f0186c701/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ab40c8f99607a28441c921690b4498f0186c701/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=5ab40c8f99607a28441c921690b4498f0186c701", "patch": "@@ -378,6 +378,7 @@ struct TraitData {\n     is_marker: bool,\n     skip_array_during_method_dispatch: bool,\n     specialization_kind: ty::trait_def::TraitSpecializationKind,\n+    must_implement_one_of: Option<Box<[Ident]>>,\n }\n \n #[derive(TyEncodable, TyDecodable)]"}, {"sha": "c4c75434980d215a824547b059aa587c5c1f3af1", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ab40c8f99607a28441c921690b4498f0186c701/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ab40c8f99607a28441c921690b4498f0186c701/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=5ab40c8f99607a28441c921690b4498f0186c701", "patch": "@@ -1,7 +1,7 @@\n use crate::traits::specialization_graph;\n use crate::ty::fast_reject::{self, SimplifiedType, SimplifyParams, StripReferences};\n use crate::ty::fold::TypeFoldable;\n-use crate::ty::{Ty, TyCtxt};\n+use crate::ty::{Ident, Ty, TyCtxt};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::definitions::DefPathHash;\n@@ -44,6 +44,10 @@ pub struct TraitDef {\n     /// The ICH of this trait's DefPath, cached here so it doesn't have to be\n     /// recomputed all the time.\n     pub def_path_hash: DefPathHash,\n+\n+    /// List of methods from `#[rustc_must_implement_one_of]` attribute one of which\n+    /// must be implemented.\n+    pub must_implement_one_of: Option<Box<[Ident]>>,\n }\n \n /// Whether this trait is treated specially by the standard library\n@@ -87,6 +91,7 @@ impl<'tcx> TraitDef {\n         skip_array_during_method_dispatch: bool,\n         specialization_kind: TraitSpecializationKind,\n         def_path_hash: DefPathHash,\n+        must_implement_one_of: Option<Box<[Ident]>>,\n     ) -> TraitDef {\n         TraitDef {\n             def_id,\n@@ -97,6 +102,7 @@ impl<'tcx> TraitDef {\n             skip_array_during_method_dispatch,\n             specialization_kind,\n             def_path_hash,\n+            must_implement_one_of,\n         }\n     }\n "}, {"sha": "483171917ddf45eec7244f9c6dcc54c5cb3b62dc", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ab40c8f99607a28441c921690b4498f0186c701/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ab40c8f99607a28441c921690b4498f0186c701/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=5ab40c8f99607a28441c921690b4498f0186c701", "patch": "@@ -1136,6 +1136,7 @@ symbols! {\n         rustc_macro_transparency,\n         rustc_main,\n         rustc_mir,\n+        rustc_must_implement_one_of,\n         rustc_nonnull_optimization_guaranteed,\n         rustc_object_lifetime_default,\n         rustc_on_unimplemented,"}, {"sha": "ff1031595662dc74debde360237c4382fa61b05c", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5ab40c8f99607a28441c921690b4498f0186c701/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ab40c8f99607a28441c921690b4498f0186c701/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=5ab40c8f99607a28441c921690b4498f0186c701", "patch": "@@ -979,6 +979,10 @@ fn check_impl_items_against_trait<'tcx>(\n     if let Ok(ancestors) = trait_def.ancestors(tcx, impl_id.to_def_id()) {\n         // Check for missing items from trait\n         let mut missing_items = Vec::new();\n+\n+        let mut must_implement_one_of: Option<FxHashSet<Ident>> =\n+            trait_def.must_implement_one_of.as_deref().map(|slice| slice.iter().copied().collect());\n+\n         for &trait_item_id in tcx.associated_item_def_ids(impl_trait_ref.def_id) {\n             let is_implemented = ancestors\n                 .leaf_def(tcx, trait_item_id)\n@@ -987,12 +991,31 @@ fn check_impl_items_against_trait<'tcx>(\n             if !is_implemented && tcx.impl_defaultness(impl_id).is_final() {\n                 missing_items.push(tcx.associated_item(trait_item_id));\n             }\n+\n+            if let Some(required_items) = &must_implement_one_of {\n+                let trait_item = tcx.associated_item(trait_item_id);\n+\n+                if is_implemented && required_items.contains(&trait_item.ident) {\n+                    must_implement_one_of = None;\n+                }\n+            }\n         }\n \n         if !missing_items.is_empty() {\n             let impl_span = tcx.sess.source_map().guess_head_span(full_impl_span);\n             missing_items_err(tcx, impl_span, &missing_items, full_impl_span);\n         }\n+\n+        if let Some(missing_items) = must_implement_one_of {\n+            let impl_span = tcx.sess.source_map().guess_head_span(full_impl_span);\n+            let attr_span = tcx\n+                .get_attrs(impl_trait_ref.def_id)\n+                .iter()\n+                .find(|attr| attr.has_name(sym::rustc_must_implement_one_of))\n+                .map(|attr| attr.span);\n+\n+            missing_items_must_implement_one_of_err(tcx, impl_span, &missing_items, attr_span);\n+        }\n     }\n }\n "}, {"sha": "17c4bc1b3014fd24157dfd23e4474885cac81d10", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5ab40c8f99607a28441c921690b4498f0186c701/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ab40c8f99607a28441c921690b4498f0186c701/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=5ab40c8f99607a28441c921690b4498f0186c701", "patch": "@@ -641,6 +641,31 @@ fn missing_items_err(\n     err.emit();\n }\n \n+fn missing_items_must_implement_one_of_err(\n+    tcx: TyCtxt<'_>,\n+    impl_span: Span,\n+    missing_items: &FxHashSet<Ident>,\n+    annotation_span: Option<Span>,\n+) {\n+    let missing_items_msg =\n+        missing_items.iter().map(Ident::to_string).collect::<Vec<_>>().join(\"`, `\");\n+\n+    let mut err = struct_span_err!(\n+        tcx.sess,\n+        impl_span,\n+        E0046,\n+        \"not all trait items implemented, missing one of: `{}`\",\n+        missing_items_msg\n+    );\n+    err.span_label(impl_span, format!(\"missing one of `{}` in implementation\", missing_items_msg));\n+\n+    if let Some(annotation_span) = annotation_span {\n+        err.span_note(annotation_span, \"required because of this annotation\");\n+    }\n+\n+    err.emit();\n+}\n+\n /// Resugar `ty::GenericPredicates` in a way suitable to be used in structured suggestions.\n fn bounds_from_generic_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,"}, {"sha": "50613ef7104da8a98a016ebe708bb75e4d83b593", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 80, "deletions": 3, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/5ab40c8f99607a28441c921690b4498f0186c701/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ab40c8f99607a28441c921690b4498f0186c701/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=5ab40c8f99607a28441c921690b4498f0186c701", "patch": "@@ -1198,9 +1198,11 @@ fn super_predicates_that_define_assoc_type(\n fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> ty::TraitDef {\n     let item = tcx.hir().expect_item(def_id.expect_local());\n \n-    let (is_auto, unsafety) = match item.kind {\n-        hir::ItemKind::Trait(is_auto, unsafety, ..) => (is_auto == hir::IsAuto::Yes, unsafety),\n-        hir::ItemKind::TraitAlias(..) => (false, hir::Unsafety::Normal),\n+    let (is_auto, unsafety, items) = match item.kind {\n+        hir::ItemKind::Trait(is_auto, unsafety, .., items) => {\n+            (is_auto == hir::IsAuto::Yes, unsafety, items)\n+        }\n+        hir::ItemKind::TraitAlias(..) => (false, hir::Unsafety::Normal, &[][..]),\n         _ => span_bug!(item.span, \"trait_def_of_item invoked on non-trait\"),\n     };\n \n@@ -1227,6 +1229,80 @@ fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> ty::TraitDef {\n         ty::trait_def::TraitSpecializationKind::None\n     };\n     let def_path_hash = tcx.def_path_hash(def_id);\n+\n+    let must_implement_one_of = tcx\n+        .get_attrs(def_id)\n+        .iter()\n+        .find(|attr| attr.has_name(sym::rustc_must_implement_one_of))\n+        // Check that there are at least 2 arguments of `#[rustc_must_implement_one_of]`\n+        // and that they are all identifiers\n+        .and_then(|attr| match attr.meta_item_list() {\n+            Some(items) if items.len() < 2 => {\n+                tcx.sess\n+                    .struct_span_err(\n+                        attr.span,\n+                        \"the `#[rustc_must_implement_one_of]` attribute must be \\\n+                        used with at least 2 args\",\n+                    )\n+                    .emit();\n+\n+                None\n+            }\n+            Some(items) => items\n+                .into_iter()\n+                .map(|item| item.ident().ok_or(item.span()))\n+                .collect::<Result<Box<[_]>, _>>()\n+                .map_err(|span| {\n+                    tcx.sess.struct_span_err(span, \"must be an identifier of a method\").emit();\n+                })\n+                .ok()\n+                .zip(Some(attr.span)),\n+            // Error is reported by `rustc_attr!`\n+            None => None,\n+        })\n+        // Check that all arguments of `#[rustc_must_implement_one_of]` reference\n+        // methods in the trait with default implementations\n+        .and_then(|(list, attr_span)| {\n+            let errors = list.iter().filter_map(|ident| {\n+                let item = items.iter().find(|item| item.ident == *ident);\n+\n+                match item {\n+                    Some(item) if matches!(item.kind, hir::AssocItemKind::Fn { .. }) => {\n+                        if !item.defaultness.has_value() {\n+                            tcx.sess\n+                                .struct_span_err(\n+                                    item.span,\n+                                    \"This method doesn't have a default implementation\",\n+                                )\n+                                .span_note(attr_span, \"required by this annotation\")\n+                                .emit();\n+\n+                            return Some(());\n+                        }\n+\n+                        return None;\n+                    }\n+                    Some(item) => tcx\n+                        .sess\n+                        .struct_span_err(item.span, \"Not a method\")\n+                        .span_note(attr_span, \"required by this annotation\")\n+                        .note(\n+                            \"All `#[rustc_must_implement_one_of]` arguments \\\n+                            must be method identifiers\",\n+                        )\n+                        .emit(),\n+                    None => tcx\n+                        .sess\n+                        .struct_span_err(ident.span, \"Method not found in this trait\")\n+                        .emit(),\n+                }\n+\n+                Some(())\n+            });\n+\n+            (errors.count() == 0).then_some(list)\n+        });\n+\n     ty::TraitDef::new(\n         def_id,\n         unsafety,\n@@ -1236,6 +1312,7 @@ fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> ty::TraitDef {\n         skip_array_during_method_dispatch,\n         spec_kind,\n         def_path_hash,\n+        must_implement_one_of,\n     )\n }\n "}, {"sha": "f98d3bdc3fa5e71c34f81e48ba26da456120b499", "filename": "src/test/ui/rustc_must_implement_one_of.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5ab40c8f99607a28441c921690b4498f0186c701/src%2Ftest%2Fui%2Frustc_must_implement_one_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ab40c8f99607a28441c921690b4498f0186c701/src%2Ftest%2Fui%2Frustc_must_implement_one_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustc_must_implement_one_of.rs?ref=5ab40c8f99607a28441c921690b4498f0186c701", "patch": "@@ -0,0 +1,44 @@\n+#![feature(rustc_attrs)]\n+\n+#[rustc_must_implement_one_of(eq, neq)]\n+trait Equal {\n+    fn eq(&self, other: &Self) -> bool {\n+        !self.neq(other)\n+    }\n+\n+    fn neq(&self, other: &Self) -> bool {\n+        !self.eq(other)\n+    }\n+}\n+\n+struct T0;\n+struct T1;\n+struct T2;\n+struct T3;\n+\n+impl Equal for T0 {\n+    fn eq(&self, _other: &Self) -> bool {\n+        true\n+    }\n+}\n+\n+impl Equal for T1 {\n+    fn neq(&self, _other: &Self) -> bool {\n+        false\n+    }\n+}\n+\n+impl Equal for T2 {\n+    fn eq(&self, _other: &Self) -> bool {\n+        true\n+    }\n+\n+    fn neq(&self, _other: &Self) -> bool {\n+        false\n+    }\n+}\n+\n+impl Equal for T3 {}\n+//~^ not all trait items implemented, missing one of: `neq`, `eq`\n+\n+fn main() {}"}, {"sha": "53c4e71cf8b43e3d3e673d94d79c5ac09f500fe7", "filename": "src/test/ui/rustc_must_implement_one_of.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5ab40c8f99607a28441c921690b4498f0186c701/src%2Ftest%2Fui%2Frustc_must_implement_one_of.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ab40c8f99607a28441c921690b4498f0186c701/src%2Ftest%2Fui%2Frustc_must_implement_one_of.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustc_must_implement_one_of.stderr?ref=5ab40c8f99607a28441c921690b4498f0186c701", "patch": "@@ -0,0 +1,15 @@\n+error[E0046]: not all trait items implemented, missing one of: `neq`, `eq`\n+  --> $DIR/rustc_must_implement_one_of.rs:41:1\n+   |\n+LL | impl Equal for T3 {}\n+   | ^^^^^^^^^^^^^^^^^ missing one of `neq`, `eq` in implementation\n+   |\n+note: required because of this annotation\n+  --> $DIR/rustc_must_implement_one_of.rs:3:1\n+   |\n+LL | #[rustc_must_implement_one_of(eq, neq)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0046`."}]}