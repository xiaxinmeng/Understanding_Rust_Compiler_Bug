{"sha": "469f394b251feebfb16090303da59206ba25acc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2OWYzOTRiMjUxZmVlYmZiMTYwOTAzMDNkYTU5MjA2YmEyNWFjYzY=", "commit": {"author": {"name": "Philipp Br\u00fcschweiler", "email": "blei42@gmail.com", "date": "2013-06-20T09:39:49Z"}, "committer": {"name": "Philipp Br\u00fcschweiler", "email": "blei42@gmail.com", "date": "2013-06-23T10:49:16Z"}, "message": "Remove intrinsic module\n\nTo achieve this, the following changes were made:\n* Move TyDesc, TyVisitor and Opaque to std::unstable::intrinsics\n* Convert TyDesc, TyVisitor and Opaque to lang items instead of specially\n  handling the intrinsics module\n* Removed TypeDesc, FreeGlue and get_type_desc() from sys\n\nFixes #3475.", "tree": {"sha": "1cd2544d23a70dec0914d76dc20e7cdd64829725", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cd2544d23a70dec0914d76dc20e7cdd64829725"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/469f394b251feebfb16090303da59206ba25acc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/469f394b251feebfb16090303da59206ba25acc6", "html_url": "https://github.com/rust-lang/rust/commit/469f394b251feebfb16090303da59206ba25acc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/469f394b251feebfb16090303da59206ba25acc6/comments", "author": {"login": "Blei", "id": 52674, "node_id": "MDQ6VXNlcjUyNjc0", "avatar_url": "https://avatars.githubusercontent.com/u/52674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Blei", "html_url": "https://github.com/Blei", "followers_url": "https://api.github.com/users/Blei/followers", "following_url": "https://api.github.com/users/Blei/following{/other_user}", "gists_url": "https://api.github.com/users/Blei/gists{/gist_id}", "starred_url": "https://api.github.com/users/Blei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Blei/subscriptions", "organizations_url": "https://api.github.com/users/Blei/orgs", "repos_url": "https://api.github.com/users/Blei/repos", "events_url": "https://api.github.com/users/Blei/events{/privacy}", "received_events_url": "https://api.github.com/users/Blei/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Blei", "id": 52674, "node_id": "MDQ6VXNlcjUyNjc0", "avatar_url": "https://avatars.githubusercontent.com/u/52674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Blei", "html_url": "https://github.com/Blei", "followers_url": "https://api.github.com/users/Blei/followers", "following_url": "https://api.github.com/users/Blei/following{/other_user}", "gists_url": "https://api.github.com/users/Blei/gists{/gist_id}", "starred_url": "https://api.github.com/users/Blei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Blei/subscriptions", "organizations_url": "https://api.github.com/users/Blei/orgs", "repos_url": "https://api.github.com/users/Blei/repos", "events_url": "https://api.github.com/users/Blei/events{/privacy}", "received_events_url": "https://api.github.com/users/Blei/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2c5642d134df70755e0aede94074767cd3958eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2c5642d134df70755e0aede94074767cd3958eb", "html_url": "https://github.com/rust-lang/rust/commit/f2c5642d134df70755e0aede94074767cd3958eb"}], "stats": {"total": 655, "additions": 298, "deletions": 357}, "files": [{"sha": "a7d5660cd2e4d7bca5b708994b4fb087b8cbf7af", "filename": "src/libextra/arena.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/469f394b251feebfb16090303da59206ba25acc6/src%2Flibextra%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/469f394b251feebfb16090303da59206ba25acc6/src%2Flibextra%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farena.rs?ref=469f394b251feebfb16090303da59206ba25acc6", "patch": "@@ -43,20 +43,27 @@ use core::cast::{transmute, transmute_mut_region};\n use core::cast;\n use core::libc::size_t;\n use core::ptr;\n-use core::sys::TypeDesc;\n use core::sys;\n use core::uint;\n use core::vec;\n use core::unstable::intrinsics;\n \n+#[cfg(stage0)]\n+use intrinsic::{get_tydesc, TyDesc};\n+#[cfg(not(stage0))]\n+use core::unstable::intrinsics::{get_tydesc, TyDesc};\n+\n pub mod rustrt {\n     use core::libc::size_t;\n-    use core::sys::TypeDesc;\n+    #[cfg(stage0)]\n+    use intrinsic::{TyDesc};\n+    #[cfg(not(stage0))]\n+    use core::unstable::intrinsics::{TyDesc};\n \n     pub extern {\n         #[rust_stack]\n         unsafe fn rust_call_tydesc_glue(root: *u8,\n-                                        tydesc: *TypeDesc,\n+                                        tydesc: *TyDesc,\n                                         field: size_t);\n     }\n }\n@@ -136,7 +143,7 @@ unsafe fn destroy_chunk(chunk: &Chunk) {\n         let (tydesc, is_done) = un_bitpack_tydesc_ptr(*tydesc_data);\n         let (size, align) = ((*tydesc).size, (*tydesc).align);\n \n-        let after_tydesc = idx + sys::size_of::<*TypeDesc>();\n+        let after_tydesc = idx + sys::size_of::<*TyDesc>();\n \n         let start = round_up_to(after_tydesc, align);\n \n@@ -148,7 +155,7 @@ unsafe fn destroy_chunk(chunk: &Chunk) {\n         }\n \n         // Find where the next tydesc lives\n-        idx = round_up_to(start + size, sys::pref_align_of::<*TypeDesc>());\n+        idx = round_up_to(start + size, sys::pref_align_of::<*TyDesc>());\n     }\n }\n \n@@ -157,12 +164,12 @@ unsafe fn destroy_chunk(chunk: &Chunk) {\n // is necessary in order to properly do cleanup if a failure occurs\n // during an initializer.\n #[inline]\n-unsafe fn bitpack_tydesc_ptr(p: *TypeDesc, is_done: bool) -> uint {\n+unsafe fn bitpack_tydesc_ptr(p: *TyDesc, is_done: bool) -> uint {\n     let p_bits: uint = transmute(p);\n     p_bits | (is_done as uint)\n }\n #[inline]\n-unsafe fn un_bitpack_tydesc_ptr(p: uint) -> (*TypeDesc, bool) {\n+unsafe fn un_bitpack_tydesc_ptr(p: uint) -> (*TyDesc, bool) {\n     (transmute(p & !1), p & 1 == 1)\n }\n \n@@ -202,7 +209,7 @@ impl Arena {\n     #[inline]\n     fn alloc_pod<'a, T>(&'a mut self, op: &fn() -> T) -> &'a T {\n         unsafe {\n-            let tydesc = sys::get_type_desc::<T>();\n+            let tydesc = get_tydesc::<T>();\n             let ptr = self.alloc_pod_inner((*tydesc).size, (*tydesc).align);\n             let ptr: *mut T = transmute(ptr);\n             intrinsics::move_val_init(&mut (*ptr), op());\n@@ -230,13 +237,13 @@ impl Arena {\n             let head = transmute_mut_region(&mut self.head);\n \n             let tydesc_start = head.fill;\n-            let after_tydesc = head.fill + sys::size_of::<*TypeDesc>();\n+            let after_tydesc = head.fill + sys::size_of::<*TyDesc>();\n             let start = round_up_to(after_tydesc, align);\n             let end = start + n_bytes;\n             if end > at_vec::capacity(head.data) {\n                 return self.alloc_nonpod_grow(n_bytes, align);\n             }\n-            head.fill = round_up_to(end, sys::pref_align_of::<*TypeDesc>());\n+            head.fill = round_up_to(end, sys::pref_align_of::<*TyDesc>());\n \n             //debug!(\"idx = %u, size = %u, align = %u, fill = %u\",\n             //       start, n_bytes, align, head.fill);\n@@ -249,7 +256,7 @@ impl Arena {\n     #[inline]\n     fn alloc_nonpod<'a, T>(&'a mut self, op: &fn() -> T) -> &'a T {\n         unsafe {\n-            let tydesc = sys::get_type_desc::<T>();\n+            let tydesc = get_tydesc::<T>();\n             let (ty_ptr, ptr) =\n                 self.alloc_nonpod_inner((*tydesc).size, (*tydesc).align);\n             let ty_ptr: *mut uint = transmute(ty_ptr);"}, {"sha": "43c4aecdd27fa5e60ffd97cc63f45d9a1375c6f9", "filename": "src/libextra/dbg.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/469f394b251feebfb16090303da59206ba25acc6/src%2Flibextra%2Fdbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/469f394b251feebfb16090303da59206ba25acc6/src%2Flibextra%2Fdbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdbg.rs?ref=469f394b251feebfb16090303da59206ba25acc6", "patch": "@@ -13,56 +13,62 @@\n #[allow(missing_doc)];\n \n use core::cast::transmute;\n-use core::sys;\n+#[cfg(stage0)]\n+use intrinsic::{get_tydesc};\n+#[cfg(not(stage0))]\n+use core::unstable::intrinsics::{get_tydesc};\n \n pub mod rustrt {\n-    use core::sys;\n+    #[cfg(stage0)]\n+    use intrinsic::{TyDesc};\n+    #[cfg(not(stage0))]\n+    use core::unstable::intrinsics::{TyDesc};\n \n     #[abi = \"cdecl\"]\n     pub extern {\n-        pub unsafe fn debug_tydesc(td: *sys::TypeDesc);\n-        pub unsafe fn debug_opaque(td: *sys::TypeDesc, x: *());\n-        pub unsafe fn debug_box(td: *sys::TypeDesc, x: *());\n-        pub unsafe fn debug_tag(td: *sys::TypeDesc, x: *());\n-        pub unsafe fn debug_fn(td: *sys::TypeDesc, x: *());\n-        pub unsafe fn debug_ptrcast(td: *sys::TypeDesc, x: *()) -> *();\n+        pub unsafe fn debug_tydesc(td: *TyDesc);\n+        pub unsafe fn debug_opaque(td: *TyDesc, x: *());\n+        pub unsafe fn debug_box(td: *TyDesc, x: *());\n+        pub unsafe fn debug_tag(td: *TyDesc, x: *());\n+        pub unsafe fn debug_fn(td: *TyDesc, x: *());\n+        pub unsafe fn debug_ptrcast(td: *TyDesc, x: *()) -> *();\n         pub unsafe fn rust_dbg_breakpoint();\n     }\n }\n \n pub fn debug_tydesc<T>() {\n     unsafe {\n-        rustrt::debug_tydesc(sys::get_type_desc::<T>());\n+        rustrt::debug_tydesc(get_tydesc::<T>());\n     }\n }\n \n pub fn debug_opaque<T>(x: T) {\n     unsafe {\n-        rustrt::debug_opaque(sys::get_type_desc::<T>(), transmute(&x));\n+        rustrt::debug_opaque(get_tydesc::<T>(), transmute(&x));\n     }\n }\n \n pub fn debug_box<T>(x: @T) {\n     unsafe {\n-        rustrt::debug_box(sys::get_type_desc::<T>(), transmute(&x));\n+        rustrt::debug_box(get_tydesc::<T>(), transmute(&x));\n     }\n }\n \n pub fn debug_tag<T>(x: T) {\n     unsafe {\n-        rustrt::debug_tag(sys::get_type_desc::<T>(), transmute(&x));\n+        rustrt::debug_tag(get_tydesc::<T>(), transmute(&x));\n     }\n }\n \n pub fn debug_fn<T>(x: T) {\n     unsafe {\n-        rustrt::debug_fn(sys::get_type_desc::<T>(), transmute(&x));\n+        rustrt::debug_fn(get_tydesc::<T>(), transmute(&x));\n     }\n }\n \n pub unsafe fn ptr_cast<T, U>(x: @T) -> @U {\n     transmute(\n-        rustrt::debug_ptrcast(sys::get_type_desc::<T>(), transmute(x)))\n+        rustrt::debug_ptrcast(get_tydesc::<T>(), transmute(x)))\n }\n \n /// Triggers a debugger breakpoint"}, {"sha": "fbb273450df29bed6721c823f4ef88068a8a4799", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/469f394b251feebfb16090303da59206ba25acc6/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/469f394b251feebfb16090303da59206ba25acc6/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=469f394b251feebfb16090303da59206ba25acc6", "patch": "@@ -206,9 +206,6 @@ pub fn compile_rest(sess: Session,\n     let mut crate = crate_opt.unwrap();\n \n     let (llcx, llmod, link_meta) = {\n-    crate = time(time_passes, ~\"intrinsic injection\", ||\n-                 front::intrinsic_inject::inject_intrinsic(sess, crate));\n-\n         crate = time(time_passes, ~\"extra injection\", ||\n                      front::std_inject::maybe_inject_libstd_ref(sess, crate));\n "}, {"sha": "f19e370625350ec2a332c871b4e8faab90ef3755", "filename": "src/librustc/front/intrinsic.rs", "status": "removed", "additions": 0, "deletions": 148, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/f2c5642d134df70755e0aede94074767cd3958eb/src%2Flibrustc%2Ffront%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c5642d134df70755e0aede94074767cd3958eb/src%2Flibrustc%2Ffront%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fintrinsic.rs?ref=f2c5642d134df70755e0aede94074767cd3958eb", "patch": "@@ -1,148 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// NB: this file is include_str!'ed into the compiler, re-parsed\n-// and injected into each crate the compiler builds. Keep it small.\n-\n-pub mod intrinsic {\n-    #[allow(missing_doc)];\n-\n-    pub use intrinsic::rusti::visit_tydesc;\n-\n-    // FIXME (#3727): remove this when the interface has settled and the\n-    // version in sys is no longer present.\n-    pub fn get_tydesc<T>() -> *TyDesc {\n-        unsafe {\n-            rusti::get_tydesc::<T>()\n-        }\n-    }\n-\n-    pub type GlueFn = extern \"Rust\" fn(**TyDesc, *i8);\n-\n-    // NB: this has to be kept in sync with the Rust ABI.\n-    pub struct TyDesc {\n-        size: uint,\n-        align: uint,\n-        take_glue: GlueFn,\n-        drop_glue: GlueFn,\n-        free_glue: GlueFn,\n-        visit_glue: GlueFn,\n-        shape: *i8,\n-        shape_tables: *i8\n-    }\n-\n-    pub enum Opaque { }\n-\n-    pub trait TyVisitor {\n-        fn visit_bot(&self) -> bool;\n-        fn visit_nil(&self) -> bool;\n-        fn visit_bool(&self) -> bool;\n-\n-        fn visit_int(&self) -> bool;\n-        fn visit_i8(&self) -> bool;\n-        fn visit_i16(&self) -> bool;\n-        fn visit_i32(&self) -> bool;\n-        fn visit_i64(&self) -> bool;\n-\n-        fn visit_uint(&self) -> bool;\n-        fn visit_u8(&self) -> bool;\n-        fn visit_u16(&self) -> bool;\n-        fn visit_u32(&self) -> bool;\n-        fn visit_u64(&self) -> bool;\n-\n-        fn visit_float(&self) -> bool;\n-        fn visit_f32(&self) -> bool;\n-        fn visit_f64(&self) -> bool;\n-\n-        fn visit_char(&self) -> bool;\n-        fn visit_str(&self) -> bool;\n-\n-        fn visit_estr_box(&self) -> bool;\n-        fn visit_estr_uniq(&self) -> bool;\n-        fn visit_estr_slice(&self) -> bool;\n-        fn visit_estr_fixed(&self, n: uint, sz: uint, align: uint) -> bool;\n-\n-        fn visit_box(&self, mtbl: uint, inner: *TyDesc) -> bool;\n-        fn visit_uniq(&self, mtbl: uint, inner: *TyDesc) -> bool;\n-        fn visit_ptr(&self, mtbl: uint, inner: *TyDesc) -> bool;\n-        fn visit_rptr(&self, mtbl: uint, inner: *TyDesc) -> bool;\n-\n-        fn visit_vec(&self, mtbl: uint, inner: *TyDesc) -> bool;\n-        fn visit_unboxed_vec(&self, mtbl: uint, inner: *TyDesc) -> bool;\n-        fn visit_evec_box(&self, mtbl: uint, inner: *TyDesc) -> bool;\n-        fn visit_evec_uniq(&self, mtbl: uint, inner: *TyDesc) -> bool;\n-        fn visit_evec_slice(&self, mtbl: uint, inner: *TyDesc) -> bool;\n-        fn visit_evec_fixed(&self, n: uint, sz: uint, align: uint,\n-                            mtbl: uint, inner: *TyDesc) -> bool;\n-\n-        fn visit_enter_rec(&self, n_fields: uint,\n-                           sz: uint, align: uint) -> bool;\n-        fn visit_rec_field(&self, i: uint, name: &str,\n-                           mtbl: uint, inner: *TyDesc) -> bool;\n-        fn visit_leave_rec(&self, n_fields: uint,\n-                           sz: uint, align: uint) -> bool;\n-\n-        fn visit_enter_class(&self, n_fields: uint,\n-                             sz: uint, align: uint) -> bool;\n-        fn visit_class_field(&self, i: uint, name: &str,\n-                             mtbl: uint, inner: *TyDesc) -> bool;\n-        fn visit_leave_class(&self, n_fields: uint,\n-                             sz: uint, align: uint) -> bool;\n-\n-        fn visit_enter_tup(&self, n_fields: uint,\n-                           sz: uint, align: uint) -> bool;\n-        fn visit_tup_field(&self, i: uint, inner: *TyDesc) -> bool;\n-        fn visit_leave_tup(&self, n_fields: uint,\n-                           sz: uint, align: uint) -> bool;\n-\n-        fn visit_enter_enum(&self, n_variants: uint,\n-                            get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n-                            sz: uint, align: uint) -> bool;\n-        fn visit_enter_enum_variant(&self, variant: uint,\n-                                    disr_val: int,\n-                                    n_fields: uint,\n-                                    name: &str) -> bool;\n-        fn visit_enum_variant_field(&self, i: uint, offset: uint, inner: *TyDesc) -> bool;\n-        fn visit_leave_enum_variant(&self, variant: uint,\n-                                    disr_val: int,\n-                                    n_fields: uint,\n-                                    name: &str) -> bool;\n-        fn visit_leave_enum(&self, n_variants: uint,\n-                            get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n-                            sz: uint, align: uint) -> bool;\n-\n-        fn visit_enter_fn(&self, purity: uint, proto: uint,\n-                          n_inputs: uint, retstyle: uint) -> bool;\n-        fn visit_fn_input(&self, i: uint, mode: uint, inner: *TyDesc) -> bool;\n-        fn visit_fn_output(&self, retstyle: uint, inner: *TyDesc) -> bool;\n-        fn visit_leave_fn(&self, purity: uint, proto: uint,\n-                          n_inputs: uint, retstyle: uint) -> bool;\n-\n-        fn visit_trait(&self) -> bool;\n-        fn visit_var(&self) -> bool;\n-        fn visit_var_integral(&self) -> bool;\n-        fn visit_param(&self, i: uint) -> bool;\n-        fn visit_self(&self) -> bool;\n-        fn visit_type(&self) -> bool;\n-        fn visit_opaque_box(&self) -> bool;\n-        fn visit_constr(&self, inner: *TyDesc) -> bool;\n-        fn visit_closure_ptr(&self, ck: uint) -> bool;\n-    }\n-\n-    pub mod rusti {\n-        use super::{TyDesc, TyVisitor};\n-\n-        #[abi = \"rust-intrinsic\"]\n-        pub extern \"rust-intrinsic\" {\n-            pub fn get_tydesc<T>() -> *TyDesc;\n-            pub fn visit_tydesc(td: *TyDesc, tv: @TyVisitor);\n-        }\n-    }\n-}"}, {"sha": "0caadc8572e90cf545744b9e2af78d3cdcacd173", "filename": "src/librustc/front/intrinsic_inject.rs", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f2c5642d134df70755e0aede94074767cd3958eb/src%2Flibrustc%2Ffront%2Fintrinsic_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c5642d134df70755e0aede94074767cd3958eb/src%2Flibrustc%2Ffront%2Fintrinsic_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fintrinsic_inject.rs?ref=f2c5642d134df70755e0aede94074767cd3958eb", "patch": "@@ -1,47 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use core::prelude::*;\n-\n-use core::vec;\n-use driver::session::Session;\n-use syntax::parse;\n-use syntax::ast;\n-use syntax::codemap::spanned;\n-\n-pub fn inject_intrinsic(sess: Session, crate: @ast::crate) -> @ast::crate {\n-    let intrinsic_module = include_str!(\"intrinsic.rs\").to_managed();\n-\n-    let item = parse::parse_item_from_source_str(@\"<intrinsic>\",\n-                                                 intrinsic_module,\n-                                                 /*bad*/copy sess.opts.cfg,\n-                                                 ~[],\n-                                                 sess.parse_sess);\n-    let item =\n-        match item {\n-          Some(i) => i,\n-          None => {\n-            sess.fatal(\"no item found in intrinsic module\");\n-          }\n-        };\n-\n-    let items = vec::append(~[item], crate.node.module.items);\n-\n-    @spanned {\n-        node: ast::crate_ {\n-            module: ast::_mod {\n-                items: items,\n-                .. /*bad*/copy crate.node.module\n-            },\n-            .. /*bad*/copy crate.node\n-        },\n-        .. /*bad*/copy *crate\n-    }\n-}"}, {"sha": "d73b019c1ea768038cf74b9dc94b7c236e07e75c", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/469f394b251feebfb16090303da59206ba25acc6/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/469f394b251feebfb16090303da59206ba25acc6/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=469f394b251feebfb16090303da59206ba25acc6", "patch": "@@ -76,16 +76,20 @@ pub enum LangItem {\n     UnrecordBorrowFnLangItem,   // 36\n \n     StartFnLangItem,            // 37\n+\n+    TyDescStructLangItem,       // 38\n+    TyVisitorTraitLangItem,     // 39\n+    OpaqueStructLangItem,       // 40\n }\n \n pub struct LanguageItems {\n-    items: [Option<def_id>, ..38]\n+    items: [Option<def_id>, ..41]\n }\n \n impl LanguageItems {\n     pub fn new() -> LanguageItems {\n         LanguageItems {\n-            items: [ None, ..38 ]\n+            items: [ None, ..41 ]\n         }\n     }\n \n@@ -138,6 +142,10 @@ impl LanguageItems {\n \n             37 => \"start\",\n \n+            38 => \"ty_desc\",\n+            39 => \"ty_visitor\",\n+            40 => \"opaque\",\n+\n             _ => \"???\"\n         }\n     }\n@@ -262,6 +270,15 @@ impl LanguageItems {\n     pub fn start_fn(&const self) -> def_id {\n         self.items[StartFnLangItem as uint].get()\n     }\n+    pub fn ty_desc(&const self) -> def_id {\n+        self.items[TyDescStructLangItem as uint].get()\n+    }\n+    pub fn ty_visitor(&const self) -> def_id {\n+        self.items[TyVisitorTraitLangItem as uint].get()\n+    }\n+    pub fn opaque(&const self) -> def_id {\n+        self.items[OpaqueStructLangItem as uint].get()\n+    }\n }\n \n fn LanguageItemCollector(crate: @crate,\n@@ -313,6 +330,9 @@ fn LanguageItemCollector(crate: @crate,\n     item_refs.insert(@\"record_borrow\", RecordBorrowFnLangItem as uint);\n     item_refs.insert(@\"unrecord_borrow\", UnrecordBorrowFnLangItem as uint);\n     item_refs.insert(@\"start\", StartFnLangItem as uint);\n+    item_refs.insert(@\"ty_desc\", TyDescStructLangItem as uint);\n+    item_refs.insert(@\"ty_visitor\", TyVisitorTraitLangItem as uint);\n+    item_refs.insert(@\"opaque\", OpaqueStructLangItem as uint);\n \n     LanguageItemCollector {\n         crate: crate,"}, {"sha": "9e5510fc60586b97a67f2771d4d0434e66fd3d10", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/469f394b251feebfb16090303da59206ba25acc6/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/469f394b251feebfb16090303da59206ba25acc6/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=469f394b251feebfb16090303da59206ba25acc6", "patch": "@@ -274,9 +274,7 @@ impl Reflector {\n             let repr = adt::represent_type(bcx.ccx(), t);\n             let variants = ty::substd_enum_variants(ccx.tcx, did, substs);\n             let llptrty = type_of(ccx, t).ptr_to();\n-            let (_, opaquety) =\n-                ccx.tcx.intrinsic_defs.find_copy(&ccx.sess.ident_of(\"Opaque\"))\n-                .expect(\"Failed to resolve intrinsic::Opaque\");\n+            let opaquety = ty::get_opaque_ty(ccx.tcx);\n             let opaqueptrty = ty::mk_ptr(ccx.tcx, ty::mt { ty: opaquety, mutbl: ast::m_imm });\n \n             let make_get_disr = || {\n@@ -373,10 +371,8 @@ pub fn emit_calls_to_trait_visit_ty(bcx: block,\n                                     visitor_val: ValueRef,\n                                     visitor_trait_id: def_id)\n                                  -> block {\n-    use syntax::parse::token::special_idents::tydesc;\n     let final = sub_block(bcx, \"final\");\n-    assert!(bcx.ccx().tcx.intrinsic_defs.contains_key(&tydesc));\n-    let (_, tydesc_ty) = bcx.ccx().tcx.intrinsic_defs.get_copy(&tydesc);\n+    let tydesc_ty = ty::get_tydesc_ty(bcx.ccx().tcx);\n     let tydesc_ty = type_of(bcx.ccx(), tydesc_ty);\n     let mut r = Reflector {\n         visitor_val: visitor_val,"}, {"sha": "f12ecebc6d5c205fb0f5a35992ff64f281db677c", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/469f394b251feebfb16090303da59206ba25acc6/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/469f394b251feebfb16090303da59206ba25acc6/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=469f394b251feebfb16090303da59206ba25acc6", "patch": "@@ -44,7 +44,6 @@ use syntax::attr;\n use syntax::codemap::span;\n use syntax::codemap;\n use syntax::parse::token;\n-use syntax::parse::token::special_idents;\n use syntax::{ast, ast_map};\n use syntax::opt_vec::OptVec;\n use syntax::opt_vec;\n@@ -276,8 +275,7 @@ struct ctxt_ {\n     trait_defs: @mut HashMap<def_id, @TraitDef>,\n \n     items: ast_map::map,\n-    intrinsic_defs: @mut HashMap<ast::ident, (ast::def_id, t)>,\n-    intrinsic_traits: @mut HashMap<ast::ident, @TraitRef>,\n+    intrinsic_defs: @mut HashMap<ast::def_id, t>,\n     freevars: freevars::freevar_map,\n     tcache: type_cache,\n     rcache: creader_cache,\n@@ -953,7 +951,6 @@ pub fn mk_ctxt(s: session::Session,\n         node_type_substs: @mut HashMap::new(),\n         trait_refs: @mut HashMap::new(),\n         trait_defs: @mut HashMap::new(),\n-        intrinsic_traits: @mut HashMap::new(),\n         items: amap,\n         intrinsic_defs: @mut HashMap::new(),\n         freevars: freevars,\n@@ -4449,10 +4446,26 @@ pub fn get_impl_id(tcx: ctxt, trait_id: def_id, self_ty: t) -> def_id {\n     }\n }\n \n+pub fn get_tydesc_ty(tcx: ctxt) -> t {\n+    let tydesc_lang_item = tcx.lang_items.ty_desc();\n+    tcx.intrinsic_defs.find_copy(&tydesc_lang_item)\n+        .expect(\"Failed to resolve TyDesc\")\n+}\n+\n+pub fn get_opaque_ty(tcx: ctxt) -> t {\n+    let tydesc_lang_item = tcx.lang_items.opaque();\n+    tcx.intrinsic_defs.find_copy(&tydesc_lang_item)\n+        .expect(\"Failed to resolve Opaque\")\n+}\n+\n pub fn visitor_object_ty(tcx: ctxt) -> (@TraitRef, t) {\n-    let ty_visitor_name = special_idents::ty_visitor;\n-    assert!(tcx.intrinsic_traits.contains_key(&ty_visitor_name));\n-    let trait_ref = tcx.intrinsic_traits.get_copy(&ty_visitor_name);\n+    let substs = substs {\n+        self_r: None,\n+        self_ty: None,\n+        tps: ~[]\n+    };\n+    let trait_lang_item = tcx.lang_items.ty_visitor();\n+    let trait_ref = @TraitRef { def_id: trait_lang_item, substs: substs };\n     (trait_ref,\n      mk_trait(tcx, trait_ref.def_id, copy trait_ref.substs, BoxTraitStore, ast::m_imm))\n }"}, {"sha": "821daee8bfbf0f03db79047aea4e43d9fde8dc54", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/469f394b251feebfb16090303da59206ba25acc6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/469f394b251feebfb16090303da59206ba25acc6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=469f394b251feebfb16090303da59206ba25acc6", "patch": "@@ -3506,19 +3506,15 @@ pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n             }\n \n             \"get_tydesc\" => {\n-              let tydesc_name = special_idents::tydesc;\n-              assert!(tcx.intrinsic_defs.contains_key(&tydesc_name));\n-              let (_, tydesc_ty) = tcx.intrinsic_defs.get_copy(&tydesc_name);\n+              let tydesc_ty = ty::get_tydesc_ty(ccx.tcx);\n               let td_ptr = ty::mk_ptr(ccx.tcx, ty::mt {\n                   ty: tydesc_ty,\n                   mutbl: ast::m_imm\n               });\n               (1u, ~[], td_ptr)\n             }\n             \"visit_tydesc\" => {\n-              let tydesc_name = special_idents::tydesc;\n-              assert!(tcx.intrinsic_defs.contains_key(&tydesc_name));\n-              let (_, tydesc_ty) = tcx.intrinsic_defs.get_copy(&tydesc_name);\n+              let tydesc_ty = ty::get_tydesc_ty(ccx.tcx);\n               let (_, visitor_object_ty) = ty::visitor_object_ty(tcx);\n               let td_ptr = ty::mk_ptr(ccx.tcx, ty::mt {\n                   ty: tydesc_ty,"}, {"sha": "756bb4d1bb9222e75fe2744f0f1afc6e2f288917", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 8, "deletions": 47, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/469f394b251feebfb16090303da59206ba25acc6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/469f394b251feebfb16090303da59206ba25acc6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=469f394b251feebfb16090303da59206ba25acc6", "patch": "@@ -62,55 +62,16 @@ use syntax::opt_vec::OptVec;\n use syntax::opt_vec;\n \n pub fn collect_item_types(ccx: @mut CrateCtxt, crate: @ast::crate) {\n-\n-    // FIXME (#2592): hooking into the \"intrinsic\" root module is crude.\n-    // There ought to be a better approach. Attributes?\n-\n-    for crate.node.module.items.iter().advance |crate_item| {\n-        if crate_item.ident\n-            == ::syntax::parse::token::special_idents::intrinsic {\n-\n-            match crate_item.node {\n-              ast::item_mod(ref m) => {\n-                for m.items.iter().advance |intrinsic_item| {\n-                    let def_id = ast::def_id { crate: ast::local_crate,\n-                                               node: intrinsic_item.id };\n-                    let substs = substs {\n-                        self_r: None,\n-                        self_ty: None,\n-                        tps: ~[]\n-                    };\n-\n-                    match intrinsic_item.node {\n-                      ast::item_trait(*) => {\n-                          let tref = @ty::TraitRef {def_id: def_id,\n-                                                    substs: substs};\n-                          ccx.tcx.intrinsic_traits.insert\n-                              (intrinsic_item.ident, tref);\n-                      }\n-\n-                      ast::item_enum(*) => {\n-                        let ty = ty::mk_enum(ccx.tcx, def_id, substs);\n-                        ccx.tcx.intrinsic_defs.insert\n-                            (intrinsic_item.ident, (def_id, ty));\n-                      }\n-\n-                      ast::item_struct(*) => {\n-                        let ty = ty::mk_struct(ccx.tcx, def_id, substs);\n-                        ccx.tcx.intrinsic_defs.insert\n-                            (intrinsic_item.ident, (def_id, ty));\n-                      }\n-\n-                      _ => {}\n-                    }\n-                }\n-              }\n-              _ => { }\n-            }\n-            break;\n-        }\n+    fn collect_intrinsic_type(ccx: @mut CrateCtxt,\n+                              lang_item: ast::def_id) {\n+        let ty::ty_param_bounds_and_ty { ty: ty, _ } =\n+            ccx.get_item_ty(lang_item);\n+        ccx.tcx.intrinsic_defs.insert(lang_item, ty);\n     }\n \n+    collect_intrinsic_type(ccx, ccx.tcx.lang_items.ty_desc());\n+    collect_intrinsic_type(ccx, ccx.tcx.lang_items.opaque());\n+\n     visit::visit_crate(\n         crate, ((),\n         visit::mk_simple_visitor(@visit::SimpleVisitor {"}, {"sha": "20705b3d7975061e2cdb297c885e18592f1a49a6", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/469f394b251feebfb16090303da59206ba25acc6/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/469f394b251feebfb16090303da59206ba25acc6/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=469f394b251feebfb16090303da59206ba25acc6", "patch": "@@ -86,7 +86,6 @@ pub mod front {\n     pub mod config;\n     pub mod test;\n     pub mod std_inject;\n-    pub mod intrinsic_inject;\n }\n \n pub mod back {"}, {"sha": "52115692dbce87de8a5a80a158e2169a6fb7f188", "filename": "src/libstd/at_vec.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/469f394b251feebfb16090303da59206ba25acc6/src%2Flibstd%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/469f394b251feebfb16090303da59206ba25acc6/src%2Flibstd%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fat_vec.rs?ref=469f394b251feebfb16090303da59206ba25acc6", "patch": "@@ -26,13 +26,16 @@ use vec::ImmutableVector;\n \n pub mod rustrt {\n     use libc;\n-    use sys;\n     use vec;\n+    #[cfg(stage0)]\n+    use intrinsic::{TyDesc};\n+    #[cfg(not(stage0))]\n+    use unstable::intrinsics::{TyDesc};\n \n     #[abi = \"cdecl\"]\n     #[link_name = \"rustrt\"]\n     pub extern {\n-        pub unsafe fn vec_reserve_shared_actual(t: *sys::TypeDesc,\n+        pub unsafe fn vec_reserve_shared_actual(t: *TyDesc,\n                                                 v: **vec::raw::VecRepr,\n                                                 n: libc::size_t);\n     }\n@@ -198,6 +201,10 @@ pub mod raw {\n     use uint;\n     use unstable::intrinsics::{move_val_init};\n     use vec;\n+    #[cfg(stage0)]\n+    use intrinsic::{get_tydesc};\n+    #[cfg(not(stage0))]\n+    use unstable::intrinsics::{get_tydesc};\n \n     pub type VecRepr = vec::raw::VecRepr;\n     pub type SliceRepr = vec::raw::SliceRepr;\n@@ -259,7 +266,7 @@ pub mod raw {\n         // Only make the (slow) call into the runtime if we have to\n         if capacity(*v) < n {\n             let ptr: **VecRepr = transmute(v);\n-            rustrt::vec_reserve_shared_actual(sys::get_type_desc::<T>(),\n+            rustrt::vec_reserve_shared_actual(get_tydesc::<T>(),\n                                               ptr, n as libc::size_t);\n         }\n     }"}, {"sha": "28aab9adad2c966e1c15c12a24276806e3a00289", "filename": "src/libstd/cleanup.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/469f394b251feebfb16090303da59206ba25acc6/src%2Flibstd%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/469f394b251feebfb16090303da59206ba25acc6/src%2Flibstd%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcleanup.rs?ref=469f394b251feebfb16090303da59206ba25acc6", "patch": "@@ -10,24 +10,18 @@\n \n #[doc(hidden)];\n \n-use libc::{c_char, c_void, intptr_t, uintptr_t};\n-use ptr::mut_null;\n+use libc::{c_char, intptr_t, uintptr_t};\n+use ptr::{mut_null, to_unsafe_ptr};\n use repr::BoxRepr;\n-use sys::TypeDesc;\n use cast::transmute;\n #[cfg(not(test))] use unstable::lang::clear_task_borrow_list;\n \n-#[cfg(not(test))] use ptr::to_unsafe_ptr;\n-\n /**\n  * Runtime structures\n  *\n  * NB: These must match the representation in the C++ runtime.\n  */\n \n-type DropGlue<'self> = &'self fn(**TypeDesc, *c_void);\n-type FreeGlue<'self> = &'self fn(**TypeDesc, *c_void);\n-\n type TaskID = uintptr_t;\n \n struct StackSegment { priv opaque: () }\n@@ -164,6 +158,20 @@ fn debug_mem() -> bool {\n     false\n }\n \n+#[cfg(stage0)]\n+unsafe fn call_drop_glue(tydesc: *::std::unstable::intrinsics::TyDesc, data: *i8) {\n+    use sys::TypeDesc;\n+\n+    let tydesc: *TypeDesc = transmute(tydesc);\n+    let drop_glue: extern \"Rust\" fn(**TypeDesc, *i8) = transmute((*tydesc).drop_glue);\n+    drop_glue(to_unsafe_ptr(&tydesc), data);\n+}\n+\n+#[cfg(not(stage0))]\n+unsafe fn call_drop_glue(tydesc: *::std::unstable::intrinsics::TyDesc, data: *i8) {\n+    ((*tydesc).drop_glue)(to_unsafe_ptr(&tydesc), data);\n+}\n+\n /// Destroys all managed memory (i.e. @ boxes) held by the current task.\n #[cfg(not(test))]\n #[lang=\"annihilate\"]\n@@ -205,9 +213,7 @@ pub unsafe fn annihilate() {\n     // callback, as the original value may have been freed.\n     for each_live_alloc(false) |box, uniq| {\n         if !uniq {\n-            let tydesc: *TypeDesc = transmute(copy (*box).header.type_desc);\n-            let drop_glue: DropGlue = transmute(((*tydesc).drop_glue, 0));\n-            drop_glue(to_unsafe_ptr(&tydesc), transmute(&(*box).data));\n+            call_drop_glue((*box).header.type_desc, transmute(&(*box).data));\n         }\n     }\n "}, {"sha": "b71b3b503c2acca5514562275b63692b308d5db0", "filename": "src/libstd/managed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/469f394b251feebfb16090303da59206ba25acc6/src%2Flibstd%2Fmanaged.rs", "raw_url": "https://github.com/rust-lang/rust/raw/469f394b251feebfb16090303da59206ba25acc6/src%2Flibstd%2Fmanaged.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmanaged.rs?ref=469f394b251feebfb16090303da59206ba25acc6", "patch": "@@ -15,7 +15,7 @@ use ptr::to_unsafe_ptr;\n #[cfg(not(test))] use cmp::{Eq, Ord};\n \n pub mod raw {\n-    use intrinsic::TyDesc;\n+    use std::unstable::intrinsics::TyDesc;\n \n     pub static RC_EXCHANGE_UNIQUE : uint = (-1) as uint;\n     pub static RC_MANAGED_UNIQUE : uint = (-2) as uint;"}, {"sha": "16ab4771d0de10a837b1584145bef9e933fa4c9e", "filename": "src/libstd/reflect.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/469f394b251feebfb16090303da59206ba25acc6/src%2Flibstd%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/469f394b251feebfb16090303da59206ba25acc6/src%2Flibstd%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Freflect.rs?ref=469f394b251feebfb16090303da59206ba25acc6", "patch": "@@ -16,8 +16,10 @@ Runtime type reflection\n \n #[allow(missing_doc)];\n \n-use intrinsic::{TyDesc, TyVisitor};\n-use intrinsic::Opaque;\n+#[cfg(stage0)]\n+use intrinsic::{Opaque, TyDesc, TyVisitor};\n+#[cfg(not(stage0))]\n+use unstable::intrinsics::{Opaque, TyDesc, TyVisitor};\n use libc::c_void;\n use sys;\n use vec;"}, {"sha": "f39b5a00ed054b61fafeb678079500a8e527041b", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/469f394b251feebfb16090303da59206ba25acc6/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/469f394b251feebfb16090303da59206ba25acc6/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=469f394b251feebfb16090303da59206ba25acc6", "patch": "@@ -19,9 +19,6 @@ More runtime type reflection\n use cast::transmute;\n use char;\n use container::Container;\n-use intrinsic;\n-use intrinsic::{TyDesc, TyVisitor, visit_tydesc};\n-use intrinsic::Opaque;\n use io::{Writer, WriterUtil};\n use iterator::IteratorUtil;\n use libc::c_void;\n@@ -34,6 +31,10 @@ use to_str::ToStr;\n use vec::raw::{VecRepr, SliceRepr};\n use vec;\n use vec::{OwnedVector, UnboxedVecRepr};\n+#[cfg(stage0)]\n+use intrinsic::{Opaque, TyDesc, TyVisitor, get_tydesc, visit_tydesc};\n+#[cfg(not(stage0))]\n+use unstable::intrinsics::{Opaque, TyDesc, TyVisitor, get_tydesc, visit_tydesc};\n \n #[cfg(test)] use io;\n \n@@ -564,13 +565,24 @@ impl TyVisitor for ReprVisitor {\n     fn visit_self(&self) -> bool { true }\n     fn visit_type(&self) -> bool { true }\n \n+    #[cfg(not(stage0))]\n     fn visit_opaque_box(&self) -> bool {\n         self.writer.write_char('@');\n         do self.get::<&managed::raw::BoxRepr> |b| {\n             let p = ptr::to_unsafe_ptr(&b.data) as *c_void;\n             self.visit_ptr_inner(p, b.header.type_desc);\n         }\n     }\n+    #[cfg(stage0)]\n+    fn visit_opaque_box(&self) -> bool {\n+        self.writer.write_char('@');\n+        do self.get::<&managed::raw::BoxRepr> |b| {\n+            let p = ptr::to_unsafe_ptr(&b.data) as *c_void;\n+            unsafe {\n+                self.visit_ptr_inner(p, transmute(b.header.type_desc));\n+            }\n+        }\n+    }\n \n     // Type no longer exists, vestigial function.\n     fn visit_constr(&self, _inner: *TyDesc) -> bool { fail!(); }\n@@ -581,7 +593,7 @@ impl TyVisitor for ReprVisitor {\n pub fn write_repr<T>(writer: @Writer, object: &T) {\n     unsafe {\n         let ptr = ptr::to_unsafe_ptr(object) as *c_void;\n-        let tydesc = intrinsic::get_tydesc::<T>();\n+        let tydesc = get_tydesc::<T>();\n         let u = ReprVisitor(ptr, writer);\n         let v = reflect::MovePtrAdaptor(u);\n         visit_tydesc(tydesc, @v as @TyVisitor)"}, {"sha": "1e9f9aab8345cb24ed10b64495c063e44d75ee0d", "filename": "src/libstd/rt/global_heap.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/469f394b251feebfb16090303da59206ba25acc6/src%2Flibstd%2Frt%2Fglobal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/469f394b251feebfb16090303da59206ba25acc6/src%2Flibstd%2Frt%2Fglobal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fglobal_heap.rs?ref=469f394b251feebfb16090303da59206ba25acc6", "patch": "@@ -8,26 +8,22 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use sys::{TypeDesc, size_of};\n+use sys::{size_of};\n use libc::{c_void, size_t, uintptr_t};\n use c_malloc = libc::malloc;\n use c_free = libc::free;\n use managed::raw::{BoxHeaderRepr, BoxRepr};\n use cast::transmute;\n-use unstable::intrinsics::{atomic_xadd,atomic_xsub};\n+use unstable::intrinsics::{atomic_xadd,atomic_xsub,TyDesc};\n use ptr::null;\n-use intrinsic::TyDesc;\n \n-pub unsafe fn malloc(td: *TypeDesc, size: uint) -> *c_void {\n+pub unsafe fn malloc(td: *TyDesc, size: uint) -> *c_void {\n     assert!(td.is_not_null());\n \n     let total_size = get_box_size(size, (*td).align);\n     let p = c_malloc(total_size as size_t);\n     assert!(p.is_not_null());\n \n-    // FIXME #3475: Converting between our two different tydesc types\n-    let td: *TyDesc = transmute(td);\n-\n     let box: &mut BoxRepr = transmute(p);\n     box.header.ref_count = -1; // Exchange values not ref counted\n     box.header.type_desc = td;"}, {"sha": "7f80375c2f6adba6492954bce2652fd78c41453c", "filename": "src/libstd/sys.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/469f394b251feebfb16090303da59206ba25acc6/src%2Flibstd%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/469f394b251feebfb16090303da59206ba25acc6/src%2Flibstd%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys.rs?ref=469f394b251feebfb16090303da59206ba25acc6", "patch": "@@ -17,14 +17,13 @@ use cast;\n use gc;\n use io;\n use libc;\n-use libc::{c_void, c_char, size_t};\n+use libc::{c_char, size_t};\n use repr;\n use str;\n use unstable::intrinsics;\n \n-pub type FreeGlue<'self> = &'self fn(*TypeDesc, *c_void);\n-\n // Corresponds to runtime type_desc type\n+#[cfg(stage0)]\n pub struct TypeDesc {\n     size: uint,\n     align: uint,\n@@ -58,16 +57,11 @@ pub mod rustrt {\n  * performing dark magick.\n  */\n #[inline]\n+#[cfg(stage0)]\n pub fn get_type_desc<T>() -> *TypeDesc {\n     unsafe { intrinsics::get_tydesc::<T>() as *TypeDesc }\n }\n \n-/// Returns a pointer to a type descriptor.\n-#[inline]\n-pub fn get_type_desc_val<T>(_val: &T) -> *TypeDesc {\n-    get_type_desc::<T>()\n-}\n-\n /// Returns the size of a type\n #[inline]\n pub fn size_of<T>() -> uint {"}, {"sha": "5c47901df480226214d2db95f88ac4ef310c8b64", "filename": "src/libstd/unstable/exchange_alloc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/469f394b251feebfb16090303da59206ba25acc6/src%2Flibstd%2Funstable%2Fexchange_alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/469f394b251feebfb16090303da59206ba25acc6/src%2Flibstd%2Funstable%2Fexchange_alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fexchange_alloc.rs?ref=469f394b251feebfb16090303da59206ba25acc6", "patch": "@@ -8,26 +8,26 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use sys::{TypeDesc, size_of};\n+use sys::size_of;\n use libc::{c_void, size_t};\n use c_malloc = libc::malloc;\n use c_free = libc::free;\n use managed::raw::{BoxHeaderRepr, BoxRepr};\n use cast::transmute;\n use unstable::intrinsics::{atomic_xadd,atomic_xsub};\n use ptr::null;\n+#[cfg(stage0)]\n use intrinsic::TyDesc;\n+#[cfg(not(stage0))]\n+use unstable::intrinsics::TyDesc;\n \n-pub unsafe fn malloc(td: *TypeDesc, size: uint) -> *c_void {\n+pub unsafe fn malloc(td: *TyDesc, size: uint) -> *c_void {\n     assert!(td.is_not_null());\n \n     let total_size = get_box_size(size, (*td).align);\n     let p = c_malloc(total_size as size_t);\n     assert!(p.is_not_null());\n \n-    // FIXME #3475: Converting between our two different tydesc types\n-    let td: *TyDesc = transmute(td);\n-\n     let box: &mut BoxRepr = transmute(p);\n     box.header.ref_count = -1; // Exchange values not ref counted\n     box.header.type_desc = td;"}, {"sha": "a51ba05710b19bb73fedfd796921987f93a0c6f4", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 125, "deletions": 4, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/469f394b251feebfb16090303da59206ba25acc6/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/469f394b251feebfb16090303da59206ba25acc6/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=469f394b251feebfb16090303da59206ba25acc6", "patch": "@@ -32,6 +32,128 @@ A quick refresher on memory ordering:\n \n */\n \n+// This is needed to prevent duplicate lang item definitions.\n+#[cfg(test)]\n+pub use realstd::unstable::intrinsics::{TyDesc, Opaque, TyVisitor};\n+\n+pub type GlueFn = extern \"Rust\" fn(**TyDesc, *i8);\n+\n+// NB: this has to be kept in sync with the Rust ABI.\n+#[lang=\"ty_desc\"]\n+#[cfg(not(test))]\n+pub struct TyDesc {\n+    size: uint,\n+    align: uint,\n+    take_glue: GlueFn,\n+    drop_glue: GlueFn,\n+    free_glue: GlueFn,\n+    visit_glue: GlueFn,\n+    shape: *i8,\n+    shape_tables: *i8\n+}\n+\n+#[lang=\"opaque\"]\n+#[cfg(not(test))]\n+pub enum Opaque { }\n+\n+#[lang=\"ty_visitor\"]\n+#[cfg(not(test))]\n+pub trait TyVisitor {\n+    fn visit_bot(&self) -> bool;\n+    fn visit_nil(&self) -> bool;\n+    fn visit_bool(&self) -> bool;\n+\n+    fn visit_int(&self) -> bool;\n+    fn visit_i8(&self) -> bool;\n+    fn visit_i16(&self) -> bool;\n+    fn visit_i32(&self) -> bool;\n+    fn visit_i64(&self) -> bool;\n+\n+    fn visit_uint(&self) -> bool;\n+    fn visit_u8(&self) -> bool;\n+    fn visit_u16(&self) -> bool;\n+    fn visit_u32(&self) -> bool;\n+    fn visit_u64(&self) -> bool;\n+\n+    fn visit_float(&self) -> bool;\n+    fn visit_f32(&self) -> bool;\n+    fn visit_f64(&self) -> bool;\n+\n+    fn visit_char(&self) -> bool;\n+    fn visit_str(&self) -> bool;\n+\n+    fn visit_estr_box(&self) -> bool;\n+    fn visit_estr_uniq(&self) -> bool;\n+    fn visit_estr_slice(&self) -> bool;\n+    fn visit_estr_fixed(&self, n: uint, sz: uint, align: uint) -> bool;\n+\n+    fn visit_box(&self, mtbl: uint, inner: *TyDesc) -> bool;\n+    fn visit_uniq(&self, mtbl: uint, inner: *TyDesc) -> bool;\n+    fn visit_ptr(&self, mtbl: uint, inner: *TyDesc) -> bool;\n+    fn visit_rptr(&self, mtbl: uint, inner: *TyDesc) -> bool;\n+\n+    fn visit_vec(&self, mtbl: uint, inner: *TyDesc) -> bool;\n+    fn visit_unboxed_vec(&self, mtbl: uint, inner: *TyDesc) -> bool;\n+    fn visit_evec_box(&self, mtbl: uint, inner: *TyDesc) -> bool;\n+    fn visit_evec_uniq(&self, mtbl: uint, inner: *TyDesc) -> bool;\n+    fn visit_evec_slice(&self, mtbl: uint, inner: *TyDesc) -> bool;\n+    fn visit_evec_fixed(&self, n: uint, sz: uint, align: uint,\n+                        mtbl: uint, inner: *TyDesc) -> bool;\n+\n+    fn visit_enter_rec(&self, n_fields: uint,\n+                       sz: uint, align: uint) -> bool;\n+    fn visit_rec_field(&self, i: uint, name: &str,\n+                       mtbl: uint, inner: *TyDesc) -> bool;\n+    fn visit_leave_rec(&self, n_fields: uint,\n+                       sz: uint, align: uint) -> bool;\n+\n+    fn visit_enter_class(&self, n_fields: uint,\n+                         sz: uint, align: uint) -> bool;\n+    fn visit_class_field(&self, i: uint, name: &str,\n+                         mtbl: uint, inner: *TyDesc) -> bool;\n+    fn visit_leave_class(&self, n_fields: uint,\n+                         sz: uint, align: uint) -> bool;\n+\n+    fn visit_enter_tup(&self, n_fields: uint,\n+                       sz: uint, align: uint) -> bool;\n+    fn visit_tup_field(&self, i: uint, inner: *TyDesc) -> bool;\n+    fn visit_leave_tup(&self, n_fields: uint,\n+                       sz: uint, align: uint) -> bool;\n+\n+    fn visit_enter_enum(&self, n_variants: uint,\n+                        get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n+                        sz: uint, align: uint) -> bool;\n+    fn visit_enter_enum_variant(&self, variant: uint,\n+                                disr_val: int,\n+                                n_fields: uint,\n+                                name: &str) -> bool;\n+    fn visit_enum_variant_field(&self, i: uint, offset: uint, inner: *TyDesc) -> bool;\n+    fn visit_leave_enum_variant(&self, variant: uint,\n+                                disr_val: int,\n+                                n_fields: uint,\n+                                name: &str) -> bool;\n+    fn visit_leave_enum(&self, n_variants: uint,\n+                        get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n+                        sz: uint, align: uint) -> bool;\n+\n+    fn visit_enter_fn(&self, purity: uint, proto: uint,\n+                      n_inputs: uint, retstyle: uint) -> bool;\n+    fn visit_fn_input(&self, i: uint, mode: uint, inner: *TyDesc) -> bool;\n+    fn visit_fn_output(&self, retstyle: uint, inner: *TyDesc) -> bool;\n+    fn visit_leave_fn(&self, purity: uint, proto: uint,\n+                      n_inputs: uint, retstyle: uint) -> bool;\n+\n+    fn visit_trait(&self) -> bool;\n+    fn visit_var(&self) -> bool;\n+    fn visit_var_integral(&self) -> bool;\n+    fn visit_param(&self, i: uint) -> bool;\n+    fn visit_self(&self) -> bool;\n+    fn visit_type(&self) -> bool;\n+    fn visit_opaque_box(&self) -> bool;\n+    fn visit_constr(&self, inner: *TyDesc) -> bool;\n+    fn visit_closure_ptr(&self, ck: uint) -> bool;\n+}\n+\n #[abi = \"rust-intrinsic\"]\n pub extern \"rust-intrinsic\" {\n \n@@ -210,7 +332,7 @@ pub extern \"rust-intrinsic\" {\n \n     /// Get a static pointer to a type descriptor.\n     #[cfg(not(stage0))]\n-    pub fn get_tydesc<T>() -> *::intrinsic::TyDesc;\n+    pub fn get_tydesc<T>() -> *TyDesc;\n     #[cfg(stage0)]\n     pub fn get_tydesc<T>() -> *();\n \n@@ -234,9 +356,8 @@ pub extern \"rust-intrinsic\" {\n     /// Returns `true` if a type requires drop glue.\n     pub fn needs_drop<T>() -> bool;\n \n-    // XXX: intrinsic uses legacy modes and has reference to TyDesc\n-    // and TyVisitor which are in librustc\n-    //fn visit_tydesc(++td: *TyDesc, &&tv: TyVisitor) -> ();\n+    #[cfg(not(stage0))]\n+    pub fn visit_tydesc(td: *TyDesc, tv: @TyVisitor);\n \n     pub fn frame_address(f: &once fn(*u8));\n "}, {"sha": "fdf33df3a8a1aa3df338c8d7db35527c035297d4", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/469f394b251feebfb16090303da59206ba25acc6/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/469f394b251feebfb16090303da59206ba25acc6/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=469f394b251feebfb16090303da59206ba25acc6", "patch": "@@ -31,26 +31,33 @@ use sys;\n use sys::size_of;\n use uint;\n use unstable::intrinsics;\n+#[cfg(stage0)]\n+use intrinsic::{get_tydesc};\n+#[cfg(not(stage0))]\n+use unstable::intrinsics::{get_tydesc};\n use vec;\n use util;\n \n #[cfg(not(test))] use cmp::Equiv;\n \n pub mod rustrt {\n     use libc;\n-    use sys;\n     use vec::raw;\n+    #[cfg(stage0)]\n+    use intrinsic::{TyDesc};\n+    #[cfg(not(stage0))]\n+    use unstable::intrinsics::{TyDesc};\n \n     #[abi = \"cdecl\"]\n     pub extern {\n         // These names are terrible. reserve_shared applies\n         // to ~[] and reserve_shared_actual applies to @[].\n         #[fast_ffi]\n-        unsafe fn vec_reserve_shared(t: *sys::TypeDesc,\n+        unsafe fn vec_reserve_shared(t: *TyDesc,\n                                      v: **raw::VecRepr,\n                                      n: libc::size_t);\n         #[fast_ffi]\n-        unsafe fn vec_reserve_shared_actual(t: *sys::TypeDesc,\n+        unsafe fn vec_reserve_shared_actual(t: *TyDesc,\n                                             v: **raw::VecRepr,\n                                             n: libc::size_t);\n     }\n@@ -79,7 +86,7 @@ pub fn reserve<T>(v: &mut ~[T], n: uint) {\n     if capacity(v) < n {\n         unsafe {\n             let ptr: **raw::VecRepr = cast::transmute(v);\n-            let td = sys::get_type_desc::<T>();\n+            let td = get_tydesc::<T>();\n             if ((**ptr).box_header.ref_count ==\n                 managed::raw::RC_MANAGED_UNIQUE) {\n                 rustrt::vec_reserve_shared_actual(td, ptr, n as libc::size_t);"}, {"sha": "2d6cc2c78deb01119239a3c14dd675475003b2e1", "filename": "src/test/run-pass/extern-pub.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/469f394b251feebfb16090303da59206ba25acc6/src%2Ftest%2Frun-pass%2Fextern-pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/469f394b251feebfb16090303da59206ba25acc6/src%2Ftest%2Frun-pass%2Fextern-pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pub.rs?ref=469f394b251feebfb16090303da59206ba25acc6", "patch": "@@ -1,11 +1,7 @@\n use std::libc;\n-use std::sys;\n-use std::vec;\n \n extern {\n-    pub unsafe fn vec_reserve_shared_actual(t: *sys::TypeDesc,\n-                                            v: **vec::raw::VecRepr,\n-                                            n: libc::size_t);\n+    pub unsafe fn free(p: *libc::c_void);\n }\n \n pub fn main() {"}, {"sha": "176e49e0ea195b3b956ed05cb277b4ae7a0b82a6", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/469f394b251feebfb16090303da59206ba25acc6/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/469f394b251feebfb16090303da59206ba25acc6/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=469f394b251feebfb16090303da59206ba25acc6", "patch": "@@ -10,15 +10,14 @@\n \n // xfail-fast\n \n-use std::bool;\n use std::int;\n use std::libc::c_void;\n use std::ptr;\n use std::sys;\n use std::vec::UnboxedVecRepr;\n-use intrinsic::{TyDesc, get_tydesc, visit_tydesc, TyVisitor, Opaque};\n+use std::unstable::intrinsics::{TyDesc, get_tydesc, visit_tydesc, TyVisitor, Opaque};\n \n-#[doc = \"High-level interfaces to `intrinsic::visit_ty` reflection system.\"]\n+#[doc = \"High-level interfaces to `std::unstable::intrinsics::visit_ty` reflection system.\"]\n \n /// Trait for visitor that wishes to reflect on data.\n trait movable_ptr {\n@@ -637,7 +636,9 @@ impl TyVisitor for my_visitor {\n }\n \n fn get_tydesc_for<T>(_t: T) -> *TyDesc {\n-    get_tydesc::<T>()\n+    unsafe {\n+        get_tydesc::<T>()\n+    }\n }\n \n struct Triple { x: int, y: int, z: int }\n@@ -651,8 +652,8 @@ pub fn main() {\n                                        vals: ~[]});\n         let v = ptr_visit_adaptor(Inner {inner: u});\n         let td = get_tydesc_for(r);\n-        unsafe { error!(\"tydesc sz: %u, align: %u\",\n-                        (*td).size, (*td).align); }\n+        error!(\"tydesc sz: %u, align: %u\",\n+               (*td).size, (*td).align);\n         let v = @v as @TyVisitor;\n         visit_tydesc(td, v);\n \n@@ -661,8 +662,7 @@ pub fn main() {\n             println(fmt!(\"val: %s\", *s));\n         }\n         error!(\"%?\", u.vals.clone());\n-        assert!(u.vals == ~[\n-            ~\"1\", ~\"2\", ~\"3\", ~\"true\", ~\"false\", ~\"5\", ~\"4\", ~\"3\", ~\"12\"\n-        ]);\n+        assert_eq!(u.vals.clone(),\n+                   ~[ ~\"1\", ~\"2\", ~\"3\", ~\"true\", ~\"false\", ~\"5\", ~\"4\", ~\"3\", ~\"12\"]);\n     }\n- }\n+}"}]}