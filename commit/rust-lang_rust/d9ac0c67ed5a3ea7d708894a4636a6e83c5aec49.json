{"sha": "d9ac0c67ed5a3ea7d708894a4636a6e83c5aec49", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5YWMwYzY3ZWQ1YTNlYTdkNzA4ODk0YTQ2MzZhNmU4M2M1YWVjNDk=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-07-25T21:53:05Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-07-25T21:53:05Z"}, "message": "Rewrite `get_size_and_align` so it doesn't duplicate work", "tree": {"sha": "986cf5617de9fb7164945709ab582d69f58e393b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/986cf5617de9fb7164945709ab582d69f58e393b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9ac0c67ed5a3ea7d708894a4636a6e83c5aec49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9ac0c67ed5a3ea7d708894a4636a6e83c5aec49", "html_url": "https://github.com/rust-lang/rust/commit/d9ac0c67ed5a3ea7d708894a4636a6e83c5aec49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9ac0c67ed5a3ea7d708894a4636a6e83c5aec49/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b75dfa8a2bac745d7d09212e3e28cb4f0bc28fdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/b75dfa8a2bac745d7d09212e3e28cb4f0bc28fdf", "html_url": "https://github.com/rust-lang/rust/commit/b75dfa8a2bac745d7d09212e3e28cb4f0bc28fdf"}], "stats": {"total": 69, "additions": 35, "deletions": 34}, "files": [{"sha": "c8e09ca4a1a47e4037fc8b3aa6490a63ebbe4a6e", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 35, "deletions": 34, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/d9ac0c67ed5a3ea7d708894a4636a6e83c5aec49/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ac0c67ed5a3ea7d708894a4636a6e83c5aec49/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=d9ac0c67ed5a3ea7d708894a4636a6e83c5aec49", "patch": "@@ -535,40 +535,41 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         id: AllocId,\n         liveness: AllocCheck,\n     ) -> InterpResult<'static, (Size, Align)> {\n-        // Allocations of `static` items\n-        // Can't do this in the match argument, we may get cycle errors since the lock would\n-        // be held throughout the match.\n-        let alloc = self.tcx.alloc_map.lock().get(id);\n-        match alloc {\n-            Some(GlobalAlloc::Static(did)) => {\n-                // Use size and align of the type\n-                let ty = self.tcx.type_of(did);\n-                let layout = self.tcx.layout_of(ParamEnv::empty().and(ty)).unwrap();\n-                return Ok((layout.size, layout.align.abi));\n-            }\n-            _ => {}\n-        }\n-        // Regular allocations.\n-        if let Ok(alloc) = self.get(id) {\n-            return Ok((Size::from_bytes(alloc.bytes.len() as u64), alloc.align));\n-        }\n-        // Function pointers.\n-        if let Ok(_) = self.get_fn_alloc(id) {\n-            return if let AllocCheck::Dereferencable = liveness {\n-                // The caller requested no function pointers.\n-                err!(DerefFunctionPointer)\n-            } else {\n-                Ok((Size::ZERO, Align::from_bytes(1).unwrap()))\n-            };\n-        }\n-        // The rest must be dead.\n-        if let AllocCheck::MaybeDead = liveness {\n-            // Deallocated pointers are allowed, we should be able to find\n-            // them in the map.\n-            Ok(*self.dead_alloc_map.get(&id)\n-                .expect(\"deallocated pointers should all be recorded in `dead_alloc_map`\"))\n-        } else {\n-            err!(DanglingPointerDeref)\n+        let alloc_or_size_align = self.alloc_map.get_or(id, || -> Result<_, InterpResult<'static, (Size, Align)>> {\n+            // Can't do this in the match argument, we may get cycle errors since the lock would\n+            // be held throughout the match.\n+            let alloc = self.tcx.alloc_map.lock().get(id);\n+            Err(match alloc {\n+                Some(GlobalAlloc::Static(did)) => {\n+                    // Use size and align of the type\n+                    let ty = self.tcx.type_of(did);\n+                    let layout = self.tcx.layout_of(ParamEnv::empty().and(ty)).unwrap();\n+                    Ok((layout.size, layout.align.abi))\n+                },\n+                Some(GlobalAlloc::Memory(alloc)) =>\n+                    // this duplicates the logic on the `match alloc_or_size_align`, but due to the\n+                    // API of `get_or` there's no way around that.\n+                    Ok((Size::from_bytes(alloc.bytes.len() as u64), alloc.align)),\n+                Some(GlobalAlloc::Function(_)) => if let AllocCheck::Dereferencable = liveness {\n+                    // The caller requested no function pointers.\n+                    err!(DerefFunctionPointer)\n+                } else {\n+                    Ok((Size::ZERO, Align::from_bytes(1).unwrap()))\n+                },\n+                // The rest must be dead.\n+                None => if let AllocCheck::MaybeDead = liveness {\n+                    // Deallocated pointers are allowed, we should be able to find\n+                    // them in the map.\n+                    Ok(*self.dead_alloc_map.get(&id)\n+                        .expect(\"deallocated pointers should all be recorded in `dead_alloc_map`\"))\n+                } else {\n+                    err!(DanglingPointerDeref)\n+                },\n+            })\n+        });\n+        match alloc_or_size_align {\n+            Ok((_, alloc)) => Ok((Size::from_bytes(alloc.bytes.len() as u64), alloc.align)),\n+            Err(done) => done,\n         }\n     }\n "}]}