{"sha": "e843245716586222fe997b8ffe10ab8bf91fc399", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NDMyNDU3MTY1ODYyMjJmZTk5N2I4ZmZlMTBhYjhiZjkxZmMzOTk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-12-26T22:01:45Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-12-30T03:16:53Z"}, "message": "review comments", "tree": {"sha": "104c76f9d528e2b2d5d589132b8a0de99c9831f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/104c76f9d528e2b2d5d589132b8a0de99c9831f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e843245716586222fe997b8ffe10ab8bf91fc399", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e843245716586222fe997b8ffe10ab8bf91fc399", "html_url": "https://github.com/rust-lang/rust/commit/e843245716586222fe997b8ffe10ab8bf91fc399", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e843245716586222fe997b8ffe10ab8bf91fc399/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a9c3f92ccc2056e73a88840afde6b9df0dbf7ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a9c3f92ccc2056e73a88840afde6b9df0dbf7ec", "html_url": "https://github.com/rust-lang/rust/commit/3a9c3f92ccc2056e73a88840afde6b9df0dbf7ec"}], "stats": {"total": 93, "additions": 46, "deletions": 47}, "files": [{"sha": "e0908d5d18b19dadea520197ca31ba40bbba90a6", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e843245716586222fe997b8ffe10ab8bf91fc399/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e843245716586222fe997b8ffe10ab8bf91fc399/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=e843245716586222fe997b8ffe10ab8bf91fc399", "patch": "@@ -2748,11 +2748,12 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     }\n \n     pub fn ty_of_arg(&self, ty: &hir::Ty<'_>, expected_ty: Option<Ty<'tcx>>) -> Ty<'tcx> {\n-        if crate::collect::is_infer_ty(ty) && expected_ty.is_some() {\n-            self.record_ty(ty.hir_id, expected_ty.unwrap(), ty.span);\n-            expected_ty.unwrap()\n-        } else {\n-            self.ast_ty_to_ty(ty)\n+        match ty.kind {\n+            hir::TyKind::Infer if expected_ty.is_some() => {\n+                self.record_ty(ty.hir_id, expected_ty.unwrap(), ty.span);\n+                expected_ty.unwrap()\n+            }\n+            _ => self.ast_ty_to_ty(ty),\n         }\n     }\n "}, {"sha": "6b968155e744c2e03bf4e08f0fbac93a3ef4bc5d", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 40, "deletions": 42, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/e843245716586222fe997b8ffe10ab8bf91fc399/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e843245716586222fe997b8ffe10ab8bf91fc399/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=e843245716586222fe997b8ffe10ab8bf91fc399", "patch": "@@ -133,52 +133,50 @@ crate fn placeholder_type_error(\n     placeholder_types: Vec<Span>,\n     suggest: bool,\n ) {\n-    if !placeholder_types.is_empty() {\n-        let possible_names = [\"T\", \"K\", \"L\", \"A\", \"B\", \"C\"];\n-        let used_names = generics\n-            .iter()\n-            .filter_map(|p| match p.name {\n-                hir::ParamName::Plain(ident) => Some(ident.name),\n-                _ => None,\n-            })\n-            .collect::<Vec<_>>();\n+    if placeholder_types.is_empty() {\n+        return;\n+    }\n+    let possible_names = [\"T\", \"K\", \"L\", \"A\", \"B\", \"C\"];\n+    let used_names = generics\n+        .iter()\n+        .filter_map(|p| match p.name {\n+            hir::ParamName::Plain(ident) => Some(ident.name),\n+            _ => None,\n+        })\n+        .collect::<Vec<_>>();\n \n-        let mut type_name = \"ParamName\";\n-        for name in &possible_names {\n-            if !used_names.contains(&Symbol::intern(name)) {\n-                type_name = name;\n-                break;\n-            }\n-        }\n+    let type_name = possible_names\n+        .iter()\n+        .find(|n| !used_names.contains(&Symbol::intern(n)))\n+        .unwrap_or(&\"ParamName\");\n \n-        let mut sugg: Vec<_> =\n-            placeholder_types.iter().map(|sp| (*sp, type_name.to_string())).collect();\n-        if generics.is_empty() {\n-            sugg.push((ident_span.shrink_to_hi(), format!(\"<{}>\", type_name)));\n-        } else {\n-            sugg.push((\n-                generics.iter().last().unwrap().span.shrink_to_hi(),\n-                format!(\", {}\", type_name),\n-            ));\n-        }\n-        let mut err = struct_span_err!(\n-            tcx.sess,\n-            placeholder_types.clone(),\n-            E0121,\n-            \"the type placeholder `_` is not allowed within types on item signatures\",\n+    let mut sugg: Vec<_> =\n+        placeholder_types.iter().map(|sp| (*sp, type_name.to_string())).collect();\n+    if generics.is_empty() {\n+        sugg.push((ident_span.shrink_to_hi(), format!(\"<{}>\", type_name)));\n+    } else {\n+        sugg.push((\n+            generics.iter().last().unwrap().span.shrink_to_hi(),\n+            format!(\", {}\", type_name),\n+        ));\n+    }\n+    let mut err = struct_span_err!(\n+        tcx.sess,\n+        placeholder_types.clone(),\n+        E0121,\n+        \"the type placeholder `_` is not allowed within types on item signatures\",\n+    );\n+    for span in &placeholder_types {\n+        err.span_label(*span, \"not allowed in type signatures\");\n+    }\n+    if suggest {\n+        err.multipart_suggestion(\n+            \"use type parameters instead\",\n+            sugg,\n+            Applicability::HasPlaceholders,\n         );\n-        for span in &placeholder_types {\n-            err.span_label(*span, \"not allowed in type signatures\");\n-        }\n-        if suggest {\n-            err.multipart_suggestion(\n-                \"use type parameters instead\",\n-                sugg,\n-                Applicability::HasPlaceholders,\n-            );\n-        }\n-        err.emit();\n     }\n+    err.emit();\n }\n \n fn reject_placeholder_type_signatures_in_item(tcx: TyCtxt<'tcx>, item: &'tcx hir::Item<'tcx>) {"}]}