{"sha": "39d164d0421a7560ea1e35a2347fda223cd43f6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5ZDE2NGQwNDIxYTc1NjBlYTFlMzVhMjM0N2ZkYTIyM2NkNDNmNmU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-07T17:31:42Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-12T21:57:58Z"}, "message": "New tests --- check that wf relation is being checked in various positions", "tree": {"sha": "138ecaa447ad58e7c1e2068bcd927427236597b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/138ecaa447ad58e7c1e2068bcd927427236597b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39d164d0421a7560ea1e35a2347fda223cd43f6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39d164d0421a7560ea1e35a2347fda223cd43f6e", "html_url": "https://github.com/rust-lang/rust/commit/39d164d0421a7560ea1e35a2347fda223cd43f6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39d164d0421a7560ea1e35a2347fda223cd43f6e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bb1e2291195a518ddeef6e64337f4edb1432a72", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bb1e2291195a518ddeef6e64337f4edb1432a72", "html_url": "https://github.com/rust-lang/rust/commit/6bb1e2291195a518ddeef6e64337f4edb1432a72"}], "stats": {"total": 985, "additions": 985, "deletions": 0}, "files": [{"sha": "2ad1163052b37170ca373223bf571132ceb735dd", "filename": "src/test/compile-fail/regions-wf-trait-object.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fregions-wf-trait-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fregions-wf-trait-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-wf-trait-object.rs?ref=39d164d0421a7560ea1e35a2347fda223cd43f6e", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.t\n+\n+// Check that the explicit lifetime bound (`'b`, in this example) must\n+// outlive all the superbound from the trait (`'a`, in this example).\n+\n+trait TheTrait<'t>: 't { }\n+\n+struct Foo<'a,'b> {\n+        //~^ ERROR lifetime bound not satisfied\n+    x: Box<TheTrait<'a>+'b>\n+}\n+\n+fn main() { }"}, {"sha": "aaae41c766762faedb68c2958c15891eada5bbb6", "filename": "src/test/compile-fail/wf-array-elem-sized.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-array-elem-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-array-elem-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-array-elem-sized.rs?ref=39d164d0421a7560ea1e35a2347fda223cd43f6e", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that array elemen types must be Sized. Issue #25692.\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+struct Foo { //~ WARN E0277\n+    foo: [[u8]],\n+}\n+\n+#[rustc_error]\n+fn main() { } //~ ERROR compilation successful"}, {"sha": "c3015afd8dd0d95f00f8ae6841b61a831f9104a0", "filename": "src/test/compile-fail/wf-const-type.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-const-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-const-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-const-type.rs?ref=39d164d0421a7560ea1e35a2347fda223cd43f6e", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we check the types of constants are well-formed.\n+\n+#![feature(associated_type_defaults)]\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+struct IsCopy<T:Copy> { t: T }\n+struct NotCopy;\n+\n+const FOO: IsCopy<Option<NotCopy>> = IsCopy { t: None };\n+//~^ ERROR E0277\n+\n+#[rustc_error]\n+fn main() { }"}, {"sha": "1d271d1530a75823fc7c3da83ab75e8d0eee0473", "filename": "src/test/compile-fail/wf-enum-bound.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-enum-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-enum-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-enum-bound.rs?ref=39d164d0421a7560ea1e35a2347fda223cd43f6e", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we check enum bounds for WFedness.\n+\n+#![feature(associated_type_defaults)]\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+trait ExtraCopy<T:Copy> { }\n+\n+enum SomeEnum<T,U> //~ WARN E0277\n+    where T: ExtraCopy<U>\n+{\n+    SomeVariant(T,U)\n+}\n+\n+#[rustc_error]\n+fn main() { } //~ ERROR compilation successful"}, {"sha": "40a939350822b79a56d5bb806cb490cf70e2bb77", "filename": "src/test/compile-fail/wf-enum-fields.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-enum-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-enum-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-enum-fields.rs?ref=39d164d0421a7560ea1e35a2347fda223cd43f6e", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we check struct fields for WFedness.\n+\n+#![feature(associated_type_defaults)]\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+struct IsCopy<T:Copy> {\n+    value: T\n+}\n+\n+enum SomeEnum<A> {\n+    SomeVariant(IsCopy<A>) //~ ERROR E0277\n+}\n+\n+enum AnotherEnum<A> { //~ ERROR E0277\n+    AnotherVariant {\n+        f: IsCopy<A>\n+    }\n+}\n+\n+#[rustc_error]\n+fn main() { }"}, {"sha": "769894613c76496dfb318e339ef46e2a9addc342", "filename": "src/test/compile-fail/wf-fn-where-clause.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-fn-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-fn-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-fn-where-clause.rs?ref=39d164d0421a7560ea1e35a2347fda223cd43f6e", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we check where-clauses on fn items.\n+\n+#![feature(associated_type_defaults)]\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+trait ExtraCopy<T:Copy> { }\n+\n+fn foo<T,U>() where T: ExtraCopy<U> //~ WARN E0277\n+{\n+}\n+\n+#[rustc_error]\n+fn main() { } //~ ERROR compilation successful"}, {"sha": "2d7727fff35033c2c98157c381bff06cf90ee414", "filename": "src/test/compile-fail/wf-impl-associated-type-region.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-impl-associated-type-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-impl-associated-type-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-impl-associated-type-region.rs?ref=39d164d0421a7560ea1e35a2347fda223cd43f6e", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that we require that associated types in an impl are well-formed.\n+\n+#![feature(rustc_attrs)]\n+\n+pub trait Foo<'a> {\n+    type Bar;\n+}\n+\n+impl<'a, T> Foo<'a> for T {\n+    type Bar = &'a T; //~ WARN E0309\n+}\n+\n+#[rustc_error]\n+fn main() { } //~ ERROR compilation"}, {"sha": "8a612c321570d4253a196955fc9de04be17e46fb", "filename": "src/test/compile-fail/wf-impl-associated-type-trait.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-impl-associated-type-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-impl-associated-type-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-impl-associated-type-trait.rs?ref=39d164d0421a7560ea1e35a2347fda223cd43f6e", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that we require that associated types in an impl are well-formed.\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+pub trait MyHash { }\n+\n+pub struct MySet<T:MyHash> {\n+    data: Vec<T>\n+}\n+\n+pub trait Foo {\n+    type Bar;\n+}\n+\n+impl<T> Foo for T {\n+    type Bar = MySet<T>;\n+    //~^ WARN the trait `MyHash` is not implemented for the type `T`\n+}\n+\n+#[rustc_error]\n+fn main() { } //~ ERROR compilation successful\n+"}, {"sha": "e302cac0006b17e3fad01b7c2f1724c10613a0e2", "filename": "src/test/compile-fail/wf-in-fn-arg.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-in-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-in-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-in-fn-arg.rs?ref=39d164d0421a7560ea1e35a2347fda223cd43f6e", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that we enforce WF conditions also for argument types in fn items.\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+struct MustBeCopy<T:Copy> {\n+    t: T\n+}\n+\n+fn bar<T>(_: &MustBeCopy<T>) //~ ERROR E0277\n+{\n+}\n+\n+fn main() { }"}, {"sha": "719bc9282ad7ddd9548e312ef0f5acc6b37fe0d2", "filename": "src/test/compile-fail/wf-in-fn-ret.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-in-fn-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-in-fn-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-in-fn-ret.rs?ref=39d164d0421a7560ea1e35a2347fda223cd43f6e", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that we enforce WF conditions also for return types in fn items.\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+struct MustBeCopy<T:Copy> {\n+    t: T\n+}\n+\n+fn bar<T>() -> MustBeCopy<T> //~ ERROR E0277\n+{\n+}\n+\n+fn main() { }"}, {"sha": "08ee0e954ac2d73daae4b5833c73945b0685c42e", "filename": "src/test/compile-fail/wf-in-fn-type-arg.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-in-fn-type-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-in-fn-type-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-in-fn-type-arg.rs?ref=39d164d0421a7560ea1e35a2347fda223cd43f6e", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that we enforce WF conditions also for types in fns.\n+\n+struct MustBeCopy<T:Copy> {\n+    t: T\n+}\n+\n+struct Bar<T> {\n+    // needs T: Copy\n+    x: fn(MustBeCopy<T>) //~ ERROR E0277\n+}\n+\n+fn main() { }"}, {"sha": "6942f7860606090617208d81c2910d1a5c450adf", "filename": "src/test/compile-fail/wf-in-fn-type-ret.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-in-fn-type-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-in-fn-type-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-in-fn-type-ret.rs?ref=39d164d0421a7560ea1e35a2347fda223cd43f6e", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that we enforce WF conditions also for types in fns.\n+\n+struct MustBeCopy<T:Copy> {\n+    t: T\n+}\n+\n+struct Foo<T> {\n+    // needs T: 'static\n+    x: fn() -> MustBeCopy<T> //~ ERROR E0277\n+}\n+\n+fn main() { }"}, {"sha": "08853c69d6dacd04859a5ac901711618edb55e9f", "filename": "src/test/compile-fail/wf-in-fn-type-static.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-in-fn-type-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-in-fn-type-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-in-fn-type-static.rs?ref=39d164d0421a7560ea1e35a2347fda223cd43f6e", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that we enforce WF conditions related to regions also for\n+// types in fns.\n+\n+#![allow(dead_code)]\n+#![feature(rustc_attrs)]\n+\n+struct MustBeCopy<T:Copy> {\n+    t: T\n+}\n+\n+struct Foo<T> { //~ WARN E0310\n+    // needs T: 'static\n+    x: fn() -> &'static T //~ WARN E0310\n+}\n+\n+struct Bar<T> { //~ WARN E0310\n+    // needs T: Copy\n+    x: fn(&'static T) //~ WARN E0310\n+}\n+\n+#[rustc_error]\n+fn main() { } //~ ERROR compilation successful"}, {"sha": "fc3d234aac252d6ae31db99f70c9c46185e30602", "filename": "src/test/compile-fail/wf-in-fn-where-clause.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-in-fn-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-in-fn-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-in-fn-where-clause.rs?ref=39d164d0421a7560ea1e35a2347fda223cd43f6e", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that we enforce WF conditions also for where clauses in fn items.\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+trait MustBeCopy<T:Copy> {\n+}\n+\n+fn bar<T,U>() //~ WARN E0277\n+    where T: MustBeCopy<U>\n+{\n+}\n+\n+#[rustc_error]\n+fn main() { } //~ ERROR compilation successful"}, {"sha": "36c8f5be308c51f856b7655bef00429a5221fe54", "filename": "src/test/compile-fail/wf-in-obj-type-static.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-in-obj-type-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-in-obj-type-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-in-obj-type-static.rs?ref=39d164d0421a7560ea1e35a2347fda223cd43f6e", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that we enforce WF conditions also for types in fns.\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+trait Object<T> { }\n+\n+struct MustBeCopy<T:Copy> {\n+    t: T\n+}\n+\n+struct Foo<T> { //~ WARN E0310\n+    // needs T: 'static\n+    x: Object<&'static T> //~ WARN E0310\n+}\n+\n+#[rustc_error]\n+fn main() { } //~ ERROR compilation successful"}, {"sha": "add48219c1d7eb5cdc6166b36b532e05a7447405", "filename": "src/test/compile-fail/wf-in-obj-type-trait.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-in-obj-type-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-in-obj-type-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-in-obj-type-trait.rs?ref=39d164d0421a7560ea1e35a2347fda223cd43f6e", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that we enforce WF conditions also for types in fns.\n+\n+trait Object<T> { }\n+\n+struct MustBeCopy<T:Copy> {\n+    t: T\n+}\n+\n+struct Bar<T> {\n+    // needs T: Copy\n+    x: Object<MustBeCopy<T>> //~ ERROR E0277\n+}\n+\n+fn main() { }"}, {"sha": "44671be8355336674ed49ef30e406ec064a2bda1", "filename": "src/test/compile-fail/wf-inherent-impl-method-where-clause.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-inherent-impl-method-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-inherent-impl-method-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-inherent-impl-method-where-clause.rs?ref=39d164d0421a7560ea1e35a2347fda223cd43f6e", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we check where-clauses on inherent impl methods.\n+\n+#![feature(associated_type_defaults)]\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+trait ExtraCopy<T:Copy> { }\n+\n+struct Foo<T,U>(T,U);\n+\n+impl<T,U> Foo<T,U> {\n+    fn foo(self) where T: ExtraCopy<U> //~ WARN E0277\n+    {}\n+}\n+\n+#[rustc_error]\n+fn main() { } //~ ERROR compilation successful"}, {"sha": "a0f588c1961d17ec2c9d6315e6b6bb20e6d270ca", "filename": "src/test/compile-fail/wf-inherent-impl-where-clause.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-inherent-impl-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-inherent-impl-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-inherent-impl-where-clause.rs?ref=39d164d0421a7560ea1e35a2347fda223cd43f6e", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we check where-clauses on inherent impls.\n+\n+#![feature(associated_type_defaults)]\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+trait ExtraCopy<T:Copy> { }\n+\n+struct Foo<T,U>(T,U);\n+\n+impl<T,U> Foo<T,U> where T: ExtraCopy<U> //~ WARN E0277\n+{\n+}\n+\n+#[rustc_error]\n+fn main() { } //~ ERROR compilation successful"}, {"sha": "92c0a8c5be8af92c0c15a14b38bddc4aa623c020", "filename": "src/test/compile-fail/wf-object-safe.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-object-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-object-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-object-safe.rs?ref=39d164d0421a7560ea1e35a2347fda223cd43f6e", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that object-safe traits are not WF when used as object types.\n+// Issue #21953.\n+\n+trait A {\n+    fn foo(&self, _x: &Self);\n+}\n+\n+fn main() {\n+    let _x: &A; //~ ERROR E0038\n+}"}, {"sha": "eca128f4a1380219035a8df2436676c424960895", "filename": "src/test/compile-fail/wf-outlives-ty-in-fn-or-trait.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-outlives-ty-in-fn-or-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-outlives-ty-in-fn-or-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-outlives-ty-in-fn-or-trait.rs?ref=39d164d0421a7560ea1e35a2347fda223cd43f6e", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that an appearance of `T` in fn args or in a trait object must\n+// still meet the outlives bounds. Since this is a new requirement,\n+// this is currently only a warning, not a hard error.\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+trait Trait<T> { }\n+\n+struct Foo<'a,T> {\n+    //~^ WARN E0309\n+    f: &'a fn(T),\n+    //~^ WARN E0309\n+}\n+\n+struct Bar<'a,T> {\n+    //~^ WARN E0309\n+    f: &'a Trait<T>,\n+    //~^ WARN E0309\n+}\n+\n+#[rustc_error]\n+fn main() { } //~ ERROR compilation successful\n+"}, {"sha": "ba02c5dca3e6d7d49635fb92edacae2a88c5dfca", "filename": "src/test/compile-fail/wf-static-type.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-static-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-static-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-static-type.rs?ref=39d164d0421a7560ea1e35a2347fda223cd43f6e", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we check the types of statics are well-formed.\n+\n+#![feature(associated_type_defaults)]\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+struct IsCopy<T:Copy> { t: T }\n+struct NotCopy;\n+\n+static FOO: IsCopy<Option<NotCopy>> = IsCopy { t: None };\n+//~^ ERROR E0277\n+\n+#[rustc_error]\n+fn main() { }"}, {"sha": "43378061e40c0bc5e04f48e8c458847cfdc67692", "filename": "src/test/compile-fail/wf-struct-bound.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-struct-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-struct-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-struct-bound.rs?ref=39d164d0421a7560ea1e35a2347fda223cd43f6e", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we check struct bounds for WFedness.\n+\n+#![feature(associated_type_defaults)]\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+trait ExtraCopy<T:Copy> { }\n+\n+struct SomeStruct<T,U> //~ WARN E0277\n+    where T: ExtraCopy<U>\n+{\n+    data: (T,U)\n+}\n+\n+#[rustc_error]\n+fn main() { } //~ ERROR compilation successful"}, {"sha": "8a631a6c335a050598492ad1e5663006edd5e60f", "filename": "src/test/compile-fail/wf-struct-field.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-struct-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-struct-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-struct-field.rs?ref=39d164d0421a7560ea1e35a2347fda223cd43f6e", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we check struct fields for WFedness.\n+\n+#![feature(associated_type_defaults)]\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+struct IsCopy<T:Copy> {\n+    value: T\n+}\n+\n+struct SomeStruct<A> {\n+    data: IsCopy<A> //~ ERROR E0277\n+}\n+\n+#[rustc_error]\n+fn main() { }"}, {"sha": "63a532138e3bd84b3464f78fa581c20818f9a5e1", "filename": "src/test/compile-fail/wf-trait-associated-type-bound.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-trait-associated-type-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-trait-associated-type-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-trait-associated-type-bound.rs?ref=39d164d0421a7560ea1e35a2347fda223cd43f6e", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we check associated type bounds for WFedness.\n+\n+#![feature(associated_type_defaults)]\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+trait ExtraCopy<T:Copy> { }\n+\n+trait SomeTrait<T> { //~ WARN E0277\n+    type Type1: ExtraCopy<T>;\n+}\n+\n+#[rustc_error]\n+fn main() { } //~ ERROR compilation successful"}, {"sha": "b3aa4e19c96560a4cb5c830b8a2da609acf1522f", "filename": "src/test/compile-fail/wf-trait-associated-type-region.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-trait-associated-type-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-trait-associated-type-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-trait-associated-type-region.rs?ref=39d164d0421a7560ea1e35a2347fda223cd43f6e", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we check associated type default values for WFedness.\n+\n+#![feature(associated_type_defaults)]\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+trait SomeTrait<'a> {\n+    type Type1;\n+    type Type2 = &'a Self::Type1;\n+    //~^ WARN E0309\n+}\n+\n+#[rustc_error]\n+fn main() { } //~ ERROR compilation successful"}, {"sha": "a11cbc2cb1913080342cbaa4137a24eccc6542e0", "filename": "src/test/compile-fail/wf-trait-associated-type-trait", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-trait-associated-type-trait", "raw_url": "https://github.com/rust-lang/rust/raw/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-trait-associated-type-trait", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-trait-associated-type-trait?ref=39d164d0421a7560ea1e35a2347fda223cd43f6e"}, {"sha": "8c491e04c981dff443772c539de9a0334f06d8a6", "filename": "src/test/compile-fail/wf-trait-associated-type-trait.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-trait-associated-type-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-trait-associated-type-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-trait-associated-type-trait.rs?ref=39d164d0421a7560ea1e35a2347fda223cd43f6e", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we check associated type default values for WFedness.\n+\n+#![feature(associated_type_defaults)]\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+struct IsCopy<T:Copy> { x: T }\n+\n+trait SomeTrait {\n+    type Type1;\n+    type Type2 = IsCopy<Self::Type1>;\n+    //~^ WARN E0277\n+}\n+\n+#[rustc_error]\n+fn main() { } //~ ERROR compilation successful"}, {"sha": "147b3ce236d42d1e599e401ac82eb1399c418235", "filename": "src/test/compile-fail/wf-trait-bound.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-trait-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-trait-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-trait-bound.rs?ref=39d164d0421a7560ea1e35a2347fda223cd43f6e", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we check supertrait bounds for WFedness.\n+\n+#![feature(associated_type_defaults)]\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+trait ExtraCopy<T:Copy> { }\n+\n+trait SomeTrait<T,U> //~ WARN E0277\n+    where T: ExtraCopy<U>\n+{\n+}\n+\n+#[rustc_error]\n+fn main() { } //~ ERROR compilation successful"}, {"sha": "57c6c1979f87ed0094714a5f672c53964673af87", "filename": "src/test/compile-fail/wf-trait-default-fn-arg.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-trait-default-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-trait-default-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-trait-default-fn-arg.rs?ref=39d164d0421a7560ea1e35a2347fda223cd43f6e", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that we test WF conditions for fn arguments. Because the\n+// current code is so goofy, this is only a warning for now.\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n+\n+struct Bar<T:Eq+?Sized> { value: Box<T> }\n+\n+trait Foo {\n+    fn bar(&self, x: &Bar<Self>) {\n+        //~^ WARN E0277\n+        //\n+        // Here, Eq ought to be implemented.\n+    }\n+}\n+\n+#[rustc_error]\n+fn main() { } //~ ERROR compilation successful"}, {"sha": "939876403e54db06d2dfb3e96b88f5c605ec59d5", "filename": "src/test/compile-fail/wf-trait-default-fn-ret.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-trait-default-fn-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-trait-default-fn-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-trait-default-fn-ret.rs?ref=39d164d0421a7560ea1e35a2347fda223cd43f6e", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that we test WF conditions for fn arguments. Because the\n+// current code is so goofy, this is only a warning for now.\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n+\n+struct Bar<T:Eq+?Sized> { value: Box<T> }\n+\n+trait Foo {\n+    fn bar(&self) -> Bar<Self> {\n+        //~^ WARN E0277\n+        //\n+        // Here, Eq ought to be implemented.\n+        loop { }\n+    }\n+}\n+\n+#[rustc_error]\n+fn main() { } //~ ERROR compilation successful"}, {"sha": "b1c0d71fc5b3b75c784c8fb315c4c266931db5d6", "filename": "src/test/compile-fail/wf-trait-default-fn-where-clause.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-trait-default-fn-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-trait-default-fn-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-trait-default-fn-where-clause.rs?ref=39d164d0421a7560ea1e35a2347fda223cd43f6e", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that we test WF conditions for fn arguments. Because the\n+// current code is so goofy, this is only a warning for now.\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n+\n+trait Bar<T:Eq+?Sized> { }\n+\n+trait Foo {\n+    fn bar<A>(&self) where A: Bar<Self> {\n+        //~^ WARN E0277\n+        //\n+        // Here, Eq ought to be implemented.\n+    }\n+}\n+\n+#[rustc_error]\n+fn main() { } //~ ERROR compilation successful"}, {"sha": "ff263c85eb371a6bce67ec6b1430c5c786424914", "filename": "src/test/compile-fail/wf-trait-fn-arg.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-trait-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-trait-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-trait-fn-arg.rs?ref=39d164d0421a7560ea1e35a2347fda223cd43f6e", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that we test WF conditions for fn arguments in a trait definition.\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n+\n+struct Bar<T:Eq+?Sized> { value: Box<T> }\n+\n+trait Foo {\n+    fn bar(&self, x: &Bar<Self>);\n+        //~^ WARN E0277\n+        //\n+        // Here, Eq ought to be implemented.\n+}\n+\n+#[rustc_error]\n+fn main() { } //~ ERROR compilation successful"}, {"sha": "5c8f3030c2c21b947879a13dde2a9ac53e12459a", "filename": "src/test/compile-fail/wf-trait-fn-ret.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-trait-fn-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-trait-fn-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-trait-fn-ret.rs?ref=39d164d0421a7560ea1e35a2347fda223cd43f6e", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that we test WF conditions for fn return types in a trait definition.\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n+\n+struct Bar<T:Eq+?Sized> { value: Box<T> }\n+\n+trait Foo {\n+    fn bar(&self) -> &Bar<Self>;\n+        //~^ WARN E0277\n+        //\n+        // Here, Eq ought to be implemented.\n+}\n+\n+#[rustc_error]\n+fn main() { } //~ ERROR compilation successful"}, {"sha": "51b5475e51fba1df8398509b65f3482983fcb5c9", "filename": "src/test/compile-fail/wf-trait-fn-where-clause.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-trait-fn-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-trait-fn-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-trait-fn-where-clause.rs?ref=39d164d0421a7560ea1e35a2347fda223cd43f6e", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that we test WF conditions for fn where clauses in a trait definition.\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n+\n+struct Bar<T:Eq+?Sized> { value: Box<T> }\n+\n+trait Foo {\n+    fn bar(&self) where Bar<Self>: Copy;\n+        //~^ WARN E0277\n+        //\n+        // Here, Eq ought to be implemented.\n+}\n+\n+#[rustc_error]\n+fn main() { } //~ ERROR compilation successful"}, {"sha": "58ee766dad112fdb40c52ae89e9a03c8ab6cb794", "filename": "src/test/compile-fail/wf-trait-superbound.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-trait-superbound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Fcompile-fail%2Fwf-trait-superbound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-trait-superbound.rs?ref=39d164d0421a7560ea1e35a2347fda223cd43f6e", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we check supertrait bounds for WFedness.\n+\n+#![feature(associated_type_defaults)]\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+trait ExtraCopy<T:Copy> { }\n+\n+trait SomeTrait<T>: ExtraCopy<T> { //~ WARN E0277\n+}\n+\n+#[rustc_error]\n+fn main() { } //~ ERROR compilation successful"}, {"sha": "9a6ea2272fea7c5ca453595a1c0f3343eed99212", "filename": "src/test/run-pass/project-defer-unification.rs", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Frun-pass%2Fproject-defer-unification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d164d0421a7560ea1e35a2347fda223cd43f6e/src%2Ftest%2Frun-pass%2Fproject-defer-unification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproject-defer-unification.rs?ref=39d164d0421a7560ea1e35a2347fda223cd43f6e", "patch": "@@ -0,0 +1,105 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// A regression test extracted from image-0.3.11. The point of\n+// failure was in `index_colors` below.\n+\n+use std::ops::{Deref, DerefMut};\n+\n+#[derive(Copy, Clone)]\n+pub struct Luma<T: Primitive> { pub data: [T; 1] }\n+\n+impl<T: Primitive + 'static> Pixel for Luma<T> {\n+    type Subpixel = T;\n+}\n+\n+pub struct ImageBuffer<P: Pixel, Container> {\n+    pixels: P,\n+    c: Container,\n+}\n+\n+pub trait GenericImage: Sized {\n+    type Pixel: Pixel;\n+}\n+\n+pub trait Pixel: Copy + Clone {\n+    type Subpixel: Primitive;\n+}\n+\n+pub trait Primitive: Copy + PartialOrd<Self> + Clone  {\n+}\n+\n+impl<P, Container> GenericImage for ImageBuffer<P, Container>\n+where P: Pixel + 'static,\n+      Container: Deref<Target=[P::Subpixel]> + DerefMut,\n+      P::Subpixel: 'static {\n+\n+    type Pixel = P;\n+}\n+\n+impl Primitive for u8 { }\n+\n+impl<P, Container> ImageBuffer<P, Container>\n+where P: Pixel + 'static,\n+      P::Subpixel: 'static,\n+      Container: Deref<Target=[P::Subpixel]>\n+{\n+    pub fn pixels<'a>(&'a self) -> Pixels<'a, Self> {\n+        loop { }\n+    }\n+\n+    pub fn pixels_mut(&mut self) -> PixelsMut<P> {\n+        loop { }\n+    }\n+}\n+\n+pub struct Pixels<'a, I: 'a> {\n+    image:  &'a I,\n+    x:      u32,\n+    y:      u32,\n+    width:  u32,\n+    height: u32\n+}\n+\n+impl<'a, I: GenericImage> Iterator for Pixels<'a, I> {\n+    type Item = (u32, u32, I::Pixel);\n+\n+    fn next(&mut self) -> Option<(u32, u32, I::Pixel)> {\n+        loop { }\n+    }\n+}\n+\n+pub struct PixelsMut<'a, P: Pixel + 'a> where P::Subpixel: 'a {\n+    chunks: &'a mut P::Subpixel\n+}\n+\n+impl<'a, P: Pixel + 'a> Iterator for PixelsMut<'a, P> where P::Subpixel: 'a {\n+    type Item = &'a mut P;\n+\n+    fn next(&mut self) -> Option<&'a mut P> {\n+        loop { }\n+    }\n+}\n+\n+pub fn index_colors<Pix>(image: &ImageBuffer<Pix, Vec<u8>>)\n+                         -> ImageBuffer<Luma<u8>, Vec<u8>>\n+where Pix: Pixel<Subpixel=u8> + 'static,\n+{\n+    let mut indices: ImageBuffer<_,Vec<_>> = loop { };\n+    for (pixel, idx) in image.pixels().zip(indices.pixels_mut()) {\n+        // failured occurred here ^^ because we were requiring that we\n+        // could project Pixel or Subpixel from `T_indices` (type of\n+        // `indices`), but the type is insufficiently constrained\n+        // until we reach the return below.\n+    }\n+    indices\n+}\n+\n+fn main() { }"}]}