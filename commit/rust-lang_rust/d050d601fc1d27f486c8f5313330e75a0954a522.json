{"sha": "d050d601fc1d27f486c8f5313330e75a0954a522", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNTBkNjAxZmMxZDI3ZjQ4NmM4ZjUzMTMzMzBlNzVhMDk1NGE1MjI=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertj@cs.washington.edu", "date": "2016-03-29T05:06:57Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-04-02T13:32:57Z"}, "message": "Added eq and neq handling to invalid upcast comparisons", "tree": {"sha": "e7a3dedce78e295fd52a4bcbb1afb6a4c834ef62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7a3dedce78e295fd52a4bcbb1afb6a4c834ef62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d050d601fc1d27f486c8f5313330e75a0954a522", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d050d601fc1d27f486c8f5313330e75a0954a522", "html_url": "https://github.com/rust-lang/rust/commit/d050d601fc1d27f486c8f5313330e75a0954a522", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d050d601fc1d27f486c8f5313330e75a0954a522/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90a61177298c9d73e2d3b842c199c36e1dfe77e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/90a61177298c9d73e2d3b842c199c36e1dfe77e3", "html_url": "https://github.com/rust-lang/rust/commit/90a61177298c9d73e2d3b842c199c36e1dfe77e3"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "9adc2cc5680da4f2cae5629c6076c436ceb0c228", "filename": "src/types.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d050d601fc1d27f486c8f5313330e75a0954a522/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d050d601fc1d27f486c8f5313330e75a0954a522/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=d050d601fc1d27f486c8f5313330e75a0954a522", "patch": "@@ -679,6 +679,7 @@ fn detect_absurd_comparison<'a>(cx: &LateContext, op: BinOp_, lhs: &'a Expr, rhs\n                 _ => return None,\n             }\n         }\n+        Rel::Ne | Rel::Eq => return None,\n     })\n }\n \n@@ -914,14 +915,20 @@ fn upcast_comparison_bounds_err(\n \n     if let Some(nlb) = lhs_bounds {\n         if let Some(norm_rhs_val) = node_as_const_fullint(cx, rhs) {\n-            if match rel {\n+            if rel == Rel::Eq || rel == Rel::Ne {\n+                if norm_rhs_val < nlb.0 || norm_rhs_val > nlb.0 {\n+                    err_upcast_comparison(cx, &span, lhs, rel == Rel::Ne);\n+                }\n+            } else if match rel {\n                 Rel::Lt => if invert { norm_rhs_val < nlb.0 } else { nlb.1 < norm_rhs_val },\n                 Rel::Le => if invert { norm_rhs_val <= nlb.0  } else { nlb.1 <= norm_rhs_val },\n+                Rel::Eq | Rel::Ne => unreachable!(),\n             } {\n                 err_upcast_comparison(cx, &span, lhs, true)\n             } else if match rel {\n                 Rel::Lt => if invert { norm_rhs_val >= nlb.1 } else { nlb.0 >= norm_rhs_val },\n                 Rel::Le => if invert { norm_rhs_val > nlb.1 } else { nlb.0 > norm_rhs_val },\n+                Rel::Eq | Rel::Ne => unreachable!(),\n             } {\n                 err_upcast_comparison(cx, &span, lhs, false)\n             }"}, {"sha": "a9181b35b3851e624a9ab344cafa68e83524c5b5", "filename": "src/utils/comparisons.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d050d601fc1d27f486c8f5313330e75a0954a522/src%2Futils%2Fcomparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d050d601fc1d27f486c8f5313330e75a0954a522/src%2Futils%2Fcomparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils%2Fcomparisons.rs?ref=d050d601fc1d27f486c8f5313330e75a0954a522", "patch": "@@ -4,6 +4,8 @@ use rustc_front::hir::{BinOp_, Expr};\n pub enum Rel {\n     Lt,\n     Le,\n+    Eq,\n+    Ne,\n }\n \n /// Put the expression in the form  `lhs < rhs` or `lhs <= rhs`.\n@@ -14,6 +16,8 @@ pub fn normalize_comparison<'a>(op: BinOp_, lhs: &'a Expr, rhs: &'a Expr)\n         BinOp_::BiLe => Some((Rel::Le, lhs, rhs)),\n         BinOp_::BiGt => Some((Rel::Lt, rhs, lhs)),\n         BinOp_::BiGe => Some((Rel::Le, rhs, lhs)),\n+        BinOp_::BiEq => Some((Rel::Eq, rhs, lhs)),\n+        BinOp_::BiNe => Some((Rel::Ne, rhs, lhs)),\n         _ => None,\n     }\n }"}]}