{"sha": "efe378d2b43b90f8cf549781e870bfa2ebe90fd0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmZTM3OGQyYjQzYjkwZjhjZjU0OTc4MWU4NzBiZmEyZWJlOTBmZDA=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-26T16:06:01Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-26T16:07:31Z"}, "message": "Make find_inner_item fallible\n\nThe ItemTree does not collect incomplete items, such as traits with no\nname, so the (malformed) AST node might have no corresponding item.", "tree": {"sha": "2b64c5197fa09129e1cfbce10947ec841d68fbea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b64c5197fa09129e1cfbce10947ec841d68fbea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efe378d2b43b90f8cf549781e870bfa2ebe90fd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efe378d2b43b90f8cf549781e870bfa2ebe90fd0", "html_url": "https://github.com/rust-lang/rust/commit/efe378d2b43b90f8cf549781e870bfa2ebe90fd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efe378d2b43b90f8cf549781e870bfa2ebe90fd0/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f6694b12eaae4aa0359319e57abfced97344227", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f6694b12eaae4aa0359319e57abfced97344227", "html_url": "https://github.com/rust-lang/rust/commit/7f6694b12eaae4aa0359319e57abfced97344227"}], "stats": {"total": 42, "additions": 28, "deletions": 14}, "files": [{"sha": "a7e2e09822ff421756663de87989bceeab9afce1", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/efe378d2b43b90f8cf549781e870bfa2ebe90fd0/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efe378d2b43b90f8cf549781e870bfa2ebe90fd0/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=efe378d2b43b90f8cf549781e870bfa2ebe90fd0", "patch": "@@ -561,7 +561,7 @@ impl ExprCollector<'_> {\n         }\n     }\n \n-    fn find_inner_item<N: ItemTreeNode>(&self, ast: &N::Source) -> ItemTreeId<N> {\n+    fn find_inner_item<N: ItemTreeNode>(&self, ast: &N::Source) -> Option<ItemTreeId<N>> {\n         let id = self.expander.ast_id(ast);\n         let tree = &self.item_trees[&id.file_id];\n \n@@ -573,17 +573,18 @@ impl ExprCollector<'_> {\n             .chain(tree.top_level_items().iter().copied())\n             .filter_map(|mod_item| mod_item.downcast::<N>())\n             .find(|tree_id| tree[*tree_id].ast_id().upcast() == id.value.upcast())\n-            .unwrap_or_else(|| {\n-                panic!(\n+            .or_else(|| {\n+                log::debug!(\n                     \"couldn't find inner {} item for {:?} (AST: `{}` - {:?})\",\n                     type_name::<N>(),\n                     id,\n                     ast.syntax(),\n                     ast.syntax(),\n-                )\n-            });\n+                );\n+                None\n+            })?;\n \n-        ItemTreeId::new(id.file_id, item_tree_id)\n+        Some(ItemTreeId::new(id.file_id, item_tree_id))\n     }\n \n     fn collect_expr_opt(&mut self, expr: Option<ast::Expr>) -> ExprId {\n@@ -623,44 +624,44 @@ impl ExprCollector<'_> {\n             .filter_map(|item| {\n                 let (def, name): (ModuleDefId, Option<ast::Name>) = match item {\n                     ast::ModuleItem::FnDef(def) => {\n-                        let id = self.find_inner_item(&def);\n+                        let id = self.find_inner_item(&def)?;\n                         (\n                             FunctionLoc { container: container.into(), id }.intern(self.db).into(),\n                             def.name(),\n                         )\n                     }\n                     ast::ModuleItem::TypeAliasDef(def) => {\n-                        let id = self.find_inner_item(&def);\n+                        let id = self.find_inner_item(&def)?;\n                         (\n                             TypeAliasLoc { container: container.into(), id }.intern(self.db).into(),\n                             def.name(),\n                         )\n                     }\n                     ast::ModuleItem::ConstDef(def) => {\n-                        let id = self.find_inner_item(&def);\n+                        let id = self.find_inner_item(&def)?;\n                         (\n                             ConstLoc { container: container.into(), id }.intern(self.db).into(),\n                             def.name(),\n                         )\n                     }\n                     ast::ModuleItem::StaticDef(def) => {\n-                        let id = self.find_inner_item(&def);\n+                        let id = self.find_inner_item(&def)?;\n                         (StaticLoc { container, id }.intern(self.db).into(), def.name())\n                     }\n                     ast::ModuleItem::StructDef(def) => {\n-                        let id = self.find_inner_item(&def);\n+                        let id = self.find_inner_item(&def)?;\n                         (StructLoc { container, id }.intern(self.db).into(), def.name())\n                     }\n                     ast::ModuleItem::EnumDef(def) => {\n-                        let id = self.find_inner_item(&def);\n+                        let id = self.find_inner_item(&def)?;\n                         (EnumLoc { container, id }.intern(self.db).into(), def.name())\n                     }\n                     ast::ModuleItem::UnionDef(def) => {\n-                        let id = self.find_inner_item(&def);\n+                        let id = self.find_inner_item(&def)?;\n                         (UnionLoc { container, id }.intern(self.db).into(), def.name())\n                     }\n                     ast::ModuleItem::TraitDef(def) => {\n-                        let id = self.find_inner_item(&def);\n+                        let id = self.find_inner_item(&def)?;\n                         (TraitLoc { container, id }.intern(self.db).into(), def.name())\n                     }\n                     ast::ModuleItem::ExternBlock(_) => return None, // FIXME: collect from extern blocks"}, {"sha": "99e876683546861bad8512057e7bdfb267ce8e3b", "filename": "crates/ra_hir_def/src/body/scope.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/efe378d2b43b90f8cf549781e870bfa2ebe90fd0/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efe378d2b43b90f8cf549781e870bfa2ebe90fd0/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs?ref=efe378d2b43b90f8cf549781e870bfa2ebe90fd0", "patch": "@@ -337,6 +337,19 @@ fn foo() {\n         );\n     }\n \n+    #[test]\n+    fn broken_inner_item() {\n+        do_check(\n+            r\"\n+            fn foo() {\n+                trait {}\n+                <|>\n+            }\n+        \",\n+            &[],\n+        );\n+    }\n+\n     fn do_check_local_name(ra_fixture: &str, expected_offset: u32) {\n         let (db, position) = TestDB::with_position(ra_fixture);\n         let file_id = position.file_id;"}]}