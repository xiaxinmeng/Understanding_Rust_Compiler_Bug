{"sha": "d2aeef06f2f41c0b7f4d13cd59cd07ad8a377e83", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyYWVlZjA2ZjJmNDFjMGI3ZjRkMTNjZDU5Y2QwN2FkOGEzNzdlODM=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-11-10T23:21:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-10T23:21:13Z"}, "message": "Rollup merge of #55764 - murarth:fix-rc-alloc, r=RalfJung\n\nFix Rc/Arc allocation layout\n\n* Rounds allocation layout up to a multiple of alignment\n* Adds a convenience method `Layout::pad_to_align` to perform rounding\n\nCloses #55747\n\ncc #55724", "tree": {"sha": "e690a983ab0484984882a62328b5d4c212b58fa9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e690a983ab0484984882a62328b5d4c212b58fa9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2aeef06f2f41c0b7f4d13cd59cd07ad8a377e83", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb52fpCRBK7hj4Ov3rIwAAdHIIADfzcQWb3MDSpfujLhHGsEDc\n7PWcdh33P+BsY2AdcBnHBsxCE3+glgDoGWPy8A5oFZQG4I2SGkMiZgfehKLXtWTg\nSf6pzNND+ySfff1T376+M91XVKfvnS+5fTLz/rxtgcScC+PaeuzEG9nac/wovg56\nA07IiR4h6skA9ZzRhY38Mgta28PxoRgxm9xSicnQzI7J+j2VLLetciyoYsUXi2Kq\nrCPBGXWuL9GsM8WSuHbzNJ2NbG9GOSl5VNAtobcJ4JiQm3vaD9hXrgCrzKnQmIfV\nxIoBc7Nt53FRmpj+R5y9fkT/eA+QpXlGrRxiKHq0KAF0C2QFDYmVDif5OC5tlz8=\n=h+Pe\n-----END PGP SIGNATURE-----\n", "payload": "tree e690a983ab0484984882a62328b5d4c212b58fa9\nparent f0a6e3a583bc19bdb21e4403d7235488d02b883d\nparent 317f494c72aead3fecd73788569983fd2f8ea8a3\nauthor Pietro Albini <pietro@pietroalbini.org> 1541892073 +0100\ncommitter GitHub <noreply@github.com> 1541892073 +0100\n\nRollup merge of #55764 - murarth:fix-rc-alloc, r=RalfJung\n\nFix Rc/Arc allocation layout\n\n* Rounds allocation layout up to a multiple of alignment\n* Adds a convenience method `Layout::pad_to_align` to perform rounding\n\nCloses #55747\n\ncc #55724\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2aeef06f2f41c0b7f4d13cd59cd07ad8a377e83", "html_url": "https://github.com/rust-lang/rust/commit/d2aeef06f2f41c0b7f4d13cd59cd07ad8a377e83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2aeef06f2f41c0b7f4d13cd59cd07ad8a377e83/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0a6e3a583bc19bdb21e4403d7235488d02b883d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0a6e3a583bc19bdb21e4403d7235488d02b883d", "html_url": "https://github.com/rust-lang/rust/commit/f0a6e3a583bc19bdb21e4403d7235488d02b883d"}, {"sha": "317f494c72aead3fecd73788569983fd2f8ea8a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/317f494c72aead3fecd73788569983fd2f8ea8a3", "html_url": "https://github.com/rust-lang/rust/commit/317f494c72aead3fecd73788569983fd2f8ea8a3"}], "stats": {"total": 29, "additions": 25, "deletions": 4}, "files": [{"sha": "bb52d7990ff5772fdc27c821ee3c730896af9630", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d2aeef06f2f41c0b7f4d13cd59cd07ad8a377e83/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2aeef06f2f41c0b7f4d13cd59cd07ad8a377e83/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=d2aeef06f2f41c0b7f4d13cd59cd07ad8a377e83", "patch": "@@ -672,14 +672,16 @@ impl<T: ?Sized> Rc<T> {\n         // Previously, layout was calculated on the expression\n         // `&*(ptr as *const RcBox<T>)`, but this created a misaligned\n         // reference (see #54908).\n-        let (layout, _) = Layout::new::<RcBox<()>>()\n-            .extend(Layout::for_value(&*ptr)).unwrap();\n+        let layout = Layout::new::<RcBox<()>>()\n+            .extend(Layout::for_value(&*ptr)).unwrap().0\n+            .pad_to_align().unwrap();\n \n         let mem = Global.alloc(layout)\n             .unwrap_or_else(|_| handle_alloc_error(layout));\n \n         // Initialize the RcBox\n         let inner = set_data_ptr(ptr as *mut T, mem.as_ptr() as *mut u8) as *mut RcBox<T>;\n+        debug_assert_eq!(Layout::for_value(&*inner), layout);\n \n         ptr::write(&mut (*inner).strong, Cell::new(1));\n         ptr::write(&mut (*inner).weak, Cell::new(1));"}, {"sha": "b63b3684964bb64038366cf6d12365614a99c2a9", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d2aeef06f2f41c0b7f4d13cd59cd07ad8a377e83/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2aeef06f2f41c0b7f4d13cd59cd07ad8a377e83/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=d2aeef06f2f41c0b7f4d13cd59cd07ad8a377e83", "patch": "@@ -575,14 +575,16 @@ impl<T: ?Sized> Arc<T> {\n         // Previously, layout was calculated on the expression\n         // `&*(ptr as *const ArcInner<T>)`, but this created a misaligned\n         // reference (see #54908).\n-        let (layout, _) = Layout::new::<ArcInner<()>>()\n-            .extend(Layout::for_value(&*ptr)).unwrap();\n+        let layout = Layout::new::<ArcInner<()>>()\n+            .extend(Layout::for_value(&*ptr)).unwrap().0\n+            .pad_to_align().unwrap();\n \n         let mem = Global.alloc(layout)\n             .unwrap_or_else(|_| handle_alloc_error(layout));\n \n         // Initialize the ArcInner\n         let inner = set_data_ptr(ptr as *mut T, mem.as_ptr() as *mut u8) as *mut ArcInner<T>;\n+        debug_assert_eq!(Layout::for_value(&*inner), layout);\n \n         ptr::write(&mut (*inner).strong, atomic::AtomicUsize::new(1));\n         ptr::write(&mut (*inner).weak, atomic::AtomicUsize::new(1));"}, {"sha": "dd3e8da18a9661e26ed4669593ee9a03f13a11fe", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d2aeef06f2f41c0b7f4d13cd59cd07ad8a377e83/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2aeef06f2f41c0b7f4d13cd59cd07ad8a377e83/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=d2aeef06f2f41c0b7f4d13cd59cd07ad8a377e83", "patch": "@@ -218,6 +218,23 @@ impl Layout {\n         len_rounded_up.wrapping_sub(len)\n     }\n \n+    /// Creates a layout by rounding the size of this layout up to a multiple\n+    /// of the layout's alignment.\n+    ///\n+    /// Returns `Err` if the padded size would overflow.\n+    ///\n+    /// This is equivalent to adding the result of `padding_needed_for`\n+    /// to the layout's current size.\n+    #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n+    #[inline]\n+    pub fn pad_to_align(&self) -> Result<Layout, LayoutErr> {\n+        let pad = self.padding_needed_for(self.align());\n+        let new_size = self.size().checked_add(pad)\n+            .ok_or(LayoutErr { private: () })?;\n+\n+        Layout::from_size_align(new_size, self.align())\n+    }\n+\n     /// Creates a layout describing the record for `n` instances of\n     /// `self`, with a suitable amount of padding between each to\n     /// ensure that each instance is given its requested size and"}]}