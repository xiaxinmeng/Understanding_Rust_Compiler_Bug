{"sha": "47f3f66240eb20da1cd7583115a6ea1a2d25e388", "node_id": "C_kwDOAAsO6NoAKDQ3ZjNmNjYyNDBlYjIwZGExY2Q3NTgzMTE1YTZlYTFhMmQyNWUzODg", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2022-03-05T20:54:49Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2022-03-07T17:08:30Z"}, "message": "Update unstable `ExpectationId`s in stored diagnostics", "tree": {"sha": "7dedae62b56508effce8134ab01b543a58a3e8f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7dedae62b56508effce8134ab01b543a58a3e8f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47f3f66240eb20da1cd7583115a6ea1a2d25e388", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEsfZNmu/fmIv8KDcv/Ny/Ka9k1gEFAmImPA4ACgkQ/Ny/Ka9k\n1gEW/w//Um+cELOpGf9wZOCX+6GSZCrKcpmBIV4LwKhgenbaO+lKNAqdfe6NPGjJ\nlu4taGME1ij43aK7UQWD2aOnNRWONvW335HU/IlT5TZrtrnQuMZIVndQDlA2JBBw\nucrBJxFSqw3mjuJ6GFkRXSVQC6K6uSgZy3+lDCdD6JJOD3XMvxUbCGxFRGKRbC2T\nDitO1KzgNO9VOfBAPXBSR8xRZ1ddhwipdlBufumQsfoDooATTjHPkje8pGfp86Oz\nQISNLK4Qr7JaovAYFV3sT6rnLSzATER1R20WZ4AMwcn5ASOOoKokWzaYWw+7JObn\nCquq4cC3fkKrq/tOHXQXm7gRmsWdZjpLhqstuXihte6CokqSznSsZw9i56et0SC+\nDVVxGxHto41Oegow4WIzUM5jLFTas5GMIlCJ8kL2xC6C0J6pwemku9Gr6uX8ZSUu\n6unA0KhKtC7VWKRS0QJWPDLbRzrllp/uK+nkoOoaS00NoOIKg27XwCNQ0fq6vF9i\nop26+y0X0WZUtzn8bD0i+9qWrPckDg2YNZKzaN80zIkoYSU4M45/F2DD+I5ua0OA\nxVqz14BkCG7nlrtAX53JAXy3JgnGnR+r9XiCw7sbFIqgmG0rkMBoe45V1yMp2EjH\n9KuMCo78QHpKRGdLA6FLE8rOXIvJqENOtD8H6B9gf97DJ/MvFCg=\n=LQHz\n-----END PGP SIGNATURE-----", "payload": "tree 7dedae62b56508effce8134ab01b543a58a3e8f5\nparent 1b14fd3b1063771923e2fcf2110961bfa5ba4ad0\nauthor xFrednet <xFrednet@gmail.com> 1646513689 +0100\ncommitter xFrednet <xFrednet@gmail.com> 1646672910 +0100\n\nUpdate unstable `ExpectationId`s in stored diagnostics\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47f3f66240eb20da1cd7583115a6ea1a2d25e388", "html_url": "https://github.com/rust-lang/rust/commit/47f3f66240eb20da1cd7583115a6ea1a2d25e388", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47f3f66240eb20da1cd7583115a6ea1a2d25e388/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b14fd3b1063771923e2fcf2110961bfa5ba4ad0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0", "html_url": "https://github.com/rust-lang/rust/commit/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0"}], "stats": {"total": 54, "additions": 41, "deletions": 13}, "files": [{"sha": "aa9c7829d8e72852cdc8a140d87dd22766407361", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/47f3f66240eb20da1cd7583115a6ea1a2d25e388/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f3f66240eb20da1cd7583115a6ea1a2d25e388/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=47f3f66240eb20da1cd7583115a6ea1a2d25e388", "patch": "@@ -5,7 +5,8 @@ use crate::Substitution;\n use crate::SubstitutionPart;\n use crate::SuggestionStyle;\n use crate::ToolMetadata;\n-use rustc_lint_defs::Applicability;\n+use rustc_data_structures::stable_map::FxHashMap;\n+use rustc_lint_defs::{Applicability, LintExpectationId};\n use rustc_serialize::json::Json;\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use std::fmt;\n@@ -137,6 +138,28 @@ impl Diagnostic {\n         }\n     }\n \n+    pub fn update_unstable_expectation_id(\n+        &mut self,\n+        unstable_to_stable: &FxHashMap<LintExpectationId, LintExpectationId>,\n+    ) {\n+        if let Level::Expect(expectation_id) = &mut self.level {\n+            if expectation_id.is_stable() {\n+                return;\n+            }\n+\n+            // The unstable to stable map only maps the unstable `AttrId` to a stable `HirId` with an attribute index.\n+            // The lint index inside the attribute is manually transferred here.\n+            let lint_index = expectation_id.get_lint_index();\n+            expectation_id.set_lint_index(None);\n+            let mut stable_id = *unstable_to_stable\n+                .get(&expectation_id)\n+                .expect(\"each unstable `LintExpectationId` must have a matching stable id\");\n+\n+            stable_id.set_lint_index(lint_index);\n+            *expectation_id = stable_id;\n+        }\n+    }\n+\n     pub fn has_future_breakage(&self) -> bool {\n         match self.code {\n             Some(DiagnosticId::Lint { has_future_breakage, .. }) => has_future_breakage,"}, {"sha": "cba06448c4a6effafed456b940d97f68f1118582", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/47f3f66240eb20da1cd7583115a6ea1a2d25e388/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f3f66240eb20da1cd7583115a6ea1a2d25e388/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=47f3f66240eb20da1cd7583115a6ea1a2d25e388", "patch": "@@ -522,6 +522,11 @@ impl Drop for HandlerInner {\n                 \"no warnings or errors encountered even though `delayed_good_path_bugs` issued\",\n             );\n         }\n+\n+        assert!(\n+            self.unstable_expect_diagnostics.is_empty(),\n+            \"all diagnostics with unstable expectations should have been converted\",\n+        );\n     }\n }\n \n@@ -942,25 +947,25 @@ impl Handler {\n \n         let mut inner = self.inner.borrow_mut();\n         for mut diag in diags.into_iter() {\n-            let mut unstable_id = diag\n+            diag.update_unstable_expectation_id(unstable_to_stable);\n+\n+            let stable_id = diag\n                 .level\n                 .get_expectation_id()\n                 .expect(\"all diagnostics inside `unstable_expect_diagnostics` must have a `LintExpectationId`\");\n-\n-            // The unstable to stable map only maps the unstable `AttrId` to a stable `HirId` with an attribute index.\n-            // The lint index inside the attribute is manually transferred here.\n-            let lint_index = unstable_id.get_lint_index();\n-            unstable_id.set_lint_index(None);\n-            let mut stable_id = *unstable_to_stable\n-                .get(&unstable_id)\n-                .expect(\"each unstable `LintExpectationId` must have a matching stable id\");\n-\n-            stable_id.set_lint_index(lint_index);\n-            diag.level = Level::Expect(stable_id);\n             inner.fulfilled_expectations.insert(stable_id);\n \n             (*TRACK_DIAGNOSTICS)(&diag);\n         }\n+\n+        inner\n+            .stashed_diagnostics\n+            .values_mut()\n+            .for_each(|diag| diag.update_unstable_expectation_id(unstable_to_stable));\n+        inner\n+            .future_breakage_diagnostics\n+            .iter_mut()\n+            .for_each(|diag| diag.update_unstable_expectation_id(unstable_to_stable));\n     }\n \n     /// This methods steals all [`LintExpectationId`]s that are stored inside"}]}