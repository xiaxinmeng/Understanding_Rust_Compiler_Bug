{"sha": "3a073f177ca7466cf3e8327a7fc847d495d75fd7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMDczZjE3N2NhNzQ2NmNmM2U4MzI3YTdmYzg0N2Q0OTVkNzVmZDc=", "commit": {"author": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2019-10-19T08:15:13Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-10-19T08:15:13Z"}, "message": "fix: handling of newline_style conflicts (#3850)", "tree": {"sha": "c40f4148ef05cb1429f9308b4701ac030467fe56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c40f4148ef05cb1429f9308b4701ac030467fe56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a073f177ca7466cf3e8327a7fc847d495d75fd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a073f177ca7466cf3e8327a7fc847d495d75fd7", "html_url": "https://github.com/rust-lang/rust/commit/3a073f177ca7466cf3e8327a7fc847d495d75fd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a073f177ca7466cf3e8327a7fc847d495d75fd7/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5327c3633ff23f06cdf62ac2f98ef141731a3478", "url": "https://api.github.com/repos/rust-lang/rust/commits/5327c3633ff23f06cdf62ac2f98ef141731a3478", "html_url": "https://github.com/rust-lang/rust/commit/5327c3633ff23f06cdf62ac2f98ef141731a3478"}], "stats": {"total": 75, "additions": 64, "deletions": 11}, "files": [{"sha": "9be4fb28f993ffdc986a48118867d9a3fad85ef2", "filename": "src/emitter/diff.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3a073f177ca7466cf3e8327a7fc847d495d75fd7/src%2Femitter%2Fdiff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a073f177ca7466cf3e8327a7fc847d495d75fd7/src%2Femitter%2Fdiff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Femitter%2Fdiff.rs?ref=3a073f177ca7466cf3e8327a7fc847d495d75fd7", "patch": "@@ -36,6 +36,13 @@ impl Emitter for DiffEmitter {\n                     &self.config,\n                 );\n             }\n+        } else if original_text != formatted_text {\n+            // This occurs when the only difference between the original and formatted values\n+            // is the newline style. This happens because The make_diff function compares the\n+            // original and formatted values line by line, independent of line endings.\n+            let file_path = ensure_real_path(filename);\n+            writeln!(output, \"Incorrect newline style in {}\", file_path.display())?;\n+            return Ok(EmitterResult { has_diff: true });\n         }\n \n         return Ok(EmitterResult { has_diff });\n@@ -107,4 +114,25 @@ mod tests {\n             format!(\"{}\\n{}\\n\", bin_file, lib_file),\n         )\n     }\n+\n+    #[test]\n+    fn prints_newline_message_with_only_newline_style_diff() {\n+        let mut writer = Vec::new();\n+        let config = Config::default();\n+        let mut emitter = DiffEmitter::new(config);\n+        let _ = emitter\n+            .emit_formatted_file(\n+                &mut writer,\n+                FormattedFile {\n+                    filename: &FileName::Real(PathBuf::from(\"src/lib.rs\")),\n+                    original_text: \"fn empty() {}\\n\",\n+                    formatted_text: \"fn empty() {}\\r\\n\",\n+                },\n+            )\n+            .unwrap();\n+        assert_eq!(\n+            String::from_utf8(writer).unwrap(),\n+            String::from(\"Incorrect newline style in src/lib.rs\\n\")\n+        );\n+    }\n }"}, {"sha": "2822a331260b31b9f592d03e2718c50122d15ce0", "filename": "src/formatting.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3a073f177ca7466cf3e8327a7fc847d495d75fd7/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a073f177ca7466cf3e8327a7fc847d495d75fd7/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=3a073f177ca7466cf3e8327a7fc847d495d75fd7", "patch": "@@ -243,8 +243,14 @@ impl<'b, T: Write + 'b> FormatHandler for Session<'b, T> {\n         report: &mut FormatReport,\n     ) -> Result<(), ErrorKind> {\n         if let Some(ref mut out) = self.out {\n-            match source_file::write_file(Some(source_map), &path, &result, out, &mut *self.emitter)\n-            {\n+            match source_file::write_file(\n+                Some(source_map),\n+                &path,\n+                &result,\n+                out,\n+                &mut *self.emitter,\n+                self.config.newline_style(),\n+            ) {\n                 Ok(ref result) if result.has_diff => report.add_diff(),\n                 Err(e) => {\n                     // Create a new error with path_str to help users see which files failed"}, {"sha": "b6764ee7464337d5c99802c884b25d71f76b8929", "filename": "src/source_file.rs", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3a073f177ca7466cf3e8327a7fc847d495d75fd7/src%2Fsource_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a073f177ca7466cf3e8327a7fc847d495d75fd7/src%2Fsource_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsource_file.rs?ref=3a073f177ca7466cf3e8327a7fc847d495d75fd7", "patch": "@@ -6,6 +6,7 @@ use syntax::source_map::SourceMap;\n \n use crate::config::FileName;\n use crate::emitter::{self, Emitter};\n+use crate::NewlineStyle;\n \n #[cfg(test)]\n use crate::config::Config;\n@@ -32,7 +33,14 @@ where\n \n     emitter.emit_header(out)?;\n     for &(ref filename, ref text) in source_file {\n-        write_file(None, filename, text, out, &mut *emitter)?;\n+        write_file(\n+            None,\n+            filename,\n+            text,\n+            out,\n+            &mut *emitter,\n+            config.newline_style(),\n+        )?;\n     }\n     emitter.emit_footer(out)?;\n \n@@ -45,6 +53,7 @@ pub(crate) fn write_file<T>(\n     formatted_text: &str,\n     out: &mut T,\n     emitter: &mut dyn Emitter,\n+    newline_style: NewlineStyle,\n ) -> Result<emitter::EmitterResult, io::Error>\n where\n     T: Write,\n@@ -65,15 +74,25 @@ where\n         }\n     }\n \n-    // If parse session is around (cfg(not(test))) then try getting source from\n-    // there instead of hitting the file system. This also supports getting\n+    // SourceFile's in the SourceMap will always have Unix-style line endings\n+    // See: https://github.com/rust-lang/rustfmt/issues/3850\n+    // So if the user has explicitly overridden the rustfmt `newline_style`\n+    // config and `filename` is FileName::Real, then we must check the file system\n+    // to get the original file value in order to detect newline_style conflicts.\n+    // Otherwise, parse session is around (cfg(not(test))) and newline_style has been\n+    // left as the default value, then try getting source from the parse session\n+    // source map instead of hitting the file system. This also supports getting\n     // original text for `FileName::Stdin`.\n-    let original_text = source_map\n-        .and_then(|x| x.get_source_file(&filename.into()))\n-        .and_then(|x| x.src.as_ref().map(ToString::to_string));\n-    let original_text = match original_text {\n-        Some(ori) => ori,\n-        None => fs::read_to_string(ensure_real_path(filename))?,\n+    let original_text = if newline_style != NewlineStyle::Auto && *filename != FileName::Stdin {\n+        fs::read_to_string(ensure_real_path(filename))?\n+    } else {\n+        match source_map\n+            .and_then(|x| x.get_source_file(&filename.into()))\n+            .and_then(|x| x.src.as_ref().map(ToString::to_string))\n+        {\n+            Some(ori) => ori,\n+            None => fs::read_to_string(ensure_real_path(filename))?,\n+        }\n     };\n \n     let formatted_file = emitter::FormattedFile {"}]}