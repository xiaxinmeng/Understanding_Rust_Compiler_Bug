{"sha": "5422ed783415e07d5cc0e87e5ac87cb75d63a868", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0MjJlZDc4MzQxNWUwN2Q1Y2MwZTg3ZTVhYzg3Y2I3NWQ2M2E4Njg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-08T03:02:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-08T03:02:39Z"}, "message": "Rollup merge of #65150 - XiangQingW:master, r=estebank\n\nSuggest dereferencing boolean reference when used in 'if' or 'while'\n\nImplements #64557", "tree": {"sha": "a9d9bedb0831ebee52434111236e346dc2ae3bea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9d9bedb0831ebee52434111236e346dc2ae3bea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5422ed783415e07d5cc0e87e5ac87cb75d63a868", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdm/xQCRBK7hj4Ov3rIwAAdHIIAIey8+o1e800HCU1NByqE/Z+\nWRI/Tc+9qEvP7yNEwJrvCKqhpgiXzmVeoyvKwgI+ZG3zGxsnXtuJ0OPbarIaPPzS\nYOuKUFoNuxc0SXpzKOlFs0lRGoIptSXU6kUQ21Nhsye9ajr3Zt5csFgWl86KihJn\nObLbM3sf9D6aW/X6CTWd0s13diOiVsQxdy4OuiF8aSorPhZktK/r+8nRydTYZgwM\nRLTziwps2FcTdl2v9eeJ5BqQM9TdxKLJ1MF1aeBhGJibnaCw7tEAwtWkG6ghXRZB\nWR9CsRfCSdHRRAchmEMGl54rWEypCFfXebRI/7BGGC4xvgK2PTkUc/4hWsZjTuQ=\n=wKLX\n-----END PGP SIGNATURE-----\n", "payload": "tree a9d9bedb0831ebee52434111236e346dc2ae3bea\nparent 73685ec56f5a4d742e55fe2a5004e0e53946f7bd\nparent bbb69d14552b7258ba0b1d56d6558bd32b647b9a\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1570503759 +0200\ncommitter GitHub <noreply@github.com> 1570503759 +0200\n\nRollup merge of #65150 - XiangQingW:master, r=estebank\n\nSuggest dereferencing boolean reference when used in 'if' or 'while'\n\nImplements #64557\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5422ed783415e07d5cc0e87e5ac87cb75d63a868", "html_url": "https://github.com/rust-lang/rust/commit/5422ed783415e07d5cc0e87e5ac87cb75d63a868", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5422ed783415e07d5cc0e87e5ac87cb75d63a868/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73685ec56f5a4d742e55fe2a5004e0e53946f7bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/73685ec56f5a4d742e55fe2a5004e0e53946f7bd", "html_url": "https://github.com/rust-lang/rust/commit/73685ec56f5a4d742e55fe2a5004e0e53946f7bd"}, {"sha": "bbb69d14552b7258ba0b1d56d6558bd32b647b9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbb69d14552b7258ba0b1d56d6558bd32b647b9a", "html_url": "https://github.com/rust-lang/rust/commit/bbb69d14552b7258ba0b1d56d6558bd32b647b9a"}], "stats": {"total": 58, "additions": 47, "deletions": 11}, "files": [{"sha": "78bd4508e21a4ff986bbdfdfa5820d406ef9dbb0", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5422ed783415e07d5cc0e87e5ac87cb75d63a868/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5422ed783415e07d5cc0e87e5ac87cb75d63a868/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=5422ed783415e07d5cc0e87e5ac87cb75d63a868", "patch": "@@ -349,7 +349,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // If the span is from a macro, then it's hard to extract the text\n         // and make a good suggestion, so don't bother.\n-        let is_macro = sp.from_expansion();\n+        let is_desugaring = match sp.desugaring_kind() {\n+            Some(k) => sp.is_desugaring(k),\n+            None => false\n+        };\n+        let is_macro = sp.from_expansion() && !is_desugaring;\n \n         match (&expr.kind, &expected.kind, &checked_ty.kind) {\n             (_, &ty::Ref(_, exp, _), &ty::Ref(_, check, _)) => match (&exp.kind, &check.kind) {"}, {"sha": "aa26c74967a1e0807bc6567932e6f336e02bffb9", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5422ed783415e07d5cc0e87e5ac87cb75d63a868/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5422ed783415e07d5cc0e87e5ac87cb75d63a868/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=5422ed783415e07d5cc0e87e5ac87cb75d63a868", "patch": "@@ -87,6 +87,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n \n         if let Some(mut err) = self.demand_suptype_diag(expr.span, expected_ty, ty) {\n+            self.suggest_ref_or_into(&mut err, expr, expected_ty, ty);\n+\n             let expr = match &expr.kind {\n                 ExprKind::DropTemps(expr) => expr,\n                 _ => expr,"}, {"sha": "53b7aafc430a284daa028b0359dc562c2a39746e", "filename": "src/test/ui/if/if-no-match-bindings.stderr", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5422ed783415e07d5cc0e87e5ac87cb75d63a868/src%2Ftest%2Fui%2Fif%2Fif-no-match-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5422ed783415e07d5cc0e87e5ac87cb75d63a868/src%2Ftest%2Fui%2Fif%2Fif-no-match-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-no-match-bindings.stderr?ref=5422ed783415e07d5cc0e87e5ac87cb75d63a868", "patch": "@@ -2,7 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:18:8\n    |\n LL |     if b_ref() {}\n-   |        ^^^^^^^ expected bool, found &bool\n+   |        ^^^^^^^\n+   |        |\n+   |        expected bool, found &bool\n+   |        help: consider dereferencing the borrow: `*b_ref()`\n    |\n    = note: expected type `bool`\n               found type `&bool`\n@@ -11,7 +14,10 @@ error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:19:8\n    |\n LL |     if b_mut_ref() {}\n-   |        ^^^^^^^^^^^ expected bool, found &mut bool\n+   |        ^^^^^^^^^^^\n+   |        |\n+   |        expected bool, found &mut bool\n+   |        help: consider dereferencing the borrow: `*b_mut_ref()`\n    |\n    = note: expected type `bool`\n               found type `&mut bool`\n@@ -20,7 +26,10 @@ error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:20:8\n    |\n LL |     if &true {}\n-   |        ^^^^^ expected bool, found &bool\n+   |        ^^^^^\n+   |        |\n+   |        expected bool, found &bool\n+   |        help: consider dereferencing the borrow: `*&true`\n    |\n    = note: expected type `bool`\n               found type `&bool`\n@@ -29,7 +38,10 @@ error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:21:8\n    |\n LL |     if &mut true {}\n-   |        ^^^^^^^^^ expected bool, found &mut bool\n+   |        ^^^^^^^^^\n+   |        |\n+   |        expected bool, found &mut bool\n+   |        help: consider dereferencing the borrow: `*&mut true`\n    |\n    = note: expected type `bool`\n               found type `&mut bool`\n@@ -38,7 +50,10 @@ error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:24:11\n    |\n LL |     while b_ref() {}\n-   |           ^^^^^^^ expected bool, found &bool\n+   |           ^^^^^^^\n+   |           |\n+   |           expected bool, found &bool\n+   |           help: consider dereferencing the borrow: `*b_ref()`\n    |\n    = note: expected type `bool`\n               found type `&bool`\n@@ -47,7 +62,10 @@ error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:25:11\n    |\n LL |     while b_mut_ref() {}\n-   |           ^^^^^^^^^^^ expected bool, found &mut bool\n+   |           ^^^^^^^^^^^\n+   |           |\n+   |           expected bool, found &mut bool\n+   |           help: consider dereferencing the borrow: `*b_mut_ref()`\n    |\n    = note: expected type `bool`\n               found type `&mut bool`\n@@ -56,7 +74,10 @@ error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:26:11\n    |\n LL |     while &true {}\n-   |           ^^^^^ expected bool, found &bool\n+   |           ^^^^^\n+   |           |\n+   |           expected bool, found &bool\n+   |           help: consider dereferencing the borrow: `*&true`\n    |\n    = note: expected type `bool`\n               found type `&bool`\n@@ -65,7 +86,10 @@ error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:27:11\n    |\n LL |     while &mut true {}\n-   |           ^^^^^^^^^ expected bool, found &mut bool\n+   |           ^^^^^^^^^\n+   |           |\n+   |           expected bool, found &mut bool\n+   |           help: consider dereferencing the borrow: `*&mut true`\n    |\n    = note: expected type `bool`\n               found type `&mut bool`"}, {"sha": "619f9c85b24dbab4b7baf7adde1c554a7a1d686a", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5422ed783415e07d5cc0e87e5ac87cb75d63a868/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5422ed783415e07d5cc0e87e5ac87cb75d63a868/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=5422ed783415e07d5cc0e87e5ac87cb75d63a868", "patch": "@@ -517,7 +517,10 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:32:8\n    |\n LL |     if &let 0 = 0 {}\n-   |        ^^^^^^^^^^ expected bool, found &bool\n+   |        ^^^^^^^^^^\n+   |        |\n+   |        expected bool, found &bool\n+   |        help: consider dereferencing the borrow: `*&let 0 = 0`\n    |\n    = note: expected type `bool`\n               found type `&bool`\n@@ -702,7 +705,10 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:96:11\n    |\n LL |     while &let 0 = 0 {}\n-   |           ^^^^^^^^^^ expected bool, found &bool\n+   |           ^^^^^^^^^^\n+   |           |\n+   |           expected bool, found &bool\n+   |           help: consider dereferencing the borrow: `*&let 0 = 0`\n    |\n    = note: expected type `bool`\n               found type `&bool`"}]}