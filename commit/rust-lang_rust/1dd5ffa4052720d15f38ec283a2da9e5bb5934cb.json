{"sha": "1dd5ffa4052720d15f38ec283a2da9e5bb5934cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkZDVmZmE0MDUyNzIwZDE1ZjM4ZWMyODNhMmRhOWU1YmI1OTM0Y2I=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-09-07T18:10:25Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-10-01T14:37:19Z"}, "message": "Rename `node_id` to `var_id` and limit to the cases that are actually used", "tree": {"sha": "ab599bf8a9c86e36a9eb05132a1fac03244be084", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab599bf8a9c86e36a9eb05132a1fac03244be084"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dd5ffa4052720d15f38ec283a2da9e5bb5934cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dd5ffa4052720d15f38ec283a2da9e5bb5934cb", "html_url": "https://github.com/rust-lang/rust/commit/1dd5ffa4052720d15f38ec283a2da9e5bb5934cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dd5ffa4052720d15f38ec283a2da9e5bb5934cb/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5600c6282e699ad77d0303456fa068aa649b7007", "url": "https://api.github.com/repos/rust-lang/rust/commits/5600c6282e699ad77d0303456fa068aa649b7007", "html_url": "https://github.com/rust-lang/rust/commit/5600c6282e699ad77d0303456fa068aa649b7007"}], "stats": {"total": 37, "additions": 17, "deletions": 20}, "files": [{"sha": "6125b7897723cb5151f1f95e588c63e3390ae0ba", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dd5ffa4052720d15f38ec283a2da9e5bb5934cb/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd5ffa4052720d15f38ec283a2da9e5bb5934cb/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=1dd5ffa4052720d15f38ec283a2da9e5bb5934cb", "patch": "@@ -934,7 +934,7 @@ fn encode_side_tables_for_id(ecx: &e::EncodeContext,\n             rbml_w.tag(c::tag_table_upvar_capture_map, |rbml_w| {\n                 rbml_w.id(id);\n \n-                let var_id = freevar.def.node_id();\n+                let var_id = freevar.def.var_id();\n                 let upvar_id = ty::UpvarId {\n                     var_id: var_id,\n                     closure_expr_id: id"}, {"sha": "ee1319a325e42de80bae6a30cfbffcab1a56f85d", "filename": "src/librustc/middle/def.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1dd5ffa4052720d15f38ec283a2da9e5bb5934cb/src%2Flibrustc%2Fmiddle%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd5ffa4052720d15f38ec283a2da9e5bb5934cb/src%2Flibrustc%2Fmiddle%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdef.rs?ref=1dd5ffa4052720d15f38ec283a2da9e5bb5934cb", "patch": "@@ -114,21 +114,18 @@ pub struct Export {\n }\n \n impl Def {\n-    pub fn node_id(&self) -> ast::NodeId {\n+    pub fn var_id(&self) -> ast::NodeId {\n         match *self {\n             DefLocal(id) |\n-            DefUpvar(id, _, _) |\n-            DefRegion(id) |\n-            DefLabel(id)  |\n-            DefSelfTy(_, Some((_, id))) => {\n+            DefUpvar(id, _, _) => {\n                 id\n             }\n \n-            DefFn(_, _) | DefMod(_) | DefForeignMod(_) | DefStatic(_, _) |\n-            DefVariant(_, _, _) | DefTy(_, _) | DefAssociatedTy(_, _) |\n-            DefTyParam(_, _, _, _) | DefUse(_) | DefStruct(_) | DefTrait(_) |\n-            DefMethod(_) | DefConst(_) | DefAssociatedConst(_) |\n-            DefSelfTy(Some(_), None) | DefPrimTy(_) | DefSelfTy(..) => {\n+            DefFn(..) | DefMod(..) | DefForeignMod(..) | DefStatic(..) |\n+            DefVariant(..) | DefTy(..) | DefAssociatedTy(..) |\n+            DefTyParam(..) | DefUse(..) | DefStruct(..) | DefTrait(..) |\n+            DefMethod(..) | DefConst(..) | DefAssociatedConst(..) |\n+            DefPrimTy(..) | DefRegion(..) | DefLabel(..) | DefSelfTy(..) => {\n                 panic!(\"attempted .def_id() on invalid {:?}\", self)\n             }\n         }"}, {"sha": "e69b805e8334021bfaaa75c749b605009a6f4f61", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1dd5ffa4052720d15f38ec283a2da9e5bb5934cb/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd5ffa4052720d15f38ec283a2da9e5bb5934cb/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=1dd5ffa4052720d15f38ec283a2da9e5bb5934cb", "patch": "@@ -1160,7 +1160,7 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n \n         self.tcx().with_freevars(closure_expr.id, |freevars| {\n             for freevar in freevars {\n-                let id_var = freevar.def.node_id();\n+                let id_var = freevar.def.var_id();\n                 let upvar_id = ty::UpvarId { var_id: id_var,\n                                              closure_expr_id: closure_expr.id };\n                 let upvar_capture = self.typer.upvar_capture(upvar_id).unwrap();\n@@ -1192,7 +1192,7 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n                         -> mc::McResult<mc::cmt<'tcx>> {\n         // Create the cmt for the variable being borrowed, from the\n         // caller's perspective\n-        let var_id = upvar_def.node_id();\n+        let var_id = upvar_def.var_id();\n         let var_ty = try!(self.typer.node_ty(var_id));\n         self.mc.cat_def(closure_id, closure_span, var_ty, upvar_def)\n     }"}, {"sha": "e4eba8aefcc496e31ee1efae59035ebbb64a0932", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dd5ffa4052720d15f38ec283a2da9e5bb5934cb/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd5ffa4052720d15f38ec283a2da9e5bb5934cb/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=1dd5ffa4052720d15f38ec283a2da9e5bb5934cb", "patch": "@@ -896,7 +896,7 @@ impl<'tcx> fmt::Display for ty::TypeVariants<'tcx> {\n                     let mut sep = \" \";\n                     try!(tcx.with_freevars(node_id, |freevars| {\n                         for (freevar, upvar_ty) in freevars.iter().zip(&substs.upvar_tys) {\n-                            let node_id = freevar.def.node_id();\n+                            let node_id = freevar.def.var_id();\n                             try!(write!(f,\n                                         \"{}{}:{}\",\n                                         sep,"}, {"sha": "8cfcf1dd565c8b866e5f50af118963708f16df5f", "filename": "src/librustc_mir/tcx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dd5ffa4052720d15f38ec283a2da9e5bb5934cb/src%2Flibrustc_mir%2Ftcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd5ffa4052720d15f38ec283a2da9e5bb5934cb/src%2Flibrustc_mir%2Ftcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftcx%2Fexpr.rs?ref=1dd5ffa4052720d15f38ec283a2da9e5bb5934cb", "patch": "@@ -817,7 +817,7 @@ fn capture_freevar<'a,'tcx:'a>(cx: &mut Cx<'a,'tcx>,\n                                freevar: &ty::Freevar,\n                                freevar_ty: Ty<'tcx>)\n                                -> ExprRef<Cx<'a,'tcx>> {\n-    let id_var = freevar.def.node_id();\n+    let id_var = freevar.def.var_id();\n     let upvar_id = ty::UpvarId { var_id: id_var, closure_expr_id: closure_expr.id };\n     let upvar_capture = cx.tcx.upvar_capture(upvar_id).unwrap();\n     let temp_lifetime = cx.tcx.region_maps.temporary_scope(closure_expr.id);"}, {"sha": "89724c38cb2c901f00983c998ffbaf4612edd23e", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1dd5ffa4052720d15f38ec283a2da9e5bb5934cb/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd5ffa4052720d15f38ec283a2da9e5bb5934cb/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=1dd5ffa4052720d15f38ec283a2da9e5bb5934cb", "patch": "@@ -68,7 +68,7 @@ fn load_closure_environment<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     };\n \n     for (i, freevar) in freevars.iter().enumerate() {\n-        let upvar_id = ty::UpvarId { var_id: freevar.def.node_id(),\n+        let upvar_id = ty::UpvarId { var_id: freevar.def.var_id(),\n                                      closure_expr_id: bcx.fcx.id };\n         let upvar_capture = bcx.tcx().upvar_capture(upvar_id).unwrap();\n         let mut upvar_ptr = StructGEP(bcx, llenv, i);\n@@ -79,7 +79,7 @@ fn load_closure_environment<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                 true\n             }\n         };\n-        let node_id = freevar.def.node_id();\n+        let node_id = freevar.def.var_id();\n         bcx.fcx.llupvars.borrow_mut().insert(node_id, upvar_ptr);\n \n         if kind == ty::FnOnceClosureKind && !captured_by_ref {\n@@ -236,7 +236,7 @@ pub fn trans_closure_expr<'a, 'tcx>(dest: Dest<'a, 'tcx>,\n     for (i, freevar) in freevars.iter().enumerate() {\n         let datum = expr::trans_local_var(bcx, freevar.def);\n         let upvar_slot_dest = adt::trans_field_ptr(bcx, &*repr, dest_addr, 0, i);\n-        let upvar_id = ty::UpvarId { var_id: freevar.def.node_id(),\n+        let upvar_id = ty::UpvarId { var_id: freevar.def.var_id(),\n                                      closure_expr_id: id };\n         match tcx.upvar_capture(upvar_id).unwrap() {\n             ty::UpvarCapture::ByValue => {"}, {"sha": "8086c49c769a864e47aa6adf438b911a72918898", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1dd5ffa4052720d15f38ec283a2da9e5bb5934cb/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd5ffa4052720d15f38ec283a2da9e5bb5934cb/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=1dd5ffa4052720d15f38ec283a2da9e5bb5934cb", "patch": "@@ -126,7 +126,7 @@ impl<'a,'tcx> SeedBorrowKind<'a,'tcx> {\n \n         self.tcx().with_freevars(expr.id, |freevars| {\n             for freevar in freevars {\n-                let var_node_id = freevar.def.node_id();\n+                let var_node_id = freevar.def.var_id();\n                 let upvar_id = ty::UpvarId { var_id: var_node_id,\n                                              closure_expr_id: expr.id };\n                 debug!(\"seed upvar_id {:?}\", upvar_id);\n@@ -235,7 +235,7 @@ impl<'a,'tcx> AdjustBorrowKind<'a,'tcx> {\n         tcx.with_freevars(closure_id, |freevars| {\n             freevars.iter()\n                     .map(|freevar| {\n-                        let freevar_node_id = freevar.def.node_id();\n+                        let freevar_node_id = freevar.def.var_id();\n                         let freevar_ty = self.fcx.node_ty(freevar_node_id);\n                         let upvar_id = ty::UpvarId {\n                             var_id: freevar_node_id,"}]}