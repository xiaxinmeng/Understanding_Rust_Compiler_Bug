{"sha": "fa23ddf6e6932b0caa6ee14bd479264398a3a2a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhMjNkZGY2ZTY5MzJiMGNhYTZlZTE0YmQ0NzkyNjQzOThhM2EyYTc=", "commit": {"author": {"name": "Yonggang Luo", "email": "luoyonggang@gmail.com", "date": "2020-10-08T22:26:31Z"}, "committer": {"name": "Yonggang Luo", "email": "luoyonggang@gmail.com", "date": "2021-02-17T17:54:04Z"}, "message": "Expose force_quotes on Windows.\n\nQuotes the arg and not quotes the arg have different effect on Windows when the program called\nare msys2/cygwin program.\nRefer to https://github.com/msys2/MSYS2-packages/issues/2176\n\nSigned-off-by: Yonggang Luo <luoyonggang@gmail.com>", "tree": {"sha": "8a6836facce8391bf03150f7634d7649c5b8cd5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a6836facce8391bf03150f7634d7649c5b8cd5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa23ddf6e6932b0caa6ee14bd479264398a3a2a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa23ddf6e6932b0caa6ee14bd479264398a3a2a7", "html_url": "https://github.com/rust-lang/rust/commit/fa23ddf6e6932b0caa6ee14bd479264398a3a2a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa23ddf6e6932b0caa6ee14bd479264398a3a2a7/comments", "author": {"login": "lygstate", "id": 121040, "node_id": "MDQ6VXNlcjEyMTA0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/121040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lygstate", "html_url": "https://github.com/lygstate", "followers_url": "https://api.github.com/users/lygstate/followers", "following_url": "https://api.github.com/users/lygstate/following{/other_user}", "gists_url": "https://api.github.com/users/lygstate/gists{/gist_id}", "starred_url": "https://api.github.com/users/lygstate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lygstate/subscriptions", "organizations_url": "https://api.github.com/users/lygstate/orgs", "repos_url": "https://api.github.com/users/lygstate/repos", "events_url": "https://api.github.com/users/lygstate/events{/privacy}", "received_events_url": "https://api.github.com/users/lygstate/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lygstate", "id": 121040, "node_id": "MDQ6VXNlcjEyMTA0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/121040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lygstate", "html_url": "https://github.com/lygstate", "followers_url": "https://api.github.com/users/lygstate/followers", "following_url": "https://api.github.com/users/lygstate/following{/other_user}", "gists_url": "https://api.github.com/users/lygstate/gists{/gist_id}", "starred_url": "https://api.github.com/users/lygstate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lygstate/subscriptions", "organizations_url": "https://api.github.com/users/lygstate/orgs", "repos_url": "https://api.github.com/users/lygstate/repos", "events_url": "https://api.github.com/users/lygstate/events{/privacy}", "received_events_url": "https://api.github.com/users/lygstate/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee88f46bb5e27c4d9f30326e69ff2298dcbeecb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee88f46bb5e27c4d9f30326e69ff2298dcbeecb1", "html_url": "https://github.com/rust-lang/rust/commit/ee88f46bb5e27c4d9f30326e69ff2298dcbeecb1"}], "stats": {"total": 59, "additions": 49, "deletions": 10}, "files": [{"sha": "67412e1677937b7afea82a624d6f13581bade34b", "filename": "library/std/src/sys/windows/ext/process.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fa23ddf6e6932b0caa6ee14bd479264398a3a2a7/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa23ddf6e6932b0caa6ee14bd479264398a3a2a7/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fprocess.rs?ref=fa23ddf6e6932b0caa6ee14bd479264398a3a2a7", "patch": "@@ -105,6 +105,22 @@ pub trait CommandExt: Sealed {\n     /// [1]: https://docs.microsoft.com/en-us/windows/win32/procthread/process-creation-flags\n     #[stable(feature = \"windows_process_extensions\", since = \"1.16.0\")]\n     fn creation_flags(&mut self, flags: u32) -> &mut process::Command;\n+\n+    /// Forces all arguments to be wrapped in quote (`\"`) characters.\n+    ///\n+    /// This is useful for passing arguments to [MSYS2/Cygwin][1] based\n+    /// executables: these programs will expand unquoted arguments containing\n+    /// wildcard characters (`?` and `*`) by searching for any file paths\n+    /// matching the wildcard pattern.\n+    ///\n+    /// Adding quotes has no effect when passing arguments to programs\n+    /// that use [msvcrt][2]. This includes programs built with both\n+    /// MinGW and MSVC.\n+    ///\n+    /// [1]: <https://github.com/msys2/MSYS2-packages/issues/2176>\n+    /// [2]: <https://msdn.microsoft.com/en-us/library/17w5ykft.aspx>\n+    #[unstable(feature = \"windows_process_extensions_force_quotes\", issue = \"82227\")]\n+    fn force_quotes(&mut self, enabled: bool) -> &mut process::Command;\n }\n \n #[stable(feature = \"windows_process_extensions\", since = \"1.16.0\")]\n@@ -113,4 +129,9 @@ impl CommandExt for process::Command {\n         self.as_inner_mut().creation_flags(flags);\n         self\n     }\n+\n+    fn force_quotes(&mut self, enabled: bool) -> &mut process::Command {\n+        self.as_inner_mut().force_quotes(enabled);\n+        self\n+    }\n }"}, {"sha": "83d37795ee5c10bf4099a561cfe3ce6427ced88a", "filename": "library/std/src/sys/windows/process.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fa23ddf6e6932b0caa6ee14bd479264398a3a2a7/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa23ddf6e6932b0caa6ee14bd479264398a3a2a7/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs?ref=fa23ddf6e6932b0caa6ee14bd479264398a3a2a7", "patch": "@@ -78,6 +78,7 @@ pub struct Command {\n     stdin: Option<Stdio>,\n     stdout: Option<Stdio>,\n     stderr: Option<Stdio>,\n+    force_quotes_enabled: bool,\n }\n \n pub enum Stdio {\n@@ -109,6 +110,7 @@ impl Command {\n             stdin: None,\n             stdout: None,\n             stderr: None,\n+            force_quotes_enabled: false,\n         }\n     }\n \n@@ -134,6 +136,10 @@ impl Command {\n         self.flags = flags;\n     }\n \n+    pub fn force_quotes(&mut self, enabled: bool) {\n+        self.force_quotes_enabled = enabled;\n+    }\n+\n     pub fn get_program(&self) -> &OsStr {\n         &self.program\n     }\n@@ -181,7 +187,7 @@ impl Command {\n         si.dwFlags = c::STARTF_USESTDHANDLES;\n \n         let program = program.as_ref().unwrap_or(&self.program);\n-        let mut cmd_str = make_command_line(program, &self.args)?;\n+        let mut cmd_str = make_command_line(program, &self.args, self.force_quotes_enabled)?;\n         cmd_str.push(0); // add null terminator\n \n         // stolen from the libuv code.\n@@ -467,7 +473,7 @@ fn zeroed_process_information() -> c::PROCESS_INFORMATION {\n \n // Produces a wide string *without terminating null*; returns an error if\n // `prog` or any of the `args` contain a nul.\n-fn make_command_line(prog: &OsStr, args: &[OsString]) -> io::Result<Vec<u16>> {\n+fn make_command_line(prog: &OsStr, args: &[OsString], force_quotes: bool) -> io::Result<Vec<u16>> {\n     // Encode the command and arguments in a command line string such\n     // that the spawned process may recover them using CommandLineToArgvW.\n     let mut cmd: Vec<u16> = Vec::new();\n@@ -476,7 +482,7 @@ fn make_command_line(prog: &OsStr, args: &[OsString]) -> io::Result<Vec<u16>> {\n     append_arg(&mut cmd, prog, true)?;\n     for arg in args {\n         cmd.push(' ' as u16);\n-        append_arg(&mut cmd, arg, false)?;\n+        append_arg(&mut cmd, arg, force_quotes)?;\n     }\n     return Ok(cmd);\n "}, {"sha": "8830ae049c65d8b10e690ab770b1ba78debb827d", "filename": "library/std/src/sys/windows/process/tests.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fa23ddf6e6932b0caa6ee14bd479264398a3a2a7/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa23ddf6e6932b0caa6ee14bd479264398a3a2a7/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess%2Ftests.rs?ref=fa23ddf6e6932b0caa6ee14bd479264398a3a2a7", "patch": "@@ -3,29 +3,41 @@ use crate::ffi::{OsStr, OsString};\n \n #[test]\n fn test_make_command_line() {\n-    fn test_wrapper(prog: &str, args: &[&str]) -> String {\n+    fn test_wrapper(prog: &str, args: &[&str], force_quotes: bool) -> String {\n         let command_line = &make_command_line(\n             OsStr::new(prog),\n             &args.iter().map(|a| OsString::from(a)).collect::<Vec<OsString>>(),\n+            force_quotes,\n         )\n         .unwrap();\n         String::from_utf16(command_line).unwrap()\n     }\n \n-    assert_eq!(test_wrapper(\"prog\", &[\"aaa\", \"bbb\", \"ccc\"]), \"\\\"prog\\\" aaa bbb ccc\");\n+    assert_eq!(test_wrapper(\"prog\", &[\"aaa\", \"bbb\", \"ccc\"], false), \"\\\"prog\\\" aaa bbb ccc\");\n \n     assert_eq!(\n-        test_wrapper(\"C:\\\\Program Files\\\\blah\\\\blah.exe\", &[\"aaa\"]),\n+        test_wrapper(\"C:\\\\Program Files\\\\blah\\\\blah.exe\", &[\"aaa\"], false),\n         \"\\\"C:\\\\Program Files\\\\blah\\\\blah.exe\\\" aaa\"\n     );\n     assert_eq!(\n-        test_wrapper(\"C:\\\\Program Files\\\\test\", &[\"aa\\\"bb\"]),\n+        test_wrapper(\"C:\\\\Program Files\\\\blah\\\\blah.exe\", &[\"aaa\", \"v*\"], false),\n+        \"\\\"C:\\\\Program Files\\\\blah\\\\blah.exe\\\" aaa v*\"\n+    );\n+    assert_eq!(\n+        test_wrapper(\"C:\\\\Program Files\\\\blah\\\\blah.exe\", &[\"aaa\", \"v*\"], true),\n+        \"\\\"C:\\\\Program Files\\\\blah\\\\blah.exe\\\" \\\"aaa\\\" \\\"v*\\\"\"\n+    );\n+    assert_eq!(\n+        test_wrapper(\"C:\\\\Program Files\\\\test\", &[\"aa\\\"bb\"], false),\n         \"\\\"C:\\\\Program Files\\\\test\\\" aa\\\\\\\"bb\"\n     );\n-    assert_eq!(test_wrapper(\"echo\", &[\"a b c\"]), \"\\\"echo\\\" \\\"a b c\\\"\");\n-    assert_eq!(test_wrapper(\"echo\", &[\"\\\" \\\\\\\" \\\\\", \"\\\\\"]), \"\\\"echo\\\" \\\"\\\\\\\" \\\\\\\\\\\\\\\" \\\\\\\\\\\" \\\\\");\n+    assert_eq!(test_wrapper(\"echo\", &[\"a b c\"], false), \"\\\"echo\\\" \\\"a b c\\\"\");\n+    assert_eq!(\n+        test_wrapper(\"echo\", &[\"\\\" \\\\\\\" \\\\\", \"\\\\\"], false),\n+        \"\\\"echo\\\" \\\"\\\\\\\" \\\\\\\\\\\\\\\" \\\\\\\\\\\" \\\\\"\n+    );\n     assert_eq!(\n-        test_wrapper(\"\\u{03c0}\\u{042f}\\u{97f3}\\u{00e6}\\u{221e}\", &[]),\n+        test_wrapper(\"\\u{03c0}\\u{042f}\\u{97f3}\\u{00e6}\\u{221e}\", &[], false),\n         \"\\\"\\u{03c0}\\u{042f}\\u{97f3}\\u{00e6}\\u{221e}\\\"\"\n     );\n }"}]}