{"sha": "0886bc4cbf3ec9b782b2dc9ed99ac6bed9df7b00", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4ODZiYzRjYmYzZWM5Yjc4MmIyZGM5ZWQ5OWFjNmJlZDlkZjdiMDA=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-16T09:43:35Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-16T09:43:35Z"}, "message": "compiletest: Move pass mode update into a separate function", "tree": {"sha": "3e42d61060947acce8e787506be6f31d33db734b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e42d61060947acce8e787506be6f31d33db734b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0886bc4cbf3ec9b782b2dc9ed99ac6bed9df7b00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0886bc4cbf3ec9b782b2dc9ed99ac6bed9df7b00", "html_url": "https://github.com/rust-lang/rust/commit/0886bc4cbf3ec9b782b2dc9ed99ac6bed9df7b00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0886bc4cbf3ec9b782b2dc9ed99ac6bed9df7b00/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "932ea641758e2fe20500151e80a4968cc0799078", "url": "https://api.github.com/repos/rust-lang/rust/commits/932ea641758e2fe20500151e80a4968cc0799078", "html_url": "https://github.com/rust-lang/rust/commit/932ea641758e2fe20500151e80a4968cc0799078"}], "stats": {"total": 68, "additions": 36, "deletions": 32}, "files": [{"sha": "6ce7461f759a4f189996a3ec62429f02f19bb2bc", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 36, "deletions": 32, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/0886bc4cbf3ec9b782b2dc9ed99ac6bed9df7b00/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0886bc4cbf3ec9b782b2dc9ed99ac6bed9df7b00/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=0886bc4cbf3ec9b782b2dc9ed99ac6bed9df7b00", "patch": "@@ -526,38 +526,7 @@ impl TestProps {\n                 self.check_test_line_numbers_match = config.parse_check_test_line_numbers_match(ln);\n             }\n \n-            let check_no_run = |s| {\n-                if config.mode != Mode::Ui && config.mode != Mode::Incremental {\n-                    panic!(\"`{}` header is only supported in UI and incremental tests\", s);\n-                }\n-                if config.mode == Mode::Incremental &&\n-                   !cfg.map_or(false, |r| r.starts_with(\"cfail\")) &&\n-                   !self.revisions.iter().all(|r| r.starts_with(\"cfail\")) {\n-                    panic!(\"`{}` header is only supported in `cfail` incremental tests\", s);\n-                }\n-            };\n-            let pass_mode = if config.parse_name_directive(ln, \"check-pass\") {\n-                check_no_run(\"check-pass\");\n-                Some(PassMode::Check)\n-            } else if config.parse_name_directive(ln, \"build-pass\") {\n-                check_no_run(\"build-pass\");\n-                Some(PassMode::Build)\n-            } else if config.parse_name_directive(ln, \"compile-pass\") /* compatibility */ {\n-                check_no_run(\"compile-pass\");\n-                Some(PassMode::Build)\n-            } else if config.parse_name_directive(ln, \"run-pass\") {\n-                if config.mode != Mode::Ui && config.mode != Mode::RunPass /* compatibility */ {\n-                    panic!(\"`run-pass` header is only supported in UI tests\")\n-                }\n-                Some(PassMode::Run)\n-            } else {\n-                None\n-            };\n-            match (self.pass_mode, pass_mode) {\n-                (None, Some(_)) => self.pass_mode = pass_mode,\n-                (Some(_), Some(_)) => panic!(\"multiple `*-pass` headers in a single test\"),\n-                (_, None) => {}\n-            }\n+            self.update_pass_mode(ln, cfg, config);\n \n             if !self.disable_ui_testing_normalization {\n                 self.disable_ui_testing_normalization =\n@@ -604,6 +573,41 @@ impl TestProps {\n             }\n         }\n     }\n+\n+    fn update_pass_mode(&mut self, ln: &str, revision: Option<&str>, config: &Config) {\n+        let check_no_run = |s| {\n+            if config.mode != Mode::Ui && config.mode != Mode::Incremental {\n+                panic!(\"`{}` header is only supported in UI and incremental tests\", s);\n+            }\n+            if config.mode == Mode::Incremental &&\n+                !revision.map_or(false, |r| r.starts_with(\"cfail\")) &&\n+                !self.revisions.iter().all(|r| r.starts_with(\"cfail\")) {\n+                panic!(\"`{}` header is only supported in `cfail` incremental tests\", s);\n+            }\n+        };\n+        let pass_mode = if config.parse_name_directive(ln, \"check-pass\") {\n+            check_no_run(\"check-pass\");\n+            Some(PassMode::Check)\n+        } else if config.parse_name_directive(ln, \"build-pass\") {\n+            check_no_run(\"build-pass\");\n+            Some(PassMode::Build)\n+        } else if config.parse_name_directive(ln, \"compile-pass\") /* compatibility */ {\n+            check_no_run(\"compile-pass\");\n+            Some(PassMode::Build)\n+        } else if config.parse_name_directive(ln, \"run-pass\") {\n+            if config.mode != Mode::Ui && config.mode != Mode::RunPass /* compatibility */ {\n+                panic!(\"`run-pass` header is only supported in UI tests\")\n+            }\n+            Some(PassMode::Run)\n+        } else {\n+            None\n+        };\n+        match (self.pass_mode, pass_mode) {\n+            (None, Some(_)) => self.pass_mode = pass_mode,\n+            (Some(_), Some(_)) => panic!(\"multiple `*-pass` headers in a single test\"),\n+            (_, None) => {}\n+        }\n+    }\n }\n \n fn iter_header(testfile: &Path, cfg: Option<&str>, it: &mut dyn FnMut(&str)) {"}]}