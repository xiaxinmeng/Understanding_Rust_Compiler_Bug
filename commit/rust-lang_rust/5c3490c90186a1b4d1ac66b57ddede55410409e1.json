{"sha": "5c3490c90186a1b4d1ac66b57ddede55410409e1", "node_id": "C_kwDOAAsO6NoAKDVjMzQ5MGM5MDE4NmExYjRkMWFjNjZiNTdkZGVkZTU1NDEwNDA5ZTE", "commit": {"author": {"name": "Thom Chiovoloni", "email": "thom@shift.click", "date": "2022-08-30T08:15:59Z"}, "committer": {"name": "Thom Chiovoloni", "email": "thom@shift.click", "date": "2022-08-30T08:15:59Z"}, "message": "Replace `AlignedAs` with a more specific `Align8` type", "tree": {"sha": "9ac77733025a964904285fe991d2616320ffa930", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ac77733025a964904285fe991d2616320ffa930"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c3490c90186a1b4d1ac66b57ddede55410409e1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQQszICQ1r0Zqrp7OLPXcz0dendfCgUCYw3HQAAKCRDXcz0dendf\nCq2eAQCZXR4l+yWaPh/ltYzmd1XLHcjKgYA7z6C3JP8d8+oOBQD/Sb+iPHirqdzx\nkUti3WNA4EgTNxytEBmHGfcJ+Vx9hQc=\n=eE5E\n-----END PGP SIGNATURE-----", "payload": "tree 9ac77733025a964904285fe991d2616320ffa930\nparent d9c760db43d8ab701a71f633d820efc72d8cedea\nauthor Thom Chiovoloni <thom@shift.click> 1661847359 -0700\ncommitter Thom Chiovoloni <thom@shift.click> 1661847359 -0700\n\nReplace `AlignedAs` with a more specific `Align8` type\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c3490c90186a1b4d1ac66b57ddede55410409e1", "html_url": "https://github.com/rust-lang/rust/commit/5c3490c90186a1b4d1ac66b57ddede55410409e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c3490c90186a1b4d1ac66b57ddede55410409e1/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9c760db43d8ab701a71f633d820efc72d8cedea", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9c760db43d8ab701a71f633d820efc72d8cedea", "html_url": "https://github.com/rust-lang/rust/commit/d9c760db43d8ab701a71f633d820efc72d8cedea"}], "stats": {"total": 72, "additions": 20, "deletions": 52}, "files": [{"sha": "c702b8e744c8978d40a61bcf9ccf5bc6c18cc90f", "filename": "library/std/src/sys/windows/fs.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5c3490c90186a1b4d1ac66b57ddede55410409e1/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3490c90186a1b4d1ac66b57ddede55410409e1/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs?ref=5c3490c90186a1b4d1ac66b57ddede55410409e1", "patch": "@@ -11,7 +11,7 @@ use crate::slice;\n use crate::sync::Arc;\n use crate::sys::handle::Handle;\n use crate::sys::time::SystemTime;\n-use crate::sys::{c, cvt, AlignedAs};\n+use crate::sys::{c, cvt, Align8};\n use crate::sys_common::{AsInner, FromInner, IntoInner};\n use crate::thread;\n \n@@ -47,9 +47,6 @@ pub struct ReadDir {\n     first: Option<c::WIN32_FIND_DATAW>,\n }\n \n-type AlignedReparseBuf =\n-    AlignedAs<c::REPARSE_DATA_BUFFER, [u8; c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE]>;\n-\n struct FindNextFileHandle(c::HANDLE);\n \n unsafe impl Send for FindNextFileHandle {}\n@@ -329,7 +326,7 @@ impl File {\n             cvt(c::GetFileInformationByHandle(self.handle.as_raw_handle(), &mut info))?;\n             let mut reparse_tag = 0;\n             if info.dwFileAttributes & c::FILE_ATTRIBUTE_REPARSE_POINT != 0 {\n-                let mut b = AlignedReparseBuf::new([0u8; c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE]);\n+                let mut b = Align8([0u8; c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE]);\n                 if let Ok((_, buf)) = self.reparse_point(&mut b) {\n                     reparse_tag = (*buf).ReparseTag;\n                 }\n@@ -392,7 +389,7 @@ impl File {\n             attr.file_size = info.AllocationSize as u64;\n             attr.number_of_links = Some(info.NumberOfLinks);\n             if attr.file_type().is_reparse_point() {\n-                let mut b = AlignedReparseBuf::new([0; c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE]);\n+                let mut b = Align8([0; c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE]);\n                 if let Ok((_, buf)) = self.reparse_point(&mut b) {\n                     attr.reparse_tag = (*buf).ReparseTag;\n                 }\n@@ -466,28 +463,32 @@ impl File {\n     // avoid narrowing provenance to the actual `REPARSE_DATA_BUFFER`.\n     fn reparse_point(\n         &self,\n-        space: &mut AlignedReparseBuf,\n+        space: &mut Align8<[u8]>,\n     ) -> io::Result<(c::DWORD, *const c::REPARSE_DATA_BUFFER)> {\n         unsafe {\n             let mut bytes = 0;\n             cvt({\n+                // Grab this in advance to avoid it invalidating the pointer\n+                // we get from `space.0.as_mut_ptr()`.\n+                let len = space.0.len();\n                 c::DeviceIoControl(\n                     self.handle.as_raw_handle(),\n                     c::FSCTL_GET_REPARSE_POINT,\n                     ptr::null_mut(),\n                     0,\n-                    space.value.as_mut_ptr() as *mut _,\n-                    space.value.len() as c::DWORD,\n+                    space.0.as_mut_ptr().cast(),\n+                    len as c::DWORD,\n                     &mut bytes,\n                     ptr::null_mut(),\n                 )\n             })?;\n-            Ok((bytes, space.value.as_ptr().cast::<c::REPARSE_DATA_BUFFER>()))\n+            const _: () = assert!(core::mem::align_of::<c::REPARSE_DATA_BUFFER>() <= 8);\n+            Ok((bytes, space.0.as_ptr().cast::<c::REPARSE_DATA_BUFFER>()))\n         }\n     }\n \n     fn readlink(&self) -> io::Result<PathBuf> {\n-        let mut space = AlignedReparseBuf::new([0u8; c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE]);\n+        let mut space = Align8([0u8; c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE]);\n         let (_bytes, buf) = self.reparse_point(&mut space)?;\n         unsafe {\n             let (path_buffer, subst_off, subst_len, relative) = match (*buf).ReparseTag {\n@@ -1345,8 +1346,8 @@ fn symlink_junction_inner(original: &Path, junction: &Path) -> io::Result<()> {\n     let h = f.as_inner().as_raw_handle();\n \n     unsafe {\n-        let mut data = AlignedReparseBuf::new([0u8; c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE]);\n-        let data_ptr = data.value.as_mut_ptr();\n+        let mut data = Align8([0u8; c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE]);\n+        let data_ptr = data.0.as_mut_ptr();\n         let db = data_ptr.cast::<c::REPARSE_MOUNTPOINT_DATA_BUFFER>();\n         let buf = ptr::addr_of_mut!((*db).ReparseTarget).cast::<c::WCHAR>();\n         let mut i = 0;"}, {"sha": "340cae4066bf44deb42f872769a37ffea7333afb", "filename": "library/std/src/sys/windows/mod.rs", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5c3490c90186a1b4d1ac66b57ddede55410409e1/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3490c90186a1b4d1ac66b57ddede55410409e1/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs?ref=5c3490c90186a1b4d1ac66b57ddede55410409e1", "patch": "@@ -330,25 +330,10 @@ pub fn abort_internal() -> ! {\n     crate::intrinsics::abort();\n }\n \n-/// Used for some win32 buffers which are stack allocated, for example:\n-/// `AlignedAs<c::REPARSE_DATA_BUFFER, [u8; c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE]>`\n-#[repr(C)]\n+/// Align the inner value to 8 bytes.\n+///\n+/// This is enough for almost all of the buffers we're likely to work with in\n+/// the Windows APIs we use.\n+#[repr(C, align(8))]\n #[derive(Copy, Clone)]\n-pub struct AlignedAs<Aligner, Alignee: ?Sized> {\n-    /// Use `[Aligner; 0]` as a sort of `PhantomAlignNextField<Aligner>`. This\n-    /// is a bit of a hack, and could break (in a way that's caught by tests) if\n-    /// #81996 is fixed.\n-    aligner: [Aligner; 0],\n-    /// The aligned value. Public rather than exposed via accessors so that if\n-    /// needed it can be used with `addr_of` and such (also, this is less code).\n-    pub value: Alignee,\n-}\n-\n-impl<Aligner, Alignee> AlignedAs<Aligner, Alignee> {\n-    // This is frequently used with large stack buffers, so force-inline to\n-    // try and avoid using 2x as much stack space in debug builds.\n-    #[inline(always)]\n-    pub const fn new(value: Alignee) -> Self {\n-        Self { aligner: [], value }\n-    }\n-}\n+pub(crate) struct Align8<T: ?Sized>(pub T);"}, {"sha": "458d6e11c20982d23ea7baaeb798b8725e6dc629", "filename": "library/std/src/sys/windows/os/tests.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5c3490c90186a1b4d1ac66b57ddede55410409e1/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3490c90186a1b4d1ac66b57ddede55410409e1/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos%2Ftests.rs?ref=5c3490c90186a1b4d1ac66b57ddede55410409e1", "patch": "@@ -11,21 +11,3 @@ fn ntstatus_error() {\n             .contains(\"FormatMessageW() returned error\")\n     );\n }\n-\n-#[test]\n-fn smoketest_aligned_as() {\n-    use crate::{\n-        mem::{align_of, size_of},\n-        ptr::addr_of,\n-        sys::{c, AlignedAs},\n-    };\n-    type AlignedReparseBuf =\n-        AlignedAs<c::REPARSE_DATA_BUFFER, [u8; c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE]>;\n-    assert!(size_of::<AlignedReparseBuf>() >= c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE);\n-    assert_eq!(align_of::<AlignedReparseBuf>(), align_of::<c::REPARSE_DATA_BUFFER>());\n-    let a = AlignedReparseBuf::new([0u8; c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE]);\n-    // Quick and dirty offsetof check.\n-    assert_eq!(addr_of!(a).cast::<u8>(), addr_of!(a.value).cast::<u8>());\n-    // Smoke check that it's actually aligned.\n-    assert!(addr_of!(a.value).is_aligned_to(align_of::<c::REPARSE_DATA_BUFFER>()));\n-}"}]}