{"sha": "80cdb0af7dd27471e1e4a4362e2473a9331a5fdd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwY2RiMGFmN2RkMjc0NzFlMWU0YTQzNjJlMjQ3M2E5MzMxYTVmZGQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-12T19:11:55Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-12T23:13:05Z"}, "message": "Account for `Box::new(impl Future)` and emit help `use Box::pin`", "tree": {"sha": "26676ad7789bab0d6663e4f83d2ce6cc8aa5a786", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26676ad7789bab0d6663e4f83d2ce6cc8aa5a786"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80cdb0af7dd27471e1e4a4362e2473a9331a5fdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80cdb0af7dd27471e1e4a4362e2473a9331a5fdd", "html_url": "https://github.com/rust-lang/rust/commit/80cdb0af7dd27471e1e4a4362e2473a9331a5fdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80cdb0af7dd27471e1e4a4362e2473a9331a5fdd/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a852fb74131af7473bafb03d0f3994a0e9f597d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a852fb74131af7473bafb03d0f3994a0e9f597d5", "html_url": "https://github.com/rust-lang/rust/commit/a852fb74131af7473bafb03d0f3994a0e9f597d5"}], "stats": {"total": 114, "additions": 84, "deletions": 30}, "files": [{"sha": "4a98095ec89c6b058db26867a2fec95c9fdca8d0", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/80cdb0af7dd27471e1e4a4362e2473a9331a5fdd/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80cdb0af7dd27471e1e4a4362e2473a9331a5fdd/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=80cdb0af7dd27471e1e4a4362e2473a9331a5fdd", "patch": "@@ -24,8 +24,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.annotate_expected_due_to_let_ty(err, expr);\n         self.suggest_compatible_variants(err, expr, expected, expr_ty);\n         self.suggest_ref_or_into(err, expr, expected, expr_ty);\n+        if self.suggest_calling_boxed_future_when_appropriate(err, expr, expected, expr_ty) {\n+            return;\n+        }\n         self.suggest_boxing_when_appropriate(err, expr, expected, expr_ty);\n-        self.suggest_calling_boxed_future_when_appropriate(err, expr, expected, expr_ty);\n         self.suggest_missing_await(err, expr, expected, expr_ty);\n     }\n "}, {"sha": "6d37526df2c228a59896ce13617acf32390231b1", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/80cdb0af7dd27471e1e4a4362e2473a9331a5fdd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80cdb0af7dd27471e1e4a4362e2473a9331a5fdd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=80cdb0af7dd27471e1e4a4362e2473a9331a5fdd", "patch": "@@ -5053,18 +5053,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr: &hir::Expr<'_>,\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n-    ) {\n+    ) -> bool {\n         // Handle #68197.\n \n         if self.tcx.hir().is_const_context(expr.hir_id) {\n             // Do not suggest `Box::new` in const context.\n-            return;\n+            return false;\n         }\n         let pin_did = self.tcx.lang_items().pin_type();\n         match expected.kind {\n-            ty::Adt(def, _) if Some(def.did) != pin_did => return,\n+            ty::Adt(def, _) if Some(def.did) != pin_did => return false,\n             // This guards the `unwrap` and `mk_box` below.\n-            _ if pin_did.is_none() || self.tcx.lang_items().owned_box().is_none() => return,\n+            _ if pin_did.is_none() || self.tcx.lang_items().owned_box().is_none() => return false,\n             _ => {}\n         }\n         let boxed_found = self.tcx.mk_box(found);\n@@ -5073,12 +5073,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.can_coerce(new_found, expected),\n             self.sess().source_map().span_to_snippet(expr.span),\n         ) {\n-            err.span_suggestion(\n-                expr.span,\n-                \"you need to pin and box this expression\",\n-                format!(\"Box::pin({})\", snippet),\n-                Applicability::MachineApplicable,\n-            );\n+            match found.kind {\n+                ty::Adt(def, _) if def.is_box() => {\n+                    err.help(\"use `Box::pin`\");\n+                }\n+                _ => {\n+                    err.span_suggestion(\n+                        expr.span,\n+                        \"you need to pin and box this expression\",\n+                        format!(\"Box::pin({})\", snippet),\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+            }\n+            true\n+        } else {\n+            false\n         }\n     }\n "}, {"sha": "9c68de7bacec6d52e26b8825572e0d1a0b99b68e", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.fixed", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a852fb74131af7473bafb03d0f3994a0e9f597d5/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a852fb74131af7473bafb03d0f3994a0e9f597d5/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.fixed?ref=a852fb74131af7473bafb03d0f3994a0e9f597d5", "patch": "@@ -1,15 +0,0 @@\n-// edition:2018\n-// run-rustfix\n-#![allow(dead_code)]\n-use std::future::Future;\n-use std::pin::Pin;\n-\n-type BoxFuture<'a, T> = Pin<Box<dyn Future<Output = T> + Send + 'a>>;\n-//   ^^^^^^^^^ This would come from the `futures` crate in real code.\n-\n-fn foo<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n-    // We could instead use an `async` block, but this way we have no std spans.\n-    Box::pin(x) //~ ERROR mismatched types\n-}\n-\n-fn main() {}"}, {"sha": "fd4077653903503c3312327d264548db1ebad137", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/80cdb0af7dd27471e1e4a4362e2473a9331a5fdd/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80cdb0af7dd27471e1e4a4362e2473a9331a5fdd/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.rs?ref=80cdb0af7dd27471e1e4a4362e2473a9331a5fdd", "patch": "@@ -1,5 +1,4 @@\n // edition:2018\n-// run-rustfix\n #![allow(dead_code)]\n use std::future::Future;\n use std::pin::Pin;\n@@ -11,5 +10,17 @@ fn foo<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32>\n     // We could instead use an `async` block, but this way we have no std spans.\n     x //~ ERROR mismatched types\n }\n+fn bar<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n+    Box::new(x) //~ ERROR mismatched types\n+    //~^ HELP use `Box::pin`\n+}\n+fn baz<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n+    Pin::new(x) //~ ERROR mismatched types\n+    //~^ ERROR the trait bound\n+}\n+fn qux<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n+    Pin::new(Box::new(x)) //~ ERROR mismatched types\n+    //~^ ERROR the trait bound\n+}\n \n fn main() {}"}, {"sha": "cf5ef1362db3fe9f12543f33e685ae34ff9a8f87", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.stderr", "status": "modified", "additions": 49, "deletions": 3, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/80cdb0af7dd27471e1e4a4362e2473a9331a5fdd/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/80cdb0af7dd27471e1e4a4362e2473a9331a5fdd/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr?ref=80cdb0af7dd27471e1e4a4362e2473a9331a5fdd", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/expected-boxed-future-isnt-pinned.rs:12:5\n+  --> $DIR/expected-boxed-future-isnt-pinned.rs:11:5\n    |\n LL | fn foo<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n    |        - this type parameter                            ----------------------- expected `std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = i32> + std::marker::Send + 'static)>>` because of return type\n@@ -15,6 +15,52 @@ LL |     x\n    = help: type parameters must be constrained to match other types\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n-error: aborting due to previous error\n+error[E0308]: mismatched types\n+  --> $DIR/expected-boxed-future-isnt-pinned.rs:14:5\n+   |\n+LL | fn bar<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n+   |                                                         ----------------------- expected `std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = i32> + std::marker::Send + 'static)>>` because of return type\n+LL |     Box::new(x)\n+   |     ^^^^^^^^^^^ expected struct `std::pin::Pin`, found struct `std::boxed::Box`\n+   |\n+   = note: expected struct `std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = i32> + std::marker::Send + 'static)>>`\n+              found struct `std::boxed::Box<F>`\n+   = help: use `Box::pin`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/expected-boxed-future-isnt-pinned.rs:18:14\n+   |\n+LL | fn baz<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n+   |        - this type parameter\n+LL |     Pin::new(x)\n+   |              ^\n+   |              |\n+   |              expected struct `std::boxed::Box`, found type parameter `F`\n+   |              help: store this in the heap by calling `Box::new`: `Box::new(x)`\n+   |\n+   = note:      expected struct `std::boxed::Box<dyn std::future::Future<Output = i32> + std::marker::Send>`\n+           found type parameter `F`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n+   = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n+\n+error[E0277]: the trait bound `dyn std::future::Future<Output = i32> + std::marker::Send: std::marker::Unpin` is not satisfied\n+  --> $DIR/expected-boxed-future-isnt-pinned.rs:18:5\n+   |\n+LL |     Pin::new(x)\n+   |     ^^^^^^^^ the trait `std::marker::Unpin` is not implemented for `dyn std::future::Future<Output = i32> + std::marker::Send`\n+   |\n+   = note: required by `std::pin::Pin::<P>::new`\n+\n+error[E0277]: the trait bound `dyn std::future::Future<Output = i32> + std::marker::Send: std::marker::Unpin` is not satisfied\n+  --> $DIR/expected-boxed-future-isnt-pinned.rs:22:5\n+   |\n+LL |     Pin::new(Box::new(x))\n+   |     ^^^^^^^^ the trait `std::marker::Unpin` is not implemented for `dyn std::future::Future<Output = i32> + std::marker::Send`\n+   |\n+   = note: required by `std::pin::Pin::<P>::new`\n+\n+error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0277, E0308.\n+For more information about an error, try `rustc --explain E0277`."}]}