{"sha": "00a32eb54f65c11cd2f4d10c2414dd633fab3c5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwYTMyZWI1NGY2NWMxMWNkMmY0ZDEwYzI0MTRkZDYzM2ZhYjNjNWI=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2019-11-23T13:32:20Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2020-09-03T18:59:17Z"}, "message": "fix some in-place-collect edge-cases\n\n- it's an allocation optimization, so don't attempt to do it on ZSTs\n- drop the tail of partially exhausted iters", "tree": {"sha": "e8f0e7bb35e3c0cc52c5c1850a8dbebe750bf8a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8f0e7bb35e3c0cc52c5c1850a8dbebe750bf8a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00a32eb54f65c11cd2f4d10c2414dd633fab3c5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00a32eb54f65c11cd2f4d10c2414dd633fab3c5b", "html_url": "https://github.com/rust-lang/rust/commit/00a32eb54f65c11cd2f4d10c2414dd633fab3c5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00a32eb54f65c11cd2f4d10c2414dd633fab3c5b/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c816b96dd549d24146f6c4be410fcf7526221d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c816b96dd549d24146f6c4be410fcf7526221d1", "html_url": "https://github.com/rust-lang/rust/commit/8c816b96dd549d24146f6c4be410fcf7526221d1"}], "stats": {"total": 13, "additions": 13, "deletions": 0}, "files": [{"sha": "1e7f95a25cc25c7f6135017909fef301fa52f04f", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/00a32eb54f65c11cd2f4d10c2414dd633fab3c5b/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00a32eb54f65c11cd2f4d10c2414dd633fab3c5b/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=00a32eb54f65c11cd2f4d10c2414dd633fab3c5b", "patch": "@@ -2192,6 +2192,12 @@ fn from_into_iter_source<T, I>(mut iterator: I) -> Vec<T>\n where\n     I: Iterator<Item = T> + InPlaceIterable + SourceIter<Source = IntoIter<T>>,\n {\n+    // This specialization only makes sense if we're juggling real allocations.\n+    // Additionally some of the pointer arithmetic would panic on ZSTs.\n+    if mem::size_of::<T>() == 0 {\n+        return SpecFromNested::from_iter(iterator);\n+    }\n+\n     let src_buf = iterator.as_inner().buf.as_ptr();\n     let src_end = iterator.as_inner().end;\n     let dst = src_buf;\n@@ -2238,6 +2244,13 @@ where\n     debug_assert_eq!(src_buf, src.buf.as_ptr());\n     debug_assert!(dst as *const _ <= src.ptr, \"InPlaceIterable contract violation\");\n \n+    if mem::needs_drop::<T>() {\n+        // drop tail if iterator was only partially exhaused\n+        unsafe {\n+            ptr::drop_in_place(src.as_mut_slice());\n+        }\n+    }\n+\n     let vec = unsafe {\n         let len = dst.offset_from(src_buf) as usize;\n         Vec::from_raw_parts(src.buf.as_ptr(), len, src.cap)"}]}