{"sha": "74f8eb51aee808182b841dc862e14511044b4b20", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZjhlYjUxYWVlODA4MTgyYjg0MWRjODYyZTE0NTExMDQ0YjRiMjA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-29T00:58:45Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-29T00:59:30Z"}, "message": "rustc: Move duplicate_heap_parts to copy glue; add a test case", "tree": {"sha": "96e464c4ceaa846fee8bb9358e05bb19b6f01e21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96e464c4ceaa846fee8bb9358e05bb19b6f01e21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74f8eb51aee808182b841dc862e14511044b4b20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74f8eb51aee808182b841dc862e14511044b4b20", "html_url": "https://github.com/rust-lang/rust/commit/74f8eb51aee808182b841dc862e14511044b4b20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74f8eb51aee808182b841dc862e14511044b4b20/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db478ed4de53df7f7199bee42a75990b4e2b7c6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/db478ed4de53df7f7199bee42a75990b4e2b7c6d", "html_url": "https://github.com/rust-lang/rust/commit/db478ed4de53df7f7199bee42a75990b4e2b7c6d"}], "stats": {"total": 40, "additions": 27, "deletions": 13}, "files": [{"sha": "b465e329155551157bcaa3ca36af64a9dcd24cb6", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/74f8eb51aee808182b841dc862e14511044b4b20/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74f8eb51aee808182b841dc862e14511044b4b20/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=74f8eb51aee808182b841dc862e14511044b4b20", "patch": "@@ -1933,6 +1933,9 @@ fn make_copy_glue(&@block_ctxt cx, ValueRef v, &ty::t t) {\n         bcx = incr_refcnt_of_boxed(cx, cx.build.Load(v)).bcx;\n     } else if (ty::type_is_structural(cx.fcx.lcx.ccx.tcx, t)) {\n         bcx = iter_structural_ty(cx, v, t, bind copy_ty(_, _, _)).bcx;\n+        if (ty::type_owns_heap_mem(cx.fcx.lcx.ccx.tcx, t)) {\n+            bcx = duplicate_heap_parts(bcx, v, t).bcx;\n+        }\n     } else { bcx = cx; }\n     bcx.build.RetVoid();\n }\n@@ -3054,7 +3057,8 @@ fn compare(&@block_ctxt cx, ValueRef lhs, ValueRef rhs, &ty::t t,\n }\n \n fn copy_ty(&@block_ctxt cx, ValueRef v, ty::t t) -> result {\n-    if (ty::type_has_pointers(cx.fcx.lcx.ccx.tcx, t)) {\n+    if (ty::type_has_pointers(cx.fcx.lcx.ccx.tcx, t) ||\n+            ty::type_owns_heap_mem(cx.fcx.lcx.ccx.tcx, t)) {\n         ret call_tydesc_glue(cx, v, t, abi::tydesc_field_copy_glue);\n     }\n     ret rslt(cx, C_nil());\n@@ -3168,20 +3172,24 @@ fn copy_val(&@block_ctxt cx, copy_action action, ValueRef dst, ValueRef src,\n                    ty::type_is_bot(ccx.tcx, t)) {\n         ret rslt(cx, C_nil());\n     } else if (ty::type_is_boxed(ccx.tcx, t)) {\n-        auto r = copy_ty(cx, src, t);\n+        auto bcx;\n         if (action == DROP_EXISTING) {\n-            r = drop_ty(r.bcx, r.bcx.build.Load(dst), t);\n+            bcx = drop_ty(cx, cx.build.Load(dst), t).bcx;\n+        } else {\n+            bcx = cx;\n         }\n-        ret rslt(r.bcx, r.bcx.build.Store(src, dst));\n+        bcx = copy_ty(bcx, src, t).bcx;\n+        ret rslt(bcx, bcx.build.Store(src, dst));\n     } else if (ty::type_is_structural(ccx.tcx, t) ||\n                    ty::type_has_dynamic_size(ccx.tcx, t)) {\n-        auto r = copy_ty(cx, src, t);\n-        if (action == DROP_EXISTING) { r = drop_ty(r.bcx, dst, t); }\n-        r = memmove_ty(r.bcx, dst, src, t);\n-        if (ty::type_owns_heap_mem(ccx.tcx, t)) {\n-            r = duplicate_heap_parts(cx, dst, t);\n+        auto bcx;\n+        if (action == DROP_EXISTING) {\n+            bcx = drop_ty(cx, dst, t).bcx;\n+        } else {\n+            bcx = cx;\n         }\n-        ret r;\n+        bcx = memmove_ty(bcx, dst, src, t).bcx;\n+        ret copy_ty(bcx, dst, t);\n     }\n     ccx.sess.bug(\"unexpected type in trans::copy_val: \" +\n                  ty_to_str(ccx.tcx, t));"}, {"sha": "33c578e93a53e9acfd6e63448761c50722a92adc", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/74f8eb51aee808182b841dc862e14511044b4b20/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/74f8eb51aee808182b841dc862e14511044b4b20/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=74f8eb51aee808182b841dc862e14511044b4b20", "patch": "@@ -452,18 +452,17 @@ copy_elements(rust_task *task, type_desc *elem_t,\n               void *pdst, void *psrc, size_t n)\n {\n     char *dst = (char *)pdst, *src = (char *)psrc;\n+    memmove(dst, src, n);\n \n-    // FIXME: Copy glue doesn't work this way.\n     // increment the refcount of each element of the vector\n     if (elem_t->copy_glue) {\n         glue_fn *copy_glue = elem_t->copy_glue;\n         size_t elem_size = elem_t->size;\n         const type_desc **tydescs = elem_t->first_param;\n-        for (char *p = src; p < src+n; p += elem_size) {\n+        for (char *p = dst; p < dst+n; p += elem_size) {\n             copy_glue(NULL, task, NULL, tydescs, p);\n         }\n     }\n-    memmove(dst, src, n);\n }\n \n extern \"C\" CDECL void"}, {"sha": "2afc69d4a7c966ea23cbf75ef2dc49cb53418d89", "filename": "src/test/run-pass/generic-ivec.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/74f8eb51aee808182b841dc862e14511044b4b20/src%2Ftest%2Frun-pass%2Fgeneric-ivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74f8eb51aee808182b841dc862e14511044b4b20/src%2Ftest%2Frun-pass%2Fgeneric-ivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-ivec.rs?ref=74f8eb51aee808182b841dc862e14511044b4b20", "patch": "@@ -0,0 +1,7 @@\n+// xfail-stage0\n+\n+fn f[T](@T v) {}\n+fn main() {\n+    f(@~[ 1, 2, 3, 4, 5 ]);\n+}\n+"}]}