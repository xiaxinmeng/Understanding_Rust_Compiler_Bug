{"sha": "3fd4b22bce195e5c12e478296c8e0c03de6c8331", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmZDRiMjJiY2UxOTVlNWMxMmU0NzgyOTZjOGUwYzAzZGU2YzgzMzE=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-05-22T03:51:50Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-05-22T12:22:37Z"}, "message": "Make maybe_codegen_consume_direct iterate instead of doing recursion", "tree": {"sha": "1645a435d3c9b4152161b101ff60118f75111f56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1645a435d3c9b4152161b101ff60118f75111f56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fd4b22bce195e5c12e478296c8e0c03de6c8331", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fd4b22bce195e5c12e478296c8e0c03de6c8331", "html_url": "https://github.com/rust-lang/rust/commit/3fd4b22bce195e5c12e478296c8e0c03de6c8331", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fd4b22bce195e5c12e478296c8e0c03de6c8331/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50a0defd5a93523067ef239936cc2e0755220904", "url": "https://api.github.com/repos/rust-lang/rust/commits/50a0defd5a93523067ef239936cc2e0755220904", "html_url": "https://github.com/rust-lang/rust/commit/50a0defd5a93523067ef239936cc2e0755220904"}], "stats": {"total": 70, "additions": 36, "deletions": 34}, "files": [{"sha": "3db05b7214d659578533a4cc4ca701dc8ef9d5ce", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 36, "deletions": 34, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/3fd4b22bce195e5c12e478296c8e0c03de6c8331/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd4b22bce195e5c12e478296c8e0c03de6c8331/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=3fd4b22bce195e5c12e478296c8e0c03de6c8331", "patch": "@@ -380,45 +380,47 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     ) -> Option<OperandRef<'tcx, Bx::Value>> {\n         debug!(\"maybe_codegen_consume_direct(place={:?})\", place);\n \n-        // watch out for locals that do not have an\n-        // alloca; they are handled somewhat differently\n-        if let mir::Place::Base(mir::PlaceBase::Local(index)) = *place {\n-            match self.locals[index] {\n-                LocalRef::Operand(Some(o)) => {\n-                    return Some(o);\n-                }\n-                LocalRef::Operand(None) => {\n-                    bug!(\"use of {:?} before def\", place);\n-                }\n-                LocalRef::Place(..) | LocalRef::UnsizedPlace(..) => {\n-                    // use path below\n-                }\n-            }\n-        }\n+        place.iterate(|place_base, place_projection| {\n+            if let mir::PlaceBase::Local(index) = place_base {\n+                match self.locals[*index] {\n+                    LocalRef::Operand(Some(mut o)) => {\n+                        // Moves out of scalar and scalar pair fields are trivial.\n+                        for proj in place_projection {\n+                            match proj.elem {\n+                                mir::ProjectionElem::Field(ref f, _) => {\n+                                    o = o.extract_field(bx, f.index());\n+                                }\n+                                mir::ProjectionElem::Index(_) |\n+                                mir::ProjectionElem::ConstantIndex { .. } => {\n+                                    // ZSTs don't require any actual memory access.\n+                                    // FIXME(eddyb) deduplicate this with the identical\n+                                    // checks in `codegen_consume` and `extract_field`.\n+                                    let elem = o.layout.field(bx.cx(), 0);\n+                                    if elem.is_zst() {\n+                                        o = OperandRef::new_zst(bx, elem);\n+                                    } else {\n+                                        return None;\n+                                    }\n+                                }\n+                                _ => return None,\n+                            }\n+                        }\n \n-        // Moves out of scalar and scalar pair fields are trivial.\n-        if let &mir::Place::Projection(ref proj) = place {\n-            if let Some(o) = self.maybe_codegen_consume_direct(bx, &proj.base) {\n-                match proj.elem {\n-                    mir::ProjectionElem::Field(ref f, _) => {\n-                        return Some(o.extract_field(bx, f.index()));\n+                        Some(o)\n                     }\n-                    mir::ProjectionElem::Index(_) |\n-                    mir::ProjectionElem::ConstantIndex { .. } => {\n-                        // ZSTs don't require any actual memory access.\n-                        // FIXME(eddyb) deduplicate this with the identical\n-                        // checks in `codegen_consume` and `extract_field`.\n-                        let elem = o.layout.field(bx.cx(), 0);\n-                        if elem.is_zst() {\n-                            return Some(OperandRef::new_zst(bx, elem));\n-                        }\n+                    LocalRef::Operand(None) => {\n+                        bug!(\"use of {:?} before def\", place);\n+                    }\n+                    LocalRef::Place(..) | LocalRef::UnsizedPlace(..) => {\n+                        // watch out for locals that do not have an\n+                        // alloca; they are handled somewhat differently\n+                        None\n                     }\n-                    _ => {}\n                 }\n+            } else {\n+                None\n             }\n-        }\n-\n-        None\n+        })\n     }\n \n     pub fn codegen_consume("}]}