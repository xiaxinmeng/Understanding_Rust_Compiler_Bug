{"sha": "8bd79fda87af6aa16b08b67c61a6db58f1e519ad", "node_id": "C_kwDOAAsO6NoAKDhiZDc5ZmRhODdhZjZhYTE2YjA4YjY3YzYxYTZkYjU4ZjFlNTE5YWQ", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-02-10T21:40:12Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-02-10T21:40:12Z"}, "message": "Pass arguments to `x` subcommands with `--`", "tree": {"sha": "d604bd6df53996de642bc6c7d370116a80e2c8cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d604bd6df53996de642bc6c7d370116a80e2c8cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bd79fda87af6aa16b08b67c61a6db58f1e519ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bd79fda87af6aa16b08b67c61a6db58f1e519ad", "html_url": "https://github.com/rust-lang/rust/commit/8bd79fda87af6aa16b08b67c61a6db58f1e519ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bd79fda87af6aa16b08b67c61a6db58f1e519ad/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3574b1a69aebccbafc49096257317bb322c67025", "url": "https://api.github.com/repos/rust-lang/rust/commits/3574b1a69aebccbafc49096257317bb322c67025", "html_url": "https://github.com/rust-lang/rust/commit/3574b1a69aebccbafc49096257317bb322c67025"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "76c7e695bf3e469a942a0c642f6d788a5ea0c61a", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8bd79fda87af6aa16b08b67c61a6db58f1e519ad/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd79fda87af6aa16b08b67c61a6db58f1e519ad/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=8bd79fda87af6aa16b08b67c61a6db58f1e519ad", "patch": "@@ -58,9 +58,10 @@ fn args(builder: &Builder<'_>) -> Vec<String> {\n         clippy_lint_warn.iter().for_each(|v| clippy_lint_levels.push(format!(\"-W{}\", v)));\n         clippy_lint_forbid.iter().for_each(|v| clippy_lint_levels.push(format!(\"-F{}\", v)));\n         args.extend(clippy_lint_levels);\n+        args.extend(builder.config.free_args.clone());\n         args\n     } else {\n-        vec![]\n+        builder.config.free_args.clone()\n     }\n }\n "}, {"sha": "cd027a4abb7faec04f2628af9474c53e814e265e", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8bd79fda87af6aa16b08b67c61a6db58f1e519ad/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd79fda87af6aa16b08b67c61a6db58f1e519ad/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=8bd79fda87af6aa16b08b67c61a6db58f1e519ad", "patch": "@@ -97,6 +97,10 @@ pub struct Config {\n     pub cmd: Subcommand,\n     pub incremental: bool,\n     pub dry_run: DryRun,\n+    /// Arguments appearing after `--` to be forwarded to tools,\n+    /// e.g. `--fix-broken` or test arguments.\n+    pub free_args: Vec<String>,\n+\n     /// `None` if we shouldn't download CI compiler artifacts, or the commit to download if we should.\n     #[cfg(not(test))]\n     download_rustc_commit: Option<String>,\n@@ -866,6 +870,7 @@ impl Config {\n         config.keep_stage = flags.keep_stage;\n         config.keep_stage_std = flags.keep_stage_std;\n         config.color = flags.color;\n+        config.free_args = flags.free_args.clone().unwrap_or_default();\n         if let Some(value) = flags.deny_warnings {\n             config.deny_warnings = value;\n         }"}, {"sha": "f196c6c82b0ac2a30ea7e0aadf0d4ad625b7c30d", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8bd79fda87af6aa16b08b67c61a6db58f1e519ad/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd79fda87af6aa16b08b67c61a6db58f1e519ad/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=8bd79fda87af6aa16b08b67c61a6db58f1e519ad", "patch": "@@ -80,6 +80,10 @@ pub struct Flags {\n     pub llvm_profile_generate: bool,\n     pub llvm_bolt_profile_generate: bool,\n     pub llvm_bolt_profile_use: Option<String>,\n+\n+    /// Arguments appearing after `--` to be forwarded to tools,\n+    /// e.g. `--fix-broken` or test arguments.\n+    pub free_args: Option<Vec<String>>,\n }\n \n #[derive(Debug)]\n@@ -156,6 +160,12 @@ impl Default for Subcommand {\n \n impl Flags {\n     pub fn parse(args: &[String]) -> Flags {\n+        let (args, free_args) = if let Some(pos) = args.iter().position(|s| s == \"--\") {\n+            let (args, free) = args.split_at(pos);\n+            (args, Some(free[1..].to_vec()))\n+        } else {\n+            (args, None)\n+        };\n         let mut subcommand_help = String::from(\n             \"\\\n Usage: x.py <subcommand> [options] [<paths>...]\n@@ -706,6 +716,7 @@ Arguments:\n             llvm_profile_generate: matches.opt_present(\"llvm-profile-generate\"),\n             llvm_bolt_profile_generate: matches.opt_present(\"llvm-bolt-profile-generate\"),\n             llvm_bolt_profile_use: matches.opt_str(\"llvm-bolt-profile-use\"),\n+            free_args,\n         }\n     }\n }"}, {"sha": "e14440f57a8a6a3fa531d36f406e264529a7b8a7", "filename": "src/bootstrap/run.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8bd79fda87af6aa16b08b67c61a6db58f1e519ad/src%2Fbootstrap%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd79fda87af6aa16b08b67c61a6db58f1e519ad/src%2Fbootstrap%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Frun.rs?ref=8bd79fda87af6aa16b08b67c61a6db58f1e519ad", "patch": "@@ -183,6 +183,7 @@ impl Step for Miri {\n         // Forward arguments.\n         miri.arg(\"--\").arg(\"--target\").arg(target.rustc_target_arg());\n         miri.args(builder.config.cmd.args());\n+        miri.args(&builder.config.free_args);\n \n         // miri tests need to know about the stage sysroot\n         miri.env(\"MIRI_SYSROOT\", &miri_sysroot);"}, {"sha": "b91efc320607a2b2bf26086b80133dae8b65efc1", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8bd79fda87af6aa16b08b67c61a6db58f1e519ad/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd79fda87af6aa16b08b67c61a6db58f1e519ad/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=8bd79fda87af6aa16b08b67c61a6db58f1e519ad", "patch": "@@ -1584,6 +1584,7 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n             .collect();\n \n         test_args.append(&mut builder.config.cmd.test_args());\n+        test_args.extend(builder.config.free_args.iter().map(|s| s.as_str()));\n \n         // On Windows, replace forward slashes in test-args by backslashes\n         // so the correct filters are passed to libtest"}]}