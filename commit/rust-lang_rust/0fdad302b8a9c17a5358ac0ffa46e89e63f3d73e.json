{"sha": "0fdad302b8a9c17a5358ac0ffa46e89e63f3d73e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmZGFkMzAyYjhhOWMxN2E1MzU4YWMwZmZhNDZlODllNjNmM2Q3M2U=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-14T16:41:08Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-14T16:41:08Z"}, "message": "Fix ret/put mis-identification in typechecker. Closes #87.", "tree": {"sha": "9492c44bc7a0f757f86a40ded00d304e71ecef77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9492c44bc7a0f757f86a40ded00d304e71ecef77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fdad302b8a9c17a5358ac0ffa46e89e63f3d73e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fdad302b8a9c17a5358ac0ffa46e89e63f3d73e", "html_url": "https://github.com/rust-lang/rust/commit/0fdad302b8a9c17a5358ac0ffa46e89e63f3d73e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fdad302b8a9c17a5358ac0ffa46e89e63f3d73e/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "777002c565bf9d9f8d025072110efea0baf5c2e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/777002c565bf9d9f8d025072110efea0baf5c2e7", "html_url": "https://github.com/rust-lang/rust/commit/777002c565bf9d9f8d025072110efea0baf5c2e7"}], "stats": {"total": 54, "additions": 48, "deletions": 6}, "files": [{"sha": "4727abd0da0ebb274ea9ce6db11cc3dcbb6d607f", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0fdad302b8a9c17a5358ac0ffa46e89e63f3d73e/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/0fdad302b8a9c17a5358ac0ffa46e89e63f3d73e/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=0fdad302b8a9c17a5358ac0ffa46e89e63f3d73e", "patch": "@@ -216,6 +216,20 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n   in\n \n   let retval_tvs = Stack.create () in\n+  let fns = Stack.create () in\n+\n+  let push_fn fn =\n+    Stack.push fn fns\n+  in\n+\n+  let pop_fn _ =\n+    ignore (Stack.pop fns)\n+  in\n+\n+  let fn_is_iter() =\n+    (Stack.top fns).Ast.fn_aux.Ast.fn_is_iter\n+  in\n+\n   let push_retval_tv tv =\n     Stack.push tv retval_tvs\n   in\n@@ -1215,13 +1229,27 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n         | Ast.STMT_if { Ast.if_test = if_test } ->\n             unify_expr rval_ctx if_test (ty Ast.TY_bool);\n \n-        | Ast.STMT_ret atom_opt\n-        | Ast.STMT_put atom_opt ->\n+        | Ast.STMT_ret atom_opt ->\n             begin\n+              if fn_is_iter()\n+              then\n+                match atom_opt with\n+                  | None -> ()\n+                  | Some _ -> err None \"Iter returning value\"\n+              else\n+                match atom_opt with\n+                  | None -> unify_ty arg_pass_ctx Ast.TY_nil (retval_tv())\n+                  | Some atom -> unify_atom arg_pass_ctx atom (retval_tv())\n+            end\n+\n+        | Ast.STMT_put atom_opt ->\n+            if fn_is_iter()\n+            then\n               match atom_opt with\n-                  None -> unify_ty arg_pass_ctx Ast.TY_nil (retval_tv())\n+                | None -> unify_ty arg_pass_ctx Ast.TY_nil (retval_tv())\n                 | Some atom -> unify_atom arg_pass_ctx atom (retval_tv())\n-            end\n+            else\n+              err None \"Non-iter function with 'put'\"\n \n         | Ast.STMT_be (callee, args) ->\n             check_callable (retval_tv()) callee args\n@@ -1344,19 +1372,25 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n     in\n \n     let enter_fn fn retspec =\n+      push_fn fn;\n       let out = fn.Ast.fn_output_slot in\n         push_retval_tv (ref retspec);\n         unify_slot arg_pass_ctx out.node (Some out.id) (retval_tv())\n     in\n \n+    let leave_fn _ =\n+      pop_retval_tv ();\n+      pop_fn ();\n+    in\n+\n     let visit_obj_fn_pre obj ident fn =\n       enter_fn fn.node TYSPEC_all;\n       inner.Walk.visit_obj_fn_pre obj ident fn\n     in\n \n     let visit_obj_fn_post obj ident fn =\n       inner.Walk.visit_obj_fn_post obj ident fn;\n-      pop_retval_tv ();\n+      leave_fn ();\n     in\n \n     let visit_mod_item_pre n p mod_item =\n@@ -1382,7 +1416,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n       match mod_item.node.Ast.decl_item with\n \n         | Ast.MOD_ITEM_fn _ ->\n-            pop_retval_tv ();\n+            leave_fn ();\n             if (Some (path_name())) = cx.ctxt_main_name\n             then\n               begin"}, {"sha": "bb6363aca575a131f22d3689b4d3c7cd2be82638", "filename": "src/test/compile-fail/put-in-fn.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0fdad302b8a9c17a5358ac0ffa46e89e63f3d73e/src%2Ftest%2Fcompile-fail%2Fput-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fdad302b8a9c17a5358ac0ffa46e89e63f3d73e/src%2Ftest%2Fcompile-fail%2Fput-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fput-in-fn.rs?ref=0fdad302b8a9c17a5358ac0ffa46e89e63f3d73e", "patch": "@@ -0,0 +1,8 @@\n+// error-pattern: Non-iter function\n+\n+fn f() -> int {\n+  put 10;\n+}\n+\n+fn main() {\n+}\n\\ No newline at end of file"}]}