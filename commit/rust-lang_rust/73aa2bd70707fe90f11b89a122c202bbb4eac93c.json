{"sha": "73aa2bd70707fe90f11b89a122c202bbb4eac93c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczYWEyYmQ3MDcwN2ZlOTBmMTFiODlhMTIyYzIwMmJiYjRlYWM5M2M=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-10-02T06:06:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-02T06:06:19Z"}, "message": "Rollup merge of #64942 - JohnTitor:fix-clippy, r=eddyb\n\nFix clippy warnings\n\n* Use `match` instead of `if` chain\n* Remove redundant `into_iter()`\n* Use `copied()` instead of `map()`\n\netc.", "tree": {"sha": "6ee019b419d2a103156a9ca9ca4d8d9137d0bdbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ee019b419d2a103156a9ca9ca4d8d9137d0bdbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73aa2bd70707fe90f11b89a122c202bbb4eac93c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdlD5bCRBK7hj4Ov3rIwAAdHIIAAIZBOvrQkc6U8gSjZl1IWo+\nLKOx37+1OEl+iGUq1O3swnC/2oOg2bCGHEdhY+K5JJUxSsdXsno2udfJYUhAI/+j\nRAl2kD5UI+O4YXgLKQ1kLKh6BEJgimEONfp6lNbN/zioRbJn2+mUvwdtYuEwsImj\nFNGOOF7FShWviU2VJgp1IGOGryZYzUbvXz1QeacMmyueJbpNuGzNnFwu6cxtGBOX\nn0oSzlh4nZkirxIrWc00z4ckpOv7EPkkrj5nk7WxOZNSKGp+WhtJD3d2rmcCro90\nmiyiqXNhAgYOQqYZeXK8+g747L4K3AK1iQQDoBlWNDsuxfmsuAE06vXpn7jRnJk=\n=Vyx3\n-----END PGP SIGNATURE-----\n", "payload": "tree 6ee019b419d2a103156a9ca9ca4d8d9137d0bdbb\nparent 76fb91be84e93f6d34a428d997e92fcbf4a19f23\nparent f10d2e2d23e6a47bb7d3df17d4fbe067f8c99ea9\nauthor Tyler Mandry <tmandry@gmail.com> 1569996379 -0700\ncommitter GitHub <noreply@github.com> 1569996379 -0700\n\nRollup merge of #64942 - JohnTitor:fix-clippy, r=eddyb\n\nFix clippy warnings\n\n* Use `match` instead of `if` chain\n* Remove redundant `into_iter()`\n* Use `copied()` instead of `map()`\n\netc.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73aa2bd70707fe90f11b89a122c202bbb4eac93c", "html_url": "https://github.com/rust-lang/rust/commit/73aa2bd70707fe90f11b89a122c202bbb4eac93c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73aa2bd70707fe90f11b89a122c202bbb4eac93c/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76fb91be84e93f6d34a428d997e92fcbf4a19f23", "url": "https://api.github.com/repos/rust-lang/rust/commits/76fb91be84e93f6d34a428d997e92fcbf4a19f23", "html_url": "https://github.com/rust-lang/rust/commit/76fb91be84e93f6d34a428d997e92fcbf4a19f23"}, {"sha": "f10d2e2d23e6a47bb7d3df17d4fbe067f8c99ea9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f10d2e2d23e6a47bb7d3df17d4fbe067f8c99ea9", "html_url": "https://github.com/rust-lang/rust/commit/f10d2e2d23e6a47bb7d3df17d4fbe067f8c99ea9"}], "stats": {"total": 33, "additions": 16, "deletions": 17}, "files": [{"sha": "66d27a275192e69e16c9b292387f5f60df69b591", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73aa2bd70707fe90f11b89a122c202bbb4eac93c/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73aa2bd70707fe90f11b89a122c202bbb4eac93c/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=73aa2bd70707fe90f11b89a122c202bbb4eac93c", "patch": "@@ -500,7 +500,7 @@ impl DroplessArena {\n                 // though it was supposed to give us `len`\n                 return slice::from_raw_parts_mut(mem, i);\n             }\n-            ptr::write(mem.offset(i as isize), value.unwrap());\n+            ptr::write(mem.add(i), value.unwrap());\n             i += 1;\n         }\n     }"}, {"sha": "4abb86a5251a5e997e915f1d904a0dbeaa9b72d4", "filename": "src/librustc_apfloat/ieee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73aa2bd70707fe90f11b89a122c202bbb4eac93c/src%2Flibrustc_apfloat%2Fieee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73aa2bd70707fe90f11b89a122c202bbb4eac93c/src%2Flibrustc_apfloat%2Fieee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Fieee.rs?ref=73aa2bd70707fe90f11b89a122c202bbb4eac93c", "patch": "@@ -1199,8 +1199,8 @@ impl<S: Semantics> Float for IeeeFloat<S> {\n         }\n \n         // Handle a leading minus sign.\n-        let minus = s.starts_with(\"-\");\n-        if minus || s.starts_with(\"+\") {\n+        let minus = s.starts_with('-');\n+        if minus || s.starts_with('+') {\n             s = &s[1..];\n             if s.is_empty() {\n                 return Err(ParseError(\"String has no digits\"));"}, {"sha": "c438a8558a7045f375e3c9b3fd1c1556c63718bd", "filename": "src/librustc_data_structures/graph/implementation/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73aa2bd70707fe90f11b89a122c202bbb4eac93c/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73aa2bd70707fe90f11b89a122c202bbb4eac93c/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Fmod.rs?ref=73aa2bd70707fe90f11b89a122c202bbb4eac93c", "patch": "@@ -303,11 +303,11 @@ pub struct AdjacentEdges<'g, N, E> {\n \n impl<'g, N: Debug, E: Debug> AdjacentEdges<'g, N, E> {\n     fn targets(self) -> impl Iterator<Item = NodeIndex> + 'g {\n-        self.into_iter().map(|(_, edge)| edge.target)\n+        self.map(|(_, edge)| edge.target)\n     }\n \n     fn sources(self) -> impl Iterator<Item = NodeIndex> + 'g {\n-        self.into_iter().map(|(_, edge)| edge.source)\n+        self.map(|(_, edge)| edge.source)\n     }\n }\n "}, {"sha": "8c49e0dde0dcd3729468d4fa4a8e23f3f1a82db6", "filename": "src/librustc_index/bit_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73aa2bd70707fe90f11b89a122c202bbb4eac93c/src%2Flibrustc_index%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73aa2bd70707fe90f11b89a122c202bbb4eac93c/src%2Flibrustc_index%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_index%2Fbit_set.rs?ref=73aa2bd70707fe90f11b89a122c202bbb4eac93c", "patch": "@@ -621,7 +621,7 @@ impl<'a, T: Idx> Iterator for HybridIter<'a, T> {\n \n     fn next(&mut self) -> Option<T> {\n         match self {\n-            HybridIter::Sparse(sparse) => sparse.next().map(|e| *e),\n+            HybridIter::Sparse(sparse) => sparse.next().copied(),\n             HybridIter::Dense(dense) => dense.next(),\n         }\n     }"}, {"sha": "d2e360f5e20fd972cb5baa1b521ca1df2de664c8", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/73aa2bd70707fe90f11b89a122c202bbb4eac93c/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73aa2bd70707fe90f11b89a122c202bbb4eac93c/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=73aa2bd70707fe90f11b89a122c202bbb4eac93c", "patch": "@@ -1053,12 +1053,12 @@ impl Json {\n     /// a value associated with the provided key is found. If no value is found\n     /// or the Json value is not an Object, returns `None`.\n     pub fn search(&self, key: &str) -> Option<&Json> {\n-        match self {\n-            &Json::Object(ref map) => {\n+        match *self {\n+            Json::Object(ref map) => {\n                 match map.get(key) {\n                     Some(json_value) => Some(json_value),\n                     None => {\n-                        for (_, v) in map {\n+                        for v in map.values() {\n                             match v.search(key) {\n                                 x if x.is_some() => return x,\n                                 _ => ()\n@@ -1487,12 +1487,12 @@ impl<T: Iterator<Item=char>> Parser<T> {\n     }\n \n     fn parse_number(&mut self) -> JsonEvent {\n-        let mut neg = false;\n-\n-        if self.ch_is('-') {\n+        let neg = if self.ch_is('-') {\n             self.bump();\n-            neg = true;\n-        }\n+            true\n+        } else {\n+            false\n+        };\n \n         let res = match self.parse_u64() {\n             Ok(res) => res,\n@@ -2162,10 +2162,9 @@ impl crate::Decoder for Decoder {\n         let s = self.read_str()?;\n         {\n             let mut it = s.chars();\n-            match (it.next(), it.next()) {\n+            if let (Some(c), None) = (it.next(), it.next()) {\n                 // exactly one character\n-                (Some(c), None) => return Ok(c),\n-                _ => ()\n+                return Ok(c);\n             }\n         }\n         Err(ExpectedError(\"single character string\".to_owned(), s.to_string()))"}]}