{"sha": "4bf32eea21d1bbf268951f7f30b1356485bd547b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiZjMyZWVhMjFkMWJiZjI2ODk1MWY3ZjMwYjEzNTY0ODViZDU0N2I=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-10T15:53:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-10T15:53:06Z"}, "message": "Merge #8457\n\n8457: Implement more precise binary op return type heuristic r=flodiebold a=Veykril\n\nShould fix #7150\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "403e5a74843cdc8e2c7af1608093dfa31401f86d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/403e5a74843cdc8e2c7af1608093dfa31401f86d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bf32eea21d1bbf268951f7f30b1356485bd547b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgccniCRBK7hj4Ov3rIwAAdHIIAJroGOZw/2Ud02i0gGIz6wzI\nvejgwRjswwwAPFz1egn4bt62mzQmxs0hdFHiy6gz+Kl7ffiYIOmdJLsPObTxoY8p\n2oZWy1EKfrymOpCEOlxOrGpjMUDdztj8Tm9oFxmWnoT/QV4Jlx9WZVK7QfF/AtMO\nCT6sifDmNunXq3NV06wIUcbCf0DLvKD4H0bLIbKh/9npn3x5K672b+6YRjuJgHDH\neooqv8IYsOg/ZlbYkqEG495RgYVF5Io1WxoJrUmMnKVjY2o/7SN6XSUrnOjoeVHl\n1B2cVINXFATMYTuYBXm3kJTPtVqzCrhP8piAWoRdeO7XUOT1Oof76FILCK0LkN0=\n=XuXI\n-----END PGP SIGNATURE-----\n", "payload": "tree 403e5a74843cdc8e2c7af1608093dfa31401f86d\nparent 0fac165052e7686af1e9cee509e049eb8f2ac5b4\nparent a15b8136ee3cac8426fa12934f725b161668e9e8\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1618069986 +0000\ncommitter GitHub <noreply@github.com> 1618069986 +0000\n\nMerge #8457\n\n8457: Implement more precise binary op return type heuristic r=flodiebold a=Veykril\n\nShould fix #7150\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bf32eea21d1bbf268951f7f30b1356485bd547b", "html_url": "https://github.com/rust-lang/rust/commit/4bf32eea21d1bbf268951f7f30b1356485bd547b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bf32eea21d1bbf268951f7f30b1356485bd547b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fac165052e7686af1e9cee509e049eb8f2ac5b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fac165052e7686af1e9cee509e049eb8f2ac5b4", "html_url": "https://github.com/rust-lang/rust/commit/0fac165052e7686af1e9cee509e049eb8f2ac5b4"}, {"sha": "a15b8136ee3cac8426fa12934f725b161668e9e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a15b8136ee3cac8426fa12934f725b161668e9e8", "html_url": "https://github.com/rust-lang/rust/commit/a15b8136ee3cac8426fa12934f725b161668e9e8"}], "stats": {"total": 171, "additions": 139, "deletions": 32}, "files": [{"sha": "0222de2bc21012aef9290bfde6cf5e2af7ae7df7", "filename": "crates/hir_ty/src/op.rs", "status": "modified", "additions": 46, "deletions": 12, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/4bf32eea21d1bbf268951f7f30b1356485bd547b/crates%2Fhir_ty%2Fsrc%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bf32eea21d1bbf268951f7f30b1356485bd547b/crates%2Fhir_ty%2Fsrc%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fop.rs?ref=4bf32eea21d1bbf268951f7f30b1356485bd547b", "patch": "@@ -9,21 +9,55 @@ pub(super) fn binary_op_return_ty(op: BinaryOp, lhs_ty: Ty, rhs_ty: Ty) -> Ty {\n         BinaryOp::LogicOp(_) | BinaryOp::CmpOp(_) => TyKind::Scalar(Scalar::Bool).intern(&Interner),\n         BinaryOp::Assignment { .. } => TyBuilder::unit(),\n         BinaryOp::ArithOp(ArithOp::Shl) | BinaryOp::ArithOp(ArithOp::Shr) => {\n-            match lhs_ty.kind(&Interner) {\n+            // all integer combinations are valid here\n+            if matches!(\n+                lhs_ty.kind(&Interner),\n                 TyKind::Scalar(Scalar::Int(_))\n-                | TyKind::Scalar(Scalar::Uint(_))\n-                | TyKind::Scalar(Scalar::Float(_)) => lhs_ty,\n-                TyKind::InferenceVar(_, TyVariableKind::Integer)\n-                | TyKind::InferenceVar(_, TyVariableKind::Float) => lhs_ty,\n-                _ => TyKind::Error.intern(&Interner),\n+                    | TyKind::Scalar(Scalar::Uint(_))\n+                    | TyKind::InferenceVar(_, TyVariableKind::Integer)\n+            ) && matches!(\n+                rhs_ty.kind(&Interner),\n+                TyKind::Scalar(Scalar::Int(_))\n+                    | TyKind::Scalar(Scalar::Uint(_))\n+                    | TyKind::InferenceVar(_, TyVariableKind::Integer)\n+            ) {\n+                lhs_ty\n+            } else {\n+                TyKind::Error.intern(&Interner)\n             }\n         }\n-        BinaryOp::ArithOp(_) => match rhs_ty.kind(&Interner) {\n-            TyKind::Scalar(Scalar::Int(_))\n-            | TyKind::Scalar(Scalar::Uint(_))\n-            | TyKind::Scalar(Scalar::Float(_)) => rhs_ty,\n-            TyKind::InferenceVar(_, TyVariableKind::Integer)\n-            | TyKind::InferenceVar(_, TyVariableKind::Float) => rhs_ty,\n+        BinaryOp::ArithOp(_) => match (lhs_ty.kind(&Interner), rhs_ty.kind(&Interner)) {\n+            // (int, int) | (uint, uint) | (float, float)\n+            (TyKind::Scalar(Scalar::Int(_)), TyKind::Scalar(Scalar::Int(_)))\n+            | (TyKind::Scalar(Scalar::Uint(_)), TyKind::Scalar(Scalar::Uint(_)))\n+            | (TyKind::Scalar(Scalar::Float(_)), TyKind::Scalar(Scalar::Float(_))) => rhs_ty,\n+            // ({int}, int) | ({int}, uint)\n+            (TyKind::InferenceVar(_, TyVariableKind::Integer), TyKind::Scalar(Scalar::Int(_)))\n+            | (TyKind::InferenceVar(_, TyVariableKind::Integer), TyKind::Scalar(Scalar::Uint(_))) => {\n+                rhs_ty\n+            }\n+            // (int, {int}) | (uint, {int})\n+            (TyKind::Scalar(Scalar::Int(_)), TyKind::InferenceVar(_, TyVariableKind::Integer))\n+            | (TyKind::Scalar(Scalar::Uint(_)), TyKind::InferenceVar(_, TyVariableKind::Integer)) => {\n+                lhs_ty\n+            }\n+            // ({float} | float)\n+            (TyKind::InferenceVar(_, TyVariableKind::Float), TyKind::Scalar(Scalar::Float(_))) => {\n+                rhs_ty\n+            }\n+            // (float, {float})\n+            (TyKind::Scalar(Scalar::Float(_)), TyKind::InferenceVar(_, TyVariableKind::Float)) => {\n+                lhs_ty\n+            }\n+            // ({int}, {int}) | ({float}, {float})\n+            (\n+                TyKind::InferenceVar(_, TyVariableKind::Integer),\n+                TyKind::InferenceVar(_, TyVariableKind::Integer),\n+            )\n+            | (\n+                TyKind::InferenceVar(_, TyVariableKind::Float),\n+                TyKind::InferenceVar(_, TyVariableKind::Float),\n+            ) => rhs_ty,\n             _ => TyKind::Error.intern(&Interner),\n         },\n     }"}, {"sha": "1879dbc783f0f44d3ad0224fa4abb8e90fad7c4a", "filename": "crates/hir_ty/src/tests/traits.rs", "status": "modified", "additions": 93, "deletions": 20, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/4bf32eea21d1bbf268951f7f30b1356485bd547b/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bf32eea21d1bbf268951f7f30b1356485bd547b/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=4bf32eea21d1bbf268951f7f30b1356485bd547b", "patch": "@@ -1919,10 +1919,26 @@ fn closure_1() {\n fn closure_2() {\n     check_infer_with_mismatches(\n         r#\"\n+        #[lang = \"add\"]\n+        pub trait Add<Rhs = Self> {\n+            type Output;\n+            fn add(self, rhs: Rhs) -> Self::Output;\n+        }\n+\n         trait FnOnce<Args> {\n             type Output;\n         }\n \n+        impl Add for u64 {\n+            type Output = Self;\n+            fn add(self, rhs: u64) -> Self::Output {0}\n+        }\n+\n+        impl Add for u128 {\n+            type Output = Self;\n+            fn add(self, rhs: u128) -> Self::Output {0}\n+        }\n+\n         fn test<F: FnOnce(u32) -> u64>(f: F) {\n             f(1);\n             let g = |v| v + 1;\n@@ -1931,26 +1947,36 @@ fn closure_2() {\n         }\n         \"#,\n         expect![[r#\"\n-            72..73 'f': F\n-            78..154 '{     ...+ v; }': ()\n-            84..85 'f': F\n-            84..88 'f(1)': {unknown}\n-            86..87 '1': i32\n-            98..99 'g': |u64| -> i32\n-            102..111 '|v| v + 1': |u64| -> i32\n-            103..104 'v': u64\n-            106..107 'v': u64\n-            106..111 'v + 1': i32\n-            110..111 '1': i32\n-            117..118 'g': |u64| -> i32\n-            117..124 'g(1u64)': i32\n-            119..123 '1u64': u64\n-            134..135 'h': |u128| -> u128\n-            138..151 '|v| 1u128 + v': |u128| -> u128\n-            139..140 'v': u128\n-            142..147 '1u128': u128\n-            142..151 '1u128 + v': u128\n-            150..151 'v': u128\n+            72..76 'self': Self\n+            78..81 'rhs': Rhs\n+            203..207 'self': u64\n+            209..212 'rhs': u64\n+            235..238 '{0}': u64\n+            236..237 '0': u64\n+            297..301 'self': u128\n+            303..306 'rhs': u128\n+            330..333 '{0}': u128\n+            331..332 '0': u128\n+            368..369 'f': F\n+            374..450 '{     ...+ v; }': ()\n+            380..381 'f': F\n+            380..384 'f(1)': {unknown}\n+            382..383 '1': i32\n+            394..395 'g': |u64| -> u64\n+            398..407 '|v| v + 1': |u64| -> u64\n+            399..400 'v': u64\n+            402..403 'v': u64\n+            402..407 'v + 1': u64\n+            406..407 '1': u64\n+            413..414 'g': |u64| -> u64\n+            413..420 'g(1u64)': u64\n+            415..419 '1u64': u64\n+            430..431 'h': |u128| -> u128\n+            434..447 '|v| 1u128 + v': |u128| -> u128\n+            435..436 'v': u128\n+            438..443 '1u128': u128\n+            438..447 '1u128 + v': u128\n+            446..447 'v': u128\n         \"#]],\n     );\n }\n@@ -3443,3 +3469,50 @@ pub trait Deserialize {\n     \"#,\n     );\n }\n+\n+#[test]\n+fn bin_op_adt_with_rhs_primitive() {\n+    check_infer_with_mismatches(\n+        r#\"\n+#[lang = \"add\"]\n+pub trait Add<Rhs = Self> {\n+    type Output;\n+    fn add(self, rhs: Rhs) -> Self::Output;\n+}\n+\n+struct Wrapper(u32);\n+impl Add<u32> for Wrapper {\n+    type Output = Self;\n+    fn add(self, rhs: u32) -> Wrapper {\n+        Wrapper(rhs)\n+    }\n+}\n+fn main(){\n+    let wrapped = Wrapper(10);\n+    let num: u32 = 2;\n+    let res = wrapped + num;\n+\n+}\"#,\n+        expect![[r#\"\n+            72..76 'self': Self\n+            78..81 'rhs': Rhs\n+            192..196 'self': Wrapper\n+            198..201 'rhs': u32\n+            219..247 '{     ...     }': Wrapper\n+            229..236 'Wrapper': Wrapper(u32) -> Wrapper\n+            229..241 'Wrapper(rhs)': Wrapper\n+            237..240 'rhs': u32\n+            259..345 '{     ...um;  }': ()\n+            269..276 'wrapped': Wrapper\n+            279..286 'Wrapper': Wrapper(u32) -> Wrapper\n+            279..290 'Wrapper(10)': Wrapper\n+            287..289 '10': u32\n+            300..303 'num': u32\n+            311..312 '2': u32\n+            322..325 'res': Wrapper\n+            328..335 'wrapped': Wrapper\n+            328..341 'wrapped + num': Wrapper\n+            338..341 'num': u32\n+        \"#]],\n+    )\n+}"}]}