{"sha": "9096269610fcfc5cdc719dbe7d817de4cbb75201", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwOTYyNjk2MTBmY2ZjNWNkYzcxOWRiZTdkODE3ZGU0Y2JiNzUyMDE=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2018-11-20T13:06:29Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2018-11-27T14:29:23Z"}, "message": "Add Applicability::Unspecified to span_lint_and_sugg functions", "tree": {"sha": "5da45bfe0275527c9107cd1d60dd04a1162875ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5da45bfe0275527c9107cd1d60dd04a1162875ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9096269610fcfc5cdc719dbe7d817de4cbb75201", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE46kBTF5vnyuSPg0W6OiXpYcOQcIFAlv9VMMACgkQ6OiXpYcO\nQcIBIw//WXsEpBjWPzQB9C3KObNuvIq7lRg+HQLbIcrgQ1KliJwuNO17jQvqF+cf\nBF2dJIsafkfUqiVCGl4qJvzur2Dyym6jv0F44DJQzlp9AncR2n9jYvtfqqV1XX73\n1wZ+DVvCqdfdAd+d+uMmRq6K6EzZsfMYhK4XlwYyCjgYZEoAgkMFHksWd3kzeM+i\nBxklugsx00t126r1LX5OUPlwcdB0EQrwn693L8SATkdKnItq/99Ms2YUeZZtm0jU\nCoNxIU4vX52ir/qLiWoB/J453GPwBaEE1gOgbv4tKO6J+pL3OADYr8tbyizKQWBZ\nU75fcjzMMM3m6kHpIKLjK9jyhqoMGe1JuEdhb62v3Ot/Ql11OfVqHdMrlJvIHPa/\n1cRYP1m9EeD4+/0CT50seXorMWzEYiibpWS8n6LtO+dxqGRoOb8F9lHBqxQj4/c7\n6E5gFvN0sNpzAIytLvnRy8m7CaWUi/jTcxuv7L/JNJ6MqmhAOPohxlkAasZ8H5KD\nllJdy4+5MV92bBei6graqYV4JPUwlvzcPuaUH5/RfC1Q9Hv8yqkSuAv/VrF/IPK3\nCBB32qXjO0vFFjJvTbfl5EUjvX/3FbHbsV5yUcMSxV42Xixv3P8WRyhXIoBc8C/i\nReTLY1aifpyPrVbxY3p3tztPA+EMA1CI8Rk5pdeMTM9cjMNM6SI=\n=fhlK\n-----END PGP SIGNATURE-----", "payload": "tree 5da45bfe0275527c9107cd1d60dd04a1162875ba\nparent fad267c3b32895999f464c640d603f923fa0eeba\nauthor flip1995 <hello@philkrones.com> 1542719189 +0100\ncommitter flip1995 <hello@philkrones.com> 1543328963 +0100\n\nAdd Applicability::Unspecified to span_lint_and_sugg functions\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9096269610fcfc5cdc719dbe7d817de4cbb75201", "html_url": "https://github.com/rust-lang/rust/commit/9096269610fcfc5cdc719dbe7d817de4cbb75201", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9096269610fcfc5cdc719dbe7d817de4cbb75201/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fad267c3b32895999f464c640d603f923fa0eeba", "url": "https://api.github.com/repos/rust-lang/rust/commits/fad267c3b32895999f464c640d603f923fa0eeba", "html_url": "https://github.com/rust-lang/rust/commit/fad267c3b32895999f464c640d603f923fa0eeba"}], "stats": {"total": 302, "additions": 204, "deletions": 98}, "files": [{"sha": "19306b81e4adbdf4d14e3e01f58a2c3387e413bd", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=9096269610fcfc5cdc719dbe7d817de4cbb75201", "patch": "@@ -532,6 +532,7 @@ impl EarlyLintPass for CfgAttrPass {\n                     \"`cfg_attr` is deprecated for rustfmt and got replaced by tool_attributes\",\n                     \"use\",\n                     format!(\"{}rustfmt::skip]\", attr_style),\n+                    Applicability::Unspecified,\n                 );\n             }\n         }"}, {"sha": "1e738b9afa1e4287707b2f4f24501546782fc0db", "filename": "clippy_lints/src/bytecount.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbytecount.rs?ref=9096269610fcfc5cdc719dbe7d817de4cbb75201", "patch": "@@ -10,12 +10,14 @@\n \n use crate::rustc::hir::*;\n use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use if_chain::if_chain;\n use crate::rustc::ty;\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc_errors::Applicability;\n use crate::syntax::ast::{Name, UintTy};\n-use crate::utils::{contains_name, get_pat_name, match_type, paths, single_segment_path, snippet, span_lint_and_sugg,\n-            walk_ptrs_ty};\n+use crate::utils::{\n+    contains_name, get_pat_name, match_type, paths, single_segment_path, snippet, span_lint_and_sugg, walk_ptrs_ty,\n+};\n+use if_chain::if_chain;\n \n /// **What it does:** Checks for naive byte counts\n ///\n@@ -89,14 +91,17 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ByteCount {\n                         } else {\n                             &filter_args[0]\n                         };\n-                        span_lint_and_sugg(cx,\n-                                           NAIVE_BYTECOUNT,\n-                                           expr.span,\n-                                           \"You appear to be counting bytes the naive way\",\n-                                           \"Consider using the bytecount crate\",\n-                                           format!(\"bytecount::count({}, {})\",\n-                                                    snippet(cx, haystack.span, \"..\"),\n-                                                    snippet(cx, needle.span, \"..\")));\n+                        span_lint_and_sugg(\n+                            cx,\n+                            NAIVE_BYTECOUNT,\n+                            expr.span,\n+                            \"You appear to be counting bytes the naive way\",\n+                            \"Consider using the bytecount crate\",\n+                            format!(\"bytecount::count({}, {})\",\n+                                    snippet(cx, haystack.span, \"..\"),\n+                                    snippet(cx, needle.span, \"..\")),\n+                            Applicability::Unspecified,\n+                        );\n                     }\n                 };\n             }"}, {"sha": "2699ec0e7fdd7503d860eef1d217e746627e4288", "filename": "clippy_lints/src/collapsible_if.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_if.rs?ref=9096269610fcfc5cdc719dbe7d817de4cbb75201", "patch": "@@ -128,12 +128,15 @@ fn check_collapsible_maybe_if_let(cx: &EarlyContext<'_>, else_: &ast::Expr) {\n         then {\n             match else_.node {\n                 ast::ExprKind::If(..) | ast::ExprKind::IfLet(..) => {\n-                    span_lint_and_sugg(cx,\n-                                       COLLAPSIBLE_IF,\n-                                       block.span,\n-                                       \"this `else { if .. }` block can be collapsed\",\n-                                       \"try\",\n-                                       snippet_block(cx, else_.span, \"..\").into_owned());\n+                    span_lint_and_sugg(\n+                        cx,\n+                        COLLAPSIBLE_IF,\n+                        block.span,\n+                        \"this `else { if .. }` block can be collapsed\",\n+                        \"try\",\n+                        snippet_block(cx, else_.span, \"..\").into_owned(),\n+                        Applicability::Unspecified,\n+                    );\n                 }\n                 _ => (),\n             }"}, {"sha": "17dccf2adfbf50910a00a804d7622b3311cd14c6", "filename": "clippy_lints/src/default_trait_access.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_trait_access.rs?ref=9096269610fcfc5cdc719dbe7d817de4cbb75201", "patch": "@@ -10,9 +10,10 @@\n \n use crate::rustc::hir::*;\n use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::ty::TyKind;\n use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc_errors::Applicability;\n use if_chain::if_chain;\n-use crate::rustc::ty::TyKind;\n \n use crate::utils::{any_parent_is_automatically_derived, match_def_path, opt_def_id, paths, span_lint_and_sugg};\n \n@@ -80,7 +81,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DefaultTraitAccess {\n                                 expr.span,\n                                 &format!(\"Calling {} is more clear than this expression\", replacement),\n                                 \"try\",\n-                                replacement);\n+                                replacement,\n+                                Applicability::Unspecified,\n+                            );\n                          }\n                     },\n                     QPath::TypeRelative(..) => {},"}, {"sha": "f4c340538a7ce0b324a4c0ada7171a2d4ca4489f", "filename": "clippy_lints/src/double_comparison.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdouble_comparison.rs?ref=9096269610fcfc5cdc719dbe7d817de4cbb75201", "patch": "@@ -13,6 +13,7 @@\n use crate::rustc::hir::*;\n use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc_errors::Applicability;\n use crate::syntax::source_map::Span;\n \n use crate::utils::{snippet, span_lint_and_sugg, SpanlessEq};\n@@ -73,9 +74,15 @@ impl<'a, 'tcx> Pass {\n                 let lhs_str = snippet(cx, llhs.span, \"\");\n                 let rhs_str = snippet(cx, lrhs.span, \"\");\n                 let sugg = format!(\"{} {} {}\", lhs_str, stringify!($op), rhs_str);\n-                span_lint_and_sugg(cx, DOUBLE_COMPARISONS, span,\n-                                   \"This binary expression can be simplified\",\n-                                   \"try\", sugg);\n+                span_lint_and_sugg(\n+                    cx,\n+                    DOUBLE_COMPARISONS,\n+                    span,\n+                    \"This binary expression can be simplified\",\n+                    \"try\",\n+                    sugg,\n+                    Applicability::Unspecified,\n+                );\n             }}\n         }\n         match (op, lkind, rkind) {"}, {"sha": "5752968c1a22c185071df0152ed576cdb921cc0b", "filename": "clippy_lints/src/duration_subsec.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fduration_subsec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fduration_subsec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fduration_subsec.rs?ref=9096269610fcfc5cdc719dbe7d817de4cbb75201", "patch": "@@ -11,8 +11,9 @@\n use crate::rustc::hir::*;\n use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use crate::rustc::{declare_tool_lint, lint_array};\n-use if_chain::if_chain;\n+use crate::rustc_errors::Applicability;\n use crate::syntax::source_map::Spanned;\n+use if_chain::if_chain;\n \n use crate::consts::{constant, Constant};\n use crate::utils::paths;\n@@ -67,6 +68,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DurationSubsec {\n                     &format!(\"Calling `{}()` is more concise than this calculation\", suggested_fn),\n                     \"try\",\n                     format!(\"{}.{}()\", snippet(cx, args[0].span, \"_\"), suggested_fn),\n+                    Applicability::Unspecified,\n                 );\n             }\n         }"}, {"sha": "99031dd28872418dbf2c3bb707b8cdfc3d6a3bfc", "filename": "clippy_lints/src/else_if_without_else.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Felse_if_without_else.rs?ref=9096269610fcfc5cdc719dbe7d817de4cbb75201", "patch": "@@ -12,6 +12,7 @@\n \n use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass, in_external_macro, LintContext};\n use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc_errors::Applicability;\n use crate::syntax::ast::*;\n \n use crate::utils::span_lint_and_sugg;\n@@ -72,7 +73,8 @@ impl EarlyLintPass for ElseIfWithoutElse {\n                     els.span,\n                     \"if expression with an `else if`, but without a final `else`\",\n                     \"add an `else` block here\",\n-                    String::new()\n+                    String::new(),\n+                    Applicability::Unspecified,\n                 );\n             }\n "}, {"sha": "5f15f81205c442ca2dfbc66c7ee2c7a7789d0bcb", "filename": "clippy_lints/src/excessive_precision.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_precision.rs?ref=9096269610fcfc5cdc719dbe7d817de4cbb75201", "patch": "@@ -10,15 +10,16 @@\n \n use crate::rustc::hir;\n use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::ty::TyKind;\n use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc_errors::Applicability;\n+use crate::syntax::ast::*;\n+use crate::syntax_pos::symbol::Symbol;\n+use crate::utils::span_lint_and_sugg;\n use if_chain::if_chain;\n-use crate::rustc::ty::TyKind;\n use std::f32;\n use std::f64;\n use std::fmt;\n-use crate::syntax::ast::*;\n-use crate::syntax_pos::symbol::Symbol;\n-use crate::utils::span_lint_and_sugg;\n \n /// **What it does:** Checks for float literals with a precision greater\n /// than that supported by the underlying type\n@@ -68,6 +69,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ExcessivePrecision {\n                     \"float has excessive precision\",\n                     \"consider changing the type or truncating it to\",\n                     sugg,\n+                    Applicability::Unspecified,\n                 );\n             }\n         }"}, {"sha": "d212cf6239055a46bb2fe2aec21cba81b02f1268", "filename": "clippy_lints/src/infallible_destructuring_match.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Finfallible_destructuring_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Finfallible_destructuring_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfallible_destructuring_match.rs?ref=9096269610fcfc5cdc719dbe7d817de4cbb75201", "patch": "@@ -12,6 +12,7 @@ use super::utils::{get_arg_name, match_var, remove_blocks, snippet, span_lint_an\n use crate::rustc::hir::*;\n use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc_errors::Applicability;\n use if_chain::if_chain;\n \n /// **What it does:** Checks for matches being used to destructure a single-variant enum\n@@ -84,6 +85,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         snippet(cx, local.pat.span, \"..\"),\n                         snippet(cx, target.span, \"..\"),\n                     ),\n+                    Applicability::Unspecified,\n                 );\n             }\n         }"}, {"sha": "33457bb704471c7d4fa5085ed894dc04cff53076", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=9096269610fcfc5cdc719dbe7d817de4cbb75201", "patch": "@@ -11,9 +11,10 @@\n use crate::rustc::hir::def_id::DefId;\n use crate::rustc::hir::*;\n use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n use crate::rustc::ty;\n+use crate::rustc::{declare_tool_lint, lint_array};\n use crate::rustc_data_structures::fx::FxHashSet;\n+use crate::rustc_errors::Applicability;\n use crate::syntax::ast::{Lit, LitKind, Name};\n use crate::syntax::source_map::{Span, Spanned};\n use crate::utils::{get_item_name, in_macro, snippet, span_lint, span_lint_and_sugg, walk_ptrs_ty};\n@@ -242,6 +243,7 @@ fn check_len(cx: &LateContext<'_, '_>, span: Span, method_name: Name, args: &[Ex\n                 &format!(\"length comparison to {}\", if compare_to == 0 { \"zero\" } else { \"one\" }),\n                 \"using `is_empty` is clearer and more explicit\",\n                 format!(\"{}{}.is_empty()\", op, snippet(cx, args[0].span, \"_\")),\n+                Applicability::Unspecified,\n             );\n         }\n     }"}, {"sha": "ebcb773d6f2555aab94e1b5cf9d9862626d7cbd1", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=9096269610fcfc5cdc719dbe7d817de4cbb75201", "patch": "@@ -12,6 +12,7 @@\n \n use crate::rustc::lint::{in_external_macro, EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass};\n use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc_errors::Applicability;\n use crate::syntax::ast::*;\n use crate::syntax_pos;\n use crate::utils::{snippet_opt, span_lint_and_sugg};\n@@ -300,6 +301,7 @@ impl WarningType {\n                 \"mistyped literal suffix\",\n                 \"did you mean to write\",\n                 grouping_hint.to_string(),\n+                Applicability::Unspecified,\n             ),\n             WarningType::UnreadableLiteral => span_lint_and_sugg(\n                 cx,\n@@ -308,6 +310,7 @@ impl WarningType {\n                 \"long literal lacking separators\",\n                 \"consider\",\n                 grouping_hint.to_owned(),\n+                Applicability::Unspecified,\n             ),\n             WarningType::LargeDigitGroups => span_lint_and_sugg(\n                 cx,\n@@ -316,6 +319,7 @@ impl WarningType {\n                 \"digit groups should be smaller\",\n                 \"consider\",\n                 grouping_hint.to_owned(),\n+                Applicability::Unspecified,\n             ),\n             WarningType::InconsistentDigitGrouping => span_lint_and_sugg(\n                 cx,\n@@ -324,6 +328,7 @@ impl WarningType {\n                 \"digits grouped inconsistently by underscores\",\n                 \"consider\",\n                 grouping_hint.to_owned(),\n+                Applicability::Unspecified,\n             ),\n             WarningType::DecimalRepresentation => span_lint_and_sugg(\n                 cx,\n@@ -332,6 +337,7 @@ impl WarningType {\n                 \"integer literal has a better hexadecimal representation\",\n                 \"consider\",\n                 grouping_hint.to_owned(),\n+                Applicability::Unspecified,\n             ),\n         };\n     }"}, {"sha": "e04fc6ea17f147e5008a9e053135e938c2ca8458", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=9096269610fcfc5cdc719dbe7d817de4cbb75201", "patch": "@@ -512,6 +512,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                                         snippet(cx, arms[0].pats[0].span, \"..\"),\n                                         snippet(cx, matchexpr.span, \"..\")\n                                     ),\n+                                    Applicability::Unspecified,\n                                 );\n                             }\n                         },\n@@ -549,6 +550,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         \"this loop could be written as a `for` loop\",\n                         \"try\",\n                         format!(\"for {} in {} {{ .. }}\", loop_var, iterator),\n+                        Applicability::Unspecified,\n                     );\n                 }\n             }\n@@ -1027,6 +1029,7 @@ fn detect_manual_memcpy<'a, 'tcx>(\n                     \"it looks like you're manually copying between slices\",\n                     \"try replacing the loop by\",\n                     big_sugg,\n+                    Applicability::Unspecified,\n                 );\n             }\n         }\n@@ -1316,6 +1319,7 @@ fn lint_iter_method(cx: &LateContext<'_, '_>, args: &[Expr], arg: &Expr, method_\n          iteration methods\",\n         \"to write this more concisely, try\",\n         format!(\"&{}{}\", muta, object),\n+        Applicability::Unspecified,\n     )\n }\n \n@@ -1354,6 +1358,7 @@ fn check_for_loop_arg(cx: &LateContext<'_, '_>, pat: &Pat, arg: &Expr, expr: &Ex\n                          iteration methods`\",\n                         \"to write this more concisely, try\",\n                         object.to_string(),\n+                        Applicability::Unspecified,\n                     );\n                 }\n             } else if method_name == \"next\" && match_trait_method(cx, arg, &paths::ITERATOR) {"}, {"sha": "2fd5c6187c321eeb0e977563ccbcc230c144f86b", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=9096269610fcfc5cdc719dbe7d817de4cbb75201", "patch": "@@ -11,15 +11,12 @@\n use crate::rustc::hir;\n use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc_errors::Applicability;\n+use crate::syntax::ast::Ident;\n use crate::syntax::source_map::Span;\n use crate::utils::paths;\n-use crate::utils::{\n-    in_macro, match_trait_method, match_type,\n-    remove_blocks, snippet,\n-    span_lint_and_sugg,\n-};\n+use crate::utils::{in_macro, match_trait_method, match_type, remove_blocks, snippet, span_lint_and_sugg};\n use if_chain::if_chain;\n-use crate::syntax::ast::Ident;\n \n #[derive(Clone)]\n pub struct Pass;\n@@ -102,6 +99,7 @@ fn lint(cx: &LateContext<'_, '_>, replace: Span, root: Span, name: Ident, path:\n                 \"You are using an explicit closure for cloning elements\",\n                 \"Consider calling the dedicated `cloned` method\",\n                 format!(\"{}.cloned()\", snippet(cx, root, \"..\")),\n+                Applicability::Unspecified,\n             )\n         }\n     }"}, {"sha": "f96ab2f924e1f772d6475ec69116180b30012d67", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=9096269610fcfc5cdc719dbe7d817de4cbb75201", "patch": "@@ -268,8 +268,9 @@ fn report_single_match_single_pattern(cx: &LateContext<'_, '_>, ex: &Expr, arms:\n             snippet(cx, arms[0].pats[0].span, \"..\"),\n             snippet(cx, ex.span, \"..\"),\n             expr_block(cx, &arms[0].body, None, \"..\"),\n-            els_str\n+            els_str,\n         ),\n+        Applicability::Unspecified,\n     );\n }\n \n@@ -483,7 +484,8 @@ fn check_match_as_ref(cx: &LateContext<'_, '_>, ex: &Expr, arms: &[Arm], expr: &\n                 expr.span,\n                 &format!(\"use {}() instead\", suggestion),\n                 \"try this\",\n-                format!(\"{}.{}()\", snippet(cx, ex.span, \"_\"), suggestion)\n+                format!(\"{}.{}()\", snippet(cx, ex.span, \"_\"), suggestion),\n+                Applicability::Unspecified,\n             )\n         }\n     }"}, {"sha": "684f58a08efbc8737e006331f730459080c530f2", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=9096269610fcfc5cdc719dbe7d817de4cbb75201", "patch": "@@ -11,6 +11,7 @@\n use crate::rustc::hir::{Expr, ExprKind, MutMutable, QPath};\n use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc_errors::Applicability;\n use crate::utils::{match_def_path, match_qpath, opt_def_id, paths, snippet, span_lint_and_sugg};\n use if_chain::if_chain;\n \n@@ -85,7 +86,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemReplace {\n                     expr.span,\n                     \"replacing an `Option` with `None`\",\n                     \"consider `Option::take()` instead\",\n-                    format!(\"{}.take()\", snippet(cx, replaced_path.span, \"\"))\n+                    format!(\"{}.take()\", snippet(cx, replaced_path.span, \"\")),\n+                    Applicability::Unspecified,\n                 );\n             }\n         }"}, {"sha": "dcee380f4555eb11a6e600a3ed547dc875eb5ef4", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=9096269610fcfc5cdc719dbe7d817de4cbb75201", "patch": "@@ -1042,6 +1042,7 @@ fn lint_or_fun_call(cx: &LateContext<'_, '_>, expr: &hir::Expr, method_span: Spa\n                             &format!(\"use of `{}` followed by a call to `{}`\", name, path),\n                             \"try this\",\n                             format!(\"{}.unwrap_or_default()\", snippet(cx, self_expr.span, \"_\")),\n+                            Applicability::Unspecified,\n                         );\n                         return true;\n                     }\n@@ -1111,6 +1112,7 @@ fn lint_or_fun_call(cx: &LateContext<'_, '_>, expr: &hir::Expr, method_span: Spa\n             &format!(\"use of `{}` followed by a function call\", name),\n             \"try this\",\n             format!(\"{}_{}({})\", name, suffix, sugg),\n+            Applicability::Unspecified,\n         );\n     }\n \n@@ -1224,6 +1226,7 @@ fn lint_expect_fun_call(cx: &LateContext<'_, '_>, expr: &hir::Expr, method_span:\n                 &format!(\"use of `{}` followed by a function call\", name),\n                 \"try this\",\n                 format!(\"unwrap_or_else({} panic!({}))\", closure, sugg),\n+                Applicability::Unspecified,\n             );\n \n             return;\n@@ -1238,6 +1241,7 @@ fn lint_expect_fun_call(cx: &LateContext<'_, '_>, expr: &hir::Expr, method_span:\n             &format!(\"use of `{}` followed by a function call\", name),\n             \"try this\",\n             format!(\"unwrap_or_else({} {{ let msg = {}; panic!(msg) }}))\", closure, sugg),\n+            Applicability::Unspecified,\n         );\n     }\n \n@@ -1354,6 +1358,7 @@ fn lint_clone_on_ref_ptr(cx: &LateContext<'_, '_>, expr: &hir::Expr, arg: &hir::\n             \"using '.clone()' on a ref-counted pointer\",\n             \"try this\",\n             format!(\"{}::<{}>::clone(&{})\", caller_type, subst.type_at(0), snippet(cx, arg.span, \"_\")),\n+            Applicability::Unspecified,\n         );\n     }\n }\n@@ -1384,6 +1389,7 @@ fn lint_string_extend(cx: &LateContext<'_, '_>, expr: &hir::Expr, args: &[hir::E\n                 ref_str,\n                 snippet(cx, target.span, \"_\")\n             ),\n+            Applicability::Unspecified,\n         );\n     }\n }\n@@ -1482,6 +1488,7 @@ fn lint_unnecessary_fold(cx: &LateContext<'_, '_>, expr: &hir::Expr, fold_args:\n                     \"this `.fold` can be written more succinctly using another method\",\n                     \"try\",\n                     sugg,\n+                    Applicability::Unspecified,\n                 );\n             }\n         }\n@@ -1589,6 +1596,7 @@ fn lint_get_unwrap(cx: &LateContext<'_, '_>, expr: &hir::Expr, get_args: &[hir::\n             snippet(cx, get_args[0].span, \"_\"),\n             get_args_str\n         ),\n+        Applicability::Unspecified,\n     );\n }\n \n@@ -2010,16 +2018,19 @@ fn lint_chars_cmp(\n                 return false;\n             }\n \n-            span_lint_and_sugg(cx,\n-                               lint,\n-                               info.expr.span,\n-                               &format!(\"you should use the `{}` method\", suggest),\n-                               \"like this\",\n-                               format!(\"{}{}.{}({})\",\n-                                       if info.eq { \"\" } else { \"!\" },\n-                                       snippet(cx, args[0][0].span, \"_\"),\n-                                       suggest,\n-                                       snippet(cx, arg_char[0].span, \"_\")));\n+            span_lint_and_sugg(\n+                cx,\n+                lint,\n+                info.expr.span,\n+                &format!(\"you should use the `{}` method\", suggest),\n+                \"like this\",\n+                format!(\"{}{}.{}({})\",\n+                        if info.eq { \"\" } else { \"!\" },\n+                        snippet(cx, args[0][0].span, \"_\"),\n+                        suggest,\n+                        snippet(cx, arg_char[0].span, \"_\")),\n+                Applicability::Unspecified,\n+            );\n \n             return true;\n         }\n@@ -2065,7 +2076,8 @@ fn lint_chars_cmp_with_unwrap<'a, 'tcx>(\n                         if info.eq { \"\" } else { \"!\" },\n                         snippet(cx, args[0][0].span, \"_\"),\n                         suggest,\n-                        c)\n+                        c),\n+                Applicability::Unspecified,\n             );\n \n             return true;\n@@ -2105,6 +2117,7 @@ fn lint_single_char_pattern<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, _expr: &'tcx h\n                 \"single-character string constant used as pattern\",\n                 \"try using a char instead\",\n                 hint,\n+                Applicability::Unspecified,\n             );\n         }\n     }\n@@ -2129,6 +2142,7 @@ fn lint_asref(cx: &LateContext<'_, '_>, expr: &hir::Expr, call_name: &str, as_re\n                 &format!(\"this call to `{}` does nothing\", call_name),\n                 \"try this\",\n                 snippet(cx, recvr.span, \"_\").into_owned(),\n+                Applicability::Unspecified,\n             );\n         }\n     }\n@@ -2194,6 +2208,7 @@ fn lint_into_iter(cx: &LateContext<'_, '_>, expr: &hir::Expr, self_ref_ty: ty::T\n             ),\n             \"call directly\",\n             method_name.to_owned(),\n+            Applicability::Unspecified,\n         );\n     }\n }"}, {"sha": "8ed319c6736df45a0927c7c4385be2a819458a1a", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=9096269610fcfc5cdc719dbe7d817de4cbb75201", "patch": "@@ -12,13 +12,14 @@\n //!\n //! This lint is **warn** by default\n \n+use crate::rustc::hir::*;\n use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc::hir::*;\n+use crate::rustc_errors::Applicability;\n use crate::syntax::ast::LitKind;\n use crate::syntax::source_map::Spanned;\n-use crate::utils::{in_macro, snippet, span_lint, span_lint_and_sugg};\n use crate::utils::sugg::Sugg;\n+use crate::utils::{in_macro, snippet, span_lint, span_lint_and_sugg};\n \n /// **What it does:** Checks for expressions of the form `if c { true } else {\n /// false }`\n@@ -89,6 +90,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBool {\n                     \"this if-then-else expression returns a bool literal\",\n                     \"you can reduce it to\",\n                     hint,\n+                    Applicability::Unspecified,\n                 );\n             };\n             if let ExprKind::Block(ref then_block, _) = then_block.node {\n@@ -150,6 +152,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoolComparison {\n                         \"equality checks against true are unnecessary\",\n                         \"try simplifying it as shown\",\n                         hint,\n+                        Applicability::Unspecified,\n                     );\n                 },\n                 (Other, Bool(true)) => {\n@@ -161,6 +164,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoolComparison {\n                         \"equality checks against true are unnecessary\",\n                         \"try simplifying it as shown\",\n                         hint,\n+                        Applicability::Unspecified,\n                     );\n                 },\n                 (Bool(false), Other) => {\n@@ -172,6 +176,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoolComparison {\n                         \"equality checks against false can be replaced by a negation\",\n                         \"try simplifying it as shown\",\n                         (!hint).to_string(),\n+                        Applicability::Unspecified,\n                     );\n                 },\n                 (Other, Bool(false)) => {\n@@ -183,6 +188,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoolComparison {\n                         \"equality checks against false can be replaced by a negation\",\n                         \"try simplifying it as shown\",\n                         (!hint).to_string(),\n+                        Applicability::Unspecified,\n                     );\n                 },\n                 _ => (),"}, {"sha": "877cd5ab1e4ed3a81016154f856c3d1ec1dd26ac", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=9096269610fcfc5cdc719dbe7d817de4cbb75201", "patch": "@@ -8,10 +8,11 @@\n // except according to those terms.\n \n \n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n use crate::rustc::hir::def::Def;\n use crate::rustc::hir::{BinOpKind, BlockCheckMode, Expr, ExprKind, Stmt, StmtKind, UnsafeSource};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc_errors::Applicability;\n use crate::utils::{has_drop, in_macro, snippet_opt, span_lint, span_lint_and_sugg};\n use std::ops::Deref;\n \n@@ -131,6 +132,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     \"statement can be reduced\",\n                     \"replace it with\",\n                     snippet,\n+                    Applicability::Unspecified,\n                 );\n             }\n         }"}, {"sha": "4376db5e9b3cc7b7e64a375f7f492a9a6f531b6f", "filename": "clippy_lints/src/precedence.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprecedence.rs?ref=9096269610fcfc5cdc719dbe7d817de4cbb75201", "patch": "@@ -10,6 +10,7 @@\n \n use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc_errors::Applicability;\n use crate::syntax::ast::*;\n use crate::syntax::source_map::Spanned;\n use crate::utils::{in_macro, snippet, span_lint_and_sugg};\n@@ -61,6 +62,7 @@ impl EarlyLintPass for Precedence {\n                     \"operator precedence can trip the unwary\",\n                     \"consider parenthesizing your expression\",\n                     sugg,\n+                    Applicability::Unspecified,\n                 );\n             };\n \n@@ -112,6 +114,7 @@ impl EarlyLintPass for Precedence {\n                                     \"unary minus has lower precedence than method call\",\n                                     \"consider adding parentheses to clarify your intent\",\n                                     format!(\"-({})\", snippet(cx, rhs.span, \"..\")),\n+                                    Applicability::Unspecified,\n                                 );\n                             },\n                             _ => (),"}, {"sha": "e653ae2ff75e797a360f313fb8b98be739cb6183", "filename": "clippy_lints/src/ptr_offset_with_cast.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs?ref=9096269610fcfc5cdc719dbe7d817de4cbb75201", "patch": "@@ -9,6 +9,7 @@\n \n \n use crate::rustc::{declare_tool_lint, hir, lint, lint_array};\n+use crate::rustc_errors::Applicability;\n use crate::utils;\n use std::fmt;\n \n@@ -69,7 +70,15 @@ impl<'a, 'tcx> lint::LateLintPass<'a, 'tcx> for Pass {\n \n         let msg = format!(\"use of `{}` with a `usize` casted to an `isize`\", method);\n         if let Some(sugg) = build_suggestion(cx, method, receiver_expr, cast_lhs_expr) {\n-            utils::span_lint_and_sugg(cx, PTR_OFFSET_WITH_CAST, expr.span, &msg, \"try\", sugg);\n+            utils::span_lint_and_sugg(\n+                cx,\n+                PTR_OFFSET_WITH_CAST,\n+                expr.span,\n+                &msg,\n+                \"try\",\n+                sugg,\n+                Applicability::Unspecified,\n+            );\n         } else {\n             utils::span_lint(cx, PTR_OFFSET_WITH_CAST, expr.span, &msg);\n         }"}, {"sha": "2acea17be2641495b453ff379d8fe63f7d5a7272", "filename": "clippy_lints/src/redundant_field_names.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_field_names.rs?ref=9096269610fcfc5cdc719dbe7d817de4cbb75201", "patch": "@@ -10,6 +10,7 @@\n \n use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc_errors::Applicability;\n use crate::syntax::ast::*;\n use crate::utils::{span_lint_and_sugg};\n \n@@ -58,13 +59,14 @@ impl EarlyLintPass for RedundantFieldNames {\n                 }\n                 if let ExprKind::Path(None, path) = &field.expr.node {\n                     if path.segments.len() == 1 && path.segments[0].ident == field.ident {\n-                        span_lint_and_sugg (\n+                        span_lint_and_sugg(\n                             cx,\n                             REDUNDANT_FIELD_NAMES,\n                             field.span,\n                             \"redundant field names in struct initialization\",\n                             \"replace it with\",\n-                            field.ident.to_string()\n+                            field.ident.to_string(),\n+                            Applicability::Unspecified,\n                         );\n                     }\n                 }"}, {"sha": "aac3d09bfd3eceb99350e6e0fade77a31eb820d2", "filename": "clippy_lints/src/reference.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freference.rs?ref=9096269610fcfc5cdc719dbe7d817de4cbb75201", "patch": "@@ -8,11 +8,12 @@\n // except according to those terms.\n \n \n-use crate::syntax::ast::{Expr, ExprKind, UnOp};\n use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n use crate::rustc::{declare_tool_lint, lint_array};\n-use if_chain::if_chain;\n+use crate::rustc_errors::Applicability;\n+use crate::syntax::ast::{Expr, ExprKind, UnOp};\n use crate::utils::{snippet, span_lint_and_sugg};\n+use if_chain::if_chain;\n \n /// **What it does:** Checks for usage of `*&` and `*&mut` in expressions.\n ///\n@@ -61,6 +62,7 @@ impl EarlyLintPass for Pass {\n                     \"immediately dereferencing a reference\",\n                     \"try this\",\n                     format!(\"{}\", snippet(cx, addrof_target.span, \"_\")),\n+                    Applicability::Unspecified,\n                 );\n             }\n         }\n@@ -110,7 +112,8 @@ impl EarlyLintPass for DerefPass {\n                         \"{}.{}\",\n                         snippet(cx, inner.span, \"_\"),\n                         snippet(cx, field_name.span, \"_\")\n-                    )\n+                    ),\n+                    Applicability::Unspecified,\n                 );\n             }\n         }"}, {"sha": "1c204912f17dc966aaaec3b8d3f0179df8c8ab31", "filename": "clippy_lints/src/replace_consts.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Freplace_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Freplace_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freplace_consts.rs?ref=9096269610fcfc5cdc719dbe7d817de4cbb75201", "patch": "@@ -8,12 +8,13 @@\n // except according to those terms.\n \n \n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use if_chain::if_chain;\n use crate::rustc::hir;\n use crate::rustc::hir::def::Def;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc_errors::Applicability;\n use crate::utils::{match_def_path, span_lint_and_sugg};\n+use if_chain::if_chain;\n \n /// **What it does:** Checks for usage of `ATOMIC_X_INIT`, `ONCE_INIT`, and\n /// `uX/iX::MIN/MAX`.\n@@ -61,6 +62,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ReplaceConsts {\n                             &format!(\"using `{}`\", const_path.last().expect(\"empty path\")),\n                             \"try this\",\n                             repl_snip.to_string(),\n+                            Applicability::Unspecified,\n                         );\n                         return;\n                     }"}, {"sha": "74d5e304b87657368647c6c7ac09fd254384dae2", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=9096269610fcfc5cdc719dbe7d817de4cbb75201", "patch": "@@ -10,6 +10,7 @@\n use crate::rustc::hir::*;\n use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc_errors::Applicability;\n use crate::syntax::source_map::Spanned;\n use crate::utils::SpanlessEq;\n use crate::utils::{get_parent_expr, is_allowed, match_type, paths, span_lint, span_lint_and_sugg, walk_ptrs_ty};\n@@ -185,6 +186,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for StringLitAsBytes {\n                                 \"calling `as_bytes()` on `include_str!(..)`\",\n                                 \"consider using `include_bytes!(..)` instead\",\n                                 snippet(cx, args[0].span, r#\"\"foo\"\"#).replacen(\"include_str\", \"include_bytes\", 1),\n+                                Applicability::Unspecified,\n                             );\n                         } else if callsite == expanded\n                             && lit_content.as_str().chars().all(|c| c.is_ascii())\n@@ -197,6 +199,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for StringLitAsBytes {\n                                 \"calling `as_bytes()` on a string literal\",\n                                 \"consider using a byte string literal instead\",\n                                 format!(\"b{}\", snippet(cx, args[0].span, r#\"\"foo\"\"#)),\n+                                Applicability::Unspecified,\n                             );\n                         }\n                     }"}, {"sha": "467713694e18e35d5e2f063bc31fc89011f36e71", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=9096269610fcfc5cdc719dbe7d817de4cbb75201", "patch": "@@ -10,21 +10,21 @@\n \n use std::cmp;\n \n-use matches::matches;\n use crate::rustc::hir;\n-use crate::rustc::hir::*;\n use crate::rustc::hir::intravisit::FnKind;\n+use crate::rustc::hir::*;\n use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use if_chain::if_chain;\n-use crate::rustc::ty::TyKind;\n-use crate::rustc::ty::FnSig;\n use crate::rustc::session::config::Config as SessionConfig;\n-use crate::rustc_target::spec::abi::Abi;\n+use crate::rustc::ty::TyKind;\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc_errors::Applicability;\n use crate::rustc_target::abi::LayoutOf;\n+use crate::rustc_target::spec::abi::Abi;\n use crate::syntax::ast::NodeId;\n use crate::syntax_pos::Span;\n-use crate::utils::{in_macro, is_copy, is_self_ty, span_lint_and_sugg, snippet};\n+use crate::utils::{in_macro, is_copy, is_self, snippet, span_lint_and_sugg};\n+use if_chain::if_chain;\n+use matches::matches;\n \n /// **What it does:** Checks for functions taking arguments by reference, where\n /// the argument type is `Copy` and small enough to be more efficient to always"}, {"sha": "4a9cb04a0ac46e5a4da39b9d93851b440d198e6a", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 27, "deletions": 18, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=9096269610fcfc5cdc719dbe7d817de4cbb75201", "patch": "@@ -10,28 +10,31 @@\n \n #![allow(clippy::default_hash_types)]\n \n+use crate::consts::{constant, Constant};\n use crate::reexport::*;\n use crate::rustc::hir;\n-use crate::rustc::hir::*;\n use crate::rustc::hir::intravisit::{walk_body, walk_expr, walk_ty, FnKind, NestedVisitorMap, Visitor};\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, in_external_macro, LintContext};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use if_chain::if_chain;\n-use crate::rustc::ty::{self, Ty, TyCtxt, TypeckTables};\n+use crate::rustc::hir::*;\n+use crate::rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use crate::rustc::ty::layout::LayoutOf;\n+use crate::rustc::ty::{self, Ty, TyCtxt, TypeckTables};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc_errors::Applicability;\n+use crate::rustc_target::spec::abi::Abi;\n use crate::rustc_typeck::hir_ty_to_ty;\n-use std::cmp::Ordering;\n-use std::collections::BTreeMap;\n-use std::borrow::Cow;\n use crate::syntax::ast::{FloatTy, IntTy, UintTy};\n-use crate::syntax::source_map::Span;\n use crate::syntax::errors::DiagnosticBuilder;\n-use crate::rustc_target::spec::abi::Abi;\n-use crate::utils::{comparisons, differing_macro_contexts, higher, in_constant, in_macro, last_path_segment, match_def_path, match_path,\n-            match_type, multispan_sugg, opt_def_id, same_tys, snippet, snippet_opt, span_help_and_lint, span_lint,\n-            span_lint_and_sugg, span_lint_and_then, clip, unsext, sext, int_bits};\n+use crate::syntax::source_map::Span;\n use crate::utils::paths;\n-use crate::consts::{constant, Constant};\n+use crate::utils::{\n+    clip, comparisons, differing_macro_contexts, higher, in_constant, in_macro, int_bits, last_path_segment,\n+    match_def_path, match_path, match_type, multispan_sugg, opt_def_id, same_tys, sext, snippet, snippet_opt,\n+    span_help_and_lint, span_lint, span_lint_and_sugg, span_lint_and_then, unsext,\n+};\n+use if_chain::if_chain;\n+use std::borrow::Cow;\n+use std::cmp::Ordering;\n+use std::collections::BTreeMap;\n \n /// Handles all the linting of funky types\n pub struct TypePass;\n@@ -338,12 +341,14 @@ fn check_ty_rptr(cx: &LateContext<'_, '_>, ast_ty: &hir::Ty, is_local: bool, lt:\n                     } else {\n                         \"\"\n                     };\n-                    span_lint_and_sugg(cx,\n+                    span_lint_and_sugg(\n+                        cx,\n                         BORROWED_BOX,\n                         ast_ty.span,\n                         \"you seem to be trying to use `&Box<T>`. Consider using just `&T`\",\n                         \"try\",\n-                        format!(\"&{}{}{}\", ltopt, mutopt, &snippet(cx, inner.span, \"..\"))\n+                        format!(\"&{}{}{}\", ltopt, mutopt, &snippet(cx, inner.span, \"..\")),\n+                        Applicability::Unspecified,\n                     );\n                     return; // don't recurse into the type\n                 }\n@@ -537,6 +542,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnitArg {\n                                         \"passing a unit value to a function\",\n                                         \"if you intended to pass a unit value, use a unit literal instead\",\n                                         \"()\".to_string(),\n+                                        Applicability::Unspecified,\n                                     );\n                                 }\n                             }\n@@ -874,6 +880,7 @@ fn span_lossless_lint(cx: &LateContext<'_, '_>, expr: &Expr, op: &Expr, cast_fro\n         &format!(\"casting {} to {} may become silently lossy if types change\", cast_from, cast_to),\n         \"try\",\n         format!(\"{}::from({})\", cast_to, sugg),\n+        Applicability::Unspecified,\n     );\n }\n \n@@ -1103,7 +1110,8 @@ fn lint_fn_to_numeric_cast(cx: &LateContext<'_, '_>, expr: &Expr, cast_expr: &Ex\n                     expr.span,\n                     &format!(\"casting function pointer `{}` to `{}`, which truncates the value\", from_snippet, cast_to),\n                     \"try\",\n-                    format!(\"{} as usize\", from_snippet)\n+                    format!(\"{} as usize\", from_snippet),\n+                    Applicability::Unspecified,\n                 );\n \n             } else if cast_to.sty != ty::Uint(UintTy::Usize) {\n@@ -1113,7 +1121,8 @@ fn lint_fn_to_numeric_cast(cx: &LateContext<'_, '_>, expr: &Expr, cast_expr: &Ex\n                     expr.span,\n                     &format!(\"casting function pointer `{}` to `{}`\", from_snippet, cast_to),\n                     \"try\",\n-                    format!(\"{} as usize\", from_snippet)\n+                    format!(\"{} as usize\", from_snippet),\n+                    Applicability::Unspecified,\n                 );\n             }\n         },"}, {"sha": "ea9deb7a80490aa2905bef00a4cefa39dcaa09aa", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=9096269610fcfc5cdc719dbe7d817de4cbb75201", "patch": "@@ -8,15 +8,16 @@\n // except according to those terms.\n \n \n-use crate::utils::{in_macro, span_lint_and_sugg};\n-use if_chain::if_chain;\n use crate::rustc::hir::intravisit::{walk_path, walk_ty, NestedVisitorMap, Visitor};\n use crate::rustc::hir::*;\n use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use crate::rustc::ty;\n use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::syntax_pos::symbol::keywords::SelfType;\n+use crate::rustc_errors::Applicability;\n use crate::syntax::ast::NodeId;\n+use crate::syntax_pos::symbol::keywords::SelfType;\n+use crate::utils::{in_macro, span_lint_and_sugg};\n+use if_chain::if_chain;\n \n /// **What it does:** Checks for unnecessary repetition of structure name when a\n /// replacement with `Self` is applicable.\n@@ -70,6 +71,7 @@ fn span_use_self_lint(cx: &LateContext<'_, '_>, path: &Path) {\n         \"unnecessary structure name repetition\",\n         \"use the applicable keyword\",\n         \"Self\".to_owned(),\n+        Applicability::Unspecified,\n     );\n }\n "}, {"sha": "740da22ba1c95d46c48129f75f484bffd73ff623", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=9096269610fcfc5cdc719dbe7d817de4cbb75201", "patch": "@@ -18,6 +18,7 @@ use crate::rustc::hir::*;\n use crate::rustc::hir::def::Def;\n use crate::rustc::lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintArray, LintPass};\n use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc_errors::Applicability;\n use crate::rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use crate::syntax::ast::{Crate as AstCrate, Ident, ItemKind, Name};\n use crate::syntax::source_map::Span;\n@@ -281,6 +282,7 @@ impl EarlyLintPass for DefaultHashTypes {\n                 &msg,\n                 \"use\",\n                 replace.to_string(),\n+                Applicability::Unspecified,\n             );\n         }\n     }"}, {"sha": "3c19cfe18057ce630674485e9d893352a21dfa89", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=9096269610fcfc5cdc719dbe7d817de4cbb75201", "patch": "@@ -657,9 +657,10 @@ pub fn span_lint_and_sugg<'a, 'tcx: 'a, T: LintContext<'tcx>>(\n     msg: &str,\n     help: &str,\n     sugg: String,\n+    applicability: Applicability,\n ) {\n     span_lint_and_then(cx, lint, sp, msg, |db| {\n-        db.span_suggestion_with_applicability(sp, help, sugg, Applicability::Unspecified);\n+        db.span_suggestion_with_applicability(sp, help, sugg, applicability);\n     });\n }\n "}, {"sha": "0dd9af6db16414c8eb6d1e05758371a63edbc66d", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=9096269610fcfc5cdc719dbe7d817de4cbb75201", "patch": "@@ -8,14 +8,15 @@\n // except according to those terms.\n \n \n+use crate::consts::constant;\n use crate::rustc::hir::*;\n use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use if_chain::if_chain;\n use crate::rustc::ty::{self, Ty};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc_errors::Applicability;\n use crate::syntax::source_map::Span;\n use crate::utils::{higher, is_copy, snippet, span_lint_and_sugg};\n-use crate::consts::constant;\n+use if_chain::if_chain;\n \n /// **What it does:** Checks for usage of `&vec![..]` when using `&[..]` would\n /// be possible.\n@@ -100,6 +101,7 @@ fn check_vec_macro<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, vec_args: &higher::VecA\n         \"useless use of `vec!`\",\n         \"you can use a slice directly\",\n         snippet,\n+        Applicability::Unspecified,\n     );\n }\n "}, {"sha": "c0161ecf53234a089e55e1bda39ab01621dea816", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9096269610fcfc5cdc719dbe7d817de4cbb75201/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=9096269610fcfc5cdc719dbe7d817de4cbb75201", "patch": "@@ -8,13 +8,14 @@\n // except according to those terms.\n \n \n-use crate::utils::{snippet, span_lint, span_lint_and_sugg};\n use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n use crate::rustc::{declare_tool_lint, lint_array};\n-use std::borrow::Cow;\n+use crate::rustc_errors::Applicability;\n use crate::syntax::ast::*;\n use crate::syntax::parse::{parser, token};\n use crate::syntax::tokenstream::{ThinTokenStream, TokenStream};\n+use crate::utils::{snippet, span_lint, span_lint_and_sugg};\n+use std::borrow::Cow;\n \n /// **What it does:** This lint warns when you use `println!(\"\")` to\n /// print a newline.\n@@ -199,6 +200,7 @@ impl EarlyLintPass for Pass {\n                         \"using `println!(\\\"\\\")`\",\n                         \"replace it with\",\n                         \"println!()\".to_string(),\n+                        Applicability::Unspecified,\n                     );\n                 }\n             }\n@@ -248,6 +250,7 @@ impl EarlyLintPass for Pass {\n                         format!(\"using `writeln!({}, \\\"\\\")`\", suggestion).as_str(),\n                         \"replace it with\",\n                         format!(\"writeln!({})\", suggestion),\n+                        Applicability::Unspecified,\n                     );\n                 }\n             }"}]}