{"sha": "64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0YjdjMjJjNDZiMjA0NTIwYTZmYWUxYzVjZDc1MGEzZDNjNmE2NmE=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-01T19:53:20Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-02T17:19:59Z"}, "message": "core: use assoc types in `Deref[Mut]`", "tree": {"sha": "6e9a504759c5ac42f747c5739b4173d6646cd8c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e9a504759c5ac42f747c5739b4173d6646cd8c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "html_url": "https://github.com/rust-lang/rust/commit/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/comments", "author": null, "committer": null, "parents": [{"sha": "d55577255434d1a9969b74cc4ac5dff4c04d6054", "url": "https://api.github.com/repos/rust-lang/rust/commits/d55577255434d1a9969b74cc4ac5dff4c04d6054", "html_url": "https://github.com/rust-lang/rust/commit/d55577255434d1a9969b74cc4ac5dff4c04d6054"}], "stats": {"total": 363, "additions": 256, "deletions": 107}, "files": [{"sha": "d38b77eb6fd78038b83709206fe0c186bbcdbd5b", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -247,7 +247,9 @@ impl<T> BorrowFrom<Arc<T>> for T {\n }\n \n #[experimental = \"Deref is experimental.\"]\n-impl<T> Deref<T> for Arc<T> {\n+impl<T> Deref for Arc<T> {\n+    type Target = T;\n+\n     #[inline]\n     fn deref(&self) -> &T {\n         &self.inner().data"}, {"sha": "0d6ada4b2293c3c127929afd189acadbe9c051ae", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -153,11 +153,13 @@ impl fmt::Show for Box<Any+'static> {\n     }\n }\n \n-impl<Sized? T> Deref<T> for Box<T> {\n+impl<Sized? T> Deref for Box<T> {\n+    type Target = T;\n+\n     fn deref(&self) -> &T { &**self }\n }\n \n-impl<Sized? T> DerefMut<T> for Box<T> {\n+impl<Sized? T> DerefMut for Box<T> {\n     fn deref_mut(&mut self) -> &mut T { &mut **self }\n }\n \n@@ -210,7 +212,7 @@ mod test {\n \n     #[test]\n     fn deref() {\n-        fn homura<T: Deref<i32>>(_: T) { }\n+        fn homura<T: Deref<Target=i32>>(_: T) { }\n         homura(box 765i32);\n     }\n }"}, {"sha": "c4858aea022a568a385f2d5b5c6a97b552267224", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -65,6 +65,7 @@\n \n #![no_std]\n #![feature(lang_items, phase, unsafe_destructor, default_type_params)]\n+#![feature(associated_types)]\n \n #[phase(plugin, link)]\n extern crate core;"}, {"sha": "c57231fc434cd5701d9a01840bdcfacf04d22e60", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -355,7 +355,9 @@ impl<T> BorrowFrom<Rc<T>> for T {\n }\n \n #[experimental = \"Deref is experimental.\"]\n-impl<T> Deref<T> for Rc<T> {\n+impl<T> Deref for Rc<T> {\n+    type Target = T;\n+\n     #[inline(always)]\n     fn deref(&self) -> &T {\n         &self.inner().value"}, {"sha": "4b85d2da4ac5dfd42c1515d6433471ff7c5b9850", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -515,13 +515,15 @@ mod stack {\n         marker: marker::InvariantLifetime<'id>\n     }\n \n-    impl<'id, T> Deref<T> for IdRef<'id, T> {\n+    impl<'id, T> Deref for IdRef<'id, T> {\n+        type Target = T;\n+\n         fn deref(&self) -> &T {\n             &*self.inner\n         }\n     }\n \n-    impl<'id, T> DerefMut<T> for IdRef<'id, T> {\n+    impl<'id, T> DerefMut for IdRef<'id, T> {\n         fn deref_mut(&mut self) -> &mut T {\n             &mut *self.inner\n         }"}, {"sha": "d1a2916a14097cc1d9aa4e170716623fa76c3568", "filename": "src/libcollections/btree/node.rs", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fnode.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -455,7 +455,9 @@ impl<K: Clone, V: Clone> Clone for Node<K, V> {\n ///     flag: &'a Cell<bool>,\n /// }\n ///\n-/// impl<'a> Deref<Node<uint, uint>> for Nasty<'a> {\n+/// impl<'a> Deref for Nasty<'a> {\n+///     type Target = Node<uint, uint>;\n+///\n ///     fn deref(&self) -> &Node<uint, uint> {\n ///         if self.flag.get() {\n ///             &*self.second\n@@ -511,7 +513,7 @@ impl<K: Ord, V> Node<K, V> {\n     /// Searches for the given key in the node. If it finds an exact match,\n     /// `Found` will be yielded with the matching index. If it doesn't find an exact match,\n     /// `GoDown` will be yielded with the index of the subtree the key must lie in.\n-    pub fn search<Sized? Q, NodeRef: Deref<Node<K, V>>>(node: NodeRef, key: &Q)\n+    pub fn search<Sized? Q, NodeRef: Deref<Target=Node<K, V>>>(node: NodeRef, key: &Q)\n                   -> SearchResult<NodeRef> where Q: BorrowFrom<K> + Ord {\n         // FIXME(Gankro): Tune when to search linear or binary based on B (and maybe K/V).\n         // For the B configured as of this writing (B = 6), binary search was *significantly*\n@@ -588,7 +590,7 @@ impl <K, V> Node<K, V> {\n     }\n }\n \n-impl<K, V, NodeRef: Deref<Node<K, V>>, Type, NodeType> Handle<NodeRef, Type, NodeType> {\n+impl<K, V, NodeRef: Deref<Target=Node<K, V>>, Type, NodeType> Handle<NodeRef, Type, NodeType> {\n     /// Returns a reference to the node that contains the pointed-to edge or key/value pair. This\n     /// is very different from `edge` and `edge_mut` because those return children of the node\n     /// returned by `node`.\n@@ -597,7 +599,9 @@ impl<K, V, NodeRef: Deref<Node<K, V>>, Type, NodeType> Handle<NodeRef, Type, Nod\n     }\n }\n \n-impl<K, V, NodeRef: DerefMut<Node<K, V>>, Type, NodeType> Handle<NodeRef, Type, NodeType> {\n+impl<K, V, NodeRef, Type, NodeType> Handle<NodeRef, Type, NodeType> where\n+    NodeRef: Deref<Target=Node<K, V>> + DerefMut,\n+{\n     /// Converts a handle into one that stores the same information using a raw pointer. This can\n     /// be useful in conjunction with `from_raw` when the type system is insufficient for\n     /// determining the lifetimes of the nodes.\n@@ -653,7 +657,7 @@ impl<'a, K: 'a, V: 'a> Handle<&'a mut Node<K, V>, handle::Edge, handle::Internal\n     }\n }\n \n-impl<K, V, NodeRef: Deref<Node<K, V>>> Handle<NodeRef, handle::Edge, handle::Internal> {\n+impl<K, V, NodeRef: Deref<Target=Node<K, V>>> Handle<NodeRef, handle::Edge, handle::Internal> {\n     // This doesn't exist because there are no uses for it,\n     // but is fine to add, analagous to edge_mut.\n     //\n@@ -667,7 +671,7 @@ pub enum ForceResult<NodeRef, Type> {\n     Internal(Handle<NodeRef, Type, handle::Internal>)\n }\n \n-impl<K, V, NodeRef: Deref<Node<K, V>>, Type> Handle<NodeRef, Type, handle::LeafOrInternal> {\n+impl<K, V, NodeRef: Deref<Target=Node<K, V>>, Type> Handle<NodeRef, Type, handle::LeafOrInternal> {\n     /// Figure out whether this handle is pointing to something in a leaf node or to something in\n     /// an internal node, clarifying the type according to the result.\n     pub fn force(self) -> ForceResult<NodeRef, Type> {\n@@ -684,8 +688,9 @@ impl<K, V, NodeRef: Deref<Node<K, V>>, Type> Handle<NodeRef, Type, handle::LeafO\n         }\n     }\n }\n-\n-impl<K, V, NodeRef: DerefMut<Node<K, V>>> Handle<NodeRef, handle::Edge, handle::Leaf> {\n+impl<K, V, NodeRef> Handle<NodeRef, handle::Edge, handle::Leaf> where\n+    NodeRef: Deref<Target=Node<K, V>> + DerefMut,\n+{\n     /// Tries to insert this key-value pair at the given index in this leaf node\n     /// If the node is full, we have to split it.\n     ///\n@@ -717,7 +722,9 @@ impl<K, V, NodeRef: DerefMut<Node<K, V>>> Handle<NodeRef, handle::Edge, handle::\n     }\n }\n \n-impl<K, V, NodeRef: DerefMut<Node<K, V>>> Handle<NodeRef, handle::Edge, handle::Internal> {\n+impl<K, V, NodeRef> Handle<NodeRef, handle::Edge, handle::Internal> where\n+    NodeRef: Deref<Target=Node<K, V>> + DerefMut,\n+{\n     /// Returns a mutable reference to the edge pointed-to by this handle. This should not be\n     /// confused with `node`, which references the parent node of what is returned here.\n     pub fn edge_mut(&mut self) -> &mut Node<K, V> {\n@@ -800,7 +807,9 @@ impl<K, V, NodeRef: DerefMut<Node<K, V>>> Handle<NodeRef, handle::Edge, handle::\n     }\n }\n \n-impl<K, V, NodeRef: DerefMut<Node<K, V>>, NodeType> Handle<NodeRef, handle::Edge, NodeType> {\n+impl<K, V, NodeRef, NodeType> Handle<NodeRef, handle::Edge, NodeType> where\n+    NodeRef: Deref<Target=Node<K, V>> + DerefMut,\n+{\n     /// Gets the handle pointing to the key/value pair just to the left of the pointed-to edge.\n     /// This is unsafe because the handle might point to the first edge in the node, which has no\n     /// pair to its left.\n@@ -862,7 +871,7 @@ impl<'a, K: 'a, V: 'a, NodeType> Handle<&'a mut Node<K, V>, handle::KV, NodeType\n     }\n }\n \n-impl<'a, K: 'a, V: 'a, NodeRef: Deref<Node<K, V>> + 'a, NodeType> Handle<NodeRef, handle::KV,\n+impl<'a, K: 'a, V: 'a, NodeRef: Deref<Target=Node<K, V>> + 'a, NodeType> Handle<NodeRef, handle::KV,\n                                                                          NodeType> {\n     // These are fine to include, but are currently unneeded.\n     //\n@@ -881,8 +890,9 @@ impl<'a, K: 'a, V: 'a, NodeRef: Deref<Node<K, V>> + 'a, NodeType> Handle<NodeRef\n     // }\n }\n \n-impl<'a, K: 'a, V: 'a, NodeRef: DerefMut<Node<K, V>> + 'a, NodeType> Handle<NodeRef, handle::KV,\n-                                                                            NodeType> {\n+impl<'a, K: 'a, V: 'a, NodeRef, NodeType> Handle<NodeRef, handle::KV, NodeType> where\n+    NodeRef: 'a + Deref<Target=Node<K, V>> + DerefMut,\n+{\n     /// Returns a mutable reference to the key pointed-to by this handle. This doesn't return a\n     /// reference with a lifetime as large as `into_kv_mut`, but it also does not consume the\n     /// handle.\n@@ -898,7 +908,9 @@ impl<'a, K: 'a, V: 'a, NodeRef: DerefMut<Node<K, V>> + 'a, NodeType> Handle<Node\n     }\n }\n \n-impl<K, V, NodeRef: DerefMut<Node<K, V>>, NodeType> Handle<NodeRef, handle::KV, NodeType> {\n+impl<K, V, NodeRef, NodeType> Handle<NodeRef, handle::KV, NodeType> where\n+    NodeRef: Deref<Target=Node<K, V>> + DerefMut,\n+{\n     /// Gets the handle pointing to the edge immediately to the left of the key/value pair pointed\n     /// to by this handle.\n     pub fn left_edge<'a>(&'a mut self) -> Handle<&'a mut Node<K, V>, handle::Edge, NodeType> {\n@@ -918,7 +930,9 @@ impl<K, V, NodeRef: DerefMut<Node<K, V>>, NodeType> Handle<NodeRef, handle::KV,\n     }\n }\n \n-impl<K, V, NodeRef: DerefMut<Node<K, V>>> Handle<NodeRef, handle::KV, handle::Leaf> {\n+impl<K, V, NodeRef> Handle<NodeRef, handle::KV, handle::Leaf> where\n+    NodeRef: Deref<Target=Node<K, V>> + DerefMut,\n+{\n     /// Removes the key/value pair at the handle's location.\n     ///\n     /// # Panics (in debug build)\n@@ -929,7 +943,9 @@ impl<K, V, NodeRef: DerefMut<Node<K, V>>> Handle<NodeRef, handle::KV, handle::Le\n     }\n }\n \n-impl<K, V, NodeRef: DerefMut<Node<K, V>>> Handle<NodeRef, handle::KV, handle::Internal> {\n+impl<K, V, NodeRef> Handle<NodeRef, handle::KV, handle::Internal> where\n+    NodeRef: Deref<Target=Node<K, V>> + DerefMut\n+{\n     /// Steal! Stealing is roughly analogous to a binary tree rotation.\n     /// In this case, we're \"rotating\" right.\n     unsafe fn steal_rightward(&mut self) {"}, {"sha": "c52993ff353f80c7412a7884fa6a0dbae9c2ec20", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -935,7 +935,9 @@ impl ops::Slice<uint, str> for String {\n }\n \n #[experimental = \"waiting on Deref stabilization\"]\n-impl ops::Deref<str> for String {\n+impl ops::Deref for String {\n+    type Target = str;\n+\n     fn deref<'a>(&'a self) -> &'a str {\n         unsafe { mem::transmute(self.vec[]) }\n     }\n@@ -947,7 +949,9 @@ pub struct DerefString<'a> {\n     x: DerefVec<'a, u8>\n }\n \n-impl<'a> Deref<String> for DerefString<'a> {\n+impl<'a> Deref for DerefString<'a> {\n+    type Target = String;\n+\n     fn deref<'b>(&'b self) -> &'b String {\n         unsafe { mem::transmute(&*self.x) }\n     }"}, {"sha": "140c15b2f7f3aa32d804f1e809bc0c0c009d2369", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -1301,12 +1301,14 @@ impl<T> ops::SliceMut<uint, [T]> for Vec<T> {\n }\n \n #[experimental = \"waiting on Deref stability\"]\n-impl<T> ops::Deref<[T]> for Vec<T> {\n+impl<T> ops::Deref for Vec<T> {\n+    type Target = [T];\n+\n     fn deref<'a>(&'a self) -> &'a [T] { self.as_slice() }\n }\n \n #[experimental = \"waiting on DerefMut stability\"]\n-impl<T> ops::DerefMut<[T]> for Vec<T> {\n+impl<T> ops::DerefMut for Vec<T> {\n     fn deref_mut<'a>(&'a mut self) -> &'a mut [T] { self.as_mut_slice() }\n }\n \n@@ -1716,7 +1718,9 @@ pub struct DerefVec<'a, T> {\n }\n \n #[experimental]\n-impl<'a, T> Deref<Vec<T>> for DerefVec<'a, T> {\n+impl<'a, T> Deref for DerefVec<'a, T> {\n+    type Target = Vec<T>;\n+\n     fn deref<'b>(&'b self) -> &'b Vec<T> {\n         &self.x\n     }"}, {"sha": "ba7714ad9bc8cb321b9a1db2eb0d89eac3bf9e61", "filename": "src/libcore/array.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -54,7 +54,7 @@ macro_rules! array_impls {\n             #[stable]\n             impl<'a, A, B, Rhs> PartialEq<Rhs> for [A; $N] where\n                 A: PartialEq<B>,\n-                Rhs: Deref<[B]>,\n+                Rhs: Deref<Target=[B]>,\n             {\n                 #[inline(always)]\n                 fn eq(&self, other: &Rhs) -> bool { PartialEq::eq(self[], &**other) }\n@@ -65,7 +65,7 @@ macro_rules! array_impls {\n             #[stable]\n             impl<'a, A, B, Lhs> PartialEq<[B; $N]> for Lhs where\n                 A: PartialEq<B>,\n-                Lhs: Deref<[A]>\n+                Lhs: Deref<Target=[A]>\n             {\n                 #[inline(always)]\n                 fn eq(&self, other: &[B; $N]) -> bool { PartialEq::eq(&**self, other[]) }"}, {"sha": "7e4d73d598d8d8227bed2325082170b019a34f15", "filename": "src/libcore/borrow.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibcore%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibcore%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fborrow.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -191,7 +191,9 @@ impl<'a, T, Sized? B> Cow<'a, T, B> where B: ToOwned<T> {\n     }\n }\n \n-impl<'a, T, Sized? B> Deref<B> for Cow<'a, T, B> where B: ToOwned<T>  {\n+impl<'a, T, Sized? B> Deref for Cow<'a, T, B> where B: ToOwned<T>  {\n+    type Target = B;\n+\n     fn deref(&self) -> &B {\n         match *self {\n             Borrowed(borrowed) => borrowed,"}, {"sha": "4939fc49958ce1674a9563a5a0736fb298f78012", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -422,7 +422,9 @@ pub struct Ref<'b, T:'b> {\n }\n \n #[unstable = \"waiting for `Deref` to become stable\"]\n-impl<'b, T> Deref<T> for Ref<'b, T> {\n+impl<'b, T> Deref for Ref<'b, T> {\n+    type Target = T;\n+\n     #[inline]\n     fn deref<'a>(&'a self) -> &'a T {\n         self._value\n@@ -478,15 +480,17 @@ pub struct RefMut<'b, T:'b> {\n }\n \n #[unstable = \"waiting for `Deref` to become stable\"]\n-impl<'b, T> Deref<T> for RefMut<'b, T> {\n+impl<'b, T> Deref for RefMut<'b, T> {\n+    type Target = T;\n+\n     #[inline]\n     fn deref<'a>(&'a self) -> &'a T {\n         self._value\n     }\n }\n \n #[unstable = \"waiting for `DerefMut` to become stable\"]\n-impl<'b, T> DerefMut<T> for RefMut<'b, T> {\n+impl<'b, T> DerefMut for RefMut<'b, T> {\n     #[inline]\n     fn deref_mut<'a>(&'a mut self) -> &'a mut T {\n         self._value"}, {"sha": "64bbc248ee1bc8cff85da47c66073e3d17e75822", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -1174,7 +1174,7 @@ pub trait IteratorCloneExt<A> {\n }\n \n #[unstable = \"trait is unstable\"]\n-impl<A: Clone, D: Deref<A>, I: Iterator<D>> IteratorCloneExt<A> for I {\n+impl<A: Clone, D: Deref<Target=A>, I: Iterator<D>> IteratorCloneExt<A> for I {\n     fn cloned(self) -> Cloned<I> {\n         Cloned { it: self }\n     }\n@@ -1185,7 +1185,7 @@ pub struct Cloned<I> {\n     it: I,\n }\n \n-impl<A: Clone, D: Deref<A>, I: Iterator<D>> Iterator<A> for Cloned<I> {\n+impl<A: Clone, D: Deref<Target=A>, I: Iterator<D>> Iterator<A> for Cloned<I> {\n     fn next(&mut self) -> Option<A> {\n         self.it.next().cloned()\n     }\n@@ -1195,15 +1195,15 @@ impl<A: Clone, D: Deref<A>, I: Iterator<D>> Iterator<A> for Cloned<I> {\n     }\n }\n \n-impl<A: Clone, D: Deref<A>, I: DoubleEndedIterator<D>>\n+impl<A: Clone, D: Deref<Target=A>, I: DoubleEndedIterator<D>>\n         DoubleEndedIterator<A> for Cloned<I> {\n     fn next_back(&mut self) -> Option<A> {\n         self.it.next_back().cloned()\n     }\n }\n \n #[unstable = \"trait is unstable\"]\n-impl<A: Clone, D: Deref<A>, I: ExactSizeIterator<D>> ExactSizeIterator<A> for Cloned<I> {}\n+impl<A: Clone, D: Deref<Target=A>, I: ExactSizeIterator<D>> ExactSizeIterator<A> for Cloned<I> {}\n \n #[unstable = \"recently renamed for extension trait conventions\"]\n /// An extension trait for cloneable iterators."}, {"sha": "ba9103520d8751f5e3e1751f0ce6cdfeec42f553", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -44,7 +44,9 @@ impl<T: Zeroable> NonZero<T> {\n     }\n }\n \n-impl<T: Zeroable> Deref<T> for NonZero<T> {\n+impl<T: Zeroable> Deref for NonZero<T> {\n+    type Target = T;\n+\n     #[inline]\n     fn deref<'a>(&'a self) -> &'a T {\n         let NonZero(ref inner) = *self;"}, {"sha": "17a3c93d980740d040e7a63ae7026b04ffab9a95", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -827,11 +827,14 @@ pub struct RangeTo<Idx> {\n /// struct.\n ///\n /// ```\n+/// #![feature(associated_types)]\n /// struct DerefExample<T> {\n ///     value: T\n /// }\n ///\n-/// impl<T> Deref<T> for DerefExample<T> {\n+/// impl<T> Deref for DerefExample<T> {\n+///     type Target = T;\n+///\n ///     fn deref<'a>(&'a self) -> &'a T {\n ///         &self.value\n ///     }\n@@ -843,16 +846,22 @@ pub struct RangeTo<Idx> {\n /// }\n /// ```\n #[lang=\"deref\"]\n-pub trait Deref<Sized? Result> for Sized? {\n+pub trait Deref for Sized? {\n+    type Sized? Target;\n+\n     /// The method called to dereference a value\n-    fn deref<'a>(&'a self) -> &'a Result;\n+    fn deref<'a>(&'a self) -> &'a Self::Target;\n }\n \n-impl<'a, Sized? T> Deref<T> for &'a T {\n+impl<'a, Sized? T> Deref for &'a T {\n+    type Target = T;\n+\n     fn deref(&self) -> &T { *self }\n }\n \n-impl<'a, Sized? T> Deref<T> for &'a mut T {\n+impl<'a, Sized? T> Deref for &'a mut T {\n+    type Target = T;\n+\n     fn deref(&self) -> &T { *self }\n }\n \n@@ -865,17 +874,20 @@ impl<'a, Sized? T> Deref<T> for &'a mut T {\n /// struct.\n ///\n /// ```\n+/// #![feature(associated_types)]\n /// struct DerefMutExample<T> {\n ///     value: T\n /// }\n ///\n-/// impl<T> Deref<T> for DerefMutExample<T> {\n+/// impl<T> Deref for DerefMutExample<T> {\n+///     type Target = T;\n+///\n ///     fn deref<'a>(&'a self) -> &'a T {\n ///         &self.value\n ///     }\n /// }\n ///\n-/// impl<T> DerefMut<T> for DerefMutExample<T> {\n+/// impl<T> DerefMut for DerefMutExample<T> {\n ///     fn deref_mut<'a>(&'a mut self) -> &'a mut T {\n ///         &mut self.value\n ///     }\n@@ -888,12 +900,12 @@ impl<'a, Sized? T> Deref<T> for &'a mut T {\n /// }\n /// ```\n #[lang=\"deref_mut\"]\n-pub trait DerefMut<Sized? Result> for Sized? : Deref<Result> {\n+pub trait DerefMut for Sized? : Deref {\n     /// The method called to mutably dereference a value\n-    fn deref_mut<'a>(&'a mut self) -> &'a mut Result;\n+    fn deref_mut<'a>(&'a mut self) -> &'a mut <Self as Deref>::Target;\n }\n \n-impl<'a, Sized? T> DerefMut<T> for &'a mut T {\n+impl<'a, Sized? T> DerefMut for &'a mut T {\n     fn deref_mut(&mut self) -> &mut T { *self }\n }\n "}, {"sha": "b9749f57d5832edda48e425a4f6d81bcc0d1c81f", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -699,7 +699,7 @@ impl<T> Option<T> {\n     }\n }\n \n-impl<'a, T: Clone, D: Deref<T>> Option<D> {\n+impl<'a, T: Clone, D: Deref<Target=T>> Option<D> {\n     /// Maps an Option<D> to an Option<T> by dereffing and cloning the contents of the Option.\n     /// Useful for converting an Option<&T> to an Option<T>.\n     #[unstable = \"recently added as part of collections reform\"]"}, {"sha": "56459b722251e28d1258bfba468ccfee1ae92b5b", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -95,13 +95,15 @@ struct GraphBuilder<'a, 'b:'a, 'tcx:'b> {\n     resolver: &'a mut Resolver<'b, 'tcx>\n }\n \n-impl<'a, 'b:'a, 'tcx:'b> Deref<Resolver<'b, 'tcx>> for GraphBuilder<'a, 'b, 'tcx> {\n+impl<'a, 'b:'a, 'tcx:'b> Deref for GraphBuilder<'a, 'b, 'tcx> {\n+    type Target = Resolver<'b, 'tcx>;\n+\n     fn deref(&self) -> &Resolver<'b, 'tcx> {\n         &*self.resolver\n     }\n }\n \n-impl<'a, 'b:'a, 'tcx:'b> DerefMut<Resolver<'b, 'tcx>> for GraphBuilder<'a, 'b, 'tcx> {\n+impl<'a, 'b:'a, 'tcx:'b> DerefMut for GraphBuilder<'a, 'b, 'tcx> {\n     fn deref_mut(&mut self) -> &mut Resolver<'b, 'tcx> {\n         &mut *self.resolver\n     }"}, {"sha": "4395bb05040c8e5da23e840cf987acc1fb27db18", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -33,13 +33,15 @@ struct UnusedImportCheckVisitor<'a, 'b:'a, 'tcx:'b> {\n }\n \n // Deref and DerefMut impls allow treating UnusedImportCheckVisitor as Resolver.\n-impl<'a, 'b, 'tcx:'b> Deref<Resolver<'b, 'tcx>> for UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n+impl<'a, 'b, 'tcx:'b> Deref for UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n+    type Target = Resolver<'b, 'tcx>;\n+\n     fn deref<'c>(&'c self) -> &'c Resolver<'b, 'tcx> {\n         &*self.resolver\n     }\n }\n \n-impl<'a, 'b, 'tcx:'b> DerefMut<Resolver<'b, 'tcx>> for UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n+impl<'a, 'b, 'tcx:'b> DerefMut for UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n     fn deref_mut<'c>(&'c mut self) -> &'c mut Resolver<'b, 'tcx> {\n         &mut *self.resolver\n     }"}, {"sha": "75731b5e7cda599767c9f6cbd2b67f0c768de82c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -18,6 +18,7 @@\n \n #![feature(globs, phase, slicing_syntax)]\n #![feature(rustc_diagnostic_macros)]\n+#![feature(associated_types)]\n \n #[phase(plugin, link)] extern crate log;\n #[phase(plugin, link)] extern crate syntax;"}, {"sha": "9bfed1e8eb9c129a0c9223cccf02e6dfd70c300b", "filename": "src/librustc_resolve/record_exports.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibrustc_resolve%2Frecord_exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibrustc_resolve%2Frecord_exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Frecord_exports.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -34,13 +34,15 @@ struct ExportRecorder<'a, 'b:'a, 'tcx:'b> {\n }\n \n // Deref and DerefMut impls allow treating ExportRecorder as Resolver.\n-impl<'a, 'b, 'tcx:'b> Deref<Resolver<'b, 'tcx>> for ExportRecorder<'a, 'b, 'tcx> {\n+impl<'a, 'b, 'tcx:'b> Deref for ExportRecorder<'a, 'b, 'tcx> {\n+    type Target = Resolver<'b, 'tcx>;\n+\n     fn deref<'c>(&'c self) -> &'c Resolver<'b, 'tcx> {\n         &*self.resolver\n     }\n }\n \n-impl<'a, 'b, 'tcx:'b> DerefMut<Resolver<'b, 'tcx>> for ExportRecorder<'a, 'b, 'tcx> {\n+impl<'a, 'b, 'tcx:'b> DerefMut for ExportRecorder<'a, 'b, 'tcx> {\n     fn deref_mut<'c>(&'c mut self) -> &'c mut Resolver<'b, 'tcx> {\n         &mut *self.resolver\n     }"}, {"sha": "e61b9af5a12b17148f72f481a69f8bed33f5ec41", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -311,7 +311,7 @@ fn search_hashed<K, V, M, F>(table: M,\n                              hash: SafeHash,\n                              mut is_match: F)\n                              -> SearchResult<K, V, M> where\n-    M: Deref<RawTable<K, V>>,\n+    M: Deref<Target=RawTable<K, V>>,\n     F: FnMut(&K) -> bool,\n {\n     let size = table.size();"}, {"sha": "a687ba3da8d7fc648936c4203aa8819413415867", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -210,7 +210,7 @@ impl<K, V, M> Bucket<K, V, M> {\n     }\n }\n \n-impl<K, V, M: Deref<RawTable<K, V>>> Bucket<K, V, M> {\n+impl<K, V, M: Deref<Target=RawTable<K, V>>> Bucket<K, V, M> {\n     pub fn new(table: M, hash: SafeHash) -> Bucket<K, V, M> {\n         Bucket::at_index(table, hash.inspect() as uint)\n     }\n@@ -279,7 +279,7 @@ impl<K, V, M: Deref<RawTable<K, V>>> Bucket<K, V, M> {\n     }\n }\n \n-impl<K, V, M: Deref<RawTable<K, V>>> EmptyBucket<K, V, M> {\n+impl<K, V, M: Deref<Target=RawTable<K, V>>> EmptyBucket<K, V, M> {\n     #[inline]\n     pub fn next(self) -> Bucket<K, V, M> {\n         let mut bucket = self.into_bucket();\n@@ -315,7 +315,7 @@ impl<K, V, M: Deref<RawTable<K, V>>> EmptyBucket<K, V, M> {\n     }\n }\n \n-impl<K, V, M: DerefMut<RawTable<K, V>>> EmptyBucket<K, V, M> {\n+impl<K, V, M: Deref<Target=RawTable<K, V>> + DerefMut> EmptyBucket<K, V, M> {\n     /// Puts given key and value pair, along with the key's hash,\n     /// into this bucket in the hashtable. Note how `self` is 'moved' into\n     /// this function, because this slot will no longer be empty when\n@@ -337,7 +337,7 @@ impl<K, V, M: DerefMut<RawTable<K, V>>> EmptyBucket<K, V, M> {\n     }\n }\n \n-impl<K, V, M: Deref<RawTable<K, V>>> FullBucket<K, V, M> {\n+impl<K, V, M: Deref<Target=RawTable<K, V>>> FullBucket<K, V, M> {\n     #[inline]\n     pub fn next(self) -> Bucket<K, V, M> {\n         let mut bucket = self.into_bucket();\n@@ -384,7 +384,7 @@ impl<K, V, M: Deref<RawTable<K, V>>> FullBucket<K, V, M> {\n     }\n }\n \n-impl<K, V, M: DerefMut<RawTable<K, V>>> FullBucket<K, V, M> {\n+impl<K, V, M: Deref<Target=RawTable<K, V>> + DerefMut> FullBucket<K, V, M> {\n     /// Removes this bucket's key and value from the hashtable.\n     ///\n     /// This works similarly to `put`, building an `EmptyBucket` out of the\n@@ -428,7 +428,7 @@ impl<K, V, M: DerefMut<RawTable<K, V>>> FullBucket<K, V, M> {\n     }\n }\n \n-impl<'t, K, V, M: Deref<RawTable<K, V>> + 't> FullBucket<K, V, M> {\n+impl<'t, K, V, M: Deref<Target=RawTable<K, V>> + 't> FullBucket<K, V, M> {\n     /// Exchange a bucket state for immutable references into the table.\n     /// Because the underlying reference to the table is also consumed,\n     /// no further changes to the structure of the table are possible;\n@@ -442,7 +442,7 @@ impl<'t, K, V, M: Deref<RawTable<K, V>> + 't> FullBucket<K, V, M> {\n     }\n }\n \n-impl<'t, K, V, M: DerefMut<RawTable<K, V>> + 't> FullBucket<K, V, M> {\n+impl<'t, K, V, M: Deref<Target=RawTable<K, V>> + DerefMut + 't> FullBucket<K, V, M> {\n     /// This works similarly to `into_refs`, exchanging a bucket state\n     /// for mutable references into the table.\n     pub fn into_mut_refs(self) -> (&'t mut K, &'t mut V) {\n@@ -463,7 +463,7 @@ impl<K, V, M> BucketState<K, V, M> {\n     }\n }\n \n-impl<K, V, M: Deref<RawTable<K, V>>> GapThenFull<K, V, M> {\n+impl<K, V, M: Deref<Target=RawTable<K, V>>> GapThenFull<K, V, M> {\n     #[inline]\n     pub fn full(&self) -> &FullBucket<K, V, M> {\n         &self.full"}, {"sha": "e58ff1c3ac4150f3b12a34e58082f7c7d442c2e9", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -117,13 +117,15 @@ pub struct StdinReaderGuard<'a> {\n     inner: MutexGuard<'a, RaceBox>,\n }\n \n-impl<'a> Deref<BufferedReader<StdReader>> for StdinReaderGuard<'a> {\n+impl<'a> Deref for StdinReaderGuard<'a> {\n+    type Target = BufferedReader<StdReader>;\n+\n     fn deref(&self) -> &BufferedReader<StdReader> {\n         &self.inner.0\n     }\n }\n \n-impl<'a> DerefMut<BufferedReader<StdReader>> for StdinReaderGuard<'a> {\n+impl<'a> DerefMut for StdinReaderGuard<'a> {\n     fn deref_mut(&mut self) -> &mut BufferedReader<StdReader> {\n         &mut self.inner.0\n     }"}, {"sha": "e44511169abb4bed8e261af8eb3f89dce38c85ee", "filename": "src/libstd/rt/exclusive.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibstd%2Frt%2Fexclusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibstd%2Frt%2Fexclusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fexclusive.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -74,10 +74,12 @@ impl<'a, T: Send> ExclusiveGuard<'a, T> {\n     }\n }\n \n-impl<'a, T: Send> Deref<T> for ExclusiveGuard<'a, T> {\n+impl<'a, T: Send> Deref for ExclusiveGuard<'a, T> {\n+    type Target = T;\n+\n     fn deref(&self) -> &T { &*self._data }\n }\n-impl<'a, T: Send> DerefMut<T> for ExclusiveGuard<'a, T> {\n+impl<'a, T: Send> DerefMut for ExclusiveGuard<'a, T> {\n     fn deref_mut(&mut self) -> &mut T { &mut *self._data }\n }\n "}, {"sha": "08980eb01c6280a35e8371c7a30e0585e5afb6d0", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -288,12 +288,14 @@ impl<'mutex, T> MutexGuard<'mutex, T> {\n     }\n }\n \n-impl<'mutex, T> Deref<T> for MutexGuard<'mutex, T> {\n+impl<'mutex, T> Deref for MutexGuard<'mutex, T> {\n+    type Target = T;\n+\n     fn deref<'a>(&'a self) -> &'a T {\n         unsafe { &*self.__data.get() }\n     }\n }\n-impl<'mutex, T> DerefMut<T> for MutexGuard<'mutex, T> {\n+impl<'mutex, T> DerefMut for MutexGuard<'mutex, T> {\n     fn deref_mut<'a>(&'a mut self) -> &'a mut T {\n         unsafe { &mut *self.__data.get() }\n     }"}, {"sha": "7478e90335589741d606309c21797e53eec128d0", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -326,13 +326,17 @@ impl<'rwlock, T> RWLockWriteGuard<'rwlock, T> {\n     }\n }\n \n-impl<'rwlock, T> Deref<T> for RWLockReadGuard<'rwlock, T> {\n+impl<'rwlock, T> Deref for RWLockReadGuard<'rwlock, T> {\n+    type Target = T;\n+\n     fn deref(&self) -> &T { unsafe { &*self.__data.get() } }\n }\n-impl<'rwlock, T> Deref<T> for RWLockWriteGuard<'rwlock, T> {\n+impl<'rwlock, T> Deref for RWLockWriteGuard<'rwlock, T> {\n+    type Target = T;\n+\n     fn deref(&self) -> &T { unsafe { &*self.__data.get() } }\n }\n-impl<'rwlock, T> DerefMut<T> for RWLockWriteGuard<'rwlock, T> {\n+impl<'rwlock, T> DerefMut for RWLockWriteGuard<'rwlock, T> {\n     fn deref_mut(&mut self) -> &mut T {\n         unsafe { &mut *self.__data.get() }\n     }"}, {"sha": "d86db4e177e9ba5e9bc4810aa78cab53842e840c", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -26,6 +26,7 @@\n #![feature(macro_rules, globs, default_type_params, phase, slicing_syntax)]\n #![feature(quote, unsafe_destructor)]\n #![feature(unboxed_closures)]\n+#![feature(associated_types)]\n \n extern crate arena;\n extern crate fmt_macros;"}, {"sha": "8c00aaf9beedef439ccb420c32733da32babbd1a", "filename": "src/libsyntax/owned_slice.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibsyntax%2Fowned_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibsyntax%2Fowned_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fowned_slice.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -54,7 +54,9 @@ impl<T> OwnedSlice<T> {\n     }\n }\n \n-impl<T> Deref<[T]> for OwnedSlice<T> {\n+impl<T> Deref for OwnedSlice<T> {\n+    type Target = [T];\n+\n     fn deref(&self) -> &[T] {\n         self.as_slice()\n     }"}, {"sha": "61da1c25926b953f58f583d89a4778bbce3f52d4", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -606,7 +606,9 @@ impl InternedString {\n     }\n }\n \n-impl Deref<str> for InternedString {\n+impl Deref for InternedString {\n+    type Target = str;\n+\n     fn deref(&self) -> &str { &*self.string }\n }\n "}, {"sha": "5d4f50f5fd28307a3bb5be73b6c9c7fc472a178e", "filename": "src/libsyntax/ptr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibsyntax%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibsyntax%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fptr.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -75,7 +75,9 @@ impl<T: 'static> P<T> {\n     }\n }\n \n-impl<T> Deref<T> for P<T> {\n+impl<T> Deref for P<T> {\n+    type Target = T;\n+\n     fn deref<'a>(&'a self) -> &'a T {\n         &*self.ptr\n     }"}, {"sha": "5dde8db6155d982ce50dbd86d3d59876e58541e6", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -124,7 +124,9 @@ impl BorrowFrom<RcStr> for str {\n     }\n }\n \n-impl Deref<str> for RcStr {\n+impl Deref for RcStr {\n+    type Target = str;\n+\n     fn deref(&self) -> &str { self.string[] }\n }\n "}, {"sha": "05960a5b8e1dd6196a51f865972be9c745200433", "filename": "src/test/auxiliary/overloaded_autoderef_xc.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Ftest%2Fauxiliary%2Foverloaded_autoderef_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Ftest%2Fauxiliary%2Foverloaded_autoderef_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Foverloaded_autoderef_xc.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_types)]\n+\n use std::ops::Deref;\n \n struct DerefWithHelper<H, T> {\n@@ -24,7 +26,9 @@ impl<T> Helper<T> for Option<T> {\n     }\n }\n \n-impl<T, H: Helper<T>> Deref<T> for DerefWithHelper<H, T> {\n+impl<T, H: Helper<T>> Deref for DerefWithHelper<H, T> {\n+    type Target = T;\n+\n     fn deref(&self) -> &T {\n         self.helper.helper_borrow()\n     }"}, {"sha": "7cd170f7773e9ced96363f891023624a3e35b265", "filename": "src/test/compile-fail/borrowck-borrow-overloaded-auto-deref-mut.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref-mut.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -11,19 +11,23 @@\n // Test how overloaded deref interacts with borrows when DerefMut\n // is implemented.\n \n+#![feature(associated_types)]\n+\n use std::ops::{Deref, DerefMut};\n \n struct Own<T> {\n     value: *mut T\n }\n \n-impl<T> Deref<T> for Own<T> {\n+impl<T> Deref for Own<T> {\n+    type Target = T;\n+\n     fn deref(&self) -> &T {\n         unsafe { &*self.value }\n     }\n }\n \n-impl<T> DerefMut<T> for Own<T> {\n+impl<T> DerefMut for Own<T> {\n     fn deref_mut(&mut self) -> &mut T {\n         unsafe { &mut *self.value }\n     }"}, {"sha": "759467aeda36e53e32a9780cef0f6c938cf3df0e", "filename": "src/test/compile-fail/borrowck-borrow-overloaded-auto-deref.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -11,13 +11,17 @@\n // Test how overloaded deref interacts with borrows when only\n // Deref and not DerefMut is implemented.\n \n+#![feature(associated_types)]\n+\n use std::ops::Deref;\n \n struct Rc<T> {\n     value: *const T\n }\n \n-impl<T> Deref<T> for Rc<T> {\n+impl<T> Deref for Rc<T> {\n+    type Target = T;\n+\n     fn deref(&self) -> &T {\n         unsafe { &*self.value }\n     }"}, {"sha": "74dceab18ea48b2c8d179c7482578d70d7d07383", "filename": "src/test/compile-fail/borrowck-borrow-overloaded-deref-mut.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref-mut.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -11,19 +11,23 @@\n // Test how overloaded deref interacts with borrows when DerefMut\n // is implemented.\n \n+#![feature(associated_types)]\n+\n use std::ops::{Deref, DerefMut};\n \n struct Own<T> {\n     value: *mut T\n }\n \n-impl<T> Deref<T> for Own<T> {\n+impl<T> Deref for Own<T> {\n+    type Target = T;\n+\n     fn deref<'a>(&'a self) -> &'a T {\n         unsafe { &*self.value }\n     }\n }\n \n-impl<T> DerefMut<T> for Own<T> {\n+impl<T> DerefMut for Own<T> {\n     fn deref_mut<'a>(&'a mut self) -> &'a mut T {\n         unsafe { &mut *self.value }\n     }"}, {"sha": "635e440c6fe120b1532a509ef1562fcbfee85449", "filename": "src/test/compile-fail/borrowck-borrow-overloaded-deref.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -11,13 +11,17 @@\n // Test how overloaded deref interacts with borrows when only\n // Deref and not DerefMut is implemented.\n \n+#![feature(associated_types)]\n+\n use std::ops::Deref;\n \n struct Rc<T> {\n     value: *const T\n }\n \n-impl<T> Deref<T> for Rc<T> {\n+impl<T> Deref for Rc<T> {\n+    type Target = T;\n+\n     fn deref<'a>(&'a self) -> &'a T {\n         unsafe { &*self.value }\n     }"}, {"sha": "ab770c099e125a04e2798f241f4522f1d4d0b519", "filename": "src/test/compile-fail/infinite-autoderef.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Ftest%2Fcompile-fail%2Finfinite-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Ftest%2Fcompile-fail%2Finfinite-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finfinite-autoderef.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -10,11 +10,15 @@\n \n // error-pattern: reached the recursion limit while auto-dereferencing\n \n+#![feature(associated_types)]\n+\n use std::ops::Deref;\n \n struct Foo;\n \n-impl Deref<Foo> for Foo {\n+impl Deref for Foo {\n+    type Target = Foo;\n+\n     fn deref(&self) -> &Foo {\n         self\n     }"}, {"sha": "1ccd1753c76d782ea25ba48fa7f2e8fc37fba994", "filename": "src/test/compile-fail/issue-18566.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Ftest%2Fcompile-fail%2Fissue-18566.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Ftest%2Fcompile-fail%2Fissue-18566.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18566.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -8,8 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_types)]\n+\n struct MyPtr<'a>(&'a mut uint);\n-impl<'a> Deref<uint> for MyPtr<'a> {\n+impl<'a> Deref for MyPtr<'a> {\n+    type Target = uint;\n+\n     fn deref<'b>(&'b self) -> &'b uint { self.0 }\n }\n "}, {"sha": "03848b2d8207a99a2c2f9c189823c073e43223e0", "filename": "src/test/run-pass/deref-mut-on-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Ftest%2Frun-pass%2Fderef-mut-on-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Ftest%2Frun-pass%2Fderef-mut-on-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef-mut-on-ref.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -10,7 +10,7 @@\n \n // Test that `&mut T` implements `DerefMut<T>`\n \n-fn inc<T:DerefMut<int>>(mut t: T) {\n+fn inc<T:Deref<Target=int> + DerefMut>(mut t: T) {\n     *t += 1;\n }\n "}, {"sha": "7ebf7a9cd30fbe67f3f4dd8b02734d85e522d2dd", "filename": "src/test/run-pass/deref-on-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Ftest%2Frun-pass%2Fderef-on-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Ftest%2Frun-pass%2Fderef-on-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef-on-ref.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -10,7 +10,7 @@\n \n // Test that `&T` and `&mut T` implement `Deref<T>`\n \n-fn deref<U:Copy,T:Deref<U>>(t: T) -> U {\n+fn deref<U:Copy,T:Deref<Target=U>>(t: T) -> U {\n     *t\n }\n "}, {"sha": "72a07ca7d3585aac8bf77a746fbc0a1cd5bee972", "filename": "src/test/run-pass/dst-deref-mut.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Ftest%2Frun-pass%2Fdst-deref-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Ftest%2Frun-pass%2Fdst-deref-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-deref-mut.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -10,17 +10,21 @@\n \n // Test that a custom deref with a fat pointer return type does not ICE\n \n+#![feature(associated_types)]\n+\n pub struct Arr {\n     ptr: Box<[uint]>\n }\n \n-impl Deref<[uint]> for Arr {\n+impl Deref for Arr {\n+    type Target = [uint];\n+\n     fn deref(&self) -> &[uint] {\n         panic!();\n     }\n }\n \n-impl DerefMut<[uint]> for Arr {\n+impl DerefMut for Arr {\n     fn deref_mut(&mut self) -> &mut [uint] {\n         &mut *self.ptr\n     }"}, {"sha": "8d32216697d6264c0534ca51f1bdb217893b0a5a", "filename": "src/test/run-pass/dst-deref.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Ftest%2Frun-pass%2Fdst-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Ftest%2Frun-pass%2Fdst-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-deref.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -10,11 +10,15 @@\n \n // Test that a custom deref with a fat pointer return type does not ICE\n \n+#![feature(associated_types)]\n+\n pub struct Arr {\n     ptr: Box<[uint]>\n }\n \n-impl Deref<[uint]> for Arr {\n+impl Deref for Arr {\n+    type Target = [uint];\n+\n     fn deref(&self) -> &[uint] {\n         &*self.ptr\n     }"}, {"sha": "9c2a8575bb9ecaba8fa860b78a79f5183222e8b1", "filename": "src/test/run-pass/fixup-deref-mut.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Ftest%2Frun-pass%2Ffixup-deref-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Ftest%2Frun-pass%2Ffixup-deref-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixup-deref-mut.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -8,18 +8,22 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_types)]\n+\n // Generic unique/owned smaht pointer.\n struct Own<T> {\n     value: *mut T\n }\n \n-impl<T> Deref<T> for Own<T> {\n+impl<T> Deref for Own<T> {\n+    type Target = T;\n+\n     fn deref<'a>(&'a self) -> &'a T {\n         unsafe { &*self.value }\n     }\n }\n \n-impl<T> DerefMut<T> for Own<T> {\n+impl<T> DerefMut for Own<T> {\n     fn deref_mut<'a>(&'a mut self) -> &'a mut T {\n         unsafe { &mut *self.value }\n     }"}, {"sha": "aac33f3d8a66bbf835c218828e425ebc30ea698b", "filename": "src/test/run-pass/issue-13264.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Ftest%2Frun-pass%2Fissue-13264.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Ftest%2Frun-pass%2Fissue-13264.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13264.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -8,11 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_types)]\n+\n struct Root {\n     jsref: JSRef\n }\n \n-impl Deref<JSRef> for Root {\n+impl Deref for Root {\n+    type Target = JSRef;\n+\n     fn deref<'a>(&'a self) -> &'a JSRef {\n         &self.jsref\n     }\n@@ -23,7 +27,9 @@ struct JSRef {\n     node: *const Node\n }\n \n-impl Deref<Node> for JSRef {\n+impl Deref for JSRef {\n+    type Target = Node;\n+\n     fn deref<'a>(&'a self) -> &'a Node {\n         self.get()\n     }"}, {"sha": "1b5016d198dd948c00ccd3cd02fba8f97839ecc3", "filename": "src/test/run-pass/issue-16774.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Ftest%2Frun-pass%2Fissue-16774.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Ftest%2Frun-pass%2Fissue-16774.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16774.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n+#![feature(associated_types, unboxed_closures)]\n \n struct X(Box<int>);\n \n@@ -23,14 +23,16 @@ impl Drop for X {\n     }\n }\n \n-impl Deref<int> for X {\n+impl Deref for X {\n+    type Target = int;\n+\n     fn deref(&self) -> &int {\n         let &X(box ref x) = self;\n         x\n     }\n }\n \n-impl DerefMut<int> for X {\n+impl DerefMut for X {\n     fn deref_mut(&mut self) -> &mut int {\n         let &X(box ref mut x) = self;\n         x"}, {"sha": "5b105646dacadbf42c088d2c8412aa03f50cf808", "filename": "src/test/run-pass/overloaded-autoderef-count.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-count.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_types)]\n+\n use std::cell::Cell;\n use std::ops::{Deref, DerefMut};\n \n@@ -32,14 +34,16 @@ impl<T> DerefCounter<T> {\n     }\n }\n \n-impl<T> Deref<T> for DerefCounter<T> {\n+impl<T> Deref for DerefCounter<T> {\n+    type Target = T;\n+\n     fn deref(&self) -> &T {\n         self.count_imm.set(self.count_imm.get() + 1);\n         &self.value\n     }\n }\n \n-impl<T> DerefMut<T> for DerefCounter<T> {\n+impl<T> DerefMut for DerefCounter<T> {\n     fn deref_mut(&mut self) -> &mut T {\n         self.count_mut += 1;\n         &mut self.value"}, {"sha": "7d550c925b74e8216667e52c8cda3197562a5a67", "filename": "src/test/run-pass/overloaded-autoderef-indexing.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-indexing.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -8,11 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_types)]\n+\n struct DerefArray<'a, T:'a> {\n     inner: &'a [T]\n }\n \n-impl<'a, T> Deref<&'a [T]> for DerefArray<'a, T> {\n+impl<'a, T> Deref for DerefArray<'a, T> {\n+    type Target = &'a [T];\n+\n     fn deref<'b>(&'b self) -> &'b &'a [T] {\n         &self.inner\n     }"}, {"sha": "5b45413e76052dc9f9c29704a30adc102e5b8c7b", "filename": "src/test/run-pass/overloaded-autoderef-order.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-order.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_types)]\n+\n use std::rc::Rc;\n \n struct DerefWrapper<X, Y> {\n@@ -23,7 +25,9 @@ impl<X, Y> DerefWrapper<X, Y> {\n     }\n }\n \n-impl<X, Y> Deref<Y> for DerefWrapper<X, Y> {\n+impl<X, Y> Deref for DerefWrapper<X, Y> {\n+    type Target = Y;\n+\n     fn deref(&self) -> &Y {\n         &self.y\n     }\n@@ -46,7 +50,9 @@ mod priv_test {\n         }\n     }\n \n-    impl<X, Y> Deref<Y> for DerefWrapperHideX<X, Y> {\n+    impl<X, Y> Deref for DerefWrapperHideX<X, Y> {\n+        type Target = Y;\n+\n         fn deref(&self) -> &Y {\n             &self.y\n         }"}, {"sha": "23efba157495c4a11dc3cc83c55b0f134cbca178", "filename": "src/test/run-pass/overloaded-autoderef-vtable.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-vtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-vtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-vtable.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_types)]\n+\n use std::ops::Deref;\n \n struct DerefWithHelper<H, T> {\n@@ -24,7 +26,9 @@ impl<T> Helper<T> for Option<T> {\n     }\n }\n \n-impl<T, H: Helper<T>> Deref<T> for DerefWithHelper<H, T> {\n+impl<T, H: Helper<T>> Deref for DerefWithHelper<H, T> {\n+    type Target = T;\n+\n     fn deref(&self) -> &T {\n         self.helper.helper_borrow()\n     }"}, {"sha": "b6fb38d5cc2cfd0520c55b327fc3c07f0cfe9765", "filename": "src/test/run-pass/overloaded-deref-count.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Ftest%2Frun-pass%2Foverloaded-deref-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b7c22c46b204520a6fae1c5cd750a3d3c6a66a/src%2Ftest%2Frun-pass%2Foverloaded-deref-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-deref-count.rs?ref=64b7c22c46b204520a6fae1c5cd750a3d3c6a66a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_types)]\n+\n use std::cell::Cell;\n use std::ops::{Deref, DerefMut};\n use std::vec::Vec;\n@@ -32,14 +34,16 @@ impl<T> DerefCounter<T> {\n     }\n }\n \n-impl<T> Deref<T> for DerefCounter<T> {\n+impl<T> Deref for DerefCounter<T> {\n+    type Target = T;\n+\n     fn deref(&self) -> &T {\n         self.count_imm.set(self.count_imm.get() + 1);\n         &self.value\n     }\n }\n \n-impl<T> DerefMut<T> for DerefCounter<T> {\n+impl<T> DerefMut for DerefCounter<T> {\n     fn deref_mut(&mut self) -> &mut T {\n         self.count_mut += 1;\n         &mut self.value"}]}