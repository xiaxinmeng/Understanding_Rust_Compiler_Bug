{"sha": "b2581974a31a6767a7109fc86ecbd2225d87dd5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyNTgxOTc0YTMxYTY3NjdhNzEwOWZjODZlY2JkMjIyNWQ4N2RkNWM=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2016-06-10T12:16:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-10T12:16:44Z"}, "message": "Rollup merge of #34129 - jviide:from-string-box-error, r=steveklabnik\n\nRemove a gotcha from book/error-handling.md\n\nThe book's \"Error handling with `Box<Error>`\" section talks about `Box<Error>`. In the actual example `Box<Error + Send + Sync>` is used instead so that the corresponding From impls could be used to convert a plain string to an error type. Rust 1.7 added support for conversion from `&str`/`String` to\n`Box<Error>`, so this gotcha and later references to it can now be removed.\n\nr? @steveklabnik", "tree": {"sha": "588e5de7d3f639c50f20e3a0888d28e7f6cba184", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/588e5de7d3f639c50f20e3a0888d28e7f6cba184"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2581974a31a6767a7109fc86ecbd2225d87dd5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2581974a31a6767a7109fc86ecbd2225d87dd5c", "html_url": "https://github.com/rust-lang/rust/commit/b2581974a31a6767a7109fc86ecbd2225d87dd5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2581974a31a6767a7109fc86ecbd2225d87dd5c/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f6e8f82593874e5a16498c84b69e5c9ee5deb14", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f6e8f82593874e5a16498c84b69e5c9ee5deb14", "html_url": "https://github.com/rust-lang/rust/commit/4f6e8f82593874e5a16498c84b69e5c9ee5deb14"}, {"sha": "75fc40c668ca564b08674caebc32c77325900689", "url": "https://api.github.com/repos/rust-lang/rust/commits/75fc40c668ca564b08674caebc32c77325900689", "html_url": "https://github.com/rust-lang/rust/commit/75fc40c668ca564b08674caebc32c77325900689"}], "stats": {"total": 20, "additions": 8, "deletions": 12}, "files": [{"sha": "544f837d69b264171df652134267d1f5f1551491", "filename": "src/doc/book/error-handling.md", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b2581974a31a6767a7109fc86ecbd2225d87dd5c/src%2Fdoc%2Fbook%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/b2581974a31a6767a7109fc86ecbd2225d87dd5c/src%2Fdoc%2Fbook%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ferror-handling.md?ref=b2581974a31a6767a7109fc86ecbd2225d87dd5c", "patch": "@@ -1829,7 +1829,7 @@ use std::error::Error;\n \n fn search<P: AsRef<Path>>\n          (file_path: P, city: &str)\n-         -> Result<Vec<PopulationCount>, Box<Error+Send+Sync>> {\n+         -> Result<Vec<PopulationCount>, Box<Error>> {\n     let mut found = vec![];\n     let file = try!(File::open(file_path));\n     let mut rdr = csv::Reader::from_reader(file);\n@@ -1858,20 +1858,17 @@ Instead of `x.unwrap()`, we now have `try!(x)`. Since our function returns a\n `Result<T, E>`, the `try!` macro will return early from the function if an\n error occurs.\n \n-There is one big gotcha in this code: we used `Box<Error + Send + Sync>`\n-instead of `Box<Error>`. We did this so we could convert a plain string to an\n-error type. We need these extra bounds so that we can use the\n-[corresponding `From`\n-impls](../std/convert/trait.From.html):\n+At the end of `search` we also convert a plain string to an error type \n+by using the [corresponding `From` impls](../std/convert/trait.From.html):\n \n ```rust,ignore\n // We are making use of this impl in the code above, since we call `From::from`\n // on a `&'static str`.\n-impl<'a, 'b> From<&'b str> for Box<Error + Send + Sync + 'a>\n+impl<'a> From<&'a str> for Box<Error>\n \n // But this is also useful when you need to allocate a new string for an\n // error message, usually with `format!`.\n-impl From<String> for Box<Error + Send + Sync>\n+impl From<String> for Box<Error>\n ```\n \n Since `search` now returns a `Result<T, E>`, `main` should use case analysis\n@@ -1964,7 +1961,7 @@ use std::io;\n \n fn search<P: AsRef<Path>>\n          (file_path: &Option<P>, city: &str)\n-         -> Result<Vec<PopulationCount>, Box<Error+Send+Sync>> {\n+         -> Result<Vec<PopulationCount>, Box<Error>> {\n     let mut found = vec![];\n     let input: Box<io::Read> = match *file_path {\n         None => Box::new(io::stdin()),\n@@ -2175,9 +2172,8 @@ heuristics!\n   `unwrap`. Be warned: if it winds up in someone else's hands, don't be\n   surprised if they are agitated by poor error messages!\n * If you're writing a quick 'n' dirty program and feel ashamed about panicking\n-  anyway, then use either a `String` or a `Box<Error + Send + Sync>` for your\n-  error type (the `Box<Error + Send + Sync>` type is because of the\n-  [available `From` impls](../std/convert/trait.From.html)).\n+  anyway, then use either a `String` or a `Box<Error>` for your\n+  error type.\n * Otherwise, in a program, define your own error types with appropriate\n   [`From`](../std/convert/trait.From.html)\n   and"}]}