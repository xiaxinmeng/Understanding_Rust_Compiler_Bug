{"sha": "91fc573172c83f9d443da9b54f0361be5266b53f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxZmM1NzMxNzJjODNmOWQ0NDNkYTliNTRmMDM2MWJlNTI2NmI1M2Y=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-01T13:31:27Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-05T07:00:39Z"}, "message": "rustc/ty: use Cow<str> where applicable", "tree": {"sha": "e630e244b8c620fa3bd3d8e26690595e4b7ac2aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e630e244b8c620fa3bd3d8e26690595e4b7ac2aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91fc573172c83f9d443da9b54f0361be5266b53f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91fc573172c83f9d443da9b54f0361be5266b53f", "html_url": "https://github.com/rust-lang/rust/commit/91fc573172c83f9d443da9b54f0361be5266b53f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91fc573172c83f9d443da9b54f0361be5266b53f/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ff117df5096c23b466992a0a3427edf1af3113d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ff117df5096c23b466992a0a3427edf1af3113d", "html_url": "https://github.com/rust-lang/rust/commit/2ff117df5096c23b466992a0a3427edf1af3113d"}], "stats": {"total": 509, "additions": 261, "deletions": 248}, "files": [{"sha": "2367d482ec89b65ff00840c6e5edbae4eb1afc78", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 41, "deletions": 40, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/91fc573172c83f9d443da9b54f0361be5266b53f/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fc573172c83f9d443da9b54f0361be5266b53f/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=91fc573172c83f9d443da9b54f0361be5266b53f", "patch": "@@ -10,6 +10,7 @@\n \n use hir::def_id::DefId;\n use ty::{self, BoundRegion, Region, Ty, TyCtxt};\n+use std::borrow::Cow;\n use std::fmt;\n use rustc_target::spec::abi;\n use syntax::ast;\n@@ -71,7 +72,7 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use self::TypeError::*;\n         fn report_maybe_different(f: &mut fmt::Formatter<'_>,\n-                                  expected: String, found: String) -> fmt::Result {\n+                                  expected: &str, found: &str) -> fmt::Result {\n             // A naive approach to making sure that we're not reporting silly errors such as:\n             // (expected closure, found closure).\n             if expected == found {\n@@ -126,15 +127,15 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n                        br)\n             }\n             Sorts(values) => ty::tls::with(|tcx| {\n-                report_maybe_different(f, values.expected.sort_string(tcx),\n-                                       values.found.sort_string(tcx))\n+                report_maybe_different(f, &values.expected.sort_string(tcx),\n+                                       &values.found.sort_string(tcx))\n             }),\n             Traits(values) => ty::tls::with(|tcx| {\n                 report_maybe_different(f,\n-                                       format!(\"trait `{}`\",\n-                                               tcx.item_path_str(values.expected)),\n-                                       format!(\"trait `{}`\",\n-                                               tcx.item_path_str(values.found)))\n+                                       &format!(\"trait `{}`\",\n+                                                tcx.item_path_str(values.expected)),\n+                                       &format!(\"trait `{}`\",\n+                                                tcx.item_path_str(values.found)))\n             }),\n             IntMismatch(ref values) => {\n                 write!(f, \"expected `{:?}`, found `{:?}`\",\n@@ -162,8 +163,8 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n                        values.found)\n             },\n             ExistentialMismatch(ref values) => {\n-                report_maybe_different(f, format!(\"trait `{}`\", values.expected),\n-                                       format!(\"trait `{}`\", values.found))\n+                report_maybe_different(f, &format!(\"trait `{}`\", values.expected),\n+                                       &format!(\"trait `{}`\", values.found))\n             }\n             OldStyleLUB(ref err) => {\n                 write!(f, \"{}\", err)\n@@ -173,22 +174,22 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n }\n \n impl<'a, 'gcx, 'lcx, 'tcx> ty::TyS<'tcx> {\n-    pub fn sort_string(&self, tcx: TyCtxt<'a, 'gcx, 'lcx>) -> String {\n+    pub fn sort_string(&self, tcx: TyCtxt<'a, 'gcx, 'lcx>) -> Cow<'static, str> {\n         match self.sty {\n             ty::Bool | ty::Char | ty::Int(_) |\n-            ty::Uint(_) | ty::Float(_) | ty::Str | ty::Never => self.to_string(),\n-            ty::Tuple(ref tys) if tys.is_empty() => self.to_string(),\n+            ty::Uint(_) | ty::Float(_) | ty::Str | ty::Never => self.to_string().into(),\n+            ty::Tuple(ref tys) if tys.is_empty() => self.to_string().into(),\n \n-            ty::Adt(def, _) => format!(\"{} `{}`\", def.descr(), tcx.item_path_str(def.did)),\n-            ty::Foreign(def_id) => format!(\"extern type `{}`\", tcx.item_path_str(def_id)),\n+            ty::Adt(def, _) => format!(\"{} `{}`\", def.descr(), tcx.item_path_str(def.did)).into(),\n+            ty::Foreign(def_id) => format!(\"extern type `{}`\", tcx.item_path_str(def_id)).into(),\n             ty::Array(_, n) => {\n                 match n.assert_usize(tcx) {\n-                    Some(n) => format!(\"array of {} elements\", n),\n-                    None => \"array\".to_string(),\n+                    Some(n) => format!(\"array of {} elements\", n).into(),\n+                    None => \"array\".into(),\n                 }\n             }\n-            ty::Slice(_) => \"slice\".to_string(),\n-            ty::RawPtr(_) => \"*-ptr\".to_string(),\n+            ty::Slice(_) => \"slice\".into(),\n+            ty::RawPtr(_) => \"*-ptr\".into(),\n             ty::Ref(region, ty, mutbl) => {\n                 let tymut = ty::TypeAndMut { ty, mutbl };\n                 let tymut_string = tymut.to_string();\n@@ -199,39 +200,39 @@ impl<'a, 'gcx, 'lcx, 'tcx> ty::TyS<'tcx> {\n                     format!(\"{}reference\", match mutbl {\n                         hir::Mutability::MutMutable => \"mutable \",\n                         _ => \"\"\n-                    })\n+                    }).into()\n                 } else {\n-                    format!(\"&{}\", tymut_string)\n+                    format!(\"&{}\", tymut_string).into()\n                 }\n             }\n-            ty::FnDef(..) => \"fn item\".to_string(),\n-            ty::FnPtr(_) => \"fn pointer\".to_string(),\n+            ty::FnDef(..) => \"fn item\".into(),\n+            ty::FnPtr(_) => \"fn pointer\".into(),\n             ty::Dynamic(ref inner, ..) => {\n-                inner.principal().map_or_else(|| \"trait\".to_string(),\n-                    |p| format!(\"trait {}\", tcx.item_path_str(p.def_id())))\n+                inner.principal().map_or_else(|| \"trait\".into(),\n+                    |p| format!(\"trait {}\", tcx.item_path_str(p.def_id())).into())\n             }\n-            ty::Closure(..) => \"closure\".to_string(),\n-            ty::Generator(..) => \"generator\".to_string(),\n-            ty::GeneratorWitness(..) => \"generator witness\".to_string(),\n-            ty::Tuple(..) => \"tuple\".to_string(),\n-            ty::Infer(ty::TyVar(_)) => \"inferred type\".to_string(),\n-            ty::Infer(ty::IntVar(_)) => \"integral variable\".to_string(),\n-            ty::Infer(ty::FloatVar(_)) => \"floating-point variable\".to_string(),\n+            ty::Closure(..) => \"closure\".into(),\n+            ty::Generator(..) => \"generator\".into(),\n+            ty::GeneratorWitness(..) => \"generator witness\".into(),\n+            ty::Tuple(..) => \"tuple\".into(),\n+            ty::Infer(ty::TyVar(_)) => \"inferred type\".into(),\n+            ty::Infer(ty::IntVar(_)) => \"integral variable\".into(),\n+            ty::Infer(ty::FloatVar(_)) => \"floating-point variable\".into(),\n             ty::Infer(ty::CanonicalTy(_)) |\n-            ty::Infer(ty::FreshTy(_)) => \"fresh type\".to_string(),\n-            ty::Infer(ty::FreshIntTy(_)) => \"fresh integral type\".to_string(),\n-            ty::Infer(ty::FreshFloatTy(_)) => \"fresh floating-point type\".to_string(),\n-            ty::Projection(_) => \"associated type\".to_string(),\n-            ty::UnnormalizedProjection(_) => \"non-normalized associated type\".to_string(),\n+            ty::Infer(ty::FreshTy(_)) => \"fresh type\".into(),\n+            ty::Infer(ty::FreshIntTy(_)) => \"fresh integral type\".into(),\n+            ty::Infer(ty::FreshFloatTy(_)) => \"fresh floating-point type\".into(),\n+            ty::Projection(_) => \"associated type\".into(),\n+            ty::UnnormalizedProjection(_) => \"non-normalized associated type\".into(),\n             ty::Param(ref p) => {\n                 if p.is_self() {\n-                    \"Self\".to_string()\n+                    \"Self\".into()\n                 } else {\n-                    \"type parameter\".to_string()\n+                    \"type parameter\".into()\n                 }\n             }\n-            ty::Opaque(..) => \"opaque type\".to_string(),\n-            ty::Error => \"type error\".to_string(),\n+            ty::Opaque(..) => \"opaque type\".into(),\n+            ty::Error => \"type error\".into(),\n         }\n     }\n }"}, {"sha": "79eab3c6f34b9eb79f674d974860cc624714671f", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 217, "deletions": 206, "changes": 423, "blob_url": "https://github.com/rust-lang/rust/blob/91fc573172c83f9d443da9b54f0361be5266b53f/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fc573172c83f9d443da9b54f0361be5266b53f/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=91fc573172c83f9d443da9b54f0361be5266b53f", "patch": "@@ -23,6 +23,7 @@ use ty::query::Query;\n use ty::query::QueryCache;\n use util::profiling::ProfileCategory;\n \n+use std::borrow::Cow;\n use std::hash::Hash;\n use std::fmt::Debug;\n use syntax_pos::symbol::InternedString;\n@@ -55,7 +56,7 @@ pub(super) trait QueryAccessors<'tcx>: QueryConfig<'tcx> {\n }\n \n pub(super) trait QueryDescription<'tcx>: QueryAccessors<'tcx> {\n-    fn describe(tcx: TyCtxt<'_, '_, '_>, key: Self::Key) -> String;\n+    fn describe(tcx: TyCtxt<'_, '_, '_>, key: Self::Key) -> Cow<'static, str>;\n \n     #[inline]\n     fn cache_on_disk(_: Self::Key) -> bool {\n@@ -70,12 +71,12 @@ pub(super) trait QueryDescription<'tcx>: QueryAccessors<'tcx> {\n }\n \n impl<'tcx, M: QueryAccessors<'tcx, Key=DefId>> QueryDescription<'tcx> for M {\n-    default fn describe(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> String {\n+    default fn describe(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> Cow<'static, str> {\n         if !tcx.sess.verbose() {\n-            format!(\"processing `{}`\", tcx.item_path_str(def_id))\n+            format!(\"processing `{}`\", tcx.item_path_str(def_id)).into()\n         } else {\n             let name = unsafe { ::std::intrinsics::type_name::<M>() };\n-            format!(\"processing `{}` applied to `{:?}`\", name, def_id)\n+            format!(\"processing `{}` applied to `{:?}`\", name, def_id).into()\n         }\n     }\n }\n@@ -84,201 +85,210 @@ impl<'tcx> QueryDescription<'tcx> for queries::normalize_projection_ty<'tcx> {\n     fn describe(\n         _tcx: TyCtxt<'_, '_, '_>,\n         goal: CanonicalProjectionGoal<'tcx>,\n-    ) -> String {\n-        format!(\"normalizing `{:?}`\", goal)\n+    ) -> Cow<'static, str> {\n+        format!(\"normalizing `{:?}`\", goal).into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::implied_outlives_bounds<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, goal: CanonicalTyGoal<'tcx>) -> String {\n-        format!(\"computing implied outlives bounds for `{:?}`\", goal)\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, goal: CanonicalTyGoal<'tcx>) -> Cow<'static, str> {\n+        format!(\"computing implied outlives bounds for `{:?}`\", goal).into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::dropck_outlives<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, goal: CanonicalTyGoal<'tcx>) -> String {\n-        format!(\"computing dropck types for `{:?}`\", goal)\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, goal: CanonicalTyGoal<'tcx>) -> Cow<'static, str> {\n+        format!(\"computing dropck types for `{:?}`\", goal).into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::normalize_ty_after_erasing_regions<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, goal: ParamEnvAnd<'tcx, Ty<'tcx>>) -> String {\n-        format!(\"normalizing `{:?}`\", goal)\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, goal: ParamEnvAnd<'tcx, Ty<'tcx>>) -> Cow<'static, str> {\n+        format!(\"normalizing `{:?}`\", goal).into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::evaluate_obligation<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, goal: CanonicalPredicateGoal<'tcx>) -> String {\n-        format!(\"evaluating trait selection obligation `{}`\", goal.value.value)\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, goal: CanonicalPredicateGoal<'tcx>) -> Cow<'static, str> {\n+        format!(\"evaluating trait selection obligation `{}`\", goal.value.value).into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::type_op_eq<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, goal: CanonicalTypeOpEqGoal<'tcx>) -> String {\n-        format!(\"evaluating `type_op_eq` `{:?}`\", goal)\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, goal: CanonicalTypeOpEqGoal<'tcx>) -> Cow<'static, str> {\n+        format!(\"evaluating `type_op_eq` `{:?}`\", goal).into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::type_op_subtype<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, goal: CanonicalTypeOpSubtypeGoal<'tcx>) -> String {\n-        format!(\"evaluating `type_op_subtype` `{:?}`\", goal)\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, goal: CanonicalTypeOpSubtypeGoal<'tcx>)\n+                -> Cow<'static, str> {\n+        format!(\"evaluating `type_op_subtype` `{:?}`\", goal).into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::type_op_prove_predicate<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, goal: CanonicalTypeOpProvePredicateGoal<'tcx>) -> String {\n-        format!(\"evaluating `type_op_prove_predicate` `{:?}`\", goal)\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, goal: CanonicalTypeOpProvePredicateGoal<'tcx>)\n+                -> Cow<'static, str> {\n+        format!(\"evaluating `type_op_prove_predicate` `{:?}`\", goal).into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::type_op_normalize_ty<'tcx> {\n     fn describe(_tcx: TyCtxt<'_, '_, '_>,\n-                goal: CanonicalTypeOpNormalizeGoal<'tcx, Ty<'tcx>>) -> String {\n-        format!(\"normalizing `{:?}`\", goal)\n+                goal: CanonicalTypeOpNormalizeGoal<'tcx, Ty<'tcx>>) -> Cow<'static, str> {\n+        format!(\"normalizing `{:?}`\", goal).into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::type_op_normalize_predicate<'tcx> {\n     fn describe(\n         _tcx: TyCtxt<'_, '_, '_>,\n         goal: CanonicalTypeOpNormalizeGoal<'tcx, ty::Predicate<'tcx>>,\n-    ) -> String {\n-        format!(\"normalizing `{:?}`\", goal)\n+    ) -> Cow<'static, str> {\n+        format!(\"normalizing `{:?}`\", goal).into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::type_op_normalize_poly_fn_sig<'tcx> {\n     fn describe(\n         _tcx: TyCtxt<'_, '_, '_>,\n         goal: CanonicalTypeOpNormalizeGoal<'tcx, ty::PolyFnSig<'tcx>>,\n-    ) -> String {\n-        format!(\"normalizing `{:?}`\", goal)\n+    ) -> Cow<'static, str> {\n+        format!(\"normalizing `{:?}`\", goal).into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::type_op_normalize_fn_sig<'tcx> {\n     fn describe(_tcx: TyCtxt<'_, '_, '_>,\n-                goal: CanonicalTypeOpNormalizeGoal<'tcx, ty::FnSig<'tcx>>) -> String {\n-        format!(\"normalizing `{:?}`\", goal)\n+                goal: CanonicalTypeOpNormalizeGoal<'tcx, ty::FnSig<'tcx>>) -> Cow<'static, str> {\n+        format!(\"normalizing `{:?}`\", goal).into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::is_copy_raw<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> String {\n-        format!(\"computing whether `{}` is `Copy`\", env.value)\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>)\n+                -> Cow<'static, str> {\n+        format!(\"computing whether `{}` is `Copy`\", env.value).into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::is_sized_raw<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> String {\n-        format!(\"computing whether `{}` is `Sized`\", env.value)\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>)\n+                -> Cow<'static, str> {\n+        format!(\"computing whether `{}` is `Sized`\", env.value).into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::is_freeze_raw<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> String {\n-        format!(\"computing whether `{}` is freeze\", env.value)\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>)\n+                -> Cow<'static, str> {\n+        format!(\"computing whether `{}` is freeze\", env.value).into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::needs_drop_raw<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> String {\n-        format!(\"computing whether `{}` needs drop\", env.value)\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>)\n+                -> Cow<'static, str> {\n+        format!(\"computing whether `{}` needs drop\", env.value).into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::layout_raw<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> String {\n-        format!(\"computing layout of `{}`\", env.value)\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>)\n+                -> Cow<'static, str> {\n+        format!(\"computing layout of `{}`\", env.value).into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::super_predicates_of<'tcx> {\n-    fn describe(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> String {\n+    fn describe(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> Cow<'static, str> {\n         format!(\"computing the supertraits of `{}`\",\n-                tcx.item_path_str(def_id))\n+                tcx.item_path_str(def_id)).into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::erase_regions_ty<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, ty: Ty<'tcx>) -> String {\n-        format!(\"erasing regions from `{:?}`\", ty)\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, ty: Ty<'tcx>) -> Cow<'static, str> {\n+        format!(\"erasing regions from `{:?}`\", ty).into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::type_param_predicates<'tcx> {\n-    fn describe(tcx: TyCtxt<'_, '_, '_>, (_, def_id): (DefId, DefId)) -> String {\n+    fn describe(tcx: TyCtxt<'_, '_, '_>, (_, def_id): (DefId, DefId)) -> Cow<'static, str> {\n         let id = tcx.hir.as_local_node_id(def_id).unwrap();\n         format!(\"computing the bounds for type parameter `{}`\",\n-                tcx.hir.ty_param_name(id))\n+                tcx.hir.ty_param_name(id)).into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::coherent_trait<'tcx> {\n-    fn describe(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> String {\n+    fn describe(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> Cow<'static, str> {\n         format!(\"coherence checking all impls of trait `{}`\",\n-                tcx.item_path_str(def_id))\n+                tcx.item_path_str(def_id)).into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::upstream_monomorphizations<'tcx> {\n-    fn describe(_: TyCtxt<'_, '_, '_>, k: CrateNum) -> String {\n-        format!(\"collecting available upstream monomorphizations `{:?}`\", k)\n+    fn describe(_: TyCtxt<'_, '_, '_>, k: CrateNum) -> Cow<'static, str> {\n+        format!(\"collecting available upstream monomorphizations `{:?}`\", k).into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::crate_inherent_impls<'tcx> {\n-    fn describe(_: TyCtxt<'_, '_, '_>, k: CrateNum) -> String {\n-        format!(\"all inherent impls defined in crate `{:?}`\", k)\n+    fn describe(_: TyCtxt<'_, '_, '_>, k: CrateNum) -> Cow<'static, str> {\n+        format!(\"all inherent impls defined in crate `{:?}`\", k).into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::crate_inherent_impls_overlap_check<'tcx> {\n-    fn describe(_: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"check for overlap between inherent impls defined in this crate\".to_string()\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"check for overlap between inherent impls defined in this crate\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::crate_variances<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"computing the variances for items in this crate\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"computing the variances for items in this crate\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::inferred_outlives_crate<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"computing the inferred outlives predicates for items in this crate\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"computing the inferred outlives predicates for items in this crate\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::mir_shims<'tcx> {\n-    fn describe(tcx: TyCtxt<'_, '_, '_>, def: ty::InstanceDef<'tcx>) -> String {\n+    fn describe(tcx: TyCtxt<'_, '_, '_>, def: ty::InstanceDef<'tcx>) -> Cow<'static, str> {\n         format!(\"generating MIR shim for `{}`\",\n-                tcx.item_path_str(def.def_id()))\n+                tcx.item_path_str(def.def_id())).into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::privacy_access_levels<'tcx> {\n-    fn describe(_: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"privacy access levels\".to_string()\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"privacy access levels\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::typeck_item_bodies<'tcx> {\n-    fn describe(_: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"type-checking all item bodies\".to_string()\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"type-checking all item bodies\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::reachable_set<'tcx> {\n-    fn describe(_: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"reachability\".to_string()\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"reachability\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::const_eval<'tcx> {\n-    fn describe(tcx: TyCtxt<'_, '_, '_>, key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>) -> String {\n-        format!(\"const-evaluating `{}`\", tcx.item_path_str(key.value.instance.def.def_id()))\n+    fn describe(tcx: TyCtxt<'_, '_, '_>, key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>)\n+        -> Cow<'static, str>\n+    {\n+        format!(\"const-evaluating `{}`\", tcx.item_path_str(key.value.instance.def.def_id())).into()\n     }\n \n     #[inline]\n@@ -295,14 +305,14 @@ impl<'tcx> QueryDescription<'tcx> for queries::const_eval<'tcx> {\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::mir_keys<'tcx> {\n-    fn describe(_: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"getting a list of all mir_keys\".to_string()\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"getting a list of all mir_keys\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::symbol_name<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, instance: ty::Instance<'tcx>) -> String {\n-        format!(\"computing the symbol for `{}`\", instance)\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, instance: ty::Instance<'tcx>) -> Cow<'static, str> {\n+        format!(\"computing the symbol for `{}`\", instance).into()\n     }\n \n     #[inline]\n@@ -319,64 +329,64 @@ impl<'tcx> QueryDescription<'tcx> for queries::symbol_name<'tcx> {\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::describe_def<'tcx> {\n-    fn describe(_: TyCtxt<'_, '_, '_>, _: DefId) -> String {\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: DefId) -> Cow<'static, str> {\n         bug!(\"describe_def\")\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::def_span<'tcx> {\n-    fn describe(_: TyCtxt<'_, '_, '_>, _: DefId) -> String {\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: DefId) -> Cow<'static, str> {\n         bug!(\"def_span\")\n     }\n }\n \n \n impl<'tcx> QueryDescription<'tcx> for queries::lookup_stability<'tcx> {\n-    fn describe(_: TyCtxt<'_, '_, '_>, _: DefId) -> String {\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: DefId) -> Cow<'static, str> {\n         bug!(\"stability\")\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::lookup_deprecation_entry<'tcx> {\n-    fn describe(_: TyCtxt<'_, '_, '_>, _: DefId) -> String {\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: DefId) -> Cow<'static, str> {\n         bug!(\"deprecation\")\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::item_attrs<'tcx> {\n-    fn describe(_: TyCtxt<'_, '_, '_>, _: DefId) -> String {\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: DefId) -> Cow<'static, str> {\n         bug!(\"item_attrs\")\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::is_reachable_non_generic<'tcx> {\n-    fn describe(_: TyCtxt<'_, '_, '_>, _: DefId) -> String {\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: DefId) -> Cow<'static, str> {\n         bug!(\"is_reachable_non_generic\")\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::fn_arg_names<'tcx> {\n-    fn describe(_: TyCtxt<'_, '_, '_>, _: DefId) -> String {\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: DefId) -> Cow<'static, str> {\n         bug!(\"fn_arg_names\")\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::impl_parent<'tcx> {\n-    fn describe(_: TyCtxt<'_, '_, '_>, _: DefId) -> String {\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: DefId) -> Cow<'static, str> {\n         bug!(\"impl_parent\")\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::trait_of_item<'tcx> {\n-    fn describe(_: TyCtxt<'_, '_, '_>, _: DefId) -> String {\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: DefId) -> Cow<'static, str> {\n         bug!(\"trait_of_item\")\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::const_is_rvalue_promotable_to_static<'tcx> {\n-    fn describe(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> String {\n+    fn describe(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> Cow<'static, str> {\n         format!(\"const checking if rvalue is promotable to static `{}`\",\n-            tcx.item_path_str(def_id))\n+            tcx.item_path_str(def_id)).into()\n     }\n \n     #[inline]\n@@ -393,23 +403,24 @@ impl<'tcx> QueryDescription<'tcx> for queries::const_is_rvalue_promotable_to_sta\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::rvalue_promotable_map<'tcx> {\n-    fn describe(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> String {\n+    fn describe(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> Cow<'static, str> {\n         format!(\"checking which parts of `{}` are promotable to static\",\n-                tcx.item_path_str(def_id))\n+                tcx.item_path_str(def_id)).into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::is_mir_available<'tcx> {\n-    fn describe(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> String {\n+    fn describe(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> Cow<'static, str> {\n         format!(\"checking if item is mir available: `{}`\",\n-            tcx.item_path_str(def_id))\n+                tcx.item_path_str(def_id)).into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::codegen_fulfill_obligation<'tcx> {\n     fn describe(tcx: TyCtxt<'_, '_, '_>,\n-                key: (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>)) -> String {\n+                key: (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>)) -> Cow<'static, str> {\n         format!(\"checking if `{}` fulfills its obligations\", tcx.item_path_str(key.1.def_id()))\n+            .into()\n     }\n \n     #[inline]\n@@ -426,320 +437,320 @@ impl<'tcx> QueryDescription<'tcx> for queries::codegen_fulfill_obligation<'tcx>\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::trait_impls_of<'tcx> {\n-    fn describe(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> String {\n-        format!(\"trait impls of `{}`\", tcx.item_path_str(def_id))\n+    fn describe(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> Cow<'static, str> {\n+        format!(\"trait impls of `{}`\", tcx.item_path_str(def_id)).into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::is_object_safe<'tcx> {\n-    fn describe(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> String {\n-        format!(\"determine object safety of trait `{}`\", tcx.item_path_str(def_id))\n+    fn describe(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> Cow<'static, str> {\n+        format!(\"determine object safety of trait `{}`\", tcx.item_path_str(def_id)).into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::is_const_fn_raw<'tcx> {\n-    fn describe(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> String {\n-        format!(\"checking if item is const fn: `{}`\", tcx.item_path_str(def_id))\n+    fn describe(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> Cow<'static, str> {\n+        format!(\"checking if item is const fn: `{}`\", tcx.item_path_str(def_id)).into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::dylib_dependency_formats<'tcx> {\n-    fn describe(_: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"dylib dependency formats of crate\".to_string()\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"dylib dependency formats of crate\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::is_panic_runtime<'tcx> {\n-    fn describe(_: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"checking if the crate is_panic_runtime\".to_string()\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"checking if the crate is_panic_runtime\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::is_compiler_builtins<'tcx> {\n-    fn describe(_: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"checking if the crate is_compiler_builtins\".to_string()\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"checking if the crate is_compiler_builtins\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::has_global_allocator<'tcx> {\n-    fn describe(_: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"checking if the crate has_global_allocator\".to_string()\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"checking if the crate has_global_allocator\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::has_panic_handler<'tcx> {\n-    fn describe(_: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"checking if the crate has_panic_handler\".to_string()\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"checking if the crate has_panic_handler\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::extern_crate<'tcx> {\n-    fn describe(_: TyCtxt<'_, '_, '_>, _: DefId) -> String {\n-        \"getting crate's ExternCrateData\".to_string()\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: DefId) -> Cow<'static, str> {\n+        \"getting crate's ExternCrateData\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::lint_levels<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"computing the lint levels for items in this crate\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"computing the lint levels for items in this crate\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::specializes<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: (DefId, DefId)) -> String {\n-        \"computing whether impls specialize one another\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: (DefId, DefId)) -> Cow<'static, str> {\n+        \"computing whether impls specialize one another\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::in_scope_traits_map<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: DefIndex) -> String {\n-        \"traits in scope at a block\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: DefIndex) -> Cow<'static, str> {\n+        \"traits in scope at a block\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::is_no_builtins<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"test whether a crate has #![no_builtins]\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"test whether a crate has #![no_builtins]\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::panic_strategy<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"query a crate's configured panic strategy\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"query a crate's configured panic strategy\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::is_profiler_runtime<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"query a crate is #![profiler_runtime]\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"query a crate is #![profiler_runtime]\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::is_sanitizer_runtime<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"query a crate is #![sanitizer_runtime]\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"query a crate is #![sanitizer_runtime]\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::reachable_non_generics<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"looking up the exported symbols of a crate\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"looking up the exported symbols of a crate\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::native_libraries<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"looking up the native libraries of a linked crate\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"looking up the native libraries of a linked crate\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::foreign_modules<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"looking up the foreign modules of a linked crate\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"looking up the foreign modules of a linked crate\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::plugin_registrar_fn<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"looking up the plugin registrar for a crate\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"looking up the plugin registrar for a crate\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::derive_registrar_fn<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"looking up the derive registrar for a crate\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"looking up the derive registrar for a crate\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::crate_disambiguator<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"looking up the disambiguator a crate\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"looking up the disambiguator a crate\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::crate_hash<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"looking up the hash a crate\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"looking up the hash a crate\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::original_crate_name<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"looking up the original name a crate\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"looking up the original name a crate\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::extra_filename<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"looking up the extra filename for a crate\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"looking up the extra filename for a crate\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::implementations_of_trait<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: (CrateNum, DefId)) -> String {\n-        \"looking up implementations of a trait in a crate\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: (CrateNum, DefId)) -> Cow<'static, str> {\n+        \"looking up implementations of a trait in a crate\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::all_trait_implementations<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"looking up all (?) trait implementations\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"looking up all (?) trait implementations\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::link_args<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"looking up link arguments for a crate\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"looking up link arguments for a crate\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::resolve_lifetimes<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"resolving lifetimes\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"resolving lifetimes\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::named_region_map<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: DefIndex) -> String {\n-        \"looking up a named region\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: DefIndex) -> Cow<'static, str> {\n+        \"looking up a named region\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::is_late_bound_map<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: DefIndex) -> String {\n-        \"testing if a region is late bound\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: DefIndex) -> Cow<'static, str> {\n+        \"testing if a region is late bound\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::object_lifetime_defaults_map<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: DefIndex) -> String {\n-        \"looking up lifetime defaults for a region\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: DefIndex) -> Cow<'static, str> {\n+        \"looking up lifetime defaults for a region\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::dep_kind<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"fetching what a dependency looks like\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"fetching what a dependency looks like\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::crate_name<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"fetching what a crate is named\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"fetching what a crate is named\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::get_lib_features<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        format!(\"calculating the lib features map\")\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"calculating the lib features map\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::defined_lib_features<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        format!(\"calculating the lib features defined in a crate\")\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"calculating the lib features defined in a crate\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::get_lang_items<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"calculating the lang items map\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"calculating the lang items map\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::defined_lang_items<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"calculating the lang items defined in a crate\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"calculating the lang items defined in a crate\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::missing_lang_items<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"calculating the missing lang items in a crate\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"calculating the missing lang items in a crate\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::visible_parent_map<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"calculating the visible parent map\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"calculating the visible parent map\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::missing_extern_crate_item<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"seeing if we're missing an `extern crate` item for this crate\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"seeing if we're missing an `extern crate` item for this crate\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::used_crate_source<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"looking at the source for a crate\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"looking at the source for a crate\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::postorder_cnums<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"generating a postorder list of CrateNums\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"generating a postorder list of CrateNums\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::maybe_unused_extern_crates<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"looking up all possibly unused extern crates\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"looking up all possibly unused extern crates\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::stability_index<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"calculating the stability index for the local crate\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"calculating the stability index for the local crate\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::all_traits<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"fetching all foreign and local traits\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"fetching all foreign and local traits\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::all_crate_nums<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"fetching all foreign CrateNum instances\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"fetching all foreign CrateNum instances\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::exported_symbols<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"exported_symbols\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"exported_symbols\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::collect_and_partition_mono_items<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"collect_and_partition_mono_items\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"collect_and_partition_mono_items\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::codegen_unit<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: InternedString) -> String {\n-        \"codegen_unit\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: InternedString) -> Cow<'static, str> {\n+        \"codegen_unit\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::output_filenames<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"output_filenames\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"output_filenames\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::vtable_methods<'tcx> {\n-    fn describe(tcx: TyCtxt<'_, '_, '_>, key: ty::PolyTraitRef<'tcx> ) -> String {\n-        format!(\"finding all methods for trait {}\", tcx.item_path_str(key.def_id()))\n+    fn describe(tcx: TyCtxt<'_, '_, '_>, key: ty::PolyTraitRef<'tcx> ) -> Cow<'static, str> {\n+        format!(\"finding all methods for trait {}\", tcx.item_path_str(key.def_id())).into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::features_query<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"looking up enabled feature gates\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"looking up enabled feature gates\".into()\n     }\n }\n \n@@ -776,20 +787,20 @@ impl<'tcx> QueryDescription<'tcx> for queries::optimized_mir<'tcx> {\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::substitute_normalize_and_test_predicates<'tcx> {\n-    fn describe(tcx: TyCtxt<'_, '_, '_>, key: (DefId, &'tcx Substs<'tcx>)) -> String {\n-        format!(\"testing substituted normalized predicates:`{}`\", tcx.item_path_str(key.0))\n+    fn describe(tcx: TyCtxt<'_, '_, '_>, key: (DefId, &'tcx Substs<'tcx>)) -> Cow<'static, str> {\n+        format!(\"testing substituted normalized predicates:`{}`\", tcx.item_path_str(key.0)).into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::target_features_whitelist<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"looking up the whitelist of target features\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"looking up the whitelist of target features\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::instance_def_size_estimate<'tcx> {\n-    fn describe(tcx: TyCtxt<'_, '_, '_>, def: ty::InstanceDef<'tcx>) -> String {\n-        format!(\"estimating size for `{}`\", tcx.item_path_str(def.def_id()))\n+    fn describe(tcx: TyCtxt<'_, '_, '_>, def: ty::InstanceDef<'tcx>) -> Cow<'static, str> {\n+        format!(\"estimating size for `{}`\", tcx.item_path_str(def.def_id())).into()\n     }\n }\n \n@@ -809,26 +820,26 @@ impl<'tcx> QueryDescription<'tcx> for queries::generics_of<'tcx> {\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::program_clauses_for<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: DefId) -> String {\n-        \"generating chalk-style clauses\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: DefId) -> Cow<'static, str> {\n+        \"generating chalk-style clauses\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::program_clauses_for_env<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: ty::ParamEnv<'tcx>) -> String {\n-        \"generating chalk-style clauses for param env\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: ty::ParamEnv<'tcx>) -> Cow<'static, str> {\n+        \"generating chalk-style clauses for param env\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::wasm_import_module_map<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"wasm import module map\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"wasm import module map\".into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::dllimport_foreign_items<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n-        \"wasm import module map\".to_string()\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"wasm import module map\".into()\n     }\n }\n "}, {"sha": "7f5bc35f91f9bbc4a60c14af289903767b664748", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91fc573172c83f9d443da9b54f0361be5266b53f/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fc573172c83f9d443da9b54f0361be5266b53f/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=91fc573172c83f9d443da9b54f0361be5266b53f", "patch": "@@ -56,6 +56,7 @@ use rustc_data_structures::stable_hasher::StableVec;\n use rustc_data_structures::sync::Lrc;\n use rustc_target::spec::PanicStrategy;\n \n+use std::borrow::Cow;\n use std::ops::Deref;\n use std::sync::Arc;\n use syntax_pos::{Span, DUMMY_SP};"}, {"sha": "50eae945a8c4f95bfaab11ee1751c7bf907137b0", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91fc573172c83f9d443da9b54f0361be5266b53f/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fc573172c83f9d443da9b54f0361be5266b53f/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=91fc573172c83f9d443da9b54f0361be5266b53f", "patch": "@@ -733,14 +733,14 @@ macro_rules! define_queries_inner {\n                 }\n             }\n \n-            pub fn describe(&self, tcx: TyCtxt<'_, '_, '_>) -> String {\n+            pub fn describe(&self, tcx: TyCtxt<'_, '_, '_>) -> Cow<'static, str> {\n                 let (r, name) = match *self {\n                     $(Query::$name(key) => {\n                         (queries::$name::describe(tcx, key), stringify!($name))\n                     })*\n                 };\n                 if tcx.sess.verbose() {\n-                    format!(\"{} [{}]\", r, name)\n+                    format!(\"{} [{}]\", r, name).into()\n                 } else {\n                     r\n                 }"}]}