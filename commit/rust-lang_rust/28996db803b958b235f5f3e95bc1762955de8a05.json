{"sha": "28996db803b958b235f5f3e95bc1762955de8a05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4OTk2ZGI4MDNiOTU4YjIzNWY1ZjNlOTViYzE3NjI5NTVkZThhMDU=", "commit": {"author": {"name": "Hunter Praska", "email": "hunter@wiggin-labs.com", "date": "2017-06-18T18:07:09Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-09-27T21:57:07Z"}, "message": "Rename option::Missing to NoneError", "tree": {"sha": "8c1e30cbb2aefad2f51d91c75c06cf2fbeabbce5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c1e30cbb2aefad2f51d91c75c06cf2fbeabbce5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28996db803b958b235f5f3e95bc1762955de8a05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28996db803b958b235f5f3e95bc1762955de8a05", "html_url": "https://github.com/rust-lang/rust/commit/28996db803b958b235f5f3e95bc1762955de8a05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28996db803b958b235f5f3e95bc1762955de8a05/comments", "author": {"login": "huntiep", "id": 28681177, "node_id": "MDQ6VXNlcjI4NjgxMTc3", "avatar_url": "https://avatars.githubusercontent.com/u/28681177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huntiep", "html_url": "https://github.com/huntiep", "followers_url": "https://api.github.com/users/huntiep/followers", "following_url": "https://api.github.com/users/huntiep/following{/other_user}", "gists_url": "https://api.github.com/users/huntiep/gists{/gist_id}", "starred_url": "https://api.github.com/users/huntiep/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huntiep/subscriptions", "organizations_url": "https://api.github.com/users/huntiep/orgs", "repos_url": "https://api.github.com/users/huntiep/repos", "events_url": "https://api.github.com/users/huntiep/events{/privacy}", "received_events_url": "https://api.github.com/users/huntiep/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f63e8de464155e570ed81905ff203557dd02ac9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f63e8de464155e570ed81905ff203557dd02ac9", "html_url": "https://github.com/rust-lang/rust/commit/8f63e8de464155e570ed81905ff203557dd02ac9"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "980ea551f0806a888ce834bcbfbf3b196fffffd6", "filename": "src/libcore/option.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/28996db803b958b235f5f3e95bc1762955de8a05/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28996db803b958b235f5f3e95bc1762955de8a05/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=28996db803b958b235f5f3e95bc1762955de8a05", "patch": "@@ -1124,25 +1124,28 @@ impl<A, V: FromIterator<A>> FromIterator<Option<A>> for Option<V> {\n     }\n }\n \n-/// The equivalent of `Option::None` for a `Result::Err`.\n+/// The error type that results from applying the try operator (`?`) to a `None` value. If you wish\n+/// to allow `x?` (where `x` is an `Option<T>`) to be converted into your error type, you can\n+/// implement `impl From<NoneError>` for `YourErrorType`. In that case, `x?` within a function that\n+/// returns `Result<_, YourErrorType>` will translate a `None` value into an `Err` result.\n #[unstable(feature = \"try_trait\", issue = \"42327\")]\n #[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n-pub struct Missing;\n+pub struct NoneError;\n \n #[unstable(feature = \"try_trait\", issue = \"42327\")]\n impl<T> ops::Try for Option<T> {\n     type Ok = T;\n-    type Error = Missing;\n+    type Error = NoneError;\n \n-    fn into_result(self) -> Result<T, Missing> {\n-        self.ok_or(Missing)\n+    fn into_result(self) -> Result<T, NoneError> {\n+        self.ok_or(NoneError)\n     }\n \n     fn from_ok(v: T) -> Self {\n         Some(v)\n     }\n \n-    fn from_error(_: Missing) -> Self {\n+    fn from_error(_: NoneError) -> Self {\n         None\n     }\n }"}, {"sha": "22109e28edd9b810534dffb3cbf371b77945b5f6", "filename": "src/libcore/tests/option.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/28996db803b958b235f5f3e95bc1762955de8a05/src%2Flibcore%2Ftests%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28996db803b958b235f5f3e95bc1762955de8a05/src%2Flibcore%2Ftests%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Foption.rs?ref=28996db803b958b235f5f3e95bc1762955de8a05", "patch": "@@ -285,15 +285,15 @@ fn test_try() {\n     }\n     assert_eq!(try_option_none(), None);\n \n-    fn try_option_ok() -> Result<u8, Missing> {\n+    fn try_option_ok() -> Result<u8, NoneError> {\n         let val = Some(1)?;\n         Ok(val)\n     }\n     assert_eq!(try_option_ok(), Ok(1));\n \n-    fn try_option_err() -> Result<u8, Missing> {\n+    fn try_option_err() -> Result<u8, NoneError> {\n         let val = None?;\n         Ok(val)\n     }\n-    assert_eq!(try_option_err(), Err(Missing));\n+    assert_eq!(try_option_err(), Err(NoneError));\n }"}, {"sha": "ce41bde8342edbbe2784cc4dc6a695d77a0a6d6f", "filename": "src/libcore/tests/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28996db803b958b235f5f3e95bc1762955de8a05/src%2Flibcore%2Ftests%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28996db803b958b235f5f3e95bc1762955de8a05/src%2Flibcore%2Ftests%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fresult.rs?ref=28996db803b958b235f5f3e95bc1762955de8a05", "patch": "@@ -214,7 +214,7 @@ fn test_try() {\n     assert_eq!(try_result_some(), Some(1));\n \n     fn try_result_none() -> Option<u8> {\n-        let val = Err(Missing)?;\n+        let val = Err(NoneError)?;\n         Some(val)\n     }\n     assert_eq!(try_result_none(), None);"}]}