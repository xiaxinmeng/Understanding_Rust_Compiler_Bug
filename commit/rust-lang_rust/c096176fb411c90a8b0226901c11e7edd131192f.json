{"sha": "c096176fb411c90a8b0226901c11e7edd131192f", "node_id": "C_kwDOAAsO6NoAKGMwOTYxNzZmYjQxMWM5MGE4YjAyMjY5MDFjMTFlN2VkZDEzMTE5MmY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-25T14:47:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-25T14:47:12Z"}, "message": "Auto merge of #92227 - Kobzol:rustdoc-doc-hidden, r=jyn514\n\nRustdoc: use `is_doc_hidden` method on more places\n\nWhile profiling `rustdoc`, I noticed that finding out if some item is marked with `#[doc(hidden)]` is relatively hot, so I tried to optimize it.\n\nI noticed that there is already a method called `is_doc_hidden` on `TyCtxt`, but it wasn't used much, so I replaced the manual calls to `attrs(...).has_word(...)` with this method. Just by doing that, perf. was improved locally, although I'm not sure if the semantics of the previous calls and this method are the same?\n\nAs another step, I tried to querify `is_doc_hidden`, but I didn't include that here until we see the perf. results from the first commit and until I find whether this change is OK at all :)\n\nCan I ask for a perf. run? Thanks.\n\nr? `@jyn514`", "tree": {"sha": "1a0c79a7cd1f22621a97c69149a7feb04818b6ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a0c79a7cd1f22621a97c69149a7feb04818b6ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c096176fb411c90a8b0226901c11e7edd131192f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c096176fb411c90a8b0226901c11e7edd131192f", "html_url": "https://github.com/rust-lang/rust/commit/c096176fb411c90a8b0226901c11e7edd131192f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c096176fb411c90a8b0226901c11e7edd131192f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67491a22dbafc275b1549c31876c1fd356bd51cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/67491a22dbafc275b1549c31876c1fd356bd51cc", "html_url": "https://github.com/rust-lang/rust/commit/67491a22dbafc275b1549c31876c1fd356bd51cc"}, {"sha": "0ec3199b0aafd9a486d4dd8dda39479536aa6934", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ec3199b0aafd9a486d4dd8dda39479536aa6934", "html_url": "https://github.com/rust-lang/rust/commit/0ec3199b0aafd9a486d4dd8dda39479536aa6934"}], "stats": {"total": 23, "additions": 7, "deletions": 16}, "files": [{"sha": "5da20953bf2e30e4a8bcc2f9a8eb43d9b796a4f0", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c096176fb411c90a8b0226901c11e7edd131192f/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c096176fb411c90a8b0226901c11e7edd131192f/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=c096176fb411c90a8b0226901c11e7edd131192f", "patch": "@@ -17,7 +17,7 @@ use rustc_span::symbol::{kw, sym, Symbol};\n \n use crate::clean::{\n     self, clean_fn_decl_from_did_and_sig, clean_ty_generics, utils, Attributes, AttributesExt,\n-    Clean, ImplKind, ItemId, NestedAttributesExt, Type, Visibility,\n+    Clean, ImplKind, ItemId, Type, Visibility,\n };\n use crate::core::DocContext;\n use crate::formats::item_type::ItemType;\n@@ -421,7 +421,7 @@ crate fn build_impl(\n                                 associated_trait.def_id,\n                             )\n                             .unwrap(); // SAFETY: For all impl items there exists trait item that has the same name.\n-                        !tcx.get_attrs(trait_item.def_id).lists(sym::doc).has_word(sym::hidden)\n+                        !tcx.is_doc_hidden(trait_item.def_id)\n                     } else {\n                         true\n                     }\n@@ -456,7 +456,7 @@ crate fn build_impl(\n     let mut stack: Vec<&Type> = vec![&for_];\n \n     if let Some(did) = trait_.as_ref().map(|t| t.def_id()) {\n-        if tcx.get_attrs(did).lists(sym::doc).has_word(sym::hidden) {\n+        if tcx.is_doc_hidden(did) {\n             return;\n         }\n     }\n@@ -466,7 +466,7 @@ crate fn build_impl(\n \n     while let Some(ty) = stack.pop() {\n         if let Some(did) = ty.def_id(&cx.cache) {\n-            if tcx.get_attrs(did).lists(sym::doc).has_word(sym::hidden) {\n+            if tcx.is_doc_hidden(did) {\n                 return;\n             }\n         }"}, {"sha": "5884fdc715ab8691246cd4b22db96f61c7e92171", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c096176fb411c90a8b0226901c11e7edd131192f/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c096176fb411c90a8b0226901c11e7edd131192f/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=c096176fb411c90a8b0226901c11e7edd131192f", "patch": "@@ -47,7 +47,7 @@ crate fn collect_trait_impls(mut krate: Crate, cx: &mut DocContext<'_>) -> Crate\n                 inline::build_impl(cx, None, def_id, None, &mut new_items);\n \n                 // FIXME(eddyb) is this `doc(hidden)` check needed?\n-                if !cx.tcx.get_attrs(def_id).lists(sym::doc).has_word(sym::hidden) {\n+                if !cx.tcx.is_doc_hidden(def_id) {\n                     let impls = get_auto_trait_and_blanket_impls(cx, def_id);\n                     new_items.extend(impls.filter(|i| cx.inlined.insert(i.def_id)));\n                 }\n@@ -176,13 +176,7 @@ impl<'a, 'tcx> DocVisitor for SyntheticImplCollector<'a, 'tcx> {\n     fn visit_item(&mut self, i: &Item) {\n         if i.is_struct() || i.is_enum() || i.is_union() {\n             // FIXME(eddyb) is this `doc(hidden)` check needed?\n-            if !self\n-                .cx\n-                .tcx\n-                .get_attrs(i.def_id.expect_def_id())\n-                .lists(sym::doc)\n-                .has_word(sym::hidden)\n-            {\n+            if !self.cx.tcx.is_doc_hidden(i.def_id.expect_def_id()) {\n                 self.impls\n                     .extend(get_auto_trait_and_blanket_impls(self.cx, i.def_id.expect_def_id()));\n             }"}, {"sha": "ce94f06d574e17c2407a017925c4d17d3fd7d697", "filename": "src/librustdoc/visit_lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c096176fb411c90a8b0226901c11e7edd131192f/src%2Flibrustdoc%2Fvisit_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c096176fb411c90a8b0226901c11e7edd131192f/src%2Flibrustdoc%2Fvisit_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_lib.rs?ref=c096176fb411c90a8b0226901c11e7edd131192f", "patch": "@@ -3,9 +3,6 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX};\n use rustc_middle::middle::privacy::{AccessLevel, AccessLevels};\n use rustc_middle::ty::TyCtxt;\n-use rustc_span::symbol::sym;\n-\n-use crate::clean::{AttributesExt, NestedAttributesExt};\n \n // FIXME: this may not be exhaustive, but is sufficient for rustdocs current uses\n \n@@ -39,7 +36,7 @@ impl<'a, 'tcx> LibEmbargoVisitor<'a, 'tcx> {\n \n     // Updates node level and returns the updated level\n     fn update(&mut self, did: DefId, level: Option<AccessLevel>) -> Option<AccessLevel> {\n-        let is_hidden = self.tcx.get_attrs(did).lists(sym::doc).has_word(sym::hidden);\n+        let is_hidden = self.tcx.is_doc_hidden(did);\n \n         let old_level = self.access_levels.map.get(&did).cloned();\n         // Accessibility levels can only grow"}]}