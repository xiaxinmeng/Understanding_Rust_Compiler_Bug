{"sha": "5227b684935322f6febf5d4261e1a30cd6fdf848", "node_id": "C_kwDOAAsO6NoAKDUyMjdiNjg0OTM1MzIyZjZmZWJmNWQ0MjYxZTFhMzBjZDZmZGY4NDg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-25T20:58:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-25T20:58:01Z"}, "message": "Rollup merge of #111929 - compiler-errors:no-newline-apit, r=wesleywiser\n\nDon't print newlines in APITs\n\nThis is kind of a hack, but it gets the job done because the only \"special\" formatting that (afaict) `rustc_ast_pretty` does is break with newlines sometimes.\n\nFixes rust-lang/measureme#207", "tree": {"sha": "e3b0e92c81f31ce75e488930a31b03f612df1428", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3b0e92c81f31ce75e488930a31b03f612df1428"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5227b684935322f6febf5d4261e1a30cd6fdf848", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkb8vZCRBK7hj4Ov3rIwAA74gIAJ7lQj0+ma0ej3DLhOI9X356\nhxggCiPuJsK0vxcRK2fwa5Dki1Yzc7yryLfgWz6vIX0s1NaPrvowvJZAWm+OAw3u\nWMXM0knMlesZ72LxBwSum7PBjpOpfHK7l7hCCz2ckZ26emfS9tDrnsxfQ/lA1NLv\n7PiZNwrRuT53/tHrOwcpgtob7fZszQveRzG6/188xwonFhvSw4pqVYGgjXiuWkkw\nwtpsTb1aySReDZevZETUppFAxoEQwmHY3G2x+ggCKK2XX6LN79Ub01iAA3XZ8zjO\nBba4TToKQ1KGKV7briSF0X/6mxv5ZTD9yfifFj4aVqyEkyoJIcG/UGTO3rE7AqQ=\n=8exk\n-----END PGP SIGNATURE-----\n", "payload": "tree e3b0e92c81f31ce75e488930a31b03f612df1428\nparent dbdb509467d10f4b0f73b4a876759ce7b2248690\nparent 46923753890f04d12e1d9d230c6eb3b8af28bf40\nauthor Michael Goulet <michael@errs.io> 1685048281 -0700\ncommitter GitHub <noreply@github.com> 1685048281 -0700\n\nRollup merge of #111929 - compiler-errors:no-newline-apit, r=wesleywiser\n\nDon't print newlines in APITs\n\nThis is kind of a hack, but it gets the job done because the only \"special\" formatting that (afaict) `rustc_ast_pretty` does is break with newlines sometimes.\n\nFixes rust-lang/measureme#207\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5227b684935322f6febf5d4261e1a30cd6fdf848", "html_url": "https://github.com/rust-lang/rust/commit/5227b684935322f6febf5d4261e1a30cd6fdf848", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5227b684935322f6febf5d4261e1a30cd6fdf848/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbdb509467d10f4b0f73b4a876759ce7b2248690", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbdb509467d10f4b0f73b4a876759ce7b2248690", "html_url": "https://github.com/rust-lang/rust/commit/dbdb509467d10f4b0f73b4a876759ce7b2248690"}, {"sha": "46923753890f04d12e1d9d230c6eb3b8af28bf40", "url": "https://api.github.com/repos/rust-lang/rust/commits/46923753890f04d12e1d9d230c6eb3b8af28bf40", "html_url": "https://github.com/rust-lang/rust/commit/46923753890f04d12e1d9d230c6eb3b8af28bf40"}], "stats": {"total": 55, "additions": 54, "deletions": 1}, "files": [{"sha": "8d4f96639efbd0d64a6553311d72b385bf900a88", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5227b684935322f6febf5d4261e1a30cd6fdf848/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5227b684935322f6febf5d4261e1a30cd6fdf848/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=5227b684935322f6febf5d4261e1a30cd6fdf848", "patch": "@@ -1425,7 +1425,16 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             DefPathData::ImplTrait,\n                             span,\n                         );\n-                        let ident = Ident::from_str_and_span(&pprust::ty_to_string(t), span);\n+\n+                        // HACK: pprust breaks strings with newlines when the type\n+                        // gets too long. We don't want these to show up in compiler\n+                        // output or built artifacts, so replace them here...\n+                        // Perhaps we should instead format APITs more robustly.\n+                        let ident = Ident::from_str_and_span(\n+                            &pprust::ty_to_string(t).replace('\\n', \" \"),\n+                            span,\n+                        );\n+\n                         let (param, bounds, path) = self.lower_universal_param_and_bounds(\n                             *def_node_id,\n                             span,"}, {"sha": "8ef9281c9d3d76d0df0b5e006c1f4355a406bfdc", "filename": "tests/ui/impl-trait/arg-position-impl-trait-too-long.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5227b684935322f6febf5d4261e1a30cd6fdf848/tests%2Fui%2Fimpl-trait%2Farg-position-impl-trait-too-long.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5227b684935322f6febf5d4261e1a30cd6fdf848/tests%2Fui%2Fimpl-trait%2Farg-position-impl-trait-too-long.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Farg-position-impl-trait-too-long.rs?ref=5227b684935322f6febf5d4261e1a30cd6fdf848", "patch": "@@ -0,0 +1,22 @@\n+struct Header;\n+struct EntryMetadata;\n+struct Entry<A, B>(A, B);\n+\n+trait Tr {\n+    type EncodedKey;\n+    type EncodedValue;\n+}\n+\n+fn test<C: Tr, R>(\n+    // This APIT is long, however we shouldn't render the type name with a newline in it.\n+    y: impl FnOnce(\n+        &mut Header,\n+        &mut [EntryMetadata],\n+        &mut [Entry<C::EncodedKey, C::EncodedValue>]\n+    ) -> R,\n+) {\n+    let () = y;\n+    //~^ ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "40446a3d339a7222ea8ae2c6bb5c2f42768a7995", "filename": "tests/ui/impl-trait/arg-position-impl-trait-too-long.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5227b684935322f6febf5d4261e1a30cd6fdf848/tests%2Fui%2Fimpl-trait%2Farg-position-impl-trait-too-long.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5227b684935322f6febf5d4261e1a30cd6fdf848/tests%2Fui%2Fimpl-trait%2Farg-position-impl-trait-too-long.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Farg-position-impl-trait-too-long.stderr?ref=5227b684935322f6febf5d4261e1a30cd6fdf848", "patch": "@@ -0,0 +1,22 @@\n+error[E0308]: mismatched types\n+  --> $DIR/arg-position-impl-trait-too-long.rs:18:9\n+   |\n+LL |       y: impl FnOnce(\n+   |  ________-\n+LL | |         &mut Header,\n+LL | |         &mut [EntryMetadata],\n+LL | |         &mut [Entry<C::EncodedKey, C::EncodedValue>]\n+LL | |     ) -> R,\n+   | |__________- this type parameter\n+LL |   ) {\n+LL |       let () = y;\n+   |           ^^   - this expression has type `impl FnOnce(&mut Header, &mut [EntryMetadata], &mut [Entry<C::EncodedKey, C::EncodedValue>]) -> R`\n+   |           |\n+   |           expected type parameter `impl FnOnce(&mut Header, &mut [EntryMetadata], &mut [Entry<C::EncodedKey, C::EncodedValue>]) -> R`, found `()`\n+   |\n+   = note: expected type parameter `impl FnOnce(&mut Header, &mut [EntryMetadata], &mut [Entry<C::EncodedKey, C::EncodedValue>]) -> R`\n+                   found unit type `()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}