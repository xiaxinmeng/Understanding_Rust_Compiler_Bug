{"sha": "8217138f445e128f3bd4e4f517ac989d2abb621f", "node_id": "C_kwDOAAsO6NoAKDgyMTcxMzhmNDQ1ZTEyOGYzYmQ0ZTRmNTE3YWM5ODlkMmFiYjYyMWY", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2021-12-21T18:13:41Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2021-12-21T18:13:41Z"}, "message": "RawVec: don't recompute capacity after allocating.\n\nCurrently it sets the capacity to `ptr.len() / mem::size_of::<T>()`\nafter any buffer allocation/reallocation. This would be useful if\nallocators ever returned a `NonNull<[u8]>` with a size larger than\nrequested. But this never happens, so it's not useful.\n\nRemoving this slightly reduces the size of generated LLVM IR, and\nslightly speeds up the hot path of `RawVec` growth.", "tree": {"sha": "9edcc44f958c5eb4f0d2fc1e93ddf6ddc761bdd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9edcc44f958c5eb4f0d2fc1e93ddf6ddc761bdd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8217138f445e128f3bd4e4f517ac989d2abb621f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8217138f445e128f3bd4e4f517ac989d2abb621f", "html_url": "https://github.com/rust-lang/rust/commit/8217138f445e128f3bd4e4f517ac989d2abb621f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8217138f445e128f3bd4e4f517ac989d2abb621f/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e95e084a14870a718c712936ab5a8f8cd0159485", "url": "https://api.github.com/repos/rust-lang/rust/commits/e95e084a14870a718c712936ab5a8f8cd0159485", "html_url": "https://github.com/rust-lang/rust/commit/e95e084a14870a718c712936ab5a8f8cd0159485"}], "stats": {"total": 35, "additions": 18, "deletions": 17}, "files": [{"sha": "3806bc546ee7b522f90104c77ffd8b03b6a1b12c", "filename": "library/alloc/src/raw_vec.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8217138f445e128f3bd4e4f517ac989d2abb621f/library%2Falloc%2Fsrc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8217138f445e128f3bd4e4f517ac989d2abb621f/library%2Falloc%2Fsrc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fraw_vec.rs?ref=8217138f445e128f3bd4e4f517ac989d2abb621f", "patch": "@@ -190,9 +190,12 @@ impl<T, A: Allocator> RawVec<T, A> {\n                 Err(_) => handle_alloc_error(layout),\n             };\n \n+            // Allocators currently return a `NonNull<[u8]>` whose length\n+            // matches the size requested. If that ever changes, the capacity\n+            // here should change to `ptr.len() / mem::size_of::<T>()`.\n             Self {\n                 ptr: unsafe { Unique::new_unchecked(ptr.cast().as_ptr()) },\n-                cap: Self::capacity_from_bytes(ptr.len()),\n+                cap: capacity,\n                 alloc,\n             }\n         }\n@@ -337,7 +340,7 @@ impl<T, A: Allocator> RawVec<T, A> {\n         if self.needs_to_grow(len, additional) { self.grow_exact(len, additional) } else { Ok(()) }\n     }\n \n-    /// Shrinks the allocation down to the specified amount. If the given amount\n+    /// Shrinks the buffer down to the specified capacity. If the given amount\n     /// is 0, actually completely deallocates.\n     ///\n     /// # Panics\n@@ -348,8 +351,8 @@ impl<T, A: Allocator> RawVec<T, A> {\n     ///\n     /// Aborts on OOM.\n     #[cfg(not(no_global_oom_handling))]\n-    pub fn shrink_to_fit(&mut self, amount: usize) {\n-        handle_reserve(self.shrink(amount));\n+    pub fn shrink_to_fit(&mut self, cap: usize) {\n+        handle_reserve(self.shrink(cap));\n     }\n }\n \n@@ -360,14 +363,12 @@ impl<T, A: Allocator> RawVec<T, A> {\n         additional > self.capacity().wrapping_sub(len)\n     }\n \n-    fn capacity_from_bytes(excess: usize) -> usize {\n-        debug_assert_ne!(mem::size_of::<T>(), 0);\n-        excess / mem::size_of::<T>()\n-    }\n-\n-    fn set_ptr(&mut self, ptr: NonNull<[u8]>) {\n+    fn set_ptr_and_cap(&mut self, ptr: NonNull<[u8]>, cap: usize) {\n+        // Allocators currently return a `NonNull<[u8]>` whose length matches\n+        // the size requested. If that ever changes, the capacity here should\n+        // change to `ptr.len() / mem::size_of::<T>()`.\n         self.ptr = unsafe { Unique::new_unchecked(ptr.cast().as_ptr()) };\n-        self.cap = Self::capacity_from_bytes(ptr.len());\n+        self.cap = cap;\n     }\n \n     // This method is usually instantiated many times. So we want it to be as\n@@ -399,7 +400,7 @@ impl<T, A: Allocator> RawVec<T, A> {\n \n         // `finish_grow` is non-generic over `T`.\n         let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;\n-        self.set_ptr(ptr);\n+        self.set_ptr_and_cap(ptr, cap);\n         Ok(())\n     }\n \n@@ -418,23 +419,23 @@ impl<T, A: Allocator> RawVec<T, A> {\n \n         // `finish_grow` is non-generic over `T`.\n         let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;\n-        self.set_ptr(ptr);\n+        self.set_ptr_and_cap(ptr, cap);\n         Ok(())\n     }\n \n-    fn shrink(&mut self, amount: usize) -> Result<(), TryReserveError> {\n-        assert!(amount <= self.capacity(), \"Tried to shrink to a larger capacity\");\n+    fn shrink(&mut self, cap: usize) -> Result<(), TryReserveError> {\n+        assert!(cap <= self.capacity(), \"Tried to shrink to a larger capacity\");\n \n         let (ptr, layout) = if let Some(mem) = self.current_memory() { mem } else { return Ok(()) };\n-        let new_size = amount * mem::size_of::<T>();\n+        let new_size = cap * mem::size_of::<T>();\n \n         let ptr = unsafe {\n             let new_layout = Layout::from_size_align_unchecked(new_size, layout.align());\n             self.alloc\n                 .shrink(ptr, layout, new_layout)\n                 .map_err(|_| AllocError { layout: new_layout, non_exhaustive: () })?\n         };\n-        self.set_ptr(ptr);\n+        self.set_ptr_and_cap(ptr, cap);\n         Ok(())\n     }\n }"}]}