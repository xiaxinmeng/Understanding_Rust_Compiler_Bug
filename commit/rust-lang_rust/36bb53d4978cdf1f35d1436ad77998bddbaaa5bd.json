{"sha": "36bb53d4978cdf1f35d1436ad77998bddbaaa5bd", "node_id": "C_kwDOAAsO6NoAKDM2YmI1M2Q0OTc4Y2RmMWYzNWQxNDM2YWQ3Nzk5OGJkZGJhYWE1YmQ", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2022-03-07T10:31:16Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2022-03-07T12:57:56Z"}, "message": "BTree: remove dead data needlessly complicating insert", "tree": {"sha": "e3bab3e965c7af0b91a4d51298cea4f530fb4d5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3bab3e965c7af0b91a4d51298cea4f530fb4d5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36bb53d4978cdf1f35d1436ad77998bddbaaa5bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36bb53d4978cdf1f35d1436ad77998bddbaaa5bd", "html_url": "https://github.com/rust-lang/rust/commit/36bb53d4978cdf1f35d1436ad77998bddbaaa5bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36bb53d4978cdf1f35d1436ad77998bddbaaa5bd/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "297273c45b205820a4c055082c71677197a40b55", "url": "https://api.github.com/repos/rust-lang/rust/commits/297273c45b205820a4c055082c71677197a40b55", "html_url": "https://github.com/rust-lang/rust/commit/297273c45b205820a4c055082c71677197a40b55"}], "stats": {"total": 59, "additions": 19, "deletions": 40}, "files": [{"sha": "66608d09082d77363f10718a13cfa74f4e68a8c1", "filename": "library/alloc/src/collections/btree/map/entry.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36bb53d4978cdf1f35d1436ad77998bddbaaa5bd/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36bb53d4978cdf1f35d1436ad77998bddbaaa5bd/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs?ref=36bb53d4978cdf1f35d1436ad77998bddbaaa5bd", "patch": "@@ -3,7 +3,7 @@ use core::marker::PhantomData;\n use core::mem;\n \n use super::super::borrow::DormantMutRef;\n-use super::super::node::{marker, Handle, InsertResult::*, NodeRef};\n+use super::super::node::{marker, Handle, NodeRef};\n use super::BTreeMap;\n \n use Entry::*;\n@@ -313,13 +313,13 @@ impl<'a, K: Ord, V> VacantEntry<'a, K, V> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn insert(self, value: V) -> &'a mut V {\n         let out_ptr = match self.handle.insert_recursing(self.key, value) {\n-            (Fit(_), val_ptr) => {\n+            (None, val_ptr) => {\n                 // SAFETY: We have consumed self.handle and the handle returned.\n                 let map = unsafe { self.dormant_map.awaken() };\n                 map.length += 1;\n                 val_ptr\n             }\n-            (Split(ins), val_ptr) => {\n+            (Some(ins), val_ptr) => {\n                 drop(ins.left);\n                 // SAFETY: We have consumed self.handle and the reference returned.\n                 let map = unsafe { self.dormant_map.awaken() };"}, {"sha": "44f5bc850b8527c61482e5e1da3957d5b4d9196b", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 16, "deletions": 37, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/36bb53d4978cdf1f35d1436ad77998bddbaaa5bd/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36bb53d4978cdf1f35d1436ad77998bddbaaa5bd/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=36bb53d4978cdf1f35d1436ad77998bddbaaa5bd", "patch": "@@ -861,11 +861,10 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, mark\n     /// this edge. This method splits the node if there isn't enough room.\n     ///\n     /// The returned pointer points to the inserted value.\n-    fn insert(mut self, key: K, val: V) -> (InsertResult<'a, K, V, marker::Leaf>, *mut V) {\n+    fn insert(mut self, key: K, val: V) -> (Option<SplitResult<'a, K, V, marker::Leaf>>, *mut V) {\n         if self.node.len() < CAPACITY {\n             let val_ptr = self.insert_fit(key, val);\n-            let kv = unsafe { Handle::new_kv(self.node, self.idx) };\n-            (InsertResult::Fit(kv), val_ptr)\n+            (None, val_ptr)\n         } else {\n             let (middle_kv_idx, insertion) = splitpoint(self.idx);\n             let middle = unsafe { Handle::new_kv(self.node, middle_kv_idx) };\n@@ -879,7 +878,7 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, mark\n                 },\n             };\n             let val_ptr = insertion_edge.insert_fit(key, val);\n-            (InsertResult::Split(result), val_ptr)\n+            (Some(result), val_ptr)\n         }\n     }\n }\n@@ -923,13 +922,12 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>,\n         key: K,\n         val: V,\n         edge: Root<K, V>,\n-    ) -> InsertResult<'a, K, V, marker::Internal> {\n+    ) -> Option<SplitResult<'a, K, V, marker::Internal>> {\n         assert!(edge.height == self.node.height - 1);\n \n         if self.node.len() < CAPACITY {\n             self.insert_fit(key, val, edge);\n-            let kv = unsafe { Handle::new_kv(self.node, self.idx) };\n-            InsertResult::Fit(kv)\n+            None\n         } else {\n             let (middle_kv_idx, insertion) = splitpoint(self.idx);\n             let middle = unsafe { Handle::new_kv(self.node, middle_kv_idx) };\n@@ -943,7 +941,7 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>,\n                 },\n             };\n             insertion_edge.insert_fit(key, val, edge);\n-            InsertResult::Split(result)\n+            Some(result)\n         }\n     }\n }\n@@ -953,32 +951,26 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, mark\n     /// this edge. This method splits the node if there isn't enough room, and tries to\n     /// insert the split off portion into the parent node recursively, until the root is reached.\n     ///\n-    /// If the returned result is a `Fit`, its handle's node can be this edge's node or an ancestor.\n-    /// If the returned result is a `Split`, the `left` field will be the root node.\n-    /// The returned pointer points to the inserted value.\n+    /// If the returned result is some `SplitResult`, the `left` field will be the root node.\n+    /// The returned pointer points to the inserted value, which in the case of `SplitResult`\n+    /// is in the `left` or `right` tree.\n     pub fn insert_recursing(\n         self,\n         key: K,\n         value: V,\n-    ) -> (InsertResult<'a, K, V, marker::LeafOrInternal>, *mut V) {\n+    ) -> (Option<SplitResult<'a, K, V, marker::LeafOrInternal>>, *mut V) {\n         let (mut split, val_ptr) = match self.insert(key, value) {\n-            (InsertResult::Fit(handle), ptr) => {\n-                return (InsertResult::Fit(handle.forget_node_type()), ptr);\n-            }\n-            (InsertResult::Split(split), val_ptr) => (split.forget_node_type(), val_ptr),\n+            (None, val_ptr) => return (None, val_ptr),\n+            (Some(split), val_ptr) => (split.forget_node_type(), val_ptr),\n         };\n \n         loop {\n             split = match split.left.ascend() {\n                 Ok(parent) => match parent.insert(split.kv.0, split.kv.1, split.right) {\n-                    InsertResult::Fit(handle) => {\n-                        return (InsertResult::Fit(handle.forget_node_type()), val_ptr);\n-                    }\n-                    InsertResult::Split(split) => split.forget_node_type(),\n+                    None => return (None, val_ptr),\n+                    Some(split) => split.forget_node_type(),\n                 },\n-                Err(root) => {\n-                    return (InsertResult::Split(SplitResult { left: root, ..split }), val_ptr);\n-                }\n+                Err(root) => return (Some(SplitResult { left: root, ..split }), val_ptr),\n             };\n         }\n     }\n@@ -1529,14 +1521,6 @@ impl<BorrowType, K, V> Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::K\n     }\n }\n \n-impl<BorrowType, K, V> Handle<NodeRef<BorrowType, K, V, marker::Internal>, marker::KV> {\n-    pub fn forget_node_type(\n-        self,\n-    ) -> Handle<NodeRef<BorrowType, K, V, marker::LeafOrInternal>, marker::KV> {\n-        unsafe { Handle::new_kv(self.node.forget_type(), self.idx) }\n-    }\n-}\n-\n impl<BorrowType, K, V, Type> Handle<NodeRef<BorrowType, K, V, marker::LeafOrInternal>, Type> {\n     /// Checks whether the underlying node is an `Internal` node or a `Leaf` node.\n     pub fn force(\n@@ -1621,7 +1605,7 @@ pub enum ForceResult<Leaf, Internal> {\n pub struct SplitResult<'a, K, V, NodeType> {\n     // Altered node in existing tree with elements and edges that belong to the left of `kv`.\n     pub left: NodeRef<marker::Mut<'a>, K, V, NodeType>,\n-    // Some key and value split off, to be inserted elsewhere.\n+    // Some key and value that existed before and were split off, to be inserted elsewhere.\n     pub kv: (K, V),\n     // Owned, unattached, new node with elements and edges that belong to the right of `kv`.\n     pub right: NodeRef<marker::Owned, K, V, NodeType>,\n@@ -1639,11 +1623,6 @@ impl<'a, K, V> SplitResult<'a, K, V, marker::Internal> {\n     }\n }\n \n-pub enum InsertResult<'a, K, V, NodeType> {\n-    Fit(Handle<NodeRef<marker::Mut<'a>, K, V, NodeType>, marker::KV>),\n-    Split(SplitResult<'a, K, V, NodeType>),\n-}\n-\n pub mod marker {\n     use core::marker::PhantomData;\n "}]}