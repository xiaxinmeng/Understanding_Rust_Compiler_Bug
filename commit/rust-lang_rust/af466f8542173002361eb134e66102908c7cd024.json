{"sha": "af466f8542173002361eb134e66102908c7cd024", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNDY2Zjg1NDIxNzMwMDIzNjFlYjEzNGU2NjEwMjkwOGM3Y2QwMjQ=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-03-14T16:25:29Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-03-14T16:31:08Z"}, "message": "Make Ty wrap TyKind in an Arc\n\n... like it will be in Chalk. We still keep `interned_mut` and\n`into_inner` methods that will probably not exist with Chalk.\n\nThis worsens performance slightly (5ginstr inference on RA), but doesn't\ninclude other simplifications we can do yet.", "tree": {"sha": "75a970fa98bf1f67ae390ae5b6a71d09fd963641", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75a970fa98bf1f67ae390ae5b6a71d09fd963641"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af466f8542173002361eb134e66102908c7cd024", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af466f8542173002361eb134e66102908c7cd024", "html_url": "https://github.com/rust-lang/rust/commit/af466f8542173002361eb134e66102908c7cd024", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af466f8542173002361eb134e66102908c7cd024/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "195414783402d6973f4e673e84be9b7bc19cbfa6", "url": "https://api.github.com/repos/rust-lang/rust/commits/195414783402d6973f4e673e84be9b7bc19cbfa6", "html_url": "https://github.com/rust-lang/rust/commit/195414783402d6973f4e673e84be9b7bc19cbfa6"}], "stats": {"total": 80, "additions": 53, "deletions": 27}, "files": [{"sha": "6dfe539024397cb0dd01b5791fa5ea3bcc5960fa", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/af466f8542173002361eb134e66102908c7cd024/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af466f8542173002361eb134e66102908c7cd024/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=af466f8542173002361eb134e66102908c7cd024", "patch": "@@ -108,6 +108,17 @@ pub struct TypeMismatch {\n     pub actual: Ty,\n }\n \n+#[derive(Clone, PartialEq, Eq, Debug)]\n+struct InternedStandardTypes {\n+    unknown: Ty,\n+}\n+\n+impl Default for InternedStandardTypes {\n+    fn default() -> Self {\n+        InternedStandardTypes { unknown: TyKind::Unknown.intern(&Interner) }\n+    }\n+}\n+\n /// The result of type inference: A mapping from expressions and patterns to types.\n #[derive(Clone, PartialEq, Eq, Debug, Default)]\n pub struct InferenceResult {\n@@ -126,6 +137,8 @@ pub struct InferenceResult {\n     pub type_of_expr: ArenaMap<ExprId, Ty>,\n     pub type_of_pat: ArenaMap<PatId, Ty>,\n     pub(super) type_mismatches: ArenaMap<ExprId, TypeMismatch>,\n+    /// Interned Unknown to return references to.\n+    standard_types: InternedStandardTypes,\n }\n \n impl InferenceResult {\n@@ -170,15 +183,15 @@ impl Index<ExprId> for InferenceResult {\n     type Output = Ty;\n \n     fn index(&self, expr: ExprId) -> &Ty {\n-        self.type_of_expr.get(expr).unwrap_or(&Ty(TyKind::Unknown))\n+        self.type_of_expr.get(expr).unwrap_or(&self.standard_types.unknown)\n     }\n }\n \n impl Index<PatId> for InferenceResult {\n     type Output = Ty;\n \n     fn index(&self, pat: PatId) -> &Ty {\n-        self.type_of_pat.get(pat).unwrap_or(&Ty(TyKind::Unknown))\n+        self.type_of_pat.get(pat).unwrap_or(&self.standard_types.unknown)\n     }\n }\n \n@@ -723,14 +736,19 @@ impl Expectation {\n \n     /// This expresses no expectation on the type.\n     fn none() -> Self {\n-        Expectation { ty: TyKind::Unknown.intern(&Interner), rvalue_hint: false }\n+        Expectation {\n+            // FIXME\n+            ty: TyKind::Unknown.intern(&Interner),\n+            rvalue_hint: false,\n+        }\n     }\n \n-    fn coercion_target(&self) -> &Ty {\n+    fn coercion_target(&self) -> Ty {\n         if self.rvalue_hint {\n-            &Ty(TyKind::Unknown)\n+            // FIXME\n+            TyKind::Unknown.intern(&Interner)\n         } else {\n-            &self.ty\n+            self.ty.clone()\n         }\n     }\n }"}, {"sha": "435f7d0db1219329675e213c022cd06af664fe50", "filename": "crates/hir_ty/src/infer/coerce.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af466f8542173002361eb134e66102908c7cd024/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af466f8542173002361eb134e66102908c7cd024/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=af466f8542173002361eb134e66102908c7cd024", "patch": "@@ -71,7 +71,7 @@ impl<'a> InferenceContext<'a> {\n         }\n \n         // Pointer weakening and function to pointer\n-        match (&mut from_ty.0, to_ty.interned(&Interner)) {\n+        match (from_ty.interned_mut(), to_ty.interned(&Interner)) {\n             // `*mut T` -> `*const T`\n             // `&mut T` -> `&T`\n             (TyKind::Raw(m1, ..), TyKind::Raw(m2 @ Mutability::Not, ..))"}, {"sha": "e9ca2b86f58515afbbc2d92dafc1e65284dbd9cb", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af466f8542173002361eb134e66102908c7cd024/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af466f8542173002361eb134e66102908c7cd024/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=af466f8542173002361eb134e66102908c7cd024", "patch": "@@ -800,7 +800,7 @@ impl<'a> InferenceContext<'a> {\n                 // we don't even make an attempt at coercion\n                 self.table.new_maybe_never_var()\n             } else {\n-                self.coerce(&Ty::unit(), expected.coercion_target());\n+                self.coerce(&Ty::unit(), &expected.coercion_target());\n                 Ty::unit()\n             }\n         };"}, {"sha": "2e812ab947184aad38682e02a192e9af515eb476", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/af466f8542173002361eb134e66102908c7cd024/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af466f8542173002361eb134e66102908c7cd024/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=af466f8542173002361eb134e66102908c7cd024", "patch": "@@ -158,11 +158,11 @@ impl<'a> InferenceContext<'a> {\n                         if mutability != exp_mut {\n                             // FIXME: emit type error?\n                         }\n-                        inner_ty\n+                        inner_ty.clone()\n                     }\n-                    _ => &Ty(TyKind::Unknown),\n+                    _ => self.result.standard_types.unknown.clone(),\n                 };\n-                let subty = self.infer_pat(*pat, expectation, default_bm);\n+                let subty = self.infer_pat(*pat, &expectation, default_bm);\n                 TyKind::Ref(mutability, Substs::single(subty)).intern(&Interner)\n             }\n             Pat::TupleStruct { path: p, args: subpats, ellipsis } => self.infer_tuple_struct_pat(\n@@ -232,11 +232,11 @@ impl<'a> InferenceContext<'a> {\n             Pat::Box { inner } => match self.resolve_boxed_box() {\n                 Some(box_adt) => {\n                     let inner_expected = match expected.as_adt() {\n-                        Some((adt, substs)) if adt == box_adt => substs.as_single(),\n-                        _ => &Ty(TyKind::Unknown),\n+                        Some((adt, substs)) if adt == box_adt => substs.as_single().clone(),\n+                        _ => self.result.standard_types.unknown.clone(),\n                     };\n \n-                    let inner_ty = self.infer_pat(*inner, inner_expected, default_bm);\n+                    let inner_ty = self.infer_pat(*inner, &inner_expected, default_bm);\n                     Ty::adt_ty(box_adt, Substs::single(inner_ty))\n                 }\n                 None => self.err_ty(),"}, {"sha": "2501a4e0a591de4ad35270159f0e3d613670861f", "filename": "crates/hir_ty/src/infer/unify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af466f8542173002361eb134e66102908c7cd024/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af466f8542173002361eb134e66102908c7cd024/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs?ref=af466f8542173002361eb134e66102908c7cd024", "patch": "@@ -108,7 +108,7 @@ impl<T> Canonicalized<T> {\n     pub(super) fn decanonicalize_ty(&self, mut ty: Ty) -> Ty {\n         ty.walk_mut_binders(\n             &mut |ty, binders| {\n-                if let &mut TyKind::BoundVar(bound) = &mut ty.0 {\n+                if let &mut TyKind::BoundVar(bound) = ty.interned_mut() {\n                     if bound.debruijn >= binders {\n                         let (v, k) = self.free_vars[bound.index];\n                         *ty = TyKind::InferenceVar(v, k).intern(&Interner);\n@@ -404,7 +404,7 @@ impl InferenceTable {\n             if i > 0 {\n                 cov_mark::hit!(type_var_resolves_to_int_var);\n             }\n-            match &ty.0 {\n+            match ty.interned(&Interner) {\n                 TyKind::InferenceVar(tv, _) => {\n                     let inner = tv.to_inner();\n                     match self.var_unification_table.inlined_probe_value(inner).known() {"}, {"sha": "0b2da89716e4f86368408790cafd33d894c4e2c2", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/af466f8542173002361eb134e66102908c7cd024/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af466f8542173002361eb134e66102908c7cd024/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=af466f8542173002361eb134e66102908c7cd024", "patch": "@@ -248,18 +248,26 @@ pub enum TyKind {\n }\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n-pub struct Ty(TyKind);\n+pub struct Ty(Arc<TyKind>);\n \n impl TyKind {\n     pub fn intern(self, _interner: &Interner) -> Ty {\n-        Ty(self)\n+        Ty(Arc::new(self))\n     }\n }\n \n impl Ty {\n     pub fn interned(&self, _interner: &Interner) -> &TyKind {\n         &self.0\n     }\n+\n+    pub fn interned_mut(&mut self) -> &mut TyKind {\n+        Arc::make_mut(&mut self.0)\n+    }\n+\n+    pub fn into_inner(self) -> TyKind {\n+        Arc::try_unwrap(self.0).unwrap_or_else(|a| (*a).clone())\n+    }\n }\n \n /// A list of substitutions for generic parameters.\n@@ -814,7 +822,7 @@ impl Ty {\n     /// `self` is `Option<_>` and the substs contain `u32`, we'll have\n     /// `Option<u32>` afterwards.)\n     pub fn apply_substs(mut self, new_substs: Substs) -> Ty {\n-        match &mut self.0 {\n+        match self.interned_mut() {\n             TyKind::Adt(_, substs)\n             | TyKind::Slice(substs)\n             | TyKind::Array(substs)\n@@ -854,7 +862,7 @@ impl Ty {\n     }\n \n     pub fn substs_mut(&mut self) -> Option<&mut Substs> {\n-        match &mut self.0 {\n+        match self.interned_mut() {\n             TyKind::Adt(_, substs)\n             | TyKind::Slice(substs)\n             | TyKind::Array(substs)\n@@ -988,7 +996,7 @@ pub trait TypeWalk {\n     {\n         self.walk_mut_binders(\n             &mut |ty_mut, binders| {\n-                let ty = mem::replace(ty_mut, Ty(TyKind::Unknown));\n+                let ty = mem::replace(ty_mut, TyKind::Unknown.intern(&Interner));\n                 *ty_mut = f(ty, binders);\n             },\n             binders,\n@@ -1001,7 +1009,7 @@ pub trait TypeWalk {\n         Self: Sized,\n     {\n         self.walk_mut(&mut |ty_mut| {\n-            let ty = mem::replace(ty_mut, Ty(TyKind::Unknown));\n+            let ty = mem::replace(ty_mut, TyKind::Unknown.intern(&Interner));\n             *ty_mut = f(ty);\n         });\n         self\n@@ -1022,7 +1030,7 @@ pub trait TypeWalk {\n     {\n         self.walk_mut_binders(\n             &mut |ty, binders| {\n-                if let &mut TyKind::BoundVar(bound) = &mut ty.0 {\n+                if let &mut TyKind::BoundVar(bound) = ty.interned_mut() {\n                     if bound.debruijn >= binders {\n                         *ty = substs.0[bound.index].clone().shift_bound_vars(binders);\n                     }\n@@ -1039,7 +1047,7 @@ pub trait TypeWalk {\n         Self: Sized,\n     {\n         self.fold_binders(\n-            &mut |ty, binders| match &ty.0 {\n+            &mut |ty, binders| match ty.interned(&Interner) {\n                 TyKind::BoundVar(bound) if bound.debruijn >= binders => {\n                     TyKind::BoundVar(bound.shifted_in_from(n)).intern(&Interner)\n                 }\n@@ -1084,7 +1092,7 @@ impl TypeWalk for Ty {\n         f: &mut impl FnMut(&mut Ty, DebruijnIndex),\n         binders: DebruijnIndex,\n     ) {\n-        match &mut self.0 {\n+        match self.interned_mut() {\n             TyKind::Alias(AliasTy::Projection(p_ty)) => {\n                 p_ty.substitution.walk_mut_binders(f, binders);\n             }"}, {"sha": "2a4ad9172f13550668d036b56a1c2eb7d83a8e90", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af466f8542173002361eb134e66102908c7cd024/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af466f8542173002361eb134e66102908c7cd024/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=af466f8542173002361eb134e66102908c7cd024", "patch": "@@ -993,7 +993,7 @@ pub(crate) fn generic_defaults_query(\n \n             // Each default can only refer to previous parameters.\n             ty.walk_mut_binders(\n-                &mut |ty, binders| match &mut ty.0 {\n+                &mut |ty, binders| match ty.interned_mut() {\n                     TyKind::BoundVar(BoundVar { debruijn, index }) if *debruijn == binders => {\n                         if *index >= idx {\n                             // type variable default referring to parameter coming"}, {"sha": "2ab976190e87164d566b9c3dea17e48ce1769859", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af466f8542173002361eb134e66102908c7cd024/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af466f8542173002361eb134e66102908c7cd024/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=af466f8542173002361eb134e66102908c7cd024", "patch": "@@ -24,7 +24,7 @@ use super::*;\n impl ToChalk for Ty {\n     type Chalk = chalk_ir::Ty<Interner>;\n     fn to_chalk(self, db: &dyn HirDatabase) -> chalk_ir::Ty<Interner> {\n-        match self.0 {\n+        match self.into_inner() {\n             TyKind::Ref(m, parameters) => ref_to_chalk(db, m, parameters),\n             TyKind::Array(parameters) => array_to_chalk(db, parameters),\n             TyKind::Function(FnPointer { sig, substs, .. }) => {"}]}