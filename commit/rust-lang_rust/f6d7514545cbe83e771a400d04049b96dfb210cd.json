{"sha": "f6d7514545cbe83e771a400d04049b96dfb210cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ZDc1MTQ1NDVjYmU4M2U3NzFhNDAwZDA0MDQ5Yjk2ZGZiMjEwY2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-17T14:57:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-17T14:57:33Z"}, "message": "Auto merge of #45344 - kennytm:rollup, r=kennytm\n\nRollup of 10 pull requests\n\n- Successful merges: #45097, #45151, #45307, #45308, #45310, #45315, #45321, #45329, #45338, #45339\n- Failed merges:", "tree": {"sha": "11fbe162f7fd6a69b48549598001472f4d311045", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11fbe162f7fd6a69b48549598001472f4d311045"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6d7514545cbe83e771a400d04049b96dfb210cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6d7514545cbe83e771a400d04049b96dfb210cd", "html_url": "https://github.com/rust-lang/rust/commit/f6d7514545cbe83e771a400d04049b96dfb210cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6d7514545cbe83e771a400d04049b96dfb210cd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0be6863a15f5aacacb287ca490823ab3b7ceb302", "url": "https://api.github.com/repos/rust-lang/rust/commits/0be6863a15f5aacacb287ca490823ab3b7ceb302", "html_url": "https://github.com/rust-lang/rust/commit/0be6863a15f5aacacb287ca490823ab3b7ceb302"}, {"sha": "7f72b311653401226fedeb29bcae484993a14ac0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f72b311653401226fedeb29bcae484993a14ac0", "html_url": "https://github.com/rust-lang/rust/commit/7f72b311653401226fedeb29bcae484993a14ac0"}], "stats": {"total": 174, "additions": 83, "deletions": 91}, "files": [{"sha": "88be81be7550c9bf525aed59ccb944496e63afed", "filename": ".travis.yml", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6d7514545cbe83e771a400d04049b96dfb210cd/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/f6d7514545cbe83e771a400d04049b96dfb210cd/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=f6d7514545cbe83e771a400d04049b96dfb210cd", "patch": "@@ -36,7 +36,7 @@ matrix:\n         NO_LLVM_ASSERTIONS=1\n         NO_DEBUG_ASSERTIONS=1\n       os: osx\n-      osx_image: xcode7\n+      osx_image: xcode7.3\n       if: branch = auto\n \n     # macOS builders. These are placed near the beginning because they are very\n@@ -57,7 +57,7 @@ matrix:\n         NO_LLVM_ASSERTIONS=1\n         NO_DEBUG_ASSERTIONS=1\n       os: osx\n-      osx_image: xcode8.2\n+      osx_image: xcode8.3\n       if: branch = auto\n \n     - env: >\n@@ -71,7 +71,7 @@ matrix:\n         NO_LLVM_ASSERTIONS=1\n         NO_DEBUG_ASSERTIONS=1\n       os: osx\n-      osx_image: xcode8.2\n+      osx_image: xcode8.3\n       if: branch = auto\n \n     # OSX builders producing releases. These do not run the full test suite and\n@@ -91,7 +91,7 @@ matrix:\n         NO_LLVM_ASSERTIONS=1\n         NO_DEBUG_ASSERTIONS=1\n       os: osx\n-      osx_image: xcode7\n+      osx_image: xcode7.3\n       if: branch = auto\n \n     - env: >\n@@ -105,7 +105,7 @@ matrix:\n         NO_LLVM_ASSERTIONS=1\n         NO_DEBUG_ASSERTIONS=1\n       os: osx\n-      osx_image: xcode7\n+      osx_image: xcode7.3\n       if: branch = auto\n \n     # Linux builders, remaining docker images"}, {"sha": "c441dc9acb85ff28dc0e28dbbfcdea71ac12af1c", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=f6d7514545cbe83e771a400d04049b96dfb210cd", "patch": "@@ -648,7 +648,8 @@ def update_submodules(self):\n                       if not ((module.endswith(\"llvm\") and\n                                self.get_toml('llvm-config')) or\n                               (module.endswith(\"jemalloc\") and\n-                               self.get_toml('jemalloc')))]\n+                               (self.get_toml('use-jemalloc') == \"false\" or\n+                                self.get_toml('jemalloc'))))]\n         run([\"git\", \"submodule\", \"update\",\n              \"--init\", \"--recursive\"] + submodules,\n             cwd=self.rust_root, verbose=self.verbose)"}, {"sha": "8e8e2a7ff1dd5c00b33eb1682eced73fb91dce29", "filename": "src/doc/rustdoc/src/command-line-arguments.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md?ref=f6d7514545cbe83e771a400d04049b96dfb210cd", "patch": "@@ -96,11 +96,11 @@ Using this flag looks like this:\n $ rustdoc src/lib.rs --crate-name mycrate\n ```\n \n-By default, `rustodc` assumes that the name of your crate is the same name\n+By default, `rustdoc` assumes that the name of your crate is the same name\n as the `.rs` file. `--crate-name` lets you override this assumption with\n whatever name you choose.\n \n-## `-L`/`--library-path`: \n+## `-L`/`--library-path`: where to look for dependencies\n \n Using this flag looks like this:\n \n@@ -186,7 +186,7 @@ on documentation tests](documentation-tests.html).\n \n See also `--test-args`.\n \n-## `--test-args`: \n+## `--test-args`: pass options to test runner\n \n Using this flag looks like this:\n \n@@ -199,7 +199,7 @@ For more, see [the chapter on documentation tests](documentation-tests.html).\n \n See also `--test`.\n \n-## `--target`: \n+## `--target`: generate documentation for the specified target triple\n \n Using this flag looks like this:\n \n@@ -253,7 +253,7 @@ $ rustdoc README.md --html-before-content extra.html\n ```\n \n This flag takes a list of files, and inserts them inside the `<body>` tag but\n-before the other content `rustodc` would normally produce in the rendered\n+before the other content `rustdoc` would normally produce in the rendered\n documentation.\n \n ## `--html-after-content`: include more HTML after the content\n@@ -266,7 +266,7 @@ $ rustdoc README.md --html-after-content extra.html\n ```\n \n This flag takes a list of files, and inserts them before the `</body>` tag but\n-after the other content `rustodc` would normally produce in the rendered\n+after the other content `rustdoc` would normally produce in the rendered\n documentation.\n \n "}, {"sha": "857aae72c8a5bd5d92a0088a36bbe3c37fc58b37", "filename": "src/libcore/tests/num/flt2dec/estimator.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Festimator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Festimator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Festimator.rs?ref=f6d7514545cbe83e771a400d04049b96dfb210cd", "patch": "@@ -8,11 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// FIXME https://github.com/kripken/emscripten/issues/4563\n-// NB we have to actually not compile this test to avoid\n-// an undefined symbol error\n-#![cfg(not(target_os = \"emscripten\"))]\n-\n use core::num::flt2dec::estimator::*;\n \n #[test]"}, {"sha": "5c86554f9079011e12b1244f40dce588c6f84309", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=f6d7514545cbe83e771a400d04049b96dfb210cd", "patch": "@@ -171,7 +171,7 @@ fn build_local_id_to_index(body: Option<&hir::Body>,\n                            -> FxHashMap<hir::ItemLocalId, Vec<CFGIndex>> {\n     let mut index = FxHashMap();\n \n-    // FIXME (#6298): Would it be better to fold formals from decl\n+    // FIXME(#15020) Would it be better to fold formals from decl\n     // into cfg itself?  i.e. introduce a fn-based flow-graph in\n     // addition to the current block-based flow-graph, rather than\n     // have to put traversals like this here?"}, {"sha": "8754316ca840b1c508f58b4e3b5cebd1efff1114", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=f6d7514545cbe83e771a400d04049b96dfb210cd", "patch": "@@ -477,10 +477,8 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n \n     fn pat_ty(&self, pat: &hir::Pat) -> McResult<Ty<'tcx>> {\n         let base_ty = self.node_ty(pat.hir_id)?;\n-        // FIXME (Issue #18207): This code detects whether we are\n-        // looking at a `ref x`, and if so, figures out what the type\n-        // *being borrowed* is.  But ideally we would put in a more\n-        // fundamental fix to this conflated use of the node id.\n+        // This code detects whether we are looking at a `ref x`,\n+        // and if so, figures out what the type *being borrowed* is.\n         let ret_ty = match pat.node {\n             PatKind::Binding(..) => {\n                 let bm = *self.tables"}, {"sha": "635bcbf7771e33cda34a80fd1d6abfdac500778d", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=f6d7514545cbe83e771a400d04049b96dfb210cd", "patch": "@@ -960,7 +960,7 @@ fn resolve_expr<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'a, 'tcx>, expr:\n \n             hir::ExprAssignOp(..) | hir::ExprIndex(..) |\n             hir::ExprUnary(..) | hir::ExprCall(..) | hir::ExprMethodCall(..) => {\n-                // FIXME(#6268) Nested method calls\n+                // FIXME(https://github.com/rust-lang/rfcs/issues/811) Nested method calls\n                 //\n                 // The lifetimes for a call or method call look as follows:\n                 //\n@@ -1081,8 +1081,6 @@ fn resolve_local<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'a, 'tcx>,\n     // Here, the expression `[...]` has an extended lifetime due to rule\n     // A, but the inner rvalues `a()` and `b()` have an extended lifetime\n     // due to rule C.\n-    //\n-    // FIXME(#6308) -- Note that `[]` patterns work more smoothly post-DST.\n \n     if let Some(expr) = init {\n         record_rvalue_scope_if_borrow_expr(visitor, &expr, blk_scope);"}, {"sha": "b636fc6c9950a7241b9f2071b7ac57a99bf57df2", "filename": "src/librustc/session/filesearch.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Ffilesearch.rs?ref=f6d7514545cbe83e771a400d04049b96dfb210cd", "patch": "@@ -28,8 +28,6 @@ pub enum FileMatch {\n }\n \n // A module for searching for libraries\n-// FIXME (#2658): I'm not happy how this module turned out. Should\n-// probably just be folded into cstore.\n \n pub struct FileSearch<'a> {\n     pub sysroot: &'a Path,"}, {"sha": "dc5ce7353246ab8e7972f309508073f4549f1286", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=f6d7514545cbe83e771a400d04049b96dfb210cd", "patch": "@@ -252,7 +252,6 @@ fn uncovered_tys<'tcx>(tcx: TyCtxt, ty: Ty<'tcx>, infer_is_local: InferIsLocal)\n \n fn is_type_parameter(ty: Ty) -> bool {\n     match ty.sty {\n-        // FIXME(#20590) straighten story about projection types\n         ty::TyProjection(..) | ty::TyParam(..) => true,\n         _ => false,\n     }"}, {"sha": "cec79faff315d6fb4034f9f6e3d089d17d7f675d", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=f6d7514545cbe83e771a400d04049b96dfb210cd", "patch": "@@ -1309,13 +1309,13 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         };\n \n         if obligation.predicate.skip_binder().self_ty().is_ty_var() {\n-            // FIXME(#20297): Self is a type variable (e.g. `_: AsRef<str>`).\n+            // Self is a type variable (e.g. `_: AsRef<str>`).\n             //\n             // This is somewhat problematic, as the current scheme can't really\n             // handle it turning to be a projection. This does end up as truly\n             // ambiguous in most cases anyway.\n             //\n-            // Until this is fixed, take the fast path out - this also improves\n+            // Take the fast path out - this also improves\n             // performance by preventing assemble_candidates_from_impls from\n             // matching every impl for this trait.\n             return Ok(SelectionCandidateSet { vec: vec![], ambiguous: true });\n@@ -1383,8 +1383,6 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     {\n         debug!(\"assemble_candidates_for_projected_tys({:?})\", obligation);\n \n-        // FIXME(#20297) -- just examining the self-type is very simplistic\n-\n         // before we go into the whole skolemization thing, just\n         // quickly check if the self-type is a projection at all.\n         match obligation.predicate.0.trait_ref.self_ty().sty {\n@@ -2174,14 +2172,6 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             }\n \n             ty::TyClosure(def_id, ref substs) => {\n-                // FIXME(#27086). We are invariant w/r/t our\n-                // func_substs, but we don't see them as\n-                // constituent types; this seems RIGHT but also like\n-                // something that a normal type couldn't simulate. Is\n-                // this just a gap with the way that PhantomData and\n-                // OIBIT interact? That is, there is no way to say\n-                // \"make me invariant with respect to this TYPE, but\n-                // do not act as though I can reach it\"\n                 substs.upvar_tys(def_id, self.tcx()).collect()\n             }\n "}, {"sha": "5e1dc485d420f7ba8505511982b925cf00d57e61", "filename": "src/librustc/ty/outlives.rs", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Flibrustc%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Flibrustc%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Foutlives.rs?ref=f6d7514545cbe83e771a400d04049b96dfb210cd", "patch": "@@ -73,42 +73,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         // projection).\n         match ty.sty {\n             ty::TyClosure(def_id, ref substs) => {\n-                // FIXME(#27086). We do not accumulate from substs, since they\n-                // don't represent reachable data. This means that, in\n-                // practice, some of the lifetime parameters might not\n-                // be in scope when the body runs, so long as there is\n-                // no reachable data with that lifetime. For better or\n-                // worse, this is consistent with fn types, however,\n-                // which can also encapsulate data in this fashion\n-                // (though it's somewhat harder, and typically\n-                // requires virtual dispatch).\n-                //\n-                // Note that changing this (in a naive way, at least)\n-                // causes regressions for what appears to be perfectly\n-                // reasonable code like this:\n-                //\n-                // ```\n-                // fn foo<'a>(p: &Data<'a>) {\n-                //    bar(|q: &mut Parser| q.read_addr())\n-                // }\n-                // fn bar(p: Box<FnMut(&mut Parser)+'static>) {\n-                // }\n-                // ```\n-                //\n-                // Note that `p` (and `'a`) are not used in the\n-                // closure at all, but to meet the requirement that\n-                // the closure type `C: 'static` (so it can be coerced\n-                // to the object type), we get the requirement that\n-                // `'a: 'static` since `'a` appears in the closure\n-                // type `C`.\n-                //\n-                // A smarter fix might \"prune\" unused `func_substs` --\n-                // this would avoid breaking simple examples like\n-                // this, but would still break others (which might\n-                // indeed be invalid, depending on your POV). Pruning\n-                // would be a subtle process, since we have to see\n-                // what func/type parameters are used and unused,\n-                // taking into consideration UFCS and so forth.\n \n                 for upvar_ty in substs.upvar_tys(def_id, *self) {\n                     self.compute_components(upvar_ty, out);"}, {"sha": "b877c5a9cbcbcccbb7ec2d8d2b728f41c0a709da", "filename": "src/librustc_borrowck/borrowck/README.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Flibrustc_borrowck%2Fborrowck%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Flibrustc_borrowck%2Fborrowck%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2FREADME.md?ref=f6d7514545cbe83e771a400d04049b96dfb210cd", "patch": "@@ -781,8 +781,9 @@ the base path, it will still be considered freezable.\n \n \n \n-**FIXME #10520: Restrictions against mutating the base pointer.** When\n-an `&mut` pointer is frozen or claimed, we currently pass along the\n+**FIXME [RFC 1751](https://github.com/rust-lang/rfcs/issues/1751)\n+Restrictions against mutating the base pointer.**\n+When an `&mut` pointer is frozen or claimed, we currently pass along the\n restriction against MUTATE to the base pointer. I do not believe this\n restriction is needed. It dates from the days when we had a way to\n mutate that preserved the value being mutated (i.e., swap). Nowadays"}, {"sha": "0e9fb583407c837ee5762512b564193966cca187", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=f6d7514545cbe83e771a400d04049b96dfb210cd", "patch": "@@ -659,7 +659,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n         debug!(\"check_if_path_is_moved(id={:?}, use_kind={:?}, lp={:?})\",\n                id, use_kind, lp);\n \n-        // FIXME (22079): if you find yourself tempted to cut and paste\n+        // FIXME: if you find yourself tempted to cut and paste\n         // the body below and then specializing the error reporting,\n         // consider refactoring this instead!\n \n@@ -720,7 +720,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                         // the path must be initialized to prevent a case of\n                         // partial reinitialization\n                         //\n-                        // FIXME (22079): could refactor via hypothetical\n+                        // FIXME: could refactor via hypothetical\n                         // generalized check_if_path_is_moved\n                         let loan_path = owned_ptr_base_path_rc(lp_base);\n                         self.move_data.each_move_of(id, &loan_path, |_, _| {"}, {"sha": "bb39e8ad2e6c223171a099222d7130d6e316a58c", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=f6d7514545cbe83e771a400d04049b96dfb210cd", "patch": "@@ -406,7 +406,7 @@ impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n         self.all_loans.push(loan);\n \n         // if loan_gen_scope != borrow_id {\n-            // FIXME(#6268) Nested method calls\n+            // FIXME(https://github.com/rust-lang/rfcs/issues/811) Nested method calls\n             //\n             // Typically, the scope of the loan includes the point at\n             // which the loan is originated. This\n@@ -417,9 +417,8 @@ impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n             //let restr = restrictions::compute_restrictions(\n             //    self.bccx, borrow_span, cmt, RESTR_EMPTY);\n             //let loan = {\n-            //    let all_loans = &mut *self.all_loans; // FIXME(#5074)\n             //    Loan {\n-            //        index: all_loans.len(),\n+            //        index: self.all_loans.len(),\n             //        loan_path,\n             //        cmt,\n             //        mutbl: ConstMutability,"}, {"sha": "4fe726364f227bc2e5d1e3ccd02b2c1142476b5e", "filename": "src/librustc_trans/llvm_util.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Flibrustc_trans%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Flibrustc_trans%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fllvm_util.rs?ref=f6d7514545cbe83e771a400d04049b96dfb210cd", "patch": "@@ -73,6 +73,8 @@ unsafe fn configure_llvm(sess: &Session) {\n \n const ARM_WHITELIST: &'static [&'static str] = &[\"neon\\0\", \"vfp2\\0\", \"vfp3\\0\", \"vfp4\\0\"];\n \n+const AARCH64_WHITELIST: &'static [&'static str] = &[\"neon\\0\"];\n+\n const X86_WHITELIST: &'static [&'static str] = &[\"avx\\0\", \"avx2\\0\", \"bmi\\0\", \"bmi2\\0\", \"sse\\0\",\n                                                  \"sse2\\0\", \"sse3\\0\", \"sse4.1\\0\", \"sse4.2\\0\",\n                                                  \"ssse3\\0\", \"tbm\\0\", \"lzcnt\\0\", \"popcnt\\0\",\n@@ -90,6 +92,7 @@ pub fn target_features(sess: &Session) -> Vec<Symbol> {\n \n     let whitelist = match &*sess.target.target.arch {\n         \"arm\" => ARM_WHITELIST,\n+        \"aarch64\" => AARCH64_WHITELIST,\n         \"x86\" | \"x86_64\" => X86_WHITELIST,\n         \"hexagon\" => HEXAGON_WHITELIST,\n         \"powerpc\" | \"powerpc64\" => POWERPC_WHITELIST,"}, {"sha": "ad7978480a6b1b44ccb99b0fcb127aa4d554453b", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=f6d7514545cbe83e771a400d04049b96dfb210cd", "patch": "@@ -815,7 +815,8 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for RegionCtxt<'a, 'gcx, 'tcx> {\n                 // the type of the node expr.id here *before applying\n                 // adjustments*.\n                 //\n-                // FIXME(#6268) nested method calls requires that this rule change\n+                // FIXME(https://github.com/rust-lang/rfcs/issues/811)\n+                // nested method calls requires that this rule change\n                 let ty0 = self.resolve_node_type(expr.hir_id);\n                 self.type_must_outlive(infer::AddrOf(expr.span), ty0, expr_region);\n                 intravisit::walk_expr(self, expr);"}, {"sha": "9e1da318242bc550c9939102c59f4e7c548f09c7", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=f6d7514545cbe83e771a400d04049b96dfb210cd", "patch": "@@ -284,7 +284,6 @@ mod prim_pointer { }\n /// Arrays of sizes from 0 to 32 (inclusive) implement the following traits if\n /// the element type allows it:\n ///\n-/// - [`Clone`][clone] (only if `T: `[`Copy`][copy])\n /// - [`Debug`][debug]\n /// - [`IntoIterator`][intoiterator] (implemented for `&[T; N]` and `&mut [T; N]`)\n /// - [`PartialEq`][partialeq], [`PartialOrd`][partialord], [`Eq`][eq], [`Ord`][ord]\n@@ -299,8 +298,10 @@ mod prim_pointer { }\n /// entirely different types. As a stopgap, trait implementations are\n /// statically generated up to size 32.\n ///\n-/// Arrays of *any* size are [`Copy`][copy] if the element type is [`Copy`][copy]. This\n-/// works because the [`Copy`][copy] trait is specially known to the compiler.\n+/// Arrays of *any* size are [`Copy`][copy] if the element type is [`Copy`][copy]\n+/// and [`Clone`][clone] if the element type is [`Clone`][clone]. This works\n+/// because [`Copy`][copy] and [`Clone`][clone] traits are specially known\n+/// to the compiler.\n ///\n /// Arrays coerce to [slices (`[T]`)][slice], so a slice method may be called on\n /// an array. Indeed, this provides most of the API for working with arrays."}, {"sha": "533f6590f83b2656a6da5464b0598cdaacf95147", "filename": "src/libstd/process.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=f6d7514545cbe83e771a400d04049b96dfb210cd", "patch": "@@ -552,6 +552,12 @@ impl Command {\n \n     /// Configuration for the child process's standard input (stdin) handle.\n     ///\n+    /// Defaults to [`inherit`] when used with `spawn` or `status`, and\n+    /// defaults to [`piped`] when used with `output`.\n+    ///\n+    /// [`inherit`]: struct.Stdio.html#method.inherit\n+    /// [`piped`]: struct.Stdio.html#method.piped\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -572,6 +578,12 @@ impl Command {\n \n     /// Configuration for the child process's standard output (stdout) handle.\n     ///\n+    /// Defaults to [`inherit`] when used with `spawn` or `status`, and\n+    /// defaults to [`piped`] when used with `output`.\n+    ///\n+    /// [`inherit`]: struct.Stdio.html#method.inherit\n+    /// [`piped`]: struct.Stdio.html#method.piped\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -592,6 +604,12 @@ impl Command {\n \n     /// Configuration for the child process's standard error (stderr) handle.\n     ///\n+    /// Defaults to [`inherit`] when used with `spawn` or `status`, and\n+    /// defaults to [`piped`] when used with `output`.\n+    ///\n+    /// [`inherit`]: struct.Stdio.html#method.inherit\n+    /// [`piped`]: struct.Stdio.html#method.piped\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:"}, {"sha": "a532163f61e190c0f44f01ecae2e90b3c65db6a5", "filename": "src/libstd/sys/windows/ext/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs?ref=f6d7514545cbe83e771a400d04049b96dfb210cd", "patch": "@@ -393,8 +393,8 @@ pub trait MetadataExt {\n     /// to. For a directory, the structure specifies when the directory was\n     /// created.\n     ///\n-    /// If the underlying filesystem does not support the last write time\n-    /// time, the returned value is 0.\n+    /// If the underlying filesystem does not support the last write time,\n+    /// the returned value is 0.\n     ///\n     /// # Examples\n     ///"}, {"sha": "8fd2bad4e44a6e38947f917add4638e4d699fa43", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f6d7514545cbe83e771a400d04049b96dfb210cd", "patch": "@@ -4088,11 +4088,11 @@ impl<'a> Parser<'a> {\n                     node: StmtKind::Item(i),\n                 },\n                 None => {\n-                    let unused_attrs = |attrs: &[_], s: &mut Self| {\n+                    let unused_attrs = |attrs: &[Attribute], s: &mut Self| {\n                         if !attrs.is_empty() {\n                             if s.prev_token_kind == PrevTokenKind::DocComment {\n                                 s.span_fatal_err(s.prev_span, Error::UselessDocComment).emit();\n-                            } else {\n+                            } else if attrs.iter().any(|a| a.style == AttrStyle::Outer) {\n                                 s.span_err(s.span, \"expected statement after outer attribute\");\n                             }\n                         }"}, {"sha": "7a2b4e56d69445bb81d440f5e45712f60081b380", "filename": "src/test/ui/issue-45296.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Ftest%2Fui%2Fissue-45296.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Ftest%2Fui%2Fissue-45296.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45296.rs?ref=f6d7514545cbe83e771a400d04049b96dfb210cd", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let unused = ();\n+\n+    #![allow(unused_variables)]\n+}"}, {"sha": "7bfcac974c53e2ec3d9307443ba10256c90d0f42", "filename": "src/test/ui/issue-45296.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Ftest%2Fui%2Fissue-45296.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6d7514545cbe83e771a400d04049b96dfb210cd/src%2Ftest%2Fui%2Fissue-45296.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45296.stderr?ref=f6d7514545cbe83e771a400d04049b96dfb210cd", "patch": "@@ -0,0 +1,11 @@\n+error: an inner attribute is not permitted in this context\n+  --> $DIR/issue-45296.rs:14:7\n+   |\n+14 |     #![allow(unused_variables)]\n+   |       ^\n+   |\n+   = note: inner attributes and doc comments, like `#![no_std]` or `//! My crate`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes and doc comments, like `#[test]` and\n+                                              `/// My function`, annotate the item following them.\n+\n+error: aborting due to previous error\n+"}]}