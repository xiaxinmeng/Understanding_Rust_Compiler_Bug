{"sha": "54d77285fcba0ab3d9d5ad8ff8a02bd6187bcf58", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0ZDc3Mjg1ZmNiYTBhYjNkOWQ1YWQ4ZmY4YTAyYmQ2MTg3YmNmNTg=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-09-16T10:34:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-16T10:34:20Z"}, "message": "Rollup merge of #76695 - iximeow:trait-generic-bound-suggestion, r=estebank\n\nfix syntax error in suggesting generic constraint in trait parameter\n\nsuggest `where T: Foo` for the first bound on a trait, then suggest\n`, T: Foo` when the suggested bound would add to an existing set of\n`where` clauses. `where T: Foo` may be the first bound if `T` has a\ndefault, because we'd rather suggest\n```\ntrait A<T=()> where T: Copy\n```\nthan\n```\ntrait A<T: Copy=()>\n```\nfor legibility reasons.\n\nthe test case i added here is derived from [this reproduction](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=0bf3ace9f2a183d0bdbd748c6b8e3971):\n```\nstruct B<T: Copy> {\n    t: T\n}\n\ntrait A<T = ()> {\n    fn returns_constrained_type(&self, t: T) -> B<T> {\n        B { t }\n    }\n}\n```\nwhere the suggested fix,\n```\ntrait A<T = ()>, T: Copy { ... }\n```\nis in fact invalid syntax!\n\ni also found an error in the existing suggestion for `trait Base<T = String>: Super<T>` where rustc would suggest `trait Base<T = String>: Super<T>, T: Copy`, but `T: Copy` is the first of the trait's `where` clauses and should be `where T: Copy` as well. the test for that suggestion expects invalid syntax, and has been revised to a compiler-pleasing `trait Base<T = String>: Super<T> where T: Copy`.\n\njudging by https://github.com/rust-lang/rust/pull/70009 i'll.. cc @estebank ?", "tree": {"sha": "2396fc6921f9d83050e0f690ca20d9e990c824a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2396fc6921f9d83050e0f690ca20d9e990c824a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54d77285fcba0ab3d9d5ad8ff8a02bd6187bcf58", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfYeosCRBK7hj4Ov3rIwAAdHIIAHWFCsOheFUD9ENip85JmrC8\n+qdSzF13QHLBmubrgkHfon+fL4LDDZY5gGxoP9AhekN2jCf5u4aMfG3uD7RGFe/R\numqEBtAqNmdR9lk97orWR6p4GjkQhzR3EHJlCm+b+6IBtWjqwg+Zg2KLo8+8HWmL\ne6YL0bBqtP+kOrE3GdZ2qwho09Tr1CPpt9lLKnbpbksr2PAFyuQcAO7HwL3xOd/w\nF2yaw+gHHtgG1e82rnPmUBzfCoMme2QmEulGFSvwvJJDWjwa1RyDKK9TzsIGHP2g\nFxuVp+ypqZG4AMOgF0GD3Z27NVXTc1+yz9iuMmu6kXoTkKLuENPUqnXXQelc82g=\n=5/p0\n-----END PGP SIGNATURE-----\n", "payload": "tree 2396fc6921f9d83050e0f690ca20d9e990c824a7\nparent 2c2f1c239e58c47eb9b94bc6328af5f3378cfa4d\nparent e1607c87f0bb96c1c59d84a2789b7f7d2b69e182\nauthor Dylan DPC <dylan.dpc@gmail.com> 1600252460 +0200\ncommitter GitHub <noreply@github.com> 1600252460 +0200\n\nRollup merge of #76695 - iximeow:trait-generic-bound-suggestion, r=estebank\n\nfix syntax error in suggesting generic constraint in trait parameter\n\nsuggest `where T: Foo` for the first bound on a trait, then suggest\n`, T: Foo` when the suggested bound would add to an existing set of\n`where` clauses. `where T: Foo` may be the first bound if `T` has a\ndefault, because we'd rather suggest\n```\ntrait A<T=()> where T: Copy\n```\nthan\n```\ntrait A<T: Copy=()>\n```\nfor legibility reasons.\n\nthe test case i added here is derived from [this reproduction](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=0bf3ace9f2a183d0bdbd748c6b8e3971):\n```\nstruct B<T: Copy> {\n    t: T\n}\n\ntrait A<T = ()> {\n    fn returns_constrained_type(&self, t: T) -> B<T> {\n        B { t }\n    }\n}\n```\nwhere the suggested fix,\n```\ntrait A<T = ()>, T: Copy { ... }\n```\nis in fact invalid syntax!\n\ni also found an error in the existing suggestion for `trait Base<T = String>: Super<T>` where rustc would suggest `trait Base<T = String>: Super<T>, T: Copy`, but `T: Copy` is the first of the trait's `where` clauses and should be `where T: Copy` as well. the test for that suggestion expects invalid syntax, and has been revised to a compiler-pleasing `trait Base<T = String>: Super<T> where T: Copy`.\n\njudging by https://github.com/rust-lang/rust/pull/70009 i'll.. cc @estebank ?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54d77285fcba0ab3d9d5ad8ff8a02bd6187bcf58", "html_url": "https://github.com/rust-lang/rust/commit/54d77285fcba0ab3d9d5ad8ff8a02bd6187bcf58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54d77285fcba0ab3d9d5ad8ff8a02bd6187bcf58/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c2f1c239e58c47eb9b94bc6328af5f3378cfa4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c2f1c239e58c47eb9b94bc6328af5f3378cfa4d", "html_url": "https://github.com/rust-lang/rust/commit/2c2f1c239e58c47eb9b94bc6328af5f3378cfa4d"}, {"sha": "e1607c87f0bb96c1c59d84a2789b7f7d2b69e182", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1607c87f0bb96c1c59d84a2789b7f7d2b69e182", "html_url": "https://github.com/rust-lang/rust/commit/e1607c87f0bb96c1c59d84a2789b7f7d2b69e182"}], "stats": {"total": 127, "additions": 105, "deletions": 22}, "files": [{"sha": "715319747e3900adf34732b690bc1e93a05ee94c", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 46, "deletions": 20, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/54d77285fcba0ab3d9d5ad8ff8a02bd6187bcf58/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d77285fcba0ab3d9d5ad8ff8a02bd6187bcf58/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=54d77285fcba0ab3d9d5ad8ff8a02bd6187bcf58", "patch": "@@ -202,33 +202,59 @@ pub fn suggest_constraining_type_param(\n         //    Suggestion:\n         //      fn foo<T>(t: T) where T: Foo, T: Bar {... }\n         //                                          - insert: `, T: Zar`\n+        //\n+        // Additionally, there may be no `where` clause whatsoever in the case that this was\n+        // reached because the generic parameter has a default:\n+        //\n+        //    Message:\n+        //      trait Foo<T=()> {... }\n+        //             - help: consider further restricting this type parameter with `where T: Zar`\n+        //\n+        //    Suggestion:\n+        //      trait Foo<T=()> where T: Zar {... }\n+        //                     - insert: `where T: Zar`\n \n-        let mut param_spans = Vec::new();\n+        if matches!(param.kind, hir::GenericParamKind::Type { default: Some(_), .. })\n+            && generics.where_clause.predicates.len() == 0\n+        {\n+            // Suggest a bound, but there is no existing `where` clause *and* the type param has a\n+            // default (`<T=Foo>`), so we suggest adding `where T: Bar`.\n+            err.span_suggestion_verbose(\n+                generics.where_clause.tail_span_for_suggestion(),\n+                &msg_restrict_type_further,\n+                format!(\" where {}: {}\", param_name, constraint),\n+                Applicability::MachineApplicable,\n+            );\n+        } else {\n+            let mut param_spans = Vec::new();\n \n-        for predicate in generics.where_clause.predicates {\n-            if let WherePredicate::BoundPredicate(WhereBoundPredicate {\n-                span, bounded_ty, ..\n-            }) = predicate\n-            {\n-                if let TyKind::Path(QPath::Resolved(_, path)) = &bounded_ty.kind {\n-                    if let Some(segment) = path.segments.first() {\n-                        if segment.ident.to_string() == param_name {\n-                            param_spans.push(span);\n+            for predicate in generics.where_clause.predicates {\n+                if let WherePredicate::BoundPredicate(WhereBoundPredicate {\n+                    span,\n+                    bounded_ty,\n+                    ..\n+                }) = predicate\n+                {\n+                    if let TyKind::Path(QPath::Resolved(_, path)) = &bounded_ty.kind {\n+                        if let Some(segment) = path.segments.first() {\n+                            if segment.ident.to_string() == param_name {\n+                                param_spans.push(span);\n+                            }\n                         }\n                     }\n                 }\n             }\n-        }\n \n-        match &param_spans[..] {\n-            &[&param_span] => suggest_restrict(param_span.shrink_to_hi()),\n-            _ => {\n-                err.span_suggestion_verbose(\n-                    generics.where_clause.tail_span_for_suggestion(),\n-                    &msg_restrict_type_further,\n-                    format!(\", {}: {}\", param_name, constraint),\n-                    Applicability::MachineApplicable,\n-                );\n+            match &param_spans[..] {\n+                &[&param_span] => suggest_restrict(param_span.shrink_to_hi()),\n+                _ => {\n+                    err.span_suggestion_verbose(\n+                        generics.where_clause.tail_span_for_suggestion(),\n+                        &msg_restrict_type_further,\n+                        format!(\", {}: {}\", param_name, constraint),\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n             }\n         }\n "}, {"sha": "db3a95f5c4f611bb14a3ce4b869c7e6973c9db73", "filename": "src/test/ui/trait-impl-bound-suggestions.fixed", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/54d77285fcba0ab3d9d5ad8ff8a02bd6187bcf58/src%2Ftest%2Fui%2Ftrait-impl-bound-suggestions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/54d77285fcba0ab3d9d5ad8ff8a02bd6187bcf58/src%2Ftest%2Fui%2Ftrait-impl-bound-suggestions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-impl-bound-suggestions.fixed?ref=54d77285fcba0ab3d9d5ad8ff8a02bd6187bcf58", "patch": "@@ -0,0 +1,20 @@\n+// run-rustfix\n+\n+#[allow(unused)]\n+use std::fmt::Debug;\n+// Rustfix should add this, or use `std::fmt::Debug` instead.\n+\n+#[allow(dead_code)]\n+struct ConstrainedStruct<X: Copy> {\n+    x: X\n+}\n+\n+#[allow(dead_code)]\n+trait InsufficientlyConstrainedGeneric<X=()> where X: Copy {\n+    fn return_the_constrained_type(&self, x: X) -> ConstrainedStruct<X> {\n+        //~^ ERROR the trait bound `X: Copy` is not satisfied\n+        ConstrainedStruct { x }\n+    }\n+}\n+\n+pub fn main() { }"}, {"sha": "bf75175179efdc733cc012394b484d46fc9f4651", "filename": "src/test/ui/trait-impl-bound-suggestions.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/54d77285fcba0ab3d9d5ad8ff8a02bd6187bcf58/src%2Ftest%2Fui%2Ftrait-impl-bound-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d77285fcba0ab3d9d5ad8ff8a02bd6187bcf58/src%2Ftest%2Fui%2Ftrait-impl-bound-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-impl-bound-suggestions.rs?ref=54d77285fcba0ab3d9d5ad8ff8a02bd6187bcf58", "patch": "@@ -0,0 +1,20 @@\n+// run-rustfix\n+\n+#[allow(unused)]\n+use std::fmt::Debug;\n+// Rustfix should add this, or use `std::fmt::Debug` instead.\n+\n+#[allow(dead_code)]\n+struct ConstrainedStruct<X: Copy> {\n+    x: X\n+}\n+\n+#[allow(dead_code)]\n+trait InsufficientlyConstrainedGeneric<X=()> {\n+    fn return_the_constrained_type(&self, x: X) -> ConstrainedStruct<X> {\n+        //~^ ERROR the trait bound `X: Copy` is not satisfied\n+        ConstrainedStruct { x }\n+    }\n+}\n+\n+pub fn main() { }"}, {"sha": "3a21e9c6b2ad4fb65caad675ef22ed0c398e6215", "filename": "src/test/ui/trait-impl-bound-suggestions.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/54d77285fcba0ab3d9d5ad8ff8a02bd6187bcf58/src%2Ftest%2Fui%2Ftrait-impl-bound-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54d77285fcba0ab3d9d5ad8ff8a02bd6187bcf58/src%2Ftest%2Fui%2Ftrait-impl-bound-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-impl-bound-suggestions.stderr?ref=54d77285fcba0ab3d9d5ad8ff8a02bd6187bcf58", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: the trait bound `X: Copy` is not satisfied\n+  --> $DIR/trait-impl-bound-suggestions.rs:14:52\n+   |\n+LL | struct ConstrainedStruct<X: Copy> {\n+   |                             ---- required by this bound in `ConstrainedStruct`\n+...\n+LL |     fn return_the_constrained_type(&self, x: X) -> ConstrainedStruct<X> {\n+   |                                                    ^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `X`\n+   |\n+help: consider further restricting type parameter `X`\n+   |\n+LL | trait InsufficientlyConstrainedGeneric<X=()> where X: Copy {\n+   |                                              ^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "d8c7f595e62efcdf03555cd975d71761e7a7e586", "filename": "src/test/ui/type/type-check-defaults.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54d77285fcba0ab3d9d5ad8ff8a02bd6187bcf58/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54d77285fcba0ab3d9d5ad8ff8a02bd6187bcf58/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr?ref=54d77285fcba0ab3d9d5ad8ff8a02bd6187bcf58", "patch": "@@ -56,8 +56,8 @@ LL | trait Base<T = String>: Super<T> { }\n    |\n help: consider further restricting type parameter `T`\n    |\n-LL | trait Base<T = String>: Super<T>, T: Copy { }\n-   |                                 ^^^^^^^^^\n+LL | trait Base<T = String>: Super<T> where T: Copy { }\n+   |                                  ^^^^^^^^^^^^^\n \n error[E0277]: cannot add `u8` to `i32`\n   --> $DIR/type-check-defaults.rs:24:66"}]}