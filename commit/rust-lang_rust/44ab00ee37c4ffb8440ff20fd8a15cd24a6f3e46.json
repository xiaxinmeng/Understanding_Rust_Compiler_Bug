{"sha": "44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0YWIwMGVlMzdjNGZmYjg0NDBmZjIwZmQ4YTE1Y2QyNGE2ZjNlNDY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-09T03:29:16Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-09T03:29:16Z"}, "message": "Revert \"librustc: Make unqualified identifier searches terminate at the nearest module scope. r=tjc\"\n\nThis reverts commit a8d37af2473da79be704c9ce2374f278c47177b6.", "tree": {"sha": "83f3d67a9e21c6ce1b99c2ce8f6a737896c673db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83f3d67a9e21c6ce1b99c2ce8f6a737896c673db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "html_url": "https://github.com/rust-lang/rust/commit/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8d37af2473da79be704c9ce2374f278c47177b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8d37af2473da79be704c9ce2374f278c47177b6", "html_url": "https://github.com/rust-lang/rust/commit/a8d37af2473da79be704c9ce2374f278c47177b6"}], "stats": {"total": 1795, "additions": 453, "deletions": 1342}, "files": [{"sha": "fb5e9dc07a8d6cde43dd893df4b70d7d72cc88a6", "filename": "doc/tutorial.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -2284,10 +2284,6 @@ struct level. Note that fields and methods are _public_ by default.\n ~~~\n mod farm {\n # use farm;\n-# pub type Chicken = int;\n-# type Cow = int;\n-# enum Human = int;\n-# impl Human { fn rest(&self) { } }\n # pub fn make_me_a_farm() -> farm::Farm { farm::Farm { chickens: ~[], cows: ~[], farmer: Human(0) } }\n     pub struct Farm {\n         priv mut chickens: ~[Chicken],\n@@ -2314,8 +2310,12 @@ fn main() {\n      farm::feed_animals(&f);\n      f.farmer.rest();\n }\n+# type Chicken = int;\n+# type Cow = int;\n+# enum Human = int;\n # fn make_me_a_farm() -> farm::Farm { farm::make_me_a_farm() }\n-# fn make_me_a_chicken() -> farm::Chicken { 0 }\n+# fn make_me_a_chicken() -> Chicken { 0 }\n+# impl Human { fn rest(&self) { } }\n ~~~\n \n ## Crates"}, {"sha": "136f40c9c207add13085330ab8acf71c9da19abc", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use cmp;\n \n enum mode { mode_compile_fail, mode_run_fail, mode_run_pass, mode_pretty, }"}, {"sha": "62961f6c6e4ebdad4f0020406316f2cb2dd7c046", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use common::config;\n use io;\n use io::ReaderUtil;"}, {"sha": "730e863d04d4e9ec5a7e8d30fee39934a9ff079f", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use common;\n use common::config;\n use io;"}, {"sha": "666deeca191fdd57fbc68c9f124919cb26f51b01", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use io;\n use io::{ReaderUtil, WriterUtil};\n use libc;"}, {"sha": "a7dbfb9a3b2799b50d29e8e53f3bc0ee0d316047", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use io;\n use io::WriterUtil;\n use os;"}, {"sha": "fe3bf4672c7278b84f2a31ff407f7fd330e95915", "filename": "src/compiletest/util.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Fcompiletest%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Fcompiletest%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Futil.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use io;\n use os;\n use os::getenv;"}, {"sha": "e05260bace208be412710b9f416e2a8ef94c3471", "filename": "src/libcargo/pgp.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcargo%2Fpgp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcargo%2Fpgp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcargo%2Fpgp.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use core::os;\n-use core::path::Path;\n use core::run;\n \n fn gpgv(args: ~[~str]) -> { status: int, out: ~str, err: ~str } {"}, {"sha": "4f3f63c83fcd6b7868979af2bdc068df746a9274", "filename": "src/libcore/at_vec.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fat_vec.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -15,10 +15,8 @@\n #[forbid(deprecated_pattern)];\n \n use cast::transmute;\n-use kinds::Copy;\n use iter;\n use libc;\n-use option::Option;\n use ptr::addr_of;\n use sys;\n use uint;\n@@ -152,10 +150,6 @@ pub pure fn from_elem<T: Copy>(n_elts: uint, t: T) -> @[T] {\n \n #[cfg(notest)]\n pub mod traits {\n-    use at_vec::append;\n-    use kinds::Copy;\n-    use ops::Add;\n-\n     pub impl<T: Copy> @[T] : Add<&[const T],@[T]> {\n         #[inline(always)]\n         pure fn add(&self, rhs: & &self/[const T]) -> @[T] {\n@@ -168,10 +162,8 @@ pub mod traits {\n pub mod traits {}\n \n pub mod raw {\n-    use at_vec::{capacity, rusti, rustrt};\n-    use cast::transmute;\n+    use at_vec::{rusti, rustrt};\n     use libc;\n-    use ptr::addr_of;\n     use ptr;\n     use sys;\n     use uint;"}, {"sha": "3181cb24ea787af23f582a6b8e62d176543676e0", "filename": "src/libcore/bool.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbool.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -19,7 +19,6 @@\n use bool;\n use cmp;\n use cmp::Eq;\n-use option::{None, Option, Some};\n \n /// Negation / inverse\n pub pure fn not(v: bool) -> bool { !v }"}, {"sha": "4ae891915455cfe6e26bbc13180c047d6f38bcff", "filename": "src/libcore/cast.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcast.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -108,8 +108,6 @@ pub unsafe fn copy_lifetime_vec<S,T>(_ptr: &a/[S], ptr: &T) -> &a/T {\n \n #[cfg(test)]\n pub mod tests {\n-    use cast::{bump_box_refcount, reinterpret_cast, transmute};\n-\n     #[test]\n     pub fn test_reinterpret_cast() {\n         assert 1u == unsafe { reinterpret_cast(&1) };"}, {"sha": "4fe60810dc39bc93fc9af56c903a588c7ef22085", "filename": "src/libcore/char.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -16,7 +16,6 @@\n \n use char;\n use cmp::Eq;\n-use option::{None, Option, Some};\n use str;\n use u32;\n use uint;"}, {"sha": "9ea48a45d3c3370c18a99a26eaedbdece8a16b4a", "filename": "src/libcore/condition.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fcondition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fcondition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcondition.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::*;\n use task;\n use task::local_data::{local_data_pop, local_data_set};\n "}, {"sha": "13e0e3002424afdd0de06669f53de7f6b8ffb029", "filename": "src/libcore/core.rc", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -53,9 +53,6 @@ Implicitly, all crates behave as if they included the following prologue:\n #[warn(vecs_implicitly_copyable)];\n #[deny(non_camel_case_types)];\n \n-/* The Prelude. */\n-\n-pub mod prelude;\n \n /* Primitive types */\n \n@@ -246,8 +243,6 @@ pub mod core {\n \n     pub use cmp;\n     pub use condition;\n-    pub use option;\n-    pub use kinds;\n }\n \n "}, {"sha": "89789a38b24da2a8b0ce682d23deeeab3eb6e379", "filename": "src/libcore/dlist.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdlist.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -22,9 +22,7 @@ Do not use ==, !=, <, etc on doubly-linked lists -- it may not terminate.\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n-use kinds::Copy;\n use managed;\n-use option::{None, Option, Some};\n use option;\n use vec;\n \n@@ -96,13 +94,13 @@ impl<T> DListNode<T> {\n }\n \n /// Creates a new dlist node with the given data.\n-pub pure fn new_dlist_node<T>(data: T) -> DListNode<T> {\n+pure fn new_dlist_node<T>(data: T) -> DListNode<T> {\n     DListNode(@{data: move data, mut linked: false,\n                  mut prev: None, mut next: None})\n }\n \n /// Creates a new, empty dlist.\n-pub pure fn DList<T>() -> DList<T> {\n+pure fn DList<T>() -> DList<T> {\n     DList_(@{mut size: 0, mut hd: None, mut tl: None})\n }\n \n@@ -122,7 +120,7 @@ pub fn from_vec<T: Copy>(vec: &[T]) -> DList<T> {\n \n /// Produce a list from a list of lists, leaving no elements behind in the\n /// input. O(number of sub-lists).\n-pub fn concat<T>(lists: DList<DList<T>>) -> DList<T> {\n+fn concat<T>(lists: DList<DList<T>>) -> DList<T> {\n     let result = DList();\n     while !lists.is_empty() {\n         result.append(lists.pop().get());\n@@ -476,9 +474,7 @@ impl<T: Copy> DList<T> {\n mod tests {\n     #[legacy_exports];\n \n-    use dlist::{DList, concat, from_vec, new_dlist_node};\n     use iter;\n-    use option::{None, Some};\n     use vec;\n \n     #[test]"}, {"sha": "dd6b07211213907f69c4e287811c12eb59f8c9c4", "filename": "src/libcore/dvec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdvec.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -25,7 +25,6 @@ Note that recursive use is not permitted.\n \n use cast;\n use cast::reinterpret_cast;\n-use prelude::*;\n use ptr::null;\n use vec;\n "}, {"sha": "b2c70916a0003863d5b784fd1407640bf095767d", "filename": "src/libcore/either.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Feither.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -14,11 +14,10 @@\n \n //! A type that represents one of two alternatives\n \n-use cmp::Eq;\n use cmp;\n-use kinds::Copy;\n-use result::Result;\n+use cmp::Eq;\n use result;\n+use result::Result;\n use vec;\n \n /// The either type"}, {"sha": "312fc18a033c1b23532a7648cca731a8a37c85d6", "filename": "src/libcore/extfmt.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fextfmt.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -82,7 +82,6 @@ debug!(\"hello, %s!\", \"world\");\n \n use cmp::Eq;\n use option::{Some, None};\n-use prelude::*;\n use str;\n \n /*\n@@ -100,7 +99,6 @@ use str;\n #[doc(hidden)]\n pub mod ct {\n     use char;\n-    use prelude::*;\n     use str;\n     use vec;\n "}, {"sha": "34269b88748991ad7cdc84d4438ac1f52fc22ca9", "filename": "src/libcore/float.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffloat.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -31,7 +31,6 @@ use cmp;\n use f64;\n use num;\n use num::Num::from_int;\n-use option::{None, Option, Some};\n use str;\n use uint;\n "}, {"sha": "89f5a4eb8f066fce7079d8dfee72d7c2adfaf846", "filename": "src/libcore/gc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fgc.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -42,7 +42,6 @@ with destructors.\n use cast;\n use io;\n use libc::{size_t, uintptr_t};\n-use option::{None, Option, Some};\n use ptr;\n use send_map::linear::LinearMap;\n use stackwalk;"}, {"sha": "d04123fdb2b2b778a4a34d285122d25d128f50f0", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -21,7 +21,6 @@ use from_str::FromStr;\n use iter;\n use num;\n use num::Num::from_int;\n-use prelude::*;\n use str;\n use uint;\n use vec;"}, {"sha": "9e06cc95270e1c12baea416c984d272210dd1120", "filename": "src/libcore/int-template/int.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fint-template%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fint-template%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template%2Fint.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -50,8 +50,8 @@ mod inst {\n \n     #[test]\n     fn test_overflows() {\n-        assert (::int::max_value > 0);\n-        assert (::int::min_value <= 0);\n-        assert (::int::min_value + ::int::max_value + 1 == 0);\n+        assert (max_value > 0);\n+        assert (min_value <= 0);\n+        assert (min_value + max_value + 1 == 0);\n     }\n }"}, {"sha": "ade4f9d7fc82b67cbbac31576981f757acda72cf", "filename": "src/libcore/io.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -28,15 +28,14 @@ use libc::consts::os::posix88::*;\n use libc::consts::os::extra::*;\n use option;\n use os;\n-use prelude::*;\n use ptr;\n use result;\n use str;\n use uint;\n use vec;\n \n #[allow(non_camel_case_types)] // not sure what to do about this\n-pub type fd_t = c_int;\n+type fd_t = c_int;\n \n #[abi = \"cdecl\"]\n extern mod rustrt {\n@@ -453,12 +452,12 @@ impl<T: Reader, C> {base: T, cleanup: C}: Reader {\n     fn tell(&self) -> uint { self.base.tell() }\n }\n \n-pub struct FILERes {\n+struct FILERes {\n     f: *libc::FILE,\n     drop { libc::fclose(self.f); }\n }\n \n-pub fn FILERes(f: *libc::FILE) -> FILERes {\n+fn FILERes(f: *libc::FILE) -> FILERes {\n     FILERes {\n         f: f\n     }\n@@ -630,12 +629,12 @@ impl fd_t: Writer {\n     }\n }\n \n-pub struct FdRes {\n+struct FdRes {\n     fd: fd_t,\n     drop { libc::close(self.fd); }\n }\n \n-pub fn FdRes(fd: fd_t) -> FdRes {\n+fn FdRes(fd: fd_t) -> FdRes {\n     FdRes {\n         fd: fd\n     }\n@@ -1029,10 +1028,7 @@ pub fn read_whole_file(file: &Path) -> Result<~[u8], ~str> {\n // fsync related\n \n pub mod fsync {\n-    use io::{FILERes, FdRes, fd_t};\n-    use kinds::Copy;\n     use libc;\n-    use option::Option;\n     use option;\n     use os;\n \n@@ -1117,11 +1113,8 @@ pub mod fsync {\n \n #[cfg(test)]\n mod tests {\n-    use debug;\n     use i32;\n-    use io::{BytesWriter, SeekCur, SeekEnd, SeekSet};\n     use io;\n-    use path::Path;\n     use result;\n     use str;\n     use u64;"}, {"sha": "59eb9fbae8eea7dd2b2fe627b03f4e5a77293541", "filename": "src/libcore/iter-trait.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fiter-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fiter-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter-trait.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -16,10 +16,7 @@\n #[forbid(deprecated_pattern)];\n \n use cmp::{Eq, Ord};\n-use iter::BaseIter;\n use iter;\n-use kinds::Copy;\n-use option::Option;\n \n use self::inst::{IMPL_T, EACH, SIZE_HINT};\n "}, {"sha": "42ed4b5f73cc02d92e348a080268b1b9a45cef5e", "filename": "src/libcore/iter-trait/dlist.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fiter-trait%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fiter-trait%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter-trait%2Fdlist.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -11,7 +11,6 @@\n mod inst {\n     use dlist;\n     use managed;\n-    use option::{Option, Some};\n     use option;\n \n     #[allow(non_camel_case_types)]"}, {"sha": "f338578d1432a123e00cb74e1f14f1fb1c17c225", "filename": "src/libcore/iter-trait/dvec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fiter-trait%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fiter-trait%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter-trait%2Fdvec.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -10,7 +10,6 @@\n \n mod inst {\n     use dvec;\n-    use option::{Option, Some};\n \n     #[allow(non_camel_case_types)]\n     pub type IMPL_T<A> = dvec::DVec<A>;"}, {"sha": "a3a18a5509a17953f92271c62fbb1396a644303e", "filename": "src/libcore/iter-trait/option.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fiter-trait%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fiter-trait%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter-trait%2Foption.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n mod inst {\n-    use option::{None, Option, Some};\n-\n     #[allow(non_camel_case_types)]\n     pub type IMPL_T<A> = Option<A>;\n \n@@ -27,4 +25,4 @@ mod inst {\n             Some(_) => Some(1)\n         }\n     }\n-}\n+}\n\\ No newline at end of file"}, {"sha": "db82fa14950a058536af98ec70b8dd0c1ccf6195", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -18,8 +18,6 @@ The iteration traits and common implementation\n #[forbid(deprecated_pattern)];\n \n use cmp::{Eq, Ord};\n-use kinds::Copy;\n-use option::{None, Option, Some};\n use vec;\n \n /// A function used to initialize the elements of a sequence"}, {"sha": "ae29bbe30851275e1b3584f08600c732b55b5803", "filename": "src/libcore/libc.rs", "status": "modified", "additions": 28, "deletions": 87, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flibc.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -164,7 +164,7 @@ pub use libc::funcs::posix88::unistd::{getpid, isatty, lseek, pipe, read};\n pub use libc::funcs::posix88::unistd::{rmdir, unlink, write};\n \n \n-pub mod types {\n+mod types {\n \n     // Types tend to vary *per architecture* so we pull their definitions out\n     // into this module.\n@@ -230,8 +230,6 @@ pub mod types {\n                 pub type uintptr_t = uint;\n             }\n             pub mod posix88 {\n-                use prelude::*;\n-\n                 pub type off_t = i32;\n                 pub type dev_t = u64;\n                 pub type ino_t = u32;\n@@ -530,6 +528,33 @@ pub mod types {\n     pub mod os {\n         pub mod common {\n             pub mod posix01 {\n+                pub type nlink_t = u16;\n+                pub type blksize_t = i64;\n+                pub type blkcnt_t = i32;\n+                pub struct stat {\n+                    st_dev: dev_t,\n+                    st_mode: mode_t,\n+                    st_nlink: nlink_t,\n+                    st_ino: ino_t,\n+                    st_uid: uid_t,\n+                    st_gid: gid_t,\n+                    st_rdev: dev_t,\n+                    st_atime: time_t,\n+                    st_atime_nsec: c_long,\n+                    st_mtime: time_t,\n+                    st_mtime_nsec: c_long,\n+                    st_ctime: time_t,\n+                    st_ctime_nsec: c_long,\n+                    st_birthtime: time_t,\n+                    st_birthtime_nsec: c_long,\n+                    st_size: off_t,\n+                    st_blocks: blkcnt_t,\n+                    st_blksize: blksize_t,\n+                    st_flags: uint32_t,\n+                    st_gen: uint32_t,\n+                    st_lspare: int32_t,\n+                    st_qspare: [int64_t * 2],\n+                }\n             }\n         }\n \n@@ -571,34 +596,6 @@ pub mod types {\n                 pub type ssize_t = i32;\n             }\n             pub mod posix01 {\n-                pub type nlink_t = u16;\n-                pub type blksize_t = i64;\n-                pub type blkcnt_t = i32;\n-\n-                pub struct stat {\n-                    st_dev: dev_t,\n-                    st_mode: mode_t,\n-                    st_nlink: nlink_t,\n-                    st_ino: ino_t,\n-                    st_uid: uid_t,\n-                    st_gid: gid_t,\n-                    st_rdev: dev_t,\n-                    st_atime: time_t,\n-                    st_atime_nsec: c_long,\n-                    st_mtime: time_t,\n-                    st_mtime_nsec: c_long,\n-                    st_ctime: time_t,\n-                    st_ctime_nsec: c_long,\n-                    st_birthtime: time_t,\n-                    st_birthtime_nsec: c_long,\n-                    st_size: off_t,\n-                    st_blocks: blkcnt_t,\n-                    st_blksize: blksize_t,\n-                    st_flags: uint32_t,\n-                    st_gen: uint32_t,\n-                    st_lspare: int32_t,\n-                    st_qspare: [int64_t * 2],\n-                }\n             }\n             pub mod posix08 {\n             }\n@@ -646,40 +643,6 @@ pub mod types {\n                 pub type ssize_t = i64;\n             }\n             pub mod posix01 {\n-                use libc::types::common::c99::{int32_t, int64_t};\n-                use libc::types::common::c99::{uint32_t};\n-                use libc::types::os::arch::c95::{c_long, time_t};\n-                use libc::types::os::arch::posix88::{dev_t, gid_t, ino_t};\n-                use libc::types::os::arch::posix88::{mode_t, off_t, uid_t};\n-\n-                pub type nlink_t = u16;\n-                pub type blksize_t = i64;\n-                pub type blkcnt_t = i32;\n-\n-                pub struct stat {\n-                    st_dev: dev_t,\n-                    st_mode: mode_t,\n-                    st_nlink: nlink_t,\n-                    st_ino: ino_t,\n-                    st_uid: uid_t,\n-                    st_gid: gid_t,\n-                    st_rdev: dev_t,\n-                    st_atime: time_t,\n-                    st_atime_nsec: c_long,\n-                    st_mtime: time_t,\n-                    st_mtime_nsec: c_long,\n-                    st_ctime: time_t,\n-                    st_ctime_nsec: c_long,\n-                    st_birthtime: time_t,\n-                    st_birthtime_nsec: c_long,\n-                    st_size: off_t,\n-                    st_blocks: blkcnt_t,\n-                    st_blksize: blksize_t,\n-                    st_flags: uint32_t,\n-                    st_gen: uint32_t,\n-                    st_lspare: int32_t,\n-                    st_qspare: [int64_t * 2],\n-                }\n             }\n             pub mod posix08 {\n             }\n@@ -971,11 +934,6 @@ pub mod funcs {\n     // or anything. The same is not true of POSIX.\n \n     pub mod c95 {\n-        use libc::types::common::c95::{FILE, c_void, fpos_t};\n-        use libc::types::common::posix88::dirent_t;\n-        use libc::types::os::arch::c95::{c_char, c_double, c_int, c_long};\n-        use libc::types::os::arch::c95::{c_uint, c_ulong, c_void, size_t};\n-\n         #[nolink]\n         #[abi = \"cdecl\"]\n         pub extern mod ctype {\n@@ -1216,14 +1174,6 @@ pub mod funcs {\n     #[cfg(target_os = \"macos\")]\n     #[cfg(target_os = \"freebsd\")]\n     pub mod posix88 {\n-        use libc::types::common::c95::{FILE, c_void};\n-        use libc::types::common::posix88::{DIR, dirent_t};\n-        use libc::types::os::arch::c95::{c_char, c_int, c_long, c_uint};\n-        use libc::types::os::arch::c95::{size_t};\n-        use libc::types::os::arch::posix01::stat;\n-        use libc::types::os::arch::posix88::{gid_t, mode_t, off_t, pid_t};\n-        use libc::types::os::arch::posix88::{ssize_t, uid_t};\n-\n         #[nolink]\n         #[abi = \"cdecl\"]\n         pub extern mod stat_ {\n@@ -1332,10 +1282,6 @@ pub mod funcs {\n     #[cfg(target_os = \"macos\")]\n     #[cfg(target_os = \"freebsd\")]\n     pub mod posix01 {\n-        use libc::types::os::arch::c95::{c_char, c_int, size_t};\n-        use libc::types::os::arch::posix01::stat;\n-        use libc::types::os::arch::posix88::{pid_t, ssize_t};\n-\n         #[nolink]\n         #[abi = \"cdecl\"]\n         pub extern mod stat_ {\n@@ -1403,9 +1349,6 @@ pub mod funcs {\n     #[nolink]\n     #[abi = \"cdecl\"]\n     pub extern mod bsd44 {\n-        use libc::types::common::c95::{c_void};\n-        use libc::types::os::arch::c95::{c_char, c_int, c_uint, size_t};\n-\n         fn sysctl(name: *c_int, namelen: c_uint,\n                   oldp: *mut c_void, oldlenp: *mut size_t,\n                   newp: *c_void, newlen: size_t) -> c_int;\n@@ -1428,8 +1371,6 @@ pub mod funcs {\n     #[nolink]\n     #[abi = \"cdecl\"]\n     pub extern mod extra {\n-        use libc::types::os::arch::c95::{c_char, c_int};\n-\n         fn _NSGetExecutablePath(buf: *mut c_char,\n                                 bufsize: *mut u32) -> c_int;\n     }"}, {"sha": "5bbb5f6bec20d727b86b41e45b384abf1f33e82e", "filename": "src/libcore/managed.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fmanaged.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fmanaged.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmanaged.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -15,12 +15,10 @@\n #[forbid(deprecated_pattern)];\n \n use cmp::{Eq, Ord};\n-use prelude::*;\n+use intrinsic::TyDesc;\n use ptr;\n \n pub mod raw {\n-    use intrinsic::TyDesc;\n-\n     pub struct BoxHeaderRepr {\n         ref_count: uint,\n         type_desc: *TyDesc,"}, {"sha": "2ce2c323cbffe9012bf75cdd67869d46597ac2a8", "filename": "src/libcore/oldcomm.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Foldcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Foldcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foldcomm.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -52,13 +52,11 @@ use either::Either;\n use iter;\n use libc;\n use libc::size_t;\n-use prelude::*;\n use ptr;\n use result;\n use sys;\n use task;\n use vec;\n-\n // After snapshot, change p2::addr_of => addr_of\n \n /**"}, {"sha": "a46736055a098a1dbf39baeed32724b037edd668", "filename": "src/libcore/option.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -45,7 +45,6 @@ let unwrapped_msg = match move msg {\n #[forbid(deprecated_pattern)];\n \n use cmp::Eq;\n-use kinds::Copy;\n use option;\n use ptr;\n use str;"}, {"sha": "b42d6d363e35874143fcb4c4466a8f7defe57fbb", "filename": "src/libcore/os.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -38,7 +38,6 @@ use libc::{c_char, c_void, c_int, c_uint, size_t, ssize_t};\n use libc::{mode_t, pid_t, FILE};\n use option;\n use option::{Some, None};\n-use prelude::*;\n use private;\n use ptr;\n use str;\n@@ -145,7 +144,6 @@ mod global_env {\n     use either;\n     use libc;\n     use oldcomm;\n-    use option::Option;\n     use private;\n     use str;\n     use task;\n@@ -219,7 +217,6 @@ mod global_env {\n     mod impl_ {\n         use cast;\n         use libc;\n-        use option::Option;\n         use option;\n         use ptr;\n         use str;\n@@ -783,7 +780,7 @@ unsafe fn load_argc_and_argv(argc: c_int, argv: **c_char) -> ~[~str] {\n  * Returns a list of the command line arguments.\n  */\n #[cfg(target_os = \"macos\")]\n-pub fn real_args() -> ~[~str] {\n+fn real_args() -> ~[~str] {\n     unsafe {\n         let (argc, argv) = (*_NSGetArgc() as c_int,\n                             *_NSGetArgv() as **c_char);\n@@ -793,7 +790,7 @@ pub fn real_args() -> ~[~str] {\n \n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"freebsd\")]\n-pub fn real_args() -> ~[~str] {\n+fn real_args() -> ~[~str] {\n     unsafe {\n         let argc = rustrt::rust_get_argc();\n         let argv = rustrt::rust_get_argv();\n@@ -802,7 +799,7 @@ pub fn real_args() -> ~[~str] {\n }\n \n #[cfg(windows)]\n-pub fn real_args() -> ~[~str] {\n+fn real_args() -> ~[~str] {\n     let mut nArgs: c_int = 0;\n     let lpArgCount = ptr::to_mut_unsafe_ptr(&mut nArgs);\n     let lpCmdLine = GetCommandLineW();\n@@ -876,7 +873,7 @@ extern {\n     pub fn _NSGetArgv() -> ***c_char;\n }\n \n-pub mod consts {\n+mod consts {\n \n     #[cfg(unix)]\n     use os::consts::unix::*;\n@@ -957,23 +954,17 @@ pub mod consts {\n #[cfg(test)]\n #[allow(non_implicitly_copyable_typarams)]\n mod tests {\n-    use debug;\n-    use libc::{c_int, c_void, size_t};\n     use libc;\n-    use option::{None, Option, Some};\n     use option;\n-    use os::{as_c_charp, env, getcwd, getenv, make_absolute, real_args};\n-    use os::{remove_file, setenv};\n     use os;\n-    use path::Path;\n     use rand;\n     use run;\n     use str;\n     use vec;\n \n     #[test]\n     pub fn last_os_error() {\n-        log(debug, os::last_os_error());\n+        log(debug, last_os_error());\n     }\n \n     #[test]"}, {"sha": "115983e5fdb49537d680cbcc49e320bac83c53c0", "filename": "src/libcore/path.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -20,10 +20,8 @@ Cross-platform file path handling\n \n use cmp::Eq;\n use libc;\n-use option::{None, Option, Some};\n use ptr;\n use str;\n-use to_str::ToStr;\n \n #[deriving_eq]\n pub struct WindowsPath {\n@@ -753,8 +751,6 @@ pub pure fn normalize(components: &[~str]) -> ~[~str] {\n // Various windows helpers, and tests for the impl.\n pub mod windows {\n     use libc;\n-    use option::{None, Option, Some};\n-    use to_str::ToStr;\n \n     #[inline(always)]\n     pub pure fn is_sep(u: u8) -> bool {\n@@ -797,8 +793,7 @@ pub mod windows {\n \n #[cfg(test)]\n mod tests {\n-    use option::{None, Some};\n-    use path::{PosixPath, WindowsPath, windows};\n+    use path::windows;\n     use str;\n \n     #[test]"}, {"sha": "a129a9f4c5af8d04e6d43dea6224eec9a4be7e2b", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -90,13 +90,11 @@ bounded and unbounded protocols allows for less code duplication.\n use cmp::Eq;\n use cast::{forget, reinterpret_cast, transmute};\n use either::{Either, Left, Right};\n-use kinds::Owned;\n use libc;\n use option;\n use option::unwrap;\n use pipes;\n use ptr;\n-use prelude::*;\n use private;\n use task;\n use vec;\n@@ -1240,8 +1238,6 @@ pub fn try_send_one<T: Owned>(chan: ChanOne<T>, data: T)\n }\n \n pub mod rt {\n-    use option::{None, Option, Some};\n-\n     // These are used to hide the option constructors from the\n     // compiler because their names are changing\n     pub fn make_some<T>(val: T) -> Option<T> { Some(move val) }\n@@ -1250,8 +1246,7 @@ pub mod rt {\n \n #[cfg(test)]\n pub mod test {\n-    use either::{Either, Left, Right};\n-    use pipes::{Chan, Port, oneshot, recv_one, stream};\n+    use pipes::oneshot;\n     use pipes;\n \n     #[test]"}, {"sha": "3d5139a2d32a1231889db9eb8717471b19d165a8", "filename": "src/libcore/prelude.rs", "status": "removed", "additions": 0, "deletions": 93, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/a8d37af2473da79be704c9ce2374f278c47177b6/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d37af2473da79be704c9ce2374f278c47177b6/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=a8d37af2473da79be704c9ce2374f278c47177b6", "patch": "@@ -1,93 +0,0 @@\n-// This file is imported into every module by default.\n-\n-/* Reexported core operators */\n-\n-pub use kinds::{Const, Copy, Owned, Durable};\n-pub use ops::{Drop};\n-pub use ops::{Add, Sub, Mul, Div, Modulo, Neg};\n-pub use ops::{BitAnd, BitOr, BitXor};\n-pub use ops::{Shl, Shr, Index};\n-pub use option::{Option, Some, None};\n-pub use result::{Result, Ok, Err};\n-\n-/* Reexported types and traits */\n-\n-pub use path::Path;\n-pub use path::GenericPath;\n-pub use path::WindowsPath;\n-pub use path::PosixPath;\n-\n-pub use tuple::{CopyableTuple, ImmutableTuple, ExtendedTupleOps};\n-pub use str::{StrSlice, Trimmable};\n-pub use vec::{ConstVector, CopyableVector, ImmutableVector};\n-pub use vec::{ImmutableEqVector, ImmutableCopyableVector};\n-pub use vec::{MutableVector, MutableCopyableVector};\n-pub use iter::{BaseIter, ExtendedIter, EqIter, CopyableIter};\n-pub use iter::{CopyableOrderedIter, CopyableNonstrictIter, Times};\n-\n-pub use num::Num;\n-pub use ptr::Ptr;\n-pub use to_str::ToStr;\n-pub use clone::Clone;\n-\n-pub use cmp::{Eq, Ord};\n-pub use hash::Hash;\n-pub use to_bytes::IterBytes;\n-\n-/* Reexported modules */\n-\n-pub use at_vec;\n-pub use bool;\n-pub use cast;\n-pub use char;\n-pub use cmp;\n-pub use dvec;\n-pub use either;\n-pub use extfmt;\n-pub use f32;\n-pub use f64;\n-pub use float;\n-pub use i16;\n-pub use i32;\n-pub use i64;\n-pub use i8;\n-pub use int;\n-pub use io;\n-pub use iter;\n-pub use libc;\n-pub use num;\n-pub use oldcomm;\n-pub use ops;\n-pub use option;\n-pub use os;\n-pub use path;\n-pub use pipes;\n-pub use private;\n-pub use ptr;\n-pub use rand;\n-pub use result;\n-pub use str;\n-pub use sys;\n-pub use task;\n-pub use to_str;\n-pub use u16;\n-pub use u32;\n-pub use u64;\n-pub use u8;\n-pub use uint;\n-pub use vec;\n-\n-/*\n- * Export the log levels as global constants. Higher levels mean\n- * more-verbosity. Error is the bottom level, default logging level is\n- * warn-and-below.\n- */\n-\n-/// The error log level\n-pub const error : u32 = 1_u32;\n-/// The warning log level\n-pub const warn : u32 = 2_u32;\n-/// The info log level\n-pub const info : u32 = 3_u32;\n-/// The debug log level\n-pub const debug : u32 = 4_u32;"}, {"sha": "efa5062ad98eb69b01bffede0371cafda176aed6", "filename": "src/libcore/private.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fprivate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fprivate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -21,7 +21,6 @@ use libc;\n use oldcomm;\n use option;\n use pipes;\n-use prelude::*;\n use ptr;\n use result;\n use task;\n@@ -581,11 +580,8 @@ pub fn unwrap_exclusive<T: Owned>(arc: Exclusive<T>) -> T {\n \n #[cfg(test)]\n pub mod tests {\n-    use core::option::{None, Some};\n-\n     use option;\n     use pipes;\n-    use private::{exclusive, unwrap_exclusive};\n     use result;\n     use task;\n     use uint;"}, {"sha": "d816f23d4c0ad198d25c0b007c2641e7f8478fc4", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -15,7 +15,6 @@\n #[forbid(deprecated_pattern)];\n \n use int;\n-use prelude::*;\n use str;\n use task;\n use u32;\n@@ -363,8 +362,7 @@ pub fn random() -> uint {\n \n #[cfg(test)]\n pub mod tests {\n-    use debug;\n-    use option::{None, Option, Some};\n+    use option::Option;\n     use rand;\n \n     #[test]"}, {"sha": "9e9886e66ab18fc1d387276e8b38b825ca141c26", "filename": "src/libcore/result.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -19,8 +19,6 @@ use cmp;\n use cmp::Eq;\n use either;\n use either::Either;\n-use kinds::Copy;\n-use option::{None, Option, Some};\n use vec;\n \n /// The result type\n@@ -384,7 +382,6 @@ pub pure fn unwrap_err<T, U>(res: Result<T, U>) -> U {\n mod tests {\n     #[legacy_exports];\n \n-    use result::{Err, Ok, Result, chain, get, get_err};\n     use result;\n \n     fn op1() -> result::Result<int, ~str> { result::Ok(666) }"}, {"sha": "b753c647627aece78eef6ebafbd872aeb4b5903b", "filename": "src/libcore/run.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -20,7 +20,6 @@ use libc::{pid_t, c_void, c_int};\n use oldcomm;\n use option::{Some, None};\n use os;\n-use prelude::*;\n use ptr;\n use run;\n use str;\n@@ -350,7 +349,7 @@ pub fn program_output(prog: &str, args: &[~str]) ->\n     return {status: status, out: move outs, err: move errs};\n }\n \n-pub fn writeclose(fd: c_int, s: ~str) {\n+fn writeclose(fd: c_int, s: ~str) {\n     use io::WriterUtil;\n \n     error!(\"writeclose %d, %s\", fd as int, s);\n@@ -360,7 +359,7 @@ pub fn writeclose(fd: c_int, s: ~str) {\n     os::close(fd);\n }\n \n-pub fn readclose(fd: c_int) -> ~str {\n+fn readclose(fd: c_int) -> ~str {\n     let file = os::fdopen(fd);\n     let reader = io::FILE_reader(file, false);\n     let buf = io::with_bytes_writer(|writer| {\n@@ -418,11 +417,8 @@ pub fn waitpid(pid: pid_t) -> int {\n \n #[cfg(test)]\n mod tests {\n-    use debug;\n     use io::WriterUtil;\n-    use option::{None, Some};\n     use os;\n-    use run::{readclose, writeclose};\n     use run;\n \n     // Regression test for memory leaks"}, {"sha": "b6f237e14fb0e2434a77e0cb28f58dfd6dccf283", "filename": "src/libcore/send_map.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fsend_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fsend_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsend_map.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -20,7 +20,6 @@ Sendable hash maps.  Very much a work in progress.\n \n use cmp::Eq;\n use hash::Hash;\n-use prelude::*;\n use to_bytes::IterBytes;\n \n pub trait SendMap<K:Eq Hash, V: Copy> {\n@@ -46,14 +45,9 @@ pub trait SendMap<K:Eq Hash, V: Copy> {\n \n /// Open addressing with linear probing.\n pub mod linear {\n-    use cmp::Eq;\n     use cmp;\n-    use hash::Hash;\n-    use kinds::Copy;\n-    use option::{None, Option, Some};\n     use option;\n     use rand;\n-    use to_bytes::IterBytes;\n     use uint;\n     use vec;\n \n@@ -464,7 +458,6 @@ pub mod linear {\n \n #[test]\n pub mod test {\n-    use option::{None, Some};\n     use send_map::linear::LinearMap;\n     use send_map::linear;\n     use uint;"}, {"sha": "a1595e4135ed27ea15152125582a083fa7d6ea39", "filename": "src/libcore/str.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -27,7 +27,6 @@ use cmp::{Eq, Ord};\n use libc;\n use libc::size_t;\n use io::WriterUtil;\n-use option::{None, Option, Some};\n use ptr;\n use str;\n use to_str::ToStr;\n@@ -1950,7 +1949,6 @@ pub mod raw {\n     use libc;\n     use ptr;\n     use str::raw;\n-    use str::{as_buf, is_utf8, len, reserve_at_least};\n     use vec;\n \n     /// Create a Rust string from a null-terminated *u8 buffer\n@@ -2131,9 +2129,6 @@ impl ~str: Trimmable {\n \n #[cfg(notest)]\n pub mod traits {\n-    use ops::Add;\n-    use str::append;\n-\n     impl ~str : Add<&str,~str> {\n         #[inline(always)]\n         pure fn add(&self, rhs: & &self/str) -> ~str {\n@@ -2313,11 +2308,10 @@ impl &str: StrSlice {\n #[cfg(test)]\n mod tests {\n     use char;\n-    use debug;\n     use libc::c_char;\n     use libc;\n     use ptr;\n-    use str::*;\n+    use str::raw;\n     use vec;\n \n     #[test]"}, {"sha": "d79fa3a86ff75244558fa6672ae6ca39c8f49e02", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -146,7 +146,6 @@ pub pure fn begin_unwind_(msg: *c_char, file: *c_char, line: size_t) -> ! {\n #[cfg(test)]\n pub mod tests {\n     use cast;\n-    use sys::{Closure, pref_align_of, size_of};\n \n     #[test]\n     pub fn size_of_basic() {"}, {"sha": "0cfceb6358a6500b6d5eae1626da95c488fa3a3e", "filename": "src/libcore/task/local_data.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Ftask%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Ftask%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Flocal_data.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -26,7 +26,6 @@ magic.\n \n */\n \n-use prelude::*;\n use rt;\n use task::local_data_priv::{local_get, local_pop, local_modify, local_set};\n use task;"}, {"sha": "c6b3cfa6626bb56d94d2bad9750a415c72bbd140", "filename": "src/libcore/task/local_data_priv.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Ftask%2Flocal_data_priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Ftask%2Flocal_data_priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Flocal_data_priv.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -11,11 +11,9 @@\n #[doc(hidden)]; // FIXME #3538\n \n use cast;\n-use cmp::Eq;\n use dvec;\n use libc;\n use option;\n-use prelude::*;\n use task::rt;\n use task::local_data::LocalDataKey;\n "}, {"sha": "245b955c8711a29c2ede0f179d1aa3d88615bbfe", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -48,7 +48,6 @@ use option;\n use result::Result;\n use pipes::{stream, Chan, Port};\n use pipes;\n-use prelude::*;\n use ptr;\n use result;\n use task::local_data_priv::{local_get, local_set};"}, {"sha": "a904cbec3e592d7fd1e1a02f85a2d9fd386f4258", "filename": "src/libcore/task/spawn.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -76,19 +76,13 @@\n use cast;\n use oldcomm;\n use option;\n-use pipes::{Chan, Port};\n use pipes;\n-use prelude::*;\n use private;\n use ptr;\n use send_map;\n-use task::local_data_priv::{local_get, local_set};\n+use task::rt;\n use task::rt::rust_task;\n use task::rt::rust_closure;\n-use task::rt;\n-use task::{Failure, ManualThreads, PlatformThread, SchedOpts, SingleThreaded};\n-use task::{Success, TaskOpts, TaskResult, ThreadPerCore, ThreadPerTask};\n-use task::{default_task_opts, unkillable};\n use uint;\n use util;\n "}, {"sha": "edd69219c3fcda27d6a97b2bb2c550cd2558fd27", "filename": "src/libcore/to_bytes.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_bytes.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -20,7 +20,6 @@ The `ToBytes` and `IterBytes` traits\n \n use io;\n use io::Writer;\n-use option::{None, Option, Some};\n use str;\n \n pub type Cb = fn(buf: &[const u8]) -> bool;\n@@ -182,8 +181,6 @@ pub mod x32 {\n \n #[cfg(target_word_size = \"64\")]\n pub mod x64 {\n-    use to_bytes::{Cb, IterBytes};\n-\n     pub impl uint: IterBytes {\n         #[inline(always)]\n         pure fn iter_bytes(&self, lsb0: bool, f: Cb) {"}, {"sha": "963901c2c75d84df32c894c8a325fb5dd2711234", "filename": "src/libcore/to_str.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_str.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -18,7 +18,6 @@ The `ToStr` trait for converting to strings\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n-use kinds::Copy;\n use str;\n use vec;\n "}, {"sha": "c602c19317021f8e02297f0c424926297ce92de1", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -15,7 +15,6 @@\n //! Operations on tuples\n \n use cmp::{Eq, Ord};\n-use kinds::Copy;\n use vec;\n \n pub trait CopyableTuple<T, U> {"}, {"sha": "ec28056828228dd5cd58417861576025ba94abe4", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -19,7 +19,6 @@ use cmp::{Eq, Ord};\n use from_str::FromStr;\n use iter;\n use num;\n-use option::{None, Option, Some};\n use str;\n use uint;\n use vec;"}, {"sha": "7dbc9f76f7ac6507fda6e5d4e7a75fdf81747757", "filename": "src/libcore/util.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Futil.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -19,7 +19,6 @@ Miscellaneous helpers for common patterns.\n #[forbid(deprecated_pattern)];\n \n use cmp::Eq;\n-use prelude::*;\n \n /// The identity function.\n #[inline(always)]\n@@ -105,10 +104,6 @@ pub fn unreachable() -> ! {\n \n mod tests {\n     #[legacy_exports];\n-\n-    use option::{None, Some};\n-    use util::{NonCopyable, id, replace, swap};\n-\n     #[test]\n     fn identity_crisis() {\n         // Writing a test for the identity function. How did it come to this?"}, {"sha": "a128b45c350263b35f032336a67152d113f1e19a", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -16,12 +16,10 @@\n \n use cast;\n use cmp::{Eq, Ord};\n-use iter::BaseIter;\n use iter;\n-use kinds::Copy;\n use libc;\n use libc::size_t;\n-use option::{None, Option, Some};\n+use option::{Some, None};\n use ptr;\n use ptr::addr_of;\n use sys;\n@@ -675,7 +673,7 @@ pub pure fn append_one<T>(lhs: ~[T], x: T) -> ~[T] {\n }\n \n #[inline(always)]\n-pub pure fn append_mut<T: Copy>(lhs: ~[mut T], rhs: &[const T]) -> ~[mut T] {\n+pure fn append_mut<T: Copy>(lhs: ~[mut T], rhs: &[const T]) -> ~[mut T] {\n     to_mut(append(from_mut(lhs), rhs))\n }\n \n@@ -1519,10 +1517,6 @@ impl<T: Ord> @[T] : Ord {\n \n #[cfg(notest)]\n pub mod traits {\n-    use kinds::Copy;\n-    use ops::Add;\n-    use vec::{append, append_mut};\n-\n     impl<T: Copy> ~[T] : Add<&[const T],~[T]> {\n         #[inline(always)]\n         pure fn add(&self, rhs: & &self/[const T]) -> ~[T] {\n@@ -1845,14 +1839,10 @@ pub struct UnboxedVecRepr {\n \n /// Unsafe operations\n pub mod raw {\n-    use kinds::Copy;\n     use managed;\n-    use option::{None, Some};\n     use option;\n-    use ptr::addr_of;\n     use ptr;\n     use sys;\n-    use vec::{UnboxedVecRepr, as_const_buf, as_mut_buf, len, with_capacity};\n     use vec::rusti;\n \n     /// The internal representation of a (boxed) vector\n@@ -2002,9 +1992,8 @@ pub mod raw {\n pub mod bytes {\n     use libc;\n     use uint;\n-    use vec::len;\n-    use vec::raw;\n     use vec;\n+    use vec::raw;\n \n     /// Bytewise string comparison\n     pub pure fn cmp(a: &~[u8], b: &~[u8]) -> int {\n@@ -2291,9 +2280,8 @@ impl<A:Copy> @[A] : iter::CopyableNonstrictIter<A> {\n \n #[cfg(test)]\n mod tests {\n-    use option::{None, Option, Some};\n     use option;\n-    use vec::*;\n+    use vec::raw;\n \n     fn square(n: uint) -> uint { return n * n; }\n "}, {"sha": "59d9886455aa894b314fc88bdb0d6614d358bdf2", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use back::rpath;\n use driver::session;\n@@ -30,7 +29,6 @@ use core::cmp;\n use core::hash;\n use core::io::{Writer, WriterUtil};\n use core::libc::{c_int, c_uint, c_char};\n-use core::os::consts::{macos, freebsd, linux, win32};\n use core::os;\n use core::ptr;\n use core::run;\n@@ -43,7 +41,9 @@ use syntax::ast_map::{path, path_mod, path_name};\n use syntax::attr;\n use syntax::print::pprust;\n \n-pub enum output_type {\n+use core::os::consts::{macos, freebsd, linux, win32};\n+\n+enum output_type {\n     output_type_none,\n     output_type_bitcode,\n     output_type_assembly,\n@@ -59,7 +59,7 @@ impl output_type : cmp::Eq {\n     pure fn ne(&self, other: &output_type) -> bool { !(*self).eq(other) }\n }\n \n-pub fn llvm_err(sess: Session, +msg: ~str) -> ! unsafe {\n+fn llvm_err(sess: Session, +msg: ~str) -> ! unsafe {\n     let cstr = llvm::LLVMRustGetLastError();\n     if cstr == ptr::null() {\n         sess.fatal(msg);\n@@ -68,7 +68,7 @@ pub fn llvm_err(sess: Session, +msg: ~str) -> ! unsafe {\n     }\n }\n \n-pub fn WriteOutputFile(sess: Session,\n+fn WriteOutputFile(sess: Session,\n         PM: lib::llvm::PassManagerRef, M: ModuleRef,\n         Triple: *c_char,\n         // FIXME: When #2334 is fixed, change\n@@ -86,14 +86,10 @@ pub fn WriteOutputFile(sess: Session,\n pub mod jit {\n     #[legacy_exports];\n \n-    use back::link::llvm_err;\n     use lib::llvm::llvm;\n-    use lib::llvm::{ModuleRef, PassManagerRef, mk_target_data};\n     use metadata::cstore;\n-    use session::Session;\n \n     use core::cast;\n-    use core::libc::c_int;\n     use core::ptr;\n     use core::str;\n \n@@ -165,19 +161,11 @@ mod write {\n     #[legacy_exports];\n \n     use back::link::jit;\n-    use back::link::{ModuleRef, WriteOutputFile, output_type};\n-    use back::link::{output_type_assembly, output_type_bitcode};\n-    use back::link::{output_type_exe, output_type_llvm_assembly};\n-    use back::link::{output_type_object};\n     use driver::session;\n     use lib::llvm::llvm;\n-    use lib::llvm::{False, True, mk_pass_manager, mk_target_data};\n     use lib;\n-    use session::Session;\n \n     use core::char;\n-    use core::libc::{c_char, c_int, c_uint};\n-    use core::path::Path;\n     use core::str;\n     use core::vec;\n "}, {"sha": "c6b43ff6ad53a22221acb96d74cb880be75a14d3", "filename": "src/librustc/back/rpath.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Frpath.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use driver::session;\n use metadata::cstore;\n@@ -21,13 +20,7 @@ use core::vec;\n use std::map::HashMap;\n use std::map;\n \n-export get_absolute_rpath;\n-export get_install_prefix_rpath;\n-export get_relative_to;\n export get_rpath_flags;\n-export get_rpath_relative_to_output;\n-export minimize_rpaths;\n-export rpaths_to_flags;\n \n pure fn not_win32(os: session::os) -> bool {\n   match os {\n@@ -209,11 +202,6 @@ fn minimize_rpaths(rpaths: &[Path]) -> ~[Path] {\n mod test {\n     #[legacy_exports];\n \n-    use core::prelude::*;\n-\n-    use back::rpath::{get_absolute_rpath, get_install_prefix_rpath};\n-    use back::rpath::{get_relative_to, get_rpath_relative_to_output};\n-    use back::rpath::{minimize_rpaths, rpaths_to_flags};\n     use driver::session;\n \n     use core::os;"}, {"sha": "3212adf29ac3413e6a09c45dcadd7bc0137fd1d9", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -9,7 +9,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use back::link;\n use back::{x86, x86_64};\n@@ -831,13 +830,7 @@ fn list_metadata(sess: Session, path: &Path, out: io::Writer) {\n mod test {\n     #[legacy_exports];\n \n-    use core::prelude::*;\n-\n-    use driver::driver::{build_configuration, build_session};\n-    use driver::driver::{build_session_options, optgroups, str_input};\n-\n     use core::vec;\n-    use std::getopts::groups::getopts;\n     use std::getopts;\n     use syntax::attr;\n     use syntax::diagnostic;"}, {"sha": "d60ad7606fdec61a058464a1d4a51c4fed4381a4", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use back::link;\n use back::target_strs;\n@@ -334,12 +333,6 @@ fn sess_os_to_meta_os(os: os) -> metadata::loader::os {\n #[cfg(test)]\n mod test {\n     #[legacy_exports];\n-\n-    use core::prelude::*;\n-\n-    use driver::session::{bin_crate, building_library, lib_crate};\n-    use driver::session::{unknown_crate};\n-\n     use syntax::ast;\n     use syntax::ast_util;\n "}, {"sha": "7a073057f0d59fc363f96e8e95d9712e138fcdf0", "filename": "src/librustc/front/config.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fconfig.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use syntax::{ast, fold, attr};\n "}, {"sha": "6df5e367ad1c37426b5652c98dafa0d2237f2e1d", "filename": "src/librustc/front/core_inject.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Ffront%2Fcore_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Ffront%2Fcore_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fcore_inject.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use driver::session::Session;\n \n@@ -76,18 +75,10 @@ fn inject_libcore_ref(sess: Session,\n         fold_mod: |module, fld| {\n             let n2 = sess.next_node_id();\n \n-            let prelude_path = @{\n-                span: dummy_sp(),\n-                global: false,\n-                idents: ~[\n-                    sess.ident_of(~\"core\"),\n-                    sess.ident_of(~\"prelude\")\n-                ],\n-                rp: None,\n-                types: ~[]\n-            };\n-\n-            let vp = @spanned(ast::view_path_glob(prelude_path, n2));\n+            let vp = @spanned(\n+                ast::view_path_glob(ident_to_path(dummy_sp(),\n+                                                  sess.ident_of(~\"core\")),\n+                                    n2));\n             let vi2 = @{node: ast::view_item_import(~[vp]),\n                         attrs: ~[],\n                         vis: ast::private,"}, {"sha": "08b61557fdd74eb1b17ba49a5577bc762312afab", "filename": "src/librustc/front/intrinsic_inject.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Ffront%2Fintrinsic_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Ffront%2Fintrinsic_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fintrinsic_inject.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use driver::session::Session;\n use syntax::parse;"}, {"sha": "09db770512f7fc7f043171d81941bb10d6fdca4d", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -10,7 +10,6 @@\n \n // Code that generates a test runner to run all the tests in a crate\n \n-use core::prelude::*;\n \n use driver::session;\n use front::config;"}, {"sha": "629563411895f3a3e22f0c78280c1f23cff0d4c5", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use core::cast;\n use core::cmp;"}, {"sha": "da33aaa460baf79c81d1c40e723ecc305f5a3c3f", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -11,8 +11,6 @@\n \n //! Validates all used crates and extern libraries and loads their metadata\n \n-use core::prelude::*;\n-\n use metadata::cstore;\n use metadata::common::*;\n use metadata::decoder;"}, {"sha": "2dfe5bad27a22aadf205a58d88b900dc9dced995", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -11,8 +11,6 @@\n \n // Searching for information from the cstore\n \n-use core::prelude::*;\n-\n use metadata::common::*;\n use metadata::cstore;\n use metadata::decoder;"}, {"sha": "b09f2d87b6c6b68fb8ccebc7afaa9594a661f06f", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -12,8 +12,6 @@\n // The crate store - a central repo for information collected about external\n // crates and libraries\n \n-use core::prelude::*;\n-\n use metadata::creader;\n use metadata::cstore;\n use metadata::decoder;"}, {"sha": "d4cebea66cde8c81a3da75cb8b054a331d4be72c", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -11,8 +11,6 @@\n \n // Decoding metadata from a single crate's metadata\n \n-use core::prelude::*;\n-\n use cmd = metadata::cstore::crate_metadata;\n use dvec::DVec;\n use hash::{Hash, HashUtil};"}, {"sha": "5a936e113eed0606b9c9e3fc86da8e31195523ea", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -11,8 +11,6 @@\n \n // Metadata encoding\n \n-use core::prelude::*;\n-\n use metadata::common::*;\n use metadata::csearch;\n use metadata::cstore;"}, {"sha": "0401d8fcb6ca6f1be11f23807455ec75289a2019", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -13,8 +13,6 @@\n // FIXME (#2658): I'm not happy how this module turned out. Should\n // probably just be folded into cstore.\n \n-use core::prelude::*;\n-\n use core::option;\n use core::os;\n use core::result::Result;"}, {"sha": "fa858f9e9a33eececadd2a434f68a73274ec1d03", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -11,8 +11,6 @@\n \n //! Finds crate binaries and loads their metadata\n \n-use core::prelude::*;\n-\n use lib::llvm::{False, llvm, mk_object_file, mk_section_iter};\n use metadata::decoder;\n use metadata::encoder;\n@@ -28,13 +26,14 @@ use core::cast;\n use core::flate;\n use core::io::WriterUtil;\n use core::io;\n-use core::os::consts::{macos, freebsd, linux, win32};\n use core::option;\n use core::ptr;\n use core::str;\n use core::uint;\n use core::vec;\n \n+use core::os::consts::{macos, freebsd, linux, win32};\n+\n export os;\n export os_macos, os_win32, os_linux, os_freebsd;\n export ctxt;"}, {"sha": "089e528c0c2e44492b3292694fc97df44b00399e", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -14,8 +14,6 @@\n // tjc note: Would be great to have a `match check` macro equivalent\n // for some of these\n \n-use core::prelude::*;\n-\n use middle::ty;\n use middle::ty::{FnTyBase, FnMeta, FnSig};\n "}, {"sha": "24095ebfe003a5d94cf5661b994928baa6c3164e", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -11,8 +11,6 @@\n \n // Type encoding\n \n-use core::prelude::*;\n-\n use middle::ty;\n use middle::ty::vid;\n "}, {"sha": "c97553ce1c073a4e7edfb3c2794242e5ea8f65ad", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use c = metadata::common;\n use cstore = metadata::cstore;"}, {"sha": "4370707e665548d17d0a64cef3e9bacf6f893864", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -15,29 +15,18 @@\n // 1. assignments are always made to mutable locations;\n // 2. loans made in overlapping scopes do not conflict\n // 3. assignments do not affect things loaned out as immutable\n-// 4. moves do not affect things loaned out in any way\n+// 4. moves to dnot affect things loaned out in any way\n \n-use core::prelude::*;\n \n-use middle::borrowck::{Loan, bckerr, borrowck_ctxt, cmt, inherent_mutability};\n-use middle::borrowck::{req_maps, save_and_restore};\n-use middle::mem_categorization::{cat_arg, cat_binding, cat_deref, cat_local};\n-use middle::mem_categorization::{cat_rvalue, cat_special};\n-use middle::mem_categorization::{loan_path, lp_arg, lp_comp, lp_deref};\n-use middle::mem_categorization::{lp_local};\n use middle::ty::{CopyValue, MoveValue, ReadValue};\n use middle::ty;\n-use util::ppaux::ty_to_str;\n \n use core::cmp;\n use core::dvec::DVec;\n use core::uint;\n use core::vec;\n-use std::map::HashMap;\n-use syntax::ast::{m_const, m_imm, m_mutbl};\n use syntax::ast;\n use syntax::ast_util;\n-use syntax::codemap::span;\n use syntax::print::pprust;\n use syntax::visit;\n "}, {"sha": "d5652ae78d6eec188d091383aff8e0f1dd0d8e46", "filename": "src/librustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -16,26 +16,17 @@\n // their associated scopes.  In phase two, checking loans, we will then make\n // sure that all of these loans are honored.\n \n-use core::prelude::*;\n \n use middle::borrowck::preserve::{preserve_condition, pc_ok, pc_if_pure};\n-use middle::borrowck::{Loan, bckres, borrowck_ctxt, err_mutbl, req_maps};\n-use middle::mem_categorization::{cat_binding, cat_discr, cmt, comp_variant};\n-use middle::mem_categorization::{mem_categorization_ctxt};\n-use middle::mem_categorization::{opt_deref_kind};\n+use middle::mem_categorization::{mem_categorization_ctxt, opt_deref_kind};\n use middle::pat_util;\n use middle::ty::{ty_region};\n use middle::ty;\n-use util::common::indenter;\n-use util::ppaux::{expr_repr, region_to_str};\n \n use core::dvec;\n use core::send_map::linear::LinearMap;\n use core::vec;\n-use std::map::HashMap;\n-use syntax::ast::{m_const, m_imm, m_mutbl};\n use syntax::ast;\n-use syntax::codemap::span;\n use syntax::print::pprust;\n use syntax::visit;\n "}, {"sha": "6539cb0c6c3cc2cc5c6a07ea13fc8aef2445d906", "filename": "src/librustc/middle/borrowck/loan.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Fborrowck%2Floan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Fborrowck%2Floan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Floan.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -12,19 +12,10 @@\n // Loan(Ex, M, S) = Ls holds if ToAddr(Ex) will remain valid for the entirety\n // of the scope S, presuming that the returned set of loans `Ls` are honored.\n \n-use core::prelude::*;\n \n-use middle::borrowck::{Loan, bckres, borrowck_ctxt, cmt, err_mutbl};\n-use middle::borrowck::{err_out_of_scope};\n-use middle::mem_categorization::{cat_arg, cat_binding, cat_discr, cat_comp};\n-use middle::mem_categorization::{cat_deref, cat_discr, cat_local};\n-use middle::mem_categorization::{cat_special, cat_stack_upvar, comp_field};\n-use middle::mem_categorization::{comp_index, comp_variant, region_ptr};\n use middle::ty;\n-use util::common::indenter;\n \n-use core::result::{Err, Ok, Result};\n-use syntax::ast::{m_const, m_imm, m_mutbl};\n+use core::result::{Result, Ok, Err};\n use syntax::ast;\n \n export public_methods;"}, {"sha": "fa7dfd1b77f311313baad749454677011c956b50", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -226,8 +226,6 @@ Borrowck results in two maps.\n \n #[legacy_exports];\n \n-use core::prelude::*;\n-\n use middle::liveness;\n use middle::mem_categorization::*;\n use middle::region;\n@@ -261,6 +259,9 @@ pub mod loan;\n #[legacy_exports]\n pub mod preserve;\n \n+export check_crate, root_map, mutbl_map;\n+export check_loans, gather_loans, loan, preserve;\n+\n fn check_crate(tcx: ty::ctxt,\n                method_map: typeck::method_map,\n                last_use_map: liveness::last_use_map,\n@@ -409,15 +410,15 @@ impl bckerr : cmp::Eq {\n type bckres<T> = Result<T, bckerr>;\n \n /// a complete record of a loan that was granted\n-pub struct Loan {lp: @loan_path, cmt: cmt, mutbl: ast::mutability}\n+struct Loan {lp: @loan_path, cmt: cmt, mutbl: ast::mutability}\n \n /// maps computed by `gather_loans` that are then used by `check_loans`\n ///\n /// - `req_loan_map`: map from each block/expr to the required loans needed\n ///   for the duration of that block/expr\n /// - `pure_map`: map from block/expr that must be pure to the error message\n ///   that should be reported if they are not pure\n-pub type req_maps = {\n+type req_maps = {\n     req_loan_map: HashMap<ast::node_id, @DVec<Loan>>,\n     pure_map: HashMap<ast::node_id, bckerr>\n };"}, {"sha": "e6d311fd04fc7ba2ae28e9562cfd7cd9c1e799e3", "filename": "src/librustc/middle/borrowck/preserve.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fpreserve.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -13,19 +13,9 @@\n // the scope S.\n //\n \n-use core::prelude::*;\n \n-use middle::borrowck::{bckerr, bckerr_code, bckres, borrowck_ctxt, cmt};\n-use middle::borrowck::{err_mut_uniq, err_mut_variant, err_out_of_root_scope};\n-use middle::borrowck::{err_out_of_scope, err_root_not_permitted};\n-use middle::mem_categorization::{cat_arg, cat_binding, cat_comp, cat_deref};\n-use middle::mem_categorization::{cat_discr, cat_local, cat_special};\n-use middle::mem_categorization::{cat_stack_upvar, comp_field, comp_index};\n-use middle::mem_categorization::{comp_variant, region_ptr};\n use middle::ty;\n-use util::common::indenter;\n \n-use syntax::ast::{m_const, m_imm, m_mutbl};\n use syntax::ast;\n \n export public_methods, preserve_condition, pc_ok, pc_if_pure;"}, {"sha": "86d9151ae9b501f2850f6dba71622404b248b008", "filename": "src/librustc/middle/capture.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Fcapture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Fcapture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcapture.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use middle::freevars;\n use middle::ty;"}, {"sha": "13df0b73db0c32fb0ef96498c67eea897d419444", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use driver::session::Session;\n use middle::resolve;"}, {"sha": "dc66df9362498424968e22415b600890e5c4c9fd", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use middle::const_eval::{compare_const_vals, lookup_const_by_id};\n use middle::const_eval::{eval_const_expr, const_val, const_int, const_bool};"}, {"sha": "e2de186ca2ffbfb2277178c313fb6907757734a5", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use middle::resolve;\n use middle::ty;"}, {"sha": "671a0a2dc81368b4df51fcc227aa493a5c4a2ba1", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use middle::freevars::freevar_entry;\n use middle::freevars;"}, {"sha": "8c887139b70f171dc8d4d2105153766799ba8370", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -20,8 +20,6 @@\n //\n // * Functions called by the compiler itself.\n \n-use core::prelude::*;\n-\n use driver::session::Session;\n use metadata::csearch::{each_lang_item, get_item_attrs};\n use metadata::cstore::{iter_crate_data};"}, {"sha": "635e2d18d6c26ad97622f4d528c4e511f3c85a76", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use driver::session::Session;\n use driver::session;"}, {"sha": "91e6ed289bd1471708ec6155f1efbcd4bedcf652", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -103,8 +103,6 @@\n  *   to return explicitly.\n  */\n \n-use core::prelude::*;\n-\n use middle::capture::{cap_move, cap_drop, cap_copy, cap_ref};\n use middle::capture;\n use middle::pat_util;"}, {"sha": "9b373ef0c16c2220b6356d3667a15fca54c1224f", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -47,8 +47,6 @@\n  * then an index to jump forward to the relevant item.\n  */\n \n-use core::prelude::*;\n-\n use middle::ty;\n use middle::typeck;\n use util::ppaux::{ty_to_str, region_to_str};\n@@ -138,7 +136,7 @@ impl categorization : cmp::Eq {\n }\n \n // different kinds of pointers:\n-pub enum ptr_kind {\n+enum ptr_kind {\n     uniq_ptr,\n     gc_ptr,\n     region_ptr(ty::Region),\n@@ -179,7 +177,7 @@ impl ptr_kind : cmp::Eq {\n \n // I am coining the term \"components\" to mean \"pieces of a data\n // structure accessible without a dereference\":\n-pub enum comp_kind {\n+enum comp_kind {\n     comp_tuple,                  // elt in a tuple\n     comp_anon_field,             // anonymous field (in e.g.\n                                  // struct Foo(int, int);\n@@ -271,7 +269,7 @@ impl cmt_ : cmp::Eq {\n // a loan path is like a category, but it exists only when the data is\n // interior to the stack frame.  loan paths are used as the key to a\n // map indicating what is borrowed at any point in time.\n-pub enum loan_path {\n+enum loan_path {\n     lp_local(ast::node_id),\n     lp_arg(ast::node_id),\n     lp_deref(@loan_path, ptr_kind),"}, {"sha": "a736b3d2fa6a4663e2f82d59d06b4c912096afa1", "filename": "src/librustc/middle/mode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Fmode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Fmode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmode.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use middle::pat_util;\n use middle::ty;"}, {"sha": "54d3180dbe49f0f323df36010f7acbeee0d91da6", "filename": "src/librustc/middle/pat_util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fpat_util.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use middle::resolve;\n use middle::ty::{CopyValue, MoveValue, ReadValue};"}, {"sha": "1aa3017083c84bda77f94ea019990f283c4769a4", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -12,8 +12,6 @@\n // A pass that checks to make sure private fields and methods aren't used\n // outside their scopes.\n \n-use core::prelude::*;\n-\n use middle::ty::{ty_struct, ty_enum};\n use middle::ty;\n use middle::typeck::{method_map, method_origin, method_param, method_self};"}, {"sha": "6f9c3070a0e8ef7ead5c7a863fa226505cea34c0", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -17,7 +17,6 @@ region parameterized.\n \n */\n \n-use core::prelude::*;\n \n use driver::session::Session;\n use metadata::csearch;"}, {"sha": "625ed9076e7186257913514b54ebf3a8d1841e25", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 74, "deletions": 3, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use driver::session::Session;\n use metadata::csearch::{each_path, get_method_names_if_trait};\n@@ -3076,6 +3075,77 @@ impl Resolver {\n                self.module_to_str(containing_module));\n \n         return Success(PrefixFound(containing_module, i));\n+\n+        /*\n+        // If we reached the end, return the containing module.\n+        if i == module_path.len() {\n+            return ModulePrefixResult {\n+                result: Success(containing_module),\n+                prefix_len: i\n+            };\n+        }\n+\n+        // Is the containing module the current module? If so, we allow\n+        // globs to be unresolved.\n+        let allow_globs = core::managed::ptr_eq(containing_module, module_);\n+\n+        let name = module_path.get_elt(i);\n+        i += 1;\n+\n+        let resolve_result = self.resolve_name_in_module(containing_module,\n+                                                         name,\n+                                                         TypeNS,\n+                                                         Xray,\n+                                                         allow_globs);\n+        match resolve_result {\n+            Success(target) => {\n+                match target.bindings.type_def {\n+                    Some(ref type_def) => {\n+                        match (*type_def).module_def {\n+                            None => {\n+                                error!(\"!!! (resolving crate-relative \\\n+                                        module) module wasn't actually a \\\n+                                        module!\");\n+                                return ModulePrefixResult {\n+                                    result: Failed,\n+                                    prefix_len: i\n+                                };\n+                            }\n+                            Some(module_def) => {\n+                                return ModulePrefixResult {\n+                                    result: Success(module_def),\n+                                    prefix_len: i\n+                                };\n+                            }\n+                        }\n+                    }\n+                    None => {\n+                        error!(\"!!! (resolving crate-relative module) module\n+                                wasn't actually a module!\");\n+                        return ModulePrefixResult {\n+                            result: Failed,\n+                            prefix_len: i\n+                        };\n+                    }\n+                }\n+            }\n+            Indeterminate => {\n+                debug!(\"(resolving crate-relative module) indeterminate; \\\n+                        bailing\");\n+                return ModulePrefixResult {\n+                    result: Indeterminate,\n+                    prefix_len: i\n+                };\n+            }\n+            Failed => {\n+                debug!(\"(resolving crate-relative module) failed to resolve\");\n+                return ModulePrefixResult {\n+                    result: Failed,\n+                    prefix_len: i\n+                };\n+            }\n+        }\n+        */\n     }\n \n     fn name_is_exported(module_: @Module, name: ident) -> bool {\n@@ -3095,6 +3165,7 @@ impl Resolver {\n                               xray: XrayFlag,\n                               allow_globs: bool)\n                            -> ResolveResult<Target> {\n+\n         debug!(\"(resolving name in module) resolving `%s` in `%s`\",\n                self.session.str_of(name),\n                self.module_to_str(module_));\n@@ -4747,7 +4818,7 @@ impl Resolver {\n         }\n \n         return self.resolve_item_by_identifier_in_lexical_scope(identifier,\n-                                                                namespace);\n+                                                             namespace);\n     }\n \n     // XXX: Merge me with resolve_name_in_module?\n@@ -4964,7 +5035,7 @@ impl Resolver {\n         match self.resolve_item_in_lexical_scope(self.current_module,\n                                                  ident,\n                                                  namespace,\n-                                                 DontSearchThroughModules) {\n+                                                 SearchThroughModules) {\n             Success(target) => {\n                 match (*target.bindings).def_for_namespace(namespace) {\n                     None => {"}, {"sha": "9733102156016541bb463e2ccbc01bd7e83b3fff", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -142,7 +142,6 @@\n  *\n  */\n \n-use core::prelude::*;\n \n use back::abi;\n use lib::llvm::llvm;"}, {"sha": "317d0fbfd0386f07d10f33834d3eef6ea77cc1a4", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -23,7 +23,6 @@\n //     but many TypeRefs correspond to one ty::t; for instance, tup(int, int,\n //     int) and rec(x=int, y=int, z=int) will have the same TypeRef.\n \n-use core::prelude::*;\n \n use back::link::{mangle_exported_name};\n use back::link::{mangle_internal_name_by_path_and_seq};"}, {"sha": "88f908c4c26327e077af93194882731e39944640", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -16,7 +16,6 @@\n // and methods are represented as just a fn ptr and not a full\n // closure.\n \n-use core::prelude::*;\n \n use lib::llvm::ValueRef;\n use middle::trans::base::{get_item_val, trans_external_path};"}, {"sha": "6a0c2aceda35a0b1d12bf6617a27c66b7df9a359", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use back::abi;\n use back::link::{mangle_internal_name_by_path_and_seq};"}, {"sha": "ee2028200e413da29b2d19e6aef78d507c6ac573", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -14,8 +14,6 @@\n \n */\n \n-use core::prelude::*;\n-\n use back::{link, abi, upcall};\n use driver::session;\n use driver::session::Session;"}, {"sha": "0d698b2871d76042970457f586bf768c3ce77d0e", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use middle::const_eval;\n use middle::trans::base::get_insn_ctxt;"}, {"sha": "7ae3fbcd1b8c44593d2ef332fc466d6eb9fd0939", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use lib::llvm::ValueRef;\n use middle::trans::base::*;"}, {"sha": "5c13364ddeb7932a41bf26fb7527f594f720d47c", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -95,7 +95,6 @@\n  * methods themselves.  Most are only suitable for some types of\n  * values. */\n \n-use core::prelude::*;\n \n use lib::llvm::ValueRef;\n use middle::trans::base::*;"}, {"sha": "10edfb2f92925b05371cf3102d98785e172d0b0d", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use driver::session;\n use lib::llvm::ValueRef;"}, {"sha": "ed9abea465b1b1d38228fa9e11cf16c3b3317346", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -111,7 +111,6 @@ lvalues are *never* stored by value.\n \n */\n \n-use core::prelude::*;\n \n use lib::llvm::ValueRef;\n use middle::resolve;"}, {"sha": "85aed8d5387d8c86b88b0b17ca870f3788ca7c68", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -11,7 +11,6 @@\n // The classification code for the x86_64 ABI is taken from the clay language\n // https://github.com/jckarter/clay/blob/master/compiler/src/externals.cpp\n \n-use core::prelude::*;\n \n use back::{link, abi};\n use driver::session::arch_x86_64;"}, {"sha": "2ea3873ebcd49d876b4f252606e26672d5da63f3", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -12,7 +12,6 @@\n //\n // Code relating to taking, dropping, etc as well as type descriptors.\n \n-use core::prelude::*;\n \n use lib::llvm::{ValueRef, TypeRef};\n use middle::trans::base::*;"}, {"sha": "28955f49844f0d6085e89b95b5cc0b91cba6621c", "filename": "src/librustc/middle/trans/inline.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use middle::astencode;\n use middle::trans::base::{get_insn_ctxt};"}, {"sha": "070a3b667bd330cd5df6d8e9b7b49c3450f438e5", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use back::{link, abi};\n use driver;\n use lib::llvm::llvm::LLVMGetParam;"}, {"sha": "ccbced417e245e06b64ff274e13951a55404cb70", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use back::link::mangle_exported_name;\n use middle::trans::base::{get_insn_ctxt};"}, {"sha": "2880e4b770e1650dcc56e2b704d98a04f8aa3396", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -10,8 +10,6 @@\n \n #[warn(deprecated_pattern)];\n \n-use core::prelude::*;\n-\n use driver::session;\n use metadata::csearch;\n use metadata;"}, {"sha": "b290f6c1742aca6610f5d3572182f4cbc6228c14", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -52,24 +52,18 @@\n  * an rptr (`&r.T`) use the region `r` that appears in the rptr.\n  */\n \n-use core::prelude::*;\n \n-use middle::pat_util::pat_id_map;\n-use middle::ty::{FnTyBase, FnMeta, FnSig, ty_param_substs_and_ty};\n+use middle::ty::{FnTyBase, FnMeta, FnSig};\n use middle::ty;\n use middle::typeck::check::fn_ctxt;\n use middle::typeck::collect;\n use middle::typeck::rscope::{anon_rscope, binding_rscope, empty_rscope};\n use middle::typeck::rscope::{in_anon_rscope, in_binding_rscope};\n use middle::typeck::rscope::{region_scope, type_rscope};\n-use middle::typeck::{crate_ctxt, write_substs_to_tcx, write_ty_to_tcx};\n \n use core::result;\n use core::vec;\n use syntax::ast;\n-use syntax::codemap::span;\n-use syntax::print::pprust::path_to_str;\n-use util::common::indent;\n \n pub trait ast_conv {\n     fn tcx() -> ty::ctxt;"}, {"sha": "7ff3dfcb07387d0382d4cf53830c1acebbd81599", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,23 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n-use middle::pat_util::{PatIdMap, pat_id_map, pat_is_binding, pat_is_const};\n+use middle::pat_util::{pat_is_binding, pat_is_const};\n use middle::pat_util::{pat_is_variant_or_struct};\n use middle::ty;\n use middle::typeck::check::demand;\n-use middle::typeck::check::{check_block, check_expr_with, fn_ctxt};\n-use middle::typeck::check::{instantiate_path, lookup_def, lookup_local};\n-use middle::typeck::check::{structure_of, valid_range_bounds};\n-use middle::typeck::require_same_types;\n \n use core::vec;\n use std::map::HashMap;\n use syntax::ast;\n use syntax::ast_util::walk_pat;\n use syntax::ast_util;\n-use syntax::codemap::span;\n use syntax::print::pprust;\n \n fn check_match(fcx: @fn_ctxt,"}, {"sha": "954608540f5cb7ebeef44abe618ec64312a9361e", "filename": "src/librustc/middle/typeck/check/demand.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fdemand.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -13,10 +13,8 @@ use middle::ty;\n use middle::typeck::check::fn_ctxt;\n use middle::typeck::infer;\n \n-use core::result::{Err, Ok};\n use core::result;\n use syntax::ast;\n-use syntax::codemap::span;\n \n // Requires that the two types unify, and prints an error message if they\n // don't."}, {"sha": "f903270e15cbad634d5c959133cbe47a51c38f16", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -79,37 +79,27 @@ obtained the type `Foo`, we would never match this method.\n \n */\n \n-use core::prelude::*;\n \n use middle::resolve::{Impl, MethodInfo};\n use middle::resolve;\n use middle::ty::*;\n use middle::ty;\n-use middle::typeck::check::{fn_ctxt, impl_self_ty};\n-use middle::typeck::check::{structurally_resolved_type};\n-use middle::typeck::check::vtable::VtableContext;\n-use middle::typeck::check::vtable;\n use middle::typeck::check;\n+use middle::typeck::check::vtable;\n use middle::typeck::coherence::get_base_type_def_id;\n use middle::typeck::infer;\n-use middle::typeck::{method_map_entry, method_origin, method_param};\n-use middle::typeck::{method_self, method_static, method_trait};\n-use util::common::indenter;\n-use util::ppaux::expr_repr;\n \n use core::dvec::DVec;\n use core::result;\n use core::uint;\n use core::vec;\n-use std::map::HashMap;\n use syntax::ast::{def_id, sty_by_ref, sty_value, sty_region, sty_box};\n use syntax::ast::{sty_uniq, sty_static, node_id, by_copy, by_ref};\n use syntax::ast::{m_const, m_mutbl, m_imm};\n use syntax::ast;\n use syntax::ast_map;\n use syntax::ast_map::node_id_to_str;\n use syntax::ast_util::dummy_sp;\n-use syntax::codemap::span;\n \n fn lookup(\n     fcx: @fn_ctxt,"}, {"sha": "bd8b6934e0db43c7093a0ec2170eaf0d04272f40", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 25, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -76,14 +76,11 @@ type parameter).\n \n */\n \n-use core::prelude::*;\n \n use middle::capture;\n use middle::const_eval;\n-use middle::pat_util::pat_id_map;\n use middle::pat_util;\n-use middle::ty::{TyVid, vid, FnTyBase, FnMeta, FnSig, VariantInfo_, field};\n-use middle::ty::{ty_param_bounds_and_ty, ty_param_substs_and_ty};\n+use middle::ty::{TyVid, vid, FnTyBase, FnMeta, FnSig, VariantInfo_};\n use middle::ty;\n use middle::typeck::astconv::{ast_conv, ast_path_to_ty};\n use middle::typeck::astconv::{ast_region_to_region, ast_ty_to_ty};\n@@ -92,18 +89,12 @@ use middle::typeck::check::_match::pat_ctxt;\n use middle::typeck::check::method::TransformTypeNormally;\n use middle::typeck::check::regionmanip::replace_bound_regions_in_fn_ty;\n use middle::typeck::check::vtable::{LocationInfo, VtableContext};\n-use middle::typeck::crate_ctxt;\n use middle::typeck::infer::{resolve_type, force_tvar};\n use middle::typeck::infer;\n use middle::typeck::rscope::{anon_rscope, binding_rscope, bound_self_region};\n use middle::typeck::rscope::{empty_rscope, in_anon_rscope};\n use middle::typeck::rscope::{in_binding_rscope, region_scope, type_rscope};\n use middle::typeck::rscope;\n-use middle::typeck::{isr_alist, lookup_def_ccx, method_map_entry};\n-use middle::typeck::{method_origin, method_self, method_trait, no_params};\n-use middle::typeck::{require_same_types};\n-use util::common::{block_query, indenter, loop_query};\n-use util::ppaux::{bound_region_to_str, expr_repr};\n use util::ppaux;\n \n use core::either;\n@@ -113,19 +104,15 @@ use core::result::{Result, Ok, Err};\n use core::result;\n use core::str;\n use core::vec;\n-use std::list::Nil;\n use std::map::HashMap;\n use std::map;\n-use syntax::ast::{provided, required, spanned, ty_i};\n+use syntax::ast::ty_i;\n use syntax::ast;\n use syntax::ast_map;\n-use syntax::ast_util::{Private, Public, is_local, local_def, respan};\n-use syntax::ast_util::{visibility_to_privacy};\n+use syntax::ast_util::{is_local, visibility_to_privacy, Private, Public};\n use syntax::ast_util;\n-use syntax::codemap::span;\n use syntax::codemap;\n use syntax::parse::token::special_idents;\n-use syntax::print::pprust::{expr_to_str, pat_to_str};\n use syntax::print::pprust;\n use syntax::visit;\n use syntax;\n@@ -144,15 +131,6 @@ export DerefArgs;\n export DontDerefArgs;\n export DoDerefArgs;\n export check_item_types;\n-export check_block;\n-export check_expr_with;\n-export fn_ctxt;\n-export lookup_def;\n-export structure_of;\n-export self_info;\n-export structurally_resolved_type;\n-export instantiate_path;\n-export valid_range_bounds;\n \n #[legacy_exports]\n pub mod _match;"}, {"sha": "c74b5789075e86dcd245ad602e8813ac0bf023fa", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -27,25 +27,20 @@ this point a bit better.\n \n */\n \n-use core::prelude::*;\n \n use middle::freevars::get_freevars;\n use middle::pat_util::pat_bindings;\n use middle::ty::{encl_region, re_scope};\n use middle::ty::{ty_fn_proto, vstore_box, vstore_fixed, vstore_slice};\n use middle::ty::{vstore_uniq};\n use middle::ty;\n-use middle::typeck::check::fn_ctxt;\n-use middle::typeck::check::lookup_def;\n-use middle::typeck::infer::{fres, resolve_and_force_all_but_regions};\n-use middle::typeck::infer::{resolve_type};\n+use middle::typeck::infer::{resolve_and_force_all_but_regions, fres};\n use util::ppaux::{note_and_explain_region, ty_to_str};\n \n use core::result;\n use syntax::ast::{ProtoBare, ProtoBox, ProtoUniq, ProtoBorrowed};\n use syntax::ast::{def_arg, def_binding, def_local, def_self, def_upvar};\n use syntax::ast;\n-use syntax::codemap::span;\n use syntax::print::pprust;\n use syntax::visit;\n "}, {"sha": "c7000bb7e70ba06fe097c3d16119da4f85af90ec", "filename": "src/librustc/middle/typeck/check/regionmanip.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -10,16 +10,9 @@\n \n // #[warn(deprecated_mode)];\n \n-use core::prelude::*;\n-\n use middle::ty;\n-use middle::typeck::check::self_info;\n-use middle::typeck::isr_alist;\n-use util::common::indenter;\n-use util::ppaux::region_to_str;\n use util::ppaux;\n \n-use std::list::Cons;\n use syntax::ast;\n use syntax::print::pprust::{expr_to_str};\n "}, {"sha": "0872b1445c3e95eadd58f6185b0f7670942667b7", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,30 +8,23 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use middle::resolve;\n use middle::ty;\n use middle::typeck::check::{fn_ctxt, impl_self_ty};\n-use middle::typeck::check::{structurally_resolved_type};\n use middle::typeck::infer::{fixup_err_to_str, infer_ctxt};\n use middle::typeck::infer::{resolve_and_force_all_but_regions, resolve_type};\n use middle::typeck::infer;\n-use middle::typeck::{crate_ctxt, vtable_origin, vtable_param, vtable_res};\n-use middle::typeck::{vtable_static, vtable_trait};\n use util::common::indenter;\n-use util::ppaux::tys_to_str;\n use util::ppaux;\n \n use core::result;\n use core::uint;\n use core::vec;\n use result::{Result, Ok, Err};\n-use std::map::HashMap;\n use syntax::ast;\n use syntax::ast_util;\n use syntax::codemap::span;\n-use syntax::print::pprust::expr_to_str;\n use syntax::print::pprust;\n use syntax::visit;\n "}, {"sha": "623c280ac226ba12ccc3f7449663c65333e4c8d2", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -12,24 +12,18 @@\n // unresolved type variables and replaces \"ty_var\" types with their\n // substitutions.\n \n-use core::prelude::*;\n \n use middle::pat_util;\n use middle::ty;\n-use middle::typeck::check::{fn_ctxt, lookup_local, self_info};\n+use middle::typeck::check::{fn_ctxt, lookup_local};\n use middle::typeck::infer::{force_all, resolve_all, resolve_region};\n use middle::typeck::infer::{resolve_type};\n use middle::typeck::infer;\n-use middle::typeck::{vtable_param, vtable_trait, write_substs_to_tcx};\n-use middle::typeck::{write_ty_to_tcx};\n use util::ppaux;\n \n use core::result::{Result, Ok, Err};\n use core::vec;\n-use std::map::HashMap;\n use syntax::ast;\n-use syntax::codemap::span;\n-use syntax::print::pprust::pat_to_str;\n use syntax::visit;\n \n export resolve_type_vars_in_fn;"}, {"sha": "0116214b5f9e6c0e80fe7c2c028d030e6da5bf39", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -14,7 +14,6 @@\n // has at most one implementation for each type. Then we build a mapping from\n // each trait in the system to its implementations.\n \n-use core::prelude::*;\n \n use driver;\n use metadata::csearch::{ProvidedTraitMethodInfo, each_path, get_impl_traits};\n@@ -26,14 +25,12 @@ use middle::resolve::{Impl, MethodInfo};\n use middle::ty::{ProvidedMethodSource, ProvidedMethodInfo, bound_copy, get};\n use middle::ty::{kind_can_be_copied, lookup_item_type, param_bounds, subst};\n use middle::ty::{t, ty_bool, ty_bot, ty_box, ty_enum, ty_err, ty_estr};\n-use middle::ty::{ty_evec, ty_float, ty_fn, ty_infer, ty_int, ty_nil};\n-use middle::ty::{ty_opaque_box, ty_param, ty_param_bounds_and_ty, ty_ptr};\n-use middle::ty::{ty_rec, ty_rptr, ty_self, ty_struct, ty_trait, ty_tup};\n-use middle::ty::{ty_type, ty_uint, ty_uniq};\n+use middle::ty::{ty_evec, ty_float, ty_fn, ty_infer, ty_int, ty_nil, ty_ptr};\n+use middle::ty::{ty_rec, ty_rptr, ty_struct, ty_trait, ty_tup, ty_uint};\n+use middle::ty::{ty_param, ty_self, ty_type, ty_opaque_box, ty_uniq};\n use middle::ty::{ty_opaque_closure_ptr, ty_unboxed_vec, type_kind_ext};\n use middle::ty::{type_is_ty_var};\n use middle::ty;\n-use middle::typeck::crate_ctxt;\n use middle::typeck::infer::{infer_ctxt, can_mk_subty};\n use middle::typeck::infer::{new_infer_ctxt, resolve_ivar};\n use middle::typeck::infer::{resolve_nested_tvar, resolve_type};\n@@ -45,7 +42,7 @@ use syntax::ast::{trait_ref};\n use syntax::ast;\n use syntax::ast_map::node_item;\n use syntax::ast_map;\n-use syntax::ast_util::{def_id_of_def, dummy_sp, local_def};\n+use syntax::ast_util::{def_id_of_def, dummy_sp};\n use syntax::attr;\n use syntax::codemap::span;\n use syntax::parse;"}, {"sha": "e8d424b899fe3c2c436f55349540fe89f98b47ce", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -30,20 +30,16 @@ are represented as `ty_param()` instances.\n \n */\n \n-use core::prelude::*;\n-\n use metadata::csearch;\n use middle::ty::{FnMeta, FnSig, FnTyBase, InstantiatedTraitRef};\n-use middle::ty::{ty_param_substs_and_ty};\n use middle::ty;\n use middle::typeck::astconv::{ast_conv, ty_of_fn_decl, ty_of_arg};\n use middle::typeck::astconv::{ast_ty_to_ty};\n use middle::typeck::astconv;\n use middle::typeck::infer;\n use middle::typeck::rscope::*;\n use middle::typeck::rscope;\n-use middle::typeck::{crate_ctxt, lookup_def_tcx, no_params, write_ty_to_tcx};\n-use util::common::{indenter, pluralize};\n+use util::common::pluralize;\n use util::ppaux;\n use util::ppaux::bound_to_str;\n \n@@ -52,12 +48,9 @@ use core::option;\n use core::vec;\n use syntax::ast;\n use syntax::ast_map;\n-use syntax::ast_util::{local_def, split_trait_methods};\n-use syntax::ast_util::{trait_method_to_ty_method};\n+use syntax::ast_util::trait_method_to_ty_method;\n use syntax::ast_util;\n-use syntax::codemap::span;\n use syntax::codemap;\n-use syntax::print::pprust::path_to_str;\n use syntax::visit;\n \n fn collect_item_types(ccx: @crate_ctxt, crate: @ast::crate) {"}, {"sha": "8eb3e0336dfb294172af0aeb44944753979a835a", "filename": "src/librustc/middle/typeck/infer/assignment.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fassignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fassignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fassignment.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -58,18 +58,12 @@\n // A.  But this upper-bound might be stricter than what is truly\n // needed.\n \n-use core::prelude::*;\n \n-use middle::ty::TyVar;\n use middle::ty;\n-use middle::typeck::infer::{ares, cres};\n use middle::typeck::infer::combine::combine_fields;\n-use middle::typeck::infer::sub::Sub;\n use middle::typeck::infer::to_str::ToStr;\n-use util::common::{indent, indenter};\n \n use core::option;\n-use syntax::ast::{m_const, m_imm, m_mutbl};\n use syntax::ast;\n \n fn to_ares(+c: cres<ty::t>) -> ares {"}, {"sha": "f790939f4e7d231aceb8fd1fe913d77b32adb6a7", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -54,22 +54,14 @@\n // terms of error reporting, although we do not do that properly right\n // now.\n \n-use core::prelude::*;\n-\n-use middle::ty::{FloatVar, FnTyBase, FnMeta, FnSig, IntVar, TyVar};\n use middle::ty;\n-use middle::typeck::infer::glb::Glb;\n-use middle::typeck::infer::lub::Lub;\n+use middle::ty::{FnTyBase, FnMeta, FnSig};\n use middle::typeck::infer::sub::Sub;\n use middle::typeck::infer::to_str::ToStr;\n-use middle::typeck::infer::{cres, infer_ctxt, ures};\n-use util::common::indent;\n \n-use core::result::{iter_vec2, map_vec2};\n use core::vec;\n-use syntax::ast::{Onceness, purity, ret_style};\n+use syntax::ast::Onceness;\n use syntax::ast;\n-use syntax::codemap::span;\n \n fn macros() { include!(\"macros.rs\"); } // FIXME(#3114): Macro import/export.\n "}, {"sha": "85a11a598e9081ea3e1d20f7ca2570b7ecaec6f3", "filename": "src/librustc/middle/typeck/infer/floating.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ffloating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ffloating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ffloating.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -14,10 +14,9 @@ Code related to floating-point type inference.\n \n */\n \n-use core::prelude::*;\n \n-use middle::ty::{get, ty_float};\n use middle::ty;\n+use middle::ty::ty_float;\n use middle::typeck::infer::to_str::ToStr;\n \n use core::uint;"}, {"sha": "920b058770acb40aedbd99ab56e3097e050245bf", "filename": "src/librustc/middle/typeck/infer/glb.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,21 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use middle::ty;\n use middle::typeck::infer::combine::*;\n use middle::typeck::infer::lattice::*;\n-use middle::typeck::infer::glb::Glb;\n-use middle::typeck::infer::lub::Lub;\n use middle::typeck::infer::sub::Sub;\n use middle::typeck::infer::to_str::ToStr;\n-use syntax::ast::{Many, Once, extern_fn, impure_fn, m_const, m_imm, m_mutbl};\n-use syntax::ast::{noreturn, pure_fn, ret_style, return_val, unsafe_fn};\n-use util::ppaux::mt_to_str;\n \n use std::list;\n \n+use syntax::ast::{Many, Once};\n+\n enum Glb = combine_fields;  // \"greatest lower bound\" (common subtype)\n \n impl Glb: combine {"}, {"sha": "e6701182342f5d59864de234041ab0fe6152b744", "filename": "src/librustc/middle/typeck/infer/integral.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fintegral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fintegral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fintegral.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -14,9 +14,6 @@ Code related to integral type inference.\n \n */\n \n-use core::prelude::*;\n-\n-use middle::ty::{get, ty_int, ty_uint};\n use middle::ty;\n use middle::typeck::infer::to_str::ToStr;\n "}, {"sha": "ea994c238c61d41f5ff9cd9ecfe2e3efa8c7a779", "filename": "src/librustc/middle/typeck/infer/lattice.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,14 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n-use middle::ty::TyVar;\n use middle::ty;\n-use middle::typeck::infer::*;\n use middle::typeck::infer::combine::*;\n-use middle::typeck::infer::glb::Glb;\n-use middle::typeck::infer::lub::Lub;\n use middle::typeck::infer::unify::*;\n use middle::typeck::infer::to_str::ToStr;\n "}, {"sha": "10ac6a3add9ac3e7a734914ba583d05bc32081b9", "filename": "src/librustc/middle/typeck/infer/lub.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,21 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n-use middle::ty::RegionVid;\n use middle::ty;\n use middle::typeck::infer::combine::*;\n-use middle::typeck::infer::glb::Glb;\n use middle::typeck::infer::lattice::*;\n use middle::typeck::infer::sub::Sub;\n use middle::typeck::infer::to_str::ToStr;\n-use middle::typeck::isr_alist;\n-use util::ppaux::mt_to_str;\n \n use std::list;\n-use syntax::ast::{Many, Once, extern_fn, m_const, impure_fn, noreturn};\n-use syntax::ast::{pure_fn, ret_style, return_val, unsafe_fn};\n+use syntax::ast::{Many, Once};\n \n fn macros() { include!(\"macros.rs\"); } // FIXME(#3114): Macro import/export.\n "}, {"sha": "7d6a2c4366e22784fff7b5b59f3c03bf22770293", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -259,8 +259,6 @@ section on \"Type Combining\" below for details.\n #[warn(deprecated_mode)];\n #[warn(deprecated_pattern)];\n \n-use core::prelude::*;\n-\n use middle::ty::{TyVid, IntVid, FloatVid, RegionVid, vid};\n use middle::ty::{mk_fn, type_is_bot};\n use middle::ty::{ty_int, ty_uint, get, terr_fn, TyVar, IntVar, FloatVar};\n@@ -282,25 +280,21 @@ use middle::typeck::infer::resolve::{resolver};\n use middle::typeck::infer::sub::Sub;\n use middle::typeck::infer::to_str::ToStr;\n use middle::typeck::infer::unify::{vals_and_bindings, root};\n-use middle::typeck::isr_alist;\n use util::common::{indent, indenter};\n-use util::ppaux::{bound_region_to_str, ty_to_str, mt_to_str};\n+use util::ppaux::{ty_to_str, mt_to_str};\n \n use core::cmp::Eq;\n use core::dvec::DVec;\n use core::result::{Result, Ok, Err, map_vec, map_vec2, iter_vec2};\n use core::result;\n use core::vec;\n-use std::list::Nil;\n use std::map::HashMap;\n use std::smallintmap;\n use syntax::ast::{ret_style, purity};\n use syntax::ast::{m_const, m_imm, m_mutbl};\n use syntax::ast::{unsafe_fn, impure_fn, pure_fn, extern_fn};\n-use syntax::ast;\n use syntax::ast_util::dummy_sp;\n-use syntax::ast_util;\n-use syntax::codemap::span;\n+use syntax::{ast, ast_util};\n \n export infer_ctxt;\n export new_infer_ctxt;\n@@ -331,13 +325,6 @@ export resolve;\n export sub;\n export to_str;\n export unify;\n-export uok;\n-export cyclic_ty, unresolved_ty, region_var_bound_by_region_var;\n-export bound, bounds;\n-export ures;\n-export ares;\n-export infer_ctxt;\n-export fixup_err;\n \n #[legacy_exports]\n mod assignment;\n@@ -570,7 +557,7 @@ impl<T:Copy Eq> cres<T>: CresCompare<T> {\n     }\n }\n \n-pub fn uok() -> ures {\n+fn uok() -> ures {\n     Ok(())\n }\n "}, {"sha": "e5ca30a3e2ce3228990b56f7955ff2c230592d6a", "filename": "src/librustc/middle/typeck/infer/region_inference.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -539,16 +539,13 @@ more convincing in the future.\n #[warn(deprecated_mode)];\n #[warn(deprecated_pattern)];\n \n-use core::prelude::*;\n-\n use middle::region::is_subregion_of;\n use middle::region;\n use middle::ty;\n-use middle::ty::{Region, RegionVid, br_fresh, re_bound, re_free, re_infer};\n-use middle::ty::{re_scope, re_static, ReVar, ReSkolemized};\n-use middle::typeck::infer::cres;\n+use middle::ty::{Region, RegionVid, re_static, re_infer, re_free, re_bound};\n+use middle::ty::{re_scope, ReVar, ReSkolemized, br_fresh};\n use middle::typeck::infer::to_str::ToStr;\n-use util::common::indenter;\n+use syntax::codemap;\n use util::ppaux::note_and_explain_region;\n \n use core::cmp;\n@@ -561,8 +558,6 @@ use result::{Ok, Err};\n use std::map::HashMap;\n use std::cell::{Cell, empty_cell};\n use std::list::{List, Nil, Cons};\n-use syntax::codemap::span;\n-use syntax::codemap;\n \n export RegionVarBindings;\n export make_subregion;"}, {"sha": "da4c02b9e35074a385359c9b85a1f5bf0bb6e6b5", "filename": "src/librustc/middle/typeck/infer/resolve.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -46,21 +46,13 @@\n // future).  If you want to resolve everything but one type, you are\n // probably better off writing `resolve_all - resolve_ivar`.\n \n-use core::prelude::*;\n \n-use middle::ty::{FloatVar, FloatVid, IntVar, IntVid, RegionVid, TyVar, TyVid};\n-use middle::ty::{type_is_bot};\n use middle::ty;\n-use middle::typeck::infer::{cyclic_ty, fixup_err, fres, infer_ctxt};\n-use middle::typeck::infer::{region_var_bound_by_region_var, unresolved_ty};\n use middle::typeck::infer::floating::*;\n use middle::typeck::infer::floating;\n use middle::typeck::infer::integral::*;\n use middle::typeck::infer::integral;\n use middle::typeck::infer::to_str::ToStr;\n-use middle::typeck::infer::unify::root;\n-use util::common::indent;\n-use util::ppaux::ty_to_str;\n \n use core::uint;\n use core::vec;"}, {"sha": "c96724bd6525fb96f93cc20eb0c0156c0d704d27", "filename": "src/librustc/middle/typeck/infer/sub.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,22 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use middle::ty;\n-use middle::typeck::check::regionmanip::replace_bound_regions_in_fn_ty;\n use middle::typeck::infer::combine::*;\n-use middle::typeck::infer::cres;\n-use middle::typeck::infer::glb::Glb;\n-use middle::typeck::infer::infer_ctxt;\n-use middle::typeck::infer::lub::Lub;\n use middle::typeck::infer::to_str::ToStr;\n use middle::typeck::infer::unify::*;\n-use util::ppaux::bound_region_to_str;\n \n-use std::list::Nil;\n use std::list;\n-use syntax::ast::{m_const, purity, ret_style};\n \n fn macros() { include!(\"macros.rs\"); } // FIXME(#3114): Macro import/export.\n "}, {"sha": "abc249a45ec3f85956d43909cf93dda2080a067c", "filename": "src/librustc/middle/typeck/infer/test.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -16,24 +16,22 @@ Note: This module is only compiled when doing unit testing.\n \n */\n \n-use core::prelude::*;\n-\n-use driver::diagnostic;\n-use driver::driver::{optgroups, build_session_options, build_session};\n-use driver::driver::{str_input, build_configuration};\n-use middle::lang_items::{LanguageItems, language_items};\n-use middle::ty::{FnTyBase, FnMeta, FnSig};\n-use util::ppaux::ty_to_str;\n-\n-use std::getopts::groups::{optopt, optmulti, optflag, optflagopt, getopts};\n-use std::getopts::groups;\n-use std::getopts::{opt_present};\n-use std::getopts;\n+use dvec::DVec;\n use std::getopts;\n use std::map::HashMap;\n-use syntax::ast_util::dummy_sp;\n-use syntax::parse::parse_crate_from_source_str;\n+use std::getopts;\n+use std::getopts::{opt_present};\n+use std::getopts::groups;\n+use std::getopts::groups::{optopt, optmulti, optflag, optflagopt, getopts};\n+use driver::driver::{optgroups, build_session_options, build_session,\n+                     str_input, build_configuration};\n+use driver::diagnostic;\n use syntax::{ast, attr, parse};\n+use syntax::parse::parse_crate_from_source_str;\n+use middle::lang_items::LanguageItems;\n+use util::ppaux::ty_to_str;\n+use syntax::ast_util::dummy_sp;\n+use middle::ty::{FnTyBase, FnMeta, FnSig};\n \n struct Env {\n     crate: @ast::crate,"}, {"sha": "73352b802d64e9470b1b709d9136c4fb3656421e", "filename": "src/librustc/middle/typeck/infer/to_str.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,16 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n-use middle::ty::vid;\n use middle::ty;\n-use middle::typeck::infer::{bound, bounds};\n-use middle::typeck::infer::floating::float_ty_set;\n-use middle::typeck::infer::infer_ctxt;\n use middle::typeck::infer::integral::int_ty_set;\n+use middle::typeck::infer::floating::float_ty_set;\n use middle::typeck::infer::unify::{redirect, root, var_value};\n-use util::ppaux::{mt_to_str, ty_to_str};\n use util::ppaux;\n \n use core::uint;"}, {"sha": "8056c2c6bb31ee426bb48d5f8197f82b4dfaad41", "filename": "src/librustc/middle/typeck/infer/unify.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,19 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n-use middle::ty::vid;\n use middle::ty;\n-use middle::typeck::infer::{bound, bounds, cres, uok, ures};\n use middle::typeck::infer::combine::combine;\n use middle::typeck::infer::floating::*;\n use middle::typeck::infer::floating;\n-use middle::typeck::infer::infer_ctxt;\n use middle::typeck::infer::integral::*;\n use middle::typeck::infer::integral;\n use middle::typeck::infer::to_str::ToStr;\n-use util::common::{indent, indenter};\n \n use core::result;\n use std::smallintmap::SmallIntMap;"}, {"sha": "adb6fc8baf79a7528e0357528dda37d65f1d378a", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -50,8 +50,6 @@ independently:\n \n #[legacy_exports];\n \n-use core::prelude::*;\n-\n use metadata::csearch;\n use middle::pat_util::{pat_id_map, PatIdMap};\n use middle::resolve;\n@@ -101,12 +99,6 @@ export infer;\n export collect;\n export coherence;\n export deriving;\n-export crate_ctxt;\n-export write_ty_to_tcx, write_substs_to_tcx;\n-export no_params;\n-export isr_alist;\n-export require_same_types;\n-export lookup_def_ccx, lookup_def_tcx;\n \n #[legacy_exports]\n #[path = \"check/mod.rs\"]\n@@ -233,7 +225,7 @@ struct crate_ctxt__ {\n     tcx: ty::ctxt\n }\n \n-pub enum crate_ctxt {\n+enum crate_ctxt {\n     crate_ctxt_(crate_ctxt__)\n }\n "}, {"sha": "ecd73b4783a2a34015375dc2315ef1c823057ecb", "filename": "src/librustc/middle/typeck/rscope.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,14 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use middle::ty;\n \n use core::result::Result;\n use core::result;\n use syntax::ast;\n-use syntax::codemap::span;\n use syntax::parse::token::special_idents;\n \n trait region_scope {"}, {"sha": "cd71bb099fe655698ef3026b059fd2b7faaeefb1", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use syntax::ast;\n use syntax::codemap::{span};"}, {"sha": "071f12a92d4fead9bb41100917f14d518746001e", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use middle::ty;\n use middle::ty::{arg, canon_mode};"}, {"sha": "83516a589b5f521f762b108671389ca02c8fdf1d", "filename": "src/librustdoc/astsrv.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fastsrv.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -17,8 +17,6 @@ query AST-related information, shielding the rest of Rustdoc from its\n non-sendableness.\n */\n \n-use core::prelude::*;\n-\n use parse;\n use util;\n "}, {"sha": "e47bdbb00daab06f2e9e8883777ac6bba46029a3", "filename": "src/librustdoc/attr_parser.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_parser.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -15,8 +15,6 @@ The attribute parser provides methods for pulling documentation out of\n an AST's attributes.\n */\n \n-use core::prelude::*;\n-\n use core::str;\n use core::tuple;\n use core::vec;\n@@ -31,12 +29,12 @@ pub type CrateAttrs = {\n \n #[cfg(test)]\n mod test {\n+    #[legacy_exports];\n+\n     use syntax::ast;\n     use syntax;\n \n-    use core::option::None;\n-\n-    pub fn parse_attributes(+source: ~str) -> ~[ast::attribute] {\n+    fn parse_attributes(+source: ~str) -> ~[ast::attribute] {\n         use syntax::parse;\n         use syntax::parse::parser;\n         use syntax::parse::attr::parser_attr;"}, {"sha": "8e52fb25a9465a39776f8e98aaca126467764396", "filename": "src/librustdoc/attr_pass.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_pass.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -16,16 +16,13 @@ corresponding AST nodes. The information gathered here is the basis\n of the natural-language documentation for a crate.\n */\n \n-use core::prelude::*;\n-\n use astsrv;\n use attr_parser;\n use doc::ItemUtils;\n use doc;\n use extract::to_str;\n use fold::Fold;\n use fold;\n-use pass::Pass;\n \n use core::option;\n use core::vec;\n@@ -41,7 +38,7 @@ pub fn mk_pass() -> Pass {\n     }\n }\n \n-pub fn run(\n+fn run(\n     srv: astsrv::Srv,\n     +doc: doc::Doc\n ) -> doc::Doc {\n@@ -312,12 +309,13 @@ fn should_extract_impl_method_docs() {\n \n #[cfg(test)]\n mod test {\n+    #[legacy_exports];\n+\n     use astsrv;\n-    use attr_pass::run;\n     use doc;\n     use extract;\n \n-    pub fn mk_doc(source: ~str) -> doc::Doc {\n+    fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");\n             run(srv, doc)"}, {"sha": "94b3a96618476a82fc9dd28351d79244b1bc0608", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use core::cmp;\n use core::os;\n use core::result;\n@@ -58,7 +56,7 @@ pub type Config = {\n     pandoc_cmd: Option<~str>\n };\n \n-pub impl Config: Clone {\n+impl Config: Clone {\n     fn clone(&self) -> Config { copy *self }\n }\n \n@@ -107,7 +105,7 @@ pub fn default_config(input_crate: &Path) -> Config {\n type ProgramOutput = fn~((&str), (&[~str])) ->\n     {status: int, out: ~str, err: ~str};\n \n-pub fn mock_program_output(_prog: &str, _args: &[~str]) -> {\n+fn mock_program_output(_prog: &str, _args: &[~str]) -> {\n     status: int, out: ~str, err: ~str\n } {\n     {\n@@ -121,7 +119,7 @@ pub fn parse_config(args: &[~str]) -> Result<Config, ~str> {\n     parse_config_(args, run::program_output)\n }\n \n-pub fn parse_config_(\n+fn parse_config_(\n     args: &[~str],\n     +program_output: ProgramOutput\n ) -> Result<Config, ~str> {\n@@ -290,11 +288,8 @@ fn should_error_with_no_pandoc() {\n \n #[cfg(test)]\n mod test {\n-    use config::{Config, mock_program_output, parse_config_};\n-\n-    use core::result::Result;\n-\n-    pub fn parse_config(args: &[~str]) -> Result<Config, ~str> {\n+    #[legacy_exports];\n+    fn parse_config(args: &[~str]) -> Result<Config, ~str> {\n         parse_config_(args, mock_program_output)\n     }\n }"}, {"sha": "d7b505955806d2fdf348e703b364246f96f7f54d", "filename": "src/librustdoc/demo.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fdemo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fdemo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdemo.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -21,8 +21,6 @@\n  * tests on this file\n  */\n \n-use core::prelude::*;\n-\n /// The base price of a muffin on a non-holiday\n const price_of_a_muffin: float = 70f;\n "}, {"sha": "2c3998cecee2cebc27ffa7736e8c09d422d96f2e", "filename": "src/librustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -15,14 +15,11 @@ If the first paragraph of a long description is short enough then it\n is interpreted as the brief description.\n */\n \n-use core::prelude::*;\n-\n use astsrv;\n use doc::ItemUtils;\n use doc;\n use fold::Fold;\n use fold;\n-use pass::Pass;\n \n use core::str;\n use core::vec;\n@@ -35,7 +32,7 @@ pub fn mk_pass() -> Pass {\n     }\n }\n \n-pub fn run(\n+fn run(\n     _srv: astsrv::Srv,\n     +doc: doc::Doc\n ) -> doc::Doc {\n@@ -101,14 +98,15 @@ fn should_promote_impl_method_desc() {\n }\n \n #[cfg(test)]\n-pub mod test {\n+mod test {\n+    #[legacy_exports];\n+\n     use astsrv;\n     use attr_pass;\n-    use desc_to_brief_pass::run;\n     use doc;\n     use extract;\n \n-    pub fn mk_doc(source: ~str) -> doc::Doc {\n+    fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");\n             let doc = (attr_pass::mk_pass().f)(srv, doc);"}, {"sha": "4b5f82235dd0b1ab4241784240a5d5703570e897", "filename": "src/librustdoc/doc.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoc.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -10,10 +10,7 @@\n \n //! The document model\n \n-use core::prelude::*;\n-\n use doc;\n-use pass::Pass;\n \n use core::cmp;\n use core::option;"}, {"sha": "46b21063774634d15a937bfb7e2abe2ddd5f6e2d", "filename": "src/librustdoc/escape_pass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fescape_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fescape_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fescape_pass.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -10,7 +10,6 @@\n \n //! Escapes text sequences\n \n-use pass::Pass;\n use text_pass;\n \n use core::str;"}, {"sha": "8f2c61ba26ee9f4bc5c004472156cd02ddef6b5f", "filename": "src/librustdoc/extract.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fextract.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -10,8 +10,6 @@\n \n //! Converts the Rust AST to the rustdoc document model\n \n-use core::prelude::*;\n-\n use astsrv;\n use doc::ItemUtils;\n use doc;\n@@ -348,7 +346,6 @@ mod test {\n \n     use astsrv;\n     use doc;\n-    use extract::{extract, from_srv};\n     use parse;\n \n     use core::vec;"}, {"sha": "deb6af224e5d4bac50a3fc2a003a39926f9d0b83", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,13 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use astsrv;\n use doc;\n use extract;\n use parse;\n-use pass::Pass;\n \n use core::vec;\n use std::par;"}, {"sha": "1408ae874168ede461b9c9fe6ce9951d46066329", "filename": "src/librustdoc/markdown_index_pass.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_index_pass.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -10,8 +10,6 @@\n \n //! Build indexes as appropriate for the markdown pass\n \n-use core::prelude::*;\n-\n use astsrv;\n use config;\n use doc::ItemUtils;\n@@ -20,7 +18,6 @@ use fold::Fold;\n use fold;\n use markdown_pass;\n use markdown_writer;\n-use pass::Pass;\n \n use core::str;\n use std::par;\n@@ -34,7 +31,7 @@ pub fn mk_pass(+config: config::Config) -> Pass {\n     }\n }\n \n-pub fn run(\n+fn run(\n     _srv: astsrv::Srv,\n     +doc: doc::Doc,\n     +config: config::Config\n@@ -254,19 +251,17 @@ fn should_index_foreign_mod_contents() {\n \n #[cfg(test)]\n mod test {\n+    #[legacy_exports];\n+\n     use astsrv;\n     use attr_pass;\n     use config;\n     use desc_to_brief_pass;\n     use doc;\n     use extract;\n-    use markdown_index_pass::run;\n     use path_pass;\n \n-    use core::path::Path;\n-\n-    pub fn mk_doc(output_style: config::OutputStyle, +source: ~str)\n-               -> doc::Doc {\n+    fn mk_doc(output_style: config::OutputStyle, +source: ~str) -> doc::Doc {\n         do astsrv::from_str(source) |srv| {\n             let config = {\n                 output_style: output_style,"}, {"sha": "fd3cf86df2792114d228a52c43cefdfe95bea2ac", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -10,8 +10,6 @@\n \n //! Generate markdown from a document tree\n \n-use core::prelude::*;\n-\n use astsrv;\n use attr_pass;\n use config;\n@@ -27,7 +25,6 @@ use markdown_writer::WriterUtils;\n use markdown_writer::WriterFactory;\n use markdown_writer;\n use page_pass;\n-use pass::Pass;\n use path_pass;\n use sectionalize_pass;\n use sort_pass;\n@@ -114,7 +111,7 @@ type Ctxt = {\n     w: Writer\n };\n \n-pub fn write_markdown(\n+fn write_markdown(\n     +doc: doc::Doc,\n     +writer_factory: WriterFactory\n ) {\n@@ -841,7 +838,6 @@ mod test {\n     use doc;\n     use extract;\n     use markdown_index_pass;\n-    use markdown_pass::{mk_pass, write_markdown};\n     use markdown_writer;\n     use path_pass;\n     use sectionalize_pass;\n@@ -850,7 +846,6 @@ mod test {\n     use unindent_pass;\n \n     use core::oldcomm;\n-    use core::path::Path;\n     use core::str;\n \n     fn render(+source: ~str) -> ~str {"}, {"sha": "f4e5db304e7d63607a6606e97616667f3822dad4", "filename": "src/librustdoc/markdown_writer.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_writer.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,12 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use config;\n use doc::ItemUtils;\n use doc;\n-use pass::Pass;\n \n use core::io::ReaderUtil;\n use core::io;"}, {"sha": "0709cc5dc55eb1ba6dac24ad9d9dc766aa571305", "filename": "src/librustdoc/page_pass.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fpage_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fpage_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpage_pass.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -15,15 +15,12 @@ Each page corresponds is a logical section. There may be pages for\n individual modules, pages for the crate, indexes, etc.\n */\n \n-use core::prelude::*;\n-\n use astsrv;\n use config;\n use doc::{ItemUtils, PageUtils};\n use doc;\n use fold::Fold;\n use fold;\n-use pass::Pass;\n use sort_pass;\n use util::NominalOp;\n use util;\n@@ -42,7 +39,7 @@ pub fn mk_pass(output_style: config::OutputStyle) -> Pass {\n     }\n }\n \n-pub fn run(\n+fn run(\n     _srv: astsrv::Srv,\n     +doc: doc::Doc,\n     output_style: config::OutputStyle\n@@ -185,13 +182,14 @@ fn should_remove_foreign_mods_from_containing_mods() {\n \n #[cfg(test)]\n mod test {\n+    #[legacy_exports];\n+\n     use astsrv;\n     use config;\n     use doc;\n     use extract;\n-    use page_pass::run;\n \n-    pub fn mk_doc_(\n+    fn mk_doc_(\n         output_style: config::OutputStyle,\n         source: ~str\n     ) -> doc::Doc {\n@@ -201,7 +199,7 @@ mod test {\n         }\n     }\n \n-    pub fn mk_doc(source: ~str) -> doc::Doc {\n+    fn mk_doc(source: ~str) -> doc::Doc {\n         mk_doc_(config::DocPerMod, source)\n     }\n }"}, {"sha": "db97f34f20168d49ef8ab1ebc35e48c32747b028", "filename": "src/librustdoc/parse.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fparse.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -10,8 +10,6 @@\n \n //! AST-parsing helpers\n \n-use core::prelude::*;\n-\n use rustc::driver::driver::{file_input, str_input};\n use rustc::driver::driver;\n use rustc::driver::session;"}, {"sha": "967dcd8f49f8e0678b14166a2ec3d78920f1bb98", "filename": "src/librustdoc/pass.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpass.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,12 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use astsrv;\n use doc;\n use extract;\n-use time;\n \n use core::vec;\n "}, {"sha": "4227ce230963b33c70b4b4a3c0369b740a1dee3d", "filename": "src/librustdoc/path_pass.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fpath_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fpath_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpath_pass.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -10,15 +10,12 @@\n \n //! Records the full path to items\n \n-use core::prelude::*;\n-\n use astsrv;\n use doc::ItemUtils;\n use doc;\n use extract;\n use fold::Fold;\n use fold;\n-use pass::Pass;\n \n use syntax::ast;\n "}, {"sha": "da3c6bd7f2b5593d6f0e5dfe22906745ae8df175", "filename": "src/librustdoc/prune_hidden_pass.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fprune_hidden_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fprune_hidden_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fprune_hidden_pass.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -16,7 +16,6 @@ use doc::ItemUtils;\n use doc;\n use fold::Fold;\n use fold;\n-use pass::Pass;\n \n use core::vec;\n use std::map::HashMap;\n@@ -28,7 +27,7 @@ pub fn mk_pass() -> Pass {\n     }\n }\n \n-pub fn run(srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n+fn run(srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n     let fold = Fold {\n         fold_mod: fold_mod,\n         .. fold::default_any_fold(srv)\n@@ -70,13 +69,14 @@ fn should_prune_hidden_items() {\n }\n \n #[cfg(test)]\n-pub mod test {\n+mod test {\n+    #[legacy_exports];\n+\n     use astsrv;\n     use doc;\n     use extract;\n-    use prune_hidden_pass::run;\n \n-    pub fn mk_doc(source: ~str) -> doc::Doc {\n+    fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");\n             run(srv, doc)"}, {"sha": "5017f889d5a6d0a99809a21cfb38b2f79104a7c7", "filename": "src/librustdoc/prune_private_pass.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fprune_private_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fprune_private_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fprune_private_pass.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -12,20 +12,16 @@\n \n #[legacy_exports];\n \n-use core::prelude::*;\n-\n use astsrv;\n use doc;\n use fold::Fold;\n use fold;\n-use pass::Pass;\n \n use core::util;\n use core::vec;\n use syntax::ast;\n \n export mk_pass;\n-export run;\n \n fn mk_pass() -> Pass {\n     {\n@@ -34,7 +30,7 @@ fn mk_pass() -> Pass {\n     }\n }\n \n-pub fn run(srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n+fn run(srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n     let fold = Fold {\n         fold_mod: fold_mod,\n         .. fold::default_any_fold(srv)\n@@ -79,11 +75,10 @@ fn should_prune_items_without_pub_modifier() {\n }\n \n #[cfg(test)]\n-pub mod test {\n+mod test {\n     use astsrv;\n     use doc;\n     use extract;\n-    use prune_private_pass::run;\n \n     pub fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(source) |srv| {"}, {"sha": "a2b6687522022b8fdb93f53e7ca4832995f4250d", "filename": "src/librustdoc/sectionalize_pass.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fsectionalize_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fsectionalize_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsectionalize_pass.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -10,16 +10,13 @@\n \n //! Breaks rustdocs into sections according to their headers\n \n-use core::prelude::*;\n-\n use astsrv;\n use attr_pass;\n use doc::ItemUtils;\n use doc;\n use extract;\n use fold::Fold;\n use fold;\n-use pass::Pass;\n \n use core::str;\n use core::vec;\n@@ -32,7 +29,7 @@ pub fn mk_pass() -> Pass {\n     }\n }\n \n-pub fn run(_srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n+fn run(_srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n     let fold = Fold {\n         fold_item: fold_item,\n         fold_trait: fold_trait,\n@@ -252,14 +249,15 @@ fn should_sectionalize_impl_methods() {\n }\n \n #[cfg(test)]\n-pub mod test {\n+mod test {\n+    #[legacy_exports];\n+\n     use astsrv;\n     use attr_pass;\n     use doc;\n     use extract;\n-    use sectionalize_pass::run;\n \n-    pub fn mk_doc(source: ~str) -> doc::Doc {\n+    fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");\n             let doc = (attr_pass::mk_pass().f)(srv, doc);"}, {"sha": "58349318bbbec14736072515cdc436f128f13fcd", "filename": "src/librustdoc/sort_item_name_pass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fsort_item_name_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fsort_item_name_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_item_name_pass.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -14,7 +14,6 @@ use astsrv;\n use doc::ItemUtils;\n use doc;\n use extract;\n-use pass::Pass;\n use sort_pass;\n \n pub fn mk_pass() -> Pass {"}, {"sha": "4f69a307c204bcaec3f231660709b894298799cc", "filename": "src/librustdoc/sort_item_type_pass.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fsort_item_type_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fsort_item_type_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_item_type_pass.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -10,13 +10,10 @@\n \n //! Sorts items by type\n \n-use core::prelude::*;\n-\n use astsrv;\n use doc::ItemUtils;\n use doc;\n use extract;\n-use pass::Pass;\n use sort_pass;\n \n pub fn mk_pass() -> Pass {"}, {"sha": "fcf878dbf8d81f386dcf1eb7f75f44fd36143cd0", "filename": "src/librustdoc/sort_pass.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fsort_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Fsort_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_pass.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -10,15 +10,12 @@\n \n //! A general sorting pass\n \n-use core::prelude::*;\n-\n use astsrv;\n use doc::ItemUtils;\n use doc;\n use extract;\n use fold::Fold;\n use fold;\n-use pass::Pass;\n use util::NominalOp;\n \n use std::sort;"}, {"sha": "ae205883902ad5f262d79335d856a121fd0b7074", "filename": "src/librustdoc/text_pass.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Ftext_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Ftext_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftext_pass.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -10,14 +10,11 @@\n \n //! Generic pass for performing an operation on all descriptions\n \n-use core::prelude::*;\n-\n use astsrv;\n use doc::ItemUtils;\n use doc;\n use fold::Fold;\n use fold;\n-use pass::Pass;\n use util::NominalOp;\n \n use std::par;\n@@ -291,17 +288,18 @@ fn should_execute_on_impl_method_section_bodies() {\n \n #[cfg(test)]\n mod test {\n+    #[legacy_exports];\n+\n     use astsrv;\n     use attr_pass;\n     use desc_to_brief_pass;\n     use doc;\n     use extract;\n     use sectionalize_pass;\n-    use text_pass::mk_pass;\n \n     use core::str;\n \n-    pub fn mk_doc(source: ~str) -> doc::Doc {\n+    fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");\n             let doc = (attr_pass::mk_pass().f)(srv, doc);"}, {"sha": "731a2bb7ad6eb2acfce9ba207896e0c4747b99b7", "filename": "src/librustdoc/trim_pass.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Ftrim_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Ftrim_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftrim_pass.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -17,10 +17,8 @@ is interpreted as the brief description.\n \n use doc::ItemUtils;\n use doc;\n-use pass::Pass;\n use text_pass;\n \n-use core::option::Some;\n use core::str;\n \n pub fn mk_pass() -> Pass {\n@@ -37,13 +35,14 @@ fn should_trim_text() {\n \n #[cfg(test)]\n mod test {\n+    #[legacy_exports];\n+\n     use astsrv;\n     use attr_pass;\n     use doc;\n     use extract;\n-    use trim_pass::mk_pass;\n \n-    pub fn mk_doc(source: ~str) -> doc::Doc {\n+    fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");\n             let doc = (attr_pass::mk_pass().f)(srv, doc);"}, {"sha": "92f2e0a5e8b0dd7516714537cd1def880d86c382", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -10,16 +10,13 @@\n \n //! Pulls type information out of the AST and attaches it to the document\n \n-use core::prelude::*;\n-\n use astsrv;\n use doc::ItemUtils;\n use doc;\n use extract::to_str;\n use extract;\n use fold::Fold;\n use fold;\n-use pass::Pass;\n \n use core::vec;\n use std::map::HashMap;\n@@ -35,7 +32,7 @@ pub fn mk_pass() -> Pass {\n     }\n }\n \n-pub fn run(\n+fn run(\n     srv: astsrv::Srv,\n     +doc: doc::Doc\n ) -> doc::Doc {\n@@ -408,13 +405,14 @@ fn should_not_serialize_struct_attrs() {\n }\n \n #[cfg(test)]\n-pub mod test {\n+mod test {\n+    #[legacy_exports];\n+\n     use astsrv;\n     use doc;\n     use extract;\n-    use tystr_pass::run;\n \n-    pub fn mk_doc(source: ~str) -> doc::Doc {\n+    fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");\n             run(srv, doc)"}, {"sha": "e18d1652a5b7e97ff93e2cd2544c3e420a58b461", "filename": "src/librustdoc/unindent_pass.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Funindent_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Funindent_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Funindent_pass.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -19,9 +19,6 @@ instances where the string containing the doc comment is opened in the\n middle of a line, and each of the following lines is indented.\n */\n \n-use core::prelude::*;\n-\n-use pass::Pass;\n use text_pass;\n \n use core::str;"}, {"sha": "998b64421d5068f4fff1e6846e91fc2c32800b59", "filename": "src/librustdoc/util.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibrustdoc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Futil.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use core::oldcomm;\n use core::task;\n "}, {"sha": "b38f756a2b57d3ba639a1de3fbb3bd8b9b99600c", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -20,7 +20,6 @@ use sync::{Mutex, mutex_with_condvars, RWlock, rwlock_with_condvars};\n \n use core::cast;\n use core::pipes;\n-use core::prelude::*;\n use core::private::{SharedMutableState, shared_mutable_state};\n use core::private::{clone_shared_mutable_state, unwrap_shared_mutable_state};\n use core::private::{get_shared_mutable_state, get_shared_immutable_state};\n@@ -471,9 +470,6 @@ impl<T: Const Owned> &RWReadMode<T> {\n mod tests {\n     #[legacy_exports];\n \n-    use core::prelude::*;\n-\n-    use arc::*;\n     use arc;\n \n     use core::oldcomm::*;"}, {"sha": "e817e6e160f7a53ecc3ddad5e5afca6c51e2ba6c", "filename": "src/libstd/arena.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farena.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -42,7 +42,6 @@ use core::at_vec;\n use core::cast::reinterpret_cast;\n use core::cast;\n use core::libc::size_t;\n-use core::prelude::*;\n use core::ptr;\n use core::sys::TypeDesc;\n use core::sys;"}, {"sha": "38ebe67898d3aa028ae8d0e74b1f5acc564864c5", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -11,7 +11,6 @@\n #[forbid(deprecated_mode)];\n \n use core::ops;\n-use core::prelude::*;\n use core::uint;\n use core::vec::{to_mut, from_elem};\n use core::vec;\n@@ -579,9 +578,6 @@ impl Bitv: ops::Index<uint,bool> {\n mod tests {\n     #[legacy_exports];\n \n-    use core::prelude::*;\n-\n-    use bitv::*;\n     use bitv;\n \n     use core::uint;"}, {"sha": "aa9e864adfdcaac928f1446027ce86c39987314c", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -40,7 +40,6 @@\n use core::libc;\n use core::oldcomm;\n use core::option;\n-use core::prelude::*;\n use core::ptr;\n use core::task;\n \n@@ -153,10 +152,6 @@ pub unsafe fn ptr<T>(t: CVec<T>) -> *mut T {\n \n #[cfg(test)]\n mod tests {\n-    use core::prelude::*;\n-\n-    use c_vec::*;\n-\n     use core::libc::*;\n     use core::libc;\n "}, {"sha": "29c75e629e90e30975855b383ca224c95ba487f2", "filename": "src/libstd/cell.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcell.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -11,7 +11,6 @@\n #[forbid(deprecated_mode)];\n \n use core::option;\n-use core::prelude::*;\n \n /// A dynamic, mutable location.\n ///"}, {"sha": "850e53c2d48e74ada8b1c12f066e9288e40febf3", "filename": "src/libstd/comm.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -20,7 +20,6 @@ Higher level communication abstractions.\n use core::pipes::{GenericChan, GenericSmartChan, GenericPort};\n use core::pipes::{Chan, Port, Selectable, Peekable};\n use core::pipes;\n-use core::prelude::*;\n \n /// An extension of `pipes::stream` that allows both sending and receiving.\n pub struct DuplexStream<T: Owned, U: Owned> {\n@@ -81,8 +80,6 @@ pub fn DuplexStream<T: Owned, U: Owned>()\n #[cfg(test)]\n mod test {\n     #[legacy_exports];\n-    use comm::DuplexStream;\n-\n     #[test]\n     fn DuplexStream1() {\n         let (left, right) = DuplexStream();"}, {"sha": "e7042ffa89f057781d1eff323be88ea521d1f83a", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -15,7 +15,6 @@\n use core::cmp::Eq;\n use core::dvec::DVec;\n use core::dvec;\n-use core::prelude::*;\n use core::uint;\n use core::vec;\n \n@@ -132,9 +131,6 @@ pub fn create<T: Copy>() -> Deque<T> {\n \n #[cfg(test)]\n mod tests {\n-    use core::prelude::*;\n-\n-    use deque::*;\n     use deque;\n \n     #[test]"}, {"sha": "0f49507cea4dc038224b045f9e2aa640ffe085ec", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -14,7 +14,6 @@ use serialize;\n \n use core::io;\n use core::ops;\n-use core::prelude::*;\n use core::str;\n use core::vec;\n \n@@ -34,18 +33,18 @@ struct EbmlState {\n     data_pos: uint,\n }\n \n-pub struct Doc {\n+struct Doc {\n     data: @~[u8],\n     start: uint,\n     end: uint,\n }\n \n-pub struct TaggedDoc {\n+struct TaggedDoc {\n     tag: uint,\n     doc: Doc,\n }\n \n-pub enum EbmlEncoderTag {\n+enum EbmlEncoderTag {\n     EsUint, EsU64, EsU32, EsU16, EsU8,\n     EsInt, EsI64, EsI32, EsI16, EsI8,\n     EsBool,\n@@ -61,16 +60,11 @@ pub enum EbmlEncoderTag {\n // --------------------------------------\n \n pub mod reader {\n-    use ebml::{Doc, EbmlEncoderTag, EsBool, EsEnum, EsEnumBody, EsEnumVid};\n-    use ebml::{EsF32, EsF64, EsFloat, EsI16, EsI32, EsI64, EsI8, EsInt};\n-    use ebml::{EsLabel, EsOpaque, EsStr, EsU16, EsU32, EsU64, EsU8, EsUint};\n-    use ebml::{EsVec, EsVecElt, EsVecLen, TaggedDoc};\n     use serialize;\n \n     use core::int;\n     use core::io;\n     use core::ops;\n-    use core::prelude::*;\n     use core::str;\n     use core::vec;\n \n@@ -404,11 +398,6 @@ pub mod reader {\n }\n \n pub mod writer {\n-    use ebml::{Doc, EbmlEncoderTag, EsBool, EsEnum, EsEnumBody, EsEnumVid};\n-    use ebml::{EsF32, EsF64, EsFloat, EsI16, EsI32, EsI64, EsI8, EsInt};\n-    use ebml::{EsLabel, EsOpaque, EsStr, EsU16, EsU32, EsU64, EsU8, EsUint};\n-    use ebml::{EsVec, EsVecElt, EsVecLen, TaggedDoc};\n-\n     use core::io;\n     use core::str;\n     use core::vec;\n@@ -679,7 +668,6 @@ mod tests {\n     use serialize;\n \n     use core::io;\n-    use core::option::{None, Option, Some};\n \n     #[test]\n     fn test_option_int() {"}, {"sha": "8f239b2a130ff965f56e0d47d0ef4a384ecaa5ed", "filename": "src/libstd/flatpipes.rs", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fflatpipes.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -42,7 +42,6 @@ use core::io;\n use core::pipes::GenericChan;\n use core::pipes::GenericPort;\n use core::pipes;\n-use core::prelude::*;\n use core::sys::size_of;\n use core::uint;\n use core::vec;\n@@ -161,15 +160,14 @@ POD are not equivelant.\n \n */\n pub mod pod {\n-    use flatpipes::flatteners::{PodUnflattener, PodFlattener};\n-    use flatpipes::bytepipes::{ReaderBytePort, WriterByteChan};\n-    use flatpipes::bytepipes::{PipeBytePort, PipeByteChan};\n-    use flatpipes::{FlatPort, FlatChan};\n \n     use core::io::{Reader, Writer};\n     use core::pipes::{Port, Chan};\n     use core::pipes;\n-    use core::prelude::*;\n+    use flatpipes::flatteners::{PodUnflattener, PodFlattener};\n+    use flatpipes::bytepipes::{ReaderBytePort, WriterByteChan};\n+    use flatpipes::bytepipes::{PipeBytePort, PipeByteChan};\n+    use flatpipes::{FlatPort, FlatChan};\n \n     pub type ReaderPort<T: Copy Owned, R> =\n         FlatPort<T, PodUnflattener<T>, ReaderBytePort<R>>;\n@@ -328,14 +326,12 @@ pub impl<T,F:Flattener<T>,C:ByteChan> FlatChan<T, F, C> {\n \n pub mod flatteners {\n     use ebml;\n-    use flatpipes::{ByteChan, BytePort, Flattener, Unflattener};\n     use flatpipes::util::BufReader;\n     use json;\n     use serialize::{Encoder, Decoder, Encodable, Decodable};\n \n     use core::cast;\n     use core::io::{Writer, Reader, BytesWriter, ReaderUtil};\n-    use core::prelude::*;\n     use core::ptr;\n     use core::sys::size_of;\n     use core::vec;\n@@ -500,12 +496,9 @@ pub mod flatteners {\n }\n \n pub mod bytepipes {\n-    use flatpipes::{ByteChan, BytePort};\n-\n     use core::io::{Writer, Reader, ReaderUtil};\n     use core::pipes::{Port, Chan};\n     use core::pipes;\n-    use core::prelude::*;\n \n     pub struct ReaderBytePort<R: Reader> {\n         reader: R\n@@ -629,7 +622,6 @@ pub mod bytepipes {\n mod util {\n     use core::io::{Reader, BytesReader};\n     use core::io;\n-    use core::prelude::*;\n \n     pub struct BufReader {\n         buf: ~[u8],\n@@ -683,7 +675,6 @@ mod util {\n \n #[cfg(test)]\n mod test {\n-    use core::prelude::*;\n \n     // XXX: json::Decoder doesn't work because of problems related to\n     // its interior pointers\n@@ -697,15 +688,13 @@ mod test {\n     use flatpipes::pod;\n     use flatpipes::serial;\n     use flatpipes::util::BufReader;\n-    use flatpipes::{BytePort, FlatChan, FlatPort};\n     use net::ip;\n     use net::tcp::TcpSocketBuf;\n \n     use core::dvec::DVec;\n     use core::int;\n     use core::io::BytesReader;\n     use core::io;\n-    use core::prelude::*;\n     use core::result;\n     use core::sys;\n     use core::task;\n@@ -929,10 +918,6 @@ mod test {\n     // Tests that the different backends behave the same when the\n     // binary streaming protocol is broken\n     mod broken_protocol {\n-        use core::prelude::*;\n-\n-        use flatpipes::{BytePort, FlatPort};\n-        use flatpipes::flatteners::PodUnflattener;\n         use flatpipes::pod;\n         use flatpipes::util::BufReader;\n "}, {"sha": "6a24e1e58177485783883fa7eb8d38c198a0e2b4", "filename": "src/libstd/fun_treemap.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Ffun_treemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Ffun_treemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffun_treemap.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -23,7 +23,6 @@\n \n use core::cmp::{Eq, Ord};\n use core::option::{Some, None};\n-use core::prelude::*;\n \n pub type Treemap<K, V> = @TreeNode<K, V>;\n "}, {"sha": "7cbd42f217d2ba27b3d35d13ccb2cce8d752b1a6", "filename": "src/libstd/future.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -26,7 +26,6 @@ use core::cast;\n use core::either::Either;\n use core::option;\n use core::pipes::{recv, oneshot, ChanOne, PortOne, send_one, recv_one};\n-use core::prelude::*;\n use core::task;\n \n #[doc = \"The future type\"]\n@@ -146,10 +145,6 @@ pub fn spawn<A:Owned>(blk: fn~() -> A) -> Future<A> {\n \n #[allow(non_implicitly_copyable_typarams)]\n pub mod test {\n-    use core::prelude::*;\n-\n-    use future::*;\n-\n     use core::pipes::oneshot;\n     use core::task;\n "}, {"sha": "3d9ee0d3d12965109390fe4721568671d0f394b9", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -75,7 +75,6 @@\n #[forbid(deprecated_mode)];\n \n use core::cmp::Eq;\n-use core::prelude::*;\n use core::result::{Err, Ok};\n use core::result;\n use core::option;\n@@ -84,16 +83,16 @@ use core::str;\n use core::vec;\n \n #[deriving_eq]\n-pub enum Name {\n+enum Name {\n     Long(~str),\n     Short(char),\n }\n \n #[deriving_eq]\n-pub enum HasArg { Yes, No, Maybe, }\n+enum HasArg { Yes, No, Maybe, }\n \n #[deriving_eq]\n-pub enum Occur { Req, Optional, Multi, }\n+enum Occur { Req, Optional, Multi, }\n \n /// A description of a possible option\n #[deriving_eq]\n@@ -454,10 +453,8 @@ enum FailType {\n  *  groups of short and long option names, together.\n  */\n pub mod groups {\n-    use getopts::{HasArg, Long, Maybe, Multi, No, Occur, Opt, Optional, Req};\n-    use getopts::{Result, Short, Yes};\n+    use getopts::Result;\n \n-    use core::prelude::*;\n     use core::str;\n     use core::vec;\n \n@@ -572,7 +569,7 @@ pub mod groups {\n     /*\n      * Parse command line args with the provided long format options\n      */\n-    pub fn getopts(args: &[~str], opts: &[OptGroup]) -> ::getopts::Result {\n+    pub fn getopts(args: &[~str], opts: &[OptGroup]) -> Result {\n         ::getopts::getopts(args, vec::flat_map(opts, long_to_short))\n     }\n \n@@ -636,11 +633,9 @@ pub mod groups {\n #[cfg(test)]\n mod tests {\n     #[legacy_exports];\n-    use core::prelude::*;\n-\n     use opt = getopts;\n     use getopts::groups::OptGroup;\n-    use getopts::*;\n+    use getopts::groups;\n \n     use core::result::{Err, Ok};\n     use core::result;"}, {"sha": "44cd4fe44491a721255494aecd7e24a0ae6018b9", "filename": "src/libstd/json.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -23,7 +23,6 @@ use core::cmp::{Eq, Ord};\n use core::float;\n use core::io::{WriterUtil, ReaderUtil};\n use core::io;\n-use core::prelude::*;\n use core::send_map::linear;\n use core::str;\n use core::to_str;\n@@ -1194,10 +1193,6 @@ impl Error: to_str::ToStr {\n \n #[cfg(test)]\n mod tests {\n-    use core::prelude::*;\n-\n-    use json::*;\n-\n     use core::result;\n     use core::send_map::linear;\n "}, {"sha": "4a7574afd9f0797b79b6534a28f3cf99ea18c776", "filename": "src/libstd/list.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flist.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -14,7 +14,6 @@\n use core::cmp::Eq;\n use core::option;\n use core::option::*;\n-use core::prelude::*;\n use core::vec;\n \n #[deriving_eq]\n@@ -163,7 +162,6 @@ pub pure fn each<T>(l: @List<T>, f: fn(&T) -> bool) {\n mod tests {\n     #[legacy_exports];\n \n-    use list::*;\n     use list;\n \n     use core::option;"}, {"sha": "e4f38496f1dd85a48b1da6f479460baa0924217e", "filename": "src/libstd/map.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -18,7 +18,6 @@ use core::io;\n use core::ops;\n use core::to_str::ToStr;\n use core::mutable::Mut;\n-use core::prelude::*;\n use core::send_map::linear::LinearMap;\n use core::to_bytes::IterBytes;\n use core::uint;\n@@ -121,12 +120,11 @@ pub mod util {\n // FIXME (#2344): package this up and export it as a datatype usable for\n // external code that doesn't want to pay the cost of a box.\n pub mod chained {\n-    use map::{Map, util};\n+    use map::util;\n \n     use core::io;\n     use core::ops;\n     use core::option;\n-    use core::prelude::*;\n     use core::uint;\n     use core::vec;\n \n@@ -617,7 +615,6 @@ impl<K: Eq IterBytes Hash Copy, V: Copy> @Mut<LinearMap<K, V>>:\n mod tests {\n     use map;\n \n-    use core::option::None;\n     use core::option;\n     use core::uint;\n "}, {"sha": "96bd6367e569e91a9759e188a074513c84056810", "filename": "src/libstd/net_ip.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_ip.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -13,7 +13,6 @@\n \n use core::libc;\n use core::oldcomm;\n-use core::prelude::*;\n use core::ptr;\n use core::result;\n use core::str;\n@@ -48,7 +47,7 @@ pub enum IpAddr {\n }\n \n /// Human-friendly feedback on why a parse_addr attempt failed\n-pub type ParseAddrErr = {\n+type ParseAddrErr = {\n     err_msg: ~str\n };\n \n@@ -148,12 +147,8 @@ pub fn get_addr(node: &str, iotask: iotask)\n }\n \n pub mod v4 {\n-    use net::ip::{IpAddr, Ipv4, Ipv6, ParseAddrErr};\n     use uv::ll;\n-    use uv_ip4_addr = uv::ll::ip4_addr;\n-    use uv_ip4_name = uv::ll::ip4_name;\n \n-    use core::prelude::*;\n     use core::ptr;\n     use core::result;\n     use core::str;\n@@ -246,11 +241,6 @@ pub mod v4 {\n     }\n }\n pub mod v6 {\n-    use net::ip::{IpAddr, Ipv6, ParseAddrErr};\n-    use uv_ip6_addr = uv::ll::ip6_addr;\n-    use uv_ip6_name = uv::ll::ip6_name;\n-\n-    use core::prelude::*;\n     use core::result;\n     use core::str;\n \n@@ -360,9 +350,6 @@ extern fn get_addr_cb(handle: *uv_getaddrinfo_t, status: libc::c_int,\n \n #[cfg(test)]\n mod test {\n-    use core::prelude::*;\n-\n-    use net_ip::*;\n     use net_ip::v4;\n     use net_ip::v6;\n     use uv;"}, {"sha": "ca365e2a7d3e34a1abfd504ffd47a17875e34652", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -24,7 +24,6 @@ use core::io;\n use core::libc::size_t;\n use core::libc;\n use core::oldcomm;\n-use core::prelude::*;\n use core::ptr;\n use core::result::{Result};\n use core::result;\n@@ -87,7 +86,7 @@ pub type TcpErrData = {\n     err_msg: ~str\n };\n /// Details returned as part of a `result::err` result from `tcp::listen`\n-pub enum TcpListenErrData {\n+enum TcpListenErrData {\n     /**\n      * Some unplanned-for error. The first and second fields correspond\n      * to libuv's `err_name` and `err_msg` fields, respectively.\n@@ -375,7 +374,7 @@ pub fn read_stop(sock: &TcpSocket,\n  * * `timeout_msecs` - a `uint` value, in msecs, to wait before dropping the\n  * read attempt. Pass `0u` to wait indefinitely\n  */\n-pub fn read(sock: &TcpSocket, timeout_msecs: uint)\n+fn read(sock: &TcpSocket, timeout_msecs: uint)\n     -> result::Result<~[u8],TcpErrData> {\n     let socket_data = ptr::addr_of(&(*(sock.socket_data)));\n     read_common_impl(socket_data, timeout_msecs)\n@@ -1271,16 +1270,12 @@ type TcpBufferedSocketData = {\n \n //#[cfg(test)]\n mod test {\n-    use net::ip;\n-    use net::tcp::{GenericListenErr, TcpConnectErrData, TcpListenErrData};\n-    use net::tcp::{TcpSocket, accept, connect, listen, read, socket_buf};\n     use net;\n-    use uv::iotask::IoTask;\n+    use net::ip;\n     use uv;\n \n     use core::io;\n     use core::oldcomm;\n-    use core::prelude::*;\n     use core::result;\n     use core::str;\n     use core::task;"}, {"sha": "5fc20351793512f839f88f45a897ba7054961d7a", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -19,7 +19,6 @@ use core::dvec::DVec;\n use core::from_str::FromStr;\n use core::io::{Reader, ReaderUtil};\n use core::io;\n-use core::prelude::*;\n use core::send_map::linear::LinearMap;\n use core::send_map;\n use core::str;\n@@ -736,10 +735,6 @@ impl Url: to_bytes::IterBytes {\n #[cfg(test)]\n mod tests {\n     #[legacy_exports];\n-\n-    use core::prelude::*;\n-\n-    use net_url::*;\n     use net_url::UserInfo;\n \n     use core::result;"}, {"sha": "d88d298ef18d074ce93fe859a0265725fb8980c3", "filename": "src/libstd/par.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fpar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fpar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpar.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -11,7 +11,6 @@\n #[forbid(deprecated_mode)];\n \n use core::cast;\n-use core::prelude::*;\n use core::ptr;\n use core::sys;\n use core::uint;"}, {"sha": "4281867635918f0df03af2c11378a2e4fe496b0a", "filename": "src/libstd/priority_queue.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpriority_queue.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -2,7 +2,6 @@\n //! A priority queue implemented with a binary heap\n \n use core::cmp::Ord;\n-use core::prelude::*;\n use core::ptr::addr_of;\n use core::vec;\n "}, {"sha": "f384cceb41be239307142f190dcceb441521abd0", "filename": "src/libstd/rl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Frl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Frl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frl.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -12,7 +12,6 @@\n // state without mutexes.\n \n use core::libc::{c_char, c_int};\n-use core::prelude::*;\n use core::str;\n use core::task;\n "}, {"sha": "1513e621fcbb352649b4725783e5c94a293c2c53", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -38,7 +38,6 @@\n use core::cast;\n use core::char;\n use core::option;\n-use core::prelude::*;\n use core::str;\n use core::uint;\n use core::vec;\n@@ -449,9 +448,7 @@ pub fn loop_leaves(rope: Rope, it: fn(node::Leaf) -> bool) -> bool{\n \n pub mod iterator {\n     pub mod leaf {\n-        use rope::{Rope, node};\n-\n-        use core::prelude::*;\n+        use rope::node;\n \n         pub fn start(rope: Rope) -> node::leaf_iterator::T {\n             match (rope) {\n@@ -464,9 +461,7 @@ pub mod iterator {\n         }\n     }\n     pub mod char {\n-        use rope::{Rope, node};\n-\n-        use core::prelude::*;\n+        use rope::node;\n \n         pub fn start(rope: Rope) -> node::char_iterator::T {\n             match (rope) {\n@@ -565,7 +560,6 @@ pub mod node {\n     use core::cast;\n     use core::char;\n     use core::option;\n-    use core::prelude::*;\n     use core::str;\n     use core::uint;\n     use core::vec;\n@@ -1141,10 +1135,7 @@ pub mod node {\n     }\n \n     pub mod leaf_iterator {\n-        use rope::node::{Concat, Leaf, Node, height};\n-\n         use core::option;\n-        use core::prelude::*;\n         use core::vec;\n \n         pub type T = {\n@@ -1184,11 +1175,9 @@ pub mod node {\n     }\n \n     pub mod char_iterator {\n-        use rope::node::{Leaf, Node};\n         use rope::node::leaf_iterator;\n \n         use core::option;\n-        use core::prelude::*;\n         use core::str;\n \n         pub type T = {\n@@ -1270,7 +1259,8 @@ pub mod node {\n \n #[cfg(test)]\n mod tests {\n-    use rope::*;\n+    use rope::iterator;\n+    use rope::node;\n \n     use core::option;\n     use core::str;"}, {"sha": "97d5ad18780360ef4e8ac2c5371dc1847ed98c0f", "filename": "src/libstd/serialize.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialize.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -18,7 +18,6 @@ Core encoding and decoding interfaces.\n #[forbid(non_camel_case_types)];\n \n use core::at_vec;\n-use core::prelude::*;\n use core::vec;\n \n pub trait Encoder {"}, {"sha": "a6c14516af2cdb00657080e73afd26721c8e3cb0", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -21,7 +21,6 @@ use core::dvec::DVec;\n use core::ops;\n use core::option::{Some, None};\n use core::option;\n-use core::prelude::*;\n \n // FIXME (#2347): Should not be @; there's a bug somewhere in rustc that\n // requires this to be.\n@@ -169,8 +168,6 @@ pub fn as_map<V: Copy>(s: SmallIntMap<V>) -> map::Map<uint, V> {\n \n #[cfg(test)]\n mod tests {\n-    use smallintmap::{mk, SmallIntMap};\n-\n     use core::option::None;\n     use core::option;\n "}, {"sha": "505b2526741262c400a80cc69cd74d65458eae62", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -13,7 +13,6 @@\n \n use core::cmp::{Eq, Ord};\n use core::dvec::DVec;\n-use core::prelude::*;\n use core::util;\n use core::vec::{len, push};\n use core::vec;\n@@ -716,10 +715,6 @@ fn copy_vec<T: Copy>(dest: &[mut T], s1: uint,\n mod test_qsort3 {\n     #[legacy_exports];\n \n-    use core::prelude::*;\n-\n-    use sort::*;\n-\n     use core::vec;\n \n     fn check_sort(v1: &[mut int], v2: &[mut int]) {\n@@ -763,10 +758,6 @@ mod test_qsort3 {\n mod test_qsort {\n     #[legacy_exports];\n \n-    use core::prelude::*;\n-\n-    use sort::*;\n-\n     use core::int;\n     use core::vec;\n \n@@ -831,10 +822,6 @@ mod test_qsort {\n mod tests {\n     #[legacy_exports];\n \n-    use core::prelude::*;\n-\n-    use sort::*;\n-\n     use core::vec;\n \n     fn check_sort(v1: &[int], v2: &[int]) {\n@@ -900,10 +887,6 @@ mod tests {\n \n #[cfg(test)]\n mod test_tim_sort {\n-    use core::prelude::*;\n-\n-    use sort::tim_sort;\n-\n     use core::rand;\n     use core::vec;\n \n@@ -997,10 +980,6 @@ mod test_tim_sort {\n \n #[cfg(test)]\n mod big_tests {\n-    use core::prelude::*;\n-\n-    use sort::*;\n-\n     use core::rand;\n     use core::task;\n     use core::uint;"}, {"sha": "d957a7ee2abbf585a4869fe65f863ea0310a1e1d", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -19,7 +19,6 @@\n \n use core::option;\n use core::pipes;\n-use core::prelude::*;\n use core::private::{Exclusive, exclusive};\n use core::ptr;\n use core::task;\n@@ -710,10 +709,6 @@ impl &RWlockReadMode {\n mod tests {\n     #[legacy_exports];\n \n-    use core::prelude::*;\n-\n-    use sync::*;\n-\n     use core::cast;\n     use core::option;\n     use core::pipes;"}, {"sha": "68bf2612f9a480ab901534d1923f214413578b54", "filename": "src/libstd/task_pool.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask_pool.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -14,7 +14,6 @@\n use core::io;\n use core::pipes::{Chan, Port};\n use core::pipes;\n-use core::prelude::*;\n use core::task::{SchedMode, SingleThreaded};\n use core::task;\n use core::vec;"}, {"sha": "afb9290f6cfbd442f8cead90afade5dfe0adf2a5", "filename": "src/libstd/tempfile.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftempfile.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -13,7 +13,6 @@\n #[forbid(deprecated_mode)];\n \n use core::os;\n-use core::prelude::*;\n use core::rand;\n use core::str;\n "}, {"sha": "176953663ebfbf6a0bd2ccceb0c059b8401be572", "filename": "src/libstd/test.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -29,7 +29,6 @@ use core::io;\n use core::libc::size_t;\n use core::oldcomm;\n use core::option;\n-use core::prelude::*;\n use core::result;\n use core::str;\n use core::task::TaskBuilder;\n@@ -80,7 +79,7 @@ pub type TestOpts = {filter: Option<~str>, run_ignored: bool,\n type OptRes = Either<TestOpts, ~str>;\n \n // Parses command line arguments into test options\n-pub fn parse_opts(args: &[~str]) -> OptRes {\n+fn parse_opts(args: &[~str]) -> OptRes {\n     let args_ = vec::tail(args);\n     let opts = ~[getopts::optflag(~\"ignored\"), getopts::optopt(~\"logfile\")];\n     let matches =\n@@ -284,9 +283,9 @@ enum TestEvent {\n \n type MonitorMsg = (TestDesc, TestResult);\n \n-fn run_tests(opts: &TestOpts,\n-             tests: &[TestDesc],\n+fn run_tests(opts: &TestOpts, tests: &[TestDesc],\n              callback: fn@(e: TestEvent)) {\n+\n     let mut filtered_tests = filter_tests(opts, tests);\n     callback(TeFiltered(copy filtered_tests));\n \n@@ -341,9 +340,8 @@ fn get_concurrency() -> uint {\n }\n \n #[allow(non_implicitly_copyable_typarams)]\n-pub fn filter_tests(opts: &TestOpts,\n-                    tests: &[TestDesc])\n-                 -> ~[TestDesc] {\n+fn filter_tests(opts: &TestOpts,\n+                tests: &[TestDesc]) -> ~[TestDesc] {\n     let mut filtered = vec::slice(tests, 0, tests.len());\n \n     // Remove tests that don't match the test filter\n@@ -395,7 +393,7 @@ pub fn filter_tests(opts: &TestOpts,\n \n type TestFuture = {test: TestDesc, wait: fn@() -> TestResult};\n \n-pub fn run_test(test: TestDesc, monitor_ch: oldcomm::Chan<MonitorMsg>) {\n+fn run_test(test: TestDesc, monitor_ch: oldcomm::Chan<MonitorMsg>) {\n     if test.ignore {\n         oldcomm::send(monitor_ch, (copy test, TrIgnored));\n         return;\n@@ -427,8 +425,6 @@ fn calc_result(test: &TestDesc, task_succeeded: bool) -> TestResult {\n mod tests {\n     #[legacy_exports];\n \n-    use test::{TrFailed, TrIgnored, TrOk, filter_tests, parse_opts, run_test};\n-\n     use core::either;\n     use core::oldcomm;\n     use core::option;"}, {"sha": "7c586c3fd4e210a61de4c509812adb26504c3a88", "filename": "src/libstd/time.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -16,7 +16,6 @@ use core::libc::{c_char, c_int, c_long, size_t, time_t};\n use core::i32;\n use core::io::{Reader, ReaderUtil};\n use core::io;\n-use core::prelude::*;\n use core::result::{Result, Ok, Err};\n use core::str;\n \n@@ -858,8 +857,6 @@ priv fn do_strftime(format: &str, tm: &Tm) -> ~str {\n mod tests {\n     #[legacy_exports];\n \n-    use time::*;\n-\n     use core::float;\n     use core::os;\n     use core::result;"}, {"sha": "038486f2b902d1fa5b155d462dcb42d61ad79864", "filename": "src/libstd/timer.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftimer.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -19,7 +19,6 @@ use uv::iotask::IoTask;\n use core::either;\n use core::libc;\n use core::oldcomm;\n-use core::prelude::*;\n use core::ptr;\n use core;\n \n@@ -165,9 +164,6 @@ extern fn delayed_send_close_cb(handle: *uv::ll::uv_timer_t) unsafe {\n mod test {\n     #[legacy_exports];\n \n-    use core::prelude::*;\n-\n-    use timer::*;\n     use uv;\n \n     use core::iter;"}, {"sha": "caccb763ee9d6d40903ddbb042494412d56b0072", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -18,8 +18,8 @@\n #[forbid(deprecated_mode)];\n \n use core::cmp::{Eq, Ord};\n-use core::option::{Option, Some, None};\n-use core::prelude::*;\n+use core::option::{Some, None};\n+use Option = core::Option;\n \n pub type TreeMap<K: Copy Eq Ord, V: Copy> = @mut TreeEdge<K, V>;\n \n@@ -107,9 +107,6 @@ pub fn equals<K: Copy Eq Ord, V: Copy Eq>(t1: &const TreeEdge<K, V>,\n mod tests {\n     #[legacy_exports];\n \n-    use treemap::*;\n-\n-    use core::option::{None, Option, Some};\n     use core::str;\n \n     #[test]"}, {"sha": "43ed58aa0c1255cbaae5214776333f5d89e72379", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -123,11 +123,8 @@ fn spawn_loop() -> IoTask {\n \n #[cfg(test)]\n mod test {\n-    use core::prelude::*;\n-\n     use uv::iotask;\n     use uv::ll;\n-    use uv_global_loop::*;\n \n     use core::iter;\n     use core::libc;"}, {"sha": "7853f1cd9f79fa2e8130cc3715b2d15e76f78d30", "filename": "src/libstd/uv_iotask.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fuv_iotask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fuv_iotask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_iotask.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -21,7 +21,6 @@ use ll = uv_ll;\n use core::libc::c_void;\n use core::libc;\n use core::oldcomm::{Port, Chan, listen};\n-use core::prelude::*;\n use core::ptr::addr_of;\n use core::task::TaskBuilder;\n use core::task;\n@@ -177,10 +176,7 @@ extern fn tear_down_close_cb(handle: *ll::uv_async_t) unsafe {\n \n #[cfg(test)]\n mod test {\n-    use core::prelude::*;\n-\n     use uv::ll;\n-    use uv_iotask::*;\n \n     use core::iter;\n     use core::libc;"}, {"sha": "46574ced2e59650a2bfdc39612ac74e756acea82", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -34,7 +34,6 @@\n \n use core::libc::size_t;\n use core::libc;\n-use core::prelude::*;\n use core::ptr::to_unsafe_ptr;\n use core::ptr;\n use core::str;\n@@ -320,9 +319,6 @@ pub type uv_getaddrinfo_t = {\n };\n \n pub mod uv_ll_struct_stubgen {\n-    use uv_ll::{uv_async_t, uv_connect_t, uv_getaddrinfo_t, uv_tcp_t};\n-    use uv_ll::{uv_timer_t, uv_write_t};\n-\n     use core::ptr;\n \n     pub fn gen_stub_uv_tcp_t() -> uv_tcp_t {\n@@ -1044,10 +1040,6 @@ pub unsafe fn addrinfo_as_sockaddr_in6(input: *addrinfo) -> *sockaddr_in6 {\n \n #[cfg(test)]\n pub mod test {\n-    use core::prelude::*;\n-\n-    use uv_ll::*;\n-\n     use core::libc;\n     use core::oldcomm;\n     use core::ptr;"}, {"sha": "3631556c2ba005aea370a28884209d273620e5dd", "filename": "src/libstd/workcache.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibstd%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fworkcache.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -16,7 +16,6 @@ use core::either::{Either, Left, Right};\n use core::io;\n use core::option;\n use core::pipes::{recv, oneshot, PortOne, send_one};\n-use core::prelude::*;\n use core::result;\n use core::run;\n use core::send_map::linear::LinearMap;"}, {"sha": "c7c8c77c70fa3c14335e5f7ae9bc1f1df2423462", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -12,10 +12,10 @@\n \n use ast;\n use codemap::{span, FileName};\n+use parse::token;\n \n use core::cast;\n use core::cmp;\n-use core::option::{None, Option, Some};\n use core::ptr;\n use core::task;\n use core::to_bytes;\n@@ -29,8 +29,7 @@ type spanned<T> = {node: T, span: span};\n /* can't import macros yet, so this is copied from token.rs. See its comment\n  * there. */\n macro_rules! interner_key (\n-    () => (cast::transmute::<(uint, uint),\n-            &fn(+v: @@::parse::token::ident_interner)>(\n+    () => (cast::transmute::<(uint, uint), &fn(+v: @@token::ident_interner)>(\n         (-3 as uint, 0u)))\n )\n \n@@ -769,10 +768,10 @@ type capture_clause = @~[capture_item];\n #[auto_decode]\n #[doc=\"For macro invocations; parsing is delegated to the macro\"]\n enum token_tree {\n-    tt_tok(span, ::parse::token::Token),\n+    tt_tok(span, token::Token),\n     tt_delim(~[token_tree]),\n     // These only make sense for right-hand-sides of MBE macros\n-    tt_seq(span, ~[token_tree], Option<::parse::token::Token>, bool),\n+    tt_seq(span, ~[token_tree], Option<token::Token>, bool),\n     tt_nonterminal(span, ident)\n }\n \n@@ -834,10 +833,10 @@ type matcher = spanned<matcher_>;\n #[auto_decode]\n enum matcher_ {\n     // match one token\n-    match_tok(::parse::token::Token),\n+    match_tok(token::Token),\n     // match repetitions of a sequence: body, separator, zero ok?,\n     // lo, hi position-in-match-array used:\n-    match_seq(~[matcher], Option<::parse::token::Token>, bool, uint, uint),\n+    match_seq(~[matcher], Option<token::Token>, bool, uint, uint),\n     // parse a Rust NT: name to bind, name of NT, position in match array:\n     match_nonterminal(ident, ident, uint)\n }\n@@ -1150,7 +1149,7 @@ type fn_decl =\n \n #[auto_encode]\n #[auto_decode]\n-pub enum purity {\n+enum purity {\n     pure_fn, // declared with \"pure fn\"\n     unsafe_fn, // declared with \"unsafe fn\"\n     impure_fn, // declared with \"fn\""}, {"sha": "f35d8c4e1c48580f69eb5fcfafce246ce44843bc", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast::*;\n use ast;\n use ast_util::{path_to_ident, stmt_id};"}, {"sha": "eaa61b304cd16816f20c594f21279340910ed42b", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,13 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast::*;\n use ast;\n use ast_util;\n use codemap::{span, BytePos};\n-use parse::token;\n use visit;\n \n use core::cmp;"}, {"sha": "73c14e2d00cf2a8934e22287169c9215140b52e7", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -10,8 +10,6 @@\n \n // Functions dealing with attributes and meta_items\n \n-use core::prelude::*;\n-\n use ast;\n use ast_util::{spanned, dummy_spanned};\n use attr;"}, {"sha": "1f26711abb9666bd08fc961df5d16618bf816629", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -21,8 +21,6 @@ source code snippets, etc.\n \n */\n \n-use core::prelude::*;\n-\n use ast_util;\n \n use core::cmp;"}, {"sha": "ddffa04622f322317fc590b0aa05e69a8fb9648f", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use codemap::span;\n use codemap;\n "}, {"sha": "b8fe00e246c7c14d5fa479c19499c570380e0e53", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -88,14 +88,10 @@ node twice.\n \n */\n \n-use core::prelude::*;\n-\n-use ast;\n use ast_util;\n use attr;\n use codemap::span;\n use ext::base::*;\n-use parse;\n \n use core::vec;\n use std::map;\n@@ -425,7 +421,7 @@ fn mk_impl(\n     @{\n         // This is a new-style impl declaration.\n         // XXX: clownshoes\n-        ident: parse::token::special_idents::clownshoes_extensions,\n+        ident: ast::token::special_idents::clownshoes_extensions,\n         attrs: ~[],\n         id: cx.next_id(),\n         node: ast::item_impl(trait_tps, opt_trait, ty, ~[f(ty)]),"}, {"sha": "dc774805ed3f648390af5da88e47ff61b4b89056", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast;\n use ast_util::dummy_sp;\n use codemap;"}, {"sha": "d63f14b57749a1d2df13677fbe1a6bafd99295ec", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast;\n use codemap;\n use codemap::span;"}, {"sha": "4f88ffeeb0468ada2d95b7b96596005f9754a539", "filename": "src/libsyntax/ext/concat_idents.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fconcat_idents.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ext::base::*;\n use ext::base;\n "}, {"sha": "3cbc8f3834fd4c9a6aa760ab636687d5015b33b8", "filename": "src/libsyntax/ext/deriving.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fext%2Fderiving.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fext%2Fderiving.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -11,8 +11,6 @@\n /// The compiler code necessary to implement the #[deriving_eq] and\n /// #[deriving_iter_bytes] extensions.\n \n-use core::prelude::*;\n-\n use ast::{Ty, and, bind_by_ref, binop, deref, enum_def, enum_variant_kind};\n use ast::{expr, expr_match, ident, item, item_, item_struct, item_enum};\n use ast::{item_impl, m_imm, meta_item, method, named_field, or, pat};"}, {"sha": "27565b44c6db2ad8b41f783c17f175abf6364a04", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast::{crate, expr_, expr_mac, mac_invoc_tt};\n use ast::{tt_delim, tt_tok, item_mac, stmt_, stmt_mac, stmt_expr, stmt_semi};\n use ast;"}, {"sha": "b8a27096f7304c739c1ac9c91eecbbefc0f59ff4", "filename": "src/libsyntax/ext/fmt.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ffmt.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -16,8 +16,6 @@\n  * compiler syntax extension plugin interface.\n  */\n \n-use core::prelude::*;\n-\n use ast;\n use codemap::span;\n use ext::base::*;"}, {"sha": "7a87d909fe6776b9f9742bb0efd08965742cb9d0", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 5, "deletions": 36, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -13,15 +13,13 @@\n // To start with, it will be use dummy spans, but it might someday do\n // something smarter.\n \n-use core::prelude::*;\n-\n use ast::{ident, node_id};\n use ast;\n use ast_util::{ident_to_path, respan, dummy_sp};\n use ast_util;\n use attr;\n use codemap::span;\n-use ext::base::{ext_ctxt, mk_ctxt};\n+use ext::base::mk_ctxt;\n use ext::quote::rt::*;\n \n use core::vec;\n@@ -114,11 +112,9 @@ trait ext_ctxt_ast_builder {\n \n impl ext_ctxt: ext_ctxt_ast_builder {\n     fn ty_option(ty: @ast::Ty) -> @ast::Ty {\n-        self.ty_path_ast_builder(path_global(~[\n-            self.ident_of(~\"core\"),\n-            self.ident_of(~\"option\"),\n-            self.ident_of(~\"Option\")\n-        ], dummy_sp()).add_ty(ty))\n+        self.ty_path_ast_builder(path(~[self.ident_of(~\"Option\")],\n+                                      dummy_sp())\n+                                 .add_ty(ty))\n     }\n \n     fn block_expr(b: ast::blk) -> @ast::expr {\n@@ -287,37 +283,10 @@ impl ext_ctxt: ext_ctxt_ast_builder {\n     fn item_mod(name: ident,\n                 span: span,\n                 +items: ~[@ast::item]) -> @ast::item {\n-        // XXX: Total hack: import `core::kinds::Owned` to work around a\n-        // parser bug whereby `fn f<T: ::kinds::Owned>` doesn't parse.\n-        let vi = ast::view_item_import(~[\n-            @{\n-                node: ast::view_path_simple(\n-                    self.ident_of(~\"Owned\"),\n-                    path(\n-                        ~[\n-                            self.ident_of(~\"core\"),\n-                            self.ident_of(~\"kinds\"),\n-                            self.ident_of(~\"Owned\")\n-                        ],\n-                        ast_util::dummy_sp()\n-                    ),\n-                    ast::type_value_ns,\n-                    self.next_id()\n-                ),\n-                span: ast_util::dummy_sp()\n-            }\n-        ]);\n-        let vi = @{\n-            node: vi,\n-            attrs: ~[],\n-            vis: ast::private,\n-            span: ast_util::dummy_sp()\n-        };\n-\n         self.item(name,\n                   span,\n                   ast::item_mod({\n-                      view_items: ~[vi],\n+                      view_items: ~[],\n                       items: items}))\n     }\n "}, {"sha": "8eecafa8fa43a60ddf56a51650ceed60fbb352c6", "filename": "src/libsyntax/ext/pipes/check.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fext%2Fpipes%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fext%2Fpipes%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fcheck.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -29,10 +29,7 @@ that.\n \n */\n \n-use core::prelude::*;\n-\n use ast;\n-use codemap::span;\n use ext::base::ext_ctxt;\n use ext::pipes::proto::{state, protocol, next_state};\n use ext::pipes::proto;"}, {"sha": "76749f6b2db839d7f0636d04a69341adb3445ebc", "filename": "src/libsyntax/ext/pipes/liveness.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -37,11 +37,6 @@ updating the states using rule (2) until there are no changes.\n \n */\n \n-use core::prelude::*;\n-\n-use ext::base::ext_ctxt;\n-use ext::pipes::protocol;\n-\n use core::str;\n use std::bitv::{Bitv};\n "}, {"sha": "67b5c81ad2d821383d5471c46efd1514f732c6a6", "filename": "src/libsyntax/ext/pipes/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fext%2Fpipes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fext%2Fpipes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fmod.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -53,8 +53,6 @@ use ext::pipes::proto::{visit, protocol};\n use parse::lexer::{new_tt_reader, reader};\n use parse::parser::Parser;\n \n-use core::option::None;\n-\n #[legacy_exports]\n mod ast_builder;\n #[legacy_exports]"}, {"sha": "0f6b9dbda284349bc3bd3de97130367f2c1103ff", "filename": "src/libsyntax/ext/pipes/parse_proto.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -10,11 +10,10 @@\n \n // Parsing pipes protocols from token trees.\n \n-use ext::pipes::pipec::*;\n use parse::parser;\n use parse::token;\n \n-use core::prelude::*;\n+use ext::pipes::pipec::*;\n \n trait proto_parser {\n     fn parse_proto(id: ~str) -> protocol;"}, {"sha": "ef9c086e3f5c42940a707e00c40a8c76ff2b297a", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -20,7 +20,6 @@ use parse::*;\n use util::interner;\n \n use core::dvec::DVec;\n-use core::prelude::*;\n use core::str;\n use core::to_str::ToStr;\n use core::vec;\n@@ -386,8 +385,7 @@ impl protocol: gen_init {\n             }\n         }\n \n-        cx.ty_path_ast_builder(path(~[cx.ident_of(~\"super\"),\n-                                      cx.ident_of(~\"__Buffer\")], self.span)\n+        cx.ty_path_ast_builder(path(~[cx.ident_of(~\"__Buffer\")], self.span)\n                                .add_tys(cx.ty_vars_global(params)))\n     }\n "}, {"sha": "a2673c481b11c8b9e79123022a1ef9cfaede1e85", "filename": "src/libsyntax/ext/pipes/proto.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,11 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast;\n-use codemap::span;\n-use ext::base::ext_ctxt;\n use ext::pipes::ast_builder::{path, append_types};\n \n use core::cmp;"}, {"sha": "184093715c69101172ac35b098b279197c41aa3c", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -18,7 +18,6 @@ use parse::token::*;\n use parse::token;\n use parse;\n \n-use core::prelude::*;\n use core::str;\n \n /**\n@@ -34,7 +33,6 @@ use core::str;\n \n pub mod rt {\n     use ast;\n-    use ext::base::ext_ctxt;\n     use parse;\n     use print::pprust;\n "}, {"sha": "47c6ea8876eb33b0dac1d57b1a300a861be91b99", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -16,7 +16,6 @@ use ext::build::{mk_base_vec_e, mk_uint, mk_u8, mk_base_str};\n use print::pprust;\n \n use core::io;\n-use core::prelude::*;\n use core::result;\n use core::str;\n use core::vec;"}, {"sha": "c202778d0df595bb633d404151f27a5b796a8681", "filename": "src/libsyntax/ext/trace_macros.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftrace_macros.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,18 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ast::tt_delim;\n use ast;\n use codemap::span;\n-use ext::base::ext_ctxt;\n use ext::base;\n+use ext::base::ext_ctxt;\n+use ast::tt_delim;\n use parse::lexer::{new_tt_reader, reader};\n use parse::parser::Parser;\n \n-use core::option::None;\n-\n fn expand_trace_macros(cx: ext_ctxt, sp: span,\n-                       tt: ~[ast::token_tree]) -> base::mac_result {\n+                       tt: ~[ast::token_tree]) -> base::mac_result\n+{\n     let sess = cx.parse_sess();\n     let cfg = cx.cfg();\n     let tt_rdr = new_tt_reader(cx.parse_sess().span_diagnostic,"}, {"sha": "7386b3b67b9f533b63b5e968694b40a008ce63df", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast::{ident, matcher_, matcher, match_tok, match_nonterminal, match_seq};\n use ast::{tt_delim};\n use ast;"}, {"sha": "c1745fac710acf62b581a628711a849eb7e0756f", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast;\n use ast::{token_tree, tt_delim, tt_tok, tt_seq, tt_nonterminal,ident};\n use ast_util;"}, {"sha": "6d32c73e1f703d53c44ba267199a5b8e4bb340de", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast::*;\n use ast;\n use codemap::span;"}, {"sha": "a3fd069afbb8ddd01e385d304efcc867660cb44c", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,11 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast;\n use ast_util::spanned;\n-use codemap::BytePos;\n use parse::common::*; //resolve bug?\n use parse::token;\n "}, {"sha": "d5365d590419811a92ab9e295c563c5a11f34889", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,10 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast;\n-use codemap::{BytePos, CharPos, CodeMap, FileMap};\n+use codemap::{CodeMap, FileMap, CharPos};\n use diagnostic;\n use parse::lexer::{is_whitespace, get_str_from, reader};\n use parse::lexer::{string_reader, bump, is_eof, nextch};"}, {"sha": "ca0bbbb7369a0a79fc6885701c9395deb737b274", "filename": "src/libsyntax/parse/common.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcommon.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,16 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast;\n use ast_util::spanned;\n-use codemap::BytePos;\n use parse::lexer::reader;\n use parse::parser::Parser;\n use parse::token;\n \n-use core::option::{None, Option, Some};\n use core::option;\n use std::map::HashMap;\n "}, {"sha": "c51f7e4dad667ccfd6dbe3ae63be5efddf3974d6", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,15 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast;\n use ast_util;\n use codemap::{span, CodeMap, CharPos, BytePos};\n use codemap;\n use diagnostic::span_handler;\n use ext::tt::transcribe::{tt_next_token};\n-use ext::tt::transcribe::{tt_reader, new_tt_reader, dup_tt_reader};\n+use ext::tt::transcribe::{tt_reader,  new_tt_reader, dup_tt_reader};\n use parse::token;\n \n use core::char;"}, {"sha": "fb5c62501791c96f3296a398b74fae959a879acd", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 60, "deletions": 46, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -10,6 +10,8 @@\n \n //! The main parser interface\n \n+#[legacy_exports];\n+\n use ast::node_id;\n use ast;\n use codemap::{span, CodeMap, FileMap, CharPos, BytePos};\n@@ -22,47 +24,70 @@ use parse::token::{ident_interner, mk_ident_interner};\n use util::interner;\n \n use core::io;\n-use core::option::{None, Option, Some};\n-use core::path::Path;\n-use core::result::{Err, Ok, Result};\n use core::result;\n \n+export parser;\n+export common;\n+export lexer;\n+export token;\n+export comments;\n+export prec;\n+export classify;\n+export attr;\n+export obsolete;\n+\n+export parse_sess;\n+export new_parse_sess, new_parse_sess_special_handler;\n+export next_node_id;\n+export new_parser_from_file, new_parser_etc_from_file;\n+export new_parser_from_source_str;\n+export new_parser_from_tts;\n+export new_sub_parser_from_file;\n+export parse_crate_from_file, parse_crate_from_crate_file;\n+export parse_crate_from_source_str;\n+export parse_expr_from_source_str, parse_item_from_source_str;\n+export parse_stmt_from_source_str;\n+export parse_tts_from_source_str;\n+export parse_from_source_str;\n+\n+\n #[legacy_exports]\n-pub mod lexer;\n+mod lexer;\n #[legacy_exports]\n-pub mod parser;\n+mod parser;\n #[legacy_exports]\n-pub mod token;\n+mod token;\n #[legacy_exports]\n-pub mod comments;\n+mod comments;\n #[legacy_exports]\n-pub mod attr;\n+mod attr;\n #[legacy_exports]\n \n /// Common routines shared by parser mods\n #[legacy_exports]\n-pub mod common;\n+mod common;\n \n /// Functions dealing with operator precedence\n #[legacy_exports]\n-pub mod prec;\n+mod prec;\n \n /// Routines the parser uses to classify AST nodes\n #[legacy_exports]\n-pub mod classify;\n+mod classify;\n \n /// Reporting obsolete syntax\n #[legacy_exports]\n-pub mod obsolete;\n+mod obsolete;\n+\n \n-pub type parse_sess = @{\n+type parse_sess = @{\n     cm: @codemap::CodeMap,\n     mut next_id: node_id,\n     span_diagnostic: span_handler,\n     interner: @ident_interner,\n };\n \n-pub fn new_parse_sess(demitter: Option<emitter>) -> parse_sess {\n+fn new_parse_sess(demitter: Option<emitter>) -> parse_sess {\n     let cm = @CodeMap::new();\n     return @{cm: cm,\n              mut next_id: 1,\n@@ -71,7 +96,7 @@ pub fn new_parse_sess(demitter: Option<emitter>) -> parse_sess {\n             };\n }\n \n-pub fn new_parse_sess_special_handler(sh: span_handler, cm: @codemap::CodeMap)\n+fn new_parse_sess_special_handler(sh: span_handler, cm: @codemap::CodeMap)\n     -> parse_sess {\n     return @{cm: cm,\n              mut next_id: 1,\n@@ -80,64 +105,53 @@ pub fn new_parse_sess_special_handler(sh: span_handler, cm: @codemap::CodeMap)\n              };\n }\n \n-pub fn parse_crate_from_file(input: &Path, cfg: ast::crate_cfg,\n+fn parse_crate_from_file(input: &Path, cfg: ast::crate_cfg,\n                          sess: parse_sess) -> @ast::crate {\n     let p = new_crate_parser_from_file(sess, cfg, input);\n     let r = p.parse_crate_mod(cfg);\n     return r;\n }\n \n-pub fn parse_crate_from_source_str(name: ~str,\n-                                   source: @~str,\n-                                   cfg: ast::crate_cfg,\n-                                   sess: parse_sess) -> @ast::crate {\n+fn parse_crate_from_source_str(name: ~str, source: @~str, cfg: ast::crate_cfg,\n+                               sess: parse_sess) -> @ast::crate {\n     let p = new_parser_from_source_str(sess, cfg, name,\n                                        codemap::FssNone, source);\n     let r = p.parse_crate_mod(cfg);\n     p.abort_if_errors();\n     return r;\n }\n \n-pub fn parse_expr_from_source_str(name: ~str,\n-                                  source: @~str,\n-                                  cfg: ast::crate_cfg,\n-                                  sess: parse_sess) -> @ast::expr {\n+fn parse_expr_from_source_str(name: ~str, source: @~str, cfg: ast::crate_cfg,\n+                              sess: parse_sess) -> @ast::expr {\n     let p = new_parser_from_source_str(sess, cfg, name,\n                                        codemap::FssNone, source);\n     let r = p.parse_expr();\n     p.abort_if_errors();\n     return r;\n }\n \n-pub fn parse_item_from_source_str(name: ~str,\n-                                  source: @~str,\n-                                  cfg: ast::crate_cfg,\n-                                  +attrs: ~[ast::attribute],\n-                                  sess: parse_sess)\n-                               -> Option<@ast::item> {\n+fn parse_item_from_source_str(name: ~str, source: @~str, cfg: ast::crate_cfg,\n+                              +attrs: ~[ast::attribute],\n+                              sess: parse_sess) -> Option<@ast::item> {\n     let p = new_parser_from_source_str(sess, cfg, name,\n                                        codemap::FssNone, source);\n     let r = p.parse_item(attrs);\n     p.abort_if_errors();\n     return r;\n }\n \n-pub fn parse_stmt_from_source_str(name: ~str,\n-                                  source: @~str,\n-                                  cfg: ast::crate_cfg,\n-                                  +attrs: ~[ast::attribute],\n-                                  sess: parse_sess) -> @ast::stmt {\n+fn parse_stmt_from_source_str(name: ~str, source: @~str, cfg: ast::crate_cfg,\n+                              +attrs: ~[ast::attribute],\n+                              sess: parse_sess) -> @ast::stmt {\n     let p = new_parser_from_source_str(sess, cfg, name,\n                                        codemap::FssNone, source);\n     let r = p.parse_stmt(attrs);\n     p.abort_if_errors();\n     return r;\n }\n \n-pub fn parse_tts_from_source_str(name: ~str,\n-                                 source: @~str,\n-                                 cfg: ast::crate_cfg,\n-                                 sess: parse_sess) -> ~[ast::token_tree] {\n+fn parse_tts_from_source_str(name: ~str, source: @~str, cfg: ast::crate_cfg,\n+                             sess: parse_sess) -> ~[ast::token_tree] {\n     let p = new_parser_from_source_str(sess, cfg, name,\n                                        codemap::FssNone, source);\n     p.quote_depth += 1u;\n@@ -146,7 +160,7 @@ pub fn parse_tts_from_source_str(name: ~str,\n     return r;\n }\n \n-pub fn parse_from_source_str<T>(f: fn (p: Parser) -> T,\n+fn parse_from_source_str<T>(f: fn (p: Parser) -> T,\n                             name: ~str, ss: codemap::FileSubstr,\n                             source: @~str, cfg: ast::crate_cfg,\n                             sess: parse_sess)\n@@ -162,15 +176,15 @@ pub fn parse_from_source_str<T>(f: fn (p: Parser) -> T,\n     move r\n }\n \n-pub fn next_node_id(sess: parse_sess) -> node_id {\n+fn next_node_id(sess: parse_sess) -> node_id {\n     let rv = sess.next_id;\n     sess.next_id += 1;\n     // ID 0 is reserved for the crate and doesn't actually exist in the AST\n     assert rv != 0;\n     return rv;\n }\n \n-pub fn new_parser_from_source_str(sess: parse_sess, cfg: ast::crate_cfg,\n+fn new_parser_from_source_str(sess: parse_sess, cfg: ast::crate_cfg,\n                               +name: ~str, +ss: codemap::FileSubstr,\n                               source: @~str) -> Parser {\n     let filemap = sess.cm.new_filemap_w_substr(name, ss, source);\n@@ -179,7 +193,7 @@ pub fn new_parser_from_source_str(sess: parse_sess, cfg: ast::crate_cfg,\n     return Parser(sess, cfg, srdr as reader);\n }\n \n-pub fn new_parser_from_file(sess: parse_sess, cfg: ast::crate_cfg,\n+fn new_parser_from_file(sess: parse_sess, cfg: ast::crate_cfg,\n                         path: &Path) -> Result<Parser, ~str> {\n     match io::read_whole_file_str(path) {\n       result::Ok(move src) => {\n@@ -197,7 +211,7 @@ pub fn new_parser_from_file(sess: parse_sess, cfg: ast::crate_cfg,\n \n /// Create a new parser for an entire crate, handling errors as appropriate\n /// if the file doesn't exist\n-pub fn new_crate_parser_from_file(sess: parse_sess, cfg: ast::crate_cfg,\n+fn new_crate_parser_from_file(sess: parse_sess, cfg: ast::crate_cfg,\n                               path: &Path) -> Parser {\n     match new_parser_from_file(sess, cfg, path) {\n         Ok(move parser) => move parser,\n@@ -209,7 +223,7 @@ pub fn new_crate_parser_from_file(sess: parse_sess, cfg: ast::crate_cfg,\n \n /// Create a new parser based on a span from an existing parser. Handles\n /// error messages correctly when the file does not exist.\n-pub fn new_sub_parser_from_file(sess: parse_sess, cfg: ast::crate_cfg,\n+fn new_sub_parser_from_file(sess: parse_sess, cfg: ast::crate_cfg,\n                             path: &Path, sp: span) -> Parser {\n     match new_parser_from_file(sess, cfg, path) {\n         Ok(move parser) => move parser,\n@@ -219,7 +233,7 @@ pub fn new_sub_parser_from_file(sess: parse_sess, cfg: ast::crate_cfg,\n     }\n }\n \n-pub fn new_parser_from_tts(sess: parse_sess, cfg: ast::crate_cfg,\n+fn new_parser_from_tts(sess: parse_sess, cfg: ast::crate_cfg,\n                        tts: ~[ast::token_tree]) -> Parser {\n     let trdr = lexer::new_tt_reader(sess.span_diagnostic, sess.interner,\n                                     None, tts);"}, {"sha": "6b73cf308a24789f81de63365a35df20518a31ac", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -17,13 +17,10 @@ Obsolete syntax that becomes too hard to parse can be\n removed.\n */\n \n-use core::prelude::*;\n-\n use ast::{expr, expr_lit, lit_nil};\n use ast;\n use ast_util::{respan};\n use codemap::span;\n-use parse::parser::Parser;\n use parse::token::Token;\n use parse::token;\n "}, {"sha": "f32a782622a1fd030ff2b762807274ef068e2bee", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast::{ProtoBox, ProtoUniq, provided, public, pure_fn, purity, re_static};\n use ast::{_mod, add, arg, arm, attribute, bind_by_ref, bind_infer};\n use ast::{bind_by_value, bind_by_move, bitand, bitor, bitxor, blk};\n@@ -35,24 +33,23 @@ use ast::{lit_bool, lit_float, lit_float_unsuffixed, lit_int};\n use ast::{lit_int_unsuffixed, lit_nil, lit_str, lit_uint, local, m_const};\n use ast::{m_imm, m_mutbl, mac_, mac_invoc_tt, matcher, match_nonterminal};\n use ast::{match_seq, match_tok, method, mode, module_ns, mt, mul, mutability};\n-use ast::{named_field, neg, node_id, noreturn, not, pat, pat_box, pat_enum};\n-use ast::{pat_ident, pat_lit, pat_range, pat_rec, pat_region, pat_struct};\n-use ast::{pat_tup, pat_uniq, pat_wild, path, private, Proto, ProtoBare};\n-use ast::{ProtoBorrowed, re_self, re_anon, re_named, region, rem, required};\n-use ast::{ret_style, return_val, self_ty, shl, shr, stmt, stmt_decl};\n-use ast::{stmt_expr, stmt_semi, stmt_mac, struct_def, struct_field};\n-use ast::{struct_immutable, struct_mutable, struct_variant_kind, subtract};\n-use ast::{sty_box, sty_by_ref, sty_region, sty_static, sty_uniq, sty_value};\n-use ast::{token_tree, trait_method, trait_ref, tt_delim, tt_seq, tt_tok};\n-use ast::{tt_nonterminal, tuple_variant_kind, Ty, ty_, ty_bot, ty_box};\n-use ast::{ty_field, ty_fixed_length_vec, ty_fn, ty_infer, ty_mac, ty_method};\n-use ast::{ty_nil, ty_param, ty_param_bound, ty_path, ty_ptr, ty_rec, ty_rptr};\n-use ast::{ty_tup, ty_u32, ty_uniq, ty_vec, type_value_ns, uniq};\n-use ast::{unnamed_field, unsafe_blk, unsafe_fn, variant, view_item};\n-use ast::{view_item_, view_item_export, view_item_import, view_item_use};\n-use ast::{view_path, view_path_glob, view_path_list, view_path_simple};\n-use ast::{visibility, vstore, vstore_box, vstore_fixed, vstore_slice};\n-use ast::{vstore_uniq};\n+use ast::{named_field, neg, noreturn, not, pat, pat_box, pat_enum, pat_ident};\n+use ast::{pat_lit, pat_range, pat_rec, pat_region, pat_struct, pat_tup};\n+use ast::{pat_uniq, pat_wild, path, private, Proto, ProtoBare, ProtoBorrowed};\n+use ast::{re_self, re_anon, re_named, region, rem, required, ret_style};\n+use ast::{return_val, self_ty, shl, shr, stmt, stmt_decl, stmt_expr};\n+use ast::{stmt_semi, stmt_mac, struct_def, struct_field, struct_immutable};\n+use ast::{struct_mutable, struct_variant_kind, subtract, sty_box, sty_by_ref};\n+use ast::{sty_region, sty_static, sty_uniq, sty_value, token_tree};\n+use ast::{trait_method, trait_ref, tt_delim, tt_seq, tt_tok, tt_nonterminal};\n+use ast::{tuple_variant_kind, Ty, ty_, ty_bot, ty_box, ty_field, ty_fn};\n+use ast::{ty_fixed_length_vec, type_value_ns, uniq, unnamed_field};\n+use ast::{ty_infer, ty_mac, ty_method, ty_nil, ty_param, ty_param_bound};\n+use ast::{ty_path, ty_ptr, ty_rec, ty_rptr, ty_tup, ty_u32, ty_uniq, ty_vec};\n+use ast::{unsafe_blk, unsafe_fn, variant, view_item, view_item_};\n+use ast::{view_item_export, view_item_import, view_item_use, view_path};\n+use ast::{view_path_glob, view_path_list, view_path_simple, visibility};\n+use ast::{vstore, vstore_box, vstore_fixed, vstore_slice, vstore_uniq};\n use ast;\n use ast_util::{spanned, respan, mk_sp, ident_to_path, operator_prec};\n use ast_util;\n@@ -72,7 +69,6 @@ use parse::prec::{as_prec, token_to_binop};\n use parse::token::{can_begin_expr, is_ident, is_ident_or_path};\n use parse::token::{is_plain_ident, INTERPOLATED, special_idents};\n use parse::token;\n-use parse::{new_sub_parser_from_file, next_node_id, parse_sess};\n use print::pprust::expr_to_str;\n use util::interner::Interner;\n "}, {"sha": "4663b875bb5d7a23cf3b73dc852014a229da9a86", "filename": "src/libsyntax/parse/prec.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fparse%2Fprec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fparse%2Fprec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fprec.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -12,11 +12,9 @@ export as_prec;\n export unop_prec;\n export token_to_binop;\n \n-use ast::*;\n use parse::token::*;\n use parse::token::Token;\n-\n-use core::prelude::*;\n+use ast::*;\n \n /// Unary operators have higher precedence than binary\n const unop_prec: uint = 100u;"}, {"sha": "f286b15c7523e2fd56c089d7ec744a28bcab0c0f", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast;\n use ast_util;\n use parse::token;"}, {"sha": "c9d2abfe0cba3d9b4ee83ce441c9d9865622e94f", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use core::cmp;\n use core::dvec::DVec;\n use core::io::WriterUtil;"}, {"sha": "239cff22cc0c26b13f9f67712fb91430ed2615f6", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast::{required, provided};\n use ast;\n use ast_util;\n@@ -18,9 +16,9 @@ use attr;\n use codemap::{CodeMap, BytePos};\n use codemap;\n use diagnostic;\n-use parse::classify::{expr_is_simple_block, expr_requires_semi_to_be_stmt};\n-use parse::classify::{stmt_ends_with_semi};\n+use parse::classify::*;\n use parse::token::ident_interner;\n+use parse::token;\n use parse::{comments, lexer, token};\n use parse;\n use print::pp::{break_offset, word, printer, space, zerobreak, hardbreak};"}, {"sha": "cfa3a4224c50a5438c7960f25c9bb2cf2b7a2ac7", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -11,12 +11,12 @@\n // An \"interner\" is a data structure that associates values with uint tags and\n // allows bidirectional lookup; i.e. given a value, one can easily find the\n // type, and vice versa.\n-\n-use core::prelude::*;\n-\n-use core::dvec::DVec;\n-use std::map::HashMap;\n use std::map;\n+use std::map::HashMap;\n+use dvec::DVec;\n+use cmp::Eq;\n+use hash::Hash;\n+use to_bytes::IterBytes;\n \n type hash_interner<T: Const> =\n     {map: HashMap<T, uint>,"}, {"sha": "b7d894a7e9f823835ea7079acce9adbd39ab5060", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast::*;\n use ast;\n use ast_util;"}, {"sha": "e24979a4e060be78dc009e4b9a445f8e7255a4dd", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 21, "deletions": 31, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -45,9 +45,9 @@ trait word_reader {\n     fn read_word() -> Option<~str>;\n }\n \n-// These used to be in task, but they disappeared.\n-pub type joinable_task = Port<()>;\n-pub fn spawn_joinable(+f: fn~()) -> joinable_task {\n+// These used to be in task, but they disappeard.\n+type joinable_task = Port<()>;\n+fn spawn_joinable(+f: fn~()) -> joinable_task {\n     let p = Port();\n     let c = Chan(&p);\n     do task::spawn() |move f| {\n@@ -57,7 +57,7 @@ pub fn spawn_joinable(+f: fn~()) -> joinable_task {\n     p\n }\n \n-pub fn join(t: joinable_task) {\n+fn join(t: joinable_task) {\n     t.recv()\n }\n \n@@ -90,11 +90,11 @@ fn reduce(word: &~str, get: map_reduce::getter<int>) {\n     io::println(fmt!(\"%s\\t%?\", *word, count));\n }\n \n-pub struct box<T> {\n+struct box<T> {\n     mut contents: Option<T>,\n }\n \n-pub impl<T> box<T> {\n+impl<T> box<T> {\n     fn swap(f: fn(+v: T) -> T) {\n         let mut tmp = None;\n         self.contents <-> tmp;\n@@ -108,16 +108,13 @@ pub impl<T> box<T> {\n     }\n }\n \n-pub fn box<T>(+x: T) -> box<T> {\n+fn box<T>(+x: T) -> box<T> {\n     box {\n         contents: Some(move x)\n     }\n }\n \n mod map_reduce {\n-    use core::oldcomm::*;\n-\n-    use std::map::HashMap;\n     use std::map;\n \n     pub type putter<K: Owned, V: Owned> = fn(&K, V);\n@@ -129,7 +126,7 @@ mod map_reduce {\n     pub type reducer<K: Copy Owned, V: Copy Owned> = fn~(&K, getter<V>);\n \n     enum ctrl_proto<K: Copy Owned, V: Copy Owned> {\n-        find_reducer(K, Chan<Chan<::map_reduce::reduce_proto<V>>>),\n+        find_reducer(K, Chan<Chan<reduce_proto<V>>>),\n         mapper_done\n     }\n \n@@ -141,49 +138,43 @@ mod map_reduce {\n         }\n \n         reducer_response: recv<K: Copy Owned, V: Copy Owned> {\n-            reducer(::core::oldcomm::Chan<::map_reduce::reduce_proto<V>>)\n-                -> open<K, V>\n+            reducer(Chan<reduce_proto<V>>) -> open<K, V>\n         }\n     )\n \n-    pub enum reduce_proto<V: Copy Owned> {\n-        emit_val(V),\n-        done,\n-        addref,\n-        release\n-    }\n+    enum reduce_proto<V: Copy Owned> { emit_val(V), done, addref, release }\n \n     fn start_mappers<K1: Copy Owned, K2: Hash IterBytes Eq Const Copy Owned,\n                      V: Copy Owned>(\n         map: &mapper<K1, K2, V>,\n         ctrls: &mut ~[ctrl_proto::server::open<K2, V>],\n         inputs: &~[K1])\n-        -> ~[::joinable_task]\n+        -> ~[joinable_task]\n     {\n         let mut tasks = ~[];\n         for inputs.each |i| {\n             let (ctrl, ctrl_server) = ctrl_proto::init();\n-            let ctrl = ::box(move ctrl);\n+            let ctrl = box(move ctrl);\n             let i = copy *i;\n             let m = copy *map;\n-            tasks.push(::spawn_joinable(|move ctrl, move i| map_task(copy m, &ctrl, i)));\n+            tasks.push(spawn_joinable(|move ctrl, move i| map_task(copy m, &ctrl, i)));\n             ctrls.push(move ctrl_server);\n         }\n         move tasks\n     }\n \n     fn map_task<K1: Copy Owned, K2: Hash IterBytes Eq Const Copy Owned, V: Copy Owned>(\n         map: mapper<K1, K2, V>,\n-        ctrl: &::box<ctrl_proto::client::open<K2, V>>,\n+        ctrl: &box<ctrl_proto::client::open<K2, V>>,\n         input: K1)\n     {\n         // log(error, \"map_task \" + input);\n-        let intermediates: HashMap<K2, Chan<::map_reduce::reduce_proto<V>>>\n+        let intermediates: HashMap<K2, Chan<reduce_proto<V>>>\n             = map::HashMap();\n \n         do map(input) |key: &K2, val| {\n             let mut c = None;\n-            let found: Option<Chan<::map_reduce::reduce_proto<V>>>\n+            let found: Option<Chan<reduce_proto<V>>>\n                 = intermediates.find(*key);\n             match found {\n               Some(_c) => { c = Some(_c); }\n@@ -204,8 +195,7 @@ mod map_reduce {\n             send(c.get(), emit_val(val));\n         }\n \n-        fn finish<K: Copy Owned, V: Copy Owned>(\n-            _k: K, v: Chan<::map_reduce::reduce_proto<V>>)\n+        fn finish<K: Copy Owned, V: Copy Owned>(_k: K, v: Chan<reduce_proto<V>>)\n         {\n             send(v, release);\n         }\n@@ -216,7 +206,7 @@ mod map_reduce {\n     fn reduce_task<K: Copy Owned, V: Copy Owned>(\n         reduce: ~reducer<K, V>, \n         key: K,\n-        out: Chan<Chan<::map_reduce::reduce_proto<V>>>)\n+        out: Chan<Chan<reduce_proto<V>>>)\n     {\n         let p = Port();\n \n@@ -225,7 +215,7 @@ mod map_reduce {\n         let mut ref_count = 0;\n         let mut is_done = false;\n \n-        fn get<V: Copy Owned>(p: Port<::map_reduce::reduce_proto<V>>,\n+        fn get<V: Copy Owned>(p: Port<reduce_proto<V>>,\n                              ref_count: &mut int, is_done: &mut bool)\n            -> Option<V> {\n             while !*is_done || *ref_count > 0 {\n@@ -284,7 +274,7 @@ mod map_reduce {\n                     let p = Port();\n                     let ch = Chan(&p);\n                     let r = copy reduce, kk = k;\n-                    tasks.push(::spawn_joinable(|move r|\n+                    tasks.push(spawn_joinable(|move r|\n                         reduce_task(~copy r, kk, ch)\n                     ));\n                     c = recv(p);\n@@ -300,7 +290,7 @@ mod map_reduce {\n \n         for reducers.each_value |v| { send(v, done) }\n \n-        for tasks.each |t| { ::join(*t); }\n+        for tasks.each |t| { join(*t); }\n     }\n }\n "}, {"sha": "bb96db8c41cc44c8994f157f5469040114bcf207", "filename": "src/test/compile-fail/copy-into-closure.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Ftest%2Fcompile-fail%2Fcopy-into-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Ftest%2Fcompile-fail%2Fcopy-into-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcopy-into-closure.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,17 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn closure2(+x: core::util::NonCopyable)\n-        -> (core::util::NonCopyable, fn@() -> core::util::NonCopyable) {\n-    let f = fn@(copy x) -> core::util::NonCopyable {\n+fn closure2(+x: util::NonCopyable) -> (util::NonCopyable,\n+                                       fn@() -> util::NonCopyable) {\n+    let f = fn@(copy x) -> util::NonCopyable {\n         //~^ ERROR copying a noncopyable value\n         //~^^ NOTE non-copyable value cannot be copied into a @fn closure\n         copy x\n         //~^ ERROR copying a noncopyable value\n     };\n     (move x,f)\n }\n-fn closure3(+x: core::util::NonCopyable) {\n+fn closure3(+x: util::NonCopyable) {\n     do task::spawn |copy x| {\n         //~^ ERROR copying a noncopyable value\n         //~^^ NOTE non-copyable value cannot be copied into a ~fn closure"}, {"sha": "8acabc6bdc17fd86e9e0b5406c9f1d824119c5dd", "filename": "src/test/compile-fail/issue-2718-a.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Ftest%2Fcompile-fail%2Fissue-2718-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Ftest%2Fcompile-fail%2Fissue-2718-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2718-a.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub struct send_packet<T: Copy> {\n+struct send_packet<T: Copy> {\n   p: T\n }\n \n \n mod pingpong {\n-    use send_packet;\n-    pub type ping = send_packet<pong>;\n-    pub enum pong = send_packet<ping>; //~ ERROR illegal recursive enum type; wrap the inner value in a box to make it representable\n+    #[legacy_exports];\n+    type ping = send_packet<pong>;\n+    enum pong = send_packet<ping>; //~ ERROR illegal recursive enum type; wrap the inner value in a box to make it representable\n }\n \n fn main() {}"}, {"sha": "464acfba9344dd473d540869b426b5ceaeb178ca", "filename": "src/test/run-pass/export-non-interference2.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Ftest%2Frun-pass%2Fexport-non-interference2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Ftest%2Frun-pass%2Fexport-non-interference2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-non-interference2.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -9,11 +9,16 @@\n // except according to those terms.\n \n mod foo {\n+    #[legacy_exports];\n+\n+    export bar;\n+\n     mod bar {\n-        pub fn y() { ::foo::x(); }\n+        #[legacy_exports];\n+        fn y() { x(); }\n     }\n \n-    pub fn x() { debug!(\"x\"); }\n+    fn x() { debug!(\"x\"); }\n }\n \n fn main() { foo::bar::y(); }"}, {"sha": "577ac67dd6a69e4f6d82822d2f25070c564e619f", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -20,20 +20,16 @@ extern mod std;\n \n use std::map;\n use std::map::HashMap;\n-use core::oldcomm::Chan;\n-use core::oldcomm::Port;\n-use core::oldcomm::send;\n-use core::oldcomm::recv;\n+use oldcomm::Chan;\n+use oldcomm::Port;\n+use oldcomm::send;\n+use oldcomm::recv;\n \n-pub fn map(filename: ~str, emit: map_reduce::putter) { emit(filename, ~\"1\"); }\n+fn map(filename: ~str, emit: map_reduce::putter) { emit(filename, ~\"1\"); }\n \n mod map_reduce {\n     use std::map;\n     use std::map::HashMap;\n-    use core::oldcomm::Chan;\n-    use core::oldcomm::Port;\n-    use core::oldcomm::send;\n-    use core::oldcomm::recv;\n \n     pub type putter = fn@(~str, ~str);\n \n@@ -68,7 +64,7 @@ mod map_reduce {\n             }\n         }\n \n-        ::map(input, |a,b| emit(intermediates, ctrl, a, b) );\n+        map(input, |a,b| emit(intermediates, ctrl, a, b) );\n         send(ctrl, mapper_done);\n     }\n "}, {"sha": "dc7d5b99d77d9a3d42d5eff0f57dd4aca9b08a47", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -250,7 +250,7 @@ pub mod pingpong {\n         pub fn do_ping(-c: ping) -> pong {\n             let (sp, rp) = ::pipes::entangle();\n \n-            ::pipes::send(move c, pingpong::ping(move sp));\n+            ::pipes::send(move c, ping(move sp));\n             move rp\n         }\n \n@@ -259,7 +259,7 @@ pub mod pingpong {\n             if packet.is_none() {\n                 fail ~\"sender closed the connection\"\n             }\n-            (pingpong::liberate_pong(option::unwrap(move packet)), ())\n+            (liberate_pong(option::unwrap(move packet)), ())\n         }\n     }\n \n@@ -274,12 +274,12 @@ pub mod pingpong {\n             if packet.is_none() {\n                 fail ~\"sender closed the connection\"\n             }\n-            (pingpong::liberate_ping(option::unwrap(move packet)), ())\n+            (liberate_ping(option::unwrap(move packet)), ())\n         }\n \n         pub fn do_pong(-c: pong) -> ping {\n             let (sp, rp) = ::pipes::entangle();\n-            ::pipes::send(move c, pingpong::pong(move sp));\n+            ::pipes::send(move c, pong(move sp));\n             move rp\n         }\n     }"}, {"sha": "487db85ad66bd6331bceaf8fe99bcf6caaf6937d", "filename": "src/test/run-pass/pipe-bank-proto.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -17,14 +17,14 @@\n \n use pipes::try_recv;\n \n-pub type username = ~str;\n-pub type password = ~str;\n-pub type money = float;\n-pub type amount = float;\n+type username = ~str;\n+type password = ~str;\n+type money = float;\n+type amount = float;\n \n proto! bank (\n     login:send {\n-        login(::username, ::password) -> login_response\n+        login(username, password) -> login_response\n     }\n \n     login_response:recv {\n@@ -33,12 +33,12 @@ proto! bank (\n     }\n \n     connected:send {\n-        deposit(::money) -> connected,\n-        withdrawal(::amount) -> withdrawal_response\n+        deposit(money) -> connected,\n+        withdrawal(amount) -> withdrawal_response\n     }\n \n     withdrawal_response:recv {\n-        money(::money) -> connected,\n+        money(money) -> connected,\n         insufficient_funds -> connected\n     }\n )"}, {"sha": "803f7f06b512ccf6ec2448d78aa6e08813d06497", "filename": "src/test/run-pass/pipe-pingpong-bounded.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -43,7 +43,6 @@ mod pingpong {\n     pub enum ping = server::pong;\n     pub enum pong = client::ping;\n     pub mod client {\n-        use core::pipes::*;\n         use core::ptr;\n \n         pub fn ping(+pipe: ping) -> pong {\n@@ -62,7 +61,6 @@ mod pingpong {\n                                                   ::pingpong::packets>;\n     }\n     pub mod server {\n-        use core::pipes::*;\n         use core::ptr;\n \n         pub type ping = pipes::RecvPacketBuffered<::pingpong::ping,"}, {"sha": "173325834c068d1f5ff72e228f156eda9f29ea1e", "filename": "src/test/run-pass/pipe-presentation-examples.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -75,12 +75,12 @@ macro_rules! select (\n )\n \n // Types and protocols\n-pub struct Buffer {\n+struct Buffer {\n     foo: (),\n \n }\n \n-pub impl Buffer : Drop {\n+impl Buffer : Drop {\n     fn finalize(&self) {}\n }\n \n@@ -90,11 +90,11 @@ proto! double_buffer (\n     }\n \n     wait_buffer:recv {\n-        give_buffer(::Buffer) -> release\n+        give_buffer(Buffer) -> release\n     }\n \n     release:send {\n-        release(::Buffer) -> acquire\n+        release(Buffer) -> acquire\n     }\n )\n "}, {"sha": "cdc23aef9448290e155aee8d24b9e79fc92bd4a7", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -11,7 +11,6 @@\n // xfail-fast\n #[legacy_modes];\n \n-use core::bool;\n use intrinsic::{TyDesc, get_tydesc, visit_tydesc, TyVisitor};\n use libc::c_void;\n use vec::UnboxedVecRepr;"}, {"sha": "2003a12ea0caff7620365c041f104619c92a6f88", "filename": "src/test/run-pass/static-impl.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-impl.rs?ref=44ab00ee37c4ffb8440ff20fd8a15cd24a6f3e46", "patch": "@@ -11,18 +11,20 @@\n // xfail-fast\n #[legacy_modes];\n \n-pub trait plus {\n+use a::*;\n+\n+trait plus {\n     fn plus() -> int;\n }\n \n mod a {\n-    use plus;\n-    pub impl uint: plus { fn plus() -> int { self as int + 20 } }\n+    #[legacy_exports];\n+    impl uint: plus { fn plus() -> int { self as int + 20 } }\n }\n \n mod b {\n-    use plus;\n-    pub impl ~str: plus { fn plus() -> int { 200 } }\n+    #[legacy_exports];\n+    impl ~str: plus { fn plus() -> int { 200 } }\n }\n \n trait uint_utils {"}]}