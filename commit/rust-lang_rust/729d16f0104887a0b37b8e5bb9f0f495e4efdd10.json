{"sha": "729d16f0104887a0b37b8e5bb9f0f495e4efdd10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyOWQxNmYwMTA0ODg3YTBiMzdiOGU1YmI5ZjBmNDk1ZTRlZmRkMTA=", "commit": {"author": {"name": "Markus Westerlind", "email": "markus.westerlind@distilnetworks.com", "date": "2020-02-26T09:43:24Z"}, "committer": {"name": "Markus Westerlind", "email": "markus.westerlind@distilnetworks.com", "date": "2020-05-05T09:25:12Z"}, "message": "Prevent modifications without an undo log", "tree": {"sha": "bd6c8da061ee2934a6ae9ceb17ba23597aa4bce0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd6c8da061ee2934a6ae9ceb17ba23597aa4bce0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/729d16f0104887a0b37b8e5bb9f0f495e4efdd10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/729d16f0104887a0b37b8e5bb9f0f495e4efdd10", "html_url": "https://github.com/rust-lang/rust/commit/729d16f0104887a0b37b8e5bb9f0f495e4efdd10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/729d16f0104887a0b37b8e5bb9f0f495e4efdd10/comments", "author": null, "committer": null, "parents": [{"sha": "6e06535468932c2dd9e5731d40fe94fe913bf2e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e06535468932c2dd9e5731d40fe94fe913bf2e4", "html_url": "https://github.com/rust-lang/rust/commit/6e06535468932c2dd9e5731d40fe94fe913bf2e4"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "93b6a0220bf0688bd09609ca3a380ca4c5138eeb", "filename": "src/librustc_infer/infer/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/729d16f0104887a0b37b8e5bb9f0f495e4efdd10/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729d16f0104887a0b37b8e5bb9f0f495e4efdd10/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fmod.rs?ref=729d16f0104887a0b37b8e5bb9f0f495e4efdd10", "patch": "@@ -155,13 +155,13 @@ pub struct InferCtxtInner<'tcx> {\n     type_variables: type_variable::TypeVariableStorage<'tcx>,\n \n     /// Map from const parameter variable to the kind of const it represents.\n-    const_unification_table: ut::UnificationStorage<ty::ConstVid<'tcx>>,\n+    const_unification_table: ut::UnificationTableStorage<ty::ConstVid<'tcx>>,\n \n     /// Map from integral variable to the kind of integer it represents.\n-    int_unification_table: ut::UnificationStorage<ty::IntVid>,\n+    int_unification_table: ut::UnificationTableStorage<ty::IntVid>,\n \n     /// Map from floating variable to the kind of float it represents.\n-    float_unification_table: ut::UnificationStorage<ty::FloatVid>,\n+    float_unification_table: ut::UnificationTableStorage<ty::FloatVid>,\n \n     /// Tracks the set of region variables and the constraints between them.\n     /// This is initially `Some(_)` but when\n@@ -212,9 +212,9 @@ impl<'tcx> InferCtxtInner<'tcx> {\n             projection_cache: Default::default(),\n             type_variables: type_variable::TypeVariableStorage::new(),\n             undo_log: InferCtxtUndoLogs::default(),\n-            const_unification_table: ut::UnificationStorage::new(),\n-            int_unification_table: ut::UnificationStorage::new(),\n-            float_unification_table: ut::UnificationStorage::new(),\n+            const_unification_table: ut::UnificationTableStorage::new(),\n+            int_unification_table: ut::UnificationTableStorage::new(),\n+            float_unification_table: ut::UnificationTableStorage::new(),\n             region_constraints: Some(RegionConstraintStorage::new()),\n             region_obligations: vec![],\n         }"}, {"sha": "74d31e744fc182a4b13ec0671e522933d6e7eecc", "filename": "src/librustc_infer/infer/region_constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/729d16f0104887a0b37b8e5bb9f0f495e4efdd10/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729d16f0104887a0b37b8e5bb9f0f495e4efdd10/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs?ref=729d16f0104887a0b37b8e5bb9f0f495e4efdd10", "patch": "@@ -54,7 +54,7 @@ pub struct RegionConstraintStorage<'tcx> {\n     /// is iterating to a fixed point, because otherwise we sometimes\n     /// would wind up with a fresh stream of region variables that\n     /// have been equated but appear distinct.\n-    pub(super) unification_table: ut::UnificationStorage<ty::RegionVid>,\n+    pub(super) unification_table: ut::UnificationTableStorage<ty::RegionVid>,\n \n     /// a flag set to true when we perform any unifications; this is used\n     /// to micro-optimize `take_and_reset_data`"}, {"sha": "78803eea3bc6845da61e506a05b50648a15f81ac", "filename": "src/librustc_infer/infer/type_variable.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/729d16f0104887a0b37b8e5bb9f0f495e4efdd10/src%2Flibrustc_infer%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729d16f0104887a0b37b8e5bb9f0f495e4efdd10/src%2Flibrustc_infer%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ftype_variable.rs?ref=729d16f0104887a0b37b8e5bb9f0f495e4efdd10", "patch": "@@ -54,12 +54,12 @@ impl<'tcx> Rollback<UndoLog<'tcx>> for TypeVariableStorage<'tcx> {\n }\n \n pub struct TypeVariableStorage<'tcx> {\n-    values: Vec<TypeVariableData>,\n+    values: sv::SnapshotVecStorage<Delegate>,\n \n     /// Two variables are unified in `eq_relations` when we have a\n     /// constraint `?X == ?Y`. This table also stores, for each key,\n     /// the known value.\n-    eq_relations: ut::UnificationStorage<TyVidEqKey<'tcx>>,\n+    eq_relations: ut::UnificationTableStorage<TyVidEqKey<'tcx>>,\n \n     /// Two variables are unified in `sub_relations` when we have a\n     /// constraint `?X <: ?Y` *or* a constraint `?Y <: ?X`. This second\n@@ -78,15 +78,15 @@ pub struct TypeVariableStorage<'tcx> {\n     /// This is reasonable because, in Rust, subtypes have the same\n     /// \"skeleton\" and hence there is no possible type such that\n     /// (e.g.)  `Box<?3> <: ?3` for any `?3`.\n-    sub_relations: ut::UnificationStorage<ty::TyVid>,\n+    sub_relations: ut::UnificationTableStorage<ty::TyVid>,\n }\n \n pub struct TypeVariableTable<'tcx, 'a> {\n-    values: &'a mut Vec<TypeVariableData>,\n+    values: &'a mut sv::SnapshotVecStorage<Delegate>,\n \n-    eq_relations: &'a mut ut::UnificationStorage<TyVidEqKey<'tcx>>,\n+    eq_relations: &'a mut ut::UnificationTableStorage<TyVidEqKey<'tcx>>,\n \n-    sub_relations: &'a mut ut::UnificationStorage<ty::TyVid>,\n+    sub_relations: &'a mut ut::UnificationTableStorage<ty::TyVid>,\n \n     undo_log: &'a mut InferCtxtUndoLogs<'tcx>,\n }\n@@ -159,9 +159,9 @@ pub(crate) struct Delegate;\n impl<'tcx> TypeVariableStorage<'tcx> {\n     pub fn new() -> TypeVariableStorage<'tcx> {\n         TypeVariableStorage {\n-            values: Vec::new(),\n-            eq_relations: ut::UnificationStorage::new(),\n-            sub_relations: ut::UnificationStorage::new(),\n+            values: sv::SnapshotVecStorage::new(),\n+            eq_relations: ut::UnificationTableStorage::new(),\n+            sub_relations: ut::UnificationTableStorage::new(),\n         }\n     }\n \n@@ -180,15 +180,15 @@ impl<'tcx> TypeVariableTable<'tcx, '_> {\n     /// Note that this function does not return care whether\n     /// `vid` has been unified with something else or not.\n     pub fn var_diverges(&self, vid: ty::TyVid) -> bool {\n-        self.values.get(vid.index as usize).unwrap().diverging\n+        self.values.get(vid.index as usize).diverging\n     }\n \n     /// Returns the origin that was given when `vid` was created.\n     ///\n     /// Note that this function does not return care whether\n     /// `vid` has been unified with something else or not.\n     pub fn var_origin(&self, vid: ty::TyVid) -> &TypeVariableOrigin {\n-        &self.values.get(vid.index as usize).unwrap().origin\n+        &self.values.get(vid.index as usize).origin\n     }\n \n     /// Records that `a == b`, depending on `dir`.\n@@ -330,15 +330,15 @@ impl<'tcx> TypeVariableTable<'tcx, '_> {\n     fn values(\n         &mut self,\n     ) -> sv::SnapshotVec<Delegate, &mut Vec<TypeVariableData>, &mut InferCtxtUndoLogs<'tcx>> {\n-        sv::SnapshotVec::with_log(self.values, self.undo_log)\n+        self.values.with_log(self.undo_log)\n     }\n \n     fn eq_relations(&mut self) -> super::UnificationTable<'_, 'tcx, TyVidEqKey<'tcx>> {\n-        ut::UnificationTable::with_log(self.eq_relations, self.undo_log)\n+        self.eq_relations.with_log(self.undo_log)\n     }\n \n     fn sub_relations(&mut self) -> super::UnificationTable<'_, 'tcx, ty::TyVid> {\n-        ut::UnificationTable::with_log(self.sub_relations, self.undo_log)\n+        self.sub_relations.with_log(self.undo_log)\n     }\n \n     /// Returns a range of the type variables created during the snapshot.\n@@ -351,7 +351,7 @@ impl<'tcx> TypeVariableTable<'tcx, '_> {\n         (\n             range.start..range.end,\n             (range.start.index..range.end.index)\n-                .map(|index| self.values.get(index as usize).unwrap().origin)\n+                .map(|index| self.values.get(index as usize).origin)\n                 .collect(),\n         )\n     }"}, {"sha": "a63f1b030bb7e52b49d24ae01783b2dff59f6761", "filename": "src/librustc_infer/infer/undo_log.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/729d16f0104887a0b37b8e5bb9f0f495e4efdd10/src%2Flibrustc_infer%2Finfer%2Fundo_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729d16f0104887a0b37b8e5bb9f0f495e4efdd10/src%2Flibrustc_infer%2Finfer%2Fundo_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fundo_log.rs?ref=729d16f0104887a0b37b8e5bb9f0f495e4efdd10", "patch": "@@ -98,9 +98,9 @@ impl<'tcx> From<traits::UndoLog<'tcx>> for UndoLog<'tcx> {\n \n pub(super) struct RollbackView<'tcx, 'a> {\n     pub(super) type_variables: &'a mut type_variable::TypeVariableStorage<'tcx>,\n-    pub(super) const_unification_table: &'a mut ut::UnificationStorage<ty::ConstVid<'tcx>>,\n-    pub(super) int_unification_table: &'a mut ut::UnificationStorage<ty::IntVid>,\n-    pub(super) float_unification_table: &'a mut ut::UnificationStorage<ty::FloatVid>,\n+    pub(super) const_unification_table: &'a mut ut::UnificationTableStorage<ty::ConstVid<'tcx>>,\n+    pub(super) int_unification_table: &'a mut ut::UnificationTableStorage<ty::IntVid>,\n+    pub(super) float_unification_table: &'a mut ut::UnificationTableStorage<ty::FloatVid>,\n     pub(super) region_constraints: &'a mut RegionConstraintStorage<'tcx>,\n     pub(super) projection_cache: &'a mut traits::ProjectionCacheStorage<'tcx>,\n     pub(super) region_obligations: &'a mut Vec<(hir::HirId, RegionObligation<'tcx>)>,"}]}