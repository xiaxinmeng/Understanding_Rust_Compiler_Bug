{"sha": "1739041f0372b336ca727585fb7c2ecda07e889c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3MzkwNDFmMDM3MmIzMzZjYTcyNzU4NWZiN2MyZWNkYTA3ZTg4OWM=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-09-18T23:05:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-18T23:05:27Z"}, "message": "Merge pull request #3002 from lqd/normalize-doc-attributes\n\nnormalize_doc_attributes option: convert doc attributes to comments", "tree": {"sha": "395f0e045b691dbbc727d3c97a64aa0b482ddb6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/395f0e045b691dbbc727d3c97a64aa0b482ddb6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1739041f0372b336ca727585fb7c2ecda07e889c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJboYS3CRBK7hj4Ov3rIwAAdHIIADzyJp2q7J6MPc+BUw6F9ust\n6cLo0L/voEqNMMR2OwGilYjXQDawmfJCNBljQfPekhLuL23+vKEZC70Ji+0BqdBK\nUMkG/z8tOw52zr7iHrcjWzkQB2Ar3c0WMUEBDWv1sBK468T70htc91p/TMi6DyJU\nt2UUZkK9sxc2vakF/sFYgyoRaoRqlsM7OeQLBzyBeqHka7dYb7+hSFJmYPwp2jyv\nS8MhsKR5gJfYzMCkslfE7EJtboA820MXRSZ1c26o40+XCU+fv/c6XgLpdhGKTRl6\nRFaASm/2g81xAAH6aTgzmi/kJdFMoZyliZ1ZH4zD+G35yiXv7dGPM1YUNSkeSXM=\n=4DGD\n-----END PGP SIGNATURE-----\n", "payload": "tree 395f0e045b691dbbc727d3c97a64aa0b482ddb6b\nparent 2267c2cddcdd70b7bf55d70d4771355637c2077f\nparent 0c73b9414bdfdc1f8d4d910bf2276e5ea9d2e9de\nauthor Nick Cameron <nrc@ncameron.org> 1537311927 +1200\ncommitter GitHub <noreply@github.com> 1537311927 +1200\n\nMerge pull request #3002 from lqd/normalize-doc-attributes\n\nnormalize_doc_attributes option: convert doc attributes to comments"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1739041f0372b336ca727585fb7c2ecda07e889c", "html_url": "https://github.com/rust-lang/rust/commit/1739041f0372b336ca727585fb7c2ecda07e889c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1739041f0372b336ca727585fb7c2ecda07e889c/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2267c2cddcdd70b7bf55d70d4771355637c2077f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2267c2cddcdd70b7bf55d70d4771355637c2077f", "html_url": "https://github.com/rust-lang/rust/commit/2267c2cddcdd70b7bf55d70d4771355637c2077f"}, {"sha": "0c73b9414bdfdc1f8d4d910bf2276e5ea9d2e9de", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c73b9414bdfdc1f8d4d910bf2276e5ea9d2e9de", "html_url": "https://github.com/rust-lang/rust/commit/0c73b9414bdfdc1f8d4d910bf2276e5ea9d2e9de"}], "stats": {"total": 262, "additions": 254, "deletions": 8}, "files": [{"sha": "8861d7b2a136dcf2f61ab5243dd9e702b75f40eb", "filename": "Configurations.md", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1739041f0372b336ca727585fb7c2ecda07e889c/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/1739041f0372b336ca727585fb7c2ecda07e889c/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=1739041f0372b336ca727585fb7c2ecda07e889c", "patch": "@@ -2188,6 +2188,32 @@ If you want to format code that requires edition 2018, add the following to your\n edition = \"2018\"\n ```\n \n+## `normalize_doc_attributes`\n+\n+Convert `#![doc]` and `#[doc]` attributes to `//!` and `///` doc comments.\n+\n+- **Default value**: `false`\n+- **Possible values**: `true`, `false`\n+- **Stable**: No\n+\n+#### `false` (default):\n+\n+```rust\n+#![doc = \"Example documentation\"]\n+\n+#[doc = \"Example item documentation\"]\n+pub enum Foo {}\n+```\n+\n+#### `true`:\n+\n+```rust\n+//! Example documentation\n+\n+/// Example item documentation\n+pub enum Foo {}\n+```\n+\n ## `emit_mode`\n \n Internal option"}, {"sha": "f8f6cd1c376043339729e27334c4279b50e6ca68", "filename": "src/attr.rs", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1739041f0372b336ca727585fb7c2ecda07e889c/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1739041f0372b336ca727585fb7c2ecda07e889c/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=1739041f0372b336ca727585fb7c2ecda07e889c", "patch": "@@ -10,7 +10,7 @@\n \n //! Format attributes and meta items.\n \n-use comment::{contains_comment, rewrite_doc_comment};\n+use comment::{contains_comment, rewrite_doc_comment, CommentStyle};\n use config::lists::*;\n use config::IndentStyle;\n use expr::rewrite_literal;\n@@ -350,13 +350,34 @@ impl Rewrite for ast::Attribute {\n             if contains_comment(snippet) {\n                 return Some(snippet.to_owned());\n             }\n-            // 1 = `[`\n-            let shape = shape.offset_left(prefix.len() + 1)?;\n-            Some(\n-                self.meta()\n-                    .and_then(|meta| meta.rewrite(context, shape))\n-                    .map_or_else(|| snippet.to_owned(), |rw| format!(\"{}[{}]\", prefix, rw)),\n-            )\n+\n+            if let Some(ref meta) = self.meta() {\n+                // This attribute is possibly a doc attribute needing normalization to a doc comment\n+                if context.config.normalize_doc_attributes() && meta.check_name(\"doc\") {\n+                    if let Some(ref literal) = meta.value_str() {\n+                        let comment_style = match self.style {\n+                            ast::AttrStyle::Inner => CommentStyle::Doc,\n+                            ast::AttrStyle::Outer => CommentStyle::TripleSlash,\n+                        };\n+\n+                        let doc_comment = format!(\"{}{}\", comment_style.opener(), literal);\n+                        return rewrite_doc_comment(\n+                            &doc_comment,\n+                            shape.comment(context.config),\n+                            context.config,\n+                        );\n+                    }\n+                }\n+\n+                // 1 = `[`\n+                let shape = shape.offset_left(prefix.len() + 1)?;\n+                Some(\n+                    meta.rewrite(context, shape)\n+                        .map_or_else(|| snippet.to_owned(), |rw| format!(\"{}[{}]\", prefix, rw)),\n+                )\n+            } else {\n+                Some(snippet.to_owned())\n+            }\n         }\n     }\n }"}, {"sha": "52401a18d92ea51a2c1fe3eb25f2b7833881fac6", "filename": "src/config/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1739041f0372b336ca727585fb7c2ecda07e889c/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1739041f0372b336ca727585fb7c2ecda07e889c/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=1739041f0372b336ca727585fb7c2ecda07e889c", "patch": "@@ -49,6 +49,7 @@ create_config! {\n     comment_width: usize, 80, false,\n         \"Maximum length of comments. No effect unless wrap_comments = true\";\n     normalize_comments: bool, false, false, \"Convert /* */ comments to // comments where possible\";\n+    normalize_doc_attributes: bool, false, false, \"Normalize doc attributes as doc comments\";\n     license_template_path: String, String::default(), false,\n         \"Beginning of file must match license template\";\n     format_strings: bool, false, false, \"Format string literals where necessary\";"}, {"sha": "d607b7e6f2f36bdfb3489d6ca8cf9ac3a1bce916", "filename": "tests/source/attrib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1739041f0372b336ca727585fb7c2ecda07e889c/tests%2Fsource%2Fattrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1739041f0372b336ca727585fb7c2ecda07e889c/tests%2Fsource%2Fattrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fattrib.rs?ref=1739041f0372b336ca727585fb7c2ecda07e889c", "patch": "@@ -30,6 +30,7 @@ impl Bar {\n     /// Blah blah blooo.\n     /// Blah blah blooo.\n     #[an_attribute]\n+    #[doc = \"an attribute that shouldn't be normalized to a doc comment\"]\n     fn foo(&mut self) -> isize {\n     }\n "}, {"sha": "363e1441da3ee29010f9e9e81be8022cc62905fd", "filename": "tests/source/doc-attrib.rs", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/1739041f0372b336ca727585fb7c2ecda07e889c/tests%2Fsource%2Fdoc-attrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1739041f0372b336ca727585fb7c2ecda07e889c/tests%2Fsource%2Fdoc-attrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fdoc-attrib.rs?ref=1739041f0372b336ca727585fb7c2ecda07e889c", "patch": "@@ -0,0 +1,91 @@\n+// rustfmt-wrap_comments: true\n+// rustfmt-normalize_doc_attributes: true\n+\n+// Only doc = \"\" attributes should be normalized\n+#![doc = \"Example doc attribute comment\"]\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n+       html_root_url = \"https://doc.rust-lang.org/nightly/\",\n+       html_playground_url = \"https://play.rust-lang.org/\", test(attr(deny(warnings))))]\n+\n+\n+// Long `#[doc = \"...\"]`\n+struct A { #[doc = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"] b: i32 }\n+\n+\n+#[doc = \"The `nodes` and `edges` method each return instantiations of `Cow<[T]>` to leave implementers the freedom to create entirely new vectors or to pass back slices into internally owned vectors.\"]\n+struct B { b: i32 }\n+\n+\n+#[doc = \"Level 1 comment\"]\n+mod tests {\n+    #[doc = \"Level 2 comment\"]\n+    impl A {\n+        #[doc = \"Level 3 comment\"]\n+        fn f() {\n+            #[doc = \"Level 4 comment\"]\n+            fn g() {\n+            }\n+        }\n+    }\n+}\n+\n+struct C {\n+    #[doc = \"item doc attrib comment\"]\n+    // regular item comment\n+    b: i32,\n+\n+    // regular item comment\n+    #[doc = \"item doc attrib comment\"]\n+    c: i32,\n+}\n+\n+// non-regression test for regular attributes, from #2647\n+#[cfg(feature = \"this_line_is_101_characters_long_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\")]\n+pub fn foo() {}\n+\n+// path attrs\n+#[clippy::bar]\n+#[clippy::bar=foo]\n+#[clippy::bar(a, b, c)]\n+pub fn foo() {}\n+\n+mod issue_2620 {\n+    #[derive(Debug, StructOpt)]\n+#[structopt(about = \"Display information about the character on FF Logs\")]\n+pub struct Params {\n+  #[structopt(help = \"The server the character is on\")]\n+  server: String,\n+  #[structopt(help = \"The character's first name\")]\n+  first_name: String,\n+  #[structopt(help = \"The character's last name\")]\n+  last_name: String,\n+  #[structopt(\n+    short = \"j\",\n+    long = \"job\",\n+    help = \"The job to look at\",\n+    parse(try_from_str)\n+  )]\n+  job: Option<Job>\n+}\n+}\n+\n+// non-regression test for regular attributes, from #2969\n+#[cfg(not(all(feature=\"std\",\n+              any(target_os = \"linux\", target_os = \"android\",\n+                  target_os = \"netbsd\",\n+                  target_os = \"dragonfly\",\n+                  target_os = \"haiku\",\n+                  target_os = \"emscripten\",\n+                  target_os = \"solaris\",\n+                  target_os = \"cloudabi\",\n+                  target_os = \"macos\", target_os = \"ios\",\n+                  target_os = \"freebsd\",\n+                  target_os = \"openbsd\", target_os = \"bitrig\",\n+                  target_os = \"redox\",\n+                  target_os = \"fuchsia\",\n+                  windows,\n+                  all(target_arch = \"wasm32\", feature = \"stdweb\"),\n+                  all(target_arch = \"wasm32\", feature = \"wasm-bindgen\"),\n+              ))))]\n+type Os = NoSource;"}, {"sha": "942f669d4956fc6381e4156190faac23af161c3e", "filename": "tests/target/attrib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1739041f0372b336ca727585fb7c2ecda07e889c/tests%2Ftarget%2Fattrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1739041f0372b336ca727585fb7c2ecda07e889c/tests%2Ftarget%2Fattrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fattrib.rs?ref=1739041f0372b336ca727585fb7c2ecda07e889c", "patch": "@@ -33,6 +33,7 @@ impl Bar {\n     /// Blah blah blooo.\n     /// Blah blah blooo.\n     #[an_attribute]\n+    #[doc = \"an attribute that shouldn't be normalized to a doc comment\"]\n     fn foo(&mut self) -> isize {}\n \n     /// Blah blah bing."}, {"sha": "044e004decc2b40a9d24bbd3086ce540296afb29", "filename": "tests/target/doc-attrib.rs", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/1739041f0372b336ca727585fb7c2ecda07e889c/tests%2Ftarget%2Fdoc-attrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1739041f0372b336ca727585fb7c2ecda07e889c/tests%2Ftarget%2Fdoc-attrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fdoc-attrib.rs?ref=1739041f0372b336ca727585fb7c2ecda07e889c", "patch": "@@ -0,0 +1,105 @@\n+// rustfmt-wrap_comments: true\n+// rustfmt-normalize_doc_attributes: true\n+\n+// Only doc = \"\" attributes should be normalized\n+//! Example doc attribute comment\n+#![doc(\n+    html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+    html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n+    html_root_url = \"https://doc.rust-lang.org/nightly/\",\n+    html_playground_url = \"https://play.rust-lang.org/\",\n+    test(attr(deny(warnings)))\n+)]\n+\n+// Long `#[doc = \"...\"]`\n+struct A {\n+    /// xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n+    b: i32,\n+}\n+\n+/// The `nodes` and `edges` method each return instantiations of `Cow<[T]>` to\n+/// leave implementers the freedom to create entirely new vectors or to pass\n+/// back slices into internally owned vectors.\n+struct B {\n+    b: i32,\n+}\n+\n+/// Level 1 comment\n+mod tests {\n+    /// Level 2 comment\n+    impl A {\n+        /// Level 3 comment\n+        fn f() {\n+            /// Level 4 comment\n+            fn g() {}\n+        }\n+    }\n+}\n+\n+struct C {\n+    /// item doc attrib comment\n+    // regular item comment\n+    b: i32,\n+\n+    // regular item comment\n+    /// item doc attrib comment\n+    c: i32,\n+}\n+\n+// non-regression test for regular attributes, from #2647\n+#[cfg(\n+    feature = \"this_line_is_101_characters_long_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n+)]\n+pub fn foo() {}\n+\n+// path attrs\n+#[clippy::bar]\n+#[clippy::bar=foo]\n+#[clippy::bar(a, b, c)]\n+pub fn foo() {}\n+\n+mod issue_2620 {\n+    #[derive(Debug, StructOpt)]\n+    #[structopt(about = \"Display information about the character on FF Logs\")]\n+    pub struct Params {\n+        #[structopt(help = \"The server the character is on\")]\n+        server: String,\n+        #[structopt(help = \"The character's first name\")]\n+        first_name: String,\n+        #[structopt(help = \"The character's last name\")]\n+        last_name: String,\n+        #[structopt(\n+            short = \"j\",\n+            long = \"job\",\n+            help = \"The job to look at\",\n+            parse(try_from_str)\n+        )]\n+        job: Option<Job>,\n+    }\n+}\n+\n+// non-regression test for regular attributes, from #2969\n+#[cfg(not(all(\n+    feature = \"std\",\n+    any(\n+        target_os = \"linux\",\n+        target_os = \"android\",\n+        target_os = \"netbsd\",\n+        target_os = \"dragonfly\",\n+        target_os = \"haiku\",\n+        target_os = \"emscripten\",\n+        target_os = \"solaris\",\n+        target_os = \"cloudabi\",\n+        target_os = \"macos\",\n+        target_os = \"ios\",\n+        target_os = \"freebsd\",\n+        target_os = \"openbsd\",\n+        target_os = \"bitrig\",\n+        target_os = \"redox\",\n+        target_os = \"fuchsia\",\n+        windows,\n+        all(target_arch = \"wasm32\", feature = \"stdweb\"),\n+        all(target_arch = \"wasm32\", feature = \"wasm-bindgen\"),\n+    )\n+)))]\n+type Os = NoSource;"}]}