{"sha": "3f79d2f33e8b69812c9b981ff4adea0a1e7b9cb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNzlkMmYzM2U4YjY5ODEyYzliOTgxZmY0YWRlYTBhMWU3YjljYjg=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-06-29T09:08:47Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-06-30T04:38:57Z"}, "message": "Avoid `unwrap_or_else` in `RawVec::allocate_in`.\n\nThis reduces the amount of LLVM IR generated by up to 1 or 2%.", "tree": {"sha": "78c4a790294b76756da802a039b0582c3f4d14ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78c4a790294b76756da802a039b0582c3f4d14ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f79d2f33e8b69812c9b981ff4adea0a1e7b9cb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f79d2f33e8b69812c9b981ff4adea0a1e7b9cb8", "html_url": "https://github.com/rust-lang/rust/commit/3f79d2f33e8b69812c9b981ff4adea0a1e7b9cb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f79d2f33e8b69812c9b981ff4adea0a1e7b9cb8/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c", "html_url": "https://github.com/rust-lang/rust/commit/c977b8775dd72d191ff1d8e8dceaf4b4cd5db86c"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "bcd7445ecf92e5cfb3d9aedf2b3de3df09a4b3c3", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3f79d2f33e8b69812c9b981ff4adea0a1e7b9cb8/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f79d2f33e8b69812c9b981ff4adea0a1e7b9cb8/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=3f79d2f33e8b69812c9b981ff4adea0a1e7b9cb8", "patch": "@@ -172,10 +172,21 @@ impl<T, A: AllocRef> RawVec<T, A> {\n         if mem::size_of::<T>() == 0 {\n             Self::new_in(alloc)\n         } else {\n-            let layout = Layout::array::<T>(capacity).unwrap_or_else(|_| capacity_overflow());\n-            alloc_guard(layout.size()).unwrap_or_else(|_| capacity_overflow());\n+            // We avoid `unwrap_or_else` here because it bloats the amount of\n+            // LLVM IR generated.\n+            let layout = match Layout::array::<T>(capacity) {\n+                Ok(layout) => layout,\n+                Err(_) => capacity_overflow(),\n+            };\n+            match alloc_guard(layout.size()) {\n+                Ok(_) => {}\n+                Err(_) => capacity_overflow(),\n+            }\n+            let memory = match alloc.alloc(layout, init) {\n+                Ok(memory) => memory,\n+                Err(_) => handle_alloc_error(layout),\n+            };\n \n-            let memory = alloc.alloc(layout, init).unwrap_or_else(|_| handle_alloc_error(layout));\n             Self {\n                 ptr: unsafe { Unique::new_unchecked(memory.ptr.cast().as_ptr()) },\n                 cap: Self::capacity_from_bytes(memory.size),"}]}