{"sha": "5d36edc90d26f2021a3a9d579066c0190aa8facf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkMzZlZGM5MGQyNmYyMDIxYTNhOWQ1NzkwNjZjMDE5MGFhOGZhY2Y=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-05-01T13:01:28Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-05-01T16:46:15Z"}, "message": "Prevent crash when macro is in different file\n\nThis was caused by a macro in a different file.\nThe `target.span` was be in the file of the macro definition and the\n`item.span` in the file of the calling code.", "tree": {"sha": "cb5056552555815876c74e874b8166d21e9a8e43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb5056552555815876c74e874b8166d21e9a8e43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d36edc90d26f2021a3a9d579066c0190aa8facf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJa6JncAAoJELb6Bqbg4mZbnWcQALH5HtQl3bNiU5PRCkSv+b/y\nsFfQ5AoaaJnw4xXr7INzxjMi6ppJLyx21fJUrht9cPTyVVweDz0hjd+F8Q0D9fjK\nP3iRwq/02fGg29HJENmjE+gJbz05SWOsoShnt9po2hNMVen05hVUdquEoWSnzouw\nmjS7SsfJ06No/H8lMVoVuFVX4UsBLIEk3LdIRmbv6ZVrCTxBHDKyCwWn4ZkWu/tO\n58IrraTSYLMREaOvN1Pk5q6G9Q4WCWBUsI/rNOGjrZ8d/2wjF61LerhNmdA9up7P\nweSJjyEIC7UDSi5WrmwnOlAI8yEjMF04jxWK5G5X7q19/QP92Ux3Ia5aHr5w2F6f\nXnTYWfszMzMXEbzaaaQavxskko1qBr5MTA9LeGYAsoTrufIKX1qOzaXteIvQYjSp\n4/PTToBW6OO+bT1I0tB7Wvbtg0LF+x7MPCWmXKW282wa2xRh7+2C8U695iIXlZH+\nv3HsfrQSdXB3ckKxEf4kCtjnTFkHCVSkrt/73POYvHFQo0cm6Or5/fb4A0WMrR8u\n9/KcAjQGkKk+8cpRPxCFw2Pj3jGTgpT85Xm/zBQ+U2CRqq75J+hU+Bsdw8RUvxTJ\n37gSl+aK7Asw7d+fchK13we32BpDg8EbF/FOp1IhAkMFmmH7QEfVkHDfy2GDBfSI\nGrd9xIsAu9HOY+O/i79C\n=r/Oj\n-----END PGP SIGNATURE-----", "payload": "tree cb5056552555815876c74e874b8166d21e9a8e43\nparent 1742229ebb7843a65c05ee495d8de5366fcc5567\nauthor Philipp Hansch <dev@phansch.net> 1525179688 +0200\ncommitter Philipp Hansch <dev@phansch.net> 1525193175 +0200\n\nPrevent crash when macro is in different file\n\nThis was caused by a macro in a different file.\nThe `target.span` was be in the file of the macro definition and the\n`item.span` in the file of the calling code.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d36edc90d26f2021a3a9d579066c0190aa8facf", "html_url": "https://github.com/rust-lang/rust/commit/5d36edc90d26f2021a3a9d579066c0190aa8facf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d36edc90d26f2021a3a9d579066c0190aa8facf/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1742229ebb7843a65c05ee495d8de5366fcc5567", "url": "https://api.github.com/repos/rust-lang/rust/commits/1742229ebb7843a65c05ee495d8de5366fcc5567", "html_url": "https://github.com/rust-lang/rust/commit/1742229ebb7843a65c05ee495d8de5366fcc5567"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "ffc49722aadc2921e9841f6bfe99da1048c96d8c", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d36edc90d26f2021a3a9d579066c0190aa8facf/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d36edc90d26f2021a3a9d579066c0190aa8facf/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=5d36edc90d26f2021a3a9d579066c0190aa8facf", "patch": "@@ -12,7 +12,7 @@ use std::borrow::Cow;\n use syntax::ast::{FloatTy, IntTy, UintTy};\n use syntax::codemap::Span;\n use syntax::errors::DiagnosticBuilder;\n-use utils::{comparisons, higher, in_constant, in_external_macro, in_macro, last_path_segment, match_def_path, match_path,\n+use utils::{comparisons, differing_macro_contexts, higher, in_constant, in_external_macro, in_macro, last_path_segment, match_def_path, match_path,\n             match_type, multispan_sugg, opt_def_id, same_tys, snippet, snippet_opt, span_help_and_lint, span_lint,\n             span_lint_and_sugg, span_lint_and_then, clip, unsext, sext, int_bits};\n use utils::paths;\n@@ -1714,6 +1714,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitHasher {\n                 vis.visit_ty(ty);\n \n                 for target in &vis.found {\n+                    if differing_macro_contexts(item.span, target.span()) {\n+                        return;\n+                    }\n+\n                     let generics_suggestion_span = generics.span.substitute_dummy({\n                         let pos = snippet_opt(cx, item.span.until(target.span()))\n                             .and_then(|snip| Some(item.span.lo() + BytePos(snip.find(\"impl\")? as u32 + 4)))"}, {"sha": "624ca892add310fa3acd8197a9cd33c034781106", "filename": "tests/auxiliary/test_macro.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5d36edc90d26f2021a3a9d579066c0190aa8facf/tests%2Fauxiliary%2Ftest_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d36edc90d26f2021a3a9d579066c0190aa8facf/tests%2Fauxiliary%2Ftest_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fauxiliary%2Ftest_macro.rs?ref=5d36edc90d26f2021a3a9d579066c0190aa8facf", "patch": "@@ -0,0 +1,11 @@\n+pub trait A {}\n+\n+macro_rules! __implicit_hasher_test_macro {\n+    (impl< $($impl_arg:tt),* > for $kind:ty where $($bounds:tt)*) => {\n+        __implicit_hasher_test_macro!( ($($impl_arg),*) ($kind) ($($bounds)*) );\n+    };\n+\n+    (($($impl_arg:tt)*) ($($kind_arg:tt)*) ($($bounds:tt)*)) => {\n+        impl< $($impl_arg)* > test_macro::A for $($kind_arg)* where $($bounds)* { }\n+    };\n+}"}, {"sha": "c8b9f74bb32ddf1c95314dbf93f50e2cda7ce589", "filename": "tests/ui/implicit_hasher.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5d36edc90d26f2021a3a9d579066c0190aa8facf/tests%2Fui%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d36edc90d26f2021a3a9d579066c0190aa8facf/tests%2Fui%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_hasher.rs?ref=5d36edc90d26f2021a3a9d579066c0190aa8facf", "patch": "@@ -83,4 +83,11 @@ macro_rules! gen {\n gen!(impl);\n gen!(fn bar);\n \n+// When the macro is in a different file, the suggestion spans can't be combined properly\n+// and should not cause an ICE\n+// See #2707\n+#[macro_use]\n+#[path = \"../auxiliary/test_macro.rs\"] pub mod test_macro;\n+__implicit_hasher_test_macro!(impl<K, V> for HashMap<K, V> where V: test_macro::A);\n+\n fn main() {}"}]}