{"sha": "6897619d6d7c530d071cb8587d12c5de3353aa75", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4OTc2MTlkNmQ3YzUzMGQwNzFjYjg1ODdkMTJjNWRlMzM1M2FhNzU=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2020-10-09T09:22:08Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2020-10-14T02:14:32Z"}, "message": "Remove unused code from rustc_hir", "tree": {"sha": "f9319ad9300e2c7274931011ac8aee010d34004d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9319ad9300e2c7274931011ac8aee010d34004d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6897619d6d7c530d071cb8587d12c5de3353aa75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6897619d6d7c530d071cb8587d12c5de3353aa75", "html_url": "https://github.com/rust-lang/rust/commit/6897619d6d7c530d071cb8587d12c5de3353aa75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6897619d6d7c530d071cb8587d12c5de3353aa75/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "feaac592a303f7407d604b52aa2abf42be68b40b", "url": "https://api.github.com/repos/rust-lang/rust/commits/feaac592a303f7407d604b52aa2abf42be68b40b", "html_url": "https://github.com/rust-lang/rust/commit/feaac592a303f7407d604b52aa2abf42be68b40b"}], "stats": {"total": 86, "additions": 0, "deletions": 86}, "files": [{"sha": "3f109376a3e34829ac6af07acc02f7acf31c4192", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6897619d6d7c530d071cb8587d12c5de3353aa75/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6897619d6d7c530d071cb8587d12c5de3353aa75/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=6897619d6d7c530d071cb8587d12c5de3353aa75", "patch": "@@ -188,10 +188,6 @@ pub struct DefPath {\n }\n \n impl DefPath {\n-    pub fn is_local(&self) -> bool {\n-        self.krate == LOCAL_CRATE\n-    }\n-\n     pub fn make<FN>(krate: CrateNum, start_index: DefIndex, mut get_key: FN) -> DefPath\n     where\n         FN: FnMut(DefIndex) -> DefKey,"}, {"sha": "2141d5b1ee7b666777282ab3d74a5b4d10ac1f4b", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/6897619d6d7c530d071cb8587d12c5de3353aa75/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6897619d6d7c530d071cb8587d12c5de3353aa75/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=6897619d6d7c530d071cb8587d12c5de3353aa75", "patch": "@@ -3,7 +3,6 @@ use crate::def_id::DefId;\n crate use crate::hir_id::HirId;\n use crate::{itemlikevisit, LangItem};\n \n-use rustc_ast::node_id::NodeMap;\n use rustc_ast::util::parser::ExprPrecedence;\n use rustc_ast::{self as ast, CrateSugar, LlvmAsmDialect};\n use rustc_ast::{AttrVec, Attribute, FloatTy, IntTy, Label, LitKind, StrStyle, UintTy};\n@@ -306,10 +305,6 @@ impl GenericArgs<'_> {\n         Self { args: &[], bindings: &[], parenthesized: false }\n     }\n \n-    pub fn is_empty(&self) -> bool {\n-        self.args.is_empty() && self.bindings.is_empty() && !self.parenthesized\n-    }\n-\n     pub fn inputs(&self) -> &[Ty<'_>] {\n         if self.parenthesized {\n             for arg in self.args {\n@@ -467,23 +462,6 @@ impl Generics<'hir> {\n         }\n     }\n \n-    pub fn own_counts(&self) -> GenericParamCount {\n-        // We could cache this as a property of `GenericParamCount`, but\n-        // the aim is to refactor this away entirely eventually and the\n-        // presence of this method will be a constant reminder.\n-        let mut own_counts: GenericParamCount = Default::default();\n-\n-        for param in self.params {\n-            match param.kind {\n-                GenericParamKind::Lifetime { .. } => own_counts.lifetimes += 1,\n-                GenericParamKind::Type { .. } => own_counts.types += 1,\n-                GenericParamKind::Const { .. } => own_counts.consts += 1,\n-            };\n-        }\n-\n-        own_counts\n-    }\n-\n     pub fn get_named(&self, name: Symbol) -> Option<&GenericParam<'_>> {\n         for param in self.params {\n             if name == param.name.ident().name {\n@@ -2679,8 +2657,6 @@ pub struct Upvar {\n     pub span: Span,\n }\n \n-pub type CaptureModeMap = NodeMap<CaptureBy>;\n-\n // The TraitCandidate's import_ids is empty if the trait is defined in the same module, and\n // has length > 0 if the trait is found through an chain of imports, starting with the\n // import/use statement in the scope where the trait is used.\n@@ -2766,32 +2742,4 @@ impl<'hir> Node<'hir> {\n             _ => None,\n         }\n     }\n-\n-    pub fn hir_id(&self) -> Option<HirId> {\n-        match self {\n-            Node::Item(Item { hir_id, .. })\n-            | Node::ForeignItem(ForeignItem { hir_id, .. })\n-            | Node::TraitItem(TraitItem { hir_id, .. })\n-            | Node::ImplItem(ImplItem { hir_id, .. })\n-            | Node::Field(StructField { hir_id, .. })\n-            | Node::AnonConst(AnonConst { hir_id, .. })\n-            | Node::Expr(Expr { hir_id, .. })\n-            | Node::Stmt(Stmt { hir_id, .. })\n-            | Node::Ty(Ty { hir_id, .. })\n-            | Node::Binding(Pat { hir_id, .. })\n-            | Node::Pat(Pat { hir_id, .. })\n-            | Node::Arm(Arm { hir_id, .. })\n-            | Node::Block(Block { hir_id, .. })\n-            | Node::Local(Local { hir_id, .. })\n-            | Node::MacroDef(MacroDef { hir_id, .. })\n-            | Node::Lifetime(Lifetime { hir_id, .. })\n-            | Node::Param(Param { hir_id, .. })\n-            | Node::GenericParam(GenericParam { hir_id, .. }) => Some(*hir_id),\n-            Node::TraitRef(TraitRef { hir_ref_id, .. }) => Some(*hir_ref_id),\n-            Node::PathSegment(PathSegment { hir_id, .. }) => *hir_id,\n-            Node::Variant(Variant { id, .. }) => Some(*id),\n-            Node::Ctor(variant) => variant.ctor_hir_id(),\n-            Node::Crate(_) | Node::Visibility(_) => None,\n-        }\n-    }\n }"}, {"sha": "cc8ac4cf5be51bdda772dffefb22e27db3066e05", "filename": "compiler/rustc_hir/src/hir_id.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6897619d6d7c530d071cb8587d12c5de3353aa75/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6897619d6d7c530d071cb8587d12c5de3353aa75/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs?ref=6897619d6d7c530d071cb8587d12c5de3353aa75", "patch": "@@ -45,5 +45,3 @@ pub const CRATE_HIR_ID: HirId = HirId {\n     owner: LocalDefId { local_def_index: CRATE_DEF_INDEX },\n     local_id: ItemLocalId::from_u32(0),\n };\n-\n-pub const DUMMY_ITEM_LOCAL_ID: ItemLocalId = ItemLocalId::MAX;"}, {"sha": "c05d3e44423cff20a2f73cbb0c4a3dde073c0c5d", "filename": "compiler/rustc_hir/src/pat_util.rs", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6897619d6d7c530d071cb8587d12c5de3353aa75/compiler%2Frustc_hir%2Fsrc%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6897619d6d7c530d071cb8587d12c5de3353aa75/compiler%2Frustc_hir%2Fsrc%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fpat_util.rs?ref=6897619d6d7c530d071cb8587d12c5de3353aa75", "patch": "@@ -58,25 +58,6 @@ impl<T: ExactSizeIterator> EnumerateAndAdjustIterator for T {\n }\n \n impl hir::Pat<'_> {\n-    pub fn is_refutable(&self) -> bool {\n-        match self.kind {\n-            PatKind::Lit(_)\n-            | PatKind::Range(..)\n-            | PatKind::Path(hir::QPath::Resolved(Some(..), _) | hir::QPath::TypeRelative(..)) => {\n-                true\n-            }\n-\n-            PatKind::Path(hir::QPath::Resolved(_, ref path))\n-            | PatKind::TupleStruct(hir::QPath::Resolved(_, ref path), ..)\n-            | PatKind::Struct(hir::QPath::Resolved(_, ref path), ..) => match path.res {\n-                Res::Def(DefKind::Variant, _) => true,\n-                _ => false,\n-            },\n-            PatKind::Slice(..) => true,\n-            _ => false,\n-        }\n-    }\n-\n     /// Call `f` on every \"binding\" in a pattern, e.g., on `a` in\n     /// `match foo() { Some(a) => (), None => () }`\n     pub fn each_binding(&self, mut f: impl FnMut(hir::BindingAnnotation, HirId, Span, Ident)) {\n@@ -117,15 +98,6 @@ impl hir::Pat<'_> {\n         })\n     }\n \n-    /// Checks if the pattern contains any patterns that bind something to\n-    /// an ident or wildcard, e.g., `foo`, or `Foo(_)`, `foo @ Bar(..)`,\n-    pub fn contains_bindings_or_wild(&self) -> bool {\n-        self.satisfies(|p| match p.kind {\n-            PatKind::Binding(..) | PatKind::Wild => true,\n-            _ => false,\n-        })\n-    }\n-\n     /// Checks if the pattern satisfies the given predicate on some sub-pattern.\n     fn satisfies(&self, pred: impl Fn(&hir::Pat<'_>) -> bool) -> bool {\n         let mut satisfies = false;"}]}