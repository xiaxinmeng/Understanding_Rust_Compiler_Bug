{"sha": "7c0c4cde80ef871858d5e9dcef506157fcdcc21c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjMGM0Y2RlODBlZjg3MTg1OGQ1ZTlkY2VmNTA2MTU3ZmNkY2MyMWM=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-05-26T16:54:23Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-06-12T11:04:33Z"}, "message": "Pass span through diverge_cleanup down to build_diverge_scope where it\ncan be used for building the diverge path's terminator.", "tree": {"sha": "6974206beac42d598884c71ef93fca6e7a8535d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6974206beac42d598884c71ef93fca6e7a8535d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c0c4cde80ef871858d5e9dcef506157fcdcc21c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c0c4cde80ef871858d5e9dcef506157fcdcc21c", "html_url": "https://github.com/rust-lang/rust/commit/7c0c4cde80ef871858d5e9dcef506157fcdcc21c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c0c4cde80ef871858d5e9dcef506157fcdcc21c/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a658bb21e4b8742f227b07bfc3c26a0a34381285", "url": "https://api.github.com/repos/rust-lang/rust/commits/a658bb21e4b8742f227b07bfc3c26a0a34381285", "html_url": "https://github.com/rust-lang/rust/commit/a658bb21e4b8742f227b07bfc3c26a0a34381285"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "b7abc707a380dd8ec2c6058aa2b33cbc4517b372", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c0c4cde80ef871858d5e9dcef506157fcdcc21c/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0c4cde80ef871858d5e9dcef506157fcdcc21c/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=7c0c4cde80ef871858d5e9dcef506157fcdcc21c", "patch": "@@ -234,7 +234,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                             .collect();\n \n                     let success = this.cfg.start_new_block();\n-                    let cleanup = this.diverge_cleanup();\n+                    let cleanup = this.diverge_cleanup(expr_span);\n                     this.cfg.terminate(block, source_info, TerminatorKind::Call {\n                         func: fun,\n                         args: args,"}, {"sha": "f4d43e041ae87babe9ae8bdc20fba65b0de2edbd", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c0c4cde80ef871858d5e9dcef506157fcdcc21c/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0c4cde80ef871858d5e9dcef506157fcdcc21c/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=7c0c4cde80ef871858d5e9dcef506157fcdcc21c", "patch": "@@ -306,7 +306,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     let bool_ty = self.hir.bool_ty();\n                     let eq_result = self.temp(bool_ty, test.span);\n                     let eq_block = self.cfg.start_new_block();\n-                    let cleanup = self.diverge_cleanup();\n+                    let cleanup = self.diverge_cleanup(test.span);\n                     self.cfg.terminate(block, source_info, TerminatorKind::Call {\n                         func: Operand::Constant(box Constant {\n                             span: test.span,"}, {"sha": "28828d45b2e96efc11f03b803a1252ef26dfec12", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7c0c4cde80ef871858d5e9dcef506157fcdcc21c/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0c4cde80ef871858d5e9dcef506157fcdcc21c/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=7c0c4cde80ef871858d5e9dcef506157fcdcc21c", "patch": "@@ -330,7 +330,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         debug!(\"pop_scope({:?}, {:?})\", extent, block);\n         // We need to have `cached_block`s available for all the drops, so we call diverge_cleanup\n         // to make sure all the `cached_block`s are filled in.\n-        self.diverge_cleanup();\n+        self.diverge_cleanup(extent.1.span);\n         let scope = self.scopes.pop().unwrap();\n         assert_eq!(scope.extent, extent.0);\n         unpack!(block = build_scope_drops(&mut self.cfg,\n@@ -607,7 +607,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// This path terminates in Resume. Returns the start of the path.\n     /// See module comment for more details. None indicates there\u2019s no\n     /// cleanup to do at this point.\n-    pub fn diverge_cleanup(&mut self) -> Option<BasicBlock> {\n+    pub fn diverge_cleanup(&mut self, span: Span) -> Option<BasicBlock> {\n         if !self.scopes.iter().any(|scope| scope.needs_cleanup) {\n             return None;\n         }\n@@ -641,7 +641,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         };\n \n         for scope in scopes.iter_mut().filter(|s| s.needs_cleanup) {\n-            target = build_diverge_scope(hir.tcx(), cfg, &unit_temp, scope, target);\n+            target = build_diverge_scope(hir.tcx(), cfg, &unit_temp, span, scope, target);\n         }\n         Some(target)\n     }\n@@ -657,7 +657,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         }\n         let source_info = self.source_info(span);\n         let next_target = self.cfg.start_new_block();\n-        let diverge_target = self.diverge_cleanup();\n+        let diverge_target = self.diverge_cleanup(span);\n         self.cfg.terminate(block, source_info,\n                            TerminatorKind::Drop {\n                                location: location,\n@@ -675,7 +675,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                   value: Operand<'tcx>) -> BlockAnd<()> {\n         let source_info = self.source_info(span);\n         let next_target = self.cfg.start_new_block();\n-        let diverge_target = self.diverge_cleanup();\n+        let diverge_target = self.diverge_cleanup(span);\n         self.cfg.terminate(block, source_info,\n                            TerminatorKind::DropAndReplace {\n                                location: location,\n@@ -698,7 +698,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let source_info = self.source_info(span);\n \n         let success_block = self.cfg.start_new_block();\n-        let cleanup = self.diverge_cleanup();\n+        let cleanup = self.diverge_cleanup(span);\n \n         self.cfg.terminate(block, source_info,\n                            TerminatorKind::Assert {\n@@ -767,6 +767,7 @@ fn build_scope_drops<'tcx>(cfg: &mut CFG<'tcx>,\n fn build_diverge_scope<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                                        cfg: &mut CFG<'tcx>,\n                                        unit_temp: &Lvalue<'tcx>,\n+                                       span: Span,\n                                        scope: &mut Scope<'tcx>,\n                                        mut target: BasicBlock)\n                                        -> BasicBlock"}]}