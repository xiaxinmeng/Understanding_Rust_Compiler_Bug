{"sha": "ba5c7a570d1bc6f28e7a2f4eb5cfd50b7c19f374", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhNWM3YTU3MGQxYmM2ZjI4ZTdhMmY0ZWI1Y2ZkNTBiN2MxOWYzNzQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-27T21:18:32Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-27T23:30:27Z"}, "message": "Rename middle::metadata to metadata::cwriter. Move creader to metadata\n\nPreparation for a lot more metadata refactoring", "tree": {"sha": "78bb67f83876f83a65464b82ae0ead676e080080", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78bb67f83876f83a65464b82ae0ead676e080080"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba5c7a570d1bc6f28e7a2f4eb5cfd50b7c19f374", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba5c7a570d1bc6f28e7a2f4eb5cfd50b7c19f374", "html_url": "https://github.com/rust-lang/rust/commit/ba5c7a570d1bc6f28e7a2f4eb5cfd50b7c19f374", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba5c7a570d1bc6f28e7a2f4eb5cfd50b7c19f374/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4a5487e1c1ab641f146e2ab83409bc9b5a4ec51", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4a5487e1c1ab641f146e2ab83409bc9b5a4ec51", "html_url": "https://github.com/rust-lang/rust/commit/d4a5487e1c1ab641f146e2ab83409bc9b5a4ec51"}], "stats": {"total": 104, "additions": 54, "deletions": 50}, "files": [{"sha": "7323a5f3ad0a7bc1ac24dffd06914f602d9e2162", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ba5c7a570d1bc6f28e7a2f4eb5cfd50b7c19f374/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba5c7a570d1bc6f28e7a2f4eb5cfd50b7c19f374/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=ba5c7a570d1bc6f28e7a2f4eb5cfd50b7c19f374", "patch": "@@ -2,8 +2,8 @@\n import driver::session;\n import lib::llvm::llvm;\n import middle::trans;\n-import middle::metadata;\n import middle::ty;\n+import metadata::cwriter;\n import std::str;\n import std::fs;\n import std::vec;\n@@ -398,15 +398,15 @@ fn symbol_hash(ty::ctxt tcx, sha1 sha, &ty::t t, str crate_meta_name,\n     // to be independent of one another in the crate.\n \n     auto cx =\n-        @rec(ds=metadata::def_to_str,\n+        @rec(ds=metadata::cwriter::def_to_str,\n              tcx=tcx,\n-             abbrevs=metadata::ac_no_abbrevs);\n+             abbrevs=metadata::cwriter::ac_no_abbrevs);\n     sha.reset();\n     sha.input_str(crate_meta_name);\n     sha.input_str(\"-\");\n     sha.input_str(crate_meta_name);\n     sha.input_str(\"-\");\n-    sha.input_str(metadata::encode::ty_str(cx, t));\n+    sha.input_str(metadata::cwriter::encode::ty_str(cx, t));\n     auto hash = truncated_sha1_result(sha);\n     // Prefix with _ so that it never blends into adjacent digits\n \n@@ -452,8 +452,8 @@ fn mangle_exported_name(&@crate_ctxt ccx, &vec[str] path, &ty::t t) -> str {\n \n fn mangle_internal_name_by_type_only(&@crate_ctxt ccx, &ty::t t, &str name) ->\n    str {\n-    auto f = metadata::def_to_str;\n-    auto cx = @rec(ds=f, tcx=ccx.tcx, abbrevs=metadata::ac_no_abbrevs);\n+    auto f = metadata::cwriter::def_to_str;\n+    auto cx = @rec(ds=f, tcx=ccx.tcx, abbrevs=metadata::cwriter::ac_no_abbrevs);\n     auto s = pretty::ppaux::ty_to_short_str(ccx.tcx, t);\n     auto hash = get_symbol_hash(ccx, t);\n     ret mangle([name, s, hash]);"}, {"sha": "bed3ba3492cb7037e9ff0dc3e6a9c899eef85f90", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba5c7a570d1bc6f28e7a2f4eb5cfd50b7c19f374/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba5c7a570d1bc6f28e7a2f4eb5cfd50b7c19f374/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=ba5c7a570d1bc6f28e7a2f4eb5cfd50b7c19f374", "patch": "@@ -1,7 +1,7 @@\n \n \n // -*- rust -*-\n-import front::creader;\n+import metadata::creader;\n import front::parser;\n import front::token;\n import front::eval;\n@@ -349,7 +349,7 @@ fn main(vec[str] args) {\n         case (none[pp_mode]) {/* continue */ }\n     }\n     if (ls) {\n-        front::creader::list_file_metadata(ifile, std::io::stdout());\n+        metadata::creader::list_file_metadata(ifile, std::io::stdout());\n         ret;\n     }\n     alt (output_file) {"}, {"sha": "f85ac41297d1e5005e2c99cdf3089972c15f3333", "filename": "src/comp/metadata/creader.rs", "status": "renamed", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/ba5c7a570d1bc6f28e7a2f4eb5cfd50b7c19f374/src%2Fcomp%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba5c7a570d1bc6f28e7a2f4eb5cfd50b7c19f374/src%2Fcomp%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcreader.rs?ref=ba5c7a570d1bc6f28e7a2f4eb5cfd50b7c19f374", "patch": "@@ -9,7 +9,7 @@ import lib::llvm::mk_object_file;\n import lib::llvm::mk_section_iter;\n import middle::resolve;\n import middle::walk;\n-import middle::metadata;\n+import cwriter;\n import middle::trans;\n import middle::ty;\n import back::x86;\n@@ -404,15 +404,15 @@ fn parse_def_id(vec[u8] buf) -> ast::def_id {\n \n fn lookup_hash(&ebml::doc d, fn(vec[u8]) -> bool  eq_fn, uint hash) ->\n    vec[ebml::doc] {\n-    auto index = ebml::get_doc(d, metadata::tag_index);\n-    auto table = ebml::get_doc(index, metadata::tag_index_table);\n+    auto index = ebml::get_doc(d, cwriter::tag_index);\n+    auto table = ebml::get_doc(index, cwriter::tag_index_table);\n     auto hash_pos = table.start + hash % 256u * 4u;\n     auto pos = ebml::be_uint_from_bytes(d.data, hash_pos, 4u);\n     auto bucket = ebml::doc_at(d.data, pos);\n     // Awkward logic because we can't ret from foreach yet\n \n     let vec[ebml::doc] result = [];\n-    auto belt = metadata::tag_index_buckets_bucket_elt;\n+    auto belt = cwriter::tag_index_buckets_bucket_elt;\n     for each (ebml::doc elt in ebml::tagged_docs(bucket, belt)) {\n         auto pos = ebml::be_uint_from_bytes(elt.data, elt.start, 4u);\n         if (eq_fn(vec::slice[u8](elt.data, elt.start + 4u, elt.end))) {\n@@ -431,11 +431,11 @@ fn resolve_path(vec[ast::ident] path, vec[u8] data) -> vec[ast::def_id] {\n     }\n     auto s = str::connect(path, \"::\");\n     auto md = ebml::new_doc(data);\n-    auto paths = ebml::get_doc(md, metadata::tag_paths);\n+    auto paths = ebml::get_doc(md, cwriter::tag_paths);\n     auto eqer = bind eq_item(_, s);\n     let vec[ast::def_id] result = [];\n-    for (ebml::doc doc in lookup_hash(paths, eqer, metadata::hash_path(s))) {\n-        auto did_doc = ebml::get_doc(doc, metadata::tag_def_id);\n+    for (ebml::doc doc in lookup_hash(paths, eqer, cwriter::hash_path(s))) {\n+        auto did_doc = ebml::get_doc(doc, cwriter::tag_def_id);\n         vec::push(result, parse_def_id(ebml::doc_data(did_doc)));\n     }\n     ret result;\n@@ -446,7 +446,7 @@ fn maybe_find_item(int item_id, &ebml::doc items) -> option::t[ebml::doc] {\n         ret ebml::be_uint_from_bytes(bytes, 0u, 4u) as int == item_id;\n     }\n     auto eqer = bind eq_item(_, item_id);\n-    auto found = lookup_hash(items, eqer, metadata::hash_def_id(item_id));\n+    auto found = lookup_hash(items, eqer, cwriter::hash_def_id(item_id));\n     if (vec::len(found) == 0u) {\n         ret option::none[ebml::doc];\n     } else { ret option::some[ebml::doc](found.(0)); }\n@@ -460,22 +460,22 @@ fn find_item(int item_id, &ebml::doc items) -> ebml::doc {\n // Looks up an item in the given metadata and returns an ebml doc pointing\n // to the item data.\n fn lookup_item(int item_id, vec[u8] data) -> ebml::doc {\n-    auto items = ebml::get_doc(ebml::new_doc(data), metadata::tag_items);\n+    auto items = ebml::get_doc(ebml::new_doc(data), cwriter::tag_items);\n     ret find_item(item_id, items);\n }\n \n fn item_kind(&ebml::doc item) -> u8 {\n-    auto kind = ebml::get_doc(item, metadata::tag_items_data_item_kind);\n+    auto kind = ebml::get_doc(item, cwriter::tag_items_data_item_kind);\n     ret ebml::doc_as_uint(kind) as u8;\n }\n \n fn item_symbol(&ebml::doc item) -> str {\n-    auto sym = ebml::get_doc(item, metadata::tag_items_data_item_symbol);\n+    auto sym = ebml::get_doc(item, cwriter::tag_items_data_item_symbol);\n     ret str::unsafe_from_bytes(ebml::doc_data(sym));\n }\n \n fn variant_tag_id(&ebml::doc d) -> ast::def_id {\n-    auto tagdoc = ebml::get_doc(d, metadata::tag_items_data_item_tag_id);\n+    auto tagdoc = ebml::get_doc(d, cwriter::tag_items_data_item_tag_id);\n     ret parse_def_id(ebml::doc_data(tagdoc));\n }\n \n@@ -490,15 +490,15 @@ fn item_type(&ebml::doc item, int this_cnum, ty::ctxt tcx) -> ty::t {\n         auto external_def_id = parse_def_id(buf);\n         ret tup(this_cnum, external_def_id._1);\n     }\n-    auto tp = ebml::get_doc(item, metadata::tag_items_data_item_type);\n+    auto tp = ebml::get_doc(item, cwriter::tag_items_data_item_type);\n     auto s = str::unsafe_from_bytes(ebml::doc_data(tp));\n     ret parse_ty_data(item.data, this_cnum, tp.start, tp.end - tp.start,\n                       bind parse_external_def_id(this_cnum, _), tcx);\n }\n \n fn item_ty_param_count(&ebml::doc item, int this_cnum) -> uint {\n     let uint ty_param_count = 0u;\n-    auto tp = metadata::tag_items_data_item_ty_param_count;\n+    auto tp = cwriter::tag_items_data_item_ty_param_count;\n     for each (ebml::doc p in ebml::tagged_docs(item, tp)) {\n         ty_param_count = ebml::vint_at(ebml::doc_data(p), 0u)._0;\n     }\n@@ -507,7 +507,7 @@ fn item_ty_param_count(&ebml::doc item, int this_cnum) -> uint {\n \n fn tag_variant_ids(&ebml::doc item, int this_cnum) -> vec[ast::def_id] {\n     let vec[ast::def_id] ids = [];\n-    auto v = metadata::tag_items_data_item_variant;\n+    auto v = cwriter::tag_items_data_item_variant;\n     for each (ebml::doc p in ebml::tagged_docs(item, v)) {\n         auto ext = parse_def_id(ebml::doc_data(p));\n         vec::push[ast::def_id](ids, tup(this_cnum, ext._1));\n@@ -538,12 +538,12 @@ fn get_metadata_section(str filename) -> option::t[vec[u8]] {\n fn get_exported_metadata(&session::session sess, &str path, &vec[u8] data) ->\n    hashmap[str, str] {\n     auto meta_items =\n-        ebml::get_doc(ebml::new_doc(data), metadata::tag_meta_export);\n+        ebml::get_doc(ebml::new_doc(data), cwriter::tag_meta_export);\n     auto mm = common::new_str_hash[str]();\n     for each (ebml::doc m in\n-             ebml::tagged_docs(meta_items, metadata::tag_meta_item)) {\n-        auto kd = ebml::get_doc(m, metadata::tag_meta_item_key);\n-        auto vd = ebml::get_doc(m, metadata::tag_meta_item_value);\n+             ebml::tagged_docs(meta_items, cwriter::tag_meta_item)) {\n+        auto kd = ebml::get_doc(m, cwriter::tag_meta_item_key);\n+        auto vd = ebml::get_doc(m, cwriter::tag_meta_item_value);\n         auto k = str::unsafe_from_bytes(ebml::doc_data(kd));\n         auto v = str::unsafe_from_bytes(ebml::doc_data(vd));\n         log #fmt(\"metadata in %s: %s = %s\", path, k, v);\n@@ -807,7 +807,7 @@ fn get_symbol(session::session sess, ast::def_id def) -> str {\n fn get_tag_variants(ty::ctxt tcx, ast::def_id def) -> vec[ty::variant_info] {\n     auto external_crate_id = def._0;\n     auto data = tcx.sess.get_external_crate(external_crate_id).data;\n-    auto items = ebml::get_doc(ebml::new_doc(data), metadata::tag_items);\n+    auto items = ebml::get_doc(ebml::new_doc(data), cwriter::tag_items);\n     auto item = find_item(def._1, items);\n     let vec[ty::variant_info] infos = [];\n     auto variant_ids = tag_variant_ids(item, external_crate_id);\n@@ -848,17 +848,17 @@ fn read_path(&ebml::doc d) -> tup(str, uint) {\n \n fn list_crate_metadata(vec[u8] bytes, io::writer out) {\n     auto md = ebml::new_doc(bytes);\n-    auto paths = ebml::get_doc(md, metadata::tag_paths);\n-    auto items = ebml::get_doc(md, metadata::tag_items);\n-    auto index = ebml::get_doc(paths, metadata::tag_index);\n-    auto bs = ebml::get_doc(index, metadata::tag_index_buckets);\n+    auto paths = ebml::get_doc(md, cwriter::tag_paths);\n+    auto items = ebml::get_doc(md, cwriter::tag_items);\n+    auto index = ebml::get_doc(paths, cwriter::tag_index);\n+    auto bs = ebml::get_doc(index, cwriter::tag_index_buckets);\n     for each (ebml::doc bucket in\n-             ebml::tagged_docs(bs, metadata::tag_index_buckets_bucket)) {\n-        auto et = metadata::tag_index_buckets_bucket_elt;\n+             ebml::tagged_docs(bs, cwriter::tag_index_buckets_bucket)) {\n+        auto et = cwriter::tag_index_buckets_bucket_elt;\n         for each (ebml::doc elt in ebml::tagged_docs(bucket, et)) {\n             auto data = read_path(elt);\n             auto def = ebml::doc_at(bytes, data._1);\n-            auto did_doc = ebml::get_doc(def, metadata::tag_def_id);\n+            auto did_doc = ebml::get_doc(def, cwriter::tag_def_id);\n             auto did = parse_def_id(ebml::doc_data(did_doc));\n             out.write_str(#fmt(\"%s (%s)\\n\", data._0,\n                                describe_def(items, did)));", "previous_filename": "src/comp/front/creader.rs"}, {"sha": "e8e8654fd7f208e3a86380205ca19750845e8cbc", "filename": "src/comp/metadata/cwriter.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba5c7a570d1bc6f28e7a2f4eb5cfd50b7c19f374/src%2Fcomp%2Fmetadata%2Fcwriter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba5c7a570d1bc6f28e7a2f4eb5cfd50b7c19f374/src%2Fcomp%2Fmetadata%2Fcwriter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcwriter.rs?ref=ba5c7a570d1bc6f28e7a2f4eb5cfd50b7c19f374", "patch": "@@ -662,13 +662,13 @@ fn encode_info_for_items(&@trans::crate_ctxt cx, &ebml::writer ebml_w) ->\n    vec[tup(int, uint)] {\n     let vec[tup(int, uint)] index = [];\n     ebml::start_tag(ebml_w, tag_items_data);\n-    for each (@tup(node_id, ast_map::ast_node) kvp in cx.ast_map.items()) {\n+    for each (@tup(node_id, middle::ast_map::ast_node) kvp in cx.ast_map.items()) {\n         alt (kvp._1) {\n-            case (ast_map::node_item(?i)) {\n+            case (middle::ast_map::node_item(?i)) {\n                 index += [tup(kvp._0, ebml_w.writer.tell())];\n                 encode_info_for_item(cx, ebml_w, i, index);\n             }\n-            case (ast_map::node_native_item(?i)) {\n+            case (middle::ast_map::node_native_item(?i)) {\n                 index += [tup(kvp._0, ebml_w.writer.tell())];\n                 encode_info_for_native_item(cx, ebml_w, i);\n             }", "previous_filename": "src/comp/middle/metadata.rs"}, {"sha": "6e2ecfcac557618629f07148ae92122d3679d0c2", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba5c7a570d1bc6f28e7a2f4eb5cfd50b7c19f374/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba5c7a570d1bc6f28e7a2f4eb5cfd50b7c19f374/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=ba5c7a570d1bc6f28e7a2f4eb5cfd50b7c19f374", "patch": "@@ -6,7 +6,7 @@ import front::ast::def_id;\n import front::ast::node_id;\n import front::ast::local_def;\n \n-import front::creader;\n+import metadata::creader;\n import driver::session::session;\n import util::common::new_def_hash;\n import util::common::new_int_hash;"}, {"sha": "b6bf494d8ddc70a53011fdbdfed3dad5d13a2343", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba5c7a570d1bc6f28e7a2f4eb5cfd50b7c19f374/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba5c7a570d1bc6f28e7a2f4eb5cfd50b7c19f374/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=ba5c7a570d1bc6f28e7a2f4eb5cfd50b7c19f374", "patch": "@@ -25,7 +25,8 @@ import std::option::some;\n import std::option::none;\n import std::fs;\n import front::ast;\n-import front::creader;\n+import metadata::creader;\n+import metadata::cwriter;\n import driver::session;\n import middle::ty;\n import back::link;\n@@ -148,7 +149,7 @@ type crate_ctxt =\n         namegen names,\n         std::sha1::sha1 sha,\n         hashmap[ty::t, str] type_sha1s,\n-        hashmap[ty::t, metadata::ty_abbrev] type_abbrevs,\n+        hashmap[ty::t, cwriter::ty_abbrev] type_abbrevs,\n         hashmap[ty::t, str] type_short_names,\n         ty::ctxt tcx,\n         stats stats,\n@@ -8400,7 +8401,7 @@ fn trans_crate(&session::session sess, &@ast::crate crate, &ty::ctxt tcx,\n     auto tydescs = map::mk_hashmap[ty::t, @tydesc_info](hasher, eqer);\n     auto lltypes = map::mk_hashmap[ty::t, TypeRef](hasher, eqer);\n     auto sha1s = map::mk_hashmap[ty::t, str](hasher, eqer);\n-    auto abbrevs = map::mk_hashmap[ty::t, metadata::ty_abbrev](hasher, eqer);\n+    auto abbrevs = map::mk_hashmap[ty::t, cwriter::ty_abbrev](hasher, eqer);\n     auto short_names = map::mk_hashmap[ty::t, str](hasher, eqer);\n     auto sha = std::sha1::mk_sha1();\n     auto ccx =\n@@ -8449,7 +8450,7 @@ fn trans_crate(&session::session sess, &@ast::crate crate, &ty::ctxt tcx,\n     emit_tydescs(ccx);\n     // Translate the metadata:\n \n-    middle::metadata::write_metadata(cx.ccx, crate);\n+    cwriter::write_metadata(cx.ccx, crate);\n     if (ccx.sess.get_opts().stats) {\n         log_err \"--- trans stats ---\";\n         log_err #fmt(\"n_static_tydescs: %u\", ccx.stats.n_static_tydescs);"}, {"sha": "88f1f09856790d6f4217a8d806b9c9fe3a63b503", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba5c7a570d1bc6f28e7a2f4eb5cfd50b7c19f374/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba5c7a570d1bc6f28e7a2f4eb5cfd50b7c19f374/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=ba5c7a570d1bc6f28e7a2f4eb5cfd50b7c19f374", "patch": "@@ -17,8 +17,8 @@ import front::ast::def_id;\n import front::ast::constr_arg_general;\n import front::ast::mutability;\n import front::ast::controlflow;\n-import front::creader;\n-import middle::metadata;\n+import metadata::creader;\n+import metadata::cwriter;\n import util::common::*;\n import util::data::interner;\n import pretty::ppaux::ty_to_str;"}, {"sha": "41a255bcaaa9000b486b6851e7b6ce6fe9c12cdc", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba5c7a570d1bc6f28e7a2f4eb5cfd50b7c19f374/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba5c7a570d1bc6f28e7a2f4eb5cfd50b7c19f374/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=ba5c7a570d1bc6f28e7a2f4eb5cfd50b7c19f374", "patch": "@@ -2,7 +2,7 @@\n import front::ast;\n import front::ast::mutability;\n import front::ast::local_def;\n-import front::creader;\n+import metadata::creader;\n import driver::session;\n import util::common;\n import util::common::span;"}, {"sha": "36ebf3916b977260e8a12887be3792b1693d6cc8", "filename": "src/comp/pretty/ppaux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba5c7a570d1bc6f28e7a2f4eb5cfd50b7c19f374/src%2Fcomp%2Fpretty%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba5c7a570d1bc6f28e7a2f4eb5cfd50b7c19f374/src%2Fcomp%2Fpretty%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fppaux.rs?ref=ba5c7a570d1bc6f28e7a2f4eb5cfd50b7c19f374", "patch": "@@ -150,8 +150,8 @@ fn ty_to_str(&ctxt cx, &t typ) -> str {\n \n fn ty_to_short_str(&ctxt cx, t typ) -> str {\n     auto f = def_to_str;\n-    auto ecx = @rec(ds=f, tcx=cx, abbrevs=middle::metadata::ac_no_abbrevs);\n-    auto s = middle::metadata::encode::ty_str(ecx, typ);\n+    auto ecx = @rec(ds=f, tcx=cx, abbrevs=metadata::cwriter::ac_no_abbrevs);\n+    auto s = metadata::cwriter::encode::ty_str(ecx, typ);\n     if (str::byte_len(s) >= 32u) { s = str::substr(s, 0u, 32u); }\n     ret s;\n }"}, {"sha": "b2247149a6eede5fe33cca97a8a15c200e328ee9", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ba5c7a570d1bc6f28e7a2f4eb5cfd50b7c19f374/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/ba5c7a570d1bc6f28e7a2f4eb5cfd50b7c19f374/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=ba5c7a570d1bc6f28e7a2f4eb5cfd50b7c19f374", "patch": "@@ -18,7 +18,6 @@ mod middle {\n     mod ty;\n     mod walk;\n     mod visit;\n-    mod metadata;\n     mod ast_map;\n     mod resolve;\n     mod typeck;\n@@ -46,7 +45,6 @@ mod pretty {\n \n mod front {\n     mod ast;\n-    mod creader;\n     mod ext;\n     mod extfmt;\n     mod extenv;\n@@ -64,6 +62,11 @@ mod back {\n     mod x86;\n }\n \n+mod metadata {\n+    mod creader;\n+    mod cwriter;\n+}\n+\n mod driver {\n     mod rustc;\n     mod session;"}]}