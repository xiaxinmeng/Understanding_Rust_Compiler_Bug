{"sha": "7568d0770934345be183670652e8064c06c05caf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NjhkMDc3MDkzNDM0NWJlMTgzNjcwNjUyZTgwNjRjMDZjMDVjYWY=", "commit": {"author": {"name": "Timo Freiberg", "email": "timo.freiberg@gmail.com", "date": "2020-05-02T23:01:59Z"}, "committer": {"name": "Timo Freiberg", "email": "timo.freiberg@gmail.com", "date": "2020-05-10T11:54:04Z"}, "message": "Trigger change_visibility assist when on a path to an invisible def", "tree": {"sha": "b5db44882d8437f15faad95bf4af4e22f2f6875b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5db44882d8437f15faad95bf4af4e22f2f6875b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7568d0770934345be183670652e8064c06c05caf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7568d0770934345be183670652e8064c06c05caf", "html_url": "https://github.com/rust-lang/rust/commit/7568d0770934345be183670652e8064c06c05caf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7568d0770934345be183670652e8064c06c05caf/comments", "author": {"login": "TimoFreiberg", "id": 5281645, "node_id": "MDQ6VXNlcjUyODE2NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5281645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimoFreiberg", "html_url": "https://github.com/TimoFreiberg", "followers_url": "https://api.github.com/users/TimoFreiberg/followers", "following_url": "https://api.github.com/users/TimoFreiberg/following{/other_user}", "gists_url": "https://api.github.com/users/TimoFreiberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimoFreiberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimoFreiberg/subscriptions", "organizations_url": "https://api.github.com/users/TimoFreiberg/orgs", "repos_url": "https://api.github.com/users/TimoFreiberg/repos", "events_url": "https://api.github.com/users/TimoFreiberg/events{/privacy}", "received_events_url": "https://api.github.com/users/TimoFreiberg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimoFreiberg", "id": 5281645, "node_id": "MDQ6VXNlcjUyODE2NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5281645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimoFreiberg", "html_url": "https://github.com/TimoFreiberg", "followers_url": "https://api.github.com/users/TimoFreiberg/followers", "following_url": "https://api.github.com/users/TimoFreiberg/following{/other_user}", "gists_url": "https://api.github.com/users/TimoFreiberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimoFreiberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimoFreiberg/subscriptions", "organizations_url": "https://api.github.com/users/TimoFreiberg/orgs", "repos_url": "https://api.github.com/users/TimoFreiberg/repos", "events_url": "https://api.github.com/users/TimoFreiberg/events{/privacy}", "received_events_url": "https://api.github.com/users/TimoFreiberg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4578154b608fa075595103d0c933da60d55b25c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4578154b608fa075595103d0c933da60d55b25c8", "html_url": "https://github.com/rust-lang/rust/commit/4578154b608fa075595103d0c933da60d55b25c8"}], "stats": {"total": 329, "additions": 328, "deletions": 1}, "files": [{"sha": "573f94a46f44ca93c903272ad4159819a8de60ba", "filename": "crates/ra_assists/src/handlers/change_visibility.rs", "status": "modified", "additions": 328, "deletions": 1, "changes": 329, "blob_url": "https://github.com/rust-lang/rust/blob/7568d0770934345be183670652e8064c06c05caf/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7568d0770934345be183670652e8064c06c05caf/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs?ref=7568d0770934345be183670652e8064c06c05caf", "patch": "@@ -5,8 +5,10 @@ use ra_syntax::{\n         ATTR, COMMENT, CONST_DEF, ENUM_DEF, FN_DEF, MODULE, STRUCT_DEF, TRAIT_DEF, VISIBILITY,\n         WHITESPACE,\n     },\n-    SyntaxNode, TextSize, T,\n+    SyntaxNode, TextRange, TextSize, T,\n };\n+\n+use hir::{db::HirDatabase, HasSource, PathResolution};\n use test_utils::tested_by;\n \n use crate::{AssistContext, AssistId, Assists};\n@@ -72,6 +74,88 @@ fn add_vis(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     })\n }\n \n+fn add_missing_vis(ctx: AssistCtx) -> Option<Assist> {\n+    let path: ast::Path = ctx.find_node_at_offset()?;\n+    let path_res = dbg!(ctx.sema.resolve_path(&path))?;\n+    let def = match path_res {\n+        PathResolution::Def(def) => def,\n+        _ => return None,\n+    };\n+    dbg!(&def);\n+\n+    let current_module = dbg!(ctx.sema.scope(&path.syntax()).module())?;\n+    let target_module = dbg!(def.module(ctx.db))?;\n+\n+    let vis = dbg!(target_module.visibility_of(ctx.db, &def))?;\n+    if vis.is_visible_from(ctx.db, current_module.into()) {\n+        return None;\n+    };\n+    let target_name;\n+\n+    let (offset, target) = match def {\n+        hir::ModuleDef::Function(f) => {\n+            target_name = Some(f.name(ctx.db));\n+            offset_and_target(ctx.db, f)\n+        }\n+        hir::ModuleDef::Adt(adt) => {\n+            target_name = Some(adt.name(ctx.db));\n+            match adt {\n+                hir::Adt::Struct(s) => offset_and_target(ctx.db, s),\n+                hir::Adt::Union(u) => offset_and_target(ctx.db, u),\n+                hir::Adt::Enum(e) => offset_and_target(ctx.db, e),\n+            }\n+        }\n+        hir::ModuleDef::Const(c) => {\n+            target_name = c.name(ctx.db);\n+            offset_and_target(ctx.db, c)\n+        }\n+        hir::ModuleDef::Static(s) => {\n+            target_name = s.name(ctx.db);\n+            offset_and_target(ctx.db, s)\n+        }\n+        hir::ModuleDef::Trait(t) => {\n+            target_name = Some(t.name(ctx.db));\n+            offset_and_target(ctx.db, t)\n+        }\n+        hir::ModuleDef::TypeAlias(t) => {\n+            target_name = Some(t.name(ctx.db));\n+            offset_and_target(ctx.db, t)\n+        }\n+        hir::ModuleDef::Module(m) => {\n+            target_name = m.name(ctx.db);\n+            let source = dbg!(m.declaration_source(ctx.db))?.value;\n+            let syntax = source.syntax();\n+            (vis_offset(syntax), syntax.text_range())\n+        }\n+        // Enum variants can't be private, we can't modify builtin types\n+        hir::ModuleDef::EnumVariant(_) | hir::ModuleDef::BuiltinType(_) => return None,\n+    };\n+\n+    // FIXME if target is in another crate, add `pub` instead of `pub(crate)`\n+\n+    let assist_label = match target_name {\n+        None => \"Change visibility to pub(crate)\".to_string(),\n+        Some(name) => format!(\"Change visibility of {} to pub(crate)\", name),\n+    };\n+    let target_file = target_module.definition_source(ctx.db).file_id.original_file(ctx.db);\n+\n+    ctx.add_assist(AssistId(\"change_visibility\"), assist_label, target, |edit| {\n+        edit.set_file(target_file);\n+        edit.insert(offset, \"pub(crate) \");\n+        edit.set_cursor(offset);\n+    })\n+}\n+\n+fn offset_and_target<S, Ast>(db: &dyn HirDatabase, x: S) -> (TextSize, TextRange)\n+where\n+    S: HasSource<Ast = Ast>,\n+    Ast: AstNode,\n+{\n+    let source = x.source(db);\n+    let syntax = source.syntax().value;\n+    (vis_offset(syntax), syntax.text_range())\n+}\n+\n fn vis_offset(node: &SyntaxNode) -> TextSize {\n     node.children_with_tokens()\n         .skip_while(|it| match it.kind() {\n@@ -191,6 +275,249 @@ mod tests {\n         )\n     }\n \n+    #[test]\n+    fn change_visibility_of_fn_via_path() {\n+        check_assist(\n+            change_visibility,\n+            r\"mod foo { fn foo() {} }\n+              fn main() { foo::foo<|>() } \",\n+            r\"mod foo { <|>pub(crate) fn foo() {} }\n+              fn main() { foo::foo() } \",\n+        );\n+        check_assist_not_applicable(\n+            change_visibility,\n+            r\"mod foo { pub fn foo() {} }\n+              fn main() { foo::foo<|>() } \",\n+        )\n+    }\n+\n+    #[test]\n+    fn change_visibility_of_adt_in_submodule_via_path() {\n+        check_assist(\n+            change_visibility,\n+            r\"mod foo { struct Foo; }\n+              fn main() { foo::Foo<|> } \",\n+            r\"mod foo { <|>pub(crate) struct Foo; }\n+              fn main() { foo::Foo } \",\n+        );\n+        check_assist_not_applicable(\n+            change_visibility,\n+            r\"mod foo { pub struct Foo; }\n+              fn main() { foo::Foo<|> } \",\n+        );\n+        check_assist(\n+            change_visibility,\n+            r\"mod foo { enum Foo; }\n+              fn main() { foo::Foo<|> } \",\n+            r\"mod foo { <|>pub(crate) enum Foo; }\n+              fn main() { foo::Foo } \",\n+        );\n+        check_assist_not_applicable(\n+            change_visibility,\n+            r\"mod foo { pub enum Foo; }\n+              fn main() { foo::Foo<|> } \",\n+        );\n+        check_assist(\n+            change_visibility,\n+            r\"mod foo { union Foo; }\n+              fn main() { foo::Foo<|> } \",\n+            r\"mod foo { <|>pub(crate) union Foo; }\n+              fn main() { foo::Foo } \",\n+        );\n+        check_assist_not_applicable(\n+            change_visibility,\n+            r\"mod foo { pub union Foo; }\n+              fn main() { foo::Foo<|> } \",\n+        );\n+    }\n+\n+    #[test]\n+    fn change_visibility_of_adt_in_other_file_via_path() {\n+        check_assist(\n+            change_visibility,\n+            r\"\n+              //- /main.rs\n+              mod foo;\n+              fn main() { foo::Foo<|> }\n+\n+              //- /foo.rs\n+              struct Foo;\n+              \",\n+            r\"<|>pub(crate) struct Foo;\n+\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    // FIXME this requires a separate implementation, struct fields are not a ast::Path\n+    fn change_visibility_of_struct_field_via_path() {\n+        check_assist(\n+            change_visibility,\n+            r\"mod foo { pub struct Foo { bar: (), } }\n+              fn main() { foo::Foo { <|>bar: () }; } \",\n+            r\"mod foo { pub struct Foo { <|>pub(crate) bar: (), } }\n+              fn main() { foo::Foo { bar: () }; } \",\n+        );\n+        check_assist_not_applicable(\n+            change_visibility,\n+            r\"mod foo { pub struct Foo { pub bar: (), } }\n+              fn main() { foo::Foo { <|>bar: () }; } \",\n+        );\n+    }\n+\n+    #[test]\n+    fn not_applicable_for_enum_variants() {\n+        check_assist_not_applicable(\n+            change_visibility,\n+            r\"mod foo { pub enum Foo {Foo1} }\n+              fn main() { foo::Foo::Foo1<|> } \",\n+        );\n+    }\n+\n+    #[test]\n+    fn change_visibility_of_const_via_path() {\n+        check_assist(\n+            change_visibility,\n+            r\"mod foo { const FOO: () = (); }\n+              fn main() { foo::FOO<|> } \",\n+            r\"mod foo { <|>pub(crate) const FOO: () = (); }\n+              fn main() { foo::FOO } \",\n+        );\n+        check_assist_not_applicable(\n+            change_visibility,\n+            r\"mod foo { pub const FOO: () = (); }\n+              fn main() { foo::FOO<|> } \",\n+        );\n+    }\n+\n+    #[test]\n+    fn change_visibility_of_static_via_path() {\n+        check_assist(\n+            change_visibility,\n+            r\"mod foo { static FOO: () = (); }\n+              fn main() { foo::FOO<|> } \",\n+            r\"mod foo { <|>pub(crate) static FOO: () = (); }\n+              fn main() { foo::FOO } \",\n+        );\n+        check_assist_not_applicable(\n+            change_visibility,\n+            r\"mod foo { pub static FOO: () = (); }\n+              fn main() { foo::FOO<|> } \",\n+        );\n+    }\n+\n+    #[test]\n+    fn change_visibility_of_trait_via_path() {\n+        check_assist(\n+            change_visibility,\n+            r\"mod foo { trait Foo { fn foo(&self) {} } }\n+              fn main() { let x: &dyn foo::<|>Foo; } \",\n+            r\"mod foo { <|>pub(crate) trait Foo { fn foo(&self) {} } }\n+              fn main() { let x: &dyn foo::Foo; } \",\n+        );\n+        check_assist_not_applicable(\n+            change_visibility,\n+            r\"mod foo { pub trait Foo { fn foo(&self) {} } }\n+              fn main() { let x: &dyn foo::Foo<|>; } \",\n+        );\n+    }\n+\n+    #[test]\n+    fn change_visibility_of_type_alias_via_path() {\n+        check_assist(\n+            change_visibility,\n+            r\"mod foo { type Foo = (); }\n+              fn main() { let x: foo::Foo<|>; } \",\n+            r\"mod foo { <|>pub(crate) type Foo = (); }\n+              fn main() { let x: foo::Foo; } \",\n+        );\n+        check_assist_not_applicable(\n+            change_visibility,\n+            r\"mod foo { pub type Foo = (); }\n+              fn main() { let x: foo::Foo<|>; } \",\n+        );\n+    }\n+\n+    #[test]\n+    fn change_visibility_of_module_via_path() {\n+        check_assist(\n+            change_visibility,\n+            r\"mod foo { mod bar { fn bar() {} } }\n+              fn main() { foo::bar<|>::bar(); } \",\n+            r\"mod foo { <|>pub(crate) mod bar { fn bar() {} } }\n+              fn main() { foo::bar::bar(); } \",\n+        );\n+\n+        check_assist(\n+            change_visibility,\n+            r\"\n+            //- /main.rs\n+            mod foo;\n+            fn main() { foo::bar<|>::baz(); }\n+\n+            //- /foo.rs\n+            mod bar {\n+                pub fn baz() {}\n+            }\n+            \",\n+            r\"<|>pub(crate) mod bar {\n+    pub fn baz() {}\n+}\n+\n+\",\n+        );\n+\n+        check_assist_not_applicable(\n+            change_visibility,\n+            r\"mod foo { pub mod bar { pub fn bar() {} } }\n+              fn main() { foo::bar<|>::bar(); } \",\n+        );\n+    }\n+\n+    #[test]\n+    fn change_visibility_of_inline_module_in_other_file_via_path() {\n+        check_assist(\n+            change_visibility,\n+            r\"\n+            //- /main.rs\n+            mod foo;\n+            fn main() { foo::bar<|>::baz(); }\n+\n+            //- /foo.rs\n+            mod bar;\n+\n+            //- /foo/bar.rs\n+            pub fn baz() {}\n+            }\n+            \",\n+            r\"<|>pub(crate) mod bar;\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn change_visibility_of_module_declaration_in_other_file_via_path() {\n+        check_assist(\n+            change_visibility,\n+            r\"\n+            //- /main.rs\n+            mod foo;\n+            fn main() { foo::bar<|>>::baz(); }\n+\n+            //- /foo.rs\n+            mod bar {\n+                pub fn baz() {}\n+            }\n+            \",\n+            r\"<|>pub(crate) mod bar {\n+    pub fn baz() {}\n+}\n+\n+\",\n+        );\n+    }\n+\n     #[test]\n     fn change_visibility_target() {\n         check_assist_target(change_visibility, \"<|>fn foo() {}\", \"fn\");"}]}