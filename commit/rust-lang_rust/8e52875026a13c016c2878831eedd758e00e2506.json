{"sha": "8e52875026a13c016c2878831eedd758e00e2506", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlNTI4NzUwMjZhMTNjMDE2YzI4Nzg4MzFlZWRkNzU4ZTAwZTI1MDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-11T04:23:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-11T04:23:40Z"}, "message": "Auto merge of #28312 - GuillaumeGomez:privacy, r=Manishearth\n\nr? @Manishearth", "tree": {"sha": "0b2abc8dcae1c8a8c0e2abdbe85001afc04d933c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b2abc8dcae1c8a8c0e2abdbe85001afc04d933c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e52875026a13c016c2878831eedd758e00e2506", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e52875026a13c016c2878831eedd758e00e2506", "html_url": "https://github.com/rust-lang/rust/commit/8e52875026a13c016c2878831eedd758e00e2506", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e52875026a13c016c2878831eedd758e00e2506/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6d64219a4ef8133e5946bf174e5951281b06430", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6d64219a4ef8133e5946bf174e5951281b06430", "html_url": "https://github.com/rust-lang/rust/commit/f6d64219a4ef8133e5946bf174e5951281b06430"}, {"sha": "0477976867ddf3198ea62efdc2043e38b96eedd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0477976867ddf3198ea62efdc2043e38b96eedd5", "html_url": "https://github.com/rust-lang/rust/commit/0477976867ddf3198ea62efdc2043e38b96eedd5"}], "stats": {"total": 263, "additions": 252, "deletions": 11}, "files": [{"sha": "0f9f00e1b49a9ffa9611b1313362baf5238521a2", "filename": "src/librustc_privacy/diagnostics.rs", "status": "added", "additions": 235, "deletions": 0, "changes": 235, "blob_url": "https://github.com/rust-lang/rust/blob/8e52875026a13c016c2878831eedd758e00e2506/src%2Flibrustc_privacy%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e52875026a13c016c2878831eedd758e00e2506/src%2Flibrustc_privacy%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Fdiagnostics.rs?ref=8e52875026a13c016c2878831eedd758e00e2506", "patch": "@@ -0,0 +1,235 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(non_snake_case)]\n+\n+register_long_diagnostics! {\n+\n+E0445: r##\"\n+A private trait was used on a public type parameter bound. Erroneous code\n+examples:\n+\n+```\n+trait Foo {\n+    fn dummy(&self) { }\n+}\n+\n+pub trait Bar : Foo {} // error: private trait in exported type parameter bound\n+pub struct Bar<T: Foo>(pub T); // same error\n+pub fn foo<T: Foo> (t: T) {} // same error\n+```\n+\n+To solve this error, please ensure that the trait is also public and accessible\n+at the same level of the public functions or types which are bound on it.\n+Example:\n+\n+```\n+pub trait Foo { // we set the Foo trait public\n+    fn dummy(&self) { }\n+}\n+\n+pub trait Bar : Foo {} // ok!\n+pub struct Bar<T: Foo>(pub T); // ok!\n+pub fn foo<T: Foo> (t: T) {} // ok!\n+```\n+\"##,\n+\n+E0446: r##\"\n+A private type was used in an exported type signature. Erroneous code example:\n+\n+```\n+mod Foo {\n+    struct Bar(u32);\n+\n+    pub fn bar() -> Bar { // error: private type in exported type signature\n+        Bar(0)\n+    }\n+}\n+```\n+\n+To solve this error, please ensure that the type is also public and accessible\n+at the same level of the public functions or types which use it. Example:\n+\n+```\n+mod Foo {\n+    pub struct Bar(u32); // we set the Bar type public\n+\n+    pub fn bar() -> Bar { // ok!\n+        Bar(0)\n+    }\n+}\n+```\n+\"##,\n+\n+E0447: r##\"\n+The `pub` keyword was used inside a function. Erroneous code example:\n+\n+```\n+fn foo() {\n+    pub struct Bar; // error: visibility has no effect inside functions\n+}\n+```\n+\n+Since we cannot access items defined inside a function, the visibility of its\n+items does not impact outer code. So using the `pub` keyword in this context\n+is invalid.\n+\"##,\n+\n+E0448: r##\"\n+The `pub` keyword was used inside a public enum. Erroneous code example:\n+\n+```\n+pub enum Foo {\n+    pub Bar, // error: unnecessary `pub` visibility\n+}\n+```\n+\n+Since the enum is already public, adding `pub` on one its elements is\n+unnecessary. Example:\n+\n+```\n+enum Foo {\n+    pub Bar, // ok!\n+}\n+\n+// or:\n+\n+pub enum Foo {\n+    Bar, // ok!\n+}\n+```\n+\"##,\n+\n+E0449: r##\"\n+A visibility qualifier was used when it was unnecessary. Erroneous code\n+examples:\n+\n+```\n+struct Bar;\n+\n+trait Foo {\n+    fn foo();\n+}\n+\n+pub impl Bar {} // error: unnecessary visibility qualifier\n+\n+pub impl Foo for Bar { // error: unnecessary visibility qualifier\n+    pub fn foo() {} // error: unnecessary visibility qualifier\n+}\n+```\n+\n+To fix this error, please remove the visibility qualifier when it is not\n+required. Example:\n+\n+```\n+struct Bar;\n+\n+trait Foo {\n+    fn foo();\n+}\n+\n+// Directly implemented methods share the visibility of the type itself,\n+// so `pub` is unnecessary here\n+impl Bar {}\n+\n+// Trait methods share the visibility of the trait, so `pub` is\n+// unnecessary in either case\n+pub impl Foo for Bar {\n+    pub fn foo() {}\n+}\n+```\n+\"##,\n+\n+E0450: r##\"\n+A tuple constructor was invoked while some of its fields are private. Erroneous\n+code example:\n+\n+```\n+mod Bar {\n+    pub struct Foo(isize);\n+}\n+\n+let f = Bar::Foo(0); // error: cannot invoke tuple struct constructor with\n+                     //        private fields\n+```\n+\n+To solve this issue, please ensure that all of the fields of the tuple struct\n+are public. Alternatively, provide a new() method to the tuple struct to\n+construct it from a given inner value. Example:\n+\n+```\n+mod Bar {\n+    pub struct Foo(pub isize); // we set its field to public\n+}\n+\n+let f = Bar::Foo(0); // ok!\n+\n+// or:\n+mod bar {\n+    pub struct Foo(isize);\n+\n+    impl Foo {\n+        pub fn new(x: isize) {\n+            Foo(x)\n+        }\n+    }\n+}\n+\n+let f = bar::Foo::new(1);\n+```\n+\"##,\n+\n+E0451: r##\"\n+A struct constructor with private fields was invoked. Erroneous code example:\n+\n+```\n+mod Bar {\n+    pub struct Foo {\n+        pub a: isize,\n+        b: isize,\n+    }\n+}\n+\n+let f = Bar::Foo{ a: 0, b: 0 }; // error: field `b` of struct `Bar::Foo`\n+                                //        is private\n+```\n+\n+To fix this error, please ensure that all the fields of the struct, or\n+implement a function for easy instantiation. Examples:\n+\n+```\n+mod Bar {\n+    pub struct Foo {\n+        pub a: isize,\n+        pub b: isize, // we set `b` field public\n+    }\n+}\n+\n+let f = Bar::Foo{ a: 0, b: 0 }; // ok!\n+\n+// or:\n+mod Bar {\n+    pub struct Foo {\n+        pub a: isize,\n+        b: isize, // still private\n+    }\n+\n+    impl Foo {\n+        pub fn new() -> Foo { // we create a method to instantiate `Foo`\n+            Foo { a: 0, b: 0 }\n+        }\n+    }\n+}\n+\n+let f = Bar::Foo::new(); // ok!\n+```\n+\"##,\n+\n+}"}, {"sha": "48efd34e2122036abe992980b0489944cfd4a985", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8e52875026a13c016c2878831eedd758e00e2506/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e52875026a13c016c2878831eedd758e00e2506/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=8e52875026a13c016c2878831eedd758e00e2506", "patch": "@@ -50,6 +50,8 @@ use rustc::front::map as ast_map;\n use syntax::ast;\n use syntax::codemap::Span;\n \n+pub mod diagnostics;\n+\n type Context<'a, 'tcx> = (&'a ty::MethodMap<'tcx>, &'a def::ExportMap);\n \n /// Result of a checking operation - None => no errors were found. Some => an\n@@ -715,7 +717,8 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n             UnnamedField(idx) => format!(\"field #{} of {} is private\",\n                                          idx + 1, struct_desc),\n         };\n-        self.tcx.sess.span_err(span, &msg[..]);\n+        span_err!(self.tcx.sess, span, E0451,\n+                  \"{}\", &msg[..]);\n     }\n \n     // Given the ID of a method, checks to ensure it's in scope.\n@@ -929,9 +932,9 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivacyVisitor<'a, 'tcx> {\n                         });\n \n                     if any_priv {\n-                        self.tcx.sess.span_err(expr.span,\n-                                               \"cannot invoke tuple struct constructor \\\n-                                                with private fields\");\n+                        span_err!(self.tcx.sess, expr.span, E0450,\n+                                  \"cannot invoke tuple struct constructor with private \\\n+                                   fields\");\n                     }\n                 }\n             }\n@@ -1043,7 +1046,8 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n         let tcx = self.tcx;\n         let check_inherited = |sp: Span, vis: hir::Visibility, note: &str| {\n             if vis != hir::Inherited {\n-                tcx.sess.span_err(sp, \"unnecessary visibility qualifier\");\n+                span_err!(tcx.sess, sp, E0449,\n+                          \"unnecessary visibility qualifier\");\n                 if !note.is_empty() {\n                     tcx.sess.span_note(sp, note);\n                 }\n@@ -1076,8 +1080,8 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n                     match v.node.vis {\n                         hir::Public => {\n                             if item.vis == hir::Public {\n-                                tcx.sess.span_err(v.span, \"unnecessary `pub` \\\n-                                                           visibility\");\n+                                span_err!(tcx.sess, v.span, E0448,\n+                                          \"unnecessary `pub` visibility\");\n                             }\n                         }\n                         hir::Inherited => {}\n@@ -1098,7 +1102,8 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n         let tcx = self.tcx;\n         fn check_inherited(tcx: &ty::ctxt, sp: Span, vis: hir::Visibility) {\n             if vis != hir::Inherited {\n-                tcx.sess.span_err(sp, \"visibility has no effect inside functions\");\n+                span_err!(tcx.sess, sp, E0447,\n+                          \"visibility has no effect inside functions\");\n             }\n         }\n         let check_struct = |def: &hir::StructDef| {\n@@ -1193,8 +1198,8 @@ impl<'a, 'tcx> VisiblePrivateTypesVisitor<'a, 'tcx> {\n             if !self.tcx.sess.features.borrow().visible_private_types &&\n                 self.path_is_private_type(trait_ref.trait_ref.ref_id) {\n                     let span = trait_ref.trait_ref.path.span;\n-                    self.tcx.sess.span_err(span, \"private trait in exported type \\\n-                                                  parameter bound\");\n+                    span_err!(self.tcx.sess, span, E0445,\n+                              \"private trait in exported type parameter bound\");\n             }\n         }\n     }\n@@ -1435,7 +1440,8 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n         if let hir::TyPath(_, ref p) = t.node {\n             if !self.tcx.sess.features.borrow().visible_private_types &&\n                 self.path_is_private_type(t.id) {\n-                self.tcx.sess.span_err(p.span, \"private type in exported type signature\");\n+                span_err!(self.tcx.sess, p.span, E0446,\n+                          \"private type in exported type signature\");\n             }\n         }\n         visit::walk_ty(self, t)"}]}