{"sha": "a667049c33753dec2ea236fcca3dbf3a7540a5df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NjcwNDljMzM3NTNkZWMyZWEyMzZmY2NhM2RiZjNhNzU0MGE1ZGY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-01T13:41:44Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-01T14:06:02Z"}, "message": "also check `let` arms and nested patterns for mutable borrows", "tree": {"sha": "1d541f1d98a6328b59d9df5815207eb24dfeed0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d541f1d98a6328b59d9df5815207eb24dfeed0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a667049c33753dec2ea236fcca3dbf3a7540a5df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a667049c33753dec2ea236fcca3dbf3a7540a5df", "html_url": "https://github.com/rust-lang/rust/commit/a667049c33753dec2ea236fcca3dbf3a7540a5df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a667049c33753dec2ea236fcca3dbf3a7540a5df/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "577a5b2703d97e5408664e409f35768944360fea", "url": "https://api.github.com/repos/rust-lang/rust/commits/577a5b2703d97e5408664e409f35768944360fea", "html_url": "https://github.com/rust-lang/rust/commit/577a5b2703d97e5408664e409f35768944360fea"}], "stats": {"total": 216, "additions": 211, "deletions": 5}, "files": [{"sha": "959dda69e30ed81d69ab2f88b9ab4e35adb45339", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a667049c33753dec2ea236fcca3dbf3a7540a5df/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a667049c33753dec2ea236fcca3dbf3a7540a5df/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=a667049c33753dec2ea236fcca3dbf3a7540a5df", "patch": "@@ -936,16 +936,32 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                            span: Span,\n                            expr_ty: Ty<'tcx>)\n                            -> cmt_<'tcx> {\n+        debug!(\n+            \"cat_rvalue_node(id={:?}, span={:?}, expr_ty={:?})\",\n+            id,\n+            span,\n+            expr_ty,\n+        );\n         let hir_id = self.tcx.hir.node_to_hir_id(id);\n         let promotable = self.rvalue_promotable_map.as_ref().map(|m| m.contains(&hir_id.local_id))\n                                                             .unwrap_or(false);\n \n+        debug!(\n+            \"cat_rvalue_node: promotable = {:?}\",\n+            promotable,\n+        );\n+\n         // Always promote `[T; 0]` (even when e.g. borrowed mutably).\n         let promotable = match expr_ty.sty {\n             ty::TyArray(_, len) if len.assert_usize(self.tcx) == Some(0) => true,\n             _ => promotable,\n         };\n \n+        debug!(\n+            \"cat_rvalue_node: promotable = {:?} (2)\",\n+            promotable,\n+        );\n+\n         // Compute maximum lifetime of this rvalue. This is 'static if\n         // we can promote to a constant, otherwise equal to enclosing temp\n         // lifetime."}, {"sha": "74b9315f0c1eed1a043313a99d23e964b9dc8bf9", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a667049c33753dec2ea236fcca3dbf3a7540a5df/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a667049c33753dec2ea236fcca3dbf3a7540a5df/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=a667049c33753dec2ea236fcca3dbf3a7540a5df", "patch": "@@ -150,6 +150,23 @@ impl<'a, 'gcx> CheckCrateVisitor<'a, 'gcx> {\n                 span.allows_unstable();\n         }\n     }\n+\n+    /// While the `ExprUseVisitor` walks, we will identify which\n+    /// expressions are borrowed, and insert their ids into this\n+    /// table. Actually, we insert the \"borrow-id\", which is normally\n+    /// the id of the expession being borrowed: but in the case of\n+    /// `ref mut` borrows, the `id` of the pattern is\n+    /// inserted. Therefore later we remove that entry from the table\n+    /// and transfer it over to the value being matched. This will\n+    /// then prevent said value from being promoted.\n+    fn remove_mut_rvalue_borrow(&mut self, pat: &hir::Pat) -> bool {\n+        let mut any_removed = false;\n+        pat.walk(|p| {\n+            any_removed |= self.mut_rvalue_borrows.remove(&p.id);\n+            true\n+        });\n+        any_removed\n+    }\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for CheckCrateVisitor<'a, 'tcx> {\n@@ -200,9 +217,15 @@ impl<'a, 'tcx> Visitor<'tcx> for CheckCrateVisitor<'a, 'tcx> {\n     fn visit_stmt(&mut self, stmt: &'tcx hir::Stmt) {\n         match stmt.node {\n             hir::StmtDecl(ref decl, _) => {\n-                match decl.node {\n-                    hir::DeclLocal(_) => {\n+                match &decl.node {\n+                    hir::DeclLocal(local) => {\n                         self.promotable = false;\n+\n+                        if self.remove_mut_rvalue_borrow(&local.pat) {\n+                            if let Some(init) = &local.init {\n+                                self.mut_rvalue_borrows.insert(init.id);\n+                            }\n+                        }\n                     }\n                     // Item statements are allowed\n                     hir::DeclItem(_) => {}\n@@ -229,9 +252,7 @@ impl<'a, 'tcx> Visitor<'tcx> for CheckCrateVisitor<'a, 'tcx> {\n             // patterns and set that on the discriminator.\n             let mut mut_borrow = false;\n             for pat in arms.iter().flat_map(|arm| &arm.pats) {\n-                if self.mut_rvalue_borrows.remove(&pat.id) {\n-                    mut_borrow = true;\n-                }\n+                mut_borrow = self.remove_mut_rvalue_borrow(pat);\n             }\n             if mut_borrow {\n                 self.mut_rvalue_borrows.insert(discr.id);\n@@ -498,6 +519,14 @@ impl<'a, 'gcx, 'tcx> euv::Delegate<'tcx> for CheckCrateVisitor<'a, 'gcx> {\n               _loan_region: ty::Region<'tcx>,\n               bk: ty::BorrowKind,\n               loan_cause: euv::LoanCause) {\n+        debug!(\n+            \"borrow(borrow_id={:?}, cmt={:?}, bk={:?}, loan_cause={:?})\",\n+            borrow_id,\n+            cmt,\n+            bk,\n+            loan_cause,\n+        );\n+\n         // Kind of hacky, but we allow Unsafe coercions in constants.\n         // These occur when we convert a &T or *T to a *U, as well as\n         // when making a thin pointer (e.g., `*T`) into a fat pointer"}, {"sha": "95acdab3e80012e3c7c94d179e2667901c7fc3b2", "filename": "src/test/ui/borrowck/promote-ref-mut-in-let-issue-46557.nll.stderr", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/a667049c33753dec2ea236fcca3dbf3a7540a5df/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a667049c33753dec2ea236fcca3dbf3a7540a5df/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.nll.stderr?ref=a667049c33753dec2ea236fcca3dbf3a7540a5df", "patch": "@@ -0,0 +1,63 @@\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:15:21\n+   |\n+LL |   fn gimme_static_mut_let() -> &'static mut u32 {\n+   |  _______________________________________________-\n+LL | |     let ref mut x = 1234543; //~ ERROR\n+   | |                     ^^^^^^^ temporary value does not live long enough\n+LL | |     x\n+LL | | }\n+   | | -\n+   | | |\n+   | |_temporary value only lives until here\n+   |   borrow later used here\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:20:25\n+   |\n+LL |   fn gimme_static_mut_let_nested() -> &'static mut u32 {\n+   |  ______________________________________________________-\n+LL | |     let (ref mut x, ) = (1234543, ); //~ ERROR\n+   | |                         ^^^^^^^^^^^ temporary value does not live long enough\n+LL | |     x\n+LL | | }\n+   | | -\n+   | | |\n+   | |_temporary value only lives until here\n+   |   borrow later used here\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:25:11\n+   |\n+LL |     match 1234543 {\n+   |           ^^^^^^^ temporary value does not live long enough\n+...\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:31:11\n+   |\n+LL |     match (123443,) {\n+   |           ^^^^^^^^^ temporary value does not live long enough\n+...\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:37:10\n+   |\n+LL |     &mut 1234543 //~ ERROR\n+   |          ^^^^^^^ temporary value does not live long enough\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "4c5f458d6a35f010ce9ffedc22d52619728d3d20", "filename": "src/test/ui/borrowck/promote-ref-mut-in-let-issue-46557.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a667049c33753dec2ea236fcca3dbf3a7540a5df/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a667049c33753dec2ea236fcca3dbf3a7540a5df/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.rs?ref=a667049c33753dec2ea236fcca3dbf3a7540a5df", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we fail to promote the constant here which has a `ref\n+// mut` borrow.\n+\n+fn gimme_static_mut_let() -> &'static mut u32 {\n+    let ref mut x = 1234543; //~ ERROR\n+    x\n+}\n+\n+fn gimme_static_mut_let_nested() -> &'static mut u32 {\n+    let (ref mut x, ) = (1234543, ); //~ ERROR\n+    x\n+}\n+\n+fn gimme_static_mut_match() -> &'static mut u32 {\n+    match 1234543 {\n+        ref mut x => x //~ ERROR\n+    }\n+}\n+\n+fn gimme_static_mut_match_nested() -> &'static mut u32 {\n+    match (123443,) {\n+        (ref mut x,) => x, //~ ERROR\n+    }\n+}\n+\n+fn gimme_static_mut_ampersand() -> &'static mut u32 {\n+    &mut 1234543 //~ ERROR\n+}\n+\n+fn main() {\n+}"}, {"sha": "931eb7da744e94b412d6873e22a2d508fd3b5af6", "filename": "src/test/ui/borrowck/promote-ref-mut-in-let-issue-46557.stderr", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/a667049c33753dec2ea236fcca3dbf3a7540a5df/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a667049c33753dec2ea236fcca3dbf3a7540a5df/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.stderr?ref=a667049c33753dec2ea236fcca3dbf3a7540a5df", "patch": "@@ -0,0 +1,57 @@\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:15:9\n+   |\n+LL |     let ref mut x = 1234543; //~ ERROR\n+   |         ^^^^^^^^^ temporary value does not live long enough\n+LL |     x\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:20:10\n+   |\n+LL |     let (ref mut x, ) = (1234543, ); //~ ERROR\n+   |          ^^^^^^^^^ borrowed value does not live long enough\n+LL |     x\n+LL | }\n+   | - borrowed value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:26:9\n+   |\n+LL |         ref mut x => x //~ ERROR\n+   |         ^^^^^^^^^ temporary value does not live long enough\n+LL |     }\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:32:10\n+   |\n+LL |         (ref mut x,) => x, //~ ERROR\n+   |          ^^^^^^^^^ borrowed value does not live long enough\n+LL |     }\n+LL | }\n+   | - borrowed value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:37:10\n+   |\n+LL |     &mut 1234543 //~ ERROR\n+   |          ^^^^^^^ temporary value does not live long enough\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}]}