{"sha": "678b1659f9a9536a4ee9901e2cd51c7daa4532c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3OGIxNjU5ZjlhOTUzNmE0ZWU5OTAxZTJjZDUxYzdkYWE0NTMyYzk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-06T06:50:07Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-07T15:11:19Z"}, "message": "std: Implement the Buffer trait for some wrappers\n\nThis will allow methods like read_line() on RefReader, LimitReader, etc.", "tree": {"sha": "478de49b2f34193151460fbbb808c04fecc7ee4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/478de49b2f34193151460fbbb808c04fecc7ee4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/678b1659f9a9536a4ee9901e2cd51c7daa4532c9", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/678b1659f9a9536a4ee9901e2cd51c7daa4532c9", "html_url": "https://github.com/rust-lang/rust/commit/678b1659f9a9536a4ee9901e2cd51c7daa4532c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/678b1659f9a9536a4ee9901e2cd51c7daa4532c9/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef6daf9935da103f1b915a5c9904794da79b0b60", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef6daf9935da103f1b915a5c9904794da79b0b60", "html_url": "https://github.com/rust-lang/rust/commit/ef6daf9935da103f1b915a5c9904794da79b0b60"}], "stats": {"total": 64, "additions": 63, "deletions": 1}, "files": [{"sha": "0aeadd114067197af5895a233802c53b179898a1", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/678b1659f9a9536a4ee9901e2cd51c7daa4532c9/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/678b1659f9a9536a4ee9901e2cd51c7daa4532c9/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=678b1659f9a9536a4ee9901e2cd51c7daa4532c9", "patch": "@@ -853,6 +853,11 @@ impl<'a, R: Reader> Reader for RefReader<'a, R> {\n     fn read(&mut self, buf: &mut [u8]) -> IoResult<uint> { self.inner.read(buf) }\n }\n \n+impl<'a, R: Buffer> Buffer for RefReader<'a, R> {\n+    fn fill_buf<'a>(&'a mut self) -> IoResult<&'a [u8]> { self.inner.fill_buf() }\n+    fn consume(&mut self, amt: uint) { self.inner.consume(amt) }\n+}\n+\n fn extend_sign(val: u64, nbytes: uint) -> i64 {\n     let shift = (8 - nbytes) * 8;\n     (val << shift) as i64 >> shift"}, {"sha": "05d5f19eeffad832e8b2af75a667ac31d6f256ee", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 58, "deletions": 1, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/678b1659f9a9536a4ee9901e2cd51c7daa4532c9/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/678b1659f9a9536a4ee9901e2cd51c7daa4532c9/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=678b1659f9a9536a4ee9901e2cd51c7daa4532c9", "patch": "@@ -55,6 +55,24 @@ impl<R: Reader> Reader for LimitReader<R> {\n     }\n }\n \n+impl<R: Buffer> Buffer for LimitReader<R> {\n+    fn fill_buf<'a>(&'a mut self) -> io::IoResult<&'a [u8]> {\n+        let amt = try!(self.inner.fill_buf());\n+        let buf = amt.slice_to(cmp::min(amt.len(), self.limit));\n+        if buf.len() == 0 {\n+            Err(io::standard_error(io::EndOfFile))\n+        } else {\n+            Ok(buf)\n+        }\n+    }\n+\n+    fn consume(&mut self, amt: uint) {\n+        self.limit -= amt;\n+        self.inner.consume(amt);\n+    }\n+\n+}\n+\n /// A `Writer` which ignores bytes written to it, like /dev/null.\n pub struct NullWriter;\n \n@@ -74,6 +92,14 @@ impl Reader for ZeroReader {\n     }\n }\n \n+impl Buffer for ZeroReader {\n+    fn fill_buf<'a>(&'a mut self) -> io::IoResult<&'a [u8]> {\n+        static DATA: [u8, ..64] = [0, ..64];\n+        Ok(DATA.as_slice())\n+    }\n+    fn consume(&mut self, _amt: uint) {}\n+}\n+\n /// A `Reader` which is always at EOF, like /dev/null.\n pub struct NullReader;\n \n@@ -84,6 +110,13 @@ impl Reader for NullReader {\n     }\n }\n \n+impl Buffer for NullReader {\n+    fn fill_buf<'a>(&'a mut self) -> io::IoResult<&'a [u8]> {\n+        Err(io::standard_error(io::EndOfFile))\n+    }\n+    fn consume(&mut self, _amt: uint) {}\n+}\n+\n /// A `Writer` which multiplexes writes to a set of `Writers`.\n pub struct MultiWriter {\n     writers: Vec<Box<Writer>>\n@@ -198,8 +231,8 @@ pub fn copy<R: Reader, W: Writer>(r: &mut R, w: &mut W) -> io::IoResult<()> {\n \n #[cfg(test)]\n mod test {\n+    use io::{MemReader, MemWriter, BufReader};\n     use io;\n-    use io::{MemReader, MemWriter};\n     use owned::Box;\n     use super::*;\n     use prelude::*;\n@@ -309,4 +342,28 @@ mod test {\n         copy(&mut r, &mut w).unwrap();\n         assert_eq!(vec!(0, 1, 2, 3, 4), w.unwrap());\n     }\n+\n+    #[test]\n+    fn limit_reader_buffer() {\n+        let data = \"0123456789\\n0123456789\\n\";\n+        let mut r = BufReader::new(data.as_bytes());\n+        {\n+            let mut r = LimitReader::new(r.by_ref(), 3);\n+            assert_eq!(r.read_line(), Ok(\"012\".to_str()));\n+            assert_eq!(r.limit(), 0);\n+            assert_eq!(r.read_line().err().unwrap().kind, io::EndOfFile);\n+        }\n+        {\n+            let mut r = LimitReader::new(r.by_ref(), 9);\n+            assert_eq!(r.read_line(), Ok(\"3456789\\n\".to_str()));\n+            assert_eq!(r.limit(), 1);\n+            assert_eq!(r.read_line(), Ok(\"0\".to_str()));\n+        }\n+        {\n+            let mut r = LimitReader::new(r.by_ref(), 100);\n+            assert_eq!(r.read_char(), Ok('1'));\n+            assert_eq!(r.limit(), 99);\n+            assert_eq!(r.read_line(), Ok(\"23456789\\n\".to_str()));\n+        }\n+    }\n }"}]}