{"sha": "f817f1c66072e5830a1a0162a63baa05450df9a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4MTdmMWM2NjA3MmU1ODMwYTFhMDE2MmE2M2JhYTA1NDUwZGY5YTM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-28T15:32:21Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-28T15:32:21Z"}, "message": "Get rid of env var race condition once and for all", "tree": {"sha": "a253bcfa8a771bf61e2d053326006323311e54a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a253bcfa8a771bf61e2d053326006323311e54a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f817f1c66072e5830a1a0162a63baa05450df9a3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlmkN5EACgkQpp+NIls6\n19nwQw/+NRT+l38EECEJM0CIbDLQAv6M/YEvo8KftSdTv5gZPd//XITHQvLUtFTn\nVEr9N52s7gvGFOoP9Dv4cWys2NDkw7rRPO2g15A6mUH9ov2kDEC378rF9lLBOSLG\n4VylmnSQWWXSZvRGkPOztL0nkIQRpJhDh/XbjlH+3Vt2KF3bFpJ/0Q2SMuYuqeMx\nuuw2QVdhfjwGFy42V3fQJ2/oN/DxU+iywsaUAopv+TLoYsvy+PUoOSWIBi8W9bJb\n6oxKs8+mP5GnY4zN0LSQ0mCKo74z6slWq/PC/WgkjS6boNQes0ZpzroZicXnwGjO\nGSAvMUvTDsHePxogdlUQglFhaGdOnL0MxORFKW9qyrmIvadxac+dNrxAnJlV2zfT\n1QC0KfTIvqsf3d1nXl7Br7qEAhZGflIuD8ja27WG2oXMU0v7Eju9SQv4pYbWA1Ya\naqaKHWfYD0tJHqdkwiJvPwoerY03ecS50+haASW3byPboW2T+eSnGHddGDJp7sXz\n53oDzKjdPfFAaEPnXlima2xJctL0/yOdcfiHPQ9zNX7LuDi+cMc/OpjjfPLukfXp\nTr/yC0rJYe3ahZsl+8/EavPpTV9FRhGXVH5E81LtZya2PjrzACb8H73RsNpz4a8A\nOQStdUFrHpBuJLLPpGjxHBCdkB7bQIW0OU0BEwfedicWnvUc3JA=\n=3/iB\n-----END PGP SIGNATURE-----", "payload": "tree a253bcfa8a771bf61e2d053326006323311e54a6\nparent dd5b0100f3272c1a9437e841363ea1ed1609979c\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1503934341 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1503934341 +0200\n\nGet rid of env var race condition once and for all\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f817f1c66072e5830a1a0162a63baa05450df9a3", "html_url": "https://github.com/rust-lang/rust/commit/f817f1c66072e5830a1a0162a63baa05450df9a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f817f1c66072e5830a1a0162a63baa05450df9a3/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd5b0100f3272c1a9437e841363ea1ed1609979c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd5b0100f3272c1a9437e841363ea1ed1609979c", "html_url": "https://github.com/rust-lang/rust/commit/dd5b0100f3272c1a9437e841363ea1ed1609979c"}], "stats": {"total": 101, "additions": 63, "deletions": 38}, "files": [{"sha": "00ae333b4671c0981f3c902e238aa505e2530880", "filename": "Cargo.lock", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f817f1c66072e5830a1a0162a63baa05450df9a3/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f817f1c66072e5830a1a0162a63baa05450df9a3/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f817f1c66072e5830a1a0162a63baa05450df9a3", "patch": "@@ -21,24 +21,24 @@ dependencies = [\n [[package]]\n name = \"backtrace\"\n version = \"0.3.2\"\n-source = \"git+https://github.com/alexcrichton/backtrace-rs#3d96a9242ed2096984d15d177f4762b699bee6d4\"\n+source = \"git+https://github.com/alexcrichton/backtrace-rs#ac8f8d150ad114b735a020c37762426fc7ad18c4\"\n dependencies = [\n  \"backtrace-sys 0.1.12 (git+https://github.com/alexcrichton/backtrace-rs)\",\n  \"cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"dbghelp-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-demangle 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-demangle 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"backtrace-sys\"\n version = \"0.1.12\"\n-source = \"git+https://github.com/alexcrichton/backtrace-rs#3d96a9242ed2096984d15d177f4762b699bee6d4\"\n+source = \"git+https://github.com/alexcrichton/backtrace-rs#ac8f8d150ad114b735a020c37762426fc7ad18c4\"\n dependencies = [\n- \"gcc 0.3.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.53 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -99,7 +99,7 @@ dependencies = [\n \n [[package]]\n name = \"dtoa\"\n-version = \"0.4.1\"\n+version = \"0.4.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -113,12 +113,12 @@ dependencies = [\n \n [[package]]\n name = \"gcc\"\n-version = \"0.3.51\"\n+version = \"0.3.53\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"itoa\"\n-version = \"0.3.1\"\n+version = \"0.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -137,7 +137,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.28\"\n+version = \"0.2.30\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -175,7 +175,7 @@ name = \"memchr\"\n version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -207,7 +207,7 @@ name = \"rand\"\n version = \"0.3.16\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"magenta 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -230,7 +230,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"rustc-demangle\"\n-version = \"0.1.4\"\n+version = \"0.1.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -267,8 +267,8 @@ name = \"serde_json\"\n version = \"1.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"dtoa 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"itoa 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"dtoa 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"itoa 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num-traits 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -353,13 +353,13 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum conv 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"78ff10625fd0ac447827aa30ea8b861fead473bb60aeb73af6c1c58caf0d1299\"\n \"checksum custom_derive 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ef8ae57c4978a2acd8b869ce6b9ca1dfe817bff704c220209fdef2c0b75a01b9\"\n \"checksum dbghelp-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"97590ba53bcb8ac28279161ca943a924d1fd4a8fb3fa63302591647c4fc5b850\"\n-\"checksum dtoa 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"80c8b71fd71146990a9742fc06dcbbde19161a267e0ad4e572c35162f4578c90\"\n+\"checksum dtoa 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"09c3753c3db574d215cba4ea76018483895d7bff25a31b49ba45db21c48e50ab\"\n \"checksum env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3ddf21e73e016298f5cb37d6ef8e8da8e39f91f9ec8b0df44b7deb16a9f8cd5b\"\n-\"checksum gcc 0.3.51 (registry+https://github.com/rust-lang/crates.io-index)\" = \"120d07f202dcc3f72859422563522b66fe6463a4c513df062874daad05f85f0a\"\n-\"checksum itoa 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eb2f404fbc66fd9aac13e998248505e7ecb2ad8e44ab6388684c5fb11c6c251c\"\n+\"checksum gcc 0.3.53 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e8310f7e9c890398b0e80e301c4f474e9918d2b27fca8f48486ca775fa9ffc5a\"\n+\"checksum itoa 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f74cf6ca1bdbc28496a2b9798ab7fccc2ca5a42cace95bb2b219577216a5fb90\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n \"checksum lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3b37545ab726dd833ec6420aaba8231c5b320814b9029ad585555d2a03e94fbf\"\n-\"checksum libc 0.2.28 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bb7b49972ee23d8aa1026c365a5b440ba08e35075f18c459980c7395c221ec48\"\n+\"checksum libc 0.2.30 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2370ca07ec338939e356443dac2296f581453c35fe1e3a3ed06023c49435f915\"\n \"checksum log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"880f77541efa6e5cc74e76910c9884d9859683118839d6a1dc3b11e63512565b\"\n \"checksum log_settings 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3d382732ea0fbc09790c4899db3255bdea0fc78b54bf234bd18a63bb603915b6\"\n \"checksum magenta 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4bf0336886480e671965f794bc9b6fce88503563013d1bfb7a502c81fe3ac527\"\n@@ -370,7 +370,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum rand 0.3.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eb250fd207a4729c976794d03db689c9be1d634ab5a1c9da9492a13d8fecbcdf\"\n \"checksum regex 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1731164734096285ec2a5ec7fea5248ae2f5485b3feeb0115af4fda2183b2d1b\"\n \"checksum regex-syntax 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ad890a5eef7953f55427c50575c680c42841653abd2b028b68cd223d157f62db\"\n-\"checksum rustc-demangle 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3058a43ada2c2d0b92b3ae38007a2d0fa5e9db971be260e0171408a4ff471c95\"\n+\"checksum rustc-demangle 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aee45432acc62f7b9a108cc054142dac51f979e69e71ddce7d6fc7adf29e817e\"\n \"checksum rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dcf128d1287d2ea9d80910b5f1120d0b8eede3fbf1abe91c40d39ea7d51e6fda\"\n \"checksum serde 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f7726f29ddf9731b17ff113c461e362c381d9d69433f79de4f3dd572488823e9\"\n \"checksum serde_derive 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cf823e706be268e73e7747b147aa31c8f633ab4ba31f115efb57e5047c3a76dd\""}, {"sha": "337a723a40d6e16b173976b883b7fd2fbd9942b8", "filename": "miri/bin/miri.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f817f1c66072e5830a1a0162a63baa05450df9a3/miri%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f817f1c66072e5830a1a0162a63baa05450df9a3/miri%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Fbin%2Fmiri.rs?ref=f817f1c66072e5830a1a0162a63baa05450df9a3", "patch": "@@ -19,7 +19,11 @@ use rustc::ty::TyCtxt;\n use syntax::ast::{self, MetaItemKind, NestedMetaItemKind};\n use std::path::PathBuf;\n \n-struct MiriCompilerCalls(RustcDefaultCalls);\n+struct MiriCompilerCalls {\n+    default: RustcDefaultCalls,\n+    /// whether we are building for the host\n+    host_target: bool,\n+}\n \n impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n     fn early_callback(\n@@ -30,7 +34,7 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n         descriptions: &rustc_errors::registry::Registry,\n         output: ErrorOutputType,\n     ) -> Compilation {\n-        self.0.early_callback(\n+        self.default.early_callback(\n             matches,\n             sopts,\n             cfg,\n@@ -47,7 +51,7 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n         ofile: &Option<PathBuf>,\n         descriptions: &rustc_errors::registry::Registry,\n     ) -> Option<(Input, Option<PathBuf>)> {\n-        self.0.no_input(\n+        self.default.no_input(\n             matches,\n             sopts,\n             cfg,\n@@ -64,17 +68,17 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n         odir: &Option<PathBuf>,\n         ofile: &Option<PathBuf>,\n     ) -> Compilation {\n-        self.0.late_callback(matches, sess, input, odir, ofile)\n+        self.default.late_callback(matches, sess, input, odir, ofile)\n     }\n     fn build_controller(\n         &mut self,\n         sess: &Session,\n         matches: &getopts::Matches,\n     ) -> CompileController<'a> {\n-        let mut control = self.0.build_controller(sess, matches);\n+        let mut control = self.default.build_controller(sess, matches);\n         control.after_hir_lowering.callback = Box::new(after_hir_lowering);\n         control.after_analysis.callback = Box::new(after_analysis);\n-        if std::env::var(\"MIRI_HOST_TARGET\") != Ok(\"yes\".to_owned()) {\n+        if !self.host_target {\n             // only fully compile targets on the host\n             control.after_analysis.stop = Compilation::Stop;\n         }\n@@ -254,6 +258,16 @@ fn main() {\n \n     // for auxilary builds in unit tests\n     args.push(\"-Zalways-encode-mir\".to_owned());\n+    let mut host_target = false;\n+    args.retain(|arg| if arg == \"--miri_host_target\" {\n+        host_target = true;\n+        false // remove the flag, rustc doesn't know it\n+    } else {\n+        true\n+    });\n \n-    rustc_driver::run_compiler(&args, &mut MiriCompilerCalls(RustcDefaultCalls), None, None);\n+    rustc_driver::run_compiler(&args, &mut MiriCompilerCalls {\n+        default: RustcDefaultCalls,\n+        host_target,\n+    }, None, None);\n }"}, {"sha": "a44880f11251980e2e7051831e7814e301f64f52", "filename": "rustc_tests/src/main.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f817f1c66072e5830a1a0162a63baa05450df9a3/rustc_tests%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f817f1c66072e5830a1a0162a63baa05450df9a3/rustc_tests%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustc_tests%2Fsrc%2Fmain.rs?ref=f817f1c66072e5830a1a0162a63baa05450df9a3", "patch": "@@ -20,7 +20,11 @@ use rustc::hir::{self, itemlikevisit};\n use rustc::ty::TyCtxt;\n use syntax::ast;\n \n-struct MiriCompilerCalls(RustcDefaultCalls);\n+struct MiriCompilerCalls {\n+    default: RustcDefaultCalls,\n+    /// whether we are building for the host\n+    host_target: bool,\n+}\n \n impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n     fn early_callback(\n@@ -31,7 +35,7 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n         descriptions: &rustc_errors::registry::Registry,\n         output: ErrorOutputType\n     ) -> Compilation {\n-        self.0.early_callback(matches, sopts, cfg, descriptions, output)\n+        self.default.early_callback(matches, sopts, cfg, descriptions, output)\n     }\n     fn no_input(\n         &mut self,\n@@ -42,7 +46,7 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n         ofile: &Option<PathBuf>,\n         descriptions: &rustc_errors::registry::Registry\n     ) -> Option<(Input, Option<PathBuf>)> {\n-        self.0.no_input(matches, sopts, cfg, odir, ofile, descriptions)\n+        self.default.no_input(matches, sopts, cfg, odir, ofile, descriptions)\n     }\n     fn late_callback(\n         &mut self,\n@@ -52,13 +56,13 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n         odir: &Option<PathBuf>,\n         ofile: &Option<PathBuf>\n     ) -> Compilation {\n-        self.0.late_callback(matches, sess, input, odir, ofile)\n+        self.default.late_callback(matches, sess, input, odir, ofile)\n     }\n     fn build_controller(&mut self, sess: &Session, matches: &getopts::Matches) -> CompileController<'a> {\n-        let mut control = self.0.build_controller(sess, matches);\n+        let mut control = self.default.build_controller(sess, matches);\n         control.after_hir_lowering.callback = Box::new(after_hir_lowering);\n         control.after_analysis.callback = Box::new(after_analysis);\n-        if std::env::var(\"MIRI_HOST_TARGET\") != Ok(\"yes\".to_owned()) {\n+        if !self.host_target {\n             // only fully compile targets on the host\n             control.after_analysis.stop = Compilation::Stop;\n         }\n@@ -139,7 +143,15 @@ fn main() {\n         }\n         let stderr = std::io::stderr();\n         write!(stderr.lock(), \"test [miri-pass] {} ... \", path.display()).unwrap();\n-        let mut args: Vec<String> = std::env::args().collect();\n+        let mut host_target = false;\n+        let mut args: Vec<String> = std::env::args().filter(|arg| {\n+            if arg == \"--miri_host_target\" {\n+                host_target = true;\n+                false // remove the flag, rustc doesn't know it\n+            } else {\n+                true\n+            }\n+        }).collect();\n         // file to process\n         args.push(path.display().to_string());\n "}, {"sha": "e7c82367b29dc241857ad3028eea68e49d3350b2", "filename": "tests/compiletest.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f817f1c66072e5830a1a0162a63baa05450df9a3/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f817f1c66072e5830a1a0162a63baa05450df9a3/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=f817f1c66072e5830a1a0162a63baa05450df9a3", "patch": "@@ -126,15 +126,14 @@ fn miri_pass(path: &str, target: &str, host: &str, fullmir: bool, opt: bool) {\n         // For now, only validate without optimizations.  Inlining breaks validation.\n         flags.push(\"-Zmir-emit-validate=1\".to_owned());\n     }\n+    if target == host {\n+        flags.push(\"--miri_host_target\".to_owned());\n+    }\n     config.target_rustcflags = Some(flags.join(\" \"));\n     // don't actually execute the final binary, it might be for other targets and we only care\n     // about running miri, not the binary.\n     config.runtool = Some(\"echo \\\"\\\" || \".to_owned());\n-    if target == host {\n-        std::env::set_var(\"MIRI_HOST_TARGET\", \"yes\");\n-    }\n     compiletest::run_tests(&config);\n-    std::env::set_var(\"MIRI_HOST_TARGET\", \"\");\n }\n \n fn is_target_dir<P: Into<PathBuf>>(path: P) -> bool {"}]}