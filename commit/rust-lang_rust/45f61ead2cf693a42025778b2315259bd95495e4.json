{"sha": "45f61ead2cf693a42025778b2315259bd95495e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZjYxZWFkMmNmNjkzYTQyMDI1Nzc4YjIzMTUyNTliZDk1NDk1ZTQ=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2020-03-04T07:59:16Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2020-03-04T08:24:12Z"}, "message": "Lint `if let Some` in question_mark lint", "tree": {"sha": "a0cc0d4c18ed74e20663b400177aa495cb54c66e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0cc0d4c18ed74e20663b400177aa495cb54c66e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45f61ead2cf693a42025778b2315259bd95495e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45f61ead2cf693a42025778b2315259bd95495e4", "html_url": "https://github.com/rust-lang/rust/commit/45f61ead2cf693a42025778b2315259bd95495e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45f61ead2cf693a42025778b2315259bd95495e4/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74eae9dc602bf8f1c54525bf3113e4b6508f0ade", "url": "https://api.github.com/repos/rust-lang/rust/commits/74eae9dc602bf8f1c54525bf3113e4b6508f0ade", "html_url": "https://github.com/rust-lang/rust/commit/74eae9dc602bf8f1c54525bf3113e4b6508f0ade"}], "stats": {"total": 143, "additions": 123, "deletions": 20}, "files": [{"sha": "5ad580aa052bec1203e3bf1d07b178f0b99b31e3", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 52, "deletions": 3, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/45f61ead2cf693a42025778b2315259bd95495e4/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45f61ead2cf693a42025778b2315259bd95495e4/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=45f61ead2cf693a42025778b2315259bd95495e4", "patch": "@@ -1,13 +1,15 @@\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::{def, Block, Expr, ExprKind, StmtKind};\n+use rustc_hir::{def, BindingAnnotation, Block, Expr, ExprKind, MatchSource, PatKind, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n use crate::utils::paths::{OPTION, OPTION_NONE};\n use crate::utils::sugg::Sugg;\n-use crate::utils::{higher, match_def_path, match_type, span_lint_and_then, SpanlessEq};\n+use crate::utils::{\n+    higher, match_def_path, match_qpath, match_type, snippet_with_applicability, span_lint_and_then, SpanlessEq,\n+};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for expressions that could be replaced by the question mark operator.\n@@ -82,7 +84,7 @@ impl QuestionMark {\n                         |db| {\n                             db.span_suggestion(\n                                 expr.span,\n-                                \"replace_it_with\",\n+                                \"replace it with\",\n                                 replacement_str,\n                                 Applicability::MaybeIncorrect, // snippet\n                             );\n@@ -93,6 +95,52 @@ impl QuestionMark {\n         }\n     }\n \n+    fn check_if_let_some_and_early_return_none(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n+        if_chain! {\n+            if let ExprKind::Match(subject, arms, source) = &expr.kind;\n+            if *source == MatchSource::IfLetDesugar { contains_else_clause: true };\n+            if Self::is_option(cx, subject);\n+\n+            if let PatKind::TupleStruct(path1, fields, None) = &arms[0].pat.kind;\n+            if match_qpath(path1, &[\"Some\"]);\n+            if let PatKind::Binding(annot, _, bind, _) = &fields[0].kind;\n+            let by_ref = matches!(annot, BindingAnnotation::Ref | BindingAnnotation::RefMut);\n+\n+            if let ExprKind::Block(block, None) = &arms[0].body.kind;\n+            if block.stmts.is_empty();\n+            if let Some(trailing_expr) = &block.expr;\n+            if let ExprKind::Path(path) = &trailing_expr.kind;\n+            if match_qpath(path, &[&bind.as_str()]);\n+\n+            if let PatKind::Wild = arms[1].pat.kind;\n+            if Self::expression_returns_none(cx, arms[1].body);\n+            then {\n+                let mut applicability = Applicability::MachineApplicable;\n+                let receiver_str = snippet_with_applicability(cx, subject.span, \"..\", &mut applicability);\n+                let replacement = format!(\n+                    \"{}{}?\",\n+                    receiver_str,\n+                    if by_ref { \".as_ref()\" } else { \"\" },\n+                );\n+\n+                span_lint_and_then(\n+                    cx,\n+                    QUESTION_MARK,\n+                    expr.span,\n+                    \"this if-let-else may be rewritten with the `?` operator\",\n+                    |db| {\n+                        db.span_suggestion(\n+                            expr.span,\n+                            \"replace it with\",\n+                            replacement,\n+                            applicability,\n+                        );\n+                    }\n+                )\n+            }\n+        }\n+    }\n+\n     fn moves_by_default(cx: &LateContext<'_, '_>, expression: &Expr<'_>) -> bool {\n         let expr_ty = cx.tables.expr_ty(expression);\n \n@@ -158,5 +206,6 @@ impl QuestionMark {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for QuestionMark {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) {\n         Self::check_is_none_and_early_return_none(cx, expr);\n+        Self::check_if_let_some_and_early_return_none(cx, expr);\n     }\n }"}, {"sha": "58a909c845d6a056ee052878f51e0c99f17a4501", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/45f61ead2cf693a42025778b2315259bd95495e4/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45f61ead2cf693a42025778b2315259bd95495e4/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=45f61ead2cf693a42025778b2315259bd95495e4", "patch": "@@ -1698,12 +1698,7 @@ fn detect_absurd_comparison<'a, 'tcx>(\n         return None;\n     }\n \n-    let normalized = normalize_comparison(op, lhs, rhs);\n-    let (rel, normalized_lhs, normalized_rhs) = if let Some(val) = normalized {\n-        val\n-    } else {\n-        return None;\n-    };\n+    let (rel, normalized_lhs, normalized_rhs) = normalize_comparison(op, lhs, rhs)?;\n \n     let lx = detect_extreme_expr(cx, normalized_lhs);\n     let rx = detect_extreme_expr(cx, normalized_rhs);"}, {"sha": "77aa3976b79fe16fd32a13c5a570a04f3b0b32ed", "filename": "tests/ui/question_mark.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/45f61ead2cf693a42025778b2315259bd95495e4/tests%2Fui%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45f61ead2cf693a42025778b2315259bd95495e4/tests%2Fui%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark.rs?ref=45f61ead2cf693a42025778b2315259bd95495e4", "patch": "@@ -58,6 +58,12 @@ impl CopyStruct {\n             self.opt\n         };\n \n+        let _ = if let Some(x) = self.opt {\n+            x\n+        } else {\n+            return None;\n+        };\n+\n         self.opt\n     }\n }\n@@ -90,6 +96,26 @@ impl MoveStruct {\n         }\n         Some(Vec::new())\n     }\n+\n+    pub fn if_let_ref_func(self) -> Option<Vec<u32>> {\n+        let mut v: &Vec<_> = if let Some(ref v) = self.opt {\n+            v\n+        } else {\n+            return None;\n+        };\n+\n+        Some(v.clone())\n+    }\n+\n+    pub fn if_let_mov_func(self) -> Option<Vec<u32>> {\n+        let mut v = if let Some(v) = self.opt {\n+            v\n+        } else {\n+            return None;\n+        };\n+\n+        Some(v)\n+    }\n }\n \n fn main() {"}, {"sha": "dabba9842e48225e51015d86be84c8dcdb0d87b8", "filename": "tests/ui/question_mark.stderr", "status": "modified", "additions": 44, "deletions": 11, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/45f61ead2cf693a42025778b2315259bd95495e4/tests%2Fui%2Fquestion_mark.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45f61ead2cf693a42025778b2315259bd95495e4/tests%2Fui%2Fquestion_mark.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark.stderr?ref=45f61ead2cf693a42025778b2315259bd95495e4", "patch": "@@ -4,7 +4,7 @@ error: this block may be rewritten with the `?` operator\n LL | /     if a.is_none() {\n LL | |         return None;\n LL | |     }\n-   | |_____^ help: replace_it_with: `a?;`\n+   | |_____^ help: replace it with: `a?;`\n    |\n    = note: `-D clippy::question-mark` implied by `-D warnings`\n \n@@ -14,15 +14,15 @@ error: this block may be rewritten with the `?` operator\n LL | /         if (self.opt).is_none() {\n LL | |             return None;\n LL | |         }\n-   | |_________^ help: replace_it_with: `(self.opt)?;`\n+   | |_________^ help: replace it with: `(self.opt)?;`\n \n error: this block may be rewritten with the `?` operator\n   --> $DIR/question_mark.rs:51:9\n    |\n LL | /         if self.opt.is_none() {\n LL | |             return None\n LL | |         }\n-   | |_________^ help: replace_it_with: `self.opt?;`\n+   | |_________^ help: replace it with: `self.opt?;`\n \n error: this block may be rewritten with the `?` operator\n   --> $DIR/question_mark.rs:55:17\n@@ -33,31 +33,64 @@ LL | |             return None;\n LL | |         } else {\n LL | |             self.opt\n LL | |         };\n-   | |_________^ help: replace_it_with: `Some(self.opt?)`\n+   | |_________^ help: replace it with: `Some(self.opt?)`\n+\n+error: this if-let-else may be rewritten with the `?` operator\n+  --> $DIR/question_mark.rs:61:17\n+   |\n+LL |           let _ = if let Some(x) = self.opt {\n+   |  _________________^\n+LL | |             x\n+LL | |         } else {\n+LL | |             return None;\n+LL | |         };\n+   | |_________^ help: replace it with: `self.opt?`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:72:9\n+  --> $DIR/question_mark.rs:78:9\n    |\n LL | /         if self.opt.is_none() {\n LL | |             return None;\n LL | |         }\n-   | |_________^ help: replace_it_with: `self.opt.as_ref()?;`\n+   | |_________^ help: replace it with: `self.opt.as_ref()?;`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:80:9\n+  --> $DIR/question_mark.rs:86:9\n    |\n LL | /         if self.opt.is_none() {\n LL | |             return None;\n LL | |         }\n-   | |_________^ help: replace_it_with: `self.opt.as_ref()?;`\n+   | |_________^ help: replace it with: `self.opt.as_ref()?;`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:88:9\n+  --> $DIR/question_mark.rs:94:9\n    |\n LL | /         if self.opt.is_none() {\n LL | |             return None;\n LL | |         }\n-   | |_________^ help: replace_it_with: `self.opt.as_ref()?;`\n+   | |_________^ help: replace it with: `self.opt.as_ref()?;`\n+\n+error: this if-let-else may be rewritten with the `?` operator\n+  --> $DIR/question_mark.rs:101:30\n+   |\n+LL |           let mut v: &Vec<_> = if let Some(ref v) = self.opt {\n+   |  ______________________________^\n+LL | |             v\n+LL | |         } else {\n+LL | |             return None;\n+LL | |         };\n+   | |_________^ help: replace it with: `self.opt.as_ref()?`\n+\n+error: this if-let-else may be rewritten with the `?` operator\n+  --> $DIR/question_mark.rs:111:21\n+   |\n+LL |           let mut v = if let Some(v) = self.opt {\n+   |  _____________________^\n+LL | |             v\n+LL | |         } else {\n+LL | |             return None;\n+LL | |         };\n+   | |_________^ help: replace it with: `self.opt?`\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 10 previous errors\n "}]}