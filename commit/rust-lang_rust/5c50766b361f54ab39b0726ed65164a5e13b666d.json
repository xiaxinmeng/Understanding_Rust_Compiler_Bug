{"sha": "5c50766b361f54ab39b0726ed65164a5e13b666d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjNTA3NjZiMzYxZjU0YWIzOWIwNzI2ZWQ2NTE2NGE1ZTEzYjY2NmQ=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-08-15T07:54:18Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-08-15T07:54:18Z"}, "message": "Print error messages with colors if possible", "tree": {"sha": "09ccb9a0e680f3153e4a4459d2e5bb3661ea5172", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09ccb9a0e680f3153e4a4459d2e5bb3661ea5172"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c50766b361f54ab39b0726ed65164a5e13b666d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c50766b361f54ab39b0726ed65164a5e13b666d", "html_url": "https://github.com/rust-lang/rust/commit/5c50766b361f54ab39b0726ed65164a5e13b666d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c50766b361f54ab39b0726ed65164a5e13b666d/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67285f15eb64637abbb134b675e04fd9a842d2f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/67285f15eb64637abbb134b675e04fd9a842d2f4", "html_url": "https://github.com/rust-lang/rust/commit/67285f15eb64637abbb134b675e04fd9a842d2f4"}], "stats": {"total": 82, "additions": 80, "deletions": 2}, "files": [{"sha": "3ac1c3e4cf734d27c13b6ce5fe3d3d05e0b3c418", "filename": "src/lib.rs", "status": "modified", "additions": 80, "deletions": 2, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/5c50766b361f54ab39b0726ed65164a5e13b666d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c50766b361f54ab39b0726ed65164a5e13b666d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=5c50766b361f54ab39b0726ed65164a5e13b666d", "patch": "@@ -43,7 +43,7 @@ use checkstyle::{output_footer, output_header};\n use config::Config;\n use filemap::FileMap;\n use issues::{BadIssueSeeker, Issue};\n-use utils::{mk_sp, outer_attributes};\n+use utils::{isatty, mk_sp, outer_attributes};\n use visitor::FmtVisitor;\n \n pub use self::summary::Summary;\n@@ -532,6 +532,76 @@ impl FormatReport {\n     pub fn has_warnings(&self) -> bool {\n         self.warning_count() > 0\n     }\n+\n+    pub fn print_warnings_fancy(\n+        &self,\n+        mut t: Box<term::Terminal<Output = io::Stderr>>,\n+    ) -> Result<(), term::Error> {\n+        for (file, errors) in &self.file_error_map {\n+            for error in errors {\n+                let prefix_space_len = error.line.to_string().len();\n+                let prefix_spaces: String = repeat(\" \").take(1 + prefix_space_len).collect();\n+\n+                // First line: the overview of error\n+                t.fg(term::color::RED)?;\n+                t.attr(term::Attr::Bold)?;\n+                write!(t, \"{} \", error.msg_prefix())?;\n+                t.reset()?;\n+                t.attr(term::Attr::Bold)?;\n+                write!(t, \"{}\\n\", error.kind)?;\n+\n+                // Second line: file info\n+                write!(t, \"{}--> \", &prefix_spaces[1..])?;\n+                t.reset()?;\n+                write!(t, \"{}:{}\\n\", file, error.line)?;\n+\n+                // Third to fifth lines: show the line which triggered error, if available.\n+                if !error.line_buffer.is_empty() {\n+                    let (space_len, target_len) = error.format_len();\n+                    t.attr(term::Attr::Bold)?;\n+                    write!(t, \"{}|\\n{} | \", prefix_spaces, error.line)?;\n+                    t.reset()?;\n+                    write!(t, \"{}\\n\", error.line_buffer)?;\n+                    t.attr(term::Attr::Bold)?;\n+                    write!(t, \"{}| \", prefix_spaces)?;\n+                    t.fg(term::color::RED)?;\n+                    write!(t, \"{}\\n\", target_str(space_len, target_len))?;\n+                    t.reset()?;\n+                }\n+\n+                // The last line: show note if available.\n+                let msg_suffix = error.msg_suffix();\n+                if !msg_suffix.is_empty() {\n+                    t.attr(term::Attr::Bold)?;\n+                    write!(t, \"{}= note: \", prefix_spaces)?;\n+                    t.reset()?;\n+                    write!(t, \"{}\\n\", error.msg_suffix())?;\n+                } else {\n+                    write!(t, \"\\n\")?;\n+                }\n+                t.reset()?;\n+            }\n+        }\n+\n+        if !self.file_error_map.is_empty() {\n+            t.attr(term::Attr::Bold)?;\n+            write!(t, \"warning: \")?;\n+            t.reset()?;\n+            write!(\n+                t,\n+                \"rustfmt may have failed to format. See previous {} errors.\\n\\n\",\n+                self.warning_count(),\n+            )?;\n+        }\n+\n+        Ok(())\n+    }\n+}\n+\n+fn target_str(space_len: usize, target_len: usize) -> String {\n+    let empty_line: String = repeat(\" \").take(space_len).collect();\n+    let overflowed: String = repeat(\"^\").take(target_len).collect();\n+    empty_line + &overflowed\n }\n \n impl fmt::Display for FormatReport {\n@@ -867,7 +937,15 @@ pub fn run(input: Input, config: &Config) -> Summary {\n             output_footer(out, config.write_mode()).ok();\n \n             if report.has_warnings() {\n-                msg!(\"{}\", report);\n+                match term::stderr() {\n+                    Some(ref t) if isatty() && t.supports_color() => {\n+                        match report.print_warnings_fancy(term::stderr().unwrap()) {\n+                            Ok(..) => (),\n+                            Err(..) => panic!(\"Unable to write to stderr: {}\", report),\n+                        }\n+                    }\n+                    _ => msg!(\"{}\", report),\n+                }\n             }\n \n             summary"}]}