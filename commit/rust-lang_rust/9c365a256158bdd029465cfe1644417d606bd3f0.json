{"sha": "9c365a256158bdd029465cfe1644417d606bd3f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljMzY1YTI1NjE1OGJkZDAyOTQ2NWNmZTE2NDQ0MTdkNjA2YmQzZjA=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-10-14T00:30:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-14T00:30:36Z"}, "message": "Rollup merge of #77788 - ssomers:btree_cleanup_gdb, r=Mark-Simulacrum\n\nBTreeMap: fix gdb provider on BTreeMap with ZST keys or values\n\nAvoid error when gdb is asked to inspect a BTreeMap or BTreeSet with a zero-sized type as key or value. And clean up.\n\nr? @Mark-Simulacrum", "tree": {"sha": "218c24f90a87e19cac2b8e7a9b63789db1bdacc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/218c24f90a87e19cac2b8e7a9b63789db1bdacc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c365a256158bdd029465cfe1644417d606bd3f0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfhkasCRBK7hj4Ov3rIwAAdHIIABa7mewwmQz1ixir+YOmimg6\n7Z/zlaVPNVYRggtPqfGUho6DkhhXCPh/AfNrg7alObrrICg6bLio/TVy33rsSML+\n1HNAnAxO2775yIdNMZdDyvG6m1Z/bLKf5XWYskAAmQsuuSNkFw3lBcU/fW07gQf8\n2MZ7td2Y49pHrYU7xp4kRvp0IBsCS/2EwhRkPhCIU6z+6X7G38obM0RFHIP8s28B\nOaqGWXdb4vaiADeqNe4u5GXW7FtoODave4zmpyMlt5ZStin2ViSWLDy28SfM8zu/\nUmjMautVLSBSL80fka026xUGyqGFQr4GuP9mqjLvCQWxiH2fzcpDcgzeNd340oE=\n=oKMg\n-----END PGP SIGNATURE-----\n", "payload": "tree 218c24f90a87e19cac2b8e7a9b63789db1bdacc3\nparent 596235281c1a8a44389f675bf78ac3e5f9a2bb84\nparent bb9da7a0edc60991e14b7e8c738e5d8ae3661512\nauthor Dylan DPC <dylan.dpc@gmail.com> 1602635436 +0200\ncommitter GitHub <noreply@github.com> 1602635436 +0200\n\nRollup merge of #77788 - ssomers:btree_cleanup_gdb, r=Mark-Simulacrum\n\nBTreeMap: fix gdb provider on BTreeMap with ZST keys or values\n\nAvoid error when gdb is asked to inspect a BTreeMap or BTreeSet with a zero-sized type as key or value. And clean up.\n\nr? @Mark-Simulacrum\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c365a256158bdd029465cfe1644417d606bd3f0", "html_url": "https://github.com/rust-lang/rust/commit/9c365a256158bdd029465cfe1644417d606bd3f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c365a256158bdd029465cfe1644417d606bd3f0/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "596235281c1a8a44389f675bf78ac3e5f9a2bb84", "url": "https://api.github.com/repos/rust-lang/rust/commits/596235281c1a8a44389f675bf78ac3e5f9a2bb84", "html_url": "https://github.com/rust-lang/rust/commit/596235281c1a8a44389f675bf78ac3e5f9a2bb84"}, {"sha": "bb9da7a0edc60991e14b7e8c738e5d8ae3661512", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb9da7a0edc60991e14b7e8c738e5d8ae3661512", "html_url": "https://github.com/rust-lang/rust/commit/bb9da7a0edc60991e14b7e8c738e5d8ae3661512"}], "stats": {"total": 79, "additions": 43, "deletions": 36}, "files": [{"sha": "b2d343fd7af6a7105198d6120e643457fcd31f2c", "filename": "src/etc/gdb_providers.py", "status": "modified", "additions": 32, "deletions": 31, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/9c365a256158bdd029465cfe1644417d606bd3f0/src%2Fetc%2Fgdb_providers.py", "raw_url": "https://github.com/rust-lang/rust/raw/9c365a256158bdd029465cfe1644417d606bd3f0/src%2Fetc%2Fgdb_providers.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_providers.py?ref=9c365a256158bdd029465cfe1644417d606bd3f0", "patch": "@@ -207,30 +207,46 @@ def children(self):\n         yield \"borrow\", self.borrow\n \n \n-# Yield each key (and optionally value) from a BoxedNode.\n-def children_of_node(boxed_node, height, want_values):\n+# Yields children (in a provider's sense of the word) for a tree headed by a BoxedNode.\n+# In particular, yields each key/value pair in the node and in any child nodes.\n+def children_of_node(boxed_node, height):\n     def cast_to_internal(node):\n-        internal_type_name = str(node.type.target()).replace(\"LeafNode\", \"InternalNode\", 1)\n+        internal_type_name = node.type.target().name.replace(\"LeafNode\", \"InternalNode\", 1)\n         internal_type = lookup_type(internal_type_name)\n         return node.cast(internal_type.pointer())\n \n     node_ptr = unwrap_unique_or_non_null(boxed_node[\"ptr\"])\n-    node_ptr = cast_to_internal(node_ptr) if height > 0 else node_ptr\n-    leaf = node_ptr[\"data\"] if height > 0 else node_ptr.dereference()\n+    leaf = node_ptr.dereference()\n     keys = leaf[\"keys\"]\n-    values = leaf[\"vals\"]\n+    vals = leaf[\"vals\"]\n+    edges = cast_to_internal(node_ptr)[\"edges\"] if height > 0 else None\n     length = int(leaf[\"len\"])\n \n     for i in xrange(0, length + 1):\n         if height > 0:\n-            child_ptr = node_ptr[\"edges\"][i][\"value\"][\"value\"]\n-            for child in children_of_node(child_ptr, height - 1, want_values):\n+            boxed_child_node = edges[i][\"value\"][\"value\"]\n+            for child in children_of_node(boxed_child_node, height - 1):\n                 yield child\n         if i < length:\n-            if want_values:\n-                yield keys[i][\"value\"][\"value\"], values[i][\"value\"][\"value\"]\n-            else:\n-                yield keys[i][\"value\"][\"value\"]\n+            # Avoid \"Cannot perform pointer math on incomplete type\" on zero-sized arrays.\n+            key = keys[i][\"value\"][\"value\"] if keys.type.sizeof > 0 else None\n+            val = vals[i][\"value\"][\"value\"] if vals.type.sizeof > 0 else None\n+            yield key, val\n+\n+\n+# Yields children for a BTreeMap.\n+def children_of_map(map):\n+    if map[\"length\"] > 0:\n+        root = map[\"root\"]\n+        if root.type.name.startswith(\"core::option::Option<\"):\n+            root = root.cast(gdb.lookup_type(root.type.name[21:-1]))\n+        boxed_root_node = root[\"node\"]\n+        height = root[\"height\"]\n+        for i, (key, val) in enumerate(children_of_node(boxed_root_node, height)):\n+            if key is not None:\n+                yield \"key{}\".format(i), key\n+            if val is not None:\n+                yield \"val{}\".format(i), val\n \n \n class StdBTreeSetProvider:\n@@ -242,15 +258,8 @@ def to_string(self):\n \n     def children(self):\n         inner_map = self.valobj[\"map\"]\n-        if inner_map[\"length\"] > 0:\n-            root = inner_map[\"root\"]\n-            if \"core::option::Option<\" in root.type.name:\n-                type_name = str(root.type.name).replace(\"core::option::Option<\", \"\", 1)[:-1]\n-                root = root.cast(gdb.lookup_type(type_name))\n-\n-            node_ptr = root[\"node\"]\n-            for i, child in enumerate(children_of_node(node_ptr, root[\"height\"], False)):\n-                yield \"[{}]\".format(i), child\n+        for child in children_of_map(inner_map):\n+            yield child\n \n     @staticmethod\n     def display_hint():\n@@ -265,16 +274,8 @@ def to_string(self):\n         return \"BTreeMap(size={})\".format(self.valobj[\"length\"])\n \n     def children(self):\n-        if self.valobj[\"length\"] > 0:\n-            root = self.valobj[\"root\"]\n-            if \"core::option::Option<\" in root.type.name:\n-                type_name = str(root.type.name).replace(\"core::option::Option<\", \"\", 1)[:-1]\n-                root = root.cast(gdb.lookup_type(type_name))\n-\n-            node_ptr = root[\"node\"]\n-            for i, child in enumerate(children_of_node(node_ptr, root[\"height\"], True)):\n-                yield \"key{}\".format(i), child[0]\n-                yield \"val{}\".format(i), child[1]\n+        for child in children_of_map(self.valobj):\n+            yield child\n \n     @staticmethod\n     def display_hint():"}, {"sha": "c6d2090759ff2248f226aa495ee3a3c19ccb6263", "filename": "src/test/debuginfo/pretty-std-collections.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9c365a256158bdd029465cfe1644417d606bd3f0/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c365a256158bdd029465cfe1644417d606bd3f0/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections.rs?ref=9c365a256158bdd029465cfe1644417d606bd3f0", "patch": "@@ -34,17 +34,20 @@\n // gdb-check:$6 = BTreeMap(size=15) = {[0] = pretty_std_collections::MyLeafNode (0), [...]}\n // (abbreviated because it's boring but we need enough elements to include internal nodes)\n \n+// gdb-command: print zst_btree_map\n+// gdb-check:$7 = BTreeMap(size=1)\n+\n // gdb-command: print vec_deque\n-// gdb-check:$7 = VecDeque(size=3) = {5, 3, 7}\n+// gdb-check:$8 = VecDeque(size=3) = {5, 3, 7}\n \n // gdb-command: print vec_deque2\n-// gdb-check:$8 = VecDeque(size=7) = {2, 3, 4, 5, 6, 7, 8}\n+// gdb-check:$9 = VecDeque(size=7) = {2, 3, 4, 5, 6, 7, 8}\n \n // gdb-command: print hash_map\n-// gdb-check:$9 = HashMap(size=4) = {[1] = 10, [2] = 20, [3] = 30, [4] = 40}\n+// gdb-check:$10 = HashMap(size=4) = {[1] = 10, [2] = 20, [3] = 30, [4] = 40}\n \n // gdb-command: print hash_set\n-// gdb-check:$10 = HashSet(size=4) = {1, 2, 3, 4}\n+// gdb-check:$11 = HashSet(size=4) = {1, 2, 3, 4}\n \n // === LLDB TESTS ==================================================================================\n \n@@ -69,9 +72,9 @@\n #![allow(unused_variables)]\n use std::collections::BTreeMap;\n use std::collections::BTreeSet;\n-use std::collections::VecDeque;\n use std::collections::HashMap;\n use std::collections::HashSet;\n+use std::collections::VecDeque;\n use std::hash::{BuildHasherDefault, Hasher};\n \n struct MyLeafNode(i32); // helps to ensure we don't blindly replace substring \"LeafNode\"\n@@ -111,6 +114,9 @@ fn main() {\n         nasty_btree_map.insert(i, MyLeafNode(i));\n     }\n \n+    let mut zst_btree_map: BTreeMap<(), ()> = BTreeMap::new();\n+    zst_btree_map.insert((), ());\n+\n     // VecDeque\n     let mut vec_deque = VecDeque::new();\n     vec_deque.push_back(5);"}]}