{"sha": "4d71285c933586f92497a5b5fb85368fd130f4e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNzEyODVjOTMzNTg2ZjkyNDk3YTViNWZiODUzNjhmZDEzMGY0ZTY=", "commit": {"author": {"name": "Kevin Atkinson", "email": "kevina@cs.utah.edu", "date": "2012-02-01T09:58:28Z"}, "committer": {"name": "Kevin Atkinson", "email": "kevina@cs.utah.edu", "date": "2012-02-04T03:41:49Z"}, "message": "Implement quasi-quotes in more macro form: #ast{...}.\n\nThe #(...) form is still supported for now.", "tree": {"sha": "3c1d4346bf2d8a04c3af346e02337875273d8649", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c1d4346bf2d8a04c3af346e02337875273d8649"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d71285c933586f92497a5b5fb85368fd130f4e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d71285c933586f92497a5b5fb85368fd130f4e6", "html_url": "https://github.com/rust-lang/rust/commit/4d71285c933586f92497a5b5fb85368fd130f4e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d71285c933586f92497a5b5fb85368fd130f4e6/comments", "author": {"login": "kevina", "id": 1271492, "node_id": "MDQ6VXNlcjEyNzE0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1271492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevina", "html_url": "https://github.com/kevina", "followers_url": "https://api.github.com/users/kevina/followers", "following_url": "https://api.github.com/users/kevina/following{/other_user}", "gists_url": "https://api.github.com/users/kevina/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevina/subscriptions", "organizations_url": "https://api.github.com/users/kevina/orgs", "repos_url": "https://api.github.com/users/kevina/repos", "events_url": "https://api.github.com/users/kevina/events{/privacy}", "received_events_url": "https://api.github.com/users/kevina/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kevina", "id": 1271492, "node_id": "MDQ6VXNlcjEyNzE0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1271492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevina", "html_url": "https://github.com/kevina", "followers_url": "https://api.github.com/users/kevina/followers", "following_url": "https://api.github.com/users/kevina/following{/other_user}", "gists_url": "https://api.github.com/users/kevina/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevina/subscriptions", "organizations_url": "https://api.github.com/users/kevina/orgs", "repos_url": "https://api.github.com/users/kevina/repos", "events_url": "https://api.github.com/users/kevina/events{/privacy}", "received_events_url": "https://api.github.com/users/kevina/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c91fb4d91623bd50901ca4f4f215c928790e996", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c91fb4d91623bd50901ca4f4f215c928790e996", "html_url": "https://github.com/rust-lang/rust/commit/1c91fb4d91623bd50901ca4f4f215c928790e996"}], "stats": {"total": 43, "additions": 38, "deletions": 5}, "files": [{"sha": "42ec73077f6ceeebad38290541838762d7816585", "filename": "src/comp/syntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d71285c933586f92497a5b5fb85368fd130f4e6/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d71285c933586f92497a5b5fb85368fd130f4e6/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs?ref=4d71285c933586f92497a5b5fb85368fd130f4e6", "patch": "@@ -30,6 +30,8 @@ fn syntax_expander_table() -> hashmap<str, syntax_extension> {\n                             normal(ext::ident_to_str::expand_syntax_ext));\n     syntax_expanders.insert(\"log_syntax\",\n                             normal(ext::log_syntax::expand_syntax_ext));\n+    syntax_expanders.insert(\"ast\",\n+                            normal(ext::qquote::expand_ast));\n     ret syntax_expanders;\n }\n "}, {"sha": "be1fb2b3e265b36faf7ce5498517e846f3d4530f", "filename": "src/comp/syntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d71285c933586f92497a5b5fb85368fd130f4e6/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d71285c933586f92497a5b5fb85368fd130f4e6/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs?ref=4d71285c933586f92497a5b5fb85368fd130f4e6", "patch": "@@ -47,7 +47,7 @@ fn expand_expr(exts: hashmap<str, syntax_extension>, cx: ext_ctxt,\n                 }\n               }\n               mac_qq(sp, exp) {\n-                let r = expand_qquote(cx, sp, exp);\n+                let r = expand_qquote(cx, sp, none, exp);\n                 // need to keep going, resuls may contain embedded qquote or\n                 // macro that need expanding\n                 let r2 = fld.fold_expr(r);"}, {"sha": "2e2d9f7481e3af0db0d579df88b9b477a6457831", "filename": "src/comp/syntax/ext/qquote.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4d71285c933586f92497a5b5fb85368fd130f4e6/src%2Fcomp%2Fsyntax%2Fext%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d71285c933586f92497a5b5fb85368fd130f4e6/src%2Fcomp%2Fsyntax%2Fext%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fqquote.rs?ref=4d71285c933586f92497a5b5fb85368fd130f4e6", "patch": "@@ -8,7 +8,8 @@ import syntax::fold::*;\n import syntax::visit::*;\n import syntax::ext::base::*;\n import syntax::ext::build::*;\n-import syntax::parse::parser::parse_expr_from_source_str;\n+import syntax::parse::parser;\n+import syntax::parse::parser::{parse_from_source_str};\n \n import syntax::print::*;\n import std::io::*;\n@@ -42,8 +43,26 @@ fn is_space(c: char) -> bool {\n     syntax::parse::lexer::is_whitespace(c)\n }\n \n-fn expand_qquote(ecx: ext_ctxt, sp: span, e: @ast::expr) -> @ast::expr {\n-    let str = codemap::span_to_snippet(sp, ecx.session().parse_sess.cm);\n+fn expand_ast(ecx: ext_ctxt, _sp: span, _arg: ast::mac_arg, body: ast::mac_body)\n+    -> @ast::expr \n+{\n+    let body = get_mac_body(ecx,_sp,body);\n+    let str = @codemap::span_to_snippet(body.span, ecx.session().parse_sess.cm);\n+    let {node: e, _} = parse_from_source_str(parser::parse_expr, \n+                                             \"<anon>\", str, \n+                                             ecx.session().opts.cfg, \n+                                             ecx.session().parse_sess);\n+    ret expand_qquote(ecx, e.span, some(*str), e);\n+}\n+\n+fn expand_qquote(ecx: ext_ctxt, sp: span, maybe_str: option::t<str>, \n+                 e: @ast::expr) \n+    -> @ast::expr \n+{\n+    let str = alt(maybe_str) {\n+      some(s) {s}\n+      none {codemap::span_to_snippet(sp, ecx.session().parse_sess.cm)}\n+    };\n     let qcx = gather_anti_quotes(sp.lo, e);\n     let cx = qcx;\n     let prev = 0u;"}, {"sha": "7bd354c3a0cdfb57675c596b421118ef9d11bae0", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4d71285c933586f92497a5b5fb85368fd130f4e6/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d71285c933586f92497a5b5fb85368fd130f4e6/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=4d71285c933586f92497a5b5fb85368fd130f4e6", "patch": "@@ -1013,7 +1013,7 @@ fn parse_syntax_ext_naked(p: parser, lo: uint) -> @ast::expr {\n             }\n             p.bump();\n         }\n-        let hi = p.last_span.hi;\n+        let hi = p.last_span.lo;\n         b = some({span: mk_sp(lo,hi)});\n     }\n     ret mk_mac_expr(p, lo, p.span.hi, ast::mac_invoc(pth, e, b));\n@@ -2543,6 +2543,18 @@ fn parse_expr_from_source_str(name: str, source: @str, cfg: ast::crate_cfg,\n     ret r;\n }\n \n+fn parse_from_source_str<T>(f: fn (p: parser) -> T, \n+                            name: str, source: @str, cfg: ast::crate_cfg,\n+                            sess: parse_sess) \n+    -> {node: T, fm: codemap::filemap}\n+{\n+    let p = new_parser_from_source_str(sess, cfg, name, source);\n+    let r = f(p);\n+    sess.chpos = p.reader.chpos;\n+    sess.byte_pos = sess.byte_pos + p.reader.pos;\n+    ret {node: r, fm: option::get(vec::last(sess.cm.files))};\n+}\n+\n fn parse_crate_from_source_str(name: str, source: @str, cfg: ast::crate_cfg,\n                                sess: parse_sess) -> @ast::crate {\n     let p = new_parser_from_source_str(sess, cfg, name, source);"}]}