{"sha": "a13947abe62a44c4ffa802be54e041a3d18e7f2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExMzk0N2FiZTYyYTQ0YzRmZmE4MDJiZTU0ZTA0MWEzZDE4ZTdmMmI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-12-19T14:10:47Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-12-19T14:10:47Z"}, "message": "Use more Rustic highlighting specifiers\n\n*Method* works for OO languages, but in rust we can also have\nassociated constants & types, so let's move this to a modifier.", "tree": {"sha": "7675fa96ea2df477f30d7e6acb060ed379b86ef1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7675fa96ea2df477f30d7e6acb060ed379b86ef1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a13947abe62a44c4ffa802be54e041a3d18e7f2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a13947abe62a44c4ffa802be54e041a3d18e7f2b", "html_url": "https://github.com/rust-lang/rust/commit/a13947abe62a44c4ffa802be54e041a3d18e7f2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a13947abe62a44c4ffa802be54e041a3d18e7f2b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd270cbc024f56596c315061d10732ebbe16eef9", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd270cbc024f56596c315061d10732ebbe16eef9", "html_url": "https://github.com/rust-lang/rust/commit/bd270cbc024f56596c315061d10732ebbe16eef9"}], "stats": {"total": 116, "additions": 69, "deletions": 47}, "files": [{"sha": "67ad7c63ddf8710318101406ee0ef5e9a521b0d4", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a13947abe62a44c4ffa802be54e041a3d18e7f2b/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13947abe62a44c4ffa802be54e041a3d18e7f2b/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=a13947abe62a44c4ffa802be54e041a3d18e7f2b", "patch": "@@ -736,7 +736,8 @@ fn highlight_method_call(\n     method_call: &ast::MethodCallExpr,\n ) -> Option<Highlight> {\n     let func = sema.resolve_method_call(&method_call)?;\n-    let mut h = HighlightTag::Method.into();\n+    let mut h = HighlightTag::Symbol(SymbolKind::Function).into();\n+    h |= HighlightModifier::Associated;\n     if func.is_unsafe(sema.db) || sema.is_unsafe_method_call(&method_call) {\n         h |= HighlightModifier::Unsafe;\n     }\n@@ -765,15 +766,13 @@ fn highlight_def(db: &RootDatabase, def: Definition) -> Highlight {\n         Definition::ModuleDef(def) => match def {\n             hir::ModuleDef::Module(_) => HighlightTag::Symbol(SymbolKind::Module),\n             hir::ModuleDef::Function(func) => {\n-                let mut h = if func.as_assoc_item(db).is_some() {\n+                let mut h = Highlight::new(HighlightTag::Symbol(SymbolKind::Function));\n+                if func.as_assoc_item(db).is_some() {\n+                    h |= HighlightModifier::Associated;\n                     if func.self_param(db).is_none() {\n-                        Highlight::from(HighlightTag::Method) | HighlightModifier::Static\n-                    } else {\n-                        HighlightTag::Method.into()\n+                        h |= HighlightModifier::Static\n                     }\n-                } else {\n-                    HighlightTag::Symbol(SymbolKind::Function).into()\n-                };\n+                }\n                 if func.is_unsafe(db) {\n                     h |= HighlightModifier::Unsafe;\n                 }\n@@ -783,9 +782,21 @@ fn highlight_def(db: &RootDatabase, def: Definition) -> Highlight {\n             hir::ModuleDef::Adt(hir::Adt::Enum(_)) => HighlightTag::Symbol(SymbolKind::Enum),\n             hir::ModuleDef::Adt(hir::Adt::Union(_)) => HighlightTag::Symbol(SymbolKind::Union),\n             hir::ModuleDef::EnumVariant(_) => HighlightTag::Symbol(SymbolKind::Variant),\n-            hir::ModuleDef::Const(_) => HighlightTag::Symbol(SymbolKind::Const),\n+            hir::ModuleDef::Const(konst) => {\n+                let mut h = Highlight::new(HighlightTag::Symbol(SymbolKind::Const));\n+                if konst.as_assoc_item(db).is_some() {\n+                    h |= HighlightModifier::Associated\n+                }\n+                return h;\n+            }\n             hir::ModuleDef::Trait(_) => HighlightTag::Symbol(SymbolKind::Trait),\n-            hir::ModuleDef::TypeAlias(_) => HighlightTag::Symbol(SymbolKind::TypeAlias),\n+            hir::ModuleDef::TypeAlias(type_) => {\n+                let mut h = Highlight::new(HighlightTag::Symbol(SymbolKind::TypeAlias));\n+                if type_.as_assoc_item(db).is_some() {\n+                    h |= HighlightModifier::Associated\n+                }\n+                return h;\n+            }\n             hir::ModuleDef::BuiltinType(_) => HighlightTag::BuiltinType,\n             hir::ModuleDef::Static(s) => {\n                 let mut h = Highlight::new(HighlightTag::Symbol(SymbolKind::Static));"}, {"sha": "1b3b31747e6e8677bdc8224da878400360fb507e", "filename": "crates/ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a13947abe62a44c4ffa802be54e041a3d18e7f2b/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13947abe62a44c4ffa802be54e041a3d18e7f2b/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=a13947abe62a44c4ffa802be54e041a3d18e7f2b", "patch": "@@ -33,8 +33,7 @@ pub enum HighlightTag {\n     Operator,\n     UnresolvedReference,\n \n-    // FIXME: this two are random and don't fit with the others\n-    Method,\n+    // FIXME: this one is random and don't fit with the others\n     Generic,\n }\n \n@@ -56,6 +55,8 @@ pub enum HighlightModifier {\n     Callable,\n     /// Used for associated functions\n     Static,\n+    /// Used for items in impls&traits.\n+    Associated,\n }\n \n impl HighlightTag {\n@@ -92,7 +93,6 @@ impl HighlightTag {\n             HighlightTag::Generic => \"generic\",\n             HighlightTag::Keyword => \"keyword\",\n             HighlightTag::Punctuation => \"punctuation\",\n-            HighlightTag::Method => \"method\",\n             HighlightTag::NumericLiteral => \"numeric_literal\",\n             HighlightTag::Operator => \"operator\",\n             HighlightTag::StringLiteral => \"string_literal\",\n@@ -133,6 +133,7 @@ impl HighlightModifier {\n             HighlightModifier::Unsafe => \"unsafe\",\n             HighlightModifier::Callable => \"callable\",\n             HighlightModifier::Static => \"static\",\n+            HighlightModifier::Associated => \"associated\",\n         }\n     }\n \n@@ -199,6 +200,10 @@ impl ops::BitOr<HighlightModifier> for Highlight {\n }\n \n impl HighlightModifiers {\n+    pub fn contains(self, m: HighlightModifier) -> bool {\n+        self.0 & m.mask() == m.mask()\n+    }\n+\n     pub fn iter(self) -> impl Iterator<Item = HighlightModifier> {\n         HighlightModifier::ALL.iter().copied().filter(move |it| self.0 & it.mask() == it.mask())\n     }"}, {"sha": "cd80d72b79890a196c1e668bf7303fedf48888e5", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_assoc_functions.html", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a13947abe62a44c4ffa802be54e041a3d18e7f2b/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html", "raw_url": "https://github.com/rust-lang/rust/raw/a13947abe62a44c4ffa802be54e041a3d18e7f2b/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html?ref=a13947abe62a44c4ffa802be54e041a3d18e7f2b", "patch": "@@ -40,17 +40,17 @@\n <span class=\"keyword\">struct</span> <span class=\"struct declaration\">foo</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n \n <span class=\"keyword\">impl</span> <span class=\"struct\">foo</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"method declaration static\">is_static</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"method declaration\">is_not_static</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration static\">is_static</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration\">is_not_static</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n <span class=\"punctuation\">}</span>\n \n <span class=\"keyword\">trait</span> <span class=\"trait declaration\">t</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"method declaration static\">t_is_static</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n-    <span class=\"keyword\">fn</span> <span class=\"method declaration\">t_is_not_static</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration static\">t_is_static</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">t_is_not_static</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n <span class=\"punctuation\">}</span>\n \n <span class=\"keyword\">impl</span> <span class=\"trait\">t</span> <span class=\"keyword\">for</span> <span class=\"struct\">foo</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"method declaration static\">is_static</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"method declaration\">is_not_static</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration static\">is_static</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration\">is_not_static</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n <span class=\"punctuation\">}</span>\n         </code></pre>\n\\ No newline at end of file"}, {"sha": "882c529d88f6c08e1b1d07a494908f9771fcac08", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_doctest.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a13947abe62a44c4ffa802be54e041a3d18e7f2b/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "raw_url": "https://github.com/rust-lang/rust/raw/a13947abe62a44c4ffa802be54e041a3d18e7f2b/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html?ref=a13947abe62a44c4ffa802be54e041a3d18e7f2b", "patch": "@@ -53,7 +53,7 @@\n     <span class=\"comment documentation\">/// #</span><span class=\"generic injected\"> </span><span class=\"attribute attribute injected\">#</span><span class=\"attribute attribute injected\">!</span><span class=\"attribute attribute injected\">[</span><span class=\"function attribute injected\">allow</span><span class=\"punctuation attribute injected\">(</span><span class=\"attribute attribute injected\">unused_mut</span><span class=\"punctuation attribute injected\">)</span><span class=\"attribute attribute injected\">]</span>\n     <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"generic injected\"> </span><span class=\"keyword injected\">mut</span><span class=\"generic injected\"> </span><span class=\"variable declaration injected mutable\">foo</span><span class=\"punctuation injected\">:</span><span class=\"generic injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"generic injected\"> </span><span class=\"operator injected\">=</span><span class=\"generic injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"function injected\">new</span><span class=\"punctuation injected\">(</span><span class=\"punctuation injected\">)</span><span class=\"punctuation injected\">;</span><span class=\"punctuation injected\">\n </span>    <span class=\"comment documentation\">/// ```</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"keyword\">fn</span> <span class=\"method declaration static\">new</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"keyword\">fn</span> <span class=\"function declaration static\">new</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span>\n         <span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span> <span class=\"field\">bar</span><span class=\"punctuation\">:</span> <span class=\"bool_literal\">true</span> <span class=\"punctuation\">}</span>\n     <span class=\"punctuation\">}</span>\n \n@@ -87,7 +87,7 @@\n     <span class=\"comment documentation\">/// ```sh</span>\n     <span class=\"comment documentation\">/// echo 1</span>\n     <span class=\"comment documentation\">/// ```</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"method declaration\">foo</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">bool</span> <span class=\"punctuation\">{</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">bool</span> <span class=\"punctuation\">{</span>\n         <span class=\"bool_literal\">true</span>\n     <span class=\"punctuation\">}</span>\n <span class=\"punctuation\">}</span>"}, {"sha": "57c178916f6afa7d7fc1de5f0e816dd8ae2c412e", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_injection.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a13947abe62a44c4ffa802be54e041a3d18e7f2b/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_injection.html", "raw_url": "https://github.com/rust-lang/rust/raw/a13947abe62a44c4ffa802be54e041a3d18e7f2b/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_injection.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_injection.html?ref=a13947abe62a44c4ffa802be54e041a3d18e7f2b", "patch": "@@ -40,7 +40,7 @@\n <span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n     <span class=\"function\">fixture</span><span class=\"punctuation\">(</span><span class=\"string_literal\">r#\"</span>\n         <span class=\"keyword\">trait</span> <span class=\"trait declaration\">Foo</span> <span class=\"punctuation\">{</span>\n-            <span class=\"keyword\">fn</span> <span class=\"method declaration static\">foo</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n+            <span class=\"keyword\">fn</span> <span class=\"function declaration static\">foo</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n                 <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"2 + 2 = {}\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">4</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n             <span class=\"punctuation\">}</span>\n         <span class=\"punctuation\">}</span><span class=\"string_literal\">\"#</span>"}, {"sha": "1d05b771310b0fa006c0f19564d85ea25b05cb4d", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_unsafe.html", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a13947abe62a44c4ffa802be54e041a3d18e7f2b/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html", "raw_url": "https://github.com/rust-lang/rust/raw/a13947abe62a44c4ffa802be54e041a3d18e7f2b/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html?ref=a13947abe62a44c4ffa802be54e041a3d18e7f2b", "patch": "@@ -45,7 +45,7 @@\n <span class=\"keyword\">struct</span> <span class=\"struct declaration\">HasUnsafeFn</span><span class=\"punctuation\">;</span>\n \n <span class=\"keyword\">impl</span> <span class=\"struct\">HasUnsafeFn</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword unsafe\">unsafe</span> <span class=\"keyword\">fn</span> <span class=\"method declaration unsafe\">unsafe_method</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n+    <span class=\"keyword unsafe\">unsafe</span> <span class=\"keyword\">fn</span> <span class=\"function declaration unsafe\">unsafe_method</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n <span class=\"punctuation\">}</span>\n \n <span class=\"keyword\">struct</span> <span class=\"struct declaration\">TypeForStaticMut</span> <span class=\"punctuation\">{</span>\n@@ -60,11 +60,11 @@\n <span class=\"punctuation\">}</span>\n \n <span class=\"keyword\">trait</span> <span class=\"trait declaration\">DoTheAutoref</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"method declaration\">calls_autoref</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">calls_autoref</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n <span class=\"punctuation\">}</span>\n \n <span class=\"keyword\">impl</span> <span class=\"trait\">DoTheAutoref</span> <span class=\"keyword\">for</span> <span class=\"builtin_type\">u16</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"method declaration\">calls_autoref</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">calls_autoref</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n <span class=\"punctuation\">}</span>\n \n <span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n@@ -78,7 +78,7 @@\n             <span class=\"union\">Union</span> <span class=\"punctuation\">{</span> <span class=\"field unsafe\">b</span><span class=\"punctuation\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"punctuation\">}</span> <span class=\"operator\">=&gt;</span> <span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span>\n             <span class=\"union\">Union</span> <span class=\"punctuation\">{</span> <span class=\"field unsafe\">a</span> <span class=\"punctuation\">}</span> <span class=\"operator\">=&gt;</span> <span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span>\n         <span class=\"punctuation\">}</span>\n-        <span class=\"struct\">HasUnsafeFn</span><span class=\"operator\">.</span><span class=\"method unsafe\">unsafe_method</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+        <span class=\"struct\">HasUnsafeFn</span><span class=\"operator\">.</span><span class=\"function unsafe\">unsafe_method</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n \n         <span class=\"comment\">// unsafe deref</span>\n         <span class=\"keyword\">let</span> <span class=\"variable declaration\">y</span> <span class=\"operator\">=</span> <span class=\"operator unsafe\">*</span><span class=\"variable\">x</span><span class=\"punctuation\">;</span>\n@@ -94,6 +94,6 @@\n         <span class=\"keyword\">let</span> <span class=\"struct\">Packed</span> <span class=\"punctuation\">{</span> <span class=\"field\">a</span><span class=\"punctuation\">:</span> <span class=\"keyword unsafe\">ref</span> <span class=\"variable declaration\">_a</span> <span class=\"punctuation\">}</span> <span class=\"operator\">=</span> <span class=\"variable\">packed</span><span class=\"punctuation\">;</span>\n \n         <span class=\"comment\">// unsafe auto ref of packed field</span>\n-        <span class=\"variable\">packed</span><span class=\"operator\">.</span><span class=\"field\">a</span><span class=\"operator\">.</span><span class=\"method unsafe\">calls_autoref</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+        <span class=\"variable\">packed</span><span class=\"operator\">.</span><span class=\"field\">a</span><span class=\"operator\">.</span><span class=\"function unsafe\">calls_autoref</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n     <span class=\"punctuation\">}</span>\n <span class=\"punctuation\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "11843441802f035eda9f667b92a02fcdc8fe7f23", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a13947abe62a44c4ffa802be54e041a3d18e7f2b/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/a13947abe62a44c4ffa802be54e041a3d18e7f2b/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=a13947abe62a44c4ffa802be54e041a3d18e7f2b", "patch": "@@ -65,25 +65,25 @@\n <span class=\"punctuation\">}</span>\n \n <span class=\"keyword\">trait</span> <span class=\"trait declaration\">Bar</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"method declaration\">bar</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span><span class=\"punctuation\">;</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">bar</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span><span class=\"punctuation\">;</span>\n <span class=\"punctuation\">}</span>\n \n <span class=\"keyword\">impl</span> <span class=\"trait\">Bar</span> <span class=\"keyword\">for</span> <span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"method declaration\">bar</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"punctuation\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">bar</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"punctuation\">{</span>\n         <span class=\"self_keyword\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span>\n     <span class=\"punctuation\">}</span>\n <span class=\"punctuation\">}</span>\n \n <span class=\"keyword\">impl</span> <span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"method declaration\">baz</span><span class=\"punctuation\">(</span><span class=\"keyword\">mut</span> <span class=\"self_keyword mutable\">self</span><span class=\"punctuation\">,</span> <span class=\"value_param declaration\">f</span><span class=\"punctuation\">:</span> <span class=\"struct\">Foo</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"punctuation\">{</span>\n-        <span class=\"value_param\">f</span><span class=\"operator\">.</span><span class=\"method consuming\">baz</span><span class=\"punctuation\">(</span><span class=\"self_keyword mutable consuming\">self</span><span class=\"punctuation\">)</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">baz</span><span class=\"punctuation\">(</span><span class=\"keyword\">mut</span> <span class=\"self_keyword mutable\">self</span><span class=\"punctuation\">,</span> <span class=\"value_param declaration\">f</span><span class=\"punctuation\">:</span> <span class=\"struct\">Foo</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"punctuation\">{</span>\n+        <span class=\"value_param\">f</span><span class=\"operator\">.</span><span class=\"function consuming\">baz</span><span class=\"punctuation\">(</span><span class=\"self_keyword mutable consuming\">self</span><span class=\"punctuation\">)</span>\n     <span class=\"punctuation\">}</span>\n \n-    <span class=\"keyword\">fn</span> <span class=\"method declaration\">qux</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"self_keyword mutable\">self</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">qux</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"self_keyword mutable\">self</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n         <span class=\"self_keyword mutable\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">0</span><span class=\"punctuation\">;</span>\n     <span class=\"punctuation\">}</span>\n \n-    <span class=\"keyword\">fn</span> <span class=\"method declaration\">quop</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"punctuation\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">quop</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"punctuation\">{</span>\n         <span class=\"self_keyword\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span>\n     <span class=\"punctuation\">}</span>\n <span class=\"punctuation\">}</span>\n@@ -94,15 +94,15 @@\n <span class=\"punctuation\">}</span>\n \n <span class=\"keyword\">impl</span> <span class=\"struct\">FooCopy</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"method declaration\">baz</span><span class=\"punctuation\">(</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">,</span> <span class=\"value_param declaration\">f</span><span class=\"punctuation\">:</span> <span class=\"struct\">FooCopy</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">u32</span> <span class=\"punctuation\">{</span>\n-        <span class=\"value_param\">f</span><span class=\"operator\">.</span><span class=\"method\">baz</span><span class=\"punctuation\">(</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">baz</span><span class=\"punctuation\">(</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">,</span> <span class=\"value_param declaration\">f</span><span class=\"punctuation\">:</span> <span class=\"struct\">FooCopy</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">u32</span> <span class=\"punctuation\">{</span>\n+        <span class=\"value_param\">f</span><span class=\"operator\">.</span><span class=\"function\">baz</span><span class=\"punctuation\">(</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span>\n     <span class=\"punctuation\">}</span>\n \n-    <span class=\"keyword\">fn</span> <span class=\"method declaration\">qux</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"self_keyword mutable\">self</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">qux</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"self_keyword mutable\">self</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n         <span class=\"self_keyword mutable\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">0</span><span class=\"punctuation\">;</span>\n     <span class=\"punctuation\">}</span>\n \n-    <span class=\"keyword\">fn</span> <span class=\"method declaration\">quop</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">u32</span> <span class=\"punctuation\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">quop</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">u32</span> <span class=\"punctuation\">{</span>\n         <span class=\"self_keyword\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span>\n     <span class=\"punctuation\">}</span>\n <span class=\"punctuation\">}</span>\n@@ -178,17 +178,17 @@\n \n     <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">foo</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span> <span class=\"field\">x</span><span class=\"punctuation\">,</span> <span class=\"field\">y</span><span class=\"punctuation\">:</span> <span class=\"variable mutable\">x</span> <span class=\"punctuation\">}</span><span class=\"punctuation\">;</span>\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">foo2</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span> <span class=\"field\">x</span><span class=\"punctuation\">,</span> <span class=\"field\">y</span><span class=\"punctuation\">:</span> <span class=\"variable mutable\">x</span> <span class=\"punctuation\">}</span><span class=\"punctuation\">;</span>\n-    <span class=\"variable mutable\">foo</span><span class=\"operator\">.</span><span class=\"method\">quop</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"variable mutable\">foo</span><span class=\"operator\">.</span><span class=\"method mutable\">qux</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"variable mutable\">foo</span><span class=\"operator\">.</span><span class=\"method consuming\">baz</span><span class=\"punctuation\">(</span><span class=\"variable consuming\">foo2</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+    <span class=\"variable mutable\">foo</span><span class=\"operator\">.</span><span class=\"function\">quop</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+    <span class=\"variable mutable\">foo</span><span class=\"operator\">.</span><span class=\"function mutable\">qux</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+    <span class=\"variable mutable\">foo</span><span class=\"operator\">.</span><span class=\"function consuming\">baz</span><span class=\"punctuation\">(</span><span class=\"variable consuming\">foo2</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n \n     <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">copy</span> <span class=\"operator\">=</span> <span class=\"struct\">FooCopy</span> <span class=\"punctuation\">{</span> <span class=\"field\">x</span> <span class=\"punctuation\">}</span><span class=\"punctuation\">;</span>\n-    <span class=\"variable mutable\">copy</span><span class=\"operator\">.</span><span class=\"method\">quop</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"variable mutable\">copy</span><span class=\"operator\">.</span><span class=\"method mutable\">qux</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"variable mutable\">copy</span><span class=\"operator\">.</span><span class=\"method\">baz</span><span class=\"punctuation\">(</span><span class=\"variable mutable\">copy</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+    <span class=\"variable mutable\">copy</span><span class=\"operator\">.</span><span class=\"function\">quop</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+    <span class=\"variable mutable\">copy</span><span class=\"operator\">.</span><span class=\"function mutable\">qux</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+    <span class=\"variable mutable\">copy</span><span class=\"operator\">.</span><span class=\"function\">baz</span><span class=\"punctuation\">(</span><span class=\"variable mutable\">copy</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n \n     <span class=\"keyword\">let</span> <span class=\"variable declaration callable\">a</span> <span class=\"operator\">=</span> <span class=\"punctuation\">|</span><span class=\"value_param declaration\">x</span><span class=\"punctuation\">|</span> <span class=\"value_param\">x</span><span class=\"punctuation\">;</span>\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration callable\">bar</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span><span class=\"operator\">::</span><span class=\"method\">baz</span><span class=\"punctuation\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration callable\">bar</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span><span class=\"operator\">::</span><span class=\"function\">baz</span><span class=\"punctuation\">;</span>\n \n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">baz</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">-</span><span class=\"numeric_literal\">42</span><span class=\"punctuation\">;</span>\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">baz</span> <span class=\"operator\">=</span> <span class=\"operator\">-</span><span class=\"variable\">baz</span><span class=\"punctuation\">;</span>\n@@ -203,7 +203,7 @@\n <span class=\"keyword\">use</span> <span class=\"enum\">Option</span><span class=\"operator\">::</span><span class=\"punctuation\">*</span><span class=\"punctuation\">;</span>\n \n <span class=\"keyword\">impl</span><span class=\"punctuation\">&lt;</span><span class=\"type_param declaration\">T</span><span class=\"punctuation\">&gt;</span> <span class=\"enum\">Option</span><span class=\"punctuation\">&lt;</span><span class=\"type_param\">T</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"method declaration\">and</span><span class=\"punctuation\">&lt;</span><span class=\"type_param declaration\">U</span><span class=\"punctuation\">&gt;</span><span class=\"punctuation\">(</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">,</span> <span class=\"value_param declaration\">other</span><span class=\"punctuation\">:</span> <span class=\"enum\">Option</span><span class=\"punctuation\">&lt;</span><span class=\"type_param\">U</span><span class=\"punctuation\">&gt;</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"enum\">Option</span><span class=\"punctuation\">&lt;</span><span class=\"punctuation\">(</span><span class=\"type_param\">T</span><span class=\"punctuation\">,</span> <span class=\"type_param\">U</span><span class=\"punctuation\">)</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">and</span><span class=\"punctuation\">&lt;</span><span class=\"type_param declaration\">U</span><span class=\"punctuation\">&gt;</span><span class=\"punctuation\">(</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">,</span> <span class=\"value_param declaration\">other</span><span class=\"punctuation\">:</span> <span class=\"enum\">Option</span><span class=\"punctuation\">&lt;</span><span class=\"type_param\">U</span><span class=\"punctuation\">&gt;</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"enum\">Option</span><span class=\"punctuation\">&lt;</span><span class=\"punctuation\">(</span><span class=\"type_param\">T</span><span class=\"punctuation\">,</span> <span class=\"type_param\">U</span><span class=\"punctuation\">)</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">{</span>\n         <span class=\"keyword control\">match</span> <span class=\"value_param\">other</span> <span class=\"punctuation\">{</span>\n             <span class=\"enum_variant\">None</span> <span class=\"operator\">=&gt;</span> <span class=\"macro\">unimplemented!</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span>\n             <span class=\"variable declaration\">Nope</span> <span class=\"operator\">=&gt;</span> <span class=\"variable\">Nope</span><span class=\"punctuation\">,</span>"}, {"sha": "9bea7366b8fad03f3885f9c4a445c839372e62c2", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a13947abe62a44c4ffa802be54e041a3d18e7f2b/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13947abe62a44c4ffa802be54e041a3d18e7f2b/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=a13947abe62a44c4ffa802be54e041a3d18e7f2b", "patch": "@@ -381,7 +381,13 @@ fn semantic_token_type_and_modifiers(\n             SymbolKind::ValueParam => lsp_types::SemanticTokenType::PARAMETER,\n             SymbolKind::SelfParam => semantic_tokens::SELF_KEYWORD,\n             SymbolKind::Local => lsp_types::SemanticTokenType::VARIABLE,\n-            SymbolKind::Function => lsp_types::SemanticTokenType::FUNCTION,\n+            SymbolKind::Function => {\n+                if highlight.modifiers.contains(HighlightModifier::Associated) {\n+                    lsp_types::SemanticTokenType::METHOD\n+                } else {\n+                    lsp_types::SemanticTokenType::FUNCTION\n+                }\n+            }\n             SymbolKind::Const => {\n                 mods |= semantic_tokens::CONSTANT;\n                 mods |= lsp_types::SemanticTokenModifier::STATIC;\n@@ -401,7 +407,6 @@ fn semantic_token_type_and_modifiers(\n         },\n         HighlightTag::BuiltinType => semantic_tokens::BUILTIN_TYPE,\n         HighlightTag::Generic => semantic_tokens::GENERIC,\n-        HighlightTag::Method => lsp_types::SemanticTokenType::METHOD,\n         HighlightTag::ByteLiteral | HighlightTag::NumericLiteral => {\n             lsp_types::SemanticTokenType::NUMBER\n         }\n@@ -431,6 +436,7 @@ fn semantic_token_type_and_modifiers(\n             HighlightModifier::Unsafe => semantic_tokens::UNSAFE,\n             HighlightModifier::Callable => semantic_tokens::CALLABLE,\n             HighlightModifier::Static => lsp_types::SemanticTokenModifier::STATIC,\n+            HighlightModifier::Associated => continue,\n         };\n         mods |= modifier;\n     }"}]}