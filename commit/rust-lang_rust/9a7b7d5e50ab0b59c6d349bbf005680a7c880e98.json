{"sha": "9a7b7d5e50ab0b59c6d349bbf005680a7c880e98", "node_id": "C_kwDOAAsO6NoAKDlhN2I3ZDVlNTBhYjBiNTljNmQzNDliYmYwMDU2ODBhN2M4ODBlOTg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-19T19:36:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-19T19:36:57Z"}, "message": "Auto merge of #98180 - notriddle:notriddle/rustdoc-fn, r=petrochenkov,GuillaumeGomez\n\nImprove the function pointer docs\n\nThis is #97842 but for function pointers instead of tuples. The concept is basically the same.\n\n* Reduce duplicate impls; show `fn (T\u2081, T\u2082, \u2026, T\u2099)` and include a sentence saying that there exists up to twelve of them.\n* Show `Copy` and `Clone`.\n* Show auto traits like `Send` and `Sync`, and blanket impls like `Any`.\n\nhttps://notriddle.com/notriddle-rustdoc-test/std/primitive.fn.html", "tree": {"sha": "ff10292ed61a9f79a1ecf3e5394d9defc26dd95a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff10292ed61a9f79a1ecf3e5394d9defc26dd95a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98", "html_url": "https://github.com/rust-lang/rust/commit/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29c5a028b0c92aa5da6a8eb6d6585a389fcf1035", "url": "https://api.github.com/repos/rust-lang/rust/commits/29c5a028b0c92aa5da6a8eb6d6585a389fcf1035", "html_url": "https://github.com/rust-lang/rust/commit/29c5a028b0c92aa5da6a8eb6d6585a389fcf1035"}, {"sha": "ddb5a2638acbbe33815aefdbeff3266df4ebcd21", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddb5a2638acbbe33815aefdbeff3266df4ebcd21", "html_url": "https://github.com/rust-lang/rust/commit/ddb5a2638acbbe33815aefdbeff3266df4ebcd21"}], "stats": {"total": 384, "additions": 278, "deletions": 106}, "files": [{"sha": "ad9ed798e558bde002fc058adade9b854c903bf5", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=9a7b7d5e50ab0b59c6d349bbf005680a7c880e98", "patch": "@@ -404,8 +404,8 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                     gate_feature_post!(self, rustdoc_internals, attr.span, msg);\n                 }\n \n-                if nested_meta.has_name(sym::tuple_variadic) {\n-                    let msg = \"`#[doc(tuple_variadic)]` is meant for internal use only\";\n+                if nested_meta.has_name(sym::fake_variadic) {\n+                    let msg = \"`#[doc(fake_variadic)]` is meant for internal use only\";\n                     gate_feature_post!(self, rustdoc_internals, attr.span, msg);\n                 }\n             }"}, {"sha": "cfabae1a6346d6a2d0217d4622efb5706d06ed2f", "filename": "compiler/rustc_error_codes/src/error_codes/E0118.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0118.md", "raw_url": "https://github.com/rust-lang/rust/raw/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0118.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0118.md?ref=9a7b7d5e50ab0b59c6d349bbf005680a7c880e98", "patch": "@@ -4,7 +4,7 @@ enum, union, or trait object.\n Erroneous code example:\n \n ```compile_fail,E0118\n-impl fn(u8) { // error: no nominal type found for inherent implementation\n+impl<T> T { // error: no nominal type found for inherent implementation\n     fn get_state(&self) -> String {\n         // ...\n     }\n@@ -20,8 +20,8 @@ trait LiveLongAndProsper {\n     fn get_state(&self) -> String;\n }\n \n-// and now you can implement it on fn(u8)\n-impl LiveLongAndProsper for fn(u8) {\n+// and now you can implement it on T\n+impl<T> LiveLongAndProsper for T {\n     fn get_state(&self) -> String {\n         \"He's dead, Jim!\".to_owned()\n     }\n@@ -33,9 +33,9 @@ For example, `NewType` is a newtype over `Foo` in `struct NewType(Foo)`.\n Example:\n \n ```\n-struct TypeWrapper(fn(u8));\n+struct TypeWrapper<T>(T);\n \n-impl TypeWrapper {\n+impl<T> TypeWrapper<T> {\n     fn get_state(&self) -> String {\n         \"Fascinating!\".to_owned()\n     }"}, {"sha": "04c67cf8ff73ae3542c4ee5676c0876d9f5a555c", "filename": "compiler/rustc_error_messages/locales/en-US/passes.ftl", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl?ref=9a7b7d5e50ab0b59c6d349bbf005680a7c880e98", "patch": "@@ -81,8 +81,8 @@ passes-doc-keyword-not-mod = `#[doc(keyword = \"...\")]` should be used on modules\n \n passes-doc-keyword-invalid-ident = `{$doc_keyword}` is not a valid identifier\n \n-passes-doc-tuple-variadic-not-first =\n-    `#[doc(tuple_variadic)]` must be used on the first of a set of tuple trait impls with varying arity\n+passes-doc-fake-variadic-not-valid =\n+    `#[doc(fake_variadic)]` must be used on the first of a set of tuple or fn pointer trait impls with varying arity\n \n passes-doc-keyword-only-impl = `#[doc(keyword = \"...\")]` should be used on impl blocks\n "}, {"sha": "f88997f884a4478bf5f5618fc14ab356e7631c9e", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=9a7b7d5e50ab0b59c6d349bbf005680a7c880e98", "patch": "@@ -706,14 +706,20 @@ impl CheckAttrVisitor<'_> {\n         true\n     }\n \n-    fn check_doc_tuple_variadic(&self, meta: &NestedMetaItem, hir_id: HirId) -> bool {\n+    fn check_doc_fake_variadic(&self, meta: &NestedMetaItem, hir_id: HirId) -> bool {\n         match self.tcx.hir().find(hir_id).and_then(|node| match node {\n             hir::Node::Item(item) => Some(&item.kind),\n             _ => None,\n         }) {\n             Some(ItemKind::Impl(ref i)) => {\n-                if !matches!(&i.self_ty.kind, hir::TyKind::Tup([_])) {\n-                    self.tcx.sess.emit_err(errors::DocTupleVariadicNotFirst { span: meta.span() });\n+                let is_valid = matches!(&i.self_ty.kind, hir::TyKind::Tup([_]))\n+                    || if let hir::TyKind::BareFn(bare_fn_ty) = &i.self_ty.kind {\n+                        bare_fn_ty.decl.inputs.len() == 1\n+                    } else {\n+                        false\n+                    };\n+                if !is_valid {\n+                    self.tcx.sess.emit_err(errors::DocFakeVariadicNotValid { span: meta.span() });\n                     return false;\n                 }\n             }\n@@ -887,9 +893,9 @@ impl CheckAttrVisitor<'_> {\n                             is_valid = false\n                         }\n \n-                        sym::tuple_variadic\n-                            if !self.check_attr_not_crate_level(meta, hir_id, \"tuple_variadic\")\n-                                || !self.check_doc_tuple_variadic(meta, hir_id) =>\n+                        sym::fake_variadic\n+                            if !self.check_attr_not_crate_level(meta, hir_id, \"fake_variadic\")\n+                                || !self.check_doc_fake_variadic(meta, hir_id) =>\n                         {\n                             is_valid = false\n                         }\n@@ -939,7 +945,7 @@ impl CheckAttrVisitor<'_> {\n                         | sym::notable_trait\n                         | sym::passes\n                         | sym::plugins\n-                        | sym::tuple_variadic => {}\n+                        | sym::fake_variadic => {}\n \n                         sym::test => {\n                             if !self.check_test_attr(meta, hir_id) {"}, {"sha": "fcd1e9363b1bed01018495447afebf0d5e9fe647", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=9a7b7d5e50ab0b59c6d349bbf005680a7c880e98", "patch": "@@ -212,8 +212,8 @@ pub struct DocKeywordInvalidIdent {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(passes::doc_tuple_variadic_not_first)]\n-pub struct DocTupleVariadicNotFirst {\n+#[error(passes::doc_fake_variadic_not_valid)]\n+pub struct DocFakeVariadicNotValid {\n     #[primary_span]\n     pub span: Span,\n }"}, {"sha": "ec1d2c39b8092dbfa5aae6a5d39e9b7b694ace95", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=9a7b7d5e50ab0b59c6d349bbf005680a7c880e98", "patch": "@@ -696,6 +696,7 @@ symbols! {\n         fabsf32,\n         fabsf64,\n         fadd_fast,\n+        fake_variadic,\n         fdiv_fast,\n         feature,\n         fence,\n@@ -1471,7 +1472,6 @@ symbols! {\n         tuple,\n         tuple_from_req,\n         tuple_indexing,\n-        tuple_variadic,\n         two_phase,\n         ty,\n         type_alias_enum_variants,"}, {"sha": "52aad636fd88ac887da8d5b229c7f94ae72c6d01", "filename": "compiler/rustc_typeck/src/coherence/inherent_impls.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs?ref=9a7b7d5e50ab0b59c6d349bbf005680a7c880e98", "patch": "@@ -219,8 +219,9 @@ impl<'tcx> InherentCollect<'tcx> {\n             | ty::RawPtr(_)\n             | ty::Ref(..)\n             | ty::Never\n+            | ty::FnPtr(_)\n             | ty::Tuple(..) => self.check_primitive_impl(item.def_id, self_ty, items, ty.span),\n-            ty::FnPtr(_) | ty::Projection(..) | ty::Opaque(..) | ty::Param(_) => {\n+            ty::Projection(..) | ty::Opaque(..) | ty::Param(_) => {\n                 let mut err = struct_span_err!(\n                     self.tcx.sess,\n                     ty.span,"}, {"sha": "372141e0933f560600fdcbe7ac79ec8400170513", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=9a7b7d5e50ab0b59c6d349bbf005680a7c880e98", "patch": "@@ -2562,7 +2562,7 @@ macro_rules! tuple {\n \n macro_rules! maybe_tuple_doc {\n     ($a:ident @ #[$meta:meta] $item:item) => {\n-        #[doc(tuple_variadic)]\n+        #[cfg_attr(not(bootstrap), doc(fake_variadic))]\n         #[doc = \"This trait is implemented for tuples up to twelve items long.\"]\n         #[$meta]\n         $item"}, {"sha": "5974562aced4ebee6c2742545792598c60d2f0cb", "filename": "library/core/src/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs?ref=9a7b7d5e50ab0b59c6d349bbf005680a7c880e98", "patch": "@@ -900,7 +900,7 @@ mod impls {\n \n     macro_rules! maybe_tuple_doc {\n         ($a:ident @ #[$meta:meta] $item:item) => {\n-            #[doc(tuple_variadic)]\n+            #[cfg_attr(not(bootstrap), doc(fake_variadic))]\n             #[doc = \"This trait is implemented for tuples up to twelve items long.\"]\n             #[$meta]\n             $item"}, {"sha": "b8e5461640c0581ea4a242fb7724aea2140c01da", "filename": "library/core/src/primitive_docs.rs", "status": "modified", "additions": 52, "deletions": 12, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprimitive_docs.rs?ref=9a7b7d5e50ab0b59c6d349bbf005680a7c880e98", "patch": "@@ -996,7 +996,7 @@ impl<T> (T,) {}\n // Fake impl that's only really used for docs.\n #[cfg(doc)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[doc(tuple_variadic)]\n+#[cfg_attr(not(bootstrap), doc(fake_variadic))]\n /// This trait is implemented on arbitrary-length tuples.\n impl<T: Clone> Clone for (T,) {\n     fn clone(&self) -> Self {\n@@ -1007,7 +1007,7 @@ impl<T: Clone> Clone for (T,) {\n // Fake impl that's only really used for docs.\n #[cfg(doc)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[doc(tuple_variadic)]\n+#[cfg_attr(not(bootstrap), doc(fake_variadic))]\n /// This trait is implemented on arbitrary-length tuples.\n impl<T: Copy> Copy for (T,) {\n     // empty\n@@ -1441,11 +1441,16 @@ mod prim_ref {}\n /// Note that all of this is not portable to platforms where function pointers and data pointers\n /// have different sizes.\n ///\n-/// ### Traits\n+/// ### Trait implementations\n ///\n-/// Function pointers implement the following traits:\n+/// In this documentation the shorthand `fn (T\u2081, T\u2082, \u2026, T\u2099)` is used to represent non-variadic\n+/// function pointers of varying length. Note that this is a convenience notation to avoid\n+/// repetitive documentation, not valid Rust syntax.\n+///\n+/// Due to a temporary restriction in Rust's type system, these traits are only implemented on\n+/// functions that take 12 arguments or less, with the `\"Rust\"` and `\"C\"` ABIs. In the future, this\n+/// may change:\n ///\n-/// * [`Clone`]\n /// * [`PartialEq`]\n /// * [`Eq`]\n /// * [`PartialOrd`]\n@@ -1454,15 +1459,50 @@ mod prim_ref {}\n /// * [`Pointer`]\n /// * [`Debug`]\n ///\n+/// The following traits are implemented for function pointers with any number of arguments and\n+/// any ABI. These traits have implementations that are automatically generated by the compiler,\n+/// so are not limited by missing language features:\n+///\n+/// * [`Clone`]\n+/// * [`Copy`]\n+/// * [`Send`]\n+/// * [`Sync`]\n+/// * [`Unpin`]\n+/// * [`UnwindSafe`]\n+/// * [`RefUnwindSafe`]\n+///\n /// [`Hash`]: hash::Hash\n /// [`Pointer`]: fmt::Pointer\n+/// [`UnwindSafe`]: panic::UnwindSafe\n+/// [`RefUnwindSafe`]: panic::RefUnwindSafe\n ///\n-/// Due to a temporary restriction in Rust's type system, these traits are only implemented on\n-/// functions that take 12 arguments or less, with the `\"Rust\"` and `\"C\"` ABIs. In the future, this\n-/// may change.\n-///\n-/// In addition, function pointers of *any* signature, ABI, or safety are [`Copy`], and all *safe*\n-/// function pointers implement [`Fn`], [`FnMut`], and [`FnOnce`]. This works because these traits\n-/// are specially known to the compiler.\n+/// In addition, all *safe* function pointers implement [`Fn`], [`FnMut`], and [`FnOnce`], because\n+/// these traits are specially known to the compiler.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_fn {}\n+\n+// Required to make auto trait impls render.\n+// See src/librustdoc/passes/collect_trait_impls.rs:collect_trait_impls\n+#[doc(hidden)]\n+#[cfg(not(bootstrap))]\n+impl<Ret, T> fn(T) -> Ret {}\n+\n+// Fake impl that's only really used for docs.\n+#[cfg(doc)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(bootstrap), doc(fake_variadic))]\n+/// This trait is implemented on function pointers with any number of arguments.\n+impl<Ret, T> Clone for fn(T) -> Ret {\n+    fn clone(&self) -> Self {\n+        loop {}\n+    }\n+}\n+\n+// Fake impl that's only really used for docs.\n+#[cfg(doc)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(bootstrap), doc(fake_variadic))]\n+/// This trait is implemented on function pointers with any number of arguments.\n+impl<Ret, T> Copy for fn(T) -> Ret {\n+    // empty\n+}"}, {"sha": "62548b5fadd2eab0813622d1e03799765890e349", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 72, "deletions": 30, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=9a7b7d5e50ab0b59c6d349bbf005680a7c880e98", "patch": "@@ -1819,6 +1819,27 @@ pub fn hash<T: ?Sized, S: hash::Hasher>(hashee: *const T, into: &mut S) {\n     hashee.hash(into);\n }\n \n+// If this is a unary fn pointer, it adds a doc comment.\n+// Otherwise, it hides the docs entirely.\n+macro_rules! maybe_fnptr_doc {\n+    (@ #[$meta:meta] $item:item) => {\n+        #[doc(hidden)]\n+        #[$meta]\n+        $item\n+    };\n+    ($a:ident @ #[$meta:meta] $item:item) => {\n+        #[cfg_attr(not(bootstrap), doc(fake_variadic))]\n+        #[doc = \"This trait is implemented for function pointers with up to twelve arguments.\"]\n+        #[$meta]\n+        $item\n+    };\n+    ($a:ident $($rest_a:ident)+ @ #[$meta:meta] $item:item) => {\n+        #[doc(hidden)]\n+        #[$meta]\n+        $item\n+    };\n+}\n+\n // FIXME(strict_provenance_magic): function pointers have buggy codegen that\n // necessitates casting to a usize to get the backend to do the right thing.\n // for now I will break AVR to silence *a billion* lints. We should probably\n@@ -1827,51 +1848,72 @@ pub fn hash<T: ?Sized, S: hash::Hasher>(hashee: *const T, into: &mut S) {\n // Impls for function pointers\n macro_rules! fnptr_impls_safety_abi {\n     ($FnTy: ty, $($Arg: ident),*) => {\n-        #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n-        impl<Ret, $($Arg),*> PartialEq for $FnTy {\n-            #[inline]\n-            fn eq(&self, other: &Self) -> bool {\n-                *self as usize == *other as usize\n+        maybe_fnptr_doc! {\n+            $($Arg)* @\n+            #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+            impl<Ret, $($Arg),*> PartialEq for $FnTy {\n+                #[inline]\n+                fn eq(&self, other: &Self) -> bool {\n+                    *self as usize == *other as usize\n+                }\n             }\n         }\n \n-        #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n-        impl<Ret, $($Arg),*> Eq for $FnTy {}\n+        maybe_fnptr_doc! {\n+            $($Arg)* @\n+            #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+            impl<Ret, $($Arg),*> Eq for $FnTy {}\n+        }\n \n-        #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n-        impl<Ret, $($Arg),*> PartialOrd for $FnTy {\n-            #[inline]\n-            fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n-                (*self as usize).partial_cmp(&(*other as usize))\n+        maybe_fnptr_doc! {\n+            $($Arg)* @\n+            #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+            impl<Ret, $($Arg),*> PartialOrd for $FnTy {\n+                #[inline]\n+                fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n+                    (*self as usize).partial_cmp(&(*other as usize))\n+                }\n             }\n         }\n \n-        #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n-        impl<Ret, $($Arg),*> Ord for $FnTy {\n-            #[inline]\n-            fn cmp(&self, other: &Self) -> Ordering {\n-                (*self as usize).cmp(&(*other as usize))\n+        maybe_fnptr_doc! {\n+            $($Arg)* @\n+            #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+            impl<Ret, $($Arg),*> Ord for $FnTy {\n+                #[inline]\n+                fn cmp(&self, other: &Self) -> Ordering {\n+                    (*self as usize).cmp(&(*other as usize))\n+                }\n             }\n         }\n \n-        #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n-        impl<Ret, $($Arg),*> hash::Hash for $FnTy {\n-            fn hash<HH: hash::Hasher>(&self, state: &mut HH) {\n-                state.write_usize(*self as usize)\n+        maybe_fnptr_doc! {\n+            $($Arg)* @\n+            #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+            impl<Ret, $($Arg),*> hash::Hash for $FnTy {\n+                fn hash<HH: hash::Hasher>(&self, state: &mut HH) {\n+                    state.write_usize(*self as usize)\n+                }\n             }\n         }\n \n-        #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n-        impl<Ret, $($Arg),*> fmt::Pointer for $FnTy {\n-            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-                fmt::pointer_fmt_inner(*self as usize, f)\n+        maybe_fnptr_doc! {\n+            $($Arg)* @\n+            #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+            impl<Ret, $($Arg),*> fmt::Pointer for $FnTy {\n+                fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+                    fmt::pointer_fmt_inner(*self as usize, f)\n+                }\n             }\n         }\n \n-        #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n-        impl<Ret, $($Arg),*> fmt::Debug for $FnTy {\n-            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-                fmt::pointer_fmt_inner(*self as usize, f)\n+        maybe_fnptr_doc! {\n+            $($Arg)* @\n+            #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+            impl<Ret, $($Arg),*> fmt::Debug for $FnTy {\n+                fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+                    fmt::pointer_fmt_inner(*self as usize, f)\n+                }\n             }\n         }\n     }\n@@ -1896,7 +1938,7 @@ macro_rules! fnptr_impls_args {\n }\n \n fnptr_impls_args! {}\n-fnptr_impls_args! { A }\n+fnptr_impls_args! { T }\n fnptr_impls_args! { A, B }\n fnptr_impls_args! { A, B, C }\n fnptr_impls_args! { A, B, C, D }"}, {"sha": "d189e6400f1e87951c5ca8eb9166f192af9be3b1", "filename": "library/core/src/tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/library%2Fcore%2Fsrc%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/library%2Fcore%2Fsrc%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftuple.rs?ref=9a7b7d5e50ab0b59c6d349bbf005680a7c880e98", "patch": "@@ -107,7 +107,7 @@ macro_rules! tuple_impls {\n // Otherwise, it hides the docs entirely.\n macro_rules! maybe_tuple_doc {\n     ($a:ident @ #[$meta:meta] $item:item) => {\n-        #[doc(tuple_variadic)]\n+        #[cfg_attr(not(bootstrap), doc(fake_variadic))]\n         #[doc = \"This trait is implemented for tuples up to twelve items long.\"]\n         #[$meta]\n         $item"}, {"sha": "b8e5461640c0581ea4a242fb7724aea2140c01da", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 52, "deletions": 12, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=9a7b7d5e50ab0b59c6d349bbf005680a7c880e98", "patch": "@@ -996,7 +996,7 @@ impl<T> (T,) {}\n // Fake impl that's only really used for docs.\n #[cfg(doc)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[doc(tuple_variadic)]\n+#[cfg_attr(not(bootstrap), doc(fake_variadic))]\n /// This trait is implemented on arbitrary-length tuples.\n impl<T: Clone> Clone for (T,) {\n     fn clone(&self) -> Self {\n@@ -1007,7 +1007,7 @@ impl<T: Clone> Clone for (T,) {\n // Fake impl that's only really used for docs.\n #[cfg(doc)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[doc(tuple_variadic)]\n+#[cfg_attr(not(bootstrap), doc(fake_variadic))]\n /// This trait is implemented on arbitrary-length tuples.\n impl<T: Copy> Copy for (T,) {\n     // empty\n@@ -1441,11 +1441,16 @@ mod prim_ref {}\n /// Note that all of this is not portable to platforms where function pointers and data pointers\n /// have different sizes.\n ///\n-/// ### Traits\n+/// ### Trait implementations\n ///\n-/// Function pointers implement the following traits:\n+/// In this documentation the shorthand `fn (T\u2081, T\u2082, \u2026, T\u2099)` is used to represent non-variadic\n+/// function pointers of varying length. Note that this is a convenience notation to avoid\n+/// repetitive documentation, not valid Rust syntax.\n+///\n+/// Due to a temporary restriction in Rust's type system, these traits are only implemented on\n+/// functions that take 12 arguments or less, with the `\"Rust\"` and `\"C\"` ABIs. In the future, this\n+/// may change:\n ///\n-/// * [`Clone`]\n /// * [`PartialEq`]\n /// * [`Eq`]\n /// * [`PartialOrd`]\n@@ -1454,15 +1459,50 @@ mod prim_ref {}\n /// * [`Pointer`]\n /// * [`Debug`]\n ///\n+/// The following traits are implemented for function pointers with any number of arguments and\n+/// any ABI. These traits have implementations that are automatically generated by the compiler,\n+/// so are not limited by missing language features:\n+///\n+/// * [`Clone`]\n+/// * [`Copy`]\n+/// * [`Send`]\n+/// * [`Sync`]\n+/// * [`Unpin`]\n+/// * [`UnwindSafe`]\n+/// * [`RefUnwindSafe`]\n+///\n /// [`Hash`]: hash::Hash\n /// [`Pointer`]: fmt::Pointer\n+/// [`UnwindSafe`]: panic::UnwindSafe\n+/// [`RefUnwindSafe`]: panic::RefUnwindSafe\n ///\n-/// Due to a temporary restriction in Rust's type system, these traits are only implemented on\n-/// functions that take 12 arguments or less, with the `\"Rust\"` and `\"C\"` ABIs. In the future, this\n-/// may change.\n-///\n-/// In addition, function pointers of *any* signature, ABI, or safety are [`Copy`], and all *safe*\n-/// function pointers implement [`Fn`], [`FnMut`], and [`FnOnce`]. This works because these traits\n-/// are specially known to the compiler.\n+/// In addition, all *safe* function pointers implement [`Fn`], [`FnMut`], and [`FnOnce`], because\n+/// these traits are specially known to the compiler.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_fn {}\n+\n+// Required to make auto trait impls render.\n+// See src/librustdoc/passes/collect_trait_impls.rs:collect_trait_impls\n+#[doc(hidden)]\n+#[cfg(not(bootstrap))]\n+impl<Ret, T> fn(T) -> Ret {}\n+\n+// Fake impl that's only really used for docs.\n+#[cfg(doc)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(bootstrap), doc(fake_variadic))]\n+/// This trait is implemented on function pointers with any number of arguments.\n+impl<Ret, T> Clone for fn(T) -> Ret {\n+    fn clone(&self) -> Self {\n+        loop {}\n+    }\n+}\n+\n+// Fake impl that's only really used for docs.\n+#[cfg(doc)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(bootstrap), doc(fake_variadic))]\n+/// This trait is implemented on function pointers with any number of arguments.\n+impl<Ret, T> Copy for fn(T) -> Ret {\n+    // empty\n+}"}, {"sha": "ce10ca9aa3df434e90a76ff035f440787bd41578", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=9a7b7d5e50ab0b59c6d349bbf005680a7c880e98", "patch": "@@ -506,8 +506,8 @@ pub(crate) fn build_impl(\n             for_,\n             items: trait_items,\n             polarity,\n-            kind: if utils::has_doc_flag(tcx, did, sym::tuple_variadic) {\n-                ImplKind::TupleVaradic\n+            kind: if utils::has_doc_flag(tcx, did, sym::fake_variadic) {\n+                ImplKind::FakeVaradic\n             } else {\n                 ImplKind::Normal\n             },"}, {"sha": "9865601da5fc7f5b9aca672a0accebe0549507d2", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9a7b7d5e50ab0b59c6d349bbf005680a7c880e98", "patch": "@@ -2037,8 +2037,8 @@ fn clean_impl<'tcx>(\n             for_,\n             items,\n             polarity: tcx.impl_polarity(def_id),\n-            kind: if utils::has_doc_flag(tcx, def_id.to_def_id(), sym::tuple_variadic) {\n-                ImplKind::TupleVaradic\n+            kind: if utils::has_doc_flag(tcx, def_id.to_def_id(), sym::fake_variadic) {\n+                ImplKind::FakeVaradic\n             } else {\n                 ImplKind::Normal\n             },"}, {"sha": "8c08f77667904769c4a855f9f7ae5cd06bccda90", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=9a7b7d5e50ab0b59c6d349bbf005680a7c880e98", "patch": "@@ -1841,7 +1841,7 @@ impl PrimitiveType {\n                 Reference => [RefSimplifiedType(Mutability::Not), RefSimplifiedType(Mutability::Mut)].into_iter().collect(),\n                 // FIXME: This will be wrong if we ever add inherent impls\n                 // for function pointers.\n-                Fn => ArrayVec::new(),\n+                Fn => single(FunctionSimplifiedType(1)),\n                 Never => single(NeverSimplifiedType),\n             }\n         })\n@@ -2394,7 +2394,7 @@ impl Impl {\n pub(crate) enum ImplKind {\n     Normal,\n     Auto,\n-    TupleVaradic,\n+    FakeVaradic,\n     Blanket(Box<Type>),\n }\n \n@@ -2407,8 +2407,8 @@ impl ImplKind {\n         matches!(self, ImplKind::Blanket(_))\n     }\n \n-    pub(crate) fn is_tuple_variadic(&self) -> bool {\n-        matches!(self, ImplKind::TupleVaradic)\n+    pub(crate) fn is_fake_variadic(&self) -> bool {\n+        matches!(self, ImplKind::FakeVaradic)\n     }\n \n     pub(crate) fn as_blanket_ty(&self) -> Option<&Type> {"}, {"sha": "36a47b05cb9d674b0dadd2a817fac9e35bdf7c3b", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=9a7b7d5e50ab0b59c6d349bbf005680a7c880e98", "patch": "@@ -1165,10 +1165,43 @@ impl clean::Impl {\n \n             if let clean::Type::Tuple(types) = &self.for_ &&\n                 let [clean::Type::Generic(name)] = &types[..] &&\n-                (self.kind.is_tuple_variadic() || self.kind.is_auto()) {\n+                (self.kind.is_fake_variadic() || self.kind.is_auto())\n+            {\n                 // Hardcoded anchor library/core/src/primitive_docs.rs\n                 // Link should match `# Trait implementations`\n                 primitive_link_fragment(f, PrimitiveType::Tuple, &format!(\"({name}\u2081, {name}\u2082, \u2026, {name}\u2099)\"), \"#trait-implementations-1\", cx)?;\n+            } else if let clean::BareFunction(bare_fn) = &self.for_ &&\n+                let [clean::Argument { type_: clean::Type::Generic(name), .. }] = &bare_fn.decl.inputs.values[..] &&\n+                (self.kind.is_fake_variadic() || self.kind.is_auto())\n+            {\n+                // Hardcoded anchor library/core/src/primitive_docs.rs\n+                // Link should match `# Trait implementations`\n+\n+                let hrtb = bare_fn.print_hrtb_with_space(cx);\n+                let unsafety = bare_fn.unsafety.print_with_space();\n+                let abi = print_abi_with_space(bare_fn.abi);\n+                if f.alternate() {\n+                    write!(\n+                        f,\n+                        \"{hrtb:#}{unsafety}{abi:#}\",\n+                    )?;\n+                } else {\n+                    write!(\n+                        f,\n+                        \"{hrtb}{unsafety}{abi}\",\n+                    )?;\n+                }\n+                let ellipsis = if bare_fn.decl.c_variadic {\n+                    \", ...\"\n+                } else {\n+                    \"\"\n+                };\n+                primitive_link_fragment(f, PrimitiveType::Tuple, &format!(\"fn ({name}\u2081, {name}\u2082, \u2026, {name}\u2099{ellipsis})\"), \"#trait-implementations-1\", cx)?;\n+                // Write output.\n+                if let clean::FnRetTy::Return(ty) = &bare_fn.decl.output {\n+                    write!(f, \" -> \")?;\n+                    fmt_type(ty, f, use_absolute, cx)?;\n+                }\n             } else if let Some(ty) = self.kind.as_blanket_ty() {\n                 fmt_type(ty, f, use_absolute, cx)?;\n             } else {"}, {"sha": "9000ab472d96e43983f70ae1743e8ac895b69317", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=9a7b7d5e50ab0b59c6d349bbf005680a7c880e98", "patch": "@@ -574,7 +574,7 @@ impl FromWithTcx<clean::Impl> for Impl {\n         let trait_ = trait_.map(|path| clean::Type::Path { path }.into_tcx(tcx));\n         // FIXME: use something like ImplKind in JSON?\n         let (synthetic, blanket_impl) = match kind {\n-            clean::ImplKind::Normal | clean::ImplKind::TupleVaradic => (false, None),\n+            clean::ImplKind::Normal | clean::ImplKind::FakeVaradic => (false, None),\n             clean::ImplKind::Auto => (true, None),\n             clean::ImplKind::Blanket(ty) => (false, Some(*ty)),\n         };"}, {"sha": "505de53481f85c9c11453cf650cfd41b24428876", "filename": "src/test/rustdoc-ui/tuple-variadic-check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/src%2Ftest%2Frustdoc-ui%2Ftuple-variadic-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/src%2Ftest%2Frustdoc-ui%2Ftuple-variadic-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ftuple-variadic-check.rs?ref=9a7b7d5e50ab0b59c6d349bbf005680a7c880e98", "patch": "@@ -3,13 +3,13 @@\n trait Mine {}\n \n // This one is fine\n-#[doc(tuple_variadic)]\n+#[doc(fake_variadic)]\n impl<T> Mine for (T,) {}\n \n trait Mine2 {}\n \n // This one is not\n-#[doc(tuple_variadic)] //~ ERROR\n+#[doc(fake_variadic)] //~ ERROR\n impl<T, U> Mine for (T,U) {}\n \n fn main() {}"}, {"sha": "d127fb858d176d303adfd5677956c9278f58e625", "filename": "src/test/rustdoc-ui/tuple-variadic-check.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/src%2Ftest%2Frustdoc-ui%2Ftuple-variadic-check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/src%2Ftest%2Frustdoc-ui%2Ftuple-variadic-check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ftuple-variadic-check.stderr?ref=9a7b7d5e50ab0b59c6d349bbf005680a7c880e98", "patch": "@@ -1,8 +1,8 @@\n-error: `#[doc(tuple_variadic)]` must be used on the first of a set of tuple trait impls with varying arity\n+error: `#[doc(fake_variadic)]` must be used on the first of a set of tuple or fn pointer trait impls with varying arity\n   --> $DIR/tuple-variadic-check.rs:12:7\n    |\n-LL | #[doc(tuple_variadic)]\n-   |       ^^^^^^^^^^^^^^\n+LL | #[doc(fake_variadic)]\n+   |       ^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "a2fbbf078d5178468408174845ce1dfe99d1ea88", "filename": "src/test/rustdoc/primitive-tuple-auto-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/src%2Ftest%2Frustdoc%2Fprimitive-tuple-auto-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/src%2Ftest%2Frustdoc%2Fprimitive-tuple-auto-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fprimitive-tuple-auto-trait.rs?ref=9a7b7d5e50ab0b59c6d349bbf005680a7c880e98", "patch": "@@ -16,7 +16,7 @@\n // @has - '//h2[@id=\"trait-implementations-1\"]' 'Trait implementations'\n /// # Trait implementations\n ///\n-/// This header is hard-coded in the HTML format linking for `#[doc(tuple_variadics)]`.\n+/// This header is hard-coded in the HTML format linking for `#[doc(fake_variadics)]`.\n /// To make sure it gets linked correctly, we need to make sure the hardcoded anchor\n /// in the code matches what rustdoc generates for the header.\n mod tuple_prim {}"}, {"sha": "db7cfd60c71a67e3dc8ab4d993d902fe21277700", "filename": "src/test/rustdoc/primitive-tuple-variadic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/src%2Ftest%2Frustdoc%2Fprimitive-tuple-variadic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/src%2Ftest%2Frustdoc%2Fprimitive-tuple-variadic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fprimitive-tuple-variadic.rs?ref=9a7b7d5e50ab0b59c6d349bbf005680a7c880e98", "patch": "@@ -7,12 +7,12 @@ pub trait Foo {}\n \n // @has foo/trait.Foo.html\n // @has - '//section[@id=\"impl-Foo-for-(T%2C)\"]/h3' 'impl<T> Foo for (T\u2081, T\u2082, \u2026, T\u2099)'\n-#[doc(tuple_variadic)]\n+#[doc(fake_variadic)]\n impl<T> Foo for (T,) {}\n \n pub trait Bar {}\n \n // @has foo/trait.Bar.html\n // @has - '//section[@id=\"impl-Bar-for-(U%2C)\"]/h3' 'impl<U: Foo> Bar for (U\u2081, U\u2082, \u2026, U\u2099)'\n-#[doc(tuple_variadic)]\n+#[doc(fake_variadic)]\n impl<U: Foo> Bar for (U,) {}"}, {"sha": "a61ba7bbf328cee6aaaa5efde5e4e9125ec9f048", "filename": "src/test/ui/error-codes/E0118.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/src%2Ftest%2Fui%2Ferror-codes%2FE0118.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/src%2Ftest%2Fui%2Ferror-codes%2FE0118.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0118.rs?ref=9a7b7d5e50ab0b59c6d349bbf005680a7c880e98", "patch": "@@ -1,4 +1,4 @@\n-impl fn(u8) { //~ ERROR E0118\n+impl<T> T { //~ ERROR E0118\n     fn get_state(&self) -> String {\n        String::new()\n     }"}, {"sha": "8c6fa7947a8537746be07f1c35f7d2eaf8881367", "filename": "src/test/ui/error-codes/E0118.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/src%2Ftest%2Fui%2Ferror-codes%2FE0118.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/src%2Ftest%2Fui%2Ferror-codes%2FE0118.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0118.stderr?ref=9a7b7d5e50ab0b59c6d349bbf005680a7c880e98", "patch": "@@ -1,8 +1,8 @@\n error[E0118]: no nominal type found for inherent implementation\n-  --> $DIR/E0118.rs:1:6\n+  --> $DIR/E0118.rs:1:9\n    |\n-LL | impl fn(u8) {\n-   |      ^^^^^^ impl requires a nominal type\n+LL | impl<T> T {\n+   |         ^ impl requires a nominal type\n    |\n    = note: either implement a trait on it or create a newtype to wrap it instead\n "}, {"sha": "507483dec2ee263c1b99c3ecda0946131774b5b4", "filename": "src/test/ui/error-codes/E0390.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/src%2Ftest%2Fui%2Ferror-codes%2FE0390.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/src%2Ftest%2Fui%2Ferror-codes%2FE0390.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0390.rs?ref=9a7b7d5e50ab0b59c6d349bbf005680a7c880e98", "patch": "@@ -4,5 +4,7 @@ struct Foo {\n \n impl *mut Foo {} //~ ERROR E0390\n \n+impl fn(Foo) {} //~ ERROR E0390\n+\n fn main() {\n }"}, {"sha": "0e5a9ca762b768ff2bde803695dfcac6697a9108", "filename": "src/test/ui/error-codes/E0390.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/src%2Ftest%2Fui%2Ferror-codes%2FE0390.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/src%2Ftest%2Fui%2Ferror-codes%2FE0390.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0390.stderr?ref=9a7b7d5e50ab0b59c6d349bbf005680a7c880e98", "patch": "@@ -6,6 +6,14 @@ LL | impl *mut Foo {}\n    |\n    = help: consider using an extension trait instead\n \n-error: aborting due to previous error\n+error[E0390]: cannot define inherent `impl` for primitive types\n+  --> $DIR/E0390.rs:7:6\n+   |\n+LL | impl fn(Foo) {}\n+   |      ^^^^^^^\n+   |\n+   = help: consider using an extension trait instead\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0390`."}, {"sha": "58306a4cfc9c9d03e342167e0d044c3cef27029f", "filename": "src/test/ui/feature-gates/feature-gate-rustdoc_internals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustdoc_internals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustdoc_internals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustdoc_internals.rs?ref=9a7b7d5e50ab0b59c6d349bbf005680a7c880e98", "patch": "@@ -4,7 +4,7 @@ mod foo {}\n \n trait Mine {}\n \n-#[doc(tuple_variadic)]  //~ ERROR: `#[doc(tuple_variadic)]` is meant for internal use only\n+#[doc(fake_variadic)]  //~ ERROR: `#[doc(fake_variadic)]` is meant for internal use only\n impl<T> Mine for (T,) {}\n \n fn main() {}"}, {"sha": "c4272a2c04c2ae5d46e7cea98de233bda0cab7e0", "filename": "src/test/ui/feature-gates/feature-gate-rustdoc_internals.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustdoc_internals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustdoc_internals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustdoc_internals.stderr?ref=9a7b7d5e50ab0b59c6d349bbf005680a7c880e98", "patch": "@@ -7,11 +7,11 @@ LL | #[doc(keyword = \"match\")]\n    = note: see issue #90418 <https://github.com/rust-lang/rust/issues/90418> for more information\n    = help: add `#![feature(rustdoc_internals)]` to the crate attributes to enable\n \n-error[E0658]: `#[doc(tuple_variadic)]` is meant for internal use only\n+error[E0658]: `#[doc(fake_variadic)]` is meant for internal use only\n   --> $DIR/feature-gate-rustdoc_internals.rs:7:1\n    |\n-LL | #[doc(tuple_variadic)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[doc(fake_variadic)]\n+   | ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #90418 <https://github.com/rust-lang/rust/issues/90418> for more information\n    = help: add `#![feature(rustdoc_internals)]` to the crate attributes to enable"}, {"sha": "7ce3dedaa887bf7f6a777d0444967c2f1412eff8", "filename": "src/test/ui/issues/issue-59488.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr?ref=9a7b7d5e50ab0b59c6d349bbf005680a7c880e98", "patch": "@@ -96,13 +96,13 @@ LL |     assert_eq!(Foo::Bar, i);\n    = help: the trait `Debug` is not implemented for `fn(usize) -> Foo {Foo::Bar}`\n    = help: the following other types implement trait `Debug`:\n              extern \"C\" fn() -> Ret\n-             extern \"C\" fn(A) -> Ret\n-             extern \"C\" fn(A, ...) -> Ret\n              extern \"C\" fn(A, B) -> Ret\n              extern \"C\" fn(A, B, ...) -> Ret\n              extern \"C\" fn(A, B, C) -> Ret\n              extern \"C\" fn(A, B, C, ...) -> Ret\n              extern \"C\" fn(A, B, C, D) -> Ret\n+             extern \"C\" fn(A, B, C, D, ...) -> Ret\n+             extern \"C\" fn(A, B, C, D, E) -> Ret\n            and 68 others\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}]}