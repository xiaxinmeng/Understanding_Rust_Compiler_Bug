{"sha": "628df79757057f6ba29ad1ef56b94f886e121bd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyOGRmNzk3NTcwNTdmNmJhMjlhZDFlZjU2Yjk0Zjg4NmUxMjFiZDQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-02-13T10:38:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-13T10:38:46Z"}, "message": "Merge pull request #1529 from bood/master\n\nLint on `Err(_)` arm of a match", "tree": {"sha": "d930918753966a72323b525dfd5f823fd053aab9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d930918753966a72323b525dfd5f823fd053aab9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/628df79757057f6ba29ad1ef56b94f886e121bd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/628df79757057f6ba29ad1ef56b94f886e121bd4", "html_url": "https://github.com/rust-lang/rust/commit/628df79757057f6ba29ad1ef56b94f886e121bd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/628df79757057f6ba29ad1ef56b94f886e121bd4/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a7597d5af4d882ddc92bf568a1c7ba582bb4b55", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a7597d5af4d882ddc92bf568a1c7ba582bb4b55", "html_url": "https://github.com/rust-lang/rust/commit/9a7597d5af4d882ddc92bf568a1c7ba582bb4b55"}, {"sha": "1177f3915c7c487ef968552e7cbe4c7bc2e5228a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1177f3915c7c487ef968552e7cbe4c7bc2e5228a", "html_url": "https://github.com/rust-lang/rust/commit/1177f3915c7c487ef968552e7cbe4c7bc2e5228a"}], "stats": {"total": 155, "additions": 151, "deletions": 4}, "files": [{"sha": "8fdc1487bcc08be1f9ac8e20b946d49591d8fd10", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/628df79757057f6ba29ad1ef56b94f886e121bd4/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/628df79757057f6ba29ad1ef56b94f886e121bd4/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=628df79757057f6ba29ad1ef56b94f886e121bd4", "patch": "@@ -364,6 +364,7 @@ All notable changes to this project will be documented in this file.\n [`match_overlapping_arm`]: https://github.com/Manishearth/rust-clippy/wiki#match_overlapping_arm\n [`match_ref_pats`]: https://github.com/Manishearth/rust-clippy/wiki#match_ref_pats\n [`match_same_arms`]: https://github.com/Manishearth/rust-clippy/wiki#match_same_arms\n+[`match_wild_err_arm`]: https://github.com/Manishearth/rust-clippy/wiki#match_wild_err_arm\n [`mem_forget`]: https://github.com/Manishearth/rust-clippy/wiki#mem_forget\n [`min_max`]: https://github.com/Manishearth/rust-clippy/wiki#min_max\n [`misrefactored_assign_op`]: https://github.com/Manishearth/rust-clippy/wiki#misrefactored_assign_op"}, {"sha": "3660937262af7c1c80fde4430d7ee3b721d0d87b", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/628df79757057f6ba29ad1ef56b94f886e121bd4/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/628df79757057f6ba29ad1ef56b94f886e121bd4/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=628df79757057f6ba29ad1ef56b94f886e121bd4", "patch": "@@ -180,7 +180,7 @@ transparently:\n \n ## Lints\n \n-There are 187 lints included in this crate:\n+There are 188 lints included in this crate:\n \n name                                                                                                                   | default | triggers on\n -----------------------------------------------------------------------------------------------------------------------|---------|----------------------------------------------------------------------------------------------------------------------------------\n@@ -271,6 +271,7 @@ name\n [match_overlapping_arm](https://github.com/Manishearth/rust-clippy/wiki#match_overlapping_arm)                         | warn    | a match with overlapping arms\n [match_ref_pats](https://github.com/Manishearth/rust-clippy/wiki#match_ref_pats)                                       | warn    | a match or `if let` with all arms prefixed with `&` instead of deref-ing the match expression\n [match_same_arms](https://github.com/Manishearth/rust-clippy/wiki#match_same_arms)                                     | warn    | `match` with identical arm bodies\n+[match_wild_err_arm](https://github.com/Manishearth/rust-clippy/wiki#match_wild_err_arm)                               | warn    | a match with `Err(_)` arm and take drastic actions\n [mem_forget](https://github.com/Manishearth/rust-clippy/wiki#mem_forget)                                               | allow   | `mem::forget` usage on `Drop` types, likely to cause memory leaks\n [min_max](https://github.com/Manishearth/rust-clippy/wiki#min_max)                                                     | warn    | `min(_, max(_, _))` (or vice versa) with bounds clamping the result to a constant\n [misrefactored_assign_op](https://github.com/Manishearth/rust-clippy/wiki#misrefactored_assign_op)                     | warn    | having a variable on both sides of an assign op"}, {"sha": "de5945df81ffc66859dd5dbb42eca2f277015fbf", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/628df79757057f6ba29ad1ef56b94f886e121bd4/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/628df79757057f6ba29ad1ef56b94f886e121bd4/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=628df79757057f6ba29ad1ef56b94f886e121bd4", "patch": "@@ -413,6 +413,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         matches::MATCH_BOOL,\n         matches::MATCH_OVERLAPPING_ARM,\n         matches::MATCH_REF_PATS,\n+        matches::MATCH_WILD_ERR_ARM,\n         matches::SINGLE_MATCH,\n         methods::CHARS_NEXT_CMP,\n         methods::CLONE_DOUBLE_REF,"}, {"sha": "66b55c48455c33eebe43bd2f6c6619862d30a7ce", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 66, "deletions": 2, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/628df79757057f6ba29ad1ef56b94f886e121bd4/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/628df79757057f6ba29ad1ef56b94f886e121bd4/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=628df79757057f6ba29ad1ef56b94f886e121bd4", "patch": "@@ -10,7 +10,8 @@ use std::collections::Bound;\n use syntax::ast::LitKind;\n use syntax::codemap::Span;\n use utils::paths;\n-use utils::{match_type, snippet, span_note_and_lint, span_lint_and_then, in_external_macro, expr_block};\n+use utils::{match_type, snippet, span_note_and_lint, span_lint_and_then, in_external_macro, expr_block, walk_ptrs_ty,\n+            is_expn_of};\n use utils::sugg::Sugg;\n \n /// **What it does:** Checks for matches with a single arm where an `if let`\n@@ -121,6 +122,28 @@ declare_lint! {\n     \"a match with overlapping arms\"\n }\n \n+/// **What it does:** Checks for arm which matches all errors with `Err(_)`\n+/// and take drastic actions like `panic!`.\n+///\n+/// **Why is this bad?** It is generally a bad practice, just like\n+/// catching all exceptions in java with `catch(Exception)`\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// let x : Result(i32, &str) = Ok(3);\n+/// match x {\n+///     Ok(_) => println!(\"ok\"),\n+///     Err(_) => panic!(\"err\"),\n+/// }\n+/// ```\n+declare_lint! {\n+    pub MATCH_WILD_ERR_ARM,\n+    Warn,\n+    \"a match with `Err(_)` arm and take drastic actions\"\n+}\n+\n #[allow(missing_copy_implementations)]\n pub struct MatchPass;\n \n@@ -130,7 +153,8 @@ impl LintPass for MatchPass {\n                     MATCH_REF_PATS,\n                     MATCH_BOOL,\n                     SINGLE_MATCH_ELSE,\n-                    MATCH_OVERLAPPING_ARM)\n+                    MATCH_OVERLAPPING_ARM,\n+                    MATCH_WILD_ERR_ARM)\n     }\n }\n \n@@ -143,6 +167,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MatchPass {\n             check_single_match(cx, ex, arms, expr);\n             check_match_bool(cx, ex, arms, expr);\n             check_overlapping_arms(cx, ex, arms);\n+            check_wild_err_arm(cx, ex, arms);\n         }\n         if let ExprMatch(ref ex, ref arms, source) = expr.node {\n             check_match_ref_pats(cx, ex, arms, source, expr);\n@@ -322,6 +347,45 @@ fn check_overlapping_arms(cx: &LateContext, ex: &Expr, arms: &[Arm]) {\n     }\n }\n \n+fn check_wild_err_arm(cx: &LateContext, ex: &Expr, arms: &[Arm]) {\n+    let ex_ty = walk_ptrs_ty(cx.tables.expr_ty(ex));\n+    if match_type(cx, ex_ty, &paths::RESULT) {\n+        for arm in arms {\n+            if let PatKind::TupleStruct(ref path, ref inner, _) = arm.pats[0].node {\n+                let path_str = print::to_string(print::NO_ANN, |s| s.print_qpath(path, false));\n+                if_let_chain! {[\n+                    path_str == \"Err\",\n+                    inner.iter().any(|pat| pat.node == PatKind::Wild),\n+                    let ExprBlock(ref block) = arm.body.node,\n+                    is_panic_block(cx, block)\n+                ], {\n+                    // `Err(_)` arm with `panic!` found\n+                    span_note_and_lint(cx,\n+                                       MATCH_WILD_ERR_ARM,\n+                                       arm.pats[0].span,\n+                                       \"Err(_) will match all errors, maybe not a good idea\",\n+                                       arm.pats[0].span,\n+                                       \"to remove this warning, match each error seperately \\\n+                                        or use unreachable macro\");\n+                }}\n+            }\n+        }\n+    }\n+}\n+\n+// If the block contains only a `panic!` macro (as expression or statement)\n+fn is_panic_block(cx: &LateContext, block: &Block) -> bool {\n+    match (&block.expr, block.stmts.len(), block.stmts.first()) {\n+        (&Some(ref exp), 0, _) => {\n+            is_expn_of(cx, exp.span, \"panic\").is_some() && is_expn_of(cx, exp.span, \"unreachable\").is_none()\n+        },\n+        (&None, 1, Some(stmt)) => {\n+            is_expn_of(cx, stmt.span, \"panic\").is_some() && is_expn_of(cx, stmt.span, \"unreachable\").is_none()\n+        },\n+        _ => false,\n+    }\n+}\n+\n fn check_match_ref_pats(cx: &LateContext, ex: &Expr, arms: &[Arm], source: MatchSource, expr: &Expr) {\n     if has_only_ref_pats(arms) {\n         if let ExprAddrOf(Mutability::MutImmutable, ref inner) = ex.node {"}, {"sha": "46a99293a354442eab9c1b3fb1156b62fbba9c32", "filename": "tests/ui/matches.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/628df79757057f6ba29ad1ef56b94f886e121bd4/tests%2Fui%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/628df79757057f6ba29ad1ef56b94f886e121bd4/tests%2Fui%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.rs?ref=628df79757057f6ba29ad1ef56b94f886e121bd4", "patch": "@@ -283,5 +283,53 @@ fn overlapping() {\n     }\n }\n \n+fn match_wild_err_arm() {\n+    let x: Result<i32, &str> = Ok(3);\n+\n+    match x {\n+        Ok(3) => println!(\"ok\"),\n+        Ok(_) => println!(\"ok\"),\n+        Err(_) => panic!(\"err\")\n+    }\n+\n+    match x {\n+        Ok(3) => println!(\"ok\"),\n+        Ok(_) => println!(\"ok\"),\n+        Err(_) => {panic!()}\n+    }\n+\n+    match x {\n+        Ok(3) => println!(\"ok\"),\n+        Ok(_) => println!(\"ok\"),\n+        Err(_) => {panic!();}\n+    }\n+\n+    // allowed when not with `panic!` block\n+    match x {\n+        Ok(3) => println!(\"ok\"),\n+        Ok(_) => println!(\"ok\"),\n+        Err(_) => println!(\"err\")\n+    }\n+\n+    // allowed when used with `unreachable!`\n+    match x {\n+        Ok(3) => println!(\"ok\"),\n+        Ok(_) => println!(\"ok\"),\n+        Err(_) => {unreachable!()}\n+    }\n+\n+    match x {\n+        Ok(3) => println!(\"ok\"),\n+        Ok(_) => println!(\"ok\"),\n+        Err(_) => unreachable!()\n+    }\n+\n+    match x {\n+        Ok(3) => println!(\"ok\"),\n+        Ok(_) => println!(\"ok\"),\n+        Err(_) => {unreachable!();}\n+    }\n+}\n+\n fn main() {\n }"}, {"sha": "bc8584b858722d2510f6ea8c2431e2e3e0ffd335", "filename": "tests/ui/matches.stderr", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/628df79757057f6ba29ad1ef56b94f886e121bd4/tests%2Fui%2Fmatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/628df79757057f6ba29ad1ef56b94f886e121bd4/tests%2Fui%2Fmatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.stderr?ref=628df79757057f6ba29ad1ef56b94f886e121bd4", "patch": "@@ -388,5 +388,37 @@ note: overlaps with this\n 275 |         0 ... 11 => println!(\"0 ... 11\"),\n     |         ^^^^^^^^\n \n-error: aborting due to 23 previous errors\n+error: Err(_) will match all errors, maybe not a good idea\n+   --> $DIR/matches.rs:292:9\n+    |\n+292 |         Err(_) => panic!(\"err\")\n+    |         ^^^^^^\n+    |\n+    = note: #[deny(match_wild_err_arm)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/matches.rs:5:9\n+    |\n+5   | #![deny(clippy)]\n+    |         ^^^^^^\n+    = note: to remove this warning, match each error seperately or use unreachable macro\n+\n+error: Err(_) will match all errors, maybe not a good idea\n+   --> $DIR/matches.rs:298:9\n+    |\n+298 |         Err(_) => {panic!()}\n+    |         ^^^^^^\n+    |\n+    = note: #[deny(match_wild_err_arm)] implied by #[deny(clippy)]\n+    = note: to remove this warning, match each error seperately or use unreachable macro\n+\n+error: Err(_) will match all errors, maybe not a good idea\n+   --> $DIR/matches.rs:304:9\n+    |\n+304 |         Err(_) => {panic!();}\n+    |         ^^^^^^\n+    |\n+    = note: #[deny(match_wild_err_arm)] implied by #[deny(clippy)]\n+    = note: to remove this warning, match each error seperately or use unreachable macro\n+\n+error: aborting due to 26 previous errors\n "}]}