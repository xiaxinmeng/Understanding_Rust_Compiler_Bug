{"sha": "ccd0ac59e9a918f3c2a174e31213286dc6867d37", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjZDBhYzU5ZTlhOTE4ZjNjMmExNzRlMzEyMTMyODZkYzY4NjdkMzc=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-10T13:25:25Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-10T13:57:03Z"}, "message": "std: remove str::{connect,concat}*.", "tree": {"sha": "613e9e26394be216bfb2dc56dba0391ca6486545", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/613e9e26394be216bfb2dc56dba0391ca6486545"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccd0ac59e9a918f3c2a174e31213286dc6867d37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccd0ac59e9a918f3c2a174e31213286dc6867d37", "html_url": "https://github.com/rust-lang/rust/commit/ccd0ac59e9a918f3c2a174e31213286dc6867d37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccd0ac59e9a918f3c2a174e31213286dc6867d37/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a711ea7c317ea90f03d5118dbb2e19e1622bc29", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a711ea7c317ea90f03d5118dbb2e19e1622bc29", "html_url": "https://github.com/rust-lang/rust/commit/5a711ea7c317ea90f03d5118dbb2e19e1622bc29"}], "stats": {"total": 148, "additions": 62, "deletions": 86}, "files": [{"sha": "16190f69549cd31757d7001e1dbc10b4b7a885f5", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=ccd0ac59e9a918f3c2a174e31213286dc6867d37", "patch": "@@ -244,7 +244,7 @@ fn run_debuginfo_test(config: &config, props: &TestProps, testfile: &Path) {\n         None => copy *config\n     };\n     let config = &mut config;\n-    let cmds = str::connect(props.debugger_cmds, \"\\n\");\n+    let cmds = props.debugger_cmds.connect(\"\\n\");\n     let check_lines = copy props.check_lines;\n \n     // compile test file (it shoud have 'compile-flags:-g' in the header)\n@@ -645,13 +645,13 @@ fn program_output(config: &config, testfile: &Path, lib_path: &str, prog: ~str,\n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"freebsd\")]\n fn make_cmdline(_libpath: &str, prog: &str, args: &[~str]) -> ~str {\n-    fmt!(\"%s %s\", prog, str::connect(args, \" \"))\n+    fmt!(\"%s %s\", prog, args.connect(\" \"))\n }\n \n #[cfg(target_os = \"win32\")]\n fn make_cmdline(libpath: &str, prog: &str, args: &[~str]) -> ~str {\n     fmt!(\"%s %s %s\", lib_path_cmd_prefix(libpath), prog,\n-         str::connect(args, \" \"))\n+         args.connect(\" \"))\n }\n \n // Build the LD_LIBRARY_PATH variable as it would be seen on the command line"}, {"sha": "44b56590083550ead5e0db4c7926d2dc1ecbd444", "filename": "src/libextra/getopts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibextra%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibextra%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fgetopts.rs?ref=ccd0ac59e9a918f3c2a174e31213286dc6867d37", "patch": "@@ -648,14 +648,14 @@ pub mod groups {\n \n             // FIXME: #5516\n             // wrapped description\n-            row += str::connect(desc_rows, desc_sep);\n+            row += desc_rows.connect(desc_sep);\n \n             row\n         });\n \n         return str::to_owned(brief) +\n                \"\\n\\nOptions:\\n\" +\n-               str::connect(rows, \"\\n\") +\n+               rows.connect(\"\\n\") +\n                \"\\n\\n\";\n     }\n } // end groups module"}, {"sha": "46e76a7a39913f74e5342e3d482740accd9925bd", "filename": "src/libextra/net_url.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibextra%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibextra%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnet_url.rs?ref=ccd0ac59e9a918f3c2a174e31213286dc6867d37", "patch": "@@ -354,7 +354,7 @@ pub fn query_to_str(query: &Query) -> ~str {\n             }\n         }\n     }\n-    return str::connect(strvec, \"&\");\n+    return strvec.connect(\"&\");\n }\n \n // returns the scheme and the rest of the url, or a parsing error"}, {"sha": "c6e7592a314e13c707bccd027573381032628203", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=ccd0ac59e9a918f3c2a174e31213286dc6867d37", "patch": "@@ -520,10 +520,10 @@ impl ToStrRadix for BigUint {\n \n         fn fill_concat(v: &[BigDigit], radix: uint, l: uint) -> ~str {\n             if v.is_empty() { return ~\"0\" }\n-            let s = str::concat(vec::reversed(v).map(|n| {\n+            let s = vec::reversed(v).map(|n| {\n                 let s = uint::to_str_radix(*n as uint, radix);\n                 str::from_chars(vec::from_elem(l - s.len(), '0')) + s\n-            }));\n+            }).concat();\n             s.trim_left_chars(['0']).to_owned()\n         }\n     }"}, {"sha": "c7d2010e609da045eb3860f6d99431590ebc65d1", "filename": "src/libextra/semver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibextra%2Fsemver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibextra%2Fsemver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsemver.rs?ref=ccd0ac59e9a918f3c2a174e31213286dc6867d37", "patch": "@@ -81,12 +81,12 @@ impl ToStr for Version {\n         let s = if self.pre.is_empty() {\n             s\n         } else {\n-            s + \"-\" + str::connect(self.pre.map(|i| i.to_str()), \".\")\n+            s + \"-\" + self.pre.map(|i| i.to_str()).connect(\".\")\n         };\n         if self.build.is_empty() {\n             s\n         } else {\n-            s + \"+\" + str::connect(self.build.map(|i| i.to_str()), \".\")\n+            s + \"+\" + self.build.map(|i| i.to_str()).connect(\".\")\n         }\n     }\n }"}, {"sha": "496c1f88a6c8a2ec3d59ac5bc405672637379bfc", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=ccd0ac59e9a918f3c2a174e31213286dc6867d37", "patch": "@@ -394,7 +394,7 @@ pub mod write {\n             sess.err(fmt!(\"building with `%s` failed with code %d\",\n                         cc_prog, prog.status));\n             sess.note(fmt!(\"%s arguments: %s\",\n-                        cc_prog, str::connect(cc_args, \" \")));\n+                        cc_prog, cc_args.connect(\" \")));\n             sess.note(str::from_bytes(prog.error + prog.output));\n             sess.abort_if_errors();\n         }\n@@ -809,14 +809,14 @@ pub fn link_binary(sess: Session,\n \n     debug!(\"output: %s\", output.to_str());\n     let cc_args = link_args(sess, obj_filename, out_filename, lm);\n-    debug!(\"%s link args: %s\", cc_prog, str::connect(cc_args, \" \"));\n+    debug!(\"%s link args: %s\", cc_prog, cc_args.connect(\" \"));\n     // We run 'cc' here\n     let prog = run::process_output(cc_prog, cc_args);\n     if 0 != prog.status {\n         sess.err(fmt!(\"linking with `%s` failed with code %d\",\n                       cc_prog, prog.status));\n         sess.note(fmt!(\"%s arguments: %s\",\n-                       cc_prog, str::connect(cc_args, \" \")));\n+                       cc_prog, cc_args.connect(\" \")));\n         sess.note(str::from_bytes(prog.error + prog.output));\n         sess.abort_if_errors();\n     }"}, {"sha": "ef5670da4558739de9df13250164c9af447ca470", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=ccd0ac59e9a918f3c2a174e31213286dc6867d37", "patch": "@@ -328,8 +328,8 @@ pub fn compile_rest(sess: Session,\n \n     let outputs = outputs.get_ref();\n     if (sess.opts.debugging_opts & session::print_link_args) != 0 {\n-        io::println(str::connect(link::link_args(sess,\n-            &outputs.obj_filename, &outputs.out_filename, link_meta), \" \"));\n+        io::println(link::link_args(sess, &outputs.obj_filename,\n+                                    &outputs.out_filename, link_meta).connect(\" \"));\n     }\n \n     // NB: Android hack"}, {"sha": "833146a935e8f305ad3c5fad63944c50f63fa5c8", "filename": "src/librustc/middle/trans/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs?ref=ccd0ac59e9a918f3c2a174e31213286dc6867d37", "patch": "@@ -87,7 +87,7 @@ pub fn trans_inline_asm(bcx: block, ia: &ast::inline_asm) -> block {\n         revoke_clean(bcx, *c);\n     }\n \n-    let mut constraints = str::connect(constraints, \",\");\n+    let mut constraints = constraints.connect(\",\");\n \n     let mut clobbers = getClobbers();\n     if *ia.clobbers != ~\"\" && clobbers != ~\"\" {"}, {"sha": "b913a1b499617bc82f111d667057637a36d1094d", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=ccd0ac59e9a918f3c2a174e31213286dc6867d37", "patch": "@@ -1995,7 +1995,7 @@ pub fn trans_enum_variant(ccx: @CrateContext,\n \n     debug!(\"trans_enum_variant: name=%s tps=%s repr=%? enum_ty=%s\",\n            unsafe { str::raw::from_c_str(llvm::LLVMGetValueName(llfndecl)) },\n-           ~\"[\" + str::connect(ty_param_substs.map(|&t| ty_to_str(ccx.tcx, t)), \", \") + \"]\",\n+           ~\"[\" + ty_param_substs.map(|&t| ty_to_str(ccx.tcx.connect(t)), \", \") + \"]\",\n            repr, ty_to_str(ccx.tcx, enum_ty));\n \n     adt::trans_start_init(bcx, repr, fcx.llretptr.get(), disr);"}, {"sha": "8406444bd097eb2a5f8787b28380d5b5fc1ee829", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=ccd0ac59e9a918f3c2a174e31213286dc6867d37", "patch": "@@ -192,7 +192,7 @@ pub fn Invoke(cx: block,\n     terminate(cx, \"Invoke\");\n     debug!(\"Invoke(%s with arguments (%s))\",\n            val_str(cx.ccx().tn, Fn),\n-           str::connect(vec::map(Args, |a| val_str(cx.ccx().tn,\n+           vec::map(Args.connect(|a| val_str(cx.ccx().tn,\n                                                    *a).to_owned()),\n                         \", \"));\n     unsafe {"}, {"sha": "b29972f039b1936a564209c2fdfca257a8d5d915", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=ccd0ac59e9a918f3c2a174e31213286dc6867d37", "patch": "@@ -1483,7 +1483,7 @@ pub fn node_id_type_params(bcx: block, id: ast::node_id) -> ~[ty::t] {\n     if !params.all(|t| !ty::type_needs_infer(*t)) {\n         bcx.sess().bug(\n             fmt!(\"Type parameters for node %d include inference types: %s\",\n-                 id, str::connect(params.map(|t| bcx.ty_to_str(*t)), \",\")));\n+                 id, params.map(|t| bcx.ty_to_str(*t)).connect(\",\")));\n     }\n \n     match bcx.fcx.param_substs {"}, {"sha": "30dd677396b17f6b6cdd7183802f36393a6e18ca", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=ccd0ac59e9a918f3c2a174e31213286dc6867d37", "patch": "@@ -1879,7 +1879,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n                                        } else {\n                                            \"s\"\n                                        },\n-                                       str::connect(missing_fields, \", \")));\n+                                       missing_fields.connect(\", \")));\n              }\n         }\n "}, {"sha": "0db9d16adf3c0186c0b681dd38e22b654aabf777", "filename": "src/librustc/middle/typeck/infer/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs?ref=ccd0ac59e9a918f3c2a174e31213286dc6867d37", "patch": "@@ -100,7 +100,7 @@ impl Env {\n         return match search_mod(self, &self.crate.node.module, 0, names) {\n             Some(id) => id,\n             None => {\n-                fail!(\"No item found: `%s`\", str::connect(names, \"::\"));\n+                fail!(\"No item found: `%s`\", names.connect(\"::\"));\n             }\n         };\n "}, {"sha": "d6623f06c3d338bcbfd48dadf733d6dd90c7b66a", "filename": "src/librustc/middle/typeck/infer/to_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs?ref=ccd0ac59e9a918f3c2a174e31213286dc6867d37", "patch": "@@ -35,7 +35,7 @@ impl InferStr for ty::t {\n impl InferStr for FnSig {\n     fn inf_str(&self, cx: &InferCtxt) -> ~str {\n         fmt!(\"(%s) -> %s\",\n-             str::connect(self.inputs.map(|a| a.inf_str(cx)), \", \"),\n+             self.inputs.map(|a| a.inf_str(cx)).connect(\", \"),\n              self.output.inf_str(cx))\n     }\n }"}, {"sha": "8d0cba0e8b712dd5064776d7909ab25e6ad99d91", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=ccd0ac59e9a918f3c2a174e31213286dc6867d37", "patch": "@@ -111,7 +111,7 @@ pub fn local_rhs_span(l: @ast::local, def: span) -> span {\n \n pub fn pluralize(n: uint, s: ~str) -> ~str {\n     if n == 1 { s }\n-    else { str::concat([s, ~\"s\"]) }\n+    else { fmt!(\"%ss\", s) }\n }\n \n // A set of node IDs (used to keep track of which node IDs are for statements)"}, {"sha": "b5e6e7e119488cb7222fe37df1d589d62b8cf4c7", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=ccd0ac59e9a918f3c2a174e31213286dc6867d37", "patch": "@@ -281,7 +281,7 @@ pub fn vstore_ty_to_str(cx: ctxt, mt: &mt, vs: ty::vstore) -> ~str {\n \n pub fn tys_to_str(cx: ctxt, ts: &[t]) -> ~str {\n     let tstrs = ts.map(|t| ty_to_str(cx, *t));\n-    fmt!(\"(%s)\", str::connect(tstrs, \", \"))\n+    fmt!(\"(%s)\", tstrs.connect(\", \"))\n }\n \n pub fn fn_sig_to_str(cx: ctxt, typ: &ty::FnSig) -> ~str {\n@@ -369,7 +369,7 @@ pub fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n     fn push_sig_to_str(cx: ctxt, s: &mut ~str, sig: &ty::FnSig) {\n         s.push_char('(');\n         let strs = sig.inputs.map(|a| fn_input_to_str(cx, *a));\n-        s.push_str(str::connect(strs, \", \"));\n+        s.push_str(strs.connect(\", \"));\n         s.push_char(')');\n         if ty::get(sig.output).sty != ty_nil {\n             s.push_str(\" -> \");\n@@ -420,7 +420,7 @@ pub fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n       ty_type => ~\"type\",\n       ty_tup(ref elems) => {\n         let strs = elems.map(|elem| ty_to_str(cx, *elem));\n-        ~\"(\" + str::connect(strs, \",\") + \")\"\n+        ~\"(\" + strs.connect(\",\") + \")\"\n       }\n       ty_closure(ref f) => {\n           closure_to_str(cx, f)\n@@ -477,7 +477,7 @@ pub fn parameterized(cx: ctxt,\n \n     if tps.len() > 0u {\n         let strs = vec::map(tps, |t| ty_to_str(cx, *t));\n-        fmt!(\"%s%s<%s>\", base, r_str, str::connect(strs, \",\"))\n+        fmt!(\"%s%s<%s>\", base, r_str, strs.connect(\",\"))\n     } else {\n         fmt!(\"%s%s\", base, r_str)\n     }\n@@ -515,7 +515,7 @@ impl<T:Repr> Repr for ~T {\n */\n \n fn repr_vec<T:Repr>(tcx: ctxt, v: &[T]) -> ~str {\n-    fmt!(\"[%s]\", str::connect(v.map(|t| t.repr(tcx)), \",\"))\n+    fmt!(\"[%s]\", v.map(|t| t.repr(tcx)).connect(\",\"))\n }\n \n impl<'self, T:Repr> Repr for &'self [T] {\n@@ -569,7 +569,7 @@ impl Repr for ty::ParamBounds {\n         for self.trait_bounds.each |t| {\n             res.push(t.repr(tcx));\n         }\n-        str::connect(res, \"+\")\n+        res.connect(\"+\")\n     }\n }\n \n@@ -787,7 +787,7 @@ impl UserString for ty::BuiltinBounds {\n             for self.each |bb| {\n                 result.push(bb.user_string(tcx));\n             }\n-            str::connect(result, \"+\")\n+            result.connect(\"+\")\n         }\n     }\n }"}, {"sha": "47c54ee8e8f4560f0b6d006567d648d61d0dc15c", "filename": "src/librustdoc/attr_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibrustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibrustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_parser.rs?ref=ccd0ac59e9a918f3c2a174e31213286dc6867d37", "patch": "@@ -53,7 +53,7 @@ pub fn parse_desc(attrs: ~[ast::attribute]) -> Option<~str> {\n     if doc_strs.is_empty() {\n         None\n     } else {\n-        Some(str::connect(doc_strs, \"\\n\"))\n+        Some(doc_strs.connect(\"\\n\"))\n     }\n }\n "}, {"sha": "b6917f527a1ff9c96d04130ef8534f27835e42de", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=ccd0ac59e9a918f3c2a174e31213286dc6867d37", "patch": "@@ -173,7 +173,7 @@ pub fn header_kind(doc: doc::ItemTag) -> ~str {\n }\n \n pub fn header_name(doc: doc::ItemTag) -> ~str {\n-    let fullpath = str::connect(doc.path() + [doc.name()], \"::\");\n+    let fullpath = (doc.path() + [doc.name()]).connect(\"::\");\n     match &doc {\n         &doc::ModTag(_) if doc.id() != syntax::ast::crate_node_id => {\n             fullpath\n@@ -414,7 +414,7 @@ fn code_block_indent(s: ~str) -> ~str {\n     for str::each_line_any(s) |line| {\n         indented.push(fmt!(\"    %s\", line));\n     }\n-    str::connect(indented, \"\\n\")\n+    indented.connect(\"\\n\")\n }\n \n fn write_const(\n@@ -476,7 +476,7 @@ fn list_item_indent(item: &str) -> ~str {\n     // separate markdown elements within `*` lists must be indented by four\n     // spaces, or they will escape the list context. indenting everything\n     // seems fine though.\n-    str::connect_slices(indented, \"\\n    \")\n+    indented.connect(\"\\n    \")\n }\n \n fn write_trait(ctxt: &Ctxt, doc: doc::TraitDoc) {"}, {"sha": "353152763267cc5ece79a75071620145ac27307e", "filename": "src/librustdoc/markdown_writer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibrustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibrustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_writer.rs?ref=ccd0ac59e9a918f3c2a174e31213286dc6867d37", "patch": "@@ -107,7 +107,7 @@ fn pandoc_writer(\n         use core::io::WriterUtil;\n \n         debug!(\"pandoc cmd: %s\", pandoc_cmd);\n-        debug!(\"pandoc args: %s\", str::connect(pandoc_args, \" \"));\n+        debug!(\"pandoc args: %s\", pandoc_args.connect(\" \"));\n \n         let mut proc = run::Process::new(pandoc_cmd, pandoc_args, run::ProcessOptions::new());\n \n@@ -164,7 +164,7 @@ pub fn make_filename(\n             }\n           }\n           doc::ItemPage(doc) => {\n-            str::connect(doc.path() + [doc.name()], \"_\")\n+            (doc.path() + [doc.name()]).connect(\"_\")\n           }\n         }\n     };"}, {"sha": "23a4b9c7ba4b7363261c0eebd93e6ba8c80585de", "filename": "src/librustdoc/unindent_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibrustdoc%2Funindent_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibrustdoc%2Funindent_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Funindent_pass.rs?ref=ccd0ac59e9a918f3c2a174e31213286dc6867d37", "patch": "@@ -87,7 +87,7 @@ fn unindent(s: &str) -> ~str {\n                 line.slice(min_indent, line.len()).to_owned()\n             }\n         };\n-        str::connect(unindented, \"\\n\")\n+        unindented.connect(\"\\n\")\n     } else {\n         s.to_str()\n     }"}, {"sha": "9cb98dd8c2d83a90abdbf611858c991e005b94d2", "filename": "src/librusti/rusti.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibrusti%2Frusti.rc", "raw_url": "https://github.com/rust-lang/rust/raw/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibrusti%2Frusti.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rc?ref=ccd0ac59e9a918f3c2a174e31213286dc6867d37", "patch": "@@ -308,7 +308,7 @@ fn run_cmd(repl: &mut Repl, _in: @io::Reader, _out: @io::Writer,\n                 println(\"no crates loaded\");\n             } else {\n                 println(fmt!(\"crates loaded: %s\",\n-                                 str::connect(loaded_crates, \", \")));\n+                                 loaded_crates.connect(\", \")));\n             }\n         }\n         ~\"{\" => {"}, {"sha": "75e2c3fd4645495f7c1d55486094cb6a5a6208a5", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=ccd0ac59e9a918f3c2a174e31213286dc6867d37", "patch": "@@ -207,8 +207,8 @@ pub fn compile_input(ctxt: &Ctx,\n \n     let binary = @(copy os::args()[0]);\n \n-    debug!(\"flags: %s\", str::connect(flags, \" \"));\n-    debug!(\"cfgs: %s\", str::connect(cfgs, \" \"));\n+    debug!(\"flags: %s\", flags.connect(\" \"));\n+    debug!(\"cfgs: %s\", cfgs.connect(\" \"));\n     debug!(\"compile_input's sysroot = %?\", ctxt.sysroot_opt);\n \n     let crate_type = match what {"}, {"sha": "d62fc8c2cbafdadfdc1282d785e89aecff1d10aa", "filename": "src/libstd/path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=ccd0ac59e9a918f3c2a174e31213286dc6867d37", "patch": "@@ -22,7 +22,7 @@ use iterator::IteratorUtil;\n use libc;\n use option::{None, Option, Some};\n use str;\n-use str::StrSlice;\n+use str::{StrSlice, StrVector};\n use to_str::ToStr;\n use ascii::{AsciiCast, AsciiStr};\n use old_iter::BaseIter;\n@@ -442,7 +442,7 @@ impl ToStr for PosixPath {\n         if self.is_absolute {\n             s += \"/\";\n         }\n-        s + str::connect(self.components, \"/\")\n+        s + self.components.connect(\"/\")\n     }\n }\n \n@@ -629,7 +629,7 @@ impl ToStr for WindowsPath {\n         if self.is_absolute {\n             s += \"\\\\\";\n         }\n-        s + str::connect(self.components, \"\\\\\")\n+        s + self.components.connect(\"\\\\\")\n     }\n }\n "}, {"sha": "c820f6454901062e51e3985d23e4ff6da4b2364a", "filename": "src/libstd/str.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=ccd0ac59e9a918f3c2a174e31213286dc6867d37", "patch": "@@ -170,18 +170,6 @@ pub fn append(lhs: ~str, rhs: &str) -> ~str {\n     v\n }\n \n-/// Concatenate a vector of strings\n-pub fn concat(v: &[~str]) -> ~str { v.concat() }\n-\n-/// Concatenate a vector of strings\n-pub fn concat_slices(v: &[&str]) -> ~str { v.concat() }\n-\n-/// Concatenate a vector of strings, placing a given separator between each\n-pub fn connect(v: &[~str], sep: &str) -> ~str { v.connect(sep) }\n-\n-/// Concatenate a vector of strings, placing a given separator between each\n-pub fn connect_slices(v: &[&str], sep: &str) -> ~str { v.connect(sep) }\n-\n #[allow(missing_doc)]\n pub trait StrVector {\n     pub fn concat(&self) -> ~str;\n@@ -2495,7 +2483,6 @@ mod tests {\n     #[test]\n     fn test_concat() {\n         fn t(v: &[~str], s: &str) {\n-            assert_eq!(concat(v), s.to_str());\n             assert_eq!(v.concat(), s.to_str());\n         }\n         t([~\"you\", ~\"know\", ~\"I'm\", ~\"no\", ~\"good\"], \"youknowI'mnogood\");\n@@ -2507,7 +2494,6 @@ mod tests {\n     #[test]\n     fn test_connect() {\n         fn t(v: &[~str], sep: &str, s: &str) {\n-            assert_eq!(connect(v, sep), s.to_str());\n             assert_eq!(v.connect(sep), s.to_str());\n         }\n         t([~\"you\", ~\"know\", ~\"I'm\", ~\"no\", ~\"good\"],\n@@ -2520,7 +2506,6 @@ mod tests {\n     #[test]\n     fn test_concat_slices() {\n         fn t(v: &[&str], s: &str) {\n-            assert_eq!(concat_slices(v), s.to_str());\n             assert_eq!(v.concat(), s.to_str());\n         }\n         t([\"you\", \"know\", \"I'm\", \"no\", \"good\"], \"youknowI'mnogood\");\n@@ -2532,7 +2517,6 @@ mod tests {\n     #[test]\n     fn test_connect_slices() {\n         fn t(v: &[&str], sep: &str, s: &str) {\n-            assert_eq!(connect_slices(v, sep), s.to_str());\n             assert_eq!(v.connect(sep), s.to_str());\n         }\n         t([\"you\", \"know\", \"I'm\", \"no\", \"good\"],\n@@ -3307,7 +3291,6 @@ mod tests {\n         assert_eq!(lines, ~[\"\", \"M\u00e4ry h\u00e4d \u00e4 little l\u00e4mb\", \"\", \"Little l\u00e4mb\"]);\n     }\n \n-\n     #[test]\n     fn test_split_str_iterator() {\n         fn t<'a>(s: &str, sep: &'a str, u: ~[&str]) {"}, {"sha": "53729dbd1157d2c3ebf7fd63b1624eeb09c625f0", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=ccd0ac59e9a918f3c2a174e31213286dc6867d37", "patch": "@@ -10,7 +10,6 @@\n \n use core::prelude::*;\n \n-use core::str;\n use core::to_bytes;\n \n #[deriving(Eq)]\n@@ -267,7 +266,7 @@ impl ToStr for AbiSet {\n         for self.each |abi| {\n             strs.push(abi.data().name);\n         }\n-        fmt!(\"\\\"%s\\\"\", str::connect_slices(strs, \" \"))\n+        fmt!(\"\\\"%s\\\"\", strs.connect(\" \"))\n     }\n }\n "}, {"sha": "8a379a6213aac56e03ee2aaec7b7cf832414b9e1", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=ccd0ac59e9a918f3c2a174e31213286dc6867d37", "patch": "@@ -62,7 +62,7 @@ pub fn path_to_str_with_sep(p: &[path_elt], sep: &str, itr: @ident_interner)\n           path_name(s) => copy *itr.get(s.name)\n         }\n     };\n-    str::connect(strs, sep)\n+    strs.connect(sep)\n }\n \n pub fn path_ident_to_str(p: &path, i: ident, itr: @ident_interner) -> ~str {"}, {"sha": "db7c29edab0686c6cdbf496c6c6b585171eabfc4", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=ccd0ac59e9a918f3c2a174e31213286dc6867d37", "patch": "@@ -28,7 +28,7 @@ use core::to_bytes;\n \n pub fn path_name_i(idents: &[ident]) -> ~str {\n     // FIXME: Bad copies (#2543 -- same for everything else that says \"bad\")\n-    str::connect(idents.map(|i| copy *token::interner_get(i.name)), \"::\")\n+    idents.map(|i| copy *token::interner_get(i.name)).connect(\"::\")\n }\n \n pub fn path_to_ident(p: @Path) -> ident { copy *p.idents.last() }"}, {"sha": "14cbd170c4822a6f232e12c8631de1444aac0451", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=ccd0ac59e9a918f3c2a174e31213286dc6867d37", "patch": "@@ -120,7 +120,7 @@ pub fn expand_asm(cx: @ExtCtxt, sp: span, tts: &[ast::token_tree])\n                     clobs.push(clob);\n                 }\n \n-                cons = str::connect(clobs, \",\");\n+                cons = clobs.connect(\",\");\n             }\n             Options => {\n                 let option = p.parse_str();"}, {"sha": "cb7386b988003a19d20cfa01a1969d12f164e9e6", "filename": "src/libsyntax/ext/pipes/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs?ref=ccd0ac59e9a918f3c2a174e31213286dc6867d37", "patch": "@@ -88,7 +88,7 @@ pub fn analyze(proto: @mut protocol_, _cx: @ExtCtxt) {\n     }\n \n     if self_live.len() > 0 {\n-        let states = str::connect(self_live.map(|s| copy s.name), \" \");\n+        let states = self_live.map(|s| copy s.name).connect(\" \");\n \n         debug!(\"protocol %s is unbounded due to loops involving: %s\",\n                copy proto.name, states);"}, {"sha": "304c496bbf4d8f3a99cb1462eb9662d2a1301a0d", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=ccd0ac59e9a918f3c2a174e31213286dc6867d37", "patch": "@@ -24,7 +24,6 @@ use opt_vec;\n use opt_vec::OptVec;\n \n use core::iterator::IteratorUtil;\n-use core::str;\n use core::vec;\n \n pub trait gen_send {\n@@ -100,9 +99,9 @@ impl gen_send for message {\n             }\n             body += fmt!(\"let message = %s(%s);\\n\",\n                          name,\n-                         str::connect(vec::append_one(\n-                           arg_names.map(|x| cx.str_of(*x)),\n-                             ~\"s\"), \", \"));\n+                         vec::append_one(\n+                             arg_names.map(|x| cx.str_of(*x)),\n+                             ~\"s\").connect(\", \"));\n \n             if !try {\n                 body += fmt!(\"::std::pipes::send(pipe, message);\\n\");\n@@ -155,8 +154,7 @@ impl gen_send for message {\n                     ~\"\"\n                 }\n                 else {\n-                    ~\"(\" + str::connect(arg_names.map(|x| copy *x),\n-                                        \", \") + \")\"\n+                    ~\"(\" + arg_names.map(|x| copy *x).connect(\", \") + \")\"\n                 };\n \n                 let mut body = ~\"{ \";"}, {"sha": "2c6f40091ac9f0e120a1eeb6301362a0561c5bc0", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=ccd0ac59e9a918f3c2a174e31213286dc6867d37", "patch": "@@ -92,7 +92,7 @@ pub mod rt {\n \n     impl<'self> ToSource for &'self [@ast::item] {\n         fn to_source(&self) -> ~str {\n-            str::connect(self.map(|i| i.to_source()), \"\\n\\n\")\n+            self.map(|i| i.to_source()).connect(\"\\n\\n\")\n         }\n     }\n \n@@ -104,7 +104,7 @@ pub mod rt {\n \n     impl<'self> ToSource for &'self [@ast::Ty] {\n         fn to_source(&self) -> ~str {\n-            str::connect(self.map(|i| i.to_source()), \", \")\n+            self.map(|i| i.to_source()).connect(\", \")\n         }\n     }\n "}, {"sha": "79018ebd1eadcc9c2768b43682c3ed82d238dc26", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=ccd0ac59e9a918f3c2a174e31213286dc6867d37", "patch": "@@ -23,7 +23,6 @@ use print::pprust;\n \n use core::io;\n use core::result;\n-use core::str;\n use core::vec;\n \n // These macros all relate to the file system; they either return\n@@ -74,8 +73,7 @@ pub fn expand_mod(cx: @ExtCtxt, sp: span, tts: &[ast::token_tree])\n     -> base::MacResult {\n     base::check_zero_tts(cx, sp, tts, \"module_path!\");\n     base::MRExpr(cx.expr_str(sp,\n-                              str::connect(cx.mod_path().map(\n-                                  |x| cx.str_of(*x)), \"::\")))\n+                             cx.mod_path().map(|x| cx.str_of(*x)).connect(\"::\")))\n }\n \n // include! : parse the given file as an expr"}, {"sha": "0c9ca98fb9d3f260a730501c85f8ca97a15ab84e", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=ccd0ac59e9a918f3c2a174e31213286dc6867d37", "patch": "@@ -371,7 +371,7 @@ pub fn parse(\n         } else {\n             if (bb_eis.len() > 0u && next_eis.len() > 0u)\n                 || bb_eis.len() > 1u {\n-                let nts = str::connect(vec::map(bb_eis, |ei| {\n+                let nts = vec::map(bb_eis.connect(|ei| {\n                     match ei.elts[ei.idx].node {\n                       match_nonterminal(ref bind,ref name,_) => {\n                         fmt!(\"%s ('%s')\", *ident_to_str(name),"}, {"sha": "a6933c1648313a25c50d17377143331094d62e94", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=ccd0ac59e9a918f3c2a174e31213286dc6867d37", "patch": "@@ -116,7 +116,7 @@ pub fn strip_doc_comment_decoration(comment: &str) -> ~str {\n         let lines = block_trim(lines, ~\"\\t \", None);\n         let lines = block_trim(lines, ~\"*\", Some(1u));\n         let lines = block_trim(lines, ~\"\\t \", None);\n-        return str::connect(lines, \"\\n\");\n+        return lines.connect(\"\\n\");\n     }\n \n     fail!(\"not a doc-comment: %s\", comment);"}, {"sha": "03b4c0c5ca1c2686045f116d06a54f82a9fecc3b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ccd0ac59e9a918f3c2a174e31213286dc6867d37", "patch": "@@ -4002,9 +4002,7 @@ impl Parser {\n                                 fmt!(\"illegal ABI: \\\n                                       expected one of [%s], \\\n                                       found `%s`\",\n-                                     str::connect_slices(\n-                                         abi::all_names(),\n-                                         \", \"),\n+                                     abi::all_names().connect(\", \"),\n                                      word));\n                         }\n                     }"}, {"sha": "368725607160df4bb33ba7bc71528d169083687d", "filename": "src/test/run-pass/issue-3563-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs?ref=ccd0ac59e9a918f3c2a174e31213286dc6867d37", "patch": "@@ -120,7 +120,7 @@ impl ToStr for AsciiArt {\n         let lines = do self.lines.map |line| {str::from_chars(*line)};\n \n         // Concatenate the lines together using a new-line.\n-        str::connect(lines, \"\\n\")\n+        lines.connect(\"\\n\")\n     }\n }\n "}, {"sha": "23e5f3945b12dfdb0efa7e959c0df2da44feaa6b", "filename": "src/test/run-pass/issue-4241.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Ftest%2Frun-pass%2Fissue-4241.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Ftest%2Frun-pass%2Fissue-4241.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4241.rs?ref=ccd0ac59e9a918f3c2a174e31213286dc6867d37", "patch": "@@ -98,8 +98,8 @@ priv fn cmd_to_str(cmd: ~[~str]) -> ~str {\n   res.push_str(cmd.len().to_str());\n   res.push_str(\"\\r\\n\");\n     for cmd.each |s| {\n-    res.push_str(str::concat(~[~\"$\", s.len().to_str(), ~\"\\r\\n\",\n-                                          copy *s, ~\"\\r\\n\"]));\n+    res.push_str([~\"$\", s.len().to_str(), ~\"\\r\\n\",\n+                  copy *s, ~\"\\r\\n\"].concat()));\n     }\n   res\n }"}, {"sha": "bc167e5124fdb0b1811e36b95fef31eee6c649f9", "filename": "src/test/run-pass/trait-to-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd0ac59e9a918f3c2a174e31213286dc6867d37/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs?ref=ccd0ac59e9a918f3c2a174e31213286dc6867d37", "patch": "@@ -26,7 +26,7 @@ impl to_str for int {\n \n impl<T:to_str> to_str for ~[T] {\n     fn to_str(&self) -> ~str {\n-        ~\"[\" + str::connect(vec::map(*self, |e| e.to_str() ), \", \") + \"]\"\n+        ~\"[\" + self.map(|e| e.to_str()).connect(\", \") + \"]\"\n     }\n }\n "}]}