{"sha": "7bc32faebcfacb96be73650e624dc94e330298ab", "node_id": "C_kwDOAAsO6NoAKDdiYzMyZmFlYmNmYWNiOTZiZTczNjUwZTYyNGRjOTRlMzMwMjk4YWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-10T18:05:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-10T18:05:34Z"}, "message": "Auto merge of #100378 - compiler-errors:rollup-8vzsd92, r=compiler-errors\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #100286 (Add support for link-flavor rust-lld for macOS)\n - #100317 (Remove logic related to deprecated nvptx-nvidia-cuda (32-bit) target)\n - #100339 (Fixes bootstrap panic when running x fmt --check )\n - #100348 (Add regression test for #93205)\n - #100349 (Refactor: remove a type string comparison)\n - #100353 (Fix doc links in core::time::Duration::as_secs)\n - #100359 (Special-case references to leafs in valtree pretty-printing)\n - #100371 (Inline CStr::from_bytes_with_nul_unchecked::rt_impl)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "96eb6c6ef5d76613c4a499759280f06b03c2b838", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96eb6c6ef5d76613c4a499759280f06b03c2b838"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bc32faebcfacb96be73650e624dc94e330298ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bc32faebcfacb96be73650e624dc94e330298ab", "html_url": "https://github.com/rust-lang/rust/commit/7bc32faebcfacb96be73650e624dc94e330298ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bc32faebcfacb96be73650e624dc94e330298ab/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7ff1e8b0090b4ca3d62edef3dc2421861d57c48", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7ff1e8b0090b4ca3d62edef3dc2421861d57c48", "html_url": "https://github.com/rust-lang/rust/commit/c7ff1e8b0090b4ca3d62edef3dc2421861d57c48"}, {"sha": "eff71b9927a98900ace67494fb9b1cb45a3b80a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/eff71b9927a98900ace67494fb9b1cb45a3b80a5", "html_url": "https://github.com/rust-lang/rust/commit/eff71b9927a98900ace67494fb9b1cb45a3b80a5"}], "stats": {"total": 317, "additions": 210, "deletions": 107}, "files": [{"sha": "468d034e635ffc65f618d37c108cb0df68b0f5e1", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7bc32faebcfacb96be73650e624dc94e330298ab/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bc32faebcfacb96be73650e624dc94e330298ab/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=7bc32faebcfacb96be73650e624dc94e330298ab", "patch": "@@ -2674,11 +2674,16 @@ fn add_apple_sdk(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n     let os = &sess.target.os;\n     let llvm_target = &sess.target.llvm_target;\n     if sess.target.vendor != \"apple\"\n-        || !matches!(os.as_ref(), \"ios\" | \"tvos\" | \"watchos\")\n+        || !matches!(os.as_ref(), \"ios\" | \"tvos\" | \"watchos\" | \"macos\")\n         || (flavor != LinkerFlavor::Gcc && flavor != LinkerFlavor::Lld(LldFlavor::Ld64))\n     {\n         return;\n     }\n+\n+    if os == \"macos\" && flavor != LinkerFlavor::Lld(LldFlavor::Ld64) {\n+        return;\n+    }\n+\n     let sdk_name = match (arch.as_ref(), os.as_ref()) {\n         (\"aarch64\", \"tvos\") => \"appletvos\",\n         (\"x86_64\", \"tvos\") => \"appletvsimulator\",\n@@ -2694,6 +2699,7 @@ fn add_apple_sdk(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n         (\"aarch64\", \"watchos\") if llvm_target.ends_with(\"-simulator\") => \"watchsimulator\",\n         (\"aarch64\", \"watchos\") => \"watchos\",\n         (\"arm\", \"watchos\") => \"watchos\",\n+        (_, \"macos\") => \"macosx\",\n         _ => {\n             sess.err(&format!(\"unsupported arch `{}` for os `{}`\", arch, os));\n             return;"}, {"sha": "cc55b7e8611af2b6562a2904b5d1c42687aef7c3", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7bc32faebcfacb96be73650e624dc94e330298ab/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bc32faebcfacb96be73650e624dc94e330298ab/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=7bc32faebcfacb96be73650e624dc94e330298ab", "patch": "@@ -1513,6 +1513,10 @@ pub trait PrettyPrinter<'tcx>:\n                 }\n                 return Ok(self);\n             }\n+            (ty::ValTree::Leaf(leaf), ty::Ref(_, inner_ty, _)) => {\n+                p!(write(\"&\"));\n+                return self.pretty_print_const_scalar_int(leaf, *inner_ty, print_ty);\n+            }\n             (ty::ValTree::Leaf(leaf), _) => {\n                 return self.pretty_print_const_scalar_int(leaf, ty, print_ty);\n             }"}, {"sha": "639ce64a9f557c3b404383ea1b78751bb735b8cd", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bc32faebcfacb96be73650e624dc94e330298ab/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bc32faebcfacb96be73650e624dc94e330298ab/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=7bc32faebcfacb96be73650e624dc94e330298ab", "patch": "@@ -14,7 +14,6 @@ mod m68k;\n mod mips;\n mod mips64;\n mod msp430;\n-mod nvptx;\n mod nvptx64;\n mod powerpc;\n mod powerpc64;\n@@ -702,7 +701,6 @@ impl<'a, Ty> FnAbi<'a, Ty> {\n             \"msp430\" => msp430::compute_abi_info(self),\n             \"sparc\" => sparc::compute_abi_info(cx, self),\n             \"sparc64\" => sparc64::compute_abi_info(cx, self),\n-            \"nvptx\" => nvptx::compute_abi_info(self),\n             \"nvptx64\" => {\n                 if cx.target_spec().adjust_abi(abi) == spec::abi::Abi::PtxKernel {\n                     nvptx64::compute_ptx_kernel_abi_info(cx, self)"}, {"sha": "428dd95bbcd65be12d69d05b56ad90119e7e5126", "filename": "compiler/rustc_target/src/abi/call/nvptx.rs", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c7ff1e8b0090b4ca3d62edef3dc2421861d57c48/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fnvptx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7ff1e8b0090b4ca3d62edef3dc2421861d57c48/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fnvptx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fnvptx.rs?ref=c7ff1e8b0090b4ca3d62edef3dc2421861d57c48", "patch": "@@ -1,33 +0,0 @@\n-// Reference: PTX Writer's Guide to Interoperability\n-// https://docs.nvidia.com/cuda/ptx-writers-guide-to-interoperability\n-\n-use crate::abi::call::{ArgAbi, FnAbi};\n-\n-fn classify_ret<Ty>(ret: &mut ArgAbi<'_, Ty>) {\n-    if ret.layout.is_aggregate() && ret.layout.size.bits() > 32 {\n-        ret.make_indirect();\n-    } else {\n-        ret.extend_integer_width_to(32);\n-    }\n-}\n-\n-fn classify_arg<Ty>(arg: &mut ArgAbi<'_, Ty>) {\n-    if arg.layout.is_aggregate() && arg.layout.size.bits() > 32 {\n-        arg.make_indirect();\n-    } else {\n-        arg.extend_integer_width_to(32);\n-    }\n-}\n-\n-pub fn compute_abi_info<Ty>(fn_abi: &mut FnAbi<'_, Ty>) {\n-    if !fn_abi.ret.is_ignore() {\n-        classify_ret(&mut fn_abi.ret);\n-    }\n-\n-    for arg in &mut fn_abi.args {\n-        if arg.is_ignore() {\n-            continue;\n-        }\n-        classify_arg(arg);\n-    }\n-}"}, {"sha": "6d919a4c2ad2e1221dd7e0bbf010f7ebfecc066f", "filename": "compiler/rustc_target/src/spec/aarch64_apple_darwin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7bc32faebcfacb96be73650e624dc94e330298ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bc32faebcfacb96be73650e624dc94e330298ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs?ref=7bc32faebcfacb96be73650e624dc94e330298ab", "patch": "@@ -1,20 +1,20 @@\n-use crate::spec::{FramePointer, LinkerFlavor, SanitizerSet, Target, TargetOptions};\n+use crate::spec::{FramePointer, SanitizerSet, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let mut base = super::apple_base::opts(\"macos\");\n+    let arch = \"arm64\";\n+    let mut base = super::apple_base::opts(\"macos\", arch, \"\");\n     base.cpu = \"apple-a14\".into();\n     base.max_atomic_width = Some(128);\n \n     // FIXME: The leak sanitizer currently fails the tests, see #88132.\n     base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::CFI | SanitizerSet::THREAD;\n \n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-arch\", \"arm64\"]);\n     base.link_env_remove.to_mut().extend(super::apple_base::macos_link_env_remove());\n \n     // Clang automatically chooses a more specific target based on\n     // MACOSX_DEPLOYMENT_TARGET.  To enable cross-language LTO to work\n     // correctly, we do too.\n-    let llvm_target = super::apple_base::macos_llvm_target(\"arm64\");\n+    let llvm_target = super::apple_base::macos_llvm_target(arch);\n \n     Target {\n         llvm_target: llvm_target.into(),"}, {"sha": "db38ff50c78786212e0a3fba879f921929f4dd80", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 48, "deletions": 5, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/7bc32faebcfacb96be73650e624dc94e330298ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bc32faebcfacb96be73650e624dc94e330298ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=7bc32faebcfacb96be73650e624dc94e330298ab", "patch": "@@ -1,8 +1,45 @@\n use std::{borrow::Cow, env};\n \n-use crate::spec::{cvs, FramePointer, LldFlavor, SplitDebuginfo, TargetOptions};\n+use crate::spec::{cvs, FramePointer, SplitDebuginfo, TargetOptions};\n+use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor};\n+\n+fn pre_link_args(os: &'static str, arch: &'static str, abi: &'static str) -> LinkArgs {\n+    let mut args = LinkArgs::new();\n+\n+    let platform_name = match abi {\n+        \"sim\" => format!(\"{}-simulator\", os),\n+        \"macabi\" => \"mac-catalyst\".to_string(),\n+        _ => os.to_string(),\n+    };\n+\n+    let platform_version = match os.as_ref() {\n+        \"ios\" => ios_lld_platform_version(),\n+        \"tvos\" => tvos_lld_platform_version(),\n+        \"watchos\" => watchos_lld_platform_version(),\n+        \"macos\" => macos_lld_platform_version(arch),\n+        _ => unreachable!(),\n+    };\n+\n+    if abi != \"macabi\" {\n+        args.insert(LinkerFlavor::Gcc, vec![\"-arch\".into(), arch.into()]);\n+    }\n+\n+    args.insert(\n+        LinkerFlavor::Lld(LldFlavor::Ld64),\n+        vec![\n+            \"-arch\".into(),\n+            arch.into(),\n+            \"-platform_version\".into(),\n+            platform_name.into(),\n+            platform_version.clone().into(),\n+            platform_version.into(),\n+        ],\n+    );\n+\n+    args\n+}\n \n-pub fn opts(os: &'static str) -> TargetOptions {\n+pub fn opts(os: &'static str, arch: &'static str, abi: &'static str) -> TargetOptions {\n     // ELF TLS is only available in macOS 10.7+. If you try to compile for 10.6\n     // either the linker will complain if it is used or the binary will end up\n     // segfaulting at runtime when run on 10.6. Rust by default supports macOS\n@@ -24,6 +61,7 @@ pub fn opts(os: &'static str) -> TargetOptions {\n         // macOS has -dead_strip, which doesn't rely on function_sections\n         function_sections: false,\n         dynamic_linking: true,\n+        pre_link_args: pre_link_args(os, arch, abi),\n         linker_is_gnu: false,\n         families: cvs![\"unix\"],\n         is_like_osx: true,\n@@ -73,6 +111,11 @@ fn macos_deployment_target(arch: &str) -> (u32, u32) {\n         .unwrap_or_else(|| macos_default_deployment_target(arch))\n }\n \n+fn macos_lld_platform_version(arch: &str) -> String {\n+    let (major, minor) = macos_deployment_target(arch);\n+    format!(\"{}.{}\", major, minor)\n+}\n+\n pub fn macos_llvm_target(arch: &str) -> String {\n     let (major, minor) = macos_deployment_target(arch);\n     format!(\"{}-apple-macosx{}.{}.0\", arch, major, minor)\n@@ -109,7 +152,7 @@ pub fn ios_llvm_target(arch: &str) -> String {\n     format!(\"{}-apple-ios{}.{}.0\", arch, major, minor)\n }\n \n-pub fn ios_lld_platform_version() -> String {\n+fn ios_lld_platform_version() -> String {\n     let (major, minor) = ios_deployment_target();\n     format!(\"{}.{}\", major, minor)\n }\n@@ -123,7 +166,7 @@ fn tvos_deployment_target() -> (u32, u32) {\n     deployment_target(\"TVOS_DEPLOYMENT_TARGET\").unwrap_or((7, 0))\n }\n \n-pub fn tvos_lld_platform_version() -> String {\n+fn tvos_lld_platform_version() -> String {\n     let (major, minor) = tvos_deployment_target();\n     format!(\"{}.{}\", major, minor)\n }\n@@ -132,7 +175,7 @@ fn watchos_deployment_target() -> (u32, u32) {\n     deployment_target(\"WATCHOS_DEPLOYMENT_TARGET\").unwrap_or((5, 0))\n }\n \n-pub fn watchos_lld_platform_version() -> String {\n+fn watchos_lld_platform_version() -> String {\n     let (major, minor) = watchos_deployment_target();\n     format!(\"{}.{}\", major, minor)\n }"}, {"sha": "bf3ebaa2840f6810b1caf31c2466d5ec59d8cc06", "filename": "compiler/rustc_target/src/spec/apple_sdk_base.rs", "status": "modified", "additions": 2, "deletions": 42, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7bc32faebcfacb96be73650e624dc94e330298ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bc32faebcfacb96be73650e624dc94e330298ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs?ref=7bc32faebcfacb96be73650e624dc94e330298ab", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{cvs, LinkArgs, LinkerFlavor, LldFlavor, TargetOptions};\n+use crate::spec::{cvs, TargetOptions};\n use std::borrow::Cow;\n \n use Arch::*;\n@@ -61,53 +61,13 @@ fn link_env_remove(arch: Arch) -> Cow<'static, [Cow<'static, str>]> {\n     }\n }\n \n-fn pre_link_args(os: &'static str, arch: Arch) -> LinkArgs {\n-    let mut args = LinkArgs::new();\n-\n-    let target_abi = target_abi(arch);\n-\n-    let platform_name = match target_abi {\n-        \"sim\" => format!(\"{}-simulator\", os),\n-        \"macabi\" => \"mac-catalyst\".to_string(),\n-        _ => os.to_string(),\n-    };\n-\n-    let platform_version = match os.as_ref() {\n-        \"ios\" => super::apple_base::ios_lld_platform_version(),\n-        \"tvos\" => super::apple_base::tvos_lld_platform_version(),\n-        \"watchos\" => super::apple_base::watchos_lld_platform_version(),\n-        _ => unreachable!(),\n-    };\n-\n-    let arch_str = target_arch_name(arch);\n-\n-    if target_abi != \"macabi\" {\n-        args.insert(LinkerFlavor::Gcc, vec![\"-arch\".into(), arch_str.into()]);\n-    }\n-\n-    args.insert(\n-        LinkerFlavor::Lld(LldFlavor::Ld64),\n-        vec![\n-            \"-arch\".into(),\n-            arch_str.into(),\n-            \"-platform_version\".into(),\n-            platform_name.into(),\n-            platform_version.clone().into(),\n-            platform_version.into(),\n-        ],\n-    );\n-\n-    args\n-}\n-\n pub fn opts(os: &'static str, arch: Arch) -> TargetOptions {\n     TargetOptions {\n         abi: target_abi(arch).into(),\n         cpu: target_cpu(arch).into(),\n         dynamic_linking: false,\n-        pre_link_args: pre_link_args(os, arch),\n         link_env_remove: link_env_remove(arch),\n         has_thread_local: false,\n-        ..super::apple_base::opts(os)\n+        ..super::apple_base::opts(os, target_arch_name(arch), target_abi(arch))\n     }\n }"}, {"sha": "5e9ceb844f73cd978c287b0c47cd4dfe23f5198e", "filename": "compiler/rustc_target/src/spec/i686_apple_darwin.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7bc32faebcfacb96be73650e624dc94e330298ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bc32faebcfacb96be73650e624dc94e330298ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs?ref=7bc32faebcfacb96be73650e624dc94e330298ab", "patch": "@@ -1,7 +1,8 @@\n use crate::spec::{FramePointer, LinkerFlavor, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let mut base = super::apple_base::opts(\"macos\");\n+    // ld64 only understand i386 and not i686\n+    let mut base = super::apple_base::opts(\"macos\", \"i386\", \"\");\n     base.cpu = \"yonah\".into();\n     base.max_atomic_width = Some(64);\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\"]);"}, {"sha": "176c9dd6b764b8a6932a0edcfae3a0780dd7c936", "filename": "compiler/rustc_target/src/spec/x86_64_apple_darwin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7bc32faebcfacb96be73650e624dc94e330298ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bc32faebcfacb96be73650e624dc94e330298ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs?ref=7bc32faebcfacb96be73650e624dc94e330298ab", "patch": "@@ -2,11 +2,12 @@ use crate::spec::TargetOptions;\n use crate::spec::{FramePointer, LinkerFlavor, SanitizerSet, StackProbeType, Target};\n \n pub fn target() -> Target {\n-    let mut base = super::apple_base::opts(\"macos\");\n+    let arch = \"x86_64\";\n+    let mut base = super::apple_base::opts(\"macos\", arch, \"\");\n     base.cpu = \"core2\".into();\n     base.max_atomic_width = Some(128); // core2 support cmpxchg16b\n     base.frame_pointer = FramePointer::Always;\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\", \"-arch\", \"x86_64\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n     base.link_env_remove.to_mut().extend(super::apple_base::macos_link_env_remove());\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n@@ -16,7 +17,6 @@ pub fn target() -> Target {\n     // Clang automatically chooses a more specific target based on\n     // MACOSX_DEPLOYMENT_TARGET.  To enable cross-language LTO to work\n     // correctly, we do too.\n-    let arch = \"x86_64\";\n     let llvm_target = super::apple_base::macos_llvm_target(&arch);\n \n     Target {"}, {"sha": "bac0be44aa9a2f4b04d1b902fe93d2afaa463d18", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7bc32faebcfacb96be73650e624dc94e330298ab/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bc32faebcfacb96be73650e624dc94e330298ab/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=7bc32faebcfacb96be73650e624dc94e330298ab", "patch": "@@ -598,13 +598,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         };\n \n         let self_ty = self.typeck_results.borrow().expr_ty(&method_expr[0]);\n-        let self_ty = format!(\"{:?}\", self_ty);\n         let name = method_path.ident.name;\n-        let is_as_ref_able = (self_ty.starts_with(\"&std::option::Option\")\n-            || self_ty.starts_with(\"&std::result::Result\")\n-            || self_ty.starts_with(\"std::option::Option\")\n-            || self_ty.starts_with(\"std::result::Result\"))\n-            && (name == sym::map || name == sym::and_then);\n+        let is_as_ref_able = match self_ty.peel_refs().kind() {\n+            ty::Adt(def, _) => {\n+                (self.tcx.is_diagnostic_item(sym::Option, def.did())\n+                    || self.tcx.is_diagnostic_item(sym::Result, def.did()))\n+                    && (name == sym::map || name == sym::and_then)\n+            }\n+            _ => false,\n+        };\n         match (is_as_ref_able, self.sess().source_map().span_to_snippet(method_path.ident.span)) {\n             (true, Ok(src)) => {\n                 let suggestion = format!(\"as_ref().{}\", src);\n@@ -792,7 +794,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             _ if is_range_literal(expr) => true,\n                             _ => false,\n                         };\n-                        let sugg_expr = if needs_parens { format!(\"({src})\") } else { src };\n \n                         if let Some(sugg) = self.can_use_as_ref(expr) {\n                             return Some((\n@@ -820,6 +821,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             }\n                         }\n \n+                        let sugg_expr = if needs_parens { format!(\"({src})\") } else { src };\n                         return Some(match mutability {\n                             hir::Mutability::Mut => (\n                                 sp,"}, {"sha": "d8b8ac4d8710be98a5efa629b0fdd35d8c4ad48b", "filename": "library/core/src/ffi/c_str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7bc32faebcfacb96be73650e624dc94e330298ab/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bc32faebcfacb96be73650e624dc94e330298ab/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs?ref=7bc32faebcfacb96be73650e624dc94e330298ab", "patch": "@@ -387,6 +387,7 @@ impl CStr {\n     #[rustc_const_stable(feature = \"const_cstr_unchecked\", since = \"1.59.0\")]\n     #[rustc_allow_const_fn_unstable(const_eval_select)]\n     pub const unsafe fn from_bytes_with_nul_unchecked(bytes: &[u8]) -> &CStr {\n+        #[inline]\n         fn rt_impl(bytes: &[u8]) -> &CStr {\n             // Chance at catching some UB at runtime with debug builds.\n             debug_assert!(!bytes.is_empty() && bytes[bytes.len() - 1] == 0);"}, {"sha": "153dc4dbb0835e02c74493061fe904eb1e65e8fc", "filename": "library/core/src/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7bc32faebcfacb96be73650e624dc94e330298ab/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bc32faebcfacb96be73650e624dc94e330298ab/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=7bc32faebcfacb96be73650e624dc94e330298ab", "patch": "@@ -321,8 +321,8 @@ impl Duration {\n     /// To determine the total number of seconds represented by the `Duration`\n     /// including the fractional part, use [`as_secs_f64`] or [`as_secs_f32`]\n     ///\n-    /// [`as_secs_f32`]: Duration::as_secs_f64\n-    /// [`as_secs_f64`]: Duration::as_secs_f32\n+    /// [`as_secs_f64`]: Duration::as_secs_f64\n+    /// [`as_secs_f32`]: Duration::as_secs_f32\n     /// [`subsec_nanos`]: Duration::subsec_nanos\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n     #[rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\")]"}, {"sha": "a242243aaafa91f38576b90f9466f54f1ee199d4", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7bc32faebcfacb96be73650e624dc94e330298ab/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bc32faebcfacb96be73650e624dc94e330298ab/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=7bc32faebcfacb96be73650e624dc94e330298ab", "patch": "@@ -1631,14 +1631,12 @@ fn chmod(_path: &Path, _perms: u32) {}\n /// If code is not 0 (successful exit status), exit status is 101 (rust's default error code.)\n /// If the test is running and code is an error code, it will cause a panic.\n fn detail_exit(code: i32) -> ! {\n-    // Successful exit\n-    if code == 0 {\n-        std::process::exit(0);\n-    }\n-    if cfg!(test) {\n+    // if in test and code is an error code, panic with staus code provided\n+    if cfg!(test) && code != 0 {\n         panic!(\"status code: {}\", code);\n     } else {\n-        std::panic::resume_unwind(Box::new(code));\n+        //otherwise,exit with provided status code\n+        std::process::exit(code);\n     }\n }\n "}, {"sha": "a7bc1c6a29f51535c5acb69b8e3e5635f2e55578", "filename": "src/test/rustdoc/intra-doc/assoc-reexport-super.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7bc32faebcfacb96be73650e624dc94e330298ab/src%2Ftest%2Frustdoc%2Fintra-doc%2Fassoc-reexport-super.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bc32faebcfacb96be73650e624dc94e330298ab/src%2Ftest%2Frustdoc%2Fintra-doc%2Fassoc-reexport-super.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fassoc-reexport-super.rs?ref=7bc32faebcfacb96be73650e624dc94e330298ab", "patch": "@@ -0,0 +1,20 @@\n+// Regression test for #93205\n+\n+#![crate_name = \"foo\"]\n+\n+mod generated {\n+    pub struct MyNewType;\n+    impl MyNewType {\n+        pub const FOO: Self = Self;\n+    }\n+}\n+\n+pub use generated::MyNewType;\n+\n+mod prelude {\n+    impl super::MyNewType {\n+        /// An alias for [`Self::FOO`].\n+        // @has 'foo/struct.MyNewType.html' '//a[@href=\"struct.MyNewType.html#associatedconstant.FOO\"]' 'Self::FOO'\n+        pub const FOO2: Self = Self::FOO;\n+    }\n+}"}, {"sha": "4e9d3626aa89c82be790cd1036addc6738ac1e70", "filename": "src/test/ui/const-generics/issues/issue-100313.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7bc32faebcfacb96be73650e624dc94e330298ab/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-100313.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bc32faebcfacb96be73650e624dc94e330298ab/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-100313.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-100313.rs?ref=7bc32faebcfacb96be73650e624dc94e330298ab", "patch": "@@ -0,0 +1,21 @@\n+#![allow(incomplete_features)]\n+#![feature(const_mut_refs)]\n+#![feature(adt_const_params)]\n+\n+struct T<const B: &'static bool>;\n+\n+impl <const B: &'static bool> T<B> {\n+    const fn set_false(&self) {\n+        unsafe {\n+            *(B as *const bool as *mut bool) = false;\n+            //~^ ERROR evaluation of constant value failed [E0080]\n+        }\n+    }\n+}\n+\n+const _: () = {\n+    let x = T::<{&true}>;\n+    x.set_false();\n+};\n+\n+fn main() {}"}, {"sha": "f3ce357c2bb8d9b8f221d0f9e436b36c4a9eb84e", "filename": "src/test/ui/const-generics/issues/issue-100313.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7bc32faebcfacb96be73650e624dc94e330298ab/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-100313.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bc32faebcfacb96be73650e624dc94e330298ab/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-100313.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-100313.stderr?ref=7bc32faebcfacb96be73650e624dc94e330298ab", "patch": "@@ -0,0 +1,15 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/issue-100313.rs:10:13\n+   |\n+LL |             *(B as *const bool as *mut bool) = false;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |             |\n+   |             writing to alloc7 which is read-only\n+   |             inside `T::<&true>::set_false` at $DIR/issue-100313.rs:10:13\n+...\n+LL |     x.set_false();\n+   |     ------------- inside `_` at $DIR/issue-100313.rs:18:5\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "a053534418589177c93ca04afae81a0cdc9519ca", "filename": "src/test/ui/suggestions/as-ref.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7bc32faebcfacb96be73650e624dc94e330298ab/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bc32faebcfacb96be73650e624dc94e330298ab/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.rs?ref=7bc32faebcfacb96be73650e624dc94e330298ab", "patch": "@@ -17,4 +17,11 @@ fn main() {\n     // note: do not suggest because of `E: usize`\n     let x: &Result<usize, usize> = &Ok(3);\n     let y: Result<&usize, usize> = x; //~ ERROR mismatched types [E0308]\n+\n+    let multiple_ref_opt = &&Some(Foo);\n+    multiple_ref_opt.map(|arg| takes_ref(arg)); //~ ERROR mismatched types [E0308]\n+    multiple_ref_opt.and_then(|arg| Some(takes_ref(arg))); //~ ERROR mismatched types [E0308]\n+    let multiple_ref_result = &&Ok(Foo);\n+    multiple_ref_result.map(|arg| takes_ref(arg)); //~ ERROR mismatched types [E0308]\n+    multiple_ref_result.and_then(|arg| Ok(takes_ref(arg))); //~ ERROR mismatched types [E0308]\n }"}, {"sha": "deafa9f48d459e65637a79774b3e7007d2342bbb", "filename": "src/test/ui/suggestions/as-ref.stderr", "status": "modified", "additions": 61, "deletions": 1, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/7bc32faebcfacb96be73650e624dc94e330298ab/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bc32faebcfacb96be73650e624dc94e330298ab/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.stderr?ref=7bc32faebcfacb96be73650e624dc94e330298ab", "patch": "@@ -97,6 +97,66 @@ LL |     let y: Result<&usize, usize> = x;\n    = note:   expected enum `Result<&usize, usize>`\n            found reference `&Result<usize, usize>`\n \n-error: aborting due to 7 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/as-ref.rs:22:42\n+   |\n+LL |     multiple_ref_opt.map(|arg| takes_ref(arg));\n+   |                      ---       --------- ^^^ expected `&Foo`, found struct `Foo`\n+   |                      |         |\n+   |                      |         arguments to this function are incorrect\n+   |                      help: consider using `as_ref` instead: `as_ref().map`\n+   |\n+note: function defined here\n+  --> $DIR/as-ref.rs:3:4\n+   |\n+LL | fn takes_ref(_: &Foo) {}\n+   |    ^^^^^^^^^ -------\n+\n+error[E0308]: mismatched types\n+  --> $DIR/as-ref.rs:23:52\n+   |\n+LL |     multiple_ref_opt.and_then(|arg| Some(takes_ref(arg)));\n+   |                      --------            --------- ^^^ expected `&Foo`, found struct `Foo`\n+   |                      |                   |\n+   |                      |                   arguments to this function are incorrect\n+   |                      help: consider using `as_ref` instead: `as_ref().and_then`\n+   |\n+note: function defined here\n+  --> $DIR/as-ref.rs:3:4\n+   |\n+LL | fn takes_ref(_: &Foo) {}\n+   |    ^^^^^^^^^ -------\n+\n+error[E0308]: mismatched types\n+  --> $DIR/as-ref.rs:25:45\n+   |\n+LL |     multiple_ref_result.map(|arg| takes_ref(arg));\n+   |                         ---       --------- ^^^ expected `&Foo`, found struct `Foo`\n+   |                         |         |\n+   |                         |         arguments to this function are incorrect\n+   |                         help: consider using `as_ref` instead: `as_ref().map`\n+   |\n+note: function defined here\n+  --> $DIR/as-ref.rs:3:4\n+   |\n+LL | fn takes_ref(_: &Foo) {}\n+   |    ^^^^^^^^^ -------\n+\n+error[E0308]: mismatched types\n+  --> $DIR/as-ref.rs:26:53\n+   |\n+LL |     multiple_ref_result.and_then(|arg| Ok(takes_ref(arg)));\n+   |                         --------          --------- ^^^ expected `&Foo`, found struct `Foo`\n+   |                         |                 |\n+   |                         |                 arguments to this function are incorrect\n+   |                         help: consider using `as_ref` instead: `as_ref().and_then`\n+   |\n+note: function defined here\n+  --> $DIR/as-ref.rs:3:4\n+   |\n+LL | fn takes_ref(_: &Foo) {}\n+   |    ^^^^^^^^^ -------\n+\n+error: aborting due to 11 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}