{"sha": "71ca239f8019755eb67a255fbf73450bae8ad4c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxY2EyMzlmODAxOTc1NWViNjdhMjU1ZmJmNzM0NTBiYWU4YWQ0YzI=", "commit": {"author": {"name": "SNCPlay42", "email": "SNCPlay42@gmail.com", "date": "2020-10-19T16:42:57Z"}, "committer": {"name": "SNCPlay42", "email": "SNCPlay42@gmail.com", "date": "2020-10-19T20:11:40Z"}, "message": "don't assume trait ambiguity happens in `Self`", "tree": {"sha": "401b3ec2705aff130d52000b043e4812cbc11e85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/401b3ec2705aff130d52000b043e4812cbc11e85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71ca239f8019755eb67a255fbf73450bae8ad4c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71ca239f8019755eb67a255fbf73450bae8ad4c2", "html_url": "https://github.com/rust-lang/rust/commit/71ca239f8019755eb67a255fbf73450bae8ad4c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71ca239f8019755eb67a255fbf73450bae8ad4c2/comments", "author": {"login": "SNCPlay42", "id": 5455518, "node_id": "MDQ6VXNlcjU0NTU1MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5455518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SNCPlay42", "html_url": "https://github.com/SNCPlay42", "followers_url": "https://api.github.com/users/SNCPlay42/followers", "following_url": "https://api.github.com/users/SNCPlay42/following{/other_user}", "gists_url": "https://api.github.com/users/SNCPlay42/gists{/gist_id}", "starred_url": "https://api.github.com/users/SNCPlay42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SNCPlay42/subscriptions", "organizations_url": "https://api.github.com/users/SNCPlay42/orgs", "repos_url": "https://api.github.com/users/SNCPlay42/repos", "events_url": "https://api.github.com/users/SNCPlay42/events{/privacy}", "received_events_url": "https://api.github.com/users/SNCPlay42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SNCPlay42", "id": 5455518, "node_id": "MDQ6VXNlcjU0NTU1MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5455518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SNCPlay42", "html_url": "https://github.com/SNCPlay42", "followers_url": "https://api.github.com/users/SNCPlay42/followers", "following_url": "https://api.github.com/users/SNCPlay42/following{/other_user}", "gists_url": "https://api.github.com/users/SNCPlay42/gists{/gist_id}", "starred_url": "https://api.github.com/users/SNCPlay42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SNCPlay42/subscriptions", "organizations_url": "https://api.github.com/users/SNCPlay42/orgs", "repos_url": "https://api.github.com/users/SNCPlay42/repos", "events_url": "https://api.github.com/users/SNCPlay42/events{/privacy}", "received_events_url": "https://api.github.com/users/SNCPlay42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c38ddb8040edce1b05bc09a0e8439472e9f67623", "url": "https://api.github.com/repos/rust-lang/rust/commits/c38ddb8040edce1b05bc09a0e8439472e9f67623", "html_url": "https://github.com/rust-lang/rust/commit/c38ddb8040edce1b05bc09a0e8439472e9f67623"}], "stats": {"total": 147, "additions": 113, "deletions": 34}, "files": [{"sha": "f8bd3ab96e254733666043631f3402f7a7388f7c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/71ca239f8019755eb67a255fbf73450bae8ad4c2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ca239f8019755eb67a255fbf73450bae8ad4c2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=71ca239f8019755eb67a255fbf73450bae8ad4c2", "patch": "@@ -1462,9 +1462,8 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let bound_predicate = predicate.bound_atom();\n         let mut err = match bound_predicate.skip_binder() {\n             ty::PredicateAtom::Trait(data, _) => {\n-                let self_ty = data.trait_ref.self_ty();\n                 let trait_ref = bound_predicate.rebind(data.trait_ref);\n-                debug!(\"self_ty {:?} {:?} trait_ref {:?}\", self_ty, self_ty.kind(), trait_ref);\n+                debug!(\"trait_ref {:?}\", trait_ref);\n \n                 if predicate.references_error() {\n                     return;\n@@ -1479,6 +1478,17 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 // known, since we don't dispatch based on region\n                 // relationships.\n \n+                // Pick the first substitution that still contains inference variables as the one\n+                // we're going to emit an error for. If there are none (see above), fall back to\n+                // the substitution for `Self`.\n+                let subst = {\n+                    let substs = data.trait_ref.substs;\n+                    substs\n+                        .iter()\n+                        .find(|s| s.has_infer_types_or_consts())\n+                        .unwrap_or_else(|| substs[0])\n+                };\n+\n                 // This is kind of a hack: it frequently happens that some earlier\n                 // error prevents types from being fully inferred, and then we get\n                 // a bunch of uninteresting errors saying something like \"<generic\n@@ -1495,21 +1505,11 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 // check upstream for type errors and don't add the obligations to\n                 // begin with in those cases.\n                 if self.tcx.lang_items().sized_trait() == Some(trait_ref.def_id()) {\n-                    self.emit_inference_failure_err(\n-                        body_id,\n-                        span,\n-                        self_ty.into(),\n-                        ErrorCode::E0282,\n-                    )\n-                    .emit();\n+                    self.emit_inference_failure_err(body_id, span, subst, ErrorCode::E0282).emit();\n                     return;\n                 }\n-                let mut err = self.emit_inference_failure_err(\n-                    body_id,\n-                    span,\n-                    self_ty.into(),\n-                    ErrorCode::E0283,\n-                );\n+                let mut err =\n+                    self.emit_inference_failure_err(body_id, span, subst, ErrorCode::E0283);\n                 err.note(&format!(\"cannot satisfy `{}`\", predicate));\n                 if let ObligationCauseCode::ItemObligation(def_id) = obligation.cause.code {\n                     self.suggest_fully_qualified_path(&mut err, def_id, span, trait_ref.def_id());"}, {"sha": "3443cca5f327058695df5f7bde8e9d57eb726164", "filename": "src/test/ui/issues/issue-72690.stderr", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/71ca239f8019755eb67a255fbf73450bae8ad4c2/src%2Ftest%2Fui%2Fissues%2Fissue-72690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71ca239f8019755eb67a255fbf73450bae8ad4c2/src%2Ftest%2Fui%2Fissues%2Fissue-72690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72690.stderr?ref=71ca239f8019755eb67a255fbf73450bae8ad4c2", "patch": "@@ -2,7 +2,7 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:7:5\n    |\n LL |     String::from(\"x\".as_ref());\n-   |     ^^^^^^^^^^^^ cannot infer type for struct `String`\n+   |     ^^^^^^^^^^^^ cannot infer type for reference `&_`\n    |\n    = note: cannot satisfy `String: From<&_>`\n    = note: required by `from`\n@@ -13,19 +13,21 @@ error[E0282]: type annotations needed\n LL |     |x| String::from(\"x\".as_ref());\n    |      ^ consider giving this closure parameter a type\n \n-error[E0283]: type annotations needed\n+error[E0283]: type annotations needed for `&T`\n   --> $DIR/issue-72690.rs:15:17\n    |\n LL |     let _ = \"x\".as_ref();\n-   |                 ^^^^^^ cannot infer type for type `str`\n+   |         -       ^^^^^^ cannot infer type for type parameter `T` declared on the trait `AsRef`\n+   |         |\n+   |         consider giving this pattern the explicit type `&T`, where the type parameter `T` is specified\n    |\n    = note: cannot satisfy `str: AsRef<_>`\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:19:5\n    |\n LL |     String::from(\"x\".as_ref());\n-   |     ^^^^^^^^^^^^ cannot infer type for struct `String`\n+   |     ^^^^^^^^^^^^ cannot infer type for reference `&_`\n    |\n    = note: cannot satisfy `String: From<&_>`\n    = note: required by `from`\n@@ -34,7 +36,7 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:25:5\n    |\n LL |     String::from(\"x\".as_ref());\n-   |     ^^^^^^^^^^^^ cannot infer type for struct `String`\n+   |     ^^^^^^^^^^^^ cannot infer type for reference `&_`\n    |\n    = note: cannot satisfy `String: From<&_>`\n    = note: required by `from`\n@@ -43,41 +45,34 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:33:5\n    |\n LL |     String::from(\"x\".as_ref());\n-   |     ^^^^^^^^^^^^ cannot infer type for struct `String`\n+   |     ^^^^^^^^^^^^ cannot infer type for reference `&_`\n    |\n    = note: cannot satisfy `String: From<&_>`\n    = note: required by `from`\n \n-error[E0283]: type annotations needed for `String`\n+error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:41:5\n    |\n LL |     String::from(\"x\".as_ref());\n-   |     ^^^^^^^^^^^^ cannot infer type for struct `String`\n-LL |     let _ = String::from(\"x\");\n-   |         - consider giving this pattern a type\n+   |     ^^^^^^^^^^^^ cannot infer type for reference `&_`\n    |\n    = note: cannot satisfy `String: From<&_>`\n    = note: required by `from`\n \n-error[E0283]: type annotations needed for `String`\n+error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:47:5\n    |\n-LL |     let _ = String::from(\"x\");\n-   |         - consider giving this pattern a type\n LL |     String::from(\"x\".as_ref());\n-   |     ^^^^^^^^^^^^ cannot infer type for struct `String`\n+   |     ^^^^^^^^^^^^ cannot infer type for reference `&_`\n    |\n    = note: cannot satisfy `String: From<&_>`\n    = note: required by `from`\n \n-error[E0283]: type annotations needed for `String`\n+error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:55:5\n    |\n-LL |     let _ = String::from(\"x\");\n-   |         - consider giving this pattern a type\n-...\n LL |     String::from(\"x\".as_ref());\n-   |     ^^^^^^^^^^^^ cannot infer type for struct `String`\n+   |     ^^^^^^^^^^^^ cannot infer type for reference `&_`\n    |\n    = note: cannot satisfy `String: From<&_>`\n    = note: required by `from`"}, {"sha": "03d4fe23cc5bcff87004cfeed8144971e3320d70", "filename": "src/test/ui/traits/issue-77982.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/71ca239f8019755eb67a255fbf73450bae8ad4c2/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ca239f8019755eb67a255fbf73450bae8ad4c2/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.rs?ref=71ca239f8019755eb67a255fbf73450bae8ad4c2", "patch": "@@ -0,0 +1,40 @@\n+use std::collections::HashMap;\n+\n+fn what() {\n+    let descr = String::new();\n+    let mut opts = HashMap::<String, ()>::new();\n+    let opt = String::new();\n+\n+    opts.get(opt.as_ref()); //~ ERROR type annotations needed\n+}\n+\n+fn main() {\n+    let ips: Vec<_> = (0..100_000).map(|_| u32::from(0u32.into())).collect();\n+    //~^ ERROR type annotations needed\n+}\n+\n+trait Foo<'a, T: ?Sized> {\n+    fn foo(&self) -> Box<T> {\n+        todo!()\n+    }\n+}\n+\n+trait Bar<'a, T: ?Sized> {\n+    fn bar(&self) -> Box<T> {\n+        todo!()\n+    }\n+}\n+\n+impl Foo<'static, u32> for () {}\n+impl<'a> Foo<'a, i16> for () {}\n+\n+impl<'a> Bar<'static, u32> for &'a () {}\n+impl<'a> Bar<'a, i16> for &'a () {}\n+\n+fn foo() {\n+    let _ = ().foo(); //~ ERROR type annotations needed\n+}\n+\n+fn bar() {\n+    let _ = (&()).bar(); //~ ERROR type annotations needed\n+}"}, {"sha": "d788f1871ffac83233b8cd186a5706baeb621bac", "filename": "src/test/ui/traits/issue-77982.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/71ca239f8019755eb67a255fbf73450bae8ad4c2/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71ca239f8019755eb67a255fbf73450bae8ad4c2/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr?ref=71ca239f8019755eb67a255fbf73450bae8ad4c2", "patch": "@@ -0,0 +1,44 @@\n+error[E0283]: type annotations needed\n+  --> $DIR/issue-77982.rs:8:10\n+   |\n+LL |     opts.get(opt.as_ref());\n+   |          ^^^ ------------ this method call resolves to `&T`\n+   |          |\n+   |          cannot infer type for type parameter `Q` declared on the associated function `get`\n+   |\n+   = note: cannot satisfy `String: Borrow<_>`\n+\n+error[E0283]: type annotations needed\n+  --> $DIR/issue-77982.rs:12:44\n+   |\n+LL |     let ips: Vec<_> = (0..100_000).map(|_| u32::from(0u32.into())).collect();\n+   |                                            ^^^^^^^^^ ----------- this method call resolves to `T`\n+   |                                            |\n+   |                                            cannot infer type for type parameter `T` declared on the trait `From`\n+   |\n+   = note: cannot satisfy `u32: From<_>`\n+   = note: required by `from`\n+\n+error[E0283]: type annotations needed for `Box<T>`\n+  --> $DIR/issue-77982.rs:35:16\n+   |\n+LL |     let _ = ().foo();\n+   |         -      ^^^ cannot infer type for type parameter `T` declared on the trait `Foo`\n+   |         |\n+   |         consider giving this pattern the explicit type `Box<T>`, where the type parameter `T` is specified\n+   |\n+   = note: cannot satisfy `(): Foo<'_, _>`\n+\n+error[E0283]: type annotations needed for `Box<T>`\n+  --> $DIR/issue-77982.rs:39:19\n+   |\n+LL |     let _ = (&()).bar();\n+   |         -         ^^^ cannot infer type for type parameter `T` declared on the trait `Bar`\n+   |         |\n+   |         consider giving this pattern the explicit type `Box<T>`, where the type parameter `T` is specified\n+   |\n+   = note: cannot satisfy `&(): Bar<'_, _>`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0283`."}]}