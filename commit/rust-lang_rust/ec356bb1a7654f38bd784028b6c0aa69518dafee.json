{"sha": "ec356bb1a7654f38bd784028b6c0aa69518dafee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjMzU2YmIxYTc2NTRmMzhiZDc4NDAyOGI2YzBhYTY5NTE4ZGFmZWU=", "commit": {"author": {"name": "Alex Burka", "email": "durka42@gmail.com", "date": "2016-12-04T19:07:27Z"}, "committer": {"name": "Alex Burka", "email": "durka42@gmail.com", "date": "2016-12-09T17:18:42Z"}, "message": "rustdoc: fix doctests with non-feature crate attrs", "tree": {"sha": "23d6063660edc30c8bc12b50cfd7edf2e4d06f10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23d6063660edc30c8bc12b50cfd7edf2e4d06f10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec356bb1a7654f38bd784028b6c0aa69518dafee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec356bb1a7654f38bd784028b6c0aa69518dafee", "html_url": "https://github.com/rust-lang/rust/commit/ec356bb1a7654f38bd784028b6c0aa69518dafee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec356bb1a7654f38bd784028b6c0aa69518dafee/comments", "author": null, "committer": null, "parents": [{"sha": "28d6623bccf8f7e9a40a47895df75dd9ef2619da", "url": "https://api.github.com/repos/rust-lang/rust/commits/28d6623bccf8f7e9a40a47895df75dd9ef2619da", "html_url": "https://github.com/rust-lang/rust/commit/28d6623bccf8f7e9a40a47895df75dd9ef2619da"}], "stats": {"total": 123, "additions": 117, "deletions": 6}, "files": [{"sha": "dad0cccd6556304c6e287afb353d5d6d47f04ade", "filename": "src/doc/book/documentation.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec356bb1a7654f38bd784028b6c0aa69518dafee/src%2Fdoc%2Fbook%2Fdocumentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/ec356bb1a7654f38bd784028b6c0aa69518dafee/src%2Fdoc%2Fbook%2Fdocumentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fdocumentation.md?ref=ec356bb1a7654f38bd784028b6c0aa69518dafee", "patch": "@@ -600,7 +600,7 @@ is documented, especially when you are working on a library. Rust allows you to\n to generate warnings or errors, when an item is missing documentation.\n To generate warnings you use `warn`:\n \n-```rust\n+```rust,ignore\n #![warn(missing_docs)]\n ```\n \n@@ -630,7 +630,7 @@ struct Hidden;\n You can control a few aspects of the HTML that `rustdoc` generates through the\n `#![doc]` version of the attribute:\n \n-```rust\n+```rust,ignore\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/\")]"}, {"sha": "e66e1d05fff73c7aea6f406280f88a2b3e66ff95", "filename": "src/doc/book/using-rust-without-the-standard-library.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec356bb1a7654f38bd784028b6c0aa69518dafee/src%2Fdoc%2Fbook%2Fusing-rust-without-the-standard-library.md", "raw_url": "https://github.com/rust-lang/rust/raw/ec356bb1a7654f38bd784028b6c0aa69518dafee/src%2Fdoc%2Fbook%2Fusing-rust-without-the-standard-library.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fusing-rust-without-the-standard-library.md?ref=ec356bb1a7654f38bd784028b6c0aa69518dafee", "patch": "@@ -13,7 +13,7 @@ don\u2019t want to use the standard library via an attribute: `#![no_std]`.\n \n To use `#![no_std]`, add it to your crate root:\n \n-```rust\n+```rust,ignore\n #![no_std]\n \n fn plus_one(x: i32) -> i32 {\n@@ -29,7 +29,7 @@ use its features without an explicit import. By the same token, when using\n prelude](../core/prelude/v1/index.html). This means that a lot of code will Just\n Work:\n \n-```rust\n+```rust,ignore\n #![no_std]\n \n fn may_fail(failure: bool) -> Result<(), &'static str> {"}, {"sha": "554af61286885c7e9a93704f880640e7750ea16a", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec356bb1a7654f38bd784028b6c0aa69518dafee/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec356bb1a7654f38bd784028b6c0aa69518dafee/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=ec356bb1a7654f38bd784028b6c0aa69518dafee", "patch": "@@ -557,7 +557,7 @@ them yourself.\n You can build a free-standing crate by adding `#![no_std]` to the crate\n attributes:\n \n-```\n+```ignore\n #![no_std]\n ```\n "}, {"sha": "ae466d504ac1fc1ce45643c8815c97ddfab11d22", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec356bb1a7654f38bd784028b6c0aa69518dafee/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec356bb1a7654f38bd784028b6c0aa69518dafee/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=ec356bb1a7654f38bd784028b6c0aa69518dafee", "patch": "@@ -344,6 +344,7 @@ pub fn maketest(s: &str, cratename: Option<&str>, dont_insert_main: bool,\n     prog\n }\n \n+// FIXME(aburka): use a real parser to deal with multiline attributes\n fn partition_source(s: &str) -> (String, String) {\n     use rustc_unicode::str::UnicodeStr;\n \n@@ -354,7 +355,7 @@ fn partition_source(s: &str) -> (String, String) {\n     for line in s.lines() {\n         let trimline = line.trim();\n         let header = trimline.is_whitespace() ||\n-            trimline.starts_with(\"#![feature\");\n+            trimline.starts_with(\"#![\");\n         if !header || after_header {\n             after_header = true;\n             after.push_str(line);"}, {"sha": "00ccc74d8874df1a3313a09f7addff5ab5e9a189", "filename": "src/test/rustdoc/issue-38129.rs", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/ec356bb1a7654f38bd784028b6c0aa69518dafee/src%2Ftest%2Frustdoc%2Fissue-38129.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec356bb1a7654f38bd784028b6c0aa69518dafee/src%2Ftest%2Frustdoc%2Fissue-38129.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-38129.rs?ref=ec356bb1a7654f38bd784028b6c0aa69518dafee", "patch": "@@ -0,0 +1,110 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:--test\n+\n+// This file tests the source-partitioning behavior of rustdoc.\n+// Each test contains some code that should be put into the generated\n+// `fn main` and some attributes should be left outside (except the first\n+// one, which has no attributes).\n+// If the #![recursion_limit] attribute is incorrectly left inside,\n+// then the tests will fail because the macro recurses 128 times.\n+\n+/// ```\n+/// assert_eq!(1 + 1, 2);\n+/// ```\n+pub fn simple() {}\n+\n+/// ```\n+/// #![recursion_limit = \"1024\"]\n+/// macro_rules! recurse {\n+///     (()) => {};\n+///     (() $($rest:tt)*) => { recurse!($($rest)*); }\n+/// }\n+/// recurse!(() () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ());\n+/// assert_eq!(1 + 1, 2);\n+/// ```\n+pub fn non_feature_attr() {}\n+\n+/// ```\n+/// #![feature(core_intrinsics)]\n+/// assert_eq!(1 + 1, 2);\n+/// ```\n+pub fn feature_attr() {}\n+\n+/// ```\n+/// #![feature(core_intrinsics)]\n+/// #![recursion_limit = \"1024\"]\n+/// macro_rules! recurse {\n+///     (()) => {};\n+///     (() $($rest:tt)*) => { recurse!($($rest)*); }\n+/// }\n+/// recurse!(() () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ());\n+/// assert_eq!(1 + 1, 2);\n+/// ```\n+pub fn both_attrs() {}\n+\n+/// ```\n+/// #![recursion_limit = \"1024\"]\n+/// #![feature(core_intrinsics)]\n+/// macro_rules! recurse {\n+///     (()) => {};\n+///     (() $($rest:tt)*) => { recurse!($($rest)*); }\n+/// }\n+/// recurse!(() () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ()\n+///          () () () () () () () ());\n+/// assert_eq!(1 + 1, 2);\n+/// ```\n+pub fn both_attrs_reverse() {}\n+"}]}