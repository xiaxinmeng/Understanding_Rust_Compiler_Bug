{"sha": "6d8cea63db8761d8a7e5549e407e5bd60b5c3eb1", "node_id": "C_kwDOAAsO6NoAKDZkOGNlYTYzZGI4NzYxZDhhN2U1NTQ5ZTQwN2U1YmQ2MGI1YzNlYjE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-06T05:07:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-06T05:07:36Z"}, "message": "Rollup merge of #102693 - BlackHoleFox:revert-apple-entropy-changes, r=thomcc\n\nRevert \"Use getentropy when possible on all Apple platforms\"\n\nPer https://github.com/rust-lang/rust/issues/102643, This reverts commit 3fc35b5b935e390c61ea2bbf744838b2632b2df1 to avoid breaking any Rust on iOS users.\n\nCloses https://github.com/rust-lang/rust/issues/102643", "tree": {"sha": "ba6dc29c4f0ae5b2c84beaaa3ba0436a6d245f20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba6dc29c4f0ae5b2c84beaaa3ba0436a6d245f20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d8cea63db8761d8a7e5549e407e5bd60b5c3eb1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjPmKYCRBK7hj4Ov3rIwAADVkIADzijGOQsYOB/wqJaSf6YtrE\ndJ5iYiSYxJPU/f7c8qpKUEOB8tZOH1LFou/0kepw7KpIB0kAjghvHLVY4Y2pzzGX\naQrxSiRVZ67ByNyEcEoryjpZ+GSkmvNK3TNV1H9NXgZSPbJLfytF+Ols9tOVfdEo\nDEmJTiqumu/54EUFA+CxqQahZCmsubSRLqAp87wCKAs1YLEsWWwCjIMwyi4cqEN0\nNuvdlQfzvqpUAYZloaH5eoU82xQGjvjSfuMGMRIysfNtIPl1vT6ni2V2uLCpj0fH\nHAEDJrtAmDJeiTzaBTqIfSxyxmBaTjGsbHQQM1eYf+Dd7EygSwn+eeYTjSzjGE8=\n=i4ND\n-----END PGP SIGNATURE-----\n", "payload": "tree ba6dc29c4f0ae5b2c84beaaa3ba0436a6d245f20\nparent 5f5b7b870b3032b5683e917281d5060e16351512\nparent a955ef2c8c95a289f0753e533b690c576b1806bf\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1665032856 +0200\ncommitter GitHub <noreply@github.com> 1665032856 +0200\n\nRollup merge of #102693 - BlackHoleFox:revert-apple-entropy-changes, r=thomcc\n\nRevert \"Use getentropy when possible on all Apple platforms\"\n\nPer https://github.com/rust-lang/rust/issues/102643, This reverts commit 3fc35b5b935e390c61ea2bbf744838b2632b2df1 to avoid breaking any Rust on iOS users.\n\nCloses https://github.com/rust-lang/rust/issues/102643\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d8cea63db8761d8a7e5549e407e5bd60b5c3eb1", "html_url": "https://github.com/rust-lang/rust/commit/6d8cea63db8761d8a7e5549e407e5bd60b5c3eb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d8cea63db8761d8a7e5549e407e5bd60b5c3eb1/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f5b7b870b3032b5683e917281d5060e16351512", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f5b7b870b3032b5683e917281d5060e16351512", "html_url": "https://github.com/rust-lang/rust/commit/5f5b7b870b3032b5683e917281d5060e16351512"}, {"sha": "a955ef2c8c95a289f0753e533b690c576b1806bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/a955ef2c8c95a289f0753e533b690c576b1806bf", "html_url": "https://github.com/rust-lang/rust/commit/a955ef2c8c95a289f0753e533b690c576b1806bf"}], "stats": {"total": 94, "additions": 38, "deletions": 56}, "files": [{"sha": "a6fe07873d7ee4263b9362d9a5dda75c35916582", "filename": "library/std/src/sys/unix/rand.rs", "status": "modified", "additions": 38, "deletions": 56, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/6d8cea63db8761d8a7e5549e407e5bd60b5c3eb1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d8cea63db8761d8a7e5549e407e5bd60b5c3eb1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs?ref=6d8cea63db8761d8a7e5549e407e5bd60b5c3eb1", "patch": "@@ -137,9 +137,11 @@ mod imp {\n     }\n }\n \n-#[cfg(any(target_os = \"macos\", target_os = \"ios\", target_os = \"watchos\"))]\n+#[cfg(target_os = \"macos\")]\n mod imp {\n-    use crate::io;\n+    use crate::fs::File;\n+    use crate::io::Read;\n+    use crate::sys::os::errno;\n     use crate::sys::weak::weak;\n     use libc::{c_int, c_void, size_t};\n \n@@ -153,72 +155,22 @@ mod imp {\n                 for s in v.chunks_mut(256) {\n                     let ret = unsafe { f(s.as_mut_ptr() as *mut c_void, s.len()) };\n                     if ret == -1 {\n-                        panic!(\"unexpected getentropy error: {}\", io::Error::last_os_error());\n+                        panic!(\"unexpected getentropy error: {}\", errno());\n                     }\n                 }\n                 true\n             })\n             .unwrap_or(false)\n     }\n \n-    #[cfg(target_os = \"macos\")]\n-    fn fallback_fill_bytes(v: &mut [u8]) {\n-        use crate::fs::File;\n-        use crate::io::Read;\n-\n-        let mut file = File::open(\"/dev/urandom\").expect(\"failed to open /dev/urandom\");\n-        file.read_exact(v).expect(\"failed to read /dev/urandom\")\n-    }\n-\n-    // On iOS and MacOS `SecRandomCopyBytes` calls `CCRandomCopyBytes` with\n-    // `kCCRandomDefault`. `CCRandomCopyBytes` manages a CSPRNG which is seeded\n-    // from `/dev/random` and which runs on its own thread accessed via GCD.\n-    //\n-    // This is very heavyweight compared to the alternatives, but they may not be usable:\n-    // - `getentropy` was added in iOS 10, but we support a minimum of iOS 7\n-    // - `/dev/urandom` is not accessible inside the iOS app sandbox.\n-    //\n-    // Therefore `SecRandomCopyBytes` is only used on older iOS versions where no\n-    // better options are present.\n-    #[cfg(target_os = \"ios\")]\n-    fn fallback_fill_bytes(v: &mut [u8]) {\n-        use crate::ptr;\n-\n-        enum SecRandom {}\n-\n-        #[allow(non_upper_case_globals)]\n-        const kSecRandomDefault: *const SecRandom = ptr::null();\n-\n-        extern \"C\" {\n-            fn SecRandomCopyBytes(rnd: *const SecRandom, count: size_t, bytes: *mut u8) -> c_int;\n-        }\n-\n-        let ret = unsafe { SecRandomCopyBytes(kSecRandomDefault, v.len(), v.as_mut_ptr()) };\n-        if ret == -1 {\n-            panic!(\"couldn't generate random bytes: {}\", io::Error::last_os_error());\n-        }\n-    }\n-\n-    // All supported versions of watchOS (>= 5) have support for `getentropy`.\n-    #[cfg(target_os = \"watchos\")]\n-    #[cold]\n-    fn fallback_fill_bytes(_: &mut [u8]) {\n-        unreachable!()\n-    }\n-\n     pub fn fill_bytes(v: &mut [u8]) {\n         if getentropy_fill_bytes(v) {\n             return;\n         }\n \n-        // Older macOS versions (< 10.12) don't support `getentropy`. Fallback to\n-        // reading from `/dev/urandom` on these systems.\n-        //\n-        // Older iOS versions (< 10) don't support it either. Fallback to\n-        // `SecRandomCopyBytes` on these systems. On watchOS, this is unreachable\n-        // because the minimum supported version is 5 while `getentropy` became accessible\n-        // in 3.\n-        fallback_fill_bytes(v)\n+        // for older macos which doesn't support getentropy\n+        let mut file = File::open(\"/dev/urandom\").expect(\"failed to open /dev/urandom\");\n+        file.read_exact(v).expect(\"failed to read /dev/urandom\")\n     }\n }\n \n@@ -237,6 +189,36 @@ mod imp {\n     }\n }\n \n+// On iOS and MacOS `SecRandomCopyBytes` calls `CCRandomCopyBytes` with\n+// `kCCRandomDefault`. `CCRandomCopyBytes` manages a CSPRNG which is seeded\n+// from `/dev/random` and which runs on its own thread accessed via GCD.\n+// This seems needlessly heavyweight for the purposes of generating two u64s\n+// once per thread in `hashmap_random_keys`. Therefore `SecRandomCopyBytes` is\n+// only used on iOS where direct access to `/dev/urandom` is blocked by the\n+// sandbox.\n+#[cfg(any(target_os = \"ios\", target_os = \"watchos\"))]\n+mod imp {\n+    use crate::io;\n+    use crate::ptr;\n+    use libc::{c_int, size_t};\n+\n+    enum SecRandom {}\n+\n+    #[allow(non_upper_case_globals)]\n+    const kSecRandomDefault: *const SecRandom = ptr::null();\n+\n+    extern \"C\" {\n+        fn SecRandomCopyBytes(rnd: *const SecRandom, count: size_t, bytes: *mut u8) -> c_int;\n+    }\n+\n+    pub fn fill_bytes(v: &mut [u8]) {\n+        let ret = unsafe { SecRandomCopyBytes(kSecRandomDefault, v.len(), v.as_mut_ptr()) };\n+        if ret == -1 {\n+            panic!(\"couldn't generate random bytes: {}\", io::Error::last_os_error());\n+        }\n+    }\n+}\n+\n #[cfg(any(target_os = \"freebsd\", target_os = \"netbsd\"))]\n mod imp {\n     use crate::ptr;"}]}