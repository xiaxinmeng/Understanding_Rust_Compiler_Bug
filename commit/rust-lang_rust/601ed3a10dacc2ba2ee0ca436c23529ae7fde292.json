{"sha": "601ed3a10dacc2ba2ee0ca436c23529ae7fde292", "node_id": "C_kwDOAAsO6NoAKDYwMWVkM2ExMGRhY2MyYmEyZWUwY2E0MzZjMjM1MjlhZTdmZGUyOTI", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-10-12T15:44:57Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-10-12T15:44:57Z"}, "message": "Simplify generated PartialOrd code", "tree": {"sha": "0d81bd646de9e36019453f6087daffaa8c043e5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d81bd646de9e36019453f6087daffaa8c043e5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/601ed3a10dacc2ba2ee0ca436c23529ae7fde292", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/601ed3a10dacc2ba2ee0ca436c23529ae7fde292", "html_url": "https://github.com/rust-lang/rust/commit/601ed3a10dacc2ba2ee0ca436c23529ae7fde292", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/601ed3a10dacc2ba2ee0ca436c23529ae7fde292/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f72bd81a90de0c89c3a154043ea0183d3aaa829", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f72bd81a90de0c89c3a154043ea0183d3aaa829", "html_url": "https://github.com/rust-lang/rust/commit/5f72bd81a90de0c89c3a154043ea0183d3aaa829"}], "stats": {"total": 188, "additions": 86, "deletions": 102}, "files": [{"sha": "b04bd6ba09845165cbb439acc3006849b3da3fe0", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 29, "deletions": 28, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/601ed3a10dacc2ba2ee0ca436c23529ae7fde292/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601ed3a10dacc2ba2ee0ca436c23529ae7fde292/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=601ed3a10dacc2ba2ee0ca436c23529ae7fde292", "patch": "@@ -682,6 +682,31 @@ impl Clone for Foo {\n             r#\"\n //- minicore: ord\n #[derive(Partial$0Ord)]\n+struct Foo {\n+    bin: usize,\n+}\n+\"#,\n+            r#\"\n+struct Foo {\n+    bin: usize,\n+}\n+\n+impl PartialOrd for Foo {\n+    $0fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {\n+        self.bin.partial_cmp(other.bin)\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn add_custom_impl_partial_ord_record_struct_multi_field() {\n+        check_assist(\n+            replace_derive_with_manual_impl,\n+            r#\"\n+//- minicore: ord\n+#[derive(Partial$0Ord)]\n struct Foo {\n     bin: usize,\n     bar: usize,\n@@ -697,15 +722,7 @@ struct Foo {\n \n impl PartialOrd for Foo {\n     $0fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {\n-        match self.bin.partial_cmp(other.bin) {\n-            Some(core::cmp::Ordering::Eq) => {}\n-            ord => return ord,\n-        }\n-        match self.bar.partial_cmp(other.bar) {\n-            Some(core::cmp::Ordering::Eq) => {}\n-            ord => return ord,\n-        }\n-        self.baz.partial_cmp(other.baz)\n+        (self.bin, self.bar, self.baz).partial_cmp((other.bin, other.bar, other.baz))\n     }\n }\n \"#,\n@@ -726,15 +743,7 @@ struct Foo(usize, usize, usize);\n \n impl PartialOrd for Foo {\n     $0fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {\n-        match self.0.partial_cmp(other.0) {\n-            Some(core::cmp::Ordering::Eq) => {}\n-            ord => return ord,\n-        }\n-        match self.1.partial_cmp(other.1) {\n-            Some(core::cmp::Ordering::Eq) => {}\n-            ord => return ord,\n-        }\n-        self.2.partial_cmp(other.2)\n+        (self.0, self.1, self.2).partial_cmp((other.0, other.1, other.2))\n     }\n }\n \"#,\n@@ -807,11 +816,7 @@ impl PartialOrd for Foo {\n         match (self, other) {\n             (Self::Bar { bin: l_bin }, Self::Bar { bin: r_bin }) => l_bin.partial_cmp(r_bin),\n             (Self::Baz { qux: l_qux, fez: l_fez }, Self::Baz { qux: r_qux, fez: r_fez }) => {\n-                match l_qux.partial_cmp(r_qux) {\n-                    Some(core::cmp::Ordering::Eq) => {}\n-                    ord => return ord,\n-                }\n-                l_fez.partial_cmp(r_fez)\n+                (l_qux, l_fez).partial_cmp((r_qux, r_fez))\n             }\n             _ => core::mem::discriminant(self).partial_cmp(core::mem::discriminant(other)),\n         }\n@@ -848,11 +853,7 @@ impl PartialOrd for Foo {\n         match (self, other) {\n             (Self::Bar(l0), Self::Bar(r0)) => l0.partial_cmp(r0),\n             (Self::Baz(l0, l1), Self::Baz(r0, r1)) => {\n-                match l0.partial_cmp(r0) {\n-                    Some(core::cmp::Ordering::Eq) => {}\n-                    ord => return ord,\n-                }\n-                l1.partial_cmp(r1)\n+                (l0, l1).partial_cmp((r0, r1))\n             }\n             _ => core::mem::discriminant(self).partial_cmp(core::mem::discriminant(other)),\n         }"}, {"sha": "c883e6fb11ba947b04f9e5dcb332a28f173520be", "filename": "crates/ide_assists/src/utils/gen_trait_fn_body.rs", "status": "modified", "additions": 57, "deletions": 74, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/601ed3a10dacc2ba2ee0ca436c23529ae7fde292/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601ed3a10dacc2ba2ee0ca436c23529ae7fde292/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs?ref=601ed3a10dacc2ba2ee0ca436c23529ae7fde292", "patch": "@@ -574,27 +574,18 @@ fn gen_partial_eq(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n }\n \n fn gen_partial_ord(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n-    fn gen_partial_eq_match(match_target: ast::Expr) -> Option<ast::Stmt> {\n-        let mut arms = vec![];\n-\n-        let variant_name =\n-            make::path_pat(make::ext::path_from_idents([\"core\", \"cmp\", \"Ordering\", \"Eq\"])?);\n-        let lhs = make::tuple_struct_pat(make::ext::path_from_idents([\"Some\"])?, [variant_name]);\n-        arms.push(make::match_arm(Some(lhs.into()), None, make::expr_empty_block()));\n-\n-        arms.push(make::match_arm(\n-            [make::ident_pat(false, false, make::name(\"ord\")).into()],\n-            None,\n-            make::expr_return(Some(make::expr_path(make::ext::ident_path(\"ord\")))),\n-        ));\n-        let list = make::match_arm_list(arms).indent(ast::edit::IndentLevel(1));\n-        Some(make::expr_stmt(make::expr_match(match_target, list)).into())\n-    }\n-\n     fn gen_partial_cmp_call(lhs: ast::Expr, rhs: ast::Expr) -> ast::Expr {\n         let method = make::name_ref(\"partial_cmp\");\n         make::expr_method_call(lhs, method, make::arg_list(Some(rhs)))\n     }\n+    fn gen_partial_cmp_call2(mut lhs: Vec<ast::Expr>, mut rhs: Vec<ast::Expr>) -> ast::Expr {\n+        let (lhs, rhs) = match (lhs.len(), rhs.len()) {\n+            (1, 1) => (lhs.pop().unwrap(), rhs.pop().unwrap()),\n+            _ => (make::expr_tuple(lhs.into_iter()), make::expr_tuple(rhs.into_iter())),\n+        };\n+        let method = make::name_ref(\"partial_cmp\");\n+        make::expr_method_call(lhs, method, make::arg_list(Some(rhs)))\n+    }\n \n     fn gen_record_pat_field(field_name: &str, pat_name: &str) -> ast::RecordPatField {\n         let pat = make::ext::simple_ident_pat(make::name(&pat_name));\n@@ -637,80 +628,78 @@ fn gen_partial_ord(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n                 match variant.field_list() {\n                     // => (Self::Bar { bin: l_bin }, Self::Bar { bin: r_bin }) => l_bin == r_bin,\n                     Some(ast::FieldList::RecordFieldList(list)) => {\n-                        let mut exprs = vec![];\n+                        let mut l_pat_fields = vec![];\n+                        let mut r_pat_fields = vec![];\n                         let mut l_fields = vec![];\n                         let mut r_fields = vec![];\n \n                         for field in list.fields() {\n                             let field_name = field.name()?.to_string();\n \n                             let l_name = &format!(\"l_{}\", field_name);\n-                            l_fields.push(gen_record_pat_field(&field_name, &l_name));\n+                            l_pat_fields.push(gen_record_pat_field(&field_name, &l_name));\n \n                             let r_name = &format!(\"r_{}\", field_name);\n-                            r_fields.push(gen_record_pat_field(&field_name, &r_name));\n+                            r_pat_fields.push(gen_record_pat_field(&field_name, &r_name));\n \n                             let lhs = make::expr_path(make::ext::ident_path(l_name));\n                             let rhs = make::expr_path(make::ext::ident_path(r_name));\n-                            let ord = gen_partial_cmp_call(lhs, rhs);\n-                            exprs.push(ord);\n+                            l_fields.push(lhs);\n+                            r_fields.push(rhs);\n                         }\n \n-                        let left = gen_record_pat(gen_variant_path(&variant)?, l_fields);\n-                        let right = gen_record_pat(gen_variant_path(&variant)?, r_fields);\n-                        let tuple = make::tuple_pat(vec![left.into(), right.into()]);\n+                        let left_pat = gen_record_pat(gen_variant_path(&variant)?, l_pat_fields);\n+                        let right_pat = gen_record_pat(gen_variant_path(&variant)?, r_pat_fields);\n+                        let tuple_pat = make::tuple_pat(vec![left_pat.into(), right_pat.into()]);\n \n-                        if let Some(tail) = exprs.pop() {\n-                            let stmts = exprs\n-                                .into_iter()\n-                                .map(gen_partial_eq_match)\n-                                .collect::<Option<Vec<ast::Stmt>>>()?;\n-                            let expr = match stmts.len() {\n-                                0 => tail,\n-                                _ => make::block_expr(stmts.into_iter(), Some(tail))\n+                        let len = l_fields.len();\n+                        if len != 0 {\n+                            let mut expr = gen_partial_cmp_call2(l_fields, r_fields);\n+                            if len >= 2 {\n+                                expr = make::block_expr(None, Some(expr))\n                                     .indent(ast::edit::IndentLevel(1))\n-                                    .into(),\n-                            };\n-                            arms.push(make::match_arm(Some(tuple.into()), None, expr.into()));\n+                                    .into();\n+                            }\n+                            arms.push(make::match_arm(Some(tuple_pat.into()), None, expr));\n                         }\n                     }\n \n                     Some(ast::FieldList::TupleFieldList(list)) => {\n-                        let mut exprs = vec![];\n+                        let mut l_pat_fields = vec![];\n+                        let mut r_pat_fields = vec![];\n                         let mut l_fields = vec![];\n                         let mut r_fields = vec![];\n \n                         for (i, _) in list.fields().enumerate() {\n                             let field_name = format!(\"{}\", i);\n \n                             let l_name = format!(\"l{}\", field_name);\n-                            l_fields.push(gen_tuple_field(&l_name));\n+                            l_pat_fields.push(gen_tuple_field(&l_name));\n \n                             let r_name = format!(\"r{}\", field_name);\n-                            r_fields.push(gen_tuple_field(&r_name));\n+                            r_pat_fields.push(gen_tuple_field(&r_name));\n \n                             let lhs = make::expr_path(make::ext::ident_path(&l_name));\n                             let rhs = make::expr_path(make::ext::ident_path(&r_name));\n-                            let ord = gen_partial_cmp_call(lhs, rhs);\n-                            exprs.push(ord);\n+                            l_fields.push(lhs);\n+                            r_fields.push(rhs);\n                         }\n \n-                        let left = make::tuple_struct_pat(gen_variant_path(&variant)?, l_fields);\n-                        let right = make::tuple_struct_pat(gen_variant_path(&variant)?, r_fields);\n-                        let tuple = make::tuple_pat(vec![left.into(), right.into()]);\n-\n-                        if let Some(tail) = exprs.pop() {\n-                            let stmts = exprs\n-                                .into_iter()\n-                                .map(gen_partial_eq_match)\n-                                .collect::<Option<Vec<ast::Stmt>>>()?;\n-                            let expr = match stmts.len() {\n-                                0 => tail,\n-                                _ => make::block_expr(stmts.into_iter(), Some(tail))\n+                        let left_pat =\n+                            make::tuple_struct_pat(gen_variant_path(&variant)?, l_pat_fields);\n+                        let right_pat =\n+                            make::tuple_struct_pat(gen_variant_path(&variant)?, r_pat_fields);\n+                        let tuple_pat = make::tuple_pat(vec![left_pat.into(), right_pat.into()]);\n+\n+                        let len = l_fields.len();\n+                        if len != 0 {\n+                            let mut expr = gen_partial_cmp_call2(l_fields, r_fields);\n+                            if len >= 2 {\n+                                expr = make::block_expr(None, Some(expr))\n                                     .indent(ast::edit::IndentLevel(1))\n-                                    .into(),\n-                            };\n-                            arms.push(make::match_arm(Some(tuple.into()), None, expr.into()));\n+                                    .into();\n+                            }\n+                            arms.push(make::match_arm(Some(tuple_pat.into()), None, expr));\n                         }\n                     }\n                     None => continue,\n@@ -735,41 +724,35 @@ fn gen_partial_ord(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n         }\n         ast::Adt::Struct(strukt) => match strukt.field_list() {\n             Some(ast::FieldList::RecordFieldList(field_list)) => {\n-                let mut exprs = vec![];\n+                let mut l_fields = vec![];\n+                let mut r_fields = vec![];\n                 for field in field_list.fields() {\n                     let lhs = make::expr_path(make::ext::ident_path(\"self\"));\n                     let lhs = make::expr_field(lhs, &field.name()?.to_string());\n                     let rhs = make::expr_path(make::ext::ident_path(\"other\"));\n                     let rhs = make::expr_field(rhs, &field.name()?.to_string());\n-                    let ord = gen_partial_cmp_call(lhs, rhs);\n-                    exprs.push(ord);\n+                    l_fields.push(lhs);\n+                    r_fields.push(rhs);\n                 }\n \n-                let tail = exprs.pop();\n-                let stmts = exprs\n-                    .into_iter()\n-                    .map(gen_partial_eq_match)\n-                    .collect::<Option<Vec<ast::Stmt>>>()?;\n-                make::block_expr(stmts.into_iter(), tail).indent(ast::edit::IndentLevel(1))\n+                let expr = gen_partial_cmp_call2(l_fields, r_fields);\n+                make::block_expr(None, Some(expr)).indent(ast::edit::IndentLevel(1))\n             }\n \n             Some(ast::FieldList::TupleFieldList(field_list)) => {\n-                let mut exprs = vec![];\n+                let mut l_fields = vec![];\n+                let mut r_fields = vec![];\n                 for (i, _) in field_list.fields().enumerate() {\n                     let idx = format!(\"{}\", i);\n                     let lhs = make::expr_path(make::ext::ident_path(\"self\"));\n                     let lhs = make::expr_field(lhs, &idx);\n                     let rhs = make::expr_path(make::ext::ident_path(\"other\"));\n                     let rhs = make::expr_field(rhs, &idx);\n-                    let ord = gen_partial_cmp_call(lhs, rhs);\n-                    exprs.push(ord);\n+                    l_fields.push(lhs);\n+                    r_fields.push(rhs);\n                 }\n-                let tail = exprs.pop();\n-                let stmts = exprs\n-                    .into_iter()\n-                    .map(gen_partial_eq_match)\n-                    .collect::<Option<Vec<ast::Stmt>>>()?;\n-                make::block_expr(stmts.into_iter(), tail).indent(ast::edit::IndentLevel(1))\n+                let expr = gen_partial_cmp_call2(l_fields, r_fields);\n+                make::block_expr(None, Some(expr)).indent(ast::edit::IndentLevel(1))\n             }\n \n             // No fields in the body means there's nothing to hash."}]}