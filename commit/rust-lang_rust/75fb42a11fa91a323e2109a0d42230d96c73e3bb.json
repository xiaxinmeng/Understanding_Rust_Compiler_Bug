{"sha": "75fb42a11fa91a323e2109a0d42230d96c73e3bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ZmI0MmExMWZhOTFhMzIzZTIxMDlhMGQ0MjIzMGQ5NmM3M2UzYmI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-07T14:01:12Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-15T16:50:44Z"}, "message": "or-patterns: use `top_pats_hack` to make things compile.", "tree": {"sha": "3dda2830e24ab4addb146a09f3e6456ebd7a02b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3dda2830e24ab4addb146a09f3e6456ebd7a02b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75fb42a11fa91a323e2109a0d42230d96c73e3bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75fb42a11fa91a323e2109a0d42230d96c73e3bb", "html_url": "https://github.com/rust-lang/rust/commit/75fb42a11fa91a323e2109a0d42230d96c73e3bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75fb42a11fa91a323e2109a0d42230d96c73e3bb/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6579d136b13d6b8a3ad14afe688a8c368a538b57", "url": "https://api.github.com/repos/rust-lang/rust/commits/6579d136b13d6b8a3ad14afe688a8c368a538b57", "html_url": "https://github.com/rust-lang/rust/commit/6579d136b13d6b8a3ad14afe688a8c368a538b57"}], "stats": {"total": 43, "additions": 21, "deletions": 22}, "files": [{"sha": "91fc004b893bae3b421219803829ca6d30f7e273", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75fb42a11fa91a323e2109a0d42230d96c73e3bb/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75fb42a11fa91a323e2109a0d42230d96c73e3bb/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=75fb42a11fa91a323e2109a0d42230d96c73e3bb", "patch": "@@ -1103,7 +1103,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n \n pub fn walk_arm<'v, V: Visitor<'v>>(visitor: &mut V, arm: &'v Arm) {\n     visitor.visit_id(arm.hir_id);\n-    walk_list!(visitor, visit_pat, &arm.pats);\n+    visitor.visit_pat(&arm.pat);\n     if let Some(ref g) = arm.guard {\n         match g {\n             Guard::If(ref e) => visitor.visit_expr(e),"}, {"sha": "3d82f37e1a9c381797c8ef740341e09562b0ab84", "filename": "src/librustc/hir/pat_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75fb42a11fa91a323e2109a0d42230d96c73e3bb/src%2Flibrustc%2Fhir%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75fb42a11fa91a323e2109a0d42230d96c73e3bb/src%2Flibrustc%2Fhir%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fpat_util.rs?ref=75fb42a11fa91a323e2109a0d42230d96c73e3bb", "patch": "@@ -170,7 +170,7 @@ impl hir::Arm {\n         // for #42640 (default match binding modes).\n         //\n         // See #44848.\n-        self.pats.iter()\n+        self.top_pats_hack().iter()\n                  .filter_map(|pat| pat.contains_explicit_ref_binding())\n                  .max_by_key(|m| match *m {\n                     hir::MutMutable => 1,"}, {"sha": "666c1cc96f2f70b0d44bd0d9856dc2004dc6f1bb", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/75fb42a11fa91a323e2109a0d42230d96c73e3bb/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75fb42a11fa91a323e2109a0d42230d96c73e3bb/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=75fb42a11fa91a323e2109a0d42230d96c73e3bb", "patch": "@@ -259,8 +259,9 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n     }\n \n     fn visit_arm(&mut self, arm: &'tcx hir::Arm) {\n-        if arm.pats.len() == 1 {\n-            let variants = arm.pats[0].necessary_variants();\n+        let pats = arm.top_pats_hack();\n+        if pats.len() == 1 {\n+            let variants = pats[0].necessary_variants();\n \n             // Inside the body, ignore constructions of variants\n             // necessary for the pattern to match. Those construction sites"}, {"sha": "ef84c9bbad60dab0214fc20840e4b34b20f0ede4", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75fb42a11fa91a323e2109a0d42230d96c73e3bb/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75fb42a11fa91a323e2109a0d42230d96c73e3bb/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=75fb42a11fa91a323e2109a0d42230d96c73e3bb", "patch": "@@ -779,14 +779,14 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n \n     fn arm_move_mode(&mut self, discr_cmt: mc::cmt<'tcx>, arm: &hir::Arm) -> TrackMatchMode {\n         let mut mode = Unknown;\n-        for pat in &arm.pats {\n+        for pat in arm.top_pats_hack() {\n             self.determine_pat_move_mode(discr_cmt.clone(), &pat, &mut mode);\n         }\n         mode\n     }\n \n     fn walk_arm(&mut self, discr_cmt: mc::cmt<'tcx>, arm: &hir::Arm, mode: MatchMode) {\n-        for pat in &arm.pats {\n+        for pat in arm.top_pats_hack() {\n             self.walk_pat(discr_cmt.clone(), &pat, mode);\n         }\n "}, {"sha": "5e91c81dd4dedbe4e2c941ae207de2f18e601d33", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75fb42a11fa91a323e2109a0d42230d96c73e3bb/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75fb42a11fa91a323e2109a0d42230d96c73e3bb/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=75fb42a11fa91a323e2109a0d42230d96c73e3bb", "patch": "@@ -456,7 +456,7 @@ fn visit_local<'tcx>(ir: &mut IrMaps<'tcx>, local: &'tcx hir::Local) {\n }\n \n fn visit_arm<'tcx>(ir: &mut IrMaps<'tcx>, arm: &'tcx hir::Arm) {\n-    for pat in &arm.pats {\n+    for pat in arm.top_pats_hack() {\n         add_from_pat(ir, pat);\n     }\n     intravisit::walk_arm(ir, arm);\n@@ -1080,7 +1080,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                     // the same bindings, and we also consider the first pattern to be\n                     // the \"authoritative\" set of ids\n                     let arm_succ =\n-                        self.define_bindings_in_arm_pats(arm.pats.first().map(|p| &**p),\n+                        self.define_bindings_in_arm_pats(arm.top_pats_hack().first().map(|p| &**p),\n                                                          guard_succ);\n                     self.merge_from_succ(ln, arm_succ, first_merge);\n                     first_merge = false;\n@@ -1422,7 +1422,7 @@ fn check_arm<'a, 'tcx>(this: &mut Liveness<'a, 'tcx>, arm: &'tcx hir::Arm) {\n     // patterns so the suggestions to prefix with underscores will apply to those too.\n     let mut vars: BTreeMap<String, (LiveNode, Variable, HirId, Vec<Span>)> = Default::default();\n \n-    for pat in &arm.pats {\n+    for pat in arm.top_pats_hack() {\n         this.arm_pats_bindings(Some(&*pat), |this, ln, var, sp, id| {\n             let name = this.ir.variable_name(var);\n             vars.entry(name)"}, {"sha": "e2c5de648a2766f93b63e2716aae7244b5848481", "filename": "src/librustc_ast_borrowck/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75fb42a11fa91a323e2109a0d42230d96c73e3bb/src%2Flibrustc_ast_borrowck%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75fb42a11fa91a323e2109a0d42230d96c73e3bb/src%2Flibrustc_ast_borrowck%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_borrowck%2Fcfg%2Fconstruct.rs?ref=75fb42a11fa91a323e2109a0d42230d96c73e3bb", "patch": "@@ -390,7 +390,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n             // patterns and the guard (if there is one) in the arm.\n             let bindings_exit = self.add_dummy_node(&[]);\n \n-            for pat in &arm.pats {\n+            for pat in arm.top_pats_hack() {\n                 // Visit the pattern, coming from the discriminant exit\n                 let mut pat_exit = self.pat(&pat, discr_exit);\n "}, {"sha": "f3d699fa4f008f2f65bdee4cf4b967649f312e02", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75fb42a11fa91a323e2109a0d42230d96c73e3bb/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75fb42a11fa91a323e2109a0d42230d96c73e3bb/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=75fb42a11fa91a323e2109a0d42230d96c73e3bb", "patch": "@@ -862,7 +862,7 @@ impl ToBorrowKind for hir::Mutability {\n \n fn convert_arm<'a, 'tcx>(cx: &mut Cx<'a, 'tcx>, arm: &'tcx hir::Arm) -> Arm<'tcx> {\n     Arm {\n-        patterns: arm.pats.iter().map(|p| cx.pattern_from_hir(p)).collect(),\n+        patterns: arm.top_pats_hack().iter().map(|p| cx.pattern_from_hir(p)).collect(),\n         guard: match arm.guard {\n                 Some(hir::Guard::If(ref e)) => Some(Guard::If(e.to_ref())),\n                 _ => None,"}, {"sha": "c3542d4ab6c5fa8d701aec25e1281e71a8bc72be", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75fb42a11fa91a323e2109a0d42230d96c73e3bb/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75fb42a11fa91a323e2109a0d42230d96c73e3bb/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=75fb42a11fa91a323e2109a0d42230d96c73e3bb", "patch": "@@ -137,7 +137,7 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n     ) {\n         for arm in arms {\n             // First, check legality of move bindings.\n-            self.check_patterns(arm.guard.is_some(), &arm.pats);\n+            self.check_patterns(arm.guard.is_some(), &arm.top_pats_hack());\n \n             // Second, if there is a guard on each arm, make sure it isn't\n             // assigning or borrowing anything mutably.\n@@ -146,7 +146,7 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n             }\n \n             // Third, perform some lints.\n-            for pat in &arm.pats {\n+            for pat in arm.top_pats_hack() {\n                 check_for_bindings_named_same_as_variants(self, pat);\n             }\n         }\n@@ -156,7 +156,7 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n             let mut have_errors = false;\n \n             let inlined_arms : Vec<(Vec<_>, _)> = arms.iter().map(|arm| (\n-                arm.pats.iter().map(|pat| {\n+                arm.top_pats_hack().iter().map(|pat| {\n                     let mut patcx = PatternContext::new(self.tcx,\n                                                         self.param_env.and(self.identity_substs),\n                                                         self.tables);"}, {"sha": "7470f5b7a5f0f247b0f707b37872d57439dc90e6", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75fb42a11fa91a323e2109a0d42230d96c73e3bb/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75fb42a11fa91a323e2109a0d42230d96c73e3bb/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=75fb42a11fa91a323e2109a0d42230d96c73e3bb", "patch": "@@ -503,7 +503,7 @@ fn check_expr_kind<'a, 'tcx>(\n             // Compute the most demanding borrow from all the arms'\n             // patterns and set that on the discriminator.\n             let mut mut_borrow = false;\n-            for pat in hirvec_arm.iter().flat_map(|arm| &arm.pats) {\n+            for pat in hirvec_arm.iter().flat_map(|arm| arm.top_pats_hack()) {\n                 mut_borrow = v.remove_mut_rvalue_borrow(pat);\n             }\n             if mut_borrow {"}, {"sha": "7b971803db599c97a817f684ff61e875266ef9a0", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/75fb42a11fa91a323e2109a0d42230d96c73e3bb/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75fb42a11fa91a323e2109a0d42230d96c73e3bb/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=75fb42a11fa91a323e2109a0d42230d96c73e3bb", "patch": "@@ -58,11 +58,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // collection into `Vec`), so we get types for all bindings.\n         let all_arm_pats_diverge: Vec<_> = arms.iter().map(|arm| {\n             let mut all_pats_diverge = Diverges::WarnedAlways;\n-            for p in &arm.pats {\n-                self.diverges.set(Diverges::Maybe);\n-                self.check_pat_top(&p, discrim_ty, Some(discrim.span));\n-                all_pats_diverge &= self.diverges.get();\n-            }\n+            self.diverges.set(Diverges::Maybe);\n+            self.check_pat_top(&arm.pat, discrim_ty, Some(discrim.span));\n+            all_pats_diverge &= self.diverges.get();\n \n             // As discussed with @eddyb, this is for disabling unreachable_code\n             // warnings on patterns (they're now subsumed by unreachable_patterns"}, {"sha": "86ec477a6aae81eca392798a08709c0db7b37c5d", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75fb42a11fa91a323e2109a0d42230d96c73e3bb/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75fb42a11fa91a323e2109a0d42230d96c73e3bb/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=75fb42a11fa91a323e2109a0d42230d96c73e3bb", "patch": "@@ -488,7 +488,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RegionCtxt<'a, 'tcx> {\n \n     fn visit_arm(&mut self, arm: &'tcx hir::Arm) {\n         // see above\n-        for p in &arm.pats {\n+        for p in arm.top_pats_hack() {\n             self.constrain_bindings_in_pat(p);\n         }\n         intravisit::walk_arm(self, arm);\n@@ -1069,7 +1069,7 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n         let discr_cmt = Rc::new(ignore_err!(self.with_mc(|mc| mc.cat_expr(discr))));\n         debug!(\"discr_cmt={:?}\", discr_cmt);\n         for arm in arms {\n-            for root_pat in &arm.pats {\n+            for root_pat in arm.top_pats_hack() {\n                 self.link_pattern(discr_cmt.clone(), &root_pat);\n             }\n         }"}]}