{"sha": "f912d771badbe981d7caa89b754248eb141e14c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MTJkNzcxYmFkYmU5ODFkN2NhYTg5Yjc1NDI0OGViMTQxZTE0YzM=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-09-04T15:31:29Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-09-05T17:38:28Z"}, "message": "Make git commit info optional and per-package in channel manifests\n\nAt the moment it is always missing for Cargo and RLS.\nTheir respective build systems need to be modified to include\n`git-commit-hash` files in their \"dist\" tarballs.", "tree": {"sha": "47fbab37af9f46cedd378e3b72847a9ea8e5f1ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47fbab37af9f46cedd378e3b72847a9ea8e5f1ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f912d771badbe981d7caa89b754248eb141e14c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f912d771badbe981d7caa89b754248eb141e14c3", "html_url": "https://github.com/rust-lang/rust/commit/f912d771badbe981d7caa89b754248eb141e14c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f912d771badbe981d7caa89b754248eb141e14c3/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9412fd7371bfb8cc8e6b20240b84168a88ac9d21", "url": "https://api.github.com/repos/rust-lang/rust/commits/9412fd7371bfb8cc8e6b20240b84168a88ac9d21", "html_url": "https://github.com/rust-lang/rust/commit/9412fd7371bfb8cc8e6b20240b84168a88ac9d21"}], "stats": {"total": 43, "additions": 33, "deletions": 10}, "files": [{"sha": "0e91fa9c6022b446a4b560fa4ea38ff8a9ea3a96", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 33, "deletions": 10, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f912d771badbe981d7caa89b754248eb141e14c3/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f912d771badbe981d7caa89b754248eb141e14c3/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=f912d771badbe981d7caa89b754248eb141e14c3", "patch": "@@ -107,13 +107,13 @@ static MINGW: &'static [&'static str] = &[\n struct Manifest {\n     manifest_version: String,\n     date: String,\n-    git_commit_hash: String,\n     pkg: BTreeMap<String, Package>,\n }\n \n #[derive(Serialize)]\n struct Package {\n     version: String,\n+    git_commit_hash: Option<String>,\n     target: BTreeMap<String, Target>,\n }\n \n@@ -168,6 +168,9 @@ struct Builder {\n     rust_version: String,\n     cargo_version: String,\n     rls_version: String,\n+    rust_git_commit_hash: Option<String>,\n+    cargo_git_commit_hash: Option<String>,\n+    rls_git_commit_hash: Option<String>,\n }\n \n fn main() {\n@@ -195,6 +198,9 @@ fn main() {\n         rust_version: String::new(),\n         cargo_version: String::new(),\n         rls_version: String::new(),\n+        rust_git_commit_hash: None,\n+        cargo_git_commit_hash: None,\n+        rls_git_commit_hash: None,\n     }.build();\n }\n \n@@ -203,6 +209,9 @@ impl Builder {\n         self.rust_version = self.version(\"rust\", \"x86_64-unknown-linux-gnu\");\n         self.cargo_version = self.version(\"cargo\", \"x86_64-unknown-linux-gnu\");\n         self.rls_version = self.version(\"rls\", \"x86_64-unknown-linux-gnu\");\n+        self.rust_git_commit_hash = self.git_commit_hash(\"rust\", \"x86_64-unknown-linux-gnu\");\n+        self.cargo_git_commit_hash = self.git_commit_hash(\"cargo\", \"x86_64-unknown-linux-gnu\");\n+        self.rls_git_commit_hash = self.git_commit_hash(\"rls\", \"x86_64-unknown-linux-gnu\");\n \n         self.digest_and_sign();\n         let manifest = self.build_manifest();\n@@ -226,7 +235,6 @@ impl Builder {\n         let mut manifest = Manifest {\n             manifest_version: \"2\".to_string(),\n             date: self.date.to_string(),\n-            git_commit_hash: self.git_commit_hash(\"rust\", \"x86_64-unknown-linux-gnu\"),\n             pkg: BTreeMap::new(),\n         };\n \n@@ -246,6 +254,7 @@ impl Builder {\n \n         let mut pkg = Package {\n             version: self.cached_version(\"rust\").to_string(),\n+            git_commit_hash: self.cached_git_commit_hash(\"rust\").clone(),\n             target: BTreeMap::new(),\n         };\n         for host in HOSTS {\n@@ -339,6 +348,7 @@ impl Builder {\n \n         dst.insert(pkgname.to_string(), Package {\n             version: self.cached_version(pkgname).to_string(),\n+            git_commit_hash: self.cached_git_commit_hash(pkgname).clone(),\n             target: targets,\n         });\n     }\n@@ -372,6 +382,16 @@ impl Builder {\n         }\n     }\n \n+    fn cached_git_commit_hash(&self, component: &str) -> &Option<String> {\n+        if component == \"cargo\" {\n+            &self.cargo_git_commit_hash\n+        } else if component == \"rls\" || component == \"rls-preview\" {\n+            &self.rls_git_commit_hash\n+        } else {\n+            &self.rust_git_commit_hash\n+        }\n+    }\n+\n     fn version(&self, component: &str, target: &str) -> String {\n         let mut cmd = Command::new(\"tar\");\n         let filename = self.filename(component, target);\n@@ -389,21 +409,23 @@ impl Builder {\n         String::from_utf8_lossy(&output.stdout).trim().to_string()\n     }\n \n-    fn git_commit_hash(&self, component: &str, target: &str) -> String {\n+    fn git_commit_hash(&self, component: &str, target: &str) -> Option<String> {\n         let mut cmd = Command::new(\"tar\");\n         let filename = self.filename(component, target);\n         cmd.arg(\"xf\")\n            .arg(self.input.join(&filename))\n            .arg(format!(\"{}/git-commit-hash\", filename.replace(\".tar.gz\", \"\")))\n            .arg(\"-O\");\n         let output = t!(cmd.output());\n-        if !output.status.success() {\n-            panic!(\"failed to learn git commit hash:\\n\\n{:?}\\n\\n{}\\n\\n{}\",\n-                   cmd,\n-                   String::from_utf8_lossy(&output.stdout),\n-                   String::from_utf8_lossy(&output.stderr));\n+        if output.status.success() {\n+            Some(String::from_utf8_lossy(&output.stdout).trim().to_string())\n+        } else {\n+            // This is always called after `.version()`.\n+            // So if that didn\u2019t fail but this does,\n+            // that\u2019s very probably because the tarball is valid\n+            // but does not contain a `git-commit-hash` file.\n+            None\n         }\n-        String::from_utf8_lossy(&output.stdout).trim().to_string()\n     }\n \n     fn hash(&self, path: &Path) -> String {\n@@ -442,7 +464,8 @@ impl Builder {\n     fn write_channel_files(&self, channel_name: &str, manifest: &Manifest) {\n         self.write(&toml::to_string(&manifest).unwrap(), channel_name, \".toml\");\n         self.write(&manifest.date, channel_name, \"-date.txt\");\n-        self.write(&manifest.git_commit_hash, channel_name, \"-git-commit-hash.txt\");\n+        self.write(manifest.pkg[\"rust\"].git_commit_hash.as_ref().unwrap(),\n+                   channel_name, \"-git-commit-hash.txt\");\n     }\n \n     fn write(&self, contents: &str, channel_name: &str, suffix: &str) {"}]}