{"sha": "402a9c9f5e143baaf37ef8b68d84edaadda253dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwMmE5YzlmNWUxNDNiYWFmMzdlZjhiNjhkODRlZGFhZGRhMjUzZGQ=", "commit": {"author": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2020-12-02T23:16:12Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-08-16T03:55:27Z"}, "message": "Uplift the `invalid_atomic_ordering` lint from clippy to rustc\n\n- Deprecate clippy::invalid_atomic_ordering\n- Use rustc_diagnostic_item for the orderings in the invalid_atomic_ordering lint\n- Reduce code duplication\n- Give up on making enum variants diagnostic items and just look for\n`Ordering` instead\n\n  I ran into tons of trouble with this because apparently the change to\n  store HIR attrs in a side table also gave the DefIds of the\n  constructor instead of the variant itself. So I had to change\n  `matches_ordering` to also check the grandparent of the defid as well.\n\n- Rename `atomic_ordering_x` symbols to just the name of the variant\n- Fix typos in checks - there were a few places that said \"may not be\n  Release\" in the diagnostic but actually checked for SeqCst in the lint.\n- Make constant items const\n- Use fewer diagnostic items\n- Only look at arguments after making sure the method matches\n\n  This prevents an ICE when there aren't enough arguments.\n\n- Ignore trait methods\n- Only check Ctors instead of going through `qpath_res`\n\n  The functions take values, so this couldn't ever be anything else.\n\n- Add if_chain to allowed dependencies\n- Fix grammar\n- Remove unnecessary allow", "tree": {"sha": "4da3f28014e6b29e48b130685fd0641babd80f25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4da3f28014e6b29e48b130685fd0641babd80f25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/402a9c9f5e143baaf37ef8b68d84edaadda253dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/402a9c9f5e143baaf37ef8b68d84edaadda253dd", "html_url": "https://github.com/rust-lang/rust/commit/402a9c9f5e143baaf37ef8b68d84edaadda253dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/402a9c9f5e143baaf37ef8b68d84edaadda253dd/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7069a8c2b78c5d23205de1cabb4c2a65229dbd8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7069a8c2b78c5d23205de1cabb4c2a65229dbd8f", "html_url": "https://github.com/rust-lang/rust/commit/7069a8c2b78c5d23205de1cabb4c2a65229dbd8f"}], "stats": {"total": 1074, "additions": 637, "deletions": 437}, "files": [{"sha": "2d66d7d4b217e47ebdc604caa35de7fd791b02f7", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/402a9c9f5e143baaf37ef8b68d84edaadda253dd/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/402a9c9f5e143baaf37ef8b68d84edaadda253dd/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=402a9c9f5e143baaf37ef8b68d84edaadda253dd", "patch": "@@ -3923,6 +3923,7 @@ dependencies = [\n name = \"rustc_lint\"\n version = \"0.0.0\"\n dependencies = [\n+ \"if_chain\",\n  \"rustc_ast\",\n  \"rustc_ast_pretty\",\n  \"rustc_attr\","}, {"sha": "58988b5ecd041327281f31edacd2295176ea5baa", "filename": "compiler/rustc_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/402a9c9f5e143baaf37ef8b68d84edaadda253dd/compiler%2Frustc_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/402a9c9f5e143baaf37ef8b68d84edaadda253dd/compiler%2Frustc_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2FCargo.toml?ref=402a9c9f5e143baaf37ef8b68d84edaadda253dd", "patch": "@@ -5,6 +5,7 @@ version = \"0.0.0\"\n edition = \"2018\"\n \n [dependencies]\n+if_chain = \"1.0\"\n tracing = \"0.1\"\n unicode-security = \"0.0.5\"\n rustc_middle = { path = \"../rustc_middle\" }"}, {"sha": "79f850a781bd8c26b1a03bc19292256a5c41b1cb", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/402a9c9f5e143baaf37ef8b68d84edaadda253dd/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/402a9c9f5e143baaf37ef8b68d84edaadda253dd/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=402a9c9f5e143baaf37ef8b68d84edaadda253dd", "patch": "@@ -170,6 +170,7 @@ macro_rules! late_lint_passes {\n                 TemporaryCStringAsPtr: TemporaryCStringAsPtr,\n                 NonPanicFmt: NonPanicFmt,\n                 NoopMethodCall: NoopMethodCall,\n+                InvalidAtomicOrdering: InvalidAtomicOrdering,\n             ]\n         );\n     };"}, {"sha": "c9e4fffa50d116e60b2d80e5ed86d8724c07f84a", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 236, "deletions": 3, "changes": 239, "blob_url": "https://github.com/rust-lang/rust/blob/402a9c9f5e143baaf37ef8b68d84edaadda253dd/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/402a9c9f5e143baaf37ef8b68d84edaadda253dd/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=402a9c9f5e143baaf37ef8b68d84edaadda253dd", "patch": "@@ -4,17 +4,19 @@ use rustc_attr as attr;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_hir::{is_range_literal, ExprKind, Node};\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::{is_range_literal, Expr, ExprKind, Node};\n use rustc_middle::ty::layout::{IntegerExt, SizeSkeleton};\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{self, AdtKind, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, AdtKind, DefIdTree, Ty, TyCtxt, TypeFoldable};\n use rustc_span::source_map;\n use rustc_span::symbol::sym;\n-use rustc_span::{Span, DUMMY_SP};\n+use rustc_span::{Span, Symbol, DUMMY_SP};\n use rustc_target::abi::Abi;\n use rustc_target::abi::{Integer, LayoutOf, TagEncoding, Variants};\n use rustc_target::spec::abi::Abi as SpecAbi;\n \n+use if_chain::if_chain;\n use std::cmp;\n use std::iter;\n use std::ops::ControlFlow;\n@@ -1379,3 +1381,234 @@ impl<'tcx> LateLintPass<'tcx> for VariantSizeDifferences {\n         }\n     }\n }\n+\n+declare_lint! {\n+    /// The `invalid_atomic_ordering` lint detects passing an `Ordering`\n+    /// to an atomic operation that does not support that ordering.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// # use core::sync::atomic::{AtomicU8, Ordering};\n+    /// let atom = AtomicU8::new(0);\n+    /// let value = atom.load(Ordering::Release);\n+    /// # let _ = value;\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Some atomic operations are only supported for a subset of the\n+    /// `atomic::Ordering` variants. Passing an unsupported variant will cause\n+    /// an unconditional panic at runtime, which is detected by this lint.\n+    ///\n+    /// This lint will trigger in the following cases: (where `AtomicType` is an\n+    /// atomic type from `core::sync::atomic`, such as `AtomicBool`,\n+    /// `AtomicPtr`, `AtomicUsize`, or any of the other integer atomics).\n+    ///\n+    /// - Passing `Ordering::Acquire` or `Ordering::AcqRel` to\n+    ///   `AtomicType::store`.\n+    ///\n+    /// - Passing `Ordering::Release` or `Ordering::AcqRel` to\n+    ///   `AtomicType::load`.\n+    ///\n+    /// - Passing `Ordering::Relaxed` to `core::sync::atomic::fence` or\n+    ///   `core::sync::atomic::compiler_fence`.\n+    ///\n+    /// - Passing `Ordering::Release` or `Ordering::AcqRel` as the failure\n+    ///   ordering for any of `AtomicType::compare_exchange`,\n+    ///   `AtomicType::compare_exchange_weak`, or `AtomicType::fetch_update`.\n+    ///\n+    /// - Passing in a pair of orderings to `AtomicType::compare_exchange`,\n+    ///   `AtomicType::compare_exchange_weak`, or `AtomicType::fetch_update`\n+    ///   where the failure ordering is stronger than the success ordering.\n+    INVALID_ATOMIC_ORDERING,\n+    Deny,\n+    \"usage of invalid atomic ordering in atomic operations and memory fences\"\n+}\n+\n+declare_lint_pass!(InvalidAtomicOrdering => [INVALID_ATOMIC_ORDERING]);\n+\n+impl InvalidAtomicOrdering {\n+    fn inherent_atomic_method_call<'hir>(\n+        cx: &LateContext<'_>,\n+        expr: &Expr<'hir>,\n+    ) -> Option<(Symbol, &'hir [Expr<'hir>])> {\n+        const ATOMIC_TYPES: &[Symbol] = &[\n+            sym::AtomicBool,\n+            sym::AtomicPtr,\n+            sym::AtomicUsize,\n+            sym::AtomicU8,\n+            sym::AtomicU16,\n+            sym::AtomicU32,\n+            sym::AtomicU64,\n+            sym::AtomicU128,\n+            sym::AtomicIsize,\n+            sym::AtomicI8,\n+            sym::AtomicI16,\n+            sym::AtomicI32,\n+            sym::AtomicI64,\n+            sym::AtomicI128,\n+        ];\n+        if_chain! {\n+            if let ExprKind::MethodCall(ref method_path, _, args, _) = &expr.kind;\n+            if let Some(m_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n+            if let Some(impl_did) = cx.tcx.impl_of_method(m_def_id);\n+            if let Some(adt) = cx.tcx.type_of(impl_did).ty_adt_def();\n+            // skip extension traits, only lint functions from the standard library\n+            if cx.tcx.trait_id_of_impl(impl_did).is_none();\n+\n+            if let Some(parent) = cx.tcx.parent(adt.did);\n+            if cx.tcx.is_diagnostic_item(sym::atomic_mod, parent);\n+            if ATOMIC_TYPES.contains(&cx.tcx.item_name(adt.did));\n+            then {\n+                return Some((method_path.ident.name, args));\n+            }\n+        }\n+        None\n+    }\n+\n+    fn matches_ordering(cx: &LateContext<'_>, did: DefId, orderings: &[Symbol]) -> bool {\n+        let tcx = cx.tcx;\n+        let atomic_ordering = tcx.get_diagnostic_item(sym::Ordering);\n+        orderings.iter().any(|ordering| {\n+            tcx.item_name(did) == *ordering && {\n+                let parent = tcx.parent(did);\n+                parent == atomic_ordering\n+                    // needed in case this is a ctor, not a variant\n+                    || parent.map_or(false, |parent| tcx.parent(parent) == atomic_ordering)\n+            }\n+        })\n+    }\n+\n+    fn opt_ordering_defid(cx: &LateContext<'_>, ord_arg: &Expr<'_>) -> Option<DefId> {\n+        if let ExprKind::Path(ref ord_qpath) = ord_arg.kind {\n+            cx.qpath_res(ord_qpath, ord_arg.hir_id).opt_def_id()\n+        } else {\n+            None\n+        }\n+    }\n+\n+    fn check_atomic_load_store(cx: &LateContext<'_>, expr: &Expr<'_>) {\n+        use rustc_hir::def::{DefKind, Res};\n+        use rustc_hir::QPath;\n+        if_chain! {\n+            if let Some((method, args)) = Self::inherent_atomic_method_call(cx, expr);\n+            if let Some((ordering_arg, invalid_ordering)) = match method {\n+                sym::load => Some((&args[1], sym::Release)),\n+                sym::store => Some((&args[2], sym::Acquire)),\n+                _ => None,\n+            };\n+\n+            if let ExprKind::Path(QPath::Resolved(_, path)) = ordering_arg.kind;\n+            if let Res::Def(DefKind::Ctor(..), ctor_id) = path.res;\n+            if Self::matches_ordering(cx, ctor_id, &[invalid_ordering, sym::AcqRel]);\n+            then {\n+                cx.struct_span_lint(INVALID_ATOMIC_ORDERING, ordering_arg.span, |diag| {\n+                    if method == sym::load {\n+                        diag.build(\"atomic loads cannot have `Release` or `AcqRel` ordering\")\n+                            .help(\"consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\")\n+                            .emit()\n+                    } else {\n+                        debug_assert_eq!(method, sym::store);\n+                        diag.build(\"atomic stores cannot have `Acquire` or `AcqRel` ordering\")\n+                            .help(\"consider using ordering modes `Release`, `SeqCst` or `Relaxed`\")\n+                            .emit();\n+                    }\n+                });\n+            }\n+        }\n+    }\n+\n+    fn check_memory_fence(cx: &LateContext<'_>, expr: &Expr<'_>) {\n+        if_chain! {\n+            if let ExprKind::Call(ref func, ref args) = expr.kind;\n+            if let ExprKind::Path(ref func_qpath) = func.kind;\n+            if let Some(def_id) = cx.qpath_res(func_qpath, func.hir_id).opt_def_id();\n+            if cx.tcx.is_diagnostic_item(sym::fence, def_id) ||\n+                cx.tcx.is_diagnostic_item(sym::compiler_fence, def_id);\n+            if let ExprKind::Path(ref ordering_qpath) = &args[0].kind;\n+            if let Some(ordering_def_id) = cx.qpath_res(ordering_qpath, args[0].hir_id).opt_def_id();\n+            if Self::matches_ordering(cx, ordering_def_id, &[sym::Relaxed]);\n+            then {\n+                cx.struct_span_lint(INVALID_ATOMIC_ORDERING, args[0].span, |diag| {\n+                    diag.build(\"memory fences cannot have `Relaxed` ordering\")\n+                        .help(\"consider using ordering modes `Acquire`, `Release`, `AcqRel` or `SeqCst`\")\n+                        .emit();\n+                });\n+            }\n+        }\n+    }\n+\n+    fn check_atomic_compare_exchange(cx: &LateContext<'_>, expr: &Expr<'_>) {\n+        if_chain! {\n+            if let Some((method, args)) = Self::inherent_atomic_method_call(cx, expr);\n+            if let Some((success_order_arg, failure_order_arg)) = match method {\n+                sym::fetch_update => Some((&args[1], &args[2])),\n+                sym::compare_exchange | sym::compare_exchange_weak => Some((&args[3], &args[4])),\n+                _ => None,\n+            };\n+\n+            if let Some(fail_ordering_def_id) = Self::opt_ordering_defid(cx, failure_order_arg);\n+            then {\n+                // Helper type holding on to some checking and error reporting data. Has\n+                // - (success ordering,\n+                // - list of failure orderings forbidden by the success order,\n+                // - suggestion message)\n+                type OrdLintInfo = (Symbol, &'static [Symbol], &'static str);\n+                const RELAXED: OrdLintInfo = (sym::Relaxed, &[sym::SeqCst, sym::Acquire], \"ordering mode `Relaxed`\");\n+                const ACQUIRE: OrdLintInfo = (sym::Acquire, &[sym::SeqCst], \"ordering modes `Acquire` or `Relaxed`\");\n+                const SEQ_CST: OrdLintInfo = (sym::SeqCst, &[], \"ordering modes `Acquire`, `SeqCst` or `Relaxed`\");\n+                const RELEASE: OrdLintInfo = (sym::Release, RELAXED.1, RELAXED.2);\n+                const ACQREL: OrdLintInfo = (sym::AcqRel, ACQUIRE.1, ACQUIRE.2);\n+                const SEARCH: [OrdLintInfo; 5] = [RELAXED, ACQUIRE, SEQ_CST, RELEASE, ACQREL];\n+\n+                let success_lint_info = Self::opt_ordering_defid(cx, success_order_arg)\n+                    .and_then(|success_ord_def_id| -> Option<OrdLintInfo> {\n+                        SEARCH\n+                            .iter()\n+                            .copied()\n+                            .find(|(ordering, ..)| {\n+                                Self::matches_ordering(cx, success_ord_def_id, &[*ordering])\n+                            })\n+                    });\n+                if Self::matches_ordering(cx, fail_ordering_def_id, &[sym::Release, sym::AcqRel]) {\n+                    // If we don't know the success order is, use what we'd suggest\n+                    // if it were maximally permissive.\n+                    let suggested = success_lint_info.unwrap_or(SEQ_CST).2;\n+                    cx.struct_span_lint(INVALID_ATOMIC_ORDERING, failure_order_arg.span, |diag| {\n+                        let msg = format!(\n+                            \"{}'s failure ordering may not be `Release` or `AcqRel`\",\n+                            method,\n+                        );\n+                        diag.build(&msg)\n+                            .help(&format!(\"consider using {} instead\", suggested))\n+                            .emit();\n+                    });\n+                } else if let Some((success_ord, bad_ords_given_success, suggested)) = success_lint_info {\n+                    if Self::matches_ordering(cx, fail_ordering_def_id, bad_ords_given_success) {\n+                        cx.struct_span_lint(INVALID_ATOMIC_ORDERING, failure_order_arg.span, |diag| {\n+                            let msg = format!(\n+                                \"{}'s failure ordering may not be stronger than the success ordering of `{}`\",\n+                                method,\n+                                success_ord,\n+                            );\n+                            diag.build(&msg)\n+                                .help(&format!(\"consider using {} instead\", suggested))\n+                                .emit();\n+                        });\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+impl<'tcx> LateLintPass<'tcx> for InvalidAtomicOrdering {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        Self::check_atomic_load_store(cx, expr);\n+        Self::check_memory_fence(cx, expr);\n+        Self::check_atomic_compare_exchange(cx, expr);\n+    }\n+}"}, {"sha": "3e458778a7f73c7836e5488ef542d512c3fa8333", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/402a9c9f5e143baaf37ef8b68d84edaadda253dd/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/402a9c9f5e143baaf37ef8b68d84edaadda253dd/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=402a9c9f5e143baaf37ef8b68d84edaadda253dd", "patch": "@@ -121,6 +121,8 @@ symbols! {\n     // There is currently no checking that all symbols are used; that would be\n     // nice to have.\n     Symbols {\n+        AcqRel,\n+        Acquire,\n         Alignment,\n         Any,\n         Arc,\n@@ -129,6 +131,20 @@ symbols! {\n         Arguments,\n         AsMut,\n         AsRef,\n+        AtomicBool,\n+        AtomicI128,\n+        AtomicI16,\n+        AtomicI32,\n+        AtomicI64,\n+        AtomicI8,\n+        AtomicIsize,\n+        AtomicPtr,\n+        AtomicU128,\n+        AtomicU16,\n+        AtomicU32,\n+        AtomicU64,\n+        AtomicU8,\n+        AtomicUsize,\n         BTreeEntry,\n         BTreeMap,\n         BTreeSet,\n@@ -215,12 +231,15 @@ symbols! {\n         Rc,\n         Ready,\n         Receiver,\n+        Relaxed,\n+        Release,\n         Result,\n         Return,\n         Right,\n         RustcDecodable,\n         RustcEncodable,\n         Send,\n+        SeqCst,\n         Some,\n         StructuralEq,\n         StructuralPartialEq,\n@@ -311,6 +330,8 @@ symbols! {\n         assume_init,\n         async_await,\n         async_closure,\n+        atomic,\n+        atomic_mod,\n         atomics,\n         att_syntax,\n         attr,\n@@ -390,8 +411,12 @@ symbols! {\n         coerce_unsized,\n         cold,\n         column,\n+        compare_and_swap,\n+        compare_exchange,\n+        compare_exchange_weak,\n         compile_error,\n         compiler_builtins,\n+        compiler_fence,\n         concat,\n         concat_idents,\n         conservative_impl_trait,\n@@ -575,6 +600,8 @@ symbols! {\n         fadd_fast,\n         fdiv_fast,\n         feature,\n+        fence,\n+        fetch_update,\n         ffi,\n         ffi_const,\n         ffi_pure,\n@@ -728,6 +755,7 @@ symbols! {\n         lint_reasons,\n         literal,\n         llvm_asm,\n+        load,\n         local,\n         local_inner_macros,\n         log10f32,\n@@ -1217,6 +1245,7 @@ symbols! {\n         stmt,\n         stmt_expr_attributes,\n         stop_after_dataflow,\n+        store,\n         str,\n         str_alloc,\n         string_type,"}, {"sha": "d908b6ecda352970979bae0cb3c342cbfaa5620e", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/402a9c9f5e143baaf37ef8b68d84edaadda253dd/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/402a9c9f5e143baaf37ef8b68d84edaadda253dd/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=402a9c9f5e143baaf37ef8b68d84edaadda253dd", "patch": "@@ -113,6 +113,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![cfg_attr(not(target_has_atomic_load_store = \"8\"), allow(dead_code))]\n #![cfg_attr(not(target_has_atomic_load_store = \"8\"), allow(unused_imports))]\n+#![rustc_diagnostic_item = \"atomic_mod\"]\n \n use self::Ordering::*;\n \n@@ -198,6 +199,7 @@ unsafe impl<T> Sync for AtomicPtr<T> {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]\n #[non_exhaustive]\n+#[rustc_diagnostic_item = \"Ordering\"]\n pub enum Ordering {\n     /// No ordering constraints, only atomic operations.\n     ///\n@@ -2664,6 +2666,7 @@ unsafe fn atomic_umin<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_diagnostic_item = \"fence\"]\n pub fn fence(order: Ordering) {\n     // SAFETY: using an atomic fence is safe.\n     unsafe {\n@@ -2745,6 +2748,7 @@ pub fn fence(order: Ordering) {\n /// [memory barriers]: https://www.kernel.org/doc/Documentation/memory-barriers.txt\n #[inline]\n #[stable(feature = \"compiler_fences\", since = \"1.21.0\")]\n+#[rustc_diagnostic_item = \"compiler_fence\"]\n pub fn compiler_fence(order: Ordering) {\n     // SAFETY: using an atomic fence is safe.\n     unsafe {"}, {"sha": "15ceb61957107fab913064533ff04739464c3491", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-bool.rs", "status": "renamed", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-bool.rs?ref=402a9c9f5e143baaf37ef8b68d84edaadda253dd", "patch": "@@ -1,5 +1,4 @@\n-#![warn(clippy::invalid_atomic_ordering)]\n-\n+// only-x86_64\n use std::sync::atomic::{AtomicBool, Ordering};\n \n fn main() {\n@@ -12,7 +11,9 @@ fn main() {\n \n     // Disallowed load ordering modes\n     let _ = x.load(Ordering::Release);\n+    //~^ ERROR atomic loads cannot have `Release` or `AcqRel` ordering\n     let _ = x.load(Ordering::AcqRel);\n+    //~^ ERROR atomic loads cannot have `Release` or `AcqRel` ordering\n \n     // Allowed store ordering modes\n     x.store(false, Ordering::Release);\n@@ -21,5 +22,7 @@ fn main() {\n \n     // Disallowed store ordering modes\n     x.store(false, Ordering::Acquire);\n+    //~^ ERROR atomic stores cannot have `Acquire` or `AcqRel` ordering\n     x.store(false, Ordering::AcqRel);\n+    //~^ ERROR atomic stores cannot have `Acquire` or `AcqRel` ordering\n }", "previous_filename": "src/tools/clippy/tests/ui/atomic_ordering_bool.rs"}, {"sha": "2a1847b9801acbac940ee3230d403b87d3a9ecff", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-bool.stderr", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-bool.stderr?ref=402a9c9f5e143baaf37ef8b68d84edaadda253dd", "patch": "@@ -1,30 +1,30 @@\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_bool.rs:14:20\n+error: atomic loads cannot have `Release` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-bool.rs:13:20\n    |\n LL |     let _ = x.load(Ordering::Release);\n    |                    ^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::invalid-atomic-ordering` implied by `-D warnings`\n+   = note: `#[deny(invalid_atomic_ordering)]` on by default\n    = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n \n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_bool.rs:15:20\n+error: atomic loads cannot have `Release` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-bool.rs:15:20\n    |\n LL |     let _ = x.load(Ordering::AcqRel);\n    |                    ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n \n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_bool.rs:23:20\n+error: atomic stores cannot have `Acquire` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-bool.rs:24:20\n    |\n LL |     x.store(false, Ordering::Acquire);\n    |                    ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n \n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_bool.rs:24:20\n+error: atomic stores cannot have `Acquire` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-bool.rs:26:20\n    |\n LL |     x.store(false, Ordering::AcqRel);\n    |                    ^^^^^^^^^^^^^^^^", "previous_filename": "src/tools/clippy/tests/ui/atomic_ordering_bool.stderr"}, {"sha": "c79c1daf7741013467c98336cea0e1caf016c7c3", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-exchange-weak.rs", "status": "renamed", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange-weak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange-weak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange-weak.rs?ref=402a9c9f5e143baaf37ef8b68d84edaadda253dd", "patch": "@@ -1,5 +1,4 @@\n-#![warn(clippy::invalid_atomic_ordering)]\n-\n+// only-x86_64\n use std::sync::atomic::{AtomicPtr, Ordering};\n \n fn main() {\n@@ -21,27 +20,43 @@ fn main() {\n \n     // AcqRel is always forbidden as a failure ordering\n     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Relaxed, Ordering::AcqRel);\n+    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Acquire, Ordering::AcqRel);\n+    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::AcqRel);\n+    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::AcqRel, Ordering::AcqRel);\n+    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::SeqCst, Ordering::AcqRel);\n+    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n \n     // Release is always forbidden as a failure ordering\n     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::Release);\n+    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Acquire, Ordering::Release);\n+    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Release, Ordering::Release);\n+    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::AcqRel, Ordering::Release);\n+    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::SeqCst, Ordering::Release);\n+    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n \n     // Release success order forbids failure order of Acquire or SeqCst\n     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::Acquire);\n+    //~^ ERROR compare_exchange_weak's failure ordering may not be stronger\n     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::SeqCst);\n+    //~^ ERROR compare_exchange_weak's failure ordering may not be stronger\n \n     // Relaxed success order also forbids failure order of Acquire or SeqCst\n     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::SeqCst);\n+    //~^ ERROR compare_exchange_weak's failure ordering may not be stronger\n     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::Acquire);\n+    //~^ ERROR compare_exchange_weak's failure ordering may not be stronger\n \n     // Acquire/AcqRel forbids failure order of SeqCst\n     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Acquire, Ordering::SeqCst);\n+    //~^ ERROR compare_exchange_weak's failure ordering may not be stronger\n     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::AcqRel, Ordering::SeqCst);\n+    //~^ ERROR compare_exchange_weak's failure ordering may not be stronger\n }", "previous_filename": "src/tools/clippy/tests/ui/atomic_ordering_exchange_weak.rs"}, {"sha": "13350ab0b9c02148efc156950eb5b10b9f2e64e3", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-exchange-weak.stderr", "status": "renamed", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange-weak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange-weak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange-weak.stderr?ref=402a9c9f5e143baaf37ef8b68d84edaadda253dd", "patch": "@@ -1,126 +1,126 @@\n error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange_weak.rs:23:67\n+  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:22:67\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Relaxed, Ordering::AcqRel);\n    |                                                                   ^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::invalid-atomic-ordering` implied by `-D warnings`\n+   = note: `#[deny(invalid_atomic_ordering)]` on by default\n    = help: consider using ordering mode `Relaxed` instead\n \n error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange_weak.rs:24:67\n+  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:24:67\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Acquire, Ordering::AcqRel);\n    |                                                                   ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire` or `Relaxed` instead\n \n error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange_weak.rs:25:67\n+  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:26:67\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::AcqRel);\n    |                                                                   ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering mode `Relaxed` instead\n \n error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange_weak.rs:26:66\n+  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:28:66\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::AcqRel, Ordering::AcqRel);\n    |                                                                  ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire` or `Relaxed` instead\n \n error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange_weak.rs:27:66\n+  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:30:66\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::SeqCst, Ordering::AcqRel);\n    |                                                                  ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed` instead\n \n error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange_weak.rs:30:67\n+  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:34:67\n    |\n LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::Release);\n    |                                                                   ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering mode `Relaxed` instead\n \n error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange_weak.rs:31:67\n+  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:36:67\n    |\n LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Acquire, Ordering::Release);\n    |                                                                   ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire` or `Relaxed` instead\n \n error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange_weak.rs:32:67\n+  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:38:67\n    |\n LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Release, Ordering::Release);\n    |                                                                   ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering mode `Relaxed` instead\n \n error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange_weak.rs:33:66\n+  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:40:66\n    |\n LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::AcqRel, Ordering::Release);\n    |                                                                  ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire` or `Relaxed` instead\n \n error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange_weak.rs:34:66\n+  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:42:66\n    |\n LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::SeqCst, Ordering::Release);\n    |                                                                  ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed` instead\n \n error: compare_exchange_weak's failure ordering may not be stronger than the success ordering of `Release`\n-  --> $DIR/atomic_ordering_exchange_weak.rs:37:67\n+  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:46:67\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::Acquire);\n    |                                                                   ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering mode `Relaxed` instead\n \n error: compare_exchange_weak's failure ordering may not be stronger than the success ordering of `Release`\n-  --> $DIR/atomic_ordering_exchange_weak.rs:38:67\n+  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:48:67\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::SeqCst);\n    |                                                                   ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering mode `Relaxed` instead\n \n error: compare_exchange_weak's failure ordering may not be stronger than the success ordering of `Relaxed`\n-  --> $DIR/atomic_ordering_exchange_weak.rs:41:67\n+  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:52:67\n    |\n LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::SeqCst);\n    |                                                                   ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering mode `Relaxed` instead\n \n error: compare_exchange_weak's failure ordering may not be stronger than the success ordering of `Relaxed`\n-  --> $DIR/atomic_ordering_exchange_weak.rs:42:67\n+  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:54:67\n    |\n LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::Acquire);\n    |                                                                   ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering mode `Relaxed` instead\n \n error: compare_exchange_weak's failure ordering may not be stronger than the success ordering of `Acquire`\n-  --> $DIR/atomic_ordering_exchange_weak.rs:45:67\n+  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:58:67\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Acquire, Ordering::SeqCst);\n    |                                                                   ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire` or `Relaxed` instead\n \n error: compare_exchange_weak's failure ordering may not be stronger than the success ordering of `AcqRel`\n-  --> $DIR/atomic_ordering_exchange_weak.rs:46:66\n+  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:60:66\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::AcqRel, Ordering::SeqCst);\n    |                                                                  ^^^^^^^^^^^^^^^^", "previous_filename": "src/tools/clippy/tests/ui/atomic_ordering_exchange_weak.stderr"}, {"sha": "8ef3a400cf04031d4ede36f1395d86f6f61bc835", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-exchange.rs", "status": "renamed", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange.rs?ref=402a9c9f5e143baaf37ef8b68d84edaadda253dd", "patch": "@@ -1,5 +1,4 @@\n-#![warn(clippy::invalid_atomic_ordering)]\n-\n+// only-x86_64\n use std::sync::atomic::{AtomicUsize, Ordering};\n \n fn main() {\n@@ -19,27 +18,43 @@ fn main() {\n \n     // AcqRel is always forbidden as a failure ordering\n     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::AcqRel);\n+    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::AcqRel);\n+    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::AcqRel);\n+    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::AcqRel);\n+    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::AcqRel);\n+    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n \n     // Release is always forbidden as a failure ordering\n     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::Release);\n+    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::Release);\n+    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::Release);\n+    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::Release);\n+    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::Release);\n+    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n \n     // Release success order forbids failure order of Acquire or SeqCst\n     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::Acquire);\n+    //~^ ERROR compare_exchange's failure ordering may not be stronger\n     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::SeqCst);\n+    //~^ ERROR compare_exchange's failure ordering may not be stronger\n \n     // Relaxed success order also forbids failure order of Acquire or SeqCst\n     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::SeqCst);\n+    //~^ ERROR compare_exchange's failure ordering may not be stronger\n     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::Acquire);\n+    //~^ ERROR compare_exchange's failure ordering may not be stronger\n \n     // Acquire/AcqRel forbids failure order of SeqCst\n     let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::SeqCst);\n+    //~^ ERROR compare_exchange's failure ordering may not be stronger\n     let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::SeqCst);\n+    //~^ ERROR compare_exchange's failure ordering may not be stronger\n }", "previous_filename": "src/tools/clippy/tests/ui/atomic_ordering_exchange.rs"}, {"sha": "daedfec743093cc9c6d99664f3a35f9cad7164b0", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-exchange.stderr", "status": "renamed", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange.stderr?ref=402a9c9f5e143baaf37ef8b68d84edaadda253dd", "patch": "@@ -1,126 +1,126 @@\n error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange.rs:21:57\n+  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:20:57\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::AcqRel);\n    |                                                         ^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::invalid-atomic-ordering` implied by `-D warnings`\n+   = note: `#[deny(invalid_atomic_ordering)]` on by default\n    = help: consider using ordering mode `Relaxed` instead\n \n error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange.rs:22:57\n+  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:22:57\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::AcqRel);\n    |                                                         ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire` or `Relaxed` instead\n \n error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange.rs:23:57\n+  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:24:57\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::AcqRel);\n    |                                                         ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering mode `Relaxed` instead\n \n error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange.rs:24:56\n+  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:26:56\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::AcqRel);\n    |                                                        ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire` or `Relaxed` instead\n \n error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange.rs:25:56\n+  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:28:56\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::AcqRel);\n    |                                                        ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed` instead\n \n error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange.rs:28:57\n+  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:32:57\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::Release);\n    |                                                         ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering mode `Relaxed` instead\n \n error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange.rs:29:57\n+  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:34:57\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::Release);\n    |                                                         ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire` or `Relaxed` instead\n \n error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange.rs:30:57\n+  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:36:57\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::Release);\n    |                                                         ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering mode `Relaxed` instead\n \n error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange.rs:31:56\n+  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:38:56\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::Release);\n    |                                                        ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire` or `Relaxed` instead\n \n error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_exchange.rs:32:56\n+  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:40:56\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::Release);\n    |                                                        ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed` instead\n \n error: compare_exchange's failure ordering may not be stronger than the success ordering of `Release`\n-  --> $DIR/atomic_ordering_exchange.rs:35:57\n+  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:44:57\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::Acquire);\n    |                                                         ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering mode `Relaxed` instead\n \n error: compare_exchange's failure ordering may not be stronger than the success ordering of `Release`\n-  --> $DIR/atomic_ordering_exchange.rs:36:57\n+  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:46:57\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::SeqCst);\n    |                                                         ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering mode `Relaxed` instead\n \n error: compare_exchange's failure ordering may not be stronger than the success ordering of `Relaxed`\n-  --> $DIR/atomic_ordering_exchange.rs:39:57\n+  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:50:57\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::SeqCst);\n    |                                                         ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering mode `Relaxed` instead\n \n error: compare_exchange's failure ordering may not be stronger than the success ordering of `Relaxed`\n-  --> $DIR/atomic_ordering_exchange.rs:40:57\n+  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:52:57\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::Acquire);\n    |                                                         ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering mode `Relaxed` instead\n \n error: compare_exchange's failure ordering may not be stronger than the success ordering of `Acquire`\n-  --> $DIR/atomic_ordering_exchange.rs:43:57\n+  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:56:57\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::SeqCst);\n    |                                                         ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire` or `Relaxed` instead\n \n error: compare_exchange's failure ordering may not be stronger than the success ordering of `AcqRel`\n-  --> $DIR/atomic_ordering_exchange.rs:44:56\n+  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:58:56\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::SeqCst);\n    |                                                        ^^^^^^^^^^^^^^^^", "previous_filename": "src/tools/clippy/tests/ui/atomic_ordering_exchange.stderr"}, {"sha": "4fb8605b45225473be9fab5e89bb532522af02ed", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-false-positive.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-false-positive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-false-positive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-false-positive.rs?ref=402a9c9f5e143baaf37ef8b68d84edaadda253dd", "patch": "@@ -0,0 +1,18 @@\n+// only-x86_64\n+// check-pass\n+use std::sync::atomic::{AtomicUsize, Ordering};\n+\n+trait Foo {\n+    fn store(self, ordering: Ordering);\n+}\n+\n+impl Foo for AtomicUsize {\n+    fn store(self, _ordering: Ordering) {\n+        AtomicUsize::store(&self, 4, Ordering::SeqCst);\n+    }\n+}\n+\n+fn main() {\n+    let x = AtomicUsize::new(3);\n+    x.store(Ordering::Acquire);\n+}"}, {"sha": "22034472c71d0e8f999756a77dd24c7af0eb278a", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-fence.rs", "status": "renamed", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fence.rs?ref=402a9c9f5e143baaf37ef8b68d84edaadda253dd", "patch": "@@ -1,20 +1,21 @@\n-#![warn(clippy::invalid_atomic_ordering)]\n-\n+// only-x86_64\n use std::sync::atomic::{compiler_fence, fence, Ordering};\n \n fn main() {\n-    // Allowed fence ordering modes\n+    // Allowed ordering modes\n     fence(Ordering::Acquire);\n     fence(Ordering::Release);\n     fence(Ordering::AcqRel);\n     fence(Ordering::SeqCst);\n \n-    // Disallowed fence ordering modes\n-    fence(Ordering::Relaxed);\n-\n     compiler_fence(Ordering::Acquire);\n     compiler_fence(Ordering::Release);\n     compiler_fence(Ordering::AcqRel);\n     compiler_fence(Ordering::SeqCst);\n+\n+    // Disallowed ordering modes\n+    fence(Ordering::Relaxed);\n+    //~^ ERROR memory fences cannot have `Relaxed` ordering\n     compiler_fence(Ordering::Relaxed);\n+    //~^ ERROR memory fences cannot have `Relaxed` ordering\n }", "previous_filename": "src/tools/clippy/tests/ui/atomic_ordering_fence.rs"}, {"sha": "e0741ffedd9177e8ed3a8c8db4bcbbdb286a4fcb", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-fence.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fence.stderr?ref=402a9c9f5e143baaf37ef8b68d84edaadda253dd", "patch": "@@ -1,14 +1,14 @@\n error: memory fences cannot have `Relaxed` ordering\n-  --> $DIR/atomic_ordering_fence.rs:13:11\n+  --> $DIR/lint-invalid-atomic-ordering-fence.rs:17:11\n    |\n LL |     fence(Ordering::Relaxed);\n    |           ^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::invalid-atomic-ordering` implied by `-D warnings`\n+   = note: `#[deny(invalid_atomic_ordering)]` on by default\n    = help: consider using ordering modes `Acquire`, `Release`, `AcqRel` or `SeqCst`\n \n error: memory fences cannot have `Relaxed` ordering\n-  --> $DIR/atomic_ordering_fence.rs:19:20\n+  --> $DIR/lint-invalid-atomic-ordering-fence.rs:19:20\n    |\n LL |     compiler_fence(Ordering::Relaxed);\n    |                    ^^^^^^^^^^^^^^^^^", "previous_filename": "src/tools/clippy/tests/ui/atomic_ordering_fence.stderr"}, {"sha": "938ca0359f845c9c54c23a0bff56e2562c7b9889", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-fetch-update.rs", "status": "renamed", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fetch-update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fetch-update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fetch-update.rs?ref=402a9c9f5e143baaf37ef8b68d84edaadda253dd", "patch": "@@ -1,5 +1,4 @@\n-#![warn(clippy::invalid_atomic_ordering)]\n-\n+// only-x86_64\n use std::sync::atomic::{AtomicIsize, Ordering};\n \n fn main() {\n@@ -19,27 +18,43 @@ fn main() {\n \n     // AcqRel is always forbidden as a failure ordering\n     let _ = x.fetch_update(Ordering::Relaxed, Ordering::AcqRel, |old| Some(old + 1));\n+    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n     let _ = x.fetch_update(Ordering::Acquire, Ordering::AcqRel, |old| Some(old + 1));\n+    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n     let _ = x.fetch_update(Ordering::Release, Ordering::AcqRel, |old| Some(old + 1));\n+    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n     let _ = x.fetch_update(Ordering::AcqRel, Ordering::AcqRel, |old| Some(old + 1));\n+    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n     let _ = x.fetch_update(Ordering::SeqCst, Ordering::AcqRel, |old| Some(old + 1));\n+    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n \n     // Release is always forbidden as a failure ordering\n     let _ = x.fetch_update(Ordering::Relaxed, Ordering::Release, |old| Some(old + 1));\n+    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n     let _ = x.fetch_update(Ordering::Acquire, Ordering::Release, |old| Some(old + 1));\n+    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n     let _ = x.fetch_update(Ordering::Release, Ordering::Release, |old| Some(old + 1));\n+    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n     let _ = x.fetch_update(Ordering::AcqRel, Ordering::Release, |old| Some(old + 1));\n+    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n     let _ = x.fetch_update(Ordering::SeqCst, Ordering::Release, |old| Some(old + 1));\n+    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n \n     // Release success order forbids failure order of Acquire or SeqCst\n     let _ = x.fetch_update(Ordering::Release, Ordering::Acquire, |old| Some(old + 1));\n+    //~^ ERROR fetch_update's failure ordering may not be stronger\n     let _ = x.fetch_update(Ordering::Release, Ordering::SeqCst, |old| Some(old + 1));\n+    //~^ ERROR fetch_update's failure ordering may not be stronger\n \n     // Relaxed success order also forbids failure order of Acquire or SeqCst\n     let _ = x.fetch_update(Ordering::Relaxed, Ordering::SeqCst, |old| Some(old + 1));\n+    //~^ ERROR fetch_update's failure ordering may not be stronger\n     let _ = x.fetch_update(Ordering::Relaxed, Ordering::Acquire, |old| Some(old + 1));\n+    //~^ ERROR fetch_update's failure ordering may not be stronger\n \n     // Acquire/AcqRel forbids failure order of SeqCst\n     let _ = x.fetch_update(Ordering::Acquire, Ordering::SeqCst, |old| Some(old + 1));\n+    //~^ ERROR fetch_update's failure ordering may not be stronger\n     let _ = x.fetch_update(Ordering::AcqRel, Ordering::SeqCst, |old| Some(old + 1));\n+    //~^ ERROR fetch_update's failure ordering may not be stronger\n }", "previous_filename": "src/tools/clippy/tests/ui/atomic_ordering_fetch_update.rs"}, {"sha": "dabc1da7e55c4318e6273b93d4e81c2d185a85e1", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-fetch-update.stderr", "status": "renamed", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fetch-update.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fetch-update.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fetch-update.stderr?ref=402a9c9f5e143baaf37ef8b68d84edaadda253dd", "patch": "@@ -1,126 +1,126 @@\n error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_fetch_update.rs:21:47\n+  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:20:47\n    |\n LL |     let _ = x.fetch_update(Ordering::Relaxed, Ordering::AcqRel, |old| Some(old + 1));\n    |                                               ^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::invalid-atomic-ordering` implied by `-D warnings`\n+   = note: `#[deny(invalid_atomic_ordering)]` on by default\n    = help: consider using ordering mode `Relaxed` instead\n \n error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_fetch_update.rs:22:47\n+  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:22:47\n    |\n LL |     let _ = x.fetch_update(Ordering::Acquire, Ordering::AcqRel, |old| Some(old + 1));\n    |                                               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire` or `Relaxed` instead\n \n error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_fetch_update.rs:23:47\n+  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:24:47\n    |\n LL |     let _ = x.fetch_update(Ordering::Release, Ordering::AcqRel, |old| Some(old + 1));\n    |                                               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering mode `Relaxed` instead\n \n error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_fetch_update.rs:24:46\n+  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:26:46\n    |\n LL |     let _ = x.fetch_update(Ordering::AcqRel, Ordering::AcqRel, |old| Some(old + 1));\n    |                                              ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire` or `Relaxed` instead\n \n error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_fetch_update.rs:25:46\n+  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:28:46\n    |\n LL |     let _ = x.fetch_update(Ordering::SeqCst, Ordering::AcqRel, |old| Some(old + 1));\n    |                                              ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed` instead\n \n error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_fetch_update.rs:28:47\n+  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:32:47\n    |\n LL |     let _ = x.fetch_update(Ordering::Relaxed, Ordering::Release, |old| Some(old + 1));\n    |                                               ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering mode `Relaxed` instead\n \n error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_fetch_update.rs:29:47\n+  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:34:47\n    |\n LL |     let _ = x.fetch_update(Ordering::Acquire, Ordering::Release, |old| Some(old + 1));\n    |                                               ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire` or `Relaxed` instead\n \n error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_fetch_update.rs:30:47\n+  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:36:47\n    |\n LL |     let _ = x.fetch_update(Ordering::Release, Ordering::Release, |old| Some(old + 1));\n    |                                               ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering mode `Relaxed` instead\n \n error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_fetch_update.rs:31:46\n+  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:38:46\n    |\n LL |     let _ = x.fetch_update(Ordering::AcqRel, Ordering::Release, |old| Some(old + 1));\n    |                                              ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire` or `Relaxed` instead\n \n error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n-  --> $DIR/atomic_ordering_fetch_update.rs:32:46\n+  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:40:46\n    |\n LL |     let _ = x.fetch_update(Ordering::SeqCst, Ordering::Release, |old| Some(old + 1));\n    |                                              ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed` instead\n \n error: fetch_update's failure ordering may not be stronger than the success ordering of `Release`\n-  --> $DIR/atomic_ordering_fetch_update.rs:35:47\n+  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:44:47\n    |\n LL |     let _ = x.fetch_update(Ordering::Release, Ordering::Acquire, |old| Some(old + 1));\n    |                                               ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering mode `Relaxed` instead\n \n error: fetch_update's failure ordering may not be stronger than the success ordering of `Release`\n-  --> $DIR/atomic_ordering_fetch_update.rs:36:47\n+  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:46:47\n    |\n LL |     let _ = x.fetch_update(Ordering::Release, Ordering::SeqCst, |old| Some(old + 1));\n    |                                               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering mode `Relaxed` instead\n \n error: fetch_update's failure ordering may not be stronger than the success ordering of `Relaxed`\n-  --> $DIR/atomic_ordering_fetch_update.rs:39:47\n+  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:50:47\n    |\n LL |     let _ = x.fetch_update(Ordering::Relaxed, Ordering::SeqCst, |old| Some(old + 1));\n    |                                               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering mode `Relaxed` instead\n \n error: fetch_update's failure ordering may not be stronger than the success ordering of `Relaxed`\n-  --> $DIR/atomic_ordering_fetch_update.rs:40:47\n+  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:52:47\n    |\n LL |     let _ = x.fetch_update(Ordering::Relaxed, Ordering::Acquire, |old| Some(old + 1));\n    |                                               ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering mode `Relaxed` instead\n \n error: fetch_update's failure ordering may not be stronger than the success ordering of `Acquire`\n-  --> $DIR/atomic_ordering_fetch_update.rs:43:47\n+  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:56:47\n    |\n LL |     let _ = x.fetch_update(Ordering::Acquire, Ordering::SeqCst, |old| Some(old + 1));\n    |                                               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire` or `Relaxed` instead\n \n error: fetch_update's failure ordering may not be stronger than the success ordering of `AcqRel`\n-  --> $DIR/atomic_ordering_fetch_update.rs:44:46\n+  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:58:46\n    |\n LL |     let _ = x.fetch_update(Ordering::AcqRel, Ordering::SeqCst, |old| Some(old + 1));\n    |                                              ^^^^^^^^^^^^^^^^", "previous_filename": "src/tools/clippy/tests/ui/atomic_ordering_fetch_update.stderr"}, {"sha": "462c9670f435f16dd1637f08e393dc72a99ed41d", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-int.rs", "status": "renamed", "additions": 58, "deletions": 14, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-int.rs?ref=402a9c9f5e143baaf37ef8b68d84edaadda253dd", "patch": "@@ -1,5 +1,5 @@\n-#![warn(clippy::invalid_atomic_ordering)]\n-\n+// FIXME: add support for `// only-atomic` to compiletest/header.rs\n+// only-x86_64\n use std::sync::atomic::{AtomicI16, AtomicI32, AtomicI64, AtomicI8, AtomicIsize, Ordering};\n \n fn main() {\n@@ -11,76 +11,120 @@ fn main() {\n     let _ = x.load(Ordering::SeqCst);\n     let _ = x.load(Ordering::Relaxed);\n \n-    // Disallowed load ordering modes\n-    let _ = x.load(Ordering::Release);\n-    let _ = x.load(Ordering::AcqRel);\n-\n     // Allowed store ordering modes\n     x.store(1, Ordering::Release);\n     x.store(1, Ordering::SeqCst);\n     x.store(1, Ordering::Relaxed);\n \n+    // Disallowed load ordering modes\n+    let _ = x.load(Ordering::Release);\n+    //~^ ERROR atomic loads cannot have `Release` or `AcqRel` ordering\n+    let _ = x.load(Ordering::AcqRel);\n+    //~^ ERROR atomic loads cannot have `Release` or `AcqRel` ordering\n+\n     // Disallowed store ordering modes\n     x.store(1, Ordering::Acquire);\n+    //~^ ERROR atomic stores cannot have `Acquire` or `AcqRel` ordering\n     x.store(1, Ordering::AcqRel);\n+    //~^ ERROR atomic stores cannot have `Acquire` or `AcqRel` ordering\n \n     // `AtomicI16` test cases\n     let x = AtomicI16::new(0);\n \n+    // Allowed load ordering modes\n     let _ = x.load(Ordering::Acquire);\n     let _ = x.load(Ordering::SeqCst);\n     let _ = x.load(Ordering::Relaxed);\n-    let _ = x.load(Ordering::Release);\n-    let _ = x.load(Ordering::AcqRel);\n \n+    // Allowed store ordering modes\n     x.store(1, Ordering::Release);\n     x.store(1, Ordering::SeqCst);\n     x.store(1, Ordering::Relaxed);\n+\n+    // Disallowed load ordering modes\n+    let _ = x.load(Ordering::Release);\n+    //~^ ERROR atomic loads cannot have `Release` or `AcqRel` ordering\n+    let _ = x.load(Ordering::AcqRel);\n+    //~^ ERROR atomic loads cannot have `Release` or `AcqRel` ordering\n+\n+    // Disallowed store ordering modes\n     x.store(1, Ordering::Acquire);\n+    //~^ ERROR atomic stores cannot have `Acquire` or `AcqRel` ordering\n     x.store(1, Ordering::AcqRel);\n+    //~^ ERROR atomic stores cannot have `Acquire` or `AcqRel` ordering\n \n     // `AtomicI32` test cases\n     let x = AtomicI32::new(0);\n \n+    // Allowed load ordering modes\n     let _ = x.load(Ordering::Acquire);\n     let _ = x.load(Ordering::SeqCst);\n     let _ = x.load(Ordering::Relaxed);\n-    let _ = x.load(Ordering::Release);\n-    let _ = x.load(Ordering::AcqRel);\n \n+    // Allowed store ordering modes\n     x.store(1, Ordering::Release);\n     x.store(1, Ordering::SeqCst);\n     x.store(1, Ordering::Relaxed);\n+\n+    // Disallowed load ordering modes\n+    let _ = x.load(Ordering::Release);\n+    //~^ ERROR atomic loads cannot have `Release` or `AcqRel` ordering\n+    let _ = x.load(Ordering::AcqRel);\n+    //~^ ERROR atomic loads cannot have `Release` or `AcqRel` ordering\n+\n+    // Disallowed store ordering modes\n     x.store(1, Ordering::Acquire);\n+    //~^ ERROR atomic stores cannot have `Acquire` or `AcqRel` ordering\n     x.store(1, Ordering::AcqRel);\n+    //~^ ERROR atomic stores cannot have `Acquire` or `AcqRel` ordering\n \n     // `AtomicI64` test cases\n     let x = AtomicI64::new(0);\n \n+    // Allowed load ordering modes\n     let _ = x.load(Ordering::Acquire);\n     let _ = x.load(Ordering::SeqCst);\n     let _ = x.load(Ordering::Relaxed);\n-    let _ = x.load(Ordering::Release);\n-    let _ = x.load(Ordering::AcqRel);\n \n+    // Allowed store ordering modes\n     x.store(1, Ordering::Release);\n     x.store(1, Ordering::SeqCst);\n     x.store(1, Ordering::Relaxed);\n+\n+    // Disallowed load ordering modes\n+    let _ = x.load(Ordering::Release);\n+    //~^ ERROR atomic loads cannot have `Release` or `AcqRel` ordering\n+    let _ = x.load(Ordering::AcqRel);\n+    //~^ ERROR atomic loads cannot have `Release` or `AcqRel` ordering\n+\n+    // Disallowed store ordering modes\n     x.store(1, Ordering::Acquire);\n+    //~^ ERROR atomic stores cannot have `Acquire` or `AcqRel` ordering\n     x.store(1, Ordering::AcqRel);\n+    //~^ ERROR atomic stores cannot have `Acquire` or `AcqRel` ordering\n \n     // `AtomicIsize` test cases\n     let x = AtomicIsize::new(0);\n \n+    // Allowed load ordering modes\n     let _ = x.load(Ordering::Acquire);\n     let _ = x.load(Ordering::SeqCst);\n     let _ = x.load(Ordering::Relaxed);\n-    let _ = x.load(Ordering::Release);\n-    let _ = x.load(Ordering::AcqRel);\n \n+    // Allowed store ordering modes\n     x.store(1, Ordering::Release);\n     x.store(1, Ordering::SeqCst);\n     x.store(1, Ordering::Relaxed);\n+\n+    // Disallowed load ordering modes\n+    let _ = x.load(Ordering::Release);\n+    //~^ ERROR atomic loads cannot have `Release` or `AcqRel` ordering\n+    let _ = x.load(Ordering::AcqRel);\n+    //~^ ERROR atomic loads cannot have `Release` or `AcqRel` ordering\n+\n+    // Disallowed store ordering modes\n     x.store(1, Ordering::Acquire);\n+    //~^ ERROR atomic stores cannot have `Acquire` or `AcqRel` ordering\n     x.store(1, Ordering::AcqRel);\n+    //~^ ERROR atomic stores cannot have `Acquire` or `AcqRel` ordering\n }", "previous_filename": "src/tools/clippy/tests/ui/atomic_ordering_int.rs"}, {"sha": "dfd9990455afded48e88e7ade94709d2db766761", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-int.stderr", "status": "renamed", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-int.stderr?ref=402a9c9f5e143baaf37ef8b68d84edaadda253dd", "patch": "@@ -1,158 +1,158 @@\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:15:20\n+error: atomic loads cannot have `Release` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-int.rs:20:20\n    |\n LL |     let _ = x.load(Ordering::Release);\n    |                    ^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::invalid-atomic-ordering` implied by `-D warnings`\n+   = note: `#[deny(invalid_atomic_ordering)]` on by default\n    = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n \n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:16:20\n+error: atomic loads cannot have `Release` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-int.rs:22:20\n    |\n LL |     let _ = x.load(Ordering::AcqRel);\n    |                    ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n \n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:24:16\n+error: atomic stores cannot have `Acquire` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-int.rs:26:16\n    |\n LL |     x.store(1, Ordering::Acquire);\n    |                ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n \n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:25:16\n+error: atomic stores cannot have `Acquire` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-int.rs:28:16\n    |\n LL |     x.store(1, Ordering::AcqRel);\n    |                ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n \n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:33:20\n+error: atomic loads cannot have `Release` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-int.rs:45:20\n    |\n LL |     let _ = x.load(Ordering::Release);\n    |                    ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n \n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:34:20\n+error: atomic loads cannot have `Release` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-int.rs:47:20\n    |\n LL |     let _ = x.load(Ordering::AcqRel);\n    |                    ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n \n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:39:16\n+error: atomic stores cannot have `Acquire` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-int.rs:51:16\n    |\n LL |     x.store(1, Ordering::Acquire);\n    |                ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n \n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:40:16\n+error: atomic stores cannot have `Acquire` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-int.rs:53:16\n    |\n LL |     x.store(1, Ordering::AcqRel);\n    |                ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n \n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:48:20\n+error: atomic loads cannot have `Release` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-int.rs:70:20\n    |\n LL |     let _ = x.load(Ordering::Release);\n    |                    ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n \n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:49:20\n+error: atomic loads cannot have `Release` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-int.rs:72:20\n    |\n LL |     let _ = x.load(Ordering::AcqRel);\n    |                    ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n \n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:54:16\n+error: atomic stores cannot have `Acquire` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-int.rs:76:16\n    |\n LL |     x.store(1, Ordering::Acquire);\n    |                ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n \n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:55:16\n+error: atomic stores cannot have `Acquire` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-int.rs:78:16\n    |\n LL |     x.store(1, Ordering::AcqRel);\n    |                ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n \n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:63:20\n+error: atomic loads cannot have `Release` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-int.rs:95:20\n    |\n LL |     let _ = x.load(Ordering::Release);\n    |                    ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n \n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:64:20\n+error: atomic loads cannot have `Release` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-int.rs:97:20\n    |\n LL |     let _ = x.load(Ordering::AcqRel);\n    |                    ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n \n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:69:16\n+error: atomic stores cannot have `Acquire` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-int.rs:101:16\n    |\n LL |     x.store(1, Ordering::Acquire);\n    |                ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n \n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:70:16\n+error: atomic stores cannot have `Acquire` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-int.rs:103:16\n    |\n LL |     x.store(1, Ordering::AcqRel);\n    |                ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n \n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:78:20\n+error: atomic loads cannot have `Release` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-int.rs:120:20\n    |\n LL |     let _ = x.load(Ordering::Release);\n    |                    ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n \n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:79:20\n+error: atomic loads cannot have `Release` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-int.rs:122:20\n    |\n LL |     let _ = x.load(Ordering::AcqRel);\n    |                    ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n \n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:84:16\n+error: atomic stores cannot have `Acquire` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-int.rs:126:16\n    |\n LL |     x.store(1, Ordering::Acquire);\n    |                ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n \n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_int.rs:85:16\n+error: atomic stores cannot have `Acquire` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-int.rs:128:16\n    |\n LL |     x.store(1, Ordering::AcqRel);\n    |                ^^^^^^^^^^^^^^^^", "previous_filename": "src/tools/clippy/tests/ui/atomic_ordering_int.stderr"}, {"sha": "984f7edebd1df1f9d1454f4de82b961a3d2e1c79", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-ptr.rs", "status": "renamed", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-ptr.rs?ref=402a9c9f5e143baaf37ef8b68d84edaadda253dd", "patch": "@@ -1,5 +1,4 @@\n-#![warn(clippy::invalid_atomic_ordering)]\n-\n+// only-x86_64\n use std::sync::atomic::{AtomicPtr, Ordering};\n \n fn main() {\n@@ -14,7 +13,9 @@ fn main() {\n \n     // Disallowed load ordering modes\n     let _ = x.load(Ordering::Release);\n+    //~^ ERROR atomic loads cannot have `Release` or `AcqRel` ordering\n     let _ = x.load(Ordering::AcqRel);\n+    //~^ ERROR atomic loads cannot have `Release` or `AcqRel` ordering\n \n     // Allowed store ordering modes\n     x.store(other_ptr, Ordering::Release);\n@@ -23,5 +24,7 @@ fn main() {\n \n     // Disallowed store ordering modes\n     x.store(other_ptr, Ordering::Acquire);\n+    //~^ ERROR atomic stores cannot have `Acquire` or `AcqRel` ordering\n     x.store(other_ptr, Ordering::AcqRel);\n+    //~^ ERROR atomic stores cannot have `Acquire` or `AcqRel` ordering\n }", "previous_filename": "src/tools/clippy/tests/ui/atomic_ordering_ptr.rs"}, {"sha": "f00cb8e40826995dc85bfa1ba01182c779220e1d", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-ptr.stderr", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-ptr.stderr?ref=402a9c9f5e143baaf37ef8b68d84edaadda253dd", "patch": "@@ -1,30 +1,30 @@\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_ptr.rs:16:20\n+error: atomic loads cannot have `Release` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-ptr.rs:15:20\n    |\n LL |     let _ = x.load(Ordering::Release);\n    |                    ^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::invalid-atomic-ordering` implied by `-D warnings`\n+   = note: `#[deny(invalid_atomic_ordering)]` on by default\n    = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n \n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_ptr.rs:17:20\n+error: atomic loads cannot have `Release` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-ptr.rs:17:20\n    |\n LL |     let _ = x.load(Ordering::AcqRel);\n    |                    ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n \n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_ptr.rs:25:24\n+error: atomic stores cannot have `Acquire` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-ptr.rs:26:24\n    |\n LL |     x.store(other_ptr, Ordering::Acquire);\n    |                        ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n \n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_ptr.rs:26:24\n+error: atomic stores cannot have `Acquire` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-ptr.rs:28:24\n    |\n LL |     x.store(other_ptr, Ordering::AcqRel);\n    |                        ^^^^^^^^^^^^^^^^", "previous_filename": "src/tools/clippy/tests/ui/atomic_ordering_ptr.stderr"}, {"sha": "80ec3b9ee345c8985b7c75ab934a90678469ce7a", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-uint.rs", "status": "renamed", "additions": 57, "deletions": 14, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-uint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-uint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-uint.rs?ref=402a9c9f5e143baaf37ef8b68d84edaadda253dd", "patch": "@@ -1,5 +1,4 @@\n-#![warn(clippy::invalid_atomic_ordering)]\n-\n+// only-x86_64\n use std::sync::atomic::{AtomicU16, AtomicU32, AtomicU64, AtomicU8, AtomicUsize, Ordering};\n \n fn main() {\n@@ -11,76 +10,120 @@ fn main() {\n     let _ = x.load(Ordering::SeqCst);\n     let _ = x.load(Ordering::Relaxed);\n \n-    // Disallowed load ordering modes\n-    let _ = x.load(Ordering::Release);\n-    let _ = x.load(Ordering::AcqRel);\n-\n     // Allowed store ordering modes\n     x.store(1, Ordering::Release);\n     x.store(1, Ordering::SeqCst);\n     x.store(1, Ordering::Relaxed);\n \n+    // Disallowed load ordering modes\n+    let _ = x.load(Ordering::Release);\n+    //~^ ERROR atomic loads cannot have `Release` or `AcqRel` ordering\n+    let _ = x.load(Ordering::AcqRel);\n+    //~^ ERROR atomic loads cannot have `Release` or `AcqRel` ordering\n+\n     // Disallowed store ordering modes\n     x.store(1, Ordering::Acquire);\n+    //~^ ERROR atomic stores cannot have `Acquire` or `AcqRel` ordering\n     x.store(1, Ordering::AcqRel);\n+    //~^ ERROR atomic stores cannot have `Acquire` or `AcqRel` ordering\n \n     // `AtomicU16` test cases\n     let x = AtomicU16::new(0);\n \n+    // Allowed load ordering modes\n     let _ = x.load(Ordering::Acquire);\n     let _ = x.load(Ordering::SeqCst);\n     let _ = x.load(Ordering::Relaxed);\n-    let _ = x.load(Ordering::Release);\n-    let _ = x.load(Ordering::AcqRel);\n \n+    // Allowed store ordering modes\n     x.store(1, Ordering::Release);\n     x.store(1, Ordering::SeqCst);\n     x.store(1, Ordering::Relaxed);\n+\n+    // Disallowed load ordering modes\n+    let _ = x.load(Ordering::Release);\n+    //~^ ERROR atomic loads cannot have `Release` or `AcqRel` ordering\n+    let _ = x.load(Ordering::AcqRel);\n+    //~^ ERROR atomic loads cannot have `Release` or `AcqRel` ordering\n+\n+    // Disallowed store ordering modes\n     x.store(1, Ordering::Acquire);\n+    //~^ ERROR atomic stores cannot have `Acquire` or `AcqRel` ordering\n     x.store(1, Ordering::AcqRel);\n+    //~^ ERROR atomic stores cannot have `Acquire` or `AcqRel` ordering\n \n     // `AtomicU32` test cases\n     let x = AtomicU32::new(0);\n \n+    // Allowed load ordering modes\n     let _ = x.load(Ordering::Acquire);\n     let _ = x.load(Ordering::SeqCst);\n     let _ = x.load(Ordering::Relaxed);\n-    let _ = x.load(Ordering::Release);\n-    let _ = x.load(Ordering::AcqRel);\n \n+    // Allowed store ordering modes\n     x.store(1, Ordering::Release);\n     x.store(1, Ordering::SeqCst);\n     x.store(1, Ordering::Relaxed);\n+\n+    // Disallowed load ordering modes\n+    let _ = x.load(Ordering::Release);\n+    //~^ ERROR atomic loads cannot have `Release` or `AcqRel` ordering\n+    let _ = x.load(Ordering::AcqRel);\n+    //~^ ERROR atomic loads cannot have `Release` or `AcqRel` ordering\n+\n+    // Disallowed store ordering modes\n     x.store(1, Ordering::Acquire);\n+    //~^ ERROR atomic stores cannot have `Acquire` or `AcqRel` ordering\n     x.store(1, Ordering::AcqRel);\n+    //~^ ERROR atomic stores cannot have `Acquire` or `AcqRel` ordering\n \n     // `AtomicU64` test cases\n     let x = AtomicU64::new(0);\n \n+    // Allowed load ordering modes\n     let _ = x.load(Ordering::Acquire);\n     let _ = x.load(Ordering::SeqCst);\n     let _ = x.load(Ordering::Relaxed);\n-    let _ = x.load(Ordering::Release);\n-    let _ = x.load(Ordering::AcqRel);\n \n+    // Allowed store ordering modes\n     x.store(1, Ordering::Release);\n     x.store(1, Ordering::SeqCst);\n     x.store(1, Ordering::Relaxed);\n+\n+    // Disallowed load ordering modes\n+    let _ = x.load(Ordering::Release);\n+    //~^ ERROR atomic loads cannot have `Release` or `AcqRel` ordering\n+    let _ = x.load(Ordering::AcqRel);\n+    //~^ ERROR atomic loads cannot have `Release` or `AcqRel` ordering\n+\n+    // Disallowed store ordering modes\n     x.store(1, Ordering::Acquire);\n+    //~^ ERROR atomic stores cannot have `Acquire` or `AcqRel` ordering\n     x.store(1, Ordering::AcqRel);\n+    //~^ ERROR atomic stores cannot have `Acquire` or `AcqRel` ordering\n \n     // `AtomicUsize` test cases\n     let x = AtomicUsize::new(0);\n \n+    // Allowed load ordering modes\n     let _ = x.load(Ordering::Acquire);\n     let _ = x.load(Ordering::SeqCst);\n     let _ = x.load(Ordering::Relaxed);\n-    let _ = x.load(Ordering::Release);\n-    let _ = x.load(Ordering::AcqRel);\n \n+    // Allowed store ordering modes\n     x.store(1, Ordering::Release);\n     x.store(1, Ordering::SeqCst);\n     x.store(1, Ordering::Relaxed);\n+\n+    // Disallowed load ordering modes\n+    let _ = x.load(Ordering::Release);\n+    //~^ ERROR atomic loads cannot have `Release` or `AcqRel` ordering\n+    let _ = x.load(Ordering::AcqRel);\n+    //~^ ERROR atomic loads cannot have `Release` or `AcqRel` ordering\n+\n+    // Disallowed store ordering modes\n     x.store(1, Ordering::Acquire);\n+    //~^ ERROR atomic stores cannot have `Acquire` or `AcqRel` ordering\n     x.store(1, Ordering::AcqRel);\n+    //~^ ERROR atomic stores cannot have `Acquire` or `AcqRel` ordering\n }", "previous_filename": "src/tools/clippy/tests/ui/atomic_ordering_uint.rs"}, {"sha": "36672e434b950c91025b9726b7184783940a2ec2", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-uint.stderr", "status": "renamed", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-uint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-uint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-uint.stderr?ref=402a9c9f5e143baaf37ef8b68d84edaadda253dd", "patch": "@@ -1,158 +1,158 @@\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:15:20\n+error: atomic loads cannot have `Release` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-uint.rs:19:20\n    |\n LL |     let _ = x.load(Ordering::Release);\n    |                    ^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::invalid-atomic-ordering` implied by `-D warnings`\n+   = note: `#[deny(invalid_atomic_ordering)]` on by default\n    = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n \n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:16:20\n+error: atomic loads cannot have `Release` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-uint.rs:21:20\n    |\n LL |     let _ = x.load(Ordering::AcqRel);\n    |                    ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n \n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:24:16\n+error: atomic stores cannot have `Acquire` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-uint.rs:25:16\n    |\n LL |     x.store(1, Ordering::Acquire);\n    |                ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n \n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:25:16\n+error: atomic stores cannot have `Acquire` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-uint.rs:27:16\n    |\n LL |     x.store(1, Ordering::AcqRel);\n    |                ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n \n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:33:20\n+error: atomic loads cannot have `Release` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-uint.rs:44:20\n    |\n LL |     let _ = x.load(Ordering::Release);\n    |                    ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n \n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:34:20\n+error: atomic loads cannot have `Release` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-uint.rs:46:20\n    |\n LL |     let _ = x.load(Ordering::AcqRel);\n    |                    ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n \n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:39:16\n+error: atomic stores cannot have `Acquire` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-uint.rs:50:16\n    |\n LL |     x.store(1, Ordering::Acquire);\n    |                ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n \n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:40:16\n+error: atomic stores cannot have `Acquire` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-uint.rs:52:16\n    |\n LL |     x.store(1, Ordering::AcqRel);\n    |                ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n \n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:48:20\n+error: atomic loads cannot have `Release` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-uint.rs:69:20\n    |\n LL |     let _ = x.load(Ordering::Release);\n    |                    ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n \n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:49:20\n+error: atomic loads cannot have `Release` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-uint.rs:71:20\n    |\n LL |     let _ = x.load(Ordering::AcqRel);\n    |                    ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n \n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:54:16\n+error: atomic stores cannot have `Acquire` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-uint.rs:75:16\n    |\n LL |     x.store(1, Ordering::Acquire);\n    |                ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n \n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:55:16\n+error: atomic stores cannot have `Acquire` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-uint.rs:77:16\n    |\n LL |     x.store(1, Ordering::AcqRel);\n    |                ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n \n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:63:20\n+error: atomic loads cannot have `Release` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-uint.rs:94:20\n    |\n LL |     let _ = x.load(Ordering::Release);\n    |                    ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n \n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:64:20\n+error: atomic loads cannot have `Release` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-uint.rs:96:20\n    |\n LL |     let _ = x.load(Ordering::AcqRel);\n    |                    ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n \n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:69:16\n+error: atomic stores cannot have `Acquire` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-uint.rs:100:16\n    |\n LL |     x.store(1, Ordering::Acquire);\n    |                ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n \n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:70:16\n+error: atomic stores cannot have `Acquire` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-uint.rs:102:16\n    |\n LL |     x.store(1, Ordering::AcqRel);\n    |                ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n \n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:78:20\n+error: atomic loads cannot have `Release` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-uint.rs:119:20\n    |\n LL |     let _ = x.load(Ordering::Release);\n    |                    ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n \n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:79:20\n+error: atomic loads cannot have `Release` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-uint.rs:121:20\n    |\n LL |     let _ = x.load(Ordering::AcqRel);\n    |                    ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n \n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:84:16\n+error: atomic stores cannot have `Acquire` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-uint.rs:125:16\n    |\n LL |     x.store(1, Ordering::Acquire);\n    |                ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n \n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering_uint.rs:85:16\n+error: atomic stores cannot have `Acquire` or `AcqRel` ordering\n+  --> $DIR/lint-invalid-atomic-ordering-uint.rs:127:16\n    |\n LL |     x.store(1, Ordering::AcqRel);\n    |                ^^^^^^^^^^^^^^^^", "previous_filename": "src/tools/clippy/tests/ui/atomic_ordering_uint.stderr"}, {"sha": "cece28e8b3c3f110afa7a5d1c7224d9b26441efd", "filename": "src/tools/clippy/clippy_lints/src/atomic_ordering.rs", "status": "removed", "additions": 0, "deletions": 230, "changes": 230, "blob_url": "https://github.com/rust-lang/rust/blob/7069a8c2b78c5d23205de1cabb4c2a65229dbd8f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fatomic_ordering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7069a8c2b78c5d23205de1cabb4c2a65229dbd8f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fatomic_ordering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fatomic_ordering.rs?ref=7069a8c2b78c5d23205de1cabb4c2a65229dbd8f", "patch": "@@ -1,230 +0,0 @@\n-use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::match_def_path;\n-use if_chain::if_chain;\n-use rustc_hir::def_id::DefId;\n-use rustc_hir::{Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for usage of invalid atomic\n-    /// ordering in atomic loads/stores/exchanges/updates and\n-    /// memory fences.\n-    ///\n-    /// ### Why is this bad?\n-    /// Using an invalid atomic ordering\n-    /// will cause a panic at run-time.\n-    ///\n-    /// ### Example\n-    /// ```rust,no_run\n-    /// # use std::sync::atomic::{self, AtomicU8, Ordering};\n-    ///\n-    /// let x = AtomicU8::new(0);\n-    ///\n-    /// // Bad: `Release` and `AcqRel` cannot be used for `load`.\n-    /// let _ = x.load(Ordering::Release);\n-    /// let _ = x.load(Ordering::AcqRel);\n-    ///\n-    /// // Bad: `Acquire` and `AcqRel` cannot be used for `store`.\n-    /// x.store(1, Ordering::Acquire);\n-    /// x.store(2, Ordering::AcqRel);\n-    ///\n-    /// // Bad: `Relaxed` cannot be used as a fence's ordering.\n-    /// atomic::fence(Ordering::Relaxed);\n-    /// atomic::compiler_fence(Ordering::Relaxed);\n-    ///\n-    /// // Bad: `Release` and `AcqRel` are both always invalid\n-    /// // for the failure ordering (the last arg).\n-    /// let _ = x.compare_exchange(1, 2, Ordering::SeqCst, Ordering::Release);\n-    /// let _ = x.compare_exchange_weak(2, 3, Ordering::AcqRel, Ordering::AcqRel);\n-    ///\n-    /// // Bad: The failure ordering is not allowed to be\n-    /// // stronger than the success order, and `SeqCst` is\n-    /// // stronger than `Relaxed`.\n-    /// let _ = x.fetch_update(Ordering::Relaxed, Ordering::SeqCst, |val| Some(val + val));\n-    /// ```\n-    pub INVALID_ATOMIC_ORDERING,\n-    correctness,\n-    \"usage of invalid atomic ordering in atomic operations and memory fences\"\n-}\n-\n-declare_lint_pass!(AtomicOrdering => [INVALID_ATOMIC_ORDERING]);\n-\n-const ATOMIC_TYPES: [&str; 12] = [\n-    \"AtomicBool\",\n-    \"AtomicI8\",\n-    \"AtomicI16\",\n-    \"AtomicI32\",\n-    \"AtomicI64\",\n-    \"AtomicIsize\",\n-    \"AtomicPtr\",\n-    \"AtomicU8\",\n-    \"AtomicU16\",\n-    \"AtomicU32\",\n-    \"AtomicU64\",\n-    \"AtomicUsize\",\n-];\n-\n-fn type_is_atomic(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n-    if let ty::Adt(&ty::AdtDef { did, .. }, _) = cx.typeck_results().expr_ty(expr).kind() {\n-        ATOMIC_TYPES\n-            .iter()\n-            .any(|ty| match_def_path(cx, did, &[\"core\", \"sync\", \"atomic\", ty]))\n-    } else {\n-        false\n-    }\n-}\n-\n-fn match_ordering_def_path(cx: &LateContext<'_>, did: DefId, orderings: &[&str]) -> bool {\n-    orderings\n-        .iter()\n-        .any(|ordering| match_def_path(cx, did, &[\"core\", \"sync\", \"atomic\", \"Ordering\", ordering]))\n-}\n-\n-fn check_atomic_load_store(cx: &LateContext<'_>, expr: &Expr<'_>) {\n-    if_chain! {\n-        if let ExprKind::MethodCall(method_path, _, args, _) = &expr.kind;\n-        let method = method_path.ident.name.as_str();\n-        if type_is_atomic(cx, &args[0]);\n-        if method == \"load\" || method == \"store\";\n-        let ordering_arg = if method == \"load\" { &args[1] } else { &args[2] };\n-        if let ExprKind::Path(ref ordering_qpath) = ordering_arg.kind;\n-        if let Some(ordering_def_id) = cx.qpath_res(ordering_qpath, ordering_arg.hir_id).opt_def_id();\n-        then {\n-            if method == \"load\" &&\n-                match_ordering_def_path(cx, ordering_def_id, &[\"Release\", \"AcqRel\"]) {\n-                span_lint_and_help(\n-                    cx,\n-                    INVALID_ATOMIC_ORDERING,\n-                    ordering_arg.span,\n-                    \"atomic loads cannot have `Release` and `AcqRel` ordering\",\n-                    None,\n-                    \"consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\"\n-                );\n-            } else if method == \"store\" &&\n-                match_ordering_def_path(cx, ordering_def_id, &[\"Acquire\", \"AcqRel\"]) {\n-                span_lint_and_help(\n-                    cx,\n-                    INVALID_ATOMIC_ORDERING,\n-                    ordering_arg.span,\n-                    \"atomic stores cannot have `Acquire` and `AcqRel` ordering\",\n-                    None,\n-                    \"consider using ordering modes `Release`, `SeqCst` or `Relaxed`\"\n-                );\n-            }\n-        }\n-    }\n-}\n-\n-fn check_memory_fence(cx: &LateContext<'_>, expr: &Expr<'_>) {\n-    if_chain! {\n-        if let ExprKind::Call(func, args) = expr.kind;\n-        if let ExprKind::Path(ref func_qpath) = func.kind;\n-        if let Some(def_id) = cx.qpath_res(func_qpath, func.hir_id).opt_def_id();\n-        if [\"fence\", \"compiler_fence\"]\n-            .iter()\n-            .any(|func| match_def_path(cx, def_id, &[\"core\", \"sync\", \"atomic\", func]));\n-        if let ExprKind::Path(ref ordering_qpath) = &args[0].kind;\n-        if let Some(ordering_def_id) = cx.qpath_res(ordering_qpath, args[0].hir_id).opt_def_id();\n-        if match_ordering_def_path(cx, ordering_def_id, &[\"Relaxed\"]);\n-        then {\n-            span_lint_and_help(\n-                cx,\n-                INVALID_ATOMIC_ORDERING,\n-                args[0].span,\n-                \"memory fences cannot have `Relaxed` ordering\",\n-                None,\n-                \"consider using ordering modes `Acquire`, `Release`, `AcqRel` or `SeqCst`\"\n-            );\n-        }\n-    }\n-}\n-\n-fn opt_ordering_defid(cx: &LateContext<'_>, ord_arg: &Expr<'_>) -> Option<DefId> {\n-    if let ExprKind::Path(ref ord_qpath) = ord_arg.kind {\n-        cx.qpath_res(ord_qpath, ord_arg.hir_id).opt_def_id()\n-    } else {\n-        None\n-    }\n-}\n-\n-fn check_atomic_compare_exchange(cx: &LateContext<'_>, expr: &Expr<'_>) {\n-    if_chain! {\n-        if let ExprKind::MethodCall(method_path, _, args, _) = &expr.kind;\n-        let method = method_path.ident.name.as_str();\n-        if type_is_atomic(cx, &args[0]);\n-        if method == \"compare_exchange\" || method == \"compare_exchange_weak\" || method == \"fetch_update\";\n-        let (success_order_arg, failure_order_arg) = if method == \"fetch_update\" {\n-            (&args[1], &args[2])\n-        } else {\n-            (&args[3], &args[4])\n-        };\n-        if let Some(fail_ordering_def_id) = opt_ordering_defid(cx, failure_order_arg);\n-        then {\n-            // Helper type holding on to some checking and error reporting data. Has\n-            // - (success ordering name,\n-            // - list of failure orderings forbidden by the success order,\n-            // - suggestion message)\n-            type OrdLintInfo = (&'static str, &'static [&'static str], &'static str);\n-            let relaxed: OrdLintInfo = (\"Relaxed\", &[\"SeqCst\", \"Acquire\"], \"ordering mode `Relaxed`\");\n-            let acquire: OrdLintInfo = (\"Acquire\", &[\"SeqCst\"], \"ordering modes `Acquire` or `Relaxed`\");\n-            let seq_cst: OrdLintInfo = (\"SeqCst\", &[], \"ordering modes `Acquire`, `SeqCst` or `Relaxed`\");\n-            let release = (\"Release\", relaxed.1, relaxed.2);\n-            let acqrel = (\"AcqRel\", acquire.1, acquire.2);\n-            let search = [relaxed, acquire, seq_cst, release, acqrel];\n-\n-            let success_lint_info = opt_ordering_defid(cx, success_order_arg)\n-                .and_then(|success_ord_def_id| -> Option<OrdLintInfo> {\n-                    search\n-                        .iter()\n-                        .find(|(ordering, ..)| {\n-                            match_def_path(cx, success_ord_def_id,\n-                                &[\"core\", \"sync\", \"atomic\", \"Ordering\", ordering])\n-                        })\n-                        .copied()\n-                });\n-\n-            if match_ordering_def_path(cx, fail_ordering_def_id, &[\"Release\", \"AcqRel\"]) {\n-                // If we don't know the success order is, use what we'd suggest\n-                // if it were maximally permissive.\n-                let suggested = success_lint_info.unwrap_or(seq_cst).2;\n-                span_lint_and_help(\n-                    cx,\n-                    INVALID_ATOMIC_ORDERING,\n-                    failure_order_arg.span,\n-                    &format!(\n-                        \"{}'s failure ordering may not be `Release` or `AcqRel`\",\n-                        method,\n-                    ),\n-                    None,\n-                    &format!(\"consider using {} instead\", suggested),\n-                );\n-            } else if let Some((success_ord_name, bad_ords_given_success, suggested)) = success_lint_info {\n-                if match_ordering_def_path(cx, fail_ordering_def_id, bad_ords_given_success) {\n-                    span_lint_and_help(\n-                        cx,\n-                        INVALID_ATOMIC_ORDERING,\n-                        failure_order_arg.span,\n-                        &format!(\n-                            \"{}'s failure ordering may not be stronger than the success ordering of `{}`\",\n-                            method,\n-                            success_ord_name,\n-                        ),\n-                        None,\n-                        &format!(\"consider using {} instead\", suggested),\n-                    );\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-impl<'tcx> LateLintPass<'tcx> for AtomicOrdering {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        check_atomic_load_store(cx, expr);\n-        check_memory_fence(cx, expr);\n-        check_atomic_compare_exchange(cx, expr);\n-    }\n-}"}, {"sha": "e455c8db03f52a559982252084cda9349b5efc56", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=402a9c9f5e143baaf37ef8b68d84edaadda253dd", "patch": "@@ -165,7 +165,6 @@ mod asm_syntax;\n mod assertions_on_constants;\n mod assign_ops;\n mod async_yields_async;\n-mod atomic_ordering;\n mod attrs;\n mod await_holding_invalid;\n mod bit_mask;\n@@ -537,7 +536,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         assign_ops::ASSIGN_OP_PATTERN,\n         assign_ops::MISREFACTORED_ASSIGN_OP,\n         async_yields_async::ASYNC_YIELDS_ASYNC,\n-        atomic_ordering::INVALID_ATOMIC_ORDERING,\n         attrs::BLANKET_CLIPPY_RESTRICTION_LINTS,\n         attrs::DEPRECATED_CFG_ATTR,\n         attrs::DEPRECATED_SEMVER,\n@@ -1174,7 +1172,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(assign_ops::ASSIGN_OP_PATTERN),\n         LintId::of(assign_ops::MISREFACTORED_ASSIGN_OP),\n         LintId::of(async_yields_async::ASYNC_YIELDS_ASYNC),\n-        LintId::of(atomic_ordering::INVALID_ATOMIC_ORDERING),\n         LintId::of(attrs::BLANKET_CLIPPY_RESTRICTION_LINTS),\n         LintId::of(attrs::DEPRECATED_CFG_ATTR),\n         LintId::of(attrs::DEPRECATED_SEMVER),\n@@ -1670,7 +1667,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(absurd_extreme_comparisons::ABSURD_EXTREME_COMPARISONS),\n         LintId::of(approx_const::APPROX_CONSTANT),\n         LintId::of(async_yields_async::ASYNC_YIELDS_ASYNC),\n-        LintId::of(atomic_ordering::INVALID_ATOMIC_ORDERING),\n         LintId::of(attrs::DEPRECATED_SEMVER),\n         LintId::of(attrs::MISMATCHED_TARGET_OS),\n         LintId::of(attrs::USELESS_ATTRIBUTE),\n@@ -2044,7 +2040,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box floating_point_arithmetic::FloatingPointArithmetic);\n     store.register_early_pass(|| box as_conversions::AsConversions);\n     store.register_late_pass(|| box let_underscore::LetUnderscore);\n-    store.register_late_pass(|| box atomic_ordering::AtomicOrdering);\n     store.register_early_pass(|| box single_component_path_imports::SingleComponentPathImports);\n     let max_fn_params_bools = conf.max_fn_params_bools;\n     let max_struct_bools = conf.max_struct_bools;\n@@ -2183,6 +2178,7 @@ pub fn register_renamed(ls: &mut rustc_lint::LintStore) {\n     ls.register_renamed(\"clippy::temporary_cstring_as_ptr\", \"temporary_cstring_as_ptr\");\n     ls.register_renamed(\"clippy::panic_params\", \"non_fmt_panics\");\n     ls.register_renamed(\"clippy::unknown_clippy_lints\", \"unknown_lints\");\n+    ls.register_renamed(\"clippy::invalid_atomic_ordering\", \"invalid_atomic_ordering\");\n }\n \n // only exists to let the dogfood integration test works."}, {"sha": "1943d0092e6244851b9c5480a879116b788e56b9", "filename": "src/tools/clippy/tests/ui/deprecated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated.rs?ref=402a9c9f5e143baaf37ef8b68d84edaadda253dd", "patch": "@@ -14,5 +14,6 @@\n #[warn(clippy::filter_map)]\n #[warn(clippy::pub_enum_variant_names)]\n #[warn(clippy::wrong_pub_self_convention)]\n+#[warn(clippy::invalid_atomic_ordering)]\n \n fn main() {}"}, {"sha": "51048e45c0677c208bb8e050edc7fa0169eb8a82", "filename": "src/tools/clippy/tests/ui/deprecated.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated.stderr?ref=402a9c9f5e143baaf37ef8b68d84edaadda253dd", "patch": "@@ -96,5 +96,11 @@ error: lint `clippy::wrong_pub_self_convention` has been removed: set the `avoid\n LL | #[warn(clippy::wrong_pub_self_convention)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 16 previous errors\n+error: lint `clippy::invalid_atomic_ordering` has been renamed to `invalid_atomic_ordering`\n+  --> $DIR/deprecated.rs:17:8\n+   |\n+LL | #[warn(clippy::invalid_atomic_ordering)]\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_atomic_ordering`\n+\n+error: aborting due to 17 previous errors\n "}, {"sha": "5f1267fc3d2507db7adfa95f14efffcf1a4b99be", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/402a9c9f5e143baaf37ef8b68d84edaadda253dd/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=402a9c9f5e143baaf37ef8b68d84edaadda253dd", "patch": "@@ -121,6 +121,7 @@ const PERMITTED_DEPENDENCIES: &[&str] = &[\n     \"hashbrown\",\n     \"hermit-abi\",\n     \"humantime\",\n+    \"if_chain\",\n     \"indexmap\",\n     \"instant\",\n     \"itertools\","}]}