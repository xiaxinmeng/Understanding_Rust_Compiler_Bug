{"sha": "79b343d87c64e786c79f640675beefa4064100ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5YjM0M2Q4N2M2NGU3ODZjNzlmNjQwNjc1YmVlZmE0MDY0MTAwZWM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-03-06T12:54:44Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-05-16T19:25:08Z"}, "message": "lowering: Rename identifiers only when necessary\n\nDo not rename invalid identifiers, they stop being invalid after renaming", "tree": {"sha": "5ecabecc6b6588f4048e93a5cf660d183b2b4396", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ecabecc6b6588f4048e93a5cf660d183b2b4396"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79b343d87c64e786c79f640675beefa4064100ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79b343d87c64e786c79f640675beefa4064100ec", "html_url": "https://github.com/rust-lang/rust/commit/79b343d87c64e786c79f640675beefa4064100ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79b343d87c64e786c79f640675beefa4064100ec/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aad347c4f781bda18efb3f3cdbaa736e7e458e24", "url": "https://api.github.com/repos/rust-lang/rust/commits/aad347c4f781bda18efb3f3cdbaa736e7e458e24", "html_url": "https://github.com/rust-lang/rust/commit/aad347c4f781bda18efb3f3cdbaa736e7e458e24"}], "stats": {"total": 48, "additions": 36, "deletions": 12}, "files": [{"sha": "67ea7951de71967ff5234b6e560bbe1ea5f214c7", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 32, "deletions": 12, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/79b343d87c64e786c79f640675beefa4064100ec/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79b343d87c64e786c79f640675beefa4064100ec/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=79b343d87c64e786c79f640675beefa4064100ec", "patch": "@@ -44,7 +44,7 @@ use hir;\n use hir::map::Definitions;\n use hir::map::definitions::DefPathData;\n use hir::def_id::{DefIndex, DefId};\n-use hir::def::Def;\n+use hir::def::{Def, PathResolution};\n \n use std::collections::BTreeMap;\n use std::iter;\n@@ -53,7 +53,7 @@ use syntax::attr::{ThinAttributes, ThinAttributesExt};\n use syntax::ext::mtwt;\n use syntax::ptr::P;\n use syntax::codemap::{respan, Spanned, Span};\n-use syntax::parse::token;\n+use syntax::parse::token::{self, keywords};\n use syntax::std_inject;\n use syntax::visit::{self, Visitor};\n \n@@ -72,6 +72,9 @@ pub trait Resolver {\n     // Resolve a global hir path generated by the lowerer when expanding `for`, `if let`, etc.\n     fn resolve_generated_global_path(&mut self, path: &hir::Path, is_value: bool) -> Def;\n \n+    // Obtain the resolution for a node id\n+    fn get_resolution(&mut self, id: NodeId) -> Option<PathResolution>;\n+\n     // Record the resolution of a path or binding generated by the lowerer when expanding.\n     fn record_resolution(&mut self, id: NodeId, def: Def);\n \n@@ -85,6 +88,9 @@ impl Resolver for DummyResolver {\n     fn resolve_generated_global_path(&mut self, _path: &hir::Path, _is_value: bool) -> Def {\n         Def::Err\n     }\n+    fn get_resolution(&mut self, _id: NodeId) -> Option<PathResolution> {\n+        None\n+    }\n     fn record_resolution(&mut self, _id: NodeId, _def: Def) {}\n     fn definitions(&mut self) -> Option<&mut Definitions> {\n         None\n@@ -170,7 +176,11 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_ident(&mut self, ident: Ident) -> Name {\n-        mtwt::resolve(ident)\n+        if ident.name != keywords::Invalid.name() {\n+            mtwt::resolve(ident)\n+        } else {\n+            ident.name\n+        }\n     }\n \n     fn lower_attrs(&mut self, attrs: &Vec<Attribute>) -> hir::HirVec<Attribute> {\n@@ -315,18 +325,14 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n-    // Path segments are usually unhygienic, hygienic path segments can occur only in\n-    // identifier-like paths originating from `ExprPath`.\n-    // Make life simpler for rustc_resolve by renaming only such segments.\n-    fn lower_path_full(&mut self, p: &Path, maybe_hygienic: bool) -> hir::Path {\n-        let maybe_hygienic = maybe_hygienic && !p.global && p.segments.len() == 1;\n+    fn lower_path_full(&mut self, p: &Path, rename: bool) -> hir::Path {\n         hir::Path {\n             global: p.global,\n             segments: p.segments\n                        .iter()\n                        .map(|&PathSegment { identifier, ref parameters }| {\n                            hir::PathSegment {\n-                               name: if maybe_hygienic {\n+                               name: if rename {\n                                    self.lower_ident(identifier)\n                                } else {\n                                    identifier.name\n@@ -846,9 +852,14 @@ impl<'a> LoweringContext<'a> {\n                 PatKind::Wild => hir::PatKind::Wild,\n                 PatKind::Ident(ref binding_mode, pth1, ref sub) => {\n                     self.with_parent_def(p.id, |this| {\n+                        let name = match this.resolver.get_resolution(p.id).map(|d| d.full_def()) {\n+                            // Only pattern bindings are renamed\n+                            None | Some(Def::Local(..)) => this.lower_ident(pth1.node),\n+                            _ => pth1.node.name,\n+                        };\n                         hir::PatKind::Ident(this.lower_binding_mode(binding_mode),\n-                                      respan(pth1.span, this.lower_ident(pth1.node)),\n-                                      sub.as_ref().map(|x| this.lower_pat(x)))\n+                                            respan(pth1.span, name),\n+                                            sub.as_ref().map(|x| this.lower_pat(x)))\n                     })\n                 }\n                 PatKind::Lit(ref e) => hir::PatKind::Lit(self.lower_expr(e)),\n@@ -1212,7 +1223,16 @@ impl<'a> LoweringContext<'a> {\n                             position: position,\n                         }\n                     });\n-                    hir::ExprPath(hir_qself, self.lower_path_full(path, qself.is_none()))\n+                    let rename = if path.segments.len() == 1 {\n+                        // Only local variables are renamed\n+                        match self.resolver.get_resolution(e.id).map(|d| d.full_def()) {\n+                            Some(Def::Local(..)) | Some(Def::Upvar(..)) => true,\n+                            _ => false,\n+                        }\n+                    } else {\n+                        false\n+                    };\n+                    hir::ExprPath(hir_qself, self.lower_path_full(path, rename))\n                 }\n                 ExprKind::Break(opt_ident) => hir::ExprBreak(opt_ident.map(|sp_ident| {\n                     respan(sp_ident.span, self.lower_ident(sp_ident.node))"}, {"sha": "016dff5f0053940c3128fc61a0c59873e37732b8", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79b343d87c64e786c79f640675beefa4064100ec/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79b343d87c64e786c79f640675beefa4064100ec/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=79b343d87c64e786c79f640675beefa4064100ec", "patch": "@@ -1102,6 +1102,10 @@ impl<'a> hir::lowering::Resolver for Resolver<'a> {\n         }\n     }\n \n+    fn get_resolution(&mut self, id: NodeId) -> Option<PathResolution> {\n+        self.def_map.get(&id).cloned()\n+    }\n+\n     fn record_resolution(&mut self, id: NodeId, def: Def) {\n         self.def_map.insert(id, PathResolution { base_def: def, depth: 0 });\n     }"}]}