{"sha": "0a504890f38e295922bc115045dae1cde9c7d382", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNTA0ODkwZjM4ZTI5NTkyMmJjMTE1MDQ1ZGFlMWNkZTljN2QzODI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-09-13T16:13:28Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-09-13T16:14:49Z"}, "message": "Convert package list to dvec (cc #2280)", "tree": {"sha": "88e15839fd54e5ee885dfbcb547d582be6014ff1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88e15839fd54e5ee885dfbcb547d582be6014ff1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a504890f38e295922bc115045dae1cde9c7d382", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a504890f38e295922bc115045dae1cde9c7d382", "html_url": "https://github.com/rust-lang/rust/commit/0a504890f38e295922bc115045dae1cde9c7d382", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a504890f38e295922bc115045dae1cde9c7d382/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "109055c7d3831f0a5a771e6f946e876dd8434223", "url": "https://api.github.com/repos/rust-lang/rust/commits/109055c7d3831f0a5a771e6f946e876dd8434223", "html_url": "https://github.com/rust-lang/rust/commit/109055c7d3831f0a5a771e6f946e876dd8434223"}], "stats": {"total": 59, "additions": 27, "deletions": 32}, "files": [{"sha": "ac5eae5971f41282a3e77b58488356462ecdc233", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 27, "deletions": 32, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/0a504890f38e295922bc115045dae1cde9c7d382/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a504890f38e295922bc115045dae1cde9c7d382/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=0a504890f38e295922bc115045dae1cde9c7d382", "patch": "@@ -13,6 +13,7 @@ use std::{map, json, tempfile, term, sort, getopts};\n use map::HashMap;\n use to_str::to_str;\n use getopts::{optflag, optopt, opt_present};\n+use dvec::DVec;\n \n type package = {\n     name: ~str,\n@@ -60,7 +61,7 @@ type source = @{\n     mut method: ~str,\n     mut key: Option<~str>,\n     mut keyfp: Option<~str>,\n-    mut packages: ~[mut package]\n+    packages: DVec<package>\n };\n \n type cargo = {\n@@ -448,7 +449,7 @@ fn parse_source(name: ~str, j: json::Json) -> source {\n                 mut method: method,\n                 mut key: key,\n                 mut keyfp: keyfp,\n-                mut packages: ~[mut] };\n+                packages: DVec() };\n         }\n         _ => fail ~\"needed dict value in source\"\n     };\n@@ -558,14 +559,14 @@ fn load_one_source_package(src: source, p: map::HashMap<~str, json::Json>) {\n         versions: ~[]\n     };\n \n-    match vec::position(src.packages, |pkg| pkg.uuid == uuid) {\n-      Some(idx) => {\n-        src.packages[idx] = newpkg;\n-        log(debug, ~\"  updated package: \" + src.name + ~\"/\" + name);\n-      }\n-      None => {\n-        vec::grow(src.packages, 1u, newpkg);\n-      }\n+    match src.packages.position(|pkg| pkg.uuid == uuid) {\n+        Some(idx) => {\n+            src.packages.set_elt(idx, newpkg);\n+            log(debug, ~\"  updated package: \" + src.name + ~\"/\" + name);\n+        }\n+        None => {\n+            src.packages.push(newpkg);\n+        }\n     }\n \n     log(debug, ~\"  loaded package: \" + src.name + ~\"/\" + name);\n@@ -713,10 +714,7 @@ fn configure(opts: options) -> cargo {\n \n fn for_each_package(c: cargo, b: fn(source, package)) {\n     for c.sources.each_value |v| {\n-        // FIXME (#2280): this temporary shouldn't be\n-        // necessary, but seems to be, for borrowing.\n-        let pks = copy v.packages;\n-        for vec::each(pks) |p| {\n+        for v.packages.each |p| {\n             b(v, p);\n         }\n     }\n@@ -948,30 +946,28 @@ fn install_named(c: cargo, wd: &Path, name: ~str) {\n \n fn install_uuid_specific(c: cargo, wd: &Path, src: ~str, uuid: ~str) {\n     match c.sources.find(src) {\n-      Some(s) => {\n-        let packages = copy s.packages;\n-        if vec::any(packages, |p| {\n-            if p.uuid == uuid {\n-                install_package(c, src, wd, p);\n-                true\n-            } else { false }\n-        }) { return; }\n-      }\n-      _ => ()\n+        Some(s) => {\n+            for s.packages.each |p| {\n+                if p.uuid == uuid {\n+                    install_package(c, src, wd, p);\n+                    return;\n+                }\n+            }\n+        }\n+        _ => ()\n     }\n     error(~\"can't find package: \" + src + ~\"/\" + uuid);\n }\n \n fn install_named_specific(c: cargo, wd: &Path, src: ~str, name: ~str) {\n     match c.sources.find(src) {\n         Some(s) => {\n-          let packages = copy s.packages;\n-          if vec::any(packages, |p| {\n+            for s.packages.each |p| {\n                 if p.name == name {\n                     install_package(c, src, wd, p);\n-                    true\n-                } else { false }\n-            }) { return; }\n+                    return;\n+                }\n+            }\n         }\n         _ => ()\n     }\n@@ -1500,8 +1496,7 @@ fn print_pkg(s: source, p: package) {\n fn print_source(s: source) {\n     info(s.name + ~\" (\" + s.url + ~\")\");\n \n-    let unsorted_pks = s.packages;  // to prevent illegal borrow?\n-    let pks = sort::merge_sort(sys::shape_lt, unsorted_pks);\n+    let pks = sort::merge_sort(sys::shape_lt, s.packages.get());\n     let l = vec::len(pks);\n \n     print(io::with_str_writer(|writer| {\n@@ -1685,7 +1680,7 @@ fn cmd_sources(c: cargo) {\n                     mut method: assume_source_method(url),\n                     mut key: None,\n                     mut keyfp: None,\n-                    mut packages: ~[mut]\n+                    packages: DVec()\n                 });\n                 info(fmt!(\"added source: %s\", name));\n             }"}]}