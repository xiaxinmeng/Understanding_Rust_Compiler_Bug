{"sha": "2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4OTFhNDlmMGQ5YjNjNmNkZDRmYThiMGJkMWYyYTVkMDZjZGFjNTg=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-01-08T05:15:25Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-01-09T16:55:37Z"}, "message": "core: rename vec.filter to vec.filtered", "tree": {"sha": "7da6504a2f97dfefc97752d17a57c31d81449f7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7da6504a2f97dfefc97752d17a57c31d81449f7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58", "html_url": "https://github.com/rust-lang/rust/commit/2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a7e26156259560ac546a35dd285abe44728b1f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a7e26156259560ac546a35dd285abe44728b1f5", "html_url": "https://github.com/rust-lang/rust/commit/9a7e26156259560ac546a35dd285abe44728b1f5"}], "stats": {"total": 52, "additions": 27, "deletions": 25}, "files": [{"sha": "7b0ef583f40f3be21f5516baab941887b8f977a5", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58", "patch": "@@ -526,7 +526,7 @@ fn make_run_args(config: config, _props: test_props, testfile: &Path) ->\n \n fn split_maybe_args(argstr: Option<~str>) -> ~[~str] {\n     fn rm_whitespace(v: ~[~str]) -> ~[~str] {\n-        vec::filter(v, |s| !str::is_whitespace(*s))\n+        v.filtered(|s| !str::is_whitespace(*s))\n     }\n \n     match argstr {"}, {"sha": "6b3f97daa76dce1deb5023d849fd96e418cda80c", "filename": "src/libcore/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58", "patch": "@@ -619,7 +619,7 @@ pub fn list_dir(p: &Path) -> ~[~str] {\n     #[cfg(windows)]\n     fn star(p: &Path) -> Path { p.push(\"*\") }\n \n-    do rustrt::rust_list_files2(star(p).to_str()).filter |filename| {\n+    do rustrt::rust_list_files2(star(p).to_str()).filtered |filename| {\n         *filename != ~\".\" && *filename != ~\"..\"\n     }\n }"}, {"sha": "511063bb44fa8bda5a84e8d125397956b907916c", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58", "patch": "@@ -853,7 +853,7 @@ pub pure fn filter_map<T, U: Copy>(v: &[T], f: fn(t: &T) -> Option<U>)\n  * Apply function `f` to each element of `v` and return a vector containing\n  * only those elements for which `f` returned true.\n  */\n-pub pure fn filter<T: Copy>(v: &[T], f: fn(t: &T) -> bool) -> ~[T] {\n+pub pure fn filtered<T: Copy>(v: &[T], f: fn(t: &T) -> bool) -> ~[T] {\n     let mut result = ~[];\n     for each(v) |elem| {\n         if f(elem) { unsafe { result.push(*elem); } }\n@@ -1752,7 +1752,7 @@ impl<T: Eq> &[T]: ImmutableEqVector<T> {\n }\n \n pub trait ImmutableCopyableVector<T> {\n-    pure fn filter(&self, f: fn(t: &T) -> bool) -> ~[T];\n+    pure fn filtered(&self, f: fn(&T) -> bool) -> ~[T];\n     pure fn rfind(&self, f: fn(t: &T) -> bool) -> Option<T>;\n     pure fn partitioned(&self, f: fn(&T) -> bool) -> (~[T], ~[T]);\n }\n@@ -1767,8 +1767,8 @@ impl<T: Copy> &[T]: ImmutableCopyableVector<T> {\n      * containing only those elements for which `f` returned true.\n      */\n     #[inline]\n-    pure fn filter(&self, f: fn(t: &T) -> bool) -> ~[T] {\n-        filter(*self, f)\n+    pure fn filtered(&self, f: fn(t: &T) -> bool) -> ~[T] {\n+        filtered(*self, f)\n     }\n \n     /**\n@@ -3618,7 +3618,7 @@ mod tests {\n     fn test_filter_fail() {\n         let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n         let mut i = 0;\n-        do filter(v) |_elt| {\n+        do v.filtered |_elt| {\n             if i == 2 {\n                 fail\n             }"}, {"sha": "5f954558668d0e61b08ccb01c61d25e618c9bd34", "filename": "src/libfuzzer/fuzzer.rc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58/src%2Flibfuzzer%2Ffuzzer.rc", "raw_url": "https://github.com/rust-lang/rust/raw/2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58/src%2Flibfuzzer%2Ffuzzer.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Ffuzzer.rc?ref=2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58", "patch": "@@ -262,8 +262,9 @@ fn as_str(f: fn@(+x: io::Writer)) -> ~str {\n fn check_variants_of_ast(crate: ast::crate, codemap: @codemap::CodeMap,\n                          filename: &Path, cx: context) {\n     let stolen = steal(crate, cx.mode);\n-    let extra_exprs = vec::filter(common_exprs(),\n-                                  |a| safe_to_use_expr(*a, cx.mode) );\n+    let extra_exprs = do common_exprs().filtered |a| {\n+        safe_to_use_expr(*a, cx.mode)\n+    };\n     check_variants_T(crate, codemap, filename, ~\"expr\",\n                      extra_exprs + stolen.exprs, pprust::expr_to_str,\n                      replace_expr_in_crate, cx);"}, {"sha": "10c2f2e65f128ea4b520d146058d89e8bebfb1dc", "filename": "src/librustc/front/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58/src%2Flibrustc%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58/src%2Flibrustc%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fconfig.rs?ref=2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58", "patch": "@@ -103,11 +103,11 @@ fn fold_item_underscore(cx: ctxt, +item: ast::item_,\n                         fld: fold::ast_fold) -> ast::item_ {\n     let item = match item {\n         ast::item_impl(a, b, c, methods) => {\n-            let methods = methods.filter(|m| method_in_cfg(cx, *m) );\n+            let methods = methods.filtered(|m| method_in_cfg(cx, *m) );\n             ast::item_impl(a, b, c, methods)\n         }\n         ast::item_trait(ref a, ref b, ref methods) => {\n-            let methods = methods.filter(|m| trait_method_in_cfg(cx, m) );\n+            let methods = methods.filtered(|m| trait_method_in_cfg(cx, m) );\n             ast::item_trait(/*bad*/copy *a, /*bad*/copy *b, methods)\n         }\n         item => item"}, {"sha": "9b024f87f4111fec40330686c58965f0894a9ff6", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58", "patch": "@@ -256,7 +256,7 @@ fn encode_ast(ebml_w: writer::Encoder, item: ast::inlined_item) {\n // inlined items.\n fn simplify_ast(ii: ast::inlined_item) -> ast::inlined_item {\n     fn drop_nested_items(blk: ast::blk_, fld: fold::ast_fold) -> ast::blk_ {\n-        let stmts_sans_items = do vec::filter(blk.stmts) |stmt| {\n+        let stmts_sans_items = do blk.stmts.filtered |stmt| {\n             match stmt.node {\n               ast::stmt_expr(_, _) | ast::stmt_semi(_, _) |\n               ast::stmt_decl(@ast::spanned { node: ast::decl_local(_),"}, {"sha": "66e76452cba95c5b9ac85a0784875bbcf23d077c", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58", "patch": "@@ -174,7 +174,7 @@ fn trans_log(log_ex: @ast::expr,\n \n     let modpath = vec::append(\n         ~[path_mod(ccx.sess.ident_of(/*bad*/copy ccx.link_meta.name))],\n-        vec::filter(bcx.fcx.path, |e|\n+        bcx.fcx.path.filtered(|e|\n             match *e { path_mod(_) => true, _ => false }\n         ));\n     // XXX: Bad copy."}, {"sha": "c8e2865e986e264e18502e362e511c0484599283", "filename": "src/librustdoc/page_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58/src%2Flibrustdoc%2Fpage_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58/src%2Flibrustdoc%2Fpage_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpage_pass.rs?ref=2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58", "patch": "@@ -129,7 +129,7 @@ fn fold_mod(\n \n fn strip_mod(doc: doc::ModDoc) -> doc::ModDoc {\n     doc::ModDoc_({\n-        items: do vec::filter(doc.items) |item| {\n+        items: do doc.items.filtered |item| {\n             match *item {\n               doc::ModTag(_) => false,\n               doc::NmodTag(_) => false,"}, {"sha": "74c4b881eb358366ffb407a57d89a2be0a2d373f", "filename": "src/librustdoc/prune_hidden_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58/src%2Flibrustdoc%2Fprune_hidden_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58/src%2Flibrustdoc%2Fprune_hidden_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fprune_hidden_pass.rs?ref=2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58", "patch": "@@ -43,9 +43,9 @@ fn fold_mod(\n     let doc = fold::default_any_fold_mod(fold, doc);\n \n     doc::ModDoc_({\n-        items: vec::filter(doc.items, |ItemTag| {\n+        items: do doc.items.filtered |ItemTag| {\n             !is_hidden(fold.ctxt, ItemTag.item())\n-        }),\n+        },\n         .. *doc\n     })\n }"}, {"sha": "f3db152696e864979800fcb7662b658891c17053", "filename": "src/librustdoc/prune_private_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58/src%2Flibrustdoc%2Fprune_private_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58/src%2Flibrustdoc%2Fprune_private_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fprune_private_pass.rs?ref=2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58", "patch": "@@ -49,9 +49,9 @@ fn fold_mod(\n     let doc = fold::default_any_fold_mod(fold, doc);\n \n     doc::ModDoc_({\n-        items: do doc.items.filter |ItemTag| {\n+        items: doc.items.filter(|ItemTag| {\n             is_visible(fold.ctxt, ItemTag.item())\n-        },\n+        }),\n         .. *doc\n     })\n }"}, {"sha": "55ac2ae0964537178615311a5e176e20b79912df", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58", "patch": "@@ -316,11 +316,12 @@ pure fn unguarded_pat(a: &arm) -> Option<~[@pat]> {\n }\n \n fn public_methods(ms: ~[@method]) -> ~[@method] {\n-    vec::filter(ms,\n-                |m| match m.vis {\n-                    public => true,\n-                    _   => false\n-                })\n+    do ms.filtered |m| {\n+        match m.vis {\n+            public => true,\n+            _   => false\n+        }\n+    }\n }\n \n // extract a ty_method from a trait_method. if the trait_method is"}, {"sha": "90df6fde8e3ba80711850b1f364ea864db6636dc", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58", "patch": "@@ -121,7 +121,7 @@ fn expand_auto_encode(\n     }\n \n     fn filter_attrs(item: @ast::item) -> @ast::item {\n-        @{attrs: vec::filter(item.attrs, |a| !is_auto_encode(a)),\n+        @{attrs: item.attrs.filtered(|a| !is_auto_encode(a)),\n           .. *item}\n     }\n \n@@ -185,7 +185,7 @@ fn expand_auto_decode(\n     }\n \n     fn filter_attrs(item: @ast::item) -> @ast::item {\n-        @{attrs: vec::filter(item.attrs, |a| !is_auto_decode(a)),\n+        @{attrs: item.attrs.filtered(|a| !is_auto_decode(a)),\n           .. *item}\n     }\n "}]}