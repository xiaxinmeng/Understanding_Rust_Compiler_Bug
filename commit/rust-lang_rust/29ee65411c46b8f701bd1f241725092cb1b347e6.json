{"sha": "29ee65411c46b8f701bd1f241725092cb1b347e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ZWU2NTQxMWM0NmI4ZjcwMWJkMWYyNDE3MjUwOTJjYjFiMzQ3ZTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-18T11:49:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-18T11:49:38Z"}, "message": "Auto merge of #52364 - ljedrz:mir_remove_clone, r=RalfJung\n\nRemove a clone in mir/transform/add_validation\n\nRemove a clone of `mir.local_decls`.", "tree": {"sha": "c3f737fa37a58a417dc0d12df62cd7c94dc6d365", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3f737fa37a58a417dc0d12df62cd7c94dc6d365"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29ee65411c46b8f701bd1f241725092cb1b347e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29ee65411c46b8f701bd1f241725092cb1b347e6", "html_url": "https://github.com/rust-lang/rust/commit/29ee65411c46b8f701bd1f241725092cb1b347e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29ee65411c46b8f701bd1f241725092cb1b347e6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38168a77d7174baf59334f8c196d6ae4136b928a", "url": "https://api.github.com/repos/rust-lang/rust/commits/38168a77d7174baf59334f8c196d6ae4136b928a", "html_url": "https://github.com/rust-lang/rust/commit/38168a77d7174baf59334f8c196d6ae4136b928a"}, {"sha": "d5219a7caa5aedb27f93ea4af17b5a6678558437", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5219a7caa5aedb27f93ea4af17b5a6678558437", "html_url": "https://github.com/rust-lang/rust/commit/d5219a7caa5aedb27f93ea4af17b5a6678558437"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "6ffd07915d2482e2374bc90b0f58c15b0bc23996", "filename": "src/librustc_mir/transform/add_validation.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/29ee65411c46b8f701bd1f241725092cb1b347e6/src%2Flibrustc_mir%2Ftransform%2Fadd_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ee65411c46b8f701bd1f241725092cb1b347e6/src%2Flibrustc_mir%2Ftransform%2Fadd_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_validation.rs?ref=29ee65411c46b8f701bd1f241725092cb1b347e6", "patch": "@@ -196,12 +196,13 @@ impl MirPass for AddValidation {\n             return;\n         }\n         let restricted_validation = emit_validate == 1 && fn_contains_unsafe(tcx, src);\n-        let local_decls = mir.local_decls.clone(); // FIXME: Find a way to get rid of this clone.\n+        let (span, arg_count) = (mir.span, mir.arg_count);\n+        let (basic_blocks, local_decls) = mir.basic_blocks_and_local_decls_mut();\n \n         // Convert a place to a validation operand.\n         let place_to_operand = |place: Place<'tcx>| -> ValidationOperand<'tcx, Place<'tcx>> {\n-            let (re, mutbl) = place_context(&place, &local_decls, tcx);\n-            let ty = place.ty(&local_decls, tcx).to_ty(tcx);\n+            let (re, mutbl) = place_context(&place, local_decls, tcx);\n+            let ty = place.ty(local_decls, tcx).to_ty(tcx);\n             ValidationOperand { place, ty, re, mutbl }\n         };\n \n@@ -232,20 +233,20 @@ impl MirPass for AddValidation {\n         {\n             let source_info = SourceInfo {\n                 scope: OUTERMOST_SOURCE_SCOPE,\n-                span: mir.span, // FIXME: Consider using just the span covering the function\n-                                // argument declaration.\n+                span: span, // FIXME: Consider using just the span covering the function\n+                            // argument declaration.\n             };\n             // Gather all arguments, skip return value.\n-            let operands = mir.local_decls.iter_enumerated().skip(1).take(mir.arg_count)\n+            let operands = local_decls.iter_enumerated().skip(1).take(arg_count)\n                     .map(|(local, _)| place_to_operand(Place::Local(local))).collect();\n-            emit_acquire(&mut mir.basic_blocks_mut()[START_BLOCK], source_info, operands);\n+            emit_acquire(&mut basic_blocks[START_BLOCK], source_info, operands);\n         }\n \n         // PART 2\n         // Add ReleaseValid/AcquireValid around function call terminators.  We don't use a visitor\n         // because we need to access the block that a Call jumps to.\n         let mut returns : Vec<(SourceInfo, Place<'tcx>, BasicBlock)> = Vec::new();\n-        for block_data in mir.basic_blocks_mut() {\n+        for block_data in basic_blocks.iter_mut() {\n             match block_data.terminator {\n                 Some(Terminator { kind: TerminatorKind::Call { ref args, ref destination, .. },\n                                   source_info }) => {\n@@ -298,7 +299,7 @@ impl MirPass for AddValidation {\n         // Now we go over the returns we collected to acquire the return values.\n         for (source_info, dest_place, dest_block) in returns {\n             emit_acquire(\n-                &mut mir.basic_blocks_mut()[dest_block],\n+                &mut basic_blocks[dest_block],\n                 source_info,\n                 vec![place_to_operand(dest_place)]\n             );\n@@ -312,7 +313,7 @@ impl MirPass for AddValidation {\n         // PART 3\n         // Add ReleaseValid/AcquireValid around Ref and Cast.  Again an iterator does not seem very\n         // suited as we need to add new statements before and after each Ref.\n-        for block_data in mir.basic_blocks_mut() {\n+        for block_data in basic_blocks {\n             // We want to insert statements around Ref commands as we iterate.  To this end, we\n             // iterate backwards using indices.\n             for i in (0..block_data.statements.len()).rev() {"}]}