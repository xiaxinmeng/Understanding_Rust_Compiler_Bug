{"sha": "5b54a4f03b9a8d40128e990b17f74b0d40c5f321", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNTRhNGYwM2I5YThkNDAxMjhlOTkwYjE3Zjc0YjBkNDBjNWYzMjE=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-04-18T20:54:27Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-04-20T13:37:49Z"}, "message": "TRPL copyedits: strings", "tree": {"sha": "b487a16773072c2abe9d8f1bef219b1a5522d2b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b487a16773072c2abe9d8f1bef219b1a5522d2b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b54a4f03b9a8d40128e990b17f74b0d40c5f321", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b54a4f03b9a8d40128e990b17f74b0d40c5f321", "html_url": "https://github.com/rust-lang/rust/commit/5b54a4f03b9a8d40128e990b17f74b0d40c5f321", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b54a4f03b9a8d40128e990b17f74b0d40c5f321/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73d3d6855042696c814e69570d03f70c3fd36409", "url": "https://api.github.com/repos/rust-lang/rust/commits/73d3d6855042696c814e69570d03f70c3fd36409", "html_url": "https://github.com/rust-lang/rust/commit/73d3d6855042696c814e69570d03f70c3fd36409"}], "stats": {"total": 114, "additions": 91, "deletions": 23}, "files": [{"sha": "6ed4c7cb1b379bea10ec9e1d1e1546cb965ed1c9", "filename": "src/doc/trpl/strings.md", "status": "modified", "additions": 91, "deletions": 23, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/5b54a4f03b9a8d40128e990b17f74b0d40c5f321/src%2Fdoc%2Ftrpl%2Fstrings.md", "raw_url": "https://github.com/rust-lang/rust/raw/5b54a4f03b9a8d40128e990b17f74b0d40c5f321/src%2Fdoc%2Ftrpl%2Fstrings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fstrings.md?ref=5b54a4f03b9a8d40128e990b17f74b0d40c5f321", "patch": "@@ -1,36 +1,34 @@\n % Strings\n \n-Strings are an important concept for any programmer to master. Rust's string\n+Strings are an important concept for any programmer to master. Rust\u2019s string\n handling system is a bit different from other languages, due to its systems\n focus. Any time you have a data structure of variable size, things can get\n-tricky, and strings are a re-sizable data structure. That being said, Rust's\n+tricky, and strings are a re-sizable data structure. That being said, Rust\u2019s\n strings also work differently than in some other systems languages, such as C.\n \n-Let's dig into the details. A *string* is a sequence of Unicode scalar values\n-encoded as a stream of UTF-8 bytes. All strings are guaranteed to be\n-validly encoded UTF-8 sequences. Additionally, strings are not null-terminated\n-and can contain null bytes.\n+Let\u2019s dig into the details. A \u2018string\u2019 is a sequence of Unicode scalar values\n+encoded as a stream of UTF-8 bytes. All strings are guaranteed to be a valid\n+encoding of UTF-8 sequences. Additionally, unlike some systems languages,\n+strings are not null-terminated and can contain null bytes.\n \n-Rust has two main types of strings: `&str` and `String`.\n+Rust has two main types of strings: `&str` and `String`. Let\u2019s talk about\n+`&str` first. These are called \u2018string slices\u2019. String literals are of the type\n+`&'static str`:\n \n-The first kind is a `&str`. These are called *string slices*. String literals\n-are of the type `&str`:\n-\n-```{rust}\n-let string = \"Hello there.\"; // string: &str\n+```rust\n+let string = \"Hello there.\"; // string: &'static str\n ```\n \n-This string is statically allocated, meaning that it's saved inside our\n+This string is statically allocated, meaning that it\u2019s saved inside our\n compiled program, and exists for the entire duration it runs. The `string`\n binding is a reference to this statically allocated string. String slices\n have a fixed size, and cannot be mutated.\n \n-A `String`, on the other hand, is a heap-allocated string. This string\n-is growable, and is also guaranteed to be UTF-8. `String`s are\n-commonly created by converting from a string slice using the\n-`to_string` method.\n+A `String`, on the other hand, is a heap-allocated string. This string is\n+growable, and is also guaranteed to be UTF-8. `String`s are commonly created by\n+converting from a string slice using the `to_string` method.\n \n-```{rust}\n+```rust\n let mut s = \"Hello\".to_string(); // mut s: String\n println!(\"{}\", s);\n \n@@ -54,8 +52,78 @@ fn main() {\n Viewing a `String` as a `&str` is cheap, but converting the `&str` to a\n `String` involves allocating memory. No reason to do that unless you have to!\n \n-That's the basics of strings in Rust! They're probably a bit more complicated\n-than you are used to, if you come from a scripting language, but when the\n-low-level details matter, they really matter. Just remember that `String`s\n-allocate memory and control their data, while `&str`s are a reference to\n-another string, and you'll be all set.\n+## Indexing\n+\n+Because strings are valid UTF-8, strings do not support indexing:\n+\n+```rust,ignore\n+let s = \"hello\";\n+\n+println!(\"The first letter of s is {}\", s[0]); // ERROR!!!\n+```\n+\n+Usually, access to a vector with `[]` is very fast. But, because each character\n+in a UTF-8 encoded string can be multiple bytes, you have to walk over the\n+string to find the n\u1d57\u02b0 letter of a string. This is a significantly more\n+expensive operation, and we don\u2019t want to be misleading. Furthermore, \u2018letter\u2019\n+isn\u2019t something defined in Unicode, exactly. We can choose to look at a string as\n+individual bytes, or as codepoints:\n+\n+```rust\n+let hachiko = \"\u5fe0\u72ac\u30cf\u30c1\u516c\";\n+\n+for b in hachiko.as_bytes() {\n+print!(\"{}, \", b);\n+}\n+\n+println!(\"\");\n+\n+for c in hachiko.chars() {\n+print!(\"{}, \", c);\n+}\n+\n+println!(\"\");\n+```\n+\n+This prints:\n+\n+```text\n+229, 191, 160, 231, 138, 172, 227, 131, 143, 227, 131, 129, 229, 133, 172, \n+\u5fe0, \u72ac, \u30cf, \u30c1, \u516c, \n+```\n+\n+As you can see, there are more bytes than `char`s.\n+\n+You can get something similar to an index like this:\n+\n+```rust\n+# let hachiko = \"\u5fe0\u72ac\u30cf\u30c1\u516c\";\n+let dog = hachiko.chars().nth(1); // kinda like hachiko[1]\n+```\n+\n+This emphasizes that we have to go through the whole list of `chars`.\n+\n+## Concatenation\n+\n+If you have a `String`, you can concatenate a `&str` to the end of it:\n+\n+```rust\n+let hello = \"Hello \".to_string();\n+let world = \"world!\";\n+\n+let hello_world = hello + world;\n+```\n+\n+But if you have two `String`s, you need an `&`:\n+\n+```rust\n+let hello = \"Hello \".to_string();\n+let world = \"world!\".to_string();\n+\n+let hello_world = hello + &world;\n+```\n+\n+This is because `&String` can automatically coerece to a `&str`. This is a\n+feature called \u2018[`Deref` coercions][dc]\u2019.\n+\n+[dc]: deref-coercions.html"}]}