{"sha": "1e88f130a347f8b223031eafe75c0772ccfec00c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlODhmMTMwYTM0N2Y4YjIyMzAzMWVhZmU3NWMwNzcyY2NmZWMwMGM=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-06-08T12:14:45Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-06-09T12:04:36Z"}, "message": "Stop allowing `Indirect(..)` values to be propagated\n\nCloses #72679\nCloses #72372\nCloses #72285", "tree": {"sha": "9e3bdcb997a9f3d9a298e7cc30b4c238ca13e4fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e3bdcb997a9f3d9a298e7cc30b4c238ca13e4fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e88f130a347f8b223031eafe75c0772ccfec00c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e88f130a347f8b223031eafe75c0772ccfec00c", "html_url": "https://github.com/rust-lang/rust/commit/1e88f130a347f8b223031eafe75c0772ccfec00c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e88f130a347f8b223031eafe75c0772ccfec00c/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20abc70e04eefa252e5a8bfe934cb54c51c1da37", "url": "https://api.github.com/repos/rust-lang/rust/commits/20abc70e04eefa252e5a8bfe934cb54c51c1da37", "html_url": "https://github.com/rust-lang/rust/commit/20abc70e04eefa252e5a8bfe934cb54c51c1da37"}], "stats": {"total": 156, "additions": 73, "deletions": 83}, "files": [{"sha": "39548d8a535f73f1187b64214adbf75e3207191c", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e88f130a347f8b223031eafe75c0772ccfec00c/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e88f130a347f8b223031eafe75c0772ccfec00c/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=1e88f130a347f8b223031eafe75c0772ccfec00c", "patch": "@@ -707,7 +707,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                 ScalarMaybeUninit::Scalar(l),\n                 ScalarMaybeUninit::Scalar(r),\n             )) => l.is_bits() && r.is_bits(),\n-            interpret::Operand::Indirect(_) if mir_opt_level >= 2 => true,\n             _ => false,\n         }\n     }"}, {"sha": "13e8eb3e44e1aeb03471c8e2506a38b054bd7601", "filename": "src/test/mir-opt/const_prop/discriminant.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1e88f130a347f8b223031eafe75c0772ccfec00c/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e88f130a347f8b223031eafe75c0772ccfec00c/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.rs?ref=1e88f130a347f8b223031eafe75c0772ccfec00c", "patch": "@@ -1,5 +1,10 @@\n // compile-flags: -O\n \n+// FIXME(wesleywiser): Ideally, we could const-prop away all of this and just be left with\n+// `let x = 42` but that doesn't work because const-prop doesn't support `Operand::Indirect`\n+// and `InterpCx::eval_place()` always forces an allocation which creates the `Indirect`.\n+// Fixing either of those will allow us to const-prop this away.\n+\n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n // EMIT_MIR rustc.main.ConstProp.diff\n fn main() {"}, {"sha": "1c873f53f378a1fa4962928eac7be68df58490c8", "filename": "src/test/mir-opt/const_prop/discriminant/32bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 34, "deletions": 41, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/1e88f130a347f8b223031eafe75c0772ccfec00c/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1e88f130a347f8b223031eafe75c0772ccfec00c/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F32bit%2Frustc.main.ConstProp.diff?ref=1e88f130a347f8b223031eafe75c0772ccfec00c", "patch": "@@ -2,100 +2,93 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/discriminant.rs:5:11: 5:11\n-      let _1: i32;                         // in scope 0 at $DIR/discriminant.rs:6:9: 6:10\n-      let mut _2: i32;                     // in scope 0 at $DIR/discriminant.rs:6:13: 6:64\n-      let mut _3: std::option::Option<bool>; // in scope 0 at $DIR/discriminant.rs:6:34: 6:44\n-      let mut _4: isize;                   // in scope 0 at $DIR/discriminant.rs:6:21: 6:31\n+      let mut _0: ();                      // return place in scope 0 at $DIR/discriminant.rs:10:11: 10:11\n+      let _1: i32;                         // in scope 0 at $DIR/discriminant.rs:11:9: 11:10\n+      let mut _2: i32;                     // in scope 0 at $DIR/discriminant.rs:11:13: 11:64\n+      let mut _3: std::option::Option<bool>; // in scope 0 at $DIR/discriminant.rs:11:34: 11:44\n+      let mut _4: isize;                   // in scope 0 at $DIR/discriminant.rs:11:21: 11:31\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/discriminant.rs:6:9: 6:10\n+          debug x => _1;                   // in scope 1 at $DIR/discriminant.rs:11:9: 11:10\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/discriminant.rs:6:9: 6:10\n-          StorageLive(_2);                 // scope 0 at $DIR/discriminant.rs:6:13: 6:64\n-          StorageLive(_3);                 // scope 0 at $DIR/discriminant.rs:6:34: 6:44\n--         _3 = std::option::Option::<bool>::Some(const true); // scope 0 at $DIR/discriminant.rs:6:34: 6:44\n-+         _3 = const std::option::Option::<bool>::Some(true); // scope 0 at $DIR/discriminant.rs:6:34: 6:44\n+          StorageLive(_1);                 // scope 0 at $DIR/discriminant.rs:11:9: 11:10\n+          StorageLive(_2);                 // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n+          StorageLive(_3);                 // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n+-         _3 = std::option::Option::<bool>::Some(const true); // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n++         _3 = const std::option::Option::<bool>::Some(true); // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n                                            // ty::Const\n -                                          // + ty: bool\n +                                          // + ty: std::option::Option<bool>\n                                            // + val: Value(Scalar(0x01))\n                                            // mir::Constant\n--                                          // + span: $DIR/discriminant.rs:6:39: 6:43\n+-                                          // + span: $DIR/discriminant.rs:11:39: 11:43\n -                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n--         _4 = discriminant(_3);           // scope 0 at $DIR/discriminant.rs:6:21: 6:31\n--         switchInt(move _4) -> [1isize: bb2, otherwise: bb1]; // scope 0 at $DIR/discriminant.rs:6:21: 6:31\n-+                                          // + span: $DIR/discriminant.rs:6:34: 6:44\n+-         _4 = discriminant(_3);           // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n+-         switchInt(move _4) -> [1isize: bb2, otherwise: bb1]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n++                                          // + span: $DIR/discriminant.rs:11:34: 11:44\n +                                          // + literal: Const { ty: std::option::Option<bool>, val: Value(Scalar(0x01)) }\n-+         _4 = const 1isize;               // scope 0 at $DIR/discriminant.rs:6:21: 6:31\n++         _4 = const 1isize;               // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n +                                          // ty::Const\n +                                          // + ty: isize\n +                                          // + val: Value(Scalar(0x00000001))\n +                                          // mir::Constant\n-+                                          // + span: $DIR/discriminant.rs:6:21: 6:31\n++                                          // + span: $DIR/discriminant.rs:11:21: 11:31\n +                                          // + literal: Const { ty: isize, val: Value(Scalar(0x00000001)) }\n-+         switchInt(const 1isize) -> [1isize: bb2, otherwise: bb1]; // scope 0 at $DIR/discriminant.rs:6:21: 6:31\n++         switchInt(const 1isize) -> [1isize: bb2, otherwise: bb1]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n +                                          // ty::Const\n +                                          // + ty: isize\n +                                          // + val: Value(Scalar(0x00000001))\n +                                          // mir::Constant\n-+                                          // + span: $DIR/discriminant.rs:6:21: 6:31\n++                                          // + span: $DIR/discriminant.rs:11:21: 11:31\n +                                          // + literal: Const { ty: isize, val: Value(Scalar(0x00000001)) }\n       }\n   \n       bb1: {\n-          _2 = const 10i32;                // scope 0 at $DIR/discriminant.rs:6:59: 6:61\n+          _2 = const 10i32;                // scope 0 at $DIR/discriminant.rs:11:59: 11:61\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000000a))\n                                            // mir::Constant\n-                                           // + span: $DIR/discriminant.rs:6:59: 6:61\n+                                           // + span: $DIR/discriminant.rs:11:59: 11:61\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x0000000a)) }\n-          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:6:13: 6:64\n+          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n       }\n   \n       bb2: {\n--         switchInt(((_3 as Some).0: bool)) -> [false: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:6:26: 6:30\n-+         switchInt(const true) -> [false: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:6:26: 6:30\n-+                                          // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x01))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/discriminant.rs:6:26: 6:30\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+          switchInt(((_3 as Some).0: bool)) -> [false: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:11:26: 11:30\n       }\n   \n       bb3: {\n-          _2 = const 42i32;                // scope 0 at $DIR/discriminant.rs:6:47: 6:49\n+          _2 = const 42i32;                // scope 0 at $DIR/discriminant.rs:11:47: 11:49\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000002a))\n                                            // mir::Constant\n-                                           // + span: $DIR/discriminant.rs:6:47: 6:49\n+                                           // + span: $DIR/discriminant.rs:11:47: 11:49\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n-          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:6:13: 6:64\n+          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n       }\n   \n       bb4: {\n-          _1 = Add(move _2, const 0i32);   // scope 0 at $DIR/discriminant.rs:6:13: 6:68\n+          _1 = Add(move _2, const 0i32);   // scope 0 at $DIR/discriminant.rs:11:13: 11:68\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000000))\n                                            // mir::Constant\n-                                           // + span: $DIR/discriminant.rs:6:67: 6:68\n+                                           // + span: $DIR/discriminant.rs:11:67: 11:68\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n-          StorageDead(_2);                 // scope 0 at $DIR/discriminant.rs:6:67: 6:68\n-          StorageDead(_3);                 // scope 0 at $DIR/discriminant.rs:6:68: 6:69\n-          _0 = const ();                   // scope 0 at $DIR/discriminant.rs:5:11: 7:2\n+          StorageDead(_2);                 // scope 0 at $DIR/discriminant.rs:11:67: 11:68\n+          StorageDead(_3);                 // scope 0 at $DIR/discriminant.rs:11:68: 11:69\n+          _0 = const ();                   // scope 0 at $DIR/discriminant.rs:10:11: 12:2\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n-                                           // + span: $DIR/discriminant.rs:5:11: 7:2\n+                                           // + span: $DIR/discriminant.rs:10:11: 12:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          StorageDead(_1);                 // scope 0 at $DIR/discriminant.rs:7:1: 7:2\n-          return;                          // scope 0 at $DIR/discriminant.rs:7:2: 7:2\n+          StorageDead(_1);                 // scope 0 at $DIR/discriminant.rs:12:1: 12:2\n+          return;                          // scope 0 at $DIR/discriminant.rs:12:2: 12:2\n       }\n   }\n   "}, {"sha": "75b4b7e5a62bab836ca891969e06599a1278a3fd", "filename": "src/test/mir-opt/const_prop/discriminant/64bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 34, "deletions": 41, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/1e88f130a347f8b223031eafe75c0772ccfec00c/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1e88f130a347f8b223031eafe75c0772ccfec00c/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F64bit%2Frustc.main.ConstProp.diff?ref=1e88f130a347f8b223031eafe75c0772ccfec00c", "patch": "@@ -2,100 +2,93 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/discriminant.rs:5:11: 5:11\n-      let _1: i32;                         // in scope 0 at $DIR/discriminant.rs:6:9: 6:10\n-      let mut _2: i32;                     // in scope 0 at $DIR/discriminant.rs:6:13: 6:64\n-      let mut _3: std::option::Option<bool>; // in scope 0 at $DIR/discriminant.rs:6:34: 6:44\n-      let mut _4: isize;                   // in scope 0 at $DIR/discriminant.rs:6:21: 6:31\n+      let mut _0: ();                      // return place in scope 0 at $DIR/discriminant.rs:10:11: 10:11\n+      let _1: i32;                         // in scope 0 at $DIR/discriminant.rs:11:9: 11:10\n+      let mut _2: i32;                     // in scope 0 at $DIR/discriminant.rs:11:13: 11:64\n+      let mut _3: std::option::Option<bool>; // in scope 0 at $DIR/discriminant.rs:11:34: 11:44\n+      let mut _4: isize;                   // in scope 0 at $DIR/discriminant.rs:11:21: 11:31\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/discriminant.rs:6:9: 6:10\n+          debug x => _1;                   // in scope 1 at $DIR/discriminant.rs:11:9: 11:10\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/discriminant.rs:6:9: 6:10\n-          StorageLive(_2);                 // scope 0 at $DIR/discriminant.rs:6:13: 6:64\n-          StorageLive(_3);                 // scope 0 at $DIR/discriminant.rs:6:34: 6:44\n--         _3 = std::option::Option::<bool>::Some(const true); // scope 0 at $DIR/discriminant.rs:6:34: 6:44\n-+         _3 = const std::option::Option::<bool>::Some(true); // scope 0 at $DIR/discriminant.rs:6:34: 6:44\n+          StorageLive(_1);                 // scope 0 at $DIR/discriminant.rs:11:9: 11:10\n+          StorageLive(_2);                 // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n+          StorageLive(_3);                 // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n+-         _3 = std::option::Option::<bool>::Some(const true); // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n++         _3 = const std::option::Option::<bool>::Some(true); // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n                                            // ty::Const\n -                                          // + ty: bool\n +                                          // + ty: std::option::Option<bool>\n                                            // + val: Value(Scalar(0x01))\n                                            // mir::Constant\n--                                          // + span: $DIR/discriminant.rs:6:39: 6:43\n+-                                          // + span: $DIR/discriminant.rs:11:39: 11:43\n -                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n--         _4 = discriminant(_3);           // scope 0 at $DIR/discriminant.rs:6:21: 6:31\n--         switchInt(move _4) -> [1isize: bb2, otherwise: bb1]; // scope 0 at $DIR/discriminant.rs:6:21: 6:31\n-+                                          // + span: $DIR/discriminant.rs:6:34: 6:44\n+-         _4 = discriminant(_3);           // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n+-         switchInt(move _4) -> [1isize: bb2, otherwise: bb1]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n++                                          // + span: $DIR/discriminant.rs:11:34: 11:44\n +                                          // + literal: Const { ty: std::option::Option<bool>, val: Value(Scalar(0x01)) }\n-+         _4 = const 1isize;               // scope 0 at $DIR/discriminant.rs:6:21: 6:31\n++         _4 = const 1isize;               // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n +                                          // ty::Const\n +                                          // + ty: isize\n +                                          // + val: Value(Scalar(0x0000000000000001))\n +                                          // mir::Constant\n-+                                          // + span: $DIR/discriminant.rs:6:21: 6:31\n++                                          // + span: $DIR/discriminant.rs:11:21: 11:31\n +                                          // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000001)) }\n-+         switchInt(const 1isize) -> [1isize: bb2, otherwise: bb1]; // scope 0 at $DIR/discriminant.rs:6:21: 6:31\n++         switchInt(const 1isize) -> [1isize: bb2, otherwise: bb1]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n +                                          // ty::Const\n +                                          // + ty: isize\n +                                          // + val: Value(Scalar(0x0000000000000001))\n +                                          // mir::Constant\n-+                                          // + span: $DIR/discriminant.rs:6:21: 6:31\n++                                          // + span: $DIR/discriminant.rs:11:21: 11:31\n +                                          // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000001)) }\n       }\n   \n       bb1: {\n-          _2 = const 10i32;                // scope 0 at $DIR/discriminant.rs:6:59: 6:61\n+          _2 = const 10i32;                // scope 0 at $DIR/discriminant.rs:11:59: 11:61\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000000a))\n                                            // mir::Constant\n-                                           // + span: $DIR/discriminant.rs:6:59: 6:61\n+                                           // + span: $DIR/discriminant.rs:11:59: 11:61\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x0000000a)) }\n-          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:6:13: 6:64\n+          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n       }\n   \n       bb2: {\n--         switchInt(((_3 as Some).0: bool)) -> [false: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:6:26: 6:30\n-+         switchInt(const true) -> [false: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:6:26: 6:30\n-+                                          // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x01))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/discriminant.rs:6:26: 6:30\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+          switchInt(((_3 as Some).0: bool)) -> [false: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:11:26: 11:30\n       }\n   \n       bb3: {\n-          _2 = const 42i32;                // scope 0 at $DIR/discriminant.rs:6:47: 6:49\n+          _2 = const 42i32;                // scope 0 at $DIR/discriminant.rs:11:47: 11:49\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000002a))\n                                            // mir::Constant\n-                                           // + span: $DIR/discriminant.rs:6:47: 6:49\n+                                           // + span: $DIR/discriminant.rs:11:47: 11:49\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n-          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:6:13: 6:64\n+          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n       }\n   \n       bb4: {\n-          _1 = Add(move _2, const 0i32);   // scope 0 at $DIR/discriminant.rs:6:13: 6:68\n+          _1 = Add(move _2, const 0i32);   // scope 0 at $DIR/discriminant.rs:11:13: 11:68\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000000))\n                                            // mir::Constant\n-                                           // + span: $DIR/discriminant.rs:6:67: 6:68\n+                                           // + span: $DIR/discriminant.rs:11:67: 11:68\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n-          StorageDead(_2);                 // scope 0 at $DIR/discriminant.rs:6:67: 6:68\n-          StorageDead(_3);                 // scope 0 at $DIR/discriminant.rs:6:68: 6:69\n-          _0 = const ();                   // scope 0 at $DIR/discriminant.rs:5:11: 7:2\n+          StorageDead(_2);                 // scope 0 at $DIR/discriminant.rs:11:67: 11:68\n+          StorageDead(_3);                 // scope 0 at $DIR/discriminant.rs:11:68: 11:69\n+          _0 = const ();                   // scope 0 at $DIR/discriminant.rs:10:11: 12:2\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n-                                           // + span: $DIR/discriminant.rs:5:11: 7:2\n+                                           // + span: $DIR/discriminant.rs:10:11: 12:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          StorageDead(_1);                 // scope 0 at $DIR/discriminant.rs:7:1: 7:2\n-          return;                          // scope 0 at $DIR/discriminant.rs:7:2: 7:2\n+          StorageDead(_1);                 // scope 0 at $DIR/discriminant.rs:12:1: 12:2\n+          return;                          // scope 0 at $DIR/discriminant.rs:12:2: 12:2\n       }\n   }\n   "}]}