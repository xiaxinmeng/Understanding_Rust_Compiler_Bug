{"sha": "088ab03fdbdd2fad29b678f5eeaadde4e15cb205", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4OGFiMDNmZGJkZDJmYWQyOWI2NzhmNWVlYWFkZGU0ZTE1Y2IyMDU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-06-03T22:26:03Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-06-03T22:42:42Z"}, "message": "Add spans to fields, args, methods. Improve pp of same.", "tree": {"sha": "00a3a6b77754b9788cffe0bff534f2d6530f6dc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00a3a6b77754b9788cffe0bff534f2d6530f6dc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/088ab03fdbdd2fad29b678f5eeaadde4e15cb205", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/088ab03fdbdd2fad29b678f5eeaadde4e15cb205", "html_url": "https://github.com/rust-lang/rust/commit/088ab03fdbdd2fad29b678f5eeaadde4e15cb205", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/088ab03fdbdd2fad29b678f5eeaadde4e15cb205/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8235e76a473f6c650ad6a96dca0b5ef84ebdac4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8235e76a473f6c650ad6a96dca0b5ef84ebdac4a", "html_url": "https://github.com/rust-lang/rust/commit/8235e76a473f6c650ad6a96dca0b5ef84ebdac4a"}], "stats": {"total": 78, "additions": 40, "deletions": 38}, "files": [{"sha": "92f12c3dc1b4e9d862d4912f433af62f5d29aba8", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/088ab03fdbdd2fad29b678f5eeaadde4e15cb205/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088ab03fdbdd2fad29b678f5eeaadde4e15cb205/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=088ab03fdbdd2fad29b678f5eeaadde4e15cb205", "patch": "@@ -300,11 +300,15 @@ tag lit_ {\n // type structure in middle/ty.rs as well.\n \n type mt = rec(@ty ty, mutability mut);\n-type ty_field = rec(ident ident, mt mt);\n-type ty_arg = rec(mode mode, @ty ty);\n-type ty_method = rec(proto proto, ident ident,\n+type ty_field_ = rec(ident ident, mt mt);\n+type ty_arg_ = rec(mode mode, @ty ty);\n+type ty_method_ = rec(proto proto, ident ident,\n                      vec[ty_arg] inputs, @ty output,\n                      controlflow cf);\n+type ty_field = spanned[ty_field_];\n+type ty_arg = spanned[ty_arg_];\n+type ty_method = spanned[ty_method_];\n+\n type ty = spanned[ty_];\n tag ty_ {\n     ty_nil;"}, {"sha": "dbfdea89c2153ff6b88dc851875459bc4e1409b3", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/088ab03fdbdd2fad29b678f5eeaadde4e15cb205/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088ab03fdbdd2fad29b678f5eeaadde4e15cb205/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=088ab03fdbdd2fad29b678f5eeaadde4e15cb205", "patch": "@@ -287,7 +287,6 @@ fn eat_word(&parser p, &str word) -> bool {\n                 p.bump();\n                 ret true;\n             } else { ret false; }\n-            \n         }\n         case (_) { ret false; }\n     }\n@@ -312,7 +311,8 @@ fn check_bad_word(&parser p) {\n \n fn parse_ty_fn(ast::proto proto, &parser p, uint lo)\n     -> ast::ty_ {\n-    fn parse_fn_input_ty(&parser p) -> rec(ast::mode mode, @ast::ty ty) {\n+    fn parse_fn_input_ty(&parser p) -> ast::ty_arg {\n+        auto lo = p.get_lo_pos();\n         auto mode;\n         if (p.peek() == token::BINOP(token::AND)) {\n             p.bump();\n@@ -332,14 +332,12 @@ fn parse_ty_fn(ast::proto proto, &parser p, uint lo)\n             case (_) { /* no param name present */ }\n         }\n \n-        ret rec(mode=mode, ty=t);\n+        ret spanned(lo, t.span.hi, rec(mode=mode, ty=t));\n     }\n \n     auto lo = p.get_lo_pos();\n-\n-    auto f = parse_fn_input_ty; // FIXME: trans_const_lval bug\n-    auto inputs = parse_seq[rec(ast::mode mode, @ast::ty ty)](token::LPAREN,\n-        token::RPAREN, some(token::COMMA), f, p);\n+    auto inputs = parse_seq(token::LPAREN, token::RPAREN,\n+                            some(token::COMMA), parse_fn_input_ty, p);\n \n     // FIXME: dropping constrs on the floor at the moment.\n     // pick them up when they're used by typestate pass.\n@@ -383,8 +381,9 @@ fn parse_ty_obj(&parser p, &mutable uint hi) -> ast::ty_ {\n         expect(p, token::SEMI);\n         alt (f) {\n             case (ast::ty_fn(?proto, ?inputs, ?output, ?cf)) {\n-                ret rec(proto=proto, ident=ident,\n-                        inputs=inputs, output=output, cf=cf);\n+                ret spanned(flo, output.span.hi,\n+                            rec(proto=proto, ident=ident,\n+                                inputs=inputs, output=output, cf=cf));\n             }\n         }\n         fail;\n@@ -405,9 +404,10 @@ fn parse_mt(&parser p) -> ast::mt {\n }\n \n fn parse_ty_field(&parser p) -> ast::ty_field {\n+    auto lo = p.get_lo_pos();\n     auto mt = parse_mt(p);\n     auto id = parse_ident(p);\n-    ret rec(ident=id, mt=mt);\n+    ret spanned(lo, mt.ty.span.hi, rec(ident=id, mt=mt));\n }\n \n fn parse_constr_arg(&parser p) -> @ast::constr_arg {"}, {"sha": "b93e0765d0d0b749f245b61d33c29e528cd75d49", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/088ab03fdbdd2fad29b678f5eeaadde4e15cb205/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088ab03fdbdd2fad29b678f5eeaadde4e15cb205/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=088ab03fdbdd2fad29b678f5eeaadde4e15cb205", "patch": "@@ -229,10 +229,10 @@ fn ast_mode_to_mode(ast::mode mode) -> ty::mode {\n fn ast_ty_to_ty(&ty::ctxt tcx, &ty_getter getter, &@ast::ty ast_ty) -> ty::t {\n     fn ast_arg_to_arg(&ty::ctxt tcx,\n                       &ty_getter getter,\n-                      &rec(ast::mode mode, @ast::ty ty) arg)\n+                      &ast::ty_arg arg)\n             -> rec(ty::mode mode, ty::t ty) {\n-        auto ty_mode = ast_mode_to_mode(arg.mode);\n-        ret rec(mode=ty_mode, ty=ast_ty_to_ty(tcx, getter, arg.ty));\n+        auto ty_mode = ast_mode_to_mode(arg.node.mode);\n+        ret rec(mode=ty_mode, ty=ast_ty_to_ty(tcx, getter, arg.node.ty));\n     }\n \n     fn ast_mt_to_mt(&ty::ctxt tcx,\n@@ -306,8 +306,8 @@ fn ast_ty_to_ty(&ty::ctxt tcx, &ty_getter getter, &@ast::ty ast_ty) -> ty::t {\n         case (ast::ty_rec(?fields)) {\n             let vec[field] flds = [];\n             for (ast::ty_field f in fields) {\n-                auto tm = ast_mt_to_mt(tcx, getter, f.mt);\n-                vec::push[field](flds, rec(ident=f.ident, mt=tm));\n+                auto tm = ast_mt_to_mt(tcx, getter, f.node.mt);\n+                vec::push[field](flds, rec(ident=f.node.ident, mt=tm));\n             }\n             typ = ty::mk_rec(tcx, flds);\n         }\n@@ -342,14 +342,14 @@ fn ast_ty_to_ty(&ty::ctxt tcx, &ty_getter getter, &@ast::ty ast_ty) -> ty::t {\n             let vec[ty::method] tmeths = [];\n             auto f = bind ast_arg_to_arg(tcx, getter, _);\n             for (ast::ty_method m in meths) {\n-                auto ins = vec::map[ast::ty_arg, arg](f, m.inputs);\n-                auto out = ast_ty_to_ty(tcx, getter, m.output);\n+                auto ins = vec::map[ast::ty_arg, arg](f, m.node.inputs);\n+                auto out = ast_ty_to_ty(tcx, getter, m.node.output);\n                 let ty::method new_m =\n-                                  rec(proto=m.proto,\n-                                      ident=m.ident,\n+                                  rec(proto=m.node.proto,\n+                                      ident=m.node.ident,\n                                       inputs=ins,\n                                       output=out,\n-                                      cf=m.cf);\n+                                      cf=m.node.cf);\n                 vec::push[ty::method](tmeths, new_m);\n             }\n "}, {"sha": "426f72d9bed71d642c83f8b52dcdd2378c972336", "filename": "src/comp/middle/walk.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/088ab03fdbdd2fad29b678f5eeaadde4e15cb205/src%2Fcomp%2Fmiddle%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088ab03fdbdd2fad29b678f5eeaadde4e15cb205/src%2Fcomp%2Fmiddle%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fwalk.rs?ref=088ab03fdbdd2fad29b678f5eeaadde4e15cb205", "patch": "@@ -167,21 +167,21 @@ fn walk_ty(&ast_visitor v, @ast::ty t) {\n         }\n         case (ast::ty_rec(?flds)) {\n             for (ast::ty_field f in flds) {\n-                walk_ty(v, f.mt.ty);\n+                walk_ty(v, f.node.mt.ty);\n             }\n         }\n         case (ast::ty_fn(_, ?args, ?out, _)) {\n             for (ast::ty_arg a in args) {\n-                walk_ty(v, a.ty);\n+                walk_ty(v, a.node.ty);\n             }\n             walk_ty(v, out);\n         }\n         case (ast::ty_obj(?tmeths)) {\n             for (ast::ty_method m in tmeths) {\n-                for (ast::ty_arg a in m.inputs) {\n-                    walk_ty(v, a.ty);\n+                for (ast::ty_arg a in m.node.inputs) {\n+                    walk_ty(v, a.node.ty);\n                 }\n-                walk_ty(v, m.output);\n+                walk_ty(v, m.node.output);\n             }\n         }\n         case (ast::ty_path(?p, _)) {"}, {"sha": "dad990fe4437c6bfb1d34c60a249202af5aae356", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/088ab03fdbdd2fad29b678f5eeaadde4e15cb205/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088ab03fdbdd2fad29b678f5eeaadde4e15cb205/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=088ab03fdbdd2fad29b678f5eeaadde4e15cb205", "patch": "@@ -268,16 +268,13 @@ fn print_type(&ps s, &ast::ty ty) {\n             popen(s);\n             fn print_field(&ps s, &ast::ty_field f) {\n                 cbox(s, indent_unit);\n-                print_mt(s, f.mt);\n+                print_mt(s, f.node.mt);\n                 space(s.s);\n-                word(s.s, f.ident);\n+                word(s.s, f.node.ident);\n                 end(s);\n             }\n             fn get_span(&ast::ty_field f) -> common::span {\n-              // Try to reconstruct the span for this field\n-              auto sp = f.mt.ty.span;\n-              auto hi = sp.hi + str::char_len(f.ident) + 1u;\n-              ret rec(hi=hi with sp);\n+                ret f.span;\n             }\n             auto f = print_field;\n             auto gs = get_span;\n@@ -290,8 +287,9 @@ fn print_type(&ps s, &ast::ty ty) {\n             for (ast::ty_method m in methods) {\n                 hardbreak(s.s);\n                 cbox(s, indent_unit);\n-                print_ty_fn(s, m.proto, some(m.ident),\n-                            m.inputs, m.output, m.cf);\n+                maybe_print_comment(s, m.span.lo);\n+                print_ty_fn(s, m.node.proto, some(m.node.ident),\n+                            m.node.inputs, m.node.output, m.node.cf);\n                 word(s.s, \";\");\n                 end(s);\n             }\n@@ -1217,8 +1215,8 @@ fn print_ty_fn(&ps s, &ast::proto proto, &option::t[str] id,\n     zerobreak(s.s);\n     popen(s);\n     fn print_arg(&ps s, &ast::ty_arg input) {\n-        if (input.mode == ast::alias) {word(s.s, \"&\");}\n-        print_type(s, *input.ty);\n+        if (input.node.mode == ast::alias) {word(s.s, \"&\");}\n+        print_type(s, *input.node.ty);\n     }\n     auto f = print_arg;\n     commasep[ast::ty_arg](s, inconsistent, inputs, f);"}]}