{"sha": "7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0OTdkOTNlZjE3ZDJiODdmYThlZmI1YzVkZTMzZjBiZGM0MTU1YWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-28T02:19:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-28T02:19:31Z"}, "message": "Auto merge of #69534 - Dylan-DPC:rollup-fwa2lip, r=Dylan-DPC\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #69379 (Fail on multiple declarations of `main`.)\n - #69430 (librustc_typeck: remove loop that never actually loops)\n - #69449 (Do not ping PR reviewers in toolstate breakage)\n - #69491 (rustc_span: Add `Symbol::to_ident_string` for use in diagnostic messages)\n - #69495 (don't take redundant references to operands)\n - #69496 (use find(x) instead of filter(x).next())\n - #69501 (note that find(f) is equivalent to filter(f).next() in the docs.)\n - #69527 (Ignore untracked paths when running `rustfmt` on repository.)\n - #69529 (don't use .into() to convert types into identical types.)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "8d57b787b10803b869d56281c9aab8f7350525aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d57b787b10803b869d56281c9aab8f7350525aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "html_url": "https://github.com/rust-lang/rust/commit/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbc46b7d71d0fe93066d7c026eccd01c16185cd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbc46b7d71d0fe93066d7c026eccd01c16185cd4", "html_url": "https://github.com/rust-lang/rust/commit/fbc46b7d71d0fe93066d7c026eccd01c16185cd4"}, {"sha": "02b96b3ecc48dc5245e425fc248163cfaae9643e", "url": "https://api.github.com/repos/rust-lang/rust/commits/02b96b3ecc48dc5245e425fc248163cfaae9643e", "html_url": "https://github.com/rust-lang/rust/commit/02b96b3ecc48dc5245e425fc248163cfaae9643e"}], "stats": {"total": 209, "additions": 115, "deletions": 94}, "files": [{"sha": "a4acb14ee4b149fdf141441764a8f8a4985dbadc", "filename": "src/bootstrap/format.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -1,7 +1,7 @@\n //! Runs rustfmt on the repository.\n \n use crate::Build;\n-use build_helper::t;\n+use build_helper::{output, t};\n use ignore::WalkBuilder;\n use std::path::Path;\n use std::process::Command;\n@@ -53,6 +53,17 @@ pub fn format(build: &Build, check: bool) {\n     for ignore in rustfmt_config.ignore {\n         ignore_fmt.add(&format!(\"!{}\", ignore)).expect(&ignore);\n     }\n+    let untracked_paths_output = output(\n+        Command::new(\"git\").arg(\"status\").arg(\"--porcelain\").arg(\"--untracked-files=normal\"),\n+    );\n+    let untracked_paths = untracked_paths_output\n+        .lines()\n+        .filter(|entry| entry.starts_with(\"??\"))\n+        .map(|entry| entry.split(\" \").nth(1).expect(\"every git status entry should list a path\"));\n+    for untracked_path in untracked_paths {\n+        eprintln!(\"skip untracked path {} during rustfmt invocations\", untracked_path);\n+        ignore_fmt.add(&format!(\"!{}\", untracked_path)).expect(&untracked_path);\n+    }\n     let ignore_fmt = ignore_fmt.build().unwrap();\n \n     let rustfmt_path = build.config.initial_rustfmt.as_ref().unwrap_or_else(|| {"}, {"sha": "6a529bfc8df97f8ad4644bb1e622e252927133e0", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -719,6 +719,8 @@ pub trait Iterator {\n     /// ```\n     ///\n     /// of these layers.\n+    ///\n+    /// Note that `iter.filter(f).next()` is equivalent to `iter.find(f)`.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn filter<P>(self, predicate: P) -> Filter<Self, P>\n@@ -2152,6 +2154,8 @@ pub trait Iterator {\n     /// // we can still use `iter`, as there are more elements.\n     /// assert_eq!(iter.next(), Some(&3));\n     /// ```\n+    ///\n+    /// Note that `iter.find(f)` is equivalent to `iter.filter(f).next()`.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn find<P>(&mut self, predicate: P) -> Option<Self::Item>"}, {"sha": "6c826e5dcdec01c8aa2f7e95eae1a8a5873d12ec", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -1050,7 +1050,7 @@ impl TwoWaySearcher {\n         // &v[..period]. If it is, we use \"Algorithm CP1\". Otherwise we use\n         // \"Algorithm CP2\", which is optimized for when the period of the needle\n         // is large.\n-        if &needle[..crit_pos] == &needle[period..period + crit_pos] {\n+        if needle[..crit_pos] == needle[period..period + crit_pos] {\n             // short period case -- the period is exact\n             // compute a separate critical factorization for the reversed needle\n             // x = u' v' where |v'| < period(x)."}, {"sha": "0d0aa8a232e69ed0290f413850a70f0f69a6470e", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -472,7 +472,7 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n         val: ScalarMaybeUndef<Tag>,\n     ) -> InterpResult<'tcx> {\n         let ptr_size = cx.data_layout().pointer_size;\n-        self.write_scalar(cx, ptr.into(), val, ptr_size)\n+        self.write_scalar(cx, ptr, val, ptr_size)\n     }\n }\n "}, {"sha": "6a937b87645cd9ab18b0c89eb24c5712cb6c4e62", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -1519,7 +1519,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n                 values\n                     .iter()\n                     .map(|&u| {\n-                        ty::Const::from_scalar(tcx, Scalar::from_uint(u, size).into(), switch_ty)\n+                        ty::Const::from_scalar(tcx, Scalar::from_uint(u, size), switch_ty)\n                             .to_string()\n                             .into()\n                     })"}, {"sha": "13996a74acb3574306a70e9d59fcc8529e6d96a1", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -156,7 +156,7 @@ impl<'tcx> Rvalue<'tcx> {\n             }\n             Rvalue::AddressOf(mutability, ref place) => {\n                 let place_ty = place.ty(local_decls, tcx).ty;\n-                tcx.mk_ptr(ty::TypeAndMut { ty: place_ty, mutbl: mutability.into() })\n+                tcx.mk_ptr(ty::TypeAndMut { ty: place_ty, mutbl: mutability })\n             }\n             Rvalue::Len(..) => tcx.types.usize,\n             Rvalue::Cast(.., ty) => ty,"}, {"sha": "b05bd26f0482cf66176e09c86d0ac6f10bd1bb13", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -820,8 +820,7 @@ impl ObjectSafetyViolation {\n                 MethodViolationCode::UndispatchableReceiver,\n                 span,\n             ) => (\n-                format!(\"consider changing method `{}`'s `self` parameter to be `&self`\", name)\n-                    .into(),\n+                format!(\"consider changing method `{}`'s `self` parameter to be `&self`\", name),\n                 Some((\"&Self\".to_string(), span)),\n             ),\n             ObjectSafetyViolation::AssocConst(name, _)"}, {"sha": "2599ad8ba7b9d681a22c4b608c703212ef50c363", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -341,7 +341,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                     db.note(\"distinct uses of `impl Trait` result in different opaque types\");\n                     let e_str = values.expected.to_string();\n                     let f_str = values.found.to_string();\n-                    if &e_str == &f_str && &e_str == \"impl std::future::Future\" {\n+                    if e_str == f_str && &e_str == \"impl std::future::Future\" {\n                         // FIXME: use non-string based check.\n                         db.help(\n                             \"if both `Future`s have the same `Output` type, consider \\"}, {"sha": "3512b24ec487778124597a7a7bef16cf876a9ca6", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -136,7 +136,7 @@ impl RegionHighlightMode {\n     pub fn highlighting_region(&mut self, region: ty::Region<'_>, number: usize) {\n         let num_slots = self.highlight_regions.len();\n         let first_avail_slot =\n-            self.highlight_regions.iter_mut().filter(|s| s.is_none()).next().unwrap_or_else(|| {\n+            self.highlight_regions.iter_mut().find(|s| s.is_none()).unwrap_or_else(|| {\n                 bug!(\"can only highlight {} placeholders at a time\", num_slots,)\n             });\n         *first_avail_slot = Some((*region, number));"}, {"sha": "d781fbde59cb7486c9dc309a3aa594f116f703ac", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -831,8 +831,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 .last()\n                 .cloned()\n                 .map(|id| Ok(self.lower_node_id(id)))\n-                .unwrap_or(Err(hir::LoopIdError::OutsideLoopScope))\n-                .into(),\n+                .unwrap_or(Err(hir::LoopIdError::OutsideLoopScope)),\n         };\n         hir::Destination { label: destination.map(|(_, label)| label), target_id }\n     }\n@@ -841,7 +840,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         if self.is_in_loop_condition && opt_label.is_none() {\n             hir::Destination {\n                 label: None,\n-                target_id: Err(hir::LoopIdError::UnlabeledCfInWhileCondition).into(),\n+                target_id: Err(hir::LoopIdError::UnlabeledCfInWhileCondition),\n             }\n         } else {\n             self.lower_loop_destination(opt_label.map(|label| (id, label)))\n@@ -912,7 +911,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 .collect(),\n             asm: asm.asm,\n             asm_str_style: asm.asm_str_style,\n-            clobbers: asm.clobbers.clone().into(),\n+            clobbers: asm.clobbers.clone(),\n             volatile: asm.volatile,\n             alignstack: asm.alignstack,\n             dialect: asm.dialect,"}, {"sha": "d6e1ab8909c5956e80d5723ca821eca6d6f628ca", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -437,10 +437,10 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         // listing.\n         let main_ret_ty = cx.tcx().erase_regions(&main_ret_ty.no_bound_vars().unwrap());\n \n-        if cx.get_defined_value(\"main\").is_some() {\n+        if cx.get_declared_value(\"main\").is_some() {\n             // FIXME: We should be smart and show a better diagnostic here.\n             cx.sess()\n-                .struct_span_err(sp, \"entry symbol `main` defined multiple times\")\n+                .struct_span_err(sp, \"entry symbol `main` declared multiple times\")\n                 .help(\"did you use `#[no_mangle]` on `fn main`? Use `#[start]` instead\")\n                 .emit();\n             cx.sess().abort_if_errors();"}, {"sha": "af95450935caa7441b1dc826a8552f2e77ab589d", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -92,8 +92,7 @@ impl<'a, 'tcx, V: CodegenObject> OperandRef<'tcx, V> {\n                 let a = Scalar::from(Pointer::new(\n                     bx.tcx().alloc_map.lock().create_memory_alloc(data),\n                     Size::from_bytes(start as u64),\n-                ))\n-                .into();\n+                ));\n                 let a_llval = bx.scalar_to_backend(\n                     a,\n                     a_scalar,"}, {"sha": "6d0046063989b57f17a66ed82e4cb8565aab080e", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -387,7 +387,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n             mir::Rvalue::AddressOf(mutability, ref place) => {\n                 let mk_ptr = move |tcx: TyCtxt<'tcx>, ty: Ty<'tcx>| {\n-                    tcx.mk_ptr(ty::TypeAndMut { ty, mutbl: mutability.into() })\n+                    tcx.mk_ptr(ty::TypeAndMut { ty, mutbl: mutability })\n                 };\n                 self.codegen_place_to_pointer(bx, place, mk_ptr)\n             }"}, {"sha": "809bbe47a6e75c6b344cb29ebc37fe18381c9d0b", "filename": "src/librustc_expand/mbe/quoted.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_expand%2Fmbe%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_expand%2Fmbe%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fquoted.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -112,7 +112,7 @@ fn parse_tree(\n                     sess.span_diagnostic.span_err(span.entire(), &msg);\n                 }\n                 // Parse the contents of the sequence itself\n-                let sequence = parse(tts.into(), expect_matchers, sess);\n+                let sequence = parse(tts, expect_matchers, sess);\n                 // Get the Kleene operator and optional separator\n                 let (separator, kleene) = parse_sep_and_kleene_op(trees, span.entire(), sess);\n                 // Count the number of captured \"names\" (i.e., named metavars)\n@@ -159,7 +159,7 @@ fn parse_tree(\n         // descend into the delimited set and further parse it.\n         tokenstream::TokenTree::Delimited(span, delim, tts) => TokenTree::Delimited(\n             span,\n-            Lrc::new(Delimited { delim, tts: parse(tts.into(), expect_matchers, sess) }),\n+            Lrc::new(Delimited { delim, tts: parse(tts, expect_matchers, sess) }),\n         ),\n     }\n }"}, {"sha": "9e6a2c4f8f55085b26f1e10ca056288e5afb3902", "filename": "src/librustc_expand/mbe/transcribe.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_expand%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_expand%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Ftranscribe.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -155,8 +155,7 @@ pub(super) fn transcribe(\n                     }\n \n                     // Step back into the parent Delimited.\n-                    let tree =\n-                        TokenTree::Delimited(span, forest.delim, TokenStream::new(result).into());\n+                    let tree = TokenTree::Delimited(span, forest.delim, TokenStream::new(result));\n                     result = result_stack.pop().unwrap();\n                     result.push(tree.into());\n                 }"}, {"sha": "afaba6bf315ed6d55509941cc1246999b57d9aa3", "filename": "src/librustc_expand/proc_macro_server.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_expand%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_expand%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fproc_macro_server.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -60,7 +60,7 @@ impl FromInternal<(TreeAndJoint, &'_ ParseSess, &'_ mut Vec<Self>)>\n         let Token { kind, span } = match tree {\n             tokenstream::TokenTree::Delimited(span, delim, tts) => {\n                 let delimiter = Delimiter::from_internal(delim);\n-                return TokenTree::Group(Group { delimiter, stream: tts.into(), span });\n+                return TokenTree::Group(Group { delimiter, stream: tts, span });\n             }\n             tokenstream::TokenTree::Token(token) => token,\n         };\n@@ -196,12 +196,8 @@ impl ToInternal<TokenStream> for TokenTree<Group, Punct, Ident, Literal> {\n         let (ch, joint, span) = match self {\n             TokenTree::Punct(Punct { ch, joint, span }) => (ch, joint, span),\n             TokenTree::Group(Group { delimiter, stream, span }) => {\n-                return tokenstream::TokenTree::Delimited(\n-                    span,\n-                    delimiter.to_internal(),\n-                    stream.into(),\n-                )\n-                .into();\n+                return tokenstream::TokenTree::Delimited(span, delimiter.to_internal(), stream)\n+                    .into();\n             }\n             TokenTree::Ident(self::Ident { sym, is_raw, span }) => {\n                 return tokenstream::TokenTree::token(Ident(sym, is_raw), span).into();"}, {"sha": "26f855b177e8161a64b970091f6bb32e448ba675", "filename": "src/librustc_infer/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -669,7 +669,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n         } else {\n             let var = self.canonical_var(info, const_var.into());\n             self.tcx().mk_const(ty::Const {\n-                val: ty::ConstKind::Bound(self.binder_index, var.into()),\n+                val: ty::ConstKind::Bound(self.binder_index, var),\n                 ty: self.fold_ty(const_var.ty),\n             })\n         }"}, {"sha": "fd103c4c3369b5e3239b3de598728af72bf1ab01", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -745,7 +745,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             .join(\", \");\n         if !lifetimes.is_empty() {\n             if sub.regions().count() < len {\n-                value.push_normal(lifetimes + &\", \");\n+                value.push_normal(lifetimes + \", \");\n             } else {\n                 value.push_normal(lifetimes);\n             }"}, {"sha": "08f73d2c9d2a8f1f5329fe24487f1d0e051d469e", "filename": "src/librustc_infer/infer/outlives/verify.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fverify.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -140,7 +140,6 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n         // Extend with bounds that we can find from the trait.\n         let trait_bounds = self\n             .projection_declared_bounds_from_trait(projection_ty)\n-            .into_iter()\n             .map(|r| VerifyBound::OutlivedBy(r));\n \n         // see the extensive comment in projection_must_outlive"}, {"sha": "d94231653abd49eab7bca9dd4486c247b2e57f2e", "filename": "src/librustc_infer/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_infer%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_infer%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fcoherence.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -399,8 +399,7 @@ fn orphan_check_trait_ref<'tcx>(\n             let local_type = trait_ref\n                 .input_types()\n                 .flat_map(|ty| uncover_fundamental_ty(tcx, ty, in_crate))\n-                .filter(|ty| ty_is_non_local_constructor(ty, in_crate).is_none())\n-                .next();\n+                .find(|ty| ty_is_non_local_constructor(ty, in_crate).is_none());\n \n             debug!(\"orphan_check_trait_ref: uncovered ty local_type: `{:?}`\", local_type);\n "}, {"sha": "9bfa2196950963577f18aa4d4b4d41b4f729d360", "filename": "src/librustc_infer/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -1442,7 +1442,7 @@ pub fn suggest_constraining_type_param(\n     const MSG_RESTRICT_TYPE: &str = \"consider restricting this type parameter with\";\n     const MSG_RESTRICT_TYPE_FURTHER: &str = \"consider further restricting this type parameter with\";\n \n-    let param = generics.params.iter().filter(|p| p.name.ident().as_str() == param_name).next();\n+    let param = generics.params.iter().find(|p| p.name.ident().as_str() == param_name);\n \n     let param = if let Some(param) = param {\n         param"}, {"sha": "4eac89138f198756e64a61c7550511eaa45bba84", "filename": "src/librustc_infer/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_infer%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_infer%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fselect.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -3202,7 +3202,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     obligation.predicate.def_id(),\n                     obligation.recursion_depth + 1,\n                     a_last.expect_ty(),\n-                    &[b_last.into()],\n+                    &[b_last],\n                 ));\n             }\n "}, {"sha": "781b33bd94ce036bab4836441e86634ae81803cb", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -639,7 +639,7 @@ impl<'a, 'b> ReplaceBodyWithLoop<'a, 'b> {\n                                     ast::GenericArg::Type(ty) => Some(ty),\n                                     _ => None,\n                                 });\n-                                any_involves_impl_trait(types.into_iter())\n+                                any_involves_impl_trait(types)\n                                     || data.constraints.iter().any(|c| match c.kind {\n                                         ast::AssocTyConstraintKind::Bound { .. } => true,\n                                         ast::AssocTyConstraintKind::Equality { ref ty } => {"}, {"sha": "ff19ac5f21a36d16456a1b157aa75db8ec0506c8", "filename": "src/librustc_mir/borrow_check/region_infer/reverse_sccs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Freverse_sccs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Freverse_sccs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Freverse_sccs.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -56,7 +56,7 @@ impl RegionInferenceContext<'_> {\n         let mut scc_regions = FxHashMap::default();\n         let mut start = 0;\n         for (scc, group) in &paired_scc_regions.into_iter().group_by(|(scc, _)| *scc) {\n-            let group_size = group.into_iter().count();\n+            let group_size = group.count();\n             scc_regions.insert(scc, start..start + group_size);\n             start += group_size;\n         }"}, {"sha": "cb6583976258bd4da1f435b1a864993893efdd45", "filename": "src/librustc_mir/const_eval/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_mir%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_mir%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmod.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -52,7 +52,7 @@ pub(crate) fn const_caller_location<'tcx>(\n \n     let loc_place = ecx.alloc_caller_location(file, line, col);\n     intern_const_alloc_recursive(&mut ecx, InternKind::Constant, loc_place, false).unwrap();\n-    ConstValue::Scalar(loc_place.ptr.into())\n+    ConstValue::Scalar(loc_place.ptr)\n }\n \n // this function uses `unwrap` copiously, because an already validated constant"}, {"sha": "cd06cf01bfa8111a1537fb2acd6da72820cbbe21", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -67,7 +67,7 @@ crate fn eval_nullary_intrinsic<'tcx>(\n             };\n             ConstValue::from_machine_usize(n, &tcx)\n         }\n-        sym::type_id => ConstValue::from_u64(tcx.type_id_hash(tp_ty).into()),\n+        sym::type_id => ConstValue::from_u64(tcx.type_id_hash(tp_ty)),\n         other => bug!(\"`{}` is not a zero arg intrinsic\", other),\n     })\n }"}, {"sha": "a02a6898c1d715d45f10be7969ded44f71e6a661", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -293,7 +293,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                                 let (&untuple_arg, args) = args.split_last().unwrap();\n                                 trace!(\"eval_fn_call: Will pass last argument by untupling\");\n                                 Cow::from(args.iter().map(|&a| Ok(a))\n-                                .chain((0..untuple_arg.layout.fields.count()).into_iter()\n+                                .chain((0..untuple_arg.layout.fields.count())\n                                     .map(|i| self.operand_field(untuple_arg, i as u64))\n                                 )\n                                 .collect::<InterpResult<'_, Vec<OpTy<'tcx, M::PointerTag>>>>()?)"}, {"sha": "c9038ccf37b9edb4ca2709baf46c97f0e7afef0d", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -209,7 +209,7 @@ fn mir_const_qualif(tcx: TyCtxt<'_>, def_id: DefId) -> ConstQualifs {\n \n     // We return the qualifs in the return place for every MIR body, even though it is only used\n     // when deciding to promote a reference to a `const` for now.\n-    validator.qualifs_in_return_place().into()\n+    validator.qualifs_in_return_place()\n }\n \n fn mir_const(tcx: TyCtxt<'_>, def_id: DefId) -> &Steal<BodyAndCache<'_>> {"}, {"sha": "927c8f6dfb29b9b834b9fc13861da047ddc977a4", "filename": "src/librustc_mir/util/aggregate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_mir%2Futil%2Faggregate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_mir%2Futil%2Faggregate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Faggregate.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -49,7 +49,6 @@ pub fn expand_aggregate<'tcx>(\n     };\n \n     operands\n-        .into_iter()\n         .enumerate()\n         .map(move |(i, (op, ty))| {\n             let lhs_field = if let AggregateKind::Array(_) = kind {"}, {"sha": "d9091f92b035d617889f91805f68aed3ab450fb6", "filename": "src/librustc_mir_build/build/matches/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -1942,8 +1942,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let tcx = self.hir.tcx();\n         let debug_source_info = SourceInfo { span: source_info.span, scope: visibility_scope };\n         let binding_mode = match mode {\n-            BindingMode::ByValue => ty::BindingMode::BindByValue(mutability.into()),\n-            BindingMode::ByRef(_) => ty::BindingMode::BindByReference(mutability.into()),\n+            BindingMode::ByValue => ty::BindingMode::BindByValue(mutability),\n+            BindingMode::ByRef(_) => ty::BindingMode::BindByReference(mutability),\n         };\n         debug!(\"declare_binding: user_ty={:?}\", user_ty);\n         let local = LocalDecl::<'tcx> {"}, {"sha": "830877f713e4bb91730d6e5dd3d9973f2f46875b", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -882,7 +882,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                             span: tcx_hir.span(var_id),\n                         },\n                         place: Place {\n-                            local: closure_env_arg.into(),\n+                            local: closure_env_arg,\n                             projection: tcx.intern_place_elems(&projs),\n                         },\n                     });\n@@ -927,7 +927,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         self.local_decls[local].local_info = if let Some(kind) = self_binding {\n                             LocalInfo::User(ClearCrossCrate::Set(BindingForm::ImplicitSelf(*kind)))\n                         } else {\n-                            let binding_mode = ty::BindingMode::BindByValue(mutability.into());\n+                            let binding_mode = ty::BindingMode::BindByValue(mutability);\n                             LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(\n                                 VarBindingForm {\n                                     binding_mode,"}, {"sha": "66280638a2d4067121bfcc2bc6829e5b84621d40", "filename": "src/librustc_parse/lexer/mod.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Fmod.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -327,8 +327,7 @@ impl<'a> StringReader<'a> {\n         match kind {\n             rustc_lexer::LiteralKind::Char { terminated } => {\n                 if !terminated {\n-                    self.fatal_span_(start, suffix_start, \"unterminated character literal\".into())\n-                        .raise()\n+                    self.fatal_span_(start, suffix_start, \"unterminated character literal\").raise()\n                 }\n                 let content_start = start + BytePos(1);\n                 let content_end = suffix_start - BytePos(1);\n@@ -338,12 +337,8 @@ impl<'a> StringReader<'a> {\n             }\n             rustc_lexer::LiteralKind::Byte { terminated } => {\n                 if !terminated {\n-                    self.fatal_span_(\n-                        start + BytePos(1),\n-                        suffix_start,\n-                        \"unterminated byte constant\".into(),\n-                    )\n-                    .raise()\n+                    self.fatal_span_(start + BytePos(1), suffix_start, \"unterminated byte constant\")\n+                        .raise()\n                 }\n                 let content_start = start + BytePos(2);\n                 let content_end = suffix_start - BytePos(1);\n@@ -353,7 +348,7 @@ impl<'a> StringReader<'a> {\n             }\n             rustc_lexer::LiteralKind::Str { terminated } => {\n                 if !terminated {\n-                    self.fatal_span_(start, suffix_start, \"unterminated double quote string\".into())\n+                    self.fatal_span_(start, suffix_start, \"unterminated double quote string\")\n                         .raise()\n                 }\n                 let content_start = start + BytePos(1);\n@@ -367,7 +362,7 @@ impl<'a> StringReader<'a> {\n                     self.fatal_span_(\n                         start + BytePos(1),\n                         suffix_start,\n-                        \"unterminated double quote byte string\".into(),\n+                        \"unterminated double quote byte string\",\n                     )\n                     .raise()\n                 }"}, {"sha": "a412dabf144275088fb54e2f54c1f318d4c72a4b", "filename": "src/librustc_parse/lexer/tokentrees.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_parse%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_parse%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Ftokentrees.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -93,18 +93,15 @@ impl<'a> TokenTreesReader<'a> {\n                 }\n \n                 if let Some((delim, _)) = self.open_braces.last() {\n-                    if let Some((_, open_sp, close_sp)) = self\n-                        .matching_delim_spans\n-                        .iter()\n-                        .filter(|(d, open_sp, close_sp)| {\n+                    if let Some((_, open_sp, close_sp)) =\n+                        self.matching_delim_spans.iter().find(|(d, open_sp, close_sp)| {\n                             if let Some(close_padding) = sm.span_to_margin(*close_sp) {\n                                 if let Some(open_padding) = sm.span_to_margin(*open_sp) {\n                                     return delim == d && close_padding != open_padding;\n                                 }\n                             }\n                             false\n                         })\n-                        .next()\n                     // these are in reverse order as they get inserted on close, but\n                     {\n                         // we want the last open/first close\n@@ -212,7 +209,7 @@ impl<'a> TokenTreesReader<'a> {\n                     _ => {}\n                 }\n \n-                Ok(TokenTree::Delimited(delim_span, delim, tts.into()).into())\n+                Ok(TokenTree::Delimited(delim_span, delim, tts).into())\n             }\n             token::CloseDelim(delim) => {\n                 // An unexpected closing delimiter (i.e., there is no"}, {"sha": "4cf9e4c3059720e05ee7321f371762e8d3232085", "filename": "src/librustc_parse/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_parse%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_parse%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flib.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -420,7 +420,7 @@ fn prepend_attrs(\n         builder.push(tokenstream::TokenTree::Delimited(\n             delim_span,\n             token::DelimToken::Bracket,\n-            brackets.build().into(),\n+            brackets.build(),\n         ));\n     }\n     builder.push(tokens.clone());"}, {"sha": "b8f67e73bc3f72897b9aa593cf1864ccde73f38c", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -225,12 +225,8 @@ impl<'a> Parser<'a> {\n \n             // Make sure that the span of the parent node is larger than the span of lhs and rhs,\n             // including the attributes.\n-            let lhs_span = lhs\n-                .attrs\n-                .iter()\n-                .filter(|a| a.style == AttrStyle::Outer)\n-                .next()\n-                .map_or(lhs_span, |a| a.span);\n+            let lhs_span =\n+                lhs.attrs.iter().find(|a| a.style == AttrStyle::Outer).map_or(lhs_span, |a| a.span);\n             let span = lhs_span.to(rhs.span);\n             lhs = match op {\n                 AssocOp::Add"}, {"sha": "7b8642b01513a0a7dac59df3906af07c5208f1bd", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -263,8 +263,7 @@ impl TokenCursor {\n             ]\n             .iter()\n             .cloned()\n-            .collect::<TokenStream>()\n-            .into(),\n+            .collect::<TokenStream>(),\n         );\n \n         self.stack.push(mem::replace(\n@@ -389,7 +388,7 @@ impl<'a> Parser<'a> {\n             root_module_name: None,\n             expected_tokens: Vec::new(),\n             token_cursor: TokenCursor {\n-                frame: TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, &tokens.into()),\n+                frame: TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, &tokens),\n                 stack: Vec::new(),\n             },\n             desugar_doc_comments,\n@@ -1006,7 +1005,7 @@ impl<'a> Parser<'a> {\n                 );\n                 self.set_token(Token::new(TokenKind::CloseDelim(frame.delim), frame.span.close));\n                 self.bump();\n-                TokenTree::Delimited(frame.span, frame.delim, frame.tree_cursor.stream.into())\n+                TokenTree::Delimited(frame.span, frame.delim, frame.tree_cursor.stream)\n             }\n             token::CloseDelim(_) | token::Eof => unreachable!(),\n             _ => {"}, {"sha": "257292ae0729cd8683adf0a1d46a31e68488fb78", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -169,7 +169,7 @@ impl<'a> Parser<'a> {\n     }\n \n     fn parse_local_mk(&mut self, lo: Span, attrs: AttrVec) -> PResult<'a, Stmt> {\n-        let local = self.parse_local(attrs.into())?;\n+        let local = self.parse_local(attrs)?;\n         Ok(self.mk_stmt(lo.to(self.prev_span), StmtKind::Local(local)))\n     }\n "}, {"sha": "2719057fb5351a7ade75e2f90ab381ecb5a2986d", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -77,7 +77,7 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n                     return;\n                 }\n \n-                let loop_id = match label.target_id.into() {\n+                let loop_id = match label.target_id {\n                     Ok(loop_id) => loop_id,\n                     Err(hir::LoopIdError::OutsideLoopScope) => hir::DUMMY_HIR_ID,\n                     Err(hir::LoopIdError::UnlabeledCfInWhileCondition) => {"}, {"sha": "d6232f32f4c1bf8e27a85861709d962846dfa6af", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -1023,6 +1023,14 @@ impl Symbol {\n     pub fn as_u32(self) -> u32 {\n         self.0.as_u32()\n     }\n+\n+    /// This method is supposed to be used in error messages, so it's expected to be\n+    /// identical to printing the original identifier token written in source code\n+    /// (`token_to_string`, `Ident::to_string`), except that symbols don't keep the rawness flag\n+    /// or edition, so we have to guess the rawness using the global edition.\n+    pub fn to_ident_string(self) -> String {\n+        Ident::with_dummy_span(self).to_string()\n+    }\n }\n \n impl fmt::Debug for Symbol {"}, {"sha": "44a2c5464cdb56c732c42c1369ff191cbb788b17", "filename": "src/librustc_traits/generic_types.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_traits%2Fgeneric_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_traits%2Fgeneric_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fgeneric_types.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -24,7 +24,6 @@ crate fn fn_ptr(\n ) -> Ty<'tcx> {\n     let inputs_and_output = tcx.mk_type_list(\n         (0..arity_and_output)\n-            .into_iter()\n             .map(|i| ty::BoundVar::from(i))\n             // DebruijnIndex(1) because we are going to inject these in a `PolyFnSig`\n             .map(|var| tcx.mk_ty(ty::Bound(ty::DebruijnIndex::from(1usize), var.into()))),\n@@ -37,7 +36,6 @@ crate fn fn_ptr(\n crate fn type_list(tcx: TyCtxt<'tcx>, arity: usize) -> SubstsRef<'tcx> {\n     tcx.mk_substs(\n         (0..arity)\n-            .into_iter()\n             .map(|i| ty::BoundVar::from(i))\n             .map(|var| tcx.mk_ty(ty::Bound(ty::INNERMOST, var.into())))\n             .map(|ty| GenericArg::from(ty)),"}, {"sha": "710f02cdedba3b011ffddf508e0ce74f0b120723", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -2439,10 +2439,11 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     break;\n                 }\n             }\n-            for binding in segment.generic_args().bindings {\n+\n+            // Only emit the first error to avoid overloading the user with error messages.\n+            if let [binding, ..] = segment.generic_args().bindings {\n                 has_err = true;\n                 Self::prohibit_assoc_ty_binding(self.tcx(), binding.span);\n-                break;\n             }\n         }\n         has_err"}, {"sha": "fcbeb5b210decad42e3dad661e0c327931944d38", "filename": "src/librustc_typeck/outlives/implicit_infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -312,6 +312,6 @@ pub fn check_explicit_predicates<'tcx>(\n \n         let predicate = outlives_predicate.subst(tcx, substs);\n         debug!(\"predicate = {:?}\", &predicate);\n-        insert_outlives_predicate(tcx, predicate.0.into(), predicate.1, span, required_predicates);\n+        insert_outlives_predicate(tcx, predicate.0, predicate.1, span, required_predicates);\n     }\n }"}, {"sha": "4f58116e4fea8167ff4f6c27cedbf7c3f8088e83", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -565,8 +565,7 @@ impl Attributes {\n \n         let inner_docs = attrs\n             .iter()\n-            .filter(|a| a.doc_str().is_some())\n-            .next()\n+            .find(|a| a.doc_str().is_some())\n             .map_or(true, |a| a.style == AttrStyle::Inner);\n \n         Attributes {"}, {"sha": "43d3ad218295a68ef4e1e43376d78919b53ab755", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -283,7 +283,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         .filter_map(|lint| {\n             // We don't want to whitelist *all* lints so let's\n             // ignore those ones.\n-            if whitelisted_lints.iter().any(|l| &lint.name == l) {\n+            if whitelisted_lints.iter().any(|l| lint.name == l) {\n                 None\n             } else {\n                 Some((lint::LintId::of(lint), lint::Allow))"}, {"sha": "83f052c898ba35cae9418a1dab91ec2aae8faea0", "filename": "src/libstd/sys/unix/process/process_common.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -287,9 +287,7 @@ impl CStringArray {\n \n fn construct_envp(env: BTreeMap<OsString, OsString>, saw_nul: &mut bool) -> CStringArray {\n     let mut result = CStringArray::with_capacity(env.len());\n-    for (k, v) in env {\n-        let mut k: OsString = k.into();\n-\n+    for (mut k, v) in env {\n         // Reserve additional space for '=' and null terminator\n         k.reserve_exact(v.len() + 2);\n         k.push(\"=\");"}, {"sha": "bc5c86b02b3c090e46e1485ef3ce3ce89bb15adb", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -529,7 +529,7 @@ impl MetaItemKind {\n                     TokenTree::Delimited(\n                         DelimSpan::from_single(span),\n                         token::Paren,\n-                        TokenStream::new(tokens).into(),\n+                        TokenStream::new(tokens),\n                     )\n                     .into(),\n                 ]"}, {"sha": "633ca4c31895211b29856e17498a30e2dc910466", "filename": "src/test/ui/duplicate/dupe-symbols-7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-7.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -1,7 +1,7 @@\n // build-fail\n \n //\n-// error-pattern: entry symbol `main` defined multiple times\n+// error-pattern: entry symbol `main` declared multiple times\n \n // FIXME https://github.com/rust-lang/rust/issues/59774\n // normalize-stderr-test \"thread.*panicked.*Metadata module not compiled.*\\n\" -> \"\""}, {"sha": "2ea5521e0953327b3d7743ca1d34f9a3199acce3", "filename": "src/test/ui/duplicate/dupe-symbols-7.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-7.stderr?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -1,4 +1,4 @@\n-error: entry symbol `main` defined multiple times\n+error: entry symbol `main` declared multiple times\n   --> $DIR/dupe-symbols-7.rs:12:1\n    |\n LL | fn main(){}"}, {"sha": "ce7fa24a9fe6b5e5359e34fd5c0faf13c775e916", "filename": "src/test/ui/duplicate/dupe-symbols-8.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-8.rs?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -0,0 +1,12 @@\n+// build-fail\n+// error-pattern: entry symbol `main` declared multiple times\n+//\n+// See #67946.\n+\n+#![allow(warnings)]\n+fn main() {\n+    extern \"Rust\" {\n+     fn main();\n+    }\n+    unsafe { main(); }\n+}"}, {"sha": "f001201b8d0cf3d04b557482d7fba168306b1887", "filename": "src/test/ui/duplicate/dupe-symbols-8.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-8.stderr?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -0,0 +1,15 @@\n+error: entry symbol `main` declared multiple times\n+  --> $DIR/dupe-symbols-8.rs:7:1\n+   |\n+LL | / fn main() {\n+LL | |     extern \"Rust\" {\n+LL | |      fn main();\n+LL | |     }\n+LL | |     unsafe { main(); }\n+LL | | }\n+   | |_^\n+   |\n+   = help: did you use `#[no_mangle]` on `fn main`? Use `#[start]` instead\n+\n+error: aborting due to previous error\n+"}, {"sha": "5fbb986286ade77da32c45f7d50dce3f51143396", "filename": "src/tools/publish_toolstate.py", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Ftools%2Fpublish_toolstate.py", "raw_url": "https://github.com/rust-lang/rust/raw/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af/src%2Ftools%2Fpublish_toolstate.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fpublish_toolstate.py?ref=7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "patch": "@@ -131,7 +131,6 @@ def issue(\n     assignees,\n     relevant_pr_number,\n     relevant_pr_user,\n-    pr_reviewer,\n ):\n     # Open an issue about the toolstate failure.\n     if status == 'test-fail':\n@@ -147,11 +146,11 @@ def issue(\n         cc @{}, do you think you would have time to do the follow-up work?\n         If so, that would be great!\n \n-        cc @{}, the PR reviewer, and nominating for compiler team prioritization.\n+        And nominating for compiler team prioritization.\n \n         ''').format(\n             relevant_pr_number, tool, status_description,\n-            REPOS.get(tool), relevant_pr_user, pr_reviewer\n+            REPOS.get(tool), relevant_pr_user\n         )),\n         'title': '`{}` no longer builds after {}'.format(tool, relevant_pr_number),\n         'assignees': list(assignees),\n@@ -236,7 +235,7 @@ def update_latest(\n                 try:\n                     issue(\n                         tool, create_issue_for_status, MAINTAINERS.get(tool, ''),\n-                        relevant_pr_number, relevant_pr_user, pr_reviewer,\n+                        relevant_pr_number, relevant_pr_user,\n                     )\n                 except urllib2.HTTPError as e:\n                     # network errors will simply end up not creating an issue, but that's better"}]}