{"sha": "7684a2ed6597449e0c05d156cd61437a949d9617", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2ODRhMmVkNjU5NzQ0OWUwYzA1ZDE1NmNkNjE0MzdhOTQ5ZDk2MTc=", "commit": {"author": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2016-08-31T16:28:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-31T16:28:41Z"}, "message": "Merge pull request #1204 from Manishearth/rustup\n\nRustup to *rustc 1.13.0-nightly (eac41469d 2016-08-30)* and bump to 0.0.87", "tree": {"sha": "e4ba63c6d123dfb7044846f1366028caa28452a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4ba63c6d123dfb7044846f1366028caa28452a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7684a2ed6597449e0c05d156cd61437a949d9617", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7684a2ed6597449e0c05d156cd61437a949d9617", "html_url": "https://github.com/rust-lang/rust/commit/7684a2ed6597449e0c05d156cd61437a949d9617", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7684a2ed6597449e0c05d156cd61437a949d9617/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b38a86a145b510663e8b57f0a6df64f3c969cf1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b38a86a145b510663e8b57f0a6df64f3c969cf1f", "html_url": "https://github.com/rust-lang/rust/commit/b38a86a145b510663e8b57f0a6df64f3c969cf1f"}, {"sha": "377fec7c9abc51f43d1378d9eece6e9b2f9aab3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/377fec7c9abc51f43d1378d9eece6e9b2f9aab3e", "html_url": "https://github.com/rust-lang/rust/commit/377fec7c9abc51f43d1378d9eece6e9b2f9aab3e"}], "stats": {"total": 96, "additions": 67, "deletions": 29}, "files": [{"sha": "4c36d5426eda1ebbe5bef0cea7c46db9a4838ae7", "filename": "CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7684a2ed6597449e0c05d156cd61437a949d9617/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/7684a2ed6597449e0c05d156cd61437a949d9617/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=7684a2ed6597449e0c05d156cd61437a949d9617", "patch": "@@ -1,7 +1,8 @@\n # Change Log\n All notable changes to this project will be documented in this file.\n \n-## 0.0.87 \u2014 ??\n+## 0.0.87 \u2014 2016-08-31\n+* Rustup to *rustc 1.13.0-nightly (eac41469d 2016-08-30)*\n * New lints: [`builtin_type_shadow`]\n * Fix FP in [`zero_prefixed_literal`] and `0b`/`Oo`\n "}, {"sha": "973f6b29c1c53af89c154f54a7f744892abdb07b", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7684a2ed6597449e0c05d156cd61437a949d9617/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7684a2ed6597449e0c05d156cd61437a949d9617/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=7684a2ed6597449e0c05d156cd61437a949d9617", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.0.86\"\n+version = \"0.0.87\"\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\",\n \t\"Andre Bogus <bogusandre@gmail.com>\",\n@@ -25,7 +25,7 @@ test = false\n \n [dependencies]\n # begin automatic update\n-clippy_lints = { version = \"0.0.86\", path = \"clippy_lints\" }\n+clippy_lints = { version = \"0.0.87\", path = \"clippy_lints\" }\n # end automatic update\n \n [dev-dependencies]"}, {"sha": "9089b6c1ba529c373c74b54af1686cf1742f200f", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7684a2ed6597449e0c05d156cd61437a949d9617/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7684a2ed6597449e0c05d156cd61437a949d9617/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=7684a2ed6597449e0c05d156cd61437a949d9617", "patch": "@@ -1,7 +1,7 @@\n [package]\n name = \"clippy_lints\"\n # begin automatic update\n-version = \"0.0.86\"\n+version = \"0.0.87\"\n # end automatic update\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\","}, {"sha": "7a36049178b006381a47f4d33bea18ce4eef3fbb", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7684a2ed6597449e0c05d156cd61437a949d9617/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7684a2ed6597449e0c05d156cd61437a949d9617/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=7684a2ed6597449e0c05d156cd61437a949d9617", "patch": "@@ -4,7 +4,7 @@ use reexport::*;\n use rustc::lint::*;\n use rustc::hir::*;\n use semver::Version;\n-use syntax::ast::{Attribute, Lit, LitKind, MetaItemKind};\n+use syntax::ast::{Attribute, Lit, LitKind, MetaItemKind, NestedMetaItem, NestedMetaItemKind};\n use syntax::codemap::Span;\n use utils::{in_macro, match_path, span_lint, span_lint_and_then, snippet_opt};\n use utils::paths;\n@@ -89,11 +89,13 @@ impl LateLintPass for AttrPass {\n                 return;\n             }\n             for item in items {\n-                if let MetaItemKind::NameValue(ref name, ref lit) = item.node {\n-                    if name == &\"since\" {\n-                        check_semver(cx, item.span, lit);\n-                    }\n-                }\n+                if_let_chain! {[\n+                    let NestedMetaItemKind::MetaItem(ref mi) = item.node,\n+                    let MetaItemKind::NameValue(ref name, ref lit) = mi.node,\n+                    name == &\"since\",\n+                ], {\n+                    check_semver(cx, item.span, lit);\n+                }}\n             }\n         }\n     }\n@@ -111,11 +113,9 @@ impl LateLintPass for AttrPass {\n                             \"allow\" | \"warn\" | \"deny\" | \"forbid\" => {\n                                 // whitelist `unused_imports`\n                                 for lint in lint_list {\n-                                    if let MetaItemKind::Word(ref word) = lint.node {\n-                                        if word == \"unused_imports\" {\n-                                            if let ItemUse(_) = item.node {\n-                                                return;\n-                                            }\n+                                    if is_word(lint, \"unused_imports\") {\n+                                        if let ItemUse(_) = item.node {\n+                                            return;\n                                         }\n                                     }\n                                 }\n@@ -214,10 +214,7 @@ fn check_attrs(cx: &LateContext, span: Span, name: &Name, attrs: &[Attribute]) {\n             if values.len() != 1 || inline != &\"inline\" {\n                 continue;\n             }\n-            if let MetaItemKind::Word(ref always) = values[0].node {\n-                if always != &\"always\" {\n-                    continue;\n-                }\n+            if is_word(&values[0], \"always\") {\n                 span_lint(cx,\n                           INLINE_ALWAYS,\n                           attr.span,\n@@ -239,3 +236,13 @@ fn check_semver(cx: &LateContext, span: Span, lit: &Lit) {\n               span,\n               \"the since field must contain a semver-compliant version\");\n }\n+\n+fn is_word(nmi: &NestedMetaItem, expected: &str) -> bool {\n+    if let NestedMetaItemKind::MetaItem(ref mi) = nmi.node {\n+        if let MetaItemKind::Word(ref word) = mi.node {\n+            return word == expected;\n+        }\n+    }\n+\n+    false\n+}"}, {"sha": "2311df424562023e2b467f235f7622af1f633d60", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7684a2ed6597449e0c05d156cd61437a949d9617/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7684a2ed6597449e0c05d156cd61437a949d9617/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=7684a2ed6597449e0c05d156cd61437a949d9617", "patch": "@@ -140,8 +140,10 @@ fn check_copy_clone<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, item: &Item, trait_ref\n             return; // ty is not Copy\n         }\n \n-        // Some types are not Clone by default but could be cloned `by hand` if necessary\n         match ty.sty {\n+            //FIXME:unions: TypeVariants::TyUnion(..) => return,\n+\n+            // Some types are not Clone by default but could be cloned \u201cby hand\u201d if necessary\n             TypeVariants::TyEnum(def, substs) |\n             TypeVariants::TyStruct(def, substs) => {\n                 for variant in &def.variants {"}, {"sha": "9b18eed93ee9163024582a2114172f5c5d081473", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7684a2ed6597449e0c05d156cd61437a949d9617/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7684a2ed6597449e0c05d156cd61437a949d9617/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=7684a2ed6597449e0c05d156cd61437a949d9617", "patch": "@@ -209,7 +209,8 @@ fn has_is_empty(cx: &LateContext, expr: &Expr) -> bool {\n         }\n         ty::TyProjection(_) => ty.ty_to_def_id().map_or(false, |id| has_is_empty_impl(cx, &id)),\n         ty::TyEnum(id, _) |\n-        ty::TyStruct(id, _) => has_is_empty_impl(cx, &id.did),\n+        ty::TyStruct(id, _) /*FIXME:unions: |\n+        ty::TyUnion(id, _)*/ => has_is_empty_impl(cx, &id.did),\n         ty::TyArray(..) | ty::TyStr => true,\n         _ => false,\n     }"}, {"sha": "bd6354ad93235a37e8d14b44a20ed2cdcd7fdedb", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7684a2ed6597449e0c05d156cd61437a949d9617/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7684a2ed6597449e0c05d156cd61437a949d9617/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=7684a2ed6597449e0c05d156cd61437a949d9617", "patch": "@@ -21,7 +21,7 @@ use rustc::hir;\n use rustc::lint::*;\n use rustc::ty;\n use syntax::ast;\n-use syntax::attr::{self, AttrMetaMethods};\n+use syntax::attr;\n use syntax::codemap::Span;\n use utils::in_macro;\n \n@@ -99,7 +99,7 @@ impl LateLintPass for MissingDoc {\n         let doc_hidden = self.doc_hidden() || attrs.iter().any(|attr| {\n             attr.check_name(\"doc\") && match attr.meta_item_list() {\n                 None => false,\n-                Some(l) => attr::contains_name(&l[..], \"hidden\"),\n+                Some(l) => attr::list_contains_name(&l[..], \"hidden\"),\n             }\n         });\n         self.doc_hidden_stack.push(doc_hidden);\n@@ -123,6 +123,7 @@ impl LateLintPass for MissingDoc {\n             hir::ItemStruct(..) => \"a struct\",\n             hir::ItemTrait(..) => \"a trait\",\n             hir::ItemTy(..) => \"a type alias\",\n+            //FIXME:unions: hir::ItemUnion(..) => \"a union\",\n             hir::ItemDefaultImpl(..) |\n             hir::ItemExternCrate(..) |\n             hir::ItemForeignMod(..) |"}, {"sha": "488ca5c8a62bda88f9faff6c7d72face032b25d2", "filename": "clippy_lints/src/unsafe_removed_from_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7684a2ed6597449e0c05d156cd61437a949d9617/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7684a2ed6597449e0c05d156cd61437a949d9617/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs?ref=7684a2ed6597449e0c05d156cd61437a949d9617", "patch": "@@ -51,8 +51,8 @@ impl LateLintPass for UnsafeNameRemoval {\n                 ViewPath_::ViewPathList(_, ref path_list_items) => {\n                     for path_list_item in path_list_items.iter() {\n                         let plid = path_list_item.node;\n-                        if let (Some(name), Some(rename)) = (plid.name(), plid.rename()) {\n-                            unsafe_to_safe_check(name, rename, cx, &item.span);\n+                        if let Some(rename) = plid.rename {\n+                            unsafe_to_safe_check(plid.name, rename, cx, &item.span);\n                         };\n                     }\n                 }"}, {"sha": "f9a93ed3f6ee1fef1c83b0a83f852c8b94f3c145", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7684a2ed6597449e0c05d156cd61437a949d9617/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7684a2ed6597449e0c05d156cd61437a949d9617/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=7684a2ed6597449e0c05d156cd61437a949d9617", "patch": "@@ -4,13 +4,13 @@\n \n use std::{fmt, fs, io};\n use std::io::Read;\n-use syntax::{ast, codemap, ptr};\n+use syntax::{ast, codemap};\n use syntax::parse::token;\n use toml;\n \n /// Get the configuration file from arguments.\n-pub fn file(args: &[ptr::P<ast::MetaItem>]) -> Result<Option<token::InternedString>, (&'static str, codemap::Span)> {\n-    for arg in args {\n+pub fn file(args: &[codemap::Spanned<ast::NestedMetaItemKind>]) -> Result<Option<token::InternedString>, (&'static str, codemap::Span)> {\n+    for arg in args.iter().filter_map(|a| a.meta_item()) {\n         match arg.node {\n             ast::MetaItemKind::Word(ref name) |\n             ast::MetaItemKind::List(ref name, _) => {"}, {"sha": "39d9dde288195fd93fbe87acd974abbb33ae1201", "filename": "tests/compile-fail/derive.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7684a2ed6597449e0c05d156cd61437a949d9617/tests%2Fcompile-fail%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7684a2ed6597449e0c05d156cd61437a949d9617/tests%2Fcompile-fail%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fderive.rs?ref=7684a2ed6597449e0c05d156cd61437a949d9617", "patch": "@@ -1,9 +1,10 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n \n+//FIXME:unions: #![feature(untagged_unions)]\n+\n #![deny(warnings)]\n #![allow(dead_code)]\n-#![allow(unused_variables)] // Temporary fix for rustc false positive. To be removed.\n \n use std::hash::{Hash, Hasher};\n \n@@ -46,6 +47,22 @@ impl Clone for Qux {\n     fn clone(&self) -> Self { Qux }\n }\n \n+/* FIXME:unions\n+// looks like unions don't support deriving Clone for now\n+#[derive(Copy)]\n+union Union {\n+    a: u8,\n+}\n+\n+impl Clone for Union {\n+    fn clone(&self) -> Self {\n+        Union {\n+            a: 42,\n+        }\n+    }\n+}\n+*/\n+\n // See #666\n #[derive(Copy)]\n struct Lt<'a> {"}, {"sha": "39b59a599073e45230e53a8afcc3ef90e4ec8133", "filename": "tests/compile-fail/no_effect.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7684a2ed6597449e0c05d156cd61437a949d9617/tests%2Fcompile-fail%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7684a2ed6597449e0c05d156cd61437a949d9617/tests%2Fcompile-fail%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fno_effect.rs?ref=7684a2ed6597449e0c05d156cd61437a949d9617", "patch": "@@ -4,6 +4,7 @@\n #![deny(no_effect, unnecessary_operation)]\n #![allow(dead_code)]\n #![allow(path_statements)]\n+//FIXME:unions #![feature(untagged_unions)]\n \n struct Unit;\n struct Tuple(i32);\n@@ -15,6 +16,13 @@ enum Enum {\n     Struct { field: i32 },\n }\n \n+/*FIXME:unions:\n+union Union {\n+    a: u8,\n+    b: f64,\n+}\n+*/\n+\n fn get_number() -> i32 { 0 }\n fn get_struct() -> Struct { Struct { field: 0 } }\n \n@@ -30,6 +38,7 @@ fn main() {\n     Tuple(0); //~ERROR statement with no effect\n     Struct { field: 0 }; //~ERROR statement with no effect\n     Struct { ..s }; //~ERROR statement with no effect\n+    //FIXME:unions: Union { a: 0 }; // /**FIXME*~***/ ERROR statement with no effect\n     Enum::Tuple(0); //~ERROR statement with no effect\n     Enum::Struct { field: 0 }; //~ERROR statement with no effect\n     5 + 6; //~ERROR statement with no effect"}]}