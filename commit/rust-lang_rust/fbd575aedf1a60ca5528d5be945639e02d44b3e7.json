{"sha": "fbd575aedf1a60ca5528d5be945639e02d44b3e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiZDU3NWFlZGYxYTYwY2E1NTI4ZDViZTk0NTYzOWUwMmQ0NGIzZTc=", "commit": {"author": {"name": "Ian Jackson", "email": "ijackson@chiark.greenend.org.uk", "date": "2021-02-22T14:30:03Z"}, "committer": {"name": "Ian Jackson", "email": "ijackson@chiark.greenend.org.uk", "date": "2021-02-22T18:15:42Z"}, "message": "process::unix: Handle other wait statuses in ExitStatus as Display\n\nCurrently, on Nightly, this panics:\n\n```\nuse std::process::ExitStatus;\nuse std::os::unix::process::ExitStatusExt;\n\nfn main() {\n    let st = ExitStatus::from_raw(0x007f);\n    println!(\"st = {}\", st);\n}\n```\n\nThis is because the impl of Display assumes that if .code() is None,\n.signal() must be Some.  That was a false assumption, although it was\ntrue with buggy code before\n  5b1316f78152a9c066b357ea9addf803d48e114a\n  unix ExitStatus: Do not treat WIFSTOPPED as WIFSIGNALED\n\nThis is not likely to have affected many people in practice, because\n`Command` will never produce such a wait status (`ExitStatus`).\n\nSigned-off-by: Ian Jackson <ijackson@chiark.greenend.org.uk>", "tree": {"sha": "4270508d0b9106f474b2ff8d5bc189613dd681a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4270508d0b9106f474b2ff8d5bc189613dd681a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbd575aedf1a60ca5528d5be945639e02d44b3e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbd575aedf1a60ca5528d5be945639e02d44b3e7", "html_url": "https://github.com/rust-lang/rust/commit/fbd575aedf1a60ca5528d5be945639e02d44b3e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbd575aedf1a60ca5528d5be945639e02d44b3e7/comments", "author": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a9f7862bcfa5870a34bb54f77a03c73d1db5c37", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a9f7862bcfa5870a34bb54f77a03c73d1db5c37", "html_url": "https://github.com/rust-lang/rust/commit/8a9f7862bcfa5870a34bb54f77a03c73d1db5c37"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "26cbb0a5083181e6442a07529f57df41a9abcfc4", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fbd575aedf1a60ca5528d5be945639e02d44b3e7/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbd575aedf1a60ca5528d5be945639e02d44b3e7/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=fbd575aedf1a60ca5528d5be945639e02d44b3e7", "patch": "@@ -527,9 +527,18 @@ impl fmt::Display for ExitStatus {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         if let Some(code) = self.code() {\n             write!(f, \"exit code: {}\", code)\n+        } else if let Some(signal) = self.signal() {\n+            if self.core_dumped() {\n+                write!(f, \"signal: {} (core dumped)\", signal)\n+            } else {\n+                write!(f, \"signal: {}\", signal)\n+            }\n+        } else if let Some(signal) = self.stopped_signal() {\n+            write!(f, \"stopped (not terminated) by signal: {}\", signal)\n+        } else if self.continued() {\n+            write!(f, \"continued (WIFCONTINUED)\")\n         } else {\n-            let signal = self.signal().unwrap();\n-            write!(f, \"signal: {}\", signal)\n+            write!(f, \"unrecognised wait status: {} {:#x}\", self.0, self.0)\n         }\n     }\n }"}]}