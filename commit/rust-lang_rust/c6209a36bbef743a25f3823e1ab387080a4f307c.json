{"sha": "c6209a36bbef743a25f3823e1ab387080a4f307c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MjA5YTM2YmJlZjc0M2EyNWYzODIzZTFhYjM4NzA4MGE0ZjMwN2M=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-11-18T17:32:24Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-12-21T00:19:05Z"}, "message": "Always report private-in-public in associated types as hard errors\n\naccording to RFC 2145.\n\nFix a silly label message.", "tree": {"sha": "2fff1817e8565a5f8ef3c29a783198eebcee1d8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fff1817e8565a5f8ef3c29a783198eebcee1d8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6209a36bbef743a25f3823e1ab387080a4f307c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6209a36bbef743a25f3823e1ab387080a4f307c", "html_url": "https://github.com/rust-lang/rust/commit/c6209a36bbef743a25f3823e1ab387080a4f307c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6209a36bbef743a25f3823e1ab387080a4f307c/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "020961d88027faf901c533634f07bb5bf3bb64d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/020961d88027faf901c533634f07bb5bf3bb64d3", "html_url": "https://github.com/rust-lang/rust/commit/020961d88027faf901c533634f07bb5bf3bb64d3"}], "stats": {"total": 139, "additions": 108, "deletions": 31}, "files": [{"sha": "5b277402f1e03b1e394e10fe55824e351c5e3c8b", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c6209a36bbef743a25f3823e1ab387080a4f307c/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6209a36bbef743a25f3823e1ab387080a4f307c/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=c6209a36bbef743a25f3823e1ab387080a4f307c", "patch": "@@ -1313,6 +1313,7 @@ struct SearchInterfaceForPrivateItemsVisitor<'a, 'tcx: 'a> {\n     min_visibility: ty::Visibility,\n     has_pub_restricted: bool,\n     has_old_errors: bool,\n+    in_assoc_ty: bool,\n }\n \n impl<'a, 'tcx: 'a> SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n@@ -1373,11 +1374,11 @@ impl<'a, 'tcx: 'a> SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n                 self.min_visibility = vis;\n             }\n             if !vis.is_at_least(self.required_visibility, self.tcx) {\n-                if self.has_pub_restricted || self.has_old_errors {\n+                if self.has_pub_restricted || self.has_old_errors || self.in_assoc_ty {\n                     struct_span_err!(self.tcx.sess, self.span, E0445,\n                                      \"private trait `{}` in public interface\", trait_ref)\n                         .span_label(self.span, format!(\n-                                    \"private trait can't be public\"))\n+                                    \"can't leak private trait\"))\n                         .emit();\n                 } else {\n                     self.tcx.lint_node(lint::builtin::PRIVATE_IN_PUBLIC,\n@@ -1428,7 +1429,7 @@ impl<'a, 'tcx: 'a> TypeVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'\n                     self.min_visibility = vis;\n                 }\n                 if !vis.is_at_least(self.required_visibility, self.tcx) {\n-                    if self.has_pub_restricted || self.has_old_errors {\n+                    if self.has_pub_restricted || self.has_old_errors || self.in_assoc_ty {\n                         let mut err = struct_span_err!(self.tcx.sess, self.span, E0446,\n                             \"private type `{}` in public interface\", ty);\n                         err.span_label(self.span, \"can't leak private type\");\n@@ -1489,6 +1490,7 @@ impl<'a, 'tcx> PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n             required_visibility,\n             has_pub_restricted: self.has_pub_restricted,\n             has_old_errors,\n+            in_assoc_ty: false,\n         }\n     }\n }\n@@ -1529,6 +1531,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n \n                 for trait_item_ref in trait_item_refs {\n                     let mut check = self.check(trait_item_ref.id.node_id, item_visibility);\n+                    check.in_assoc_ty = trait_item_ref.kind == hir::AssociatedItemKind::Type;\n                     check.generics().predicates();\n \n                     if trait_item_ref.kind == hir::AssociatedItemKind::Type &&\n@@ -1579,10 +1582,10 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n \n                 for impl_item_ref in impl_item_refs {\n                     let impl_item = self.tcx.hir.impl_item(impl_item_ref.id);\n-                    let impl_item_vis =\n-                        ty::Visibility::from_hir(&impl_item.vis, item.id, tcx);\n-                    self.check(impl_item.id, min(impl_item_vis, ty_vis))\n-                        .generics().predicates().ty();\n+                    let impl_item_vis = ty::Visibility::from_hir(&impl_item.vis, item.id, tcx);\n+                    let mut check = self.check(impl_item.id, min(impl_item_vis, ty_vis));\n+                    check.in_assoc_ty = impl_item_ref.kind == hir::AssociatedItemKind::Type;\n+                    check.generics().predicates().ty();\n \n                     // Recurse for e.g. `impl Trait` (see `visit_ty`).\n                     self.inner_visibility = impl_item_vis;\n@@ -1597,7 +1600,9 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n                 self.check(item.id, vis).generics().predicates();\n                 for impl_item_ref in impl_item_refs {\n                     let impl_item = self.tcx.hir.impl_item(impl_item_ref.id);\n-                    self.check(impl_item.id, vis).generics().predicates().ty();\n+                    let mut check = self.check(impl_item.id, vis);\n+                    check.in_assoc_ty = impl_item_ref.kind == hir::AssociatedItemKind::Type;\n+                    check.generics().predicates().ty();\n \n                     // Recurse for e.g. `impl Trait` (see `visit_ty`).\n                     self.inner_visibility = vis;"}, {"sha": "bca1b52d17a921c4e8fd0cccca6d82f840d3fa2d", "filename": "src/test/compile-fail/E0445.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6209a36bbef743a25f3823e1ab387080a4f307c/src%2Ftest%2Fcompile-fail%2FE0445.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6209a36bbef743a25f3823e1ab387080a4f307c/src%2Ftest%2Fcompile-fail%2FE0445.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0445.rs?ref=c6209a36bbef743a25f3823e1ab387080a4f307c", "patch": "@@ -14,9 +14,12 @@ trait Foo {\n \n pub trait Bar : Foo {}\n //~^ ERROR private trait `Foo` in public interface [E0445]\n+//~| NOTE can't leak private trait\n pub struct Bar2<T: Foo>(pub T);\n //~^ ERROR private trait `Foo` in public interface [E0445]\n+//~| NOTE can't leak private trait\n pub fn foo<T: Foo> (t: T) {}\n //~^ ERROR private trait `Foo` in public interface [E0445]\n+//~| NOTE can't leak private trait\n \n fn main() {}"}, {"sha": "04ae8f6d255d0ffd6542c8061a1cd7ae80f29d29", "filename": "src/test/compile-fail/issue-30079.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c6209a36bbef743a25f3823e1ab387080a4f307c/src%2Ftest%2Fcompile-fail%2Fissue-30079.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6209a36bbef743a25f3823e1ab387080a4f307c/src%2Ftest%2Fcompile-fail%2Fissue-30079.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-30079.rs?ref=c6209a36bbef743a25f3823e1ab387080a4f307c", "patch": "@@ -8,15 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(private_in_public)]\n-#![allow(unused)]\n-\n struct SemiPriv;\n \n mod m1 {\n     struct Priv;\n     impl ::SemiPriv {\n-        pub fn f(_: Priv) {} //~ ERROR private type `m1::Priv` in public interface\n+        pub fn f(_: Priv) {} //~ WARN private type `m1::Priv` in public interface\n         //~^ WARNING hard error\n     }\n \n@@ -29,7 +26,6 @@ mod m2 {\n     struct Priv;\n     impl ::std::ops::Deref for ::SemiPriv {\n         type Target = Priv; //~ ERROR private type `m2::Priv` in public interface\n-        //~^ WARNING hard error\n         fn deref(&self) -> &Self::Target { unimplemented!() }\n     }\n \n@@ -47,7 +43,6 @@ mod m3 {\n     struct Priv;\n     impl ::SemiPrivTrait for () {\n         type Assoc = Priv; //~ ERROR private type `m3::Priv` in public interface\n-        //~^ WARNING hard error\n     }\n }\n "}, {"sha": "59dee25664252615f79fd2904183c3a1bd1d8efd", "filename": "src/test/compile-fail/private-in-public-assoc-ty.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c6209a36bbef743a25f3823e1ab387080a4f307c/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6209a36bbef743a25f3823e1ab387080a4f307c/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-assoc-ty.rs?ref=c6209a36bbef743a25f3823e1ab387080a4f307c", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Private types and traits are not allowed in interfaces of associated types.\n+// This test also ensures that the checks are performed even inside private modules.\n+\n+#![feature(associated_type_defaults)]\n+\n+mod m {\n+    struct Priv;\n+    trait PrivTr {}\n+    impl PrivTr for Priv {}\n+    pub trait PubTrAux1<T> {}\n+    pub trait PubTrAux2 { type A; }\n+\n+    // \"Private-in-public in associated types is hard error\" in RFC 2145\n+    // applies only to the aliased types, not bounds.\n+    pub trait PubTr {\n+        //~^ WARN private trait `m::PrivTr` in public interface\n+        //~| WARN this was previously accepted\n+        //~| WARN private type `m::Priv` in public interface\n+        //~| WARN this was previously accepted\n+        type Alias1: PrivTr;\n+        type Alias2: PubTrAux1<Priv> = u8;\n+        type Alias3: PubTrAux2<A = Priv> = u8;\n+\n+        type Alias4 = Priv;\n+        //~^ ERROR private type `m::Priv` in public interface\n+    }\n+    impl PubTr for u8 {\n+        type Alias1 = Priv;\n+        //~^ ERROR private type `m::Priv` in public interface\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "4e10614bf62c6b274fce6a581e4928f7d1ad5b7a", "filename": "src/test/compile-fail/private-in-public-ill-formed.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/c6209a36bbef743a25f3823e1ab387080a4f307c/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-ill-formed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6209a36bbef743a25f3823e1ab387080a4f307c/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-ill-formed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-ill-formed.rs?ref=c6209a36bbef743a25f3823e1ab387080a4f307c", "patch": "@@ -0,0 +1,45 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod aliases_pub {\n+    struct Priv;\n+    mod m {\n+        pub struct Pub3;\n+    }\n+\n+    trait PrivTr {\n+        type AssocAlias;\n+    }\n+    impl PrivTr for Priv {\n+        type AssocAlias = m::Pub3;\n+    }\n+\n+    impl (<Priv as PrivTr>::AssocAlias) { //~ ERROR no base type found for inherent implementation\n+        pub fn f(arg: Priv) {} // private type `aliases_pub::Priv` in public interface\n+    }\n+}\n+\n+mod aliases_priv {\n+    struct Priv;\n+    struct Priv3;\n+\n+    trait PrivTr {\n+        type AssocAlias;\n+    }\n+    impl PrivTr for Priv {\n+        type AssocAlias = Priv3;\n+    }\n+\n+    impl (<Priv as PrivTr>::AssocAlias) { //~ ERROR no base type found for inherent implementation\n+        pub fn f(arg: Priv) {} // OK\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "dfcf4dc01b8abd49e6947ab86d7dd731ebca7e6d", "filename": "src/test/compile-fail/private-in-public-warn.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c6209a36bbef743a25f3823e1ab387080a4f307c/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6209a36bbef743a25f3823e1ab387080a4f307c/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs?ref=c6209a36bbef743a25f3823e1ab387080a4f307c", "patch": "@@ -13,7 +13,6 @@\n \n #![feature(associated_type_defaults)]\n #![deny(private_in_public)]\n-#![allow(unused)]\n #![allow(improper_ctypes)]\n \n mod types {\n@@ -35,7 +34,6 @@ mod types {\n         const C: Priv = Priv; //~ ERROR private type `types::Priv` in public interface\n         //~^ WARNING hard error\n         type Alias = Priv; //~ ERROR private type `types::Priv` in public interface\n-        //~^ WARNING hard error\n         fn f1(arg: Priv) {} //~ ERROR private type `types::Priv` in public interface\n         //~^ WARNING hard error\n         fn f2() -> Priv { panic!() } //~ ERROR private type `types::Priv` in public interface\n@@ -51,7 +49,6 @@ mod types {\n     }\n     impl PubTr for Pub {\n         type Alias = Priv; //~ ERROR private type `types::Priv` in public interface\n-        //~^ WARNING hard error\n     }\n }\n \n@@ -146,7 +143,6 @@ mod impls {\n     }\n     impl PubTr for Pub {\n         type Alias = Priv; //~ ERROR private type `impls::Priv` in public interface\n-        //~^ WARNING hard error\n     }\n }\n \n@@ -220,21 +216,14 @@ mod aliases_pub {\n         pub fn f(arg: Priv) {} //~ ERROR private type `aliases_pub::Priv` in public interface\n         //~^ WARNING hard error\n     }\n-    // This doesn't even parse\n-    // impl <Priv as PrivTr>::AssocAlias {\n-    //     pub fn f(arg: Priv) {} // ERROR private type `aliases_pub::Priv` in public interface\n-    // }\n     impl PrivUseAliasTr for PrivUseAlias {\n         type Check = Priv; //~ ERROR private type `aliases_pub::Priv` in public interface\n-        //~^ WARNING hard error\n     }\n     impl PrivUseAliasTr for PrivAlias {\n         type Check = Priv; //~ ERROR private type `aliases_pub::Priv` in public interface\n-        //~^ WARNING hard error\n     }\n     impl PrivUseAliasTr for <Priv as PrivTr>::AssocAlias {\n         type Check = Priv; //~ ERROR private type `aliases_pub::Priv` in public interface\n-        //~^ WARNING hard error\n     }\n }\n \n@@ -273,10 +262,6 @@ mod aliases_priv {\n     impl PrivAlias {\n         pub fn f(arg: Priv) {} // OK\n     }\n-    // This doesn't even parse\n-    // impl <Priv as PrivTr>::AssocAlias {\n-    //     pub fn f(arg: Priv) {} // OK\n-    // }\n     impl PrivUseAliasTr for PrivUseAlias {\n         type Check = Priv; // OK\n     }"}, {"sha": "351dc6b776b210f7c12916e7ac8a047426e3a23f", "filename": "src/test/compile-fail/private-inferred-type.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c6209a36bbef743a25f3823e1ab387080a4f307c/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6209a36bbef743a25f3823e1ab387080a4f307c/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type.rs?ref=c6209a36bbef743a25f3823e1ab387080a4f307c", "patch": "@@ -11,7 +11,7 @@\n #![feature(associated_consts)]\n #![feature(conservative_impl_trait)]\n #![feature(decl_macro)]\n-#![allow(warnings)]\n+#![allow(private_in_public)]\n \n mod m {\n     fn priv_fn() {}\n@@ -70,6 +70,7 @@ mod m {\n     impl<T> TraitWithTyParam<T> for u8 {}\n     impl TraitWithTyParam2<Priv> for u8 {}\n     impl TraitWithAssocTy for u8 { type AssocTy = Priv; }\n+    //~^ ERROR private type `m::Priv` in public interface\n \n     pub fn leak_anon1() -> impl Trait + 'static { 0 }\n     pub fn leak_anon2() -> impl TraitWithTyParam<Alias> { 0 }\n@@ -90,7 +91,7 @@ mod adjust {\n     pub struct S3;\n \n     impl Deref for S1 {\n-        type Target = S2Alias;\n+        type Target = S2Alias; //~ ERROR private type `adjust::S2` in public interface\n         fn deref(&self) -> &Self::Target { loop {} }\n     }\n     impl Deref for S2 {"}]}