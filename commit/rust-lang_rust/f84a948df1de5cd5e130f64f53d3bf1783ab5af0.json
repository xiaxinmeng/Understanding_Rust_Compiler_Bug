{"sha": "f84a948df1de5cd5e130f64f53d3bf1783ab5af0", "node_id": "C_kwDOAAsO6NoAKGY4NGE5NDhkZjFkZTVjZDVlMTMwZjY0ZjUzZDNiZjE3ODNhYjVhZjA", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-08-02T10:55:25Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-08-02T10:55:52Z"}, "message": "Remove Clean trait implementation for hir::Lifetime", "tree": {"sha": "73677781d4b3f33b7d850863450be5673846eb1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73677781d4b3f33b7d850863450be5673846eb1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f84a948df1de5cd5e130f64f53d3bf1783ab5af0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f84a948df1de5cd5e130f64f53d3bf1783ab5af0", "html_url": "https://github.com/rust-lang/rust/commit/f84a948df1de5cd5e130f64f53d3bf1783ab5af0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f84a948df1de5cd5e130f64f53d3bf1783ab5af0/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa14d02d9bdd17206a26a25c02555a99bf980f1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa14d02d9bdd17206a26a25c02555a99bf980f1c", "html_url": "https://github.com/rust-lang/rust/commit/fa14d02d9bdd17206a26a25c02555a99bf980f1c"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "a13665eb30602e0f669fab983c8eed2d200956c4", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f84a948df1de5cd5e130f64f53d3bf1783ab5af0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f84a948df1de5cd5e130f64f53d3bf1783ab5af0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=f84a948df1de5cd5e130f64f53d3bf1783ab5af0", "patch": "@@ -130,7 +130,7 @@ impl<'tcx> Clean<'tcx, Attributes> for [ast::Attribute] {\n impl<'tcx> Clean<'tcx, Option<GenericBound>> for hir::GenericBound<'tcx> {\n     fn clean(&self, cx: &mut DocContext<'tcx>) -> Option<GenericBound> {\n         Some(match *self {\n-            hir::GenericBound::Outlives(lt) => GenericBound::Outlives(lt.clean(cx)),\n+            hir::GenericBound::Outlives(lt) => GenericBound::Outlives(clean_lifetime(lt, cx)),\n             hir::GenericBound::LangItemTrait(lang_item, span, _, generic_args) => {\n                 let def_id = cx.tcx.require_lang_item(lang_item, Some(span));\n \n@@ -214,21 +214,19 @@ impl<'tcx> Clean<'tcx, GenericBound> for ty::PolyTraitRef<'tcx> {\n     }\n }\n \n-impl<'tcx> Clean<'tcx, Lifetime> for hir::Lifetime {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Lifetime {\n-        let def = cx.tcx.named_region(self.hir_id);\n-        if let Some(\n-            rl::Region::EarlyBound(_, node_id)\n-            | rl::Region::LateBound(_, _, node_id)\n-            | rl::Region::Free(_, node_id),\n-        ) = def\n-        {\n-            if let Some(lt) = cx.substs.get(&node_id).and_then(|p| p.as_lt()).cloned() {\n-                return lt;\n-            }\n+fn clean_lifetime<'tcx>(lifetime: hir::Lifetime, cx: &mut DocContext<'tcx>) -> Lifetime {\n+    let def = cx.tcx.named_region(lifetime.hir_id);\n+    if let Some(\n+        rl::Region::EarlyBound(_, node_id)\n+        | rl::Region::LateBound(_, _, node_id)\n+        | rl::Region::Free(_, node_id),\n+    ) = def\n+    {\n+        if let Some(lt) = cx.substs.get(&node_id).and_then(|p| p.as_lt()).cloned() {\n+            return lt;\n         }\n-        Lifetime(self.name.ident().name)\n     }\n+    Lifetime(lifetime.name.ident().name)\n }\n \n pub(crate) fn clean_const<'tcx>(constant: &hir::ConstArg, cx: &mut DocContext<'tcx>) -> Constant {\n@@ -305,7 +303,7 @@ impl<'tcx> Clean<'tcx, Option<WherePredicate>> for hir::WherePredicate<'tcx> {\n             }\n \n             hir::WherePredicate::RegionPredicate(ref wrp) => WherePredicate::RegionPredicate {\n-                lifetime: wrp.lifetime.clean(cx),\n+                lifetime: clean_lifetime(wrp.lifetime, cx),\n                 bounds: wrp.bounds.iter().filter_map(|x| x.clean(cx)).collect(),\n             },\n \n@@ -518,7 +516,7 @@ fn clean_generic_param<'tcx>(\n                     .filter(|bp| !bp.in_where_clause)\n                     .flat_map(|bp| bp.bounds)\n                     .map(|bound| match bound {\n-                        hir::GenericBound::Outlives(lt) => lt.clean(cx),\n+                        hir::GenericBound::Outlives(lt) => clean_lifetime(*lt, cx),\n                         _ => panic!(),\n                     })\n                     .collect()\n@@ -1425,7 +1423,8 @@ fn maybe_expand_private_type_alias<'tcx>(\n                 });\n                 if let Some(lt) = lifetime.cloned() {\n                     let lt_def_id = cx.tcx.hir().local_def_id(param.hir_id);\n-                    let cleaned = if !lt.is_elided() { lt.clean(cx) } else { Lifetime::elided() };\n+                    let cleaned =\n+                        if !lt.is_elided() { clean_lifetime(lt, cx) } else { Lifetime::elided() };\n                     substs.insert(lt_def_id.to_def_id(), SubstParam::Lifetime(cleaned));\n                 }\n                 indices.lifetimes += 1;\n@@ -1497,7 +1496,7 @@ pub(crate) fn clean_ty<'tcx>(ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> T\n             // there's no case where it could cause the function to fail to compile.\n             let elided =\n                 l.is_elided() || matches!(l.name, LifetimeName::Param(_, ParamName::Fresh));\n-            let lifetime = if elided { None } else { Some(l.clean(cx)) };\n+            let lifetime = if elided { None } else { Some(clean_lifetime(*l, cx)) };\n             BorrowedRef { lifetime, mutability: m.mutbl, type_: Box::new(clean_ty(m.ty, cx)) }\n         }\n         TyKind::Slice(ty) => Slice(Box::new(clean_ty(ty, cx))),\n@@ -1533,7 +1532,8 @@ pub(crate) fn clean_ty<'tcx>(ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> T\n         TyKind::Path(_) => clean_qpath(ty, cx),\n         TyKind::TraitObject(bounds, ref lifetime, _) => {\n             let bounds = bounds.iter().map(|bound| bound.clean(cx)).collect();\n-            let lifetime = if !lifetime.is_elided() { Some(lifetime.clean(cx)) } else { None };\n+            let lifetime =\n+                if !lifetime.is_elided() { Some(clean_lifetime(*lifetime, cx)) } else { None };\n             DynTrait(bounds, lifetime)\n         }\n         TyKind::BareFn(barefn) => BareFunction(Box::new(barefn.clean(cx))),\n@@ -1871,7 +1871,7 @@ impl<'tcx> Clean<'tcx, GenericArgs> for hir::GenericArgs<'tcx> {\n                 .iter()\n                 .map(|arg| match arg {\n                     hir::GenericArg::Lifetime(lt) if !lt.is_elided() => {\n-                        GenericArg::Lifetime(lt.clean(cx))\n+                        GenericArg::Lifetime(clean_lifetime(*lt, cx))\n                     }\n                     hir::GenericArg::Lifetime(_) => GenericArg::Lifetime(Lifetime::elided()),\n                     hir::GenericArg::Type(ty) => GenericArg::Type(clean_ty(ty, cx)),"}]}