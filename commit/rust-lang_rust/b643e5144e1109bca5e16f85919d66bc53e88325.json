{"sha": "b643e5144e1109bca5e16f85919d66bc53e88325", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2NDNlNTE0NGUxMTA5YmNhNWUxNmY4NTkxOWQ2NmJjNTNlODgzMjU=", "commit": {"author": {"name": "Irina Popa", "email": "irinagpopa@gmail.com", "date": "2018-07-17T13:00:10Z"}, "committer": {"name": "Irina Popa", "email": "irinagpopa@gmail.com", "date": "2018-07-30T17:10:44Z"}, "message": "rustc_codegen_llvm: use safe references for RustArchiveMember.", "tree": {"sha": "2289cacbfccae704a55345fc7b5f0e10d59e3730", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2289cacbfccae704a55345fc7b5f0e10d59e3730"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b643e5144e1109bca5e16f85919d66bc53e88325", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b643e5144e1109bca5e16f85919d66bc53e88325", "html_url": "https://github.com/rust-lang/rust/commit/b643e5144e1109bca5e16f85919d66bc53e88325", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b643e5144e1109bca5e16f85919d66bc53e88325/comments", "author": {"login": "irinagpopa", "id": 32459019, "node_id": "MDQ6VXNlcjMyNDU5MDE5", "avatar_url": "https://avatars.githubusercontent.com/u/32459019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irinagpopa", "html_url": "https://github.com/irinagpopa", "followers_url": "https://api.github.com/users/irinagpopa/followers", "following_url": "https://api.github.com/users/irinagpopa/following{/other_user}", "gists_url": "https://api.github.com/users/irinagpopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/irinagpopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irinagpopa/subscriptions", "organizations_url": "https://api.github.com/users/irinagpopa/orgs", "repos_url": "https://api.github.com/users/irinagpopa/repos", "events_url": "https://api.github.com/users/irinagpopa/events{/privacy}", "received_events_url": "https://api.github.com/users/irinagpopa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "irinagpopa", "id": 32459019, "node_id": "MDQ6VXNlcjMyNDU5MDE5", "avatar_url": "https://avatars.githubusercontent.com/u/32459019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irinagpopa", "html_url": "https://github.com/irinagpopa", "followers_url": "https://api.github.com/users/irinagpopa/followers", "following_url": "https://api.github.com/users/irinagpopa/following{/other_user}", "gists_url": "https://api.github.com/users/irinagpopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/irinagpopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irinagpopa/subscriptions", "organizations_url": "https://api.github.com/users/irinagpopa/orgs", "repos_url": "https://api.github.com/users/irinagpopa/repos", "events_url": "https://api.github.com/users/irinagpopa/events{/privacy}", "received_events_url": "https://api.github.com/users/irinagpopa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7669dff2af371338004cb92cd7d757bc2961d21", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7669dff2af371338004cb92cd7d757bc2961d21", "html_url": "https://github.com/rust-lang/rust/commit/c7669dff2af371338004cb92cd7d757bc2961d21"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "af9efc6d7c4173f905254795be1d431a9255258e", "filename": "src/librustc_codegen_llvm/back/archive.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b643e5144e1109bca5e16f85919d66bc53e88325/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643e5144e1109bca5e16f85919d66bc53e88325/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs?ref=b643e5144e1109bca5e16f85919d66bc53e88325", "patch": "@@ -226,10 +226,13 @@ impl<'a> ArchiveBuilder<'a> {\n     }\n \n     fn build_with_llvm(&mut self, kind: ArchiveKind) -> io::Result<()> {\n-        let mut archives = Vec::new();\n+        let removals = mem::replace(&mut self.removals, Vec::new());\n+        let mut additions = mem::replace(&mut self.additions, Vec::new());\n         let mut strings = Vec::new();\n         let mut members = Vec::new();\n-        let removals = mem::replace(&mut self.removals, Vec::new());\n+\n+        let dst = CString::new(self.config.dst.to_str().unwrap())?;\n+        let should_update_symbols = self.should_update_symbols;\n \n         unsafe {\n             if let Some(archive) = self.src_archive() {\n@@ -250,18 +253,18 @@ impl<'a> ArchiveBuilder<'a> {\n                     strings.push(name);\n                 }\n             }\n-            for addition in mem::replace(&mut self.additions, Vec::new()) {\n+            for addition in &mut additions {\n                 match addition {\n                     Addition::File { path, name_in_archive } => {\n                         let path = CString::new(path.to_str().unwrap())?;\n-                        let name = CString::new(name_in_archive)?;\n+                        let name = CString::new(name_in_archive.clone())?;\n                         members.push(llvm::LLVMRustArchiveMemberNew(path.as_ptr(),\n                                                                     name.as_ptr(),\n                                                                     None));\n                         strings.push(path);\n                         strings.push(name);\n                     }\n-                    Addition::Archive { archive, mut skip } => {\n+                    Addition::Archive { archive, skip } => {\n                         for child in archive.iter() {\n                             let child = child.map_err(string_to_io_error)?;\n                             if !is_relevant_child(&child) {\n@@ -288,17 +291,14 @@ impl<'a> ArchiveBuilder<'a> {\n                             members.push(m);\n                             strings.push(name);\n                         }\n-                        archives.push(archive);\n                     }\n                 }\n             }\n \n-            let dst = self.config.dst.to_str().unwrap().as_bytes();\n-            let dst = CString::new(dst)?;\n             let r = llvm::LLVMRustWriteArchive(dst.as_ptr(),\n                                                members.len() as libc::size_t,\n-                                               members.as_ptr(),\n-                                               self.should_update_symbols,\n+                                               members.as_ptr() as *const &_,\n+                                               should_update_symbols,\n                                                kind);\n             let ret = if r.into_result().is_err() {\n                 let err = llvm::LLVMRustGetLastError();"}, {"sha": "cbf1c556c6cc325e1fcbfc8fe8df6c5c027df444", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b643e5144e1109bca5e16f85919d66bc53e88325/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643e5144e1109bca5e16f85919d66bc53e88325/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=b643e5144e1109bca5e16f85919d66bc53e88325", "patch": "@@ -413,8 +413,8 @@ pub struct ArchiveChild<'a>(InvariantOpaque<'a>);\n extern { pub type Twine; }\n extern { pub type DiagnosticInfo; }\n extern { pub type SMDiagnostic; }\n-extern { pub type RustArchiveMember; }\n-pub type RustArchiveMemberRef = *mut RustArchiveMember;\n+#[repr(C)]\n+pub struct RustArchiveMember<'a>(InvariantOpaque<'a>);\n #[repr(C)]\n pub struct OperandBundleDef<'a>(InvariantOpaque<'a>);\n #[repr(C)]\n@@ -1540,15 +1540,15 @@ extern \"C\" {\n extern \"C\" {\n     pub fn LLVMRustWriteArchive(Dst: *const c_char,\n                                 NumMembers: size_t,\n-                                Members: *const RustArchiveMemberRef,\n+                                Members: *const &RustArchiveMember,\n                                 WriteSymbtab: bool,\n                                 Kind: ArchiveKind)\n                                 -> LLVMRustResult;\n     pub fn LLVMRustArchiveMemberNew(Filename: *const c_char,\n                                     Name: *const c_char,\n-                                    Child: Option<&ArchiveChild>)\n-                                    -> RustArchiveMemberRef;\n-    pub fn LLVMRustArchiveMemberFree(Member: RustArchiveMemberRef);\n+                                    Child: Option<&'a ArchiveChild>)\n+                                    -> &'a mut RustArchiveMember<'a>;\n+    pub fn LLVMRustArchiveMemberFree(Member: &'a mut RustArchiveMember<'a>);\n \n     pub fn LLVMRustSetDataLayoutFromTargetMachine(M: &'a Module, TM: &'a TargetMachine);\n "}]}