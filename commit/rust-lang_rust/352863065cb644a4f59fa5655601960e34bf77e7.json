{"sha": "352863065cb644a4f59fa5655601960e34bf77e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1Mjg2MzA2NWNiNjQ0YTRmNTlmYTU2NTU2MDE5NjBlMzRiZjc3ZTc=", "commit": {"author": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2018-10-12T11:48:54Z"}, "committer": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2018-10-12T11:48:54Z"}, "message": "cmp_owned refactor", "tree": {"sha": "abcca88c23219fc1d1b77dd776235590b2433667", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abcca88c23219fc1d1b77dd776235590b2433667"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/352863065cb644a4f59fa5655601960e34bf77e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/352863065cb644a4f59fa5655601960e34bf77e7", "html_url": "https://github.com/rust-lang/rust/commit/352863065cb644a4f59fa5655601960e34bf77e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/352863065cb644a4f59fa5655601960e34bf77e7/comments", "author": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9718fa589552476ee277c52a35271663383cf6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9718fa589552476ee277c52a35271663383cf6a", "html_url": "https://github.com/rust-lang/rust/commit/c9718fa589552476ee277c52a35271663383cf6a"}], "stats": {"total": 45, "additions": 14, "deletions": 31}, "files": [{"sha": "1cf7345e8dfa8113cbe4f997538a989b2791571f", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 14, "deletions": 31, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/352863065cb644a4f59fa5655601960e34bf77e7/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352863065cb644a4f59fa5655601960e34bf77e7/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=352863065cb644a4f59fa5655601960e34bf77e7", "patch": "@@ -21,7 +21,7 @@ use crate::utils::{get_item_name, get_parent_expr, implements_trait, in_constant\n             iter_input_pats, last_path_segment, match_qpath, match_trait_method, paths, snippet, span_lint,\n             span_lint_and_then, walk_ptrs_ty, SpanlessEq};\n use crate::utils::sugg::Sugg;\n-use crate::syntax::ast::{LitKind, CRATE_NODE_ID};\n+use crate::syntax::ast::LitKind;\n use crate::consts::{constant, Constant};\n use crate::rustc_errors::Applicability;\n \n@@ -540,18 +540,10 @@ fn check_to_owned(cx: &LateContext<'_, '_>, expr: &Expr, other: &Expr) {\n         _ => false,\n     };\n \n-    let (lint_span, try_hint) = if deref_arg_impl_partial_eq_other {\n-        // suggest deref on the left\n-        (expr.span, format!(\"*{}\", snip))\n-    } else if other_gets_derefed {\n-        // suggest dropping the to_owned on the left and the deref on the right\n-        let other_snippet = snippet(cx, other.span, \"..\").into_owned();\n-        let other_without_deref = other_snippet.replacen('*', \"\", 1);\n-\n-        (expr.span.to(other.span), format!(\"{} == {}\", snip.to_string(), other_without_deref))\n+    let lint_span = if other_gets_derefed {\n+        expr.span.to(other.span)\n     } else {\n-        // suggest dropping the to_owned on the left\n-        (expr.span, snip.to_string())\n+        expr.span\n     };\n \n     span_lint_and_then(\n@@ -560,29 +552,20 @@ fn check_to_owned(cx: &LateContext<'_, '_>, expr: &Expr, other: &Expr) {\n         lint_span,\n         \"this creates an owned instance just for comparison\",\n         |db| {\n-            // this is as good as our recursion check can get, we can't prove that the\n-            // current function is\n-            // called by\n-            // PartialEq::eq, but we can at least ensure that this code is not part of it\n-            let parent_fn = cx.tcx.hir.get_parent(expr.id);\n-            let parent_impl = cx.tcx.hir.get_parent(parent_fn);\n-            if parent_impl != CRATE_NODE_ID {\n-                if let Node::Item(item) = cx.tcx.hir.get(parent_impl) {\n-                    if let ItemKind::Impl(.., Some(ref trait_ref), _, _) = item.node {\n-                        if trait_ref.path.def.def_id() == partial_eq_trait_id {\n-                            // we are implementing PartialEq, don't suggest not doing `to_owned`, otherwise\n-                            // we go into\n-                            // recursion\n-                            db.span_label(lint_span, \"try implementing the comparison without allocating\");\n-                            return;\n-                        }\n-                    }\n-                }\n-            }\n+            // this also catches PartialEq implementations that call to_owned\n             if other_gets_derefed {\n                 db.span_label(lint_span, \"try implementing the comparison without allocating\");\n                 return;\n             }\n+\n+            let try_hint = if deref_arg_impl_partial_eq_other {\n+                // suggest deref on the left\n+                format!(\"*{}\", snip)\n+            } else {\n+                // suggest dropping the to_owned on the left\n+                snip.to_string()\n+            };\n+\n             db.span_suggestion_with_applicability(\n                 lint_span,\n                 \"try\","}]}