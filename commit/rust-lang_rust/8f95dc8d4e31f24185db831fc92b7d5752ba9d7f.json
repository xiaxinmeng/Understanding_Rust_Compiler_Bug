{"sha": "8f95dc8d4e31f24185db831fc92b7d5752ba9d7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmOTVkYzhkNGUzMWYyNDE4NWRiODMxZmM5MmI3ZDU3NTJiYTlkN2Y=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-27T01:09:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-27T01:09:12Z"}, "message": "Rollup merge of #72533 - Diggsey:db-fix-arc-ub2, r=dtolnay\n\nResolve UB in Arc/Weak interaction (2)\n\nUse raw pointers to avoid making any assertions about the data field.\n\nFollow up from #72479, see that PR for more detail on the motivation.\n\n@RalfJung I was able to avoid a lot of the changes to `Weak`, by making a helper type (`WeakInner`) - because of auto-deref and because the fields have the same name, the rest of the code continues to compile.", "tree": {"sha": "42e22ed62592689285875a36216a666f335751d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42e22ed62592689285875a36216a666f335751d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f95dc8d4e31f24185db831fc92b7d5752ba9d7f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJezb25CRBK7hj4Ov3rIwAAdHIIABb9h6SJ3E2VArocqrbv1OvJ\n5p9iXt8ja1lFoaTIrE2v7WRGA64K76wnAQdepXkvG5Yed+iislM7NPqCuBrEnadC\ndfOedVnXsX3zy375PXcmdnInR1tqf7TdpZO8yrN8hKo+ZpNNAT7gJUUSzuhWNFtU\nrAvuvZg1CPt33JVZ/ob0A3Ptt1Nj67JVMQNQefAzDA8gi3QdqbBW5zjCRwdB5tkf\nWUs5ogI6XX3Zg1d7k6CXWyvb4fjDUPBvjghK/g9iopHQTbkF7jzfryaiY78DkquX\nBcs3bIatwqU1CAbZYQDxhbRGY0SPFwtJt5UNJ3LicntNy4C+xn0D1y6uC9M0Jlw=\n=NPbB\n-----END PGP SIGNATURE-----\n", "payload": "tree 42e22ed62592689285875a36216a666f335751d1\nparent cbe7b908b124047aaff5f1bed1056a71ca0a6b3b\nparent ee6e705d91a7b19aa2d029b21396c70e2129f741\nauthor Dylan DPC <dylan.dpc@gmail.com> 1590541752 +0200\ncommitter GitHub <noreply@github.com> 1590541752 +0200\n\nRollup merge of #72533 - Diggsey:db-fix-arc-ub2, r=dtolnay\n\nResolve UB in Arc/Weak interaction (2)\n\nUse raw pointers to avoid making any assertions about the data field.\n\nFollow up from #72479, see that PR for more detail on the motivation.\n\n@RalfJung I was able to avoid a lot of the changes to `Weak`, by making a helper type (`WeakInner`) - because of auto-deref and because the fields have the same name, the rest of the code continues to compile.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f95dc8d4e31f24185db831fc92b7d5752ba9d7f", "html_url": "https://github.com/rust-lang/rust/commit/8f95dc8d4e31f24185db831fc92b7d5752ba9d7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f95dc8d4e31f24185db831fc92b7d5752ba9d7f/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbe7b908b124047aaff5f1bed1056a71ca0a6b3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbe7b908b124047aaff5f1bed1056a71ca0a6b3b", "html_url": "https://github.com/rust-lang/rust/commit/cbe7b908b124047aaff5f1bed1056a71ca0a6b3b"}, {"sha": "ee6e705d91a7b19aa2d029b21396c70e2129f741", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee6e705d91a7b19aa2d029b21396c70e2129f741", "html_url": "https://github.com/rust-lang/rust/commit/ee6e705d91a7b19aa2d029b21396c70e2129f741"}], "stats": {"total": 35, "additions": 26, "deletions": 9}, "files": [{"sha": "8a45715e89c91a870a703a770d557fb840a15032", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8f95dc8d4e31f24185db831fc92b7d5752ba9d7f/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f95dc8d4e31f24185db831fc92b7d5752ba9d7f/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=8f95dc8d4e31f24185db831fc92b7d5752ba9d7f", "patch": "@@ -867,12 +867,10 @@ impl<T: ?Sized> Arc<T> {\n     unsafe fn drop_slow(&mut self) {\n         // Destroy the data at this time, even though we may not free the box\n         // allocation itself (there may still be weak pointers lying around).\n-        ptr::drop_in_place(&mut self.ptr.as_mut().data);\n+        ptr::drop_in_place(Self::get_mut_unchecked(self));\n \n-        if self.inner().weak.fetch_sub(1, Release) == 1 {\n-            acquire!(self.inner().weak);\n-            Global.dealloc(self.ptr.cast(), Layout::for_value(self.ptr.as_ref()))\n-        }\n+        // Drop the weak ref collectively held by all strong references\n+        drop(Weak { ptr: self.ptr });\n     }\n \n     #[inline]\n@@ -1204,7 +1202,7 @@ impl<T: Clone> Arc<T> {\n \n         // As with `get_mut()`, the unsafety is ok because our reference was\n         // either unique to begin with, or became one upon cloning the contents.\n-        unsafe { &mut this.ptr.as_mut().data }\n+        unsafe { Self::get_mut_unchecked(this) }\n     }\n }\n \n@@ -1280,7 +1278,9 @@ impl<T: ?Sized> Arc<T> {\n     #[inline]\n     #[unstable(feature = \"get_mut_unchecked\", issue = \"63292\")]\n     pub unsafe fn get_mut_unchecked(this: &mut Self) -> &mut T {\n-        &mut this.ptr.as_mut().data\n+        // We are careful to *not* create a reference covering the \"count\" fields, as\n+        // this would alias with concurrent access to the reference counts (e.g. by `Weak`).\n+        &mut (*this.ptr.as_ptr()).data\n     }\n \n     /// Determine whether this is the unique reference (including weak refs) to\n@@ -1571,6 +1571,13 @@ impl<T> Weak<T> {\n     }\n }\n \n+/// Helper type to allow accessing the reference counts without\n+/// making any assertions about the data field.\n+struct WeakInner<'a> {\n+    weak: &'a atomic::AtomicUsize,\n+    strong: &'a atomic::AtomicUsize,\n+}\n+\n impl<T: ?Sized> Weak<T> {\n     /// Attempts to upgrade the `Weak` pointer to an [`Arc`], delaying\n     /// dropping of the inner value if successful.\n@@ -1678,8 +1685,18 @@ impl<T: ?Sized> Weak<T> {\n     /// Returns `None` when the pointer is dangling and there is no allocated `ArcInner`,\n     /// (i.e., when this `Weak` was created by `Weak::new`).\n     #[inline]\n-    fn inner(&self) -> Option<&ArcInner<T>> {\n-        if is_dangling(self.ptr) { None } else { Some(unsafe { self.ptr.as_ref() }) }\n+    fn inner(&self) -> Option<WeakInner<'_>> {\n+        if is_dangling(self.ptr) {\n+            None\n+        } else {\n+            // We are careful to *not* create a reference covering the \"data\" field, as\n+            // the field may be mutated concurrently (for example, if the last `Arc`\n+            // is dropped, the data field will be dropped in-place).\n+            Some(unsafe {\n+                let ptr = self.ptr.as_ptr();\n+                WeakInner { strong: &(*ptr).strong, weak: &(*ptr).weak }\n+            })\n+        }\n     }\n \n     /// Returns `true` if the two `Weak`s point to the same allocation (similar to"}]}