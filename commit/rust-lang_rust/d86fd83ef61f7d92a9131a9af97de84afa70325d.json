{"sha": "d86fd83ef61f7d92a9131a9af97de84afa70325d", "node_id": "C_kwDOAAsO6NoAKGQ4NmZkODNlZjYxZjdkOTJhOTEzMWE5YWY5N2RlODRhZmE3MDMyNWQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-20T08:46:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-20T08:46:53Z"}, "message": "Rollup merge of #109277 - spastorino:new-rpitit-14, r=compiler-errors\n\nFix generics_of for impl's RPITIT synthesized associated type\n\nThe only useful commit is the last one.\n\nThis makes `generics_of` for the impl side RPITIT copy from the trait's associated type and avoid the fn on the impl side which was previously wrongly used.\nThis solution is better but we still need to fix resolution of the generated generics.\n\nr? ``@compiler-errors``", "tree": {"sha": "62caa54281d533d3fb6b549e32a0194df6ef0f65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62caa54281d533d3fb6b549e32a0194df6ef0f65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d86fd83ef61f7d92a9131a9af97de84afa70325d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkGB19CRBK7hj4Ov3rIwAAi1wIADzkTpnko/lF57twCYJY7IeC\niObgJ4SFFBDw3U+cWW2zyEcx1xdikqMzkcryvjWx1GBFH067twaYroSD9FjiIzzv\nuAZ+IZBuEfCQVHRklmDfWQLDLVWSdfAty5dkoR96LbQ51xX7Ke979XgGm9orCUtl\n3tupfLzz5DCHD09TIuJg364nfRcQCP8o9NCuJpBRNVyIBDhYVArLje7XO9jTZwfb\nstk1pxKXFiURlfCAdtg8U4EwUKNijILr6eVVu2X7G/+tDsCYuKHqJeG50KwCr5nj\ny0DRL0lDUfIOqZhhGsxk+jp0Z2ZPF2zK0SbPjr/tKLmvn/sAzQ8GkcIn8PBTtg8=\n=VDnh\n-----END PGP SIGNATURE-----\n", "payload": "tree 62caa54281d533d3fb6b549e32a0194df6ef0f65\nparent 88caa29ae36f8d0f13b45c71368c3915e152156e\nparent 640c20272ef0d1bb8ae5425d27c5543d1bbbf1fa\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679302013 +0100\ncommitter GitHub <noreply@github.com> 1679302013 +0100\n\nRollup merge of #109277 - spastorino:new-rpitit-14, r=compiler-errors\n\nFix generics_of for impl's RPITIT synthesized associated type\n\nThe only useful commit is the last one.\n\nThis makes `generics_of` for the impl side RPITIT copy from the trait's associated type and avoid the fn on the impl side which was previously wrongly used.\nThis solution is better but we still need to fix resolution of the generated generics.\n\nr? ``@compiler-errors``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d86fd83ef61f7d92a9131a9af97de84afa70325d", "html_url": "https://github.com/rust-lang/rust/commit/d86fd83ef61f7d92a9131a9af97de84afa70325d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d86fd83ef61f7d92a9131a9af97de84afa70325d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88caa29ae36f8d0f13b45c71368c3915e152156e", "url": "https://api.github.com/repos/rust-lang/rust/commits/88caa29ae36f8d0f13b45c71368c3915e152156e", "html_url": "https://github.com/rust-lang/rust/commit/88caa29ae36f8d0f13b45c71368c3915e152156e"}, {"sha": "640c20272ef0d1bb8ae5425d27c5543d1bbbf1fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/640c20272ef0d1bb8ae5425d27c5543d1bbbf1fa", "html_url": "https://github.com/rust-lang/rust/commit/640c20272ef0d1bb8ae5425d27c5543d1bbbf1fa"}], "stats": {"total": 72, "additions": 60, "deletions": 12}, "files": [{"sha": "6a27383121d2ddd72f6b3ec8ea313fd01e20e657", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d86fd83ef61f7d92a9131a9af97de84afa70325d/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d86fd83ef61f7d92a9131a9af97de84afa70325d/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=d86fd83ef61f7d92a9131a9af97de84afa70325d", "patch": "@@ -3152,8 +3152,12 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         debug!(\"impl_trait_ty_to_ty: generics={:?}\", generics);\n         let substs = InternalSubsts::for_item(tcx, def_id, |param, _| {\n-            if let Some(i) = (param.index as usize).checked_sub(generics.parent_count) {\n-                // Our own parameters are the resolved lifetimes.\n+            // We use `generics.count() - lifetimes.len()` here instead of `generics.parent_count`\n+            // since return-position impl trait in trait squashes all of the generics from its source fn\n+            // into its own generics, so the opaque's \"own\" params isn't always just lifetimes.\n+            if let Some(i) = (param.index as usize).checked_sub(generics.count() - lifetimes.len())\n+            {\n+                // Resolve our own lifetime parameters.\n                 let GenericParamDefKind::Lifetime { .. } = param.kind else { bug!() };\n                 let hir::GenericArg::Lifetime(lifetime) = &lifetimes[i] else { bug!() };\n                 self.ast_region_to_region(lifetime, None).into()"}, {"sha": "87fdaa14f6be0e54bc028d102af9e0d08d1e4598", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d86fd83ef61f7d92a9131a9af97de84afa70325d/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d86fd83ef61f7d92a9131a9af97de84afa70325d/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=d86fd83ef61f7d92a9131a9af97de84afa70325d", "patch": "@@ -396,6 +396,8 @@ fn associated_type_for_impl_trait_in_impl(\n     impl_assoc_ty.impl_defaultness(tcx.impl_defaultness(impl_fn_def_id));\n \n     // Copy generics_of the trait's associated item but the impl as the parent.\n+    // FIXME(-Zlower-impl-trait-in-trait-to-assoc-ty) resolves to the trait instead of the impl\n+    // generics.\n     impl_assoc_ty.generics_of({\n         let trait_assoc_generics = tcx.generics_of(trait_assoc_def_id);\n         let trait_assoc_parent_count = trait_assoc_generics.parent_count;\n@@ -404,16 +406,10 @@ fn associated_type_for_impl_trait_in_impl(\n         let parent_generics = tcx.generics_of(impl_def_id);\n         let parent_count = parent_generics.parent_count + parent_generics.params.len();\n \n-        let mut impl_fn_params = tcx.generics_of(impl_fn_def_id).params.clone();\n-\n         for param in &mut params {\n-            param.index = param.index + parent_count as u32 + impl_fn_params.len() as u32\n-                - trait_assoc_parent_count as u32;\n+            param.index = param.index + parent_count as u32 - trait_assoc_parent_count as u32;\n         }\n \n-        impl_fn_params.extend(params);\n-        params = impl_fn_params;\n-\n         let param_def_id_to_index =\n             params.iter().map(|param| (param.def_id, param.index)).collect();\n "}, {"sha": "8e5dbd08eb98bb9302596514849b95f78822cfe9", "filename": "tests/ui/async-await/in-trait/issue-102310.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d86fd83ef61f7d92a9131a9af97de84afa70325d/tests%2Fui%2Fasync-await%2Fin-trait%2Fissue-102310.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d86fd83ef61f7d92a9131a9af97de84afa70325d/tests%2Fui%2Fasync-await%2Fin-trait%2Fissue-102310.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fissue-102310.rs?ref=d86fd83ef61f7d92a9131a9af97de84afa70325d", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n // edition:2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "0e9477544a4a6febde94fbb27295f994278be3fb", "filename": "tests/ui/async-await/in-trait/lifetime-mismatch.current.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d86fd83ef61f7d92a9131a9af97de84afa70325d/tests%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d86fd83ef61f7d92a9131a9af97de84afa70325d/tests%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.current.stderr?ref=d86fd83ef61f7d92a9131a9af97de84afa70325d", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/lifetime-mismatch.rs:3:12\n+  --> $DIR/lifetime-mismatch.rs:5:12\n    |\n LL | #![feature(async_fn_in_trait)]\n    |            ^^^^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL | #![feature(async_fn_in_trait)]\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0195]: lifetime parameters or bounds on method `foo` do not match the trait declaration\n-  --> $DIR/lifetime-mismatch.rs:12:17\n+  --> $DIR/lifetime-mismatch.rs:14:17\n    |\n LL |     async fn foo<'a>(&self);\n    |                 ---- lifetimes in impl do not match this method in trait", "previous_filename": "tests/ui/async-await/in-trait/lifetime-mismatch.stderr"}, {"sha": "0e9477544a4a6febde94fbb27295f994278be3fb", "filename": "tests/ui/async-await/in-trait/lifetime-mismatch.next.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d86fd83ef61f7d92a9131a9af97de84afa70325d/tests%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d86fd83ef61f7d92a9131a9af97de84afa70325d/tests%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.next.stderr?ref=d86fd83ef61f7d92a9131a9af97de84afa70325d", "patch": "@@ -0,0 +1,21 @@\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/lifetime-mismatch.rs:5:12\n+   |\n+LL | #![feature(async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0195]: lifetime parameters or bounds on method `foo` do not match the trait declaration\n+  --> $DIR/lifetime-mismatch.rs:14:17\n+   |\n+LL |     async fn foo<'a>(&self);\n+   |                 ---- lifetimes in impl do not match this method in trait\n+...\n+LL |     async fn foo(&self) {}\n+   |                 ^ lifetimes do not match method in trait\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0195`."}, {"sha": "5ff5a01a1ee0356a3c63d4c069bc72705c69e548", "filename": "tests/ui/async-await/in-trait/lifetime-mismatch.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d86fd83ef61f7d92a9131a9af97de84afa70325d/tests%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d86fd83ef61f7d92a9131a9af97de84afa70325d/tests%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.rs?ref=d86fd83ef61f7d92a9131a9af97de84afa70325d", "patch": "@@ -1,4 +1,6 @@\n // edition:2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n //~^ WARN the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes"}, {"sha": "831033a588061cc0efc2cefacfd8818b27e8f07e", "filename": "tests/ui/impl-trait/in-trait/early.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d86fd83ef61f7d92a9131a9af97de84afa70325d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d86fd83ef61f7d92a9131a9af97de84afa70325d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fearly.rs?ref=d86fd83ef61f7d92a9131a9af97de84afa70325d", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n // edition:2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait, return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "1329ca29d06aa99fcebd360cfc22662a6e244420", "filename": "tests/ui/impl-trait/in-trait/issue-102301.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d86fd83ef61f7d92a9131a9af97de84afa70325d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102301.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d86fd83ef61f7d92a9131a9af97de84afa70325d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102301.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102301.rs?ref=d86fd83ef61f7d92a9131a9af97de84afa70325d", "patch": "@@ -1,4 +1,6 @@\n // check-pass\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "f48d9fa26c003ce40d4af5d812b48f61b8c7820d", "filename": "tests/ui/impl-trait/in-trait/opaque-in-impl.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d86fd83ef61f7d92a9131a9af97de84afa70325d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d86fd83ef61f7d92a9131a9af97de84afa70325d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl.rs?ref=d86fd83ef61f7d92a9131a9af97de84afa70325d", "patch": "@@ -1,4 +1,6 @@\n // check-pass\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "64c942705cf8e5ab86f7147101ee3d94c3f06740", "filename": "tests/ui/impl-trait/in-trait/trait-more-generics-than-impl.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d86fd83ef61f7d92a9131a9af97de84afa70325d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Ftrait-more-generics-than-impl.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d86fd83ef61f7d92a9131a9af97de84afa70325d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Ftrait-more-generics-than-impl.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Ftrait-more-generics-than-impl.current.stderr?ref=d86fd83ef61f7d92a9131a9af97de84afa70325d", "patch": "@@ -1,5 +1,5 @@\n error[E0049]: method `bar` has 0 type parameters but its trait declaration has 1 type parameter\n-  --> $DIR/trait-more-generics-than-impl.rs:11:11\n+  --> $DIR/trait-more-generics-than-impl.rs:14:11\n    |\n LL |     fn bar<T>() -> impl Sized;\n    |            - expected 1 type parameter", "previous_filename": "tests/ui/impl-trait/in-trait/trait-more-generics-than-impl.stderr"}, {"sha": "64c942705cf8e5ab86f7147101ee3d94c3f06740", "filename": "tests/ui/impl-trait/in-trait/trait-more-generics-than-impl.next.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d86fd83ef61f7d92a9131a9af97de84afa70325d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Ftrait-more-generics-than-impl.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d86fd83ef61f7d92a9131a9af97de84afa70325d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Ftrait-more-generics-than-impl.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Ftrait-more-generics-than-impl.next.stderr?ref=d86fd83ef61f7d92a9131a9af97de84afa70325d", "patch": "@@ -0,0 +1,12 @@\n+error[E0049]: method `bar` has 0 type parameters but its trait declaration has 1 type parameter\n+  --> $DIR/trait-more-generics-than-impl.rs:14:11\n+   |\n+LL |     fn bar<T>() -> impl Sized;\n+   |            - expected 1 type parameter\n+...\n+LL |     fn bar() -> impl Sized {}\n+   |           ^ found 0 type parameters\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0049`."}, {"sha": "c2e394a1f664518a7eb58f1fa468da59d1b3daa1", "filename": "tests/ui/impl-trait/in-trait/trait-more-generics-than-impl.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d86fd83ef61f7d92a9131a9af97de84afa70325d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Ftrait-more-generics-than-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d86fd83ef61f7d92a9131a9af97de84afa70325d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Ftrait-more-generics-than-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Ftrait-more-generics-than-impl.rs?ref=d86fd83ef61f7d92a9131a9af97de84afa70325d", "patch": "@@ -1,3 +1,6 @@\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n+\n #![feature(return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]\n "}, {"sha": "88d86e2b541929fc5dc0672cd923c87a9feee633", "filename": "tests/ui/impl-trait/in-trait/where-clause.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d86fd83ef61f7d92a9131a9af97de84afa70325d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fwhere-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d86fd83ef61f7d92a9131a9af97de84afa70325d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fwhere-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fwhere-clause.rs?ref=d86fd83ef61f7d92a9131a9af97de84afa70325d", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]"}]}