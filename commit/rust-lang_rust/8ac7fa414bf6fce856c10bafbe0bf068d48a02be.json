{"sha": "8ac7fa414bf6fce856c10bafbe0bf068d48a02be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhYzdmYTQxNGJmNmZjZTg1NmMxMGJhZmJlMGJmMDY4ZDQ4YTAyYmU=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-10-12T14:45:17Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-10-15T18:59:15Z"}, "message": "Synchronize get_vtable with the `codegen_llvm` one", "tree": {"sha": "61b0eeb23aba43f3372dc0336f801f21a3800dee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61b0eeb23aba43f3372dc0336f801f21a3800dee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ac7fa414bf6fce856c10bafbe0bf068d48a02be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ac7fa414bf6fce856c10bafbe0bf068d48a02be", "html_url": "https://github.com/rust-lang/rust/commit/8ac7fa414bf6fce856c10bafbe0bf068d48a02be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ac7fa414bf6fce856c10bafbe0bf068d48a02be/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80feed380d478a14e5acd99fc8721ed0e6de19ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/80feed380d478a14e5acd99fc8721ed0e6de19ba", "html_url": "https://github.com/rust-lang/rust/commit/80feed380d478a14e5acd99fc8721ed0e6de19ba"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "f5e824b7628887724b86c80d240cc226f0da2e64", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8ac7fa414bf6fce856c10bafbe0bf068d48a02be/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac7fa414bf6fce856c10bafbe0bf068d48a02be/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=8ac7fa414bf6fce856c10bafbe0bf068d48a02be", "patch": "@@ -327,12 +327,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n             }\n             (_, &ty::Dynamic(ref data, _)) => {\n                 // Initial cast from sized to dyn trait\n-                let trait_ref = data.principal().with_self_ty(\n-                    *self.tcx,\n-                    src_pointee_ty,\n-                );\n-                let trait_ref = self.tcx.erase_regions(&trait_ref);\n-                let vtable = self.get_vtable(src_pointee_ty, trait_ref)?;\n+                let vtable = self.get_vtable(src_pointee_ty, data.principal())?;\n                 let ptr = self.read_value(src)?.to_scalar_ptr()?;\n                 let val = Value::new_dyn_trait(ptr, vtable);\n                 self.write_value(val, dest)"}, {"sha": "13b6fa44de2034f26ed5d0fe9d4c108ae2427ffe", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ac7fa414bf6fce856c10bafbe0bf068d48a02be/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac7fa414bf6fce856c10bafbe0bf068d48a02be/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=8ac7fa414bf6fce856c10bafbe0bf068d48a02be", "patch": "@@ -53,7 +53,7 @@ pub struct EvalContext<'a, 'mir, 'tcx: 'a + 'mir, M: Machine<'a, 'mir, 'tcx>> {\n     pub(crate) stack: Vec<Frame<'mir, 'tcx, M::PointerTag>>,\n \n     /// A cache for deduplicating vtables\n-    pub(super) vtables: FxHashMap<(Ty<'tcx>, ty::PolyTraitRef<'tcx>), AllocId>,\n+    pub(super) vtables: FxHashMap<(Ty<'tcx>, ty::PolyExistentialTraitRef<'tcx>), AllocId>,\n }\n \n /// A stack frame."}, {"sha": "30591a4ff5a5e013ce63f793b7eea5ba2abad842", "filename": "src/librustc_mir/interpret/traits.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8ac7fa414bf6fce856c10bafbe0bf068d48a02be/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac7fa414bf6fce856c10bafbe0bf068d48a02be/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs?ref=8ac7fa414bf6fce856c10bafbe0bf068d48a02be", "patch": "@@ -24,22 +24,28 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n     pub fn get_vtable(\n         &mut self,\n         ty: Ty<'tcx>,\n-        trait_ref: ty::PolyTraitRef<'tcx>,\n+        poly_trait_ref: ty::PolyExistentialTraitRef<'tcx>,\n     ) -> EvalResult<'tcx, Pointer<M::PointerTag>> {\n-        debug!(\"get_vtable(trait_ref={:?})\", trait_ref);\n+        debug!(\"get_vtable(trait_ref={:?})\", poly_trait_ref);\n \n-        if let Some(&vtable) = self.vtables.get(&(ty, trait_ref)) {\n+        let (ty, poly_trait_ref) = self.tcx.erase_regions(&(ty, poly_trait_ref));\n+\n+        if let Some(&vtable) = self.vtables.get(&(ty, poly_trait_ref)) {\n             return Ok(Pointer::from(vtable).with_default_tag());\n         }\n \n-        let layout = self.layout_of(trait_ref.self_ty())?;\n+        let trait_ref = poly_trait_ref.with_self_ty(*self.tcx, ty);\n+        let trait_ref = self.tcx.erase_regions(&trait_ref);\n+\n+        let methods = self.tcx.vtable_methods(trait_ref);\n+\n+        let layout = self.layout_of(ty)?;\n         assert!(!layout.is_unsized(), \"can't create a vtable for an unsized type\");\n         let size = layout.size.bytes();\n         let align = layout.align.abi();\n \n         let ptr_size = self.pointer_size();\n         let ptr_align = self.tcx.data_layout.pointer_align;\n-        let methods = self.tcx.vtable_methods(trait_ref);\n         let vtable = self.memory.allocate(\n             ptr_size * (3 + methods.len() as u64),\n             ptr_align,\n@@ -66,7 +72,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n         }\n \n         self.memory.mark_immutable(vtable.alloc_id)?;\n-        assert!(self.vtables.insert((ty, trait_ref), vtable.alloc_id).is_none());\n+        assert!(self.vtables.insert((ty, poly_trait_ref), vtable.alloc_id).is_none());\n \n         Ok(vtable)\n     }"}]}