{"sha": "b19261a7498155c20b0877e56526e5c018a48be6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxOTI2MWE3NDk4MTU1YzIwYjA4NzdlNTY1MjZlNWMwMThhNDhiZTY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-24T17:40:36Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-24T18:19:28Z"}, "message": "green: Remove the dependence on the crate map\n\nThis is the final nail in the coffin for the crate map. The `start` function for\nlibgreen now has a new added parameter which is the event loop factory instead\nof inferring it from the crate map. The two current valid values for this\nparameter are `green::basic::event_loop` and `rustuv::event_loop`.", "tree": {"sha": "93dad1fc8d47be8f5b3b79a3a0e30b87a4f594f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93dad1fc8d47be8f5b3b79a3a0e30b87a4f594f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b19261a7498155c20b0877e56526e5c018a48be6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b19261a7498155c20b0877e56526e5c018a48be6", "html_url": "https://github.com/rust-lang/rust/commit/b19261a7498155c20b0877e56526e5c018a48be6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b19261a7498155c20b0877e56526e5c018a48be6/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8f60d80bf573cd8b4b5680b44c9cabe2b862f78", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8f60d80bf573cd8b4b5680b44c9cabe2b862f78", "html_url": "https://github.com/rust-lang/rust/commit/f8f60d80bf573cd8b4b5680b44c9cabe2b862f78"}], "stats": {"total": 143, "additions": 84, "deletions": 59}, "files": [{"sha": "69d2b8fb9606876587871d8c319a9109642b3924", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b19261a7498155c20b0877e56526e5c018a48be6/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19261a7498155c20b0877e56526e5c018a48be6/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=b19261a7498155c20b0877e56526e5c018a48be6", "patch": "@@ -44,7 +44,9 @@ pub mod common;\n pub mod errors;\n \n #[start]\n-fn start(argc: int, argv: **u8) -> int { green::start(argc, argv, main) }\n+fn start(argc: int, argv: **u8) -> int {\n+    green::start(argc, argv, rustuv::event_loop, main)\n+}\n \n pub fn main() {\n     let args = os::args();"}, {"sha": "b2596e568157ff24e463f4519d88dd5a75cc13de", "filename": "src/libgreen/basic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b19261a7498155c20b0877e56526e5c018a48be6/src%2Flibgreen%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19261a7498155c20b0877e56526e5c018a48be6/src%2Flibgreen%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fbasic.rs?ref=b19261a7498155c20b0877e56526e5c018a48be6", "patch": "@@ -237,7 +237,7 @@ mod test {\n     fn pool() -> SchedPool {\n         SchedPool::new(PoolConfig {\n             threads: 1,\n-            event_loop_factory: Some(basic::event_loop),\n+            event_loop_factory: basic::event_loop,\n         })\n     }\n \n@@ -267,7 +267,7 @@ mod test {\n     fn multi_thread() {\n         let mut pool = SchedPool::new(PoolConfig {\n             threads: 2,\n-            event_loop_factory: Some(basic::event_loop),\n+            event_loop_factory: basic::event_loop,\n         });\n \n         for _ in range(0, 20) {"}, {"sha": "3f7685d6c20a38033963dbdefb958ffbfcaacf69", "filename": "src/libgreen/lib.rs", "status": "modified", "additions": 33, "deletions": 36, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/b19261a7498155c20b0877e56526e5c018a48be6/src%2Flibgreen%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19261a7498155c20b0877e56526e5c018a48be6/src%2Flibgreen%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Flib.rs?ref=b19261a7498155c20b0877e56526e5c018a48be6", "patch": "@@ -116,13 +116,34 @@\n //! extern crate green;\n //!\n //! #[start]\n-//! fn start(argc: int, argv: **u8) -> int { green::start(argc, argv, main) }\n+//! fn start(argc: int, argv: **u8) -> int {\n+//!     green::start(argc, argv, green::basic::event_loop, main)\n+//! }\n //!\n //! fn main() {\n //!     // this code is running in a pool of schedulers\n //! }\n //! ```\n //!\n+//! > **Note**: This `main` funciton in this example does *not* have I/O\n+//! >           support. The basic event loop does not provide any support\n+//!\n+//! # Starting with I/O support in libgreen\n+//!\n+//! ```rust\n+//! extern crate green;\n+//! extern crate rustuv;\n+//!\n+//! #[start]\n+//! fn start(argc: int, argv: **u8) -> int {\n+//!     green::start(argc, argv, rustuv::event_loop, main)\n+//! }\n+//!\n+//! fn main() {\n+//!     // this code is running in a pool of schedulers all powered by libuv\n+//! }\n+//! ```\n+//!\n //! # Using a scheduler pool\n //!\n //! ```rust\n@@ -176,11 +197,11 @@\n #[allow(visible_private_types)];\n \n #[cfg(test)] #[phase(syntax, link)] extern crate log;\n+#[cfg(test)] extern crate rustuv;\n extern crate rand;\n \n use std::mem::replace;\n use std::os;\n-use std::rt::crate_map;\n use std::rt::rtio;\n use std::rt::thread::Thread;\n use std::rt;\n@@ -207,16 +228,6 @@ pub mod sleeper_list;\n pub mod stack;\n pub mod task;\n \n-#[lang = \"start\"]\n-#[cfg(not(test), stage0)]\n-pub fn lang_start(main: *u8, argc: int, argv: **u8) -> int {\n-    use std::cast;\n-    start(argc, argv, proc() {\n-        let main: extern \"Rust\" fn() = unsafe { cast::transmute(main) };\n-        main();\n-    })\n-}\n-\n /// Set up a default runtime configuration, given compiler-supplied arguments.\n ///\n /// This function will block until the entire pool of M:N schedulers have\n@@ -235,12 +246,14 @@ pub fn lang_start(main: *u8, argc: int, argv: **u8) -> int {\n ///\n /// The return value is used as the process return code. 0 on success, 101 on\n /// error.\n-pub fn start(argc: int, argv: **u8, main: proc()) -> int {\n+pub fn start(argc: int, argv: **u8,\n+             event_loop_factory: fn() -> ~rtio::EventLoop,\n+             main: proc()) -> int {\n     rt::init(argc, argv);\n     let mut main = Some(main);\n     let mut ret = None;\n     simple::task().run(|| {\n-        ret = Some(run(main.take_unwrap()));\n+        ret = Some(run(event_loop_factory, main.take_unwrap()));\n     });\n     // unsafe is ok b/c we're sure that the runtime is gone\n     unsafe { rt::cleanup() }\n@@ -255,10 +268,12 @@ pub fn start(argc: int, argv: **u8, main: proc()) -> int {\n ///\n /// This function will not return until all schedulers in the associated pool\n /// have returned.\n-pub fn run(main: proc()) -> int {\n+pub fn run(event_loop_factory: fn() -> ~rtio::EventLoop, main: proc()) -> int {\n     // Create a scheduler pool and spawn the main task into this pool. We will\n     // get notified over a channel when the main task exits.\n-    let mut pool = SchedPool::new(PoolConfig::new());\n+    let mut cfg = PoolConfig::new();\n+    cfg.event_loop_factory = event_loop_factory;\n+    let mut pool = SchedPool::new(cfg);\n     let (tx, rx) = channel();\n     let mut opts = TaskOpts::new();\n     opts.notify_chan = Some(tx);\n@@ -283,7 +298,7 @@ pub struct PoolConfig {\n     threads: uint,\n     /// A factory function used to create new event loops. If this is not\n     /// specified then the default event loop factory is used.\n-    event_loop_factory: Option<fn() -> ~rtio::EventLoop>,\n+    event_loop_factory: fn() -> ~rtio::EventLoop,\n }\n \n impl PoolConfig {\n@@ -292,7 +307,7 @@ impl PoolConfig {\n     pub fn new() -> PoolConfig {\n         PoolConfig {\n             threads: rt::default_sched_threads(),\n-            event_loop_factory: None,\n+            event_loop_factory: basic::event_loop,\n         }\n     }\n }\n@@ -334,7 +349,6 @@ impl SchedPool {\n             threads: nscheds,\n             event_loop_factory: factory\n         } = config;\n-        let factory = factory.unwrap_or(default_event_loop_factory());\n         assert!(nscheds > 0);\n \n         // The pool of schedulers that will be returned from this function\n@@ -503,20 +517,3 @@ impl Drop for SchedPool {\n         }\n     }\n }\n-\n-fn default_event_loop_factory() -> fn() -> ~rtio::EventLoop {\n-    match crate_map::get_crate_map() {\n-        None => {}\n-        Some(map) => {\n-            match map.event_loop_factory {\n-                None => {}\n-                Some(factory) => return factory\n-            }\n-        }\n-    }\n-\n-    // If the crate map didn't specify a factory to create an event loop, then\n-    // instead just use a basic event loop missing all I/O services to at least\n-    // get the scheduler running.\n-    return basic::event_loop;\n-}"}, {"sha": "5571d4f4687234a2291537b14dbb2fe409380314", "filename": "src/libgreen/sched.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b19261a7498155c20b0877e56526e5c018a48be6/src%2Flibgreen%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19261a7498155c20b0877e56526e5c018a48be6/src%2Flibgreen%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsched.rs?ref=b19261a7498155c20b0877e56526e5c018a48be6", "patch": "@@ -1003,6 +1003,8 @@ fn new_sched_rng() -> XorShiftRng {\n \n #[cfg(test)]\n mod test {\n+    use rustuv;\n+\n     use std::comm;\n     use std::task::TaskOpts;\n     use std::rt::Runtime;\n@@ -1017,7 +1019,7 @@ mod test {\n     fn pool() -> SchedPool {\n         SchedPool::new(PoolConfig {\n             threads: 1,\n-            event_loop_factory: Some(basic::event_loop),\n+            event_loop_factory: basic::event_loop,\n         })\n     }\n \n@@ -1262,7 +1264,7 @@ mod test {\n \n         let mut pool = SchedPool::new(PoolConfig {\n             threads: 2,\n-            event_loop_factory: None,\n+            event_loop_factory: rustuv::event_loop,\n         });\n \n         // This is a regression test that when there are no schedulable tasks in\n@@ -1413,7 +1415,7 @@ mod test {\n     fn dont_starve_1() {\n         let mut pool = SchedPool::new(PoolConfig {\n             threads: 2, // this must be > 1\n-            event_loop_factory: Some(basic::event_loop),\n+            event_loop_factory: basic::event_loop,\n         });\n         pool.spawn(TaskOpts::new(), proc() {\n             let (tx, rx) = channel();"}, {"sha": "25e868470bf392b391056fb8d320a6c997c1ba38", "filename": "src/libgreen/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b19261a7498155c20b0877e56526e5c018a48be6/src%2Flibgreen%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19261a7498155c20b0877e56526e5c018a48be6/src%2Flibgreen%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Ftask.rs?ref=b19261a7498155c20b0877e56526e5c018a48be6", "patch": "@@ -494,7 +494,7 @@ mod tests {\n     fn spawn_opts(opts: TaskOpts, f: proc()) {\n         let mut pool = SchedPool::new(PoolConfig {\n             threads: 1,\n-            event_loop_factory: None,\n+            event_loop_factory: ::rustuv::event_loop,\n         });\n         pool.spawn(opts, f);\n         pool.shutdown();"}, {"sha": "34e85a9819a9a4c46069a42e6d58348b8e1218fc", "filename": "src/libnative/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b19261a7498155c20b0877e56526e5c018a48be6/src%2Flibnative%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19261a7498155c20b0877e56526e5c018a48be6/src%2Flibnative%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Flib.rs?ref=b19261a7498155c20b0877e56526e5c018a48be6", "patch": "@@ -69,7 +69,7 @@ static OS_DEFAULT_STACK_ESTIMATE: uint = 1 << 20;\n static OS_DEFAULT_STACK_ESTIMATE: uint = 2 * (1 << 20);\n \n #[lang = \"start\"]\n-#[cfg(not(test), not(stage0))]\n+#[cfg(not(test))]\n pub fn lang_start(main: *u8, argc: int, argv: **u8) -> int {\n     use std::cast;\n     start(argc, argv, proc() {"}, {"sha": "3ece7662dd57c3a1391eadc9dbd4d1aeaf7ed061", "filename": "src/librustuv/homing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b19261a7498155c20b0877e56526e5c018a48be6/src%2Flibrustuv%2Fhoming.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19261a7498155c20b0877e56526e5c018a48be6/src%2Flibrustuv%2Fhoming.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fhoming.rs?ref=b19261a7498155c20b0877e56526e5c018a48be6", "patch": "@@ -167,7 +167,7 @@ mod test {\n         let (tx, rx) = channel();\n         let mut pool = SchedPool::new(PoolConfig {\n             threads: 1,\n-            event_loop_factory: None,\n+            event_loop_factory: ::event_loop,\n         });\n \n         pool.spawn(TaskOpts::new(), proc() {\n@@ -188,7 +188,7 @@ mod test {\n         let (tx, rx) = channel();\n         let mut pool = SchedPool::new(PoolConfig {\n             threads: 1,\n-            event_loop_factory: None,\n+            event_loop_factory: ::event_loop,\n         });\n \n         pool.spawn(TaskOpts::new(), proc() {"}, {"sha": "cf1d95588bb9f24ffa1bffcf73664c0d701f2cd8", "filename": "src/librustuv/lib.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b19261a7498155c20b0877e56526e5c018a48be6/src%2Flibrustuv%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19261a7498155c20b0877e56526e5c018a48be6/src%2Flibrustuv%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Flib.rs?ref=b19261a7498155c20b0877e56526e5c018a48be6", "patch": "@@ -54,6 +54,7 @@ use std::libc::{c_int, c_void};\n use std::ptr::null;\n use std::ptr;\n use std::rt::local::Local;\n+use std::rt::rtio;\n use std::rt::task::{BlockedTask, Task};\n use std::str::raw::from_c_str;\n use std::str;\n@@ -76,7 +77,7 @@ pub use self::tty::TtyWatcher;\n //        '__test' module.\n #[cfg(test)] #[start]\n fn start(argc: int, argv: **u8) -> int {\n-    green::start(argc, argv, __test::main)\n+    green::start(argc, argv, event_loop, __test::main)\n }\n \n mod macros;\n@@ -104,6 +105,31 @@ pub mod tty;\n pub mod signal;\n pub mod stream;\n \n+/// Creates a new event loop which is powered by libuv\n+///\n+/// This function is used in tandem with libgreen's `PoolConfig` type as a value\n+/// for the `event_loop_factory` field. Using this function as the event loop\n+/// factory will power programs with libuv and enable green threading.\n+///\n+/// # Example\n+///\n+/// ```\n+/// extern crate rustuv;\n+/// extern crate green;\n+///\n+/// #[start]\n+/// fn start(argc: int, argv: **u8) -> int {\n+///     green::start(argc, argv, rustuv::event_loop, main)\n+/// }\n+///\n+/// fn main() {\n+///     // this code is running inside of a green task powered by libuv\n+/// }\n+/// ```\n+pub fn event_loop() -> ~rtio::EventLoop {\n+    ~uvio::UvEventLoop::new() as ~rtio::EventLoop\n+}\n+\n /// A type that wraps a uv handle\n pub trait UvHandle<T> {\n     fn uv_handle(&self) -> *T;"}, {"sha": "15de0408795395e7d2c70b42b29e7c82c5557928", "filename": "src/librustuv/uvio.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b19261a7498155c20b0877e56526e5c018a48be6/src%2Flibrustuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19261a7498155c20b0877e56526e5c018a48be6/src%2Flibrustuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvio.rs?ref=b19261a7498155c20b0877e56526e5c018a48be6", "patch": "@@ -105,12 +105,6 @@ impl rtio::EventLoop for UvEventLoop {\n     }\n }\n \n-#[cfg(not(test))]\n-#[lang = \"event_loop_factory\"]\n-pub fn new_loop() -> ~rtio::EventLoop {\n-    ~UvEventLoop::new() as ~rtio::EventLoop\n-}\n-\n #[test]\n fn test_callback_run_once() {\n     use std::rt::rtio::EventLoop;"}, {"sha": "9e13d70b0ce18a339b024bf02f80648ce20eaab5", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b19261a7498155c20b0877e56526e5c018a48be6/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19261a7498155c20b0877e56526e5c018a48be6/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=b19261a7498155c20b0877e56526e5c018a48be6", "patch": "@@ -84,7 +84,7 @@\n //        '__test' module.\n #[cfg(test)] #[start]\n fn start(argc: int, argv: **u8) -> int {\n-    green::start(argc, argv, __test::main)\n+    green::start(argc, argv, rustuv::event_loop, __test::main)\n }\n \n pub mod macros;"}, {"sha": "36b92e127f9d2fe9649630abf6d59a3411b21e06", "filename": "src/test/run-make/bootstrap-from-c-with-green/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b19261a7498155c20b0877e56526e5c018a48be6/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-green%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19261a7498155c20b0877e56526e5c018a48be6/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-green%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-green%2Flib.rs?ref=b19261a7498155c20b0877e56526e5c018a48be6", "patch": "@@ -16,7 +16,7 @@ extern crate green;\n \n #[no_mangle] // this needs to get called from C\n pub extern \"C\" fn foo(argc: int, argv: **u8) -> int {\n-    green::start(argc, argv, proc() {\n+    green::start(argc, argv, rustuv::event_loop, proc() {\n         spawn(proc() {\n             println!(\"hello\");\n         });"}, {"sha": "87d3c337bddb01b7359c5e26e379e1ef4503aafc", "filename": "src/test/run-pass/core-run-destroy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b19261a7498155c20b0877e56526e5c018a48be6/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19261a7498155c20b0877e56526e5c018a48be6/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs?ref=b19261a7498155c20b0877e56526e5c018a48be6", "patch": "@@ -49,7 +49,7 @@ macro_rules! iotest (\n \n #[cfg(test)] #[start]\n fn start(argc: int, argv: **u8) -> int {\n-    green::start(argc, argv, __test::main)\n+    green::start(argc, argv, rustuv::event_loop, __test::main)\n }\n \n iotest!(fn test_destroy_once() {"}, {"sha": "40c087b5c25b9db29da508e62e3b66c9fc6f9f71", "filename": "src/test/run-pass/issue-12684.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b19261a7498155c20b0877e56526e5c018a48be6/src%2Ftest%2Frun-pass%2Fissue-12684.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19261a7498155c20b0877e56526e5c018a48be6/src%2Ftest%2Frun-pass%2Fissue-12684.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12684.rs?ref=b19261a7498155c20b0877e56526e5c018a48be6", "patch": "@@ -15,7 +15,9 @@ extern crate green;\n extern crate rustuv;\n \n #[start]\n-fn start(argc: int, argv: **u8) -> int { green::start(argc, argv, main) }\n+fn start(argc: int, argv: **u8) -> int {\n+    green::start(argc, argv, rustuv::event_loop, main)\n+}\n \n fn main() {\n     native::task::spawn(proc() customtask());"}, {"sha": "d20d0eeb58c82388d3877d03639f69517ca53361", "filename": "src/test/run-pass/issue-8860.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b19261a7498155c20b0877e56526e5c018a48be6/src%2Ftest%2Frun-pass%2Fissue-8860.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19261a7498155c20b0877e56526e5c018a48be6/src%2Ftest%2Frun-pass%2Fissue-8860.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8860.rs?ref=b19261a7498155c20b0877e56526e5c018a48be6", "patch": "@@ -18,7 +18,7 @@ static mut DROP_T: int = 0i;\n \n #[start]\n fn start(argc: int, argv: **u8) -> int {\n-    let ret = green::start(argc, argv, main);\n+    let ret = green::start(argc, argv, green::basic::event_loop, main);\n     unsafe {\n         assert_eq!(2, DROP);\n         assert_eq!(1, DROP_S);"}, {"sha": "3b80d9ce491ccdac200278976aca945deebd1fbe", "filename": "src/test/run-pass/process-detach.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b19261a7498155c20b0877e56526e5c018a48be6/src%2Ftest%2Frun-pass%2Fprocess-detach.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19261a7498155c20b0877e56526e5c018a48be6/src%2Ftest%2Frun-pass%2Fprocess-detach.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprocess-detach.rs?ref=b19261a7498155c20b0877e56526e5c018a48be6", "patch": "@@ -28,7 +28,9 @@ use std::io::process;\n use std::io::signal::{Listener, Interrupt};\n \n #[start]\n-fn start(argc: int, argv: **u8) -> int { green::start(argc, argv, main) }\n+fn start(argc: int, argv: **u8) -> int {\n+    green::start(argc, argv, rustuv::event_loop, main)\n+}\n \n fn main() {\n     unsafe { libc::setsid(); }"}]}