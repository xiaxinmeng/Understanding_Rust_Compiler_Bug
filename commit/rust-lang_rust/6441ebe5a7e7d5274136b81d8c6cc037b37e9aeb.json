{"sha": "6441ebe5a7e7d5274136b81d8c6cc037b37e9aeb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0NDFlYmU1YTdlN2Q1Mjc0MTM2YjgxZDhjNmNjMDM3YjM3ZTlhZWI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-05-24T08:02:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-24T08:02:42Z"}, "message": "Rollup merge of #50979 - Manishearth:type-only, r=estebank\n\nFix span for type-only arguments\n\nCurrently it points to the comma or parenthesis before the type, which is broken\n\ncc @mark-i-m this is what broke #48309\n\nr? @estebank", "tree": {"sha": "a9d4fa0e7a13f2fe8f56ca29f3adffb5d8c803e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9d4fa0e7a13f2fe8f56ca29f3adffb5d8c803e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6441ebe5a7e7d5274136b81d8c6cc037b37e9aeb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbBnGiCRBK7hj4Ov3rIwAAdHIIAHnXQCPEYLp/kJ6ZQqtdfNT0\nAKiMnh8fkyC4vnlxIiVctWDxCXkEZEYb2q85w3lUBS0PHoPd7LCt68FTqmxa9wF0\nPvz3/pLy0DRNLdt4JcmvXIuvfGnSfroFQ2VIi2GFD9vk99yxSBGys9uX6+oTvYiU\nWKMP4WltaCNVb6SWE1uXnQp9LTQ2k2mE1aB12qSL5yB8MOukSANf/JoW2yurjonr\n/bHkZNl3RVpvTnwKTkAFOjzwhcD42k4tsnNrAaF48JgGu/mw+hz7X1/bUW4Sxu6J\nSFBIMMEqDy85T4NMRSlz636uVX4JK2S2I3CSfuD6cGP13RBOuKpnVk4ioXJ1t9Y=\n=xS+H\n-----END PGP SIGNATURE-----\n", "payload": "tree a9d4fa0e7a13f2fe8f56ca29f3adffb5d8c803e7\nparent e14bc2d3d4fa637044446880bbd0e17d265670f9\nparent d7086cac3dd8647d6d8043fc1662fb5fbb895df3\nauthor kennytm <kennytm@gmail.com> 1527148962 +0800\ncommitter GitHub <noreply@github.com> 1527148962 +0800\n\nRollup merge of #50979 - Manishearth:type-only, r=estebank\n\nFix span for type-only arguments\n\nCurrently it points to the comma or parenthesis before the type, which is broken\n\ncc @mark-i-m this is what broke #48309\n\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6441ebe5a7e7d5274136b81d8c6cc037b37e9aeb", "html_url": "https://github.com/rust-lang/rust/commit/6441ebe5a7e7d5274136b81d8c6cc037b37e9aeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6441ebe5a7e7d5274136b81d8c6cc037b37e9aeb/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e14bc2d3d4fa637044446880bbd0e17d265670f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e14bc2d3d4fa637044446880bbd0e17d265670f9", "html_url": "https://github.com/rust-lang/rust/commit/e14bc2d3d4fa637044446880bbd0e17d265670f9"}, {"sha": "d7086cac3dd8647d6d8043fc1662fb5fbb895df3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7086cac3dd8647d6d8043fc1662fb5fbb895df3", "html_url": "https://github.com/rust-lang/rust/commit/d7086cac3dd8647d6d8043fc1662fb5fbb895df3"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "2e66896324019e3882c18a1475acc798fddbefdf", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6441ebe5a7e7d5274136b81d8c6cc037b37e9aeb/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6441ebe5a7e7d5274136b81d8c6cc037b37e9aeb/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=6441ebe5a7e7d5274136b81d8c6cc037b37e9aeb", "patch": "@@ -1771,27 +1771,27 @@ impl<'a> Parser<'a> {\n     pub fn parse_arg_general(&mut self, require_name: bool) -> PResult<'a, Arg> {\n         maybe_whole!(self, NtArg, |x| x);\n \n-        let pat = if require_name || self.is_named_argument() {\n+        let (pat, ty) = if require_name || self.is_named_argument() {\n             debug!(\"parse_arg_general parse_pat (require_name:{})\",\n                    require_name);\n             let pat = self.parse_pat()?;\n \n             self.expect(&token::Colon)?;\n-            pat\n+            (pat, self.parse_ty()?)\n         } else {\n             debug!(\"parse_arg_general ident_to_pat\");\n             let ident = Ident::new(keywords::Invalid.name(), self.prev_span);\n-            P(Pat {\n+            let ty = self.parse_ty()?;\n+            let pat = P(Pat {\n                 id: ast::DUMMY_NODE_ID,\n                 node: PatKind::Ident(BindingMode::ByValue(Mutability::Immutable), ident, None),\n-                span: ident.span,\n-            })\n+                span: ty.span,\n+            });\n+            (pat, ty)\n         };\n \n-        let t = self.parse_ty()?;\n-\n         Ok(Arg {\n-            ty: t,\n+            ty,\n             pat,\n             id: ast::DUMMY_NODE_ID,\n         })"}]}