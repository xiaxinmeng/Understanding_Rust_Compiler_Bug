{"sha": "96f807def6abb5da33618712dbdd4a8cc7cb81cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2ZjgwN2RlZjZhYmI1ZGEzMzYxODcxMmRiZGQ0YThjYzdjYjgxY2Y=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-28T00:20:10Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-03T22:01:59Z"}, "message": "libsyntax: De-`@mut` the interner map", "tree": {"sha": "dbc384eb80fad9cd41d059c41cf31a1b6d393a2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbc384eb80fad9cd41d059c41cf31a1b6d393a2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96f807def6abb5da33618712dbdd4a8cc7cb81cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96f807def6abb5da33618712dbdd4a8cc7cb81cf", "html_url": "https://github.com/rust-lang/rust/commit/96f807def6abb5da33618712dbdd4a8cc7cb81cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96f807def6abb5da33618712dbdd4a8cc7cb81cf/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d6f8cdefad70fe670147a4dc10a72e53c4e261a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d6f8cdefad70fe670147a4dc10a72e53c4e261a", "html_url": "https://github.com/rust-lang/rust/commit/9d6f8cdefad70fe670147a4dc10a72e53c4e261a"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "413a40959c5cb0634d5302ac0b7d4c1f4d8b11ec", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/96f807def6abb5da33618712dbdd4a8cc7cb81cf/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f807def6abb5da33618712dbdd4a8cc7cb81cf/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=96f807def6abb5da33618712dbdd4a8cc7cb81cf", "patch": "@@ -14,19 +14,20 @@\n \n use ast::Name;\n \n+use std::cell::RefCell;\n use std::cmp::Equiv;\n use std::hashmap::HashMap;\n \n pub struct Interner<T> {\n-    priv map: @mut HashMap<T, Name>,\n+    priv map: @RefCell<HashMap<T, Name>>,\n     priv vect: @mut ~[T],\n }\n \n // when traits can extend traits, we should extend index<Name,T> to get []\n impl<T:Eq + IterBytes + Hash + Freeze + Clone + 'static> Interner<T> {\n     pub fn new() -> Interner<T> {\n         Interner {\n-            map: @mut HashMap::new(),\n+            map: @RefCell::new(HashMap::new()),\n             vect: @mut ~[],\n         }\n     }\n@@ -40,14 +41,15 @@ impl<T:Eq + IterBytes + Hash + Freeze + Clone + 'static> Interner<T> {\n     }\n \n     pub fn intern(&self, val: T) -> Name {\n-        match self.map.find(&val) {\n+        let mut map = self.map.borrow_mut();\n+        match map.get().find(&val) {\n             Some(&idx) => return idx,\n             None => (),\n         }\n \n         let vect = &mut *self.vect;\n         let new_idx = vect.len() as Name;\n-        self.map.insert(val.clone(), new_idx);\n+        map.get().insert(val.clone(), new_idx);\n         vect.push(val);\n         new_idx\n     }\n@@ -70,7 +72,8 @@ impl<T:Eq + IterBytes + Hash + Freeze + Clone + 'static> Interner<T> {\n \n     pub fn find_equiv<Q:Hash + IterBytes + Equiv<T>>(&self, val: &Q)\n                                               -> Option<Name> {\n-        match self.map.find_equiv(val) {\n+        let map = self.map.borrow();\n+        match map.get().find_equiv(val) {\n             Some(v) => Some(*v),\n             None => None,\n         }\n@@ -80,15 +83,15 @@ impl<T:Eq + IterBytes + Hash + Freeze + Clone + 'static> Interner<T> {\n // A StrInterner differs from Interner<String> in that it accepts\n // borrowed pointers rather than @ ones, resulting in less allocation.\n pub struct StrInterner {\n-    priv map: @mut HashMap<@str, Name>,\n+    priv map: @RefCell<HashMap<@str, Name>>,\n     priv vect: @mut ~[@str],\n }\n \n // when traits can extend traits, we should extend index<Name,T> to get []\n impl StrInterner {\n     pub fn new() -> StrInterner {\n         StrInterner {\n-            map: @mut HashMap::new(),\n+            map: @RefCell::new(HashMap::new()),\n             vect: @mut ~[],\n         }\n     }\n@@ -100,14 +103,15 @@ impl StrInterner {\n     }\n \n     pub fn intern(&self, val: &str) -> Name {\n-        match self.map.find_equiv(&val) {\n+        let mut map = self.map.borrow_mut();\n+        match map.get().find_equiv(&val) {\n             Some(&idx) => return idx,\n             None => (),\n         }\n \n         let new_idx = self.len() as Name;\n         let val = val.to_managed();\n-        self.map.insert(val, new_idx);\n+        map.get().insert(val, new_idx);\n         self.vect.push(val);\n         new_idx\n     }\n@@ -142,7 +146,8 @@ impl StrInterner {\n \n     pub fn find_equiv<Q:Hash + IterBytes + Equiv<@str>>(&self, val: &Q)\n                                                          -> Option<Name> {\n-        match self.map.find_equiv(val) {\n+        let map = self.map.borrow();\n+        match map.get().find_equiv(val) {\n             Some(v) => Some(*v),\n             None => None,\n         }"}]}