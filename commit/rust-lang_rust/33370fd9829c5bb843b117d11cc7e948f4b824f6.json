{"sha": "33370fd9829c5bb843b117d11cc7e948f4b824f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzMzcwZmQ5ODI5YzViYjg0M2IxMTdkMTFjYzdlOTQ4ZjRiODI0ZjY=", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2021-03-22T23:26:07Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2021-03-23T20:01:40Z"}, "message": "Update to not have extra match", "tree": {"sha": "ab1fe69165858258d21775b693ba8e877cf2c110", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab1fe69165858258d21775b693ba8e877cf2c110"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33370fd9829c5bb843b117d11cc7e948f4b824f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33370fd9829c5bb843b117d11cc7e948f4b824f6", "html_url": "https://github.com/rust-lang/rust/commit/33370fd9829c5bb843b117d11cc7e948f4b824f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33370fd9829c5bb843b117d11cc7e948f4b824f6/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7116bb5c33c1b0d12a7dade3fa20c9b0e2e08218", "url": "https://api.github.com/repos/rust-lang/rust/commits/7116bb5c33c1b0d12a7dade3fa20c9b0e2e08218", "html_url": "https://github.com/rust-lang/rust/commit/7116bb5c33c1b0d12a7dade3fa20c9b0e2e08218"}], "stats": {"total": 113, "additions": 85, "deletions": 28}, "files": [{"sha": "c171b11e3ffa71f0cf9f56fdd0ca4cdf7128916b", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 10, "deletions": 28, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/33370fd9829c5bb843b117d11cc7e948f4b824f6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33370fd9829c5bb843b117d11cc7e948f4b824f6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=33370fd9829c5bb843b117d11cc7e948f4b824f6", "patch": "@@ -67,7 +67,7 @@ use rustc_hir::{Item, ItemKind, Node};\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::{\n     self,\n-    subst::{Subst, SubstsRef},\n+    subst::{GenericArgKind, Subst, SubstsRef},\n     Region, Ty, TyCtxt, TypeFoldable,\n };\n use rustc_span::{sym, BytePos, DesugaringKind, Pos, Span};\n@@ -958,42 +958,24 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let generics = self.tcx.generics_of(def_id);\n         let mut num_supplied_defaults = 0;\n \n-        #[derive(PartialEq, Eq, Copy, Clone)]\n-        enum Kind {\n-            Const,\n-            Type,\n-        }\n         let default_params = generics.params.iter().rev().filter_map(|param| match param.kind {\n-            ty::GenericParamDefKind::Type { has_default: true, .. } => {\n-                Some((param.def_id, Kind::Type))\n-            }\n-            ty::GenericParamDefKind::Const { has_default: true } => {\n-                Some((param.def_id, Kind::Const))\n-            }\n+            ty::GenericParamDefKind::Type { has_default: true, .. } => Some(param.def_id),\n+            ty::GenericParamDefKind::Const { has_default: true } => Some(param.def_id),\n             _ => None,\n         });\n-        let mut types = substs.types().rev();\n-        let mut consts = substs.consts().rev();\n-        for (def_id, kind) in default_params {\n-            match kind {\n-                Kind::Const => {\n-                    if let Some(actual) = consts.next() {\n-                        if ty::Const::from_anon_const(self.tcx, def_id.expect_local()) != actual {\n-                            break;\n-                        }\n-                    } else {\n+        for (def_id, actual) in default_params.zip(substs.iter().rev()) {\n+            match actual.unpack() {\n+                GenericArgKind::Const(c) => {\n+                    if self.tcx.const_param_default(def_id).subst(self.tcx, substs) != c {\n                         break;\n                     }\n                 }\n-                Kind::Type => {\n-                    if let Some(actual) = types.next() {\n-                        if self.tcx.type_of(def_id).subst(self.tcx, substs) != actual {\n-                            break;\n-                        }\n-                    } else {\n+                GenericArgKind::Type(ty) => {\n+                    if self.tcx.type_of(def_id).subst(self.tcx, substs) != ty {\n                         break;\n                     }\n                 }\n+                _ => break,\n             }\n             num_supplied_defaults += 1;\n         }"}, {"sha": "bf578468bb617b176be7f5b367d8bbf0822dcb3e", "filename": "src/test/ui/const-generics/defaults/mismatch.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/33370fd9829c5bb843b117d11cc7e948f4b824f6/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33370fd9829c5bb843b117d11cc7e948f4b824f6/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.rs?ref=33370fd9829c5bb843b117d11cc7e948f4b824f6", "patch": "@@ -0,0 +1,23 @@\n+#![feature(const_generics)]\n+#![feature(const_generics_defaults)]\n+#![allow(incomplete_features)]\n+\n+pub struct Example<const N: usize=13>;\n+pub struct Example2<T=u32, const N: usize=13>(T);\n+pub struct Example3<const N: usize=13, T=u32>(T);\n+pub struct Example4<const N: usize=13, const M: usize=4>;\n+\n+fn main() {\n+  let e: Example::<13> = ();\n+  //~^ Error: mismatched types\n+  let e: Example2::<u32, 13> = ();\n+  //~^ Error: mismatched types\n+  let e: Example3::<13, u32> = ();\n+  //~^ Error: mismatched types\n+  let e: Example3::<7> = ();\n+  //~^ Error: mismatched types\n+  // FIXME(const_generics_defaults): There should be a note for the error below, but it is\n+  // missing.\n+  let e: Example4::<7> = ();\n+  //~^ Error: mismatched types\n+}"}, {"sha": "c66eb4cd645948b1fc0e1cf3279b252d33e176af", "filename": "src/test/ui/const-generics/defaults/mismatch.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/33370fd9829c5bb843b117d11cc7e948f4b824f6/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33370fd9829c5bb843b117d11cc7e948f4b824f6/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.stderr?ref=33370fd9829c5bb843b117d11cc7e948f4b824f6", "patch": "@@ -0,0 +1,52 @@\n+error[E0308]: mismatched types\n+  --> $DIR/mismatch.rs:11:26\n+   |\n+LL |   let e: Example::<13> = ();\n+   |          -------------   ^^ expected struct `Example`, found `()`\n+   |          |\n+   |          expected due to this\n+\n+error[E0308]: mismatched types\n+  --> $DIR/mismatch.rs:13:32\n+   |\n+LL |   let e: Example2::<u32, 13> = ();\n+   |          -------------------   ^^ expected struct `Example2`, found `()`\n+   |          |\n+   |          expected due to this\n+   |\n+   = note: expected struct `Example2`\n+           found unit type `()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/mismatch.rs:15:32\n+   |\n+LL |   let e: Example3::<13, u32> = ();\n+   |          -------------------   ^^ expected struct `Example3`, found `()`\n+   |          |\n+   |          expected due to this\n+   |\n+   = note: expected struct `Example3`\n+           found unit type `()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/mismatch.rs:17:26\n+   |\n+LL |   let e: Example3::<7> = ();\n+   |          -------------   ^^ expected struct `Example3`, found `()`\n+   |          |\n+   |          expected due to this\n+   |\n+   = note: expected struct `Example3<7_usize>`\n+           found unit type `()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/mismatch.rs:21:26\n+   |\n+LL |   let e: Example4::<7> = ();\n+   |          -------------   ^^ expected struct `Example4`, found `()`\n+   |          |\n+   |          expected due to this\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}