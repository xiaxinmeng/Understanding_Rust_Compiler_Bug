{"sha": "7f7dc764f5499f5caa45b8d5359609f55b8939d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmN2RjNzY0ZjU0OTlmNWNhYTQ1YjhkNTM1OTYwOWY1NWI4OTM5ZDI=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-02-09T04:55:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-09T04:55:42Z"}, "message": "Rollup merge of #37928 - chriskrycho:document-rfc-1623, r=steveklabnik\n\nDocument RFC 1623: static lifetime elision.\n\nThis should be the last item required for stabilizing RFC 1623 (#35897).", "tree": {"sha": "972fbac24ec4425271ba551cfc66a9686387a02a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/972fbac24ec4425271ba551cfc66a9686387a02a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f7dc764f5499f5caa45b8d5359609f55b8939d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f7dc764f5499f5caa45b8d5359609f55b8939d2", "html_url": "https://github.com/rust-lang/rust/commit/7f7dc764f5499f5caa45b8d5359609f55b8939d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f7dc764f5499f5caa45b8d5359609f55b8939d2/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29dece1c8bbebf7ae8034ef0826b119281730937", "url": "https://api.github.com/repos/rust-lang/rust/commits/29dece1c8bbebf7ae8034ef0826b119281730937", "html_url": "https://github.com/rust-lang/rust/commit/29dece1c8bbebf7ae8034ef0826b119281730937"}, {"sha": "4096dd684c5f11dea5bd231a97adfb7205a82213", "url": "https://api.github.com/repos/rust-lang/rust/commits/4096dd684c5f11dea5bd231a97adfb7205a82213", "html_url": "https://github.com/rust-lang/rust/commit/4096dd684c5f11dea5bd231a97adfb7205a82213"}], "stats": {"total": 69, "additions": 60, "deletions": 9}, "files": [{"sha": "8aefabe61fdf68b17294ea63662240d7b17908e1", "filename": "src/doc/reference.md", "status": "modified", "additions": 60, "deletions": 9, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/7f7dc764f5499f5caa45b8d5359609f55b8939d2/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/7f7dc764f5499f5caa45b8d5359609f55b8939d2/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=7f7dc764f5499f5caa45b8d5359609f55b8939d2", "patch": "@@ -1291,15 +1291,18 @@ guaranteed to refer to the same memory address.\n \n Constant values must not have destructors, and otherwise permit most forms of\n data. Constants may refer to the address of other constants, in which case the\n-address will have the `static` lifetime. The compiler is, however, still at\n-liberty to translate the constant many times, so the address referred to may not\n-be stable.\n+address will have elided lifetimes where applicable, otherwise \u2013 in most cases \u2013\n+defaulting to the `static` lifetime. (See below on [static lifetime elision].)\n+The compiler is, however, still at liberty to translate the constant many times,\n+so the address referred to may not be stable.\n+\n+[static lifetime elision]: #static-lifetime-elision\n \n Constants must be explicitly typed. The type may be `bool`, `char`, a number, or\n a type derived from those primitive types. The derived types are references with\n the `static` lifetime, fixed-size arrays, tuples, enum variants, and structs.\n \n-```\n+```rust\n const BIT1: u32 = 1 << 0;\n const BIT2: u32 = 1 << 1;\n \n@@ -1317,6 +1320,8 @@ const BITS_N_STRINGS: BitsNStrings<'static> = BitsNStrings {\n };\n ```\n \n+\n+\n ### Static items\n \n A *static item* is similar to a *constant*, except that it represents a precise\n@@ -1351,7 +1356,7 @@ running in the same process.\n Mutable statics are still very useful, however. They can be used with C\n libraries and can also be bound from C libraries (in an `extern` block).\n \n-```\n+```rust\n # fn atomic_add(_: &mut u32, _: u32) -> u32 { 2 }\n \n static mut LEVELS: u32 = 0;\n@@ -1375,6 +1380,53 @@ unsafe fn bump_levels_unsafe2() -> u32 {\n Mutable statics have the same restrictions as normal statics, except that the\n type of the value is not required to ascribe to `Sync`.\n \n+#### `'static` lifetime elision\n+\n+[Unstable] Both constant and static declarations of reference types have\n+*implicit* `'static` lifetimes unless an explicit lifetime is specified. As\n+such, the constant declarations involving `'static` above may be written\n+without the lifetimes. Returning to our previous example:\n+\n+```rust\n+# #![feature(static_in_const)]\n+const BIT1: u32 = 1 << 0;\n+const BIT2: u32 = 1 << 1;\n+\n+const BITS: [u32; 2] = [BIT1, BIT2];\n+const STRING: &str = \"bitstring\";\n+\n+struct BitsNStrings<'a> {\n+    mybits: [u32; 2],\n+    mystring: &'a str,\n+}\n+\n+const BITS_N_STRINGS: BitsNStrings = BitsNStrings {\n+    mybits: BITS,\n+    mystring: STRING,\n+};\n+```\n+\n+Note that if the `static` or `const` items include function or closure\n+references, which themselves include references, the compiler will first try the\n+standard elision rules ([see discussion in the nomicon][elision-nomicon]). If it\n+is unable to resolve the lifetimes by its usual rules, it will default to using\n+the `'static` lifetime. By way of example:\n+\n+[elision-nomicon]: https://doc.rust-lang.org/nomicon/lifetime-elision.html\n+\n+```rust,ignore\n+// Resolved as `fn<'a>(&'a str) -> &'a str`.\n+const RESOLVED_SINGLE: fn(&str) -> &str = ..\n+\n+// Resolved as `Fn<'a, 'b, 'c>(&'a Foo, &'b Bar, &'c Baz) -> usize`.\n+const RESOLVED_MULTIPLE: Fn(&Foo, &Bar, &Baz) -> usize = ..\n+\n+// There is insufficient information to bound the return reference lifetime\n+// relative to the argument lifetimes, so the signature is resolved as\n+// `Fn(&'static Foo, &'static Bar) -> &'static Baz`.\n+const RESOLVED_STATIC: Fn(&Foo, &Bar) -> &Baz = ..\n+```\n+\n ### Traits\n \n A _trait_ describes an abstract interface that types can\n@@ -2072,7 +2124,9 @@ macro scope.\n \n ### Miscellaneous attributes\n \n-- `deprecated` - mark the item as deprecated; the full attribute is `#[deprecated(since = \"crate version\", note = \"...\")`, where both arguments are optional.\n+- `deprecated` - mark the item as deprecated; the full attribute is \n+  `#[deprecated(since = \"crate version\", note = \"...\")`, where both arguments \n+  are optional.\n - `export_name` - on statics and functions, this determines the name of the\n   exported symbol.\n - `link_section` - on statics and functions, this specifies the section of the\n@@ -2489,9 +2543,6 @@ The currently implemented features of the reference compiler are:\n             into a Rust program. This capability, especially the signature for the\n             annotated function, is subject to change.\n \n-* `static_in_const` - Enables lifetime elision with a `'static` default for\n-                      `const` and `static` item declarations.\n-\n * `thread_local` - The usage of the `#[thread_local]` attribute is experimental\n                    and should be seen as unstable. This attribute is used to\n                    declare a `static` as being unique per-thread leveraging"}]}