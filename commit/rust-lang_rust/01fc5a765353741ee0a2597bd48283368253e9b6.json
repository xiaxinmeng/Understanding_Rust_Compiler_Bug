{"sha": "01fc5a765353741ee0a2597bd48283368253e9b6", "node_id": "C_kwDOAAsO6NoAKDAxZmM1YTc2NTM1Mzc0MWVlMGEyNTk3YmQ0ODI4MzM2ODI1M2U5YjY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-03T19:06:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-03T19:06:30Z"}, "message": "Rollup merge of #108694 - est31:backticks_matchmaking_comments, r=Nilstrieb\n\nMatch unmatched backticks in compiler/ comments\n\nr? ``@Nilstrieb`` as per [advice](https://github.com/rust-lang/rust/pull/108685#issuecomment-1453018499)", "tree": {"sha": "7752d393b7fac05f43f2cca290838a22987d4b7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7752d393b7fac05f43f2cca290838a22987d4b7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01fc5a765353741ee0a2597bd48283368253e9b6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkAkU2CRBK7hj4Ov3rIwAALMIIAFokvA0PyKH9F4oQVND1Y0/O\nvX2vWpAVRQ6R/pbKg6LxuwLgVB+7xVqxMyhz1hj7/m6vB5e59zHp8Hx7NWmcnsaI\nppNHr/G1LkbXwCZKv/FNOmBzLfb6Ewdf0RpCEyjyMXs7gN+Mp1Rp+Y0wOP00rWyQ\ndNS+6zH6zjtD8/P/f0Fg8CYUDQqXdgsE7CCnw9GVeVrIOcvjqDAeeVsO6PpSO261\nr7yH78YlYnZ0yTP0YjFXFPJZTIff11OuYEdJgKcsUMg2yZvVh7ozFQk1qr/0HMou\n4sZ75rwK/gObNTDrJcfuWIiifyLSnB7aV1/j5r+2ZtNQsk/SqpkIrlWHH311x1A=\n=rq+t\n-----END PGP SIGNATURE-----\n", "payload": "tree 7752d393b7fac05f43f2cca290838a22987d4b7f\nparent 846424d15fc57ca362e237025703e36ed98530ad\nparent 6df5ae4fb03734dd98db01a9f488998b1d4498ab\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1677870390 +0100\ncommitter GitHub <noreply@github.com> 1677870390 +0100\n\nRollup merge of #108694 - est31:backticks_matchmaking_comments, r=Nilstrieb\n\nMatch unmatched backticks in compiler/ comments\n\nr? ``@Nilstrieb`` as per [advice](https://github.com/rust-lang/rust/pull/108685#issuecomment-1453018499)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01fc5a765353741ee0a2597bd48283368253e9b6", "html_url": "https://github.com/rust-lang/rust/commit/01fc5a765353741ee0a2597bd48283368253e9b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01fc5a765353741ee0a2597bd48283368253e9b6/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "846424d15fc57ca362e237025703e36ed98530ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/846424d15fc57ca362e237025703e36ed98530ad", "html_url": "https://github.com/rust-lang/rust/commit/846424d15fc57ca362e237025703e36ed98530ad"}, {"sha": "6df5ae4fb03734dd98db01a9f488998b1d4498ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/6df5ae4fb03734dd98db01a9f488998b1d4498ab", "html_url": "https://github.com/rust-lang/rust/commit/6df5ae4fb03734dd98db01a9f488998b1d4498ab"}], "stats": {"total": 99, "additions": 51, "deletions": 48}, "files": [{"sha": "3a0af04f9eb98c11304f140d06ba09d0763fc4a3", "filename": "compiler/rustc_ast/src/util/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -225,7 +225,7 @@ impl AssocOp {\n             AssignOp(_) | // `{ 42 } +=`\n             As | // `{ 42 } as usize`\n             // Equal | // `{ 42 } == { 42 }`    Accepting these here would regress incorrect\n-            // NotEqual | // `{ 42 } != { 42 }  struct literals parser recovery.\n+            // NotEqual | // `{ 42 } != { 42 }` struct literals parser recovery.\n             Colon, // `{ 42 }: usize`\n         )\n     }"}, {"sha": "b20157f2c7c8985ad8832ba0364e63eaafeb0b69", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -1607,7 +1607,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         hir::OwnerNode::Item(self.arena.alloc(opaque_ty_item))\n     }\n \n-    /// Given a `parent_def_id`, a list of `lifetimes_in_bounds and a `remapping` hash to be\n+    /// Given a `parent_def_id`, a list of `lifetimes_in_bounds` and a `remapping` hash to be\n     /// filled, this function creates new definitions for `Param` and `Fresh` lifetimes, inserts the\n     /// new definition, adds it to the remapping with the definition of the given lifetime and\n     /// returns a list of lifetimes to be lowered afterwards."}, {"sha": "2cc009410f40753b3ba44378563a9123ddff3b63", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -192,7 +192,7 @@ impl<'a> AstValidator<'a> {\n                 // We allow these:\n                 //  - `Option<impl Trait>`\n                 //  - `option::Option<impl Trait>`\n-                //  - `option::Option<T>::Foo<impl Trait>\n+                //  - `option::Option<T>::Foo<impl Trait>`\n                 //\n                 // But not these:\n                 //  - `<impl Trait>::Foo`"}, {"sha": "ffe82b46cfd678ae4fa1921b821a180f135d54d1", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -415,7 +415,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     /// fn foo<'a, 'b>(x: &'a u32) -> &'b u32 { x }\n     /// ```\n     ///\n-    /// Here we would be invoked with `fr = 'a` and `outlived_fr = `'b`.\n+    /// Here we would be invoked with `fr = 'a` and `outlived_fr = 'b`.\n     pub(crate) fn report_region_error(\n         &mut self,\n         fr: RegionVid,"}, {"sha": "21b5bd7cb94dea7be8e2be6e147ad277bd0309ff", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -889,7 +889,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// from a universe it can't name; at present, the only way for\n     /// this to be true is if `scc` outlives `'static`. This is\n     /// actually stricter than necessary: ideally, we'd support bounds\n-    /// like `for<'a: 'b`>` that might then allow us to approximate\n+    /// like `for<'a: 'b>` that might then allow us to approximate\n     /// `'a` with `'b` and not `'static`. But it will have to do for\n     /// now.\n     fn add_incompatible_universe(&mut self, scc: ConstraintSccIndex) {"}, {"sha": "8132800f107a7b385680235bb0622a267e558776", "filename": "compiler/rustc_borrowck/src/region_infer/values.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fvalues.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -235,7 +235,7 @@ pub(crate) struct RegionValues<N: Idx> {\n     free_regions: SparseBitMatrix<N, RegionVid>,\n \n     /// Placeholders represent bound regions -- so something like `'a`\n-    /// in for<'a> fn(&'a u32)`.\n+    /// in `for<'a> fn(&'a u32)`.\n     placeholders: SparseBitMatrix<N, PlaceholderIndex>,\n }\n "}, {"sha": "691d3f8d942b3f0c7806ab495444a7185d70070c", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -1873,7 +1873,7 @@ pub(super) fn check_type_bounds<'tcx>(\n     //     type Bar<C> =...\n     // }\n     //\n-    // - `impl_trait_ref` would be `<(A, B) as Foo<u32>>\n+    // - `impl_trait_ref` would be `<(A, B) as Foo<u32>>`\n     // - `impl_ty_substs` would be `[A, B, ^0.0]` (`^0.0` here is the bound var with db 0 and index 0)\n     // - `rebased_substs` would be `[(A, B), u32, ^0.0]`, combining the substs from\n     //    the *trait* with the generic associated type parameters (as bound vars)."}, {"sha": "ffb68abf978de6a34c2360d02edd207c0ac3c658", "filename": "compiler/rustc_hir_analysis/src/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -437,7 +437,7 @@ pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUn\n             }\n \n             // Here we are considering a case of converting\n-            // `S<P0...Pn>` to S<Q0...Qn>`. As an example, let's imagine a struct `Foo<T, U>`,\n+            // `S<P0...Pn>` to `S<Q0...Qn>`. As an example, let's imagine a struct `Foo<T, U>`,\n             // which acts like a pointer to `U`, but carries along some extra data of type `T`:\n             //\n             //     struct Foo<T, U> {"}, {"sha": "4d3969d28aa2d6f95ab1f97fbc6e919eb85d64a4", "filename": "compiler/rustc_hir_typeck/src/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -636,7 +636,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n         // `&&Some(x,)` `place_foo`\n         //  `&Some(x,)` `deref { place_foo}`\n         //   `Some(x,)` `deref { deref { place_foo }}`\n-        //        (x,)` `field0 { deref { deref { place_foo }}}` <- resulting place\n+        //       `(x,)` `field0 { deref { deref { place_foo }}}` <- resulting place\n         //\n         // The above example has no adjustments. If the code were instead the (after adjustments,\n         // equivalent) version"}, {"sha": "4a432328c4d1bcb7891ccb8d8aeaea5d1c532ecf", "filename": "compiler/rustc_hir_typeck/src/upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -2223,7 +2223,7 @@ fn determine_place_ancestry_relation<'tcx>(\n ///     || drop(&*m.a.field_of_a)\n ///     // Here we really do want to capture `*m.a` because that outlives `'static`\n ///\n-///     // If we capture `m`, then the closure no longer outlives `'static'\n+///     // If we capture `m`, then the closure no longer outlives `'static`\n ///     // it is constrained to `'a`\n /// }\n /// ```"}, {"sha": "c550e553bb032990d92d9e19947a0b4d41072163", "filename": "compiler/rustc_incremental/src/assert_module_sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -18,7 +18,7 @@\n //! the HIR doesn't change as a result of the annotations, which might\n //! perturb the reuse results.\n //!\n-//! `#![rustc_expected_cgu_reuse(module=\"spike\", cfg=\"rpass2\", kind=\"post-lto\")]\n+//! `#![rustc_expected_cgu_reuse(module=\"spike\", cfg=\"rpass2\", kind=\"post-lto\")]`\n //! allows for doing a more fine-grained check to see if pre- or post-lto data\n //! was re-used.\n "}, {"sha": "cbf169afb18c19a84084d6820cc8c9d9d6561a1e", "filename": "compiler/rustc_index/src/bit_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -1870,7 +1870,7 @@ impl<R: Idx, C: Idx> SparseBitMatrix<R, C> {\n         }\n     }\n \n-    /// Subtracts `set from `row`. `set` can be either `BitSet` or\n+    /// Subtracts `set` from `row`. `set` can be either `BitSet` or\n     /// `HybridBitSet`. Has no effect if `row` does not exist.\n     ///\n     /// Returns true if the row was changed."}, {"sha": "678c4a0beb63e8421c2bed59c2ac3839625688c0", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -50,7 +50,7 @@ impl<'tcx> InferCtxt<'tcx> {\n \n     /// Like [Self::canonicalize_query], but preserves distinct universes. For\n     /// example, canonicalizing `&'?0: Trait<'?1>`, where `'?0` is in `U1` and\n-    /// `'?1` is in `U3` would be canonicalized to have ?0` in `U1` and `'?1`\n+    /// `'?1` is in `U3` would be canonicalized to have `?0` in `U1` and `'?1`\n     /// in `U2`.\n     ///\n     /// This is used for Chalk integration."}, {"sha": "2c480355085efc5fcb9ef24a049010e825cb12d3", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -70,7 +70,7 @@ pub enum RegionResolutionError<'tcx> {\n     /// `o` requires that `a <= b`, but this does not hold\n     ConcreteFailure(SubregionOrigin<'tcx>, Region<'tcx>, Region<'tcx>),\n \n-    /// `GenericBoundFailure(p, s, a)\n+    /// `GenericBoundFailure(p, s, a)`:\n     ///\n     /// The parameter/associated-type `p` must be known to outlive the lifetime\n     /// `a` (but none of the known bounds are sufficient)."}, {"sha": "573cd91a2a2a65946704be04e95947626562eb28", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -50,7 +50,7 @@ where\n     ///\n     /// - Covariant means `a <: b`.\n     /// - Contravariant means `b <: a`.\n-    /// - Invariant means `a == b.\n+    /// - Invariant means `a == b`.\n     /// - Bivariant means that it doesn't matter.\n     ambient_variance: ty::Variance,\n "}, {"sha": "872f617474c066e616090af3a1072be297c6c96a", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -249,7 +249,7 @@ pub enum VerifyBound<'tcx> {\n /// in that case we can show `'b: 'c`. But if `'?x` winds up being something\n /// else, the bound isn't relevant.\n ///\n-/// In the [`VerifyBound`], this struct is enclosed in `Binder to account\n+/// In the [`VerifyBound`], this struct is enclosed in `Binder` to account\n /// for cases like\n ///\n /// ```rust"}, {"sha": "5b2100b5da9d1510b8e848bf17ab3a9c5be94c29", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -1288,7 +1288,7 @@ declare_lint! {\n }\n \n declare_lint_pass!(\n-    /// Explains corresponding feature flag must be enabled for the `#[track_caller] attribute to\n+    /// Explains corresponding feature flag must be enabled for the `#[track_caller]` attribute to\n     /// do anything\n     UngatedAsyncFnTrackCaller => [UNGATED_ASYNC_FN_TRACK_CALLER]\n );"}, {"sha": "3ab01f7809b041c1ec829500523977fd22687a1b", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -1621,7 +1621,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     #[instrument(level = \"debug\", skip(self))]\n     fn encode_info_for_closure(&mut self, def_id: LocalDefId) {\n         // NOTE(eddyb) `tcx.type_of(def_id)` isn't used because it's fully generic,\n-        // including on the signature, which is inferred in `typeck.\n+        // including on the signature, which is inferred in `typeck`.\n         let typeck_result: &'tcx ty::TypeckResults<'tcx> = self.tcx.typeck(def_id);\n         let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n         let ty = typeck_result.node_type(hir_id);"}, {"sha": "99cdb769da1e788ccb534844114937dbb5ef1665", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -2908,7 +2908,7 @@ fn pretty_print_const_value<'tcx>(\n             // the `destructure_const` query with an empty `ty::ParamEnv` without\n             // introducing ICEs (e.g. via `layout_of`) from missing bounds.\n             // E.g. `transmute([0usize; 2]): (u8, *mut T)` needs to know `T: Sized`\n-            // to be able to destructure the tuple into `(0u8, *mut T)\n+            // to be able to destructure the tuple into `(0u8, *mut T)`\n             //\n             // FIXME(eddyb) for `--emit=mir`/`-Z dump-mir`, we should provide the\n             // correct `ty::ParamEnv` to allow printing *all* constant values."}, {"sha": "28a3b51b7fc925cfaa3bc3f0de86fdaf3cba0052", "filename": "compiler/rustc_middle/src/mir/spanview.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -11,7 +11,7 @@ use std::io::{self, Write};\n pub const TOOLTIP_INDENT: &str = \"    \";\n \n const CARET: char = '\\u{2038}'; // Unicode `CARET`\n-const ANNOTATION_LEFT_BRACKET: char = '\\u{298a}'; // Unicode `Z NOTATION RIGHT BINDING BRACKET\n+const ANNOTATION_LEFT_BRACKET: char = '\\u{298a}'; // Unicode `Z NOTATION RIGHT BINDING BRACKET`\n const ANNOTATION_RIGHT_BRACKET: char = '\\u{2989}'; // Unicode `Z NOTATION LEFT BINDING BRACKET`\n const NEW_LINE_SPAN: &str = \"</span>\\n<span class=\\\"line\\\">\";\n const HEADER: &str = r#\"<!DOCTYPE html>"}, {"sha": "5133da3429a9c54b6de756ee5e4491300c79ec0f", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -1672,7 +1672,7 @@ rustc_queries! {\n \n     /// Does lifetime resolution on items. Importantly, we can't resolve\n     /// lifetimes directly on things like trait methods, because of trait params.\n-    /// See `rustc_resolve::late::lifetimes for details.\n+    /// See `rustc_resolve::late::lifetimes` for details.\n     query resolve_bound_vars(_: hir::OwnerId) -> &'tcx ResolveBoundVars {\n         arena_cache\n         desc { \"resolving lifetimes\" }"}, {"sha": "527ec9f6e1cfef0c19bddd4241d5e922cca8c0fc", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -16,7 +16,7 @@ pub use int::*;\n pub use kind::*;\n pub use valtree::*;\n \n-/// Use this rather than `ConstData, whenever possible.\n+/// Use this rather than `ConstData`, whenever possible.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, HashStable)]\n #[rustc_pass_by_value]\n pub struct Const<'tcx>(pub(super) Interned<'tcx, ConstData<'tcx>>);"}, {"sha": "e9e121f9c9b0483962570ee54f05ca227851f70c", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -310,7 +310,7 @@ pub struct CommonLifetimes<'tcx> {\n     pub re_vars: Vec<Region<'tcx>>,\n \n     /// Pre-interned values of the form:\n-    /// `ReLateBound(DebruijnIndex(i), BoundRegion { var: v, kind: BrAnon(v, None) })\n+    /// `ReLateBound(DebruijnIndex(i), BoundRegion { var: v, kind: BrAnon(v, None) })`\n     /// for small values of `i` and `v`.\n     pub re_late_bounds: Vec<Vec<Region<'tcx>>>,\n }\n@@ -2187,7 +2187,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         // Actually intern type lists as lists of `GenericArg`s.\n         //\n         // Transmuting from `Ty<'tcx>` to `GenericArg<'tcx>` is sound\n-        // as explained in ty_slice_as_generic_arg`. With this,\n+        // as explained in `ty_slice_as_generic_arg`. With this,\n         // we guarantee that even when transmuting between `List<Ty<'tcx>>`\n         // and `List<GenericArg<'tcx>>`, the uniqueness requirement for\n         // lists is upheld.\n@@ -2450,7 +2450,7 @@ impl<'tcx> TyCtxtAt<'tcx> {\n         self.tcx.ty_error_with_message(self.span, \"TyKind::Error constructed but no error reported\")\n     }\n \n-    /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` with the given `msg to\n+    /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` with the given `msg` to\n     /// ensure it gets used.\n     #[track_caller]\n     pub fn ty_error_with_message(self, msg: &str) -> Ty<'tcx> {"}, {"sha": "92a040068dd75833d5b51b0a5fe9fff786c96fa0", "filename": "compiler/rustc_middle/src/ty/inhabitedness/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fmod.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -105,7 +105,7 @@ impl<'tcx> VariantDef {\n impl<'tcx> Ty<'tcx> {\n     pub fn inhabited_predicate(self, tcx: TyCtxt<'tcx>) -> InhabitedPredicate<'tcx> {\n         match self.kind() {\n-            // For now, union`s are always considered inhabited\n+            // For now, unions are always considered inhabited\n             Adt(adt, _) if adt.is_union() => InhabitedPredicate::True,\n             // Non-exhaustive ADTs from other crates are always considered inhabited\n             Adt(adt, _) if adt.is_variant_list_non_exhaustive() && !adt.did().is_local() => {"}, {"sha": "dce18a5850f3fc2bb264e5793fc6b9192971bad0", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -710,7 +710,7 @@ impl<'tcx> Predicate<'tcx> {\n         //   The substitution from the input trait-ref is therefore going to be\n         //   `'a => 'x` (where `'x` has a DB index of 1).\n         // - The supertrait-ref is `for<'b> Bar1<'a,'b>`, where `'a` is an\n-        //   early-bound parameter and `'b' is a late-bound parameter with a\n+        //   early-bound parameter and `'b` is a late-bound parameter with a\n         //   DB index of 1.\n         // - If we replace `'a` with `'x` from the input, it too will have\n         //   a DB index of 1, and thus we'll have `for<'x,'b> Bar1<'x,'b>`\n@@ -2444,7 +2444,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         None\n     }\n \n-    /// Check if the given `DefId` is `#\\[automatically_derived\\], *and*\n+    /// Check if the given `DefId` is `#\\[automatically_derived\\]`, *and*\n     /// whether it was produced by expanding a builtin derive macro.\n     pub fn is_builtin_derived(self, def_id: DefId) -> bool {\n         if self.is_automatically_derived(def_id)"}, {"sha": "536745d2cfea94de15c82bbe57654c1926d5dd11", "filename": "compiler/rustc_mir_transform/src/check_const_item_mutation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_const_item_mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_const_item_mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_const_item_mutation.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -74,7 +74,7 @@ impl<'tcx> ConstMutationChecker<'_, 'tcx> {\n         //\n         // `unsafe { *FOO = 0; *BAR.field = 1; }`\n         // `unsafe { &mut *FOO }`\n-        // `unsafe { (*ARRAY)[0] = val; }\n+        // `unsafe { (*ARRAY)[0] = val; }`\n         if !place.projection.iter().any(|p| matches!(p, PlaceElem::Deref)) {\n             let source_info = self.body.source_info(location);\n             let lint_root = self.body.source_scopes[source_info.scope]"}, {"sha": "8ee316773aeaf0daeef4f5428b381e9bce866278", "filename": "compiler/rustc_mir_transform/src/coverage/spans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -407,7 +407,7 @@ impl<'a, 'tcx> CoverageSpans<'a, 'tcx> {\n                 if self.prev().is_macro_expansion() && self.curr().is_macro_expansion() {\n                     // Macros that expand to include branching (such as\n                     // `assert_eq!()`, `assert_ne!()`, `info!()`, `debug!()`, or\n-                    // `trace!()) typically generate callee spans with identical\n+                    // `trace!()`) typically generate callee spans with identical\n                     // ranges (typically the full span of the macro) for all\n                     // `BasicBlocks`. This makes it impossible to distinguish\n                     // the condition (`if val1 != val2`) from the optional\n@@ -694,7 +694,7 @@ impl<'a, 'tcx> CoverageSpans<'a, 'tcx> {\n     /// `prev.span.hi()` will be greater than (further right of) `prev_original_span.hi()`.\n     /// If prev.span() was split off to the right of a closure, prev.span().lo() will be\n     /// greater than prev_original_span.lo(). The actual span of `prev_original_span` is\n-    /// not as important as knowing that `prev()` **used to have the same span** as `curr(),\n+    /// not as important as knowing that `prev()` **used to have the same span** as `curr()`,\n     /// which means their sort order is still meaningful for determining the dominator\n     /// relationship.\n     ///"}, {"sha": "cdd28ae0c0197df622981fb0221a8b4babfdd7ed", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -248,7 +248,7 @@ fn mir_const_qualif(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) ->\n \n     // N.B., this `borrow()` is guaranteed to be valid (i.e., the value\n     // cannot yet be stolen), because `mir_promoted()`, which steals\n-    // from `mir_const(), forces this query to execute before\n+    // from `mir_const()`, forces this query to execute before\n     // performing the steal.\n     let body = &tcx.mir_const(def).borrow();\n "}, {"sha": "c6e7468aab4299424d3e36c9ed5ca763ba77be01", "filename": "compiler/rustc_mir_transform/src/lower_slice_len.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -68,8 +68,11 @@ fn lower_slice_len_call<'tcx>(\n                 ty::FnDef(fn_def_id, _) if fn_def_id == &slice_len_fn_item_def_id => {\n                     // perform modifications\n                     // from something like `_5 = core::slice::<impl [u8]>::len(move _6) -> bb1`\n-                    // into `_5 = Len(*_6)\n+                    // into:\n+                    // ```\n+                    // _5 = Len(*_6)\n                     // goto bb1\n+                    // ```\n \n                     // make new RValue for Len\n                     let deref_arg = tcx.mk_place_deref(arg);"}, {"sha": "b0ab0f1062471523a87d3ccec098dbff86c1a6cd", "filename": "compiler/rustc_parse/src/parser/attr_wrapper.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -134,11 +134,11 @@ impl ToAttrTokenStream for LazyAttrTokenStreamImpl {\n             // Process the replace ranges, starting from the highest start\n             // position and working our way back. If have tokens like:\n             //\n-            // `#[cfg(FALSE)]` struct Foo { #[cfg(FALSE)] field: bool }`\n+            // `#[cfg(FALSE)] struct Foo { #[cfg(FALSE)] field: bool }`\n             //\n             // Then we will generate replace ranges for both\n             // the `#[cfg(FALSE)] field: bool` and the entire\n-            // `#[cfg(FALSE)]` struct Foo { #[cfg(FALSE)] field: bool }`\n+            // `#[cfg(FALSE)] struct Foo { #[cfg(FALSE)] field: bool }`\n             //\n             // By starting processing from the replace range with the greatest\n             // start position, we ensure that any replace range which encloses"}, {"sha": "da82e4724d1b5dba8bfb0ede4d17c2e315ae782f", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -335,7 +335,7 @@ impl TokenCursor {\n             num_of_hashes = cmp::max(num_of_hashes, count);\n         }\n \n-        // `/// foo` becomes `doc = r\"foo\".\n+        // `/// foo` becomes `doc = r\"foo\"`.\n         let delim_span = DelimSpan::from_single(span);\n         let body = TokenTree::Delimited(\n             delim_span,"}, {"sha": "5e2d2d3e5a704aafc48bb2a2bef2f4e48fa90c2d", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -646,7 +646,7 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n     }\n \n     // `UseTree` has one inline use (in `ast::ItemKind::Use`) and one\n-    // non-inline use (in `ast::UseTreeKind::Nested). The former case is more\n+    // non-inline use (in `ast::UseTreeKind::Nested`). The former case is more\n     // common, so we don't implement `visit_use_tree` and tolerate the missed\n     // coverage in the latter case.\n "}, {"sha": "053bf5c234acfe96044a005ce41b8c791df05a2c", "filename": "compiler/rustc_passes/src/liveness/rwu_table.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_passes%2Fsrc%2Fliveness%2Frwu_table.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_passes%2Fsrc%2Fliveness%2Frwu_table.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness%2Frwu_table.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -9,7 +9,7 @@ pub(super) struct RWU {\n }\n \n /// Conceptually, this is like a `Vec<Vec<RWU>>`. But the number of\n-/// RWU`s can get very large, so it uses a more compact representation.\n+/// RWU's can get very large, so it uses a more compact representation.\n pub(super) struct RWUTable {\n     /// Total number of live nodes.\n     live_nodes: usize,"}, {"sha": "46e34462cf2252035e60be227dd30226c363013b", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -333,7 +333,7 @@ impl<'sess> rustc_middle::ty::OnDiskCache<'sess> for OnDiskCache<'sess> {\n                 },\n             );\n \n-            // `Encode the file footer.\n+            // Encode the file footer.\n             let footer_pos = encoder.position() as u64;\n             encoder.encode_tagged(\n                 TAG_FILE_FOOTER,"}, {"sha": "52f0b65fad6724cab3806964bcc3783ba7152ef6", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -368,7 +368,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     /// This is a variation of `fn resolve_ident_in_lexical_scope` that can be run during\n     /// expansion and import resolution (perhaps they can be merged in the future).\n     /// The function is used for resolving initial segments of macro paths (e.g., `foo` in\n-    /// `foo::bar!(); or `foo!();`) and also for import paths on 2018 edition.\n+    /// `foo::bar!();` or `foo!();`) and also for import paths on 2018 edition.\n     #[instrument(level = \"debug\", skip(self, scope_set))]\n     pub(crate) fn early_resolve_ident_in_lexical_scope(\n         &mut self,"}, {"sha": "b8ddc4552578bed8fdfbae84da939203a9d85e2e", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -878,7 +878,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n         );\n         let is_assoc_fn = self.self_type_is_available();\n         if let Some((fn_kind, span)) = &self.diagnostic_metadata.current_function {\n-            // The current function has a `self' parameter, but we were unable to resolve\n+            // The current function has a `self` parameter, but we were unable to resolve\n             // a reference to `self`. This can only happen if the `self` identifier we\n             // are resolving came from a different hygiene context.\n             if fn_kind.decl().inputs.get(0).map_or(false, |p| p.is_self()) {"}, {"sha": "d4e4ace889b039e3bc9ea7d12aa70be466807b50", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -2792,7 +2792,7 @@ pub enum PpMode {\n     HirTree,\n     /// `-Zunpretty=thir-tree`\n     ThirTree,\n-    /// `-Zunpretty=`thir-flat`\n+    /// `-Zunpretty=thir-flat`\n     ThirFlat,\n     /// `-Zunpretty=mir`\n     Mir,"}, {"sha": "162c15574b56ce8dd285f85228bf6795a2b2c949", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -235,7 +235,7 @@ impl<D: Decoder> Decodable<D> for DefIndex {\n pub struct DefId {\n     // cfg-ing the order of fields so that the `DefIndex` which is high entropy always ends up in\n     // the lower bits no matter the endianness. This allows the compiler to turn that `Hash` impl\n-    // into a direct call to 'u64::hash(_)`.\n+    // into a direct call to `u64::hash(_)`.\n     #[cfg(not(all(target_pointer_width = \"64\", target_endian = \"big\")))]\n     pub index: DefIndex,\n     pub krate: CrateNum,"}, {"sha": "6272bf7f25eb102d81af5e0b1a1c7b14019b002c", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -1954,7 +1954,7 @@ impl Interner {\n         let name = Symbol::new(inner.strings.len() as u32);\n \n         // SAFETY: we convert from `&str` to `&[u8]`, clone it into the arena,\n-        // and immediately convert the clone back to `&[u8], all because there\n+        // and immediately convert the clone back to `&[u8]`, all because there\n         // is no `inner.arena.alloc_str()` method. This is clearly safe.\n         let string: &str =\n             unsafe { str::from_utf8_unchecked(inner.arena.alloc_slice(string.as_bytes())) };"}, {"sha": "870ecc2a9707ac7eb393d7af8b8d061687befdf0", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -1175,7 +1175,7 @@ fn opt_normalize_projection_type<'a, 'b, 'tcx>(\n /// paths you want to take. To make things worse, it was possible for\n /// cycles to arise, where you basically had a setup like `<MyType<$0>\n /// as Trait>::Foo == $0`. Here, normalizing `<MyType<$0> as\n-/// Trait>::Foo> to `[type error]` would lead to an obligation of\n+/// Trait>::Foo>` to `[type error]` would lead to an obligation of\n /// `<MyType<[type error]> as Trait>::Foo`. We are supposed to report\n /// an error for this obligation, but we legitimately should not,\n /// because it contains `[type error]`. Yuck! (See issue #29857 for"}, {"sha": "e91057356a2dc1a170f83a02b89d3eb931071dd9", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -339,7 +339,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         // Essentially any user-written impl will match with an error type,\n         // so creating `ImplCandidates` isn't useful. However, we might\n-        // end up finding a candidate elsewhere (e.g. a `BuiltinCandidate` for `Sized)\n+        // end up finding a candidate elsewhere (e.g. a `BuiltinCandidate` for `Sized`)\n         // This helps us avoid overflow: see issue #72839\n         // Since compilation is already guaranteed to fail, this is just\n         // to try to show the 'nicest' possible errors to the user."}, {"sha": "4377de158290a6a73fde8c810343efdcee388aa1", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fc5a765353741ee0a2597bd48283368253e9b6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=01fc5a765353741ee0a2597bd48283368253e9b6", "patch": "@@ -151,7 +151,7 @@ struct TraitObligationStack<'prev, 'tcx> {\n     /// you don't want to cache that `B: AutoTrait` or `A: AutoTrait`\n     /// is `EvaluatedToOk`; this is because they were only considered\n     /// ok on the premise that if `A: AutoTrait` held, but we indeed\n-    /// encountered a problem (later on) with `A: AutoTrait. So we\n+    /// encountered a problem (later on) with `A: AutoTrait`. So we\n     /// currently set a flag on the stack node for `B: AutoTrait` (as\n     /// well as the second instance of `A: AutoTrait`) to suppress\n     /// caching.\n@@ -727,7 +727,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             // Otherwise, we can say that `T: NonAutoTrait` is\n                             // true.\n                             // Let's imagine we have a predicate stack like\n-                            //         `Foo: Bar -> WF(T) -> T: NonAutoTrait -> T: Auto\n+                            //         `Foo: Bar -> WF(T) -> T: NonAutoTrait -> T: Auto`\n                             // depth   ^1                    ^2                 ^3\n                             // and the current predicate is `WF(T)`. `wf_args`\n                             // would contain `(T, 1)`. We want to check all"}]}