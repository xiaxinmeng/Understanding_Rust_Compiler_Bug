{"sha": "cc34ca1c9787fde84116637a0cee92fc5e375e3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMzRjYTFjOTc4N2ZkZTg0MTE2NjM3YTBjZWU5MmZjNWUzNzVlM2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-16T11:13:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-16T11:13:13Z"}, "message": "Auto merge of #48818 - michaelwoerister:issue-47309, r=eddyb\n\nProperly handle collecting default impls of methods with lifetime parameters.\n\nr? @eddyb\n\nFixes #47309.", "tree": {"sha": "2964be90a43e6248d100e1bafb438d52e935167f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2964be90a43e6248d100e1bafb438d52e935167f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc34ca1c9787fde84116637a0cee92fc5e375e3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc34ca1c9787fde84116637a0cee92fc5e375e3d", "html_url": "https://github.com/rust-lang/rust/commit/cc34ca1c9787fde84116637a0cee92fc5e375e3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc34ca1c9787fde84116637a0cee92fc5e375e3d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f3996c3ec4824b92b2af251ac09406f9573e1ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f3996c3ec4824b92b2af251ac09406f9573e1ff", "html_url": "https://github.com/rust-lang/rust/commit/5f3996c3ec4824b92b2af251ac09406f9573e1ff"}, {"sha": "5218c2d5efbb2907b279e627782e96896308d106", "url": "https://api.github.com/repos/rust-lang/rust/commits/5218c2d5efbb2907b279e627782e96896308d106", "html_url": "https://github.com/rust-lang/rust/commit/5218c2d5efbb2907b279e627782e96896308d106"}], "stats": {"total": 59, "additions": 48, "deletions": 11}, "files": [{"sha": "446ef6bd32876b63dce95e1b156cf90a05b5cb54", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cc34ca1c9787fde84116637a0cee92fc5e375e3d/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc34ca1c9787fde84116637a0cee92fc5e375e3d/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=cc34ca1c9787fde84116637a0cee92fc5e375e3d", "patch": "@@ -341,6 +341,8 @@ fn collect_roots<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         };\n \n         tcx.hir.krate().visit_all_item_likes(&mut visitor);\n+\n+        visitor.push_extra_entry_roots();\n     }\n \n     // We can only translate items that are instantiable - items all of\n@@ -998,8 +1000,6 @@ impl<'b, 'a, 'v> RootCollector<'b, 'a, 'v> {\n \n             let instance = Instance::mono(self.tcx, def_id);\n             self.output.push(create_fn_mono_item(instance));\n-\n-            self.push_extra_entry_roots(def_id);\n         }\n     }\n \n@@ -1008,20 +1008,22 @@ impl<'b, 'a, 'v> RootCollector<'b, 'a, 'v> {\n     /// monomorphized copy of the start lang item based on\n     /// the return type of `main`. This is not needed when\n     /// the user writes their own `start` manually.\n-    fn push_extra_entry_roots(&mut self, def_id: DefId) {\n-        if self.entry_fn != Some(def_id) {\n-            return;\n-        }\n-\n+    fn push_extra_entry_roots(&mut self) {\n         if self.tcx.sess.entry_type.get() != Some(config::EntryMain) {\n-            return;\n+            return\n         }\n \n+        let main_def_id = if let Some(def_id) = self.entry_fn {\n+            def_id\n+        } else {\n+            return\n+        };\n+\n         let start_def_id = match self.tcx.lang_items().require(StartFnLangItem) {\n             Ok(s) => s,\n             Err(err) => self.tcx.sess.fatal(&err),\n         };\n-        let main_ret_ty = self.tcx.fn_sig(def_id).output();\n+        let main_ret_ty = self.tcx.fn_sig(main_def_id).output();\n \n         // Given that `main()` has no arguments,\n         // then its return type cannot have\n@@ -1066,7 +1068,6 @@ fn create_mono_items_for_default_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                    def_id_to_string(tcx, impl_def_id));\n \n             if let Some(trait_ref) = tcx.impl_trait_ref(impl_def_id) {\n-                let callee_substs = tcx.erase_regions(&trait_ref.substs);\n                 let overridden_methods: FxHashSet<_> =\n                     impl_item_refs.iter()\n                                   .map(|iiref| iiref.name)\n@@ -1080,10 +1081,15 @@ fn create_mono_items_for_default_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         continue;\n                     }\n \n+                    let substs = Substs::for_item(tcx,\n+                                                  method.def_id,\n+                                                  |_, _| tcx.types.re_erased,\n+                                                  |def, _| trait_ref.substs.type_for_def(def));\n+\n                     let instance = ty::Instance::resolve(tcx,\n                                                          ty::ParamEnv::reveal_all(),\n                                                          method.def_id,\n-                                                         callee_substs).unwrap();\n+                                                         substs).unwrap();\n \n                     let mono_item = create_fn_mono_item(instance);\n                     if mono_item.is_instantiable(tcx)"}, {"sha": "7141bd62dc0d2f5362eeb6965352b67d36667e72", "filename": "src/test/compile-fail/issue-47309.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/cc34ca1c9787fde84116637a0cee92fc5e375e3d/src%2Ftest%2Fcompile-fail%2Fissue-47309.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc34ca1c9787fde84116637a0cee92fc5e375e3d/src%2Ftest%2Fcompile-fail%2Fissue-47309.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-47309.rs?ref=cc34ca1c9787fde84116637a0cee92fc5e375e3d", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Make sure that the mono-item collector does not crash when trying to\n+// instantiate a default impl of a method with lifetime parameters.\n+// See https://github.com/rust-lang/rust/issues/47309\n+\n+// compile-flags:-Clink-dead-code\n+// must-compile-successfully\n+\n+#![crate_type=\"rlib\"]\n+\n+pub trait EnvFuture {\n+    type Item;\n+\n+    fn boxed_result<'a>(self) where Self: Sized, Self::Item: 'a, {\n+    }\n+}\n+\n+struct Foo;\n+\n+impl<'a> EnvFuture for &'a Foo {\n+    type Item = ();\n+}"}]}