{"sha": "ee06c07f50fe590c5185807daa19de1d5540e66b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMDZjMDdmNTBmZTU5MGM1MTg1ODA3ZGFhMTlkZTFkNTU0MGU2NmI=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-11-25T22:25:10Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-11-26T20:28:43Z"}, "message": "Complete struct in irrefutable let", "tree": {"sha": "4f67165e1ab02483c5d027b5c156fa62a610495a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f67165e1ab02483c5d027b5c156fa62a610495a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee06c07f50fe590c5185807daa19de1d5540e66b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee06c07f50fe590c5185807daa19de1d5540e66b", "html_url": "https://github.com/rust-lang/rust/commit/ee06c07f50fe590c5185807daa19de1d5540e66b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee06c07f50fe590c5185807daa19de1d5540e66b/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2d8e1120fbf99d40e8b69039b5e25e788365779", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2d8e1120fbf99d40e8b69039b5e25e788365779", "html_url": "https://github.com/rust-lang/rust/commit/e2d8e1120fbf99d40e8b69039b5e25e788365779"}], "stats": {"total": 60, "additions": 46, "deletions": 14}, "files": [{"sha": "4f63ff0ef67f22e73a908aee2bf01e5f6826e89b", "filename": "crates/completion/src/completions/pattern.rs", "status": "modified", "additions": 43, "deletions": 14, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/ee06c07f50fe590c5185807daa19de1d5540e66b/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee06c07f50fe590c5185807daa19de1d5540e66b/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=ee06c07f50fe590c5185807daa19de1d5540e66b", "patch": "@@ -4,7 +4,7 @@ use crate::{CompletionContext, Completions};\n \n /// Completes constats and paths in patterns.\n pub(crate) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n-    if !ctx.is_pat_binding_or_const {\n+    if !(ctx.is_pat_binding_or_const || ctx.is_irrefutable_let_pat_binding) {\n         return;\n     }\n     if ctx.record_pat_syntax.is_some() {\n@@ -14,20 +14,27 @@ pub(crate) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n     // FIXME: ideally, we should look at the type we are matching against and\n     // suggest variants + auto-imports\n     ctx.scope.process_all_names(&mut |name, res| {\n-        match &res {\n-            hir::ScopeDef::ModuleDef(def) => match def {\n-                hir::ModuleDef::Adt(hir::Adt::Enum(..))\n-                | hir::ModuleDef::Adt(hir::Adt::Struct(..))\n-                | hir::ModuleDef::EnumVariant(..)\n-                | hir::ModuleDef::Const(..)\n-                | hir::ModuleDef::Module(..) => (),\n-                _ => return,\n-            },\n-            hir::ScopeDef::MacroDef(_) => (),\n-            _ => return,\n+        let add_resolution = match &res {\n+            hir::ScopeDef::ModuleDef(def) => {\n+                if ctx.is_irrefutable_let_pat_binding {\n+                    matches!(def, hir::ModuleDef::Adt(hir::Adt::Struct(_)))\n+                } else {\n+                    matches!(\n+                        def,\n+                        hir::ModuleDef::Adt(hir::Adt::Enum(..))\n+                            | hir::ModuleDef::Adt(hir::Adt::Struct(..))\n+                            | hir::ModuleDef::EnumVariant(..)\n+                            | hir::ModuleDef::Const(..)\n+                            | hir::ModuleDef::Module(..)\n+                    )\n+                }\n+            }\n+            hir::ScopeDef::MacroDef(_) => true,\n+            _ => false,\n         };\n-\n-        acc.add_resolution(ctx, name.to_string(), &res)\n+        if add_resolution {\n+            acc.add_resolution(ctx, name.to_string(), &res);\n+        }\n     });\n }\n \n@@ -85,4 +92,26 @@ fn foo() {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn completes_in_irrefutable_let() {\n+        check(\n+            r#\"\n+enum E { X }\n+use self::E::X;\n+const Z: E = E::X;\n+mod m {}\n+\n+static FOO: E = E::X;\n+struct Bar { f: u32 }\n+\n+fn foo() {\n+   let <|>\n+}\n+\"#,\n+            expect![[r#\"\n+                st Bar\n+            \"#]],\n+        );\n+    }\n }"}, {"sha": "5cd11cf775c8a3f30ece34aad32ed37cd882e8f1", "filename": "crates/completion/src/context.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee06c07f50fe590c5185807daa19de1d5540e66b/crates%2Fcompletion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee06c07f50fe590c5185807daa19de1d5540e66b/crates%2Fcompletion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcontext.rs?ref=ee06c07f50fe590c5185807daa19de1d5540e66b", "patch": "@@ -51,6 +51,7 @@ pub(crate) struct CompletionContext<'a> {\n     /// If a name-binding or reference to a const in a pattern.\n     /// Irrefutable patterns (like let) are excluded.\n     pub(super) is_pat_binding_or_const: bool,\n+    pub(super) is_irrefutable_let_pat_binding: bool,\n     /// A single-indent path, like `foo`. `::foo` should not be considered a trivial path.\n     pub(super) is_trivial_path: bool,\n     /// If not a trivial path, the prefix (qualifier).\n@@ -146,6 +147,7 @@ impl<'a> CompletionContext<'a> {\n             active_parameter: ActiveParameter::at(db, position),\n             is_param: false,\n             is_pat_binding_or_const: false,\n+            is_irrefutable_let_pat_binding: false,\n             is_trivial_path: false,\n             path_qual: None,\n             after_if: false,\n@@ -330,6 +332,7 @@ impl<'a> CompletionContext<'a> {\n                         if pat.syntax().text_range().contains_range(bind_pat.syntax().text_range())\n                         {\n                             self.is_pat_binding_or_const = false;\n+                            self.is_irrefutable_let_pat_binding = true;\n                         }\n                     }\n                 }"}]}