{"sha": "6ba7c5db079132b5d85112083691d4203a6b761c", "node_id": "C_kwDOAAsO6NoAKDZiYTdjNWRiMDc5MTMyYjVkODUxMTIwODM2OTFkNDIwM2E2Yjc2MWM", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-03T15:50:53Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-05-11T14:35:08Z"}, "message": "Split AllocatorKind::fn_name in global_fn_name and default_fn_name", "tree": {"sha": "cf458717a8b40fb3a83bf1518807a4178a1e4f85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf458717a8b40fb3a83bf1518807a4178a1e4f85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ba7c5db079132b5d85112083691d4203a6b761c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ba7c5db079132b5d85112083691d4203a6b761c", "html_url": "https://github.com/rust-lang/rust/commit/6ba7c5db079132b5d85112083691d4203a6b761c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ba7c5db079132b5d85112083691d4203a6b761c/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ce20663f767c7d1610411b21ed31db3e9af21f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ce20663f767c7d1610411b21ed31db3e9af21f4", "html_url": "https://github.com/rust-lang/rust/commit/4ce20663f767c7d1610411b21ed31db3e9af21f4"}], "stats": {"total": 35, "additions": 17, "deletions": 18}, "files": [{"sha": "73e79d4441c91ae4e87513b3585612ef583a46c4", "filename": "compiler/rustc_ast/src/expand/allocator.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6ba7c5db079132b5d85112083691d4203a6b761c/compiler%2Frustc_ast%2Fsrc%2Fexpand%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba7c5db079132b5d85112083691d4203a6b761c/compiler%2Frustc_ast%2Fsrc%2Fexpand%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fexpand%2Fallocator.rs?ref=6ba7c5db079132b5d85112083691d4203a6b761c", "patch": "@@ -6,13 +6,12 @@ pub enum AllocatorKind {\n     Default,\n }\n \n-impl AllocatorKind {\n-    pub fn fn_name(&self, base: Symbol) -> String {\n-        match *self {\n-            AllocatorKind::Global => format!(\"__rust_{base}\"),\n-            AllocatorKind::Default => format!(\"__rdl_{base}\"),\n-        }\n-    }\n+pub fn global_fn_name(base: Symbol) -> String {\n+    format!(\"__rust_{base}\")\n+}\n+\n+pub fn default_fn_name(base: Symbol) -> String {\n+    format!(\"__rdl_{base}\")\n }\n \n pub fn alloc_error_handler_name(alloc_error_handler_kind: AllocatorKind) -> &'static str {"}, {"sha": "f0d378d12f71245de599e0eef72767b08b210170", "filename": "compiler/rustc_builtin_macros/src/global_allocator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ba7c5db079132b5d85112083691d4203a6b761c/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba7c5db079132b5d85112083691d4203a6b761c/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs?ref=6ba7c5db079132b5d85112083691d4203a6b761c", "patch": "@@ -1,7 +1,7 @@\n use crate::util::check_builtin_macro_attribute;\n \n use rustc_ast::expand::allocator::{\n-    AllocatorKind, AllocatorMethod, AllocatorTy, ALLOCATOR_METHODS,\n+    global_fn_name, AllocatorMethod, AllocatorTy, ALLOCATOR_METHODS,\n };\n use rustc_ast::ptr::P;\n use rustc_ast::{self as ast, AttrVec, Expr, FnHeader, FnSig, Generics, Param, StmtKind};\n@@ -90,7 +90,7 @@ impl AllocFnFactory<'_, '_> {\n         }));\n         let item = self.cx.item(\n             self.span,\n-            Ident::from_str_and_span(&AllocatorKind::Global.fn_name(method.name), self.span),\n+            Ident::from_str_and_span(&global_fn_name(method.name), self.span),\n             self.attrs(),\n             kind,\n         );"}, {"sha": "3b74050250b20a400934724b0c674cebb245918f", "filename": "compiler/rustc_codegen_cranelift/src/allocator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ba7c5db079132b5d85112083691d4203a6b761c/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba7c5db079132b5d85112083691d4203a6b761c/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs?ref=6ba7c5db079132b5d85112083691d4203a6b761c", "patch": "@@ -4,7 +4,7 @@\n use crate::prelude::*;\n \n use rustc_ast::expand::allocator::{\n-    alloc_error_handler_name, AllocatorKind, AllocatorTy, ALLOCATOR_METHODS,\n+    alloc_error_handler_name, default_fn_name, AllocatorKind, AllocatorTy, ALLOCATOR_METHODS,\n };\n use rustc_codegen_ssa::base::allocator_kind_for_codegen;\n use rustc_session::config::OomStrategy;\n@@ -69,7 +69,7 @@ fn codegen_inner(\n                 unwind_context,\n                 sig,\n                 &format!(\"__rust_{}\", method.name),\n-                &AllocatorKind::Default.fn_name(method.name),\n+                &default_fn_name(method.name),\n             );\n         }\n     }"}, {"sha": "fe143aaad5fe73d47cb5d3535ce6d2e27286b668", "filename": "compiler/rustc_codegen_gcc/src/allocator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ba7c5db079132b5d85112083691d4203a6b761c/compiler%2Frustc_codegen_gcc%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba7c5db079132b5d85112083691d4203a6b761c/compiler%2Frustc_codegen_gcc%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fallocator.rs?ref=6ba7c5db079132b5d85112083691d4203a6b761c", "patch": "@@ -2,7 +2,7 @@\n use gccjit::FnAttribute;\n use gccjit::{FunctionType, GlobalKind, ToRValue};\n use rustc_ast::expand::allocator::{\n-    alloc_error_handler_name, AllocatorKind, AllocatorTy, ALLOCATOR_METHODS,\n+    alloc_error_handler_name, default_fn_name, AllocatorKind, AllocatorTy, ALLOCATOR_METHODS,\n };\n use rustc_middle::bug;\n use rustc_middle::ty::TyCtxt;\n@@ -61,7 +61,7 @@ pub(crate) unsafe fn codegen(tcx: TyCtxt<'_>, mods: &mut GccContext, _module_nam\n                 // TODO(antoyo): emit unwind tables.\n             }\n \n-            let callee = AllocatorKind::Default.fn_name(method.name);\n+            let callee = default_fn_name(method.name);\n             let args: Vec<_> = types.iter().enumerate()\n                 .map(|(index, typ)| context.new_parameter(None, *typ, &format!(\"param{}\", index)))\n                 .collect();"}, {"sha": "c24846810723989f1170afd91b2332b3f48ce666", "filename": "compiler/rustc_codegen_llvm/src/allocator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ba7c5db079132b5d85112083691d4203a6b761c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba7c5db079132b5d85112083691d4203a6b761c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs?ref=6ba7c5db079132b5d85112083691d4203a6b761c", "patch": "@@ -1,7 +1,7 @@\n use crate::attributes;\n use libc::c_uint;\n use rustc_ast::expand::allocator::{\n-    alloc_error_handler_name, AllocatorKind, AllocatorTy, ALLOCATOR_METHODS,\n+    alloc_error_handler_name, default_fn_name, AllocatorKind, AllocatorTy, ALLOCATOR_METHODS,\n };\n use rustc_middle::bug;\n use rustc_middle::ty::TyCtxt;\n@@ -71,7 +71,7 @@ pub(crate) unsafe fn codegen(\n                 attributes::apply_to_llfn(llfn, llvm::AttributePlace::Function, &[uwtable]);\n             }\n \n-            let callee = AllocatorKind::Default.fn_name(method.name);\n+            let callee = default_fn_name(method.name);\n             let callee =\n                 llvm::LLVMRustGetOrInsertFunction(llmod, callee.as_ptr().cast(), callee.len(), ty);\n             llvm::LLVMRustSetVisibility(callee, llvm::Visibility::Hidden);"}, {"sha": "07a9593fee833c11f4663253998685ce05f7d426", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ba7c5db079132b5d85112083691d4203a6b761c/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba7c5db079132b5d85112083691d4203a6b761c/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=6ba7c5db079132b5d85112083691d4203a6b761c", "patch": "@@ -4,7 +4,7 @@ use crate::errors;\n use crate::locator::{CrateError, CrateLocator, CratePaths};\n use crate::rmeta::{CrateDep, CrateMetadata, CrateNumMap, CrateRoot, MetadataBlob};\n \n-use rustc_ast::expand::allocator::AllocatorKind;\n+use rustc_ast::expand::allocator::{alloc_error_handler_name, global_fn_name, AllocatorKind};\n use rustc_ast::{self as ast, *};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::svh::Svh;\n@@ -1044,7 +1044,7 @@ fn global_allocator_spans(krate: &ast::Crate) -> Vec<Span> {\n         }\n     }\n \n-    let name = Symbol::intern(&AllocatorKind::Global.fn_name(sym::alloc));\n+    let name = Symbol::intern(&global_fn_name(sym::alloc));\n     let mut f = Finder { name, spans: Vec::new() };\n     visit::walk_crate(&mut f, krate);\n     f.spans\n@@ -1066,7 +1066,7 @@ fn alloc_error_handler_spans(krate: &ast::Crate) -> Vec<Span> {\n         }\n     }\n \n-    let name = Symbol::intern(&AllocatorKind::Global.fn_name(sym::oom));\n+    let name = Symbol::intern(alloc_error_handler_name(AllocatorKind::Global));\n     let mut f = Finder { name, spans: Vec::new() };\n     visit::walk_crate(&mut f, krate);\n     f.spans"}]}