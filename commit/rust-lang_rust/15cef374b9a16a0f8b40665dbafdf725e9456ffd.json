{"sha": "15cef374b9a16a0f8b40665dbafdf725e9456ffd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1Y2VmMzc0YjlhMTZhMGY4YjQwNjY1ZGJhZmRmNzI1ZTk0NTZmZmQ=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-05-22T21:59:15Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-05-22T21:59:15Z"}, "message": "Get rid of the >>> operator and make >> logical or arithmetic depending on the signedness. Closes #2417.", "tree": {"sha": "8d817652bb982c05294fb01ff8a80a1ab0689316", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d817652bb982c05294fb01ff8a80a1ab0689316"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15cef374b9a16a0f8b40665dbafdf725e9456ffd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15cef374b9a16a0f8b40665dbafdf725e9456ffd", "html_url": "https://github.com/rust-lang/rust/commit/15cef374b9a16a0f8b40665dbafdf725e9456ffd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15cef374b9a16a0f8b40665dbafdf725e9456ffd/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d7f3bd1ca622e6ddc03f4592eb8a451fbf850ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d7f3bd1ca622e6ddc03f4592eb8a451fbf850ab", "html_url": "https://github.com/rust-lang/rust/commit/8d7f3bd1ca622e6ddc03f4592eb8a451fbf850ab"}], "stats": {"total": 128, "additions": 49, "deletions": 79}, "files": [{"sha": "05a5a17b2f7e78aa2bda95c0cd060bdd4b3b0e45", "filename": "src/librustsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15cef374b9a16a0f8b40665dbafdf725e9456ffd/src%2Flibrustsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15cef374b9a16a0f8b40665dbafdf725e9456ffd/src%2Flibrustsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fast.rs?ref=15cef374b9a16a0f8b40665dbafdf725e9456ffd", "patch": "@@ -201,9 +201,8 @@ enum binop {\n     bitxor,\n     bitand,\n     bitor,\n-    lsl,\n-    lsr,\n-    asr,\n+    shl,\n+    shr,\n     eq,\n     lt,\n     le,"}, {"sha": "55743f91713f58a81d566a1db3bffce061bcd8d4", "filename": "src/librustsyntax/ast_util.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/15cef374b9a16a0f8b40665dbafdf725e9456ffd/src%2Flibrustsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15cef374b9a16a0f8b40665dbafdf725e9456ffd/src%2Flibrustsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fast_util.rs?ref=15cef374b9a16a0f8b40665dbafdf725e9456ffd", "patch": "@@ -72,9 +72,8 @@ fn binop_to_str(op: binop) -> str {\n       bitxor { ret \"^\"; }\n       bitand { ret \"&\"; }\n       bitor { ret \"|\"; }\n-      lsl { ret \"<<\"; }\n-      lsr { ret \">>\"; }\n-      asr { ret \">>>\"; }\n+      shl { ret \"<<\"; }\n+      shr { ret \">>\"; }\n       eq { ret \"==\"; }\n       lt { ret \"<\"; }\n       le { ret \"<=\"; }\n@@ -90,9 +89,8 @@ pure fn lazy_binop(b: binop) -> bool {\n \n pure fn is_shift_binop(b: binop) -> bool {\n     alt b {\n-      lsl { true }\n-      lsr { true }\n-      asr { true }\n+      shl { true }\n+      shr { true }\n       _ { false }\n     }\n }\n@@ -353,7 +351,7 @@ fn operator_prec(op: ast::binop) -> uint {\n       mul | div | rem   { 12u }\n       // 'as' sits between here with 11\n       add | subtract    { 10u }\n-      lsl | lsr | asr   {  9u }\n+      shl | shr         {  9u }\n       bitand            {  8u }\n       bitxor            {  7u }\n       bitor             {  6u }"}, {"sha": "a4d30cf2627ac773a82481576f6f39fe757476fe", "filename": "src/librustsyntax/parse/common.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/15cef374b9a16a0f8b40665dbafdf725e9456ffd/src%2Flibrustsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15cef374b9a16a0f8b40665dbafdf725e9456ffd/src%2Flibrustsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Fcommon.rs?ref=15cef374b9a16a0f8b40665dbafdf725e9456ffd", "patch": "@@ -114,10 +114,8 @@ fn check_restricted_keywords_(p: parser, w: ast::ident) {\n fn expect_gt(p: parser) {\n     if p.token == token::GT {\n         p.bump();\n-    } else if p.token == token::BINOP(token::LSR) {\n+    } else if p.token == token::BINOP(token::SHR) {\n         p.swap(token::GT, p.span.lo + 1u, p.span.hi);\n-    } else if p.token == token::BINOP(token::ASR) {\n-        p.swap(token::BINOP(token::LSR), p.span.lo + 1u, p.span.hi);\n     } else {\n         let mut s: str = \"expecting \";\n         s += token_to_str(p.reader, token::GT);\n@@ -132,8 +130,7 @@ fn parse_seq_to_before_gt<T: copy>(sep: option<token::token>,\n                                   p: parser) -> [T] {\n     let mut first = true;\n     let mut v = [];\n-    while p.token != token::GT && p.token != token::BINOP(token::LSR) &&\n-              p.token != token::BINOP(token::ASR) {\n+    while p.token != token::GT && p.token != token::BINOP(token::SHR) {\n         alt sep {\n           some(t) { if first { first = false; } else { expect(p, t); } }\n           _ { }"}, {"sha": "dd1d624d1cf5e81c552d70d783fc14b7eb9bd85d", "filename": "src/librustsyntax/parse/lexer.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/15cef374b9a16a0f8b40665dbafdf725e9456ffd/src%2Flibrustsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15cef374b9a16a0f8b40665dbafdf725e9456ffd/src%2Flibrustsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Flexer.rs?ref=15cef374b9a16a0f8b40665dbafdf725e9456ffd", "patch": "@@ -392,7 +392,7 @@ fn next_token_inner(rdr: reader) -> token::token {\n         rdr.bump();\n         alt rdr.curr {\n           '=' { rdr.bump(); ret token::LE; }\n-          '<' { ret binop(rdr, token::LSL); }\n+          '<' { ret binop(rdr, token::SHL); }\n           '-' {\n             rdr.bump();\n             alt rdr.curr {\n@@ -407,12 +407,7 @@ fn next_token_inner(rdr: reader) -> token::token {\n         rdr.bump();\n         alt rdr.curr {\n           '=' { rdr.bump(); ret token::GE; }\n-          '>' {\n-            if rdr.next() == '>' {\n-                rdr.bump();\n-                ret binop(rdr, token::ASR);\n-            } else { ret binop(rdr, token::LSR); }\n-          }\n+          '>' { ret binop(rdr, token::SHR); }\n           _ { ret token::GT; }\n         }\n       }"}, {"sha": "bf55ebf43c660714c3c6f54223d1a0a3b64b6076", "filename": "src/librustsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15cef374b9a16a0f8b40665dbafdf725e9456ffd/src%2Flibrustsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15cef374b9a16a0f8b40665dbafdf725e9456ffd/src%2Flibrustsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Fparser.rs?ref=15cef374b9a16a0f8b40665dbafdf725e9456ffd", "patch": "@@ -1119,9 +1119,8 @@ fn parse_assign_expr(p: parser) -> @expr {\n           token::CARET { aop = bitxor; }\n           token::AND { aop = bitand; }\n           token::OR { aop = bitor; }\n-          token::LSL { aop = lsl; }\n-          token::LSR { aop = lsr; }\n-          token::ASR { aop = asr; }\n+          token::SHL { aop = shl; }\n+          token::SHR { aop = shr; }\n         }\n         p.get_id(); // see ast_util::op_expr_callee_id\n         ret mk_expr(p, lo, rhs.span.hi, expr_assign_op(aop, lhs, rhs));"}, {"sha": "e2e35447af3f49070bb48fb86e4121fc37e1bc41", "filename": "src/librustsyntax/parse/prec.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15cef374b9a16a0f8b40665dbafdf725e9456ffd/src%2Flibrustsyntax%2Fparse%2Fprec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15cef374b9a16a0f8b40665dbafdf725e9456ffd/src%2Flibrustsyntax%2Fparse%2Fprec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Fprec.rs?ref=15cef374b9a16a0f8b40665dbafdf725e9456ffd", "patch": "@@ -25,9 +25,8 @@ fn token_to_binop(tok: token) -> option<ast::binop> {\n       // 'as' sits between here with 11\n       BINOP(PLUS)    { some(add) }\n       BINOP(MINUS)   { some(subtract) }\n-      BINOP(LSL)     { some(lsl) }\n-      BINOP(LSR)     { some(lsr) }\n-      BINOP(ASR)     { some(asr) }\n+      BINOP(SHL)     { some(shl) }\n+      BINOP(SHR)     { some(shr) }\n       BINOP(AND)     { some(bitand) }\n       BINOP(CARET)   { some(bitxor) }\n       BINOP(OR)      { some(bitor) }"}, {"sha": "1c6f240cf82009c0e7dfc836f9e7a8b3f3dc8910", "filename": "src/librustsyntax/parse/token.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15cef374b9a16a0f8b40665dbafdf725e9456ffd/src%2Flibrustsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15cef374b9a16a0f8b40665dbafdf725e9456ffd/src%2Flibrustsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Ftoken.rs?ref=15cef374b9a16a0f8b40665dbafdf725e9456ffd", "patch": "@@ -14,9 +14,8 @@ enum binop {\n     CARET,\n     AND,\n     OR,\n-    LSL,\n-    LSR,\n-    ASR,\n+    SHL,\n+    SHR,\n }\n \n enum token {\n@@ -78,9 +77,8 @@ fn binop_to_str(o: binop) -> str {\n       CARET { ret \"^\"; }\n       AND { ret \"&\"; }\n       OR { ret \"|\"; }\n-      LSL { ret \"<<\"; }\n-      LSR { ret \">>\"; }\n-      ASR { ret \">>>\"; }\n+      SHL { ret \"<<\"; }\n+      SHR { ret \">>\"; }\n     }\n }\n "}, {"sha": "99f058788b233d31f04fe127a40210aeb09e4c0a", "filename": "src/rustc/middle/const_eval.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/15cef374b9a16a0f8b40665dbafdf725e9456ffd/src%2Frustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15cef374b9a16a0f8b40665dbafdf725e9456ffd/src%2Frustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fconst_eval.rs?ref=15cef374b9a16a0f8b40665dbafdf725e9456ffd", "patch": "@@ -44,8 +44,7 @@ fn eval_const_expr(tcx: middle::ty::ctxt, e: @expr) -> const_val {\n               mul { const_int(a * b) } div { const_int(a / b) }\n               rem { const_int(a % b) } and | bitand { const_int(a & b) }\n               or | bitor { const_int(a | b) } bitxor { const_int(a ^ b) }\n-              lsl { const_int(a << b) } lsr { const_int(a >> b) }\n-              asr { const_int(a >>> b) }\n+              shl { const_int(a << b) } shr { const_int(a >> b) }\n               eq { fromb(a == b) } lt { fromb(a < b) }\n               le { fromb(a <= b) } ne { fromb(a != b) }\n               ge { fromb(a >= b) } gt { fromb(a > b) }\n@@ -58,9 +57,7 @@ fn eval_const_expr(tcx: middle::ty::ctxt, e: @expr) -> const_val {\n               mul { const_uint(a * b) } div { const_uint(a / b) }\n               rem { const_uint(a % b) } and | bitand { const_uint(a & b) }\n               or | bitor { const_uint(a | b) } bitxor { const_uint(a ^ b) }\n-              lsl { const_int((a << b) as i64) }\n-              lsr { const_int((a >> b) as i64) }\n-              asr { const_int((a >>> b) as i64) }\n+              shl { const_uint(a << b) } shr { const_uint(a >> b) }\n               eq { fromb(a == b) } lt { fromb(a < b) }\n               le { fromb(a <= b) } ne { fromb(a != b) }\n               ge { fromb(a >= b) } gt { fromb(a > b) }"}, {"sha": "038354da68350a0083d549ce2178091b3379f768", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/15cef374b9a16a0f8b40665dbafdf725e9456ffd/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15cef374b9a16a0f8b40665dbafdf725e9456ffd/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=15cef374b9a16a0f8b40665dbafdf725e9456ffd", "patch": "@@ -1617,9 +1617,12 @@ fn trans_eager_binop(cx: block, op: ast::binop, lhs: ValueRef,\n       ast::bitor { Or(cx, lhs, rhs) }\n       ast::bitand { And(cx, lhs, rhs) }\n       ast::bitxor { Xor(cx, lhs, rhs) }\n-      ast::lsl { Shl(cx, lhs, rhs) }\n-      ast::lsr { LShr(cx, lhs, rhs) }\n-      ast::asr { AShr(cx, lhs, rhs) }\n+      ast::shl { Shl(cx, lhs, rhs) }\n+      ast::shr {\n+        if ty::type_is_signed(intype) {\n+            AShr(cx, lhs, rhs)\n+        } else { LShr(cx, lhs, rhs) }\n+      }\n       _ {\n         let cmpr = trans_compare(cx, op, lhs, lhs_t, rhs, rhs_t);\n         cx = cmpr.bcx;\n@@ -4565,9 +4568,11 @@ fn trans_const_expr(cx: @crate_ctxt, e: @ast::expr) -> ValueRef {\n           ast::bitxor { llvm::LLVMConstXor(te1, te2) }\n           ast::bitand { llvm::LLVMConstAnd(te1, te2) }\n           ast::bitor  { llvm::LLVMConstOr(te1, te2) }\n-          ast::lsl    { llvm::LLVMConstShl(te1, te2) }\n-          ast::lsr    { llvm::LLVMConstLShr(te1, te2) }\n-          ast::asr    { llvm::LLVMConstAShr(te1, te2) }\n+          ast::shl    { llvm::LLVMConstShl(te1, te2) }\n+          ast::shr    {\n+            if signed { llvm::LLVMConstAShr(te1, te2) }\n+            else      { llvm::LLVMConstLShr(te1, te2) }\n+          }\n           ast::eq     |\n           ast::lt     |\n           ast::le     |"}, {"sha": "ea2154e4f78f8c021c3349043b7f7fb1638bc58a", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15cef374b9a16a0f8b40665dbafdf725e9456ffd/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15cef374b9a16a0f8b40665dbafdf725e9456ffd/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=15cef374b9a16a0f8b40665dbafdf725e9456ffd", "patch": "@@ -2704,9 +2704,8 @@ fn is_binopable(_cx: ctxt, ty: t, op: ast::binop) -> bool {\n           ast::bitxor { opcat_bit }\n           ast::bitand { opcat_bit }\n           ast::bitor { opcat_bit }\n-          ast::lsl { opcat_shift }\n-          ast::lsr { opcat_shift }\n-          ast::asr { opcat_shift }\n+          ast::shl { opcat_shift }\n+          ast::shr { opcat_shift }\n           ast::eq { opcat_eq }\n           ast::ne { opcat_eq }\n           ast::lt { opcat_rel }"}, {"sha": "f3c10547708f5a80383d5911991aab668f07c389", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15cef374b9a16a0f8b40665dbafdf725e9456ffd/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15cef374b9a16a0f8b40665dbafdf725e9456ffd/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=15cef374b9a16a0f8b40665dbafdf725e9456ffd", "patch": "@@ -867,8 +867,8 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n     fn binop_method(op: ast::binop) -> option<str> {\n         alt op {\n           ast::add | ast::subtract | ast::mul | ast::div | ast::rem |\n-          ast::bitxor | ast::bitand | ast::bitor | ast::lsl | ast::lsr |\n-          ast::asr { some(ast_util::binop_to_str(op)) }\n+          ast::bitxor | ast::bitand | ast::bitor | ast::shl | ast::shr\n+          { some(ast_util::binop_to_str(op)) }\n           _ { none }\n         }\n     }"}, {"sha": "87b71788e2880f506572b2fd9ac428273c6c08b4", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/15cef374b9a16a0f8b40665dbafdf725e9456ffd/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15cef374b9a16a0f8b40665dbafdf725e9456ffd/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=15cef374b9a16a0f8b40665dbafdf725e9456ffd", "patch": "@@ -47,7 +47,6 @@ fn test_char() {\n     assert (ch10 / ch4 == ch2);\n     assert (ch10 % ch4 == ch2);\n     assert (ch10 >> ch2 == ch2);\n-    assert (ch10 >>> ch2 == ch2);\n     assert (ch10 << ch4 == 160 as char);\n     assert (ch10 | ch4 == 14 as char);\n     assert (ch10 & ch2 == ch2);"}, {"sha": "f4178aad6fa3d74f77685f86eead03858651da7c", "filename": "src/test/run-pass/bitwise.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15cef374b9a16a0f8b40665dbafdf725e9456ffd/src%2Ftest%2Frun-pass%2Fbitwise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15cef374b9a16a0f8b40665dbafdf725e9456ffd/src%2Ftest%2Frun-pass%2Fbitwise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitwise.rs?ref=15cef374b9a16a0f8b40665dbafdf725e9456ffd", "patch": "@@ -2,12 +2,12 @@\n \n #[cfg(target_arch = \"x86\")]\n fn target() {\n-    assert (-1000 >> 3 == 536870787);\n+    assert (-1000 as uint >> 3u == 536870787u);\n }\n \n #[cfg(target_arch = \"x86_64\")]\n fn target() {\n-    assert (-1000 >> 3 == 2305843009213693827);\n+    assert (-1000 as uint >> 3u == 2305843009213693827u);\n }\n \n fn general() {\n@@ -24,7 +24,7 @@ fn general() {\n     assert (0xf0 | 0xf == 0xff);\n     assert (0xf << 4 == 0xf0);\n     assert (0xf0 >> 4 == 0xf);\n-    assert (-16 >>> 2 == -4);\n+    assert (-16 >> 2 == -4);\n     assert (0b1010_1010 | 0b0101_0101 == 0xff);\n }\n "}, {"sha": "665f322de28165cc7d3eaa73450f934ceda1c111", "filename": "src/test/run-pass/shift.rs", "status": "modified", "additions": 10, "deletions": 25, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/15cef374b9a16a0f8b40665dbafdf725e9456ffd/src%2Ftest%2Frun-pass%2Fshift.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15cef374b9a16a0f8b40665dbafdf725e9456ffd/src%2Ftest%2Frun-pass%2Fshift.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshift.rs?ref=15cef374b9a16a0f8b40665dbafdf725e9456ffd", "patch": "@@ -16,71 +16,56 @@ fn test_expr() {\n     let v4 = 4 as u8;\n     let v2 = 2 as u8;\n     assert (v10 >> v2 == v2 as uint);\n-    assert (v10 >>> v2 == v2 as uint);\n     assert (v10 << v4 == 160 as uint);\n \n     let v10 = 10 as u8;\n     let v4 = 4 as uint;\n     let v2 = 2 as uint;\n     assert (v10 >> v2 == v2 as u8);\n-    assert (v10 >>> v2 == v2 as u8);\n     assert (v10 << v4 == 160 as u8);\n \n     let v10 = 10 as int;\n     let v4 = 4 as i8;\n     let v2 = 2 as i8;\n     assert (v10 >> v2 == v2 as int);\n-    assert (v10 >>> v2 == v2 as int);\n     assert (v10 << v4 == 160 as int);\n \n     let v10 = 10 as i8;\n     let v4 = 4 as int;\n     let v2 = 2 as int;\n     assert (v10 >> v2 == v2 as i8);\n-    assert (v10 >>> v2 == v2 as i8);\n     assert (v10 << v4 == 160 as i8);\n \n     let v10 = 10 as uint;\n     let v4 = 4 as int;\n     let v2 = 2 as int;\n     assert (v10 >> v2 == v2 as uint);\n-    assert (v10 >>> v2 == v2 as uint);\n     assert (v10 << v4 == 160 as uint);\n }\n \n fn test_const() {\n     const r1_1: uint = 10u >> 2u8;\n-    const r2_1: uint = 10u >>> 2u8;\n-    const r3_1: uint = 10u << 4u8;\n+    const r2_1: uint = 10u << 4u8;\n     assert r1_1 == 2 as uint;\n-    assert r2_1 == 2 as uint;\n-    assert r3_1 == 160 as uint;\n+    assert r2_1 == 160 as uint;\n \n     const r1_2: u8 = 10u8 >> 2u;\n-    const r2_2: u8 = 10u8 >>> 2u;\n-    const r3_2: u8 = 10u8 << 4u;\n+    const r2_2: u8 = 10u8 << 4u;\n     assert r1_2 == 2 as u8;\n-    assert r2_2 == 2 as u8;\n-    assert r3_2 == 160 as u8;\n+    assert r2_2 == 160 as u8;\n \n     const r1_3: int = 10 >> 2i8;\n-    const r2_3: int = 10 >>> 2i8;\n-    const r3_3: int = 10 << 4i8;\n+    const r2_3: int = 10 << 4i8;\n     assert r1_3 == 2 as int;\n-    assert r2_3 == 2 as int;\n-    assert r3_3 == 160 as int;\n+    assert r2_3 == 160 as int;\n \n     const r1_4: i8 = 10i8 >> 2;\n-    const r2_4: i8 = 10i8 >>> 2;\n-    const r3_4: i8 = 10i8 << 4;\n+    const r2_4: i8 = 10i8 << 4;\n     assert r1_4 == 2 as i8;\n-    assert r2_4 == 2 as i8;\n-    assert r3_4 == 160 as i8;\n+    assert r2_4 == 160 as i8;\n \n     const r1_5: uint = 10u >> 2i8;\n-    const r2_5: uint = 10u >>> 2i8;\n-    const r3_5: uint = 10u << 4i8;\n+    const r2_5: uint = 10u << 4i8;\n     assert r1_5 == 2 as uint;\n-    assert r2_5 == 2 as uint;\n-    assert r3_5 == 160 as uint;\n+    assert r2_5 == 160 as uint;\n }"}]}