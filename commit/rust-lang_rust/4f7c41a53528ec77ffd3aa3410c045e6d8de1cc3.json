{"sha": "4f7c41a53528ec77ffd3aa3410c045e6d8de1cc3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmN2M0MWE1MzUyOGVjNzdmZmQzYWEzNDEwYzA0NWU2ZDhkZTFjYzM=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2019-05-31T11:33:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-31T11:33:55Z"}, "message": "Rollup merge of #61319 - Centril:async-unsafe-fn-order, r=cramertj\n\nSwap order of `unsafe async fn` to `async unsafe fn`\n\nChange the order of `unsafe async fn` to `async unsafe fn`.\n\nI had intended to do this a while back but didn't get around to it...\n\nThis should be done because:\n- It is the order used by `const unsafe fn` so therefore it is consistent.\n- This keeps all the \"effect/restriction\" modifiers to the left of `unsafe` (which according to some is not an effect) instead of mixing them such that we are more forward compatible with some sort of effect system.\n\nr? @cramertj", "tree": {"sha": "cc1f11df38fd54a0c84e8eec6820f5125fb40325", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc1f11df38fd54a0c84e8eec6820f5125fb40325"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f7c41a53528ec77ffd3aa3410c045e6d8de1cc3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc8REkCRBK7hj4Ov3rIwAAdHIIAB2V7Bg6lL45PK6za9FsuS17\nDfW1w4F5psXgB/7AKK4QPKuF/UvC+onQwCoLe3vMjxmuJa3PO5VTfk1XSshjmPey\nmLp2gQZhoQg0YKhUcgkxSRHJNWYN/iBT5r9Lhk4S6OKk1QDpU0iqRM4e+UcDf/w7\nX/ztYbRQzQvZtpK9af3XVPt0qu4kDDMCX17GrbCTRtVBT3lOnRh/e+gsz9trnzRf\nOZ0pbiZbdcL7tNbhuyrCDKxSx0yIpqcUdYb4m+qnV0GXOH28sMge2mE/up4gOtWB\ndCXIPWtghYrQ6nUqF0X6Wq/eD/kXB8Kda8r55W20eVIdjxgwmuzHL7U7hK7DX9s=\n=QlTZ\n-----END PGP SIGNATURE-----\n", "payload": "tree cc1f11df38fd54a0c84e8eec6820f5125fb40325\nparent 90d4ef3af2c5b94ab23faaedda068433c4aba2ef\nparent 2ebfbb4fabda543f090890a889914df025ccbb77\nauthor Pietro Albini <pietro@pietroalbini.org> 1559302435 +0200\ncommitter GitHub <noreply@github.com> 1559302435 +0200\n\nRollup merge of #61319 - Centril:async-unsafe-fn-order, r=cramertj\n\nSwap order of `unsafe async fn` to `async unsafe fn`\n\nChange the order of `unsafe async fn` to `async unsafe fn`.\n\nI had intended to do this a while back but didn't get around to it...\n\nThis should be done because:\n- It is the order used by `const unsafe fn` so therefore it is consistent.\n- This keeps all the \"effect/restriction\" modifiers to the left of `unsafe` (which according to some is not an effect) instead of mixing them such that we are more forward compatible with some sort of effect system.\n\nr? @cramertj\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f7c41a53528ec77ffd3aa3410c045e6d8de1cc3", "html_url": "https://github.com/rust-lang/rust/commit/4f7c41a53528ec77ffd3aa3410c045e6d8de1cc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f7c41a53528ec77ffd3aa3410c045e6d8de1cc3/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90d4ef3af2c5b94ab23faaedda068433c4aba2ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/90d4ef3af2c5b94ab23faaedda068433c4aba2ef", "html_url": "https://github.com/rust-lang/rust/commit/90d4ef3af2c5b94ab23faaedda068433c4aba2ef"}, {"sha": "2ebfbb4fabda543f090890a889914df025ccbb77", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ebfbb4fabda543f090890a889914df025ccbb77", "html_url": "https://github.com/rust-lang/rust/commit/2ebfbb4fabda543f090890a889914df025ccbb77"}], "stats": {"total": 75, "additions": 36, "deletions": 39}, "files": [{"sha": "92c27f883d1a9ec882d3a12fd36ca009148d916a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 34, "deletions": 37, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/4f7c41a53528ec77ffd3aa3410c045e6d8de1cc3/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7c41a53528ec77ffd3aa3410c045e6d8de1cc3/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4f7c41a53528ec77ffd3aa3410c045e6d8de1cc3", "patch": "@@ -7205,44 +7205,41 @@ impl<'a> Parser<'a> {\n             return Ok(Some(item));\n         }\n \n-        // `unsafe async fn` or `async fn`\n-        if (\n-            self.check_keyword(kw::Unsafe) &&\n-            self.is_keyword_ahead(1, &[kw::Async])\n-        ) || (\n-            self.check_keyword(kw::Async) &&\n-            self.is_keyword_ahead(1, &[kw::Fn])\n-        )\n-        {\n-            // ASYNC FUNCTION ITEM\n-            let unsafety = self.parse_unsafety();\n-            self.expect_keyword(kw::Async)?;\n-            let async_span = self.prev_span;\n-            self.expect_keyword(kw::Fn)?;\n-            let fn_span = self.prev_span;\n-            let (ident, item_, extra_attrs) =\n-                self.parse_item_fn(unsafety,\n-                                   respan(async_span, IsAsync::Async {\n-                                       closure_id: ast::DUMMY_NODE_ID,\n-                                       return_impl_trait_id: ast::DUMMY_NODE_ID,\n-                                       arguments: Vec::new(),\n-                                   }),\n-                                   respan(fn_span, Constness::NotConst),\n-                                   Abi::Rust)?;\n-            let prev_span = self.prev_span;\n-            let item = self.mk_item(lo.to(prev_span),\n-                                    ident,\n-                                    item_,\n-                                    visibility,\n-                                    maybe_append(attrs, extra_attrs));\n-            if self.span.rust_2015() {\n-                self.diagnostic().struct_span_err_with_code(\n-                    async_span,\n-                    \"`async fn` is not permitted in the 2015 edition\",\n-                    DiagnosticId::Error(\"E0670\".into())\n-                ).emit();\n+        // Parse `async unsafe? fn`.\n+        if self.check_keyword(kw::Async) {\n+            let async_span = self.span;\n+            if self.is_keyword_ahead(1, &[kw::Fn])\n+                || self.is_keyword_ahead(2, &[kw::Fn])\n+            {\n+                // ASYNC FUNCTION ITEM\n+                self.bump(); // `async`\n+                let unsafety = self.parse_unsafety(); // `unsafe`?\n+                self.expect_keyword(kw::Fn)?; // `fn`\n+                let fn_span = self.prev_span;\n+                let (ident, item_, extra_attrs) =\n+                    self.parse_item_fn(unsafety,\n+                                    respan(async_span, IsAsync::Async {\n+                                        closure_id: ast::DUMMY_NODE_ID,\n+                                        return_impl_trait_id: ast::DUMMY_NODE_ID,\n+                                        arguments: Vec::new(),\n+                                    }),\n+                                    respan(fn_span, Constness::NotConst),\n+                                    Abi::Rust)?;\n+                let prev_span = self.prev_span;\n+                let item = self.mk_item(lo.to(prev_span),\n+                                        ident,\n+                                        item_,\n+                                        visibility,\n+                                        maybe_append(attrs, extra_attrs));\n+                if self.span.rust_2015() {\n+                    self.diagnostic().struct_span_err_with_code(\n+                        async_span,\n+                        \"`async fn` is not permitted in the 2015 edition\",\n+                        DiagnosticId::Error(\"E0670\".into())\n+                    ).emit();\n+                }\n+                return Ok(Some(item));\n             }\n-            return Ok(Some(item));\n         }\n         if self.check_keyword(kw::Unsafe) &&\n             self.is_keyword_ahead(1, &[kw::Trait, kw::Auto])"}, {"sha": "38261ca4570eb96d0475010c1fe7fc238064e1b1", "filename": "src/test/ui/async-await/async-await.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f7c41a53528ec77ffd3aa3410c045e6d8de1cc3/src%2Ftest%2Fui%2Fasync-await%2Fasync-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7c41a53528ec77ffd3aa3410c045e6d8de1cc3/src%2Ftest%2Fui%2Fasync-await%2Fasync-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-await.rs?ref=4f7c41a53528ec77ffd3aa3410c045e6d8de1cc3", "patch": "@@ -122,7 +122,7 @@ fn async_fn_with_internal_borrow(y: u8) -> impl Future<Output = u8> {\n     }\n }\n \n-unsafe async fn unsafe_async_fn(x: u8) -> u8 {\n+async unsafe fn unsafe_async_fn(x: u8) -> u8 {\n     wake_and_yield_once().await;\n     x\n }"}, {"sha": "7d8b7a257dad973c92fcfd5580f4be9551d85995", "filename": "src/test/ui/async-await/await-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f7c41a53528ec77ffd3aa3410c045e6d8de1cc3/src%2Ftest%2Fui%2Fasync-await%2Fawait-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7c41a53528ec77ffd3aa3410c045e6d8de1cc3/src%2Ftest%2Fui%2Fasync-await%2Fawait-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-macro.rs?ref=4f7c41a53528ec77ffd3aa3410c045e6d8de1cc3", "patch": "@@ -122,7 +122,7 @@ fn async_fn_with_internal_borrow(y: u8) -> impl Future<Output = u8> {\n     }\n }\n \n-unsafe async fn unsafe_async_fn(x: u8) -> u8 {\n+async unsafe fn unsafe_async_fn(x: u8) -> u8 {\n     await!(wake_and_yield_once());\n     x\n }"}]}