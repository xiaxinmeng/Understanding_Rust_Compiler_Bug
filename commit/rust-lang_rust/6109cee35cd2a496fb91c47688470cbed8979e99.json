{"sha": "6109cee35cd2a496fb91c47688470cbed8979e99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxMDljZWUzNWNkMmE0OTZmYjkxYzQ3Njg4NDcwY2JlZDg5NzllOTk=", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-04-16T15:46:47Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-04-16T15:46:47Z"}, "message": "rustdoc: get rid of unused path printing code\n\nThe code for printing a raw path is only used in utils.rs,\nwhich only prints the alternative (non-HTML) format. Path has\na function that does the same thing without HTML support,\nso use that instead.", "tree": {"sha": "70916f1425c1bb86fa331b23ca1eac20d33ab56e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70916f1425c1bb86fa331b23ca1eac20d33ab56e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6109cee35cd2a496fb91c47688470cbed8979e99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6109cee35cd2a496fb91c47688470cbed8979e99", "html_url": "https://github.com/rust-lang/rust/commit/6109cee35cd2a496fb91c47688470cbed8979e99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6109cee35cd2a496fb91c47688470cbed8979e99/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3833636446b670ee905fba5f8d18881b1739814e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3833636446b670ee905fba5f8d18881b1739814e", "html_url": "https://github.com/rust-lang/rust/commit/3833636446b670ee905fba5f8d18881b1739814e"}], "stats": {"total": 44, "additions": 1, "deletions": 43}, "files": [{"sha": "c2a971d6375133761279e2adbaba1f3cfab214f7", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6109cee35cd2a496fb91c47688470cbed8979e99/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6109cee35cd2a496fb91c47688470cbed8979e99/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=6109cee35cd2a496fb91c47688470cbed8979e99", "patch": "@@ -401,7 +401,7 @@ crate fn resolve_type(cx: &mut DocContext<'_>, path: Path, id: hir::HirId) -> Ty\n             return Generic(kw::SelfUpper);\n         }\n         Res::Def(DefKind::TyParam, _) if path.segments.len() == 1 => {\n-            return Generic(Symbol::intern(&format!(\"{:#}\", path.print(&cx.cache, cx.tcx))));\n+            return Generic(Symbol::intern(&path.whole_name()));\n         }\n         Res::SelfTy(..) | Res::Def(DefKind::TyParam | DefKind::AssocTy, _) => true,\n         _ => false,"}, {"sha": "4a091ee9114257f79071dbacc5a900ba9661af3e", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6109cee35cd2a496fb91c47688470cbed8979e99/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6109cee35cd2a496fb91c47688470cbed8979e99/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=6109cee35cd2a496fb91c47688470cbed8979e99", "patch": "@@ -453,48 +453,6 @@ impl clean::GenericArgs {\n     }\n }\n \n-impl clean::PathSegment {\n-    crate fn print<'a, 'tcx: 'a>(\n-        &'a self,\n-        cache: &'a Cache,\n-        tcx: TyCtxt<'tcx>,\n-    ) -> impl fmt::Display + 'a + Captures<'tcx> {\n-        display_fn(move |f| {\n-            if f.alternate() {\n-                write!(f, \"{}{:#}\", self.name, self.args.print(cache, tcx))\n-            } else {\n-                write!(f, \"{}{}\", self.name, self.args.print(cache, tcx))\n-            }\n-        })\n-    }\n-}\n-\n-impl clean::Path {\n-    crate fn print<'a, 'tcx: 'a>(\n-        &'a self,\n-        cache: &'a Cache,\n-        tcx: TyCtxt<'tcx>,\n-    ) -> impl fmt::Display + 'a + Captures<'tcx> {\n-        display_fn(move |f| {\n-            if self.global {\n-                f.write_str(\"::\")?\n-            }\n-\n-            for (i, seg) in self.segments.iter().enumerate() {\n-                if i > 0 {\n-                    f.write_str(\"::\")?\n-                }\n-                if f.alternate() {\n-                    write!(f, \"{:#}\", seg.print(cache, tcx))?;\n-                } else {\n-                    write!(f, \"{}\", seg.print(cache, tcx))?;\n-                }\n-            }\n-            Ok(())\n-        })\n-    }\n-}\n-\n crate fn href(did: DefId, cache: &Cache) -> Option<(String, ItemType, Vec<String>)> {\n     if !did.is_local() && !cache.access_levels.is_public(did) && !cache.document_private {\n         return None;"}]}