{"sha": "a18d9842ed94ecca3e7161945bb2f749d98d18ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExOGQ5ODQyZWQ5NGVjY2EzZTcxNjE5NDViYjJmNzQ5ZDk4ZDE4ZWU=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-06-17T22:02:58Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-06-30T21:12:12Z"}, "message": "Make the unused_mut lint smarter with respect to locals.\n\nFixes #26332", "tree": {"sha": "05567954b8807bfc0ec4bfc8a92109f74c31d78c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05567954b8807bfc0ec4bfc8a92109f74c31d78c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a18d9842ed94ecca3e7161945bb2f749d98d18ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a18d9842ed94ecca3e7161945bb2f749d98d18ee", "html_url": "https://github.com/rust-lang/rust/commit/a18d9842ed94ecca3e7161945bb2f749d98d18ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a18d9842ed94ecca3e7161945bb2f749d98d18ee/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2f45294a506904f2768a8f991b0cf33b7cb0bcd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f45294a506904f2768a8f991b0cf33b7cb0bcd2", "html_url": "https://github.com/rust-lang/rust/commit/2f45294a506904f2768a8f991b0cf33b7cb0bcd2"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "4c8511eb1902c55f0e2fec2c09ad4934530f53ea", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a18d9842ed94ecca3e7161945bb2f749d98d18ee/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18d9842ed94ecca3e7161945bb2f749d98d18ee/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=a18d9842ed94ecca3e7161945bb2f749d98d18ee", "patch": "@@ -2655,8 +2655,8 @@ macro_rules! step_impl_signed {\n             #[allow(trivial_numeric_casts)]\n             fn steps_between(start: &$t, end: &$t, by: &$t) -> Option<usize> {\n                 if *by == 0 { return None; }\n-                let mut diff: usize;\n-                let mut by_u: usize;\n+                let diff: usize;\n+                let by_u: usize;\n                 if *by > 0 {\n                     if *start >= *end {\n                         return Some(0);"}, {"sha": "7ca89cfd0c9cc828cee98ef95f313011d8bb7750", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a18d9842ed94ecca3e7161945bb2f749d98d18ee/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18d9842ed94ecca3e7161945bb2f749d98d18ee/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=a18d9842ed94ecca3e7161945bb2f749d98d18ee", "patch": "@@ -399,7 +399,7 @@ impl<'a> Parser<'a> {\n             }\n             Some(..) | None => { return &self.input[..0]; }\n         };\n-        let mut end;\n+        let end;\n         loop {\n             match self.cur.clone().next() {\n                 Some((_, c)) if c.is_xid_continue() => {"}, {"sha": "6d5b47d8ed980bb40a0d3eef2c3ea8f53f1222fb", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a18d9842ed94ecca3e7161945bb2f749d98d18ee/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18d9842ed94ecca3e7161945bb2f749d98d18ee/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=a18d9842ed94ecca3e7161945bb2f749d98d18ee", "patch": "@@ -1854,7 +1854,7 @@ impl LifeGiver {\n     }\n \n     fn give_lifetime(&self) -> ast::Lifetime {\n-        let mut lifetime;\n+        let lifetime;\n         loop {\n             let mut s = String::from(\"'\");\n             s.push_str(&num_to_string(self.counter.get()));"}, {"sha": "237add6ff860e6d92d1d24eb8ab9b282619cde45", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a18d9842ed94ecca3e7161945bb2f749d98d18ee/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18d9842ed94ecca3e7161945bb2f749d98d18ee/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=a18d9842ed94ecca3e7161945bb2f749d98d18ee", "patch": "@@ -182,7 +182,7 @@ impl<'a, 'tcx> euv::Delegate<'tcx> for CheckLoanCtxt<'a, 'tcx> {\n             None => { }\n         }\n \n-        self.check_assignment(assignment_id, assignment_span, assignee_cmt, mode);\n+        self.check_assignment(assignment_id, assignment_span, assignee_cmt);\n     }\n \n     fn decl_without_init(&mut self, _id: ast::NodeId, _span: Span) { }\n@@ -782,16 +782,9 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n     fn check_assignment(&self,\n                         assignment_id: ast::NodeId,\n                         assignment_span: Span,\n-                        assignee_cmt: mc::cmt<'tcx>,\n-                        mode: euv::MutateMode) {\n+                        assignee_cmt: mc::cmt<'tcx>) {\n         debug!(\"check_assignment(assignee_cmt={:?})\", assignee_cmt);\n \n-        // Initializations never cause borrow errors as they only\n-        // affect a fresh local.\n-        if mode == euv::Init {\n-            return\n-        }\n-\n         // Check that we don't invalidate any outstanding loans\n         if let Some(loan_path) = opt_loan_path(&assignee_cmt) {\n             let scope = region::CodeExtent::from_node_id(assignment_id);\n@@ -801,17 +794,15 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n             });\n         }\n \n-        // Local variables can always be assigned to, expect for reassignments\n-        // of immutable variables (or assignments that invalidate loans,\n-        // of course).\n+        // Check for reassignments to (immutable) local variables. This\n+        // needs to be done here instead of in check_loans because we\n+        // depend on move data.\n         if let mc::cat_local(local_id) = assignee_cmt.cat {\n-            if assignee_cmt.mutbl.is_mutable() {\n-                self.tcx().used_mut_nodes.borrow_mut().insert(local_id);\n-            }\n-\n             let lp = opt_loan_path(&assignee_cmt).unwrap();\n             self.move_data.each_assignment_of(assignment_id, &lp, |assign| {\n-                if !assignee_cmt.mutbl.is_mutable() {\n+                if assignee_cmt.mutbl.is_mutable() {\n+                    self.tcx().used_mut_nodes.borrow_mut().insert(local_id);\n+                } else {\n                     self.bccx.report_reassigned_immutable_variable(\n                         assignment_span,\n                         &*lp,"}, {"sha": "f747f2deec415a28fd8390aaa5ebf521218d4e29", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a18d9842ed94ecca3e7161945bb2f749d98d18ee/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18d9842ed94ecca3e7161945bb2f749d98d18ee/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=a18d9842ed94ecca3e7161945bb2f749d98d18ee", "patch": "@@ -308,7 +308,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n \n         debug!(\"process_method: {}:{}\", id, token::get_name(name));\n \n-        let mut scope_id;\n+        let scope_id;\n         // The qualname for a method is the trait name or name of the struct in an impl in\n         // which the method is declared in, followed by the method's name.\n         let qualname = match self.tcx.impl_of_method(ast_util::local_def(id)) {"}, {"sha": "507bd9de2a11a769488fd3ade4775b15a4bfd7db", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a18d9842ed94ecca3e7161945bb2f749d98d18ee/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18d9842ed94ecca3e7161945bb2f749d98d18ee/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=a18d9842ed94ecca3e7161945bb2f749d98d18ee", "patch": "@@ -598,7 +598,7 @@ impl<'a> StringReader<'a> {\n \n     /// Lex a LIT_INTEGER or a LIT_FLOAT\n     fn scan_number(&mut self, c: char) -> token::Lit {\n-        let mut num_digits;\n+        let num_digits;\n         let mut base = 10;\n         let start_bpos = self.last_pos;\n "}, {"sha": "8165dd0fa29c0ee7049522f2f46969a46d78bf57", "filename": "src/test/compile-fail/lint-unused-mut-variables.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a18d9842ed94ecca3e7161945bb2f749d98d18ee/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18d9842ed94ecca3e7161945bb2f749d98d18ee/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs?ref=a18d9842ed94ecca3e7161945bb2f749d98d18ee", "patch": "@@ -23,6 +23,15 @@ fn main() {\n     let mut b = 3; //~ ERROR: variable does not need to be mutable\n     let mut a = vec!(3); //~ ERROR: variable does not need to be mutable\n     let (mut a, b) = (1, 2); //~ ERROR: variable does not need to be mutable\n+    let mut a; //~ ERROR: variable does not need to be mutable\n+    a = 3;\n+\n+    let mut b; //~ ERROR: variable does not need to be mutable\n+    if true {\n+        b = 3;\n+    } else {\n+        b = 4;\n+    }\n \n     match 30 {\n         mut x => {} //~ ERROR: variable does not need to be mutable"}]}