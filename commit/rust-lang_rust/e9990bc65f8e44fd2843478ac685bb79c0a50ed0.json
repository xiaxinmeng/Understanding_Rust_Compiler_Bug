{"sha": "e9990bc65f8e44fd2843478ac685bb79c0a50ed0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5OTkwYmM2NWY4ZTQ0ZmQyODQzNDc4YWM2ODViYjc5YzBhNTBlZDA=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2020-01-03T03:24:21Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2020-01-03T22:57:24Z"}, "message": "clarify that `Drop` can be implemented for enums and unions too", "tree": {"sha": "d4cbf529170156dc0d51750eba70c51d2a7891b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4cbf529170156dc0d51750eba70c51d2a7891b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9990bc65f8e44fd2843478ac685bb79c0a50ed0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAl4PxtQWHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdPI4B/9HTyWlYaMS7qAVAuoUoM6+0bDk\nsiZzAtAt08Q00qygD+GE5kyvSQEKwONSKskfqk+FgnXuBRJVafGngTCNrCoKFYk5\nfR65EyD8fcsY5TBe1Sv/14+uASxyOlO2rfpzgI9hO3ejJyLGOPgP12ad5KrRUaTq\nfMnq+siOe8VI8Grt19bDynoLQolBA1dfXjanEA0dQB94fld0GF4NkUWsSVCv2sKh\njpzw0DGKgjgnMC5RfXdpUhn2b+UoleVhT20JvbNxJJQwzVel+bVd955uhfbPJZnP\nGrclIguRoZ48mnhXOdegmEBg4VTgqHb2JaIxepsPxVSpJtglrxL51xqa54fA\n=m4L8\n-----END PGP SIGNATURE-----", "payload": "tree d4cbf529170156dc0d51750eba70c51d2a7891b1\nparent e589358210862cdbb34c124bcc95a67afe09135c\nauthor Andy Russell <arussell123@gmail.com> 1578021861 -0500\ncommitter Andy Russell <arussell123@gmail.com> 1578092244 -0500\n\nclarify that `Drop` can be implemented for enums and unions too\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9990bc65f8e44fd2843478ac685bb79c0a50ed0", "html_url": "https://github.com/rust-lang/rust/commit/e9990bc65f8e44fd2843478ac685bb79c0a50ed0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9990bc65f8e44fd2843478ac685bb79c0a50ed0/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e589358210862cdbb34c124bcc95a67afe09135c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e589358210862cdbb34c124bcc95a67afe09135c", "html_url": "https://github.com/rust-lang/rust/commit/e589358210862cdbb34c124bcc95a67afe09135c"}], "stats": {"total": 83, "additions": 41, "deletions": 42}, "files": [{"sha": "7e016cf7e9a95940a893d777016a3d5b65da5d51", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 18, "deletions": 29, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e9990bc65f8e44fd2843478ac685bb79c0a50ed0/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9990bc65f8e44fd2843478ac685bb79c0a50ed0/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=e9990bc65f8e44fd2843478ac685bb79c0a50ed0", "patch": "@@ -13,7 +13,6 @@ use rustc::ty::util::CopyImplementationError;\n use rustc::ty::TypeFoldable;\n use rustc::ty::{self, Ty, TyCtxt};\n \n-use hir::Node;\n use rustc::hir::def_id::DefId;\n use rustc::hir::{self, ItemKind};\n \n@@ -51,35 +50,25 @@ impl<'tcx> Checker<'tcx> {\n }\n \n fn visit_implementation_of_drop(tcx: TyCtxt<'_>, impl_did: DefId) {\n-    if let ty::Adt(..) = tcx.type_of(impl_did).kind {\n-        /* do nothing */\n-    } else {\n-        // Destructors only work on nominal types.\n-        if let Some(impl_hir_id) = tcx.hir().as_local_hir_id(impl_did) {\n-            if let Some(Node::Item(item)) = tcx.hir().find(impl_hir_id) {\n-                let span = match item.kind {\n-                    ItemKind::Impl(.., ref ty, _) => ty.span,\n-                    _ => item.span,\n-                };\n-                struct_span_err!(\n-                    tcx.sess,\n-                    span,\n-                    E0120,\n-                    \"the Drop trait may only be implemented on \\\n-                                  structures\"\n-                )\n-                .span_label(span, \"implementing Drop requires a struct\")\n-                .emit();\n-            } else {\n-                bug!(\"didn't find impl in ast map\");\n-            }\n-        } else {\n-            bug!(\n-                \"found external impl of Drop trait on \\\n-                  something other than a struct\"\n-            );\n-        }\n+    // Destructors only work on nominal types.\n+    if let ty::Adt(..) | ty::Error = tcx.type_of(impl_did).kind {\n+        return;\n     }\n+\n+    let impl_hir_id = tcx.hir().as_local_hir_id(impl_did).expect(\"foreign Drop impl on non-ADT\");\n+    let sp = match tcx.hir().expect_item(impl_hir_id).kind {\n+        ItemKind::Impl(.., ty, _) => ty.span,\n+        _ => bug!(\"expected Drop impl item\"),\n+    };\n+\n+    struct_span_err!(\n+        tcx.sess,\n+        sp,\n+        E0120,\n+        \"the `Drop` trait may only be implemented for structs, enums, and unions\",\n+    )\n+    .span_label(sp, \"must be a struct, enum, or union\")\n+    .emit();\n }\n \n fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: DefId) {"}, {"sha": "ef5e18126dc6860bf7e18a1ce3544d1bc190bd6f", "filename": "src/test/ui/dropck/drop-on-non-struct.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e9990bc65f8e44fd2843478ac685bb79c0a50ed0/src%2Ftest%2Fui%2Fdropck%2Fdrop-on-non-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9990bc65f8e44fd2843478ac685bb79c0a50ed0/src%2Ftest%2Fui%2Fdropck%2Fdrop-on-non-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdrop-on-non-struct.rs?ref=e9990bc65f8e44fd2843478ac685bb79c0a50ed0", "patch": "@@ -1,10 +1,15 @@\n impl<'a> Drop for &'a mut isize {\n-    //~^ ERROR the Drop trait may only be implemented on structures\n+    //~^ ERROR the `Drop` trait may only be implemented for structs, enums, and unions\n     //~^^ ERROR E0117\n     fn drop(&mut self) {\n         println!(\"kaboom\");\n     }\n }\n \n+impl Drop for Nonexistent {\n+    //~^ ERROR cannot find type `Nonexistent`\n+    fn drop(&mut self) { }\n+}\n+\n fn main() {\n }"}, {"sha": "3991c44f2edce620e2d0bcef0002363389506837", "filename": "src/test/ui/dropck/drop-on-non-struct.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e9990bc65f8e44fd2843478ac685bb79c0a50ed0/src%2Ftest%2Fui%2Fdropck%2Fdrop-on-non-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9990bc65f8e44fd2843478ac685bb79c0a50ed0/src%2Ftest%2Fui%2Fdropck%2Fdrop-on-non-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdrop-on-non-struct.stderr?ref=e9990bc65f8e44fd2843478ac685bb79c0a50ed0", "patch": "@@ -1,8 +1,14 @@\n-error[E0120]: the Drop trait may only be implemented on structures\n+error[E0412]: cannot find type `Nonexistent` in this scope\n+  --> $DIR/drop-on-non-struct.rs:9:15\n+   |\n+LL | impl Drop for Nonexistent {\n+   |               ^^^^^^^^^^^ not found in this scope\n+\n+error[E0120]: the `Drop` trait may only be implemented for structs, enums, and unions\n   --> $DIR/drop-on-non-struct.rs:1:19\n    |\n LL | impl<'a> Drop for &'a mut isize {\n-   |                   ^^^^^^^^^^^^^ implementing Drop requires a struct\n+   |                   ^^^^^^^^^^^^^ must be a struct, enum, or union\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/drop-on-non-struct.rs:1:1\n@@ -15,7 +21,7 @@ LL | impl<'a> Drop for &'a mut isize {\n    |\n    = note: define and implement a trait or new type instead\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0117, E0120.\n+Some errors have detailed explanations: E0117, E0120, E0412.\n For more information about an error, try `rustc --explain E0117`."}, {"sha": "dbbac514801f7ba53dead6208c26757679c1c758", "filename": "src/test/ui/error-codes/E0117.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9990bc65f8e44fd2843478ac685bb79c0a50ed0/src%2Ftest%2Fui%2Ferror-codes%2FE0117.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9990bc65f8e44fd2843478ac685bb79c0a50ed0/src%2Ftest%2Fui%2Ferror-codes%2FE0117.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0117.rs?ref=e9990bc65f8e44fd2843478ac685bb79c0a50ed0", "patch": "@@ -1,6 +1,5 @@\n impl Drop for u32 {} //~ ERROR E0117\n-//~| ERROR the Drop trait may only be implemented on structures\n-//~| implementing Drop requires a struct\n+//~| ERROR the `Drop` trait may only be implemented for structs, enums, and unions\n \n fn main() {\n }"}, {"sha": "b48a1d8e50d4de1c665b3a86fdad7f9abf29ef52", "filename": "src/test/ui/error-codes/E0117.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9990bc65f8e44fd2843478ac685bb79c0a50ed0/src%2Ftest%2Fui%2Ferror-codes%2FE0117.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9990bc65f8e44fd2843478ac685bb79c0a50ed0/src%2Ftest%2Fui%2Ferror-codes%2FE0117.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0117.stderr?ref=e9990bc65f8e44fd2843478ac685bb79c0a50ed0", "patch": "@@ -1,8 +1,8 @@\n-error[E0120]: the Drop trait may only be implemented on structures\n+error[E0120]: the `Drop` trait may only be implemented for structs, enums, and unions\n   --> $DIR/E0117.rs:1:15\n    |\n LL | impl Drop for u32 {}\n-   |               ^^^ implementing Drop requires a struct\n+   |               ^^^ must be a struct, enum, or union\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/E0117.rs:1:1"}, {"sha": "6c306455e42545b8bf4c776b3ac9075982c9e2a3", "filename": "src/test/ui/error-codes/E0120.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9990bc65f8e44fd2843478ac685bb79c0a50ed0/src%2Ftest%2Fui%2Ferror-codes%2FE0120.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9990bc65f8e44fd2843478ac685bb79c0a50ed0/src%2Ftest%2Fui%2Ferror-codes%2FE0120.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0120.stderr?ref=e9990bc65f8e44fd2843478ac685bb79c0a50ed0", "patch": "@@ -1,8 +1,8 @@\n-error[E0120]: the Drop trait may only be implemented on structures\n+error[E0120]: the `Drop` trait may only be implemented for structs, enums, and unions\n   --> $DIR/E0120.rs:3:15\n    |\n LL | impl Drop for dyn MyTrait {\n-   |               ^^^^^^^^^^^ implementing Drop requires a struct\n+   |               ^^^^^^^^^^^ must be a struct, enum, or union\n \n error: aborting due to previous error\n "}, {"sha": "d082e0a6b5dc46bf311ca1101bf7d6c88b4773cf", "filename": "src/test/ui/issues/issue-41974.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9990bc65f8e44fd2843478ac685bb79c0a50ed0/src%2Ftest%2Fui%2Fissues%2Fissue-41974.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9990bc65f8e44fd2843478ac685bb79c0a50ed0/src%2Ftest%2Fui%2Fissues%2Fissue-41974.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41974.stderr?ref=e9990bc65f8e44fd2843478ac685bb79c0a50ed0", "patch": "@@ -9,11 +9,11 @@ LL | impl<T> Drop for T where T: A {\n              where T: ?Sized;\n    = note: downstream crates may implement trait `A` for type `std::boxed::Box<_>`\n \n-error[E0120]: the Drop trait may only be implemented on structures\n+error[E0120]: the `Drop` trait may only be implemented for structs, enums, and unions\n   --> $DIR/issue-41974.rs:7:18\n    |\n LL | impl<T> Drop for T where T: A {\n-   |                  ^ implementing Drop requires a struct\n+   |                  ^ must be a struct, enum, or union\n \n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n   --> $DIR/issue-41974.rs:7:6"}]}