{"sha": "0276d7a32e1c83abc3106f7b36b711faf1f74dff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyNzZkN2EzMmUxYzgzYWJjMzEwNmY3YjM2YjcxMWZhZjFmNzRkZmY=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2020-02-09T01:51:13Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2020-02-09T01:51:13Z"}, "message": "Add more tests", "tree": {"sha": "3b9564f0b1e28973168ef17c0e25a1457c63a064", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b9564f0b1e28973168ef17c0e25a1457c63a064"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0276d7a32e1c83abc3106f7b36b711faf1f74dff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0276d7a32e1c83abc3106f7b36b711faf1f74dff", "html_url": "https://github.com/rust-lang/rust/commit/0276d7a32e1c83abc3106f7b36b711faf1f74dff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0276d7a32e1c83abc3106f7b36b711faf1f74dff/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38060567e89bb142e8a060d91bf53f7e82eaaae6", "url": "https://api.github.com/repos/rust-lang/rust/commits/38060567e89bb142e8a060d91bf53f7e82eaaae6", "html_url": "https://github.com/rust-lang/rust/commit/38060567e89bb142e8a060d91bf53f7e82eaaae6"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "0c0a3171ee9a18ae1c4d436f21c1442157a42aa3", "filename": "src/test/ui/inference/infer-binary-operand-behind-reference.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0276d7a32e1c83abc3106f7b36b711faf1f74dff/src%2Ftest%2Fui%2Finference%2Finfer-binary-operand-behind-reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0276d7a32e1c83abc3106f7b36b711faf1f74dff/src%2Ftest%2Fui%2Finference%2Finfer-binary-operand-behind-reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Finfer-binary-operand-behind-reference.rs?ref=0276d7a32e1c83abc3106f7b36b711faf1f74dff", "patch": "@@ -1,6 +1,8 @@\n // check-pass\n \n fn main() {\n+    // Test that we can infer the type of binary operands when\n+    // references are involved, on various types and operators.\n     let _: u8 = 0 + 0;\n     let _: u8 = 0 + &0;\n     let _: u8 = &0 + 0;\n@@ -10,4 +12,19 @@ fn main() {\n     let _: f32 = 0.0 + &0.0;\n     let _: f32 = &0.0 + 0.0;\n     let _: f32 = &0.0 + &0.0;\n+\n+    let _: u8 = 0 << 0;\n+    let _: u8 = 0 << &0;\n+    let _: u8 = &0 << 0;\n+    let _: u8 = &0 << &0;\n+\n+    // Test type inference when variable types are indirectly inferred.\n+    let a = 22;\n+    let _: usize = a + &44;\n+\n+    // When we have no expected type, the types of the operands is the default type.\n+    let _ = 0 + 0;\n+    let _ = 0 + &0;\n+    let _ = &0 + 0;\n+    let _ = &0 + &0;\n }"}]}