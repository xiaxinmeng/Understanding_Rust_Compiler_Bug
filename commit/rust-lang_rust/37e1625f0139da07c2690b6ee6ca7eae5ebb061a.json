{"sha": "37e1625f0139da07c2690b6ee6ca7eae5ebb061a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZTE2MjVmMDEzOWRhMDdjMjY5MGI2ZWU2Y2E3ZWFlNWViYjA2MWE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-01T08:27:31Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-01T08:27:31Z"}, "message": "return expr", "tree": {"sha": "368d3329e120fc5d76a0595110f7519bb084d70f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/368d3329e120fc5d76a0595110f7519bb084d70f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37e1625f0139da07c2690b6ee6ca7eae5ebb061a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37e1625f0139da07c2690b6ee6ca7eae5ebb061a", "html_url": "https://github.com/rust-lang/rust/commit/37e1625f0139da07c2690b6ee6ca7eae5ebb061a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37e1625f0139da07c2690b6ee6ca7eae5ebb061a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53485030dc49aa7cd66e36c8a1e1abf1bf08020c", "url": "https://api.github.com/repos/rust-lang/rust/commits/53485030dc49aa7cd66e36c8a1e1abf1bf08020c", "html_url": "https://github.com/rust-lang/rust/commit/53485030dc49aa7cd66e36c8a1e1abf1bf08020c"}], "stats": {"total": 118, "additions": 100, "deletions": 18}, "files": [{"sha": "8e8a71010204624e5e44a558dafc9019d8c5ee8d", "filename": "src/grammar.ron", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37e1625f0139da07c2690b6ee6ca7eae5ebb061a/src%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/37e1625f0139da07c2690b6ee6ca7eae5ebb061a/src%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar.ron?ref=37e1625f0139da07c2690b6ee6ca7eae5ebb061a", "patch": "@@ -70,6 +70,7 @@ Grammar(\n         \"ref\",\n         \"let\",\n         \"move\",\n+        \"return\",\n     ],\n     contextual_keywords: [\n         \"auto\",\n@@ -138,6 +139,8 @@ Grammar(\n         \"STRUCT_LIT\",\n         \"STRUCT_LIT_FIELD\",\n         \"IF_EXPR\",\n+        \"BLOCK_EXPR\",\n+        \"RETURN_EXPR\",\n \n         \"EXTERN_BLOCK_EXPR\",\n         \"ENUM_VARIANT\",\n@@ -155,7 +158,6 @@ Grammar(\n         \"ABI\",\n         \"NAME\",\n         \"NAME_REF\",\n-        \"BLOCK_EXPR\",\n \n         \"LET_STMT\",\n         \"EXPR_STMT\","}, {"sha": "423e1a95ac0864cb9dcdd6d521b5d4c8a0a9da77", "filename": "src/grammar/expressions.rs", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/37e1625f0139da07c2690b6ee6ca7eae5ebb061a/src%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37e1625f0139da07c2690b6ee6ca7eae5ebb061a/src%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fexpressions.rs?ref=37e1625f0139da07c2690b6ee6ca7eae5ebb061a", "patch": "@@ -13,18 +13,20 @@ use super::*;\n //     let _ = b\"e\";\n //     let _ = br\"f\";\n // }\n+const LITERAL_FIRST: TokenSet =\n+    token_set![TRUE_KW, FALSE_KW, INT_NUMBER, FLOAT_NUMBER, BYTE, CHAR,\n+               STRING, RAW_STRING, BYTE_STRING, RAW_BYTE_STRING];\n+\n pub(super) fn literal(p: &mut Parser) -> Option<CompletedMarker> {\n-    match p.current() {\n-        TRUE_KW | FALSE_KW | INT_NUMBER | FLOAT_NUMBER | BYTE | CHAR | STRING | RAW_STRING\n-        | BYTE_STRING | RAW_BYTE_STRING => {\n-            let m = p.start();\n-            p.bump();\n-            Some(m.complete(p, LITERAL))\n-        }\n-        _ => None,\n+    if !LITERAL_FIRST.contains(p.current()) {\n+        return None;\n     }\n+    let m = p.start();\n+    p.bump();\n+    Some(m.complete(p, LITERAL))\n }\n \n+const EXPR_FIRST: TokenSet = PREFIX_EXPR_FIRST;\n pub(super) fn expr(p: &mut Parser) {\n     let mut lhs = match prefix_expr(p) {\n         Some(lhs) => lhs,\n@@ -80,6 +82,11 @@ fn let_stmt(p: &mut Parser) {\n     m.complete(p, LET_STMT);\n }\n \n+const PREFIX_EXPR_FIRST: TokenSet =\n+    token_set_union![\n+        token_set![AMPERSAND, STAR, EXCL],\n+        ATOM_EXPR_FIRST,\n+    ];\n fn prefix_expr(p: &mut Parser) -> Option<CompletedMarker> {\n     let done = match p.current() {\n         AMPERSAND => ref_expr(p),\n@@ -128,6 +135,11 @@ fn not_expr(p: &mut Parser) -> CompletedMarker {\n     m.complete(p, NOT_EXPR)\n }\n \n+const ATOM_EXPR_FIRST: TokenSet =\n+    token_set_union![\n+        LITERAL_FIRST,\n+        token_set![L_PAREN, PIPE, MOVE_KW, IF_KW, UNSAFE_KW, L_CURLY, RETURN_KW],\n+    ];\n fn atom_expr(p: &mut Parser) -> Option<CompletedMarker> {\n     match literal(p) {\n         Some(m) => return Some(m),\n@@ -144,6 +156,7 @@ fn atom_expr(p: &mut Parser) -> Option<CompletedMarker> {\n         IF_KW => if_expr(p),\n         UNSAFE_KW if la == L_CURLY => block_expr(p),\n         L_CURLY => block_expr(p),\n+        RETURN_KW => return_expr(p),\n         _ => {\n             p.err_and_bump(\"expected expression\");\n             return None;\n@@ -237,6 +250,21 @@ fn block_expr(p: &mut Parser) -> CompletedMarker {\n     m.complete(p, BLOCK_EXPR)\n }\n \n+// test return_expr\n+// fn foo() {\n+//     return;\n+//     return 92;\n+// }\n+fn return_expr(p: &mut Parser) -> CompletedMarker {\n+    assert!(p.at(RETURN_KW));\n+    let m = p.start();\n+    p.bump();\n+    if EXPR_FIRST.contains(p.current()) {\n+        expr(p);\n+    }\n+    m.complete(p, RETURN_EXPR)\n+}\n+\n // test call_expr\n // fn foo() {\n //     let _ = f();"}, {"sha": "d12f773b2ce0734ef2227dcba4d30a2eb6cb1afa", "filename": "src/parser_api.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/37e1625f0139da07c2690b6ee6ca7eae5ebb061a/src%2Fparser_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37e1625f0139da07c2690b6ee6ca7eae5ebb061a/src%2Fparser_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser_api.rs?ref=37e1625f0139da07c2690b6ee6ca7eae5ebb061a", "patch": "@@ -3,29 +3,40 @@ use {\n     SyntaxKind::{self, ERROR},\n };\n \n-pub(crate) struct TokenSet {\n-    pub tokens: &'static [SyntaxKind],\n+#[derive(Clone, Copy)]\n+pub(crate) struct TokenSet(pub(crate) u128);\n+fn mask(kind: SyntaxKind) -> u128 {\n+    1u128 << (kind as usize)\n }\n \n impl TokenSet {\n     pub fn contains(&self, kind: SyntaxKind) -> bool {\n-        self.tokens.contains(&kind)\n+        self.0 & mask(kind) != 0\n     }\n }\n \n #[macro_export]\n macro_rules! token_set {\n     ($($t:ident),*) => {\n-        TokenSet {\n-            tokens: &[$($t),*],\n-        }\n+        TokenSet($(1u128 << ($t as usize))|*)\n     };\n \n     ($($t:ident),* ,) => {\n         token_set!($($t),*)\n     };\n }\n \n+#[macro_export]\n+macro_rules! token_set_union {\n+    ($($ts:expr),*) => {\n+        TokenSet($($ts.0)|*)\n+    };\n+\n+    ($($ts:expr),* ,) => {\n+        token_set_union!($($ts),*)\n+    };\n+}\n+\n /// `Parser` struct provides the low-level API for\n /// navigating through the stream of tokens and\n /// constructing the parse tree. The actual parsing"}, {"sha": "50aa2b580b3bb48eabd835e822aef3192b46f0a6", "filename": "src/syntax_kinds/generated.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/37e1625f0139da07c2690b6ee6ca7eae5ebb061a/src%2Fsyntax_kinds%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37e1625f0139da07c2690b6ee6ca7eae5ebb061a/src%2Fsyntax_kinds%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds%2Fgenerated.rs?ref=37e1625f0139da07c2690b6ee6ca7eae5ebb061a", "patch": "@@ -71,6 +71,7 @@ pub enum SyntaxKind {\n     REF_KW,\n     LET_KW,\n     MOVE_KW,\n+    RETURN_KW,\n     AUTO_KW,\n     DEFAULT_KW,\n     UNION_KW,\n@@ -129,6 +130,8 @@ pub enum SyntaxKind {\n     STRUCT_LIT,\n     STRUCT_LIT_FIELD,\n     IF_EXPR,\n+    BLOCK_EXPR,\n+    RETURN_EXPR,\n     EXTERN_BLOCK_EXPR,\n     ENUM_VARIANT,\n     NAMED_FIELD,\n@@ -145,7 +148,6 @@ pub enum SyntaxKind {\n     ABI,\n     NAME,\n     NAME_REF,\n-    BLOCK_EXPR,\n     LET_STMT,\n     EXPR_STMT,\n     TYPE_PARAM_LIST,\n@@ -202,6 +204,7 @@ impl SyntaxKind {\n             | REF_KW\n             | LET_KW\n             | MOVE_KW\n+            | RETURN_KW\n             | AUTO_KW\n             | DEFAULT_KW\n             | UNION_KW\n@@ -278,6 +281,7 @@ impl SyntaxKind {\n             REF_KW => &SyntaxInfo { name: \"REF_KW\" },\n             LET_KW => &SyntaxInfo { name: \"LET_KW\" },\n             MOVE_KW => &SyntaxInfo { name: \"MOVE_KW\" },\n+            RETURN_KW => &SyntaxInfo { name: \"RETURN_KW\" },\n             AUTO_KW => &SyntaxInfo { name: \"AUTO_KW\" },\n             DEFAULT_KW => &SyntaxInfo { name: \"DEFAULT_KW\" },\n             UNION_KW => &SyntaxInfo { name: \"UNION_KW\" },\n@@ -336,6 +340,8 @@ impl SyntaxKind {\n             STRUCT_LIT => &SyntaxInfo { name: \"STRUCT_LIT\" },\n             STRUCT_LIT_FIELD => &SyntaxInfo { name: \"STRUCT_LIT_FIELD\" },\n             IF_EXPR => &SyntaxInfo { name: \"IF_EXPR\" },\n+            BLOCK_EXPR => &SyntaxInfo { name: \"BLOCK_EXPR\" },\n+            RETURN_EXPR => &SyntaxInfo { name: \"RETURN_EXPR\" },\n             EXTERN_BLOCK_EXPR => &SyntaxInfo { name: \"EXTERN_BLOCK_EXPR\" },\n             ENUM_VARIANT => &SyntaxInfo { name: \"ENUM_VARIANT\" },\n             NAMED_FIELD => &SyntaxInfo { name: \"NAMED_FIELD\" },\n@@ -352,7 +358,6 @@ impl SyntaxKind {\n             ABI => &SyntaxInfo { name: \"ABI\" },\n             NAME => &SyntaxInfo { name: \"NAME\" },\n             NAME_REF => &SyntaxInfo { name: \"NAME_REF\" },\n-            BLOCK_EXPR => &SyntaxInfo { name: \"BLOCK_EXPR\" },\n             LET_STMT => &SyntaxInfo { name: \"LET_STMT\" },\n             EXPR_STMT => &SyntaxInfo { name: \"EXPR_STMT\" },\n             TYPE_PARAM_LIST => &SyntaxInfo { name: \"TYPE_PARAM_LIST\" },\n@@ -403,6 +408,7 @@ impl SyntaxKind {\n             \"ref\" => REF_KW,\n             \"let\" => LET_KW,\n             \"move\" => MOVE_KW,\n+            \"return\" => RETURN_KW,\n             _ => return None,\n         };\n         Some(kw)\n@@ -506,6 +512,7 @@ impl SyntaxKind {\n             REF_KW => \"ref\",\n             LET_KW => \"let\",\n             MOVE_KW => \"move\",\n+            RETURN_KW => \"return\",\n             AUTO_KW => \"auto\",\n             DEFAULT_KW => \"default\",\n             UNION_KW => \"union\","}, {"sha": "e6bf64d4d6155e671140adf9020bb4742e8f8572", "filename": "tests/data/lexer/0011_keywords.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37e1625f0139da07c2690b6ee6ca7eae5ebb061a/tests%2Fdata%2Flexer%2F0011_keywords.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37e1625f0139da07c2690b6ee6ca7eae5ebb061a/tests%2Fdata%2Flexer%2F0011_keywords.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Flexer%2F0011_keywords.rs?ref=37e1625f0139da07c2690b6ee6ca7eae5ebb061a", "patch": "@@ -1,3 +1,3 @@\n fn use struct trait enum impl true false as extern crate\n mod pub self super in where for loop while if match const\n-static mut type ref let else move\n+static mut type ref let else move return"}, {"sha": "d6a1abe8ac613178587cda2f8559a88a96fda032", "filename": "tests/data/lexer/0011_keywords.txt", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37e1625f0139da07c2690b6ee6ca7eae5ebb061a/tests%2Fdata%2Flexer%2F0011_keywords.txt", "raw_url": "https://github.com/rust-lang/rust/raw/37e1625f0139da07c2690b6ee6ca7eae5ebb061a/tests%2Fdata%2Flexer%2F0011_keywords.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Flexer%2F0011_keywords.txt?ref=37e1625f0139da07c2690b6ee6ca7eae5ebb061a", "patch": "@@ -57,4 +57,6 @@ WHITESPACE 1 \" \"\n ELSE_KW 4 \"else\"\n WHITESPACE 1 \" \"\n MOVE_KW 4 \"move\"\n+WHITESPACE 1 \" \"\n+RETURN_KW 6 \"return\"\n WHITESPACE 1 \"\\n\""}, {"sha": "5733666b605fa8a9e48df938fe2bf2b5d5997a1f", "filename": "tests/data/parser/inline/0068_return_expr.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37e1625f0139da07c2690b6ee6ca7eae5ebb061a/tests%2Fdata%2Fparser%2Finline%2F0068_return_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37e1625f0139da07c2690b6ee6ca7eae5ebb061a/tests%2Fdata%2Fparser%2Finline%2F0068_return_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0068_return_expr.rs?ref=37e1625f0139da07c2690b6ee6ca7eae5ebb061a", "patch": "@@ -0,0 +1,4 @@\n+fn foo() {\n+    return;\n+    return 92;\n+}"}, {"sha": "61a075fc1681a3bb9b803b75cf2dceff619009cc", "filename": "tests/data/parser/inline/0068_return_expr.txt", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/37e1625f0139da07c2690b6ee6ca7eae5ebb061a/tests%2Fdata%2Fparser%2Finline%2F0068_return_expr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/37e1625f0139da07c2690b6ee6ca7eae5ebb061a/tests%2Fdata%2Fparser%2Finline%2F0068_return_expr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0068_return_expr.txt?ref=37e1625f0139da07c2690b6ee6ca7eae5ebb061a", "patch": "@@ -0,0 +1,28 @@\n+FILE@[0; 40)\n+  FN_ITEM@[0; 40)\n+    FN_KW@[0; 2)\n+    NAME@[2; 6)\n+      WHITESPACE@[2; 3)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 9)\n+      L_PAREN@[6; 7)\n+      R_PAREN@[7; 8)\n+      WHITESPACE@[8; 9)\n+    BLOCK_EXPR@[9; 40)\n+      L_CURLY@[9; 10)\n+      EXPR_STMT@[10; 27)\n+        RETURN_EXPR@[10; 21)\n+          WHITESPACE@[10; 15)\n+          RETURN_KW@[15; 21)\n+        SEMI@[21; 22)\n+        WHITESPACE@[22; 27)\n+      EXPR_STMT@[27; 38)\n+        RETURN_EXPR@[27; 36)\n+          RETURN_KW@[27; 33)\n+          LITERAL@[33; 36)\n+            WHITESPACE@[33; 34)\n+            INT_NUMBER@[34; 36) \"92\"\n+        SEMI@[36; 37)\n+        WHITESPACE@[37; 38)\n+      R_CURLY@[38; 39)\n+      WHITESPACE@[39; 40)"}]}