{"sha": "40396b463e5096af10a7480ddf1c3ba299b58d5f", "node_id": "C_kwDOAAsO6NoAKDQwMzk2YjQ2M2U1MDk2YWYxMGE3NDgwZGRmMWMzYmEyOTliNThkNWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-16T09:26:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-16T09:26:09Z"}, "message": "Auto merge of #11991 - iDawer:completion_detail.impl_trait, r=iDawer\n\nfix: completion detail shows `{unknown}` for async functions and for RPITs\n\nFix: completion detail shows `{unknown}` for `impl Trait` in return position.\nFix #11438 : completion detail shows `{unknown}` for return types in async functions.\n\n#### API changes\nAdd `hir::Function::async_ret_type` method", "tree": {"sha": "40ffd981d2fc40021b20717d3edb9a05d93042a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40ffd981d2fc40021b20717d3edb9a05d93042a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40396b463e5096af10a7480ddf1c3ba299b58d5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40396b463e5096af10a7480ddf1c3ba299b58d5f", "html_url": "https://github.com/rust-lang/rust/commit/40396b463e5096af10a7480ddf1c3ba299b58d5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40396b463e5096af10a7480ddf1c3ba299b58d5f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66c232d03baadecf5318a77837f0f8b6166c0796", "url": "https://api.github.com/repos/rust-lang/rust/commits/66c232d03baadecf5318a77837f0f8b6166c0796", "html_url": "https://github.com/rust-lang/rust/commit/66c232d03baadecf5318a77837f0f8b6166c0796"}, {"sha": "c53412046f8af55ed462fd4c213d93ed192827b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c53412046f8af55ed462fd4c213d93ed192827b7", "html_url": "https://github.com/rust-lang/rust/commit/c53412046f8af55ed462fd4c213d93ed192827b7"}], "stats": {"total": 83, "additions": 77, "deletions": 6}, "files": [{"sha": "5aa1ca7e0baaf8e2a8a8d1665aa457210ec4c2e0", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/40396b463e5096af10a7480ddf1c3ba299b58d5f/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40396b463e5096af10a7480ddf1c3ba299b58d5f/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=40396b463e5096af10a7480ddf1c3ba299b58d5f", "patch": "@@ -1358,12 +1358,29 @@ impl Function {\n     /// Get this function's return type\n     pub fn ret_type(self, db: &dyn HirDatabase) -> Type {\n         let resolver = self.id.resolver(db.upcast());\n-        let ret_type = &db.function_data(self.id).ret_type;\n-        let ctx = hir_ty::TyLoweringContext::new(db, &resolver);\n-        let ty = ctx.lower_ty(ret_type);\n+        let substs = TyBuilder::placeholder_subst(db, self.id);\n+        let callable_sig = db.callable_item_signature(self.id.into()).substitute(Interner, &substs);\n+        let ty = callable_sig.ret().clone();\n         Type::new_with_resolver_inner(db, &resolver, ty)\n     }\n \n+    pub fn async_ret_type(self, db: &dyn HirDatabase) -> Option<Type> {\n+        if !self.is_async(db) {\n+            return None;\n+        }\n+        let resolver = self.id.resolver(db.upcast());\n+        let substs = TyBuilder::placeholder_subst(db, self.id);\n+        let callable_sig = db.callable_item_signature(self.id.into()).substitute(Interner, &substs);\n+        let ret_ty = callable_sig.ret().clone();\n+        for pred in ret_ty.impl_trait_bounds(db).into_iter().flatten() {\n+            if let WhereClause::AliasEq(output_eq) = pred.into_value_and_skipped_binders().0 {\n+                return Type::new_with_resolver_inner(db, &resolver, output_eq.ty).into();\n+            }\n+        }\n+        never!(\"Async fn ret_type should be impl Future\");\n+        None\n+    }\n+\n     pub fn self_param(self, db: &dyn HirDatabase) -> Option<SelfParam> {\n         if !db.function_data(self.id).has_self_param() {\n             return None;"}, {"sha": "4df7c4177c8653be47baef2b127e4780967e5965", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/40396b463e5096af10a7480ddf1c3ba299b58d5f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40396b463e5096af10a7480ddf1c3ba299b58d5f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=40396b463e5096af10a7480ddf1c3ba299b58d5f", "patch": "@@ -692,7 +692,14 @@ impl FunctionBody {\n                         (constness, expr.clone(), infer_expr_opt(expr))\n                     },\n                     ast::Fn(fn_) => {\n-                        (fn_.const_token().is_some(), fn_.body().map(ast::Expr::BlockExpr), Some(sema.to_def(&fn_)?.ret_type(sema.db)))\n+                        let func = sema.to_def(&fn_)?;\n+                        let mut ret_ty = func.ret_type(sema.db);\n+                        if func.is_async(sema.db) {\n+                            if let Some(async_ret) = func.async_ret_type(sema.db) {\n+                                ret_ty = async_ret;\n+                            }\n+                        }\n+                        (fn_.const_token().is_some(), fn_.body().map(ast::Expr::BlockExpr), Some(ret_ty))\n                     },\n                     ast::Static(statik) => {\n                         (true, statik.body(), Some(sema.to_def(&statik)?.ty(sema.db)))\n@@ -4026,6 +4033,7 @@ fn $0fun_name(n: i32) -> i32 {\n         check_assist(\n             extract_function,\n             r#\"\n+//- minicore: future\n fn main() {\n     $0some_function().await;$0\n }\n@@ -4055,6 +4063,7 @@ async fn some_function() {\n         check_assist(\n             extract_function,\n             r#\"\n+//- minicore: future, result\n async fn foo() -> Result<(), ()> {\n     $0async {}.await;\n     Err(())?$0\n@@ -4065,7 +4074,7 @@ async fn foo() -> Result<(), ()> {\n     fun_name().await?\n }\n \n-async fn $0fun_name() -> _ {\n+async fn $0fun_name() -> Result<(), ()> {\n     async {}.await;\n     Err(())?\n }\n@@ -4078,6 +4087,7 @@ async fn $0fun_name() -> _ {\n         check_assist(\n             extract_function,\n             r#\"\n+//- minicore: future\n async fn foo() -> i32 {\n     loop {\n         let n = 1;$0\n@@ -4119,6 +4129,7 @@ async fn $0fun_name() -> Result<i32, i32> {\n         check_assist(\n             extract_function,\n             r#\"\n+//- minicore: future\n fn main() {\n     $0function_call(\"a\", some_function().await);$0\n }"}, {"sha": "9e5f91db39cc96311309a451f0955736652e6b71", "filename": "crates/ide_completion/src/render/function.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/40396b463e5096af10a7480ddf1c3ba299b58d5f/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40396b463e5096af10a7480ddf1c3ba299b58d5f/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs?ref=40396b463e5096af10a7480ddf1c3ba299b58d5f", "patch": "@@ -228,14 +228,17 @@ fn should_add_parens(ctx: &CompletionContext) -> bool {\n }\n \n fn detail(db: &dyn HirDatabase, func: hir::Function) -> String {\n-    let ret_ty = func.ret_type(db);\n+    let mut ret_ty = func.ret_type(db);\n     let mut detail = String::new();\n \n     if func.is_const(db) {\n         format_to!(detail, \"const \");\n     }\n     if func.is_async(db) {\n         format_to!(detail, \"async \");\n+        if let Some(async_ret) = func.async_ret_type(db) {\n+            ret_ty = async_ret;\n+        }\n     }\n     if func.is_unsafe_to_call(db) {\n         format_to!(detail, \"unsafe \");"}, {"sha": "77296d9099f53496c8de31551498dee1e2f6433b", "filename": "crates/ide_completion/src/tests/expression.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/40396b463e5096af10a7480ddf1c3ba299b58d5f/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40396b463e5096af10a7480ddf1c3ba299b58d5f/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs?ref=40396b463e5096af10a7480ddf1c3ba299b58d5f", "patch": "@@ -602,3 +602,43 @@ fn func() {\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn detail_impl_trait_in_return_position() {\n+    check_empty(\n+        r\"\n+//- minicore: sized\n+trait Trait<T> {}\n+fn foo<U>() -> impl Trait<U> {}\n+fn main() {\n+    self::$0\n+}\n+\",\n+        expect![[r\"\n+            tt Trait\n+            fn main() fn()\n+            fn foo()  fn() -> impl Trait<U>\n+        \"]],\n+    );\n+}\n+\n+#[test]\n+fn detail_async_fn() {\n+    check_empty(\n+        r#\"\n+//- minicore: future, sized\n+trait Trait<T> {}\n+async fn foo() -> u8 {}\n+async fn bar<U>() -> impl Trait<U> {}\n+fn main() {\n+    self::$0\n+}\n+\"#,\n+        expect![[r\"\n+            tt Trait\n+            fn main() fn()\n+            fn bar()  async fn() -> impl Trait<U>\n+            fn foo()  async fn() -> u8\n+        \"]],\n+    );\n+}"}]}