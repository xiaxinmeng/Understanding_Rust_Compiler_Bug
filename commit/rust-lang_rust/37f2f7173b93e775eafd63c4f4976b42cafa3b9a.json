{"sha": "37f2f7173b93e775eafd63c4f4976b42cafa3b9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZjJmNzE3M2I5M2U3NzVlYWZkNjNjNGY0OTc2YjQyY2FmYTNiOWE=", "commit": {"author": {"name": "klutzy", "email": "klutzytheklutzy@gmail.com", "date": "2013-11-11T06:21:51Z"}, "committer": {"name": "klutzy", "email": "klutzytheklutzy@gmail.com", "date": "2013-11-26T05:05:50Z"}, "message": "rustc: Add lint for unknown attributes", "tree": {"sha": "b94aad28c8a0f6efae03fb91f4437526f5343250", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b94aad28c8a0f6efae03fb91f4437526f5343250"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37f2f7173b93e775eafd63c4f4976b42cafa3b9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37f2f7173b93e775eafd63c4f4976b42cafa3b9a", "html_url": "https://github.com/rust-lang/rust/commit/37f2f7173b93e775eafd63c4f4976b42cafa3b9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37f2f7173b93e775eafd63c4f4976b42cafa3b9a/comments", "author": {"login": "klutzy", "id": 1589355, "node_id": "MDQ6VXNlcjE1ODkzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1589355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klutzy", "html_url": "https://github.com/klutzy", "followers_url": "https://api.github.com/users/klutzy/followers", "following_url": "https://api.github.com/users/klutzy/following{/other_user}", "gists_url": "https://api.github.com/users/klutzy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klutzy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klutzy/subscriptions", "organizations_url": "https://api.github.com/users/klutzy/orgs", "repos_url": "https://api.github.com/users/klutzy/repos", "events_url": "https://api.github.com/users/klutzy/events{/privacy}", "received_events_url": "https://api.github.com/users/klutzy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klutzy", "id": 1589355, "node_id": "MDQ6VXNlcjE1ODkzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1589355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klutzy", "html_url": "https://github.com/klutzy", "followers_url": "https://api.github.com/users/klutzy/followers", "following_url": "https://api.github.com/users/klutzy/following{/other_user}", "gists_url": "https://api.github.com/users/klutzy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klutzy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klutzy/subscriptions", "organizations_url": "https://api.github.com/users/klutzy/orgs", "repos_url": "https://api.github.com/users/klutzy/repos", "events_url": "https://api.github.com/users/klutzy/events{/privacy}", "received_events_url": "https://api.github.com/users/klutzy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "365c44cb2d7dc224af68cf870bd263d753a0690c", "url": "https://api.github.com/repos/rust-lang/rust/commits/365c44cb2d7dc224af68cf870bd263d753a0690c", "html_url": "https://github.com/rust-lang/rust/commit/365c44cb2d7dc224af68cf870bd263d753a0690c"}], "stats": {"total": 66, "additions": 57, "deletions": 9}, "files": [{"sha": "03563c596fb355489ce6a196d6602ec14110c6c4", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 57, "deletions": 9, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/37f2f7173b93e775eafd63c4f4976b42cafa3b9a/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f2f7173b93e775eafd63c4f4976b42cafa3b9a/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=37f2f7173b93e775eafd63c4f4976b42cafa3b9a", "patch": "@@ -798,36 +798,65 @@ fn check_heap_item(cx: &Context, it: &ast::item) {\n     }\n }\n \n-// check if crate-level attribute is used on item,\n-// since it is usually caused by mistake of semicolon omission.\n-// also make error on obsolete attributes for less confusion.\n-fn check_item_attribute_usage(cx: &Context, it: &ast::item) {\n-    let crate_attrs = [\"crate_type\", \"link\", \"feature\", \"no_uv\", \"no_main\", \"no_std\"];\n+fn check_attrs_usage(cx: &Context, attrs: &[ast::Attribute]) {\n+    // check if element has crate-level, obsolete, or any unknown attributes.\n+\n+    let crate_attrs = [\n+        \"crate_type\", \"link\", \"feature\", \"no_uv\", \"no_main\", \"no_std\",\n+        \"comment\", \"license\", \"copyright\", // not used in rustc now\n+    ];\n+\n     let obsolete_attrs = [\n         (\"abi\", \"extern \\\"abi\\\" fn\"),\n         (\"auto_encode\", \"#[deriving(Encodable)]\"),\n         (\"auto_decode\", \"#[deriving(Decodable)]\"),\n     ];\n \n-    for attr in it.attrs.iter() {\n+    let other_attrs = [\n+        // item-level\n+        \"address_insignificant\", // can be crate-level too\n+        \"allow\", \"deny\", \"forbid\", \"warn\", // lint options\n+        \"deprecated\", \"experimental\", \"unstable\", \"stable\", \"locked\", \"frozen\", //item stability\n+        \"crate_map\", \"cfg\", \"doc\", \"export_name\", \"link_section\", \"no_freeze\",\n+        \"no_mangle\", \"no_send\", \"static_assert\", \"unsafe_no_drop_flag\",\n+        \"packed\", \"simd\", \"repr\", \"deriving\", \"unsafe_destructor\",\n+\n+        // mod-level\n+        \"path\", \"link_name\", \"link_args\", \"nolink\", \"macro_escape\", \"no_implicit_prelude\",\n+\n+        // fn-level\n+        \"test\", \"bench\", \"should_fail\", \"ignore\", \"inline\", \"lang\", \"main\", \"start\",\n+        \"fixed_stack_segment\", \"no_split_stack\", \"rust_stack\", \"cold\",\n+\n+        // internal attribute: bypass privacy inside items\n+        \"!resolve_unexported\",\n+    ];\n+\n+    for attr in attrs.iter() {\n         let name = attr.node.value.name();\n         for crate_attr in crate_attrs.iter() {\n             if name.equiv(crate_attr) {\n                 let msg = match attr.node.style {\n-                    ast::AttrOuter  => \"crate-level attribute should be an inner attribute: \\\n-                                   add semicolon at end\",\n+                    ast::AttrOuter => \"crate-level attribute should be an inner attribute: \\\n+                                       add semicolon at end\",\n                     ast::AttrInner => \"crate-level attribute should be in the root module\",\n                 };\n                 cx.span_lint(attribute_usage, attr.span, msg);\n+                return;\n             }\n         }\n \n         for &(obs_attr, obs_alter) in obsolete_attrs.iter() {\n             if name.equiv(&obs_attr) {\n                 cx.span_lint(attribute_usage, attr.span,\n                              format!(\"obsolete attribute: use `{:s}` instead\", obs_alter));\n+                return;\n             }\n         }\n+\n+        if !other_attrs.iter().any(|other_attr| { name.equiv(other_attr) }) {\n+            cx.span_lint(attribute_usage, attr.span, \"unknown attribute\");\n+        }\n     }\n }\n \n@@ -1151,7 +1180,7 @@ impl<'self> Visitor<()> for Context<'self> {\n             check_item_non_uppercase_statics(cx, it);\n             check_heap_item(cx, it);\n             check_missing_doc_item(cx, it);\n-            check_item_attribute_usage(cx, it);\n+            check_attrs_usage(cx, it.attrs);\n \n             do cx.visit_ids |v| {\n                 v.visit_item(it, ());\n@@ -1161,6 +1190,20 @@ impl<'self> Visitor<()> for Context<'self> {\n         }\n     }\n \n+    fn visit_foreign_item(&mut self, it: @ast::foreign_item, _: ()) {\n+        do self.with_lint_attrs(it.attrs) |cx| {\n+            check_attrs_usage(cx, it.attrs);\n+            visit::walk_foreign_item(cx, it, ());\n+        }\n+    }\n+\n+    fn visit_view_item(&mut self, i: &ast::view_item, _: ()) {\n+        do self.with_lint_attrs(i.attrs) |cx| {\n+            check_attrs_usage(cx, i.attrs);\n+            visit::walk_view_item(cx, i, ());\n+        }\n+    }\n+\n     fn visit_pat(&mut self, p: &ast::Pat, _: ()) {\n         check_pat_non_uppercase_statics(self, p);\n         check_unused_mut_pat(self, p);\n@@ -1210,6 +1253,7 @@ impl<'self> Visitor<()> for Context<'self> {\n             visit::fk_method(_, _, m) => {\n                 do self.with_lint_attrs(m.attrs) |cx| {\n                     check_missing_doc_method(cx, m);\n+                    check_attrs_usage(cx, m.attrs);\n \n                     do cx.visit_ids |v| {\n                         v.visit_fn(fk, decl, body, span, id, ());\n@@ -1221,9 +1265,11 @@ impl<'self> Visitor<()> for Context<'self> {\n         }\n     }\n \n+\n     fn visit_ty_method(&mut self, t: &ast::TypeMethod, _: ()) {\n         do self.with_lint_attrs(t.attrs) |cx| {\n             check_missing_doc_ty_method(cx, t);\n+            check_attrs_usage(cx, t.attrs);\n \n             visit::walk_ty_method(cx, t, ());\n         }\n@@ -1244,6 +1290,7 @@ impl<'self> Visitor<()> for Context<'self> {\n     fn visit_struct_field(&mut self, s: @ast::struct_field, _: ()) {\n         do self.with_lint_attrs(s.node.attrs) |cx| {\n             check_missing_doc_struct_field(cx, s);\n+            check_attrs_usage(cx, s.node.attrs);\n \n             visit::walk_struct_field(cx, s, ());\n         }\n@@ -1252,6 +1299,7 @@ impl<'self> Visitor<()> for Context<'self> {\n     fn visit_variant(&mut self, v: &ast::variant, g: &ast::Generics, _: ()) {\n         do self.with_lint_attrs(v.node.attrs) |cx| {\n             check_missing_doc_variant(cx, v);\n+            check_attrs_usage(cx, v.node.attrs);\n \n             visit::walk_variant(cx, v, g, ());\n         }"}]}