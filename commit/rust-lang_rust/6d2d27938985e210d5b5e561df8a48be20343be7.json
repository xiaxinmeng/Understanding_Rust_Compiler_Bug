{"sha": "6d2d27938985e210d5b5e561df8a48be20343be7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMmQyNzkzODk4NWUyMTBkNWI1ZTU2MWRmOGE0OGJlMjAzNDNiZTc=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-11-30T20:28:19Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-12-07T21:41:08Z"}, "message": "Working resolve completion imports prototype", "tree": {"sha": "511e624608a4b79c8020d41425ecdaa30186891f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/511e624608a4b79c8020d41425ecdaa30186891f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d2d27938985e210d5b5e561df8a48be20343be7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d2d27938985e210d5b5e561df8a48be20343be7", "html_url": "https://github.com/rust-lang/rust/commit/6d2d27938985e210d5b5e561df8a48be20343be7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d2d27938985e210d5b5e561df8a48be20343be7/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48acd7d455be43960d67632adc9eb176a10a8afe", "url": "https://api.github.com/repos/rust-lang/rust/commits/48acd7d455be43960d67632adc9eb176a10a8afe", "html_url": "https://github.com/rust-lang/rust/commit/48acd7d455be43960d67632adc9eb176a10a8afe"}], "stats": {"total": 124, "additions": 78, "deletions": 46}, "files": [{"sha": "0e59f73cb4beb09b26ba0f0e89e3fd9692658d6a", "filename": "crates/completion/src/item.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6d2d27938985e210d5b5e561df8a48be20343be7/crates%2Fcompletion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2d27938985e210d5b5e561df8a48be20343be7/crates%2Fcompletion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fitem.rs?ref=6d2d27938985e210d5b5e561df8a48be20343be7", "patch": "@@ -257,14 +257,18 @@ impl CompletionItem {\n     pub fn ref_match(&self) -> Option<(Mutability, CompletionScore)> {\n         self.ref_match\n     }\n+\n+    pub fn import_to_add(&self) -> Option<&ImportToAdd> {\n+        self.import_to_add.as_ref()\n+    }\n }\n \n /// An extra import to add after the completion is applied.\n-#[derive(Clone)]\n-pub(crate) struct ImportToAdd {\n-    pub(crate) import_path: ModPath,\n-    pub(crate) import_scope: ImportScope,\n-    pub(crate) merge_behaviour: Option<MergeBehaviour>,\n+#[derive(Debug, Clone)]\n+pub struct ImportToAdd {\n+    pub import_path: ModPath,\n+    pub import_scope: ImportScope,\n+    pub merge_behaviour: Option<MergeBehaviour>,\n }\n \n /// A helper to make `CompletionItem`s."}, {"sha": "28209d4e0a9e479eb61719b300327da5dd56b36a", "filename": "crates/completion/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d2d27938985e210d5b5e561df8a48be20343be7/crates%2Fcompletion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2d27938985e210d5b5e561df8a48be20343be7/crates%2Fcompletion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Flib.rs?ref=6d2d27938985e210d5b5e561df8a48be20343be7", "patch": "@@ -18,7 +18,7 @@ use crate::{completions::Completions, context::CompletionContext, item::Completi\n \n pub use crate::{\n     config::CompletionConfig,\n-    item::{CompletionItem, CompletionItemKind, CompletionScore, InsertTextFormat},\n+    item::{CompletionItem, CompletionItemKind, CompletionScore, ImportToAdd, InsertTextFormat},\n };\n \n //FIXME: split the following feature into fine-grained features."}, {"sha": "7015a512680b6fdb5709b3d08cd18a80797975d2", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d2d27938985e210d5b5e561df8a48be20343be7/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2d27938985e210d5b5e561df8a48be20343be7/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=6d2d27938985e210d5b5e561df8a48be20343be7", "patch": "@@ -80,7 +80,8 @@ pub use crate::{\n     },\n };\n pub use completion::{\n-    CompletionConfig, CompletionItem, CompletionItemKind, CompletionScore, InsertTextFormat,\n+    CompletionConfig, CompletionItem, CompletionItemKind, CompletionScore, ImportToAdd,\n+    InsertTextFormat,\n };\n pub use ide_db::{\n     call_info::CallInfo,"}, {"sha": "d4971f06e3f0fae39daa61fca8fb655c659af231", "filename": "crates/rust-analyzer/src/completions.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d2d27938985e210d5b5e561df8a48be20343be7/crates%2Frust-analyzer%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2d27938985e210d5b5e561df8a48be20343be7/crates%2Frust-analyzer%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcompletions.rs?ref=6d2d27938985e210d5b5e561df8a48be20343be7", "patch": "@@ -0,0 +1,2 @@\n+#[derive(Debug, Default)]\n+pub struct CompletionResolveActions {}"}, {"sha": "dc9e7113be24d5baebda14a2a28c9fb4fd844a51", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d2d27938985e210d5b5e561df8a48be20343be7/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2d27938985e210d5b5e561df8a48be20343be7/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=6d2d27938985e210d5b5e561df8a48be20343be7", "patch": "@@ -7,7 +7,7 @@ use std::{sync::Arc, time::Instant};\n \n use crossbeam_channel::{unbounded, Receiver, Sender};\n use flycheck::FlycheckHandle;\n-use ide::{Analysis, AnalysisHost, Change, FileId};\n+use ide::{Analysis, AnalysisHost, Change, FileId, ImportToAdd};\n use ide_db::base_db::{CrateId, VfsPath};\n use lsp_types::{SemanticTokens, Url};\n use parking_lot::{Mutex, RwLock};\n@@ -69,6 +69,7 @@ pub(crate) struct GlobalState {\n     pub(crate) config: Config,\n     pub(crate) analysis_host: AnalysisHost,\n     pub(crate) diagnostics: DiagnosticCollection,\n+    pub(crate) additional_imports: FxHashMap<String, ImportToAdd>,\n     pub(crate) mem_docs: FxHashMap<VfsPath, DocumentData>,\n     pub(crate) semantic_tokens_cache: Arc<Mutex<FxHashMap<Url, SemanticTokens>>>,\n     pub(crate) vfs: Arc<RwLock<(vfs::Vfs, FxHashMap<FileId, LineEndings>)>>,\n@@ -121,6 +122,7 @@ impl GlobalState {\n             config,\n             analysis_host,\n             diagnostics: Default::default(),\n+            additional_imports: FxHashMap::default(),\n             mem_docs: FxHashMap::default(),\n             semantic_tokens_cache: Arc::new(Default::default()),\n             vfs: Arc::new(RwLock::new((vfs::Vfs::default(), FxHashMap::default()))),"}, {"sha": "853f7fa84441c783068d2de80549dadc4062611b", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 56, "deletions": 7, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/6d2d27938985e210d5b5e561df8a48be20343be7/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2d27938985e210d5b5e561df8a48be20343be7/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=6d2d27938985e210d5b5e561df8a48be20343be7", "patch": "@@ -11,6 +11,7 @@ use ide::{\n     FileId, FilePosition, FileRange, HoverAction, HoverGotoTypeData, NavigationTarget, Query,\n     RangeInfo, Runnable, RunnableKind, SearchScope, TextEdit,\n };\n+use ide_db::helpers::{insert_use, mod_path_to_ast};\n use itertools::Itertools;\n use lsp_server::ErrorCode;\n use lsp_types::{\n@@ -24,6 +25,7 @@ use lsp_types::{\n     SymbolTag, TextDocumentIdentifier, Url, WorkspaceEdit,\n };\n use project_model::TargetKind;\n+use rustc_hash::FxHashMap;\n use serde::{Deserialize, Serialize};\n use serde_json::to_value;\n use stdx::{format_to, split_once};\n@@ -535,10 +537,11 @@ pub(crate) fn handle_runnables(\n }\n \n pub(crate) fn handle_completion(\n-    snap: GlobalStateSnapshot,\n+    global_state: &mut GlobalState,\n     params: lsp_types::CompletionParams,\n ) -> Result<Option<lsp_types::CompletionResponse>> {\n     let _p = profile::span(\"handle_completion\");\n+    let snap = global_state.snapshot();\n     let position = from_proto::file_position(&snap, params.text_document_position)?;\n     let completion_triggered_after_single_colon = {\n         let mut res = false;\n@@ -568,22 +571,68 @@ pub(crate) fn handle_completion(\n     };\n     let line_index = snap.analysis.file_line_index(position.file_id)?;\n     let line_endings = snap.file_line_endings(position.file_id);\n+    let mut additional_imports = FxHashMap::default();\n+\n     let items: Vec<CompletionItem> = items\n         .into_iter()\n-        .flat_map(|item| to_proto::completion_item(&line_index, line_endings, item))\n+        .flat_map(|item| {\n+            let import_to_add = item.import_to_add().cloned();\n+            let new_completion_items = to_proto::completion_item(&line_index, line_endings, item);\n+            if let Some(import_to_add) = import_to_add {\n+                for new_item in &new_completion_items {\n+                    additional_imports.insert(new_item.label.clone(), import_to_add.clone());\n+                }\n+            }\n+            new_completion_items\n+        })\n+        .map(|mut item| {\n+            item.data = Some(position.file_id.0.into());\n+            item\n+        })\n         .collect();\n \n+    global_state.additional_imports = additional_imports;\n+\n     let completion_list = lsp_types::CompletionList { is_incomplete: true, items };\n     Ok(Some(completion_list.into()))\n }\n \n pub(crate) fn handle_resolve_completion(\n-    snap: GlobalStateSnapshot,\n-    original_completion: CompletionItem,\n-) -> Result<CompletionItem> {\n+    global_state: &mut GlobalState,\n+    mut original_completion: lsp_types::CompletionItem,\n+) -> Result<lsp_types::CompletionItem> {\n+    // TODO kb slow, takes over 130ms\n     let _p = profile::span(\"handle_resolve_completion\");\n-    // TODO kb use the field to detect it's for autocompletion and do the insert logic\n-    let _data = dbg!(original_completion).data;\n+\n+    if let Some(import_data) =\n+        global_state.additional_imports.get(dbg!(original_completion.label.as_str()))\n+    {\n+        let rewriter = insert_use::insert_use(\n+            &import_data.import_scope,\n+            mod_path_to_ast(&import_data.import_path),\n+            import_data.merge_behaviour,\n+        );\n+        if let Some((old_ast, file_id)) =\n+            // TODO kb for file_id, better use &str and then cast to u32?\n+            rewriter\n+            .rewrite_root()\n+            .zip(original_completion.data.as_ref().and_then(|value| Some(value.as_u64()? as u32)))\n+        {\n+            let snap = global_state.snapshot();\n+            let mut import_insert = TextEdit::builder();\n+            algo::diff(&old_ast, &rewriter.rewrite(&old_ast)).into_text_edit(&mut import_insert);\n+            let line_index = snap.analysis.file_line_index(FileId(file_id))?;\n+            let line_endings = snap.file_line_endings(FileId(file_id));\n+            let text_edit = import_insert.finish();\n+\n+            let mut new_edits = original_completion.additional_text_edits.unwrap_or_default();\n+            for indel in text_edit {\n+                new_edits.push(to_proto::text_edit(&line_index, line_endings, indel));\n+            }\n+            original_completion.additional_text_edits = Some(new_edits);\n+        }\n+    }\n+\n     Ok(original_completion)\n }\n "}, {"sha": "13f14398f26547bdd50a8266793a1715d737c5fc", "filename": "crates/rust-analyzer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d2d27938985e210d5b5e561df8a48be20343be7/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2d27938985e210d5b5e561df8a48be20343be7/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flib.rs?ref=6d2d27938985e210d5b5e561df8a48be20343be7", "patch": "@@ -36,6 +36,7 @@ mod thread_pool;\n mod document;\n pub mod lsp_ext;\n pub mod config;\n+mod completions;\n \n use ide::AnalysisHost;\n use serde::de::DeserializeOwned;"}, {"sha": "21c58d959e4e6e0a62f6e0f6edb6cf5cc0a5a244", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d2d27938985e210d5b5e561df8a48be20343be7/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2d27938985e210d5b5e561df8a48be20343be7/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=6d2d27938985e210d5b5e561df8a48be20343be7", "patch": "@@ -436,6 +436,10 @@ impl GlobalState {\n                 handlers::handle_matching_brace(s.snapshot(), p)\n             })?\n             .on_sync::<lsp_ext::MemoryUsage>(|s, p| handlers::handle_memory_usage(s, p))?\n+            .on_sync::<lsp_types::request::Completion>(handlers::handle_completion)?\n+            .on_sync::<lsp_types::request::ResolveCompletionItem>(\n+                handlers::handle_resolve_completion,\n+            )?\n             .on::<lsp_ext::AnalyzerStatus>(handlers::handle_analyzer_status)\n             .on::<lsp_ext::SyntaxTree>(handlers::handle_syntax_tree)\n             .on::<lsp_ext::ExpandMacro>(handlers::handle_expand_macro)\n@@ -453,8 +457,6 @@ impl GlobalState {\n             .on::<lsp_types::request::GotoDefinition>(handlers::handle_goto_definition)\n             .on::<lsp_types::request::GotoImplementation>(handlers::handle_goto_implementation)\n             .on::<lsp_types::request::GotoTypeDefinition>(handlers::handle_goto_type_definition)\n-            .on::<lsp_types::request::Completion>(handlers::handle_completion)\n-            .on::<lsp_types::request::ResolveCompletionItem>(handlers::handle_resolve_completion)\n             .on::<lsp_types::request::CodeLensRequest>(handlers::handle_code_lens)\n             .on::<lsp_types::request::CodeLensResolve>(handlers::handle_code_lens_resolve)\n             .on::<lsp_types::request::FoldingRangeRequest>(handlers::handle_folding_range)"}, {"sha": "01eabe8526a561e279a41be34635e1c49ce46f09", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6d2d27938985e210d5b5e561df8a48be20343be7/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2d27938985e210d5b5e561df8a48be20343be7/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=6d2d27938985e210d5b5e561df8a48be20343be7", "patch": "@@ -231,35 +231,6 @@ pub(crate) fn completion_item(\n         None => vec![res],\n     };\n \n-    // TODO kb need to get this logic away and store for the later resolve request\n-    /*\n-    let mut label = self.label;\n-    let mut lookup = self.lookup;\n-    let mut insert_text = self.insert_text;\n-    let mut text_edits = TextEdit::builder();\n-\n-    if let Some((import_path, import_scope, merge_behaviour)) = completion_item.import_data.as_ref() {\n-        let import = mod_path_to_ast(&import_path);\n-            let mut import_path_without_last_segment = import_path;\n-            let _ = import_path_without_last_segment.segments.pop();\n-\n-            if !import_path_without_last_segment.segments.is_empty() {\n-                if lookup.is_none() {\n-                    lookup = Some(label.clone());\n-                }\n-                if insert_text.is_none() {\n-                    insert_text = Some(label.clone());\n-                }\n-                label = format!(\"{}::{}\", import_path_without_last_segment, label);\n-            }\n-\n-            let rewriter = insert_use(&import_scope, import, merge_behaviour);\n-            if let Some(old_ast) = rewriter.rewrite_root() {\n-                algo::diff(&old_ast, &rewriter.rewrite(&old_ast)).into_text_edit(&mut text_edits);\n-            }\n-    }\n-    */\n-\n     for mut r in all_results.iter_mut() {\n         r.insert_text_format = Some(insert_text_format(completion_item.insert_text_format()));\n     }"}]}