{"sha": "8284b4e912baf72473c3696ce9e46cc334da18e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyODRiNGU5MTJiYWY3MjQ3M2MzNjk2Y2U5ZTQ2Y2MzMzRkYTE4ZTQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-05-30T15:43:54Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-03T11:08:51Z"}, "message": "`to_u64` and `to_bytes` are horribly easy to use wrongly.", "tree": {"sha": "9c882fdec81c05b6229c29909eadad64e29f6e72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c882fdec81c05b6229c29909eadad64e29f6e72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8284b4e912baf72473c3696ce9e46cc334da18e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8284b4e912baf72473c3696ce9e46cc334da18e4", "html_url": "https://github.com/rust-lang/rust/commit/8284b4e912baf72473c3696ce9e46cc334da18e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8284b4e912baf72473c3696ce9e46cc334da18e4/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77c8582031ca4084651d2cf365f81f19bbd50fcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/77c8582031ca4084651d2cf365f81f19bbd50fcc", "html_url": "https://github.com/rust-lang/rust/commit/77c8582031ca4084651d2cf365f81f19bbd50fcc"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "72efcd6ede077a27148049d32c4b954433c05a4e", "filename": "src/fn_call.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8284b4e912baf72473c3696ce9e46cc334da18e4/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8284b4e912baf72473c3696ce9e46cc334da18e4/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=8284b4e912baf72473c3696ce9e46cc334da18e4", "patch": "@@ -316,7 +316,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx> for EvalContext<'a, 'mir, '\n \n             \"memrchr\" => {\n                 let ptr = self.into_ptr(args[0].value)?;\n-                let val = self.value_to_scalar(args[1])?.to_u64()? as u8;\n+                let val = self.value_to_scalar(args[1])?.to_bytes()? as u8;\n                 let num = self.value_to_scalar(args[2])?.to_u64()?;\n                 if let Some(idx) = self.memory.read_bytes(ptr, Size::from_bytes(num))?.iter().rev().position(\n                     |&c| c == val,\n@@ -331,7 +331,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx> for EvalContext<'a, 'mir, '\n \n             \"memchr\" => {\n                 let ptr = self.into_ptr(args[0].value)?;\n-                let val = self.value_to_scalar(args[1])?.to_u64()? as u8;\n+                let val = self.value_to_scalar(args[1])?.to_bytes()? as u8;\n                 let num = self.value_to_scalar(args[2])?.to_u64()?;\n                 if let Some(idx) = self.memory.read_bytes(ptr, Size::from_bytes(num))?.iter().position(\n                     |&c| c == val,\n@@ -414,9 +414,9 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx> for EvalContext<'a, 'mir, '\n             }\n \n             \"write\" => {\n-                let fd = self.value_to_scalar(args[0])?.to_u64()?;\n+                let fd = self.value_to_scalar(args[0])?.to_bytes()?;\n                 let buf = self.into_ptr(args[1].value)?;\n-                let n = self.value_to_scalar(args[2])?.to_u64()?;\n+                let n = self.value_to_scalar(args[2])?.to_bytes()? as u64;\n                 trace!(\"Called write({:?}, {:?}, {:?})\", fd, buf, n);\n                 let result = if fd == 1 || fd == 2 {\n                     // stdout/stderr"}, {"sha": "550965573cb47112ec1dd9f2cb5262f11ef0c8d0", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8284b4e912baf72473c3696ce9e46cc334da18e4/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8284b4e912baf72473c3696ce9e46cc334da18e4/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=8284b4e912baf72473c3696ce9e46cc334da18e4", "patch": "@@ -64,6 +64,9 @@ pub trait ScalarExt {\n     fn from_f64(f: f64) -> Self;\n     fn to_u64(self) -> EvalResult<'static, u64>;\n     fn is_null(self) -> EvalResult<'static, bool>;\n+    /// HACK: this function just extracts all bits if `defined != 0`\n+    /// Mainly used for args of C-functions and we should totally correctly fetch the size\n+    /// of their arguments\n     fn to_bytes(self) -> EvalResult<'static, u128>;\n }\n "}]}