{"sha": "e17c17a1af4cd7dee069088c7ae682480179e810", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxN2MxN2ExYWY0Y2Q3ZGVlMDY5MDg4YzdhZTY4MjQ4MDE3OWU4MTA=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-07-05T14:00:35Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-07-17T13:35:59Z"}, "message": "Make Arguments::as_str() work for empty format strings.", "tree": {"sha": "5458b92ca30d2ce4d34f9318df1f7536f1715954", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5458b92ca30d2ce4d34f9318df1f7536f1715954"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e17c17a1af4cd7dee069088c7ae682480179e810", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e17c17a1af4cd7dee069088c7ae682480179e810", "html_url": "https://github.com/rust-lang/rust/commit/e17c17a1af4cd7dee069088c7ae682480179e810", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e17c17a1af4cd7dee069088c7ae682480179e810/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc4e33e6c1250a51fb1b57af085a0dc89853eb17", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc4e33e6c1250a51fb1b57af085a0dc89853eb17", "html_url": "https://github.com/rust-lang/rust/commit/bc4e33e6c1250a51fb1b57af085a0dc89853eb17"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "d16f8b5ac9a29e4e164cbabad5da777117071130", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e17c17a1af4cd7dee069088c7ae682480179e810/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17c17a1af4cd7dee069088c7ae682480179e810/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=e17c17a1af4cd7dee069088c7ae682480179e810", "patch": "@@ -436,12 +436,17 @@ impl<'a> Arguments<'a> {\n     /// #![feature(fmt_as_str)]\n     ///\n     /// assert_eq!(format_args!(\"hello\").as_str(), Some(\"hello\"));\n+    /// assert_eq!(format_args!(\"\").as_str(), Some(\"\"));\n     /// assert_eq!(format_args!(\"{}\", 1).as_str(), None);\n     /// ```\n     #[unstable(feature = \"fmt_as_str\", issue = \"none\")]\n     #[inline]\n     pub fn as_str(&self) -> Option<&'a str> {\n-        if self.args.is_empty() && self.pieces.len() == 1 { Some(self.pieces[0]) } else { None }\n+        match (self.pieces, self.args) {\n+            ([], []) => Some(\"\"),\n+            ([s], []) => Some(s),\n+            _ => None,\n+        }\n     }\n }\n "}]}