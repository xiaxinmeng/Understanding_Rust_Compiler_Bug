{"sha": "165690b7db9183945230d43f73c2042a34ed09cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2NTY5MGI3ZGI5MTgzOTQ1MjMwZDQzZjczYzIwNDJhMzRlZDA5Y2Y=", "commit": {"author": {"name": "iirelu", "email": "anna@bawk.space", "date": "2018-09-19T16:08:22Z"}, "committer": {"name": "iirelu", "email": "anna@bawk.space", "date": "2018-09-19T16:08:22Z"}, "message": "Rework `let` keyword docs\n\nIt didn't strictly need to be reworked and I'm not sure my version is\nbetter, but oh well, I'm doing it for consistency.", "tree": {"sha": "e5d73abe61895ebe13759d960819afa9d14f7027", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5d73abe61895ebe13759d960819afa9d14f7027"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/165690b7db9183945230d43f73c2042a34ed09cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/165690b7db9183945230d43f73c2042a34ed09cf", "html_url": "https://github.com/rust-lang/rust/commit/165690b7db9183945230d43f73c2042a34ed09cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/165690b7db9183945230d43f73c2042a34ed09cf/comments", "author": {"login": "iirelu", "id": 3432543, "node_id": "MDQ6VXNlcjM0MzI1NDM=", "avatar_url": "https://avatars.githubusercontent.com/u/3432543?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iirelu", "html_url": "https://github.com/iirelu", "followers_url": "https://api.github.com/users/iirelu/followers", "following_url": "https://api.github.com/users/iirelu/following{/other_user}", "gists_url": "https://api.github.com/users/iirelu/gists{/gist_id}", "starred_url": "https://api.github.com/users/iirelu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iirelu/subscriptions", "organizations_url": "https://api.github.com/users/iirelu/orgs", "repos_url": "https://api.github.com/users/iirelu/repos", "events_url": "https://api.github.com/users/iirelu/events{/privacy}", "received_events_url": "https://api.github.com/users/iirelu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iirelu", "id": 3432543, "node_id": "MDQ6VXNlcjM0MzI1NDM=", "avatar_url": "https://avatars.githubusercontent.com/u/3432543?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iirelu", "html_url": "https://github.com/iirelu", "followers_url": "https://api.github.com/users/iirelu/followers", "following_url": "https://api.github.com/users/iirelu/following{/other_user}", "gists_url": "https://api.github.com/users/iirelu/gists{/gist_id}", "starred_url": "https://api.github.com/users/iirelu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iirelu/subscriptions", "organizations_url": "https://api.github.com/users/iirelu/orgs", "repos_url": "https://api.github.com/users/iirelu/repos", "events_url": "https://api.github.com/users/iirelu/events{/privacy}", "received_events_url": "https://api.github.com/users/iirelu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "738e58d57e0911a02c076f2b6064a7f471ecb0c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/738e58d57e0911a02c076f2b6064a7f471ecb0c1", "html_url": "https://github.com/rust-lang/rust/commit/738e58d57e0911a02c076f2b6064a7f471ecb0c1"}], "stats": {"total": 62, "additions": 48, "deletions": 14}, "files": [{"sha": "d2a22334a954ce60697fc6de8855e5248a79a5b8", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 48, "deletions": 14, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/165690b7db9183945230d43f73c2042a34ed09cf/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/165690b7db9183945230d43f73c2042a34ed09cf/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=165690b7db9183945230d43f73c2042a34ed09cf", "patch": "@@ -514,32 +514,66 @@ mod impl_keyword { }\n \n #[doc(keyword = \"let\")]\n //\n-/// The `let` keyword.\n+/// The variable binding keyword.\n ///\n-/// The `let` keyword is used to declare a variable.\n-///\n-/// Example:\n+/// The primary use for the `let` keyword is in `let` statements, which are used to introduce a new\n+/// set of variables into the current scope, as given by a pattern.\n ///\n /// ```rust\n /// # #![allow(unused_assignments)]\n-/// let x = 3; // We create a variable named `x` with the value `3`.\n+/// let thing1: i32 = 100;\n+/// let thing2 = 200 + thing1;\n+///\n+/// let mut changing_thing = true;\n+/// changing_thing = false;\n+///\n+/// let (part1, part2) = (\"first\", \"second\");\n+///\n+/// struct Example {\n+///     a: bool,\n+///     b: u64,\n+/// }\n+///\n+/// let Example { a, b: _ } = Example {\n+///     a: true,\n+///     b: 10004,\n+/// };\n+/// assert!(a);\n /// ```\n ///\n-/// By default, all variables are **not** mutable. If you want a mutable variable,\n-/// you'll have to use the `mut` keyword.\n+/// The pattern is most commonly a single variable, which means no pattern matching is done and\n+/// the expression given is bound to the variable. Apart from that, patterns used in `let` bindings\n+/// can be as complicated as needed, given that the pattern is exhaustive. See the [Rust\n+/// book][book1] for more information on pattern matching. The type of the pattern is optionally\n+/// given afterwards, but if left blank is automatically inferred by the compiler if possible.\n ///\n-/// Example:\n+/// Variables in Rust are immutable by default, and require the [`mut`] keyword to be made mutable.\n ///\n-/// ```rust\n-/// # #![allow(unused_assignments)]\n-/// let mut x = 3; // We create a mutable variable named `x` with the value `3`.\n+/// Multiple variables can be defined with the same name, known as shadowing. This doesn't affect\n+/// the original variable in any way beyond being unable to directly access it beyond the point of\n+/// shadowing. It continues to remain in scope, getting dropped only when it falls out of scope.\n+/// Shadowed variables don't need to have the same type as the variables shadowing them.\n ///\n-/// x += 4; // `x` is now equal to `7`.\n+/// ```rust\n+/// let shadowing_example = true;\n+/// let shadowing_example = 123.4;\n+/// let shadowing_example = shadowing_example as u32;\n+/// let mut shadowing_example = format!(\"cool! {}\", shadowing_example);\n+/// shadowing_example += \" something else!\"; // not shadowing\n /// ```\n ///\n-/// For more information about the `let` keyword, take a look at the [Rust Book][book].\n+/// Other places the `let` keyword is used include along with [`if`], in the form of `if let`\n+/// expressions. They're useful if the pattern being matched isn't exhaustive, such as with\n+/// enumerations.\n+///\n+/// For more information on the `let` keyword, see the [Rust book] or the [Reference]\n ///\n-/// [book]: https://doc.rust-lang.org/book/second-edition/ch03-01-variables-and-mutability.html\n+/// [book1]: https://doc.rust-lang.org/stable/book/2018-edition/ch06-02-match.html\n+/// [`mut`]: keyword.mut.html\n+/// [`if`]: keyword.if.html\n+/// [book2]:\n+/// https://doc.rust-lang.org/stable/book/2018-edition/ch18-01-all-the-places-for-patterns.html#let-statements\n+/// [Reference]: https://doc.rust-lang.org/reference/statements.html#let-statements\n mod let_keyword { }\n \n #[doc(keyword = \"struct\")]"}]}