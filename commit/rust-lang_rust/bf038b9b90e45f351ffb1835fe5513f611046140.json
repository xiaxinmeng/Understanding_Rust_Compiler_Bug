{"sha": "bf038b9b90e45f351ffb1835fe5513f611046140", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmMDM4YjliOTBlNDVmMzUxZmZiMTgzNWZlNTUxM2Y2MTEwNDYxNDA=", "commit": {"author": {"name": "Jesse Ruderman", "email": "jruderman@gmail.com", "date": "2012-01-07T06:06:32Z"}, "committer": {"name": "Jesse Ruderman", "email": "jruderman@gmail.com", "date": "2012-01-07T06:06:32Z"}, "message": "Get these files compiling again", "tree": {"sha": "06dec37a288f9cb37f418259fe5a61b61b2dcc29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06dec37a288f9cb37f418259fe5a61b61b2dcc29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf038b9b90e45f351ffb1835fe5513f611046140", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf038b9b90e45f351ffb1835fe5513f611046140", "html_url": "https://github.com/rust-lang/rust/commit/bf038b9b90e45f351ffb1835fe5513f611046140", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf038b9b90e45f351ffb1835fe5513f611046140/comments", "author": {"login": "jruderman", "id": 692547, "node_id": "MDQ6VXNlcjY5MjU0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/692547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jruderman", "html_url": "https://github.com/jruderman", "followers_url": "https://api.github.com/users/jruderman/followers", "following_url": "https://api.github.com/users/jruderman/following{/other_user}", "gists_url": "https://api.github.com/users/jruderman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jruderman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jruderman/subscriptions", "organizations_url": "https://api.github.com/users/jruderman/orgs", "repos_url": "https://api.github.com/users/jruderman/repos", "events_url": "https://api.github.com/users/jruderman/events{/privacy}", "received_events_url": "https://api.github.com/users/jruderman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jruderman", "id": 692547, "node_id": "MDQ6VXNlcjY5MjU0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/692547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jruderman", "html_url": "https://github.com/jruderman", "followers_url": "https://api.github.com/users/jruderman/followers", "following_url": "https://api.github.com/users/jruderman/following{/other_user}", "gists_url": "https://api.github.com/users/jruderman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jruderman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jruderman/subscriptions", "organizations_url": "https://api.github.com/users/jruderman/orgs", "repos_url": "https://api.github.com/users/jruderman/repos", "events_url": "https://api.github.com/users/jruderman/events{/privacy}", "received_events_url": "https://api.github.com/users/jruderman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "373dbe7741034d22e1f7875e06c72825084f6944", "url": "https://api.github.com/repos/rust-lang/rust/commits/373dbe7741034d22e1f7875e06c72825084f6944", "html_url": "https://github.com/rust-lang/rust/commit/373dbe7741034d22e1f7875e06c72825084f6944"}], "stats": {"total": 50, "additions": 26, "deletions": 24}, "files": [{"sha": "be719017dd6f8cd675054aa555b8d62422c66609", "filename": "src/fuzzer/ast_match.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bf038b9b90e45f351ffb1835fe5513f611046140/src%2Ffuzzer%2Fast_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf038b9b90e45f351ffb1835fe5513f611046140/src%2Ffuzzer%2Fast_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Fast_match.rs?ref=bf038b9b90e45f351ffb1835fe5513f611046140", "patch": "@@ -1,7 +1,7 @@\n use std;\n import vec;\n \n-fn vec_equal<T>(v: [T], u: [T], element_equality_test: fn(T, T) -> bool) ->\n+fn vec_equal<T>(v: [T], u: [T], element_equality_test: fn@(&&T, &&T) -> bool) ->\n    bool {\n     let Lv = vec::len(v);\n     if Lv != vec::len(u) { ret false; }\n@@ -13,15 +13,17 @@ fn vec_equal<T>(v: [T], u: [T], element_equality_test: fn(T, T) -> bool) ->\n     ret true;\n }\n \n-fn builtin_equal<T>(a: T, b: T) -> bool { ret a == b; }\n+pure fn builtin_equal<T>(&&a: T, &&b: T) -> bool { ret a == b; }\n+pure fn builtin_equal_int(&&a: int, &&b: int) -> bool { ret a == b; }\n \n fn main() {\n     assert (builtin_equal(5, 5));\n     assert (!builtin_equal(5, 4));\n-    assert (!vec_equal([5, 5], [5], builtin_equal));\n-    assert (!vec_equal([5, 5], [5, 4], builtin_equal));\n-    assert (!vec_equal([5, 5], [4, 5], builtin_equal));\n-    assert (vec_equal([5, 5], [5, 5], builtin_equal));\n+    assert (!vec_equal([5, 5], [5], bind builtin_equal(_, _)));\n+    assert (!vec_equal([5, 5], [5], builtin_equal_int));\n+    assert (!vec_equal([5, 5], [5, 4], builtin_equal_int));\n+    assert (!vec_equal([5, 5], [4, 5], builtin_equal_int));\n+    assert (vec_equal([5, 5], [5, 5], builtin_equal_int));\n \n     #error(\"Pass\");\n }"}, {"sha": "4f2bab7f52ff33e328c3eb519ae06bab8ec5a55d", "filename": "src/fuzzer/cycles.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bf038b9b90e45f351ffb1835fe5513f611046140/src%2Ffuzzer%2Fcycles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf038b9b90e45f351ffb1835fe5513f611046140/src%2Ffuzzer%2Fcycles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Fcycles.rs?ref=bf038b9b90e45f351ffb1835fe5513f611046140", "patch": "@@ -7,7 +7,7 @@ import option;\n fn under(r : rand::rng, n : uint) -> uint { assert n != 0u; r.next() as uint % n }\n \n // random choice from a vec\n-fn choice<T>(r : rand::rng, v : [T]) -> T { assert vec::len(v) != 0u; v[under(r, vec::len(v))] }\n+fn choice<T: copy>(r : rand::rng, v : [T]) -> T { assert vec::len(v) != 0u; v[under(r, vec::len(v))] }\n \n // 1 in n chance of being true\n fn unlikely(r : rand::rng, n : uint) -> bool { under(r, n) == 0u }\n@@ -20,7 +20,7 @@ tag maybe_pointy {\n type pointy = {\n   mutable x : maybe_pointy,\n   mutable y : maybe_pointy,\n-  mutable z : fn()->()\n+  mutable z : fn@()->()\n };\n \n fn allunder(n: uint, it: block(uint)) {\n@@ -36,8 +36,8 @@ fn test_cycles(r : rand::rng)\n     const max : uint = 10u;\n \n     let v : [mutable @pointy] = [mutable];\n-    allunder(max) {|i|\n-        v += [mutable @{ mutable x : no_pointy, mutable y : no_pointy, mutable z: nop }];\n+    allunder(max) {|_i|\n+        v += [mutable @{ mutable x : no_pointy, mutable y : no_pointy, mutable z: bind nop() }];\n     }\n \n     allunder(max) {|i|\n@@ -48,7 +48,7 @@ fn test_cycles(r : rand::rng)\n \n     // Drop refs one at a time\n     allunder(max) {|i|\n-        v[i] = @{ mutable x : no_pointy, mutable y : no_pointy, mutable z: nop };\n+        v[i] = @{ mutable x : no_pointy, mutable y : no_pointy, mutable z: bind nop() };\n     }\n }\n "}, {"sha": "4555b7327a5ad2fcff52d9aa2a999a58a21187e6", "filename": "src/fuzzer/ivec_fuzz.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bf038b9b90e45f351ffb1835fe5513f611046140/src%2Ffuzzer%2Fivec_fuzz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf038b9b90e45f351ffb1835fe5513f611046140/src%2Ffuzzer%2Fivec_fuzz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Fivec_fuzz.rs?ref=bf038b9b90e45f351ffb1835fe5513f611046140", "patch": "@@ -22,22 +22,22 @@ import vec::slice;\n import vec::len;\n import int;\n \n-fn vec_omit<T>(v: [T], i: uint) -> [T] {\n+fn vec_omit<T: copy>(v: [T], i: uint) -> [T] {\n     slice(v, 0u, i) + slice(v, i + 1u, len(v))\n }\n-fn vec_dup<T>(v: [T], i: uint) -> [T] {\n+fn vec_dup<T: copy>(v: [T], i: uint) -> [T] {\n     slice(v, 0u, i) + [v[i]] + slice(v, i, len(v))\n }\n-fn vec_swadj<T>(v: [T], i: uint) -> [T] {\n+fn vec_swadj<T: copy>(v: [T], i: uint) -> [T] {\n     slice(v, 0u, i) + [v[i + 1u], v[i]] + slice(v, i + 2u, len(v))\n }\n-fn vec_prefix<T>(v: [T], i: uint) -> [T] { slice(v, 0u, i) }\n-fn vec_suffix<T>(v: [T], i: uint) -> [T] { slice(v, i, len(v)) }\n+fn vec_prefix<T: copy>(v: [T], i: uint) -> [T] { slice(v, 0u, i) }\n+fn vec_suffix<T: copy>(v: [T], i: uint) -> [T] { slice(v, i, len(v)) }\n \n-fn vec_poke<T>(v: [T], i: uint, x: T) -> [T] {\n+fn vec_poke<T: copy>(v: [T], i: uint, x: T) -> [T] {\n     slice(v, 0u, i) + [x] + slice(v, i + 1u, len(v))\n }\n-fn vec_insert<T>(v: [T], i: uint, x: T) -> [T] {\n+fn vec_insert<T: copy>(v: [T], i: uint, x: T) -> [T] {\n     slice(v, 0u, i) + [x] + slice(v, i, len(v))\n }\n \n@@ -48,7 +48,7 @@ fn ix(skip_low: uint, skip_high: uint, length: uint, it: block(uint)) {\n }\n \n // Returns a bunch of modified versions of v, some of which introduce new elements (borrowed from xs).\n-fn vec_edits<T>(v: [T], xs: [T]) -> [[T]] {\n+fn vec_edits<T: copy>(v: [T], xs: [T]) -> [[T]] {\n     let edits: [[T]] = [];\n     let Lv: uint = len(v);\n "}, {"sha": "94ae63bec0741be649a5487c0de47bf82b625aae", "filename": "src/fuzzer/rand_util.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bf038b9b90e45f351ffb1835fe5513f611046140/src%2Ffuzzer%2Frand_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf038b9b90e45f351ffb1835fe5513f611046140/src%2Ffuzzer%2Frand_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Frand_util.rs?ref=bf038b9b90e45f351ffb1835fe5513f611046140", "patch": "@@ -6,7 +6,7 @@ import vec;\n fn under(r : rand::rng, n : uint) -> uint { assert n != 0u; r.next() as uint % n }\n \n // random choice from a vec\n-fn choice<T>(r : rand::rng, v : [T]) -> T { assert vec::len(v) != 0u; v[under(r, vec::len(v))] }\n+fn choice<T: copy>(r : rand::rng, v : [T]) -> T { assert vec::len(v) != 0u; v[under(r, vec::len(v))] }\n \n // 1 in n chance of being true\n fn unlikely(r : rand::rng, n : uint) -> bool { under(r, n) == 0u }\n@@ -22,7 +22,7 @@ fn shuffle<T>(r : rand::rng, &v : [mutable T]) {\n }\n \n // create a shuffled copy of a vec\n-fn shuffled<T>(r : rand::rng, v : [T]) -> [T] {\n+fn shuffled<T: copy>(r : rand::rng, v : [T]) -> [T] {\n     let w = vec::to_mut(v);\n     shuffle(r, w);\n     vec::from_mut(w) // Shouldn't this happen automatically?\n@@ -35,7 +35,7 @@ fn shuffled<T>(r : rand::rng, v : [T]) -> [T] {\n // * weighted_choice is O(number of choices) time\n // * weighted_vec is O(total weight) space\n type weighted<T> = { weight: uint, item: T };\n-fn weighted_choice<T>(r : rand::rng, v : [weighted<T>]) -> T {\n+fn weighted_choice<T: copy>(r : rand::rng, v : [weighted<T>]) -> T {\n     assert vec::len(v) != 0u;\n     let total = 0u;\n     for {weight: weight, item: _} in v {\n@@ -53,7 +53,7 @@ fn weighted_choice<T>(r : rand::rng, v : [weighted<T>]) -> T {\n     std::util::unreachable();\n }\n \n-fn weighted_vec<T>(v : [weighted<T>]) -> [T] {\n+fn weighted_vec<T: copy>(v : [weighted<T>]) -> [T] {\n     let r = [];\n     for {weight: weight, item: item} in v {\n         let i = 0u;\n@@ -87,7 +87,7 @@ fn main()\n \n     while i < 1000u {\n         log(error, \"Immed: \" + weighted_choice(r, v));\n-        log(error, \"Fast: \" + choice(r, w));\n+        log(error, \"Fast:  \" + choice(r, w));\n         i += 1u;\n     }\n }"}]}