{"sha": "66151d02f54300bb6f4c326728d6a2d875cdc80a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2MTUxZDAyZjU0MzAwYmI2ZjRjMzI2NzI4ZDZhMmQ4NzVjZGM4MGE=", "commit": {"author": {"name": "Jyun-Yan You", "email": "jyyou@cs.nctu.edu.tw", "date": "2012-10-14T16:19:54Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-17T19:03:18Z"}, "message": "remove duplicate visibility and fix indentation", "tree": {"sha": "5bfd249556428058e15c8b3f4153fa6940be79e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bfd249556428058e15c8b3f4153fa6940be79e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66151d02f54300bb6f4c326728d6a2d875cdc80a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66151d02f54300bb6f4c326728d6a2d875cdc80a", "html_url": "https://github.com/rust-lang/rust/commit/66151d02f54300bb6f4c326728d6a2d875cdc80a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66151d02f54300bb6f4c326728d6a2d875cdc80a/comments", "author": {"login": "crabtw", "id": 36015, "node_id": "MDQ6VXNlcjM2MDE1", "avatar_url": "https://avatars.githubusercontent.com/u/36015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crabtw", "html_url": "https://github.com/crabtw", "followers_url": "https://api.github.com/users/crabtw/followers", "following_url": "https://api.github.com/users/crabtw/following{/other_user}", "gists_url": "https://api.github.com/users/crabtw/gists{/gist_id}", "starred_url": "https://api.github.com/users/crabtw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crabtw/subscriptions", "organizations_url": "https://api.github.com/users/crabtw/orgs", "repos_url": "https://api.github.com/users/crabtw/repos", "events_url": "https://api.github.com/users/crabtw/events{/privacy}", "received_events_url": "https://api.github.com/users/crabtw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca5506a5dee75eb3ee84eff1f0fa5f5e40f54544", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca5506a5dee75eb3ee84eff1f0fa5f5e40f54544", "html_url": "https://github.com/rust-lang/rust/commit/ca5506a5dee75eb3ee84eff1f0fa5f5e40f54544"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "9668c161ce3d2d46ff34e69fc34ae50308564ead", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/66151d02f54300bb6f4c326728d6a2d875cdc80a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66151d02f54300bb6f4c326728d6a2d875cdc80a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=66151d02f54300bb6f4c326728d6a2d875cdc80a", "patch": "@@ -444,7 +444,6 @@ fn print_item(s: ps, &&item: @ast::item) {\n     print_outer_attributes(s, item.attrs);\n     let ann_node = node_item(s, item);\n     s.ann.pre(ann_node);\n-    print_visibility(s, item.vis);\n     match item.node {\n       ast::item_const(ty, expr) => {\n         head(s, visibility_qualified(item.vis, ~\"const\"));\n@@ -480,18 +479,18 @@ fn print_item(s: ps, &&item: @ast::item) {\n             ast::named => {\n                 word_nbsp(s, ~\"mod\");\n                 print_ident(s, item.ident);\n+                nbsp(s);\n             }\n             ast::anonymous => {}\n         }\n-        nbsp(s);\n         bopen(s);\n         print_foreign_mod(s, nmod, item.attrs);\n         bclose(s, item.span);\n       }\n       ast::item_ty(ty, params) => {\n         ibox(s, indent_unit);\n         ibox(s, 0u);\n-        word_nbsp(s, ~\"type\");\n+        word_nbsp(s, visibility_qualified(item.vis, ~\"type\"));\n         print_ident(s, item.ident);\n         print_type_params(s, params);\n         end(s); // end the inner ibox\n@@ -503,15 +502,15 @@ fn print_item(s: ps, &&item: @ast::item) {\n         end(s); // end the outer ibox\n       }\n       ast::item_enum(enum_definition, params) => {\n-        print_enum_def(s, enum_definition, params, item.ident, item.span);\n+        print_enum_def(s, enum_definition, params, item.ident, item.span, item.vis);\n       }\n       ast::item_class(struct_def, tps) => {\n-          head(s, ~\"struct\");\n+          head(s, visibility_qualified(item.vis, ~\"struct\"));\n           print_struct(s, struct_def, tps, item.ident, item.span);\n       }\n \n       ast::item_impl(tps, opt_trait, ty, methods) => {\n-        head(s, ~\"impl\");\n+        head(s, visibility_qualified(item.vis, ~\"impl\"));\n         if tps.is_not_empty() {\n             print_type_params(s, tps);\n             space(s.s);\n@@ -534,7 +533,7 @@ fn print_item(s: ps, &&item: @ast::item) {\n         bclose(s, item.span);\n       }\n       ast::item_trait(tps, traits, methods) => {\n-        head(s, ~\"trait\");\n+        head(s, visibility_qualified(item.vis, ~\"trait\"));\n         print_ident(s, item.ident);\n         print_type_params(s, tps);\n         if vec::len(traits) != 0u {\n@@ -550,6 +549,7 @@ fn print_item(s: ps, &&item: @ast::item) {\n         bclose(s, item.span);\n       }\n       ast::item_mac({node: ast::mac_invoc_tt(pth, tts), _}) => {\n+        print_visibility(s, item.vis);\n         print_path(s, pth, false);\n         word(s.s, ~\"! \");\n         print_ident(s, item.ident);\n@@ -570,7 +570,7 @@ fn print_item(s: ps, &&item: @ast::item) {\n \n fn print_enum_def(s: ps, enum_definition: ast::enum_def,\n                   params: ~[ast::ty_param], ident: ast::ident,\n-                  span: ast::span) {\n+                  span: ast::span, visibility: ast::visibility) {\n     let mut newtype =\n         vec::len(enum_definition.variants) == 1u &&\n         ident == enum_definition.variants[0].node.name;\n@@ -582,9 +582,9 @@ fn print_enum_def(s: ps, enum_definition: ast::enum_def,\n     }\n     if newtype {\n         ibox(s, indent_unit);\n-        word_space(s, ~\"enum\");\n+        word_space(s, visibility_qualified(visibility, ~\"enum\"));\n     } else {\n-        head(s, ~\"enum\");\n+        head(s, visibility_qualified(visibility, ~\"enum\"));\n     }\n \n     print_ident(s, ident);\n@@ -877,7 +877,7 @@ fn print_possibly_embedded_block_(s: ps, blk: ast::blk, embedded: embed_type,\n                                   indented: uint, attrs: ~[ast::attribute],\n                                   close_box: bool) {\n     match blk.node.rules {\n-      ast::unsafe_blk => word(s.s, ~\"unsafe\"),\n+      ast::unsafe_blk => word(s.s, ~\"unsafe \"),\n       ast::default_blk => ()\n     }\n     maybe_print_comment(s, blk.span.lo);"}]}