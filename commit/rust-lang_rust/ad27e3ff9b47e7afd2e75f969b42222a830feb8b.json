{"sha": "ad27e3ff9b47e7afd2e75f969b42222a830feb8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkMjdlM2ZmOWI0N2U3YWZkMmU3NWY5NjliNDIyMjJhODMwZmViOGI=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-04-14T09:12:51Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-04-14T09:12:51Z"}, "message": "Refactor suspicious_else_formatting using if_chain", "tree": {"sha": "ea0a6c66282c4a21feac5b2cec8d50f74f187ce0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea0a6c66282c4a21feac5b2cec8d50f74f187ce0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad27e3ff9b47e7afd2e75f969b42222a830feb8b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJEBAABCgAuFiEEj4U0bmbiMSg/mWqvgqphyqETl+YFAlyy+aQQHGRldkBwaGFu\nc2NoLm5ldAAKCRCCqmHKoROX5ug9EADJeUdQ8jsG9zJ47v1TIHJZ+wUn0GyKd+lo\nlzfyChSGcRBGjgvSMPsTOkQI/Q+U3prnbw7EEj8Tay8d83XJEhFKVb0fXjs7naDi\nhqwj/d5RjuY+n2ANRIJHlB7l2lFiY2Um/HTtR5GkQmK3bbpixfBU7QwJZERAzG0Z\nSSkvCB/0YVdgwQZNj1BFSeVe/hgGTofcu/n3r5GlJVSNDi8LYR/jFCVgLcFHpvMz\nWb63LR0LA+Jk9jy2gep4dwXVkVYTUXwmKD1IPXZ2mn/4VS/SVXTlLk/lsUKBARd0\nDuc8uEgvTXYgIa3Iya035LV8Q8Osd+mB4Dlw/7hjO5546OzXbrXtEWByA7+0PI6+\nDB9lEtIZ+JJoxIT5BPfJejyJob7JZ/2MB5/oLJRpO3ZsuB2exT+hkucAe2jVMoqX\nkQmNgqUo20SprX9bRxoBPKmYjTQr8UOKTwWCgw3oK+0jWlNttcYl3C41X+MZ/k4+\nvejb82FCFtiqhBkDzkjboZoXiBkwsX0/BB5PgTBAw2qH4q2ILNbd0F1Bx2Hk7ivl\nSPq7vz6oM2rzmG7KHRdGDR9InBKwRzgZFxkmC8JaOb3dIjg6iQ4Z+EKvvVfFZgJA\nCPagfiwWS/sew5x6GZJv648BO570SOk+N5bQuu5IQUfb0YXLMiFDociFFIqpXM6o\nqABnJTHQDQ==\n=rNHw\n-----END PGP SIGNATURE-----", "payload": "tree ea0a6c66282c4a21feac5b2cec8d50f74f187ce0\nparent 96c34e85c4bc23d153ebe4db5e24beba92d4d174\nauthor Philipp Hansch <dev@phansch.net> 1555233171 +0200\ncommitter Philipp Hansch <dev@phansch.net> 1555233171 +0200\n\nRefactor suspicious_else_formatting using if_chain\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad27e3ff9b47e7afd2e75f969b42222a830feb8b", "html_url": "https://github.com/rust-lang/rust/commit/ad27e3ff9b47e7afd2e75f969b42222a830feb8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad27e3ff9b47e7afd2e75f969b42222a830feb8b/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96c34e85c4bc23d153ebe4db5e24beba92d4d174", "url": "https://api.github.com/repos/rust-lang/rust/commits/96c34e85c4bc23d153ebe4db5e24beba92d4d174", "html_url": "https://github.com/rust-lang/rust/commit/96c34e85c4bc23d153ebe4db5e24beba92d4d174"}], "stats": {"total": 67, "additions": 32, "deletions": 35}, "files": [{"sha": "7d0266a873164d4db585612e62bc16d7cdd5f982", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 32, "deletions": 35, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/ad27e3ff9b47e7afd2e75f969b42222a830feb8b/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad27e3ff9b47e7afd2e75f969b42222a830feb8b/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=ad27e3ff9b47e7afd2e75f969b42222a830feb8b", "patch": "@@ -3,6 +3,7 @@ use rustc::lint::{in_external_macro, EarlyContext, EarlyLintPass, LintArray, Lin\n use rustc::{declare_tool_lint, lint_array};\n use syntax::ast;\n use syntax::ptr::P;\n+use if_chain::if_chain;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for use of the non-existent `=*`, `=!` and `=-`\n@@ -146,44 +147,40 @@ fn check_assign(cx: &EarlyContext<'_>, expr: &ast::Expr) {\n \n /// Implementation of the `SUSPICIOUS_ELSE_FORMATTING` lint for weird `else`.\n fn check_else(cx: &EarlyContext<'_>, expr: &ast::Expr) {\n-    if let Some((then, &Some(ref else_))) = unsugar_if(expr) {\n-        if (is_block(else_) || unsugar_if(else_).is_some())\n-            && !differing_macro_contexts(then.span, else_.span)\n-            && !in_macro(then.span)\n-            && !in_external_macro(cx.sess, expr.span)\n-        {\n-            // workaround for rust-lang/rust#43081\n-            if expr.span.lo().0 == 0 && expr.span.hi().0 == 0 {\n-                return;\n-            }\n+    if_chain! {\n+        if let Some((then, &Some(ref else_))) = unsugar_if(expr);\n+        if is_block(else_) || unsugar_if(else_).is_some();\n+        if !differing_macro_contexts(then.span, else_.span);\n+        if !in_macro(then.span) && !in_external_macro(cx.sess, expr.span);\n \n-            // this will be a span from the closing \u2018}\u2019 of the \u201cthen\u201d block (excluding) to\n-            // the\n-            // \u201cif\u201d of the \u201celse if\u201d block (excluding)\n-            let else_span = then.span.between(else_.span);\n+        // workaround for rust-lang/rust#43081\n+        if expr.span.lo().0 != 0 && expr.span.hi().0 != 0;\n \n-            // the snippet should look like \" else \\n    \" with maybe comments anywhere\n-            // it\u2019s bad when there is a \u2018\\n\u2019 after the \u201celse\u201d\n-            if let Some(else_snippet) = snippet_opt(cx, else_span) {\n-                if let Some(else_pos) = else_snippet.find(\"else\") {\n-                    if else_snippet[else_pos..].contains('\\n') {\n-                        let else_desc = if unsugar_if(else_).is_some() { \"if\" } else { \"{..}\" };\n+        // this will be a span from the closing \u2018}\u2019 of the \u201cthen\u201d block (excluding) to\n+        // the\n+        // \u201cif\u201d of the \u201celse if\u201d block (excluding)\n+        let else_span = then.span.between(else_.span);\n \n-                        span_note_and_lint(\n-                            cx,\n-                            SUSPICIOUS_ELSE_FORMATTING,\n-                            else_span,\n-                            &format!(\"this is an `else {}` but the formatting might hide it\", else_desc),\n-                            else_span,\n-                            &format!(\n-                                \"to remove this lint, remove the `else` or remove the new line between \\\n-                                 `else` and `{}`\",\n-                                else_desc,\n-                            ),\n-                        );\n-                    }\n-                }\n-            }\n+        // the snippet should look like \" else \\n    \" with maybe comments anywhere\n+        // it\u2019s bad when there is a \u2018\\n\u2019 after the \u201celse\u201d\n+        if let Some(else_snippet) = snippet_opt(cx, else_span);\n+        if let Some(else_pos) = else_snippet.find(\"else\");\n+        if else_snippet[else_pos..].contains('\\n');\n+        let else_desc = if unsugar_if(else_).is_some() { \"if\" } else { \"{..}\" };\n+\n+        then {\n+            span_note_and_lint(\n+                cx,\n+                SUSPICIOUS_ELSE_FORMATTING,\n+                else_span,\n+                &format!(\"this is an `else {}` but the formatting might hide it\", else_desc),\n+                else_span,\n+                &format!(\n+                    \"to remove this lint, remove the `else` or remove the new line between \\\n+                     `else` and `{}`\",\n+                    else_desc,\n+                ),\n+            );\n         }\n     }\n }"}]}