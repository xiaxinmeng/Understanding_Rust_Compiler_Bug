{"sha": "9f602bf4dae1a86dde890552e3c0c7fa2ca9196f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmNjAyYmY0ZGFlMWE4NmRkZTg5MDU1MmUzYzBjN2ZhMmNhOTE5NmY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-04-17T14:54:46Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-04-17T14:56:44Z"}, "message": "Use qemu to run tests for AArch64 when using a different host arch", "tree": {"sha": "798d2c74756f491e1b97fc0bc48eafdaca8eb920", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/798d2c74756f491e1b97fc0bc48eafdaca8eb920"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f602bf4dae1a86dde890552e3c0c7fa2ca9196f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f602bf4dae1a86dde890552e3c0c7fa2ca9196f", "html_url": "https://github.com/rust-lang/rust/commit/9f602bf4dae1a86dde890552e3c0c7fa2ca9196f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f602bf4dae1a86dde890552e3c0c7fa2ca9196f/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "045ae10380b99e97bd29d18c3f3af5cac5a5d7a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/045ae10380b99e97bd29d18c3f3af5cac5a5d7a1", "html_url": "https://github.com/rust-lang/rust/commit/045ae10380b99e97bd29d18c3f3af5cac5a5d7a1"}], "stats": {"total": 86, "additions": 58, "deletions": 28}, "files": [{"sha": "0f75e331a7e7e55b18ffd0afa20c79958edb12ea", "filename": "config.sh", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9f602bf4dae1a86dde890552e3c0c7fa2ca9196f/config.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9f602bf4dae1a86dde890552e3c0c7fa2ca9196f/config.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.sh?ref=9f602bf4dae1a86dde890552e3c0c7fa2ca9196f", "patch": "@@ -10,9 +10,23 @@ else\n    exit 1\n fi\n \n-TARGET_TRIPLE=$(rustc -vV | grep host | cut -d: -f2 | tr -d \" \")\n+HOST_TRIPLE=$(rustc -vV | grep host | cut -d: -f2 | tr -d \" \")\n+TARGET_TRIPLE=$HOST_TRIPLE\n+#TARGET_TRIPLE=\"aarch64-unknown-linux-gnu\"\n \n-export RUSTFLAGS='-Cpanic=abort -Cdebuginfo=2 -Zpanic-abort-tests -Zcodegen-backend='$(pwd)'/target/'$CHANNEL'/librustc_codegen_cranelift.'$dylib_ext' --sysroot '$(pwd)'/build_sysroot/sysroot'\n+linker=''\n+RUN_WRAPPER=''\n+if [[ \"$HOST_TRIPLE\" != \"$TARGET_TRIPLE\" ]]; then\n+   if [[ \"$TARGET_TRIPLE\" == \"aarch64-unknown-linux-gnu\" ]]; then\n+      # We are cross-compiling for aarch64. Use the correct linker and run tests in qemu.\n+      linker='-Clinker=aarch64-linux-gnu-gcc'\n+      RUN_WRAPPER='qemu-aarch64 -L /usr/aarch64-linux-gnu'\n+   else\n+      echo \"Unknown non-native platform\"\n+   fi\n+fi\n+\n+export RUSTFLAGS=$linker' -Cpanic=abort -Cdebuginfo=2 -Zpanic-abort-tests -Zcodegen-backend='$(pwd)'/target/'$CHANNEL'/librustc_codegen_cranelift.'$dylib_ext' --sysroot '$(pwd)'/build_sysroot/sysroot'\n \n # FIXME remove once the atomic shim is gone\n if [[ `uname` == 'Darwin' ]]; then"}, {"sha": "190fd7b291abb8621763285344ff5eb657eb85a6", "filename": "test.sh", "status": "modified", "additions": 42, "deletions": 26, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/9f602bf4dae1a86dde890552e3c0c7fa2ca9196f/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9f602bf4dae1a86dde890552e3c0c7fa2ca9196f/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=9f602bf4dae1a86dde890552e3c0c7fa2ca9196f", "patch": "@@ -16,69 +16,85 @@ rm -r target/out || true\n mkdir -p target/out/clif\n \n echo \"[BUILD] mini_core\"\n-$RUSTC example/mini_core.rs --crate-name mini_core --crate-type lib,dylib\n+$RUSTC example/mini_core.rs --crate-name mini_core --crate-type lib,dylib --target $TARGET_TRIPLE\n \n echo \"[BUILD] example\"\n-$RUSTC example/example.rs --crate-type lib\n+$RUSTC example/example.rs --crate-type lib --target $TARGET_TRIPLE\n \n-echo \"[JIT] mini_core_hello_world\"\n-CG_CLIF_JIT=1 CG_CLIF_JIT_ARGS=\"abc bcd\" $RUSTC --crate-type bin -Cprefer-dynamic example/mini_core_hello_world.rs --cfg jit\n+if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n+    echo \"[JIT] mini_core_hello_world\"\n+    CG_CLIF_JIT=1 CG_CLIF_JIT_ARGS=\"abc bcd\" $RUSTC --crate-type bin -Cprefer-dynamic example/mini_core_hello_world.rs --cfg jit --target $HOST_TRIPLE\n+else\n+    echo \"[JIT] mini_core_hello_world (skipped)\"\n+fi\n \n echo \"[AOT] mini_core_hello_world\"\n-$RUSTC example/mini_core_hello_world.rs --crate-name mini_core_hello_world --crate-type bin -g\n-./target/out/mini_core_hello_world abc bcd\n+$RUSTC example/mini_core_hello_world.rs --crate-name mini_core_hello_world --crate-type bin -g --target $TARGET_TRIPLE\n+$RUN_WRAPPER ./target/out/mini_core_hello_world abc bcd\n # (echo \"break set -n main\"; echo \"run\"; sleep 1; echo \"si -c 10\"; sleep 1; echo \"frame variable\") | lldb -- ./target/out/mini_core_hello_world abc bcd\n \n echo \"[AOT] arbitrary_self_types_pointers_and_wrappers\"\n-$RUSTC example/arbitrary_self_types_pointers_and_wrappers.rs --crate-name arbitrary_self_types_pointers_and_wrappers --crate-type bin\n-./target/out/arbitrary_self_types_pointers_and_wrappers\n+$RUSTC example/arbitrary_self_types_pointers_and_wrappers.rs --crate-name arbitrary_self_types_pointers_and_wrappers --crate-type bin --target $TARGET_TRIPLE\n+$RUN_WRAPPER ./target/out/arbitrary_self_types_pointers_and_wrappers\n \n echo \"[BUILD] sysroot\"\n time ./build_sysroot/build_sysroot.sh\n \n echo \"[AOT] alloc_example\"\n-$RUSTC example/alloc_example.rs --crate-type bin\n-./target/out/alloc_example\n+$RUSTC example/alloc_example.rs --crate-type bin --target $TARGET_TRIPLE\n+$RUN_WRAPPER ./target/out/alloc_example\n \n-echo \"[JIT] std_example\"\n-CG_CLIF_JIT=1 $RUSTC --crate-type bin -Cprefer-dynamic example/std_example.rs\n+if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n+    echo \"[JIT] std_example\"\n+    CG_CLIF_JIT=1 $RUSTC --crate-type bin -Cprefer-dynamic example/std_example.rs --target $HOST_TRIPLE\n+else\n+    echo \"[JIT] std_example (skipped)\"\n+fi\n \n echo \"[AOT] dst_field_align\"\n # FIXME Re-add -Zmir-opt-level=2 once rust-lang/rust#67529 is fixed.\n-$RUSTC example/dst-field-align.rs --crate-name dst_field_align --crate-type bin\n-./target/out/dst_field_align\n+$RUSTC example/dst-field-align.rs --crate-name dst_field_align --crate-type bin --target $TARGET_TRIPLE\n+$RUN_WRAPPER ./target/out/dst_field_align || (echo $?; false)\n \n echo \"[AOT] std_example\"\n-$RUSTC example/std_example.rs --crate-type bin\n-./target/out/std_example\n+$RUSTC example/std_example.rs --crate-type bin --target $TARGET_TRIPLE\n+$RUN_WRAPPER ./target/out/std_example --target $TARGET_TRIPLE\n \n echo \"[AOT] subslice-patterns-const-eval\"\n-$RUSTC example/subslice-patterns-const-eval.rs --crate-type bin -Cpanic=abort\n-./target/out/subslice-patterns-const-eval\n+$RUSTC example/subslice-patterns-const-eval.rs --crate-type bin -Cpanic=abort --target $TARGET_TRIPLE\n+$RUN_WRAPPER ./target/out/subslice-patterns-const-eval\n \n echo \"[AOT] track-caller-attribute\"\n-$RUSTC example/track-caller-attribute.rs --crate-type bin -Cpanic=abort\n-./target/out/track-caller-attribute\n+$RUSTC example/track-caller-attribute.rs --crate-type bin -Cpanic=abort --target $TARGET_TRIPLE\n+$RUN_WRAPPER ./target/out/track-caller-attribute\n \n echo \"[BUILD] mod_bench\"\n-$RUSTC example/mod_bench.rs --crate-type bin\n+$RUSTC example/mod_bench.rs --crate-type bin --target $TARGET_TRIPLE\n \n # FIXME linker gives multiple definitions error on Linux\n #echo \"[BUILD] sysroot in release mode\"\n #./build_sysroot/build_sysroot.sh --release\n \n pushd simple-raytracer\n-echo \"[BENCH COMPILE] ebobby/simple-raytracer\"\n-hyperfine --runs ${RUN_RUNS:-10} --warmup 1 --prepare \"rm -r target/*/debug || true\" \\\n+if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n+    echo \"[BENCH COMPILE] ebobby/simple-raytracer\"\n+    hyperfine --runs ${RUN_RUNS:-10} --warmup 1 --prepare \"rm -r target/*/debug || true\" \\\n     \"RUSTFLAGS='' cargo build --target $TARGET_TRIPLE\" \\\n     \"../cargo.sh build\"\n \n-echo \"[BENCH RUN] ebobby/simple-raytracer\"\n-cp ./target/*/debug/main ./raytracer_cg_clif\n-hyperfine --runs ${RUN_RUNS:-10} ./raytracer_cg_llvm ./raytracer_cg_clif\n+    echo \"[BENCH RUN] ebobby/simple-raytracer\"\n+    cp ./target/*/debug/main ./raytracer_cg_clif\n+    hyperfine --runs ${RUN_RUNS:-10} ./raytracer_cg_llvm ./raytracer_cg_clif\n+else\n+    echo \"[BENCH COMPILE] ebobby/simple-raytracer (skipped)\"\n+    echo \"[COMPILE] ebobby/simple-raytracer\"\n+    ../cargo.sh build\n+    echo \"[BENCH RUN] ebobby/simple-raytracer (skipped)\"\n+fi\n popd\n \n pushd build_sysroot/sysroot_src/src/libcore/tests\n+echo \"[TEST] libcore\"\n rm -r ./target || true\n ../../../../../cargo.sh test\n popd"}]}