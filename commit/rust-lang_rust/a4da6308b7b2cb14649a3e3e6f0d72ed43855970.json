{"sha": "a4da6308b7b2cb14649a3e3e6f0d72ed43855970", "node_id": "C_kwDOAAsO6NoAKGE0ZGE2MzA4YjdiMmNiMTQ2NDlhM2UzZTZmMGQ3MmVkNDM4NTU5NzA", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-11-30T20:55:52Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-02-12T00:26:11Z"}, "message": "Inherit lifetimes for async fn instead of duplicating them.", "tree": {"sha": "5c6b436be35db3f1687dd1aa995d7aa789f60310", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c6b436be35db3f1687dd1aa995d7aa789f60310"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4da6308b7b2cb14649a3e3e6f0d72ed43855970", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4da6308b7b2cb14649a3e3e6f0d72ed43855970", "html_url": "https://github.com/rust-lang/rust/commit/a4da6308b7b2cb14649a3e3e6f0d72ed43855970", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6499c5e7fc173a3f55b7a3bd1e6a50e9edef782d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6499c5e7fc173a3f55b7a3bd1e6a50e9edef782d", "html_url": "https://github.com/rust-lang/rust/commit/6499c5e7fc173a3f55b7a3bd1e6a50e9edef782d"}], "stats": {"total": 419, "additions": 171, "deletions": 248}, "files": [{"sha": "60b5aeb52b18f8a7b70726e6d686f8ba45e85947", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 19, "deletions": 50, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=a4da6308b7b2cb14649a3e3e6f0d72ed43855970", "patch": "@@ -1659,11 +1659,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n         // When we create the opaque type for this async fn, it is going to have\n         // to capture all the lifetimes involved in the signature (including in the\n-        // return type). This is done by introducing lifetime parameters for:\n+        // return type). This is done by:\n         //\n-        // - all the explicitly declared lifetimes from the impl and function itself;\n-        // - all the elided lifetimes in the fn arguments;\n-        // - all the elided lifetimes in the return type.\n+        // - making the opaque type inherit all lifetime parameters from its parent;\n+        // - make all the elided lifetimes in the fn arguments into parameters;\n+        // - manually introducing parameters on the opaque type for elided\n+        //   lifetimes in the return type.\n         //\n         // So for example in this snippet:\n         //\n@@ -1679,44 +1680,22 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         // we would create an opaque type like:\n         //\n         // ```\n-        // type Bar<'a, 'b, '0, '1, '2> = impl Future<Output = &'2 u32>;\n+        // type Foo<'a>::bar<'b, '0, '1>::Bar<'2> = impl Future<Output = &'2 u32>;\n         // ```\n         //\n         // and we would then desugar `bar` to the equivalent of:\n         //\n         // ```rust\n         // impl<'a> Foo<'a> {\n-        //   fn bar<'b, '0, '1>(&'0 self, x: &'b Vec<f64>, y: &'1 str) -> Bar<'a, 'b, '0, '1, '_>\n+        //   fn bar<'b, '0, '1>(&'0 self, x: &'b Vec<f64>, y: &'1 str) -> Bar<'_>\n         // }\n         // ```\n         //\n         // Note that the final parameter to `Bar` is `'_`, not `'2` --\n         // this is because the elided lifetimes from the return type\n         // should be figured out using the ordinary elision rules, and\n         // this desugaring achieves that.\n-\n-        debug!(\"lower_async_fn_ret_ty: in_scope_lifetimes={:#?}\", self.in_scope_lifetimes);\n-        debug!(\"lower_async_fn_ret_ty: lifetimes_to_define={:#?}\", self.lifetimes_to_define);\n-\n-        // Calculate all the lifetimes that should be captured\n-        // by the opaque type. This should include all in-scope\n-        // lifetime parameters, including those defined in-band.\n-        //\n-        // `lifetime_params` is a vector of tuple (span, parameter name, lifetime name).\n-\n-        // Input lifetime like `'a` or `'1`:\n-        let mut lifetime_params: Vec<_> = self\n-            .in_scope_lifetimes\n-            .iter()\n-            .cloned()\n-            .map(|name| (name.ident().span, name, hir::LifetimeName::Param(name)))\n-            .chain(\n-                self.lifetimes_to_define\n-                    .iter()\n-                    .map(|&(span, name)| (span, name, hir::LifetimeName::Param(name))),\n-            )\n-            .collect();\n-\n+        let mut lifetime_params = Vec::new();\n         self.with_hir_id_owner(opaque_ty_node_id, |this| {\n             // We have to be careful to get elision right here. The\n             // idea is that we create a lifetime parameter for each\n@@ -1735,16 +1714,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             debug!(\"lower_async_fn_ret_ty: future_bound={:#?}\", future_bound);\n             debug!(\"lower_async_fn_ret_ty: lifetimes_to_define={:#?}\", lifetimes_to_define);\n \n-            lifetime_params.extend(\n-                // Output lifetime like `'_`:\n-                lifetimes_to_define\n-                    .into_iter()\n-                    .map(|(span, name)| (span, name, hir::LifetimeName::Implicit(false))),\n-            );\n+            // Output lifetime like `'_`:\n+            lifetime_params = lifetimes_to_define;\n             debug!(\"lower_async_fn_ret_ty: lifetime_params={:#?}\", lifetime_params);\n \n             let generic_params =\n-                this.arena.alloc_from_iter(lifetime_params.iter().map(|&(span, hir_name, _)| {\n+                this.arena.alloc_from_iter(lifetime_params.iter().map(|&(span, hir_name)| {\n                     this.lifetime_to_generic_param(span, hir_name, opaque_ty_def_id)\n                 }));\n \n@@ -1762,28 +1737,22 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             this.generate_opaque_type(opaque_ty_def_id, opaque_ty_item, span, opaque_ty_span)\n         });\n \n-        // As documented above on the variable\n-        // `input_lifetimes_count`, we need to create the lifetime\n-        // arguments to our opaque type. Continuing with our example,\n-        // we're creating the type arguments for the return type:\n+        // We need to create the lifetime arguments to our opaque type.\n+        // Continuing with our example, we're creating the type arguments\n+        // for the return type:\n         //\n         // ```\n-        // Bar<'a, 'b, '0, '1, '_>\n+        // For<'a>::bar<'b, '0, '1>::Bar<'_>\n         // ```\n         //\n-        // For the \"input\" lifetime parameters, we wish to create\n-        // references to the parameters themselves, including the\n-        // \"implicit\" ones created from parameter types (`'a`, `'b`,\n-        // '`0`, `'1`).\n-        //\n-        // For the \"output\" lifetime parameters, we just want to\n-        // generate `'_`.\n+        // For the \"input\" lifetime parameters are inherited automatically.\n+        // For the \"output\" lifetime parameters, we just want to generate `'_`.\n         let generic_args =\n-            self.arena.alloc_from_iter(lifetime_params.into_iter().map(|(span, _, name)| {\n+            self.arena.alloc_from_iter(lifetime_params.into_iter().map(|(span, _)| {\n                 GenericArg::Lifetime(hir::Lifetime {\n                     hir_id: self.next_id(),\n                     span: self.lower_span(span),\n-                    name,\n+                    name: hir::LifetimeName::Implicit(false),\n                 })\n             }));\n "}, {"sha": "e79ece9a4a4d556a41ed7a5c5b596431cb06a2f1", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=a4da6308b7b2cb14649a3e3e6f0d72ed43855970", "patch": "@@ -276,7 +276,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         debug!(?concrete_ty);\n \n         let first_own_region = match opaque_defn.origin {\n-            hir::OpaqueTyOrigin::FnReturn(..) | hir::OpaqueTyOrigin::AsyncFn(..) => {\n+            hir::OpaqueTyOrigin::FnReturn(..) => {\n                 // We lower\n                 //\n                 // fn foo<'l0..'ln>() -> impl Trait<'l0..'lm>\n@@ -291,7 +291,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n             // These opaque type inherit all lifetime parameters from their\n             // parent, so we have to check them all.\n-            hir::OpaqueTyOrigin::TyAlias => 0,\n+            hir::OpaqueTyOrigin::AsyncFn(..) | hir::OpaqueTyOrigin::TyAlias => 0,\n         };\n \n         // For a case like `impl Foo<'a, 'b>`, we would generate a constraint"}, {"sha": "d25bee67d4ee079110bcb81a7ddda686dfb7fd0c", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=a4da6308b7b2cb14649a3e3e6f0d72ed43855970", "patch": "@@ -729,9 +729,16 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         match item.kind {\n             hir::ItemKind::Fn(ref sig, ref generics, _) => {\n                 self.missing_named_lifetime_spots.push(generics.into());\n-                self.visit_early_late(None, item.hir_id(), &sig.decl, generics, |this| {\n-                    intravisit::walk_item(this, item);\n-                });\n+                self.visit_early_late(\n+                    None,\n+                    item.hir_id(),\n+                    &sig.decl,\n+                    generics,\n+                    sig.header.asyncness,\n+                    |this| {\n+                        intravisit::walk_item(this, item);\n+                    },\n+                );\n                 self.missing_named_lifetime_spots.pop();\n             }\n \n@@ -849,11 +856,16 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n \n     fn visit_foreign_item(&mut self, item: &'tcx hir::ForeignItem<'tcx>) {\n         match item.kind {\n-            hir::ForeignItemKind::Fn(ref decl, _, ref generics) => {\n-                self.visit_early_late(None, item.hir_id(), decl, generics, |this| {\n+            hir::ForeignItemKind::Fn(ref decl, _, ref generics) => self.visit_early_late(\n+                None,\n+                item.hir_id(),\n+                decl,\n+                generics,\n+                hir::IsAsync::NotAsync,\n+                |this| {\n                     intravisit::walk_foreign_item(this, item);\n-                })\n-            }\n+                },\n+            ),\n             hir::ForeignItemKind::Static(..) => {\n                 intravisit::walk_foreign_item(self, item);\n             }\n@@ -1130,6 +1142,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     trait_item.hir_id(),\n                     &sig.decl,\n                     &trait_item.generics,\n+                    sig.header.asyncness,\n                     |this| intravisit::walk_trait_item(this, trait_item),\n                 );\n                 self.missing_named_lifetime_spots.pop();\n@@ -1199,6 +1212,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     impl_item.hir_id(),\n                     &sig.decl,\n                     &impl_item.generics,\n+                    sig.header.asyncness,\n                     |this| intravisit::walk_impl_item(this, impl_item),\n                 );\n                 self.missing_named_lifetime_spots.pop();\n@@ -2159,11 +2173,15 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         hir_id: hir::HirId,\n         decl: &'tcx hir::FnDecl<'tcx>,\n         generics: &'tcx hir::Generics<'tcx>,\n+        asyncness: hir::IsAsync,\n         walk: F,\n     ) where\n         F: for<'b, 'c> FnOnce(&'b mut LifetimeContext<'c, 'tcx>),\n     {\n-        insert_late_bound_lifetimes(self.map, decl, generics);\n+        // Async fns need all their lifetime parameters to be early bound.\n+        if asyncness != hir::IsAsync::Async {\n+            insert_late_bound_lifetimes(self.map, decl, generics);\n+        }\n \n         // Find the start of nested early scopes, e.g., in methods.\n         let mut next_early_index = 0;"}, {"sha": "366d20dbbc21aee0fb0004b32a73d2103eb866fa", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=a4da6308b7b2cb14649a3e3e6f0d72ed43855970", "patch": "@@ -2408,16 +2408,11 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 let def_id = item_id.def_id.to_def_id();\n \n                 match opaque_ty.kind {\n-                    hir::ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) => self\n-                        .impl_trait_ty_to_ty(\n-                            def_id,\n-                            lifetimes,\n-                            matches!(\n-                                origin,\n-                                hir::OpaqueTyOrigin::FnReturn(..)\n-                                    | hir::OpaqueTyOrigin::AsyncFn(..)\n-                            ),\n-                        ),\n+                    hir::ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) => {\n+                        let replace_parent_lifetimes =\n+                            matches!(origin, hir::OpaqueTyOrigin::FnReturn(..));\n+                        self.impl_trait_ty_to_ty(def_id, lifetimes, replace_parent_lifetimes)\n+                    }\n                     ref i => bug!(\"`impl Trait` pointed to non-opaque type?? {:#?}\", i),\n                 }\n             }"}, {"sha": "536a848e5bb2fc06e77dc70953bf15ba8d6838db", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=a4da6308b7b2cb14649a3e3e6f0d72ed43855970", "patch": "@@ -535,10 +535,8 @@ pub(super) fn check_opaque_for_inheriting_lifetimes<'tcx>(\n         }\n     }\n \n-    if let ItemKind::OpaqueTy(hir::OpaqueTy {\n-        origin: hir::OpaqueTyOrigin::AsyncFn(..) | hir::OpaqueTyOrigin::FnReturn(..),\n-        ..\n-    }) = item.kind\n+    if let ItemKind::OpaqueTy(hir::OpaqueTy { origin: hir::OpaqueTyOrigin::FnReturn(..), .. }) =\n+        item.kind\n     {\n         let mut visitor = ProhibitOpaqueVisitor {\n             opaque_identity_ty: tcx.mk_opaque(\n@@ -560,20 +558,13 @@ pub(super) fn check_opaque_for_inheriting_lifetimes<'tcx>(\n \n         if let Some(ty) = prohibit_opaque.break_value() {\n             visitor.visit_item(&item);\n-            let is_async = match item.kind {\n-                ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) => {\n-                    matches!(origin, hir::OpaqueTyOrigin::AsyncFn(..))\n-                }\n-                _ => unreachable!(),\n-            };\n \n             let mut err = struct_span_err!(\n                 tcx.sess,\n                 span,\n                 E0760,\n-                \"`{}` return type cannot contain a projection or `Self` that references lifetimes from \\\n+                \"`impl Trait` return type cannot contain a projection or `Self` that references lifetimes from \\\n                  a parent scope\",\n-                if is_async { \"async fn\" } else { \"impl Trait\" },\n             );\n \n             for (span, name) in visitor.selftys {"}, {"sha": "727ca19d6ffd60eb327427a1ba6ef0dfe45b63e5", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=a4da6308b7b2cb14649a3e3e6f0d72ed43855970", "patch": "@@ -2162,8 +2162,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n                     generics\n                 }\n                 ItemKind::OpaqueTy(OpaqueTy {\n-                    origin: hir::OpaqueTyOrigin::AsyncFn(..) | hir::OpaqueTyOrigin::FnReturn(..),\n-                    ..\n+                    origin: hir::OpaqueTyOrigin::FnReturn(..), ..\n                 }) => {\n                     // return-position impl trait\n                     //\n@@ -2183,7 +2182,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n                 }\n                 ItemKind::OpaqueTy(OpaqueTy {\n                     ref generics,\n-                    origin: hir::OpaqueTyOrigin::TyAlias,\n+                    origin: hir::OpaqueTyOrigin::AsyncFn(..) | hir::OpaqueTyOrigin::TyAlias,\n                     ..\n                 }) => {\n                     // type-alias impl trait"}, {"sha": "42133d5104146c5e8001cbfb544f0cec05352dd1", "filename": "src/test/ui/async-await/issue-61949-self-return-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.rs?ref=a4da6308b7b2cb14649a3e3e6f0d72ed43855970", "patch": "@@ -8,7 +8,6 @@ pub struct Foo<'a> {\n \n impl<'a> Foo<'a> {\n     pub async fn new(_bar: &'a i32) -> Self {\n-    //~^ ERROR `async fn` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n         Foo {\n             bar: &22\n         }\n@@ -19,6 +18,7 @@ async fn foo() {\n     let x = {\n         let bar = 22;\n         Foo::new(&bar).await\n+        //~^ ERROR `bar` does not live long enough [E0597]\n     };\n     drop(x);\n }"}, {"sha": "f86844e1a9cac9c0486252e9d53c4d2e5b2604da", "filename": "src/test/ui/async-await/issue-61949-self-return-type.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.stderr?ref=a4da6308b7b2cb14649a3e3e6f0d72ed43855970", "patch": "@@ -1,9 +1,15 @@\n-error[E0760]: `async fn` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n-  --> $DIR/issue-61949-self-return-type.rs:10:40\n+error[E0597]: `bar` does not live long enough\n+  --> $DIR/issue-61949-self-return-type.rs:20:18\n    |\n-LL |     pub async fn new(_bar: &'a i32) -> Self {\n-   |                                        ^^^^ help: consider spelling out the type instead: `Foo<'a>`\n+LL |     let x = {\n+   |         - borrow later stored here\n+LL |         let bar = 22;\n+LL |         Foo::new(&bar).await\n+   |                  ^^^^ borrowed value does not live long enough\n+LL |\n+LL |     };\n+   |     - `bar` dropped here while still borrowed\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0760`.\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "80504613eb4e3c2f546aa78b5d90c883db406608", "filename": "src/test/ui/async-await/issue-74072-lifetime-name-annotations.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/src%2Ftest%2Fui%2Fasync-await%2Fissue-74072-lifetime-name-annotations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/src%2Ftest%2Fui%2Fasync-await%2Fissue-74072-lifetime-name-annotations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-74072-lifetime-name-annotations.stderr?ref=a4da6308b7b2cb14649a3e3e6f0d72ed43855970", "patch": "@@ -1,14 +1,10 @@\n error[E0506]: cannot assign to `*x` because it is borrowed\n   --> $DIR/issue-74072-lifetime-name-annotations.rs:9:5\n    |\n-LL | pub async fn async_fn(x: &mut i32) -> &i32 {\n-   |                          - let's call the lifetime of this reference `'1`\n LL |     let y = &*x;\n    |             --- borrow of `*x` occurs here\n LL |     *x += 1;\n    |     ^^^^^^^ assignment to borrowed `*x` occurs here\n-LL |     y\n-   |     - returning this value requires that `*x` is borrowed for `'1`\n \n error[E0506]: cannot assign to `*x` because it is borrowed\n   --> $DIR/issue-74072-lifetime-name-annotations.rs:16:9"}, {"sha": "06660b7c182b37ecec699eaf41ca9e66b2df57af", "filename": "src/test/ui/async-await/issue-75785-confusing-named-region.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/src%2Ftest%2Fui%2Fasync-await%2Fissue-75785-confusing-named-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/src%2Ftest%2Fui%2Fasync-await%2Fissue-75785-confusing-named-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-75785-confusing-named-region.stderr?ref=a4da6308b7b2cb14649a3e3e6f0d72ed43855970", "patch": "@@ -1,14 +1,10 @@\n error[E0506]: cannot assign to `*x` because it is borrowed\n   --> $DIR/issue-75785-confusing-named-region.rs:9:5\n    |\n-LL | pub async fn async_fn(x: &mut i32) -> (&i32, &i32) {\n-   |                          - let's call the lifetime of this reference `'1`\n LL |     let y = &*x;\n    |             --- borrow of `*x` occurs here\n LL |     *x += 1;\n    |     ^^^^^^^ assignment to borrowed `*x` occurs here\n-LL |     (&32, y)\n-   |     -------- returning this value requires that `*x` is borrowed for `'1`\n \n error: aborting due to previous error\n "}, {"sha": "ee270d36979659e48ee3a4f7f35966a556a97b4b", "filename": "src/test/ui/async-await/issues/issue-63388-1.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr?ref=a4da6308b7b2cb14649a3e3e6f0d72ed43855970", "patch": "@@ -2,12 +2,10 @@ error[E0623]: lifetime mismatch\n   --> $DIR/issue-63388-1.rs:14:9\n    |\n LL |         &'a self, foo: &dyn Foo\n-   |                        -------- this parameter and the return type are declared with different lifetimes...\n-LL |     ) -> &dyn Foo\n-   |          --------\n-LL |     {\n+   |         --------       -------- these two types are declared with different lifetimes...\n+...\n LL |         foo\n-   |         ^^^ ...but data from `foo` is returned here\n+   |         ^^^ ...but data from `foo` flows into `self` here\n \n error: aborting due to previous error\n "}, {"sha": "4303fc7952f2bbc377447aa15092c1a06f5d211a", "filename": "src/test/ui/async-await/issues/issue-78600.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78600.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78600.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78600.rs?ref=a4da6308b7b2cb14649a3e3e6f0d72ed43855970", "patch": "@@ -1,10 +1,10 @@\n+// check-pass\n // edition:2018\n \n struct S<'a>(&'a i32);\n \n impl<'a> S<'a> {\n     async fn new(i: &'a i32) -> Result<Self, ()> {\n-        //~^ ERROR: `async fn`\n         Ok(S(&22))\n     }\n }"}, {"sha": "92b66147106e1eae7ecf4b851d1f1975cf9af1c6", "filename": "src/test/ui/async-await/issues/issue-78600.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6499c5e7fc173a3f55b7a3bd1e6a50e9edef782d/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78600.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6499c5e7fc173a3f55b7a3bd1e6a50e9edef782d/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78600.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78600.stderr?ref=6499c5e7fc173a3f55b7a3bd1e6a50e9edef782d", "patch": "@@ -1,11 +0,0 @@\n-error[E0760]: `async fn` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n-  --> $DIR/issue-78600.rs:6:33\n-   |\n-LL |     async fn new(i: &'a i32) -> Result<Self, ()> {\n-   |                                 ^^^^^^^----^^^^^\n-   |                                        |\n-   |                                        help: consider spelling out the type instead: `S<'a>`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0760`."}, {"sha": "6f79d9e9b5f575706ddcf697ee1d45b2d456e8bc", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr?ref=a4da6308b7b2cb14649a3e3e6f0d72ed43855970", "patch": "@@ -2,10 +2,9 @@ error[E0623]: lifetime mismatch\n   --> $DIR/ret-impl-trait-one.rs:10:65\n    |\n LL | async fn async_ret_impl_trait3<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> + 'b {\n-   |                                                      ------     ^^^^^^^^^^^^^^^^^^^\n-   |                                                      |          |\n-   |                                                      |          ...but data from `a` is returned here\n-   |                                                      this parameter and the return type are declared with different lifetimes...\n+   |                                           ------     ------     ^^^^^^^^^^^^^^^^^^^ ...but data from `a` flows into `b` here\n+   |                                           |\n+   |                                           these two types are declared with different lifetimes...\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ret-impl-trait-one.rs:16:65"}, {"sha": "a0504927254b6555666c67e535f80ee8d24fe6b3", "filename": "src/test/ui/async-await/unused-lifetime.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/src%2Ftest%2Fui%2Fasync-await%2Funused-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/src%2Ftest%2Fui%2Fasync-await%2Funused-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Funused-lifetime.rs?ref=a4da6308b7b2cb14649a3e3e6f0d72ed43855970", "patch": "@@ -10,10 +10,13 @@\n // Even wrong cases don't cause errors because async functions are desugared with all lifetimes\n // involved in the signature. So, we cannot predict what lifetimes are unused in async function.\n async fn async_wrong_without_args<'a>() {}\n+//~^ ERROR lifetime parameter `'a` never used [unused_lifetimes]\n \n async fn async_wrong_1_lifetime<'a>(_: &i32) {}\n+//~^ ERROR lifetime parameter `'a` never used [unused_lifetimes]\n \n async fn async_wrong_2_lifetimes<'a, 'b>(_: &'a i32, _: &i32) {}\n+//~^ ERROR lifetime parameter `'b` never used [unused_lifetimes]\n \n async fn async_right_1_lifetime<'a>(_: &'a i32) {}\n "}, {"sha": "85304b9cb9ef73e08c7562a04374e0f3feb93ead", "filename": "src/test/ui/async-await/unused-lifetime.stderr", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/src%2Ftest%2Fui%2Fasync-await%2Funused-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/src%2Ftest%2Fui%2Fasync-await%2Funused-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Funused-lifetime.stderr?ref=a4da6308b7b2cb14649a3e3e6f0d72ed43855970", "patch": "@@ -1,8 +1,8 @@\n error: lifetime parameter `'a` never used\n-  --> $DIR/unused-lifetime.rs:31:23\n+  --> $DIR/unused-lifetime.rs:12:35\n    |\n-LL | fn wrong_without_args<'a>() {}\n-   |                      -^^- help: elide the unused lifetime\n+LL | async fn async_wrong_without_args<'a>() {}\n+   |                                  -^^- help: elide the unused lifetime\n    |\n note: the lint level is defined here\n   --> $DIR/unused-lifetime.rs:5:9\n@@ -11,18 +11,40 @@ LL | #![deny(unused_lifetimes)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: lifetime parameter `'a` never used\n-  --> $DIR/unused-lifetime.rs:33:21\n+  --> $DIR/unused-lifetime.rs:15:33\n+   |\n+LL | async fn async_wrong_1_lifetime<'a>(_: &i32) {}\n+   |                                 ^^-----\n+   |                                 |\n+   |                                 help: elide the unused lifetime\n+\n+error: lifetime parameter `'b` never used\n+  --> $DIR/unused-lifetime.rs:18:38\n+   |\n+LL | async fn async_wrong_2_lifetimes<'a, 'b>(_: &'a i32, _: &i32) {}\n+   |                                      ^^-----------------\n+   |                                      |\n+   |                                      help: elide the unused lifetime\n+\n+error: lifetime parameter `'a` never used\n+  --> $DIR/unused-lifetime.rs:34:23\n+   |\n+LL | fn wrong_without_args<'a>() {}\n+   |                      -^^- help: elide the unused lifetime\n+\n+error: lifetime parameter `'a` never used\n+  --> $DIR/unused-lifetime.rs:36:21\n    |\n LL | fn wrong_1_lifetime<'a>(_: &i32) {}\n    |                    -^^- help: elide the unused lifetime\n \n error: lifetime parameter `'b` never used\n-  --> $DIR/unused-lifetime.rs:35:26\n+  --> $DIR/unused-lifetime.rs:38:26\n    |\n LL | fn wrong_2_lifetimes<'a, 'b>(_: &'a i32, _: &i32) {}\n    |                        --^^\n    |                        |\n    |                        help: elide the unused lifetime\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "042ae53dba13f305811c99783352ce8cf1158015", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr?ref=a4da6308b7b2cb14649a3e3e6f0d72ed43855970", "patch": "@@ -2,25 +2,25 @@ error[E0623]: lifetime mismatch\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:8:52\n    |\n LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n-   |                                    ----     ----   ^ ...but data from `f` is returned here\n+   |                          ----      ----            ^ ...but data from `f` flows into `self` here\n    |                                    |\n-   |                                    this parameter and the return type are declared with different lifetimes...\n+   |                                    these two types are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:11:82\n    |\n LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n-   |                                     ----              -----------------          ^ ...but data from `f` is returned here\n+   |                          -----      ----                                         ^ ...but data from `f` flows into `self` here\n    |                                     |\n-   |                                     this parameter and the return type are declared with different lifetimes...\n+   |                                     these two types are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:17:64\n    |\n LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n-   |                                               ------     ---   ^^^ ...but data from `arg` is returned here\n+   |                                  -----        ------           ^^^ ...but data from `arg` flows into `self` here\n    |                                               |\n-   |                                               this parameter and the return type are declared with different lifetimes...\n+   |                                               these two types are declared with different lifetimes...\n \n error: aborting due to 3 previous errors\n "}, {"sha": "ae4846702130650acbb9fa08626196d95a7a830b", "filename": "src/test/ui/self/elision/lt-ref-self-async.stderr", "status": "modified", "additions": 12, "deletions": 24, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr?ref=a4da6308b7b2cb14649a3e3e6f0d72ed43855970", "patch": "@@ -2,61 +2,49 @@ error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self-async.rs:13:9\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n-   |                                 ----     ----\n-   |                                 |\n-   |                                 this parameter and the return type are declared with different lifetimes...\n+   |                       -----     ---- these two types are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` flows into `self` here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self-async.rs:19:9\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n-   |                                       ----     ----\n-   |                                       |\n-   |                                       this parameter and the return type are declared with different lifetimes...\n+   |                             -----     ---- these two types are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` flows into `self` here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self-async.rs:23:9\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n-   |                                                ----     ----\n-   |                                                |\n-   |                                                this parameter and the return type are declared with different lifetimes...\n+   |                                     -----      ---- these two types are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` flows into `self` here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self-async.rs:27:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n-   |                                                ----     ----\n-   |                                                |\n-   |                                                this parameter and the return type are declared with different lifetimes...\n+   |                                     -----      ---- these two types are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` flows into `self` here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self-async.rs:31:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n-   |                                                         ----     ----\n-   |                                                         |\n-   |                                                         this parameter and the return type are declared with different lifetimes...\n+   |                                             -----       ---- these two types are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` flows into `self` here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self-async.rs:35:9\n    |\n LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n-   |                                                     ----     ----\n-   |                                                     |\n-   |                                                     this parameter and the return type are declared with different lifetimes...\n+   |                                         -----       ---- these two types are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` flows into `self` here\n \n error: aborting due to 6 previous errors\n "}, {"sha": "7b984b343d639881f2cc168aa05df267f74da797", "filename": "src/test/ui/self/elision/ref-mut-self-async.stderr", "status": "modified", "additions": 12, "deletions": 24, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr?ref=a4da6308b7b2cb14649a3e3e6f0d72ed43855970", "patch": "@@ -2,61 +2,49 @@ error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self-async.rs:13:9\n    |\n LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n-   |                                     ----     ----\n-   |                                     |\n-   |                                     this parameter and the return type are declared with different lifetimes...\n+   |                       ---------     ---- these two types are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` flows into `self` here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self-async.rs:19:9\n    |\n LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n-   |                                           ----     ----\n-   |                                           |\n-   |                                           this parameter and the return type are declared with different lifetimes...\n+   |                             ---------     ---- these two types are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` flows into `self` here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self-async.rs:23:9\n    |\n LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n-   |                                                    ----     ----\n-   |                                                    |\n-   |                                                    this parameter and the return type are declared with different lifetimes...\n+   |                                     ---------      ---- these two types are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` flows into `self` here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self-async.rs:27:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n-   |                                                    ----     ----\n-   |                                                    |\n-   |                                                    this parameter and the return type are declared with different lifetimes...\n+   |                                     ---------      ---- these two types are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` flows into `self` here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self-async.rs:31:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n-   |                                                             ----     ----\n-   |                                                             |\n-   |                                                             this parameter and the return type are declared with different lifetimes...\n+   |                                             ---------       ---- these two types are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` flows into `self` here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self-async.rs:35:9\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n-   |                                                             ----     ----\n-   |                                                             |\n-   |                                                             this parameter and the return type are declared with different lifetimes...\n+   |                                             ---------       ---- these two types are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` flows into `self` here\n \n error: aborting due to 6 previous errors\n "}, {"sha": "87a144f62f6430f862c07a48f3dd4252db1d5de3", "filename": "src/test/ui/self/elision/ref-mut-struct-async.stderr", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr?ref=a4da6308b7b2cb14649a3e3e6f0d72ed43855970", "patch": "@@ -2,51 +2,41 @@ error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-struct-async.rs:13:9\n    |\n LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n-   |                                               ----     ----\n-   |                                               |\n-   |                                               this parameter and the return type are declared with different lifetimes...\n+   |                               -----------     ---- these two types are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` flows into `self` here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-struct-async.rs:17:9\n    |\n LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n-   |                                                        ----     ----\n-   |                                                        |\n-   |                                                        this parameter and the return type are declared with different lifetimes...\n+   |                                       -----------      ---- these two types are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` flows into `self` here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-struct-async.rs:21:9\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n-   |                                                        ----     ----\n-   |                                                        |\n-   |                                                        this parameter and the return type are declared with different lifetimes...\n+   |                                       -----------      ---- these two types are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` flows into `self` here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-struct-async.rs:25:9\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n-   |                                                                 ----     ----\n-   |                                                                 |\n-   |                                                                 this parameter and the return type are declared with different lifetimes...\n+   |                                               -----------       ---- these two types are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` flows into `self` here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-struct-async.rs:29:9\n    |\n LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n-   |                                                                 ----     ----\n-   |                                                                 |\n-   |                                                                 this parameter and the return type are declared with different lifetimes...\n+   |                                               -----------       ---- these two types are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` flows into `self` here\n \n error: aborting due to 5 previous errors\n "}, {"sha": "15c20c1bc4d944e772d6762af46307e23accd8cd", "filename": "src/test/ui/self/elision/ref-self-async.stderr", "status": "modified", "additions": 14, "deletions": 28, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr?ref=a4da6308b7b2cb14649a3e3e6f0d72ed43855970", "patch": "@@ -2,71 +2,57 @@ error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:23:9\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n-   |                                 ----     ----\n-   |                                 |\n-   |                                 this parameter and the return type are declared with different lifetimes...\n+   |                       -----     ---- these two types are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` flows into `self` here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:29:9\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n-   |                                       ----     ----\n-   |                                       |\n-   |                                       this parameter and the return type are declared with different lifetimes...\n+   |                             -----     ---- these two types are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` flows into `self` here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:33:9\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n-   |                                                ----     ----\n-   |                                                |\n-   |                                                this parameter and the return type are declared with different lifetimes...\n+   |                                     -----      ---- these two types are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` flows into `self` here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:37:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n-   |                                                ----     ----\n-   |                                                |\n-   |                                                this parameter and the return type are declared with different lifetimes...\n+   |                                     -----      ---- these two types are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` flows into `self` here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:41:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n-   |                                                         ----     ----\n-   |                                                         |\n-   |                                                         this parameter and the return type are declared with different lifetimes...\n+   |                                             -----       ---- these two types are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` flows into `self` here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:45:9\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n-   |                                                         ----     ----\n-   |                                                         |\n-   |                                                         this parameter and the return type are declared with different lifetimes...\n+   |                                             -----       ---- these two types are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` flows into `self` here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:49:9\n    |\n LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n-   |                                                             ---     ---\n-   |                                                             |\n-   |                                                             this parameter and the return type are declared with different lifetimes...\n+   |                                            -----            --- these two types are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` flows into `self` here\n \n error: aborting due to 7 previous errors\n "}, {"sha": "f24be3b58a771300d4d6a5a70b8153457a2e85c6", "filename": "src/test/ui/self/elision/ref-struct-async.stderr", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4da6308b7b2cb14649a3e3e6f0d72ed43855970/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr?ref=a4da6308b7b2cb14649a3e3e6f0d72ed43855970", "patch": "@@ -2,51 +2,41 @@ error[E0623]: lifetime mismatch\n   --> $DIR/ref-struct-async.rs:13:9\n    |\n LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n-   |                                           ----     ----\n-   |                                           |\n-   |                                           this parameter and the return type are declared with different lifetimes...\n+   |                               -------     ---- these two types are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` flows into `self` here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-struct-async.rs:17:9\n    |\n LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n-   |                                                    ----     ----\n-   |                                                    |\n-   |                                                    this parameter and the return type are declared with different lifetimes...\n+   |                                       -------      ---- these two types are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` flows into `self` here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-struct-async.rs:21:9\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n-   |                                                    ----     ----\n-   |                                                    |\n-   |                                                    this parameter and the return type are declared with different lifetimes...\n+   |                                       -------      ---- these two types are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` flows into `self` here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-struct-async.rs:25:9\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n-   |                                                             ----     ----\n-   |                                                             |\n-   |                                                             this parameter and the return type are declared with different lifetimes...\n+   |                                               -------       ---- these two types are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` flows into `self` here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-struct-async.rs:29:9\n    |\n LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n-   |                                                         ----     ----\n-   |                                                         |\n-   |                                                         this parameter and the return type are declared with different lifetimes...\n+   |                                           -------       ---- these two types are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` flows into `self` here\n \n error: aborting due to 5 previous errors\n "}]}