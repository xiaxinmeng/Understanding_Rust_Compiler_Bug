{"sha": "c4a351b736632f0c01d9c51ce1cd3b4b4c6194d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0YTM1MWI3MzY2MzJmMGMwMWQ5YzUxY2UxY2QzYjRiNGM2MTk0ZDk=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-25T08:40:37Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-25T08:40:37Z"}, "message": "Merge #635\n\n635: switch to positional ids for enum variants r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "656ed2e90603c06af1df84c6a9bc3a7c5046eff2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/656ed2e90603c06af1df84c6a9bc3a7c5046eff2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4a351b736632f0c01d9c51ce1cd3b4b4c6194d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4a351b736632f0c01d9c51ce1cd3b4b4c6194d9", "html_url": "https://github.com/rust-lang/rust/commit/c4a351b736632f0c01d9c51ce1cd3b4b4c6194d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4a351b736632f0c01d9c51ce1cd3b4b4c6194d9/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "946aea3eb34d1b7f09900e017bb94708e6299d0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/946aea3eb34d1b7f09900e017bb94708e6299d0a", "html_url": "https://github.com/rust-lang/rust/commit/946aea3eb34d1b7f09900e017bb94708e6299d0a"}, {"sha": "2ee2fba752c0f03ab8d1b7009bc56cc785738413", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ee2fba752c0f03ab8d1b7009bc56cc785738413", "html_url": "https://github.com/rust-lang/rust/commit/2ee2fba752c0f03ab8d1b7009bc56cc785738413"}], "stats": {"total": 82, "additions": 44, "deletions": 38}, "files": [{"sha": "e0f5156422ee3380f4ce5447ee3af6beac019355", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 36, "deletions": 18, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/c4a351b736632f0c01d9c51ce1cd3b4b4c6194d9/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a351b736632f0c01d9c51ce1cd3b4b4c6194d9/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=c4a351b736632f0c01d9c51ce1cd3b4b4c6194d9", "patch": "@@ -3,11 +3,14 @@\n \n use std::sync::Arc;\n \n-use ra_syntax::ast::{self, NameOwner, StructFlavor};\n+use ra_syntax::{\n+    TreeArc,\n+    ast::{self, NameOwner, StructFlavor}\n+};\n \n use crate::{\n     Name, AsName, Struct, Enum, EnumVariant, Crate,\n-    HirDatabase,\n+    HirDatabase, HirFileId,\n     type_ref::TypeRef,\n     ids::LocationCtx,\n };\n@@ -55,6 +58,24 @@ impl StructData {\n     }\n }\n \n+fn variants(enum_def: &ast::EnumDef) -> impl Iterator<Item = &ast::EnumVariant> {\n+    enum_def\n+        .variant_list()\n+        .into_iter()\n+        .flat_map(|it| it.variants())\n+}\n+\n+impl EnumVariant {\n+    pub fn source_impl(&self, db: &impl HirDatabase) -> (HirFileId, TreeArc<ast::EnumVariant>) {\n+        let (file_id, enum_def) = self.parent.source(db);\n+        let var = variants(&*enum_def)\n+            .nth(self.idx as usize)\n+            .unwrap()\n+            .to_owned();\n+        (file_id, var)\n+    }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct EnumData {\n     pub(crate) name: Option<Name>,\n@@ -68,22 +89,19 @@ impl EnumData {\n     }\n \n     pub(crate) fn enum_data_query(db: &impl HirDatabase, e: Enum) -> Arc<EnumData> {\n-        let (file_id, enum_def) = e.source(db);\n-        let module = e.module(db);\n-        let ctx = LocationCtx::new(db, module, file_id);\n-        let variants = if let Some(vl) = enum_def.variant_list() {\n-            vl.variants()\n-                .filter_map(|variant_def| {\n-                    let name = variant_def.name()?.as_name();\n-                    let var = EnumVariant {\n-                        id: ctx.to_def(variant_def),\n-                    };\n-                    Some((name, var))\n-                })\n-                .collect()\n-        } else {\n-            Vec::new()\n-        };\n+        let (_file_id, enum_def) = e.source(db);\n+        let variants = variants(&*enum_def)\n+            .enumerate()\n+            .filter_map(|(idx, variant_def)| {\n+                let name = variant_def.name()?.as_name();\n+                let var = EnumVariant {\n+                    parent: e,\n+                    idx: idx as u32,\n+                };\n+                Some((name, var))\n+            })\n+            .collect();\n+\n         Arc::new(EnumData::new(&*enum_def, variants))\n     }\n }"}, {"sha": "4fc47aba5d8f0bb4d03ade805645920e2ab0b2da", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c4a351b736632f0c01d9c51ce1cd3b4b4c6194d9/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a351b736632f0c01d9c51ce1cd3b4b4c6194d9/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=c4a351b736632f0c01d9c51ce1cd3b4b4c6194d9", "patch": "@@ -15,7 +15,7 @@ use crate::{\n     generics::GenericParams,\n     docs::{Documentation, Docs, docs_from_ast},\n     module_tree::ModuleId,\n-    ids::{FunctionId, StructId, EnumId, EnumVariantId, AstItemDef, ConstId, StaticId, TraitId, TypeId},\n+    ids::{FunctionId, StructId, EnumId, AstItemDef, ConstId, StaticId, TraitId, TypeId},\n };\n \n /// hir::Crate describes a single crate. It's the main interface with which\n@@ -269,18 +269,19 @@ impl Docs for Enum {\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct EnumVariant {\n-    pub(crate) id: EnumVariantId,\n+    pub(crate) parent: Enum,\n+    pub(crate) idx: u32,\n }\n \n impl EnumVariant {\n     pub fn source(&self, db: &impl HirDatabase) -> (HirFileId, TreeArc<ast::EnumVariant>) {\n-        self.id.source(db)\n+        self.source_impl(db)\n     }\n     pub fn module(&self, db: &impl HirDatabase) -> Module {\n-        self.id.module(db)\n+        self.parent.module(db)\n     }\n-    pub fn parent_enum(&self, db: &impl HirDatabase) -> Enum {\n-        db.enum_variant_data(*self).parent_enum.clone()\n+    pub fn parent_enum(&self, _db: &impl HirDatabase) -> Enum {\n+        self.parent\n     }\n \n     pub fn name(&self, db: &impl HirDatabase) -> Option<Name> {"}, {"sha": "5272656ec2ca408bb78f48fd5c702434f6832965", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c4a351b736632f0c01d9c51ce1cd3b4b4c6194d9/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a351b736632f0c01d9c51ce1cd3b4b4c6194d9/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=c4a351b736632f0c01d9c51ce1cd3b4b4c6194d9", "patch": "@@ -18,7 +18,6 @@ pub struct HirInterner {\n     fns: LocationIntener<ItemLoc<ast::FnDef>, FunctionId>,\n     structs: LocationIntener<ItemLoc<ast::StructDef>, StructId>,\n     enums: LocationIntener<ItemLoc<ast::EnumDef>, EnumId>,\n-    enum_variants: LocationIntener<ItemLoc<ast::EnumVariant>, EnumVariantId>,\n     consts: LocationIntener<ItemLoc<ast::ConstDef>, ConstId>,\n     statics: LocationIntener<ItemLoc<ast::StaticDef>, StaticId>,\n     traits: LocationIntener<ItemLoc<ast::TraitDef>, TraitId>,\n@@ -31,7 +30,6 @@ impl HirInterner {\n             + self.fns.len()\n             + self.structs.len()\n             + self.enums.len()\n-            + self.enum_variants.len()\n             + self.consts.len()\n             + self.statics.len()\n             + self.traits.len()\n@@ -261,15 +259,6 @@ impl AstItemDef<ast::EnumDef> for EnumId {\n     }\n }\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct EnumVariantId(RawId);\n-impl_arena_id!(EnumVariantId);\n-impl AstItemDef<ast::EnumVariant> for EnumVariantId {\n-    fn interner(interner: &HirInterner) -> &LocationIntener<ItemLoc<ast::EnumVariant>, Self> {\n-        &interner.enum_variants\n-    }\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct ConstId(RawId);\n impl_arena_id!(ConstId);\n@@ -342,9 +331,7 @@ impl SourceFileItems {\n         // change parent's id. This means that, say, adding a new function to a\n         // trait does not chage ids of top-level items, which helps caching.\n         bfs(source_file.syntax(), |it| {\n-            if let Some(enum_variant) = ast::EnumVariant::cast(it) {\n-                self.alloc(enum_variant.syntax().to_owned());\n-            } else if let Some(module_item) = ast::ModuleItem::cast(it) {\n+            if let Some(module_item) = ast::ModuleItem::cast(it) {\n                 self.alloc(module_item.syntax().to_owned());\n             } else if let Some(macro_call) = ast::MacroCall::cast(it) {\n                 self.alloc(macro_call.syntax().to_owned());"}]}