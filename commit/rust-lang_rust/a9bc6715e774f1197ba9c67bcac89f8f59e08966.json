{"sha": "a9bc6715e774f1197ba9c67bcac89f8f59e08966", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5YmM2NzE1ZTc3NGYxMTk3YmE5YzY3YmNhYzg5ZjhmNTllMDg5NjY=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-05-19T00:07:49Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-19T18:40:16Z"}, "message": "tidy tstate.collect_locals", "tree": {"sha": "3328c363ed5bd35cbf63895038eb0fb2938c72ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3328c363ed5bd35cbf63895038eb0fb2938c72ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9bc6715e774f1197ba9c67bcac89f8f59e08966", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9bc6715e774f1197ba9c67bcac89f8f59e08966", "html_url": "https://github.com/rust-lang/rust/commit/a9bc6715e774f1197ba9c67bcac89f8f59e08966", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9bc6715e774f1197ba9c67bcac89f8f59e08966/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0f728712ba018ae0a3993232bf5b259e0c312ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0f728712ba018ae0a3993232bf5b259e0c312ad", "html_url": "https://github.com/rust-lang/rust/commit/c0f728712ba018ae0a3993232bf5b259e0c312ad"}], "stats": {"total": 31, "additions": 3, "deletions": 28}, "files": [{"sha": "73225dbe0615b9c30b3028ef3c1c7818b59f3610", "filename": "src/comp/middle/tstate/collect_locals.rs", "status": "modified", "additions": 3, "deletions": 28, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a9bc6715e774f1197ba9c67bcac89f8f59e08966/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9bc6715e774f1197ba9c67bcac89f8f59e08966/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs?ref=a9bc6715e774f1197ba9c67bcac89f8f59e08966", "patch": "@@ -62,7 +62,7 @@ fn add_var(def_id v, ident nm, uint next, fn_info tbl) -> uint {\n \n /* builds a table mapping each local var defined in f\n    to a bit number in the precondition/postcondition vectors */\n-fn mk_fn_info(&_fn f, &def_id f_id, &ident f_name) -> fn_info {\n+fn mk_fn_info(&crate_ctxt ccx, &_fn f, &ident f_name, &def_id f_id) -> () {\n     auto res = rec(vars=@new_def_hash[var_info](),\n                    cf=f.decl.cf);\n     let uint next = 0u;\n@@ -72,7 +72,6 @@ fn mk_fn_info(&_fn f, &def_id f_id, &ident f_name) -> fn_info {\n        just collect locally declared vars */\n \n     let @vec[tup(ident,def_id)] locals = find_locals(f, f_name, f_id);\n-    // log (uistr(vec::len[tup(ident, def_id)](locals)) + \" locals\");\n     for (tup(ident,def_id) p in *locals) {\n         next = add_var(p._1, p._0, next, res);\n     }\n@@ -83,39 +82,15 @@ fn mk_fn_info(&_fn f, &def_id f_id, &ident f_name) -> fn_info {\n     log(f_name + \" has \" + uistr(vec::len[tup(ident, def_id)](*locals))\n             + \" locals\");\n    \n-    ret res;\n-}\n-\n-/* FIXME: can do this with just one case -- for fn -- now */\n-\n-/* extends mk_fn_info to an item, side-effecting the map fi from\n-   function IDs to fn_info maps\n-   only looks at function and object items. */\n-fn mk_fn_info_item (&crate_ctxt ccx, &@item i) -> () {\n-  alt (i.node) {\n-    case (item_fn(?i,?f,?ty_params,?id,?a)) {\n-      auto f_inf = mk_fn_info(f, id, i);\n-      ccx.fm.insert(id, f_inf);\n-    }\n-    case (item_obj(?i,?o,?ty_params,?odid,?a)) {\n-      auto all_methods = vec::clone[@method](o.methods);\n-      plus_option[@method](all_methods, o.dtor);\n-      auto f_inf;\n-      for (@method m in all_methods) {\n-        f_inf = mk_fn_info(m.node.meth, m.node.id, m.node.ident);\n-        ccx.fm.insert(m.node.id, f_inf);\n-      }\n-    }\n-    case (_) { ret; }\n-  }\n+    ccx.fm.insert(f_id, res);\n }\n \n /* initializes the global fn_info_map (mapping each function ID, including\n    nested locally defined functions, onto a mapping from local variable name\n    to bit number) */\n fn mk_f_to_fn_info(&crate_ctxt ccx, @crate c) -> () {\n   let ast_visitor vars_visitor = walk::default_visitor();\n-  vars_visitor = rec(visit_item_post=bind mk_fn_info_item(ccx,_)\n+  vars_visitor = rec(visit_fn_pre=bind mk_fn_info(ccx,_,_,_)\n                      with vars_visitor);\n \n   walk_crate(vars_visitor, *c);"}]}