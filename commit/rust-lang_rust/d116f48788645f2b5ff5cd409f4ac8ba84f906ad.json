{"sha": "d116f48788645f2b5ff5cd409f4ac8ba84f906ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMTZmNDg3ODg2NDVmMmI1ZmY1Y2Q0MDlmNGFjOGJhODRmOTA2YWQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-12-22T20:10:18Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-12-31T08:14:38Z"}, "message": "Add fallible box allocator APIs (`Box::try_new_*_in()`)", "tree": {"sha": "2a18de532ce6ebdd1823df3b3ff3cf726ed27bf3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a18de532ce6ebdd1823df3b3ff3cf726ed27bf3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d116f48788645f2b5ff5cd409f4ac8ba84f906ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d116f48788645f2b5ff5cd409f4ac8ba84f906ad", "html_url": "https://github.com/rust-lang/rust/commit/d116f48788645f2b5ff5cd409f4ac8ba84f906ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d116f48788645f2b5ff5cd409f4ac8ba84f906ad/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "353f3a38460d3c2222d2ab29143f48595b1a32a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/353f3a38460d3c2222d2ab29143f48595b1a32a9", "html_url": "https://github.com/rust-lang/rust/commit/353f3a38460d3c2222d2ab29143f48595b1a32a9"}], "stats": {"total": 86, "additions": 85, "deletions": 1}, "files": [{"sha": "bc56c7a3c4fbb65b1b1cf2f3118b158bb8e42ffd", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 85, "deletions": 1, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/d116f48788645f2b5ff5cd409f4ac8ba84f906ad/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d116f48788645f2b5ff5cd409f4ac8ba84f906ad/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=d116f48788645f2b5ff5cd409f4ac8ba84f906ad", "patch": "@@ -153,7 +153,7 @@ use core::pin::Pin;\n use core::ptr::{self, Unique};\n use core::task::{Context, Poll};\n \n-use crate::alloc::{handle_alloc_error, Allocator, Global, Layout};\n+use crate::alloc::{handle_alloc_error, AllocError, Allocator, Global, Layout};\n use crate::borrow::Cow;\n use crate::raw_vec::RawVec;\n use crate::str::from_boxed_utf8_unchecked;\n@@ -267,6 +267,31 @@ impl<T, A: Allocator> Box<T, A> {\n         }\n     }\n \n+    /// Allocates memory in the given allocator then places `x` into it,\n+    /// returning an error if the allocation fails\n+    ///\n+    /// This doesn't actually allocate if `T` is zero-sized.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(allocator_api)]\n+    ///\n+    /// use std::alloc::System;\n+    ///\n+    /// let five = Box::try_new_in(5, System)?;\n+    /// # Ok::<(), std::alloc::AllocError>(())\n+    /// ```\n+    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+    #[inline]\n+    pub fn try_new_in(x: T, alloc: A) -> Result<Self, AllocError> {\n+        let mut boxed = Self::try_new_uninit_in(alloc)?;\n+        unsafe {\n+            boxed.as_mut_ptr().write(x);\n+            Ok(boxed.assume_init())\n+        }\n+    }\n+\n     /// Constructs a new box with uninitialized contents in the provided allocator.\n     ///\n     /// # Examples\n@@ -295,6 +320,36 @@ impl<T, A: Allocator> Box<T, A> {\n         unsafe { Box::from_raw_in(ptr.as_ptr(), alloc) }\n     }\n \n+    /// Constructs a new box with uninitialized contents in the provided allocator,\n+    /// returning an error if the allocation fails\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(allocator_api, new_uninit)]\n+    ///\n+    /// use std::alloc::System;\n+    ///\n+    /// let mut five = Box::<u32, _>::try_new_uninit_in(System)?;\n+    ///\n+    /// let five = unsafe {\n+    ///     // Deferred initialization:\n+    ///     five.as_mut_ptr().write(5);\n+    ///\n+    ///     five.assume_init()\n+    /// };\n+    ///\n+    /// assert_eq!(*five, 5);\n+    /// # Ok::<(), std::alloc::AllocError>(())\n+    /// ```\n+    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+    // #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    pub fn try_new_uninit_in(alloc: A) -> Result<Box<mem::MaybeUninit<T>, A>, AllocError> {\n+        let layout = Layout::new::<mem::MaybeUninit<T>>();\n+        let ptr = alloc.allocate(layout)?.cast();\n+        unsafe { Ok(Box::from_raw_in(ptr.as_ptr(), alloc)) }\n+    }\n+\n     /// Constructs a new `Box` with uninitialized contents, with the memory\n     /// being filled with `0` bytes in the provided allocator.\n     ///\n@@ -324,6 +379,35 @@ impl<T, A: Allocator> Box<T, A> {\n         unsafe { Box::from_raw_in(ptr.as_ptr(), alloc) }\n     }\n \n+    /// Constructs a new `Box` with uninitialized contents, with the memory\n+    /// being filled with `0` bytes in the provided allocator.\n+    ///\n+    /// See [`MaybeUninit::zeroed`][zeroed] for examples of correct and incorrect usage\n+    /// of this method.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(allocator_api, new_uninit)]\n+    ///\n+    /// use std::alloc::System;\n+    ///\n+    /// let zero = Box::<u32, _>::try_new_zeroed_in(System)?;\n+    /// let zero = unsafe { zero.assume_init() };\n+    ///\n+    /// assert_eq!(*zero, 0);\n+    /// # Ok::<(), std::alloc::AllocError>(())\n+    /// ```\n+    ///\n+    /// [zeroed]: mem::MaybeUninit::zeroed\n+    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+    // #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    pub fn try_new_zeroed_in(alloc: A) -> Result<Box<mem::MaybeUninit<T>, A>, AllocError> {\n+        let layout = Layout::new::<mem::MaybeUninit<T>>();\n+        let ptr = alloc.allocate_zeroed(layout)?.cast();\n+        unsafe { Ok(Box::from_raw_in(ptr.as_ptr(), alloc)) }\n+    }\n+\n     /// Constructs a new `Pin<Box<T, A>>`. If `T` does not implement `Unpin`, then\n     /// `x` will be pinned in memory and unable to be moved.\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]"}]}