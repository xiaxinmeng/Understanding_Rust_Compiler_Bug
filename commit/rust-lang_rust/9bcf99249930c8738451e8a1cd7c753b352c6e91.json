{"sha": "9bcf99249930c8738451e8a1cd7c753b352c6e91", "node_id": "C_kwDOAAsO6NoAKDliY2Y5OTI0OTkzMGM4NzM4NDUxZThhMWNkN2M3NTNiMzUyYzZlOTE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-06-30T17:55:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-30T17:55:54Z"}, "message": "Rollup merge of #98688 - RalfJung:from-mplace, r=oli-obk\n\ninterpret: add From<&MplaceTy> for PlaceTy\n\nWe have a similar instance for `&MPlaceTy` to `OpTy`. Also add the same for `&mut`.\n\nThis avoids having to write `&(*place).into()`, which we have a few times here and at least twice in Miri (and it comes up again in my current patch).\n\nr? ```@oli-obk```", "tree": {"sha": "cc22f05700bf598257e55fe1f147376d7f18770c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc22f05700bf598257e55fe1f147376d7f18770c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bcf99249930c8738451e8a1cd7c753b352c6e91", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiveOrCRBK7hj4Ov3rIwAA/AwIAFlWCatZfgFmEHJJNrTS7/EO\n66xlhB/Ci66zxlI2YlRS7cOeG1aooas0sx0VVyOXRd+d92fCJUEnh1uMm+RI4KwU\nEJ0iDhAY8M4zcGlOsFVPLBg4ZVup2Mu9V4NnZRwjYELoON2eOW5rEhJ+Z9MNnRQJ\nrgh6JfMoAdO7TZlY5oEqA3Y2OoqyuK/SSeW7SINwFVIOO0AvaC1oa0ljpNsZjM2O\ni/YoTau9J/feYHF8hGKEKI1hH9Aw7J8LG+o8jiZo+4LUyZfPvwE5g2jCkVG5PChb\nbXF+y9HGU9y5Rabi39FJ2clNN/JRKNp37jS9/aGa0xiJNArkKKNt0Ro2GCcbnik=\n=C6q6\n-----END PGP SIGNATURE-----\n", "payload": "tree cc22f05700bf598257e55fe1f147376d7f18770c\nparent 783989098b48d864b7bd9104dd08f13fc1ccb8c8\nparent f60ec83779a7c41e1a4e8378017ba68669eb81ee\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1656611754 +0200\ncommitter GitHub <noreply@github.com> 1656611754 +0200\n\nRollup merge of #98688 - RalfJung:from-mplace, r=oli-obk\n\ninterpret: add From<&MplaceTy> for PlaceTy\n\nWe have a similar instance for `&MPlaceTy` to `OpTy`. Also add the same for `&mut`.\n\nThis avoids having to write `&(*place).into()`, which we have a few times here and at least twice in Miri (and it comes up again in my current patch).\n\nr? ```@oli-obk```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bcf99249930c8738451e8a1cd7c753b352c6e91", "html_url": "https://github.com/rust-lang/rust/commit/9bcf99249930c8738451e8a1cd7c753b352c6e91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bcf99249930c8738451e8a1cd7c753b352c6e91/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "783989098b48d864b7bd9104dd08f13fc1ccb8c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/783989098b48d864b7bd9104dd08f13fc1ccb8c8", "html_url": "https://github.com/rust-lang/rust/commit/783989098b48d864b7bd9104dd08f13fc1ccb8c8"}, {"sha": "f60ec83779a7c41e1a4e8378017ba68669eb81ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/f60ec83779a7c41e1a4e8378017ba68669eb81ee", "html_url": "https://github.com/rust-lang/rust/commit/f60ec83779a7c41e1a4e8378017ba68669eb81ee"}], "stats": {"total": 37, "additions": 29, "deletions": 8}, "files": [{"sha": "f8b390aaf50e140e6f55a30574426f0f83d9b7a1", "filename": "compiler/rustc_const_eval/src/const_eval/valtrees.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9bcf99249930c8738451e8a1cd7c753b352c6e91/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bcf99249930c8738451e8a1cd7c753b352c6e91/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs?ref=9bcf99249930c8738451e8a1cd7c753b352c6e91", "patch": "@@ -346,7 +346,7 @@ fn valtree_into_mplace<'tcx>(\n         ty::FnDef(_, _) => {\n             ecx.write_immediate(\n                 Immediate::Scalar(ScalarMaybeUninit::Scalar(Scalar::ZST)),\n-                &(*place).into(),\n+                &place.into(),\n             )\n             .unwrap();\n         }\n@@ -355,7 +355,7 @@ fn valtree_into_mplace<'tcx>(\n             debug!(\"writing trivial valtree {:?} to place {:?}\", scalar_int, place);\n             ecx.write_immediate(\n                 Immediate::Scalar(ScalarMaybeUninit::Scalar(scalar_int.into())),\n-                &(*place).into(),\n+                &place.into(),\n             )\n             .unwrap();\n         }\n@@ -382,7 +382,7 @@ fn valtree_into_mplace<'tcx>(\n             };\n             debug!(?imm);\n \n-            ecx.write_immediate(imm, &(*place).into()).unwrap();\n+            ecx.write_immediate(imm, &place.into()).unwrap();\n         }\n         ty::Adt(_, _) | ty::Tuple(_) | ty::Array(_, _) | ty::Str | ty::Slice(_) => {\n             let branches = valtree.unwrap_branch();\n@@ -464,11 +464,11 @@ fn valtree_into_mplace<'tcx>(\n \n             if let Some(variant_idx) = variant_idx {\n                 // don't forget filling the place with the discriminant of the enum\n-                ecx.write_discriminant(variant_idx, &(*place).into()).unwrap();\n+                ecx.write_discriminant(variant_idx, &place.into()).unwrap();\n             }\n \n             debug!(\"dump of place after writing discriminant:\");\n-            dump_place(ecx, (*place).into());\n+            dump_place(ecx, place.into());\n         }\n         _ => bug!(\"shouldn't have created a ValTree for {:?}\", ty),\n     }"}, {"sha": "c1d42c9ae7cc346f5dc91c4a4aeef31460a49fcf", "filename": "compiler/rustc_const_eval/src/interpret/intern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bcf99249930c8738451e8a1cd7c753b352c6e91/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bcf99249930c8738451e8a1cd7c753b352c6e91/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs?ref=9bcf99249930c8738451e8a1cd7c753b352c6e91", "patch": "@@ -195,7 +195,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: CompileTimeMachine<'mir, 'tcx, const_eval::Memory\n         let tcx = self.ecx.tcx;\n         let ty = mplace.layout.ty;\n         if let ty::Ref(_, referenced_ty, ref_mutability) = *ty.kind() {\n-            let value = self.ecx.read_immediate(&(*mplace).into())?;\n+            let value = self.ecx.read_immediate(&mplace.into())?;\n             let mplace = self.ecx.ref_to_mplace(&value)?;\n             assert_eq!(mplace.layout.ty, referenced_ty);\n             // Handle trait object vtables."}, {"sha": "e7a08e052758c561b9cad610309570dde0eadaa3", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9bcf99249930c8738451e8a1cd7c753b352c6e91/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bcf99249930c8738451e8a1cd7c753b352c6e91/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=9bcf99249930c8738451e8a1cd7c753b352c6e91", "patch": "@@ -204,6 +204,13 @@ impl<'tcx, Tag: Provenance> From<&'_ MPlaceTy<'tcx, Tag>> for OpTy<'tcx, Tag> {\n     }\n }\n \n+impl<'tcx, Tag: Provenance> From<&'_ mut MPlaceTy<'tcx, Tag>> for OpTy<'tcx, Tag> {\n+    #[inline(always)]\n+    fn from(mplace: &mut MPlaceTy<'tcx, Tag>) -> Self {\n+        OpTy { op: Operand::Indirect(**mplace), layout: mplace.layout }\n+    }\n+}\n+\n impl<'tcx, Tag: Provenance> From<ImmTy<'tcx, Tag>> for OpTy<'tcx, Tag> {\n     #[inline(always)]\n     fn from(val: ImmTy<'tcx, Tag>) -> Self {"}, {"sha": "337fcd28c663d7e12d3f03093be7119966e57673", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9bcf99249930c8738451e8a1cd7c753b352c6e91/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bcf99249930c8738451e8a1cd7c753b352c6e91/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=9bcf99249930c8738451e8a1cd7c753b352c6e91", "patch": "@@ -118,7 +118,21 @@ impl<'tcx, Tag: Provenance> std::ops::Deref for MPlaceTy<'tcx, Tag> {\n impl<'tcx, Tag: Provenance> From<MPlaceTy<'tcx, Tag>> for PlaceTy<'tcx, Tag> {\n     #[inline(always)]\n     fn from(mplace: MPlaceTy<'tcx, Tag>) -> Self {\n-        PlaceTy { place: Place::Ptr(mplace.mplace), layout: mplace.layout }\n+        PlaceTy { place: Place::Ptr(*mplace), layout: mplace.layout }\n+    }\n+}\n+\n+impl<'tcx, Tag: Provenance> From<&'_ MPlaceTy<'tcx, Tag>> for PlaceTy<'tcx, Tag> {\n+    #[inline(always)]\n+    fn from(mplace: &MPlaceTy<'tcx, Tag>) -> Self {\n+        PlaceTy { place: Place::Ptr(**mplace), layout: mplace.layout }\n+    }\n+}\n+\n+impl<'tcx, Tag: Provenance> From<&'_ mut MPlaceTy<'tcx, Tag>> for PlaceTy<'tcx, Tag> {\n+    #[inline(always)]\n+    fn from(mplace: &mut MPlaceTy<'tcx, Tag>) -> Self {\n+        PlaceTy { place: Place::Ptr(**mplace), layout: mplace.layout }\n     }\n }\n "}, {"sha": "2b77ed898934544ef573d80526e1969fd51a6dab", "filename": "compiler/rustc_const_eval/src/interpret/visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bcf99249930c8738451e8a1cd7c753b352c6e91/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bcf99249930c8738451e8a1cd7c753b352c6e91/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvisitor.rs?ref=9bcf99249930c8738451e8a1cd7c753b352c6e91", "patch": "@@ -92,7 +92,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> Value<'mir, 'tcx, M>\n         &self,\n         _ecx: &InterpCx<'mir, 'tcx, M>,\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n-        Ok((*self).into())\n+        Ok(self.into())\n     }\n \n     #[inline(always)]"}]}