{"sha": "6a5feffd6cb8bb04cf61d1c265254233bb093831", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNWZlZmZkNmNiOGJiMDRjZjYxZDFjMjY1MjU0MjMzYmIwOTM4MzE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-29T23:42:23Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-29T23:43:27Z"}, "message": "rustc: Tolerate def id tags inside module tags. Fixes metadata reading.", "tree": {"sha": "6ba08d7717e1912d2a7a77726b1426462b93f5e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ba08d7717e1912d2a7a77726b1426462b93f5e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a5feffd6cb8bb04cf61d1c265254233bb093831", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a5feffd6cb8bb04cf61d1c265254233bb093831", "html_url": "https://github.com/rust-lang/rust/commit/6a5feffd6cb8bb04cf61d1c265254233bb093831", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a5feffd6cb8bb04cf61d1c265254233bb093831/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55fbed3d8d7078bfd3864e64cc044cbe876c5d1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/55fbed3d8d7078bfd3864e64cc044cbe876c5d1a", "html_url": "https://github.com/rust-lang/rust/commit/55fbed3d8d7078bfd3864e64cc044cbe876c5d1a"}], "stats": {"total": 65, "additions": 33, "deletions": 32}, "files": [{"sha": "3b95b24fc8f88df61a92c4764dee94d652f008dc", "filename": "src/comp/front/creader.rs", "status": "modified", "additions": 33, "deletions": 32, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/6a5feffd6cb8bb04cf61d1c265254233bb093831/src%2Fcomp%2Ffront%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a5feffd6cb8bb04cf61d1c265254233bb093831/src%2Fcomp%2Ffront%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fcreader.rs?ref=6a5feffd6cb8bb04cf61d1c265254233bb093831", "patch": "@@ -256,42 +256,43 @@ impure fn resolve_path(vec[ast.ident] path, vec[u8] data) -> resolve_result {\n             auto found = false;\n             while (ebml.bytes_left(ebml_r) > 0u && !found) {\n                 auto ebml_tag = ebml.peek(ebml_r);\n-                check ((ebml_tag.id == metadata.tag_paths_item) ||\n-                       (ebml_tag.id == metadata.tag_paths_mod));\n-\n-                ebml.move_to_first_child(ebml_r);\n-                auto did_opt = none[ast.def_id];\n-                auto name_opt = none[ast.ident];\n-                while (ebml.bytes_left(ebml_r) > 0u) {\n-                    auto inner_tag = ebml.peek(ebml_r);\n-                    if (inner_tag.id == metadata.tag_paths_name) {\n-                        ebml.move_to_first_child(ebml_r);\n-                        auto name_data = ebml.read_data(ebml_r);\n-                        ebml.move_to_parent(ebml_r);\n-                        auto nm = _str.unsafe_from_bytes(name_data);\n-                        name_opt = some[ast.ident](nm);\n-                    } else if (inner_tag.id == metadata.tag_items_def_id) {\n-                        ebml.move_to_first_child(ebml_r);\n-                        auto did_data = ebml.read_data(ebml_r);\n-                        ebml.move_to_parent(ebml_r);\n-                        did_opt = some[ast.def_id](parse_def_id(did_data));\n+                if ((ebml_tag.id == metadata.tag_paths_item) ||\n+                        (ebml_tag.id == metadata.tag_paths_mod)) {\n+                    ebml.move_to_first_child(ebml_r);\n+                    auto did_opt = none[ast.def_id];\n+                    auto name_opt = none[ast.ident];\n+                    while (ebml.bytes_left(ebml_r) > 0u) {\n+                        auto inner_tag = ebml.peek(ebml_r);\n+                        if (inner_tag.id == metadata.tag_paths_name) {\n+                            ebml.move_to_first_child(ebml_r);\n+                            auto name_data = ebml.read_data(ebml_r);\n+                            ebml.move_to_parent(ebml_r);\n+                            auto nm = _str.unsafe_from_bytes(name_data);\n+                            name_opt = some[ast.ident](nm);\n+                        } else if (inner_tag.id ==\n+                                metadata.tag_items_def_id) {\n+                            ebml.move_to_first_child(ebml_r);\n+                            auto did_data = ebml.read_data(ebml_r);\n+                            ebml.move_to_parent(ebml_r);\n+                            auto did = parse_def_id(did_data);\n+                            did_opt = some[ast.def_id](did);\n+                        }\n+                        ebml.move_to_next_sibling(ebml_r);\n                     }\n-                    ebml.move_to_next_sibling(ebml_r);\n-                }\n-                ebml.move_to_parent(ebml_r);\n+                    ebml.move_to_parent(ebml_r);\n \n-                if (_str.eq(option.get[ast.ident](name_opt), name)) {\n-                    // Matched!\n-                    if (last) {\n-                        ret rr_ok(option.get[ast.def_id](did_opt));\n-                    }\n+                    if (_str.eq(option.get[ast.ident](name_opt), name)) {\n+                        // Matched!\n+                        if (last) {\n+                            ret rr_ok(option.get[ast.def_id](did_opt));\n+                        }\n \n-                    // Move to the module/item we found for the next iteration\n-                    // of the loop...\n-                    ebml.move_to_first_child(ebml_r);\n-                    found = true;\n+                        // Move to the module/item we found for the next\n+                        // iteration of the loop...\n+                        ebml.move_to_first_child(ebml_r);\n+                        found = true;\n+                    }\n                 }\n-\n                 ebml.move_to_next_sibling(ebml_r);\n             }\n "}]}