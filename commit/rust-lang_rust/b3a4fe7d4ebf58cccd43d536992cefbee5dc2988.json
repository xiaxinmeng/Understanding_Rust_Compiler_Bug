{"sha": "b3a4fe7d4ebf58cccd43d536992cefbee5dc2988", "node_id": "C_kwDOAAsO6NoAKGIzYTRmZTdkNGViZjU4Y2NjZDQzZDUzNjk5MmNlZmJlZTVkYzI5ODg", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-02-13T23:18:46Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-02-14T16:21:18Z"}, "message": "Pass `DepContext` and `QueryContext` by value when practical", "tree": {"sha": "4556b3722d825285242a93c20cbf3de70a62b913", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4556b3722d825285242a93c20cbf3de70a62b913"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3a4fe7d4ebf58cccd43d536992cefbee5dc2988", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3a4fe7d4ebf58cccd43d536992cefbee5dc2988", "html_url": "https://github.com/rust-lang/rust/commit/b3a4fe7d4ebf58cccd43d536992cefbee5dc2988", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3a4fe7d4ebf58cccd43d536992cefbee5dc2988/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bb6e60d1f1360234aae90c97964c0fa5524f141", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bb6e60d1f1360234aae90c97964c0fa5524f141", "html_url": "https://github.com/rust-lang/rust/commit/9bb6e60d1f1360234aae90c97964c0fa5524f141"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "84510fe218cf5a4ba2171d28a55b9bfc29b35fcc", "filename": "compiler/rustc_middle/src/dep_graph/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3a4fe7d4ebf58cccd43d536992cefbee5dc2988/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3a4fe7d4ebf58cccd43d536992cefbee5dc2988/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs?ref=b3a4fe7d4ebf58cccd43d536992cefbee5dc2988", "patch": "@@ -74,8 +74,8 @@ impl<'tcx> DepContext for TyCtxt<'tcx> {\n     type DepKind = DepKind;\n \n     #[inline]\n-    fn with_stable_hashing_context<R>(&self, f: impl FnOnce(StableHashingContext<'_>) -> R) -> R {\n-        TyCtxt::with_stable_hashing_context(*self, f)\n+    fn with_stable_hashing_context<R>(self, f: impl FnOnce(StableHashingContext<'_>) -> R) -> R {\n+        TyCtxt::with_stable_hashing_context(self, f)\n     }\n \n     #[inline]"}, {"sha": "c8e506cd11eb6bac781a45f54d8d6e1524ae1ba8", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b3a4fe7d4ebf58cccd43d536992cefbee5dc2988/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3a4fe7d4ebf58cccd43d536992cefbee5dc2988/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=b3a4fe7d4ebf58cccd43d536992cefbee5dc2988", "patch": "@@ -53,7 +53,7 @@ impl<'tcx> HasDepContext for QueryCtxt<'tcx> {\n }\n \n impl QueryContext for QueryCtxt<'_> {\n-    fn next_job_id(&self) -> QueryJobId {\n+    fn next_job_id(self) -> QueryJobId {\n         QueryJobId(\n             NonZeroU64::new(\n                 self.queries.jobs.fetch_add(1, rustc_data_structures::sync::Ordering::Relaxed),\n@@ -62,31 +62,31 @@ impl QueryContext for QueryCtxt<'_> {\n         )\n     }\n \n-    fn current_query_job(&self) -> Option<QueryJobId> {\n-        tls::with_related_context(**self, |icx| icx.query)\n+    fn current_query_job(self) -> Option<QueryJobId> {\n+        tls::with_related_context(*self, |icx| icx.query)\n     }\n \n-    fn try_collect_active_jobs(&self) -> Option<QueryMap<DepKind>> {\n-        self.queries.try_collect_active_jobs(**self)\n+    fn try_collect_active_jobs(self) -> Option<QueryMap<DepKind>> {\n+        self.queries.try_collect_active_jobs(*self)\n     }\n \n     // Interactions with on_disk_cache\n-    fn load_side_effects(&self, prev_dep_node_index: SerializedDepNodeIndex) -> QuerySideEffects {\n+    fn load_side_effects(self, prev_dep_node_index: SerializedDepNodeIndex) -> QuerySideEffects {\n         self.queries\n             .on_disk_cache\n             .as_ref()\n-            .map(|c| c.load_side_effects(**self, prev_dep_node_index))\n+            .map(|c| c.load_side_effects(*self, prev_dep_node_index))\n             .unwrap_or_default()\n     }\n \n-    fn store_side_effects(&self, dep_node_index: DepNodeIndex, side_effects: QuerySideEffects) {\n+    fn store_side_effects(self, dep_node_index: DepNodeIndex, side_effects: QuerySideEffects) {\n         if let Some(c) = self.queries.on_disk_cache.as_ref() {\n             c.store_side_effects(dep_node_index, side_effects)\n         }\n     }\n \n     fn store_side_effects_for_anon_node(\n-        &self,\n+        self,\n         dep_node_index: DepNodeIndex,\n         side_effects: QuerySideEffects,\n     ) {\n@@ -100,7 +100,7 @@ impl QueryContext for QueryCtxt<'_> {\n     /// captured during execution and the actual result.\n     #[inline(always)]\n     fn start_query<R>(\n-        &self,\n+        self,\n         token: QueryJobId,\n         depth_limit: bool,\n         diagnostics: Option<&Lock<ThinVec<Diagnostic>>>,\n@@ -109,14 +109,14 @@ impl QueryContext for QueryCtxt<'_> {\n         // The `TyCtxt` stored in TLS has the same global interner lifetime\n         // as `self`, so we use `with_related_context` to relate the 'tcx lifetimes\n         // when accessing the `ImplicitCtxt`.\n-        tls::with_related_context(**self, move |current_icx| {\n+        tls::with_related_context(*self, move |current_icx| {\n             if depth_limit && !self.recursion_limit().value_within_limit(current_icx.query_depth) {\n                 self.depth_limit_error(token);\n             }\n \n             // Update the `ImplicitCtxt` to point to our new query job.\n             let new_icx = ImplicitCtxt {\n-                tcx: **self,\n+                tcx: *self,\n                 query: Some(token),\n                 diagnostics,\n                 query_depth: current_icx.query_depth + depth_limit as usize,\n@@ -130,7 +130,7 @@ impl QueryContext for QueryCtxt<'_> {\n         })\n     }\n \n-    fn depth_limit_error(&self, job: QueryJobId) {\n+    fn depth_limit_error(self, job: QueryJobId) {\n         let mut span = None;\n         let mut layout_of_depth = None;\n         if let Some(map) = self.try_collect_active_jobs() {"}, {"sha": "6969f2dbef8b821a125c88fea022029d900a28b8", "filename": "compiler/rustc_query_system/src/dep_graph/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b3a4fe7d4ebf58cccd43d536992cefbee5dc2988/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3a4fe7d4ebf58cccd43d536992cefbee5dc2988/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs?ref=b3a4fe7d4ebf58cccd43d536992cefbee5dc2988", "patch": "@@ -23,7 +23,7 @@ pub trait DepContext: Copy {\n     type DepKind: self::DepKind;\n \n     /// Create a hashing context for hashing new results.\n-    fn with_stable_hashing_context<R>(&self, f: impl FnOnce(StableHashingContext<'_>) -> R) -> R;\n+    fn with_stable_hashing_context<R>(self, f: impl FnOnce(StableHashingContext<'_>) -> R) -> R;\n \n     /// Access the DepGraph.\n     fn dep_graph(&self) -> &DepGraph<Self::DepKind>;\n@@ -37,7 +37,7 @@ pub trait DepContext: Copy {\n     fn dep_kind_info(&self, dep_node: Self::DepKind) -> &DepKindStruct<Self>;\n \n     #[inline(always)]\n-    fn fingerprint_style(&self, kind: Self::DepKind) -> FingerprintStyle {\n+    fn fingerprint_style(self, kind: Self::DepKind) -> FingerprintStyle {\n         let data = self.dep_kind_info(kind);\n         if data.is_anon {\n             return FingerprintStyle::Opaque;\n@@ -47,7 +47,7 @@ pub trait DepContext: Copy {\n \n     #[inline(always)]\n     /// Return whether this kind always require evaluation.\n-    fn is_eval_always(&self, kind: Self::DepKind) -> bool {\n+    fn is_eval_always(self, kind: Self::DepKind) -> bool {\n         self.dep_kind_info(kind).is_eval_always\n     }\n "}, {"sha": "383c63cd2f8a75b500247eead1a9714524d4e52e", "filename": "compiler/rustc_query_system/src/query/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b3a4fe7d4ebf58cccd43d536992cefbee5dc2988/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3a4fe7d4ebf58cccd43d536992cefbee5dc2988/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs?ref=b3a4fe7d4ebf58cccd43d536992cefbee5dc2988", "patch": "@@ -101,22 +101,22 @@ impl QuerySideEffects {\n }\n \n pub trait QueryContext: HasDepContext {\n-    fn next_job_id(&self) -> QueryJobId;\n+    fn next_job_id(self) -> QueryJobId;\n \n     /// Get the query information from the TLS context.\n-    fn current_query_job(&self) -> Option<QueryJobId>;\n+    fn current_query_job(self) -> Option<QueryJobId>;\n \n-    fn try_collect_active_jobs(&self) -> Option<QueryMap<Self::DepKind>>;\n+    fn try_collect_active_jobs(self) -> Option<QueryMap<Self::DepKind>>;\n \n     /// Load side effects associated to the node in the previous session.\n-    fn load_side_effects(&self, prev_dep_node_index: SerializedDepNodeIndex) -> QuerySideEffects;\n+    fn load_side_effects(self, prev_dep_node_index: SerializedDepNodeIndex) -> QuerySideEffects;\n \n     /// Register diagnostics for the given node, for use in next session.\n-    fn store_side_effects(&self, dep_node_index: DepNodeIndex, side_effects: QuerySideEffects);\n+    fn store_side_effects(self, dep_node_index: DepNodeIndex, side_effects: QuerySideEffects);\n \n     /// Register diagnostics for the given node, for use in next session.\n     fn store_side_effects_for_anon_node(\n-        &self,\n+        self,\n         dep_node_index: DepNodeIndex,\n         side_effects: QuerySideEffects,\n     );\n@@ -125,12 +125,12 @@ pub trait QueryContext: HasDepContext {\n     /// new query job while it executes. It returns the diagnostics\n     /// captured during execution and the actual result.\n     fn start_query<R>(\n-        &self,\n+        self,\n         token: QueryJobId,\n         depth_limit: bool,\n         diagnostics: Option<&Lock<ThinVec<Diagnostic>>>,\n         compute: impl FnOnce() -> R,\n     ) -> R;\n \n-    fn depth_limit_error(&self, job: QueryJobId);\n+    fn depth_limit_error(self, job: QueryJobId);\n }"}]}