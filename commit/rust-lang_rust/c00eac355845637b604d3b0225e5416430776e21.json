{"sha": "c00eac355845637b604d3b0225e5416430776e21", "node_id": "C_kwDOAAsO6NoAKGMwMGVhYzM1NTg0NTYzN2I2MDRkM2IwMjI1ZTU0MTY0MzA3NzZlMjE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-15T11:46:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-15T11:46:00Z"}, "message": "Rollup merge of #104592 - ComputerDruid:async_check, r=compiler-errors\n\nEnsure async trait impls are async (or otherwise return an opaque type)\n\nAs a workaround for the full `#[refine]` semantics not being implemented\nyet, forbit returning a concrete future type like `Box<dyn Future>` or a\nmanually implemented Future.\n\n`-> impl Future` is still permitted; while that can also cause\naccidental refinement, that's behind a different feature gate\n(`return_position_impl_trait_in_trait`) and that problem exists\nregardless of whether the trait method is async, so will have to be\nsolved more generally.\n\nFixes https://github.com/rust-lang/rust/issues/102745", "tree": {"sha": "19a257317926672f232115b8d35e2e78ac824694", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19a257317926672f232115b8d35e2e78ac824694"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c00eac355845637b604d3b0225e5416430776e21", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjmwj4CRBK7hj4Ov3rIwAAN1wIALC+0yyCk2Ga+4ahJAoGzz3b\nnN/3DaPUuVDjGQ7HhrUb+M26hiAwvTNAO5H1GEm8mFlcVyJDAhr3ZQXn3rXvxivp\nmkt7g2HGm9PdklaEJCB5YcHh5hDnTi4g48amtY4oAoKzSFKzjvFQrtMcSaRM0UYl\nr4NoZNTDw9su+9FSKTrANcAQZ/FWFwagcTvdMFyOiVrN4CVM8RgrDBI8EtwU3wuG\nGacbsAV4rqCjKMBBH2GBgNa+I5zE9tEJJWu9OUaER2PADI5DuXx+XT1oDuaZBa++\ns7o0tqAs4YGd7O/mrdrGVFrqQKvWaETnMLX0Kjlzfi8Zz5/jup6FQ75X/DWvi7A=\n=WpJT\n-----END PGP SIGNATURE-----\n", "payload": "tree 19a257317926672f232115b8d35e2e78ac824694\nparent d67000e44e1b9908c81fc4d5de875608f1b80ae9\nparent da98ef9a5d0b8a4fb90e1d845506880fae9e7352\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1671104760 +0100\ncommitter GitHub <noreply@github.com> 1671104760 +0100\n\nRollup merge of #104592 - ComputerDruid:async_check, r=compiler-errors\n\nEnsure async trait impls are async (or otherwise return an opaque type)\n\nAs a workaround for the full `#[refine]` semantics not being implemented\nyet, forbit returning a concrete future type like `Box<dyn Future>` or a\nmanually implemented Future.\n\n`-> impl Future` is still permitted; while that can also cause\naccidental refinement, that's behind a different feature gate\n(`return_position_impl_trait_in_trait`) and that problem exists\nregardless of whether the trait method is async, so will have to be\nsolved more generally.\n\nFixes https://github.com/rust-lang/rust/issues/102745\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c00eac355845637b604d3b0225e5416430776e21", "html_url": "https://github.com/rust-lang/rust/commit/c00eac355845637b604d3b0225e5416430776e21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c00eac355845637b604d3b0225e5416430776e21/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d67000e44e1b9908c81fc4d5de875608f1b80ae9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d67000e44e1b9908c81fc4d5de875608f1b80ae9", "html_url": "https://github.com/rust-lang/rust/commit/d67000e44e1b9908c81fc4d5de875608f1b80ae9"}, {"sha": "da98ef9a5d0b8a4fb90e1d845506880fae9e7352", "url": "https://api.github.com/repos/rust-lang/rust/commits/da98ef9a5d0b8a4fb90e1d845506880fae9e7352", "html_url": "https://github.com/rust-lang/rust/commit/da98ef9a5d0b8a4fb90e1d845506880fae9e7352"}], "stats": {"total": 171, "additions": 146, "deletions": 25}, "files": [{"sha": "26cdf8a58f3fb5e975342ef93f2237c095a2932d", "filename": "compiler/rustc_error_messages/locales/en-US/hir_analysis.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c00eac355845637b604d3b0225e5416430776e21/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/c00eac355845637b604d3b0225e5416430776e21/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl?ref=c00eac355845637b604d3b0225e5416430776e21", "patch": "@@ -20,6 +20,10 @@ hir_analysis_lifetimes_or_bounds_mismatch_on_trait =\n     .where_label = this `where` clause might not match the one in the trait\n     .bounds_label = this bound might be missing in the impl\n \n+hir_analysis_async_trait_impl_should_be_async =\n+    method `{$method_name}` should be async because the method from the trait is async\n+    .trait_item_label = required because the trait method is async\n+\n hir_analysis_drop_impl_on_wrong_item =\n     the `Drop` trait may only be implemented for local structs, enums, and unions\n     .label = must be a struct, enum, or union in the current crate"}, {"sha": "6b9ce9a4599e2ce45ddd8e8479ec41f32d73d6b7", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c00eac355845637b604d3b0225e5416430776e21/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00eac355845637b604d3b0225e5416430776e21/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=c00eac355845637b604d3b0225e5416430776e21", "patch": "@@ -67,6 +67,10 @@ pub(crate) fn compare_impl_method<'tcx>(\n         return;\n     }\n \n+    if let Err(_) = compare_asyncness(tcx, impl_m, impl_m_span, trait_m, trait_item_span) {\n+        return;\n+    }\n+\n     if let Err(_) = compare_predicate_entailment(tcx, impl_m, impl_m_span, trait_m, impl_trait_ref)\n     {\n         return;\n@@ -323,6 +327,34 @@ fn compare_predicate_entailment<'tcx>(\n     Ok(())\n }\n \n+fn compare_asyncness<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    impl_m: &ty::AssocItem,\n+    impl_m_span: Span,\n+    trait_m: &ty::AssocItem,\n+    trait_item_span: Option<Span>,\n+) -> Result<(), ErrorGuaranteed> {\n+    if tcx.asyncness(trait_m.def_id) == hir::IsAsync::Async {\n+        match tcx.fn_sig(impl_m.def_id).skip_binder().output().kind() {\n+            ty::Alias(ty::Opaque, ..) => {\n+                // allow both `async fn foo()` and `fn foo() -> impl Future`\n+            }\n+            ty::Error(rustc_errors::ErrorGuaranteed { .. }) => {\n+                // We don't know if it's ok, but at least it's already an error.\n+            }\n+            _ => {\n+                return Err(tcx.sess.emit_err(crate::errors::AsyncTraitImplShouldBeAsync {\n+                    span: impl_m_span,\n+                    method_name: trait_m.name,\n+                    trait_item_span,\n+                }));\n+            }\n+        };\n+    }\n+\n+    Ok(())\n+}\n+\n #[instrument(skip(tcx), level = \"debug\", ret)]\n pub fn collect_trait_impl_trait_tys<'tcx>(\n     tcx: TyCtxt<'tcx>,"}, {"sha": "d383fcacb3a9c914ce0b862daf1386e8b52c453e", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c00eac355845637b604d3b0225e5416430776e21/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00eac355845637b604d3b0225e5416430776e21/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=c00eac355845637b604d3b0225e5416430776e21", "patch": "@@ -51,6 +51,17 @@ pub struct LifetimesOrBoundsMismatchOnTrait {\n     pub ident: Ident,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_async_trait_impl_should_be_async)]\n+pub struct AsyncTraitImplShouldBeAsync {\n+    #[primary_span]\n+    // #[label]\n+    pub span: Span,\n+    #[label(trait_item_label)]\n+    pub trait_item_span: Option<Span>,\n+    pub method_name: Symbol,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(hir_analysis_drop_impl_on_wrong_item, code = \"E0120\")]\n pub struct DropImplOnWrongItem {"}, {"sha": "1b1b3cffd58f3d81f2eccfd6d53a374a64c272aa", "filename": "src/test/ui/async-await/in-trait/async-example-desugared-boxed.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c00eac355845637b604d3b0225e5416430776e21/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00eac355845637b604d3b0225e5416430776e21/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.rs?ref=c00eac355845637b604d3b0225e5416430776e21", "patch": "@@ -1,4 +1,3 @@\n-// check-pass\n // edition: 2021\n \n #![feature(async_fn_in_trait)]\n@@ -13,11 +12,9 @@ trait MyTrait {\n }\n \n impl MyTrait for i32 {\n-    // This will break once a PR that implements #102745 is merged\n     fn foo(&self) -> Pin<Box<dyn Future<Output = i32> + '_>> {\n-        Box::pin(async {\n-            *self\n-        })\n+        //~^ ERROR method `foo` should be async\n+        Box::pin(async { *self })\n     }\n }\n "}, {"sha": "60fa534a64f02d54a45e716ef9e637ea569f44c6", "filename": "src/test/ui/async-await/in-trait/async-example-desugared-boxed.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c00eac355845637b604d3b0225e5416430776e21/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c00eac355845637b604d3b0225e5416430776e21/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.stderr?ref=c00eac355845637b604d3b0225e5416430776e21", "patch": "@@ -0,0 +1,11 @@\n+error: method `foo` should be async because the method from the trait is async\n+  --> $DIR/async-example-desugared-boxed.rs:15:5\n+   |\n+LL |     async fn foo(&self) -> i32;\n+   |     --------------------------- required because the trait method is async\n+...\n+LL |     fn foo(&self) -> Pin<Box<dyn Future<Output = i32> + '_>> {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "81e1e59a36249ba28010a87152fdbaac480ae7ca", "filename": "src/test/ui/async-await/in-trait/async-example-desugared-extra.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c00eac355845637b604d3b0225e5416430776e21/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-extra.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00eac355845637b604d3b0225e5416430776e21/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-extra.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-extra.rs?ref=c00eac355845637b604d3b0225e5416430776e21", "patch": "@@ -0,0 +1,37 @@\n+// check-pass\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::future::Future;\n+use std::pin::Pin;\n+use std::task::Poll;\n+\n+trait MyTrait {\n+    async fn foo(&self) -> i32;\n+}\n+\n+#[derive(Clone)]\n+struct MyFuture(i32);\n+\n+impl Future for MyFuture {\n+    type Output = i32;\n+    fn poll(\n+        self: Pin<&mut Self>,\n+        _: &mut std::task::Context<'_>,\n+    ) -> Poll<<Self as Future>::Output> {\n+        Poll::Ready(self.0)\n+    }\n+}\n+\n+impl MyTrait for i32 {\n+    // FIXME: this should eventually require `#[refine]` to compile, because it also provides\n+    // `Clone`.\n+    fn foo(&self) -> impl Future<Output = i32> + Clone {\n+        MyFuture(*self)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "71473e7455fd6018968ce29f15090b1603bce6ae", "filename": "src/test/ui/async-await/in-trait/async-example-desugared-manual.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c00eac355845637b604d3b0225e5416430776e21/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-manual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00eac355845637b604d3b0225e5416430776e21/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-manual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-manual.rs?ref=c00eac355845637b604d3b0225e5416430776e21", "patch": "@@ -0,0 +1,29 @@\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::future::Future;\n+use std::task::Poll;\n+\n+trait MyTrait {\n+    async fn foo(&self) -> i32;\n+}\n+\n+struct MyFuture;\n+impl Future for MyFuture {\n+    type Output = i32;\n+    fn poll(self: std::pin::Pin<&mut Self>, _: &mut std::task::Context<'_>) -> Poll<Self::Output> {\n+        Poll::Ready(0)\n+    }\n+}\n+\n+impl MyTrait for u32 {\n+    fn foo(&self) -> MyFuture {\n+        //~^ ERROR method `foo` should be async\n+        MyFuture\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "567a36a86d1911fca824523bf7c30065b25d3246", "filename": "src/test/ui/async-await/in-trait/async-example-desugared-manual.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c00eac355845637b604d3b0225e5416430776e21/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-manual.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c00eac355845637b604d3b0225e5416430776e21/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-manual.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-manual.stderr?ref=c00eac355845637b604d3b0225e5416430776e21", "patch": "@@ -0,0 +1,11 @@\n+error: method `foo` should be async because the method from the trait is async\n+  --> $DIR/async-example-desugared-manual.rs:23:5\n+   |\n+LL |     async fn foo(&self) -> i32;\n+   |     --------------------------- required because the trait method is async\n+...\n+LL |     fn foo(&self) -> MyFuture {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "fb92ec786746f9cb9ba3c18b0c9a239da183fa1e", "filename": "src/test/ui/async-await/in-trait/async-example-desugared.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c00eac355845637b604d3b0225e5416430776e21/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00eac355845637b604d3b0225e5416430776e21/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared.rs?ref=c00eac355845637b604d3b0225e5416430776e21", "patch": "@@ -12,11 +12,8 @@ trait MyTrait {\n }\n \n impl MyTrait for i32 {\n-    // This will break once a PR that implements #102745 is merged\n     fn foo(&self) -> impl Future<Output = i32> + '_ {\n-        async {\n-            *self\n-        }\n+        async { *self }\n     }\n }\n "}, {"sha": "9598d53bce8b2ec02cd2f6e91086eb8560b90595", "filename": "src/test/ui/async-await/in-trait/fn-not-async-err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c00eac355845637b604d3b0225e5416430776e21/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00eac355845637b604d3b0225e5416430776e21/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err.rs?ref=c00eac355845637b604d3b0225e5416430776e21", "patch": "@@ -9,7 +9,7 @@ trait MyTrait {\n \n impl MyTrait for i32 {\n     fn foo(&self) -> i32 {\n-        //~^ ERROR: `i32` is not a future [E0277]\n+        //~^ ERROR: method `foo` should be async\n         *self\n     }\n }"}, {"sha": "579801d0f3975cf89a8bbe03eae3dd7f9837fadc", "filename": "src/test/ui/async-await/in-trait/fn-not-async-err.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c00eac355845637b604d3b0225e5416430776e21/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c00eac355845637b604d3b0225e5416430776e21/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err.stderr?ref=c00eac355845637b604d3b0225e5416430776e21", "patch": "@@ -1,17 +1,11 @@\n-error[E0277]: `i32` is not a future\n-  --> $DIR/fn-not-async-err.rs:11:22\n-   |\n-LL |     fn foo(&self) -> i32 {\n-   |                      ^^^ `i32` is not a future\n-   |\n-   = help: the trait `Future` is not implemented for `i32`\n-   = note: i32 must be a future or must implement `IntoFuture` to be awaited\n-note: required by a bound in `MyTrait::foo::{opaque#0}`\n-  --> $DIR/fn-not-async-err.rs:7:28\n+error: method `foo` should be async because the method from the trait is async\n+  --> $DIR/fn-not-async-err.rs:11:5\n    |\n LL |     async fn foo(&self) -> i32;\n-   |                            ^^^ required by this bound in `MyTrait::foo::{opaque#0}`\n+   |     --------------------------- required because the trait method is async\n+...\n+LL |     fn foo(&self) -> i32 {\n+   |     ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "2c4ed5535801e95db3c17300b6784db11b3fbeb4", "filename": "src/test/ui/async-await/in-trait/fn-not-async-err2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c00eac355845637b604d3b0225e5416430776e21/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00eac355845637b604d3b0225e5416430776e21/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.rs?ref=c00eac355845637b604d3b0225e5416430776e21", "patch": "@@ -12,9 +12,7 @@ trait MyTrait {\n impl MyTrait for i32 {\n     fn foo(&self) -> impl Future<Output = i32> {\n         //~^ ERROR `impl Trait` only allowed in function and inherent method return types, not in `impl` method return [E0562]\n-        async {\n-            *self\n-        }\n+        async { *self }\n     }\n }\n "}]}