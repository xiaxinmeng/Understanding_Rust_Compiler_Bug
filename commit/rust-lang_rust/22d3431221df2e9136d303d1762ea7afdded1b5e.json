{"sha": "22d3431221df2e9136d303d1762ea7afdded1b5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZDM0MzEyMjFkZjJlOTEzNmQzMDNkMTc2MmVhN2FmZGRlZDFiNWU=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-11-25T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-11-25T00:00:00Z"}, "message": "Validate use of parameters in naked functions\n\n* Reject use of parameters inside naked function body.\n* Reject use of patterns inside function parameters, to emphasize role\n  of parameters a signature declaration (mirroring existing behaviour\n  for function declarations) and avoid generating code introducing\n  specified bindings.", "tree": {"sha": "7968a31ba31fa97d8e9c569a39268f7654f1e560", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7968a31ba31fa97d8e9c569a39268f7654f1e560"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22d3431221df2e9136d303d1762ea7afdded1b5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22d3431221df2e9136d303d1762ea7afdded1b5e", "html_url": "https://github.com/rust-lang/rust/commit/22d3431221df2e9136d303d1762ea7afdded1b5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22d3431221df2e9136d303d1762ea7afdded1b5e/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "773ddbada7183b57928a1d2f5e0722b7f53a3bf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/773ddbada7183b57928a1d2f5e0722b7f53a3bf7", "html_url": "https://github.com/rust-lang/rust/commit/773ddbada7183b57928a1d2f5e0722b7f53a3bf7"}], "stats": {"total": 270, "additions": 221, "deletions": 49}, "files": [{"sha": "1f820024f77ef3edab35264f7cc0c7a68d02c96b", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22d3431221df2e9136d303d1762ea7afdded1b5e/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d3431221df2e9136d303d1762ea7afdded1b5e/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=22d3431221df2e9136d303d1762ea7afdded1b5e", "patch": "@@ -816,6 +816,7 @@ fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n                     let local_def_id = tcx.hir().local_def_id(module);\n                     tcx.ensure().check_mod_loops(local_def_id);\n                     tcx.ensure().check_mod_attrs(local_def_id);\n+                    tcx.ensure().check_mod_naked_functions(local_def_id);\n                     tcx.ensure().check_mod_unstable_api_usage(local_def_id);\n                     tcx.ensure().check_mod_const_bodies(local_def_id);\n                 });"}, {"sha": "107336c5cee8e2d343aa3f71b94c00964e0a0238", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22d3431221df2e9136d303d1762ea7afdded1b5e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d3431221df2e9136d303d1762ea7afdded1b5e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=22d3431221df2e9136d303d1762ea7afdded1b5e", "patch": "@@ -635,6 +635,10 @@ rustc_queries! {\n             desc { |tcx| \"checking loops in {}\", describe_as_module(key, tcx) }\n         }\n \n+        query check_mod_naked_functions(key: LocalDefId) -> () {\n+            desc { |tcx| \"checking naked functions in {}\", describe_as_module(key, tcx) }\n+        }\n+\n         query check_mod_item_types(key: LocalDefId) -> () {\n             desc { |tcx| \"checking item types in {}\", describe_as_module(key, tcx) }\n         }"}, {"sha": "9759a500e061980d7d4898459f68a227a7553fd4", "filename": "compiler/rustc_passes/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22d3431221df2e9136d303d1762ea7afdded1b5e/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d3431221df2e9136d303d1762ea7afdded1b5e/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib.rs?ref=22d3431221df2e9136d303d1762ea7afdded1b5e", "patch": "@@ -7,6 +7,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(const_fn)]\n #![feature(const_panic)]\n+#![feature(crate_visibility_modifier)]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n #![feature(or_patterns)]\n@@ -32,6 +33,7 @@ pub mod layout_test;\n mod lib_features;\n mod liveness;\n pub mod loops;\n+mod naked_functions;\n mod reachable;\n mod region;\n pub mod stability;\n@@ -46,6 +48,7 @@ pub fn provide(providers: &mut Providers) {\n     lang_items::provide(providers);\n     lib_features::provide(providers);\n     loops::provide(providers);\n+    naked_functions::provide(providers);\n     liveness::provide(providers);\n     intrinsicck::provide(providers);\n     reachable::provide(providers);"}, {"sha": "6ef45cdd391de6e30ac5f6ddadcdb7168d079ce9", "filename": "compiler/rustc_passes/src/naked_functions.rs", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/22d3431221df2e9136d303d1762ea7afdded1b5e/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d3431221df2e9136d303d1762ea7afdded1b5e/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs?ref=22d3431221df2e9136d303d1762ea7afdded1b5e", "patch": "@@ -0,0 +1,113 @@\n+use rustc_hir as hir;\n+use rustc_hir::def_id::LocalDefId;\n+use rustc_hir::intravisit::{ErasedMap, FnKind, NestedVisitorMap, Visitor};\n+use rustc_middle::ty::query::Providers;\n+use rustc_middle::ty::TyCtxt;\n+use rustc_span::symbol::sym;\n+use rustc_span::Span;\n+\n+fn check_mod_naked_functions(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n+    tcx.hir().visit_item_likes_in_module(\n+        module_def_id,\n+        &mut CheckNakedFunctions { tcx }.as_deep_visitor(),\n+    );\n+}\n+\n+crate fn provide(providers: &mut Providers) {\n+    *providers = Providers { check_mod_naked_functions, ..*providers };\n+}\n+\n+struct CheckNakedFunctions<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+}\n+\n+impl<'tcx> Visitor<'tcx> for CheckNakedFunctions<'tcx> {\n+    type Map = ErasedMap<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::None\n+    }\n+\n+    fn visit_fn(\n+        &mut self,\n+        fk: FnKind<'v>,\n+        _fd: &'tcx hir::FnDecl<'tcx>,\n+        body_id: hir::BodyId,\n+        _span: Span,\n+        _hir_id: hir::HirId,\n+    ) {\n+        match fk {\n+            // Rejected during attribute check. Do not validate further.\n+            FnKind::Closure(..) => return,\n+            FnKind::ItemFn(..) | FnKind::Method(..) => {}\n+        }\n+\n+        let naked = fk.attrs().iter().any(|attr| attr.has_name(sym::naked));\n+        if naked {\n+            let body = self.tcx.hir().body(body_id);\n+            check_params(self.tcx, body);\n+            check_body(self.tcx, body);\n+        }\n+    }\n+}\n+\n+/// Checks that parameters don't use patterns. Mirrors the checks for function declarations.\n+fn check_params(tcx: TyCtxt<'_>, body: &hir::Body<'_>) {\n+    for param in body.params {\n+        match param.pat.kind {\n+            hir::PatKind::Wild\n+            | hir::PatKind::Binding(hir::BindingAnnotation::Unannotated, _, _, None) => {}\n+            _ => {\n+                tcx.sess\n+                    .struct_span_err(\n+                        param.pat.span,\n+                        \"patterns not allowed in naked function parameters\",\n+                    )\n+                    .emit();\n+            }\n+        }\n+    }\n+}\n+\n+/// Checks that function parameters aren't referenced in the function body.\n+fn check_body<'tcx>(tcx: TyCtxt<'tcx>, body: &'tcx hir::Body<'tcx>) {\n+    let mut params = hir::HirIdSet::default();\n+    for param in body.params {\n+        param.pat.each_binding(|_binding_mode, hir_id, _span, _ident| {\n+            params.insert(hir_id);\n+        });\n+    }\n+    CheckBody { tcx, params }.visit_body(body);\n+}\n+\n+struct CheckBody<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    params: hir::HirIdSet,\n+}\n+\n+impl<'tcx> Visitor<'tcx> for CheckBody<'tcx> {\n+    type Map = ErasedMap<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::None\n+    }\n+\n+    fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {\n+        if let hir::ExprKind::Path(hir::QPath::Resolved(\n+            _,\n+            hir::Path { res: hir::def::Res::Local(var_hir_id), .. },\n+        )) = expr.kind\n+        {\n+            if self.params.contains(var_hir_id) {\n+                self.tcx\n+                    .sess\n+                    .struct_span_err(\n+                        expr.span,\n+                        \"use of parameters not allowed inside naked functions\",\n+                    )\n+                    .emit();\n+            }\n+        }\n+        hir::intravisit::walk_expr(self, expr);\n+    }\n+}"}, {"sha": "43a6be465bcf83291264975f4b414fc2eec967e6", "filename": "src/test/codegen/naked-functions.rs", "status": "modified", "additions": 5, "deletions": 49, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/22d3431221df2e9136d303d1762ea7afdded1b5e/src%2Ftest%2Fcodegen%2Fnaked-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d3431221df2e9136d303d1762ea7afdded1b5e/src%2Ftest%2Fcodegen%2Fnaked-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnaked-functions.rs?ref=22d3431221df2e9136d303d1762ea7afdded1b5e", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -C no-prepopulate-passes -Zmir-opt-level=0\n+// compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]\n #![feature(naked_functions)]\n@@ -15,11 +15,9 @@ pub fn naked_empty() {\n // CHECK: Function Attrs: naked\n #[no_mangle]\n #[naked]\n-// CHECK-NEXT: define void @naked_with_args(i{{[0-9]+( %0)?}})\n+// CHECK-NEXT: define void @naked_with_args(i{{[0-9]+( %a)?}})\n pub fn naked_with_args(a: isize) {\n     // CHECK-NEXT: {{.+}}:\n-    // CHECK-NEXT: %a = alloca i{{[0-9]+}}\n-    &a; // keep variable in an alloca\n     // CHECK: ret void\n }\n \n@@ -34,53 +32,11 @@ pub fn naked_with_return() -> isize {\n }\n \n // CHECK: Function Attrs: naked\n-// CHECK-NEXT: define i{{[0-9]+}} @naked_with_args_and_return(i{{[0-9]+( %0)?}})\n+// CHECK-NEXT: define i{{[0-9]+}} @naked_with_args_and_return(i{{[0-9]+( %a)?}})\n #[no_mangle]\n #[naked]\n pub fn naked_with_args_and_return(a: isize) -> isize {\n     // CHECK-NEXT: {{.+}}:\n-    // CHECK-NEXT: %a = alloca i{{[0-9]+}}\n-    &a; // keep variable in an alloca\n-    // CHECK: ret i{{[0-9]+}} %{{[0-9]+}}\n-    a\n-}\n-\n-// CHECK: Function Attrs: naked\n-// CHECK-NEXT: define void @naked_recursive()\n-#[no_mangle]\n-#[naked]\n-pub fn naked_recursive() {\n-    // CHECK-NEXT: {{.+}}:\n-    // CHECK-NEXT: call void @naked_empty()\n-\n-    // FIXME(#39685) Avoid one block per call.\n-    // CHECK-NEXT: br label %bb1\n-    // CHECK: bb1:\n-\n-    naked_empty();\n-\n-    // CHECK-NEXT: %_4 = call i{{[0-9]+}} @naked_with_return()\n-\n-    // FIXME(#39685) Avoid one block per call.\n-    // CHECK-NEXT: br label %bb2\n-    // CHECK: bb2:\n-\n-    // CHECK-NEXT: %_3 = call i{{[0-9]+}} @naked_with_args_and_return(i{{[0-9]+}} %_4)\n-\n-    // FIXME(#39685) Avoid one block per call.\n-    // CHECK-NEXT: br label %bb3\n-    // CHECK: bb3:\n-\n-    // CHECK-NEXT: call void @naked_with_args(i{{[0-9]+}} %_3)\n-\n-    // FIXME(#39685) Avoid one block per call.\n-    // CHECK-NEXT: br label %bb4\n-    // CHECK: bb4:\n-\n-    naked_with_args(\n-        naked_with_args_and_return(\n-            naked_with_return()\n-        )\n-    );\n-    // CHECK-NEXT: ret void\n+    // CHECK: ret i{{[0-9]+}} 0\n+    0\n }"}, {"sha": "46a4fc11e5a7ca00cf4e943083726af45648f0cf", "filename": "src/test/ui/asm/naked-params.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/22d3431221df2e9136d303d1762ea7afdded1b5e/src%2Ftest%2Fui%2Fasm%2Fnaked-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d3431221df2e9136d303d1762ea7afdded1b5e/src%2Ftest%2Fui%2Fasm%2Fnaked-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-params.rs?ref=22d3431221df2e9136d303d1762ea7afdded1b5e", "patch": "@@ -0,0 +1,51 @@\n+// Check that use of function parameters is validate in naked functions.\n+//\n+// ignore-wasm32 asm unsupported\n+#![feature(asm)]\n+#![feature(naked_functions)]\n+#![feature(or_patterns)]\n+#![crate_type = \"lib\"]\n+\n+#[repr(C)]\n+pub struct P { x: u8, y: u16 }\n+\n+#[naked]\n+pub unsafe extern \"C\" fn f(\n+    mut a: u32,\n+    //~^ ERROR patterns not allowed in naked function parameters\n+    &b: &i32,\n+    //~^ ERROR patterns not allowed in naked function parameters\n+    (None | Some(_)): Option<std::ptr::NonNull<u8>>,\n+    //~^ ERROR patterns not allowed in naked function parameters\n+    P { x, y }: P,\n+    //~^ ERROR patterns not allowed in naked function parameters\n+) {\n+    asm!(\"\", options(noreturn))\n+}\n+\n+#[naked]\n+pub unsafe extern \"C\" fn inc(a: u32) -> u32 {\n+    a + 1\n+    //~^ ERROR use of parameters not allowed inside naked functions\n+}\n+\n+#[naked]\n+pub unsafe extern \"C\" fn inc_asm(a: u32) -> u32 {\n+    asm!(\"/* {0} */\", in(reg) a, options(noreturn));\n+    //~^ ERROR use of parameters not allowed inside naked functions\n+}\n+\n+#[naked]\n+pub unsafe extern \"C\" fn sum(x: u32, y: u32) -> u32 {\n+    // FIXME: Should be detected by asm-only check.\n+    (|| { x + y})()\n+}\n+\n+pub fn outer(x: u32) -> extern \"C\" fn(usize) -> usize {\n+    #[naked]\n+    pub extern \"C\" fn inner(y: usize) -> usize {\n+        *&y\n+        //~^ ERROR use of parameters not allowed inside naked functions\n+    }\n+    inner\n+}"}, {"sha": "1a99e5109fcdb4c2538112d5e04ac7762f2bcec3", "filename": "src/test/ui/asm/naked-params.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/22d3431221df2e9136d303d1762ea7afdded1b5e/src%2Ftest%2Fui%2Fasm%2Fnaked-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22d3431221df2e9136d303d1762ea7afdded1b5e/src%2Ftest%2Fui%2Fasm%2Fnaked-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-params.stderr?ref=22d3431221df2e9136d303d1762ea7afdded1b5e", "patch": "@@ -0,0 +1,44 @@\n+error: patterns not allowed in naked function parameters\n+  --> $DIR/naked-params.rs:14:5\n+   |\n+LL |     mut a: u32,\n+   |     ^^^^^\n+\n+error: patterns not allowed in naked function parameters\n+  --> $DIR/naked-params.rs:16:5\n+   |\n+LL |     &b: &i32,\n+   |     ^^\n+\n+error: patterns not allowed in naked function parameters\n+  --> $DIR/naked-params.rs:18:6\n+   |\n+LL |     (None | Some(_)): Option<std::ptr::NonNull<u8>>,\n+   |      ^^^^^^^^^^^^^^\n+\n+error: patterns not allowed in naked function parameters\n+  --> $DIR/naked-params.rs:20:5\n+   |\n+LL |     P { x, y }: P,\n+   |     ^^^^^^^^^^\n+\n+error: use of parameters not allowed inside naked functions\n+  --> $DIR/naked-params.rs:28:5\n+   |\n+LL |     a + 1\n+   |     ^\n+\n+error: use of parameters not allowed inside naked functions\n+  --> $DIR/naked-params.rs:34:31\n+   |\n+LL |     asm!(\"/* {0} */\", in(reg) a, options(noreturn));\n+   |                               ^\n+\n+error: use of parameters not allowed inside naked functions\n+  --> $DIR/naked-params.rs:47:11\n+   |\n+LL |         *&y\n+   |           ^\n+\n+error: aborting due to 7 previous errors\n+"}]}