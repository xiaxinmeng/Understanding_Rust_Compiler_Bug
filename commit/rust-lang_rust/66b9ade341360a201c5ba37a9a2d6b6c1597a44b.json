{"sha": "66b9ade341360a201c5ba37a9a2d6b6c1597a44b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2YjlhZGUzNDEzNjBhMjAxYzViYTM3YTlhMmQ2YjZjMTU5N2E0NGI=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-01T01:27:12Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-11T03:13:44Z"}, "message": "Strip `#[test]` nodes during `cfg` processing on non-test builds.", "tree": {"sha": "5d6bde398410e183c477459b0be1222da8890f9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d6bde398410e183c477459b0be1222da8890f9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66b9ade341360a201c5ba37a9a2d6b6c1597a44b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66b9ade341360a201c5ba37a9a2d6b6c1597a44b", "html_url": "https://github.com/rust-lang/rust/commit/66b9ade341360a201c5ba37a9a2d6b6c1597a44b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66b9ade341360a201c5ba37a9a2d6b6c1597a44b/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0554abac637800415bb1b30d8656898552a55ea0", "url": "https://api.github.com/repos/rust-lang/rust/commits/0554abac637800415bb1b30d8656898552a55ea0", "html_url": "https://github.com/rust-lang/rust/commit/0554abac637800415bb1b30d8656898552a55ea0"}], "stats": {"total": 36, "additions": 20, "deletions": 16}, "files": [{"sha": "af68b7632dd18a9c5b8d4286cf68fb851a76ccdd", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66b9ade341360a201c5ba37a9a2d6b6c1597a44b/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66b9ade341360a201c5ba37a9a2d6b6c1597a44b/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=66b9ade341360a201c5ba37a9a2d6b6c1597a44b", "patch": "@@ -582,6 +582,7 @@ pub fn phase_2_configure_and_expand<'a>(sess: &Session,\n         sess.track_errors(|| {\n             syntax::config::strip_unconfigured_items(sess.diagnostic(),\n                                                      krate,\n+                                                     sess.opts.test,\n                                                      &mut feature_gated_cfgs)\n         })\n     })?;\n@@ -692,6 +693,7 @@ pub fn phase_2_configure_and_expand<'a>(sess: &Session,\n             features: Some(&features),\n             recursion_limit: sess.recursion_limit.get(),\n             trace_mac: sess.opts.debugging_opts.trace_macros,\n+            should_test: sess.opts.test,\n         };\n         let mut loader = macro_import::MacroLoader::new(sess, &cstore, crate_name);\n         let mut ecx = syntax::ext::base::ExtCtxt::new(&sess.parse_sess,"}, {"sha": "5ede9badd6be31ee15f6a9d21fe48ff1498b167b", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/66b9ade341360a201c5ba37a9a2d6b6c1597a44b/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66b9ade341360a201c5ba37a9a2d6b6c1597a44b/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=66b9ade341360a201c5ba37a9a2d6b6c1597a44b", "patch": "@@ -42,16 +42,19 @@ pub trait CfgFolder: fold::Folder {\n /// configuration.\n pub struct StripUnconfigured<'a> {\n     diag: CfgDiagReal<'a, 'a>,\n+    should_test: bool,\n     config: &'a ast::CrateConfig,\n }\n \n impl<'a> StripUnconfigured<'a> {\n     pub fn new(config: &'a ast::CrateConfig,\n+               should_test: bool,\n                diagnostic: &'a Handler,\n                feature_gated_cfgs: &'a mut Vec<GatedCfgAttr>)\n                -> Self {\n         StripUnconfigured {\n             config: config,\n+            should_test: should_test,\n             diag: CfgDiagReal { diag: diagnostic, feature_gated_cfgs: feature_gated_cfgs },\n         }\n     }\n@@ -96,6 +99,11 @@ impl<'a> CfgFolder for StripUnconfigured<'a> {\n     // configuration based on the item's attributes\n     fn in_cfg(&mut self, attrs: &[ast::Attribute]) -> bool {\n         attrs.iter().all(|attr| {\n+            // When not compiling with --test we should not compile the #[test] functions\n+            if !self.should_test && is_test_or_bench(attr) {\n+                return false;\n+            }\n+\n             let mis = match attr.node.value.node {\n                 ast::MetaItemKind::List(_, ref mis) if is_cfg(&attr) => mis,\n                 _ => return true\n@@ -135,12 +143,12 @@ impl<'a> CfgFolder for StripUnconfigured<'a> {\n \n // Support conditional compilation by transforming the AST, stripping out\n // any items that do not belong in the current configuration\n-pub fn strip_unconfigured_items(diagnostic: &Handler, krate: ast::Crate,\n+pub fn strip_unconfigured_items(diagnostic: &Handler, krate: ast::Crate, should_test: bool,\n                                 feature_gated_cfgs: &mut Vec<GatedCfgAttr>)\n                                 -> ast::Crate\n {\n     let config = &krate.config.clone();\n-    StripUnconfigured::new(config, diagnostic, feature_gated_cfgs).fold_crate(krate)\n+    StripUnconfigured::new(config, should_test, diagnostic, feature_gated_cfgs).fold_crate(krate)\n }\n \n impl<T: CfgFolder> fold::Folder for T {\n@@ -278,6 +286,10 @@ fn is_cfg(attr: &ast::Attribute) -> bool {\n     attr.check_name(\"cfg\")\n }\n \n+fn is_test_or_bench(attr: &ast::Attribute) -> bool {\n+    attr.check_name(\"test\") || attr.check_name(\"bench\")\n+}\n+\n pub trait CfgDiag {\n     fn emit_error<F>(&mut self, f: F) where F: FnMut(&Handler);\n     fn flag_gated<F>(&mut self, f: F) where F: FnMut(&mut Vec<GatedCfgAttr>);"}, {"sha": "31971842d63fc72f7075d828678f95a36aa54a90", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/66b9ade341360a201c5ba37a9a2d6b6c1597a44b/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66b9ade341360a201c5ba37a9a2d6b6c1597a44b/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=66b9ade341360a201c5ba37a9a2d6b6c1597a44b", "patch": "@@ -1001,6 +1001,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n \n     fn strip_unconfigured(&mut self) -> StripUnconfigured {\n         StripUnconfigured::new(&self.cx.cfg,\n+                               self.cx.ecfg.should_test,\n                                &self.cx.parse_sess.span_diagnostic,\n                                self.cx.feature_gated_cfgs)\n     }\n@@ -1106,6 +1107,7 @@ pub struct ExpansionConfig<'feat> {\n     pub features: Option<&'feat Features>,\n     pub recursion_limit: usize,\n     pub trace_mac: bool,\n+    pub should_test: bool, // If false, strip `#[test]` nodes\n }\n \n macro_rules! feature_tests {\n@@ -1128,6 +1130,7 @@ impl<'feat> ExpansionConfig<'feat> {\n             features: None,\n             recursion_limit: 64,\n             trace_mac: false,\n+            should_test: false,\n         }\n     }\n "}, {"sha": "6e29505f00aaddd9de120ca945d9a6948da62ed3", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/66b9ade341360a201c5ba37a9a2d6b6c1597a44b/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66b9ade341360a201c5ba37a9a2d6b6c1597a44b/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=66b9ade341360a201c5ba37a9a2d6b6c1597a44b", "patch": "@@ -81,7 +81,7 @@ pub fn modify_for_testing(sess: &ParseSess,\n     if should_test {\n         generate_test_harness(sess, reexport_test_harness_main, krate, span_diagnostic)\n     } else {\n-        strip_test_functions(krate)\n+        krate\n     }\n }\n \n@@ -306,19 +306,6 @@ fn generate_test_harness(sess: &ParseSess,\n     return res;\n }\n \n-fn strip_test_functions(krate: ast::Crate) -> ast::Crate {\n-    // When not compiling with --test we should not compile the\n-    // #[test] functions\n-    struct StripTests;\n-    impl config::CfgFolder for StripTests {\n-        fn in_cfg(&mut self, attrs: &[ast::Attribute]) -> bool {\n-            !attr::contains_name(attrs, \"test\") && !attr::contains_name(attrs, \"bench\")\n-        }\n-    }\n-\n-    StripTests.fold_crate(krate)\n-}\n-\n /// Craft a span that will be ignored by the stability lint's\n /// call to codemap's is_internal check.\n /// The expanded code calls some unstable functions in the test crate."}]}