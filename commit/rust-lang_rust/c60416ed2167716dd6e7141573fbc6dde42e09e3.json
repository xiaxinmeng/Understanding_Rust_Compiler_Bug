{"sha": "c60416ed2167716dd6e7141573fbc6dde42e09e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MDQxNmVkMjE2NzcxNmRkNmU3MTQxNTczZmJjNmRkZTQyZTA5ZTM=", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2020-02-09T04:21:37Z"}, "committer": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2020-02-09T04:21:37Z"}, "message": "deps: update rustc-ap to v642.0.0", "tree": {"sha": "621aabfd04dae5bd57c240d4e1febc7a17f43983", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/621aabfd04dae5bd57c240d4e1febc7a17f43983"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c60416ed2167716dd6e7141573fbc6dde42e09e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c60416ed2167716dd6e7141573fbc6dde42e09e3", "html_url": "https://github.com/rust-lang/rust/commit/c60416ed2167716dd6e7141573fbc6dde42e09e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c60416ed2167716dd6e7141573fbc6dde42e09e3/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1838235248bbde125bbc6c12fb493e1979088bb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1838235248bbde125bbc6c12fb493e1979088bb5", "html_url": "https://github.com/rust-lang/rust/commit/1838235248bbde125bbc6c12fb493e1979088bb5"}], "stats": {"total": 1174, "additions": 736, "deletions": 438}, "files": [{"sha": "094fcfd384b47f8bbc8f6f32d077bb297566dca4", "filename": "Cargo.lock", "status": "modified", "additions": 244, "deletions": 115, "changes": 359, "blob_url": "https://github.com/rust-lang/rust/blob/c60416ed2167716dd6e7141573fbc6dde42e09e3/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c60416ed2167716dd6e7141573fbc6dde42e09e3/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c60416ed2167716dd6e7141573fbc6dde42e09e3", "patch": "@@ -42,7 +42,7 @@ name = \"atty\"\n version = \"0.2.13\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.65 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -58,7 +58,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"backtrace-sys 0.1.32 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.65 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-demangle 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -68,7 +68,7 @@ version = \"0.1.32\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cc 1.0.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.65 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -165,10 +165,10 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"crossbeam-channel\"\n-version = \"0.3.9\"\n+version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"crossbeam-utils 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"crossbeam-utils 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -210,6 +210,16 @@ dependencies = [\n  \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"crossbeam-utils\"\n+version = \"0.7.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"autocfg 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"derive-new\"\n version = \"0.5.8\"\n@@ -240,7 +250,7 @@ version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.65 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_users 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -314,7 +324,7 @@ version = \"0.1.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.65 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"wasi 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -348,17 +358,17 @@ dependencies = [\n \n [[package]]\n name = \"ignore\"\n-version = \"0.4.10\"\n+version = \"0.4.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"crossbeam-channel 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"crossbeam-channel 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"globset 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"memchr 2.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"same-file 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"thread_local 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"thread_local 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"walkdir 2.2.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi-util 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -390,27 +400,18 @@ version = \"0.1.17\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"getrandom 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.65 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"kernel32-sys\"\n-version = \"0.2.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"lazy_static\"\n version = \"1.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.65\"\n+version = \"0.2.66\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -429,11 +430,31 @@ dependencies = [\n  \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"measureme\"\n+version = \"0.7.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"byteorder 1.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"memmap 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"parking_lot 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"memchr\"\n version = \"2.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"memmap\"\n+version = \"0.7.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"memoffset\"\n version = \"0.5.1\"\n@@ -452,7 +473,7 @@ name = \"num_cpus\"\n version = \"1.10.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.65 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -480,7 +501,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.65 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -538,7 +559,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fuchsia-cprng 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.65 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_core 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rdrand 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -596,77 +617,124 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-arena\"\n-version = \"610.0.0\"\n+version = \"642.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rustc-ap-rustc_data_structures 610.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"smallvec 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-graphviz\"\n-version = \"610.0.0\"\n+version = \"642.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"rustc-ap-rustc_ast_pretty\"\n+version = \"642.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"rustc-ap-rustc_attr\"\n+version = \"642.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"rustc-ap-rustc_ast_pretty 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_errors 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_feature 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_macros 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_session 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n \n [[package]]\n name = \"rustc-ap-rustc_data_structures\"\n-version = \"610.0.0\"\n+version = \"642.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n+ \"bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"crossbeam-utils 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ena 0.13.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"indexmap 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"jobserver 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"measureme 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-graphviz 610.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_index 610.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 610.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-graphviz 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_index 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-rayon 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-rayon-core 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"smallvec 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"stable_deref_trait 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_errors\"\n-version = \"610.0.0\"\n+version = \"642.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"annotate-snippets 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"atty 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 610.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 610.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 610.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"term_size 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"termcolor 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"termize 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"rustc-ap-rustc_feature\"\n+version = \"642.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"rustc-ap-rustc_fs_util\"\n+version = \"642.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"rustc-ap-rustc_index\"\n-version = \"610.0.0\"\n+version = \"642.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rustc-ap-serialize 610.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"smallvec 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_lexer\"\n-version = \"610.0.0\"\n+version = \"642.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"unicode-xid 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_macros\"\n-version = \"610.0.0\"\n+version = \"642.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -677,59 +745,96 @@ dependencies = [\n ]\n \n [[package]]\n-name = \"rustc-ap-rustc_target\"\n-version = \"610.0.0\"\n+name = \"rustc-ap-rustc_parse\"\n+version = \"642.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 610.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_index 610.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 610.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 610.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_ast_pretty 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_attr 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_errors 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_feature 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_lexer 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_session 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-normalization 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n-name = \"rustc-ap-serialize\"\n-version = \"610.0.0\"\n+name = \"rustc-ap-rustc_session\"\n+version = \"642.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"indexmap 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"smallvec 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num_cpus 1.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_errors 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_feature 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_fs_util 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_index 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_target 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n-name = \"rustc-ap-syntax\"\n-version = \"610.0.0\"\n+name = \"rustc-ap-rustc_span\"\n+version = \"642.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 610.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_errors 610.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_index 610.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_lexer 610.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_target 610.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 610.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 610.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-arena 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_index 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_macros 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scoped-tls 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"smallvec 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-width 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n-name = \"rustc-ap-syntax_pos\"\n-version = \"610.0.0\"\n+name = \"rustc-ap-rustc_target\"\n+version = \"642.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-arena 610.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 610.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_index 610.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_macros 610.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 610.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_index 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_macros 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"rustc-ap-serialize\"\n+version = \"642.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"indexmap 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"rustc-ap-syntax\"\n+version = \"642.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_index 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_lexer 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_macros 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scoped-tls 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-width 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -791,7 +896,7 @@ dependencies = [\n \n [[package]]\n name = \"rustfmt-nightly\"\n-version = \"1.4.11\"\n+version = \"1.4.12\"\n dependencies = [\n  \"annotate-snippets 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bytecount 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -802,14 +907,19 @@ dependencies = [\n  \"env_logger 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"ignore 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ignore 0.4.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_target 610.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax 610.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 610.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_ast_pretty 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_errors 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_parse 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_session 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_target 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-workspace-hack 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustfmt-config_proc_macro 0.2.0\",\n  \"serde 1.0.101 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -892,6 +1002,11 @@ name = \"smallvec\"\n version = \"0.6.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"smallvec\"\n+version = \"1.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"stable_deref_trait\"\n version = \"1.1.1\"\n@@ -954,21 +1069,20 @@ dependencies = [\n ]\n \n [[package]]\n-name = \"term_size\"\n-version = \"0.3.1\"\n+name = \"termcolor\"\n+version = \"1.0.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.65 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"wincolor 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n-name = \"termcolor\"\n-version = \"1.0.5\"\n+name = \"termize\"\n+version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"wincolor 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -987,6 +1101,14 @@ dependencies = [\n  \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"thread_local\"\n+version = \"1.0.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"toml\"\n version = \"0.5.3\"\n@@ -995,6 +1117,14 @@ dependencies = [\n  \"serde 1.0.101 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"unicode-normalization\"\n+version = \"0.1.12\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"smallvec 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"unicode-segmentation\"\n version = \"1.3.0\"\n@@ -1035,11 +1165,6 @@ name = \"wasi\"\n version = \"0.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"winapi\"\n-version = \"0.2.8\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"winapi\"\n version = \"0.3.8\"\n@@ -1049,11 +1174,6 @@ dependencies = [\n  \"winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"winapi-build\"\n-version = \"0.1.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"winapi-i686-pc-windows-gnu\"\n version = \"0.4.0\"\n@@ -1103,11 +1223,12 @@ dependencies = [\n \"checksum clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5067f5bb2d80ef5d68b4c87db81601f0b75bca627bc2ef76b141d7b846a3c6d9\"\n \"checksum cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ddfc5b9aa5d4507acaf872de71051dfd0e309860e88966e1051e462a077aac4f\"\n \"checksum constant_time_eq 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"995a44c877f9212528ccc74b21a232f66ad69001e40ede5bcee2ac9ef2657120\"\n-\"checksum crossbeam-channel 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c8ec7fcd21571dc78f96cc96243cab8d8f035247c3efd16c687be154c3fa9efa\"\n+\"checksum crossbeam-channel 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"acec9a3b0b3559f15aee4f90746c4e5e293b701c0f7d3925d24e01645267b68c\"\n \"checksum crossbeam-deque 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b18cd2e169ad86297e6bc0ad9aa679aee9daa4f19e8163860faf7c164e4f5a71\"\n \"checksum crossbeam-epoch 0.7.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fedcd6772e37f3da2a9af9bf12ebe046c0dfe657992377b4df982a2b54cd37a9\"\n \"checksum crossbeam-queue 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7c979cd6cfe72335896575c6b5688da489e420d36a27a0b9eb0c73db574b4a4b\"\n \"checksum crossbeam-utils 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f8306fcef4a7b563b76b7dd949ca48f52bc1141aa067d2ea09565f3e2652aa5c\"\n+\"checksum crossbeam-utils 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ce446db02cdc3165b94ae73111e570793400d0794e46125cc4056c81cbb039f4\"\n \"checksum derive-new 0.5.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"71f31892cd5c62e414316f2963c5689242c43d8e7bbcaaeca97e5e28c95d91d9\"\n \"checksum diff 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3c2b69f912779fbb121ceb775d74d51e915af17aaebc38d28a592843a2dd0a3a\"\n \"checksum dirs 2.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"13aea89a5c93364a98e9b37b2fa237effbb694d5cfe01c5b70941f7eb087d5e3\"\n@@ -1124,17 +1245,18 @@ dependencies = [\n \"checksum globset 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"925aa2cac82d8834e2b2a4415b6f6879757fb5c0928fc445ae76461a12eed8f2\"\n \"checksum heck 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"20564e78d53d2bb135c343b3f47714a56af2061f1c928fdb541dc7b9fdd94205\"\n \"checksum humantime 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"df004cfca50ef23c36850aaaa59ad52cc70d0e90243c3c7737a4dd32dc7a3c4f\"\n-\"checksum ignore 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0ec16832258409d571aaef8273f3c3cc5b060d784e159d1a0f3b0017308f84a7\"\n+\"checksum ignore 0.4.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"522daefc3b69036f80c7d2990b28ff9e0471c683bad05ca258e0a01dd22c5a1e\"\n \"checksum indexmap 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"712d7b3ea5827fcb9d4fda14bf4da5f136f0db2ae9c8f4bd4e2d1c6fde4e6db2\"\n \"checksum itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5b8467d9c1cebe26feb08c640139247fac215782d35371ade9a2136ed6085358\"\n \"checksum itoa 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"501266b7edd0174f8530248f87f99c88fbe60ca4ef3dd486835b8d8d53136f7f\"\n \"checksum jobserver 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f2b1d42ef453b30b7387e113da1c83ab1605d90c5b4e0eb8e96d016ed3b8c160\"\n-\"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n \"checksum lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n-\"checksum libc 0.2.65 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1a31a0627fdf1f6a39ec0dd577e101440b7db22672c0901fe00a9a6fbb5c24e8\"\n+\"checksum libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d515b1f41455adea1313a4a2ac8a8a477634fbae63cc6100e3aebb207ce61558\"\n \"checksum lock_api 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f8912e782533a93a167888781b836336a6ca5da6175c05944c86cf28c31104dc\"\n \"checksum log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"14b6052be84e6b71ab17edffc2eeabf5c2c3ae1fdb464aae35ac50c67a44e1f7\"\n+\"checksum measureme 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fef709d3257013bba7cff14fc504e07e80631d3fe0f6d38ce63b8f6510ccb932\"\n \"checksum memchr 2.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"88579771288728879b57485cc7d6b07d648c9f0141eb955f8ab7f9d45394468e\"\n+\"checksum memmap 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6585fd95e7bb50d6cc31e20d4cf9afb4e2ba16c5846fc76793f11218da9c475b\"\n \"checksum memoffset 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ce6075db033bbbb7ee5a0bbd3a3186bbae616f57fb001c485c7ff77955f8177f\"\n \"checksum nodrop 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"72ef4a56884ca558e5ddb05a1d1e7e1bfd9a68d9ed024c21704cc98872dae1bb\"\n \"checksum num_cpus 1.10.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bcef43580c035376c0705c42792c294b66974abbfd2789b511784023f71f3273\"\n@@ -1154,17 +1276,23 @@ dependencies = [\n \"checksum regex 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dc220bd33bdce8f093101afe22a037b8eb0e5af33592e6a9caafff0d4cb81cbd\"\n \"checksum regex-syntax 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"11a7e20d1cce64ef2fed88b66d347f88bd9babb82845b2b858f3edbf59a4f716\"\n \"checksum rust-argon2 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4ca4eaef519b494d1f2848fc602d18816fed808a981aedf4f1f00ceb7c9d32cf\"\n-\"checksum rustc-ap-arena 610.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7475f4c707269b56eb7144c53591e3cd6369a5aa1d66434829ea11df96d5e7e3\"\n-\"checksum rustc-ap-graphviz 610.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6e59a55520f140a70a3e0fad80a36e807caa85e9d7016167b91a5b521ea929be\"\n-\"checksum rustc-ap-rustc_data_structures 610.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6420857d5a088f680ec1ba736ffba4ee9c1964b0d397e6318f38d461f4f7d5cb\"\n-\"checksum rustc-ap-rustc_errors 610.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8abfca0960131262254a91d02ff4903526a261ede730d7a2c75b4234c867cdc0\"\n-\"checksum rustc-ap-rustc_index 610.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5a395509dcb90a92c1479c085639594624e06b4ab3fc7c1b795b46a61f2d4f65\"\n-\"checksum rustc-ap-rustc_lexer 610.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"64eac8a0e6efb8f55292aa24be0208c7c0538236c613e79952fd1fa3d54bcf8e\"\n-\"checksum rustc-ap-rustc_macros 610.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f99795e8be4877e9e05d59f201e1740c1cf673364655def5848606d9e25b75af\"\n-\"checksum rustc-ap-rustc_target 610.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f22e21fdd8e1c0030f507158fa79b9f1e080e6241aba994d0f97c14a0a07a826\"\n-\"checksum rustc-ap-serialize 610.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bb1cd6ef5135408d62559866e79986ca261f4c1333253d500e5e66fe66d1432e\"\n-\"checksum rustc-ap-syntax 610.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"61fc1c901d2cbd24cae95d7bc5a58aa7661ec3dc5320c78c32830a52a685c33c\"\n-\"checksum rustc-ap-syntax_pos 610.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"230534f638255853bb9f13987537e00a818435a0cc54b68d97221b6822c8f1bc\"\n+\"checksum rustc-ap-arena 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ea82fa3d9a8add7422228ca1a2cbba0784fa8861f56148ff64da08b3c7921b03\"\n+\"checksum rustc-ap-graphviz 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"638d0b2b3bcf99824e0cb5a25dbc547b61dc20942e11daf6a97e981918aa18e5\"\n+\"checksum rustc-ap-rustc_ast_pretty 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d38bab04dd676dee6d2f9670506a18c31bfce38bf7f8420aa83eb1140ecde049\"\n+\"checksum rustc-ap-rustc_attr 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"10b843ba8b1ed43739133047673b9f6a54d3b3b4d328d69c6ea89ff971395f35\"\n+\"checksum rustc-ap-rustc_data_structures 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dc3d1c6d0a80ab0c1df76405377cec0f3d5423fb5b0953a8eac70a2ad6c44df2\"\n+\"checksum rustc-ap-rustc_errors 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4909a1eca29331332257230f29120a8ff68c9e37d868c564fcd599e430cf8914\"\n+\"checksum rustc-ap-rustc_feature 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"63ab887a181d795cf5fd3edadf367760deafb90aefb844f168ab5255266e3478\"\n+\"checksum rustc-ap-rustc_fs_util 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"70814116df3c5fbec8f06f6a1d013ca481f620fd22a9475754e9bf3ee9ba70d8\"\n+\"checksum rustc-ap-rustc_index 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ac1bf1d3cf3d119d41353d6fd229ef7272d5097bc0924de021c0294bf86d48bf\"\n+\"checksum rustc-ap-rustc_lexer 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4cda21a32cebdc11ec4f5393aa2fcde5ed1b2f673a8571e5a4dcdf07e4ae9cac\"\n+\"checksum rustc-ap-rustc_macros 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"75c47b48ea51910ecfd853c9248a9bf4c767bc823449ab6a1d864dff65fbae16\"\n+\"checksum rustc-ap-rustc_parse 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"abd88e89cd5b5d28dcd3a347a3d534c08627d9455570dc1a2d402cb8437b9d30\"\n+\"checksum rustc-ap-rustc_session 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5b8487b4575fbb2d1fc6f1cd61225efd108a4d36817e6fb9b643d57fcae9cb12\"\n+\"checksum rustc-ap-rustc_span 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f69746c0d4c21bf20a5bb2bd247261a1aa8631f04202d7303352942dde70d987\"\n+\"checksum rustc-ap-rustc_target 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8bbc6ae09b5d42ec66edd520e8412e0615c53a7c93607fe33dc4abab60ba7c8b\"\n+\"checksum rustc-ap-serialize 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e13a1ead0252fc3d96da4c336a95950be6795f2b00c84a67ccadf26142f8cb41\"\n+\"checksum rustc-ap-syntax 642.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e1f59f48ca3a2ec16a7e82e718ed5aadf9c9e08cf63015d28b4e774767524a6a\"\n \"checksum rustc-demangle 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4c691c0e608126e00913e33f0ccf3727d5fc84573623b8d65b2df340b5201783\"\n \"checksum rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7540fc8b0c49f096ee9c961cda096467dce8084bec6bdca2fc83895fd9b28cb8\"\n \"checksum rustc-rayon 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f32767f90d938f1b7199a174ef249ae1924f6e5bbdb9d112fea141e016f25b3a\"\n@@ -1181,28 +1309,29 @@ dependencies = [\n \"checksum serde_derive 1.0.101 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4b133a43a1ecd55d4086bd5b4dc6c1751c68b1bfbeba7a5040442022c7e7c02e\"\n \"checksum serde_json 1.0.41 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2f72eb2a68a7dc3f9a691bfda9305a1c017a6215e5a4545c258500d2099a37c2\"\n \"checksum smallvec 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab606a9c5e214920bb66c458cd7be8ef094f813f20fe77a54cc7dbfff220d4b7\"\n+\"checksum smallvec 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5c2fb2ec9bcd216a5b0d0ccf31ab17b5ed1d627960edff65bbe95d3ce221cefc\"\n \"checksum stable_deref_trait 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dba1a27d3efae4351c8051072d619e3ade2820635c3958d826bfea39d59b54c8\"\n \"checksum strsim 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a\"\n \"checksum structopt 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6d4f66a4c0ddf7aee4677995697366de0749b0139057342eccbb609b12d0affc\"\n \"checksum structopt-derive 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8fe0c13e476b4e21ff7f5c4ace3818b6d7bdc16897c31c73862471bc1663acae\"\n \"checksum syn 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"66850e97125af79138385e9b88339cbcd037e3f28ceab8c5ad98e64f0f1f80bf\"\n \"checksum synstructure 0.12.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3f085a5855930c0441ca1288cf044ea4aecf4f43a91668abdb870b4ba546a203\"\n \"checksum term 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c0863a3345e70f61d613eab32ee046ccd1bcc5f9105fe402c61fcd0c13eeb8b5\"\n-\"checksum term_size 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9e5b9a66db815dcfd2da92db471106457082577c3c278d4138ab3e3b4e189327\"\n \"checksum termcolor 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"96d6098003bde162e4277c70665bd87c326f5a0c3f3fbfb285787fa482d54e6e\"\n+\"checksum termize 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1706be6b564323ce7092f5f7e6b118a14c8ef7ed0e69c8c5329c914a9f101295\"\n \"checksum textwrap 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d326610f408c7a4eb6f51c37c330e496b08506c9457c9d34287ecc38809fb060\"\n \"checksum thread_local 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c6b53e329000edc2b34dbe8545fd20e55a333362d0a321909685a19bd28c3f1b\"\n+\"checksum thread_local 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d40c6d1b69745a6ec6fb1ca717914848da4b44ae29d9b3080cbee91d72a69b14\"\n \"checksum toml 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c7aabe75941d914b72bf3e5d3932ed92ce0664d49d8432305a8b547c37227724\"\n+\"checksum unicode-normalization 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5479532badd04e128284890390c1e876ef7a993d0570b3597ae43dfa1d59afa4\"\n \"checksum unicode-segmentation 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1967f4cdfc355b37fd76d2a954fb2ed3871034eb4f26d60537d88795cfc332a9\"\n \"checksum unicode-width 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7007dbd421b92cc6e28410fe7362e2e0a2503394908f417b68ec8d1c364c4e20\"\n \"checksum unicode-xid 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"826e7639553986605ec5979c7dd957c7895e93eabed50ab2ffa7f6128a75097c\"\n \"checksum unicode_categories 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"39ec24b3121d976906ece63c9daad25b85969647682eee313cb5779fdd69e14e\"\n \"checksum vec_map 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"05c78687fb1a80548ae3250346c3db86a80a7cdd77bda190189f2d0a0987c81a\"\n \"checksum walkdir 2.2.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9658c94fa8b940eab2250bd5a457f9c48b748420d71293b165c8cdbe2f55f71e\"\n \"checksum wasi 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b89c3ce4ce14bdc6fb6beaf9ec7928ca331de5df7e5ea278375642a2f478570d\"\n-\"checksum winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"167dc9d6949a9b857f3451275e911c3f44255842c1f7a76f33c55103a909087a\"\n \"checksum winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8093091eeb260906a183e6ae1abdba2ef5ef2257a21801128899c3fc699229c6\"\n-\"checksum winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2d315eee3b34aca4797b2da6b13ed88266e6d612562a0c46390af8299fc699bc\"\n \"checksum winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n \"checksum winapi-util 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7168bab6e1daee33b4557efd0e95d5ca70a03706d39fa5f3fe7a236f584b03c9\"\n \"checksum winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\""}, {"sha": "1cfa80de8bd09f220a0a63e630301f98d8ed0ded", "filename": "Cargo.toml", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c60416ed2167716dd6e7141573fbc6dde42e09e3/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c60416ed2167716dd6e7141573fbc6dde42e09e3/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=c60416ed2167716dd6e7141573fbc6dde42e09e3", "patch": "@@ -1,7 +1,7 @@\n [package]\n \n name = \"rustfmt-nightly\"\n-version = \"1.4.11\"\n+version = \"1.4.12\"\n authors = [\"Nicholas Cameron <ncameron@mozilla.com>\", \"The Rustfmt developers\"]\n description = \"Tool to find and fix Rust formatting issues\"\n repository = \"https://github.com/rust-lang/rustfmt\"\n@@ -52,7 +52,7 @@ bytecount = \"0.6\"\n unicode-width = \"0.1.5\"\n unicode_categories = \"0.1.1\"\n dirs = \"2.0.1\"\n-ignore = \"0.4.6\"\n+ignore = \"0.4.11\"\n annotate-snippets = { version = \"0.6\", features = [\"ansi_term\"] }\n structopt = \"0.3\"\n rustfmt-config_proc_macro = { version = \"0.2\", path = \"config_proc_macro\" }\n@@ -62,17 +62,37 @@ rustfmt-config_proc_macro = { version = \"0.2\", path = \"config_proc_macro\" }\n # for more information.\n rustc-workspace-hack = \"1.0.0\"\n \n+[dependencies.rustc_ast_pretty]\n+package = \"rustc-ap-rustc_ast_pretty\"\n+version = \"642.0.0\"\n+\n+[dependencies.rustc_data_structures]\n+package = \"rustc-ap-rustc_data_structures\"\n+version = \"642.0.0\"\n+\n+[dependencies.rustc_errors]\n+package = \"rustc-ap-rustc_errors\"\n+version = \"642.0.0\"\n+\n+[dependencies.rustc_parse]\n+package = \"rustc-ap-rustc_parse\"\n+version = \"642.0.0\"\n+\n+[dependencies.rustc_session]\n+package = \"rustc-ap-rustc_session\"\n+version = \"642.0.0\"\n+\n+[dependencies.rustc_span]\n+package = \"rustc-ap-rustc_span\"\n+version = \"642.0.0\"\n+\n [dependencies.rustc_target]\n package = \"rustc-ap-rustc_target\"\n-version = \"610.0.0\"\n+version = \"642.0.0\"\n \n [dependencies.syntax]\n package = \"rustc-ap-syntax\"\n-version = \"610.0.0\"\n-\n-[dependencies.syntax_pos]\n-package = \"rustc-ap-syntax_pos\"\n-version = \"610.0.0\"\n+version = \"642.0.0\"\n \n [dev-dependencies]\n lazy_static = \"1.0.0\""}, {"sha": "461f0ddf02994e1cb26b7ba50d6835ca0c70c123", "filename": "src/attr.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=c60416ed2167716dd6e7141573fbc6dde42e09e3", "patch": "@@ -1,8 +1,7 @@\n //! Format attributes and meta items.\n \n+use rustc_span::{symbol::sym, BytePos, Span, DUMMY_SP};\n use syntax::ast;\n-use syntax::source_map::{BytePos, Span, DUMMY_SP};\n-use syntax::symbol::sym;\n \n use self::doc_comment::DocCommentFormatter;\n use crate::comment::{contains_comment, rewrite_doc_comment, CommentStyle};\n@@ -35,7 +34,7 @@ pub(crate) fn get_span_without_attrs(stmt: &ast::Stmt) -> Span {\n         ast::StmtKind::Expr(ref expr) | ast::StmtKind::Semi(ref expr) => expr.span,\n         ast::StmtKind::Mac(ref mac) => {\n             let (ref mac, _, _) = **mac;\n-            mac.span\n+            mac.span()\n         }\n     }\n }\n@@ -168,7 +167,7 @@ fn rewrite_initial_doc_comments(\n         return Some((0, None));\n     }\n     // Rewrite doc comments\n-    let sugared_docs = take_while_with_pred(context, attrs, |a| a.is_sugared_doc);\n+    let sugared_docs = take_while_with_pred(context, attrs, |a| a.is_doc_comment());\n     if !sugared_docs.is_empty() {\n         let snippet = sugared_docs\n             .iter()\n@@ -316,7 +315,7 @@ where\n impl Rewrite for ast::Attribute {\n     fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n         let snippet = context.snippet(self.span);\n-        if self.is_sugared_doc {\n+        if self.is_doc_comment() {\n             rewrite_doc_comment(snippet, shape.comment(context.config), context.config)\n         } else {\n             let should_skip = self\n@@ -438,7 +437,7 @@ impl<'a> Rewrite for [ast::Attribute] {\n                     )?;\n                     result.push_str(&comment);\n                     if let Some(next) = attrs.get(derives.len()) {\n-                        if next.is_sugared_doc {\n+                        if next.is_doc_comment() {\n                             let snippet = context.snippet(missing_span);\n                             let (_, mlb) = has_newlines_before_after_comment(snippet);\n                             result.push_str(&mlb);\n@@ -471,7 +470,7 @@ impl<'a> Rewrite for [ast::Attribute] {\n                 )?;\n                 result.push_str(&comment);\n                 if let Some(next) = attrs.get(1) {\n-                    if next.is_sugared_doc {\n+                    if next.is_doc_comment() {\n                         let snippet = context.snippet(missing_span);\n                         let (_, mlb) = has_newlines_before_after_comment(snippet);\n                         result.push_str(&mlb);"}, {"sha": "a7a9127cbbd2b8643392cbc36e2ed6ff61611ba1", "filename": "src/chains.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=c60416ed2167716dd6e7141573fbc6dde42e09e3", "patch": "@@ -58,7 +58,7 @@\n use std::borrow::Cow;\n use std::cmp::min;\n \n-use syntax::source_map::{BytePos, Span};\n+use rustc_span::{BytePos, Span};\n use syntax::{ast, ptr};\n \n use crate::comment::{rewrite_comment, CharClasses, FullCodeCharKind, RichChar};"}, {"sha": "18e867cabd12cc303d1e51336d6502f8a608ab74", "filename": "src/closures.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=c60416ed2167716dd6e7141573fbc6dde42e09e3", "patch": "@@ -1,4 +1,4 @@\n-use syntax::source_map::Span;\n+use rustc_span::Span;\n use syntax::{ast, ptr};\n \n use crate::attr::get_attrs_from_stmt;\n@@ -176,7 +176,7 @@ fn rewrite_closure_expr(\n             | ast::ExprKind::Loop(..)\n             | ast::ExprKind::Struct(..) => true,\n \n-            ast::ExprKind::AddrOf(_, ref expr)\n+            ast::ExprKind::AddrOf(_, _, ref expr)\n             | ast::ExprKind::Box(ref expr)\n             | ast::ExprKind::Try(ref expr)\n             | ast::ExprKind::Unary(_, ref expr)\n@@ -382,7 +382,7 @@ fn is_block_closure_forced_inner(expr: &ast::Expr, version: Version) -> bool {\n     match expr.kind {\n         ast::ExprKind::If(..) | ast::ExprKind::While(..) | ast::ExprKind::ForLoop(..) => true,\n         ast::ExprKind::Loop(..) if version == Version::Two => true,\n-        ast::ExprKind::AddrOf(_, ref expr)\n+        ast::ExprKind::AddrOf(_, _, ref expr)\n         | ast::ExprKind::Box(ref expr)\n         | ast::ExprKind::Try(ref expr)\n         | ast::ExprKind::Unary(_, ref expr)"}, {"sha": "5b46001ff7df503c563c563ad98ce7aff8f96e08", "filename": "src/comment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=c60416ed2167716dd6e7141573fbc6dde42e09e3", "patch": "@@ -3,7 +3,7 @@\n use std::{self, borrow::Cow, iter};\n \n use itertools::{multipeek, MultiPeek};\n-use syntax::source_map::Span;\n+use rustc_span::Span;\n \n use crate::config::Config;\n use crate::rewrite::RewriteContext;"}, {"sha": "d0ef489e2ca9383323506f263a713589b5a7a4ab", "filename": "src/config/file_lines.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fconfig%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fconfig%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Ffile_lines.rs?ref=c60416ed2167716dd6e7141573fbc6dde42e09e3", "patch": "@@ -6,11 +6,10 @@ use std::path::PathBuf;\n use std::rc::Rc;\n use std::{cmp, fmt, iter, str};\n \n+use rustc_span::{self, SourceFile};\n use serde::{ser, Deserialize, Deserializer, Serialize, Serializer};\n use serde_json as json;\n \n-use syntax::source_map::{self, SourceFile};\n-\n /// A range of lines in a file, inclusive of both ends.\n pub struct LineRange {\n     pub file: Rc<SourceFile>,\n@@ -25,11 +24,11 @@ pub enum FileName {\n     Stdin,\n }\n \n-impl From<source_map::FileName> for FileName {\n-    fn from(name: source_map::FileName) -> FileName {\n+impl From<rustc_span::FileName> for FileName {\n+    fn from(name: rustc_span::FileName) -> FileName {\n         match name {\n-            source_map::FileName::Real(p) => FileName::Real(p),\n-            source_map::FileName::Custom(ref f) if f == \"stdin\" => FileName::Stdin,\n+            rustc_span::FileName::Real(p) => FileName::Real(p),\n+            rustc_span::FileName::Custom(ref f) if f == \"stdin\" => FileName::Stdin,\n             _ => unreachable!(),\n         }\n     }"}, {"sha": "c9d51a5a71a6a31dd6e884dbe813f16a1a5c2068", "filename": "src/config/options.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=c60416ed2167716dd6e7141573fbc6dde42e09e3", "patch": "@@ -385,10 +385,10 @@ impl Default for Edition {\n }\n \n impl Edition {\n-    pub(crate) fn to_libsyntax_pos_edition(self) -> syntax_pos::edition::Edition {\n+    pub(crate) fn to_libsyntax_pos_edition(self) -> rustc_span::edition::Edition {\n         match self {\n-            Edition::Edition2015 => syntax_pos::edition::Edition::Edition2015,\n-            Edition::Edition2018 => syntax_pos::edition::Edition::Edition2018,\n+            Edition::Edition2015 => rustc_span::edition::Edition::Edition2015,\n+            Edition::Edition2018 => rustc_span::edition::Edition::Edition2018,\n         }\n     }\n }"}, {"sha": "a694cc69ac6a17d14ee85c7ba199d0df44f39399", "filename": "src/expr.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=c60416ed2167716dd6e7141573fbc6dde42e09e3", "patch": "@@ -2,8 +2,8 @@ use std::borrow::Cow;\n use std::cmp::min;\n \n use itertools::Itertools;\n-use syntax::parse::token::{DelimToken, LitKind};\n-use syntax::source_map::{BytePos, SourceMap, Span};\n+use rustc_span::{source_map::SourceMap, BytePos, Span};\n+use syntax::token::{DelimToken, LitKind};\n use syntax::{ast, ptr};\n \n use crate::chains::rewrite_chain;\n@@ -159,7 +159,7 @@ pub(crate) fn format_expr(\n         ast::ExprKind::Path(ref qself, ref path) => {\n             rewrite_path(context, PathContext::Expr, qself.as_ref(), path, shape)\n         }\n-        ast::ExprKind::Assign(ref lhs, ref rhs) => {\n+        ast::ExprKind::Assign(ref lhs, ref rhs, _) => {\n             rewrite_assignment(context, lhs, rhs, None, shape)\n         }\n         ast::ExprKind::AssignOp(ref op, ref lhs, ref rhs) => {\n@@ -213,8 +213,8 @@ pub(crate) fn format_expr(\n             rewrite_unary_prefix(context, \"return \", &**expr, shape)\n         }\n         ast::ExprKind::Box(ref expr) => rewrite_unary_prefix(context, \"box \", &**expr, shape),\n-        ast::ExprKind::AddrOf(mutability, ref expr) => {\n-            rewrite_expr_addrof(context, mutability, expr, shape)\n+        ast::ExprKind::AddrOf(borrow_kind, mutability, ref expr) => {\n+            rewrite_expr_addrof(context, borrow_kind, mutability, expr, shape)\n         }\n         ast::ExprKind::Cast(ref expr, ref ty) => rewrite_pair(\n             &**expr,\n@@ -252,7 +252,7 @@ pub(crate) fn format_expr(\n             fn needs_space_before_range(context: &RewriteContext<'_>, lhs: &ast::Expr) -> bool {\n                 match lhs.kind {\n                     ast::ExprKind::Lit(ref lit) => match lit.kind {\n-                        ast::LitKind::FloatUnsuffixed(..) => {\n+                        ast::LitKind::Float(_, ast::LitFloatType::Unsuffixed) => {\n                             context.snippet(lit.span).ends_with('.')\n                         }\n                         _ => false,\n@@ -1268,7 +1268,7 @@ pub(crate) fn is_simple_expr(expr: &ast::Expr) -> bool {\n     match expr.kind {\n         ast::ExprKind::Lit(..) => true,\n         ast::ExprKind::Path(ref qself, ref path) => qself.is_none() && path.segments.len() <= 1,\n-        ast::ExprKind::AddrOf(_, ref expr)\n+        ast::ExprKind::AddrOf(_, _, ref expr)\n         | ast::ExprKind::Box(ref expr)\n         | ast::ExprKind::Cast(ref expr, _)\n         | ast::ExprKind::Field(ref expr, _)\n@@ -1314,8 +1314,12 @@ pub(crate) fn can_be_overflowed_expr(\n                 || (context.use_block_indent() && args_len == 1)\n         }\n         ast::ExprKind::Mac(ref mac) => {\n-            match (mac.delim, context.config.overflow_delimited_expr()) {\n-                (ast::MacDelimiter::Bracket, true) | (ast::MacDelimiter::Brace, true) => true,\n+            match (\n+                syntax::ast::MacDelimiter::from_token(mac.args.delim()),\n+                context.config.overflow_delimited_expr(),\n+            ) {\n+                (Some(ast::MacDelimiter::Bracket), true)\n+                | (Some(ast::MacDelimiter::Brace), true) => true,\n                 _ => context.use_block_indent() && args_len == 1,\n             }\n         }\n@@ -1326,7 +1330,7 @@ pub(crate) fn can_be_overflowed_expr(\n         }\n \n         // Handle unary-like expressions\n-        ast::ExprKind::AddrOf(_, ref expr)\n+        ast::ExprKind::AddrOf(_, _, ref expr)\n         | ast::ExprKind::Box(ref expr)\n         | ast::ExprKind::Try(ref expr)\n         | ast::ExprKind::Unary(_, ref expr)\n@@ -1338,7 +1342,7 @@ pub(crate) fn can_be_overflowed_expr(\n pub(crate) fn is_nested_call(expr: &ast::Expr) -> bool {\n     match expr.kind {\n         ast::ExprKind::Call(..) | ast::ExprKind::Mac(..) => true,\n-        ast::ExprKind::AddrOf(_, ref expr)\n+        ast::ExprKind::AddrOf(_, _, ref expr)\n         | ast::ExprKind::Box(ref expr)\n         | ast::ExprKind::Try(ref expr)\n         | ast::ExprKind::Unary(_, ref expr)\n@@ -1985,21 +1989,22 @@ pub(crate) fn prefer_next_line(\n \n fn rewrite_expr_addrof(\n     context: &RewriteContext<'_>,\n+    _borrow_kind: ast::BorrowKind,\n     mutability: ast::Mutability,\n     expr: &ast::Expr,\n     shape: Shape,\n ) -> Option<String> {\n     let operator_str = match mutability {\n-        ast::Mutability::Immutable => \"&\",\n-        ast::Mutability::Mutable => \"&mut \",\n+        ast::Mutability::Not => \"&\",\n+        ast::Mutability::Mut => \"&mut \",\n     };\n     rewrite_unary_prefix(context, operator_str, expr, shape)\n }\n \n pub(crate) fn is_method_call(expr: &ast::Expr) -> bool {\n     match expr.kind {\n         ast::ExprKind::MethodCall(..) => true,\n-        ast::ExprKind::AddrOf(_, ref expr)\n+        ast::ExprKind::AddrOf(_, _, ref expr)\n         | ast::ExprKind::Box(ref expr)\n         | ast::ExprKind::Cast(ref expr, _)\n         | ast::ExprKind::Try(ref expr)"}, {"sha": "0c273400695cfbe8dec98c308837c10219a87f6c", "filename": "src/formatting.rs", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=c60416ed2167716dd6e7141573fbc6dde42e09e3", "patch": "@@ -7,11 +7,15 @@ use std::panic::{catch_unwind, AssertUnwindSafe};\n use std::rc::Rc;\n use std::time::{Duration, Instant};\n \n+use rustc_data_structures::sync::{Lrc, Send};\n+use rustc_errors::emitter::{Emitter, EmitterWriter};\n+use rustc_errors::{ColorConfig, Diagnostic, DiagnosticBuilder, Handler, Level as DiagnosticLevel};\n+use rustc_session::parse::ParseSess;\n+use rustc_span::{\n+    source_map::{FilePathMapping, SourceMap},\n+    Span, DUMMY_SP,\n+};\n use syntax::ast;\n-use syntax::errors::emitter::{ColorConfig, Emitter, EmitterWriter};\n-use syntax::errors::{Diagnostic, DiagnosticBuilder, Handler};\n-use syntax::parse::{self, ParseSess};\n-use syntax::source_map::{FilePathMapping, SourceMap, Span, DUMMY_SP};\n \n use self::newline_style::apply_newline_style;\n use crate::comment::{CharClasses, FullCodeCharKind};\n@@ -108,7 +112,7 @@ fn format_project<T: FormatHandler>(\n     let mut context = FormatContext::new(&krate, report, parse_session, config, handler);\n     let files = modules::ModResolver::new(\n         &context.parse_session,\n-        directory_ownership.unwrap_or(parse::DirectoryOwnership::UnownedViaMod(true)),\n+        directory_ownership.unwrap_or(rustc_parse::DirectoryOwnership::UnownedViaMod),\n         !(input_is_stdin || config.skip_children()),\n     )\n     .visit_crate(&krate)\n@@ -159,7 +163,8 @@ impl<'a, T: FormatHandler + 'a> FormatContext<'a, T> {\n             .lookup_char_pos(module.inner.lo())\n             .file;\n         let big_snippet = source_file.src.as_ref().unwrap();\n-        let snippet_provider = SnippetProvider::new(source_file.start_pos, big_snippet);\n+        let snippet_provider =\n+            SnippetProvider::new(source_file.start_pos, source_file.end_pos, big_snippet);\n         let mut visitor = FmtVisitor::from_source_map(\n             &self.parse_session,\n             &self.config,\n@@ -633,7 +638,7 @@ fn parse_crate(\n     parse_session: &ParseSess,\n     config: &Config,\n     report: &mut FormatReport,\n-    directory_ownership: Option<parse::DirectoryOwnership>,\n+    directory_ownership: Option<rustc_parse::DirectoryOwnership>,\n     can_reset_parser_errors: Rc<RefCell<bool>>,\n ) -> Result<ast::Crate, ErrorKind> {\n     let input_is_stdin = input.is_text();\n@@ -642,14 +647,14 @@ fn parse_crate(\n         Input::File(ref file) => {\n             // Use `new_sub_parser_from_file` when we the input is a submodule.\n             Ok(if let Some(dir_own) = directory_ownership {\n-                parse::new_sub_parser_from_file(parse_session, file, dir_own, None, DUMMY_SP)\n+                rustc_parse::new_sub_parser_from_file(parse_session, file, dir_own, None, DUMMY_SP)\n             } else {\n-                parse::new_parser_from_file(parse_session, file)\n+                rustc_parse::new_parser_from_file(parse_session, file)\n             })\n         }\n-        Input::Text(text) => parse::maybe_new_parser_from_source_str(\n+        Input::Text(text) => rustc_parse::maybe_new_parser_from_source_str(\n             parse_session,\n-            syntax::source_map::FileName::Custom(\"stdin\".to_owned()),\n+            rustc_span::FileName::Custom(\"stdin\".to_owned()),\n             text,\n         )\n         .map(|mut parser| {\n@@ -716,11 +721,14 @@ struct SilentOnIgnoredFilesEmitter {\n }\n \n impl Emitter for SilentOnIgnoredFilesEmitter {\n+    fn source_map(&self) -> Option<&Lrc<SourceMap>> {\n+        None\n+    }\n     fn emit_diagnostic(&mut self, db: &Diagnostic) {\n         if let Some(primary_span) = &db.span.primary_span() {\n             let file_name = self.source_map.span_to_filename(*primary_span);\n             match file_name {\n-                syntax_pos::FileName::Real(ref path) => {\n+                rustc_span::FileName::Real(ref path) => {\n                     if self\n                         .ignore_path_set\n                         .is_match(&FileName::Real(path.to_path_buf()))\n@@ -745,6 +753,9 @@ impl Emitter for SilentOnIgnoredFilesEmitter {\n struct SilentEmitter;\n \n impl Emitter for SilentEmitter {\n+    fn source_map(&self) -> Option<&Lrc<SourceMap>> {\n+        None\n+    }\n     fn emit_diagnostic(&mut self, _db: &Diagnostic) {}\n }\n "}, {"sha": "9c914ce476ddd8a4a707a65e8fd9d5a2ad7be3ba", "filename": "src/imports.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=c60416ed2167716dd6e7141573fbc6dde42e09e3", "patch": "@@ -2,9 +2,8 @@ use std::borrow::Cow;\n use std::cmp::Ordering;\n use std::fmt;\n \n+use rustc_span::{source_map, symbol::sym, BytePos, Span, DUMMY_SP};\n use syntax::ast::{self, UseTreeKind};\n-use syntax::source_map::{self, BytePos, Span, DUMMY_SP};\n-use syntax::symbol::sym;\n \n use crate::comment::combine_strs_with_missing_comments;\n use crate::config::lists::*;\n@@ -249,7 +248,7 @@ impl UseTree {\n \n                 let allow_extend = if attrs.len() == 1 {\n                     let line_len = attr_str.len() + 1 + use_str.len();\n-                    !attrs.first().unwrap().is_sugared_doc\n+                    !attrs.first().unwrap().is_doc_comment()\n                         && context.config.inline_attribute_width() >= line_len\n                 } else {\n                     false\n@@ -849,7 +848,7 @@ impl Rewrite for UseTree {\n #[cfg(test)]\n mod test {\n     use super::*;\n-    use syntax::source_map::DUMMY_SP;\n+    use rustc_span::DUMMY_SP;\n \n     // Parse the path part of an import. This parser is not robust and is only\n     // suitable for use in a test harness."}, {"sha": "ed7b46c8e4f4d9cc256930589717cf9e57269666", "filename": "src/items.rs", "status": "modified", "additions": 113, "deletions": 61, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=c60416ed2167716dd6e7141573fbc6dde42e09e3", "patch": "@@ -4,10 +4,9 @@ use std::borrow::Cow;\n use std::cmp::{max, min, Ordering};\n \n use regex::Regex;\n-use rustc_target::spec::abi;\n-use syntax::source_map::{self, BytePos, Span};\n+use rustc_span::{source_map, symbol, BytePos, Span, DUMMY_SP};\n use syntax::visit;\n-use syntax::{ast, ptr, symbol};\n+use syntax::{ast, ptr};\n \n use crate::attr::filter_inline_attrs;\n use crate::comment::{\n@@ -34,7 +33,7 @@ use crate::visitor::FmtVisitor;\n \n const DEFAULT_VISIBILITY: ast::Visibility = source_map::Spanned {\n     node: ast::VisibilityKind::Inherited,\n-    span: source_map::DUMMY_SP,\n+    span: DUMMY_SP,\n };\n \n fn type_annotation_separator(config: &Config) -> &str {\n@@ -137,7 +136,11 @@ impl<'a> Item<'a> {\n     fn from_foreign_mod(fm: &'a ast::ForeignMod, span: Span, config: &Config) -> Item<'a> {\n         Item {\n             keyword: \"\",\n-            abi: format_abi(fm.abi, config.force_explicit_abi(), true),\n+            abi: format_extern(\n+                ast::Extern::from_abi(fm.abi),\n+                config.force_explicit_abi(),\n+                true,\n+            ),\n             vis: None,\n             body: fm\n                 .items\n@@ -161,7 +164,7 @@ enum BodyElement<'a> {\n pub(crate) struct FnSig<'a> {\n     decl: &'a ast::FnDecl,\n     generics: &'a ast::Generics,\n-    abi: abi::Abi,\n+    ext: ast::Extern,\n     is_async: Cow<'a, ast::IsAsync>,\n     constness: ast::Constness,\n     defaultness: ast::Defaultness,\n@@ -178,7 +181,7 @@ impl<'a> FnSig<'a> {\n         FnSig {\n             decl,\n             generics,\n-            abi: abi::Abi::Rust,\n+            ext: ast::Extern::None,\n             is_async: Cow::Owned(ast::IsAsync::NotAsync),\n             constness: ast::Constness::NotConst,\n             defaultness: ast::Defaultness::Final,\n@@ -188,15 +191,15 @@ impl<'a> FnSig<'a> {\n     }\n \n     pub(crate) fn from_method_sig(\n-        method_sig: &'a ast::MethodSig,\n+        method_sig: &'a ast::FnSig,\n         generics: &'a ast::Generics,\n     ) -> FnSig<'a> {\n         FnSig {\n             unsafety: method_sig.header.unsafety,\n             is_async: Cow::Borrowed(&method_sig.header.asyncness.node),\n             constness: method_sig.header.constness.node,\n             defaultness: ast::Defaultness::Final,\n-            abi: method_sig.header.abi,\n+            ext: method_sig.header.ext,\n             decl: &*method_sig.decl,\n             generics,\n             visibility: DEFAULT_VISIBILITY,\n@@ -210,24 +213,24 @@ impl<'a> FnSig<'a> {\n         defaultness: ast::Defaultness,\n     ) -> FnSig<'a> {\n         match *fn_kind {\n-            visit::FnKind::ItemFn(_, fn_header, visibility, _) => FnSig {\n-                decl,\n-                generics,\n-                abi: fn_header.abi,\n-                constness: fn_header.constness.node,\n-                is_async: Cow::Borrowed(&fn_header.asyncness.node),\n-                defaultness,\n-                unsafety: fn_header.unsafety,\n-                visibility: visibility.clone(),\n-            },\n-            visit::FnKind::Method(_, method_sig, vis, _) => {\n-                let mut fn_sig = FnSig::from_method_sig(method_sig, generics);\n-                fn_sig.defaultness = defaultness;\n-                if let Some(vis) = vis {\n+            visit::FnKind::Fn(fn_ctxt, _, fn_sig, vis, _) => match fn_ctxt {\n+                visit::FnCtxt::Assoc(..) => {\n+                    let mut fn_sig = FnSig::from_method_sig(fn_sig, generics);\n+                    fn_sig.defaultness = defaultness;\n                     fn_sig.visibility = vis.clone();\n+                    fn_sig\n                 }\n-                fn_sig\n-            }\n+                _ => FnSig {\n+                    decl,\n+                    generics,\n+                    ext: fn_sig.header.ext,\n+                    constness: fn_sig.header.constness.node,\n+                    is_async: Cow::Borrowed(&fn_sig.header.asyncness.node),\n+                    defaultness,\n+                    unsafety: fn_sig.header.unsafety,\n+                    visibility: vis.clone(),\n+                },\n+            },\n             _ => unreachable!(),\n         }\n     }\n@@ -240,8 +243,8 @@ impl<'a> FnSig<'a> {\n         result.push_str(format_constness(self.constness));\n         result.push_str(format_async(&self.is_async));\n         result.push_str(format_unsafety(self.unsafety));\n-        result.push_str(&format_abi(\n-            self.abi,\n+        result.push_str(&format_extern(\n+            self.ext,\n             context.config.force_explicit_abi(),\n             false,\n         ));\n@@ -327,7 +330,7 @@ impl<'a> FmtVisitor<'a> {\n         &mut self,\n         indent: Indent,\n         ident: ast::Ident,\n-        sig: &ast::MethodSig,\n+        sig: &ast::FnSig,\n         generics: &ast::Generics,\n         span: Span,\n     ) -> Option<String> {\n@@ -575,7 +578,7 @@ impl<'a> FmtVisitor<'a> {\n         combine_strs_with_missing_comments(&context, &attrs_str, &variant_body, span, shape, false)\n     }\n \n-    fn visit_impl_items(&mut self, items: &[ast::ImplItem]) {\n+    fn visit_impl_items(&mut self, items: &[ptr::P<ast::AssocItem>]) {\n         if self.get_context().config.reorder_impl_items() {\n             // Create visitor for each items, then reorder them.\n             let mut buffer = vec![];\n@@ -584,27 +587,72 @@ impl<'a> FmtVisitor<'a> {\n                 buffer.push((self.buffer.clone(), item.clone()));\n                 self.buffer.clear();\n             }\n+\n+            fn is_type(ty: &Option<syntax::ptr::P<ast::Ty>>) -> bool {\n+                match ty {\n+                    None => true,\n+                    Some(lty) => match lty.kind.opaque_top_hack() {\n+                        None => true,\n+                        Some(_) => false,\n+                    },\n+                }\n+            }\n+\n+            fn is_opaque(ty: &Option<syntax::ptr::P<ast::Ty>>) -> bool {\n+                match ty {\n+                    None => false,\n+                    Some(lty) => match lty.kind.opaque_top_hack() {\n+                        None => false,\n+                        Some(_) => true,\n+                    },\n+                }\n+            }\n+\n+            fn both_type(\n+                a: &Option<syntax::ptr::P<ast::Ty>>,\n+                b: &Option<syntax::ptr::P<ast::Ty>>,\n+            ) -> bool {\n+                is_type(a) && is_type(b)\n+            }\n+\n+            fn both_opaque(\n+                a: &Option<syntax::ptr::P<ast::Ty>>,\n+                b: &Option<syntax::ptr::P<ast::Ty>>,\n+            ) -> bool {\n+                is_opaque(a) && is_opaque(b)\n+            }\n+\n+            // In rustc-ap-v638 the `OpaqueTy` AssocItemKind variant was removed but\n+            // we still need to differentiate to maintain sorting order.\n+\n             // type -> opaque -> const -> macro -> method\n-            use crate::ast::ImplItemKind::*;\n-            fn need_empty_line(a: &ast::ImplItemKind, b: &ast::ImplItemKind) -> bool {\n+            use crate::ast::AssocItemKind::*;\n+            fn need_empty_line(a: &ast::AssocItemKind, b: &ast::AssocItemKind) -> bool {\n                 match (a, b) {\n-                    (TyAlias(..), TyAlias(..))\n-                    | (Const(..), Const(..))\n-                    | (OpaqueTy(..), OpaqueTy(..)) => false,\n+                    (TyAlias(_, ref lty), TyAlias(_, ref rty))\n+                        if both_type(lty, rty) || both_opaque(lty, rty) =>\n+                    {\n+                        false\n+                    }\n+                    (Const(..), Const(..)) => false,\n                     _ => true,\n                 }\n             }\n \n             buffer.sort_by(|(_, a), (_, b)| match (&a.kind, &b.kind) {\n-                (TyAlias(..), TyAlias(..))\n-                | (Const(..), Const(..))\n-                | (Macro(..), Macro(..))\n-                | (OpaqueTy(..), OpaqueTy(..)) => a.ident.as_str().cmp(&b.ident.as_str()),\n-                (Method(..), Method(..)) => a.span.lo().cmp(&b.span.lo()),\n+                (TyAlias(_, ref lty), TyAlias(_, ref rty))\n+                    if both_type(lty, rty) || both_opaque(lty, rty) =>\n+                {\n+                    a.ident.as_str().cmp(&b.ident.as_str())\n+                }\n+                (Const(..), Const(..)) | (Macro(..), Macro(..)) => {\n+                    a.ident.as_str().cmp(&b.ident.as_str())\n+                }\n+                (Fn(..), Fn(..)) => a.span.lo().cmp(&b.span.lo()),\n+                (TyAlias(_, ref ty), _) if is_type(ty) => Ordering::Less,\n+                (_, TyAlias(_, ref ty)) if is_type(ty) => Ordering::Greater,\n                 (TyAlias(..), _) => Ordering::Less,\n                 (_, TyAlias(..)) => Ordering::Greater,\n-                (OpaqueTy(..), _) => Ordering::Less,\n-                (_, OpaqueTy(..)) => Ordering::Greater,\n                 (Const(..), _) => Ordering::Less,\n                 (_, Const(..)) => Ordering::Greater,\n                 (Macro(..), _) => Ordering::Less,\n@@ -638,7 +686,13 @@ pub(crate) fn format_impl(\n     item: &ast::Item,\n     offset: Indent,\n ) -> Option<String> {\n-    if let ast::ItemKind::Impl(_, _, _, ref generics, _, ref self_ty, ref items) = item.kind {\n+    if let ast::ItemKind::Impl {\n+        ref generics,\n+        ref self_ty,\n+        ref items,\n+        ..\n+    } = item.kind\n+    {\n         let mut result = String::with_capacity(128);\n         let ref_and_type = format_impl_ref_and_type(context, item, offset)?;\n         let sep = offset.to_string_with_newline(context.config);\n@@ -695,7 +749,7 @@ pub(crate) fn format_impl(\n             }\n         }\n \n-        if is_impl_single_line(context, items, &result, &where_clause_str, item)? {\n+        if is_impl_single_line(context, items.as_slice(), &result, &where_clause_str, item)? {\n             result.push_str(&where_clause_str);\n             if where_clause_str.contains('\\n') || last_line_contains_single_line_comment(&result) {\n                 // if the where_clause contains extra comments AND\n@@ -764,7 +818,7 @@ pub(crate) fn format_impl(\n \n fn is_impl_single_line(\n     context: &RewriteContext<'_>,\n-    items: &[ast::ImplItem],\n+    items: &[ptr::P<ast::AssocItem>],\n     result: &str,\n     where_clause_str: &str,\n     item: &ast::Item,\n@@ -786,15 +840,15 @@ fn format_impl_ref_and_type(\n     item: &ast::Item,\n     offset: Indent,\n ) -> Option<String> {\n-    if let ast::ItemKind::Impl(\n+    if let ast::ItemKind::Impl {\n         unsafety,\n         polarity,\n         defaultness,\n         ref generics,\n-        ref trait_ref,\n+        of_trait: ref trait_ref,\n         ref self_ty,\n-        _,\n-    ) = item.kind\n+        ..\n+    } = item.kind\n     {\n         let mut result = String::with_capacity(128);\n \n@@ -1662,9 +1716,7 @@ impl<'a> StaticParts<'a> {\n     pub(crate) fn from_item(item: &'a ast::Item) -> Self {\n         let (prefix, ty, mutability, expr) = match item.kind {\n             ast::ItemKind::Static(ref ty, mutability, ref expr) => (\"static\", ty, mutability, expr),\n-            ast::ItemKind::Const(ref ty, ref expr) => {\n-                (\"const\", ty, ast::Mutability::Immutable, expr)\n-            }\n+            ast::ItemKind::Const(ref ty, ref expr) => (\"const\", ty, ast::Mutability::Not, expr),\n             _ => unreachable!(),\n         };\n         StaticParts {\n@@ -1679,35 +1731,35 @@ impl<'a> StaticParts<'a> {\n         }\n     }\n \n-    pub(crate) fn from_trait_item(ti: &'a ast::TraitItem) -> Self {\n+    pub(crate) fn from_trait_item(ti: &'a ast::AssocItem) -> Self {\n         let (ty, expr_opt) = match ti.kind {\n-            ast::TraitItemKind::Const(ref ty, ref expr_opt) => (ty, expr_opt),\n+            ast::AssocItemKind::Const(ref ty, ref expr_opt) => (ty, expr_opt),\n             _ => unreachable!(),\n         };\n         StaticParts {\n             prefix: \"const\",\n             vis: &DEFAULT_VISIBILITY,\n             ident: ti.ident,\n             ty,\n-            mutability: ast::Mutability::Immutable,\n+            mutability: ast::Mutability::Not,\n             expr_opt: expr_opt.as_ref(),\n             defaultness: None,\n             span: ti.span,\n         }\n     }\n \n-    pub(crate) fn from_impl_item(ii: &'a ast::ImplItem) -> Self {\n+    pub(crate) fn from_impl_item(ii: &'a ast::AssocItem) -> Self {\n         let (ty, expr) = match ii.kind {\n-            ast::ImplItemKind::Const(ref ty, ref expr) => (ty, expr),\n+            ast::AssocItemKind::Const(ref ty, ref expr) => (ty, expr),\n             _ => unreachable!(),\n         };\n         StaticParts {\n             prefix: \"const\",\n             vis: &ii.vis,\n             ident: ii.ident,\n             ty,\n-            mutability: ast::Mutability::Immutable,\n-            expr_opt: Some(expr),\n+            mutability: ast::Mutability::Not,\n+            expr_opt: expr.as_ref(),\n             defaultness: Some(ii.defaultness),\n             span: ii.span,\n         }\n@@ -3031,11 +3083,11 @@ impl Rewrite for ast::ForeignItem {\n         let span = mk_sp(self.span.lo(), self.span.hi() - BytePos(1));\n \n         let item_str = match self.kind {\n-            ast::ForeignItemKind::Fn(ref fn_decl, ref generics) => rewrite_fn_base(\n+            ast::ForeignItemKind::Fn(ref fn_sig, ref generics, _) => rewrite_fn_base(\n                 context,\n                 shape.indent,\n                 self.ident,\n-                &FnSig::new(fn_decl, generics, self.vis.clone()),\n+                &FnSig::new(&fn_sig.decl, generics, self.vis.clone()),\n                 span,\n                 FnBraceStyle::None,\n             )\n@@ -3101,7 +3153,7 @@ fn rewrite_attrs(\n \n     let allow_extend = if attrs.len() == 1 {\n         let line_len = attrs_str.len() + 1 + item_str.len();\n-        !attrs.first().unwrap().is_sugared_doc\n+        !attrs.first().unwrap().is_doc_comment()\n             && context.config.inline_attribute_width() >= line_len\n     } else {\n         false"}, {"sha": "f0783b2ca3631f326cbf1c64e7651d6b16164bf7", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=c60416ed2167716dd6e7141573fbc6dde42e09e3", "patch": "@@ -20,7 +20,8 @@ use std::rc::Rc;\n \n use failure::Fail;\n use ignore;\n-use syntax::{ast, parse::DirectoryOwnership};\n+use rustc_parse::DirectoryOwnership;\n+use syntax::ast;\n \n use crate::comment::LineClasses;\n use crate::emitter::Emitter;"}, {"sha": "96a10924e25659e6ba7b7e8ded59a9a8600ca57c", "filename": "src/lists.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=c60416ed2167716dd6e7141573fbc6dde42e09e3", "patch": "@@ -3,7 +3,7 @@\n use std::cmp;\n use std::iter::Peekable;\n \n-use syntax::source_map::BytePos;\n+use rustc_span::BytePos;\n \n use crate::comment::{find_comment_end, rewrite_comment, FindUncommented};\n use crate::config::lists::*;"}, {"sha": "dea056928d9e9eb825de6d689dabadcc97b2a813", "filename": "src/macros.rs", "status": "modified", "additions": 34, "deletions": 33, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=c60416ed2167716dd6e7141573fbc6dde42e09e3", "patch": "@@ -12,16 +12,12 @@\n use std::collections::HashMap;\n use std::panic::{catch_unwind, AssertUnwindSafe};\n \n-use syntax::parse::new_parser_from_tts;\n-use syntax::parse::parser::Parser;\n-use syntax::parse::token::{BinOpToken, DelimToken, Token, TokenKind};\n-use syntax::print::pprust;\n-use syntax::source_map::{BytePos, Span};\n-use syntax::symbol::kw;\n+use rustc_ast_pretty::pprust;\n+use rustc_parse::{new_parser_from_tts, parser::Parser};\n+use rustc_span::{symbol::kw, BytePos, Span, Symbol, DUMMY_SP};\n+use syntax::token::{BinOpToken, DelimToken, Token, TokenKind};\n use syntax::tokenstream::{Cursor, TokenStream, TokenTree};\n-use syntax::ThinVec;\n-use syntax::{ast, parse, ptr};\n-use syntax_pos::{Symbol, DUMMY_SP};\n+use syntax::{ast, ptr};\n \n use crate::comment::{\n     contains_comment, CharClasses, FindUncommented, FullCodeCharKind, LineClasses,\n@@ -85,7 +81,7 @@ impl Rewrite for MacroArg {\n             MacroArg::Ty(ref ty) => ty.rewrite(context, shape),\n             MacroArg::Pat(ref pat) => pat.rewrite(context, shape),\n             MacroArg::Item(ref item) => item.rewrite(context, shape),\n-            MacroArg::Keyword(ident, _) => Some(ident.to_string()),\n+            MacroArg::Keyword(ident, _) => Some(ident.name.to_string()),\n         }\n     }\n }\n@@ -114,23 +110,23 @@ fn parse_macro_arg<'a, 'b: 'a>(parser: &'a mut Parser<'b>) -> Option<MacroArg> {\n \n     parse_macro_arg!(\n         Expr,\n-        |parser: &mut parse::parser::Parser<'b>| parser.parse_expr(),\n+        |parser: &mut rustc_parse::parser::Parser<'b>| parser.parse_expr(),\n         |x: ptr::P<ast::Expr>| Some(x)\n     );\n     parse_macro_arg!(\n         Ty,\n-        |parser: &mut parse::parser::Parser<'b>| parser.parse_ty(),\n+        |parser: &mut rustc_parse::parser::Parser<'b>| parser.parse_ty(),\n         |x: ptr::P<ast::Ty>| Some(x)\n     );\n     parse_macro_arg!(\n         Pat,\n-        |parser: &mut parse::parser::Parser<'b>| parser.parse_pat(None),\n+        |parser: &mut rustc_parse::parser::Parser<'b>| parser.parse_pat(None),\n         |x: ptr::P<ast::Pat>| Some(x)\n     );\n     // `parse_item` returns `Option<ptr::P<ast::Item>>`.\n     parse_macro_arg!(\n         Item,\n-        |parser: &mut parse::parser::Parser<'b>| parser.parse_item(),\n+        |parser: &mut rustc_parse::parser::Parser<'b>| parser.parse_item(),\n         |x: Option<ptr::P<ast::Item>>| x\n     );\n \n@@ -147,7 +143,7 @@ fn rewrite_macro_name(\n         // Avoid using pretty-printer in the common case.\n         format!(\"{}!\", rewrite_ident(context, path.segments[0].ident))\n     } else {\n-        format!(\"{}!\", path)\n+        format!(\"{}!\", pprust::path_to_string(path))\n     };\n     match extra_ident {\n         Some(ident) if ident.name != kw::Invalid => format!(\"{} {}\", name, ident),\n@@ -267,8 +263,8 @@ fn rewrite_macro_inner(\n         original_style\n     };\n \n-    let ts: TokenStream = mac.stream();\n-    let has_comment = contains_comment(context.snippet(mac.span));\n+    let ts = mac.args.inner_tokens();\n+    let has_comment = contains_comment(context.snippet(mac.span()));\n     if ts.is_empty() && !has_comment {\n         return match style {\n             DelimToken::Paren if position == MacroPosition::Item => {\n@@ -302,7 +298,7 @@ fn rewrite_macro_inner(\n             } else if let Some(arg) = parse_macro_arg(&mut parser) {\n                 arg_vec.push(arg);\n             } else {\n-                return return_macro_parse_failure_fallback(context, shape.indent, mac.span);\n+                return return_macro_parse_failure_fallback(context, shape.indent, mac.span());\n             }\n \n             match parser.token.kind {\n@@ -326,16 +322,16 @@ fn rewrite_macro_inner(\n                                     return return_macro_parse_failure_fallback(\n                                         context,\n                                         shape.indent,\n-                                        mac.span,\n+                                        mac.span(),\n                                     );\n                                 }\n                             }\n                         }\n                     }\n-                    return return_macro_parse_failure_fallback(context, shape.indent, mac.span);\n+                    return return_macro_parse_failure_fallback(context, shape.indent, mac.span());\n                 }\n                 _ if arg_vec.last().map_or(false, MacroArg::is_item) => continue,\n-                _ => return return_macro_parse_failure_fallback(context, shape.indent, mac.span),\n+                _ => return return_macro_parse_failure_fallback(context, shape.indent, mac.span()),\n             }\n \n             parser.bump();\n@@ -355,7 +351,7 @@ fn rewrite_macro_inner(\n             shape,\n             style,\n             position,\n-            mac.span,\n+            mac.span(),\n         );\n     }\n \n@@ -372,7 +368,7 @@ fn rewrite_macro_inner(\n                     &macro_name,\n                     arg_vec.iter(),\n                     shape,\n-                    mac.span,\n+                    mac.span(),\n                     context.config.width_heuristics().fn_call_width,\n                     if trailing_comma {\n                         Some(SeparatorTactic::Always)\n@@ -409,7 +405,7 @@ fn rewrite_macro_inner(\n                 let rewrite = rewrite_array(\n                     macro_name,\n                     arg_vec.iter(),\n-                    mac.span,\n+                    mac.span(),\n                     context,\n                     shape,\n                     force_trailing_comma,\n@@ -427,7 +423,7 @@ fn rewrite_macro_inner(\n             // For macro invocations with braces, always put a space between\n             // the `macro_name!` and `{ /* macro_body */ }` but skip modifying\n             // anything in between the braces (for now).\n-            let snippet = context.snippet(mac.span).trim_start_matches(|c| c != '{');\n+            let snippet = context.snippet(mac.span()).trim_start_matches(|c| c != '{');\n             match trim_left_preserve_layout(snippet, shape.indent, &context.config) {\n                 Some(macro_body) => Some(format!(\"{} {}\", macro_name, macro_body)),\n                 None => Some(format!(\"{} {}\", macro_name, snippet)),\n@@ -492,7 +488,8 @@ pub(crate) fn rewrite_macro_def(\n         return snippet;\n     }\n \n-    let mut parser = MacroParser::new(def.stream().into_trees());\n+    let ts = def.body.inner_tokens();\n+    let mut parser = MacroParser::new(ts.into_trees());\n     let parsed_def = match parser.parse() {\n         Some(def) => def,\n         None => return snippet,\n@@ -1190,23 +1187,24 @@ fn next_space(tok: &TokenKind) -> SpaceState {\n /// when the macro is not an instance of `try!` (or parsing the inner expression\n /// failed).\n pub(crate) fn convert_try_mac(mac: &ast::Mac, context: &RewriteContext<'_>) -> Option<ast::Expr> {\n-    if &mac.path.to_string() == \"try\" {\n-        let ts: TokenStream = mac.tts.clone();\n+    let path = &pprust::path_to_string(&mac.path);\n+    if path == \"try\" || path == \"r#try\" {\n+        let ts = mac.args.inner_tokens();\n         let mut parser = new_parser_from_tts(context.parse_session, ts.trees().collect());\n \n         Some(ast::Expr {\n             id: ast::NodeId::root(), // dummy value\n             kind: ast::ExprKind::Try(parser.parse_expr().ok()?),\n-            span: mac.span, // incorrect span, but shouldn't matter too much\n-            attrs: ThinVec::new(),\n+            span: mac.span(), // incorrect span, but shouldn't matter too much\n+            attrs: ast::AttrVec::new(),\n         })\n     } else {\n         None\n     }\n }\n \n-fn macro_style(mac: &ast::Mac, context: &RewriteContext<'_>) -> DelimToken {\n-    let snippet = context.snippet(mac.span);\n+pub(crate) fn macro_style(mac: &ast::Mac, context: &RewriteContext<'_>) -> DelimToken {\n+    let snippet = context.snippet(mac.span());\n     let paren_pos = snippet.find_uncommented(\"(\").unwrap_or(usize::max_value());\n     let bracket_pos = snippet.find_uncommented(\"[\").unwrap_or(usize::max_value());\n     let brace_pos = snippet.find_uncommented(\"{\").unwrap_or(usize::max_value());\n@@ -1454,7 +1452,10 @@ fn format_lazy_static(\n \n     while parser.token.kind != TokenKind::Eof {\n         // Parse a `lazy_static!` item.\n-        let vis = crate::utils::format_visibility(context, &parse_or!(parse_visibility, false));\n+        let vis = crate::utils::format_visibility(\n+            context,\n+            &parse_or!(parse_visibility, rustc_parse::parser::FollowedByType::No),\n+        );\n         parser.eat_keyword(kw::Static);\n         parser.eat_keyword(kw::Ref);\n         let id = parse_or!(parse_ident);"}, {"sha": "954db40ae524a13989a7632696f93ab2f010a1f8", "filename": "src/matches.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=c60416ed2167716dd6e7141573fbc6dde42e09e3", "patch": "@@ -2,7 +2,7 @@\n \n use std::iter::repeat;\n \n-use syntax::source_map::{BytePos, Span};\n+use rustc_span::{BytePos, Span};\n use syntax::{ast, ptr};\n \n use crate::comment::{combine_strs_with_missing_comments, rewrite_comment};\n@@ -565,7 +565,7 @@ fn can_flatten_block_around_this(body: &ast::Expr) -> bool {\n         | ast::ExprKind::Mac(..)\n         | ast::ExprKind::Struct(..)\n         | ast::ExprKind::Tup(..) => true,\n-        ast::ExprKind::AddrOf(_, ref expr)\n+        ast::ExprKind::AddrOf(_, _, ref expr)\n         | ast::ExprKind::Box(ref expr)\n         | ast::ExprKind::Try(ref expr)\n         | ast::ExprKind::Unary(_, ref expr)"}, {"sha": "99595436f895c6d9dc0fa8c76b681e98904898ed", "filename": "src/missed_spans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=c60416ed2167716dd6e7141573fbc6dde42e09e3", "patch": "@@ -1,4 +1,4 @@\n-use syntax::source_map::{BytePos, Pos, Span};\n+use rustc_span::{BytePos, Pos, Span};\n \n use crate::comment::{is_last_comment_block, rewrite_comment, CodeCharKind, CommentCodeSlices};\n use crate::config::file_lines::FileLines;"}, {"sha": "92db42de13feea46fcd63599e83c84a653b22924", "filename": "src/modules.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=c60416ed2167716dd6e7141573fbc6dde42e09e3", "patch": "@@ -2,15 +2,14 @@ use std::borrow::Cow;\n use std::collections::BTreeMap;\n use std::path::{Path, PathBuf};\n \n+use rustc_errors::{Diagnostic, PResult};\n+use rustc_parse::{new_sub_parser_from_file, parser, DirectoryOwnership};\n+use rustc_session::parse::ParseSess;\n+use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::{source_map, Span, DUMMY_SP};\n use syntax::ast;\n-use syntax::attr;\n-use syntax::parse::{\n-    new_sub_parser_from_file, parser, token::TokenKind, DirectoryOwnership, PResult, ParseSess,\n-};\n-use syntax::source_map::{self, Span};\n-use syntax::symbol::sym;\n+use syntax::token::TokenKind;\n use syntax::visit::Visitor;\n-use syntax_pos::{self, symbol::Symbol, DUMMY_SP};\n \n use crate::attr::MetaVisitor;\n use crate::config::FileName;\n@@ -36,8 +35,8 @@ struct Directory {\n }\n \n impl<'a> Directory {\n-    fn to_syntax_directory(&'a self) -> syntax::parse::Directory<'a> {\n-        syntax::parse::Directory {\n+    fn to_syntax_directory(&'a self) -> rustc_parse::Directory<'a> {\n+        rustc_parse::Directory {\n             path: Cow::Borrowed(&self.path),\n             ownership: self.ownership.clone(),\n         }\n@@ -173,7 +172,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n         } else {\n             // An internal module (`mod foo { /* ... */ }`);\n             if let Some(path) = find_path_value(&item.attrs) {\n-                let path = Path::new(&path.as_str()).to_path_buf();\n+                let path = Path::new(&*path.as_str()).to_path_buf();\n                 Ok(Some(SubModKind::InternalWithPath(path)))\n             } else {\n                 Ok(Some(SubModKind::Internal(item)))\n@@ -273,7 +272,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n \n         let relative = match self.directory.ownership {\n             DirectoryOwnership::Owned { relative } => relative,\n-            DirectoryOwnership::UnownedViaBlock | DirectoryOwnership::UnownedViaMod(_) => None,\n+            DirectoryOwnership::UnownedViaBlock | DirectoryOwnership::UnownedViaMod => None,\n         };\n         match parser::Parser::default_submod_path(\n             mod_name,\n@@ -305,7 +304,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n \n     fn push_inline_mod_directory(&mut self, id: ast::Ident, attrs: &[ast::Attribute]) {\n         if let Some(path) = find_path_value(attrs) {\n-            self.directory.path.push(&path.as_str());\n+            self.directory.path.push(&*path.as_str());\n             self.directory.ownership = DirectoryOwnership::Owned { relative: None };\n         } else {\n             // We have to push on the current module name in the case of relative\n@@ -317,10 +316,10 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n             if let DirectoryOwnership::Owned { relative } = &mut self.directory.ownership {\n                 if let Some(ident) = relative.take() {\n                     // remove the relative offset\n-                    self.directory.path.push(ident.as_str());\n+                    self.directory.path.push(&*ident.as_str());\n                 }\n             }\n-            self.directory.path.push(&id.as_str());\n+            self.directory.path.push(&*id.as_str());\n         }\n     }\n \n@@ -357,7 +356,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n             if !actual_path.exists() {\n                 continue;\n             }\n-            let file_name = syntax_pos::FileName::Real(actual_path.clone());\n+            let file_name = rustc_span::FileName::Real(actual_path.clone());\n             if self\n                 .parse_sess\n                 .source_map()\n@@ -442,7 +441,11 @@ fn parse_inner_attributes<'a>(parser: &mut parser::Parser<'a>) -> PResult<'a, Ve\n             }\n             TokenKind::DocComment(s) => {\n                 // we need to get the position of this token before we bump.\n-                let attr = attr::mk_sugared_doc_attr(s, parser.token.span);\n+                let attr = syntax::attr::mk_doc_comment(\n+                    syntax::util::comments::doc_comment_style(&s.as_str()),\n+                    s,\n+                    parser.token.span,\n+                );\n                 if attr.style == ast::AttrStyle::Inner {\n                     attrs.push(attr);\n                     parser.bump();"}, {"sha": "4ef1daf7475b78644b1262972373b813efdc3e36", "filename": "src/modules/visitor.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fmodules%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fmodules%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules%2Fvisitor.rs?ref=c60416ed2167716dd6e7141573fbc6dde42e09e3", "patch": "@@ -1,9 +1,9 @@\n+use rustc_parse::{stream_to_parser_with_base_dir, Directory};\n+use rustc_session::parse::ParseSess;\n+use rustc_span::{symbol::kw, Symbol};\n use syntax::ast;\n-use syntax::parse::token::{DelimToken, TokenKind};\n-use syntax::parse::{stream_to_parser_with_base_dir, Directory, ParseSess};\n-use syntax::symbol::kw;\n+use syntax::token::{DelimToken, TokenKind};\n use syntax::visit::Visitor;\n-use syntax_pos::Symbol;\n \n use crate::attr::MetaVisitor;\n \n@@ -65,8 +65,9 @@ impl<'a, 'ast: 'a> CfgIfVisitor<'a> {\n             }\n         };\n \n+        let ts = mac.args.inner_tokens();\n         let mut parser =\n-            stream_to_parser_with_base_dir(self.parse_sess, mac.tts.clone(), self.base_dir.clone());\n+            stream_to_parser_with_base_dir(self.parse_sess, ts.clone(), self.base_dir.clone());\n         parser.cfg_mods = false;\n         let mut process_if_cfg = true;\n "}, {"sha": "0ef1db20fa17fe86d270b9475934000f71c103c8", "filename": "src/overflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foverflow.rs?ref=c60416ed2167716dd6e7141573fbc6dde42e09e3", "patch": "@@ -3,8 +3,8 @@\n use std::cmp::min;\n \n use itertools::Itertools;\n-use syntax::parse::token::DelimToken;\n-use syntax::source_map::Span;\n+use rustc_span::Span;\n+use syntax::token::DelimToken;\n use syntax::{ast, ptr};\n \n use crate::closures;"}, {"sha": "1ef3bd5337b0e9f28a4d6095b03bb3f4c55d6424", "filename": "src/patterns.rs", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=c60416ed2167716dd6e7141573fbc6dde42e09e3", "patch": "@@ -1,6 +1,6 @@\n+use rustc_span::{BytePos, Span};\n use syntax::ast::{self, BindingMode, FieldPat, Pat, PatKind, RangeEnd, RangeSyntax};\n use syntax::ptr;\n-use syntax::source_map::{BytePos, Span};\n \n use crate::comment::{combine_strs_with_missing_comments, FindUncommented};\n use crate::config::lists::*;\n@@ -179,26 +179,29 @@ impl Rewrite for Pat {\n                     None\n                 }\n             }\n-            PatKind::Range(ref lhs, ref rhs, ref end_kind) => {\n-                let infix = match end_kind.node {\n-                    RangeEnd::Included(RangeSyntax::DotDotDot) => \"...\",\n-                    RangeEnd::Included(RangeSyntax::DotDotEq) => \"..=\",\n-                    RangeEnd::Excluded => \"..\",\n-                };\n-                let infix = if context.config.spaces_around_ranges() {\n-                    format!(\" {} \", infix)\n-                } else {\n-                    infix.to_owned()\n-                };\n-                rewrite_pair(\n-                    &**lhs,\n-                    &**rhs,\n-                    PairParts::infix(&infix),\n-                    context,\n-                    shape,\n-                    SeparatorPlace::Front,\n-                )\n-            }\n+            PatKind::Range(ref lhs, ref rhs, ref end_kind) => match (lhs, rhs) {\n+                (Some(lhs), Some(rhs)) => {\n+                    let infix = match end_kind.node {\n+                        RangeEnd::Included(RangeSyntax::DotDotDot) => \"...\",\n+                        RangeEnd::Included(RangeSyntax::DotDotEq) => \"..=\",\n+                        RangeEnd::Excluded => \"..\",\n+                    };\n+                    let infix = if context.config.spaces_around_ranges() {\n+                        format!(\" {} \", infix)\n+                    } else {\n+                        infix.to_owned()\n+                    };\n+                    rewrite_pair(\n+                        &**lhs,\n+                        &**rhs,\n+                        PairParts::infix(&infix),\n+                        context,\n+                        shape,\n+                        SeparatorPlace::Front,\n+                    )\n+                }\n+                (_, _) => unimplemented!(),\n+            },\n             PatKind::Ref(ref pat, mutability) => {\n                 let prefix = format!(\"&{}\", format_mutability(mutability));\n                 rewrite_unary_prefix(context, &prefix, &**pat, shape)"}, {"sha": "4b607812c00bea152fec8f9e2cf49903a78ab79c", "filename": "src/reorder.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Freorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Freorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freorder.rs?ref=c60416ed2167716dd6e7141573fbc6dde42e09e3", "patch": "@@ -8,7 +8,8 @@\n \n use std::cmp::{Ord, Ordering};\n \n-use syntax::{ast, attr, source_map::Span, symbol::sym};\n+use rustc_span::{symbol::sym, Span};\n+use syntax::{ast, attr};\n \n use crate::config::Config;\n use crate::imports::{merge_use_trees, UseTree};\n@@ -30,10 +31,8 @@ fn compare_items(a: &ast::Item, b: &ast::Item) -> Ordering {\n         (&ast::ItemKind::ExternCrate(ref a_name), &ast::ItemKind::ExternCrate(ref b_name)) => {\n             // `extern crate foo as bar;`\n             //               ^^^ Comparing this.\n-            let a_orig_name =\n-                a_name.map_or_else(|| a.ident.as_str(), syntax_pos::symbol::Symbol::as_str);\n-            let b_orig_name =\n-                b_name.map_or_else(|| b.ident.as_str(), syntax_pos::symbol::Symbol::as_str);\n+            let a_orig_name = a_name.map_or_else(|| a.ident.as_str(), rustc_span::Symbol::as_str);\n+            let b_orig_name = b_name.map_or_else(|| b.ident.as_str(), rustc_span::Symbol::as_str);\n             let result = a_orig_name.cmp(&b_orig_name);\n             if result != Ordering::Equal {\n                 return result;"}, {"sha": "fbae4bc712237a904e92130bd0eb23f60073dbee", "filename": "src/rewrite.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Frewrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Frewrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frewrite.rs?ref=c60416ed2167716dd6e7141573fbc6dde42e09e3", "patch": "@@ -3,9 +3,9 @@\n use std::cell::{Cell, RefCell};\n use std::rc::Rc;\n \n-use syntax::parse::ParseSess;\n+use rustc_session::parse::ParseSess;\n+use rustc_span::{source_map::SourceMap, Span};\n use syntax::ptr;\n-use syntax::source_map::{SourceMap, Span};\n \n use crate::config::{Config, IndentStyle};\n use crate::shape::Shape;"}, {"sha": "4972eb8c778859fdc7cf086836a81477bab95c58", "filename": "src/skip.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fskip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fskip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fskip.rs?ref=c60416ed2167716dd6e7141573fbc6dde42e09e3", "patch": "@@ -1,5 +1,6 @@\n //! Module that contains skip related stuffs.\n \n+use rustc_ast_pretty::pprust;\n use syntax::ast;\n \n /// Take care of skip name stack. You can update it by attributes slice or\n@@ -45,7 +46,7 @@ pub(crate) fn is_skip_attr(segments: &[ast::PathSegment]) -> bool {\n             segments[1].ident.to_string() == SKIP\n                 && [\"macros\", \"attributes\"]\n                     .iter()\n-                    .any(|&n| n == &segments[2].ident.name.as_str())\n+                    .any(|&n| n == &pprust::path_segment_to_string(&segments[2]))\n         }\n         _ => false,\n     }\n@@ -57,8 +58,10 @@ fn get_skip_names(kind: &str, attrs: &[ast::Attribute]) -> Vec<String> {\n     for attr in attrs {\n         // syntax::ast::Path is implemented partialEq\n         // but it is designed for segments.len() == 1\n-        if format!(\"{}\", attr.path) != path {\n-            continue;\n+        if let ast::AttrKind::Normal(attr_item) = &attr.kind {\n+            if pprust::path_to_string(&attr_item.path) != path {\n+                continue;\n+            }\n         }\n \n         if let Some(list) = attr.meta_item_list() {"}, {"sha": "4cb894e55b8bd3296c20f339676a876d744f9f1b", "filename": "src/source_file.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fsource_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fsource_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsource_file.rs?ref=c60416ed2167716dd6e7141573fbc6dde42e09e3", "patch": "@@ -2,7 +2,7 @@ use std::fs;\n use std::io::{self, Write};\n use std::path::Path;\n \n-use syntax::source_map::SourceMap;\n+use rustc_span::source_map::SourceMap;\n \n use crate::config::FileName;\n use crate::emitter::{self, Emitter};\n@@ -65,11 +65,11 @@ where\n         }\n     }\n \n-    impl From<&FileName> for syntax_pos::FileName {\n-        fn from(filename: &FileName) -> syntax_pos::FileName {\n+    impl From<&FileName> for rustc_span::FileName {\n+        fn from(filename: &FileName) -> rustc_span::FileName {\n             match filename {\n-                FileName::Real(path) => syntax_pos::FileName::Real(path.to_owned()),\n-                FileName::Stdin => syntax_pos::FileName::Custom(\"stdin\".to_owned()),\n+                FileName::Real(path) => rustc_span::FileName::Real(path.to_owned()),\n+                FileName::Stdin => rustc_span::FileName::Custom(\"stdin\".to_owned()),\n             }\n         }\n     }"}, {"sha": "c3a549d3b84ea38c6dd2af576f4f688b38d28957", "filename": "src/source_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsource_map.rs?ref=c60416ed2167716dd6e7141573fbc6dde42e09e3", "patch": "@@ -1,7 +1,7 @@\n //! This module contains utilities that work with the `SourceMap` from `libsyntax`/`syntex_syntax`.\n //! This includes extension traits and methods for looking up spans and line ranges for AST nodes.\n \n-use syntax::source_map::{BytePos, SourceMap, Span};\n+use rustc_span::{source_map::SourceMap, BytePos, Span};\n \n use crate::comment::FindUncommented;\n use crate::config::file_lines::LineRange;"}, {"sha": "b2a70dd5cece5d3be0c678b1ec9dd20bb28c47a1", "filename": "src/spanned.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fspanned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fspanned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fspanned.rs?ref=c60416ed2167716dd6e7141573fbc6dde42e09e3", "patch": "@@ -1,9 +1,7 @@\n use std::cmp::max;\n \n-use syntax::{\n-    ast, ptr,\n-    source_map::{self, Span},\n-};\n+use rustc_span::{source_map, Span};\n+use syntax::{ast, ptr};\n \n use crate::macros::MacroArg;\n use crate::utils::{mk_sp, outer_attributes};\n@@ -53,13 +51,12 @@ macro_rules! implement_spanned {\n }\n \n // Implement `Spanned` for structs with `attrs` field.\n+implement_spanned!(ast::AssocItem);\n implement_spanned!(ast::Expr);\n implement_spanned!(ast::Field);\n implement_spanned!(ast::ForeignItem);\n implement_spanned!(ast::Item);\n implement_spanned!(ast::Local);\n-implement_spanned!(ast::TraitItem);\n-implement_spanned!(ast::ImplItem);\n \n impl Spanned for ast::Stmt {\n     fn span(&self) -> Span {"}, {"sha": "df22a5dfd0286f5108f40f8b568a585b5f86ba26", "filename": "src/stmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstmt.rs?ref=c60416ed2167716dd6e7141573fbc6dde42e09e3", "patch": "@@ -1,5 +1,5 @@\n+use rustc_span::Span;\n use syntax::ast;\n-use syntax_pos::Span;\n \n use crate::comment::recover_comment_removed;\n use crate::config::Version;"}, {"sha": "efc85efc5c490f2b48308e3c7a143854d9f8e17d", "filename": "src/types.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=c60416ed2167716dd6e7141573fbc6dde42e09e3", "patch": "@@ -1,9 +1,8 @@\n use std::iter::ExactSizeIterator;\n use std::ops::Deref;\n \n+use rustc_span::{symbol::kw, BytePos, Span};\n use syntax::ast::{self, FunctionRetTy, Mutability};\n-use syntax::source_map::{self, BytePos, Span};\n-use syntax::symbol::kw;\n \n use crate::config::lists::*;\n use crate::config::{IndentStyle, TypeDensity, Version};\n@@ -19,7 +18,7 @@ use crate::shape::Shape;\n use crate::source_map::SpanUtils;\n use crate::spanned::Spanned;\n use crate::utils::{\n-    colon_spaces, extra_offset, first_line_width, format_abi, format_mutability,\n+    colon_spaces, extra_offset, first_line_width, format_extern, format_mutability,\n     last_line_extendable, last_line_width, mk_sp, rewrite_ident,\n };\n \n@@ -275,13 +274,9 @@ fn rewrite_segment(\n                 result.push_str(&generics_str)\n             }\n             ast::GenericArgs::Parenthesized(ref data) => {\n-                let output = match data.output {\n-                    Some(ref ty) => FunctionRetTy::Ty(ty.clone()),\n-                    None => FunctionRetTy::Default(source_map::DUMMY_SP),\n-                };\n                 result.push_str(&format_function_type(\n                     data.inputs.iter().map(|x| &**x),\n-                    &output,\n+                    &data.output,\n                     false,\n                     data.span,\n                     context,\n@@ -528,6 +523,7 @@ impl Rewrite for ast::GenericBound {\n                     ast::TraitBoundModifier::Maybe => poly_trait_ref\n                         .rewrite(context, shape.offset_left(1)?)\n                         .map(|s| format!(\"?{}\", s)),\n+                    _ => unimplemented!(),\n                 };\n                 rewrite.map(|s| if has_paren { format!(\"({})\", s) } else { s })\n             }\n@@ -634,8 +630,8 @@ impl Rewrite for ast::Ty {\n             }\n             ast::TyKind::Ptr(ref mt) => {\n                 let prefix = match mt.mutbl {\n-                    Mutability::Mutable => \"*mut \",\n-                    Mutability::Immutable => \"*const \",\n+                    Mutability::Mut => \"*mut \",\n+                    Mutability::Not => \"*const \",\n                 };\n \n                 rewrite_unary_prefix(context, prefix, &*mt.ty, shape)\n@@ -783,8 +779,8 @@ fn rewrite_bare_fn(\n \n     result.push_str(crate::utils::format_unsafety(bare_fn.unsafety));\n \n-    result.push_str(&format_abi(\n-        bare_fn.abi,\n+    result.push_str(&format_extern(\n+        bare_fn.ext,\n         context.config.force_explicit_abi(),\n         false,\n     ));"}, {"sha": "e0971c7d1bffcd0cad7b0386a14cdd75f3daa1d1", "filename": "src/utils.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=c60416ed2167716dd6e7141573fbc6dde42e09e3", "patch": "@@ -1,14 +1,13 @@\n use std::borrow::Cow;\n \n+use rustc_ast_pretty::pprust;\n+use rustc_span::{sym, BytePos, ExpnId, Span, Symbol, SyntaxContext};\n use rustc_target::spec::abi;\n use syntax::ast::{\n     self, Attribute, CrateSugar, MetaItem, MetaItemKind, NestedMetaItem, NodeId, Path, Visibility,\n     VisibilityKind,\n };\n use syntax::ptr;\n-use syntax::source_map::{BytePos, Span, SyntaxContext};\n-use syntax::symbol::{sym, Symbol};\n-use syntax_pos::ExpnId;\n use unicode_width::UnicodeWidthStr;\n \n use crate::comment::{filter_normal_code, CharClasses, FullCodeCharKind, LineClasses};\n@@ -44,7 +43,7 @@ pub(crate) fn is_same_visibility(a: &Visibility, b: &Visibility) -> bool {\n         (\n             VisibilityKind::Restricted { path: p, .. },\n             VisibilityKind::Restricted { path: q, .. },\n-        ) => p.to_string() == q.to_string(),\n+        ) => pprust::path_to_string(p) == pprust::path_to_string(q),\n         (VisibilityKind::Public, VisibilityKind::Public)\n         | (VisibilityKind::Inherited, VisibilityKind::Inherited)\n         | (\n@@ -129,13 +128,25 @@ pub(crate) fn format_auto(is_auto: ast::IsAuto) -> &'static str {\n #[inline]\n pub(crate) fn format_mutability(mutability: ast::Mutability) -> &'static str {\n     match mutability {\n-        ast::Mutability::Mutable => \"mut \",\n-        ast::Mutability::Immutable => \"\",\n+        ast::Mutability::Mut => \"mut \",\n+        ast::Mutability::Not => \"\",\n     }\n }\n \n #[inline]\n-pub(crate) fn format_abi(abi: abi::Abi, explicit_abi: bool, is_mod: bool) -> Cow<'static, str> {\n+pub(crate) fn format_extern(\n+    ext: ast::Extern,\n+    explicit_abi: bool,\n+    is_mod: bool,\n+) -> Cow<'static, str> {\n+    let abi = match ext {\n+        ast::Extern::None => abi::Abi::Rust,\n+        ast::Extern::Implicit => abi::Abi::C,\n+        ast::Extern::Explicit(abi) => {\n+            abi::lookup(&abi.symbol_unescaped.as_str()).unwrap_or(abi::Abi::Rust)\n+        }\n+    };\n+\n     if abi == abi::Abi::Rust && !is_mod {\n         Cow::from(\"\")\n     } else if abi == abi::Abi::C && !explicit_abi {\n@@ -243,8 +254,9 @@ pub(crate) fn last_line_extendable(s: &str) -> bool {\n fn is_skip(meta_item: &MetaItem) -> bool {\n     match meta_item.kind {\n         MetaItemKind::Word => {\n-            let path_str = meta_item.path.to_string();\n-            path_str == skip_annotation().as_str() || path_str == depr_skip_annotation().as_str()\n+            let path_str = pprust::path_to_string(&meta_item.path);\n+            path_str == &*skip_annotation().as_str()\n+                || path_str == &*depr_skip_annotation().as_str()\n         }\n         MetaItemKind::List(ref l) => {\n             meta_item.check_name(sym::cfg_attr) && l.len() == 2 && is_skip_nested(&l[1])\n@@ -420,7 +432,7 @@ pub(crate) fn left_most_sub_expr(e: &ast::Expr) -> &ast::Expr {\n         | ast::ExprKind::Binary(_, ref e, _)\n         | ast::ExprKind::Cast(ref e, _)\n         | ast::ExprKind::Type(ref e, _)\n-        | ast::ExprKind::Assign(ref e, _)\n+        | ast::ExprKind::Assign(ref e, _, _)\n         | ast::ExprKind::AssignOp(_, ref e, _)\n         | ast::ExprKind::Field(ref e, _)\n         | ast::ExprKind::Index(ref e, _)"}, {"sha": "b932b0afa175bd990aacbced5da695369dac2003", "filename": "src/vertical.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvertical.rs?ref=c60416ed2167716dd6e7141573fbc6dde42e09e3", "patch": "@@ -3,8 +3,8 @@\n use std::cmp;\n \n use itertools::Itertools;\n+use rustc_span::{BytePos, Span};\n use syntax::ast;\n-use syntax::source_map::{BytePos, Span};\n \n use crate::comment::combine_strs_with_missing_comments;\n use crate::config::lists::*;"}, {"sha": "c6ae3b3be1e866cd332b2f58d6e6a8d6ef36c672", "filename": "src/visitor.rs", "status": "modified", "additions": 140, "deletions": 74, "changes": 214, "blob_url": "https://github.com/rust-lang/rust/blob/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60416ed2167716dd6e7141573fbc6dde42e09e3/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=c60416ed2167716dd6e7141573fbc6dde42e09e3", "patch": "@@ -1,8 +1,12 @@\n use std::cell::{Cell, RefCell};\n use std::rc::Rc;\n \n-use syntax::parse::ParseSess;\n-use syntax::source_map::{self, BytePos, Pos, SourceMap, Span};\n+use rustc_session::parse::ParseSess;\n+use rustc_span::{\n+    source_map::{self, SourceMap},\n+    BytePos, Pos, Span,\n+};\n+use syntax::token::DelimToken;\n use syntax::{ast, visit};\n \n use crate::attr::*;\n@@ -16,7 +20,7 @@ use crate::items::{\n     rewrite_opaque_impl_type, rewrite_opaque_type, rewrite_type_alias, FnBraceStyle, FnSig,\n     StaticParts, StructParts,\n };\n-use crate::macros::{rewrite_macro, rewrite_macro_def, MacroPosition};\n+use crate::macros::{macro_style, rewrite_macro, rewrite_macro_def, MacroPosition};\n use crate::rewrite::{Rewrite, RewriteContext};\n use crate::shape::{Indent, Shape};\n use crate::skip::{is_skip_attr, SkipContext};\n@@ -35,6 +39,8 @@ pub(crate) struct SnippetProvider<'a> {\n     big_snippet: &'a str,\n     /// A position of the start of `big_snippet`, used as an offset.\n     start_pos: usize,\n+    /// A end position of the file that this snippet lives.\n+    end_pos: usize,\n }\n \n impl<'a> SnippetProvider<'a> {\n@@ -44,13 +50,19 @@ impl<'a> SnippetProvider<'a> {\n         Some(&self.big_snippet[start_index..end_index])\n     }\n \n-    pub(crate) fn new(start_pos: BytePos, big_snippet: &'a str) -> Self {\n+    pub(crate) fn new(start_pos: BytePos, end_pos: BytePos, big_snippet: &'a str) -> Self {\n         let start_pos = start_pos.to_usize();\n+        let end_pos = end_pos.to_usize();\n         SnippetProvider {\n             big_snippet,\n             start_pos,\n+            end_pos,\n         }\n     }\n+\n+    pub(crate) fn end_pos(&self) -> BytePos {\n+        BytePos::from_usize(self.end_pos)\n+    }\n }\n \n pub(crate) struct FmtVisitor<'a> {\n@@ -348,7 +360,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         let indent = self.block_indent;\n         let block;\n         let rewrite = match fk {\n-            visit::FnKind::ItemFn(ident, _, _, b) | visit::FnKind::Method(ident, _, _, b) => {\n+            visit::FnKind::Fn(_, ident, _, _, Some(ref b)) => {\n                 block = b;\n                 self.rewrite_fn_before_block(\n                     indent,\n@@ -357,7 +369,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                     mk_sp(s.lo(), b.span.lo()),\n                 )\n             }\n-            visit::FnKind::Closure(_) => unreachable!(),\n+            _ => unreachable!(),\n         };\n \n         if let Some((fn_str, fn_brace_style)) = rewrite {\n@@ -441,7 +453,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         if should_visit_node_again {\n             match item.kind {\n                 ast::ItemKind::Use(ref tree) => self.format_import(item, tree),\n-                ast::ItemKind::Impl(..) => {\n+                ast::ItemKind::Impl { .. } => {\n                     let block_indent = self.block_indent;\n                     let rw = self.with_context(|ctx| format_impl(&ctx, item, block_indent));\n                     self.push_rewrite(item.span, rw);\n@@ -495,39 +507,51 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 ast::ItemKind::Static(..) | ast::ItemKind::Const(..) => {\n                     self.visit_static(&StaticParts::from_item(item));\n                 }\n-                ast::ItemKind::Fn(ref decl, ref fn_header, ref generics, ref body) => {\n+                ast::ItemKind::Fn(ref fn_signature, ref generics, ref body) => {\n                     let inner_attrs = inner_attributes(&item.attrs);\n+                    let fn_ctxt = match fn_signature.header.ext {\n+                        ast::Extern::None => visit::FnCtxt::Free,\n+                        _ => visit::FnCtxt::Foreign,\n+                    };\n                     self.visit_fn(\n-                        visit::FnKind::ItemFn(item.ident, fn_header, &item.vis, body),\n+                        visit::FnKind::Fn(\n+                            fn_ctxt,\n+                            item.ident,\n+                            &fn_signature,\n+                            &item.vis,\n+                            body.as_deref(),\n+                        ),\n                         generics,\n-                        decl,\n+                        &fn_signature.decl,\n                         item.span,\n                         ast::Defaultness::Final,\n                         Some(&inner_attrs),\n                     )\n                 }\n-                ast::ItemKind::TyAlias(ref ty, ref generics) => {\n-                    let rewrite = rewrite_type_alias(\n-                        &self.get_context(),\n-                        self.block_indent,\n-                        item.ident,\n-                        ty,\n-                        generics,\n-                        &item.vis,\n-                    );\n-                    self.push_rewrite(item.span, rewrite);\n-                }\n-                ast::ItemKind::OpaqueTy(ref generic_bounds, ref generics) => {\n-                    let rewrite = rewrite_opaque_type(\n-                        &self.get_context(),\n-                        self.block_indent,\n-                        item.ident,\n-                        generic_bounds,\n-                        generics,\n-                        &item.vis,\n-                    );\n-                    self.push_rewrite(item.span, rewrite);\n-                }\n+                ast::ItemKind::TyAlias(ref ty, ref generics) => match ty.kind.opaque_top_hack() {\n+                    None => {\n+                        let rewrite = rewrite_type_alias(\n+                            &self.get_context(),\n+                            self.block_indent,\n+                            item.ident,\n+                            ty,\n+                            generics,\n+                            &item.vis,\n+                        );\n+                        self.push_rewrite(item.span, rewrite);\n+                    }\n+                    Some(generic_bounds) => {\n+                        let rewrite = rewrite_opaque_type(\n+                            &self.get_context(),\n+                            self.block_indent,\n+                            item.ident,\n+                            generic_bounds,\n+                            generics,\n+                            &item.vis,\n+                        );\n+                        self.push_rewrite(item.span, rewrite);\n+                    }\n+                },\n                 ast::ItemKind::GlobalAsm(..) => {\n                     let snippet = Some(self.snippet(item.span).to_owned());\n                     self.push_rewrite(item.span, snippet);\n@@ -549,7 +573,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         self.skip_context = skip_context_saved;\n     }\n \n-    pub(crate) fn visit_trait_item(&mut self, ti: &ast::TraitItem) {\n+    pub(crate) fn visit_trait_item(&mut self, ti: &ast::AssocItem) {\n         skip_out_of_file_lines_range_visitor!(self, ti.span);\n \n         if self.visit_attrs(&ti.attrs, ast::AttrStyle::Outer) {\n@@ -558,25 +582,27 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         }\n \n         match ti.kind {\n-            ast::TraitItemKind::Const(..) => self.visit_static(&StaticParts::from_trait_item(ti)),\n-            ast::TraitItemKind::Method(ref sig, None) => {\n+            ast::AssocItemKind::Const(..) => self.visit_static(&StaticParts::from_trait_item(ti)),\n+            ast::AssocItemKind::Fn(ref sig, None) => {\n                 let indent = self.block_indent;\n                 let rewrite =\n                     self.rewrite_required_fn(indent, ti.ident, sig, &ti.generics, ti.span);\n                 self.push_rewrite(ti.span, rewrite);\n             }\n-            ast::TraitItemKind::Method(ref sig, Some(ref body)) => {\n+            ast::AssocItemKind::Fn(ref sig, Some(ref body)) => {\n                 let inner_attrs = inner_attributes(&ti.attrs);\n+                let vis = rustc_span::source_map::dummy_spanned(ast::VisibilityKind::Inherited);\n+                let fn_ctxt = visit::FnCtxt::Assoc(visit::AssocCtxt::Trait);\n                 self.visit_fn(\n-                    visit::FnKind::Method(ti.ident, sig, None, body),\n+                    visit::FnKind::Fn(fn_ctxt, ti.ident, sig, &vis, Some(body)),\n                     &ti.generics,\n                     &sig.decl,\n                     ti.span,\n                     ast::Defaultness::Final,\n                     Some(&inner_attrs),\n                 );\n             }\n-            ast::TraitItemKind::Type(ref generic_bounds, ref type_default) => {\n+            ast::AssocItemKind::TyAlias(ref generic_bounds, ref type_default) => {\n                 let rewrite = rewrite_associated_type(\n                     ti.ident,\n                     type_default.as_ref(),\n@@ -587,67 +613,100 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 );\n                 self.push_rewrite(ti.span, rewrite);\n             }\n-            ast::TraitItemKind::Macro(ref mac) => {\n+            ast::AssocItemKind::Macro(ref mac) => {\n                 self.visit_mac(mac, Some(ti.ident), MacroPosition::Item);\n             }\n         }\n     }\n \n-    pub(crate) fn visit_impl_item(&mut self, ii: &ast::ImplItem) {\n+    pub(crate) fn visit_impl_item(&mut self, ii: &ast::AssocItem) {\n         skip_out_of_file_lines_range_visitor!(self, ii.span);\n \n         if self.visit_attrs(&ii.attrs, ast::AttrStyle::Outer) {\n-            self.push_skipped_with_span(ii.attrs.as_slice(), ii.span(), ii.span());\n+            self.push_skipped_with_span(ii.attrs.as_slice(), ii.span, ii.span);\n             return;\n         }\n \n         match ii.kind {\n-            ast::ImplItemKind::Method(ref sig, ref body) => {\n+            ast::AssocItemKind::Fn(ref sig, Some(ref body)) => {\n                 let inner_attrs = inner_attributes(&ii.attrs);\n+                let fn_ctxt = visit::FnCtxt::Assoc(visit::AssocCtxt::Impl);\n                 self.visit_fn(\n-                    visit::FnKind::Method(ii.ident, sig, Some(&ii.vis), body),\n+                    visit::FnKind::Fn(fn_ctxt, ii.ident, sig, &ii.vis, Some(body)),\n                     &ii.generics,\n                     &sig.decl,\n                     ii.span,\n                     ii.defaultness,\n                     Some(&inner_attrs),\n                 );\n             }\n-            ast::ImplItemKind::Const(..) => self.visit_static(&StaticParts::from_impl_item(ii)),\n-            ast::ImplItemKind::TyAlias(ref ty) => {\n-                let rewrite = rewrite_associated_impl_type(\n-                    ii.ident,\n-                    ii.defaultness,\n-                    Some(ty),\n-                    &ii.generics,\n-                    &self.get_context(),\n-                    self.block_indent,\n-                );\n+            ast::AssocItemKind::Fn(ref sig, None) => {\n+                let indent = self.block_indent;\n+                let rewrite =\n+                    self.rewrite_required_fn(indent, ii.ident, sig, &ii.generics, ii.span);\n                 self.push_rewrite(ii.span, rewrite);\n             }\n-            ast::ImplItemKind::OpaqueTy(ref generic_bounds) => {\n-                let rewrite = rewrite_opaque_impl_type(\n-                    &self.get_context(),\n-                    ii.ident,\n-                    &ii.generics,\n-                    generic_bounds,\n-                    self.block_indent,\n-                );\n+            ast::AssocItemKind::Const(..) => self.visit_static(&StaticParts::from_impl_item(ii)),\n+            ast::AssocItemKind::TyAlias(_, ref ty) => {\n+                let rewrite_associated = || {\n+                    rewrite_associated_impl_type(\n+                        ii.ident,\n+                        ii.defaultness,\n+                        ty.as_ref(),\n+                        &ii.generics,\n+                        &self.get_context(),\n+                        self.block_indent,\n+                    )\n+                };\n+                let rewrite = match ty {\n+                    None => rewrite_associated(),\n+                    Some(ty) => match ty.kind.opaque_top_hack() {\n+                        Some(generic_bounds) => rewrite_opaque_impl_type(\n+                            &self.get_context(),\n+                            ii.ident,\n+                            &ii.generics,\n+                            generic_bounds,\n+                            self.block_indent,\n+                        ),\n+                        None => rewrite_associated(),\n+                    },\n+                };\n                 self.push_rewrite(ii.span, rewrite);\n             }\n-            ast::ImplItemKind::Macro(ref mac) => {\n+            ast::AssocItemKind::Macro(ref mac) => {\n                 self.visit_mac(mac, Some(ii.ident), MacroPosition::Item);\n             }\n         }\n     }\n \n     fn visit_mac(&mut self, mac: &ast::Mac, ident: Option<ast::Ident>, pos: MacroPosition) {\n-        skip_out_of_file_lines_range_visitor!(self, mac.span);\n+        skip_out_of_file_lines_range_visitor!(self, mac.span());\n \n         // 1 = ;\n         let shape = self.shape().saturating_sub_width(1);\n         let rewrite = self.with_context(|ctx| rewrite_macro(mac, ident, ctx, shape, pos));\n-        self.push_rewrite(mac.span, rewrite);\n+        // As of v638 of the rustc-ap-* crates, the associated span no longer includes\n+        // the trailing semicolon. This determines the correct span to ensure scenarios\n+        // with whitespace between the delimiters and trailing semi (i.e. `foo!(abc)     ;`)\n+        // are formatted correctly.\n+        let (span, rewrite) = match macro_style(mac, &self.get_context()) {\n+            DelimToken::Bracket | DelimToken::Paren if MacroPosition::Item == pos => {\n+                let search_span = mk_sp(mac.span().hi(), self.snippet_provider.end_pos());\n+                let hi = self.snippet_provider.span_before(search_span, \";\");\n+                let target_span = mk_sp(mac.span().lo(), hi + BytePos(1));\n+                let rewrite = rewrite.map(|rw| {\n+                    if !rw.ends_with(\";\") {\n+                        format!(\"{};\", rw)\n+                    } else {\n+                        rw\n+                    }\n+                });\n+                (target_span, rewrite)\n+            }\n+            _ => (mac.span(), rewrite),\n+        };\n+\n+        self.push_rewrite(span, rewrite);\n     }\n \n     pub(crate) fn push_str(&mut self, s: &str) {\n@@ -751,16 +810,23 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                         ErrorKind::DeprecatedAttr,\n                     )],\n                 );\n-            } else if self.is_unknown_rustfmt_attr(&attr.path.segments) {\n-                let file_name = self.source_map.span_to_filename(attr.span).into();\n-                self.report.append(\n-                    file_name,\n-                    vec![FormattingError::from_span(\n-                        attr.span,\n-                        &self.source_map,\n-                        ErrorKind::BadAttr,\n-                    )],\n-                );\n+            } else {\n+                match &attr.kind {\n+                    ast::AttrKind::Normal(ref attribute_item)\n+                        if self.is_unknown_rustfmt_attr(&attribute_item.path.segments) =>\n+                    {\n+                        let file_name = self.source_map.span_to_filename(attr.span).into();\n+                        self.report.append(\n+                            file_name,\n+                            vec![FormattingError::from_span(\n+                                attr.span,\n+                                self.source_map,\n+                                ErrorKind::BadAttr,\n+                            )],\n+                        );\n+                    }\n+                    _ => (),\n+                }\n             }\n         }\n         if contains_skip(attrs) {"}, {"sha": "ccb1f8486c5ea9fef43f043e420b37bf58ac9902", "filename": "tests/source/issue-2916.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c60416ed2167716dd6e7141573fbc6dde42e09e3/tests%2Fsource%2Fissue-2916.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60416ed2167716dd6e7141573fbc6dde42e09e3/tests%2Fsource%2Fissue-2916.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-2916.rs?ref=c60416ed2167716dd6e7141573fbc6dde42e09e3", "patch": "@@ -0,0 +1,2 @@\n+a_macro!(name<Param1, Param2>,\n+)    ;"}, {"sha": "fb07cc8065ca23f536a2d3be27394241fbbe0b24", "filename": "tests/target/issue-2916.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c60416ed2167716dd6e7141573fbc6dde42e09e3/tests%2Ftarget%2Fissue-2916.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60416ed2167716dd6e7141573fbc6dde42e09e3/tests%2Ftarget%2Fissue-2916.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2916.rs?ref=c60416ed2167716dd6e7141573fbc6dde42e09e3", "patch": "@@ -1,2 +1,2 @@\n-a_macro!(name<Param1, Param2>, \n+a_macro!(name<Param1, Param2>,\n );"}]}