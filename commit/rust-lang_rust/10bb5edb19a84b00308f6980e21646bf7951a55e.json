{"sha": "10bb5edb19a84b00308f6980e21646bf7951a55e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwYmI1ZWRiMTlhODRiMDAzMDhmNjk4MGUyMTY0NmJmNzk1MWE1NWU=", "commit": {"author": {"name": "Sergio Benitez", "email": "sb@sergio.bz", "date": "2018-09-13T08:16:54Z"}, "committer": {"name": "Sergio Benitez", "email": "sb@sergio.bz", "date": "2018-09-13T08:19:48Z"}, "message": "Add multispan support to proc-macro diagnostics.\n\nAlso updates the issue number for 'proc_macro_diagnostic'.", "tree": {"sha": "741c40866e58cefef6484805eea926f1cab35ec7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/741c40866e58cefef6484805eea926f1cab35ec7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10bb5edb19a84b00308f6980e21646bf7951a55e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10bb5edb19a84b00308f6980e21646bf7951a55e", "html_url": "https://github.com/rust-lang/rust/commit/10bb5edb19a84b00308f6980e21646bf7951a55e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10bb5edb19a84b00308f6980e21646bf7951a55e/comments", "author": {"login": "SergioBenitez", "id": 1480321, "node_id": "MDQ6VXNlcjE0ODAzMjE=", "avatar_url": "https://avatars.githubusercontent.com/u/1480321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SergioBenitez", "html_url": "https://github.com/SergioBenitez", "followers_url": "https://api.github.com/users/SergioBenitez/followers", "following_url": "https://api.github.com/users/SergioBenitez/following{/other_user}", "gists_url": "https://api.github.com/users/SergioBenitez/gists{/gist_id}", "starred_url": "https://api.github.com/users/SergioBenitez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SergioBenitez/subscriptions", "organizations_url": "https://api.github.com/users/SergioBenitez/orgs", "repos_url": "https://api.github.com/users/SergioBenitez/repos", "events_url": "https://api.github.com/users/SergioBenitez/events{/privacy}", "received_events_url": "https://api.github.com/users/SergioBenitez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SergioBenitez", "id": 1480321, "node_id": "MDQ6VXNlcjE0ODAzMjE=", "avatar_url": "https://avatars.githubusercontent.com/u/1480321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SergioBenitez", "html_url": "https://github.com/SergioBenitez", "followers_url": "https://api.github.com/users/SergioBenitez/followers", "following_url": "https://api.github.com/users/SergioBenitez/following{/other_user}", "gists_url": "https://api.github.com/users/SergioBenitez/gists{/gist_id}", "starred_url": "https://api.github.com/users/SergioBenitez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SergioBenitez/subscriptions", "organizations_url": "https://api.github.com/users/SergioBenitez/orgs", "repos_url": "https://api.github.com/users/SergioBenitez/repos", "events_url": "https://api.github.com/users/SergioBenitez/events{/privacy}", "received_events_url": "https://api.github.com/users/SergioBenitez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50d869333b06a271729e7b19d6381c090ef99877", "url": "https://api.github.com/repos/rust-lang/rust/commits/50d869333b06a271729e7b19d6381c090ef99877", "html_url": "https://github.com/rust-lang/rust/commit/50d869333b06a271729e7b19d6381c090ef99877"}], "stats": {"total": 285, "additions": 244, "deletions": 41}, "files": [{"sha": "bf23de394370237219007f7a0ad6cbe07572c17f", "filename": "src/libproc_macro/diagnostic.rs", "status": "modified", "additions": 72, "deletions": 39, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/10bb5edb19a84b00308f6980e21646bf7951a55e/src%2Flibproc_macro%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10bb5edb19a84b00308f6980e21646bf7951a55e/src%2Flibproc_macro%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fdiagnostic.rs?ref=10bb5edb19a84b00308f6980e21646bf7951a55e", "patch": "@@ -11,10 +11,9 @@\n use Span;\n \n use rustc_errors as errors;\n-use syntax_pos::MultiSpan;\n \n /// An enum representing a diagnostic level.\n-#[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n #[derive(Copy, Clone, Debug)]\n #[non_exhaustive]\n pub enum Level {\n@@ -28,43 +27,74 @@ pub enum Level {\n     Help,\n }\n \n+/// Trait implemented by types that can be converted into a set of `Span`s.\n+#[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n+pub trait MultiSpan {\n+    /// Converts `self` into a `Vec<Span>`.\n+    fn into_spans(self) -> Vec<Span>;\n+}\n+\n+#[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n+impl MultiSpan for Span {\n+    fn into_spans(self) -> Vec<Span> {\n+        vec![self]\n+    }\n+}\n+\n+#[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n+impl MultiSpan for Vec<Span> {\n+    fn into_spans(self) -> Vec<Span> {\n+        self\n+    }\n+}\n+\n+#[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n+impl<'a> MultiSpan for &'a [Span] {\n+    fn into_spans(self) -> Vec<Span> {\n+        self.to_vec()\n+    }\n+}\n+\n /// A structure representing a diagnostic message and associated children\n /// messages.\n-#[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n #[derive(Clone, Debug)]\n pub struct Diagnostic {\n     level: Level,\n     message: String,\n-    span: Option<Span>,\n+    spans: Vec<Span>,\n     children: Vec<Diagnostic>\n }\n \n macro_rules! diagnostic_child_methods {\n     ($spanned:ident, $regular:ident, $level:expr) => (\n         /// Add a new child diagnostic message to `self` with the level\n-        /// identified by this methods name with the given `span` and `message`.\n-        #[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n-        pub fn $spanned<T: Into<String>>(mut self, span: Span, message: T) -> Diagnostic {\n-            self.children.push(Diagnostic::spanned(span, $level, message));\n+        /// identified by this method's name with the given `spans` and\n+        /// `message`.\n+        #[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n+        pub fn $spanned<S, T>(mut self, spans: S, message: T) -> Diagnostic\n+            where S: MultiSpan, T: Into<String>\n+        {\n+            self.children.push(Diagnostic::spanned(spans, $level, message));\n             self\n         }\n \n         /// Add a new child diagnostic message to `self` with the level\n         /// identified by this method's name with the given `message`.\n-        #[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n+        #[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n         pub fn $regular<T: Into<String>>(mut self, message: T) -> Diagnostic {\n             self.children.push(Diagnostic::new($level, message));\n             self\n         }\n     )\n }\n \n-#[derive(Debug, Clone)]\n-#[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n /// Iterator over the children diagnostics of a `Diagnostic`.\n+#[derive(Debug, Clone)]\n+#[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n pub struct Children<'a>(::std::slice::Iter<'a, Diagnostic>);\n \n-#[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n impl<'a> Iterator for Children<'a> {\n     type Item = &'a Diagnostic;\n \n@@ -73,27 +103,29 @@ impl<'a> Iterator for Children<'a> {\n     }\n }\n \n-#[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n impl Diagnostic {\n     /// Create a new diagnostic with the given `level` and `message`.\n-    #[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n     pub fn new<T: Into<String>>(level: Level, message: T) -> Diagnostic {\n         Diagnostic {\n             level: level,\n             message: message.into(),\n-            span: None,\n+            spans: vec![],\n             children: vec![]\n         }\n     }\n \n     /// Create a new diagnostic with the given `level` and `message` pointing to\n-    /// the given `span`.\n-    #[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n-    pub fn spanned<T: Into<String>>(span: Span, level: Level, message: T) -> Diagnostic {\n+    /// the given set of `spans`.\n+    #[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n+    pub fn spanned<S, T>(spans: S, level: Level, message: T) -> Diagnostic\n+        where S: MultiSpan, T: Into<String>\n+    {\n         Diagnostic {\n             level: level,\n             message: message.into(),\n-            span: Some(span),\n+            spans: spans.into_spans(),\n             children: vec![]\n         }\n     }\n@@ -104,61 +136,62 @@ impl Diagnostic {\n     diagnostic_child_methods!(span_help, help, Level::Help);\n \n     /// Returns the diagnostic `level` for `self`.\n-    #[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n     pub fn level(&self) -> Level {\n         self.level\n     }\n \n     /// Sets the level in `self` to `level`.\n-    #[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n     pub fn set_level(&mut self, level: Level) {\n         self.level = level;\n     }\n \n     /// Returns the message in `self`.\n-    #[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n     pub fn message(&self) -> &str {\n         &self.message\n     }\n \n     /// Sets the message in `self` to `message`.\n-    #[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n     pub fn set_message<T: Into<String>>(&mut self, message: T) {\n         self.message = message.into();\n     }\n \n-    /// Returns the `Span` in `self`.\n-    #[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n-    pub fn span(&self) -> Option<Span> {\n-        self.span\n+    /// Returns the `Span`s in `self`.\n+    #[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n+    pub fn spans(&self) -> &[Span] {\n+        &self.spans\n     }\n \n-    /// Sets the `Span` in `self` to `span`.\n-    #[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n-    pub fn set_span(&mut self, span: Span) {\n-        self.span = Some(span);\n+    /// Sets the `Span`s in `self` to `spans`.\n+    #[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n+    pub fn set_spans<S: MultiSpan>(&mut self, spans: S) {\n+        self.spans = spans.into_spans();\n     }\n \n     /// Returns an iterator over the children diagnostics of `self`.\n-    #[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n     pub fn children(&self) -> Children {\n         Children(self.children.iter())\n     }\n \n     /// Emit the diagnostic.\n-    #[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n     pub fn emit(self) {\n+        fn to_internal(spans: Vec<Span>) -> ::syntax_pos::MultiSpan {\n+            let spans: Vec<_> = spans.into_iter().map(|s| s.0).collect();\n+            ::syntax_pos::MultiSpan::from_spans(spans)\n+        }\n+\n         let level = self.level.to_internal();\n         let mut diag = errors::Diagnostic::new(level, &*self.message);\n-\n-        if let Some(span) = self.span {\n-            diag.set_span(span.0);\n-        }\n+        diag.set_span(to_internal(self.spans));\n \n         for child in self.children {\n-            let span = child.span.map_or(MultiSpan::new(), |s| s.0.into());\n             let level = child.level.to_internal();\n-            diag.sub(level, &*child.message, span, None);\n+            diag.sub(level, &*child.message, to_internal(child.spans), None);\n         }\n \n         ::__internal::with_sess(move |sess, _| {"}, {"sha": "1a0dde3ccd7c3c331aaad23584145f8b9823733f", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10bb5edb19a84b00308f6980e21646bf7951a55e/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10bb5edb19a84b00308f6980e21646bf7951a55e/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=10bb5edb19a84b00308f6980e21646bf7951a55e", "patch": "@@ -47,7 +47,7 @@ pub mod rustc;\n \n mod diagnostic;\n \n-#[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n pub use diagnostic::{Diagnostic, Level};\n \n use std::{ascii, fmt, iter};\n@@ -274,7 +274,7 @@ macro_rules! diagnostic_method {\n     ($name:ident, $level:expr) => (\n         /// Create a new `Diagnostic` with the given `message` at the span\n         /// `self`.\n-        #[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n+        #[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n         pub fn $name<T: Into<String>>(self, message: T) -> Diagnostic {\n             Diagnostic::spanned(self, $level, message)\n         }"}, {"sha": "cecd9ef4d994d4f9e9006e5e4ff3088233667d6e", "filename": "src/test/ui-fulldeps/proc-macro/auxiliary/multispan.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/10bb5edb19a84b00308f6980e21646bf7951a55e/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fmultispan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10bb5edb19a84b00308f6980e21646bf7951a55e/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fmultispan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fmultispan.rs?ref=10bb5edb19a84b00308f6980e21646bf7951a55e", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+#![feature(proc_macro_diagnostic, proc_macro_span)]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::{TokenStream, TokenTree, Span, Diagnostic};\n+\n+fn parse(input: TokenStream) -> Result<(), Diagnostic> {\n+    let mut hi_spans = vec![];\n+    for tree in input {\n+        if let TokenTree::Ident(ref ident) = tree {\n+            if ident.to_string() == \"hi\" {\n+                hi_spans.push(ident.span());\n+            }\n+        }\n+    }\n+\n+    if !hi_spans.is_empty() {\n+        return Err(Span::def_site()\n+                       .error(\"hello to you, too!\")\n+                       .span_note(hi_spans, \"found these 'hi's\"));\n+    }\n+\n+    Ok(())\n+}\n+\n+#[proc_macro]\n+pub fn hello(input: TokenStream) -> TokenStream {\n+    if let Err(diag) = parse(input) {\n+        diag.emit();\n+    }\n+\n+    TokenStream::new()\n+}"}, {"sha": "940ec016a5a3f2741a472a0f0ddd99a8a314925b", "filename": "src/test/ui-fulldeps/proc-macro/multispan.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/10bb5edb19a84b00308f6980e21646bf7951a55e/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmultispan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10bb5edb19a84b00308f6980e21646bf7951a55e/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmultispan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmultispan.rs?ref=10bb5edb19a84b00308f6980e21646bf7951a55e", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:multispan.rs\n+// ignore-stage1\n+\n+#![feature(proc_macro_non_items)]\n+\n+extern crate multispan;\n+\n+use multispan::hello;\n+\n+fn main() {\n+    // This one emits no error.\n+    hello!();\n+\n+    // Exactly one 'hi'.\n+    hello!(hi); //~ ERROR hello to you, too!\n+\n+    // Now two, back to back.\n+    hello!(hi hi); //~ ERROR hello to you, too!\n+\n+    // Now three, back to back.\n+    hello!(hi hi hi); //~ ERROR hello to you, too!\n+\n+    // Now several, with spacing.\n+    hello!(hi hey hi yo hi beep beep hi hi); //~ ERROR hello to you, too!\n+    hello!(hi there, hi how are you? hi... hi.); //~ ERROR hello to you, too!\n+    hello!(whoah. hi di hi di ho); //~ ERROR hello to you, too!\n+    hello!(hi good hi and good bye); //~ ERROR hello to you, too!\n+}"}, {"sha": "267313ef5ae0e895fee8b192a5cd6eff8f6b4f8d", "filename": "src/test/ui-fulldeps/proc-macro/multispan.stderr", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/10bb5edb19a84b00308f6980e21646bf7951a55e/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmultispan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10bb5edb19a84b00308f6980e21646bf7951a55e/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmultispan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmultispan.stderr?ref=10bb5edb19a84b00308f6980e21646bf7951a55e", "patch": "@@ -0,0 +1,86 @@\n+error: hello to you, too!\n+  --> $DIR/multispan.rs:25:5\n+   |\n+LL |     hello!(hi); //~ ERROR hello to you, too!\n+   |     ^^^^^^^^^^^\n+   |\n+note: found these 'hi's\n+  --> $DIR/multispan.rs:25:12\n+   |\n+LL |     hello!(hi); //~ ERROR hello to you, too!\n+   |            ^^\n+\n+error: hello to you, too!\n+  --> $DIR/multispan.rs:28:5\n+   |\n+LL |     hello!(hi hi); //~ ERROR hello to you, too!\n+   |     ^^^^^^^^^^^^^^\n+   |\n+note: found these 'hi's\n+  --> $DIR/multispan.rs:28:12\n+   |\n+LL |     hello!(hi hi); //~ ERROR hello to you, too!\n+   |            ^^ ^^\n+\n+error: hello to you, too!\n+  --> $DIR/multispan.rs:31:5\n+   |\n+LL |     hello!(hi hi hi); //~ ERROR hello to you, too!\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+note: found these 'hi's\n+  --> $DIR/multispan.rs:31:12\n+   |\n+LL |     hello!(hi hi hi); //~ ERROR hello to you, too!\n+   |            ^^ ^^ ^^\n+\n+error: hello to you, too!\n+  --> $DIR/multispan.rs:34:5\n+   |\n+LL |     hello!(hi hey hi yo hi beep beep hi hi); //~ ERROR hello to you, too!\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: found these 'hi's\n+  --> $DIR/multispan.rs:34:12\n+   |\n+LL |     hello!(hi hey hi yo hi beep beep hi hi); //~ ERROR hello to you, too!\n+   |            ^^     ^^    ^^           ^^ ^^\n+\n+error: hello to you, too!\n+  --> $DIR/multispan.rs:35:5\n+   |\n+LL |     hello!(hi there, hi how are you? hi... hi.); //~ ERROR hello to you, too!\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: found these 'hi's\n+  --> $DIR/multispan.rs:35:12\n+   |\n+LL |     hello!(hi there, hi how are you? hi... hi.); //~ ERROR hello to you, too!\n+   |            ^^        ^^              ^^    ^^\n+\n+error: hello to you, too!\n+  --> $DIR/multispan.rs:36:5\n+   |\n+LL |     hello!(whoah. hi di hi di ho); //~ ERROR hello to you, too!\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: found these 'hi's\n+  --> $DIR/multispan.rs:36:19\n+   |\n+LL |     hello!(whoah. hi di hi di ho); //~ ERROR hello to you, too!\n+   |                   ^^    ^^\n+\n+error: hello to you, too!\n+  --> $DIR/multispan.rs:37:5\n+   |\n+LL |     hello!(hi good hi and good bye); //~ ERROR hello to you, too!\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: found these 'hi's\n+  --> $DIR/multispan.rs:37:12\n+   |\n+LL |     hello!(hi good hi and good bye); //~ ERROR hello to you, too!\n+   |            ^^      ^^\n+\n+error: aborting due to 7 previous errors\n+"}]}