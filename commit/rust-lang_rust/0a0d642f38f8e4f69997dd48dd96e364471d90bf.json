{"sha": "0a0d642f38f8e4f69997dd48dd96e364471d90bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhMGQ2NDJmMzhmOGU0ZjY5OTk3ZGQ0OGRkOTZlMzY0NDcxZDkwYmY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-09-13T23:37:12Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-09-13T23:49:21Z"}, "message": "Partially revert 674a5db \"Fix undesirable fallout [from macro modularization]\"", "tree": {"sha": "c9630d8259c55f43db1e2acc26a2bdbc08c72ace", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9630d8259c55f43db1e2acc26a2bdbc08c72ace"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a0d642f38f8e4f69997dd48dd96e364471d90bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a0d642f38f8e4f69997dd48dd96e364471d90bf", "html_url": "https://github.com/rust-lang/rust/commit/0a0d642f38f8e4f69997dd48dd96e364471d90bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a0d642f38f8e4f69997dd48dd96e364471d90bf/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90d36fb5905bbe5004f5b465ea14b53d10dae260", "url": "https://api.github.com/repos/rust-lang/rust/commits/90d36fb5905bbe5004f5b465ea14b53d10dae260", "html_url": "https://github.com/rust-lang/rust/commit/90d36fb5905bbe5004f5b465ea14b53d10dae260"}], "stats": {"total": 102, "additions": 51, "deletions": 51}, "files": [{"sha": "f674123aac7a2684c73d3f183c46cf9b01a40d41", "filename": "src/test/ui/run-pass/macros/macro-comma-support.rs", "status": "modified", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/0a0d642f38f8e4f69997dd48dd96e364471d90bf/src%2Ftest%2Fui%2Frun-pass%2Fmacros%2Fmacro-comma-support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a0d642f38f8e4f69997dd48dd96e364471d90bf/src%2Ftest%2Fui%2Frun-pass%2Fmacros%2Fmacro-comma-support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fmacros%2Fmacro-comma-support.rs?ref=0a0d642f38f8e4f69997dd48dd96e364471d90bf", "patch": "@@ -62,30 +62,30 @@ fn assert_ne() {\n \n #[test]\n fn cfg() {\n-    cfg!(pants);\n-    cfg!(pants,);\n-    cfg!(pants = \"pants\");\n-    cfg!(pants = \"pants\",);\n-    cfg!(all(pants));\n-    cfg!(all(pants),);\n-    cfg!(all(pants,));\n-    cfg!(all(pants,),);\n+    let _ = cfg!(pants);\n+    let _ = cfg!(pants,);\n+    let _ = cfg!(pants = \"pants\");\n+    let _ = cfg!(pants = \"pants\",);\n+    let _ = cfg!(all(pants));\n+    let _ = cfg!(all(pants),);\n+    let _ = cfg!(all(pants,));\n+    let _ = cfg!(all(pants,),);\n }\n \n #[test]\n fn column() {\n-    column!();\n+    let _ = column!();\n }\n \n // compile_error! is in a companion to this test in compile-fail\n \n #[test]\n fn concat() {\n-    concat!();\n-    concat!(\"hello\");\n-    concat!(\"hello\",);\n-    concat!(\"hello\", \" world\");\n-    concat!(\"hello\", \" world\",);\n+    let _ = concat!();\n+    let _ = concat!(\"hello\");\n+    let _ = concat!(\"hello\",);\n+    let _ = concat!(\"hello\", \" world\");\n+    let _ = concat!(\"hello\", \" world\",);\n }\n \n #[test]\n@@ -131,10 +131,10 @@ fn debug_assert_ne() {\n \n #[test]\n fn env() {\n-    env!(\"PATH\");\n-    env!(\"PATH\",);\n-    env!(\"PATH\", \"not found\");\n-    env!(\"PATH\", \"not found\",);\n+    let _ = env!(\"PATH\");\n+    let _ = env!(\"PATH\",);\n+    let _ = env!(\"PATH\", \"not found\");\n+    let _ = env!(\"PATH\", \"not found\",);\n }\n \n #[cfg(std)]\n@@ -158,58 +158,58 @@ fn eprintln() {\n \n #[test]\n fn file() {\n-    file!();\n+    let _ = file!();\n }\n \n #[cfg(std)]\n #[test]\n fn format() {\n-    format!(\"hello\");\n-    format!(\"hello\",);\n-    format!(\"hello {}\", \"world\");\n-    format!(\"hello {}\", \"world\",);\n+    let _ = format!(\"hello\");\n+    let _ = format!(\"hello\",);\n+    let _ = format!(\"hello {}\", \"world\");\n+    let _ = format!(\"hello {}\", \"world\",);\n }\n \n #[test]\n fn format_args() {\n-    format_args!(\"hello\");\n-    format_args!(\"hello\",);\n-    format_args!(\"hello {}\", \"world\");\n-    format_args!(\"hello {}\", \"world\",);\n+    let _ = format_args!(\"hello\");\n+    let _ = format_args!(\"hello\",);\n+    let _ = format_args!(\"hello {}\", \"world\");\n+    let _ = format_args!(\"hello {}\", \"world\",);\n }\n \n #[test]\n fn include() {\n-    include!(\"auxiliary/macro-comma-support.rs\");\n-    include!(\"auxiliary/macro-comma-support.rs\",);\n+    let _ = include!(\"auxiliary/macro-comma-support.rs\");\n+    let _ = include!(\"auxiliary/macro-comma-support.rs\",);\n }\n \n #[test]\n fn include_bytes() {\n-    include_bytes!(\"auxiliary/macro-comma-support.rs\");\n-    include_bytes!(\"auxiliary/macro-comma-support.rs\",);\n+    let _ = include_bytes!(\"auxiliary/macro-comma-support.rs\");\n+    let _ = include_bytes!(\"auxiliary/macro-comma-support.rs\",);\n }\n \n #[test]\n fn include_str() {\n-    include_str!(\"auxiliary/macro-comma-support.rs\");\n-    include_str!(\"auxiliary/macro-comma-support.rs\",);\n+    let _ = include_str!(\"auxiliary/macro-comma-support.rs\");\n+    let _ = include_str!(\"auxiliary/macro-comma-support.rs\",);\n }\n \n #[test]\n fn line() {\n-    line!();\n+    let _ = line!();\n }\n \n #[test]\n fn module_path() {\n-    module_path!();\n+    let _ = module_path!();\n }\n \n #[test]\n fn option_env() {\n-    option_env!(\"PATH\");\n-    option_env!(\"PATH\",);\n+    let _ = option_env!(\"PATH\");\n+    let _ = option_env!(\"PATH\",);\n }\n \n #[test]\n@@ -309,10 +309,10 @@ fn unreachable() {\n #[test]\n fn vec() {\n     let _: Vec<()> = vec![];\n-    vec![0];\n-    vec![0,];\n-    vec![0, 1];\n-    vec![0, 1,];\n+    let _ = vec![0];\n+    let _ = vec![0,];\n+    let _ = vec![0, 1];\n+    let _ = vec![0, 1,];\n }\n \n // give a test body access to a fmt::Formatter, which seems\n@@ -340,21 +340,21 @@ macro_rules! test_with_formatter {\n test_with_formatter! {\n     #[test]\n     fn write(f: &mut fmt::Formatter) {\n-        write!(f, \"hello\");\n-        write!(f, \"hello\",);\n-        write!(f, \"hello {}\", \"world\");\n-        write!(f, \"hello {}\", \"world\",);\n+        let _ = write!(f, \"hello\");\n+        let _ = write!(f, \"hello\",);\n+        let _ = write!(f, \"hello {}\", \"world\");\n+        let _ = write!(f, \"hello {}\", \"world\",);\n     }\n }\n \n test_with_formatter! {\n     #[test]\n     fn writeln(f: &mut fmt::Formatter) {\n-        writeln!(f);\n-        writeln!(f,);\n-        writeln!(f, \"hello\");\n-        writeln!(f, \"hello\",);\n-        writeln!(f, \"hello {}\", \"world\");\n-        writeln!(f, \"hello {}\", \"world\",);\n+        let _ = writeln!(f);\n+        let _ = writeln!(f,);\n+        let _ = writeln!(f, \"hello\");\n+        let _ = writeln!(f, \"hello\",);\n+        let _ = writeln!(f, \"hello {}\", \"world\");\n+        let _ = writeln!(f, \"hello {}\", \"world\",);\n     }\n }"}]}