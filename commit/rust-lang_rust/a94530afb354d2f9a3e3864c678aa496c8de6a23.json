{"sha": "a94530afb354d2f9a3e3864c678aa496c8de6a23", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5NDUzMGFmYjM1NGQyZjlhM2UzODY0YzY3OGFhNDk2YzhkZTZhMjM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-02T15:08:14Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-02T15:08:14Z"}, "message": "move world-symbols to file_symbols", "tree": {"sha": "f8591449a13c9272fd1038c771cdff1de3349847", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8591449a13c9272fd1038c771cdff1de3349847"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a94530afb354d2f9a3e3864c678aa496c8de6a23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a94530afb354d2f9a3e3864c678aa496c8de6a23", "html_url": "https://github.com/rust-lang/rust/commit/a94530afb354d2f9a3e3864c678aa496c8de6a23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a94530afb354d2f9a3e3864c678aa496c8de6a23/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29d8bfb9c909847cb37ff6e564ea0e61744277ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/29d8bfb9c909847cb37ff6e564ea0e61744277ad", "html_url": "https://github.com/rust-lang/rust/commit/29d8bfb9c909847cb37ff6e564ea0e61744277ad"}], "stats": {"total": 84, "additions": 42, "deletions": 42}, "files": [{"sha": "9ac52b5c32cfc286494bb38f2d52f7760abe9384", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 2, "deletions": 36, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a94530afb354d2f9a3e3864c678aa496c8de6a23/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a94530afb354d2f9a3e3864c678aa496c8de6a23/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=a94530afb354d2f9a3e3864c678aa496c8de6a23", "patch": "@@ -3,7 +3,6 @@ use std::{\n     sync::Arc,\n };\n \n-use rayon::prelude::*;\n use salsa::{Database, ParallelDatabase};\n \n use hir::{\n@@ -25,7 +24,7 @@ use crate::{\n     completion::{CompletionItem, completions},\n     CrateId, db, Diagnostic, FileId, FilePosition, FileRange, FileSystemEdit,\n     Query, ReferenceResolution, RootChange, SourceChange, SourceFileEdit,\n-    symbol_index::{LibrarySymbolsQuery, SymbolIndex, SymbolsDatabase, FileSymbol},\n+    symbol_index::{LibrarySymbolsQuery, FileSymbol},\n };\n \n #[derive(Debug, Default)]\n@@ -149,39 +148,6 @@ impl AnalysisImpl {\n     pub fn file_line_index(&self, file_id: FileId) -> Arc<LineIndex> {\n         self.db.file_lines(file_id)\n     }\n-    pub fn world_symbols(&self, query: Query) -> Cancelable<Vec<(FileId, FileSymbol)>> {\n-        /// Need to wrap Snapshot to provide `Clone` impl for `map_with`\n-        struct Snap(salsa::Snapshot<db::RootDatabase>);\n-        impl Clone for Snap {\n-            fn clone(&self) -> Snap {\n-                Snap(self.0.snapshot())\n-            }\n-        }\n-\n-        let buf: Vec<Arc<SymbolIndex>> = if query.libs {\n-            let snap = Snap(self.db.snapshot());\n-            self.db\n-                .library_roots()\n-                .par_iter()\n-                .map_with(snap, |db, &lib_id| db.0.library_symbols(lib_id))\n-                .collect()\n-        } else {\n-            let mut files = Vec::new();\n-            for &root in self.db.local_roots().iter() {\n-                let sr = self.db.source_root(root);\n-                files.extend(sr.files.values().map(|&it| it))\n-            }\n-\n-            let snap = Snap(self.db.snapshot());\n-            files\n-                .par_iter()\n-                .map_with(snap, |db, &file_id| db.0.file_symbols(file_id))\n-                .filter_map(|it| it.ok())\n-                .collect()\n-        };\n-        Ok(query.search(&buf))\n-    }\n-\n     pub(crate) fn module_path(&self, position: FilePosition) -> Cancelable<Option<String>> {\n         let descr = match source_binder::module_from_position(&*self.db, position)? {\n             None => return Ok(None),\n@@ -555,7 +521,7 @@ impl AnalysisImpl {\n         let mut query = Query::new(name.to_string());\n         query.exact();\n         query.limit(4);\n-        self.world_symbols(query)\n+        crate::symbol_index::world_symbols(&*self.db, query)\n     }\n }\n "}, {"sha": "03550832e914f25cb434dfa67bdf3d5e3b889533", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a94530afb354d2f9a3e3864c678aa496c8de6a23/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a94530afb354d2f9a3e3864c678aa496c8de6a23/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=a94530afb354d2f9a3e3864c678aa496c8de6a23", "patch": "@@ -342,9 +342,7 @@ impl Analysis {\n         ra_editor::folding_ranges(&file)\n     }\n     pub fn symbol_search(&self, query: Query) -> Cancelable<Vec<NavigationTarget>> {\n-        let res = self\n-            .imp\n-            .world_symbols(query)?\n+        let res = symbol_index::world_symbols(&*self.imp.db, query)?\n             .into_iter()\n             .map(|(file_id, symbol)| NavigationTarget { file_id, symbol })\n             .collect();"}, {"sha": "ddcf3d052bb45204b0ee0477ecf2f34b92c5729b", "filename": "crates/ra_analysis/src/symbol_index.rs", "status": "modified", "additions": 39, "deletions": 3, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a94530afb354d2f9a3e3864c678aa496c8de6a23/crates%2Fra_analysis%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a94530afb354d2f9a3e3864c678aa496c8de6a23/crates%2Fra_analysis%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fsymbol_index.rs?ref=a94530afb354d2f9a3e3864c678aa496c8de6a23", "patch": "@@ -10,12 +10,13 @@ use ra_syntax::{\n     SyntaxKind::{self, *},\n     ast::{self, NameOwner, DocCommentsOwner},\n };\n-use ra_db::{SyntaxDatabase, SourceRootId};\n+use ra_db::{SyntaxDatabase, SourceRootId, FilesDatabase};\n+use salsa::ParallelDatabase;\n use rayon::prelude::*;\n \n use crate::{\n-    Cancelable,\n-    FileId, Query,\n+    Cancelable, FileId, Query,\n+    db::RootDatabase,\n };\n \n salsa::query_group! {\n@@ -36,6 +37,41 @@ fn file_symbols(db: &impl SyntaxDatabase, file_id: FileId) -> Cancelable<Arc<Sym\n     Ok(Arc::new(SymbolIndex::for_file(file_id, syntax)))\n }\n \n+pub(crate) fn world_symbols(\n+    db: &RootDatabase,\n+    query: Query,\n+) -> Cancelable<Vec<(FileId, FileSymbol)>> {\n+    /// Need to wrap Snapshot to provide `Clone` impl for `map_with`\n+    struct Snap(salsa::Snapshot<RootDatabase>);\n+    impl Clone for Snap {\n+        fn clone(&self) -> Snap {\n+            Snap(self.0.snapshot())\n+        }\n+    }\n+\n+    let buf: Vec<Arc<SymbolIndex>> = if query.libs {\n+        let snap = Snap(db.snapshot());\n+        db.library_roots()\n+            .par_iter()\n+            .map_with(snap, |db, &lib_id| db.0.library_symbols(lib_id))\n+            .collect()\n+    } else {\n+        let mut files = Vec::new();\n+        for &root in db.local_roots().iter() {\n+            let sr = db.source_root(root);\n+            files.extend(sr.files.values().map(|&it| it))\n+        }\n+\n+        let snap = Snap(db.snapshot());\n+        files\n+            .par_iter()\n+            .map_with(snap, |db, &file_id| db.0.file_symbols(file_id))\n+            .filter_map(|it| it.ok())\n+            .collect()\n+    };\n+    Ok(query.search(&buf))\n+}\n+\n #[derive(Default, Debug)]\n pub(crate) struct SymbolIndex {\n     symbols: Vec<(FileId, FileSymbol)>,"}]}