{"sha": "6156295a4c0ed42f1f383aff3aa6cc65fe1e1f30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxNTYyOTVhNGMwZWQ0MmYxZjM4M2FmZjNhYTZjYzY1ZmUxZTFmMzA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-09T04:33:31Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-09T04:33:31Z"}, "message": "rustc: Move linking into compile_input", "tree": {"sha": "ac8f43074f19edf452103837aa57d811d4c0f477", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac8f43074f19edf452103837aa57d811d4c0f477"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6156295a4c0ed42f1f383aff3aa6cc65fe1e1f30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6156295a4c0ed42f1f383aff3aa6cc65fe1e1f30", "html_url": "https://github.com/rust-lang/rust/commit/6156295a4c0ed42f1f383aff3aa6cc65fe1e1f30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6156295a4c0ed42f1f383aff3aa6cc65fe1e1f30/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd81fb6a2418d3cbef5244662573e2b61d5f66a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd81fb6a2418d3cbef5244662573e2b61d5f66a7", "html_url": "https://github.com/rust-lang/rust/commit/fd81fb6a2418d3cbef5244662573e2b61d5f66a7"}], "stats": {"total": 36, "additions": 20, "deletions": 16}, "files": [{"sha": "a32e95371872569b64fc69d6285f9be42d876e3a", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6156295a4c0ed42f1f383aff3aa6cc65fe1e1f30/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6156295a4c0ed42f1f383aff3aa6cc65fe1e1f30/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=6156295a4c0ed42f1f383aff3aa6cc65fe1e1f30", "patch": "@@ -131,11 +131,13 @@ fn inject_libcore_reference(sess: session::session,\n \n \n fn compile_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n-                 output: str) {\n+                 output: option::t<str>) {\n+\n     let time_passes = sess.get_opts().time_passes;\n     let crate =\n         time(time_passes, \"parsing\", bind parse_input(sess, cfg, input));\n     if sess.get_opts().parse_only { ret; }\n+\n     crate =\n         time(time_passes, \"configuration\",\n              bind front::config::strip_unconfigured_items(crate));\n@@ -186,12 +188,26 @@ fn compile_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n     time(time_passes, \"kind checking\",\n          bind kind::check_crate(ty_cx, last_uses, crate));\n     if sess.get_opts().no_trans { ret; }\n+\n+    let outputs = build_output_filenames(input, output, sess);\n+\n     let llmod =\n         time(time_passes, \"translation\",\n-             bind trans::trans_crate(sess, crate, ty_cx, output, ast_map,\n+             bind trans::trans_crate(sess, crate, ty_cx,\n+                                     outputs.obj_filename, ast_map,\n                                      mut_map, copy_map, last_uses));\n     time(time_passes, \"LLVM passes\",\n-         bind link::write::run_passes(sess, llmod, output));\n+         bind link::write::run_passes(sess, llmod, outputs.obj_filename));\n+\n+    let stop_after_codegen =\n+        sess.get_opts().output_type != link::output_type_exe ||\n+            sess.get_opts().static && sess.building_library();\n+\n+    if stop_after_codegen { ret; }\n+\n+    time(time_passes, \"Linking\",\n+         bind link::link_binary(sess, outputs.obj_filename,\n+                                outputs.out_filename));\n }\n \n fn pretty_print_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n@@ -604,19 +620,7 @@ fn main(args: [str]) {\n         ret;\n     }\n \n-    let outputs = build_output_filenames(ifile, ofile, sess);\n-\n-    let stop_after_codegen =\n-        sopts.output_type != link::output_type_exe ||\n-            sopts.static && sess.building_library();\n-\n-    let temp_filename = outputs.obj_filename;\n-\n-    compile_input(sess, cfg, ifile, temp_filename);\n-\n-    if stop_after_codegen { ret; }\n-\n-    link::link_binary(sess, temp_filename, outputs.out_filename);\n+    compile_input(sess, cfg, ifile, ofile);\n }\n \n #[cfg(test)]"}]}