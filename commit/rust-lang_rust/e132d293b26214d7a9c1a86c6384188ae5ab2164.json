{"sha": "e132d293b26214d7a9c1a86c6384188ae5ab2164", "node_id": "C_kwDOAAsO6NoAKGUxMzJkMjkzYjI2MjE0ZDdhOWMxYTg2YzYzODQxODhhZTVhYjIxNjQ", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-03-03T15:40:32Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-03-06T17:49:49Z"}, "message": "Implement generics_of for impl side RPITITs assoc type", "tree": {"sha": "ed772e93dab9b02a2600a458960bbd5f513ca6ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed772e93dab9b02a2600a458960bbd5f513ca6ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e132d293b26214d7a9c1a86c6384188ae5ab2164", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmQGJ70ACgkQgTGiTgx5\n7688/g//cdTDMkJaLofxVYvUY6pKk9JSdaz9EkLIbofhnxx9EcLmtAkj25nvZzaU\n8i+BGewhDM2jdVi8wrciH6bcTBK6gxi7iZ+qr4FE0pm3oQmjIR0U65o/RsoBOmrC\n5vZzlCjcBHoy+k9z3D8uQqTfOW9/tpBF02BP9oPuxKcI0pgewaAYYmBmarrF8e8f\nrsZLzgzd2PSYDKQPIOZ5YPVavVSZ43Pr3ifkEFbeqfKzfA4GexARUlPOMEm9PaQ7\no5/ddhU5vttENF7m1OYTy96t3WHCwcXeImmQcPPuvCnR+C8BX3ItGZ0RvWkMuZzp\nOGnxzIb2ZqHFb8jsPZrbjvyIcnOKJMP1+PVGj6KUvAIUZLdAN3eigihj6bJR5HqC\nWZriv8BEZGRQ57ADES2heZHN4fCWxETPfKvzGDbGZhRQMNDSKDxJI+BCurPJEMYA\nyC8WAClrPqFCJNRt714u7AvPwsyQSZaKSvKGD43ctXXpG97dwJIVMN6NpTUDPrA7\nnY2b89+u7jvexIK2/UVgYiQWSG9aZR1W8riduFVmXt49yQaCu3UTO5fBVQSmXT5o\nRUgAG6nC5RKs8sBMk41mc8rKUBmxSIbH/17lNmI0molgsWvy/+blXBkPm7PfHSJc\nCXCuXg8jWpcdyDoJ0QtrWGGbO1k2XZ+GLvqV2PgymPHb6DndkLE=\n=wjYo\n-----END PGP SIGNATURE-----", "payload": "tree ed772e93dab9b02a2600a458960bbd5f513ca6ca\nparent bc9ffbeb50afbc9002f98f18ba06cdfcfc32d0a2\nauthor Santiago Pastorino <spastorino@gmail.com> 1677858032 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1678124989 -0300\n\nImplement generics_of for impl side RPITITs assoc type\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e132d293b26214d7a9c1a86c6384188ae5ab2164", "html_url": "https://github.com/rust-lang/rust/commit/e132d293b26214d7a9c1a86c6384188ae5ab2164", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e132d293b26214d7a9c1a86c6384188ae5ab2164/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc9ffbeb50afbc9002f98f18ba06cdfcfc32d0a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc9ffbeb50afbc9002f98f18ba06cdfcfc32d0a2", "html_url": "https://github.com/rust-lang/rust/commit/bc9ffbeb50afbc9002f98f18ba06cdfcfc32d0a2"}], "stats": {"total": 40, "additions": 34, "deletions": 6}, "files": [{"sha": "efc353c5c73e1c23f8d60837c22af0e65f43d15c", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 34, "deletions": 6, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e132d293b26214d7a9c1a86c6384188ae5ab2164/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e132d293b26214d7a9c1a86c6384188ae5ab2164/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=e132d293b26214d7a9c1a86c6384188ae5ab2164", "patch": "@@ -313,11 +313,12 @@ fn impl_associated_item_for_impl_trait_in_trait(\n     trait_assoc_def_id: LocalDefId,\n     impl_fn_def_id: LocalDefId,\n ) -> LocalDefId {\n-    let impl_def_id = tcx.local_parent(impl_fn_def_id);\n+    let impl_local_def_id = tcx.local_parent(impl_fn_def_id);\n+    let impl_def_id = impl_local_def_id.to_def_id();\n \n     // FIXME fix the span, we probably want the def_id of the return type of the function\n     let span = tcx.def_span(impl_fn_def_id);\n-    let impl_assoc_ty = tcx.at(span).create_def(impl_def_id, DefPathData::ImplTraitAssocTy);\n+    let impl_assoc_ty = tcx.at(span).create_def(impl_local_def_id, DefPathData::ImplTraitAssocTy);\n \n     let local_def_id = impl_assoc_ty.def_id();\n     let def_id = local_def_id.to_def_id();\n@@ -349,10 +350,37 @@ fn impl_associated_item_for_impl_trait_in_trait(\n     // Copy impl_defaultness of the containing function.\n     impl_assoc_ty.impl_defaultness(tcx.impl_defaultness(impl_fn_def_id));\n \n-    // Copy generics_of the trait's associated item.\n-    // FIXME: This is not correct, in particular the parent is going to be wrong. So we would need\n-    // to copy from trait_assoc_def_id and adjust things.\n-    impl_assoc_ty.generics_of(tcx.generics_of(trait_assoc_def_id).clone());\n+    // Copy generics_of the trait's associated item but the impl as the parent.\n+    impl_assoc_ty.generics_of({\n+        let trait_assoc_generics = tcx.generics_of(trait_assoc_def_id);\n+        let trait_assoc_parent_count = trait_assoc_generics.parent_count;\n+        let mut params = trait_assoc_generics.params.clone();\n+\n+        let parent_generics = tcx.generics_of(impl_def_id);\n+        let parent_count = parent_generics.parent_count + parent_generics.params.len();\n+\n+        let mut impl_fn_params = tcx.generics_of(impl_fn_def_id).params.clone();\n+\n+        for param in &mut params {\n+            param.index = param.index + parent_count as u32 + impl_fn_params.len() as u32\n+                - trait_assoc_parent_count as u32;\n+        }\n+\n+        impl_fn_params.extend(params);\n+        params = impl_fn_params;\n+\n+        let param_def_id_to_index =\n+            params.iter().map(|param| (param.def_id, param.index)).collect();\n+\n+        ty::Generics {\n+            parent: Some(impl_def_id),\n+            parent_count,\n+            params,\n+            param_def_id_to_index,\n+            has_self: false,\n+            has_late_bound_regions: trait_assoc_generics.has_late_bound_regions,\n+        }\n+    });\n \n     local_def_id\n }"}]}