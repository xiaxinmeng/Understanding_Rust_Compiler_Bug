{"sha": "7e9a36fa8a4ec06daec581e23f390389e05f25e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlOWEzNmZhOGE0ZWMwNmRhZWM1ODFlMjNmMzkwMzg5ZTA1ZjI1ZTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-06T16:12:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-06T16:12:13Z"}, "message": "Auto merge of #78810 - JohnTitor:rollup-8fhtvxu, r=JohnTitor\n\nRollup of 15 pull requests\n\nSuccessful merges:\n\n - #74979 (`#![deny(unsafe_op_in_unsafe_fn)]` in sys/hermit)\n - #78006 (Use Intra-doc links for std::io::buffered)\n - #78167 (Fix unreachable sub-branch detection in or-patterns)\n - #78514 (Allow using 1/2/3/4 for `x.py setup` options)\n - #78538 (BTreeMap: document a curious assumption in test cases)\n - #78559 (Add LLVM upgrades from 7 to 10 to RELEASES.md)\n - #78666 (Fix shellcheck error)\n - #78705 (Print a summary of which test suite failed)\n - #78726 (Add link to rust website)\n - #78730 (Expand explanation of reverse_bits)\n - #78760 (`deny(invalid_codeblock_attributes)` for rustc_error_codes)\n - #78771 (inliner: Copy unevaluated constants only after successful inlining)\n - #78794 (rustc_expand: use collect_bang helper instead of manual reimplementation)\n - #78795 (The renumber pass is long gone)\n - #78798 (Fixing Spelling Typos)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "afe67d3f71142bcd9766b5f6480c994017da6519", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afe67d3f71142bcd9766b5f6480c994017da6519"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e9a36fa8a4ec06daec581e23f390389e05f25e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e9a36fa8a4ec06daec581e23f390389e05f25e4", "html_url": "https://github.com/rust-lang/rust/commit/7e9a36fa8a4ec06daec581e23f390389e05f25e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e9a36fa8a4ec06daec581e23f390389e05f25e4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc06a36074f04c6a77b5834f2950011d49607898", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc06a36074f04c6a77b5834f2950011d49607898", "html_url": "https://github.com/rust-lang/rust/commit/dc06a36074f04c6a77b5834f2950011d49607898"}, {"sha": "af50c796faaf68adf01eb16afe86f368a64cc906", "url": "https://api.github.com/repos/rust-lang/rust/commits/af50c796faaf68adf01eb16afe86f368a64cc906", "html_url": "https://github.com/rust-lang/rust/commit/af50c796faaf68adf01eb16afe86f368a64cc906"}], "stats": {"total": 346, "additions": 251, "deletions": 95}, "files": [{"sha": "c9ff49287637d827000569a4a965a147b25b7627", "filename": "RELEASES.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -297,6 +297,7 @@ Compiler\n - [Added the `tiny` value to the `code-model` codegen flag.][72397]\n - [Added tier 3 support\\* for the `mipsel-sony-psp` target.][72062]\n - [Added tier 3 support for the `thumbv7a-uwp-windows-msvc` target.][72133]\n+- [Upgraded to LLVM 10.][67759]\n \n \\* Refer to Rust's [platform support page][forge-platform-support] for more\n information on Rust's tiered platform support.\n@@ -396,6 +397,7 @@ Internals Only\n [72062]: https://github.com/rust-lang/rust/pull/72062/\n [72094]: https://github.com/rust-lang/rust/pull/72094/\n [72133]: https://github.com/rust-lang/rust/pull/72133/\n+[67759]: https://github.com/rust-lang/rust/pull/67759/\n [71900]: https://github.com/rust-lang/rust/pull/71900/\n [71928]: https://github.com/rust-lang/rust/pull/71928/\n [71662]: https://github.com/rust-lang/rust/pull/71662/\n@@ -1270,6 +1272,7 @@ Compiler\n   `armv7-unknown-linux-musleabi` targets.][63107]\n - [Added tier 3 support for the `hexagon-unknown-linux-musl` target.][62814]\n - [Added tier 3 support for the `riscv32i-unknown-none-elf` target.][62784]\n+- [Upgraded to LLVM 9.][62592]\n \n \\* Refer to Rust's [platform support page][forge-platform-support] for more\n information on Rust's tiered platform support.\n@@ -1336,6 +1339,7 @@ Compatibility Notes\n [62735]: https://github.com/rust-lang/rust/pull/62735/\n [62766]: https://github.com/rust-lang/rust/pull/62766/\n [62784]: https://github.com/rust-lang/rust/pull/62784/\n+[62592]: https://github.com/rust-lang/rust/pull/62592/\n [62785]: https://github.com/rust-lang/rust/issues/62785/\n [62814]: https://github.com/rust-lang/rust/pull/62814/\n [62896]: https://github.com/rust-lang/rust/issues/62896/\n@@ -2431,6 +2435,7 @@ Compiler\n --------\n - [Added the `riscv32imc-unknown-none-elf` target.][53822]\n - [Added the `aarch64-unknown-netbsd` target][53165]\n+- [Upgraded to LLVM 8.][53611]\n \n Libraries\n ---------\n@@ -2479,6 +2484,7 @@ Misc\n [53033]: https://github.com/rust-lang/rust/pull/53033/\n [53044]: https://github.com/rust-lang/rust/pull/53044/\n [53165]: https://github.com/rust-lang/rust/pull/53165/\n+[53611]: https://github.com/rust-lang/rust/pull/53611/\n [53213]: https://github.com/rust-lang/rust/pull/53213/\n [53236]: https://github.com/rust-lang/rust/pull/53236/\n [53272]: https://github.com/rust-lang/rust/pull/53272/\n@@ -2537,6 +2543,7 @@ Compiler\n - [Bumped minimum LLVM version to 5.0.][51899]\n - [Added `powerpc64le-unknown-linux-musl` target.][51619]\n - [Added `aarch64-unknown-hermit` and `x86_64-unknown-hermit` targets.][52861]\n+- [Upgraded to LLVM 7.][51966]\n \n Libraries\n ---------\n@@ -2588,6 +2595,7 @@ Compatibility Notes\n \n [53893]: https://github.com/rust-lang/rust/pull/53893/\n [52861]: https://github.com/rust-lang/rust/pull/52861/\n+[51966]: https://github.com/rust-lang/rust/pull/51966/\n [52656]: https://github.com/rust-lang/rust/pull/52656/\n [52239]: https://github.com/rust-lang/rust/pull/52239/\n [52330]: https://github.com/rust-lang/rust/pull/52330/"}, {"sha": "6e7d2bab2877eadc77f0a756cf38598afe0984a9", "filename": "compiler/rustc_ast/src/node_id.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/compiler%2Frustc_ast%2Fsrc%2Fnode_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/compiler%2Frustc_ast%2Fsrc%2Fnode_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fnode_id.rs?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -13,8 +13,8 @@ rustc_data_structures::define_id_collections!(NodeMap, NodeSet, NodeId);\n pub const CRATE_NODE_ID: NodeId = NodeId::from_u32(0);\n \n /// When parsing and doing expansions, we initially give all AST nodes this AST\n-/// node value. Then later, in the renumber pass, we renumber them to have\n-/// small, positive ids.\n+/// node value. Then later, during expansion, we renumber them to have small,\n+/// positive ids.\n pub const DUMMY_NODE_ID: NodeId = NodeId::MAX;\n \n impl NodeId {"}, {"sha": "947b4a28798f29e5d1846a7d3013e5aa6349bbef", "filename": "compiler/rustc_codegen_cranelift/scripts/cargo.sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fcargo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fcargo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fcargo.sh?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -10,7 +10,7 @@ cmd=$1\n shift || true\n \n if [[ \"$cmd\" = \"jit\" ]]; then\n-cargo +${TOOLCHAIN} rustc $@ -- --jit\n+cargo +${TOOLCHAIN} rustc \"$@\" -- --jit\n else\n-cargo +${TOOLCHAIN} $cmd $@\n+cargo +${TOOLCHAIN} $cmd \"$@\"\n fi"}, {"sha": "6120a550a27a10e27f025c5ec9ad48dca532c3cd", "filename": "compiler/rustc_codegen_cranelift/scripts/config.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fconfig.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fconfig.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fconfig.sh?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -1,3 +1,4 @@\n+#!/usr/bin/env bash\n set -e\n \n unamestr=`uname`"}, {"sha": "c6c4956e4817446aa580f20ab89d9dbce41ead0c", "filename": "compiler/rustc_codegen_cranelift/test.sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/compiler%2Frustc_codegen_cranelift%2Ftest.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/compiler%2Frustc_codegen_cranelift%2Ftest.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Ftest.sh?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -3,13 +3,13 @@ set -e\n \n export RUSTFLAGS=\"-Zrun_dsymutil=no\"\n \n-./build.sh --without-sysroot $@\n+./build.sh --without-sysroot \"$@\"\n \n rm -r target/out || true\n \n scripts/tests.sh no_sysroot\n \n-./build.sh $@\n+./build.sh \"$@\"\n \n scripts/tests.sh base_sysroot\n scripts/tests.sh extended_sysroot"}, {"sha": "e4a702531442ee1b97e6bf4b5556f83514c1881e", "filename": "compiler/rustc_error_codes/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/compiler%2Frustc_error_codes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/compiler%2Frustc_error_codes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Flib.rs?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -1,3 +1,4 @@\n+#![deny(invalid_codeblock_attributes)]\n //! This library is used to gather all error codes into one place,\n //! the goal being to make their maintenance easier.\n "}, {"sha": "f6959591b56602b2bf52959b048166f97b1056a1", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -1436,9 +1436,9 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                 item.attrs = attrs;\n                 self.check_attributes(&item.attrs);\n                 item.and_then(|item| match item.kind {\n-                    ItemKind::MacCall(mac) => self\n-                        .collect(AstFragmentKind::Items, InvocationKind::Bang { mac, span })\n-                        .make_items(),\n+                    ItemKind::MacCall(mac) => {\n+                        self.collect_bang(mac, span, AstFragmentKind::Items).make_items()\n+                    }\n                     _ => unreachable!(),\n                 })\n             }"}, {"sha": "acec3e8f82f43bfb4d10125196d1d89c24342b5f", "filename": "compiler/rustc_mir/src/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -693,7 +693,7 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n                 // should only issue a warning for the sake of backwards compatibility.\n                 //\n                 // The solution those 2 expectations is to always take the minimum of both lints.\n-                // This prevent any new errors (unless both lints are explicitely set to `deny`).\n+                // This prevent any new errors (unless both lints are explicitly set to `deny`).\n                 let lint = if tcx.lint_level_at_node(SAFE_PACKED_BORROWS, lint_root).0\n                     <= tcx.lint_level_at_node(UNSAFE_OP_IN_UNSAFE_FN, lint_root).0\n                 {"}, {"sha": "4de93739992542dd838e308c40627d073953bd9d", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -140,14 +140,6 @@ impl Inliner<'tcx> {\n                 continue;\n             };\n \n-            // Copy only unevaluated constants from the callee_body into the caller_body.\n-            // Although we are only pushing `ConstKind::Unevaluated` consts to\n-            // `required_consts`, here we may not only have `ConstKind::Unevaluated`\n-            // because we are calling `subst_and_normalize_erasing_regions`.\n-            caller_body.required_consts.extend(callee_body.required_consts.iter().copied().filter(\n-                |&constant| matches!(constant.literal.val, ConstKind::Unevaluated(_, _, _)),\n-            ));\n-\n             let start = caller_body.basic_blocks().len();\n             debug!(\"attempting to inline callsite {:?} - body={:?}\", callsite, callee_body);\n             if !self.inline_call(callsite, caller_body, callee_body) {\n@@ -522,6 +514,16 @@ impl Inliner<'tcx> {\n                     kind: TerminatorKind::Goto { target: integrator.map_block(START_BLOCK) },\n                 });\n \n+                // Copy only unevaluated constants from the callee_body into the caller_body.\n+                // Although we are only pushing `ConstKind::Unevaluated` consts to\n+                // `required_consts`, here we may not only have `ConstKind::Unevaluated`\n+                // because we are calling `subst_and_normalize_erasing_regions`.\n+                caller_body.required_consts.extend(\n+                    callee_body.required_consts.iter().copied().filter(|&constant| {\n+                        matches!(constant.literal.val, ConstKind::Unevaluated(_, _, _))\n+                    }),\n+                );\n+\n                 true\n             }\n             kind => {"}, {"sha": "5e7e81eba6273cb6ab2b8f20a37a2a54ffc3ec0e", "filename": "compiler/rustc_mir_build/src/thir/pattern/_match.rs", "status": "modified", "additions": 88, "deletions": 32, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -1,5 +1,11 @@\n-//! Note: most of the tests relevant to this file can be found (at the time of writing) in\n-//! src/tests/ui/pattern/usefulness.\n+//! Note: tests specific to this file can be found in:\n+//!     - ui/pattern/usefulness\n+//!     - ui/or-patterns\n+//!     - ui/consts/const_in_pattern\n+//!     - ui/rfc-2008-non-exhaustive\n+//!     - probably many others\n+//! I (Nadrieril) prefer to put new tests in `ui/pattern/usefulness` unless there's a specific\n+//! reason not to, for example if they depend on a particular feature like or_patterns.\n //!\n //! This file includes the logic for exhaustiveness and usefulness checking for\n //! pattern-matching. Specifically, given a list of patterns for a type, we can\n@@ -1361,8 +1367,9 @@ impl<'p, 'tcx> Fields<'p, 'tcx> {\n \n #[derive(Clone, Debug)]\n crate enum Usefulness<'tcx> {\n-    /// Carries a list of unreachable subpatterns. Used only in the presence of or-patterns.\n-    Useful(Vec<Span>),\n+    /// Carries, for each column in the matrix, a set of sub-branches that have been found to be\n+    /// unreachable. Used only in the presence of or-patterns, otherwise it stays empty.\n+    Useful(Vec<FxHashSet<Span>>),\n     /// Carries a list of witnesses of non-exhaustiveness.\n     UsefulWithWitness(Vec<Witness<'tcx>>),\n     NotUseful,\n@@ -1410,6 +1417,23 @@ impl<'tcx> Usefulness<'tcx> {\n                 };\n                 UsefulWithWitness(new_witnesses)\n             }\n+            Useful(mut unreachables) => {\n+                if !unreachables.is_empty() {\n+                    // When we apply a constructor, there are `arity` columns of the matrix that\n+                    // corresponded to its arguments. All the unreachables found in these columns\n+                    // will, after `apply`, come from the first column. So we take the union of all\n+                    // the corresponding sets and put them in the first column.\n+                    // Note that `arity` may be 0, in which case we just push a new empty set.\n+                    let len = unreachables.len();\n+                    let arity = ctor_wild_subpatterns.len();\n+                    let mut unioned = FxHashSet::default();\n+                    for set in unreachables.drain((len - arity)..) {\n+                        unioned.extend(set)\n+                    }\n+                    unreachables.push(unioned);\n+                }\n+                Useful(unreachables)\n+            }\n             x => x,\n         }\n     }\n@@ -2091,55 +2115,87 @@ crate fn is_useful<'p, 'tcx>(\n \n     // If the first pattern is an or-pattern, expand it.\n     if let Some(vs) = v.expand_or_pat() {\n-        // We need to push the already-seen patterns into the matrix in order to detect redundant\n-        // branches like `Some(_) | Some(0)`. We also keep track of the unreachable subpatterns.\n-        let mut matrix = matrix.clone();\n-        // `Vec` of all the unreachable branches of the current or-pattern.\n-        let mut unreachable_branches = Vec::new();\n-        // Subpatterns that are unreachable from all branches. E.g. in the following case, the last\n-        // `true` is unreachable only from one branch, so it is overall reachable.\n+        // We expand the or pattern, trying each of its branches in turn and keeping careful track\n+        // of possible unreachable sub-branches.\n+        //\n+        // If two branches have detected some unreachable sub-branches, we need to be careful. If\n+        // they were detected in columns that are not the current one, we want to keep only the\n+        // sub-branches that were unreachable in _all_ branches. Eg. in the following, the last\n+        // `true` is unreachable in the second branch of the first or-pattern, but not otherwise.\n+        // Therefore we don't want to lint that it is unreachable.\n         //\n         // ```\n         // match (true, true) {\n         //     (true, true) => {}\n         //     (false | true, false | true) => {}\n         // }\n         // ```\n-        let mut unreachable_subpats = FxHashSet::default();\n-        // Whether any branch at all is useful.\n+        // If however the sub-branches come from the current column, they come from the inside of\n+        // the current or-pattern, and we want to keep them all. Eg. in the following, we _do_ want\n+        // to lint that the last `false` is unreachable.\n+        // ```\n+        // match None {\n+        //     Some(false) => {}\n+        //     None | Some(true | false) => {}\n+        // }\n+        // ```\n+\n+        let mut matrix = matrix.clone();\n+        // We keep track of sub-branches separately depending on whether they come from this column\n+        // or from others.\n+        let mut unreachables_this_column: FxHashSet<Span> = FxHashSet::default();\n+        let mut unreachables_other_columns: Vec<FxHashSet<Span>> = Vec::default();\n+        // Whether at least one branch is reachable.\n         let mut any_is_useful = false;\n \n         for v in vs {\n             let res = is_useful(cx, &matrix, &v, witness_preference, hir_id, is_under_guard, false);\n             match res {\n-                Useful(pats) => {\n-                    if !any_is_useful {\n-                        any_is_useful = true;\n-                        // Initialize with the first set of unreachable subpatterns encountered.\n-                        unreachable_subpats = pats.into_iter().collect();\n-                    } else {\n-                        // Keep the patterns unreachable from both this and previous branches.\n-                        unreachable_subpats =\n-                            pats.into_iter().filter(|p| unreachable_subpats.contains(p)).collect();\n+                Useful(unreachables) => {\n+                    if let Some((this_column, other_columns)) = unreachables.split_last() {\n+                        // We keep the union of unreachables found in the first column.\n+                        unreachables_this_column.extend(this_column);\n+                        // We keep the intersection of unreachables found in other columns.\n+                        if unreachables_other_columns.is_empty() {\n+                            unreachables_other_columns = other_columns.to_vec();\n+                        } else {\n+                            unreachables_other_columns = unreachables_other_columns\n+                                .into_iter()\n+                                .zip(other_columns)\n+                                .map(|(x, y)| x.intersection(&y).copied().collect())\n+                                .collect();\n+                        }\n                     }\n+                    any_is_useful = true;\n                 }\n-                NotUseful => unreachable_branches.push(v.head().span),\n-                UsefulWithWitness(_) => {\n-                    bug!(\"Encountered or-pat in `v` during exhaustiveness checking\")\n+                NotUseful => {\n+                    unreachables_this_column.insert(v.head().span);\n                 }\n+                UsefulWithWitness(_) => bug!(\n+                    \"encountered or-pat in the expansion of `_` during exhaustiveness checking\"\n+                ),\n             }\n-            // If pattern has a guard don't add it to the matrix\n+\n+            // If pattern has a guard don't add it to the matrix.\n             if !is_under_guard {\n+                // We push the already-seen patterns into the matrix in order to detect redundant\n+                // branches like `Some(_) | Some(0)`.\n                 matrix.push(v);\n             }\n         }\n-        if any_is_useful {\n-            // Collect all the unreachable patterns.\n-            unreachable_branches.extend(unreachable_subpats);\n-            return Useful(unreachable_branches);\n+\n+        return if any_is_useful {\n+            let mut unreachables = if unreachables_other_columns.is_empty() {\n+                let n_columns = v.len();\n+                (0..n_columns - 1).map(|_| FxHashSet::default()).collect()\n+            } else {\n+                unreachables_other_columns\n+            };\n+            unreachables.push(unreachables_this_column);\n+            Useful(unreachables)\n         } else {\n-            return NotUseful;\n-        }\n+            NotUseful\n+        };\n     }\n \n     // FIXME(Nadrieril): Hack to work around type normalization issues (see #72476)."}, {"sha": "205ad850c0c8011deb28c913dbf4d8c4281bdd3b", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -389,8 +389,11 @@ fn check_arms<'p, 'tcx>(\n                     hir::MatchSource::AwaitDesugar | hir::MatchSource::TryDesugar => {}\n                 }\n             }\n-            Useful(unreachable_subpatterns) => {\n-                for span in unreachable_subpatterns {\n+            Useful(unreachables) => {\n+                let mut unreachables: Vec<_> = unreachables.into_iter().flatten().collect();\n+                // Emit lints in the order in which they occur in the file.\n+                unreachables.sort_unstable();\n+                for span in unreachables {\n                     unreachable_pattern(cx.tcx, span, id, None);\n                 }\n             }"}, {"sha": "f76f42dea1e037664e6faf8f5c89d9f7df966450", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -1500,7 +1500,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err.span_suggestion(\n             sp,\n             &format!(\n-                \"if you don't care about {} missing field{}, you can explicitely ignore {}\",\n+                \"if you don't care about {} missing field{}, you can explicitly ignore {}\",\n                 if len == 1 { \"this\" } else { \"these\" },\n                 if len == 1 { \"\" } else { \"s\" },\n                 if len == 1 { \"it\" } else { \"them\" },"}, {"sha": "d5b1c600d93eb29bb81f3ffdaec8dc2ba847eed6", "filename": "library/alloc/src/collections/btree/map/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -1668,6 +1668,7 @@ create_append_test!(test_append_239, 239);\n create_append_test!(test_append_1700, 1700);\n \n fn rand_data(len: usize) -> Vec<(u32, u32)> {\n+    assert!(len * 2 <= 70029); // from that point on numbers repeat\n     let mut rng = DeterministicRng::new();\n     Vec::from_iter((0..len).map(|_| (rng.next(), rng.next())))\n }"}, {"sha": "7bf1706dd6d57b828d5879804f69460ddd83cb0d", "filename": "library/alloc/src/collections/btree/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -49,6 +49,7 @@ impl DeterministicRng {\n         DeterministicRng { x: 0x193a6754, y: 0xa8a7d469, z: 0x97830e05, w: 0x113ba7bb }\n     }\n \n+    /// Guarantees that the first 70029 results are unique.\n     fn next(&mut self) -> u32 {\n         let x = self.x;\n         let t = x ^ (x << 11);"}, {"sha": "52cde8299e41862fc0cf821600dfbf6c4238b4c7", "filename": "library/alloc/src/collections/btree/set/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -687,6 +687,7 @@ fn test_first_last() {\n }\n \n fn rand_data(len: usize) -> Vec<u32> {\n+    assert!(len <= 70029); // from that point on numbers repeat\n     let mut rng = DeterministicRng::new();\n     Vec::from_iter((0..len).map(|_| rng.next()))\n }"}, {"sha": "728381b658f7cd837745a00d7ec6bc35868dd1d2", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -274,7 +274,8 @@ assert_eq!(m, \", $swapped, \");\n         }\n \n         doc_comment! {\n-            concat!(\"Reverses the bit pattern of the integer.\n+            concat!(\"Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\n+                second least-significant bit becomes second most-significant bit, etc.\n \n # Examples\n \n@@ -285,6 +286,7 @@ let n = \", $swap_op, stringify!($SelfT), \";\n let m = n.reverse_bits();\n \n assert_eq!(m, \", $reversed, \");\n+assert_eq!(0, 0\", stringify!($SelfT), \".reverse_bits());\n ```\"),\n             #[stable(feature = \"reverse_bits\", since = \"1.37.0\")]\n             #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]"}, {"sha": "adcbbf91433b61782069826e8032e3f7eacda7d0", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -272,7 +272,8 @@ assert_eq!(m, \", $swapped, \");\n         }\n \n         doc_comment! {\n-            concat!(\"Reverses the bit pattern of the integer.\n+            concat!(\"Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\n+                second least-significant bit becomes second most-significant bit, etc.\n \n # Examples\n \n@@ -283,6 +284,7 @@ let n = \", $swap_op, stringify!($SelfT), \";\n let m = n.reverse_bits();\n \n assert_eq!(m, \", $reversed, \");\n+assert_eq!(0, 0\", stringify!($SelfT), \".reverse_bits());\n ```\"),\n             #[stable(feature = \"reverse_bits\", since = \"1.37.0\")]\n             #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]"}, {"sha": "16c18d6e146455106f825690fe41a7af2c4d1cb2", "filename": "library/std/src/io/buffered/bufreader.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader.rs?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -21,7 +21,8 @@ use crate::io::{self, BufRead, Initializer, IoSliceMut, Read, Seek, SeekFrom, DE\n /// unwrapping the `BufReader<R>` with [`BufReader::into_inner`] can also cause\n /// data loss.\n ///\n-/// [`TcpStream::read`]: Read::read\n+// HACK(#78696): can't use `crate` for associated items\n+/// [`TcpStream::read`]: super::super::super::net::TcpStream::read\n /// [`TcpStream`]: crate::net::TcpStream\n ///\n /// # Examples"}, {"sha": "067ed6ba7ff50fb972feab5e458e637e6752599a", "filename": "library/std/src/io/buffered/bufwriter.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -59,9 +59,10 @@ use crate::io::{\n /// together by the buffer and will all be written out in one system call when\n /// the `stream` is flushed.\n ///\n-/// [`TcpStream::write`]: Write::write\n+// HACK(#78696): can't use `crate` for associated items\n+/// [`TcpStream::write`]: super::super::super::net::TcpStream::write\n /// [`TcpStream`]: crate::net::TcpStream\n-/// [`flush`]: Write::flush\n+/// [`flush`]: BufWriter::flush\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct BufWriter<W: Write> {\n     inner: Option<W>,"}, {"sha": "f185635b7a0a6b7499db0e17636f99bf89d64583", "filename": "library/std/src/sys/hermit/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -13,6 +13,8 @@\n //! compiling for wasm. That way it's a compile time error for something that's\n //! guaranteed to be a runtime error!\n \n+#![allow(unsafe_op_in_unsafe_fn)]\n+\n use crate::intrinsics;\n use crate::os::raw::c_char;\n "}, {"sha": "55d2445fc492c2c2504f3ae3ddf2e88dfcb0ec05", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -127,28 +127,31 @@ pub fn setup(src_path: &Path, profile: Profile) {\n \n // Used to get the path for `Subcommand::Setup`\n pub fn interactive_path() -> io::Result<Profile> {\n-    fn abbrev_all() -> impl Iterator<Item = (String, Profile)> {\n-        ('a'..).map(|c| c.to_string()).zip(Profile::all())\n+    fn abbrev_all() -> impl Iterator<Item = ((String, String), Profile)> {\n+        ('a'..)\n+            .zip(1..)\n+            .map(|(letter, number)| (letter.to_string(), number.to_string()))\n+            .zip(Profile::all())\n     }\n \n     fn parse_with_abbrev(input: &str) -> Result<Profile, String> {\n         let input = input.trim().to_lowercase();\n-        for (letter, profile) in abbrev_all() {\n-            if input == letter {\n+        for ((letter, number), profile) in abbrev_all() {\n+            if input == letter || input == number {\n                 return Ok(profile);\n             }\n         }\n         input.parse()\n     }\n \n     println!(\"Welcome to the Rust project! What do you want to do with x.py?\");\n-    for (letter, profile) in abbrev_all() {\n+    for ((letter, _), profile) in abbrev_all() {\n         println!(\"{}) {}: {}\", letter, profile, profile.purpose());\n     }\n     let template = loop {\n         print!(\n             \"Please choose one ({}): \",\n-            abbrev_all().map(|(l, _)| l).collect::<Vec<_>>().join(\"/\")\n+            abbrev_all().map(|((l, _), _)| l).collect::<Vec<_>>().join(\"/\")\n         );\n         io::stdout().flush()?;\n         let mut input = String::new();"}, {"sha": "b48e9696c9a4da0d71baf1308da2160115ca7cd5", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -1040,6 +1040,7 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n         cmd.arg(\"--src-base\").arg(builder.src.join(\"src/test\").join(suite));\n         cmd.arg(\"--build-base\").arg(testdir(builder, compiler.host).join(suite));\n         cmd.arg(\"--stage-id\").arg(format!(\"stage{}-{}\", compiler.stage, target));\n+        cmd.arg(\"--suite\").arg(suite);\n         cmd.arg(\"--mode\").arg(mode);\n         cmd.arg(\"--target\").arg(target.rustc_target_arg());\n         cmd.arg(\"--host\").arg(&*compiler.host.triple);"}, {"sha": "409bca45c94dd5c22abc8a90e9a5b9e75cf0e243", "filename": "src/ci/docker/host-x86_64/disabled/dist-x86_64-dragonfly/build-toolchain.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Fdist-x86_64-dragonfly%2Fbuild-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Fdist-x86_64-dragonfly%2Fbuild-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Fdist-x86_64-dragonfly%2Fbuild-toolchain.sh?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -17,7 +17,7 @@ exit 1\n   trap \"$on_err\" ERR\n   bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n   PING_LOOP_PID=$!\n-  $@ &> /tmp/build.log\n+  \"$@\" &> /tmp/build.log\n   trap - ERR\n   kill $PING_LOOP_PID\n   set -x"}, {"sha": "189e537ecaeed90b964283c658715b599c7e3aeb", "filename": "src/ci/docker/host-x86_64/disabled/dist-x86_64-haiku/build-toolchain.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Fdist-x86_64-haiku%2Fbuild-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Fdist-x86_64-haiku%2Fbuild-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Fdist-x86_64-haiku%2Fbuild-toolchain.sh?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -22,7 +22,7 @@ exit 1\n   trap \"$on_err\" ERR\n   bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n   PING_LOOP_PID=$!\n-  $@ &> /tmp/build.log\n+  \"$@\" &> /tmp/build.log\n   trap - ERR\n   kill $PING_LOOP_PID\n   set -x"}, {"sha": "f15a7081612d8352d608e60e31af424d4e3eaa30", "filename": "src/ci/docker/host-x86_64/dist-aarch64-linux/build-toolchains.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-aarch64-linux%2Fbuild-toolchains.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-aarch64-linux%2Fbuild-toolchains.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-aarch64-linux%2Fbuild-toolchains.sh?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -11,7 +11,7 @@ exit 1\n   trap \"$on_err\" ERR\n   bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n   PING_LOOP_PID=$!\n-  $@ &> /tmp/build.log\n+  \"$@\" &> /tmp/build.log\n   rm /tmp/build.log\n   trap - ERR\n   kill $PING_LOOP_PID"}, {"sha": "3fd882521999ac42abf4a5b362c3f2f127dbb14f", "filename": "src/ci/docker/host-x86_64/dist-arm-linux/build-toolchains.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-arm-linux%2Fbuild-toolchains.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-arm-linux%2Fbuild-toolchains.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-arm-linux%2Fbuild-toolchains.sh?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -12,7 +12,7 @@ exit 1\n   trap \"$on_err\" ERR\n   bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n   PING_LOOP_PID=$!\n-  $@ &> /tmp/build.log\n+  \"$@\" &> /tmp/build.log\n   rm /tmp/build.log\n   trap - ERR\n   kill $PING_LOOP_PID"}, {"sha": "f425efd6057c67d78d3ac68b0c0e2e7d109f9e8b", "filename": "src/ci/docker/host-x86_64/dist-armhf-linux/build-toolchains.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-armhf-linux%2Fbuild-toolchains.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-armhf-linux%2Fbuild-toolchains.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-armhf-linux%2Fbuild-toolchains.sh?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -12,7 +12,7 @@ exit 1\n   trap \"$on_err\" ERR\n   bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n   PING_LOOP_PID=$!\n-  $@ &> /tmp/build.log\n+  \"$@\" &> /tmp/build.log\n   rm /tmp/build.log\n   trap - ERR\n   kill $PING_LOOP_PID"}, {"sha": "17dda2dbd1680677ba2802100a0d501375b7d502", "filename": "src/ci/docker/host-x86_64/dist-armv7-linux/build-toolchains.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-armv7-linux%2Fbuild-toolchains.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-armv7-linux%2Fbuild-toolchains.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-armv7-linux%2Fbuild-toolchains.sh?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -12,7 +12,7 @@ exit 1\n   trap \"$on_err\" ERR\n   bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n   PING_LOOP_PID=$!\n-  $@ &> /tmp/build.log\n+  \"$@\" &> /tmp/build.log\n   rm /tmp/build.log\n   trap - ERR\n   kill $PING_LOOP_PID"}, {"sha": "264d0764f2957636af187ff165800e08e964dce1", "filename": "src/ci/docker/host-x86_64/dist-powerpc-linux/build-powerpc-toolchain.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc-linux%2Fbuild-powerpc-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc-linux%2Fbuild-powerpc-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc-linux%2Fbuild-powerpc-toolchain.sh?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -11,7 +11,7 @@ exit 1\n   trap \"$on_err\" ERR\n   bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n   PING_LOOP_PID=$!\n-  $@ &> /tmp/build.log\n+  \"$@\" &> /tmp/build.log\n   rm /tmp/build.log\n   trap - ERR\n   kill $PING_LOOP_PID"}, {"sha": "dc86dddd464f2fb77319ae6f9b606ed6257a4bf8", "filename": "src/ci/docker/host-x86_64/dist-powerpc64-linux/shared.sh", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc64-linux%2Fshared.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc64-linux%2Fshared.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc64-linux%2Fshared.sh?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -1,3 +1,4 @@\n+#!/bin/sh\n hide_output() {\n   set +x\n   on_err=\"\n@@ -8,7 +9,7 @@ exit 1\n   trap \"$on_err\" ERR\n   bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n   PING_LOOP_PID=$!\n-  $@ &> /tmp/build.log\n+  \"$@\" &> /tmp/build.log\n   trap - ERR\n   kill $PING_LOOP_PID\n   set -x"}, {"sha": "dc86dddd464f2fb77319ae6f9b606ed6257a4bf8", "filename": "src/ci/docker/host-x86_64/dist-powerpc64le-linux/shared.sh", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc64le-linux%2Fshared.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc64le-linux%2Fshared.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc64le-linux%2Fshared.sh?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -1,3 +1,4 @@\n+#!/bin/sh\n hide_output() {\n   set +x\n   on_err=\"\n@@ -8,7 +9,7 @@ exit 1\n   trap \"$on_err\" ERR\n   bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n   PING_LOOP_PID=$!\n-  $@ &> /tmp/build.log\n+  \"$@\" &> /tmp/build.log\n   trap - ERR\n   kill $PING_LOOP_PID\n   set -x"}, {"sha": "a7025b2b7545e6cd1b94323303af25a71dc0f9e5", "filename": "src/ci/docker/host-x86_64/dist-riscv64-linux/build-toolchains.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-riscv64-linux%2Fbuild-toolchains.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-riscv64-linux%2Fbuild-toolchains.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-riscv64-linux%2Fbuild-toolchains.sh?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -12,7 +12,7 @@ exit 1\n   trap \"$on_err\" ERR\n   bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n   PING_LOOP_PID=$!\n-  $@ &> /tmp/build.log\n+  \"$@\" &> /tmp/build.log\n   rm /tmp/build.log\n   trap - ERR\n   kill $PING_LOOP_PID"}, {"sha": "3a40f6cddb3694140797d58f8dddda397221205f", "filename": "src/ci/docker/host-x86_64/dist-riscv64-linux/crosstool-ng.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-riscv64-linux%2Fcrosstool-ng.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-riscv64-linux%2Fcrosstool-ng.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-riscv64-linux%2Fcrosstool-ng.sh?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -1,3 +1,4 @@\n+#!/bin/sh\n set -ex\n \n # Mirrored from https://github.com/crosstool-ng/crosstool-ng/archive/crosstool-ng-1.24.0.tar.gz"}, {"sha": "6f8d6be842b8ebc89d8cec64a14444182e88814b", "filename": "src/ci/docker/host-x86_64/dist-s390x-linux/build-s390x-toolchain.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-s390x-linux%2Fbuild-s390x-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-s390x-linux%2Fbuild-s390x-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-s390x-linux%2Fbuild-s390x-toolchain.sh?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -11,7 +11,7 @@ exit 1\n   trap \"$on_err\" ERR\n   bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n   PING_LOOP_PID=$!\n-  $@ &> /tmp/build.log\n+  \"$@\" &> /tmp/build.log\n   rm /tmp/build.log\n   trap - ERR\n   kill $PING_LOOP_PID"}, {"sha": "103dbbe6fdaba984832deed492010671d7a06f8a", "filename": "src/ci/docker/host-x86_64/dist-various-1/build-rumprun.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-1%2Fbuild-rumprun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-1%2Fbuild-rumprun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-1%2Fbuild-rumprun.sh?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -11,7 +11,7 @@ exit 1\n   trap \"$on_err\" ERR\n   bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n   PING_LOOP_PID=$!\n-  $@ &> /tmp/build.log\n+  \"$@\" &> /tmp/build.log\n   trap - ERR\n   kill $PING_LOOP_PID\n   rm /tmp/build.log"}, {"sha": "abab18093469cc2c8fc279d5a269294c0b159615", "filename": "src/ci/docker/host-x86_64/dist-various-1/install-mips-musl.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-1%2Finstall-mips-musl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-1%2Finstall-mips-musl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-1%2Finstall-mips-musl.sh?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -1,3 +1,4 @@\n+#!/bin/sh\n set -ex\n \n mkdir /usr/local/mips-linux-musl"}, {"sha": "779acb2d8411683d7263afa7a58d6b0b05a258d3", "filename": "src/ci/docker/host-x86_64/dist-various-1/install-mipsel-musl.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-1%2Finstall-mipsel-musl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-1%2Finstall-mipsel-musl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-1%2Finstall-mipsel-musl.sh?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -1,3 +1,4 @@\n+#!/bin/sh\n set -ex\n \n mkdir /usr/local/mipsel-linux-musl"}, {"sha": "267d8b79cc28b434a6e45906fb3cea37284ec4db", "filename": "src/ci/docker/host-x86_64/dist-various-2/shared.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2Fshared.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2Fshared.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2Fshared.sh?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -1,3 +1,4 @@\n+#!/usr/bin/env bash\n hide_output() {\n   { set +x; } 2>/dev/null\n   on_err=\""}, {"sha": "dc86dddd464f2fb77319ae6f9b606ed6257a4bf8", "filename": "src/ci/docker/host-x86_64/dist-x86_64-linux/shared.sh", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2Fshared.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2Fshared.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2Fshared.sh?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -1,3 +1,4 @@\n+#!/bin/sh\n hide_output() {\n   set +x\n   on_err=\"\n@@ -8,7 +9,7 @@ exit 1\n   trap \"$on_err\" ERR\n   bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n   PING_LOOP_PID=$!\n-  $@ &> /tmp/build.log\n+  \"$@\" &> /tmp/build.log\n   trap - ERR\n   kill $PING_LOOP_PID\n   set -x"}, {"sha": "5dfa47b4eed74e74c8070dc18246b3ded92fea39", "filename": "src/ci/docker/host-x86_64/dist-x86_64-netbsd/build-netbsd-toolchain.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-netbsd%2Fbuild-netbsd-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-netbsd%2Fbuild-netbsd-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-netbsd%2Fbuild-netbsd-toolchain.sh?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -13,7 +13,7 @@ exit 1\n   trap \"$on_err\" ERR\n   bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n   PING_LOOP_PID=$!\n-  $@ &> /tmp/build.log\n+  \"$@\" &> /tmp/build.log\n   rm /tmp/build.log\n   trap - ERR\n   kill $PING_LOOP_PID"}, {"sha": "f1761f80643ba32321af88365051aac4c49b6c52", "filename": "src/ci/docker/scripts/android-base-apt-get.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fscripts%2Fandroid-base-apt-get.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fscripts%2Fandroid-base-apt-get.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fandroid-base-apt-get.sh?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -1,3 +1,4 @@\n+#!/bin/sh\n set -ex\n \n apt-get update"}, {"sha": "ba70c62ea3081a96725e3c942e9b21b3d46100f7", "filename": "src/ci/docker/scripts/android-ndk.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fscripts%2Fandroid-ndk.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fscripts%2Fandroid-ndk.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fandroid-ndk.sh?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -1,3 +1,4 @@\n+#!/bin/sh\n set -ex\n \n URL=https://dl.google.com/android/repository"}, {"sha": "23360d309515ed25f286801c2b37e0c3147e7ad2", "filename": "src/ci/docker/scripts/android-sdk.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fscripts%2Fandroid-sdk.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fscripts%2Fandroid-sdk.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fandroid-sdk.sh?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -1,3 +1,4 @@\n+#!/bin/sh\n set -ex\n \n export ANDROID_HOME=/android/sdk"}, {"sha": "57cb6d5cda86d222fb933e970ab4eaddd5aecd6b", "filename": "src/ci/docker/scripts/cross-apt-packages.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fscripts%2Fcross-apt-packages.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fscripts%2Fcross-apt-packages.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fcross-apt-packages.sh?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -1,3 +1,4 @@\n+#!/bin/sh\n apt-get update && apt-get install -y --no-install-recommends \\\n   automake \\\n   bison \\"}, {"sha": "3a40f6cddb3694140797d58f8dddda397221205f", "filename": "src/ci/docker/scripts/crosstool-ng-1.24.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fscripts%2Fcrosstool-ng-1.24.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fscripts%2Fcrosstool-ng-1.24.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fcrosstool-ng-1.24.sh?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -1,3 +1,4 @@\n+#!/bin/sh\n set -ex\n \n # Mirrored from https://github.com/crosstool-ng/crosstool-ng/archive/crosstool-ng-1.24.0.tar.gz"}, {"sha": "1d0c28c8e58241d0bb36a32cac28a9596eda6b83", "filename": "src/ci/docker/scripts/crosstool-ng.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fscripts%2Fcrosstool-ng.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fscripts%2Fcrosstool-ng.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fcrosstool-ng.sh?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -1,3 +1,4 @@\n+#!/bin/sh\n set -ex\n \n url=\"https://github.com/crosstool-ng/crosstool-ng/archive/crosstool-ng-1.22.0.tar.gz\""}, {"sha": "56dc96283edc10df04af0f2c71c5654c49a7a369", "filename": "src/ci/docker/scripts/emscripten.sh", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fscripts%2Femscripten.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fscripts%2Femscripten.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Femscripten.sh?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -1,3 +1,4 @@\n+#!/bin/sh\n set -ex\n \n hide_output() {\n@@ -10,7 +11,7 @@ exit 1\n   trap \"$on_err\" ERR\n   bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n   PING_LOOP_PID=$!\n-  $@ &> /tmp/build.log\n+  \"$@\" &> /tmp/build.log\n   trap - ERR\n   kill $PING_LOOP_PID\n   rm -f /tmp/build.log"}, {"sha": "c7ff78ca90c9dd6b3bbbbc1233d293cada490b31", "filename": "src/ci/docker/scripts/freebsd-toolchain.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fscripts%2Ffreebsd-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fscripts%2Ffreebsd-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Ffreebsd-toolchain.sh?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -19,7 +19,7 @@ exit 1\n   trap \"$on_err\" ERR\n   bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n   local ping_loop_pid=$!\n-  $@ &> /tmp/build.log\n+  \"$@\" &> /tmp/build.log\n   trap - ERR\n   kill $ping_loop_pid\n   set -x"}, {"sha": "283700d06f6cc44a5df5cb066c5d7569e075ff5d", "filename": "src/ci/docker/scripts/make3.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fscripts%2Fmake3.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fscripts%2Fmake3.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fmake3.sh?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -1,3 +1,4 @@\n+#!/bin/sh\n set -ex\n \n curl -f https://ftp.gnu.org/gnu/make/make-3.81.tar.gz | tar xzf -"}, {"sha": "59fc921ec260d0bb008a1ac76b21dcee2a876995", "filename": "src/ci/docker/scripts/musl-toolchain.sh", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fscripts%2Fmusl-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fscripts%2Fmusl-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fmusl-toolchain.sh?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -1,3 +1,4 @@\n+#!/bin/sh\n # This script runs `musl-cross-make` to prepare C toolchain (Binutils, GCC, musl itself)\n # and builds static libunwind that we distribute for static target.\n #\n@@ -19,7 +20,7 @@ exit 1\n   trap \"$on_err\" ERR\n   bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n   PING_LOOP_PID=$!\n-  $@ &> /tmp/build.log\n+  \"$@\" &> /tmp/build.log\n   trap - ERR\n   kill $PING_LOOP_PID\n   rm /tmp/build.log"}, {"sha": "65e1595055942fa3b5e2d656d2975c9203a89ffd", "filename": "src/ci/docker/scripts/musl.sh", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fscripts%2Fmusl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fscripts%2Fmusl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fmusl.sh?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -1,3 +1,4 @@\n+#!/bin/sh\n set -ex\n \n hide_output() {\n@@ -10,7 +11,7 @@ exit 1\n   trap \"$on_err\" ERR\n   bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n   PING_LOOP_PID=$!\n-  $@ &> /tmp/build.log\n+  \"$@\" &> /tmp/build.log\n   trap - ERR\n   kill $PING_LOOP_PID\n   rm /tmp/build.log\n@@ -32,7 +33,7 @@ if [ ! -d $MUSL ]; then\n fi\n \n cd $MUSL\n-./configure --enable-optimize --enable-debug --disable-shared --prefix=/musl-$TAG $@\n+./configure --enable-optimize --enable-debug --disable-shared --prefix=/musl-$TAG \"$@\"\n if [ \"$TAG\" = \"i586\" -o \"$TAG\" = \"i686\" ]; then\n   hide_output make -j$(nproc) AR=ar RANLIB=ranlib\n else"}, {"sha": "baf2a68687196146059da461a09c885629797bd6", "filename": "src/ci/docker/scripts/rustbuild-setup.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fscripts%2Frustbuild-setup.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fscripts%2Frustbuild-setup.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Frustbuild-setup.sh?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -1,3 +1,4 @@\n+#!/bin/sh\n set -ex\n \n groupadd -r rustbuild && useradd -m -r -g rustbuild rustbuild"}, {"sha": "292b3c1d5627a5dc69eeb36025fcec5a7dd356eb", "filename": "src/ci/docker/scripts/sccache.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fscripts%2Fsccache.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fdocker%2Fscripts%2Fsccache.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fsccache.sh?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -1,3 +1,4 @@\n+#!/bin/sh\n set -ex\n \n case \"$(uname -m)\" in"}, {"sha": "060b3079dad5fe214223dfd73b3e6c7001a8bfc6", "filename": "src/ci/init_repo.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Finit_repo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Finit_repo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Finit_repo.sh?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -53,6 +53,7 @@ modules=($modules)\n use_git=\"\"\n urls=\"$(git config --file .gitmodules --get-regexp '\\.url$' | cut -d' ' -f2)\"\n urls=($urls)\n+# shellcheck disable=SC2068\n for i in ${!modules[@]}; do\n     module=${modules[$i]}\n     if [[ \" $included \" = *\" $module \"* ]]; then"}, {"sha": "3c196c9478cf8adfdb91aac614434078431a5b44", "filename": "src/ci/shared.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fshared.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fci%2Fshared.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fshared.sh?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -1,4 +1,5 @@\n #!/bin/false\n+# shellcheck shell=bash\n \n # This file is intended to be sourced with `. shared.sh` or\n # `source shared.sh`, hence the invalid shebang and not being"}, {"sha": "2c92d5e2a180311501b18fc15c8cd147b7bd332c", "filename": "src/doc/index.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -26,7 +26,7 @@ h2 {\n }\n </style>\n \n-Welcome to an overview of the documentation provided by the Rust project.\n+Welcome to an overview of the documentation provided by the [Rust project].\n All of these projects are managed by the Docs Team; there are other\n unofficial documentation resources as well!\n \n@@ -139,3 +139,4 @@ When developing for Bare Metal or Embedded Linux systems, you may find these res\n [The Embedded Rust Book] is targeted at developers familiar with embedded development and familiar with Rust, but have not used Rust for embedded development.\n \n [The Embedded Rust Book]: embedded-book/index.html\n+[Rust project]: https://www.rust-lang.org"}, {"sha": "a8aa72af1845b64fc8f71f7f99fbd20614b41031", "filename": "src/test/run-make/thumb-none-qemu/script.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Ftest%2Frun-make%2Fthumb-none-qemu%2Fscript.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Ftest%2Frun-make%2Fthumb-none-qemu%2Fscript.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fthumb-none-qemu%2Fscript.sh?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -1,3 +1,4 @@\n+#!/bin/sh\n set -exuo pipefail\n \n CRATE=example"}, {"sha": "54645e9e257c97d6d95ef979b8384ab3c96cde2c", "filename": "src/test/run-make/x86_64-fortanix-unknown-sgx-lvi/script.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fscript.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fscript.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fscript.sh?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -1,3 +1,4 @@\n+#!/bin/sh\n set -exuo pipefail\n \n function build {"}, {"sha": "cf0ff6311483cacaed8bd5e0acc97baa459c0ffc", "filename": "src/test/ui/error-codes/E0027.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Ftest%2Fui%2Ferror-codes%2FE0027.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Ftest%2Fui%2Ferror-codes%2FE0027.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0027.stderr?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -8,7 +8,7 @@ help: include the missing field in the pattern\n    |\n LL |         Dog { age: x, name } => {}\n    |                     ^^^^^^\n-help: if you don't care about this missing field, you can explicitely ignore it\n+help: if you don't care about this missing field, you can explicitly ignore it\n    |\n LL |         Dog { age: x, .. } => {}\n    |                     ^^^^\n@@ -23,7 +23,7 @@ help: include the missing fields in the pattern\n    |\n LL |         Dog { name, age } => {}\n    |             ^^^^^^^^^^^^^\n-help: if you don't care about these missing fields, you can explicitely ignore them\n+help: if you don't care about these missing fields, you can explicitly ignore them\n    |\n LL |         Dog { .. } => {}\n    |             ^^^^^^"}, {"sha": "512f1e283cb462a0cff4ace899421714bd4c4d4d", "filename": "src/test/ui/or-patterns/exhaustiveness-unreachable-pattern.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.rs?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -77,10 +77,17 @@ fn main() {\n         (false | true, false | true) => {}\n     }\n     match (true, true) {\n-        (true, false) => {}\n-        (false, true) => {}\n+        (true, true) => {}\n+        (false, false) => {}\n         (false | true, false | true) => {}\n     }\n+    // https://github.com/rust-lang/rust/issues/76836\n+    match None {\n+        Some(false) => {}\n+        None | Some(true\n+                | false) => {} //~ ERROR unreachable\n+    }\n+\n     // A subpattern that is unreachable in all branches is overall unreachable.\n     match (true, true) {\n         (false, true) => {}"}, {"sha": "e968310d108dda3c8f817fbde18b53a310b40497", "filename": "src/test/ui/or-patterns/exhaustiveness-unreachable-pattern.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.stderr?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -101,16 +101,22 @@ LL |         Some(0\n    |              ^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:89:15\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:88:19\n+   |\n+LL |                 | false) => {}\n+   |                   ^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:96:15\n    |\n LL |             | true) => {}\n    |               ^^^^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:95:15\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:102:15\n    |\n LL |             | true,\n    |               ^^^^\n \n-error: aborting due to 18 previous errors\n+error: aborting due to 19 previous errors\n "}, {"sha": "740ea3829dc511b2e1a683a2bc1eb45b13701984", "filename": "src/test/ui/structs/struct-field-cfg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Ftest%2Fui%2Fstructs%2Fstruct-field-cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Ftest%2Fui%2Fstructs%2Fstruct-field-cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-field-cfg.stderr?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -22,7 +22,7 @@ help: include the missing field in the pattern\n    |\n LL |     let Foo { present } = foo;\n    |             ^^^^^^^^^^^\n-help: if you don't care about this missing field, you can explicitely ignore it\n+help: if you don't care about this missing field, you can explicitly ignore it\n    |\n LL |     let Foo { .. } = foo;\n    |             ^^^^^^"}, {"sha": "921d060faa38bdcc1e18bbc0edaef617e261f462", "filename": "src/test/ui/structs/struct-pat-derived-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Ftest%2Fui%2Fstructs%2Fstruct-pat-derived-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Ftest%2Fui%2Fstructs%2Fstruct-pat-derived-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-pat-derived-error.stderr?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -20,7 +20,7 @@ help: include the missing fields in the pattern\n    |\n LL |         let A { x, y, b, c } = self.d;\n    |                     ^^^^^^\n-help: if you don't care about these missing fields, you can explicitely ignore them\n+help: if you don't care about these missing fields, you can explicitly ignore them\n    |\n LL |         let A { x, y, .. } = self.d;\n    |                     ^^^^"}, {"sha": "24ef98cd784d8b4fe408eaf6cbde9c58efa4e7b1", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -224,6 +224,10 @@ pub struct Config {\n     /// The test mode, compile-fail, run-fail, ui\n     pub mode: Mode,\n \n+    /// The test suite (essentially which directory is running, but without the\n+    /// directory prefix such as src/test)\n+    pub suite: String,\n+\n     /// The debugger to use in debuginfo mode. Unset otherwise.\n     pub debugger: Option<Debugger>,\n "}, {"sha": "4bcbd89f09510eff0b945ebdf749e811c2c8f66f", "filename": "src/tools/compiletest/src/header/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -39,6 +39,7 @@ fn config() -> Config {\n     let args = &[\n         \"compiletest\",\n         \"--mode=ui\",\n+        \"--suite=ui\",\n         \"--compile-lib-path=\",\n         \"--run-lib-path=\",\n         \"--rustc-path=\","}, {"sha": "2b167ac8e9fb288c19b4293383a3de8f4e2a70d2", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a36fa8a4ec06daec581e23f390389e05f25e4/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=7e9a36fa8a4ec06daec581e23f390389e05f25e4", "patch": "@@ -70,6 +70,12 @@ pub fn parse_config(args: Vec<String>) -> Config {\n             \"compile-fail | run-fail | run-pass-valgrind | pretty | debug-info | codegen | rustdoc \\\n              codegen-units | incremental | run-make | ui | js-doc-test | mir-opt | assembly\",\n         )\n+        .reqopt(\n+            \"\",\n+            \"suite\",\n+            \"which suite of compile tests to run. used for nicer error reporting.\",\n+            \"SUITE\",\n+        )\n         .optopt(\n             \"\",\n             \"pass\",\n@@ -201,6 +207,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         build_base: opt_path(matches, \"build-base\"),\n         stage_id: matches.opt_str(\"stage-id\").unwrap(),\n         mode: matches.opt_str(\"mode\").unwrap().parse().expect(\"invalid mode\"),\n+        suite: matches.opt_str(\"suite\").unwrap(),\n         debugger: None,\n         run_ignored,\n         filter: matches.free.first().cloned(),\n@@ -340,7 +347,7 @@ pub fn run_tests(config: Config) {\n             configs.extend(configure_lldb(&config));\n         }\n     } else {\n-        configs.push(config);\n+        configs.push(config.clone());\n     };\n \n     let mut tests = Vec::new();\n@@ -351,11 +358,32 @@ pub fn run_tests(config: Config) {\n     let res = test::run_tests_console(&opts, tests);\n     match res {\n         Ok(true) => {}\n-        Ok(false) => panic!(\"Some tests failed\"),\n+        Ok(false) => {\n+            // We want to report that the tests failed, but we also want to give\n+            // some indication of just what tests we were running. Especially on\n+            // CI, where there can be cross-compiled tests for a lot of\n+            // architectures, without this critical information it can be quite\n+            // easy to miss which tests failed, and as such fail to reproduce\n+            // the failure locally.\n+\n+            eprintln!(\n+                \"Some tests failed in compiletest suite={}{} mode={} host={} target={}\",\n+                config.suite,\n+                config.compare_mode.map(|c| format!(\" compare_mode={:?}\", c)).unwrap_or_default(),\n+                config.mode,\n+                config.host,\n+                config.target\n+            );\n+\n+            std::process::exit(1);\n+        }\n         Err(e) => {\n             // We don't know if tests passed or not, but if there was an error\n             // during testing we don't want to just suceeed (we may not have\n             // tested something), so fail.\n+            //\n+            // This should realistically \"never\" happen, so don't try to make\n+            // this a pretty error message.\n             panic!(\"I/O failure during tests: {:?}\", e);\n         }\n     }"}]}