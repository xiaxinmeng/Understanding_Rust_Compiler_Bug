{"sha": "9ba169a73acfa9c9875b76eec09e9a91cc6246df", "node_id": "C_kwDOAAsO6NoAKDliYTE2OWE3M2FjZmE5Yzk4NzViNzZlZWMwOWU5YTkxY2M2MjQ2ZGY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-02T18:40:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-02T18:40:21Z"}, "message": "Auto merge of #101333 - matthiaskrgr:rollup-qpf1otj, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #100121 (Try normalizing types without RevealAll in ParamEnv in MIR validation)\n - #100200 (Change implementation of `-Z gcc-ld` and `lld-wrapper` again)\n - #100814 ( Porting 'compiler/rustc_trait_selection' to translatable diagnostics - Part 1)\n - #101215 (Also replace the version placeholder in rustc_attr)\n - #101260 (Use `FILE_ATTRIBUTE_TAG_INFO` to get reparse tag)\n - #101323 (Remove unused .toggle-label CSS rule)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "356cb29d703b6de6f28ac6d1c455274822bbb1e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/356cb29d703b6de6f28ac6d1c455274822bbb1e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ba169a73acfa9c9875b76eec09e9a91cc6246df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ba169a73acfa9c9875b76eec09e9a91cc6246df", "html_url": "https://github.com/rust-lang/rust/commit/9ba169a73acfa9c9875b76eec09e9a91cc6246df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ba169a73acfa9c9875b76eec09e9a91cc6246df/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b88e510cc886e4c367d90e1c7c36013a4bc0d6ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/b88e510cc886e4c367d90e1c7c36013a4bc0d6ab", "html_url": "https://github.com/rust-lang/rust/commit/b88e510cc886e4c367d90e1c7c36013a4bc0d6ab"}, {"sha": "e77b8ce1001b3174c5acc1990a4c86c73b0cd1e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e77b8ce1001b3174c5acc1990a4c86c73b0cd1e8", "html_url": "https://github.com/rust-lang/rust/commit/e77b8ce1001b3174c5acc1990a4c86c73b0cd1e8"}], "stats": {"total": 447, "additions": 303, "deletions": 144}, "files": [{"sha": "a8ed510866d89832fed560be07bf534f2fbfda84", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9ba169a73acfa9c9875b76eec09e9a91cc6246df/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba169a73acfa9c9875b76eec09e9a91cc6246df/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=9ba169a73acfa9c9875b76eec09e9a91cc6246df", "patch": "@@ -15,6 +15,12 @@ use std::num::NonZeroU32;\n \n use crate::session_diagnostics::{self, IncorrectReprFormatGenericCause};\n \n+/// The version placeholder that recently stabilized features contain inside the\n+/// `since` field of the `#[stable]` attribute.\n+///\n+/// For more, see [this pull request](https://github.com/rust-lang/rust/pull/100591).\n+pub const VERSION_PLACEHOLDER: &str = \"CURRENT_RUSTC_VERSION\";\n+\n pub fn is_builtin_attr(attr: &Attribute) -> bool {\n     attr.is_doc_comment() || attr.ident().filter(|ident| is_builtin_attr_name(ident.name)).is_some()\n }\n@@ -483,6 +489,12 @@ where\n                         }\n                     }\n \n+                    if let Some(s) = since && s.as_str() == VERSION_PLACEHOLDER {\n+                        let version = option_env!(\"CFG_VERSION\").unwrap_or(\"<current>\");\n+                        let version = version.split(' ').next().unwrap();\n+                        since = Some(Symbol::intern(&version));\n+                    }\n+\n                     match (feature, since) {\n                         (Some(feature), Some(since)) => {\n                             let level = Stable { since, allowed_through_unstable_modules: false };"}, {"sha": "e9171823c242c7c1be928306c1b50d76025066a4", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9ba169a73acfa9c9875b76eec09e9a91cc6246df/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba169a73acfa9c9875b76eec09e9a91cc6246df/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=9ba169a73acfa9c9875b76eec09e9a91cc6246df", "patch": "@@ -2797,20 +2797,24 @@ fn add_gcc_ld_path(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n         if let LinkerFlavor::Gcc = flavor {\n             match ld_impl {\n                 LdImpl::Lld => {\n-                    let tools_path = sess.get_tools_search_paths(false);\n-                    let gcc_ld_dir = tools_path\n-                        .into_iter()\n-                        .map(|p| p.join(\"gcc-ld\"))\n-                        .find(|p| {\n-                            p.join(if sess.host.is_like_windows { \"ld.exe\" } else { \"ld\" }).exists()\n-                        })\n-                        .unwrap_or_else(|| sess.fatal(\"rust-lld (as ld) not found\"));\n-                    cmd.arg({\n-                        let mut arg = OsString::from(\"-B\");\n-                        arg.push(gcc_ld_dir);\n-                        arg\n-                    });\n-                    cmd.arg(format!(\"-Wl,-rustc-lld-flavor={}\", sess.target.lld_flavor.as_str()));\n+                    // Implement the \"self-contained\" part of -Zgcc-ld\n+                    // by adding rustc distribution directories to the tool search path.\n+                    for path in sess.get_tools_search_paths(false) {\n+                        cmd.arg({\n+                            let mut arg = OsString::from(\"-B\");\n+                            arg.push(path.join(\"gcc-ld\"));\n+                            arg\n+                        });\n+                    }\n+                    // Implement the \"linker flavor\" part of -Zgcc-ld\n+                    // by asking cc to use some kind of lld.\n+                    cmd.arg(\"-fuse-ld=lld\");\n+                    if sess.target.lld_flavor != LldFlavor::Ld {\n+                        // Tell clang to use a non-default LLD flavor.\n+                        // Gcc doesn't understand the target option, but we currently assume\n+                        // that gcc is not used for Apple and Wasm targets (#97402).\n+                        cmd.arg(format!(\"--target={}\", sess.target.llvm_target));\n+                    }\n                 }\n             }\n         } else {"}, {"sha": "b798862583952eb5d1604a56750c14850ac8c6ab", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9ba169a73acfa9c9875b76eec09e9a91cc6246df/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba169a73acfa9c9875b76eec09e9a91cc6246df/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=9ba169a73acfa9c9875b76eec09e9a91cc6246df", "patch": "@@ -181,16 +181,23 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         if (src, dest).has_opaque_types() {\n             return true;\n         }\n-        // Normalize projections and things like that.\n-        let param_env = self.param_env.with_reveal_all_normalized(self.tcx);\n-        let src = self.tcx.normalize_erasing_regions(param_env, src);\n-        let dest = self.tcx.normalize_erasing_regions(param_env, dest);\n \n+        // Normalize projections and things like that.\n         // Type-changing assignments can happen when subtyping is used. While\n         // all normal lifetimes are erased, higher-ranked types with their\n         // late-bound lifetimes are still around and can lead to type\n         // differences. So we compare ignoring lifetimes.\n-        equal_up_to_regions(self.tcx, param_env, src, dest)\n+\n+        // First, try with reveal_all. This might not work in some cases, as the predicates\n+        // can be cleared in reveal_all mode. We try the reveal first anyways as it is used\n+        // by some other passes like inlining as well.\n+        let param_env = self.param_env.with_reveal_all_normalized(self.tcx);\n+        if equal_up_to_regions(self.tcx, param_env, src, dest) {\n+            return true;\n+        }\n+\n+        // If this fails, we can try it without the reveal.\n+        equal_up_to_regions(self.tcx, self.param_env, src, dest)\n     }\n }\n "}, {"sha": "004e0ab18969469f04dd1c91d70dfe70e1bc791f", "filename": "compiler/rustc_error_messages/locales/en-US/trait_selection.ftl", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9ba169a73acfa9c9875b76eec09e9a91cc6246df/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftrait_selection.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/9ba169a73acfa9c9875b76eec09e9a91cc6246df/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftrait_selection.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftrait_selection.ftl?ref=9ba169a73acfa9c9875b76eec09e9a91cc6246df", "patch": "@@ -0,0 +1,26 @@\n+trait_selection_dump_vtable_entries = vtable entries for `{$trait_ref}`: {$entries}\n+\n+trait_selection_unable_to_construct_constant_value = unable to construct a constant value for the unevaluated constant {$unevaluated}\n+\n+trait_selection_auto_deref_reached_recursion_limit = reached the recursion limit while auto-dereferencing `{$ty}`\n+    .label = deref recursion limit reached\n+    .help = consider increasing the recursion limit by adding a `#![recursion_limit = \"{$suggested_limit}\"]` attribute to your crate (`{$crate_name}`)\n+\n+trait_selection_empty_on_clause_in_rustc_on_unimplemented = empty `on`-clause in `#[rustc_on_unimplemented]`\n+    .label = empty on-clause here\n+\n+trait_selection_invalid_on_clause_in_rustc_on_unimplemented = invalid `on`-clause in `#[rustc_on_unimplemented]`\n+    .label = invalid on-clause here\n+\n+trait_selection_no_value_in_rustc_on_unimplemented = this attribute must have a valid value\n+    .label = expected value here\n+    .note = eg `#[rustc_on_unimplemented(message=\"foo\")]`\n+\n+trait_selection_negative_positive_conflict = found both positive and negative implementation of trait `{$trait_desc}`{$self_desc ->\n+        [none] {\"\"}\n+       *[default] {\" \"}for type `{$self_desc}`\n+    }:\n+    .negative_implementation_here = negative implementation here\n+    .negative_implementation_in_crate = negative implementation in crate `{$negative_impl_cname}`\n+    .positive_implementation_here = positive implementation here\n+    .positive_implementation_in_crate = positive implementation in crate `{$positive_impl_cname}`"}, {"sha": "05d0a2ba82cee984758cc5f498edbb5b2b23c148", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ba169a73acfa9c9875b76eec09e9a91cc6246df/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba169a73acfa9c9875b76eec09e9a91cc6246df/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=9ba169a73acfa9c9875b76eec09e9a91cc6246df", "patch": "@@ -53,6 +53,7 @@ fluent_messages! {\n     plugin_impl => \"../locales/en-US/plugin_impl.ftl\",\n     privacy => \"../locales/en-US/privacy.ftl\",\n     query_system => \"../locales/en-US/query_system.ftl\",\n+    trait_selection => \"../locales/en-US/trait_selection.ftl\",\n     save_analysis => \"../locales/en-US/save_analysis.ftl\",\n     ty_utils => \"../locales/en-US/ty_utils.ftl\",\n     typeck => \"../locales/en-US/typeck.ftl\","}, {"sha": "3840e79cebd84e8d577b412366a049f552270719", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ba169a73acfa9c9875b76eec09e9a91cc6246df/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba169a73acfa9c9875b76eec09e9a91cc6246df/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=9ba169a73acfa9c9875b76eec09e9a91cc6246df", "patch": "@@ -20,6 +20,12 @@ pub struct Unevaluated<'tcx, P = Option<Promoted>> {\n     pub promoted: P,\n }\n \n+impl rustc_errors::IntoDiagnosticArg for Unevaluated<'_> {\n+    fn into_diagnostic_arg(self) -> rustc_errors::DiagnosticArgValue<'static> {\n+        format!(\"{:?}\", self).into_diagnostic_arg()\n+    }\n+}\n+\n impl<'tcx> Unevaluated<'tcx> {\n     #[inline]\n     pub fn shrink(self) -> Unevaluated<'tcx, ()> {"}, {"sha": "9fb91b5fe8700032585acf97aaf3b88d4a38c116", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ba169a73acfa9c9875b76eec09e9a91cc6246df/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba169a73acfa9c9875b76eec09e9a91cc6246df/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=9ba169a73acfa9c9875b76eec09e9a91cc6246df", "patch": "@@ -849,6 +849,12 @@ impl<'tcx> PolyTraitRef<'tcx> {\n     }\n }\n \n+impl rustc_errors::IntoDiagnosticArg for PolyTraitRef<'_> {\n+    fn into_diagnostic_arg(self) -> rustc_errors::DiagnosticArgValue<'static> {\n+        self.to_string().into_diagnostic_arg()\n+    }\n+}\n+\n /// An existential reference to a trait, where `Self` is erased.\n /// For example, the trait object `Trait<'a, 'b, X, Y>` is:\n /// ```ignore (illustrative)"}, {"sha": "5aac6943eef1eb2af321c9c34f995b095bb6fc16", "filename": "compiler/rustc_passes/src/lib_features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ba169a73acfa9c9875b76eec09e9a91cc6246df/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba169a73acfa9c9875b76eec09e9a91cc6246df/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs?ref=9ba169a73acfa9c9875b76eec09e9a91cc6246df", "patch": "@@ -5,6 +5,7 @@\n //! collect them instead.\n \n use rustc_ast::{Attribute, MetaItemKind};\n+use rustc_attr::VERSION_PLACEHOLDER;\n use rustc_errors::struct_span_err;\n use rustc_hir::intravisit::Visitor;\n use rustc_middle::hir::nested_filter;\n@@ -54,7 +55,6 @@ impl<'tcx> LibFeatureCollector<'tcx> {\n                         }\n                     }\n                 }\n-                const VERSION_PLACEHOLDER: &str = \"CURRENT_RUSTC_VERSION\";\n \n                 if let Some(s) = since && s.as_str() == VERSION_PLACEHOLDER {\n                     let version = option_env!(\"CFG_VERSION\").unwrap_or(\"<current>\");"}, {"sha": "a49af23be2316d7ad1a839bd27d115522d3a765e", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ba169a73acfa9c9875b76eec09e9a91cc6246df/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba169a73acfa9c9875b76eec09e9a91cc6246df/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=9ba169a73acfa9c9875b76eec09e9a91cc6246df", "patch": "@@ -110,6 +110,12 @@ impl Mul<usize> for Limit {\n     }\n }\n \n+impl rustc_errors::IntoDiagnosticArg for Limit {\n+    fn into_diagnostic_arg(self) -> rustc_errors::DiagnosticArgValue<'static> {\n+        self.to_string().into_diagnostic_arg()\n+    }\n+}\n+\n #[derive(Clone, Copy, Debug, HashStable_Generic)]\n pub struct Limits {\n     /// The maximum recursion limit for potentially infinitely recursive"}, {"sha": "36ab8f3bd8845f6cf6bc754c1432fafccaf365bd", "filename": "compiler/rustc_trait_selection/src/autoderef.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9ba169a73acfa9c9875b76eec09e9a91cc6246df/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba169a73acfa9c9875b76eec09e9a91cc6246df/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs?ref=9ba169a73acfa9c9875b76eec09e9a91cc6246df", "patch": "@@ -1,6 +1,6 @@\n+use crate::errors::AutoDerefReachedRecursionLimit;\n use crate::traits::query::evaluate_obligation::InferCtxtExt;\n use crate::traits::{self, TraitEngine};\n-use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_infer::infer::InferCtxt;\n use rustc_middle::ty::{self, TraitRef, Ty, TyCtxt};\n@@ -222,19 +222,10 @@ pub fn report_autoderef_recursion_limit_error<'tcx>(tcx: TyCtxt<'tcx>, span: Spa\n         Limit(0) => Limit(2),\n         limit => limit * 2,\n     };\n-    struct_span_err!(\n-        tcx.sess,\n+    tcx.sess.emit_err(AutoDerefReachedRecursionLimit {\n         span,\n-        E0055,\n-        \"reached the recursion limit while auto-dereferencing `{:?}`\",\n-        ty\n-    )\n-    .span_label(span, \"deref recursion limit reached\")\n-    .help(&format!(\n-        \"consider increasing the recursion limit by adding a \\\n-             `#![recursion_limit = \\\"{}\\\"]` attribute to your crate (`{}`)\",\n+        ty,\n         suggested_limit,\n-        tcx.crate_name(LOCAL_CRATE),\n-    ))\n-    .emit();\n+        crate_name: tcx.crate_name(LOCAL_CRATE),\n+    });\n }"}, {"sha": "81977f25ca21fa39a3e6255b0c2c9e78547f8078", "filename": "compiler/rustc_trait_selection/src/errors.rs", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/9ba169a73acfa9c9875b76eec09e9a91cc6246df/compiler%2Frustc_trait_selection%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba169a73acfa9c9875b76eec09e9a91cc6246df/compiler%2Frustc_trait_selection%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ferrors.rs?ref=9ba169a73acfa9c9875b76eec09e9a91cc6246df", "patch": "@@ -0,0 +1,102 @@\n+use rustc_errors::{fluent, ErrorGuaranteed};\n+use rustc_macros::SessionDiagnostic;\n+use rustc_middle::ty::{PolyTraitRef, Ty, Unevaluated};\n+use rustc_session::{parse::ParseSess, Limit, SessionDiagnostic};\n+use rustc_span::{Span, Symbol};\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(trait_selection::dump_vtable_entries)]\n+pub struct DumpVTableEntries<'a> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub trait_ref: PolyTraitRef<'a>,\n+    pub entries: String,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(trait_selection::unable_to_construct_constant_value)]\n+pub struct UnableToConstructConstantValue<'a> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub unevaluated: Unevaluated<'a>,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[help]\n+#[diag(trait_selection::auto_deref_reached_recursion_limit, code = \"E0055\")]\n+pub struct AutoDerefReachedRecursionLimit<'a> {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    pub ty: Ty<'a>,\n+    pub suggested_limit: Limit,\n+    pub crate_name: Symbol,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(trait_selection::empty_on_clause_in_rustc_on_unimplemented, code = \"E0232\")]\n+pub struct EmptyOnClauseInOnUnimplemented {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(trait_selection::invalid_on_clause_in_rustc_on_unimplemented, code = \"E0232\")]\n+pub struct InvalidOnClauseInOnUnimplemented {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(trait_selection::no_value_in_rustc_on_unimplemented, code = \"E0232\")]\n+#[note]\n+pub struct NoValueInOnUnimplemented {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+}\n+\n+pub struct NegativePositiveConflict<'a> {\n+    pub impl_span: Span,\n+    pub trait_desc: &'a str,\n+    pub self_desc: &'a Option<String>,\n+    pub negative_impl_span: Result<Span, Symbol>,\n+    pub positive_impl_span: Result<Span, Symbol>,\n+}\n+\n+impl SessionDiagnostic<'_> for NegativePositiveConflict<'_> {\n+    fn into_diagnostic(\n+        self,\n+        sess: &ParseSess,\n+    ) -> rustc_errors::DiagnosticBuilder<'_, ErrorGuaranteed> {\n+        let mut diag = sess.struct_err(fluent::trait_selection::negative_positive_conflict);\n+        diag.set_arg(\"trait_desc\", self.trait_desc);\n+        diag.set_arg(\n+            \"self_desc\",\n+            self.self_desc.clone().map_or_else(|| String::from(\"none\"), |ty| ty),\n+        );\n+        diag.set_span(self.impl_span);\n+        diag.code(rustc_errors::error_code!(E0751));\n+        match self.negative_impl_span {\n+            Ok(span) => {\n+                diag.span_label(span, fluent::trait_selection::negative_implementation_here);\n+            }\n+            Err(cname) => {\n+                diag.note(fluent::trait_selection::negative_implementation_in_crate);\n+                diag.set_arg(\"negative_impl_cname\", cname.to_string());\n+            }\n+        }\n+        match self.positive_impl_span {\n+            Ok(span) => {\n+                diag.span_label(span, fluent::trait_selection::positive_implementation_here);\n+            }\n+            Err(cname) => {\n+                diag.note(fluent::trait_selection::positive_implementation_in_crate);\n+                diag.set_arg(\"positive_impl_cname\", cname.to_string());\n+            }\n+        }\n+        diag\n+    }\n+}"}, {"sha": "f039b1fca1817d1069e24d0f489bd659c644b259", "filename": "compiler/rustc_trait_selection/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ba169a73acfa9c9875b76eec09e9a91cc6246df/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba169a73acfa9c9875b76eec09e9a91cc6246df/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs?ref=9ba169a73acfa9c9875b76eec09e9a91cc6246df", "patch": "@@ -37,5 +37,6 @@ extern crate rustc_middle;\n extern crate smallvec;\n \n pub mod autoderef;\n+pub mod errors;\n pub mod infer;\n pub mod traits;"}, {"sha": "1223c7ced7abcb9e04bdaeb1b879ec240092bcf7", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ba169a73acfa9c9875b76eec09e9a91cc6246df/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba169a73acfa9c9875b76eec09e9a91cc6246df/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=9ba169a73acfa9c9875b76eec09e9a91cc6246df", "patch": "@@ -3,6 +3,7 @@\n \n use super::*;\n \n+use crate::errors::UnableToConstructConstantValue;\n use crate::infer::region_constraints::{Constraint, RegionConstraintData};\n use crate::infer::InferCtxt;\n use crate::traits::project::ProjectAndUnifyResult;\n@@ -830,8 +831,11 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                                 Ok(None) => {\n                                     let tcx = self.tcx;\n                                     let def_id = unevaluated.def.did;\n-                                    let reported = tcx.sess.struct_span_err(tcx.def_span(def_id), &format!(\"unable to construct a constant value for the unevaluated constant {:?}\", unevaluated)).emit();\n-\n+                                    let reported =\n+                                        tcx.sess.emit_err(UnableToConstructConstantValue {\n+                                            span: tcx.def_span(def_id),\n+                                            unevaluated,\n+                                        });\n                                     Err(ErrorHandled::Reported(reported))\n                                 }\n                                 Err(err) => Err(err),"}, {"sha": "14e078096783e39239cdb186325910f9df61dd8b", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ba169a73acfa9c9875b76eec09e9a91cc6246df/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba169a73acfa9c9875b76eec09e9a91cc6246df/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=9ba169a73acfa9c9875b76eec09e9a91cc6246df", "patch": "@@ -23,6 +23,7 @@ mod structural_match;\n mod util;\n pub mod wf;\n \n+use crate::errors::DumpVTableEntries;\n use crate::infer::outlives::env::OutlivesEnvironment;\n use crate::infer::{InferCtxt, TyCtxtInferExt};\n use crate::traits::error_reporting::InferCtxtExt as _;\n@@ -763,8 +764,11 @@ fn dump_vtable_entries<'tcx>(\n     trait_ref: ty::PolyTraitRef<'tcx>,\n     entries: &[VtblEntry<'tcx>],\n ) {\n-    let msg = format!(\"vtable entries for `{}`: {:#?}\", trait_ref, entries);\n-    tcx.sess.struct_span_err(sp, &msg).emit();\n+    tcx.sess.emit_err(DumpVTableEntries {\n+        span: sp,\n+        trait_ref,\n+        entries: format!(\"{:#?}\", entries),\n+    });\n }\n \n fn own_existential_vtable_entries<'tcx>("}, {"sha": "3d8840e9e7421b22de38bffe66d9ebb0a4eec556", "filename": "compiler/rustc_trait_selection/src/traits/on_unimplemented.rs", "status": "modified", "additions": 7, "deletions": 40, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/9ba169a73acfa9c9875b76eec09e9a91cc6246df/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba169a73acfa9c9875b76eec09e9a91cc6246df/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs?ref=9ba169a73acfa9c9875b76eec09e9a91cc6246df", "patch": "@@ -8,6 +8,10 @@ use rustc_parse_format::{ParseMode, Parser, Piece, Position};\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n \n+use crate::errors::{\n+    EmptyOnClauseInOnUnimplemented, InvalidOnClauseInOnUnimplemented, NoValueInOnUnimplemented,\n+};\n+\n #[derive(Clone, Debug)]\n pub struct OnUnimplementedFormatString(Symbol);\n \n@@ -35,21 +39,6 @@ pub struct OnUnimplementedNote {\n     pub append_const_msg: Option<Option<Symbol>>,\n }\n \n-fn parse_error(\n-    tcx: TyCtxt<'_>,\n-    span: Span,\n-    message: &str,\n-    label: &str,\n-    note: Option<&str>,\n-) -> ErrorGuaranteed {\n-    let mut diag = struct_span_err!(tcx.sess, span, E0232, \"{}\", message);\n-    diag.span_label(span, label);\n-    if let Some(note) = note {\n-        diag.note(note);\n-    }\n-    diag.emit()\n-}\n-\n impl<'tcx> OnUnimplementedDirective {\n     fn parse(\n         tcx: TyCtxt<'tcx>,\n@@ -70,25 +59,9 @@ impl<'tcx> OnUnimplementedDirective {\n         } else {\n             let cond = item_iter\n                 .next()\n-                .ok_or_else(|| {\n-                    parse_error(\n-                        tcx,\n-                        span,\n-                        \"empty `on`-clause in `#[rustc_on_unimplemented]`\",\n-                        \"empty on-clause here\",\n-                        None,\n-                    )\n-                })?\n+                .ok_or_else(|| tcx.sess.emit_err(EmptyOnClauseInOnUnimplemented { span }))?\n                 .meta_item()\n-                .ok_or_else(|| {\n-                    parse_error(\n-                        tcx,\n-                        span,\n-                        \"invalid `on`-clause in `#[rustc_on_unimplemented]`\",\n-                        \"invalid on-clause here\",\n-                        None,\n-                    )\n-                })?;\n+                .ok_or_else(|| tcx.sess.emit_err(InvalidOnClauseInOnUnimplemented { span }))?;\n             attr::eval_condition(cond, &tcx.sess.parse_sess, Some(tcx.features()), &mut |cfg| {\n                 if let Some(value) = cfg.value && let Err(guar) = parse_value(value) {\n                     errored = Some(guar);\n@@ -150,13 +123,7 @@ impl<'tcx> OnUnimplementedDirective {\n             }\n \n             // nothing found\n-            parse_error(\n-                tcx,\n-                item.span(),\n-                \"this attribute must have a valid value\",\n-                \"expected value here\",\n-                Some(r#\"eg `#[rustc_on_unimplemented(message=\"foo\")]`\"#),\n-            );\n+            tcx.sess.emit_err(NoValueInOnUnimplemented { span: item.span() });\n         }\n \n         if let Some(reported) = errored {"}, {"sha": "7d299e30ae041290a3760f6295a0fff0da46c452", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 8, "deletions": 29, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9ba169a73acfa9c9875b76eec09e9a91cc6246df/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba169a73acfa9c9875b76eec09e9a91cc6246df/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=9ba169a73acfa9c9875b76eec09e9a91cc6246df", "patch": "@@ -12,6 +12,7 @@\n pub mod specialization_graph;\n use specialization_graph::GraphExt;\n \n+use crate::errors::NegativePositiveConflict;\n use crate::infer::{InferCtxt, InferOk, TyCtxtInferExt};\n use crate::traits::select::IntercrateAmbiguityCause;\n use crate::traits::{self, coherence, FutureCompatOverlapErrorKind, ObligationCause};\n@@ -327,35 +328,13 @@ fn report_negative_positive_conflict(\n     positive_impl_def_id: DefId,\n     sg: &mut specialization_graph::Graph,\n ) {\n-    let impl_span = tcx.def_span(local_impl_def_id);\n-\n-    let mut err = struct_span_err!(\n-        tcx.sess,\n-        impl_span,\n-        E0751,\n-        \"found both positive and negative implementation of trait `{}`{}:\",\n-        overlap.trait_desc,\n-        overlap.self_desc.clone().map_or_else(String::new, |ty| format!(\" for type `{}`\", ty))\n-    );\n-\n-    match tcx.span_of_impl(negative_impl_def_id) {\n-        Ok(span) => {\n-            err.span_label(span, \"negative implementation here\");\n-        }\n-        Err(cname) => {\n-            err.note(&format!(\"negative implementation in crate `{}`\", cname));\n-        }\n-    }\n-\n-    match tcx.span_of_impl(positive_impl_def_id) {\n-        Ok(span) => {\n-            err.span_label(span, \"positive implementation here\");\n-        }\n-        Err(cname) => {\n-            err.note(&format!(\"positive implementation in crate `{}`\", cname));\n-        }\n-    }\n-\n+    let mut err = tcx.sess.create_err(NegativePositiveConflict {\n+        impl_span: tcx.def_span(local_impl_def_id),\n+        trait_desc: &overlap.trait_desc,\n+        self_desc: &overlap.self_desc,\n+        negative_impl_span: tcx.span_of_impl(negative_impl_def_id),\n+        positive_impl_span: tcx.span_of_impl(positive_impl_def_id),\n+    });\n     sg.has_errored = Some(err.emit());\n }\n "}, {"sha": "b4db77700aabd2f8f033d6958a7ff40609e4528c", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ba169a73acfa9c9875b76eec09e9a91cc6246df/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba169a73acfa9c9875b76eec09e9a91cc6246df/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=9ba169a73acfa9c9875b76eec09e9a91cc6246df", "patch": "@@ -454,6 +454,12 @@ pub enum FILE_INFO_BY_HANDLE_CLASS {\n     MaximumFileInfoByHandlesClass,\n }\n \n+#[repr(C)]\n+pub struct FILE_ATTRIBUTE_TAG_INFO {\n+    pub FileAttributes: DWORD,\n+    pub ReparseTag: DWORD,\n+}\n+\n #[repr(C)]\n pub struct FILE_DISPOSITION_INFO {\n     pub DeleteFile: BOOLEAN,"}, {"sha": "c2ad592dfea73379ca8a433aab2179307a7f2ab0", "filename": "library/std/src/sys/windows/fs.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9ba169a73acfa9c9875b76eec09e9a91cc6246df/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba169a73acfa9c9875b76eec09e9a91cc6246df/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs?ref=9ba169a73acfa9c9875b76eec09e9a91cc6246df", "patch": "@@ -326,10 +326,15 @@ impl File {\n             cvt(c::GetFileInformationByHandle(self.handle.as_raw_handle(), &mut info))?;\n             let mut reparse_tag = 0;\n             if info.dwFileAttributes & c::FILE_ATTRIBUTE_REPARSE_POINT != 0 {\n-                let mut b =\n-                    Align8([MaybeUninit::<u8>::uninit(); c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE]);\n-                if let Ok((_, buf)) = self.reparse_point(&mut b) {\n-                    reparse_tag = (*buf).ReparseTag;\n+                let mut attr_tag: c::FILE_ATTRIBUTE_TAG_INFO = mem::zeroed();\n+                cvt(c::GetFileInformationByHandleEx(\n+                    self.handle.as_raw_handle(),\n+                    c::FileAttributeTagInfo,\n+                    ptr::addr_of_mut!(attr_tag).cast(),\n+                    mem::size_of::<c::FILE_ATTRIBUTE_TAG_INFO>().try_into().unwrap(),\n+                ))?;\n+                if attr_tag.FileAttributes & c::FILE_ATTRIBUTE_REPARSE_POINT != 0 {\n+                    reparse_tag = attr_tag.ReparseTag;\n                 }\n             }\n             Ok(FileAttr {\n@@ -390,10 +395,15 @@ impl File {\n             attr.file_size = info.AllocationSize as u64;\n             attr.number_of_links = Some(info.NumberOfLinks);\n             if attr.file_type().is_reparse_point() {\n-                let mut b =\n-                    Align8([MaybeUninit::<u8>::uninit(); c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE]);\n-                if let Ok((_, buf)) = self.reparse_point(&mut b) {\n-                    attr.reparse_tag = (*buf).ReparseTag;\n+                let mut attr_tag: c::FILE_ATTRIBUTE_TAG_INFO = mem::zeroed();\n+                cvt(c::GetFileInformationByHandleEx(\n+                    self.handle.as_raw_handle(),\n+                    c::FileAttributeTagInfo,\n+                    ptr::addr_of_mut!(attr_tag).cast(),\n+                    mem::size_of::<c::FILE_ATTRIBUTE_TAG_INFO>().try_into().unwrap(),\n+                ))?;\n+                if attr_tag.FileAttributes & c::FILE_ATTRIBUTE_REPARSE_POINT != 0 {\n+                    reparse_tag = attr_tag.ReparseTag;\n                 }\n             }\n             Ok(attr)"}, {"sha": "c13e83f6c86126c82563b80f224f6252bf6dfc2e", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ba169a73acfa9c9875b76eec09e9a91cc6246df/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba169a73acfa9c9875b76eec09e9a91cc6246df/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=9ba169a73acfa9c9875b76eec09e9a91cc6246df", "patch": "@@ -1281,7 +1281,9 @@ impl Step for Assemble {\n                 compiler: build_compiler,\n                 target: target_compiler.host,\n             });\n-            builder.copy(&lld_wrapper_exe, &gcc_ld_dir.join(exe(\"ld\", target_compiler.host)));\n+            for name in crate::LLD_FILE_NAMES {\n+                builder.copy(&lld_wrapper_exe, &gcc_ld_dir.join(exe(name, target_compiler.host)));\n+            }\n         }\n \n         if builder.config.rust_codegen_backends.contains(&INTERNER.intern_str(\"llvm\")) {"}, {"sha": "1a59b3958f1060844999fa0dac6ab6e7f30c3807", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9ba169a73acfa9c9875b76eec09e9a91cc6246df/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba169a73acfa9c9875b76eec09e9a91cc6246df/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=9ba169a73acfa9c9875b76eec09e9a91cc6246df", "patch": "@@ -423,8 +423,11 @@ impl Step for Rustc {\n                 let gcc_lld_src_dir = src_dir.join(\"gcc-ld\");\n                 let gcc_lld_dst_dir = dst_dir.join(\"gcc-ld\");\n                 t!(fs::create_dir(&gcc_lld_dst_dir));\n-                let exe_name = exe(\"ld\", compiler.host);\n-                builder.copy(&gcc_lld_src_dir.join(&exe_name), &gcc_lld_dst_dir.join(&exe_name));\n+                for name in crate::LLD_FILE_NAMES {\n+                    let exe_name = exe(name, compiler.host);\n+                    builder\n+                        .copy(&gcc_lld_src_dir.join(&exe_name), &gcc_lld_dst_dir.join(&exe_name));\n+                }\n             }\n \n             // Man pages"}, {"sha": "cc0cf12bd187a7fc48ed6c06bfa09a9af5e064b0", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9ba169a73acfa9c9875b76eec09e9a91cc6246df/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba169a73acfa9c9875b76eec09e9a91cc6246df/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=9ba169a73acfa9c9875b76eec09e9a91cc6246df", "patch": "@@ -187,6 +187,9 @@ const LLVM_TOOLS: &[&str] = &[\n     \"opt\",           // used to optimize LLVM bytecode\n ];\n \n+/// LLD file names for all flavors.\n+const LLD_FILE_NAMES: &[&str] = &[\"ld.lld\", \"ld64.lld\", \"lld-link\", \"wasm-ld\"];\n+\n pub const VERSION: usize = 2;\n \n /// Extra --check-cfg to add when building"}, {"sha": "ae0e3572a08c69e874131e6c1704762f76560b9a", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ba169a73acfa9c9875b76eec09e9a91cc6246df/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/9ba169a73acfa9c9875b76eec09e9a91cc6246df/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=9ba169a73acfa9c9875b76eec09e9a91cc6246df", "patch": "@@ -1241,12 +1241,6 @@ h3.variant {\n \tmargin-left: 24px;\n }\n \n-.toggle-label {\n-\tdisplay: inline-block;\n-\tmargin-left: 4px;\n-\tmargin-top: 3px;\n-}\n-\n :target > code, :target > .code-header {\n \topacity: 1;\n }"}, {"sha": "4f6dd645c2725758e108d557355523761f15dbdc", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ba169a73acfa9c9875b76eec09e9a91cc6246df/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/9ba169a73acfa9c9875b76eec09e9a91cc6246df/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=9ba169a73acfa9c9875b76eec09e9a91cc6246df", "patch": "@@ -242,7 +242,6 @@ a.test-arrow:hover {\n \tcolor: #c5c5c5;\n }\n \n-.toggle-label,\n .code-attribute {\n \tcolor: #999;\n }"}, {"sha": "a37bbac5306a47d34548b72d90be73a49ec25a4f", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ba169a73acfa9c9875b76eec09e9a91cc6246df/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/9ba169a73acfa9c9875b76eec09e9a91cc6246df/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=9ba169a73acfa9c9875b76eec09e9a91cc6246df", "patch": "@@ -197,7 +197,6 @@ a.test-arrow:hover{\n \tbackground-color: #4e8bca;\n }\n \n-.toggle-label,\n .code-attribute {\n \tcolor: #999;\n }"}, {"sha": "3d8e866fdc6188493878e9c0dd0f5c700e944d75", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ba169a73acfa9c9875b76eec09e9a91cc6246df/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/9ba169a73acfa9c9875b76eec09e9a91cc6246df/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=9ba169a73acfa9c9875b76eec09e9a91cc6246df", "patch": "@@ -182,7 +182,6 @@ a.test-arrow:hover{\n \tbackground-color: #4e8bca;\n }\n \n-.toggle-label,\n .code-attribute {\n \tcolor: #999;\n }"}, {"sha": "d39ae6ebf1da2c01191cb995083f5f2e7599543d", "filename": "src/test/ui/mir/issue-99866.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9ba169a73acfa9c9875b76eec09e9a91cc6246df/src%2Ftest%2Fui%2Fmir%2Fissue-99866.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba169a73acfa9c9875b76eec09e9a91cc6246df/src%2Ftest%2Fui%2Fmir%2Fissue-99866.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-99866.rs?ref=9ba169a73acfa9c9875b76eec09e9a91cc6246df", "patch": "@@ -0,0 +1,25 @@\n+// check-pass\n+pub trait Backend {\n+    type DescriptorSetLayout;\n+}\n+\n+pub struct Back;\n+\n+impl Backend for Back {\n+    type DescriptorSetLayout = u32;\n+}\n+\n+pub struct HalSetLayouts {\n+    vertex_layout: <Back as Backend>::DescriptorSetLayout,\n+}\n+\n+impl HalSetLayouts {\n+    pub fn iter<DSL>(self) -> DSL\n+    where\n+        Back: Backend<DescriptorSetLayout = DSL>,\n+    {\n+        self.vertex_layout\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "1795f3d7fe5bc5a3a0a9b908f333681274971dbb", "filename": "src/tools/lld-wrapper/src/main.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9ba169a73acfa9c9875b76eec09e9a91cc6246df/src%2Ftools%2Flld-wrapper%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba169a73acfa9c9875b76eec09e9a91cc6246df/src%2Ftools%2Flld-wrapper%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flld-wrapper%2Fsrc%2Fmain.rs?ref=9ba169a73acfa9c9875b76eec09e9a91cc6246df", "patch": "@@ -8,8 +8,8 @@\n //! make gcc/clang pass `-flavor <flavor>` as the first two arguments in the linker invocation\n //! and since Windows does not support symbolic links for files this wrapper is used in place of a\n //! symbolic link. It execs `../rust-lld -flavor <flavor>` by propagating the flavor argument\n-//! passed to the wrapper as the first two arguments. On Windows it spawns a `..\\rust-lld.exe`\n-//! child process.\n+//! obtained from the wrapper's name as the first two arguments.\n+//! On Windows it spawns a `..\\rust-lld.exe` child process.\n \n use std::fmt::Display;\n use std::path::{Path, PathBuf};\n@@ -53,29 +53,32 @@ fn get_rust_lld_path(current_exe_path: &Path) -> PathBuf {\n     rust_lld_path\n }\n \n+/// Extract LLD flavor name from the lld-wrapper executable name.\n+fn get_lld_flavor(current_exe_path: &Path) -> Result<&'static str, String> {\n+    let stem = current_exe_path.file_stem();\n+    Ok(match stem.and_then(|s| s.to_str()) {\n+        Some(\"ld.lld\") => \"gnu\",\n+        Some(\"ld64.lld\") => \"darwin\",\n+        Some(\"lld-link\") => \"link\",\n+        Some(\"wasm-ld\") => \"wasm\",\n+        _ => return Err(format!(\"{:?}\", stem)),\n+    })\n+}\n+\n /// Returns the command for invoking rust-lld with the correct flavor.\n-/// LLD only accepts the flavor argument at the first two arguments, so move it there.\n+/// LLD only accepts the flavor argument at the first two arguments, so pass it there.\n ///\n /// Exits on error.\n fn get_rust_lld_command(current_exe_path: &Path) -> process::Command {\n     let rust_lld_path = get_rust_lld_path(current_exe_path);\n     let mut command = process::Command::new(rust_lld_path);\n \n-    let mut flavor = None;\n-    let args = env::args_os()\n-        .skip(1)\n-        .filter(|arg| match arg.to_str().and_then(|s| s.strip_prefix(\"-rustc-lld-flavor=\")) {\n-            Some(suffix) => {\n-                flavor = Some(suffix.to_string());\n-                false\n-            }\n-            None => true,\n-        })\n-        .collect::<Vec<_>>();\n+    let flavor =\n+        get_lld_flavor(current_exe_path).unwrap_or_exit_with(\"executable has unexpected name\");\n \n     command.arg(\"-flavor\");\n-    command.arg(flavor.unwrap_or_exit_with(\"-rustc-lld-flavor=<flavor> is not passed\"));\n-    command.args(args);\n+    command.arg(flavor);\n+    command.args(env::args_os().skip(1));\n     command\n }\n "}, {"sha": "33b35d05415763f06d8af2d9f484e7536cd64d9c", "filename": "src/tools/replace-version-placeholder/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ba169a73acfa9c9875b76eec09e9a91cc6246df/src%2Ftools%2Freplace-version-placeholder%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba169a73acfa9c9875b76eec09e9a91cc6246df/src%2Ftools%2Freplace-version-placeholder%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Freplace-version-placeholder%2Fsrc%2Fmain.rs?ref=9ba169a73acfa9c9875b76eec09e9a91cc6246df", "patch": "@@ -14,7 +14,7 @@ fn main() {\n             walk::filter_dirs(path)\n                 // We exempt these as they require the placeholder\n                 // for their operation\n-                || path.ends_with(\"compiler/rustc_passes/src/lib_features.rs\")\n+                || path.ends_with(\"compiler/rustc_attr/src/builtin.rs\")\n                 || path.ends_with(\"src/tools/tidy/src/features/version.rs\")\n                 || path.ends_with(\"src/tools/replace-version-placeholder\")\n         },"}]}