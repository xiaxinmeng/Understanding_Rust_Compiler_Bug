{"sha": "919a1a40fe4ec1118eece46b1f4c03c311ab8cda", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxOWExYTQwZmU0ZWMxMTE4ZWVjZTQ2YjFmNGMwM2MzMTFhYjhjZGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-23T16:25:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-23T16:25:28Z"}, "message": "Auto merge of #6957 - camsteffen:eq-ty-kind, r=flip1995\n\nFactor out `SpanlessEq::eq_ty_kind`\n\nchangelog: none", "tree": {"sha": "9df6f0c8f46bee16ababa38b004cd3757f14db77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9df6f0c8f46bee16ababa38b004cd3757f14db77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/919a1a40fe4ec1118eece46b1f4c03c311ab8cda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/919a1a40fe4ec1118eece46b1f4c03c311ab8cda", "html_url": "https://github.com/rust-lang/rust/commit/919a1a40fe4ec1118eece46b1f4c03c311ab8cda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/919a1a40fe4ec1118eece46b1f4c03c311ab8cda/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b80903b7275199cb1489e4ca26224d3b93f9ac35", "url": "https://api.github.com/repos/rust-lang/rust/commits/b80903b7275199cb1489e4ca26224d3b93f9ac35", "html_url": "https://github.com/rust-lang/rust/commit/b80903b7275199cb1489e4ca26224d3b93f9ac35"}, {"sha": "9132dbdf310bbffbf5a8efd3b52f68189e3ee15e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9132dbdf310bbffbf5a8efd3b52f68189e3ee15e", "html_url": "https://github.com/rust-lang/rust/commit/9132dbdf310bbffbf5a8efd3b52f68189e3ee15e"}], "stats": {"total": 30, "additions": 10, "deletions": 20}, "files": [{"sha": "d77f9c03cae50da8ec0c6454b091492c158737dc", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/919a1a40fe4ec1118eece46b1f4c03c311ab8cda/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919a1a40fe4ec1118eece46b1f4c03c311ab8cda/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=919a1a40fe4ec1118eece46b1f4c03c311ab8cda", "patch": "@@ -62,13 +62,11 @@ mod zst_offset;\n use bind_instead_of_map::BindInsteadOfMap;\n use clippy_utils::diagnostics::{span_lint, span_lint_and_help};\n use clippy_utils::ty::{contains_ty, implements_trait, is_copy, is_type_diagnostic_item};\n-use clippy_utils::{\n-    contains_return, get_trait_def_id, in_macro, iter_input_pats, match_qpath, method_calls, paths, return_ty,\n-    SpanlessEq,\n-};\n+use clippy_utils::{contains_return, get_trait_def_id, in_macro, iter_input_pats, method_calls, paths, return_ty};\n use if_chain::if_chain;\n use rustc_hir as hir;\n-use rustc_hir::{TraitItem, TraitItemKind};\n+use rustc_hir::def::Res;\n+use rustc_hir::{PrimTy, QPath, TraitItem, TraitItemKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, TraitRef, Ty, TyS};\n@@ -1872,7 +1870,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                     for method_config in &TRAIT_METHODS {\n                         if name == method_config.method_name &&\n                             sig.decl.inputs.len() == method_config.param_count &&\n-                            method_config.output_type.matches(cx, &sig.decl.output) &&\n+                            method_config.output_type.matches(&sig.decl.output) &&\n                             method_config.self_kind.matches(cx, self_ty, first_arg_ty) &&\n                             fn_header_equals(method_config.fn_header, sig.header) &&\n                             method_config.lifetime_param_cond(&impl_item)\n@@ -2199,8 +2197,8 @@ enum OutType {\n }\n \n impl OutType {\n-    fn matches(self, cx: &LateContext<'_>, ty: &hir::FnRetTy<'_>) -> bool {\n-        let is_unit = |ty: &hir::Ty<'_>| SpanlessEq::new(cx).eq_ty_kind(&ty.kind, &hir::TyKind::Tup(&[]));\n+    fn matches(self, ty: &hir::FnRetTy<'_>) -> bool {\n+        let is_unit = |ty: &hir::Ty<'_>| matches!(ty.kind, hir::TyKind::Tup(&[]));\n         match (self, ty) {\n             (Self::Unit, &hir::FnRetTy::DefaultReturn(_)) => true,\n             (Self::Unit, &hir::FnRetTy::Return(ref ty)) if is_unit(ty) => true,\n@@ -2213,8 +2211,8 @@ impl OutType {\n }\n \n fn is_bool(ty: &hir::Ty<'_>) -> bool {\n-    if let hir::TyKind::Path(ref p) = ty.kind {\n-        match_qpath(p, &[\"bool\"])\n+    if let hir::TyKind::Path(QPath::Resolved(_, path)) = ty.kind {\n+        matches!(path.res, Res::PrimTy(PrimTy::Bool))\n     } else {\n         false\n     }"}, {"sha": "5cfeaee28cf3e3fefc106d64b6324921eab4b548", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/919a1a40fe4ec1118eece46b1f4c03c311ab8cda/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919a1a40fe4ec1118eece46b1f4c03c311ab8cda/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=919a1a40fe4ec1118eece46b1f4c03c311ab8cda", "patch": "@@ -80,10 +80,6 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n     pub fn eq_path_segments(&mut self, left: &[PathSegment<'_>], right: &[PathSegment<'_>]) -> bool {\n         self.inter_expr().eq_path_segments(left, right)\n     }\n-\n-    pub fn eq_ty_kind(&mut self, left: &TyKind<'_>, right: &TyKind<'_>) -> bool {\n-        self.inter_expr().eq_ty_kind(left, right)\n-    }\n }\n \n struct HirEqInterExpr<'a, 'b, 'tcx> {\n@@ -378,13 +374,9 @@ impl HirEqInterExpr<'_, '_, '_> {\n         left.ident.name == right.ident.name && both(&left.args, &right.args, |l, r| self.eq_path_parameters(l, r))\n     }\n \n-    fn eq_ty(&mut self, left: &Ty<'_>, right: &Ty<'_>) -> bool {\n-        self.eq_ty_kind(&left.kind, &right.kind)\n-    }\n-\n     #[allow(clippy::similar_names)]\n-    fn eq_ty_kind(&mut self, left: &TyKind<'_>, right: &TyKind<'_>) -> bool {\n-        match (left, right) {\n+    fn eq_ty(&mut self, left: &Ty<'_>, right: &Ty<'_>) -> bool {\n+        match (&left.kind, &right.kind) {\n             (&TyKind::Slice(ref l_vec), &TyKind::Slice(ref r_vec)) => self.eq_ty(l_vec, r_vec),\n             (&TyKind::Array(ref lt, ref ll_id), &TyKind::Array(ref rt, ref rl_id)) => {\n                 let cx = self.inner.cx;"}]}