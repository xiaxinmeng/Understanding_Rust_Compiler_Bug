{"sha": "d3b51926f81cd15740d5a06172a2697bee1d6dfc", "node_id": "C_kwDOAAsO6NoAKGQzYjUxOTI2ZjgxY2QxNTc0MGQ1YTA2MTcyYTI2OTdiZWUxZDZkZmM", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-10-28T19:06:29Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-10-28T19:06:29Z"}, "message": "Simplify implementation of various pointer methods", "tree": {"sha": "eb4cb2d1951dd7926613f34849980d5ea96d4ffa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb4cb2d1951dd7926613f34849980d5ea96d4ffa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3b51926f81cd15740d5a06172a2697bee1d6dfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3b51926f81cd15740d5a06172a2697bee1d6dfc", "html_url": "https://github.com/rust-lang/rust/commit/d3b51926f81cd15740d5a06172a2697bee1d6dfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3b51926f81cd15740d5a06172a2697bee1d6dfc/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c54745784b03e614a7a152ef010c05207156c2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c54745784b03e614a7a152ef010c05207156c2a", "html_url": "https://github.com/rust-lang/rust/commit/6c54745784b03e614a7a152ef010c05207156c2a"}], "stats": {"total": 40, "additions": 15, "deletions": 25}, "files": [{"sha": "a68d8b55e30943812e809dfb822cb895be336c71", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3b51926f81cd15740d5a06172a2697bee1d6dfc/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3b51926f81cd15740d5a06172a2697bee1d6dfc/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=d3b51926f81cd15740d5a06172a2697bee1d6dfc", "patch": "@@ -154,6 +154,7 @@\n #![feature(maybe_uninit_uninit_array)]\n #![feature(ptr_alignment_type)]\n #![feature(ptr_metadata)]\n+#![feature(set_ptr_value)]\n #![feature(slice_ptr_get)]\n #![feature(slice_split_at_unchecked)]\n #![feature(str_internals)]"}, {"sha": "85e2b425c404646e67187089d8a539452bf0d355", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d3b51926f81cd15740d5a06172a2697bee1d6dfc/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3b51926f81cd15740d5a06172a2697bee1d6dfc/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=d3b51926f81cd15740d5a06172a2697bee1d6dfc", "patch": "@@ -473,8 +473,7 @@ impl<T: ?Sized> *const T {\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn byte_offset(self, count: isize) -> Self {\n         // SAFETY: the caller must uphold the safety contract for `offset`.\n-        let this = unsafe { self.cast::<u8>().offset(count).cast::<()>() };\n-        from_raw_parts::<T>(this, metadata(self))\n+        unsafe { self.cast::<u8>().offset(count).with_metadata_of(self) }\n     }\n \n     /// Calculates the offset from a pointer using wrapping arithmetic.\n@@ -554,7 +553,7 @@ impl<T: ?Sized> *const T {\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n     pub const fn wrapping_byte_offset(self, count: isize) -> Self {\n-        from_raw_parts::<T>(self.cast::<u8>().wrapping_offset(count).cast::<()>(), metadata(self))\n+        self.cast::<u8>().wrapping_offset(count).with_metadata_of(self)\n     }\n \n     /// Masks out bits of the pointer according to a mask.\n@@ -567,8 +566,7 @@ impl<T: ?Sized> *const T {\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline(always)]\n     pub fn mask(self, mask: usize) -> *const T {\n-        let this = intrinsics::ptr_mask(self.cast::<()>(), mask);\n-        from_raw_parts::<T>(this, metadata(self))\n+        intrinsics::ptr_mask(self.cast::<()>(), mask).with_metadata_of(self)\n     }\n \n     /// Calculates the distance between two pointers. The returned value is in\n@@ -906,8 +904,7 @@ impl<T: ?Sized> *const T {\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn byte_add(self, count: usize) -> Self {\n         // SAFETY: the caller must uphold the safety contract for `add`.\n-        let this = unsafe { self.cast::<u8>().add(count).cast::<()>() };\n-        from_raw_parts::<T>(this, metadata(self))\n+        unsafe { self.cast::<u8>().add(count).with_metadata_of(self) }\n     }\n \n     /// Calculates the offset from a pointer (convenience for\n@@ -993,8 +990,7 @@ impl<T: ?Sized> *const T {\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn byte_sub(self, count: usize) -> Self {\n         // SAFETY: the caller must uphold the safety contract for `sub`.\n-        let this = unsafe { self.cast::<u8>().sub(count).cast::<()>() };\n-        from_raw_parts::<T>(this, metadata(self))\n+        unsafe { self.cast::<u8>().sub(count).with_metadata_of(self) }\n     }\n \n     /// Calculates the offset from a pointer using wrapping arithmetic.\n@@ -1074,7 +1070,7 @@ impl<T: ?Sized> *const T {\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n     pub const fn wrapping_byte_add(self, count: usize) -> Self {\n-        from_raw_parts::<T>(self.cast::<u8>().wrapping_add(count).cast::<()>(), metadata(self))\n+        self.cast::<u8>().wrapping_add(count).with_metadata_of(self)\n     }\n \n     /// Calculates the offset from a pointer using wrapping arithmetic.\n@@ -1154,7 +1150,7 @@ impl<T: ?Sized> *const T {\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n     pub const fn wrapping_byte_sub(self, count: usize) -> Self {\n-        from_raw_parts::<T>(self.cast::<u8>().wrapping_sub(count).cast::<()>(), metadata(self))\n+        self.cast::<u8>().wrapping_sub(count).with_metadata_of(self)\n     }\n \n     /// Reads the value from `self` without moving it. This leaves the"}, {"sha": "cff41e3654280103e9c2b2762dd2ffcac55ebb2c", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d3b51926f81cd15740d5a06172a2697bee1d6dfc/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3b51926f81cd15740d5a06172a2697bee1d6dfc/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=d3b51926f81cd15740d5a06172a2697bee1d6dfc", "patch": "@@ -487,8 +487,7 @@ impl<T: ?Sized> *mut T {\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn byte_offset(self, count: isize) -> Self {\n         // SAFETY: the caller must uphold the safety contract for `offset`.\n-        let this = unsafe { self.cast::<u8>().offset(count).cast::<()>() };\n-        from_raw_parts_mut::<T>(this, metadata(self))\n+        unsafe { self.cast::<u8>().offset(count).with_metadata_of(self) }\n     }\n \n     /// Calculates the offset from a pointer using wrapping arithmetic.\n@@ -567,10 +566,7 @@ impl<T: ?Sized> *mut T {\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n     pub const fn wrapping_byte_offset(self, count: isize) -> Self {\n-        from_raw_parts_mut::<T>(\n-            self.cast::<u8>().wrapping_offset(count).cast::<()>(),\n-            metadata(self),\n-        )\n+        self.cast::<u8>().wrapping_offset(count).with_metadata_of(self)\n     }\n \n     /// Masks out bits of the pointer according to a mask.\n@@ -583,8 +579,7 @@ impl<T: ?Sized> *mut T {\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline(always)]\n     pub fn mask(self, mask: usize) -> *mut T {\n-        let this = intrinsics::ptr_mask(self.cast::<()>(), mask) as *mut ();\n-        from_raw_parts_mut::<T>(this, metadata(self))\n+        intrinsics::ptr_mask(self.cast::<()>(), mask).cast_mut().with_metadata_of(self)\n     }\n \n     /// Returns `None` if the pointer is null, or else returns a unique reference to\n@@ -1011,8 +1006,7 @@ impl<T: ?Sized> *mut T {\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn byte_add(self, count: usize) -> Self {\n         // SAFETY: the caller must uphold the safety contract for `add`.\n-        let this = unsafe { self.cast::<u8>().add(count).cast::<()>() };\n-        from_raw_parts_mut::<T>(this, metadata(self))\n+        unsafe { self.cast::<u8>().add(count).with_metadata_of(self) }\n     }\n \n     /// Calculates the offset from a pointer (convenience for\n@@ -1098,8 +1092,7 @@ impl<T: ?Sized> *mut T {\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn byte_sub(self, count: usize) -> Self {\n         // SAFETY: the caller must uphold the safety contract for `sub`.\n-        let this = unsafe { self.cast::<u8>().sub(count).cast::<()>() };\n-        from_raw_parts_mut::<T>(this, metadata(self))\n+        unsafe { self.cast::<u8>().sub(count).with_metadata_of(self) }\n     }\n \n     /// Calculates the offset from a pointer using wrapping arithmetic.\n@@ -1179,7 +1172,7 @@ impl<T: ?Sized> *mut T {\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n     pub const fn wrapping_byte_add(self, count: usize) -> Self {\n-        from_raw_parts_mut::<T>(self.cast::<u8>().wrapping_add(count).cast::<()>(), metadata(self))\n+        self.cast::<u8>().wrapping_add(count).with_metadata_of(self)\n     }\n \n     /// Calculates the offset from a pointer using wrapping arithmetic.\n@@ -1259,7 +1252,7 @@ impl<T: ?Sized> *mut T {\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n     pub const fn wrapping_byte_sub(self, count: usize) -> Self {\n-        from_raw_parts_mut::<T>(self.cast::<u8>().wrapping_sub(count).cast::<()>(), metadata(self))\n+        self.cast::<u8>().wrapping_sub(count).with_metadata_of(self)\n     }\n \n     /// Reads the value from `self` without moving it. This leaves the"}]}