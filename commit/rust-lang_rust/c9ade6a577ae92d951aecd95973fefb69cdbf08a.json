{"sha": "c9ade6a577ae92d951aecd95973fefb69cdbf08a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5YWRlNmE1NzdhZTkyZDk1MWFlY2Q5NTk3M2ZlZmI2OWNkYmYwOGE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-21T08:57:29Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-21T08:57:29Z"}, "message": "more pin projections tweaking", "tree": {"sha": "fbf35e46d9dc57cbfde41b3f239cf326fe61cced", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbf35e46d9dc57cbfde41b3f239cf326fe61cced"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9ade6a577ae92d951aecd95973fefb69cdbf08a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9ade6a577ae92d951aecd95973fefb69cdbf08a", "html_url": "https://github.com/rust-lang/rust/commit/c9ade6a577ae92d951aecd95973fefb69cdbf08a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9ade6a577ae92d951aecd95973fefb69cdbf08a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b556f16c9e6779610a8f64fe06f9947bc2cdbe8", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b556f16c9e6779610a8f64fe06f9947bc2cdbe8", "html_url": "https://github.com/rust-lang/rust/commit/1b556f16c9e6779610a8f64fe06f9947bc2cdbe8"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "4245c9dcd99a8921399fd767619f32d58ff249c1", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c9ade6a577ae92d951aecd95973fefb69cdbf08a/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9ade6a577ae92d951aecd95973fefb69cdbf08a/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=c9ade6a577ae92d951aecd95973fefb69cdbf08a", "patch": "@@ -177,23 +177,30 @@\n //! In a similar vein, when can a generic wrapper type (such as `Vec`, `Box`, or `RefCell`)\n //! have an operation with type `fn(Pin<&[mut] Wrapper<T>>) -> Pin<&[mut] T>`?\n //!\n-//! This question is closely related to the question of whether pinning is \"structural\":\n-//! when you have pinned a wrapper type, have you pinned its contents? Deciding this\n-//! is entirely up to the author of any given type. For many types, both answers are reasonable\n-//! (e.g., there could be a version of `Vec` with structural pinning and another\n-//! version where the contents remain movable even when the `Vec` is pinned).\n-//! If the type should have pinning projections, pinning must be structural.\n+//! This question is closely related to the question of whether pinning is \"structural\".\n+//! Structural pinning means that when you have pinned a wrapper type, the contents are\n+//! also pinned. Structural pinning thus explains why pinning projections are correct. This means\n+//! that if the type should have pinning projections for some fields, pinning must be structural\n+//! for those fields.\n+//!\n+//! In general, deciding for which fields pinning is structural (and thus for which fields\n+//! pinning projections could be offered) is entirely up to the author of any given type.\n+//! For many types, both answers are reasonable. For example, there could be a version\n+//! of `Vec` with structural pinning and `get_pin`/`get_pin_mut` projections to access\n+//! the `Vec` elements, and another version where the contents remain movable even when\n+//! the `Vec` is pinned.\n+//!\n //! However, structural pinning comes with a few extra requirements:\n //!\n-//! 1.  The wrapper must only be [`Unpin`] if all the fields one can project to are\n+//! 1.  The wrapper must only be [`Unpin`] if all the structural fields are\n //!     `Unpin`. This is the default, but `Unpin` is a safe trait, so as the author of\n //!     the wrapper it is your responsibility *not* to add something like\n //!     `impl<T> Unpin for Wrapper<T>`. (Notice that adding a projection operation\n //!     requires unsafe code, so the fact that `Unpin` is a safe trait  does not break\n //!     the principle that you only have to worry about any of this if you use `unsafe`.)\n-//! 2.  The destructor of the wrapper must not move out of its argument. This is the exact\n-//!     point that was raised in the [previous section][drop-impl]: `drop` takes `&mut self`,\n-//!      but the wrapper (and hence its fields) might have been pinned before.\n+//! 2.  The destructor of the wrapper must not move structural fields out of its argument. This\n+//!     is the exact point that was raised in the [previous section][drop-impl]: `drop` takes\n+//!     `&mut self`, but the wrapper (and hence its fields) might have been pinned before.\n //!     You have to guarantee that you do not move a field inside your `Drop` implementation.\n //!     In particular, as explained previously, this means that your wrapper type must *not*\n //!     be `#[repr(packed)]`."}]}