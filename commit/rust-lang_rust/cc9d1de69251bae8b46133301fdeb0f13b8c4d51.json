{"sha": "cc9d1de69251bae8b46133301fdeb0f13b8c4d51", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjOWQxZGU2OTI1MWJhZThiNDYxMzMzMDFmZGViMGYxM2I4YzRkNTE=", "commit": {"author": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-05-19T06:32:42Z"}, "committer": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-05-20T05:38:10Z"}, "message": "Add error explanation for E0202.", "tree": {"sha": "677847009b0406f2bb65bcf9c305ba9f8f38c287", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/677847009b0406f2bb65bcf9c305ba9f8f38c287"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc9d1de69251bae8b46133301fdeb0f13b8c4d51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc9d1de69251bae8b46133301fdeb0f13b8c4d51", "html_url": "https://github.com/rust-lang/rust/commit/cc9d1de69251bae8b46133301fdeb0f13b8c4d51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc9d1de69251bae8b46133301fdeb0f13b8c4d51/comments", "author": null, "committer": null, "parents": [{"sha": "50b802ade0d9aecf3a781c98c8f051b3714db3ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/50b802ade0d9aecf3a781c98c8f051b3714db3ea", "html_url": "https://github.com/rust-lang/rust/commit/50b802ade0d9aecf3a781c98c8f051b3714db3ea"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "a20a40ea7c059eae798bbfcef5b5e4ed389dcfd4", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc9d1de69251bae8b46133301fdeb0f13b8c4d51/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9d1de69251bae8b46133301fdeb0f13b8c4d51/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=cc9d1de69251bae8b46133301fdeb0f13b8c4d51", "patch": "@@ -877,7 +877,7 @@ fn convert_item(ccx: &CrateCtxt, it: &ast::Item) {\n                 if let ast::TypeImplItem(ref ty) = impl_item.node {\n                     if opt_trait_ref.is_none() {\n                         span_err!(tcx.sess, impl_item.span, E0202,\n-                                  \"associated items are not allowed in inherent impls\");\n+                                  \"associated types are not allowed in inherent impls\");\n                     }\n \n                     as_refsociated_type(ccx, ImplContainer(local_def(it.id)),"}, {"sha": "64cbbb0032ccd9c0c75cfa425381b480e74c7b74", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cc9d1de69251bae8b46133301fdeb0f13b8c4d51/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9d1de69251bae8b46133301fdeb0f13b8c4d51/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=cc9d1de69251bae8b46133301fdeb0f13b8c4d51", "patch": "@@ -573,6 +573,14 @@ impl Foo {\n ```\n \"##,\n \n+E0202: r##\"\n+Inherent associated types were part of [RFC 195] but are not yet implemented.\n+See [the tracking issue][iss8995] for the status of this implementation.\n+\n+[RFC 195]: https://github.com/rust-lang/rfcs/pull/195\n+[iss8995]: https://github.com/rust-lang/rust/issues/8995\n+\"##,\n+\n E0204: r##\"\n An attempt to implement the `Copy` trait for a struct failed because one of the\n fields does not implement `Copy`. To fix this, you must implement `Copy` for the\n@@ -881,7 +889,6 @@ register_diagnostics! {\n     E0194,\n     E0195, // lifetime parameters or bounds on method do not match the trait declaration\n     E0196, // cannot determine a type for this closure\n-    E0202, // associated items are not allowed in inherent impls\n     E0203, // type parameter has more than one relaxed default bound,\n            // and only one is supported\n     E0207, // type parameter is not constrained by the impl trait, self type, or predicate"}, {"sha": "7eab831258f2ecfdbdbc61d7670b3373d2cd83b7", "filename": "src/test/compile-fail/assoc-inherent.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc9d1de69251bae8b46133301fdeb0f13b8c4d51/src%2Ftest%2Fcompile-fail%2Fassoc-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9d1de69251bae8b46133301fdeb0f13b8c4d51/src%2Ftest%2Fcompile-fail%2Fassoc-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassoc-inherent.rs?ref=cc9d1de69251bae8b46133301fdeb0f13b8c4d51", "patch": "@@ -13,7 +13,7 @@\n struct Foo;\n \n impl Foo {\n-    type Bar = isize; //~ERROR associated items are not allowed in inherent impls\n+    type Bar = isize; //~ERROR associated types are not allowed in inherent impls\n }\n \n fn main() {}"}]}