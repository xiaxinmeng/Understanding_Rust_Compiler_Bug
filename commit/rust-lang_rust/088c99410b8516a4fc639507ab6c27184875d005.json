{"sha": "088c99410b8516a4fc639507ab6c27184875d005", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4OGM5OTQxMGI4NTE2YTRmYzYzOTUwN2FiNmMyNzE4NDg3NWQwMDU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-14T20:00:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-14T20:00:11Z"}, "message": "Rollup merge of #60443 - RalfJung:as_ptr, r=SimonSapin\n\nas_ptr returns a read-only pointer\n\nAdd comments to `as_ptr` methods to warn that these are read-only pointers, and writing to them is UB.\n\n[It was pointed out](https://internals.rust-lang.org/t/as-ptr-vs-as-mut-ptr/9940) that `CStr` does not even have an `as_mut_ptr`. I originally was going to add one, but there is no method at all that would mutate a `CStr`. Was that a deliberate choice or should I add an `as_mut_ptr` (similar to [what I did for `str`](https://github.com/rust-lang/rust/pull/58200))?", "tree": {"sha": "5a1504b709a8d88764f0601b9c4b4b198ee800d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a1504b709a8d88764f0601b9c4b4b198ee800d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/088c99410b8516a4fc639507ab6c27184875d005", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc2x5LCRBK7hj4Ov3rIwAAdHIIAAwGB8YM+9i+uqPREBZP6kls\nIC3sWnDe113tNnc8AOGeMsQ3JriWPrKJlfVM1G5OJugnyhcmb+RqjwEmQzEiW7OX\nTzCwLYeUW745UOSlIMmJEtDN/erE2ds2ZmkNRfWyojqqqB9Vv6ebZsayGJ93NbC8\nmd853Uc2/dn9XLR8HHdL9pCY9Vz6q0ccNMn9mj2pskeHvIvoJQGRatVmhpZK9+dS\n3upVCElbrGloJox0MQScr4CWGOU9PE+PaqRRIeui9rQDxeuuCA3M9GH1inm1p53I\nIX7G4izQNqhh3psP+Y3qUF2ZOgKUakJFcYOKCXgluhvrmidcVlUB/MEYcnL6mdw=\n=FZT3\n-----END PGP SIGNATURE-----\n", "payload": "tree 5a1504b709a8d88764f0601b9c4b4b198ee800d3\nparent bab03cecfeadcbc79ee2aead61c4de973e5649a0\nparent 30cf0e4251533e67603c755acee5b0bd56197fce\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1557864011 +0200\ncommitter GitHub <noreply@github.com> 1557864011 +0200\n\nRollup merge of #60443 - RalfJung:as_ptr, r=SimonSapin\n\nas_ptr returns a read-only pointer\n\nAdd comments to `as_ptr` methods to warn that these are read-only pointers, and writing to them is UB.\n\n[It was pointed out](https://internals.rust-lang.org/t/as-ptr-vs-as-mut-ptr/9940) that `CStr` does not even have an `as_mut_ptr`. I originally was going to add one, but there is no method at all that would mutate a `CStr`. Was that a deliberate choice or should I add an `as_mut_ptr` (similar to [what I did for `str`](https://github.com/rust-lang/rust/pull/58200))?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/088c99410b8516a4fc639507ab6c27184875d005", "html_url": "https://github.com/rust-lang/rust/commit/088c99410b8516a4fc639507ab6c27184875d005", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/088c99410b8516a4fc639507ab6c27184875d005/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bab03cecfeadcbc79ee2aead61c4de973e5649a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/bab03cecfeadcbc79ee2aead61c4de973e5649a0", "html_url": "https://github.com/rust-lang/rust/commit/bab03cecfeadcbc79ee2aead61c4de973e5649a0"}, {"sha": "30cf0e4251533e67603c755acee5b0bd56197fce", "url": "https://api.github.com/repos/rust-lang/rust/commits/30cf0e4251533e67603c755acee5b0bd56197fce", "html_url": "https://github.com/rust-lang/rust/commit/30cf0e4251533e67603c755acee5b0bd56197fce"}], "stats": {"total": 19, "additions": 17, "deletions": 2}, "files": [{"sha": "d06d107d32a41cabbe8a3fca7e35bf6ed950d277", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/088c99410b8516a4fc639507ab6c27184875d005/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088c99410b8516a4fc639507ab6c27184875d005/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=088c99410b8516a4fc639507ab6c27184875d005", "patch": "@@ -359,6 +359,10 @@ impl<T> [T] {\n     /// The caller must ensure that the slice outlives the pointer this\n     /// function returns, or else it will end up pointing to garbage.\n     ///\n+    /// The caller must also ensure that the memory the pointer (non-transitively) points to\n+    /// is never written to (except inside an `UnsafeCell`) using this pointer or any pointer\n+    /// derived from it. If you need to mutate the contents of the slice, use [`as_mut_ptr`].\n+    ///\n     /// Modifying the container referenced by this slice may cause its buffer\n     /// to be reallocated, which would also make any pointers to it invalid.\n     ///\n@@ -374,6 +378,8 @@ impl<T> [T] {\n     ///     }\n     /// }\n     /// ```\n+    ///\n+    /// [`as_mut_ptr`]: #method.as_mut_ptr\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub const fn as_ptr(&self) -> *const T {"}, {"sha": "0e8a2da3c110d70a413a0a8b9ae76909116a982a", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/088c99410b8516a4fc639507ab6c27184875d005/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088c99410b8516a4fc639507ab6c27184875d005/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=088c99410b8516a4fc639507ab6c27184875d005", "patch": "@@ -2198,7 +2198,11 @@ impl str {\n     /// [`u8`]. This pointer will be pointing to the first byte of the string\n     /// slice.\n     ///\n+    /// The caller must ensure that the returned pointer is never written to.\n+    /// If you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n+    ///\n     /// [`u8`]: primitive.u8.html\n+    /// [`as_mut_ptr`]: #method.as_mut_ptr\n     ///\n     /// # Examples\n     ///"}, {"sha": "5c6c43017cf6402be3528a88c17dde88ad3fb055", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/088c99410b8516a4fc639507ab6c27184875d005/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088c99410b8516a4fc639507ab6c27184875d005/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=088c99410b8516a4fc639507ab6c27184875d005", "patch": "@@ -43,7 +43,9 @@ use crate::sys;\n /// `CString` implements a [`as_ptr`] method through the [`Deref`]\n /// trait. This method will give you a `*const c_char` which you can\n /// feed directly to extern functions that expect a nul-terminated\n-/// string, like C's `strdup()`.\n+/// string, like C's `strdup()`. Notice that [`as_ptr`] returns a\n+/// read-only pointer; if the C code writes to it, that causes\n+/// undefined behavior.\n ///\n /// # Extracting a slice of the whole C string\n ///\n@@ -61,7 +63,7 @@ use crate::sys;\n ///\n /// Once you have the kind of slice you need (with or without a nul\n /// terminator), you can call the slice's own\n-/// [`as_ptr`][slice.as_ptr] method to get a raw pointer to pass to\n+/// [`as_ptr`][slice.as_ptr] method to get a read-only raw pointer to pass to\n /// extern functions. See the documentation for that function for a\n /// discussion on ensuring the lifetime of the raw pointer.\n ///\n@@ -1043,6 +1045,9 @@ impl CStr {\n     ///\n     /// **WARNING**\n     ///\n+    /// The returned pointer is read-only; writing to it (including passing it\n+    /// to C code that writes to it) causes undefined behavior.\n+    ///\n     /// It is your responsibility to make sure that the underlying memory is not\n     /// freed too early. For example, the following code will cause undefined\n     /// behavior when `ptr` is used inside the `unsafe` block:"}]}