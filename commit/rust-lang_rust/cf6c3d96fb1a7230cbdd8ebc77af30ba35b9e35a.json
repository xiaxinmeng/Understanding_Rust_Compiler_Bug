{"sha": "cf6c3d96fb1a7230cbdd8ebc77af30ba35b9e35a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmNmMzZDk2ZmIxYTcyMzBjYmRkOGViYzc3YWYzMGJhMzViOWUzNWE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-06T23:37:34Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-06T23:38:23Z"}, "message": "librustc: Attempt to put out burning tree by fixing translation of unary negation in boolean constants. rs=burningtree", "tree": {"sha": "ac14bf8935d5360603c3aff940962d830224c38c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac14bf8935d5360603c3aff940962d830224c38c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf6c3d96fb1a7230cbdd8ebc77af30ba35b9e35a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf6c3d96fb1a7230cbdd8ebc77af30ba35b9e35a", "html_url": "https://github.com/rust-lang/rust/commit/cf6c3d96fb1a7230cbdd8ebc77af30ba35b9e35a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf6c3d96fb1a7230cbdd8ebc77af30ba35b9e35a/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b34f871ddac7bc84366b25c89d0a69926cb069e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b34f871ddac7bc84366b25c89d0a69926cb069e0", "html_url": "https://github.com/rust-lang/rust/commit/b34f871ddac7bc84366b25c89d0a69926cb069e0"}], "stats": {"total": 46, "additions": 31, "deletions": 15}, "files": [{"sha": "2e3967021c1d3398bf69484fe5efed26b1469a82", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/cf6c3d96fb1a7230cbdd8ebc77af30ba35b9e35a/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf6c3d96fb1a7230cbdd8ebc77af30ba35b9e35a/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=cf6c3d96fb1a7230cbdd8ebc77af30ba35b9e35a", "patch": "@@ -445,14 +445,19 @@ pub extern mod llvm {\n                                            Count: c_uint,\n                                            Packed: Bool) -> ValueRef;\n \n-    pub unsafe fn LLVMConstString(Str: *c_char, Length: c_uint,\n-                       DontNullTerminate: Bool) -> ValueRef;\n-    pub unsafe fn LLVMConstArray(ElementTy: TypeRef, ConstantVals: *ValueRef,\n-                      Length: c_uint) -> ValueRef;\n+    pub unsafe fn LLVMConstString(Str: *c_char,\n+                                  Length: c_uint,\n+                                  DontNullTerminate: Bool)\n+                               -> ValueRef;\n+    pub unsafe fn LLVMConstArray(ElementTy: TypeRef,\n+                                 ConstantVals: *ValueRef,\n+                                 Length: c_uint)\n+                              -> ValueRef;\n     pub unsafe fn LLVMConstStruct(ConstantVals: *ValueRef,\n-                       Count: c_uint, Packed: Bool) -> ValueRef;\n+                                  Count: c_uint,\n+                                  Packed: Bool) -> ValueRef;\n     pub unsafe fn LLVMConstVector(ScalarConstantVals: *ValueRef,\n-                       Size: c_uint) -> ValueRef;\n+                                  Size: c_uint) -> ValueRef;\n \n     /* Constant expressions */\n     pub unsafe fn LLVMAlignOf(Ty: TypeRef) -> ValueRef;\n@@ -463,8 +468,8 @@ pub extern mod llvm {\n     pub unsafe fn LLVMConstFNeg(ConstantVal: ValueRef) -> ValueRef;\n     pub unsafe fn LLVMConstNot(ConstantVal: ValueRef) -> ValueRef;\n     pub unsafe fn LLVMConstAdd(LHSConstant: ValueRef,\n-                           RHSConstant: ValueRef)\n-                        -> ValueRef;\n+                               RHSConstant: ValueRef)\n+                            -> ValueRef;\n     pub unsafe fn LLVMConstNSWAdd(LHSConstant: ValueRef,\n                               RHSConstant: ValueRef)\n                            -> ValueRef;\n@@ -475,14 +480,14 @@ pub extern mod llvm {\n                             RHSConstant: ValueRef)\n                          -> ValueRef;\n     pub unsafe fn LLVMConstSub(LHSConstant: ValueRef,\n-                           RHSConstant: ValueRef)\n-                        -> ValueRef;\n+                               RHSConstant: ValueRef)\n+                            -> ValueRef;\n     pub unsafe fn LLVMConstNSWSub(LHSConstant: ValueRef,\n-                              RHSConstant: ValueRef)\n-                           -> ValueRef;\n+                                  RHSConstant: ValueRef)\n+                               -> ValueRef;\n     pub unsafe fn LLVMConstNUWSub(LHSConstant: ValueRef,\n-                              RHSConstant: ValueRef)\n-                           -> ValueRef;\n+                                  RHSConstant: ValueRef)\n+                               -> ValueRef;\n     pub unsafe fn LLVMConstFSub(LHSConstant: ValueRef,\n                                 RHSConstant: ValueRef)\n                              -> ValueRef;"}, {"sha": "34f1f1f2314fb8b8ce3d306e6c848d78d718306e", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cf6c3d96fb1a7230cbdd8ebc77af30ba35b9e35a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf6c3d96fb1a7230cbdd8ebc77af30ba35b9e35a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=cf6c3d96fb1a7230cbdd8ebc77af30ba35b9e35a", "patch": "@@ -204,7 +204,18 @@ pub fn const_expr(cx: @crate_ctxt, e: @ast::expr) -> ValueRef {\n               ast::box(_)  |\n               ast::uniq(_) |\n               ast::deref  => const_deref(cx, te),\n-              ast::not    => llvm::LLVMConstNot(te),\n+              ast::not    => {\n+                match ty::get(ty).sty {\n+                    ty::ty_bool => {\n+                        // Somewhat questionable, but I believe this is\n+                        // correct.\n+                        let te = llvm::LLVMConstTrunc(te, T_i1());\n+                        let te = llvm::LLVMConstNot(te);\n+                        llvm::LLVMConstZExt(te, T_bool())\n+                    }\n+                    _ => llvm::LLVMConstNot(te),\n+                }\n+              }\n               ast::neg    => {\n                 if is_float { llvm::LLVMConstFNeg(te) }\n                 else        { llvm::LLVMConstNeg(te) }"}]}