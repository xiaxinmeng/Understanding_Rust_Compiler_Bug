{"sha": "f59f41e04c044f322285f80d17916bd207d8ed04", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1OWY0MWUwNGMwNDRmMzIyMjg1ZjgwZDE3OTE2YmQyMDdkOGVkMDQ=", "commit": {"author": {"name": "Geoffrey Thomas", "email": "geofft@ldpreload.com", "date": "2015-05-13T00:14:26Z"}, "committer": {"name": "Geoffrey Thomas", "email": "geofft@ldpreload.com", "date": "2015-05-13T00:21:21Z"}, "message": "trpl/match: Add an example for matching on enums", "tree": {"sha": "41c6bce84e9fe9e205ede11b9b4b51bbc3fb6e9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41c6bce84e9fe9e205ede11b9b4b51bbc3fb6e9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f59f41e04c044f322285f80d17916bd207d8ed04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f59f41e04c044f322285f80d17916bd207d8ed04", "html_url": "https://github.com/rust-lang/rust/commit/f59f41e04c044f322285f80d17916bd207d8ed04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f59f41e04c044f322285f80d17916bd207d8ed04/comments", "author": {"login": "geofft", "id": 74644, "node_id": "MDQ6VXNlcjc0NjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/74644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geofft", "html_url": "https://github.com/geofft", "followers_url": "https://api.github.com/users/geofft/followers", "following_url": "https://api.github.com/users/geofft/following{/other_user}", "gists_url": "https://api.github.com/users/geofft/gists{/gist_id}", "starred_url": "https://api.github.com/users/geofft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geofft/subscriptions", "organizations_url": "https://api.github.com/users/geofft/orgs", "repos_url": "https://api.github.com/users/geofft/repos", "events_url": "https://api.github.com/users/geofft/events{/privacy}", "received_events_url": "https://api.github.com/users/geofft/received_events", "type": "User", "site_admin": false}, "committer": {"login": "geofft", "id": 74644, "node_id": "MDQ6VXNlcjc0NjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/74644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geofft", "html_url": "https://github.com/geofft", "followers_url": "https://api.github.com/users/geofft/followers", "following_url": "https://api.github.com/users/geofft/following{/other_user}", "gists_url": "https://api.github.com/users/geofft/gists{/gist_id}", "starred_url": "https://api.github.com/users/geofft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geofft/subscriptions", "organizations_url": "https://api.github.com/users/geofft/orgs", "repos_url": "https://api.github.com/users/geofft/repos", "events_url": "https://api.github.com/users/geofft/events{/privacy}", "received_events_url": "https://api.github.com/users/geofft/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d50216e9dfb055d28abf9da35f91542c2e9fe90", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d50216e9dfb055d28abf9da35f91542c2e9fe90", "html_url": "https://github.com/rust-lang/rust/commit/8d50216e9dfb055d28abf9da35f91542c2e9fe90"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "2bb2359ba5a01f82b98af858b81f2303d0bd7aaa", "filename": "src/doc/trpl/match.md", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f59f41e04c044f322285f80d17916bd207d8ed04/src%2Fdoc%2Ftrpl%2Fmatch.md", "raw_url": "https://github.com/rust-lang/rust/raw/f59f41e04c044f322285f80d17916bd207d8ed04/src%2Fdoc%2Ftrpl%2Fmatch.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmatch.md?ref=f59f41e04c044f322285f80d17916bd207d8ed04", "patch": "@@ -61,3 +61,40 @@ let number = match x {\n ```\n \n Sometimes it\u2019s a nice way of converting something from one type to another.\n+\n+# Matching on enums\n+\n+Another important use of the `match` keyword is to process the possible\n+variants of an enum:\n+\n+```rust\n+enum Message {\n+    Quit,\n+    ChangeColor(i32, i32, i32),\n+    Move { x: i32, y: i32 },\n+    Write(String),\n+}\n+\n+fn quit() { /* ... */ }\n+fn change_color(r: i32, g: i32, b: i32) { /* ... */ }\n+fn move_cursor(x: i32, y: i32) { /* ... */ }\n+\n+fn process_message(msg: Message) {\n+    match msg {\n+        Message::Quit => quit(),\n+        Message::ChangeColor(r, g, b) => change_color(r, g, b),\n+        Message::Move { x: x, y: y } => move_cursor(x, y),\n+        Message::Write(s) => println!(\"{}\", s),\n+    };\n+}\n+```\n+\n+Again, the Rust compiler checks exhaustiveness, so it demands that you\n+have a match arm for every variant of the enum. If you leave one off, it\n+will give you a compile-time error unless you use `_`.\n+\n+Unlike the previous uses of `match`, you can\u2019t use the normal `if`\n+statement to do this. You can use the [`if let`][if-let] statement,\n+which can be seen as an abbreviated form of `match`.\n+\n+[if-let][if-let.html]"}]}