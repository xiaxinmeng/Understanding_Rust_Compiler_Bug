{"sha": "3edec8055165d5107bc9695a1f5ded67cdeb7aea", "node_id": "C_kwDOAAsO6NoAKDNlZGVjODA1NTE2NWQ1MTA3YmM5Njk1YTFmNWRlZDY3Y2RlYjdhZWE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-04T17:42:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-04T17:42:15Z"}, "message": "Rollup merge of #93576 - jsha:fix-rustdoc-html, r=GuillaumeGomez\n\nEmit more valid HTML from rustdoc\n\nPreviously, tidy-html5 (`tidy`) would complain about a few things in our HTML. The main thing is that `<summary>` tags can't contain `<div>`s. That's easily fixed by changing out the `<div>`s for `<span>`s with `display: block`.\n\nHowever, there's also a rule that `<span>`s can't contain heading elements. `<span>` permits only \"phrasing content\" https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span, and `<h3>` (and friends) are \"Flow content, heading content, palpable content\". https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements\n\nWe have a wrapping `<div>` that goes around each `<h3>`/`<h4>`, etc. We turn that into a `<section>` rather than a `<span>` because `<section>` permits \"flow content\". https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section\n\nAfter this change we get only three warnings from tidy, run on struct.String.html:\n\nline 6 column 10790 - Warning: trimming empty <span>\nline 1 column 1118 - Warning: <link> proprietary attribute \"disabled\"\nline 1 column 1193 - Warning: <link> proprietary attribute \"disabled\"\n\nThe empty `<span>` is a known issue - there's a span in front of the search box to work around a strange Safari issue.\n\nThe `<link>` attributes are the non-default stylesheets. We can probably refactor theme application to avoid using this proprietary \"disabled\" attribute.\n\nWe can suppress those warnings with flags to tidy, and get a run that returns 0 (success):\n\n```\ntidy -o /dev/null -quiet --drop-empty-elements no --warn-proprietary-attributes no build/x86_64-unknown-linux-gnu/doc/std/string/trait.ToString.html\n```\n\nNote: this requires the latest version of tidy-html5, built from https://github.com/htacg/tidy-html5. Older versions (including the default version on Ubuntu 21.10) think `<section>` can't occur inside `<summary>`.\n\nDemo: https://rustdoc.crud.net/jsha/fix-rustdoc-html/std/string/struct.String.html\n\nr? `@GuillaumeGomez`", "tree": {"sha": "40e1c2e84f034e6477da47c9849f2b2c4c7248c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40e1c2e84f034e6477da47c9849f2b2c4c7248c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3edec8055165d5107bc9695a1f5ded67cdeb7aea", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh/WV4CRBK7hj4Ov3rIwAA1hkIAEf/k4yHDQQT88sVx0LUNRw7\n8L8CqFctQusU1uEETWyiYnq+ufli6vU5nT144OmD9Whrv3JwjwyxgwX1KkjOmFjp\noCTobI+YjHVYeGlTJWJA6su+7EbkmfBk7fpoGe1d0v53NgGT7UB3MzRm1ZSz2avR\nNIlGB/mKyKDWMMK/De2HCSNLQrMQc14oS5zslBQhOCkm8oE+xqiFlfIctVdpCL/4\nKJLIXIwHu3Qe41iS/Bk8POx5KC9bfgSRw/nYyxih1a0EXOZ/GcSCxLEUvKiD7bDt\nmx9sF/S0mjtV47wcw/2R8M78A/pfpaZLrKR2wXDtw4ZNVUosfpGeSAWH0qJdSbs=\n=ZxJO\n-----END PGP SIGNATURE-----\n", "payload": "tree 40e1c2e84f034e6477da47c9849f2b2c4c7248c8\nparent af2886eef9cb27419ea7d8a451a1fc1cb33d5d8e\nparent 32f62607c3142dfc9eb56a0bd72dee298ca43358\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1643996535 +0100\ncommitter GitHub <noreply@github.com> 1643996535 +0100\n\nRollup merge of #93576 - jsha:fix-rustdoc-html, r=GuillaumeGomez\n\nEmit more valid HTML from rustdoc\n\nPreviously, tidy-html5 (`tidy`) would complain about a few things in our HTML. The main thing is that `<summary>` tags can't contain `<div>`s. That's easily fixed by changing out the `<div>`s for `<span>`s with `display: block`.\n\nHowever, there's also a rule that `<span>`s can't contain heading elements. `<span>` permits only \"phrasing content\" https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span, and `<h3>` (and friends) are \"Flow content, heading content, palpable content\". https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements\n\nWe have a wrapping `<div>` that goes around each `<h3>`/`<h4>`, etc. We turn that into a `<section>` rather than a `<span>` because `<section>` permits \"flow content\". https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section\n\nAfter this change we get only three warnings from tidy, run on struct.String.html:\n\nline 6 column 10790 - Warning: trimming empty <span>\nline 1 column 1118 - Warning: <link> proprietary attribute \"disabled\"\nline 1 column 1193 - Warning: <link> proprietary attribute \"disabled\"\n\nThe empty `<span>` is a known issue - there's a span in front of the search box to work around a strange Safari issue.\n\nThe `<link>` attributes are the non-default stylesheets. We can probably refactor theme application to avoid using this proprietary \"disabled\" attribute.\n\nWe can suppress those warnings with flags to tidy, and get a run that returns 0 (success):\n\n```\ntidy -o /dev/null -quiet --drop-empty-elements no --warn-proprietary-attributes no build/x86_64-unknown-linux-gnu/doc/std/string/trait.ToString.html\n```\n\nNote: this requires the latest version of tidy-html5, built from https://github.com/htacg/tidy-html5. Older versions (including the default version on Ubuntu 21.10) think `<section>` can't occur inside `<summary>`.\n\nDemo: https://rustdoc.crud.net/jsha/fix-rustdoc-html/std/string/struct.String.html\n\nr? `@GuillaumeGomez`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3edec8055165d5107bc9695a1f5ded67cdeb7aea", "html_url": "https://github.com/rust-lang/rust/commit/3edec8055165d5107bc9695a1f5ded67cdeb7aea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3edec8055165d5107bc9695a1f5ded67cdeb7aea/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af2886eef9cb27419ea7d8a451a1fc1cb33d5d8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/af2886eef9cb27419ea7d8a451a1fc1cb33d5d8e", "html_url": "https://github.com/rust-lang/rust/commit/af2886eef9cb27419ea7d8a451a1fc1cb33d5d8e"}, {"sha": "32f62607c3142dfc9eb56a0bd72dee298ca43358", "url": "https://api.github.com/repos/rust-lang/rust/commits/32f62607c3142dfc9eb56a0bd72dee298ca43358", "html_url": "https://github.com/rust-lang/rust/commit/32f62607c3142dfc9eb56a0bd72dee298ca43358"}], "stats": {"total": 260, "additions": 127, "deletions": 133}, "files": [{"sha": "f3e65df6b14977d55045ea7567ac0f7727988f00", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 27, "deletions": 35, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=3edec8055165d5107bc9695a1f5ded67cdeb7aea", "patch": "@@ -1265,7 +1265,7 @@ fn notable_traits_decl(decl: &clean::FnDecl, cx: &Context<'_>) -> String {\n                         if out.is_empty() {\n                             write!(\n                                 &mut out,\n-                                \"<div class=\\\"notable\\\">Notable traits for {}</div>\\\n+                                \"<span class=\\\"notable\\\">Notable traits for {}</span>\\\n                              <code class=\\\"content\\\">\",\n                                 impl_.for_.print(cx)\n                             );\n@@ -1297,9 +1297,9 @@ fn notable_traits_decl(decl: &clean::FnDecl, cx: &Context<'_>) -> String {\n         out.insert_str(\n             0,\n             \"<span class=\\\"notable-traits\\\"><span class=\\\"notable-traits-tooltip\\\">\u24d8\\\n-            <div class=\\\"notable-traits-tooltiptext\\\"><span class=\\\"docblock\\\">\",\n+            <span class=\\\"notable-traits-tooltiptext\\\"><span class=\\\"docblock\\\">\",\n         );\n-        out.push_str(\"</code></span></div></span></span>\");\n+        out.push_str(\"</code></span></span></span></span>\");\n     }\n \n     out.into_inner()\n@@ -1431,7 +1431,7 @@ fn render_impl(\n                         .map(|item| format!(\"{}.{}\", item.type_(), name));\n                     write!(\n                         w,\n-                        \"<div id=\\\"{}\\\" class=\\\"{}{} has-srclink\\\">\",\n+                        \"<section id=\\\"{}\\\" class=\\\"{}{} has-srclink\\\">\",\n                         id, item_type, in_trait_class,\n                     );\n                     render_rightside(w, cx, item, containing_item, render_mode);\n@@ -1446,15 +1446,15 @@ fn render_impl(\n                         render_mode,\n                     );\n                     w.write_str(\"</h4>\");\n-                    w.write_str(\"</div>\");\n+                    w.write_str(\"</section>\");\n                 }\n             }\n             clean::TypedefItem(ref tydef, _) => {\n                 let source_id = format!(\"{}.{}\", ItemType::AssocType, name);\n                 let id = cx.derive_id(source_id.clone());\n                 write!(\n                     w,\n-                    \"<div id=\\\"{}\\\" class=\\\"{}{} has-srclink\\\">\",\n+                    \"<section id=\\\"{}\\\" class=\\\"{}{} has-srclink\\\">\",\n                     id, item_type, in_trait_class\n                 );\n                 write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n@@ -1469,14 +1469,14 @@ fn render_impl(\n                     cx,\n                 );\n                 w.write_str(\"</h4>\");\n-                w.write_str(\"</div>\");\n+                w.write_str(\"</section>\");\n             }\n             clean::AssocConstItem(ref ty, _) => {\n                 let source_id = format!(\"{}.{}\", item_type, name);\n                 let id = cx.derive_id(source_id.clone());\n                 write!(\n                     w,\n-                    \"<div id=\\\"{}\\\" class=\\\"{}{} has-srclink\\\">\",\n+                    \"<section id=\\\"{}\\\" class=\\\"{}{} has-srclink\\\">\",\n                     id, item_type, in_trait_class\n                 );\n                 render_rightside(w, cx, item, containing_item, render_mode);\n@@ -1491,12 +1491,12 @@ fn render_impl(\n                     cx,\n                 );\n                 w.write_str(\"</h4>\");\n-                w.write_str(\"</div>\");\n+                w.write_str(\"</section>\");\n             }\n             clean::AssocTypeItem(ref bounds, ref default) => {\n                 let source_id = format!(\"{}.{}\", item_type, name);\n                 let id = cx.derive_id(source_id.clone());\n-                write!(w, \"<div id=\\\"{}\\\" class=\\\"{}{}\\\">\", id, item_type, in_trait_class,);\n+                write!(w, \"<section id=\\\"{}\\\" class=\\\"{}{}\\\">\", id, item_type, in_trait_class,);\n                 write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n                 w.write_str(\"<h4 class=\\\"code-header\\\">\");\n                 assoc_type(\n@@ -1509,7 +1509,7 @@ fn render_impl(\n                     cx,\n                 );\n                 w.write_str(\"</h4>\");\n-                w.write_str(\"</div>\");\n+                w.write_str(\"</section>\");\n             }\n             clean::StrippedItem(..) => return,\n             _ => panic!(\"can't make docs for trait item with name {:?}\", item.name),\n@@ -1668,21 +1668,23 @@ fn render_rightside(\n         RenderMode::ForDeref { .. } => (None, None),\n     };\n \n-    write!(w, \"<div class=\\\"rightside\\\">\");\n+    let mut rightside = Buffer::new();\n     let has_stability = render_stability_since_raw(\n-        w,\n+        &mut rightside,\n         item.stable_since(tcx),\n         const_stability,\n         containing_item.stable_since(tcx),\n         const_stable_since,\n     );\n-    let mut tmp_buf = Buffer::empty_from(w);\n-    write_srclink(cx, item, &mut tmp_buf);\n-    if has_stability && !tmp_buf.is_empty() {\n-        w.write_str(\" \u00b7 \");\n+    let mut srclink = Buffer::empty_from(w);\n+    write_srclink(cx, item, &mut srclink);\n+    if has_stability && !srclink.is_empty() {\n+        rightside.write_str(\" \u00b7 \");\n+    }\n+    rightside.push_buffer(srclink);\n+    if !rightside.is_empty() {\n+        write!(w, \"<span class=\\\"rightside\\\">{}</span>\", rightside.into_inner());\n     }\n-    w.push_buffer(tmp_buf);\n-    w.write_str(\"</div>\");\n }\n \n pub(crate) fn render_impl_summary(\n@@ -1713,7 +1715,7 @@ pub(crate) fn render_impl_summary(\n     } else {\n         format!(\" data-aliases=\\\"{}\\\"\", aliases.join(\",\"))\n     };\n-    write!(w, \"<div id=\\\"{}\\\" class=\\\"impl has-srclink\\\"{}>\", id, aliases);\n+    write!(w, \"<section id=\\\"{}\\\" class=\\\"impl has-srclink\\\"{}>\", id, aliases);\n     render_rightside(w, cx, &i.impl_item, containing_item, RenderMode::Normal);\n     write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n     write!(w, \"<h3 class=\\\"code-header in-band\\\">\");\n@@ -1737,11 +1739,11 @@ pub(crate) fn render_impl_summary(\n     let is_trait = i.inner_impl().trait_.is_some();\n     if is_trait {\n         if let Some(portability) = portability(&i.impl_item, Some(parent)) {\n-            write!(w, \"<div class=\\\"item-info\\\">{}</div>\", portability);\n+            write!(w, \"<span class=\\\"item-info\\\">{}</span>\", portability);\n         }\n     }\n \n-    w.write_str(\"</div>\");\n+    w.write_str(\"</section>\");\n }\n \n fn print_sidebar(cx: &Context<'_>, it: &clean::Item, buffer: &mut Buffer) {\n@@ -1802,19 +1804,9 @@ fn print_sidebar(cx: &Context<'_>, it: &clean::Item, buffer: &mut Buffer) {\n     // to navigate the documentation (though slightly inefficiently).\n \n     if !it.is_mod() {\n-        buffer.write_str(\"<h2 class=\\\"location\\\">In \");\n-        for (i, name) in cx.current.iter().take(parentlen).enumerate() {\n-            if i > 0 {\n-                buffer.write_str(\"::<wbr>\");\n-            }\n-            write!(\n-                buffer,\n-                \"<a href=\\\"{}index.html\\\">{}</a>\",\n-                &cx.root_path()[..(cx.current.len() - i - 1) * 3],\n-                *name\n-            );\n-        }\n-        buffer.write_str(\"</h2>\");\n+        let path: String = cx.current.iter().map(|s| s.as_str()).intersperse(\"::\").collect();\n+\n+        write!(buffer, \"<h2 class=\\\"location\\\"><a href=\\\"index.html\\\">In {}</a></h2>\", path);\n     }\n \n     // Sidebar refers to the enclosing module, not this module."}, {"sha": "a431bb63f63e00fe8c9f5077fff9fda124b33863", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=3edec8055165d5107bc9695a1f5ded67cdeb7aea", "patch": "@@ -1336,6 +1336,7 @@ h3.variant {\n \tmargin-bottom: 13px;\n \tfont-size: 1.1875rem;\n \tfont-weight: 600;\n+\tdisplay: block;\n }\n \n .notable-traits .docblock code.content{"}, {"sha": "0277501de097f956517d1ae6c14d33d89ea0e30f", "filename": "src/test/rustdoc/async-fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fasync-fn.rs?ref=3edec8055165d5107bc9695a1f5ded67cdeb7aea", "patch": "@@ -77,12 +77,12 @@ struct AsyncFdReadyGuard<'a, T> { x: &'a T }\n \n impl Foo {\n     // @has async_fn/struct.Foo.html\n-    // @has - '//div[@class=\"method has-srclink\"]' 'pub async fn complicated_lifetimes( &self, context: &impl Bar) -> impl Iterator<Item = &usize>'\n+    // @has - '//*[@class=\"method has-srclink\"]' 'pub async fn complicated_lifetimes( &self, context: &impl Bar) -> impl Iterator<Item = &usize>'\n     pub async fn complicated_lifetimes(&self, context: &impl Bar) -> impl Iterator<Item = &usize> {}\n     // taken from `tokio` as an example of a method that was particularly bad before\n-    // @has - '//div[@class=\"method has-srclink\"]' \"pub async fn readable<T>(&self) -> Result<AsyncFdReadyGuard<'_, T>, ()>\"\n+    // @has - '//*[@class=\"method has-srclink\"]' \"pub async fn readable<T>(&self) -> Result<AsyncFdReadyGuard<'_, T>, ()>\"\n     pub async fn readable<T>(&self) -> Result<AsyncFdReadyGuard<'_, T>, ()> {}\n-    // @has - '//div[@class=\"method has-srclink\"]' \"pub async fn mut_self(&mut self)\"\n+    // @has - '//*[@class=\"method has-srclink\"]' \"pub async fn mut_self(&mut self)\"\n     pub async fn mut_self(&mut self) {}\n }\n "}, {"sha": "a047c76b637d4cdf6a2c69d58e104e6bcf8dea20", "filename": "src/test/rustdoc/auto_aliases.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fauto_aliases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fauto_aliases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauto_aliases.rs?ref=3edec8055165d5107bc9695a1f5ded67cdeb7aea", "patch": "@@ -1,6 +1,6 @@\n #![feature(auto_traits)]\n \n-// @has auto_aliases/trait.Bar.html '//div[@data-aliases=\"auto_aliases::Foo\"]' 'impl Bar for Foo'\n+// @has auto_aliases/trait.Bar.html '//*[@data-aliases=\"auto_aliases::Foo\"]' 'impl Bar for Foo'\n pub struct Foo;\n \n pub auto trait Bar {}"}, {"sha": "4c686730b1152b1fd877601e9f39d83cc724106b", "filename": "src/test/rustdoc/blanket-reexport-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fblanket-reexport-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fblanket-reexport-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fblanket-reexport-item.rs?ref=3edec8055165d5107bc9695a1f5ded67cdeb7aea", "patch": "@@ -1,6 +1,6 @@\n #![crate_name = \"foo\"]\n \n-// @has foo/struct.S.html '//div[@id=\"impl-Into%3CU%3E\"]//h3[@class=\"code-header in-band\"]' 'impl<T, U> Into<U> for T'\n+// @has foo/struct.S.html '//*[@id=\"impl-Into%3CU%3E\"]//h3[@class=\"code-header in-band\"]' 'impl<T, U> Into<U> for T'\n pub struct S2 {}\n mod m {\n     pub struct S {}"}, {"sha": "e3f5d074783044cfe8b615d3b25301346d0a3767", "filename": "src/test/rustdoc/const-display.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fconst-display.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fconst-display.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-display.rs?ref=3edec8055165d5107bc9695a1f5ded67cdeb7aea", "patch": "@@ -49,19 +49,19 @@ pub const unsafe fn bar_not_gated() -> u32 { 42 }\n pub struct Foo;\n \n impl Foo {\n-    // @has 'foo/struct.Foo.html' '//div[@id=\"method.gated\"]/h4[@class=\"code-header\"]' 'pub fn gated() -> u32'\n+    // @has 'foo/struct.Foo.html' '//*[@id=\"method.gated\"]/h4[@class=\"code-header\"]' 'pub fn gated() -> u32'\n     // @has - '//span[@class=\"since\"]' '1.0.0 (const: unstable)'\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature=\"foo\", issue = \"none\")]\n     pub const fn gated() -> u32 { 42 }\n \n-    // @has 'foo/struct.Foo.html' '//div[@id=\"method.gated_unsafe\"]/h4[@class=\"code-header\"]' 'pub unsafe fn gated_unsafe() -> u32'\n+    // @has 'foo/struct.Foo.html' '//*[@id=\"method.gated_unsafe\"]/h4[@class=\"code-header\"]' 'pub unsafe fn gated_unsafe() -> u32'\n     // @has - '//span[@class=\"since\"]' '1.0.0 (const: unstable)'\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature=\"foo\", issue = \"none\")]\n     pub const unsafe fn gated_unsafe() -> u32 { 42 }\n \n-    // @has 'foo/struct.Foo.html' '//div[@id=\"method.stable_impl\"]/h4[@class=\"code-header\"]' 'pub const fn stable_impl() -> u32'\n+    // @has 'foo/struct.Foo.html' '//*[@id=\"method.stable_impl\"]/h4[@class=\"code-header\"]' 'pub const fn stable_impl() -> u32'\n     // @has - '//span[@class=\"since\"]' '1.0.0 (const: 1.2.0)'\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"rust1\", since = \"1.2.0\")]"}, {"sha": "e54f9a57ae4ee8abd1ed97139d7dbe5a340e75f0", "filename": "src/test/rustdoc/const-generics/add-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fconst-generics%2Fadd-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fconst-generics%2Fadd-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fadd-impl.rs?ref=3edec8055165d5107bc9695a1f5ded67cdeb7aea", "patch": "@@ -7,7 +7,7 @@ pub struct Simd<T, const WIDTH: usize> {\n     inner: T,\n }\n \n-// @has foo/struct.Simd.html '//div[@id=\"trait-implementations-list\"]//div/h3[@class=\"code-header in-band\"]' 'impl Add<Simd<u8, 16_usize>> for Simd<u8, 16>'\n+// @has foo/struct.Simd.html '//div[@id=\"trait-implementations-list\"]//h3[@class=\"code-header in-band\"]' 'impl Add<Simd<u8, 16_usize>> for Simd<u8, 16>'\n impl Add for Simd<u8, 16> {\n     type Output = Self;\n "}, {"sha": "4279de91f56c1420bab481156484d54cdd9fe939", "filename": "src/test/rustdoc/const-generics/const-generic-slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generic-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generic-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generic-slice.rs?ref=3edec8055165d5107bc9695a1f5ded67cdeb7aea", "patch": "@@ -5,7 +5,7 @@ pub trait Array {\n }\n \n // @has foo/trait.Array.html\n-// @has - '//div[@class=\"impl has-srclink\"]' 'impl<T, const N: usize> Array for [T; N]'\n-impl <T, const N: usize> Array for [T; N] {\n+// @has - '//*[@class=\"impl has-srclink\"]' 'impl<T, const N: usize> Array for [T; N]'\n+impl<T, const N: usize> Array for [T; N] {\n     type Item = T;\n }"}, {"sha": "fc3a2731089eb406381f6ff37add7f4555b02f87", "filename": "src/test/rustdoc/const-generics/const-generics-docs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs?ref=3edec8055165d5107bc9695a1f5ded67cdeb7aea", "patch": "@@ -36,7 +36,7 @@ pub struct Foo<const N: usize> where u8: Trait<N>;\n // @has foo/struct.Bar.html '//pre[@class=\"rust struct\"]' 'pub struct Bar<T, const N: usize>(_)'\n pub struct Bar<T, const N: usize>([T; N]);\n \n-// @has foo/struct.Foo.html '//div[@id=\"impl\"]/h3[@class=\"code-header in-band\"]' 'impl<const M: usize> Foo<M> where u8: Trait<M>'\n+// @has foo/struct.Foo.html '//*[@id=\"impl\"]/h3[@class=\"code-header in-band\"]' 'impl<const M: usize> Foo<M> where u8: Trait<M>'\n impl<const M: usize> Foo<M> where u8: Trait<M> {\n     // @has - '//*[@id=\"associatedconstant.FOO_ASSOC\"]' 'pub const FOO_ASSOC: usize'\n     pub const FOO_ASSOC: usize = M + 13;\n@@ -47,7 +47,7 @@ impl<const M: usize> Foo<M> where u8: Trait<M> {\n     }\n }\n \n-// @has foo/struct.Bar.html '//div[@id=\"impl\"]/h3[@class=\"code-header in-band\"]' 'impl<const M: usize> Bar<u8, M>'\n+// @has foo/struct.Bar.html '//*[@id=\"impl\"]/h3[@class=\"code-header in-band\"]' 'impl<const M: usize> Bar<u8, M>'\n impl<const M: usize> Bar<u8, M> {\n     // @has - '//*[@id=\"method.hey\"]' \\\n     //      'pub fn hey<const N: usize>(&self) -> Foo<N> where u8: Trait<N>'"}, {"sha": "a3ef084165a8a580213d830c74f6e4360d79576d", "filename": "src/test/rustdoc/const-generics/const-impl.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-impl.rs?ref=3edec8055165d5107bc9695a1f5ded67cdeb7aea", "patch": "@@ -1,7 +1,5 @@\n #![allow(incomplete_features)]\n-\n #![feature(adt_const_params)]\n-\n #![crate_name = \"foo\"]\n \n #[derive(PartialEq, Eq)]\n@@ -11,20 +9,20 @@ pub enum Order {\n }\n \n // @has foo/struct.VSet.html '//pre[@class=\"rust struct\"]' 'pub struct VSet<T, const ORDER: Order>'\n-// @has foo/struct.VSet.html '//div[@id=\"impl-Send\"]/h3[@class=\"code-header in-band\"]' 'impl<T, const ORDER: Order> Send for VSet<T, ORDER>'\n-// @has foo/struct.VSet.html '//div[@id=\"impl-Sync\"]/h3[@class=\"code-header in-band\"]' 'impl<T, const ORDER: Order> Sync for VSet<T, ORDER>'\n+// @has foo/struct.VSet.html '//*[@id=\"impl-Send\"]/h3[@class=\"code-header in-band\"]' 'impl<T, const ORDER: Order> Send for VSet<T, ORDER>'\n+// @has foo/struct.VSet.html '//*[@id=\"impl-Sync\"]/h3[@class=\"code-header in-band\"]' 'impl<T, const ORDER: Order> Sync for VSet<T, ORDER>'\n pub struct VSet<T, const ORDER: Order> {\n     inner: Vec<T>,\n }\n \n-// @has foo/struct.VSet.html '//div[@id=\"impl\"]/h3[@class=\"code-header in-band\"]' 'impl<T> VSet<T, { Order::Sorted }>'\n+// @has foo/struct.VSet.html '//*[@id=\"impl\"]/h3[@class=\"code-header in-band\"]' 'impl<T> VSet<T, { Order::Sorted }>'\n impl<T> VSet<T, { Order::Sorted }> {\n     pub fn new() -> Self {\n         Self { inner: Vec::new() }\n     }\n }\n \n-// @has foo/struct.VSet.html '//div[@id=\"impl-1\"]/h3[@class=\"code-header in-band\"]' 'impl<T> VSet<T, { Order::Unsorted }>'\n+// @has foo/struct.VSet.html '//*[@id=\"impl-1\"]/h3[@class=\"code-header in-band\"]' 'impl<T> VSet<T, { Order::Unsorted }>'\n impl<T> VSet<T, { Order::Unsorted }> {\n     pub fn new() -> Self {\n         Self { inner: Vec::new() }\n@@ -33,7 +31,7 @@ impl<T> VSet<T, { Order::Unsorted }> {\n \n pub struct Escape<const S: &'static str>;\n \n-// @has foo/struct.Escape.html '//div[@id=\"impl\"]/h3[@class=\"code-header in-band\"]' 'impl Escape<r#\"<script>alert(\"Escape\");</script>\"#>'\n+// @has foo/struct.Escape.html '//*[@id=\"impl\"]/h3[@class=\"code-header in-band\"]' 'impl Escape<r#\"<script>alert(\"Escape\");</script>\"#>'\n impl Escape<r#\"<script>alert(\"Escape\");</script>\"#> {\n     pub fn f() {}\n }"}, {"sha": "d18f404212fa1bc9b63045b15022c6ca11c50047", "filename": "src/test/rustdoc/empty-impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fempty-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fempty-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fempty-impls.rs?ref=3edec8055165d5107bc9695a1f5ded67cdeb7aea", "patch": "@@ -1,19 +1,19 @@\n #![crate_name = \"foo\"]\n \n // @has foo/struct.Foo.html\n-// @has - '//div[@id=\"synthetic-implementations-list\"]/div[@id=\"impl-Send\"]' 'impl Send for Foo'\n+// @has - '//div[@id=\"synthetic-implementations-list\"]/*[@id=\"impl-Send\"]' 'impl Send for Foo'\n pub struct Foo;\n \n pub trait EmptyTrait {}\n \n-// @has - '//div[@id=\"trait-implementations-list\"]/div[@id=\"impl-EmptyTrait\"]' 'impl EmptyTrait for Foo'\n+// @has - '//div[@id=\"trait-implementations-list\"]/*[@id=\"impl-EmptyTrait\"]' 'impl EmptyTrait for Foo'\n impl EmptyTrait for Foo {}\n \n pub trait NotEmpty {\n     fn foo(&self);\n }\n \n-// @has - '//div[@id=\"trait-implementations-list\"]/details/summary/div[@id=\"impl-NotEmpty\"]' 'impl NotEmpty for Foo'\n+// @has - '//div[@id=\"trait-implementations-list\"]/details/summary/*[@id=\"impl-NotEmpty\"]' 'impl NotEmpty for Foo'\n impl NotEmpty for Foo {\n     fn foo(&self) {}\n }"}, {"sha": "9f8b0277e76b0a7c8dd2329ae3a687332a3c6e38", "filename": "src/test/rustdoc/ensure-src-link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fensure-src-link.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fensure-src-link.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fensure-src-link.rs?ref=3edec8055165d5107bc9695a1f5ded67cdeb7aea", "patch": "@@ -2,5 +2,5 @@\n \n // This test ensures that the [src] link is present on traits items.\n \n-// @has foo/trait.Iterator.html '//div[@id=\"method.zip\"]//a[@class=\"srclink\"]' \"source\"\n+// @has foo/trait.Iterator.html '//*[@id=\"method.zip\"]//a[@class=\"srclink\"]' \"source\"\n pub use std::iter::Iterator;"}, {"sha": "93cf16346b6f7fcd50c3ba887c513128d6c58b38", "filename": "src/test/rustdoc/extern-default-method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fextern-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fextern-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fextern-default-method.rs?ref=3edec8055165d5107bc9695a1f5ded67cdeb7aea", "patch": "@@ -4,6 +4,6 @@\n extern crate rustdoc_extern_default_method as ext;\n \n // @count extern_default_method/struct.Struct.html '//*[@id=\"method.provided\"]' 1\n-// @has extern_default_method/struct.Struct.html '//div[@id=\"method.provided\"]//a[@class=\"fnname\"]/@href' #method.provided\n-// @has extern_default_method/struct.Struct.html '//div[@id=\"method.provided\"]//a[@class=\"anchor\"]/@href' #method.provided\n+// @has extern_default_method/struct.Struct.html '//*[@id=\"method.provided\"]//a[@class=\"fnname\"]/@href' #method.provided\n+// @has extern_default_method/struct.Struct.html '//*[@id=\"method.provided\"]//a[@class=\"anchor\"]/@href' #method.provided\n pub use ext::Struct;"}, {"sha": "0f6cba93f956923e0b91bde31efc39e5f9b2bce3", "filename": "src/test/rustdoc/generic-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fgeneric-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fgeneric-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fgeneric-impl.rs?ref=3edec8055165d5107bc9695a1f5ded67cdeb7aea", "patch": "@@ -2,10 +2,10 @@\n \n use std::fmt;\n \n-// @!has foo/struct.Bar.html '//div[@id=\"impl-ToString\"]//h3[@class=\"code-header in-band\"]' 'impl<T> ToString for T'\n+// @!has foo/struct.Bar.html '//*[@id=\"impl-ToString\"]//h3[@class=\"code-header in-band\"]' 'impl<T> ToString for T'\n pub struct Bar;\n \n-// @has foo/struct.Foo.html '//div[@id=\"impl-ToString\"]//h3[@class=\"code-header in-band\"]' 'impl<T> ToString for T'\n+// @has foo/struct.Foo.html '//*[@id=\"impl-ToString\"]//h3[@class=\"code-header in-band\"]' 'impl<T> ToString for T'\n pub struct Foo;\n // @has foo/struct.Foo.html '//div[@class=\"sidebar-links\"]/a[@href=\"#impl-ToString\"]' 'ToString'\n "}, {"sha": "490d7e51e321d5663a4398c99ad35eaa3a4d3d4c", "filename": "src/test/rustdoc/issue-29503.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fissue-29503.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fissue-29503.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-29503.rs?ref=3edec8055165d5107bc9695a1f5ded67cdeb7aea", "patch": "@@ -5,12 +5,14 @@ pub trait MyTrait {\n     fn my_string(&self) -> String;\n }\n \n-// @has - \"//div[@id='implementors-list']//div[@id='impl-MyTrait']//h3[@class='code-header in-band']\" \"impl<T> MyTrait for T where T: Debug\"\n-impl<T> MyTrait for T where T: fmt::Debug {\n+// @has - \"//div[@id='implementors-list']//*[@id='impl-MyTrait']//h3[@class='code-header in-band']\" \"impl<T> MyTrait for T where T: Debug\"\n+impl<T> MyTrait for T\n+where\n+    T: fmt::Debug,\n+{\n     fn my_string(&self) -> String {\n         format!(\"{:?}\", self)\n     }\n }\n \n-pub fn main() {\n-}\n+pub fn main() {}"}, {"sha": "1e4791e01253df01edcb4aa0c7fdaa5816c6d812", "filename": "src/test/rustdoc/issue-33302.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fissue-33302.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fissue-33302.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-33302.rs?ref=3edec8055165d5107bc9695a1f5ded67cdeb7aea", "patch": "@@ -1,7 +1,6 @@\n // Ensure constant and array length values are not taken from source\n // code, which wreaks havoc with macros.\n \n-\n macro_rules! make {\n     ($n:expr) => {\n         pub struct S;\n@@ -23,30 +22,30 @@ macro_rules! make {\n         }\n \n         // @has issue_33302/struct.S.html \\\n-        //        '//div[@class=\"impl has-srclink\"]' 'impl T<[i32; 16]> for S'\n+        //        '//*[@class=\"impl has-srclink\"]' 'impl T<[i32; 16]> for S'\n         // @has - '//*[@id=\"associatedconstant.C\"]' 'const C: [i32; 16]'\n         // @has - '//*[@id=\"associatedconstant.D\"]' 'const D: i32'\n         impl T<[i32; ($n * $n)]> for S {\n             const C: [i32; ($n * $n)] = [0; ($n * $n)];\n         }\n \n         // @has issue_33302/struct.S.html \\\n-        //        '//div[@class=\"impl has-srclink\"]' 'impl T<[i32; 16]> for S'\n+        //        '//*[@class=\"impl has-srclink\"]' 'impl T<[i32; 16]> for S'\n         // @has - '//*[@id=\"associatedconstant.C-1\"]' 'const C: (i32,)'\n         // @has - '//*[@id=\"associatedconstant.D-1\"]' 'const D: i32'\n         impl T<(i32,)> for S {\n             const C: (i32,) = ($n,);\n         }\n \n         // @has issue_33302/struct.S.html \\\n-        //        '//div[@class=\"impl has-srclink\"]' 'impl T<(i32, i32)> for S'\n+        //        '//*[@class=\"impl has-srclink\"]' 'impl T<(i32, i32)> for S'\n         // @has - '//*[@id=\"associatedconstant.C-2\"]' 'const C: (i32, i32)'\n         // @has - '//*[@id=\"associatedconstant.D-2\"]' 'const D: i32'\n         impl T<(i32, i32)> for S {\n             const C: (i32, i32) = ($n, $n);\n             const D: i32 = ($n / $n);\n         }\n-    }\n+    };\n }\n \n make!(4);"}, {"sha": "c68ffd52186482da0ffe81389f01305b5522ca09", "filename": "src/test/rustdoc/issue-53812.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fissue-53812.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fissue-53812.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-53812.rs?ref=3edec8055165d5107bc9695a1f5ded67cdeb7aea", "patch": "@@ -1,5 +1,4 @@\n-pub trait MyIterator {\n-}\n+pub trait MyIterator {}\n \n pub struct MyStruct<T>(T);\n \n@@ -13,9 +12,9 @@ macro_rules! array_impls {\n }\n \n // @has issue_53812/trait.MyIterator.html\n-// @has - '//*[@id=\"implementors-list\"]/div[@class=\"impl has-srclink\"][1]' 'MyStruct<[T; 0]>'\n-// @has - '//*[@id=\"implementors-list\"]/div[@class=\"impl has-srclink\"][2]' 'MyStruct<[T; 1]>'\n-// @has - '//*[@id=\"implementors-list\"]/div[@class=\"impl has-srclink\"][3]' 'MyStruct<[T; 2]>'\n-// @has - '//*[@id=\"implementors-list\"]/div[@class=\"impl has-srclink\"][4]' 'MyStruct<[T; 3]>'\n-// @has - '//*[@id=\"implementors-list\"]/div[@class=\"impl has-srclink\"][5]' 'MyStruct<[T; 10]>'\n+// @has - '//*[@id=\"implementors-list\"]/*[@class=\"impl has-srclink\"][1]' 'MyStruct<[T; 0]>'\n+// @has - '//*[@id=\"implementors-list\"]/*[@class=\"impl has-srclink\"][2]' 'MyStruct<[T; 1]>'\n+// @has - '//*[@id=\"implementors-list\"]/*[@class=\"impl has-srclink\"][3]' 'MyStruct<[T; 2]>'\n+// @has - '//*[@id=\"implementors-list\"]/*[@class=\"impl has-srclink\"][4]' 'MyStruct<[T; 3]>'\n+// @has - '//*[@id=\"implementors-list\"]/*[@class=\"impl has-srclink\"][5]' 'MyStruct<[T; 10]>'\n array_impls! { 10 3 2 1 0 }"}, {"sha": "ef15946ec50459ea288ad38506dc365de751d2d5", "filename": "src/test/rustdoc/issue-86620.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fissue-86620.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fissue-86620.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-86620.rs?ref=3edec8055165d5107bc9695a1f5ded67cdeb7aea", "patch": "@@ -4,6 +4,6 @@ extern crate issue_86620_1;\n \n use issue_86620_1::*;\n \n-// @!has issue_86620/struct.S.html '//div[@id=\"method.vzip\"]//a[@class=\"fnname\"]/@href' #tymethod.vzip\n-// @has issue_86620/struct.S.html '//div[@id=\"method.vzip\"]//a[@class=\"anchor\"]/@href' #method.vzip\n+// @!has issue_86620/struct.S.html '//*[@id=\"method.vzip\"]//a[@class=\"fnname\"]/@href' #tymethod.vzip\n+// @has issue_86620/struct.S.html '//*[@id=\"method.vzip\"]//a[@class=\"anchor\"]/@href' #method.vzip\n pub struct S;"}, {"sha": "28adff84c7032c91aca8ad25ec776d7b024272f9", "filename": "src/test/rustdoc/primitive/primitive-generic-impl.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fprimitive%2Fprimitive-generic-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fprimitive%2Fprimitive-generic-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fprimitive%2Fprimitive-generic-impl.rs?ref=3edec8055165d5107bc9695a1f5ded67cdeb7aea", "patch": "@@ -1,8 +1,7 @@\n #![feature(rustdoc_internals)]\n-\n #![crate_name = \"foo\"]\n \n-// @has foo/primitive.i32.html '//div[@id=\"impl-ToString\"]//h3[@class=\"code-header in-band\"]' 'impl<T> ToString for T'\n+// @has foo/primitive.i32.html '//*[@id=\"impl-ToString\"]//h3[@class=\"code-header in-band\"]' 'impl<T> ToString for T'\n \n #[doc(primitive = \"i32\")]\n /// Some useless docs, wouhou!"}, {"sha": "63e486b8834e41f96846226837f2f41b908ca219", "filename": "src/test/rustdoc/sidebar-links-to-foreign-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fsidebar-links-to-foreign-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fsidebar-links-to-foreign-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsidebar-links-to-foreign-impl.rs?ref=3edec8055165d5107bc9695a1f5ded67cdeb7aea", "patch": "@@ -6,9 +6,9 @@\n // @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#foreign-impls\"]' 'Implementations on Foreign Types'\n // @has - '//h2[@id=\"foreign-impls\"]' 'Implementations on Foreign Types'\n // @has - '//*[@class=\"sidebar-links\"]/a[@href=\"#impl-Foo-for-u32\"]' 'u32'\n-// @has - '//div[@id=\"impl-Foo-for-u32\"]//h3[@class=\"code-header in-band\"]' 'impl Foo for u32'\n+// @has - '//*[@id=\"impl-Foo-for-u32\"]//h3[@class=\"code-header in-band\"]' 'impl Foo for u32'\n // @has - '//*[@class=\"sidebar-links\"]/a[@href=\"#impl-Foo-for-%26%27a%20str\"]' \"&'a str\"\n-// @has - '//div[@id=\"impl-Foo-for-%26%27a%20str\"]//h3[@class=\"code-header in-band\"]' \"impl<'a> Foo for &'a str\"\n+// @has - '//*[@id=\"impl-Foo-for-%26%27a%20str\"]//h3[@class=\"code-header in-band\"]' \"impl<'a> Foo for &'a str\"\n pub trait Foo {}\n \n impl Foo for u32 {}"}, {"sha": "252a81260369ab8898c197d3d3228f005b7eabdf", "filename": "src/test/rustdoc/sized_trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fsized_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fsized_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsized_trait.rs?ref=3edec8055165d5107bc9695a1f5ded67cdeb7aea", "patch": "@@ -1,17 +1,17 @@\n #![crate_name = \"foo\"]\n \n // @has foo/struct.Bar.html\n-// @!has - '//div[@id=\"impl-Sized\"]'\n+// @!has - '//*[@id=\"impl-Sized\"]'\n pub struct Bar {\n     a: u16,\n }\n \n // @has foo/struct.Foo.html\n-// @!has - '//div[@id=\"impl-Sized\"]'\n+// @!has - '//*[@id=\"impl-Sized\"]'\n pub struct Foo<T: ?Sized>(T);\n \n // @has foo/struct.Unsized.html\n-// @has - '//div[@id=\"impl-Sized\"]//h3[@class=\"code-header in-band\"]' 'impl !Sized for Unsized'\n+// @has - '//*[@id=\"impl-Sized\"]//h3[@class=\"code-header in-band\"]' 'impl !Sized for Unsized'\n pub struct Unsized {\n     data: [u8],\n }"}, {"sha": "14580373b3b051284d3eb844c9c26a989508f98c", "filename": "src/test/rustdoc/source-version-separator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fsource-version-separator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fsource-version-separator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsource-version-separator.rs?ref=3edec8055165d5107bc9695a1f5ded67cdeb7aea", "patch": "@@ -6,7 +6,7 @@\n // @has - '//div[@class=\"main-heading\"]/*[@class=\"out-of-band\"]' '1.0 \u00b7 source \u00b7 '\n #[stable(feature = \"bar\", since = \"1.0\")]\n pub trait Bar {\n-    // @has - '//div[@id=\"tymethod.foo\"]/*[@class=\"rightside\"]' '3.0 \u00b7 source'\n+    // @has - '//*[@id=\"tymethod.foo\"]/*[@class=\"rightside\"]' '3.0 \u00b7 source'\n     #[stable(feature = \"foobar\", since = \"3.0\")]\n     fn foo();\n }\n@@ -19,7 +19,7 @@ pub trait Bar {\n pub struct Foo;\n \n impl Foo {\n-    // @has - '//div[@id=\"method.foofoo\"]/*[@class=\"rightside\"]' '3.0 \u00b7 source'\n+    // @has - '//*[@id=\"method.foofoo\"]/*[@class=\"rightside\"]' '3.0 \u00b7 source'\n     #[stable(feature = \"foobar\", since = \"3.0\")]\n     pub fn foofoo() {}\n }"}, {"sha": "5245789212d8c9e777f6984e7e999eea18415c81", "filename": "src/test/rustdoc/spotlight-from-dependency.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fspotlight-from-dependency.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fspotlight-from-dependency.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fspotlight-from-dependency.rs?ref=3edec8055165d5107bc9695a1f5ded67cdeb7aea", "patch": "@@ -3,7 +3,7 @@\n use std::iter::Iterator;\n \n // @has foo/struct.Odd.html\n-// @has - '//div[@id=\"method.new\"]//span[@class=\"notable-traits\"]//code/span' 'impl Iterator for Odd'\n+// @has - '//*[@id=\"method.new\"]//span[@class=\"notable-traits\"]//code/span' 'impl Iterator for Odd'\n pub struct Odd {\n     current: usize,\n }"}, {"sha": "0f461a1185b6e1c4868e21cacc5f2cc126c6007e", "filename": "src/test/rustdoc/src-links-auto-impls.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fsrc-links-auto-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fsrc-links-auto-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsrc-links-auto-impls.rs?ref=3edec8055165d5107bc9695a1f5ded67cdeb7aea", "patch": "@@ -1,12 +1,12 @@\n #![crate_name = \"foo\"]\n \n // @has foo/struct.Unsized.html\n-// @has - '//div[@id=\"impl-Sized\"]/h3[@class=\"code-header in-band\"]' 'impl !Sized for Unsized'\n-// @!has - '//div[@id=\"impl-Sized\"]//a[@class=\"srclink\"]' 'source'\n-// @has - '//div[@id=\"impl-Sync\"]/h3[@class=\"code-header in-band\"]' 'impl Sync for Unsized'\n-// @!has - '//div[@id=\"impl-Sync\"]//a[@class=\"srclink\"]' 'source'\n-// @has - '//div[@id=\"impl-Any\"]/h3[@class=\"code-header in-band\"]' 'impl<T> Any for T'\n-// @has - '//div[@id=\"impl-Any\"]//a[@class=\"srclink\"]' 'source'\n+// @has - '//*[@id=\"impl-Sized\"]/h3[@class=\"code-header in-band\"]' 'impl !Sized for Unsized'\n+// @!has - '//*[@id=\"impl-Sized\"]//a[@class=\"srclink\"]' 'source'\n+// @has - '//*[@id=\"impl-Sync\"]/h3[@class=\"code-header in-band\"]' 'impl Sync for Unsized'\n+// @!has - '//*[@id=\"impl-Sync\"]//a[@class=\"srclink\"]' 'source'\n+// @has - '//*[@id=\"impl-Any\"]/h3[@class=\"code-header in-band\"]' 'impl<T> Any for T'\n+// @has - '//*[@id=\"impl-Any\"]//a[@class=\"srclink\"]' 'source'\n pub struct Unsized {\n     data: [u8],\n }"}, {"sha": "b5a97c610daeac7ca9efe9575efbdf6add7faf16", "filename": "src/test/rustdoc/trait-impl-items-links-and-anchors.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Ftrait-impl-items-links-and-anchors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Ftrait-impl-items-links-and-anchors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait-impl-items-links-and-anchors.rs?ref=3edec8055165d5107bc9695a1f5ded67cdeb7aea", "patch": "@@ -7,52 +7,52 @@ pub trait MyTrait {\n }\n \n impl MyTrait for String {\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedtype.Assoc-1\"]//a[@class=\"associatedtype\"]/@href' #associatedtype.Assoc\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedtype.Assoc-1\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc-1\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"associatedtype.Assoc-1\"]//a[@class=\"associatedtype\"]/@href' #associatedtype.Assoc\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"associatedtype.Assoc-1\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc-1\n     type Assoc = ();\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedconstant.VALUE-1\"]//a[@class=\"constant\"]/@href' #associatedconstant.VALUE\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedconstant.VALUE-1\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE-1\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"associatedconstant.VALUE-1\"]//a[@class=\"constant\"]/@href' #associatedconstant.VALUE\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"associatedconstant.VALUE-1\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE-1\n     const VALUE: u32 = 5;\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.trait_function\"]//a[@class=\"fnname\"]/@href' #tymethod.trait_function\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.trait_function\"]//a[@class=\"anchor\"]/@href' #method.trait_function\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"method.trait_function\"]//a[@class=\"fnname\"]/@href' #tymethod.trait_function\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"method.trait_function\"]//a[@class=\"anchor\"]/@href' #method.trait_function\n     fn trait_function(&self) {}\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.defaulted_override-1\"]//a[@class=\"fnname\"]/@href' #method.defaulted_override\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.defaulted_override-1\"]//a[@class=\"anchor\"]/@href' #method.defaulted_override-1\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"method.defaulted_override-1\"]//a[@class=\"fnname\"]/@href' #method.defaulted_override\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"method.defaulted_override-1\"]//a[@class=\"anchor\"]/@href' #method.defaulted_override-1\n     fn defaulted_override(&self) {}\n }\n \n impl MyTrait for Vec<u8> {\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedtype.Assoc-2\"]//a[@class=\"associatedtype\"]/@href' #associatedtype.Assoc\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedtype.Assoc-2\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc-2\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"associatedtype.Assoc-2\"]//a[@class=\"associatedtype\"]/@href' #associatedtype.Assoc\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"associatedtype.Assoc-2\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc-2\n     type Assoc = ();\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedconstant.VALUE-2\"]//a[@class=\"constant\"]/@href' #associatedconstant.VALUE\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedconstant.VALUE-2\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE-2\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"associatedconstant.VALUE-2\"]//a[@class=\"constant\"]/@href' #associatedconstant.VALUE\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"associatedconstant.VALUE-2\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE-2\n     const VALUE: u32 = 5;\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.trait_function\"]//a[@class=\"fnname\"]/@href' #tymethod.trait_function\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.trait_function-1\"]//a[@class=\"anchor\"]/@href' #method.trait_function-1\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"method.trait_function\"]//a[@class=\"fnname\"]/@href' #tymethod.trait_function\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"method.trait_function-1\"]//a[@class=\"anchor\"]/@href' #method.trait_function-1\n     fn trait_function(&self) {}\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.defaulted_override-2\"]//a[@class=\"fnname\"]/@href' #method.defaulted_override\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.defaulted_override-2\"]//a[@class=\"anchor\"]/@href' #method.defaulted_override-2\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"method.defaulted_override-2\"]//a[@class=\"fnname\"]/@href' #method.defaulted_override\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"method.defaulted_override-2\"]//a[@class=\"anchor\"]/@href' #method.defaulted_override-2\n     fn defaulted_override(&self) {}\n }\n \n impl MyTrait for MyStruct {\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedtype.Assoc-3\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc-3\n-    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"associatedtype.Assoc\"]//a[@class=\"associatedtype\"]/@href' trait.MyTrait.html#associatedtype.Assoc\n-    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"associatedtype.Assoc\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"associatedtype.Assoc-3\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc-3\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//*[@id=\"associatedtype.Assoc\"]//a[@class=\"associatedtype\"]/@href' trait.MyTrait.html#associatedtype.Assoc\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//*[@id=\"associatedtype.Assoc\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc\n     type Assoc = bool;\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedconstant.VALUE-3\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE-3\n-    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"associatedconstant.VALUE\"]//a[@class=\"constant\"]/@href' trait.MyTrait.html#associatedconstant.VALUE\n-    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"associatedconstant.VALUE\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"associatedconstant.VALUE-3\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE-3\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//*[@id=\"associatedconstant.VALUE\"]//a[@class=\"constant\"]/@href' trait.MyTrait.html#associatedconstant.VALUE\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//*[@id=\"associatedconstant.VALUE\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE\n     const VALUE: u32 = 20;\n-    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"method.trait_function\"]//a[@class=\"fnname\"]/@href' trait.MyTrait.html#tymethod.trait_function\n-    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"method.trait_function\"]//a[@class=\"anchor\"]/@href' #method.trait_function\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//*[@id=\"method.trait_function\"]//a[@class=\"fnname\"]/@href' trait.MyTrait.html#tymethod.trait_function\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//*[@id=\"method.trait_function\"]//a[@class=\"anchor\"]/@href' #method.trait_function\n     fn trait_function(&self) {}\n-    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"method.defaulted_override\"]//a[@class=\"fnname\"]/@href' trait.MyTrait.html#method.defaulted_override\n-    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"method.defaulted_override\"]//a[@class=\"anchor\"]/@href' #method.defaulted_override\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//*[@id=\"method.defaulted_override\"]//a[@class=\"fnname\"]/@href' trait.MyTrait.html#method.defaulted_override\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//*[@id=\"method.defaulted_override\"]//a[@class=\"anchor\"]/@href' #method.defaulted_override\n     fn defaulted_override(&self) {}\n-    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"method.defaulted\"]//a[@class=\"fnname\"]/@href' trait.MyTrait.html#method.defaulted\n-    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"method.defaulted\"]//a[@class=\"anchor\"]/@href' #method.defaulted\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//*[@id=\"method.defaulted\"]//a[@class=\"fnname\"]/@href' trait.MyTrait.html#method.defaulted\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//*[@id=\"method.defaulted\"]//a[@class=\"anchor\"]/@href' #method.defaulted\n }\n \n pub struct MyStruct;"}, {"sha": "ae866deba1ef039e488b75b5863f4d8a8e4d5b8e", "filename": "src/test/rustdoc/version-separator-without-source.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fversion-separator-without-source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fversion-separator-without-source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fversion-separator-without-source.rs?ref=3edec8055165d5107bc9695a1f5ded67cdeb7aea", "patch": "@@ -16,8 +16,8 @@ pub fn foo() {}\n pub struct Bar;\n \n impl Bar {\n-    // @has - '//div[@id=\"method.bar\"]/*[@class=\"rightside\"]' '2.0'\n-    // @!has - '//div[@id=\"method.bar\"]/*[@class=\"rightside\"]' '2.0 \u00b7'\n+    // @has - '//*[@id=\"method.bar\"]/*[@class=\"rightside\"]' '2.0'\n+    // @!has - '//*[@id=\"method.bar\"]/*[@class=\"rightside\"]' '2.0 \u00b7'\n     #[stable(feature = \"foobar\", since = \"2.0\")]\n     pub fn bar() {}\n }"}, {"sha": "3150a8ea05f41f321dde58bbe2dded183deead48", "filename": "src/test/rustdoc/where-clause-order.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fwhere-clause-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edec8055165d5107bc9695a1f5ded67cdeb7aea/src%2Ftest%2Frustdoc%2Fwhere-clause-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fwhere-clause-order.rs?ref=3edec8055165d5107bc9695a1f5ded67cdeb7aea", "patch": "@@ -1,15 +1,19 @@\n #![crate_name = \"foo\"]\n \n pub trait SomeTrait<Rhs = Self>\n-where Rhs: ?Sized\n-{}\n+where\n+    Rhs: ?Sized,\n+{\n+}\n \n // @has 'foo/trait.SomeTrait.html'\n-// @has - \"//div[@id='impl-SomeTrait%3C(A%2C%20B%2C%20C%2C%20D%2C%20E)%3E-for-(A%2C%20B%2C%20C%2C%20D%2C%20E)']/h3\" \"impl<A, B, C, D, E> SomeTrait<(A, B, C, D, E)> for (A, B, C, D, E) where A: PartialOrd<A> + PartialEq<A>, B: PartialOrd<B> + PartialEq<B>, C: PartialOrd<C> + PartialEq<C>, D: PartialOrd<D> + PartialEq<D>, E: PartialOrd<E> + PartialEq<E> + ?Sized, \"\n-impl<A, B, C, D, E> SomeTrait<(A, B, C, D, E)> for (A, B, C, D, E) where\n+// @has - \"//*[@id='impl-SomeTrait%3C(A%2C%20B%2C%20C%2C%20D%2C%20E)%3E-for-(A%2C%20B%2C%20C%2C%20D%2C%20E)']/h3\" \"impl<A, B, C, D, E> SomeTrait<(A, B, C, D, E)> for (A, B, C, D, E) where A: PartialOrd<A> + PartialEq<A>, B: PartialOrd<B> + PartialEq<B>, C: PartialOrd<C> + PartialEq<C>, D: PartialOrd<D> + PartialEq<D>, E: PartialOrd<E> + PartialEq<E> + ?Sized, \"\n+impl<A, B, C, D, E> SomeTrait<(A, B, C, D, E)> for (A, B, C, D, E)\n+where\n     A: PartialOrd<A> + PartialEq<A>,\n     B: PartialOrd<B> + PartialEq<B>,\n     C: PartialOrd<C> + PartialEq<C>,\n     D: PartialOrd<D> + PartialEq<D>,\n-    E: PartialOrd<E> + PartialEq<E> + ?Sized\n-{}\n+    E: PartialOrd<E> + PartialEq<E> + ?Sized,\n+{\n+}"}]}