{"sha": "9c87acab4d790e833f25f0af2f67d9f18a26a4af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljODdhY2FiNGQ3OTBlODMzZjI1ZjBhZjJmNjdkOWYxOGEyNmE0YWY=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-10-27T05:46:16Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-10-27T06:06:59Z"}, "message": "Don't fail to build a manifest if a tarball is missing", "tree": {"sha": "bbd86c9f9be8bc9f14a32c8686061f4ad2363a12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbd86c9f9be8bc9f14a32c8686061f4ad2363a12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c87acab4d790e833f25f0af2f67d9f18a26a4af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c87acab4d790e833f25f0af2f67d9f18a26a4af", "html_url": "https://github.com/rust-lang/rust/commit/9c87acab4d790e833f25f0af2f67d9f18a26a4af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c87acab4d790e833f25f0af2f67d9f18a26a4af/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1855aff8d78e74a7ec5140dbd7bd18fc3566095a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1855aff8d78e74a7ec5140dbd7bd18fc3566095a", "html_url": "https://github.com/rust-lang/rust/commit/1855aff8d78e74a7ec5140dbd7bd18fc3566095a"}], "stats": {"total": 63, "additions": 37, "deletions": 26}, "files": [{"sha": "5f680cafcca3e2b1946d351199525cbace7f29fe", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 37, "deletions": 26, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/9c87acab4d790e833f25f0af2f67d9f18a26a4af/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c87acab4d790e833f25f0af2f67d9f18a26a4af/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=9c87acab4d790e833f25f0af2f67d9f18a26a4af", "patch": "@@ -11,7 +11,6 @@\n extern crate toml;\n #[macro_use]\n extern crate serde_derive;\n-extern crate serde;\n \n use std::collections::BTreeMap;\n use std::env;\n@@ -175,9 +174,9 @@ struct Builder {\n     digests: BTreeMap<String, String>,\n     s3_address: String,\n     date: String,\n-    rust_version: String,\n-    cargo_version: String,\n-    rls_version: String,\n+    rust_version: Option<String>,\n+    cargo_version: Option<String>,\n+    rls_version: Option<String>,\n     rust_git_commit_hash: Option<String>,\n     cargo_git_commit_hash: Option<String>,\n     rls_git_commit_hash: Option<String>,\n@@ -205,9 +204,9 @@ fn main() {\n         digests: BTreeMap::new(),\n         s3_address,\n         date,\n-        rust_version: String::new(),\n-        cargo_version: String::new(),\n-        rls_version: String::new(),\n+        rust_version: None,\n+        cargo_version: None,\n+        rls_version: None,\n         rust_git_commit_hash: None,\n         cargo_git_commit_hash: None,\n         rls_git_commit_hash: None,\n@@ -258,10 +257,17 @@ impl Builder {\n         self.package(\"rls-preview\", &mut manifest.pkg, HOSTS);\n         self.package(\"rust-analysis\", &mut manifest.pkg, TARGETS);\n \n-        manifest.renames.insert(\"rls\".to_owned(), Rename { to: \"rls-preview\".to_owned() });\n+        let rls_present = manifest.pkg.contains_key(\"rls-preview\");\n+\n+        if rls_present {\n+            manifest.renames.insert(\"rls\".to_owned(), Rename { to: \"rls-preview\".to_owned() });\n+        }\n \n         let mut pkg = Package {\n-            version: self.cached_version(\"rust\").to_string(),\n+            version: self.cached_version(\"rust\")\n+                         .as_ref()\n+                         .expect(\"Couldn't find Rust version\")\n+                         .clone(),\n             git_commit_hash: self.cached_git_commit_hash(\"rust\").clone(),\n             target: BTreeMap::new(),\n         };\n@@ -294,10 +300,12 @@ impl Builder {\n                 });\n             }\n \n-            extensions.push(Component {\n-                pkg: \"rls-preview\".to_string(),\n-                target: host.to_string(),\n-            });\n+            if rls_present {\n+                extensions.push(Component {\n+                    pkg: \"rls-preview\".to_string(),\n+                    target: host.to_string(),\n+                });\n+            }\n             extensions.push(Component {\n                 pkg: \"rust-analysis\".to_string(),\n                 target: host.to_string(),\n@@ -334,6 +342,14 @@ impl Builder {\n                pkgname: &str,\n                dst: &mut BTreeMap<String, Package>,\n                targets: &[&str]) {\n+        let version = match *self.cached_version(pkgname) {\n+            Some(ref version) => version.clone(),\n+            None => {\n+                println!(\"Skipping package {}\", pkgname);\n+                return;\n+            }\n+        };\n+\n         let targets = targets.iter().map(|name| {\n             let filename = self.filename(pkgname, name);\n             let digest = match self.digests.remove(&filename) {\n@@ -355,7 +371,7 @@ impl Builder {\n         }).collect();\n \n         dst.insert(pkgname.to_string(), Package {\n-            version: self.cached_version(pkgname).to_string(),\n+            version,\n             git_commit_hash: self.cached_git_commit_hash(pkgname).clone(),\n             target: targets,\n         });\n@@ -380,7 +396,7 @@ impl Builder {\n         }\n     }\n \n-    fn cached_version(&self, component: &str) -> &str {\n+    fn cached_version(&self, component: &str) -> &Option<String> {\n         if component == \"cargo\" {\n             &self.cargo_version\n         } else if component == \"rls\" || component == \"rls-preview\" {\n@@ -400,21 +416,20 @@ impl Builder {\n         }\n     }\n \n-    fn version(&self, component: &str, target: &str) -> String {\n+    fn version(&self, component: &str, target: &str) -> Option<String> {\n         let mut cmd = Command::new(\"tar\");\n         let filename = self.filename(component, target);\n         cmd.arg(\"xf\")\n            .arg(self.input.join(&filename))\n            .arg(format!(\"{}/version\", filename.replace(\".tar.gz\", \"\")))\n            .arg(\"-O\");\n         let output = t!(cmd.output());\n-        if !output.status.success() {\n-            panic!(\"failed to learn version:\\n\\n{:?}\\n\\n{}\\n\\n{}\",\n-                   cmd,\n-                   String::from_utf8_lossy(&output.stdout),\n-                   String::from_utf8_lossy(&output.stderr));\n+        if output.status.success() {\n+            Some(String::from_utf8_lossy(&output.stdout).trim().to_string())\n+        } else {\n+            // Perhaps we didn't build this package.\n+            None\n         }\n-        String::from_utf8_lossy(&output.stdout).trim().to_string()\n     }\n \n     fn git_commit_hash(&self, component: &str, target: &str) -> Option<String> {\n@@ -428,10 +443,6 @@ impl Builder {\n         if output.status.success() {\n             Some(String::from_utf8_lossy(&output.stdout).trim().to_string())\n         } else {\n-            // This is always called after `.version()`.\n-            // So if that didn\u2019t fail but this does,\n-            // that\u2019s very probably because the tarball is valid\n-            // but does not contain a `git-commit-hash` file.\n             None\n         }\n     }"}]}