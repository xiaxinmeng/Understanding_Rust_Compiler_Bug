{"sha": "302cf6db74102e0a0438d83ec7f68085cf931bb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwMmNmNmRiNzQxMDJlMGEwNDM4ZDgzZWM3ZjY4MDg1Y2Y5MzFiYjk=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-11-12T23:27:53Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-11-12T23:27:53Z"}, "message": "Tweak non-char/numeric in range pattern diagnostic", "tree": {"sha": "ce79f635fe28df6a476408cc4f43c1b20ca17c1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce79f635fe28df6a476408cc4f43c1b20ca17c1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/302cf6db74102e0a0438d83ec7f68085cf931bb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/302cf6db74102e0a0438d83ec7f68085cf931bb9", "html_url": "https://github.com/rust-lang/rust/commit/302cf6db74102e0a0438d83ec7f68085cf931bb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/302cf6db74102e0a0438d83ec7f68085cf931bb9/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dda3ee9314cfee9c4e30a7b17dcd5ebdec081a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dda3ee9314cfee9c4e30a7b17dcd5ebdec081a7", "html_url": "https://github.com/rust-lang/rust/commit/5dda3ee9314cfee9c4e30a7b17dcd5ebdec081a7"}], "stats": {"total": 174, "additions": 94, "deletions": 80}, "files": [{"sha": "e7ec176614d330ee00a0301c395c82b5e1a3fcbe", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/302cf6db74102e0a0438d83ec7f68085cf931bb9/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/302cf6db74102e0a0438d83ec7f68085cf931bb9/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=302cf6db74102e0a0438d83ec7f68085cf931bb9", "patch": "@@ -380,9 +380,38 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 E0029,\n                 \"only char and numeric types are allowed in range patterns\"\n             );\n-            err.span_label(span, \"ranges require char or numeric types\");\n-            err.note(&format!(\"start type: {}\", self.ty_to_string(lhs_ty)));\n-            err.note(&format!(\"end type: {}\", self.ty_to_string(rhs_ty)));\n+            if !lhs_compat && !rhs_compat {\n+                err.span_label(\n+                    begin.span,\n+                    &format!(\"this is of type `{}` but it should be `char` or numeric\", lhs_ty)\n+                );\n+                err.span_label(\n+                    end.span,\n+                    &format!(\"this is of type `{}` but it should be `char` or numeric\", rhs_ty)\n+                );\n+            } else if !lhs_compat {\n+                err.span_label(\n+                    begin.span,\n+                    &format!(\"this is of type `{}` but it should be `char` or numeric\", lhs_ty)\n+                );\n+                if !rhs_ty.references_error() {\n+                    err.span_label(\n+                        end.span,\n+                        &format!(\"this is of type `{}`\", rhs_ty)\n+                    );\n+                }\n+            } else {\n+                err.span_label(\n+                    end.span,\n+                    &format!(\"this is of type `{}` but it should be `char` or numeric\", rhs_ty)\n+                );\n+                if !lhs_ty.references_error() {\n+                    err.span_label(\n+                        begin.span,\n+                        &format!(\"this is of type `{}`\", lhs_ty)\n+                    );\n+                }\n+            }\n             if self.tcx.sess.teach(&err.get_code().unwrap()) {\n                 err.note(\n                     \"In a match expression, only numbers and characters can be matched \\"}, {"sha": "ec146ca86f596e446a67ed524e3a381cd57a7c77", "filename": "src/test/ui/error-codes/E0029-teach.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/302cf6db74102e0a0438d83ec7f68085cf931bb9/src%2Ftest%2Fui%2Ferror-codes%2FE0029-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/302cf6db74102e0a0438d83ec7f68085cf931bb9/src%2Ftest%2Fui%2Ferror-codes%2FE0029-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0029-teach.stderr?ref=302cf6db74102e0a0438d83ec7f68085cf931bb9", "patch": "@@ -2,10 +2,11 @@ error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/E0029-teach.rs:7:9\n    |\n LL |         \"hello\" ..= \"world\" => {}\n-   |         ^^^^^^^^^^^^^^^^^^^ ranges require char or numeric types\n+   |         -------^^^^^-------\n+   |         |           |\n+   |         |           this is of type `&'static str` but it should be `char` or numeric\n+   |         this is of type `&'static str` but it should be `char` or numeric\n    |\n-   = note: start type: &'static str\n-   = note: end type: &'static str\n    = note: In a match expression, only numbers and characters can be matched against a range. This is because the compiler checks that the range is non-empty at compile-time, and is unable to evaluate arbitrary comparison functions. If you want to capture values of an orderable type between two end-points, you can use a guard.\n \n error: aborting due to previous error"}, {"sha": "e54722ae7b9b8c04276bc0ca3ebadaeba5c69068", "filename": "src/test/ui/error-codes/E0029.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/302cf6db74102e0a0438d83ec7f68085cf931bb9/src%2Ftest%2Fui%2Ferror-codes%2FE0029.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/302cf6db74102e0a0438d83ec7f68085cf931bb9/src%2Ftest%2Fui%2Ferror-codes%2FE0029.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0029.stderr?ref=302cf6db74102e0a0438d83ec7f68085cf931bb9", "patch": "@@ -2,10 +2,10 @@ error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/E0029.rs:5:9\n    |\n LL |         \"hello\" ..= \"world\" => {}\n-   |         ^^^^^^^^^^^^^^^^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: &'static str\n-   = note: end type: &'static str\n+   |         -------^^^^^-------\n+   |         |           |\n+   |         |           this is of type `&'static str` but it should be `char` or numeric\n+   |         this is of type `&'static str` but it should be `char` or numeric\n \n error: aborting due to previous error\n "}, {"sha": "252d4cbf162415f67159b94f0a9a5af59cc4aeb6", "filename": "src/test/ui/match/match-range-fail.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/302cf6db74102e0a0438d83ec7f68085cf931bb9/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/302cf6db74102e0a0438d83ec7f68085cf931bb9/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.rs?ref=302cf6db74102e0a0438d83ec7f68085cf931bb9", "patch": "@@ -3,15 +3,16 @@ fn main() {\n         \"bar\" ..= \"foo\" => { }\n     };\n     //~^^ ERROR only char and numeric types are allowed in range\n-    //~| start type: &'static str\n-    //~| end type: &'static str\n \n     match \"wow\" {\n         10 ..= \"what\" => ()\n     };\n     //~^^ ERROR only char and numeric types are allowed in range\n-    //~| start type: {integer}\n-    //~| end type: &'static str\n+\n+    match \"wow\" {\n+        true ..= \"what\" => {}\n+    };\n+    //~^^ ERROR only char and numeric types are allowed in range\n \n     match 5 {\n         'c' ..= 100 => { }"}, {"sha": "25fa9c2f6182e8e58a47a1fe31dfc03bb16a98ba", "filename": "src/test/ui/match/match-range-fail.stderr", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/302cf6db74102e0a0438d83ec7f68085cf931bb9/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/302cf6db74102e0a0438d83ec7f68085cf931bb9/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.stderr?ref=302cf6db74102e0a0438d83ec7f68085cf931bb9", "patch": "@@ -2,30 +2,38 @@ error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/match-range-fail.rs:3:9\n    |\n LL |         \"bar\" ..= \"foo\" => { }\n-   |         ^^^^^^^^^^^^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: &'static str\n-   = note: end type: &'static str\n+   |         -----^^^^^-----\n+   |         |         |\n+   |         |         this is of type `&'static str` but it should be `char` or numeric\n+   |         this is of type `&'static str` but it should be `char` or numeric\n \n error[E0029]: only char and numeric types are allowed in range patterns\n-  --> $DIR/match-range-fail.rs:10:16\n+  --> $DIR/match-range-fail.rs:8:16\n    |\n LL |         10 ..= \"what\" => ()\n-   |                ^^^^^^ ranges require char or numeric types\n+   |         --     ^^^^^^ this is of type `&'static str` but it should be `char` or numeric\n+   |         |\n+   |         this is of type `{integer}`\n+\n+error[E0029]: only char and numeric types are allowed in range patterns\n+  --> $DIR/match-range-fail.rs:13:9\n    |\n-   = note: start type: {integer}\n-   = note: end type: &'static str\n+LL |         true ..= \"what\" => {}\n+   |         ----^^^^^------\n+   |         |        |\n+   |         |        this is of type `&'static str` but it should be `char` or numeric\n+   |         this is of type `bool` but it should be `char` or numeric\n \n error[E0308]: mismatched types\n-  --> $DIR/match-range-fail.rs:17:9\n+  --> $DIR/match-range-fail.rs:18:9\n    |\n LL |         'c' ..= 100 => { }\n    |         ^^^^^^^^^^^ expected integer, found char\n    |\n    = note: expected type `{integer}`\n               found type `char`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0029, E0308.\n For more information about an error, try `rustc --explain E0029`."}, {"sha": "160ab18e34a54a1657714a9558bbbe2f3499f377", "filename": "src/test/ui/parser/recover-range-pats.stderr", "status": "modified", "additions": 24, "deletions": 48, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/302cf6db74102e0a0438d83ec7f68085cf931bb9/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/302cf6db74102e0a0438d83ec7f68085cf931bb9/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr?ref=302cf6db74102e0a0438d83ec7f68085cf931bb9", "patch": "@@ -401,19 +401,17 @@ error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:19:12\n    |\n LL |     if let true..Y = 0 {}\n-   |            ^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: bool\n-   = note: end type: u8\n+   |            ^^^^  - this is of type `u8`\n+   |            |\n+   |            this is of type `bool` but it should be `char` or numeric\n \n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:20:15\n    |\n LL |     if let X..true = 0 {}\n-   |               ^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: u8\n-   = note: end type: bool\n+   |            -  ^^^^ this is of type `bool` but it should be `char` or numeric\n+   |            |\n+   |            this is of type `u8`\n \n error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:21:12\n@@ -437,19 +435,17 @@ error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:32:12\n    |\n LL |     if let true..=Y = 0 {}\n-   |            ^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: bool\n-   = note: end type: u8\n+   |            ^^^^   - this is of type `u8`\n+   |            |\n+   |            this is of type `bool` but it should be `char` or numeric\n \n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:33:16\n    |\n LL |     if let X..=true = 0 {}\n-   |                ^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: u8\n-   = note: end type: bool\n+   |            -   ^^^^ this is of type `bool` but it should be `char` or numeric\n+   |            |\n+   |            this is of type `u8`\n \n error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:34:12\n@@ -473,19 +469,17 @@ error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:45:12\n    |\n LL |     if let true...Y = 0 {}\n-   |            ^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: bool\n-   = note: end type: u8\n+   |            ^^^^   - this is of type `u8`\n+   |            |\n+   |            this is of type `bool` but it should be `char` or numeric\n \n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:47:16\n    |\n LL |     if let X...true = 0 {}\n-   |                ^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: u8\n-   = note: end type: bool\n+   |            -   ^^^^ this is of type `bool` but it should be `char` or numeric\n+   |            |\n+   |            this is of type `u8`\n \n error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:49:12\n@@ -509,10 +503,7 @@ error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:60:12\n    |\n LL |     if let true.. = 0 {}\n-   |            ^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: bool\n-   = note: end type: [type error]\n+   |            ^^^^ this is of type `bool` but it should be `char` or numeric\n \n error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:62:12\n@@ -527,10 +518,7 @@ error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:70:12\n    |\n LL |     if let true..= = 0 {}\n-   |            ^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: bool\n-   = note: end type: [type error]\n+   |            ^^^^ this is of type `bool` but it should be `char` or numeric\n \n error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:72:12\n@@ -545,10 +533,7 @@ error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:82:12\n    |\n LL |     if let true... = 0 {}\n-   |            ^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: bool\n-   = note: end type: [type error]\n+   |            ^^^^ this is of type `bool` but it should be `char` or numeric\n \n error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:85:12\n@@ -563,10 +548,7 @@ error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:94:14\n    |\n LL |     if let ..true = 0 {}\n-   |              ^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: [type error]\n-   = note: end type: bool\n+   |              ^^^^ this is of type `bool` but it should be `char` or numeric\n \n error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:96:12\n@@ -581,10 +563,7 @@ error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:104:15\n    |\n LL |     if let ..=true = 0 {}\n-   |               ^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: [type error]\n-   = note: end type: bool\n+   |               ^^^^ this is of type `bool` but it should be `char` or numeric\n \n error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:106:12\n@@ -599,10 +578,7 @@ error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:116:15\n    |\n LL |     if let ...true = 0 {}\n-   |               ^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: [type error]\n-   = note: end type: bool\n+   |               ^^^^ this is of type `bool` but it should be `char` or numeric\n \n error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:119:12"}, {"sha": "78768d282e7c44c1825afdefe05fa288325adba9", "filename": "src/test/ui/pattern/patkind-litrange-no-expr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/302cf6db74102e0a0438d83ec7f68085cf931bb9/src%2Ftest%2Fui%2Fpattern%2Fpatkind-litrange-no-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/302cf6db74102e0a0438d83ec7f68085cf931bb9/src%2Ftest%2Fui%2Fpattern%2Fpatkind-litrange-no-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpatkind-litrange-no-expr.stderr?ref=302cf6db74102e0a0438d83ec7f68085cf931bb9", "patch": "@@ -7,11 +7,11 @@ LL |     Arith = 1 + 1,\n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/patkind-litrange-no-expr.rs:20:13\n    |\n+LL |                 $( $value ..= 42 => Some($name::$variant), )* // PatKind::Range\n+   |                               -- this is of type `{integer}`\n+...\n LL |     Arith = 1 + 1,\n-   |             ^^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: {integer}\n-   = note: end type: {integer}\n+   |             ^^^^^ this is of type `_` but it should be `char` or numeric\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7a74a37021bdbe064fac8959030863db732bfc22", "filename": "src/test/ui/qualified/qualified-path-params.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/302cf6db74102e0a0438d83ec7f68085cf931bb9/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/302cf6db74102e0a0438d83ec7f68085cf931bb9/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.stderr?ref=302cf6db74102e0a0438d83ec7f68085cf931bb9", "patch": "@@ -8,10 +8,9 @@ error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/qualified-path-params.rs:22:15\n    |\n LL |         0 ..= <S as Tr>::A::f::<u8> => {}\n-   |               ^^^^^^^^^^^^^^^^^^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: {integer}\n-   = note: end type: fn() {S::f::<u8>}\n+   |         -     ^^^^^^^^^^^^^^^^^^^^^ this is of type `fn() {S::f::<u8>}` but it should be `char` or numeric\n+   |         |\n+   |         this is of type `{integer}`\n \n error: aborting due to 2 previous errors\n "}]}