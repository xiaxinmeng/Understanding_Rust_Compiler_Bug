{"sha": "86a686c4f71d208ecf8f7ee5a035b17a545d8b62", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2YTY4NmM0ZjcxZDIwOGVjZjhmN2VlNWEwMzViMTdhNTQ1ZDhiNjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-09-23T13:17:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-23T13:17:26Z"}, "message": "Auto merge of #36335 - mcarton:compiletest, r=GuillaumeGomez\n\nFix ICE test in compiletest fail-tests\n\nWhile working on Clippy which uses *compiletest*, I noticed that as long as all expected error are found, *compile-fail* tests will be marked *ok* even if there is an ICE. One function seems to have not been updated with JSON errors because ICEs are now reported like this:\n```json\n{\"message\":\"../src/librustc/ty/context.rs:161: Attempted to intern `_` which contains inference types/regions in the global type context\",\"code\":null,\"level\":\"error: internal compiler error\",\"spans\":[],\"children\":[],\"rendered\":null}\n```\nI don't think I can add a test for that.\n\nI guess:\nr? @nikomatsakis", "tree": {"sha": "5b80ce533d2d35b42bd0126dc59e5c9ecf796abc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b80ce533d2d35b42bd0126dc59e5c9ecf796abc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86a686c4f71d208ecf8f7ee5a035b17a545d8b62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86a686c4f71d208ecf8f7ee5a035b17a545d8b62", "html_url": "https://github.com/rust-lang/rust/commit/86a686c4f71d208ecf8f7ee5a035b17a545d8b62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86a686c4f71d208ecf8f7ee5a035b17a545d8b62/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2c53ea66bc1491ef125b35fa30c1cc890cde82c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2c53ea66bc1491ef125b35fa30c1cc890cde82c", "html_url": "https://github.com/rust-lang/rust/commit/f2c53ea66bc1491ef125b35fa30c1cc890cde82c"}, {"sha": "bfa34332833962e4991f508ac3ab4958fd9b64cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfa34332833962e4991f508ac3ab4958fd9b64cd", "html_url": "https://github.com/rust-lang/rust/commit/bfa34332833962e4991f508ac3ab4958fd9b64cd"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "4ae3c7d37db8dec202f82f0bf9f34cf2c3b49930", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/86a686c4f71d208ecf8f7ee5a035b17a545d8b62/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86a686c4f71d208ecf8f7ee5a035b17a545d8b62/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=86a686c4f71d208ecf8f7ee5a035b17a545d8b62", "patch": "@@ -868,7 +868,7 @@ pub fn eval_const_expr_partial<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n           debug!(\"const call({:?})\", call_args);\n           eval_const_expr_partial(tcx, &result, ty_hint, Some(&call_args))?\n       },\n-      hir::ExprLit(ref lit) => match lit_to_const(&lit.node, tcx, ety, lit.span) {\n+      hir::ExprLit(ref lit) => match lit_to_const(&lit.node, tcx, ety) {\n           Ok(val) => val,\n           Err(err) => signal!(e, err),\n       },\n@@ -1210,8 +1210,7 @@ fn cast_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, val: ConstVal, ty: ty::Ty)\n \n fn lit_to_const<'a, 'tcx>(lit: &ast::LitKind,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          ty_hint: Option<Ty<'tcx>>,\n-                          span: Span)\n+                          ty_hint: Option<Ty<'tcx>>)\n                           -> Result<ConstVal, ErrKind> {\n     use syntax::ast::*;\n     use syntax::ast::LitIntType::*;\n@@ -1245,21 +1244,22 @@ fn lit_to_const<'a, 'tcx>(lit: &ast::LitKind,\n         },\n \n         LitKind::Float(ref n, fty) => {\n-            Ok(Float(parse_float(n, Some(fty), span)))\n+            parse_float(n, Some(fty)).map(Float)\n         }\n         LitKind::FloatUnsuffixed(ref n) => {\n             let fty_hint = match ty_hint.map(|t| &t.sty) {\n                 Some(&ty::TyFloat(fty)) => Some(fty),\n                 _ => None\n             };\n-            Ok(Float(parse_float(n, fty_hint, span)))\n+            parse_float(n, fty_hint).map(Float)\n         }\n         LitKind::Bool(b) => Ok(Bool(b)),\n         LitKind::Char(c) => Ok(Char(c)),\n     }\n }\n \n-fn parse_float(num: &str, fty_hint: Option<ast::FloatTy>, span: Span) -> ConstFloat {\n+fn parse_float(num: &str, fty_hint: Option<ast::FloatTy>)\n+               -> Result<ConstFloat, ErrKind> {\n     let val = match fty_hint {\n         Some(ast::FloatTy::F32) => num.parse::<f32>().map(F32),\n         Some(ast::FloatTy::F64) => num.parse::<f64>().map(F64),\n@@ -1271,9 +1271,9 @@ fn parse_float(num: &str, fty_hint: Option<ast::FloatTy>, span: Span) -> ConstFl\n             })\n         }\n     };\n-    val.unwrap_or_else(|_| {\n+    val.map_err(|_| {\n         // FIXME(#31407) this is only necessary because float parsing is buggy\n-        span_bug!(span, \"could not evaluate float literal (see issue #31407)\");\n+        UnimplementedConstVal(\"could not evaluate float literal (see issue #31407)\")\n     })\n }\n "}, {"sha": "e3548d740717f6142fcb99794681820069d85520", "filename": "src/test/compile-fail/issue-31109.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86a686c4f71d208ecf8f7ee5a035b17a545d8b62/src%2Ftest%2Fcompile-fail%2Fissue-31109.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86a686c4f71d208ecf8f7ee5a035b17a545d8b62/src%2Ftest%2Fcompile-fail%2Fissue-31109.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-31109.rs?ref=86a686c4f71d208ecf8f7ee5a035b17a545d8b62", "patch": "@@ -11,5 +11,7 @@\n fn main() {\n     // FIXME(#31407) this error should go away, but in the meantime we test that it\n     // is accompanied by a somewhat useful error message.\n-    let _: f64 = 1234567890123456789012345678901234567890e-340; //~ ERROR could not evaluate float\n+    let _: f64 = 1234567890123456789012345678901234567890e-340;\n+    //~^ ERROR constant evaluation error\n+    //~| unimplemented constant expression: could not evaluate float literal\n }"}, {"sha": "34d86a65700388d16db6888c630385d5a6872bc6", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86a686c4f71d208ecf8f7ee5a035b17a545d8b62/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86a686c4f71d208ecf8f7ee5a035b17a545d8b62/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=86a686c4f71d208ecf8f7ee5a035b17a545d8b62", "patch": "@@ -978,7 +978,7 @@ actual:\\n\\\n \n     fn check_no_compiler_crash(&self, proc_res: &ProcRes) {\n         for line in proc_res.stderr.lines() {\n-            if line.starts_with(\"error: internal compiler error:\") {\n+            if line.contains(\"error: internal compiler error\") {\n                 self.fatal_proc_rec(\"compiler encountered internal error\", proc_res);\n             }\n         }"}]}