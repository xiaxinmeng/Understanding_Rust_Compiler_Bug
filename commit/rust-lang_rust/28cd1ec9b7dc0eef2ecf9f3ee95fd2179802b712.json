{"sha": "28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "node_id": "C_kwDOAAsO6NoAKDI4Y2QxZWM5YjdkYzBlZWYyZWNmOWYzZWU5NWZkMjE3OTgwMmI3MTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-23T05:05:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-23T05:05:23Z"}, "message": "Auto merge of #9688 - Alexendoo:msrv-tests, r=Manishearth\n\nMove MSRV tests into the lint specific test files\n\nThere are currently two ways MSRV tests are done in the ui test suite, adding a case to the `#![clippy::msrv = \"1.0\"]` `tests/ui/min_rust_version_attr.rs` or adding the two `msrv_1_xx` functions to the test file of the lint in question\n\nThis updates the clippy book to suggest the `msrv_1_xx` style, and replaces the tests in `tests/ui/min_rust_version_attr.rs` with ones of that style\n\nAlmost the entire diff is just moving stuff around as a result, I made sure to check the line numbers the lints are emitted at correspond with the right `msrv` case, so feel free to only skim that part\n\nchangelog: none", "tree": {"sha": "ccafaa0ca9e6944c71b03ea9e39ac724f5b86ac6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccafaa0ca9e6944c71b03ea9e39ac724f5b86ac6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "html_url": "https://github.com/rust-lang/rust/commit/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b62ef608d751925398ef33d1946acde2eab90d49", "url": "https://api.github.com/repos/rust-lang/rust/commits/b62ef608d751925398ef33d1946acde2eab90d49", "html_url": "https://github.com/rust-lang/rust/commit/b62ef608d751925398ef33d1946acde2eab90d49"}, {"sha": "815876d93f75c4d20c52cdd32f1a521ce306be63", "url": "https://api.github.com/repos/rust-lang/rust/commits/815876d93f75c4d20c52cdd32f1a521ce306be63", "html_url": "https://github.com/rust-lang/rust/commit/815876d93f75c4d20c52cdd32f1a521ce306be63"}], "stats": {"total": 1922, "additions": 1290, "deletions": 632}, "files": [{"sha": "3c3f368a529b15755ca687375d1becf2a635a8a0", "filename": "book/src/development/adding_lints.md", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/book%2Fsrc%2Fdevelopment%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/book%2Fsrc%2Fdevelopment%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Fadding_lints.md?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -478,8 +478,27 @@ impl<'tcx> LateLintPass<'tcx> for ManualStrip {\n ```\n \n Once the `msrv` is added to the lint, a relevant test case should be added to\n-`tests/ui/min_rust_version_attr.rs` which verifies that the lint isn't emitted\n-if the project's MSRV is lower.\n+the lint's test file, `tests/ui/manual_strip.rs` in this example. It should\n+have a case for the version below the MSRV and one with the same contents but\n+for the MSRV version itself.\n+\n+```rust\n+#![feature(custom_inner_attributes)]\n+\n+...\n+\n+fn msrv_1_44() {\n+    #![clippy::msrv = \"1.44\"]\n+\n+    /* something that would trigger the lint */\n+}\n+\n+fn msrv_1_45() {\n+    #![clippy::msrv = \"1.45\"]\n+\n+    /* something that would trigger the lint */\n+}\n+```\n \n As a last step, the lint should be added to the lint documentation. This is done\n in `clippy_lints/src/utils/conf.rs`:"}, {"sha": "e6bf944c7a5ecbb3cc08836e9a236c82b34424b9", "filename": "tests/ui/cast_abs_to_unsigned.fixed", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fcast_abs_to_unsigned.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fcast_abs_to_unsigned.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_abs_to_unsigned.fixed?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,6 +1,8 @@\n // run-rustfix\n+\n+#![feature(custom_inner_attributes)]\n #![warn(clippy::cast_abs_to_unsigned)]\n-#![allow(clippy::uninlined_format_args)]\n+#![allow(clippy::uninlined_format_args, unused)]\n \n fn main() {\n     let x: i32 = -42;\n@@ -30,3 +32,17 @@ fn main() {\n \n     let _ = (x as i64 - y as i64).unsigned_abs() as u32;\n }\n+\n+fn msrv_1_50() {\n+    #![clippy::msrv = \"1.50\"]\n+\n+    let x: i32 = 10;\n+    assert_eq!(10u32, x.abs() as u32);\n+}\n+\n+fn msrv_1_51() {\n+    #![clippy::msrv = \"1.51\"]\n+\n+    let x: i32 = 10;\n+    assert_eq!(10u32, x.unsigned_abs());\n+}"}, {"sha": "c87320b5209db8165714a1a1f7f2b837b6380287", "filename": "tests/ui/cast_abs_to_unsigned.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fcast_abs_to_unsigned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fcast_abs_to_unsigned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_abs_to_unsigned.rs?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,6 +1,8 @@\n // run-rustfix\n+\n+#![feature(custom_inner_attributes)]\n #![warn(clippy::cast_abs_to_unsigned)]\n-#![allow(clippy::uninlined_format_args)]\n+#![allow(clippy::uninlined_format_args, unused)]\n \n fn main() {\n     let x: i32 = -42;\n@@ -30,3 +32,17 @@ fn main() {\n \n     let _ = (x as i64 - y as i64).abs() as u32;\n }\n+\n+fn msrv_1_50() {\n+    #![clippy::msrv = \"1.50\"]\n+\n+    let x: i32 = 10;\n+    assert_eq!(10u32, x.abs() as u32);\n+}\n+\n+fn msrv_1_51() {\n+    #![clippy::msrv = \"1.51\"]\n+\n+    let x: i32 = 10;\n+    assert_eq!(10u32, x.abs() as u32);\n+}"}, {"sha": "1b39c554b03845d12d1c13cdfabfc23c48949a79", "filename": "tests/ui/cast_abs_to_unsigned.stderr", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fcast_abs_to_unsigned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fcast_abs_to_unsigned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_abs_to_unsigned.stderr?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,106 +1,112 @@\n error: casting the result of `i32::abs()` to u32\n-  --> $DIR/cast_abs_to_unsigned.rs:7:18\n+  --> $DIR/cast_abs_to_unsigned.rs:9:18\n    |\n LL |     let y: u32 = x.abs() as u32;\n    |                  ^^^^^^^^^^^^^^ help: replace with: `x.unsigned_abs()`\n    |\n    = note: `-D clippy::cast-abs-to-unsigned` implied by `-D warnings`\n \n error: casting the result of `i32::abs()` to usize\n-  --> $DIR/cast_abs_to_unsigned.rs:11:20\n+  --> $DIR/cast_abs_to_unsigned.rs:13:20\n    |\n LL |     let _: usize = a.abs() as usize;\n    |                    ^^^^^^^ help: replace with: `a.unsigned_abs()`\n \n error: casting the result of `i32::abs()` to usize\n-  --> $DIR/cast_abs_to_unsigned.rs:12:20\n+  --> $DIR/cast_abs_to_unsigned.rs:14:20\n    |\n LL |     let _: usize = a.abs() as _;\n    |                    ^^^^^^^ help: replace with: `a.unsigned_abs()`\n \n error: casting the result of `i32::abs()` to usize\n-  --> $DIR/cast_abs_to_unsigned.rs:13:13\n+  --> $DIR/cast_abs_to_unsigned.rs:15:13\n    |\n LL |     let _ = a.abs() as usize;\n    |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n \n error: casting the result of `i64::abs()` to usize\n-  --> $DIR/cast_abs_to_unsigned.rs:16:13\n+  --> $DIR/cast_abs_to_unsigned.rs:18:13\n    |\n LL |     let _ = a.abs() as usize;\n    |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n \n error: casting the result of `i64::abs()` to u8\n-  --> $DIR/cast_abs_to_unsigned.rs:17:13\n+  --> $DIR/cast_abs_to_unsigned.rs:19:13\n    |\n LL |     let _ = a.abs() as u8;\n    |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n \n error: casting the result of `i64::abs()` to u16\n-  --> $DIR/cast_abs_to_unsigned.rs:18:13\n+  --> $DIR/cast_abs_to_unsigned.rs:20:13\n    |\n LL |     let _ = a.abs() as u16;\n    |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n \n error: casting the result of `i64::abs()` to u32\n-  --> $DIR/cast_abs_to_unsigned.rs:19:13\n+  --> $DIR/cast_abs_to_unsigned.rs:21:13\n    |\n LL |     let _ = a.abs() as u32;\n    |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n \n error: casting the result of `i64::abs()` to u64\n-  --> $DIR/cast_abs_to_unsigned.rs:20:13\n+  --> $DIR/cast_abs_to_unsigned.rs:22:13\n    |\n LL |     let _ = a.abs() as u64;\n    |             ^^^^^^^^^^^^^^ help: replace with: `a.unsigned_abs()`\n \n error: casting the result of `i64::abs()` to u128\n-  --> $DIR/cast_abs_to_unsigned.rs:21:13\n+  --> $DIR/cast_abs_to_unsigned.rs:23:13\n    |\n LL |     let _ = a.abs() as u128;\n    |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n \n error: casting the result of `isize::abs()` to usize\n-  --> $DIR/cast_abs_to_unsigned.rs:24:13\n+  --> $DIR/cast_abs_to_unsigned.rs:26:13\n    |\n LL |     let _ = a.abs() as usize;\n    |             ^^^^^^^^^^^^^^^^ help: replace with: `a.unsigned_abs()`\n \n error: casting the result of `isize::abs()` to u8\n-  --> $DIR/cast_abs_to_unsigned.rs:25:13\n+  --> $DIR/cast_abs_to_unsigned.rs:27:13\n    |\n LL |     let _ = a.abs() as u8;\n    |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n \n error: casting the result of `isize::abs()` to u16\n-  --> $DIR/cast_abs_to_unsigned.rs:26:13\n+  --> $DIR/cast_abs_to_unsigned.rs:28:13\n    |\n LL |     let _ = a.abs() as u16;\n    |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n \n error: casting the result of `isize::abs()` to u32\n-  --> $DIR/cast_abs_to_unsigned.rs:27:13\n+  --> $DIR/cast_abs_to_unsigned.rs:29:13\n    |\n LL |     let _ = a.abs() as u32;\n    |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n \n error: casting the result of `isize::abs()` to u64\n-  --> $DIR/cast_abs_to_unsigned.rs:28:13\n+  --> $DIR/cast_abs_to_unsigned.rs:30:13\n    |\n LL |     let _ = a.abs() as u64;\n    |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n \n error: casting the result of `isize::abs()` to u128\n-  --> $DIR/cast_abs_to_unsigned.rs:29:13\n+  --> $DIR/cast_abs_to_unsigned.rs:31:13\n    |\n LL |     let _ = a.abs() as u128;\n    |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n \n error: casting the result of `i64::abs()` to u32\n-  --> $DIR/cast_abs_to_unsigned.rs:31:13\n+  --> $DIR/cast_abs_to_unsigned.rs:33:13\n    |\n LL |     let _ = (x as i64 - y as i64).abs() as u32;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `(x as i64 - y as i64).unsigned_abs()`\n \n-error: aborting due to 17 previous errors\n+error: casting the result of `i32::abs()` to u32\n+  --> $DIR/cast_abs_to_unsigned.rs:47:23\n+   |\n+LL |     assert_eq!(10u32, x.abs() as u32);\n+   |                       ^^^^^^^^^^^^^^ help: replace with: `x.unsigned_abs()`\n+\n+error: aborting due to 18 previous errors\n "}, {"sha": "af13b755e310a55224e5048af11931621070106a", "filename": "tests/ui/cast_lossless_bool.fixed", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fcast_lossless_bool.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fcast_lossless_bool.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_bool.fixed?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n \n+#![feature(custom_inner_attributes)]\n #![allow(dead_code)]\n #![warn(clippy::cast_lossless)]\n \n@@ -40,3 +41,15 @@ mod cast_lossless_in_impl {\n         }\n     }\n }\n+\n+fn msrv_1_27() {\n+    #![clippy::msrv = \"1.27\"]\n+\n+    let _ = true as u8;\n+}\n+\n+fn msrv_1_28() {\n+    #![clippy::msrv = \"1.28\"]\n+\n+    let _ = u8::from(true);\n+}"}, {"sha": "3b06af899c60d0a5118b671a8a7066714da9a36d", "filename": "tests/ui/cast_lossless_bool.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fcast_lossless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fcast_lossless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_bool.rs?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n \n+#![feature(custom_inner_attributes)]\n #![allow(dead_code)]\n #![warn(clippy::cast_lossless)]\n \n@@ -40,3 +41,15 @@ mod cast_lossless_in_impl {\n         }\n     }\n }\n+\n+fn msrv_1_27() {\n+    #![clippy::msrv = \"1.27\"]\n+\n+    let _ = true as u8;\n+}\n+\n+fn msrv_1_28() {\n+    #![clippy::msrv = \"1.28\"]\n+\n+    let _ = true as u8;\n+}"}, {"sha": "768b033d10a28add2d6b2383346567d39edd0fc6", "filename": "tests/ui/cast_lossless_bool.stderr", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fcast_lossless_bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fcast_lossless_bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_bool.stderr?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,82 +1,88 @@\n error: casting `bool` to `u8` is more cleanly stated with `u8::from(_)`\n-  --> $DIR/cast_lossless_bool.rs:8:13\n+  --> $DIR/cast_lossless_bool.rs:9:13\n    |\n LL |     let _ = true as u8;\n    |             ^^^^^^^^^^ help: try: `u8::from(true)`\n    |\n    = note: `-D clippy::cast-lossless` implied by `-D warnings`\n \n error: casting `bool` to `u16` is more cleanly stated with `u16::from(_)`\n-  --> $DIR/cast_lossless_bool.rs:9:13\n+  --> $DIR/cast_lossless_bool.rs:10:13\n    |\n LL |     let _ = true as u16;\n    |             ^^^^^^^^^^^ help: try: `u16::from(true)`\n \n error: casting `bool` to `u32` is more cleanly stated with `u32::from(_)`\n-  --> $DIR/cast_lossless_bool.rs:10:13\n+  --> $DIR/cast_lossless_bool.rs:11:13\n    |\n LL |     let _ = true as u32;\n    |             ^^^^^^^^^^^ help: try: `u32::from(true)`\n \n error: casting `bool` to `u64` is more cleanly stated with `u64::from(_)`\n-  --> $DIR/cast_lossless_bool.rs:11:13\n+  --> $DIR/cast_lossless_bool.rs:12:13\n    |\n LL |     let _ = true as u64;\n    |             ^^^^^^^^^^^ help: try: `u64::from(true)`\n \n error: casting `bool` to `u128` is more cleanly stated with `u128::from(_)`\n-  --> $DIR/cast_lossless_bool.rs:12:13\n+  --> $DIR/cast_lossless_bool.rs:13:13\n    |\n LL |     let _ = true as u128;\n    |             ^^^^^^^^^^^^ help: try: `u128::from(true)`\n \n error: casting `bool` to `usize` is more cleanly stated with `usize::from(_)`\n-  --> $DIR/cast_lossless_bool.rs:13:13\n+  --> $DIR/cast_lossless_bool.rs:14:13\n    |\n LL |     let _ = true as usize;\n    |             ^^^^^^^^^^^^^ help: try: `usize::from(true)`\n \n error: casting `bool` to `i8` is more cleanly stated with `i8::from(_)`\n-  --> $DIR/cast_lossless_bool.rs:15:13\n+  --> $DIR/cast_lossless_bool.rs:16:13\n    |\n LL |     let _ = true as i8;\n    |             ^^^^^^^^^^ help: try: `i8::from(true)`\n \n error: casting `bool` to `i16` is more cleanly stated with `i16::from(_)`\n-  --> $DIR/cast_lossless_bool.rs:16:13\n+  --> $DIR/cast_lossless_bool.rs:17:13\n    |\n LL |     let _ = true as i16;\n    |             ^^^^^^^^^^^ help: try: `i16::from(true)`\n \n error: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`\n-  --> $DIR/cast_lossless_bool.rs:17:13\n+  --> $DIR/cast_lossless_bool.rs:18:13\n    |\n LL |     let _ = true as i32;\n    |             ^^^^^^^^^^^ help: try: `i32::from(true)`\n \n error: casting `bool` to `i64` is more cleanly stated with `i64::from(_)`\n-  --> $DIR/cast_lossless_bool.rs:18:13\n+  --> $DIR/cast_lossless_bool.rs:19:13\n    |\n LL |     let _ = true as i64;\n    |             ^^^^^^^^^^^ help: try: `i64::from(true)`\n \n error: casting `bool` to `i128` is more cleanly stated with `i128::from(_)`\n-  --> $DIR/cast_lossless_bool.rs:19:13\n+  --> $DIR/cast_lossless_bool.rs:20:13\n    |\n LL |     let _ = true as i128;\n    |             ^^^^^^^^^^^^ help: try: `i128::from(true)`\n \n error: casting `bool` to `isize` is more cleanly stated with `isize::from(_)`\n-  --> $DIR/cast_lossless_bool.rs:20:13\n+  --> $DIR/cast_lossless_bool.rs:21:13\n    |\n LL |     let _ = true as isize;\n    |             ^^^^^^^^^^^^^ help: try: `isize::from(true)`\n \n error: casting `bool` to `u16` is more cleanly stated with `u16::from(_)`\n-  --> $DIR/cast_lossless_bool.rs:23:13\n+  --> $DIR/cast_lossless_bool.rs:24:13\n    |\n LL |     let _ = (true | false) as u16;\n    |             ^^^^^^^^^^^^^^^^^^^^^ help: try: `u16::from(true | false)`\n \n-error: aborting due to 13 previous errors\n+error: casting `bool` to `u8` is more cleanly stated with `u8::from(_)`\n+  --> $DIR/cast_lossless_bool.rs:54:13\n+   |\n+LL |     let _ = true as u8;\n+   |             ^^^^^^^^^^ help: try: `u8::from(true)`\n+\n+error: aborting due to 14 previous errors\n "}, {"sha": "8a5645b22ed19ddf82512b2c51944e7f92736555", "filename": "tests/ui/cfg_attr_rustfmt.fixed", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fcfg_attr_rustfmt.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fcfg_attr_rustfmt.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcfg_attr_rustfmt.fixed?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![feature(stmt_expr_attributes)]\n+#![feature(stmt_expr_attributes, custom_inner_attributes)]\n \n #![allow(unused, clippy::no_effect, clippy::unnecessary_operation)]\n #![warn(clippy::deprecated_cfg_attr)]\n@@ -29,3 +29,17 @@ mod foo {\n \n     pub fn f() {}\n }\n+\n+fn msrv_1_29() {\n+    #![clippy::msrv = \"1.29\"]\n+\n+    #[cfg_attr(rustfmt, rustfmt::skip)]\n+    1+29;\n+}\n+\n+fn msrv_1_30() {\n+    #![clippy::msrv = \"1.30\"]\n+\n+    #[rustfmt::skip]\n+    1+30;\n+}"}, {"sha": "2fb140efae7680085af0ea9eab5c089edb1fd1c6", "filename": "tests/ui/cfg_attr_rustfmt.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fcfg_attr_rustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fcfg_attr_rustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcfg_attr_rustfmt.rs?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![feature(stmt_expr_attributes)]\n+#![feature(stmt_expr_attributes, custom_inner_attributes)]\n \n #![allow(unused, clippy::no_effect, clippy::unnecessary_operation)]\n #![warn(clippy::deprecated_cfg_attr)]\n@@ -29,3 +29,17 @@ mod foo {\n \n     pub fn f() {}\n }\n+\n+fn msrv_1_29() {\n+    #![clippy::msrv = \"1.29\"]\n+\n+    #[cfg_attr(rustfmt, rustfmt::skip)]\n+    1+29;\n+}\n+\n+fn msrv_1_30() {\n+    #![clippy::msrv = \"1.30\"]\n+\n+    #[cfg_attr(rustfmt, rustfmt::skip)]\n+    1+30;\n+}"}, {"sha": "08df7b2b39a0c26569df08e183e2f3a481c9f0d4", "filename": "tests/ui/cfg_attr_rustfmt.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fcfg_attr_rustfmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fcfg_attr_rustfmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcfg_attr_rustfmt.stderr?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -12,5 +12,11 @@ error: `cfg_attr` is deprecated for rustfmt and got replaced by tool attributes\n LL | #[cfg_attr(rustfmt, rustfmt_skip)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `#[rustfmt::skip]`\n \n-error: aborting due to 2 previous errors\n+error: `cfg_attr` is deprecated for rustfmt and got replaced by tool attributes\n+  --> $DIR/cfg_attr_rustfmt.rs:43:5\n+   |\n+LL |     #[cfg_attr(rustfmt, rustfmt::skip)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `#[rustfmt::skip]`\n+\n+error: aborting due to 3 previous errors\n "}, {"sha": "f936957cb40c682d7d6bdbb538fddacb07c943fc", "filename": "tests/ui/checked_conversions.fixed", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fchecked_conversions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fchecked_conversions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_conversions.fixed?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,7 +1,9 @@\n // run-rustfix\n \n+#![feature(custom_inner_attributes)]\n #![allow(\n     clippy::cast_lossless,\n+    unused,\n     // Int::max_value will be deprecated in the future\n     deprecated,\n )]\n@@ -76,4 +78,18 @@ pub const fn issue_8898(i: u32) -> bool {\n     i <= i32::MAX as u32\n }\n \n+fn msrv_1_33() {\n+    #![clippy::msrv = \"1.33\"]\n+\n+    let value: i64 = 33;\n+    let _ = value <= (u32::MAX as i64) && value >= 0;\n+}\n+\n+fn msrv_1_34() {\n+    #![clippy::msrv = \"1.34\"]\n+\n+    let value: i64 = 34;\n+    let _ = u32::try_from(value).is_ok();\n+}\n+\n fn main() {}"}, {"sha": "77aec713ff3169079e3562ba9d413116196079d8", "filename": "tests/ui/checked_conversions.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_conversions.rs?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,7 +1,9 @@\n // run-rustfix\n \n+#![feature(custom_inner_attributes)]\n #![allow(\n     clippy::cast_lossless,\n+    unused,\n     // Int::max_value will be deprecated in the future\n     deprecated,\n )]\n@@ -76,4 +78,18 @@ pub const fn issue_8898(i: u32) -> bool {\n     i <= i32::MAX as u32\n }\n \n+fn msrv_1_33() {\n+    #![clippy::msrv = \"1.33\"]\n+\n+    let value: i64 = 33;\n+    let _ = value <= (u32::MAX as i64) && value >= 0;\n+}\n+\n+fn msrv_1_34() {\n+    #![clippy::msrv = \"1.34\"]\n+\n+    let value: i64 = 34;\n+    let _ = value <= (u32::MAX as i64) && value >= 0;\n+}\n+\n fn main() {}"}, {"sha": "b2bf7af8daf87a8df2b6a723a1b72ee53dc882c8", "filename": "tests/ui/checked_conversions.stderr", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fchecked_conversions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fchecked_conversions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_conversions.stderr?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,100 +1,106 @@\n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:15:13\n+  --> $DIR/checked_conversions.rs:17:13\n    |\n LL |     let _ = value <= (u32::max_value() as i64) && value >= 0;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u32::try_from(value).is_ok()`\n    |\n    = note: `-D clippy::checked-conversions` implied by `-D warnings`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:16:13\n+  --> $DIR/checked_conversions.rs:18:13\n    |\n LL |     let _ = value <= (u32::MAX as i64) && value >= 0;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u32::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:20:13\n+  --> $DIR/checked_conversions.rs:22:13\n    |\n LL |     let _ = value <= i64::from(u16::max_value()) && value >= 0;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u16::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:21:13\n+  --> $DIR/checked_conversions.rs:23:13\n    |\n LL |     let _ = value <= i64::from(u16::MAX) && value >= 0;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u16::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:25:13\n+  --> $DIR/checked_conversions.rs:27:13\n    |\n LL |     let _ = value <= (u8::max_value() as isize) && value >= 0;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u8::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:26:13\n+  --> $DIR/checked_conversions.rs:28:13\n    |\n LL |     let _ = value <= (u8::MAX as isize) && value >= 0;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u8::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:32:13\n+  --> $DIR/checked_conversions.rs:34:13\n    |\n LL |     let _ = value <= (i32::max_value() as i64) && value >= (i32::min_value() as i64);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:33:13\n+  --> $DIR/checked_conversions.rs:35:13\n    |\n LL |     let _ = value <= (i32::MAX as i64) && value >= (i32::MIN as i64);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:37:13\n+  --> $DIR/checked_conversions.rs:39:13\n    |\n LL |     let _ = value <= i64::from(i16::max_value()) && value >= i64::from(i16::min_value());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i16::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:38:13\n+  --> $DIR/checked_conversions.rs:40:13\n    |\n LL |     let _ = value <= i64::from(i16::MAX) && value >= i64::from(i16::MIN);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i16::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:44:13\n+  --> $DIR/checked_conversions.rs:46:13\n    |\n LL |     let _ = value <= i32::max_value() as u32;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:45:13\n+  --> $DIR/checked_conversions.rs:47:13\n    |\n LL |     let _ = value <= i32::MAX as u32;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:49:13\n+  --> $DIR/checked_conversions.rs:51:13\n    |\n LL |     let _ = value <= isize::max_value() as usize && value as i32 == 5;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `isize::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:50:13\n+  --> $DIR/checked_conversions.rs:52:13\n    |\n LL |     let _ = value <= isize::MAX as usize && value as i32 == 5;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `isize::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:54:13\n+  --> $DIR/checked_conversions.rs:56:13\n    |\n LL |     let _ = value <= u16::max_value() as u32 && value as i32 == 5;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u16::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:55:13\n+  --> $DIR/checked_conversions.rs:57:13\n    |\n LL |     let _ = value <= u16::MAX as u32 && value as i32 == 5;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u16::try_from(value).is_ok()`\n \n-error: aborting due to 16 previous errors\n+error: checked cast can be simplified\n+  --> $DIR/checked_conversions.rs:92:13\n+   |\n+LL |     let _ = value <= (u32::MAX as i64) && value >= 0;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u32::try_from(value).is_ok()`\n+\n+error: aborting due to 17 previous errors\n "}, {"sha": "42ed232d1001cd3dd8c52b3efff71b8d747daab2", "filename": "tests/ui/cloned_instead_of_copied.fixed", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fcloned_instead_of_copied.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fcloned_instead_of_copied.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcloned_instead_of_copied.fixed?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,5 +1,8 @@\n // run-rustfix\n+\n+#![feature(custom_inner_attributes)]\n #![warn(clippy::cloned_instead_of_copied)]\n+#![allow(unused)]\n \n fn main() {\n     // yay\n@@ -13,3 +16,24 @@ fn main() {\n     let _ = [String::new()].iter().cloned();\n     let _ = Some(&String::new()).cloned();\n }\n+\n+fn msrv_1_34() {\n+    #![clippy::msrv = \"1.34\"]\n+\n+    let _ = [1].iter().cloned();\n+    let _ = Some(&1).cloned();\n+}\n+\n+fn msrv_1_35() {\n+    #![clippy::msrv = \"1.35\"]\n+\n+    let _ = [1].iter().cloned();\n+    let _ = Some(&1).copied(); // Option::copied needs 1.35\n+}\n+\n+fn msrv_1_36() {\n+    #![clippy::msrv = \"1.36\"]\n+\n+    let _ = [1].iter().copied(); // Iterator::copied needs 1.36\n+    let _ = Some(&1).copied();\n+}"}, {"sha": "471bd9654cc13371fa01948040fdf25e94a4e60a", "filename": "tests/ui/cloned_instead_of_copied.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fcloned_instead_of_copied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fcloned_instead_of_copied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcloned_instead_of_copied.rs?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,5 +1,8 @@\n // run-rustfix\n+\n+#![feature(custom_inner_attributes)]\n #![warn(clippy::cloned_instead_of_copied)]\n+#![allow(unused)]\n \n fn main() {\n     // yay\n@@ -13,3 +16,24 @@ fn main() {\n     let _ = [String::new()].iter().cloned();\n     let _ = Some(&String::new()).cloned();\n }\n+\n+fn msrv_1_34() {\n+    #![clippy::msrv = \"1.34\"]\n+\n+    let _ = [1].iter().cloned();\n+    let _ = Some(&1).cloned();\n+}\n+\n+fn msrv_1_35() {\n+    #![clippy::msrv = \"1.35\"]\n+\n+    let _ = [1].iter().cloned();\n+    let _ = Some(&1).cloned(); // Option::copied needs 1.35\n+}\n+\n+fn msrv_1_36() {\n+    #![clippy::msrv = \"1.36\"]\n+\n+    let _ = [1].iter().cloned(); // Iterator::copied needs 1.36\n+    let _ = Some(&1).cloned();\n+}"}, {"sha": "914c9a91e8300e048faf1bc014655c5bc073273f", "filename": "tests/ui/cloned_instead_of_copied.stderr", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fcloned_instead_of_copied.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fcloned_instead_of_copied.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcloned_instead_of_copied.stderr?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,34 +1,52 @@\n error: used `cloned` where `copied` could be used instead\n-  --> $DIR/cloned_instead_of_copied.rs:6:24\n+  --> $DIR/cloned_instead_of_copied.rs:9:24\n    |\n LL |     let _ = [1].iter().cloned();\n    |                        ^^^^^^ help: try: `copied`\n    |\n    = note: `-D clippy::cloned-instead-of-copied` implied by `-D warnings`\n \n error: used `cloned` where `copied` could be used instead\n-  --> $DIR/cloned_instead_of_copied.rs:7:31\n+  --> $DIR/cloned_instead_of_copied.rs:10:31\n    |\n LL |     let _ = vec![\"hi\"].iter().cloned();\n    |                               ^^^^^^ help: try: `copied`\n \n error: used `cloned` where `copied` could be used instead\n-  --> $DIR/cloned_instead_of_copied.rs:8:22\n+  --> $DIR/cloned_instead_of_copied.rs:11:22\n    |\n LL |     let _ = Some(&1).cloned();\n    |                      ^^^^^^ help: try: `copied`\n \n error: used `cloned` where `copied` could be used instead\n-  --> $DIR/cloned_instead_of_copied.rs:9:34\n+  --> $DIR/cloned_instead_of_copied.rs:12:34\n    |\n LL |     let _ = Box::new([1].iter()).cloned();\n    |                                  ^^^^^^ help: try: `copied`\n \n error: used `cloned` where `copied` could be used instead\n-  --> $DIR/cloned_instead_of_copied.rs:10:32\n+  --> $DIR/cloned_instead_of_copied.rs:13:32\n    |\n LL |     let _ = Box::new(Some(&1)).cloned();\n    |                                ^^^^^^ help: try: `copied`\n \n-error: aborting due to 5 previous errors\n+error: used `cloned` where `copied` could be used instead\n+  --> $DIR/cloned_instead_of_copied.rs:31:22\n+   |\n+LL |     let _ = Some(&1).cloned(); // Option::copied needs 1.35\n+   |                      ^^^^^^ help: try: `copied`\n+\n+error: used `cloned` where `copied` could be used instead\n+  --> $DIR/cloned_instead_of_copied.rs:37:24\n+   |\n+LL |     let _ = [1].iter().cloned(); // Iterator::copied needs 1.36\n+   |                        ^^^^^^ help: try: `copied`\n+\n+error: used `cloned` where `copied` could be used instead\n+  --> $DIR/cloned_instead_of_copied.rs:38:22\n+   |\n+LL |     let _ = Some(&1).cloned();\n+   |                      ^^^^^^ help: try: `copied`\n+\n+error: aborting due to 8 previous errors\n "}, {"sha": "3bac738acd65b90412004d73e8719ed885b8c368", "filename": "tests/ui/err_expect.fixed", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Ferr_expect.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Ferr_expect.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferr_expect.fixed?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,5 +1,8 @@\n // run-rustfix\n \n+#![feature(custom_inner_attributes)]\n+#![allow(unused)]\n+\n struct MyTypeNonDebug;\n \n #[derive(Debug)]\n@@ -12,3 +15,17 @@ fn main() {\n     let test_non_debug: Result<MyTypeNonDebug, u32> = Ok(MyTypeNonDebug);\n     test_non_debug.err().expect(\"Testing non debug type\");\n }\n+\n+fn msrv_1_16() {\n+    #![clippy::msrv = \"1.16\"]\n+\n+    let x: Result<u32, &str> = Ok(16);\n+    x.err().expect(\"16\");\n+}\n+\n+fn msrv_1_17() {\n+    #![clippy::msrv = \"1.17\"]\n+\n+    let x: Result<u32, &str> = Ok(17);\n+    x.expect_err(\"17\");\n+}"}, {"sha": "6e7c47d9ad3cf09f49736c3a092577a5d2aed96e", "filename": "tests/ui/err_expect.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Ferr_expect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Ferr_expect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferr_expect.rs?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,5 +1,8 @@\n // run-rustfix\n \n+#![feature(custom_inner_attributes)]\n+#![allow(unused)]\n+\n struct MyTypeNonDebug;\n \n #[derive(Debug)]\n@@ -12,3 +15,17 @@ fn main() {\n     let test_non_debug: Result<MyTypeNonDebug, u32> = Ok(MyTypeNonDebug);\n     test_non_debug.err().expect(\"Testing non debug type\");\n }\n+\n+fn msrv_1_16() {\n+    #![clippy::msrv = \"1.16\"]\n+\n+    let x: Result<u32, &str> = Ok(16);\n+    x.err().expect(\"16\");\n+}\n+\n+fn msrv_1_17() {\n+    #![clippy::msrv = \"1.17\"]\n+\n+    let x: Result<u32, &str> = Ok(17);\n+    x.err().expect(\"17\");\n+}"}, {"sha": "91a6cf8de65fcd190de086f704fb7d534f374fa3", "filename": "tests/ui/err_expect.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Ferr_expect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Ferr_expect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferr_expect.stderr?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,10 +1,16 @@\n error: called `.err().expect()` on a `Result` value\n-  --> $DIR/err_expect.rs:10:16\n+  --> $DIR/err_expect.rs:13:16\n    |\n LL |     test_debug.err().expect(\"Testing debug type\");\n    |                ^^^^^^^^^^^^ help: try: `expect_err`\n    |\n    = note: `-D clippy::err-expect` implied by `-D warnings`\n \n-error: aborting due to previous error\n+error: called `.err().expect()` on a `Result` value\n+  --> $DIR/err_expect.rs:30:7\n+   |\n+LL |     x.err().expect(\"17\");\n+   |       ^^^^^^^^^^^^ help: try: `expect_err`\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "41828ddd7acde22e0d7ad9e98a7df008a05b5d7f", "filename": "tests/ui/filter_map_next_fixable.fixed", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Ffilter_map_next_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Ffilter_map_next_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_map_next_fixable.fixed?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,10 +1,26 @@\n // run-rustfix\n \n+#![feature(custom_inner_attributes)]\n #![warn(clippy::all, clippy::pedantic)]\n+#![allow(unused)]\n \n fn main() {\n     let a = [\"1\", \"lol\", \"3\", \"NaN\", \"5\"];\n \n     let element: Option<i32> = a.iter().find_map(|s| s.parse().ok());\n     assert_eq!(element, Some(1));\n }\n+\n+fn msrv_1_29() {\n+    #![clippy::msrv = \"1.29\"]\n+\n+    let a = [\"1\", \"lol\", \"3\", \"NaN\", \"5\"];\n+    let _: Option<i32> = a.iter().filter_map(|s| s.parse().ok()).next();\n+}\n+\n+fn msrv_1_30() {\n+    #![clippy::msrv = \"1.30\"]\n+\n+    let a = [\"1\", \"lol\", \"3\", \"NaN\", \"5\"];\n+    let _: Option<i32> = a.iter().find_map(|s| s.parse().ok());\n+}"}, {"sha": "be492a81b45ec3e638c0087c3108705e55ffd9cb", "filename": "tests/ui/filter_map_next_fixable.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Ffilter_map_next_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Ffilter_map_next_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_map_next_fixable.rs?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,10 +1,26 @@\n // run-rustfix\n \n+#![feature(custom_inner_attributes)]\n #![warn(clippy::all, clippy::pedantic)]\n+#![allow(unused)]\n \n fn main() {\n     let a = [\"1\", \"lol\", \"3\", \"NaN\", \"5\"];\n \n     let element: Option<i32> = a.iter().filter_map(|s| s.parse().ok()).next();\n     assert_eq!(element, Some(1));\n }\n+\n+fn msrv_1_29() {\n+    #![clippy::msrv = \"1.29\"]\n+\n+    let a = [\"1\", \"lol\", \"3\", \"NaN\", \"5\"];\n+    let _: Option<i32> = a.iter().filter_map(|s| s.parse().ok()).next();\n+}\n+\n+fn msrv_1_30() {\n+    #![clippy::msrv = \"1.30\"]\n+\n+    let a = [\"1\", \"lol\", \"3\", \"NaN\", \"5\"];\n+    let _: Option<i32> = a.iter().filter_map(|s| s.parse().ok()).next();\n+}"}, {"sha": "e789efeabd5503a16eec2e7d531200f7a8875e1d", "filename": "tests/ui/filter_map_next_fixable.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Ffilter_map_next_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Ffilter_map_next_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_map_next_fixable.stderr?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,10 +1,16 @@\n error: called `filter_map(..).next()` on an `Iterator`. This is more succinctly expressed by calling `.find_map(..)` instead\n-  --> $DIR/filter_map_next_fixable.rs:8:32\n+  --> $DIR/filter_map_next_fixable.rs:10:32\n    |\n LL |     let element: Option<i32> = a.iter().filter_map(|s| s.parse().ok()).next();\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `a.iter().find_map(|s| s.parse().ok())`\n    |\n    = note: `-D clippy::filter-map-next` implied by `-D warnings`\n \n-error: aborting due to previous error\n+error: called `filter_map(..).next()` on an `Iterator`. This is more succinctly expressed by calling `.find_map(..)` instead\n+  --> $DIR/filter_map_next_fixable.rs:25:26\n+   |\n+LL |     let _: Option<i32> = a.iter().filter_map(|s| s.parse().ok()).next();\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `a.iter().find_map(|s| s.parse().ok())`\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "1cf49ca45f494d1eca6d0a02785ca04781747755", "filename": "tests/ui/from_over_into.fixed", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Ffrom_over_into.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Ffrom_over_into.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_over_into.fixed?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n \n+#![feature(custom_inner_attributes)]\n #![warn(clippy::from_over_into)]\n #![allow(unused)]\n \n@@ -59,4 +60,28 @@ impl From<String> for A {\n     }\n }\n \n+fn msrv_1_40() {\n+    #![clippy::msrv = \"1.40\"]\n+\n+    struct FromOverInto<T>(Vec<T>);\n+\n+    impl<T> Into<FromOverInto<T>> for Vec<T> {\n+        fn into(self) -> FromOverInto<T> {\n+            FromOverInto(self)\n+        }\n+    }\n+}\n+\n+fn msrv_1_41() {\n+    #![clippy::msrv = \"1.41\"]\n+\n+    struct FromOverInto<T>(Vec<T>);\n+\n+    impl<T> From<Vec<T>> for FromOverInto<T> {\n+        fn from(val: Vec<T>) -> Self {\n+            FromOverInto(val)\n+        }\n+    }\n+}\n+\n fn main() {}"}, {"sha": "d30f3c3fc92567ba78b18523e3b6aa2b891d5de8", "filename": "tests/ui/from_over_into.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_over_into.rs?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n \n+#![feature(custom_inner_attributes)]\n #![warn(clippy::from_over_into)]\n #![allow(unused)]\n \n@@ -59,4 +60,28 @@ impl From<String> for A {\n     }\n }\n \n+fn msrv_1_40() {\n+    #![clippy::msrv = \"1.40\"]\n+\n+    struct FromOverInto<T>(Vec<T>);\n+\n+    impl<T> Into<FromOverInto<T>> for Vec<T> {\n+        fn into(self) -> FromOverInto<T> {\n+            FromOverInto(self)\n+        }\n+    }\n+}\n+\n+fn msrv_1_41() {\n+    #![clippy::msrv = \"1.41\"]\n+\n+    struct FromOverInto<T>(Vec<T>);\n+\n+    impl<T> Into<FromOverInto<T>> for Vec<T> {\n+        fn into(self) -> FromOverInto<T> {\n+            FromOverInto(self)\n+        }\n+    }\n+}\n+\n fn main() {}"}, {"sha": "9c2a7c04c3646a84252479dea7e42a15319d9bb8", "filename": "tests/ui/from_over_into.stderr", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Ffrom_over_into.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Ffrom_over_into.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_over_into.stderr?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,5 +1,5 @@\n error: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n-  --> $DIR/from_over_into.rs:9:1\n+  --> $DIR/from_over_into.rs:10:1\n    |\n LL | impl Into<StringWrapper> for String {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -13,7 +13,7 @@ LL ~         StringWrapper(val)\n    |\n \n error: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n-  --> $DIR/from_over_into.rs:17:1\n+  --> $DIR/from_over_into.rs:18:1\n    |\n LL | impl Into<SelfType> for String {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL ~         SelfType(String::new())\n    |\n \n error: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n-  --> $DIR/from_over_into.rs:32:1\n+  --> $DIR/from_over_into.rs:33:1\n    |\n LL | impl Into<SelfKeywords> for X {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -41,7 +41,7 @@ LL ~         let _: X = val;\n    |\n \n error: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n-  --> $DIR/from_over_into.rs:44:1\n+  --> $DIR/from_over_into.rs:45:1\n    |\n LL | impl core::convert::Into<bool> for crate::ExplicitPaths {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -58,5 +58,18 @@ LL ~         val.0 = false;\n LL ~         val.0\n    |\n \n-error: aborting due to 4 previous errors\n+error: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n+  --> $DIR/from_over_into.rs:80:5\n+   |\n+LL |     impl<T> Into<FromOverInto<T>> for Vec<T> {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace the `Into` implentation with `From<std::vec::Vec<T>>`\n+   |\n+LL ~     impl<T> From<Vec<T>> for FromOverInto<T> {\n+LL ~         fn from(val: Vec<T>) -> Self {\n+LL ~             FromOverInto(val)\n+   |\n+\n+error: aborting due to 5 previous errors\n "}, {"sha": "331fd29b74e8edb4bcffddc33b66b3d7948e32d4", "filename": "tests/ui/manual_clamp.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmanual_clamp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmanual_clamp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_clamp.rs?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,3 +1,4 @@\n+#![feature(custom_inner_attributes)]\n #![warn(clippy::manual_clamp)]\n #![allow(\n     unused,\n@@ -302,3 +303,29 @@ fn dont_tell_me_what_to_do() {\n fn cmp_min_max(input: i32) -> i32 {\n     input * 3\n }\n+\n+fn msrv_1_49() {\n+    #![clippy::msrv = \"1.49\"]\n+\n+    let (input, min, max) = (0, -1, 2);\n+    let _ = if input < min {\n+        min\n+    } else if input > max {\n+        max\n+    } else {\n+        input\n+    };\n+}\n+\n+fn msrv_1_50() {\n+    #![clippy::msrv = \"1.50\"]\n+\n+    let (input, min, max) = (0, -1, 2);\n+    let _ = if input < min {\n+        min\n+    } else if input > max {\n+        max\n+    } else {\n+        input\n+    };\n+}"}, {"sha": "70abe28091c94ac5570761805e55f5ecfc21517f", "filename": "tests/ui/manual_clamp.stderr", "status": "modified", "additions": 50, "deletions": 35, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmanual_clamp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmanual_clamp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_clamp.stderr?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,5 +1,5 @@\n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:76:5\n+  --> $DIR/manual_clamp.rs:77:5\n    |\n LL | /     if x9 < min {\n LL | |         x9 = min;\n@@ -13,7 +13,7 @@ LL | |     }\n    = note: `-D clippy::manual-clamp` implied by `-D warnings`\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:91:5\n+  --> $DIR/manual_clamp.rs:92:5\n    |\n LL | /     if x11 > max {\n LL | |         x11 = max;\n@@ -26,7 +26,7 @@ LL | |     }\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:99:5\n+  --> $DIR/manual_clamp.rs:100:5\n    |\n LL | /     if min > x12 {\n LL | |         x12 = min;\n@@ -39,7 +39,7 @@ LL | |     }\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:107:5\n+  --> $DIR/manual_clamp.rs:108:5\n    |\n LL | /     if max < x13 {\n LL | |         x13 = max;\n@@ -52,7 +52,7 @@ LL | |     }\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:161:5\n+  --> $DIR/manual_clamp.rs:162:5\n    |\n LL | /     if max < x33 {\n LL | |         x33 = max;\n@@ -65,7 +65,7 @@ LL | |     }\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:21:14\n+  --> $DIR/manual_clamp.rs:22:14\n    |\n LL |       let x0 = if max < input {\n    |  ______________^\n@@ -80,7 +80,7 @@ LL | |     };\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:29:14\n+  --> $DIR/manual_clamp.rs:30:14\n    |\n LL |       let x1 = if input > max {\n    |  ______________^\n@@ -95,7 +95,7 @@ LL | |     };\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:37:14\n+  --> $DIR/manual_clamp.rs:38:14\n    |\n LL |       let x2 = if input < min {\n    |  ______________^\n@@ -110,7 +110,7 @@ LL | |     };\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:45:14\n+  --> $DIR/manual_clamp.rs:46:14\n    |\n LL |       let x3 = if min > input {\n    |  ______________^\n@@ -125,23 +125,23 @@ LL | |     };\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:53:14\n+  --> $DIR/manual_clamp.rs:54:14\n    |\n LL |     let x4 = input.max(min).min(max);\n    |              ^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `input.clamp(min, max)`\n    |\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:55:14\n+  --> $DIR/manual_clamp.rs:56:14\n    |\n LL |     let x5 = input.min(max).max(min);\n    |              ^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `input.clamp(min, max)`\n    |\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:57:14\n+  --> $DIR/manual_clamp.rs:58:14\n    |\n LL |       let x6 = match input {\n    |  ______________^\n@@ -154,7 +154,7 @@ LL | |     };\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:63:14\n+  --> $DIR/manual_clamp.rs:64:14\n    |\n LL |       let x7 = match input {\n    |  ______________^\n@@ -167,7 +167,7 @@ LL | |     };\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:69:14\n+  --> $DIR/manual_clamp.rs:70:14\n    |\n LL |       let x8 = match input {\n    |  ______________^\n@@ -180,7 +180,7 @@ LL | |     };\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:83:15\n+  --> $DIR/manual_clamp.rs:84:15\n    |\n LL |       let x10 = match input {\n    |  _______________^\n@@ -193,7 +193,7 @@ LL | |     };\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:114:15\n+  --> $DIR/manual_clamp.rs:115:15\n    |\n LL |       let x14 = if input > CONST_MAX {\n    |  _______________^\n@@ -208,7 +208,7 @@ LL | |     };\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:123:19\n+  --> $DIR/manual_clamp.rs:124:19\n    |\n LL |           let x15 = if input > max {\n    |  ___________________^\n@@ -224,71 +224,71 @@ LL | |         };\n    = note: clamp returns NaN if the input is NaN\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:134:19\n+  --> $DIR/manual_clamp.rs:135:19\n    |\n LL |         let x16 = cmp_max(cmp_min(input, CONST_MAX), CONST_MIN);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `input.clamp(CONST_MIN, CONST_MAX)`\n    |\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:135:19\n+  --> $DIR/manual_clamp.rs:136:19\n    |\n LL |         let x17 = cmp_min(cmp_max(input, CONST_MIN), CONST_MAX);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `input.clamp(CONST_MIN, CONST_MAX)`\n    |\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:136:19\n+  --> $DIR/manual_clamp.rs:137:19\n    |\n LL |         let x18 = cmp_max(CONST_MIN, cmp_min(input, CONST_MAX));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `input.clamp(CONST_MIN, CONST_MAX)`\n    |\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:137:19\n+  --> $DIR/manual_clamp.rs:138:19\n    |\n LL |         let x19 = cmp_min(CONST_MAX, cmp_max(input, CONST_MIN));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `input.clamp(CONST_MIN, CONST_MAX)`\n    |\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:138:19\n+  --> $DIR/manual_clamp.rs:139:19\n    |\n LL |         let x20 = cmp_max(cmp_min(CONST_MAX, input), CONST_MIN);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `input.clamp(CONST_MIN, CONST_MAX)`\n    |\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:139:19\n+  --> $DIR/manual_clamp.rs:140:19\n    |\n LL |         let x21 = cmp_min(cmp_max(CONST_MIN, input), CONST_MAX);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `input.clamp(CONST_MIN, CONST_MAX)`\n    |\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:140:19\n+  --> $DIR/manual_clamp.rs:141:19\n    |\n LL |         let x22 = cmp_max(CONST_MIN, cmp_min(CONST_MAX, input));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `input.clamp(CONST_MIN, CONST_MAX)`\n    |\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:141:19\n+  --> $DIR/manual_clamp.rs:142:19\n    |\n LL |         let x23 = cmp_min(CONST_MAX, cmp_max(CONST_MIN, input));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `input.clamp(CONST_MIN, CONST_MAX)`\n    |\n    = note: clamp will panic if max < min\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:143:19\n+  --> $DIR/manual_clamp.rs:144:19\n    |\n LL |         let x24 = f64::max(f64::min(input, CONST_F64_MAX), CONST_F64_MIN);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `input.clamp(CONST_F64_MIN, CONST_F64_MAX)`\n@@ -297,7 +297,7 @@ LL |         let x24 = f64::max(f64::min(input, CONST_F64_MAX), CONST_F64_MIN);\n    = note: clamp returns NaN if the input is NaN\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:144:19\n+  --> $DIR/manual_clamp.rs:145:19\n    |\n LL |         let x25 = f64::min(f64::max(input, CONST_F64_MIN), CONST_F64_MAX);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `input.clamp(CONST_F64_MIN, CONST_F64_MAX)`\n@@ -306,7 +306,7 @@ LL |         let x25 = f64::min(f64::max(input, CONST_F64_MIN), CONST_F64_MAX);\n    = note: clamp returns NaN if the input is NaN\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:145:19\n+  --> $DIR/manual_clamp.rs:146:19\n    |\n LL |         let x26 = f64::max(CONST_F64_MIN, f64::min(input, CONST_F64_MAX));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `input.clamp(CONST_F64_MIN, CONST_F64_MAX)`\n@@ -315,7 +315,7 @@ LL |         let x26 = f64::max(CONST_F64_MIN, f64::min(input, CONST_F64_MAX));\n    = note: clamp returns NaN if the input is NaN\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:146:19\n+  --> $DIR/manual_clamp.rs:147:19\n    |\n LL |         let x27 = f64::min(CONST_F64_MAX, f64::max(input, CONST_F64_MIN));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `input.clamp(CONST_F64_MIN, CONST_F64_MAX)`\n@@ -324,7 +324,7 @@ LL |         let x27 = f64::min(CONST_F64_MAX, f64::max(input, CONST_F64_MIN));\n    = note: clamp returns NaN if the input is NaN\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:147:19\n+  --> $DIR/manual_clamp.rs:148:19\n    |\n LL |         let x28 = f64::max(f64::min(CONST_F64_MAX, input), CONST_F64_MIN);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `input.clamp(CONST_F64_MIN, CONST_F64_MAX)`\n@@ -333,7 +333,7 @@ LL |         let x28 = f64::max(f64::min(CONST_F64_MAX, input), CONST_F64_MIN);\n    = note: clamp returns NaN if the input is NaN\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:148:19\n+  --> $DIR/manual_clamp.rs:149:19\n    |\n LL |         let x29 = f64::min(f64::max(CONST_F64_MIN, input), CONST_F64_MAX);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `input.clamp(CONST_F64_MIN, CONST_F64_MAX)`\n@@ -342,7 +342,7 @@ LL |         let x29 = f64::min(f64::max(CONST_F64_MIN, input), CONST_F64_MAX);\n    = note: clamp returns NaN if the input is NaN\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:149:19\n+  --> $DIR/manual_clamp.rs:150:19\n    |\n LL |         let x30 = f64::max(CONST_F64_MIN, f64::min(CONST_F64_MAX, input));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `input.clamp(CONST_F64_MIN, CONST_F64_MAX)`\n@@ -351,7 +351,7 @@ LL |         let x30 = f64::max(CONST_F64_MIN, f64::min(CONST_F64_MAX, input));\n    = note: clamp returns NaN if the input is NaN\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:150:19\n+  --> $DIR/manual_clamp.rs:151:19\n    |\n LL |         let x31 = f64::min(CONST_F64_MAX, f64::max(CONST_F64_MIN, input));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `input.clamp(CONST_F64_MIN, CONST_F64_MAX)`\n@@ -360,7 +360,7 @@ LL |         let x31 = f64::min(CONST_F64_MAX, f64::max(CONST_F64_MIN, input));\n    = note: clamp returns NaN if the input is NaN\n \n error: clamp-like pattern without using clamp function\n-  --> $DIR/manual_clamp.rs:153:5\n+  --> $DIR/manual_clamp.rs:154:5\n    |\n LL | /     if x32 < min {\n LL | |         x32 = min;\n@@ -371,5 +371,20 @@ LL | |     }\n    |\n    = note: clamp will panic if max < min\n \n-error: aborting due to 34 previous errors\n+error: clamp-like pattern without using clamp function\n+  --> $DIR/manual_clamp.rs:324:13\n+   |\n+LL |       let _ = if input < min {\n+   |  _____________^\n+LL | |         min\n+LL | |     } else if input > max {\n+LL | |         max\n+LL | |     } else {\n+LL | |         input\n+LL | |     };\n+   | |_____^ help: replace with clamp: `input.clamp(min, max)`\n+   |\n+   = note: clamp will panic if max < min\n+\n+error: aborting due to 35 previous errors\n "}, {"sha": "b942fbfe93056aa45c24dc06c12678db0be8a202", "filename": "tests/ui/manual_rem_euclid.fixed", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmanual_rem_euclid.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmanual_rem_euclid.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_rem_euclid.fixed?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n // aux-build:macro_rules.rs\n \n+#![feature(custom_inner_attributes)]\n #![warn(clippy::manual_rem_euclid)]\n \n #[macro_use]\n@@ -53,3 +54,32 @@ pub fn rem_euclid_4(num: i32) -> i32 {\n pub const fn const_rem_euclid_4(num: i32) -> i32 {\n     num.rem_euclid(4)\n }\n+\n+pub fn msrv_1_37() {\n+    #![clippy::msrv = \"1.37\"]\n+\n+    let x: i32 = 10;\n+    let _: i32 = ((x % 4) + 4) % 4;\n+}\n+\n+pub fn msrv_1_38() {\n+    #![clippy::msrv = \"1.38\"]\n+\n+    let x: i32 = 10;\n+    let _: i32 = x.rem_euclid(4);\n+}\n+\n+// For const fns:\n+pub const fn msrv_1_51() {\n+    #![clippy::msrv = \"1.51\"]\n+\n+    let x: i32 = 10;\n+    let _: i32 = ((x % 4) + 4) % 4;\n+}\n+\n+pub const fn msrv_1_52() {\n+    #![clippy::msrv = \"1.52\"]\n+\n+    let x: i32 = 10;\n+    let _: i32 = x.rem_euclid(4);\n+}"}, {"sha": "7462d532169f6fb890a4b62131821330fdd96b04", "filename": "tests/ui/manual_rem_euclid.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmanual_rem_euclid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmanual_rem_euclid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_rem_euclid.rs?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n // aux-build:macro_rules.rs\n \n+#![feature(custom_inner_attributes)]\n #![warn(clippy::manual_rem_euclid)]\n \n #[macro_use]\n@@ -53,3 +54,32 @@ pub fn rem_euclid_4(num: i32) -> i32 {\n pub const fn const_rem_euclid_4(num: i32) -> i32 {\n     ((num % 4) + 4) % 4\n }\n+\n+pub fn msrv_1_37() {\n+    #![clippy::msrv = \"1.37\"]\n+\n+    let x: i32 = 10;\n+    let _: i32 = ((x % 4) + 4) % 4;\n+}\n+\n+pub fn msrv_1_38() {\n+    #![clippy::msrv = \"1.38\"]\n+\n+    let x: i32 = 10;\n+    let _: i32 = ((x % 4) + 4) % 4;\n+}\n+\n+// For const fns:\n+pub const fn msrv_1_51() {\n+    #![clippy::msrv = \"1.51\"]\n+\n+    let x: i32 = 10;\n+    let _: i32 = ((x % 4) + 4) % 4;\n+}\n+\n+pub const fn msrv_1_52() {\n+    #![clippy::msrv = \"1.52\"]\n+\n+    let x: i32 = 10;\n+    let _: i32 = ((x % 4) + 4) % 4;\n+}"}, {"sha": "d51bac03b565afaa278696da4742e04fc6a894da", "filename": "tests/ui/manual_rem_euclid.stderr", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmanual_rem_euclid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmanual_rem_euclid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_rem_euclid.stderr?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,37 +1,37 @@\n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:19:18\n+  --> $DIR/manual_rem_euclid.rs:20:18\n    |\n LL |     let _: i32 = ((value % 4) + 4) % 4;\n    |                  ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n    |\n    = note: `-D clippy::manual-rem-euclid` implied by `-D warnings`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:20:18\n+  --> $DIR/manual_rem_euclid.rs:21:18\n    |\n LL |     let _: i32 = (4 + (value % 4)) % 4;\n    |                  ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:21:18\n+  --> $DIR/manual_rem_euclid.rs:22:18\n    |\n LL |     let _: i32 = (value % 4 + 4) % 4;\n    |                  ^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:22:18\n+  --> $DIR/manual_rem_euclid.rs:23:18\n    |\n LL |     let _: i32 = (4 + value % 4) % 4;\n    |                  ^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:23:22\n+  --> $DIR/manual_rem_euclid.rs:24:22\n    |\n LL |     let _: i32 = 1 + (4 + value % 4) % 4;\n    |                      ^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:12:22\n+  --> $DIR/manual_rem_euclid.rs:13:22\n    |\n LL |         let _: i32 = ((value % 4) + 4) % 4;\n    |                      ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n@@ -42,16 +42,28 @@ LL |     internal_rem_euclid!();\n    = note: this error originates in the macro `internal_rem_euclid` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:49:5\n+  --> $DIR/manual_rem_euclid.rs:50:5\n    |\n LL |     ((num % 4) + 4) % 4\n    |     ^^^^^^^^^^^^^^^^^^^ help: consider using: `num.rem_euclid(4)`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:54:5\n+  --> $DIR/manual_rem_euclid.rs:55:5\n    |\n LL |     ((num % 4) + 4) % 4\n    |     ^^^^^^^^^^^^^^^^^^^ help: consider using: `num.rem_euclid(4)`\n \n-error: aborting due to 8 previous errors\n+error: manual `rem_euclid` implementation\n+  --> $DIR/manual_rem_euclid.rs:69:18\n+   |\n+LL |     let _: i32 = ((x % 4) + 4) % 4;\n+   |                  ^^^^^^^^^^^^^^^^^ help: consider using: `x.rem_euclid(4)`\n+\n+error: manual `rem_euclid` implementation\n+  --> $DIR/manual_rem_euclid.rs:84:18\n+   |\n+LL |     let _: i32 = ((x % 4) + 4) % 4;\n+   |                  ^^^^^^^^^^^^^^^^^ help: consider using: `x.rem_euclid(4)`\n+\n+error: aborting due to 10 previous errors\n "}, {"sha": "85009d78558ba7d68abd82b3b76680fad600adf7", "filename": "tests/ui/manual_strip.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmanual_strip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmanual_strip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_strip.rs?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,3 +1,4 @@\n+#![feature(custom_inner_attributes)]\n #![warn(clippy::manual_strip)]\n \n fn main() {\n@@ -64,3 +65,21 @@ fn main() {\n         s4[2..].to_string();\n     }\n }\n+\n+fn msrv_1_44() {\n+    #![clippy::msrv = \"1.44\"]\n+\n+    let s = \"abc\";\n+    if s.starts_with('a') {\n+        s[1..].to_string();\n+    }\n+}\n+\n+fn msrv_1_45() {\n+    #![clippy::msrv = \"1.45\"]\n+\n+    let s = \"abc\";\n+    if s.starts_with('a') {\n+        s[1..].to_string();\n+    }\n+}"}, {"sha": "ad2a362f3e76ddb2d3d404952da30db254f8288b", "filename": "tests/ui/manual_strip.stderr", "status": "modified", "additions": 32, "deletions": 15, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmanual_strip.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmanual_strip.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_strip.stderr?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,11 +1,11 @@\n error: stripping a prefix manually\n-  --> $DIR/manual_strip.rs:7:24\n+  --> $DIR/manual_strip.rs:8:24\n    |\n LL |         str::to_string(&s[\"ab\".len()..]);\n    |                        ^^^^^^^^^^^^^^^^\n    |\n note: the prefix was tested here\n-  --> $DIR/manual_strip.rs:6:5\n+  --> $DIR/manual_strip.rs:7:5\n    |\n LL |     if s.starts_with(\"ab\") {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -21,13 +21,13 @@ LL ~         <stripped>.to_string();\n    |\n \n error: stripping a suffix manually\n-  --> $DIR/manual_strip.rs:15:24\n+  --> $DIR/manual_strip.rs:16:24\n    |\n LL |         str::to_string(&s[..s.len() - \"bc\".len()]);\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the suffix was tested here\n-  --> $DIR/manual_strip.rs:14:5\n+  --> $DIR/manual_strip.rs:15:5\n    |\n LL |     if s.ends_with(\"bc\") {\n    |     ^^^^^^^^^^^^^^^^^^^^^\n@@ -42,13 +42,13 @@ LL ~         <stripped>.to_string();\n    |\n \n error: stripping a prefix manually\n-  --> $DIR/manual_strip.rs:24:24\n+  --> $DIR/manual_strip.rs:25:24\n    |\n LL |         str::to_string(&s[1..]);\n    |                        ^^^^^^^\n    |\n note: the prefix was tested here\n-  --> $DIR/manual_strip.rs:23:5\n+  --> $DIR/manual_strip.rs:24:5\n    |\n LL |     if s.starts_with('a') {\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n@@ -60,13 +60,13 @@ LL ~         <stripped>.to_string();\n    |\n \n error: stripping a prefix manually\n-  --> $DIR/manual_strip.rs:31:24\n+  --> $DIR/manual_strip.rs:32:24\n    |\n LL |         str::to_string(&s[prefix.len()..]);\n    |                        ^^^^^^^^^^^^^^^^^^\n    |\n note: the prefix was tested here\n-  --> $DIR/manual_strip.rs:30:5\n+  --> $DIR/manual_strip.rs:31:5\n    |\n LL |     if s.starts_with(prefix) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -77,13 +77,13 @@ LL ~         str::to_string(<stripped>);\n    |\n \n error: stripping a prefix manually\n-  --> $DIR/manual_strip.rs:37:24\n+  --> $DIR/manual_strip.rs:38:24\n    |\n LL |         str::to_string(&s[PREFIX.len()..]);\n    |                        ^^^^^^^^^^^^^^^^^^\n    |\n note: the prefix was tested here\n-  --> $DIR/manual_strip.rs:36:5\n+  --> $DIR/manual_strip.rs:37:5\n    |\n LL |     if s.starts_with(PREFIX) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -95,13 +95,13 @@ LL ~         str::to_string(<stripped>);\n    |\n \n error: stripping a prefix manually\n-  --> $DIR/manual_strip.rs:44:24\n+  --> $DIR/manual_strip.rs:45:24\n    |\n LL |         str::to_string(&TARGET[prefix.len()..]);\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the prefix was tested here\n-  --> $DIR/manual_strip.rs:43:5\n+  --> $DIR/manual_strip.rs:44:5\n    |\n LL |     if TARGET.starts_with(prefix) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -112,13 +112,13 @@ LL ~         str::to_string(<stripped>);\n    |\n \n error: stripping a prefix manually\n-  --> $DIR/manual_strip.rs:50:9\n+  --> $DIR/manual_strip.rs:51:9\n    |\n LL |         s1[2..].to_uppercase();\n    |         ^^^^^^^\n    |\n note: the prefix was tested here\n-  --> $DIR/manual_strip.rs:49:5\n+  --> $DIR/manual_strip.rs:50:5\n    |\n LL |     if s1.starts_with(\"ab\") {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -128,5 +128,22 @@ LL ~     if let Some(<stripped>) = s1.strip_prefix(\"ab\") {\n LL ~         <stripped>.to_uppercase();\n    |\n \n-error: aborting due to 7 previous errors\n+error: stripping a prefix manually\n+  --> $DIR/manual_strip.rs:83:9\n+   |\n+LL |         s[1..].to_string();\n+   |         ^^^^^^\n+   |\n+note: the prefix was tested here\n+  --> $DIR/manual_strip.rs:82:5\n+   |\n+LL |     if s.starts_with('a') {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+help: try using the `strip_prefix` method\n+   |\n+LL ~     if let Some(<stripped>) = s.strip_prefix('a') {\n+LL ~         <stripped>.to_string();\n+   |\n+\n+error: aborting due to 8 previous errors\n "}, {"sha": "396b22a9abb390f520d911a773d688b8bb2f3992", "filename": "tests/ui/map_unwrap_or.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmap_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmap_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_unwrap_or.rs?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,6 +1,8 @@\n // aux-build:option_helpers.rs\n+\n+#![feature(custom_inner_attributes)]\n #![warn(clippy::map_unwrap_or)]\n-#![allow(clippy::uninlined_format_args)]\n+#![allow(clippy::uninlined_format_args, clippy::unnecessary_lazy_evaluations)]\n \n #[macro_use]\n extern crate option_helpers;\n@@ -79,3 +81,19 @@ fn main() {\n     option_methods();\n     result_methods();\n }\n+\n+fn msrv_1_40() {\n+    #![clippy::msrv = \"1.40\"]\n+\n+    let res: Result<i32, ()> = Ok(1);\n+\n+    let _ = res.map(|x| x + 1).unwrap_or_else(|_e| 0);\n+}\n+\n+fn msrv_1_41() {\n+    #![clippy::msrv = \"1.41\"]\n+\n+    let res: Result<i32, ()> = Ok(1);\n+\n+    let _ = res.map(|x| x + 1).unwrap_or_else(|_e| 0);\n+}"}, {"sha": "d17d24a403ea5d578c01d51f725559553f2d75ee", "filename": "tests/ui/map_unwrap_or.stderr", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmap_unwrap_or.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmap_unwrap_or.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_unwrap_or.stderr?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,5 +1,5 @@\n error: called `map(<f>).unwrap_or(<a>)` on an `Option` value. This can be done more directly by calling `map_or(<a>, <f>)` instead\n-  --> $DIR/map_unwrap_or.rs:16:13\n+  --> $DIR/map_unwrap_or.rs:18:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -15,7 +15,7 @@ LL +     let _ = opt.map_or(0, |x| x + 1);\n    |\n \n error: called `map(<f>).unwrap_or(<a>)` on an `Option` value. This can be done more directly by calling `map_or(<a>, <f>)` instead\n-  --> $DIR/map_unwrap_or.rs:20:13\n+  --> $DIR/map_unwrap_or.rs:22:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -33,7 +33,7 @@ LL ~     );\n    |\n \n error: called `map(<f>).unwrap_or(<a>)` on an `Option` value. This can be done more directly by calling `map_or(<a>, <f>)` instead\n-  --> $DIR/map_unwrap_or.rs:24:13\n+  --> $DIR/map_unwrap_or.rs:26:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -50,7 +50,7 @@ LL ~         }, |x| x + 1);\n    |\n \n error: called `map(<f>).unwrap_or(None)` on an `Option` value. This can be done more directly by calling `and_then(<f>)` instead\n-  --> $DIR/map_unwrap_or.rs:29:13\n+  --> $DIR/map_unwrap_or.rs:31:13\n    |\n LL |     let _ = opt.map(|x| Some(x + 1)).unwrap_or(None);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -62,7 +62,7 @@ LL +     let _ = opt.and_then(|x| Some(x + 1));\n    |\n \n error: called `map(<f>).unwrap_or(None)` on an `Option` value. This can be done more directly by calling `and_then(<f>)` instead\n-  --> $DIR/map_unwrap_or.rs:31:13\n+  --> $DIR/map_unwrap_or.rs:33:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -80,7 +80,7 @@ LL ~     );\n    |\n \n error: called `map(<f>).unwrap_or(None)` on an `Option` value. This can be done more directly by calling `and_then(<f>)` instead\n-  --> $DIR/map_unwrap_or.rs:35:13\n+  --> $DIR/map_unwrap_or.rs:37:13\n    |\n LL |       let _ = opt\n    |  _____________^\n@@ -95,7 +95,7 @@ LL +         .and_then(|x| Some(x + 1));\n    |\n \n error: called `map(<f>).unwrap_or(<a>)` on an `Option` value. This can be done more directly by calling `map_or(<a>, <f>)` instead\n-  --> $DIR/map_unwrap_or.rs:46:13\n+  --> $DIR/map_unwrap_or.rs:48:13\n    |\n LL |     let _ = Some(\"prefix\").map(|p| format!(\"{}.\", p)).unwrap_or(id);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -107,7 +107,7 @@ LL +     let _ = Some(\"prefix\").map_or(id, |p| format!(\"{}.\", p));\n    |\n \n error: called `map(<f>).unwrap_or_else(<g>)` on an `Option` value. This can be done more directly by calling `map_or_else(<g>, <f>)` instead\n-  --> $DIR/map_unwrap_or.rs:50:13\n+  --> $DIR/map_unwrap_or.rs:52:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -117,7 +117,7 @@ LL | |     ).unwrap_or_else(|| 0);\n    | |__________________________^\n \n error: called `map(<f>).unwrap_or_else(<g>)` on an `Option` value. This can be done more directly by calling `map_or_else(<g>, <f>)` instead\n-  --> $DIR/map_unwrap_or.rs:54:13\n+  --> $DIR/map_unwrap_or.rs:56:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -127,7 +127,7 @@ LL | |         );\n    | |_________^\n \n error: called `map(<f>).unwrap_or_else(<g>)` on a `Result` value. This can be done more directly by calling `.map_or_else(<g>, <f>)` instead\n-  --> $DIR/map_unwrap_or.rs:66:13\n+  --> $DIR/map_unwrap_or.rs:68:13\n    |\n LL |       let _ = res.map(|x| {\n    |  _____________^\n@@ -137,7 +137,7 @@ LL | |     ).unwrap_or_else(|_e| 0);\n    | |____________________________^\n \n error: called `map(<f>).unwrap_or_else(<g>)` on a `Result` value. This can be done more directly by calling `.map_or_else(<g>, <f>)` instead\n-  --> $DIR/map_unwrap_or.rs:70:13\n+  --> $DIR/map_unwrap_or.rs:72:13\n    |\n LL |       let _ = res.map(|x| x + 1)\n    |  _____________^\n@@ -146,5 +146,11 @@ LL | |             0\n LL | |         });\n    | |__________^\n \n-error: aborting due to 11 previous errors\n+error: called `map(<f>).unwrap_or_else(<g>)` on a `Result` value. This can be done more directly by calling `.map_or_else(<g>, <f>)` instead\n+  --> $DIR/map_unwrap_or.rs:98:13\n+   |\n+LL |     let _ = res.map(|x| x + 1).unwrap_or_else(|_e| 0);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `res.map_or_else(|_e| 0, |x| x + 1)`\n+\n+error: aborting due to 12 previous errors\n "}, {"sha": "2498007694c560ec3c32679db92621ef1fdefbb4", "filename": "tests/ui/match_expr_like_matches_macro.fixed", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmatch_expr_like_matches_macro.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmatch_expr_like_matches_macro.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_expr_like_matches_macro.fixed?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n \n+#![feature(custom_inner_attributes)]\n #![warn(clippy::match_like_matches_macro)]\n #![allow(unreachable_patterns, dead_code, clippy::equatable_if_let)]\n \n@@ -193,3 +194,18 @@ fn main() {\n         _ => false,\n     };\n }\n+\n+fn msrv_1_41() {\n+    #![clippy::msrv = \"1.41\"]\n+\n+    let _y = match Some(5) {\n+        Some(0) => true,\n+        _ => false,\n+    };\n+}\n+\n+fn msrv_1_42() {\n+    #![clippy::msrv = \"1.42\"]\n+\n+    let _y = matches!(Some(5), Some(0));\n+}"}, {"sha": "b4e48499bd0fb193fca123c306f129d24543e904", "filename": "tests/ui/match_expr_like_matches_macro.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmatch_expr_like_matches_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmatch_expr_like_matches_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_expr_like_matches_macro.rs?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n \n+#![feature(custom_inner_attributes)]\n #![warn(clippy::match_like_matches_macro)]\n #![allow(unreachable_patterns, dead_code, clippy::equatable_if_let)]\n \n@@ -234,3 +235,21 @@ fn main() {\n         _ => false,\n     };\n }\n+\n+fn msrv_1_41() {\n+    #![clippy::msrv = \"1.41\"]\n+\n+    let _y = match Some(5) {\n+        Some(0) => true,\n+        _ => false,\n+    };\n+}\n+\n+fn msrv_1_42() {\n+    #![clippy::msrv = \"1.42\"]\n+\n+    let _y = match Some(5) {\n+        Some(0) => true,\n+        _ => false,\n+    };\n+}"}, {"sha": "f1d1c23aeb0de7b477a497e536a66e8bd6dcb2b4", "filename": "tests/ui/match_expr_like_matches_macro.stderr", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmatch_expr_like_matches_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmatch_expr_like_matches_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_expr_like_matches_macro.stderr?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,5 +1,5 @@\n error: match expression looks like `matches!` macro\n-  --> $DIR/match_expr_like_matches_macro.rs:10:14\n+  --> $DIR/match_expr_like_matches_macro.rs:11:14\n    |\n LL |       let _y = match x {\n    |  ______________^\n@@ -11,7 +11,7 @@ LL | |     };\n    = note: `-D clippy::match-like-matches-macro` implied by `-D warnings`\n \n error: match expression looks like `matches!` macro\n-  --> $DIR/match_expr_like_matches_macro.rs:16:14\n+  --> $DIR/match_expr_like_matches_macro.rs:17:14\n    |\n LL |       let _w = match x {\n    |  ______________^\n@@ -21,7 +21,7 @@ LL | |     };\n    | |_____^ help: try this: `matches!(x, Some(_))`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/match_expr_like_matches_macro.rs:22:14\n+  --> $DIR/match_expr_like_matches_macro.rs:23:14\n    |\n LL |       let _z = match x {\n    |  ______________^\n@@ -33,7 +33,7 @@ LL | |     };\n    = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n \n error: match expression looks like `matches!` macro\n-  --> $DIR/match_expr_like_matches_macro.rs:28:15\n+  --> $DIR/match_expr_like_matches_macro.rs:29:15\n    |\n LL |       let _zz = match x {\n    |  _______________^\n@@ -43,13 +43,13 @@ LL | |     };\n    | |_____^ help: try this: `!matches!(x, Some(r) if r == 0)`\n \n error: if let .. else expression looks like `matches!` macro\n-  --> $DIR/match_expr_like_matches_macro.rs:34:16\n+  --> $DIR/match_expr_like_matches_macro.rs:35:16\n    |\n LL |     let _zzz = if let Some(5) = x { true } else { false };\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `matches!(x, Some(5))`\n \n error: match expression looks like `matches!` macro\n-  --> $DIR/match_expr_like_matches_macro.rs:58:20\n+  --> $DIR/match_expr_like_matches_macro.rs:59:20\n    |\n LL |           let _ans = match x {\n    |  ____________________^\n@@ -60,7 +60,7 @@ LL | |         };\n    | |_________^ help: try this: `matches!(x, E::A(_) | E::B(_))`\n \n error: match expression looks like `matches!` macro\n-  --> $DIR/match_expr_like_matches_macro.rs:68:20\n+  --> $DIR/match_expr_like_matches_macro.rs:69:20\n    |\n LL |           let _ans = match x {\n    |  ____________________^\n@@ -73,7 +73,7 @@ LL | |         };\n    | |_________^ help: try this: `matches!(x, E::A(_) | E::B(_))`\n \n error: match expression looks like `matches!` macro\n-  --> $DIR/match_expr_like_matches_macro.rs:78:20\n+  --> $DIR/match_expr_like_matches_macro.rs:79:20\n    |\n LL |           let _ans = match x {\n    |  ____________________^\n@@ -84,7 +84,7 @@ LL | |         };\n    | |_________^ help: try this: `!matches!(x, E::B(_) | E::C)`\n \n error: match expression looks like `matches!` macro\n-  --> $DIR/match_expr_like_matches_macro.rs:138:18\n+  --> $DIR/match_expr_like_matches_macro.rs:139:18\n    |\n LL |           let _z = match &z {\n    |  __________________^\n@@ -94,7 +94,7 @@ LL | |         };\n    | |_________^ help: try this: `matches!(z, Some(3))`\n \n error: match expression looks like `matches!` macro\n-  --> $DIR/match_expr_like_matches_macro.rs:147:18\n+  --> $DIR/match_expr_like_matches_macro.rs:148:18\n    |\n LL |           let _z = match &z {\n    |  __________________^\n@@ -104,7 +104,7 @@ LL | |         };\n    | |_________^ help: try this: `matches!(&z, Some(3))`\n \n error: match expression looks like `matches!` macro\n-  --> $DIR/match_expr_like_matches_macro.rs:164:21\n+  --> $DIR/match_expr_like_matches_macro.rs:165:21\n    |\n LL |               let _ = match &z {\n    |  _____________________^\n@@ -114,7 +114,7 @@ LL | |             };\n    | |_____________^ help: try this: `matches!(&z, AnEnum::X)`\n \n error: match expression looks like `matches!` macro\n-  --> $DIR/match_expr_like_matches_macro.rs:178:20\n+  --> $DIR/match_expr_like_matches_macro.rs:179:20\n    |\n LL |           let _res = match &val {\n    |  ____________________^\n@@ -124,7 +124,7 @@ LL | |         };\n    | |_________^ help: try this: `matches!(&val, &Some(ref _a))`\n \n error: match expression looks like `matches!` macro\n-  --> $DIR/match_expr_like_matches_macro.rs:190:20\n+  --> $DIR/match_expr_like_matches_macro.rs:191:20\n    |\n LL |           let _res = match &val {\n    |  ____________________^\n@@ -133,5 +133,15 @@ LL | |             _ => false,\n LL | |         };\n    | |_________^ help: try this: `matches!(&val, &Some(ref _a))`\n \n-error: aborting due to 13 previous errors\n+error: match expression looks like `matches!` macro\n+  --> $DIR/match_expr_like_matches_macro.rs:251:14\n+   |\n+LL |       let _y = match Some(5) {\n+   |  ______________^\n+LL | |         Some(0) => true,\n+LL | |         _ => false,\n+LL | |     };\n+   | |_____^ help: try this: `matches!(Some(5), Some(0))`\n+\n+error: aborting due to 14 previous errors\n "}, {"sha": "ae237395b95fc06d5db17bbc417a9d3c345c1974", "filename": "tests/ui/mem_replace.fixed", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmem_replace.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmem_replace.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace.fixed?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,5 +1,7 @@\n // run-rustfix\n-#![allow(unused_imports)]\n+\n+#![feature(custom_inner_attributes)]\n+#![allow(unused)]\n #![warn(\n     clippy::all,\n     clippy::style,\n@@ -77,3 +79,17 @@ fn main() {\n     replace_with_default();\n     dont_lint_primitive();\n }\n+\n+fn msrv_1_39() {\n+    #![clippy::msrv = \"1.39\"]\n+\n+    let mut s = String::from(\"foo\");\n+    let _ = std::mem::replace(&mut s, String::default());\n+}\n+\n+fn msrv_1_40() {\n+    #![clippy::msrv = \"1.40\"]\n+\n+    let mut s = String::from(\"foo\");\n+    let _ = std::mem::take(&mut s);\n+}"}, {"sha": "3202e99e0be9e99cd0957041eced7010b551fa6e", "filename": "tests/ui/mem_replace.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace.rs?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,5 +1,7 @@\n // run-rustfix\n-#![allow(unused_imports)]\n+\n+#![feature(custom_inner_attributes)]\n+#![allow(unused)]\n #![warn(\n     clippy::all,\n     clippy::style,\n@@ -77,3 +79,17 @@ fn main() {\n     replace_with_default();\n     dont_lint_primitive();\n }\n+\n+fn msrv_1_39() {\n+    #![clippy::msrv = \"1.39\"]\n+\n+    let mut s = String::from(\"foo\");\n+    let _ = std::mem::replace(&mut s, String::default());\n+}\n+\n+fn msrv_1_40() {\n+    #![clippy::msrv = \"1.40\"]\n+\n+    let mut s = String::from(\"foo\");\n+    let _ = std::mem::replace(&mut s, String::default());\n+}"}, {"sha": "dd8a50dab9002f1649d970a1af348d99993bbb0f", "filename": "tests/ui/mem_replace.stderr", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmem_replace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmem_replace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace.stderr?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,120 +1,126 @@\n error: replacing an `Option` with `None`\n-  --> $DIR/mem_replace.rs:15:13\n+  --> $DIR/mem_replace.rs:17:13\n    |\n LL |     let _ = mem::replace(&mut an_option, None);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider `Option::take()` instead: `an_option.take()`\n    |\n    = note: `-D clippy::mem-replace-option-with-none` implied by `-D warnings`\n \n error: replacing an `Option` with `None`\n-  --> $DIR/mem_replace.rs:17:13\n+  --> $DIR/mem_replace.rs:19:13\n    |\n LL |     let _ = mem::replace(an_option, None);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider `Option::take()` instead: `an_option.take()`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:22:13\n+  --> $DIR/mem_replace.rs:24:13\n    |\n LL |     let _ = std::mem::replace(&mut s, String::default());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut s)`\n    |\n    = note: `-D clippy::mem-replace-with-default` implied by `-D warnings`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:25:13\n+  --> $DIR/mem_replace.rs:27:13\n    |\n LL |     let _ = std::mem::replace(s, String::default());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(s)`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:26:13\n+  --> $DIR/mem_replace.rs:28:13\n    |\n LL |     let _ = std::mem::replace(s, Default::default());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(s)`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:29:13\n+  --> $DIR/mem_replace.rs:31:13\n    |\n LL |     let _ = std::mem::replace(&mut v, Vec::default());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut v)`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:30:13\n+  --> $DIR/mem_replace.rs:32:13\n    |\n LL |     let _ = std::mem::replace(&mut v, Default::default());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut v)`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:31:13\n+  --> $DIR/mem_replace.rs:33:13\n    |\n LL |     let _ = std::mem::replace(&mut v, Vec::new());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut v)`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:32:13\n+  --> $DIR/mem_replace.rs:34:13\n    |\n LL |     let _ = std::mem::replace(&mut v, vec![]);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut v)`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:35:13\n+  --> $DIR/mem_replace.rs:37:13\n    |\n LL |     let _ = std::mem::replace(&mut hash_map, HashMap::new());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut hash_map)`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:38:13\n+  --> $DIR/mem_replace.rs:40:13\n    |\n LL |     let _ = std::mem::replace(&mut btree_map, BTreeMap::new());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut btree_map)`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:41:13\n+  --> $DIR/mem_replace.rs:43:13\n    |\n LL |     let _ = std::mem::replace(&mut vd, VecDeque::new());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut vd)`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:44:13\n+  --> $DIR/mem_replace.rs:46:13\n    |\n LL |     let _ = std::mem::replace(&mut hash_set, HashSet::new());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut hash_set)`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:47:13\n+  --> $DIR/mem_replace.rs:49:13\n    |\n LL |     let _ = std::mem::replace(&mut btree_set, BTreeSet::new());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut btree_set)`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:50:13\n+  --> $DIR/mem_replace.rs:52:13\n    |\n LL |     let _ = std::mem::replace(&mut list, LinkedList::new());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut list)`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:53:13\n+  --> $DIR/mem_replace.rs:55:13\n    |\n LL |     let _ = std::mem::replace(&mut binary_heap, BinaryHeap::new());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut binary_heap)`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:56:13\n+  --> $DIR/mem_replace.rs:58:13\n    |\n LL |     let _ = std::mem::replace(&mut tuple, (vec![], BinaryHeap::new()));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut tuple)`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:59:13\n+  --> $DIR/mem_replace.rs:61:13\n    |\n LL |     let _ = std::mem::replace(&mut refstr, \"\");\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut refstr)`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:62:13\n+  --> $DIR/mem_replace.rs:64:13\n    |\n LL |     let _ = std::mem::replace(&mut slice, &[]);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut slice)`\n \n-error: aborting due to 19 previous errors\n+error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n+  --> $DIR/mem_replace.rs:94:13\n+   |\n+LL |     let _ = std::mem::replace(&mut s, String::default());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut s)`\n+\n+error: aborting due to 20 previous errors\n "}, {"sha": "cd148063bf065c304ff683fe19998885a56a3a70", "filename": "tests/ui/min_rust_version_attr.rs", "status": "modified", "additions": 14, "deletions": 225, "changes": 239, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmin_rust_version_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmin_rust_version_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_attr.rs?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,240 +1,29 @@\n #![allow(clippy::redundant_clone)]\n #![feature(custom_inner_attributes)]\n-#![clippy::msrv = \"1.0.0\"]\n \n-use std::ops::{Deref, RangeFrom};\n+fn main() {}\n \n-fn approx_const() {\n+fn just_under_msrv() {\n+    #![clippy::msrv = \"1.42.0\"]\n     let log2_10 = 3.321928094887362;\n-    let log10_2 = 0.301029995663981;\n }\n \n-fn cloned_instead_of_copied() {\n-    let _ = [1].iter().cloned();\n-}\n-\n-fn option_as_ref_deref() {\n-    let mut opt = Some(String::from(\"123\"));\n-\n-    let _ = opt.as_ref().map(String::as_str);\n-    let _ = opt.as_ref().map(|x| x.as_str());\n-    let _ = opt.as_mut().map(String::as_mut_str);\n-    let _ = opt.as_mut().map(|x| x.as_mut_str());\n-}\n-\n-fn match_like_matches() {\n-    let _y = match Some(5) {\n-        Some(0) => true,\n-        _ => false,\n-    };\n-}\n-\n-fn match_same_arms() {\n-    match (1, 2, 3) {\n-        (1, .., 3) => 42,\n-        (.., 3) => 42, //~ ERROR match arms have same body\n-        _ => 0,\n-    };\n-}\n-\n-fn match_same_arms2() {\n-    let _ = match Some(42) {\n-        Some(_) => 24,\n-        None => 24, //~ ERROR match arms have same body\n-    };\n-}\n-\n-pub fn manual_strip_msrv() {\n-    let s = \"hello, world!\";\n-    if s.starts_with(\"hello, \") {\n-        assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n-    }\n-}\n-\n-pub fn redundant_fieldnames() {\n-    let start = 0;\n-    let _ = RangeFrom { start: start };\n-}\n-\n-pub fn redundant_static_lifetime() {\n-    const VAR_ONE: &'static str = \"Test constant #1\";\n-}\n-\n-pub fn checked_conversion() {\n-    let value: i64 = 42;\n-    let _ = value <= (u32::max_value() as i64) && value >= 0;\n-    let _ = value <= (u32::MAX as i64) && value >= 0;\n-}\n-\n-pub struct FromOverInto(String);\n-\n-impl Into<FromOverInto> for String {\n-    fn into(self) -> FromOverInto {\n-        FromOverInto(self)\n-    }\n-}\n-\n-pub fn filter_map_next() {\n-    let a = [\"1\", \"lol\", \"3\", \"NaN\", \"5\"];\n-\n-    #[rustfmt::skip]\n-    let _: Option<u32> = vec![1, 2, 3, 4, 5, 6]\n-        .into_iter()\n-        .filter_map(|x| {\n-            if x == 2 {\n-                Some(x * 2)\n-            } else {\n-                None\n-            }\n-        })\n-        .next();\n-}\n-\n-#[allow(clippy::no_effect)]\n-#[allow(clippy::short_circuit_statement)]\n-#[allow(clippy::unnecessary_operation)]\n-pub fn manual_range_contains() {\n-    let x = 5;\n-    x >= 8 && x < 12;\n-}\n-\n-pub fn use_self() {\n-    struct Foo;\n-\n-    impl Foo {\n-        fn new() -> Foo {\n-            Foo {}\n-        }\n-        fn test() -> Foo {\n-            Foo::new()\n-        }\n-    }\n-}\n-\n-fn replace_with_default() {\n-    let mut s = String::from(\"foo\");\n-    let _ = std::mem::replace(&mut s, String::default());\n-}\n-\n-fn map_unwrap_or() {\n-    let opt = Some(1);\n-\n-    // Check for `option.map(_).unwrap_or(_)` use.\n-    // Single line case.\n-    let _ = opt\n-        .map(|x| x + 1)\n-        // Should lint even though this call is on a separate line.\n-        .unwrap_or(0);\n-}\n-\n-// Could be const\n-fn missing_const_for_fn() -> i32 {\n-    1\n-}\n-\n-fn unnest_or_patterns() {\n-    struct TS(u8, u8);\n-    if let TS(0, x) | TS(1, x) = TS(0, 0) {}\n-}\n-\n-#[cfg_attr(rustfmt, rustfmt_skip)]\n-fn deprecated_cfg_attr() {}\n-\n-#[warn(clippy::cast_lossless)]\n-fn int_from_bool() -> u8 {\n-    true as u8\n-}\n-\n-fn err_expect() {\n-    let x: Result<u32, &str> = Ok(10);\n-    x.err().expect(\"Testing expect_err\");\n-}\n-\n-fn cast_abs_to_unsigned() {\n-    let x: i32 = 10;\n-    assert_eq!(10u32, x.abs() as u32);\n-}\n-\n-fn manual_rem_euclid() {\n-    let x: i32 = 10;\n-    let _: i32 = ((x % 4) + 4) % 4;\n-}\n-\n-fn manual_clamp() {\n-    let (input, min, max) = (0, -1, 2);\n-    let _ = if input < min {\n-        min\n-    } else if input > max {\n-        max\n-    } else {\n-        input\n-    };\n-}\n-\n-fn main() {\n-    filter_map_next();\n-    checked_conversion();\n-    redundant_fieldnames();\n-    redundant_static_lifetime();\n-    option_as_ref_deref();\n-    match_like_matches();\n-    match_same_arms();\n-    match_same_arms2();\n-    manual_strip_msrv();\n-    manual_range_contains();\n-    use_self();\n-    replace_with_default();\n-    map_unwrap_or();\n-    missing_const_for_fn();\n-    unnest_or_patterns();\n-    int_from_bool();\n-    err_expect();\n-    cast_abs_to_unsigned();\n-    manual_rem_euclid();\n-    manual_clamp();\n+fn meets_msrv() {\n+    #![clippy::msrv = \"1.43.0\"]\n+    let log2_10 = 3.321928094887362;\n }\n \n-mod just_under_msrv {\n-    #![feature(custom_inner_attributes)]\n+fn just_above_msrv() {\n     #![clippy::msrv = \"1.44.0\"]\n-\n-    fn main() {\n-        let s = \"hello, world!\";\n-        if s.starts_with(\"hello, \") {\n-            assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n-        }\n-    }\n-}\n-\n-mod meets_msrv {\n-    #![feature(custom_inner_attributes)]\n-    #![clippy::msrv = \"1.45.0\"]\n-\n-    fn main() {\n-        let s = \"hello, world!\";\n-        if s.starts_with(\"hello, \") {\n-            assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n-        }\n-    }\n+    let log2_10 = 3.321928094887362;\n }\n \n-mod just_above_msrv {\n-    #![feature(custom_inner_attributes)]\n-    #![clippy::msrv = \"1.46.0\"]\n-\n-    fn main() {\n-        let s = \"hello, world!\";\n-        if s.starts_with(\"hello, \") {\n-            assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n-        }\n-    }\n+fn no_patch_under() {\n+    #![clippy::msrv = \"1.42\"]\n+    let log2_10 = 3.321928094887362;\n }\n \n-mod const_rem_euclid {\n-    #![feature(custom_inner_attributes)]\n-    #![clippy::msrv = \"1.50.0\"]\n-\n-    pub const fn const_rem_euclid_4(num: i32) -> i32 {\n-        ((num % 4) + 4) % 4\n-    }\n+fn no_patch_meets() {\n+    #![clippy::msrv = \"1.43\"]\n+    let log2_10 = 3.321928094887362;\n }"}, {"sha": "68aa58748190be3552ef5ad7455f95b32dc7fce8", "filename": "tests/ui/min_rust_version_attr.stderr", "status": "modified", "additions": 18, "deletions": 28, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmin_rust_version_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmin_rust_version_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_attr.stderr?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,37 +1,27 @@\n-error: stripping a prefix manually\n-  --> $DIR/min_rust_version_attr.rs:216:24\n+error: approximate value of `f{32, 64}::consts::LOG2_10` found\n+  --> $DIR/min_rust_version_attr.rs:13:19\n    |\n-LL |             assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n-   |                        ^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: the prefix was tested here\n-  --> $DIR/min_rust_version_attr.rs:215:9\n-   |\n-LL |         if s.starts_with(\"hello, \") {\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: `-D clippy::manual-strip` implied by `-D warnings`\n-help: try using the `strip_prefix` method\n-   |\n-LL ~         if let Some(<stripped>) = s.strip_prefix(\"hello, \") {\n-LL ~             assert_eq!(<stripped>.to_uppercase(), \"WORLD!\");\n+LL |     let log2_10 = 3.321928094887362;\n+   |                   ^^^^^^^^^^^^^^^^^\n    |\n+   = help: consider using the constant directly\n+   = note: `#[deny(clippy::approx_constant)]` on by default\n \n-error: stripping a prefix manually\n-  --> $DIR/min_rust_version_attr.rs:228:24\n+error: approximate value of `f{32, 64}::consts::LOG2_10` found\n+  --> $DIR/min_rust_version_attr.rs:18:19\n    |\n-LL |             assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n-   |                        ^^^^^^^^^^^^^^^^^^^^\n+LL |     let log2_10 = 3.321928094887362;\n+   |                   ^^^^^^^^^^^^^^^^^\n    |\n-note: the prefix was tested here\n-  --> $DIR/min_rust_version_attr.rs:227:9\n-   |\n-LL |         if s.starts_with(\"hello, \") {\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: try using the `strip_prefix` method\n+   = help: consider using the constant directly\n+\n+error: approximate value of `f{32, 64}::consts::LOG2_10` found\n+  --> $DIR/min_rust_version_attr.rs:28:19\n    |\n-LL ~         if let Some(<stripped>) = s.strip_prefix(\"hello, \") {\n-LL ~             assert_eq!(<stripped>.to_uppercase(), \"WORLD!\");\n+LL |     let log2_10 = 3.321928094887362;\n+   |                   ^^^^^^^^^^^^^^^^^\n    |\n+   = help: consider using the constant directly\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "02892f329af67d0f9cf1e0fafa870d5f530ab98a", "filename": "tests/ui/min_rust_version_invalid_attr.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmin_rust_version_invalid_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmin_rust_version_invalid_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_invalid_attr.rs?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -2,3 +2,17 @@\n #![clippy::msrv = \"invalid.version\"]\n \n fn main() {}\n+\n+#[clippy::msrv = \"invalid.version\"]\n+fn outer_attr() {}\n+\n+mod multiple {\n+    #![clippy::msrv = \"1.40\"]\n+    #![clippy::msrv = \"=1.35.0\"]\n+    #![clippy::msrv = \"1.10.1\"]\n+\n+    mod foo {\n+        #![clippy::msrv = \"1\"]\n+        #![clippy::msrv = \"1.0.0\"]\n+    }\n+}"}, {"sha": "93370a0fa9c912ce45cf972743c38714c5bcaff7", "filename": "tests/ui/min_rust_version_invalid_attr.stderr", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmin_rust_version_invalid_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmin_rust_version_invalid_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_invalid_attr.stderr?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -4,5 +4,47 @@ error: `invalid.version` is not a valid Rust version\n LL | #![clippy::msrv = \"invalid.version\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: `msrv` cannot be an outer attribute\n+  --> $DIR/min_rust_version_invalid_attr.rs:6:1\n+   |\n+LL | #[clippy::msrv = \"invalid.version\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `msrv` is defined multiple times\n+  --> $DIR/min_rust_version_invalid_attr.rs:11:5\n+   |\n+LL |     #![clippy::msrv = \"=1.35.0\"]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: first definition found here\n+  --> $DIR/min_rust_version_invalid_attr.rs:10:5\n+   |\n+LL |     #![clippy::msrv = \"1.40\"]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `msrv` is defined multiple times\n+  --> $DIR/min_rust_version_invalid_attr.rs:12:5\n+   |\n+LL |     #![clippy::msrv = \"1.10.1\"]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: first definition found here\n+  --> $DIR/min_rust_version_invalid_attr.rs:10:5\n+   |\n+LL |     #![clippy::msrv = \"1.40\"]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `msrv` is defined multiple times\n+  --> $DIR/min_rust_version_invalid_attr.rs:16:9\n+   |\n+LL |         #![clippy::msrv = \"1.0.0\"]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: first definition found here\n+  --> $DIR/min_rust_version_invalid_attr.rs:15:9\n+   |\n+LL |         #![clippy::msrv = \"1\"]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n "}, {"sha": "e882d5ccf91a8f6b7657c63fa218b33a5593174b", "filename": "tests/ui/min_rust_version_multiple_inner_attr.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b62ef608d751925398ef33d1946acde2eab90d49/tests%2Fui%2Fmin_rust_version_multiple_inner_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62ef608d751925398ef33d1946acde2eab90d49/tests%2Fui%2Fmin_rust_version_multiple_inner_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_multiple_inner_attr.rs?ref=b62ef608d751925398ef33d1946acde2eab90d49", "patch": "@@ -1,11 +0,0 @@\n-#![feature(custom_inner_attributes)]\n-#![clippy::msrv = \"1.40\"]\n-#![clippy::msrv = \"=1.35.0\"]\n-#![clippy::msrv = \"1.10.1\"]\n-\n-mod foo {\n-    #![clippy::msrv = \"1\"]\n-    #![clippy::msrv = \"1.0.0\"]\n-}\n-\n-fn main() {}"}, {"sha": "e3ff6605cde87b891cd80d18b77bd64f1d77dcfd", "filename": "tests/ui/min_rust_version_multiple_inner_attr.stderr", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b62ef608d751925398ef33d1946acde2eab90d49/tests%2Fui%2Fmin_rust_version_multiple_inner_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b62ef608d751925398ef33d1946acde2eab90d49/tests%2Fui%2Fmin_rust_version_multiple_inner_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_multiple_inner_attr.stderr?ref=b62ef608d751925398ef33d1946acde2eab90d49", "patch": "@@ -1,38 +0,0 @@\n-error: `msrv` is defined multiple times\n-  --> $DIR/min_rust_version_multiple_inner_attr.rs:3:1\n-   |\n-LL | #![clippy::msrv = \"=1.35.0\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: first definition found here\n-  --> $DIR/min_rust_version_multiple_inner_attr.rs:2:1\n-   |\n-LL | #![clippy::msrv = \"1.40\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: `msrv` is defined multiple times\n-  --> $DIR/min_rust_version_multiple_inner_attr.rs:4:1\n-   |\n-LL | #![clippy::msrv = \"1.10.1\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: first definition found here\n-  --> $DIR/min_rust_version_multiple_inner_attr.rs:2:1\n-   |\n-LL | #![clippy::msrv = \"1.40\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: `msrv` is defined multiple times\n-  --> $DIR/min_rust_version_multiple_inner_attr.rs:8:5\n-   |\n-LL |     #![clippy::msrv = \"1.0.0\"]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: first definition found here\n-  --> $DIR/min_rust_version_multiple_inner_attr.rs:7:5\n-   |\n-LL |     #![clippy::msrv = \"1\"]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 3 previous errors\n-"}, {"sha": "98fffe1e3512b9c41750f598f0787ce56329eade", "filename": "tests/ui/min_rust_version_no_patch.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b62ef608d751925398ef33d1946acde2eab90d49/tests%2Fui%2Fmin_rust_version_no_patch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62ef608d751925398ef33d1946acde2eab90d49/tests%2Fui%2Fmin_rust_version_no_patch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_no_patch.rs?ref=b62ef608d751925398ef33d1946acde2eab90d49", "patch": "@@ -1,14 +0,0 @@\n-#![allow(clippy::redundant_clone)]\n-#![feature(custom_inner_attributes)]\n-#![clippy::msrv = \"1.0\"]\n-\n-fn manual_strip_msrv() {\n-    let s = \"hello, world!\";\n-    if s.starts_with(\"hello, \") {\n-        assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n-    }\n-}\n-\n-fn main() {\n-    manual_strip_msrv()\n-}"}, {"sha": "551948bd72ef1be61145dacfed4dc98f7e33d2ba", "filename": "tests/ui/min_rust_version_outer_attr.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b62ef608d751925398ef33d1946acde2eab90d49/tests%2Fui%2Fmin_rust_version_outer_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62ef608d751925398ef33d1946acde2eab90d49/tests%2Fui%2Fmin_rust_version_outer_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_outer_attr.rs?ref=b62ef608d751925398ef33d1946acde2eab90d49", "patch": "@@ -1,4 +0,0 @@\n-#![feature(custom_inner_attributes)]\n-\n-#[clippy::msrv = \"invalid.version\"]\n-fn main() {}"}, {"sha": "579ee7a87d23ceef6bf2c06ebfc097d8d6e17686", "filename": "tests/ui/min_rust_version_outer_attr.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b62ef608d751925398ef33d1946acde2eab90d49/tests%2Fui%2Fmin_rust_version_outer_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b62ef608d751925398ef33d1946acde2eab90d49/tests%2Fui%2Fmin_rust_version_outer_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_outer_attr.stderr?ref=b62ef608d751925398ef33d1946acde2eab90d49", "patch": "@@ -1,8 +0,0 @@\n-error: `msrv` cannot be an outer attribute\n-  --> $DIR/min_rust_version_outer_attr.rs:3:1\n-   |\n-LL | #[clippy::msrv = \"invalid.version\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "b85e88784918d50401858472574b07902aadf6e0", "filename": "tests/ui/missing_const_for_fn/could_be_const.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -77,5 +77,17 @@ mod const_fn_stabilized_before_msrv {\n     }\n }\n \n+fn msrv_1_45() -> i32 {\n+    #![clippy::msrv = \"1.45\"]\n+\n+    45\n+}\n+\n+fn msrv_1_46() -> i32 {\n+    #![clippy::msrv = \"1.46\"]\n+\n+    46\n+}\n+\n // Should not be const\n fn main() {}"}, {"sha": "f8e221c82f1a5c4ba575433c3cdeb301577c60d3", "filename": "tests/ui/missing_const_for_fn/could_be_const.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -81,5 +81,15 @@ LL | |         byte.is_ascii_digit();\n LL | |     }\n    | |_____^\n \n-error: aborting due to 10 previous errors\n+error: this could be a `const fn`\n+  --> $DIR/could_be_const.rs:86:1\n+   |\n+LL | / fn msrv_1_46() -> i32 {\n+LL | |     #![clippy::msrv = \"1.46\"]\n+LL | |\n+LL | |     46\n+LL | | }\n+   | |_^\n+\n+error: aborting due to 11 previous errors\n "}, {"sha": "bc376d0d7fb391eed0b6806779ed5bfec1063b47", "filename": "tests/ui/option_as_ref_deref.fixed", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Foption_as_ref_deref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Foption_as_ref_deref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_as_ref_deref.fixed?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n-#![allow(unused_imports, clippy::redundant_clone)]\n+#![feature(custom_inner_attributes)]\n+#![allow(unused, clippy::redundant_clone)]\n #![warn(clippy::option_as_ref_deref)]\n \n use std::ffi::{CString, OsString};\n@@ -42,3 +43,17 @@ fn main() {\n     // Issue #5927\n     let _ = opt.as_deref();\n }\n+\n+fn msrv_1_39() {\n+    #![clippy::msrv = \"1.39\"]\n+\n+    let opt = Some(String::from(\"123\"));\n+    let _ = opt.as_ref().map(String::as_str);\n+}\n+\n+fn msrv_1_40() {\n+    #![clippy::msrv = \"1.40\"]\n+\n+    let opt = Some(String::from(\"123\"));\n+    let _ = opt.as_deref();\n+}"}, {"sha": "ba3a2eedc225cf42b27803ce102c4a4713344fb6", "filename": "tests/ui/option_as_ref_deref.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Foption_as_ref_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Foption_as_ref_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_as_ref_deref.rs?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n-#![allow(unused_imports, clippy::redundant_clone)]\n+#![feature(custom_inner_attributes)]\n+#![allow(unused, clippy::redundant_clone)]\n #![warn(clippy::option_as_ref_deref)]\n \n use std::ffi::{CString, OsString};\n@@ -45,3 +46,17 @@ fn main() {\n     // Issue #5927\n     let _ = opt.as_ref().map(std::ops::Deref::deref);\n }\n+\n+fn msrv_1_39() {\n+    #![clippy::msrv = \"1.39\"]\n+\n+    let opt = Some(String::from(\"123\"));\n+    let _ = opt.as_ref().map(String::as_str);\n+}\n+\n+fn msrv_1_40() {\n+    #![clippy::msrv = \"1.40\"]\n+\n+    let opt = Some(String::from(\"123\"));\n+    let _ = opt.as_ref().map(String::as_str);\n+}"}, {"sha": "7de8b3b6ba4355c55d3fb0a7712f7e43253e1596", "filename": "tests/ui/option_as_ref_deref.stderr", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Foption_as_ref_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Foption_as_ref_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_as_ref_deref.stderr?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,13 +1,13 @@\n error: called `.as_ref().map(Deref::deref)` on an Option value. This can be done more directly by calling `opt.clone().as_deref()` instead\n-  --> $DIR/option_as_ref_deref.rs:13:13\n+  --> $DIR/option_as_ref_deref.rs:14:13\n    |\n LL |     let _ = opt.clone().as_ref().map(Deref::deref).map(str::len);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `opt.clone().as_deref()`\n    |\n    = note: `-D clippy::option-as-ref-deref` implied by `-D warnings`\n \n error: called `.as_ref().map(Deref::deref)` on an Option value. This can be done more directly by calling `opt.clone().as_deref()` instead\n-  --> $DIR/option_as_ref_deref.rs:16:13\n+  --> $DIR/option_as_ref_deref.rs:17:13\n    |\n LL |       let _ = opt.clone()\n    |  _____________^\n@@ -17,94 +17,100 @@ LL | |         )\n    | |_________^ help: try using as_deref instead: `opt.clone().as_deref()`\n \n error: called `.as_mut().map(DerefMut::deref_mut)` on an Option value. This can be done more directly by calling `opt.as_deref_mut()` instead\n-  --> $DIR/option_as_ref_deref.rs:22:13\n+  --> $DIR/option_as_ref_deref.rs:23:13\n    |\n LL |     let _ = opt.as_mut().map(DerefMut::deref_mut);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref_mut instead: `opt.as_deref_mut()`\n \n error: called `.as_ref().map(String::as_str)` on an Option value. This can be done more directly by calling `opt.as_deref()` instead\n-  --> $DIR/option_as_ref_deref.rs:24:13\n+  --> $DIR/option_as_ref_deref.rs:25:13\n    |\n LL |     let _ = opt.as_ref().map(String::as_str);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `opt.as_deref()`\n \n error: called `.as_ref().map(|x| x.as_str())` on an Option value. This can be done more directly by calling `opt.as_deref()` instead\n-  --> $DIR/option_as_ref_deref.rs:25:13\n+  --> $DIR/option_as_ref_deref.rs:26:13\n    |\n LL |     let _ = opt.as_ref().map(|x| x.as_str());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `opt.as_deref()`\n \n error: called `.as_mut().map(String::as_mut_str)` on an Option value. This can be done more directly by calling `opt.as_deref_mut()` instead\n-  --> $DIR/option_as_ref_deref.rs:26:13\n+  --> $DIR/option_as_ref_deref.rs:27:13\n    |\n LL |     let _ = opt.as_mut().map(String::as_mut_str);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref_mut instead: `opt.as_deref_mut()`\n \n error: called `.as_mut().map(|x| x.as_mut_str())` on an Option value. This can be done more directly by calling `opt.as_deref_mut()` instead\n-  --> $DIR/option_as_ref_deref.rs:27:13\n+  --> $DIR/option_as_ref_deref.rs:28:13\n    |\n LL |     let _ = opt.as_mut().map(|x| x.as_mut_str());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref_mut instead: `opt.as_deref_mut()`\n \n error: called `.as_ref().map(CString::as_c_str)` on an Option value. This can be done more directly by calling `Some(CString::new(vec![]).unwrap()).as_deref()` instead\n-  --> $DIR/option_as_ref_deref.rs:28:13\n+  --> $DIR/option_as_ref_deref.rs:29:13\n    |\n LL |     let _ = Some(CString::new(vec![]).unwrap()).as_ref().map(CString::as_c_str);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `Some(CString::new(vec![]).unwrap()).as_deref()`\n \n error: called `.as_ref().map(OsString::as_os_str)` on an Option value. This can be done more directly by calling `Some(OsString::new()).as_deref()` instead\n-  --> $DIR/option_as_ref_deref.rs:29:13\n+  --> $DIR/option_as_ref_deref.rs:30:13\n    |\n LL |     let _ = Some(OsString::new()).as_ref().map(OsString::as_os_str);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `Some(OsString::new()).as_deref()`\n \n error: called `.as_ref().map(PathBuf::as_path)` on an Option value. This can be done more directly by calling `Some(PathBuf::new()).as_deref()` instead\n-  --> $DIR/option_as_ref_deref.rs:30:13\n+  --> $DIR/option_as_ref_deref.rs:31:13\n    |\n LL |     let _ = Some(PathBuf::new()).as_ref().map(PathBuf::as_path);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `Some(PathBuf::new()).as_deref()`\n \n error: called `.as_ref().map(Vec::as_slice)` on an Option value. This can be done more directly by calling `Some(Vec::<()>::new()).as_deref()` instead\n-  --> $DIR/option_as_ref_deref.rs:31:13\n+  --> $DIR/option_as_ref_deref.rs:32:13\n    |\n LL |     let _ = Some(Vec::<()>::new()).as_ref().map(Vec::as_slice);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `Some(Vec::<()>::new()).as_deref()`\n \n error: called `.as_mut().map(Vec::as_mut_slice)` on an Option value. This can be done more directly by calling `Some(Vec::<()>::new()).as_deref_mut()` instead\n-  --> $DIR/option_as_ref_deref.rs:32:13\n+  --> $DIR/option_as_ref_deref.rs:33:13\n    |\n LL |     let _ = Some(Vec::<()>::new()).as_mut().map(Vec::as_mut_slice);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref_mut instead: `Some(Vec::<()>::new()).as_deref_mut()`\n \n error: called `.as_ref().map(|x| x.deref())` on an Option value. This can be done more directly by calling `opt.as_deref()` instead\n-  --> $DIR/option_as_ref_deref.rs:34:13\n+  --> $DIR/option_as_ref_deref.rs:35:13\n    |\n LL |     let _ = opt.as_ref().map(|x| x.deref());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `opt.as_deref()`\n \n error: called `.as_mut().map(|x| x.deref_mut())` on an Option value. This can be done more directly by calling `opt.clone().as_deref_mut()` instead\n-  --> $DIR/option_as_ref_deref.rs:35:13\n+  --> $DIR/option_as_ref_deref.rs:36:13\n    |\n LL |     let _ = opt.clone().as_mut().map(|x| x.deref_mut()).map(|x| x.len());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref_mut instead: `opt.clone().as_deref_mut()`\n \n error: called `.as_ref().map(|x| &**x)` on an Option value. This can be done more directly by calling `opt.as_deref()` instead\n-  --> $DIR/option_as_ref_deref.rs:42:13\n+  --> $DIR/option_as_ref_deref.rs:43:13\n    |\n LL |     let _ = opt.as_ref().map(|x| &**x);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `opt.as_deref()`\n \n error: called `.as_mut().map(|x| &mut **x)` on an Option value. This can be done more directly by calling `opt.as_deref_mut()` instead\n-  --> $DIR/option_as_ref_deref.rs:43:13\n+  --> $DIR/option_as_ref_deref.rs:44:13\n    |\n LL |     let _ = opt.as_mut().map(|x| &mut **x);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref_mut instead: `opt.as_deref_mut()`\n \n error: called `.as_ref().map(std::ops::Deref::deref)` on an Option value. This can be done more directly by calling `opt.as_deref()` instead\n-  --> $DIR/option_as_ref_deref.rs:46:13\n+  --> $DIR/option_as_ref_deref.rs:47:13\n    |\n LL |     let _ = opt.as_ref().map(std::ops::Deref::deref);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `opt.as_deref()`\n \n-error: aborting due to 17 previous errors\n+error: called `.as_ref().map(String::as_str)` on an Option value. This can be done more directly by calling `opt.as_deref()` instead\n+  --> $DIR/option_as_ref_deref.rs:61:13\n+   |\n+LL |     let _ = opt.as_ref().map(String::as_str);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `opt.as_deref()`\n+\n+error: aborting due to 18 previous errors\n "}, {"sha": "824f00cb99e85159987586450fc593ac93d97792", "filename": "tests/ui/range_contains.fixed", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Frange_contains.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Frange_contains.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_contains.fixed?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,10 +1,12 @@\n // run-rustfix\n \n-#[warn(clippy::manual_range_contains)]\n-#[allow(unused)]\n-#[allow(clippy::no_effect)]\n-#[allow(clippy::short_circuit_statement)]\n-#[allow(clippy::unnecessary_operation)]\n+#![feature(custom_inner_attributes)]\n+#![warn(clippy::manual_range_contains)]\n+#![allow(unused)]\n+#![allow(clippy::no_effect)]\n+#![allow(clippy::short_circuit_statement)]\n+#![allow(clippy::unnecessary_operation)]\n+\n fn main() {\n     let x = 9_i32;\n \n@@ -62,3 +64,17 @@ fn main() {\n pub const fn in_range(a: i32) -> bool {\n     3 <= a && a <= 20\n }\n+\n+fn msrv_1_34() {\n+    #![clippy::msrv = \"1.34\"]\n+\n+    let x = 5;\n+    x >= 8 && x < 34;\n+}\n+\n+fn msrv_1_35() {\n+    #![clippy::msrv = \"1.35\"]\n+\n+    let x = 5;\n+    (8..35).contains(&x);\n+}"}, {"sha": "df925eeadfe5e0762f712412b29cf938de30ca08", "filename": "tests/ui/range_contains.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Frange_contains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Frange_contains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_contains.rs?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,10 +1,12 @@\n // run-rustfix\n \n-#[warn(clippy::manual_range_contains)]\n-#[allow(unused)]\n-#[allow(clippy::no_effect)]\n-#[allow(clippy::short_circuit_statement)]\n-#[allow(clippy::unnecessary_operation)]\n+#![feature(custom_inner_attributes)]\n+#![warn(clippy::manual_range_contains)]\n+#![allow(unused)]\n+#![allow(clippy::no_effect)]\n+#![allow(clippy::short_circuit_statement)]\n+#![allow(clippy::unnecessary_operation)]\n+\n fn main() {\n     let x = 9_i32;\n \n@@ -62,3 +64,17 @@ fn main() {\n pub const fn in_range(a: i32) -> bool {\n     3 <= a && a <= 20\n }\n+\n+fn msrv_1_34() {\n+    #![clippy::msrv = \"1.34\"]\n+\n+    let x = 5;\n+    x >= 8 && x < 34;\n+}\n+\n+fn msrv_1_35() {\n+    #![clippy::msrv = \"1.35\"]\n+\n+    let x = 5;\n+    x >= 8 && x < 35;\n+}"}, {"sha": "9689e665b05c582ab061dc0734af45b461e0d059", "filename": "tests/ui/range_contains.stderr", "status": "modified", "additions": 27, "deletions": 21, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Frange_contains.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Frange_contains.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_contains.stderr?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,124 +1,130 @@\n error: manual `Range::contains` implementation\n-  --> $DIR/range_contains.rs:12:5\n+  --> $DIR/range_contains.rs:14:5\n    |\n LL |     x >= 8 && x < 12;\n    |     ^^^^^^^^^^^^^^^^ help: use: `(8..12).contains(&x)`\n    |\n    = note: `-D clippy::manual-range-contains` implied by `-D warnings`\n \n error: manual `Range::contains` implementation\n-  --> $DIR/range_contains.rs:13:5\n+  --> $DIR/range_contains.rs:15:5\n    |\n LL |     x < 42 && x >= 21;\n    |     ^^^^^^^^^^^^^^^^^ help: use: `(21..42).contains(&x)`\n \n error: manual `Range::contains` implementation\n-  --> $DIR/range_contains.rs:14:5\n+  --> $DIR/range_contains.rs:16:5\n    |\n LL |     100 > x && 1 <= x;\n    |     ^^^^^^^^^^^^^^^^^ help: use: `(1..100).contains(&x)`\n \n error: manual `RangeInclusive::contains` implementation\n-  --> $DIR/range_contains.rs:17:5\n+  --> $DIR/range_contains.rs:19:5\n    |\n LL |     x >= 9 && x <= 99;\n    |     ^^^^^^^^^^^^^^^^^ help: use: `(9..=99).contains(&x)`\n \n error: manual `RangeInclusive::contains` implementation\n-  --> $DIR/range_contains.rs:18:5\n+  --> $DIR/range_contains.rs:20:5\n    |\n LL |     x <= 33 && x >= 1;\n    |     ^^^^^^^^^^^^^^^^^ help: use: `(1..=33).contains(&x)`\n \n error: manual `RangeInclusive::contains` implementation\n-  --> $DIR/range_contains.rs:19:5\n+  --> $DIR/range_contains.rs:21:5\n    |\n LL |     999 >= x && 1 <= x;\n    |     ^^^^^^^^^^^^^^^^^^ help: use: `(1..=999).contains(&x)`\n \n error: manual `!Range::contains` implementation\n-  --> $DIR/range_contains.rs:22:5\n+  --> $DIR/range_contains.rs:24:5\n    |\n LL |     x < 8 || x >= 12;\n    |     ^^^^^^^^^^^^^^^^ help: use: `!(8..12).contains(&x)`\n \n error: manual `!Range::contains` implementation\n-  --> $DIR/range_contains.rs:23:5\n+  --> $DIR/range_contains.rs:25:5\n    |\n LL |     x >= 42 || x < 21;\n    |     ^^^^^^^^^^^^^^^^^ help: use: `!(21..42).contains(&x)`\n \n error: manual `!Range::contains` implementation\n-  --> $DIR/range_contains.rs:24:5\n+  --> $DIR/range_contains.rs:26:5\n    |\n LL |     100 <= x || 1 > x;\n    |     ^^^^^^^^^^^^^^^^^ help: use: `!(1..100).contains(&x)`\n \n error: manual `!RangeInclusive::contains` implementation\n-  --> $DIR/range_contains.rs:27:5\n+  --> $DIR/range_contains.rs:29:5\n    |\n LL |     x < 9 || x > 99;\n    |     ^^^^^^^^^^^^^^^ help: use: `!(9..=99).contains(&x)`\n \n error: manual `!RangeInclusive::contains` implementation\n-  --> $DIR/range_contains.rs:28:5\n+  --> $DIR/range_contains.rs:30:5\n    |\n LL |     x > 33 || x < 1;\n    |     ^^^^^^^^^^^^^^^ help: use: `!(1..=33).contains(&x)`\n \n error: manual `!RangeInclusive::contains` implementation\n-  --> $DIR/range_contains.rs:29:5\n+  --> $DIR/range_contains.rs:31:5\n    |\n LL |     999 < x || 1 > x;\n    |     ^^^^^^^^^^^^^^^^ help: use: `!(1..=999).contains(&x)`\n \n error: manual `Range::contains` implementation\n-  --> $DIR/range_contains.rs:44:5\n+  --> $DIR/range_contains.rs:46:5\n    |\n LL |     y >= 0. && y < 1.;\n    |     ^^^^^^^^^^^^^^^^^ help: use: `(0. ..1.).contains(&y)`\n \n error: manual `!RangeInclusive::contains` implementation\n-  --> $DIR/range_contains.rs:45:5\n+  --> $DIR/range_contains.rs:47:5\n    |\n LL |     y < 0. || y > 1.;\n    |     ^^^^^^^^^^^^^^^^ help: use: `!(0. ..=1.).contains(&y)`\n \n error: manual `RangeInclusive::contains` implementation\n-  --> $DIR/range_contains.rs:48:5\n+  --> $DIR/range_contains.rs:50:5\n    |\n LL |     x >= -10 && x <= 10;\n    |     ^^^^^^^^^^^^^^^^^^^ help: use: `(-10..=10).contains(&x)`\n \n error: manual `RangeInclusive::contains` implementation\n-  --> $DIR/range_contains.rs:50:5\n+  --> $DIR/range_contains.rs:52:5\n    |\n LL |     y >= -3. && y <= 3.;\n    |     ^^^^^^^^^^^^^^^^^^^ help: use: `(-3. ..=3.).contains(&y)`\n \n error: manual `RangeInclusive::contains` implementation\n-  --> $DIR/range_contains.rs:55:30\n+  --> $DIR/range_contains.rs:57:30\n    |\n LL |     (x >= 0) && (x <= 10) && (z >= 0) && (z <= 10);\n    |                              ^^^^^^^^^^^^^^^^^^^^^ help: use: `(0..=10).contains(&z)`\n \n error: manual `RangeInclusive::contains` implementation\n-  --> $DIR/range_contains.rs:55:5\n+  --> $DIR/range_contains.rs:57:5\n    |\n LL |     (x >= 0) && (x <= 10) && (z >= 0) && (z <= 10);\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: use: `(0..=10).contains(&x)`\n \n error: manual `!Range::contains` implementation\n-  --> $DIR/range_contains.rs:56:29\n+  --> $DIR/range_contains.rs:58:29\n    |\n LL |     (x < 0) || (x >= 10) || (z < 0) || (z >= 10);\n    |                             ^^^^^^^^^^^^^^^^^^^^ help: use: `!(0..10).contains(&z)`\n \n error: manual `!Range::contains` implementation\n-  --> $DIR/range_contains.rs:56:5\n+  --> $DIR/range_contains.rs:58:5\n    |\n LL |     (x < 0) || (x >= 10) || (z < 0) || (z >= 10);\n    |     ^^^^^^^^^^^^^^^^^^^^ help: use: `!(0..10).contains(&x)`\n \n-error: aborting due to 20 previous errors\n+error: manual `Range::contains` implementation\n+  --> $DIR/range_contains.rs:79:5\n+   |\n+LL |     x >= 8 && x < 35;\n+   |     ^^^^^^^^^^^^^^^^ help: use: `(8..35).contains(&x)`\n+\n+error: aborting due to 21 previous errors\n "}, {"sha": "34ab552cb1d8d6aee22db40c07818a11eb42f8db", "filename": "tests/ui/redundant_field_names.fixed", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fredundant_field_names.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fredundant_field_names.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_field_names.fixed?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,4 +1,6 @@\n // run-rustfix\n+\n+#![feature(custom_inner_attributes)]\n #![warn(clippy::redundant_field_names)]\n #![allow(clippy::no_effect, dead_code, unused_variables)]\n \n@@ -69,3 +71,17 @@ fn issue_3476() {\n \n     S { foo: foo::<i32> };\n }\n+\n+fn msrv_1_16() {\n+    #![clippy::msrv = \"1.16\"]\n+\n+    let start = 0;\n+    let _ = RangeFrom { start: start };\n+}\n+\n+fn msrv_1_17() {\n+    #![clippy::msrv = \"1.17\"]\n+\n+    let start = 0;\n+    let _ = RangeFrom { start };\n+}"}, {"sha": "a051b1f96f0fda8dad22fe3fba5f867d0249263a", "filename": "tests/ui/redundant_field_names.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_field_names.rs?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,4 +1,6 @@\n // run-rustfix\n+\n+#![feature(custom_inner_attributes)]\n #![warn(clippy::redundant_field_names)]\n #![allow(clippy::no_effect, dead_code, unused_variables)]\n \n@@ -69,3 +71,17 @@ fn issue_3476() {\n \n     S { foo: foo::<i32> };\n }\n+\n+fn msrv_1_16() {\n+    #![clippy::msrv = \"1.16\"]\n+\n+    let start = 0;\n+    let _ = RangeFrom { start: start };\n+}\n+\n+fn msrv_1_17() {\n+    #![clippy::msrv = \"1.17\"]\n+\n+    let start = 0;\n+    let _ = RangeFrom { start: start };\n+}"}, {"sha": "8b82e062b93a63325c94f5e4c79b5f9592f63f5c", "filename": "tests/ui/redundant_field_names.stderr", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fredundant_field_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fredundant_field_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_field_names.stderr?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,46 +1,52 @@\n error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:34:9\n+  --> $DIR/redundant_field_names.rs:36:9\n    |\n LL |         gender: gender,\n    |         ^^^^^^^^^^^^^^ help: replace it with: `gender`\n    |\n    = note: `-D clippy::redundant-field-names` implied by `-D warnings`\n \n error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:35:9\n+  --> $DIR/redundant_field_names.rs:37:9\n    |\n LL |         age: age,\n    |         ^^^^^^^^ help: replace it with: `age`\n \n error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:56:25\n+  --> $DIR/redundant_field_names.rs:58:25\n    |\n LL |     let _ = RangeFrom { start: start };\n    |                         ^^^^^^^^^^^^ help: replace it with: `start`\n \n error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:57:23\n+  --> $DIR/redundant_field_names.rs:59:23\n    |\n LL |     let _ = RangeTo { end: end };\n    |                       ^^^^^^^^ help: replace it with: `end`\n \n error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:58:21\n+  --> $DIR/redundant_field_names.rs:60:21\n    |\n LL |     let _ = Range { start: start, end: end };\n    |                     ^^^^^^^^^^^^ help: replace it with: `start`\n \n error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:58:35\n+  --> $DIR/redundant_field_names.rs:60:35\n    |\n LL |     let _ = Range { start: start, end: end };\n    |                                   ^^^^^^^^ help: replace it with: `end`\n \n error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:60:32\n+  --> $DIR/redundant_field_names.rs:62:32\n    |\n LL |     let _ = RangeToInclusive { end: end };\n    |                                ^^^^^^^^ help: replace it with: `end`\n \n-error: aborting due to 7 previous errors\n+error: redundant field names in struct initialization\n+  --> $DIR/redundant_field_names.rs:86:25\n+   |\n+LL |     let _ = RangeFrom { start: start };\n+   |                         ^^^^^^^^^^^^ help: replace it with: `start`\n+\n+error: aborting due to 8 previous errors\n "}, {"sha": "42110dbe81e84f8d35f678b7613be06f4b2f9a53", "filename": "tests/ui/redundant_static_lifetimes.fixed", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fredundant_static_lifetimes.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fredundant_static_lifetimes.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_static_lifetimes.fixed?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n \n+#![feature(custom_inner_attributes)]\n #![allow(unused)]\n \n #[derive(Debug)]\n@@ -54,3 +55,15 @@ impl Foo {\n impl Bar for Foo {\n     const TRAIT_VAR: &'static str = \"foo\";\n }\n+\n+fn msrv_1_16() {\n+    #![clippy::msrv = \"1.16\"]\n+\n+    static V: &'static u8 = &16;\n+}\n+\n+fn msrv_1_17() {\n+    #![clippy::msrv = \"1.17\"]\n+\n+    static V: &u8 = &17;\n+}"}, {"sha": "bc5200bc8625b0a200e05035f2582f3dd2eab21d", "filename": "tests/ui/redundant_static_lifetimes.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fredundant_static_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fredundant_static_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_static_lifetimes.rs?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n \n+#![feature(custom_inner_attributes)]\n #![allow(unused)]\n \n #[derive(Debug)]\n@@ -54,3 +55,15 @@ impl Foo {\n impl Bar for Foo {\n     const TRAIT_VAR: &'static str = \"foo\";\n }\n+\n+fn msrv_1_16() {\n+    #![clippy::msrv = \"1.16\"]\n+\n+    static V: &'static u8 = &16;\n+}\n+\n+fn msrv_1_17() {\n+    #![clippy::msrv = \"1.17\"]\n+\n+    static V: &'static u8 = &17;\n+}"}, {"sha": "735113460d28caf9c67ea003d651fe7cbf9fbafc", "filename": "tests/ui/redundant_static_lifetimes.stderr", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fredundant_static_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fredundant_static_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_static_lifetimes.stderr?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,100 +1,106 @@\n error: constants have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:8:17\n+  --> $DIR/redundant_static_lifetimes.rs:9:17\n    |\n LL | const VAR_ONE: &'static str = \"Test constant #1\"; // ERROR Consider removing 'static.\n    |                -^^^^^^^---- help: consider removing `'static`: `&str`\n    |\n    = note: `-D clippy::redundant-static-lifetimes` implied by `-D warnings`\n \n error: constants have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:12:21\n+  --> $DIR/redundant_static_lifetimes.rs:13:21\n    |\n LL | const VAR_THREE: &[&'static str] = &[\"one\", \"two\"]; // ERROR Consider removing 'static\n    |                    -^^^^^^^---- help: consider removing `'static`: `&str`\n \n error: constants have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:14:32\n+  --> $DIR/redundant_static_lifetimes.rs:15:32\n    |\n LL | const VAR_FOUR: (&str, (&str, &'static str), &'static str) = (\"on\", (\"th\", \"th\"), \"on\"); // ERROR Consider removing 'static\n    |                               -^^^^^^^---- help: consider removing `'static`: `&str`\n \n error: constants have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:14:47\n+  --> $DIR/redundant_static_lifetimes.rs:15:47\n    |\n LL | const VAR_FOUR: (&str, (&str, &'static str), &'static str) = (\"on\", (\"th\", \"th\"), \"on\"); // ERROR Consider removing 'static\n    |                                              -^^^^^^^---- help: consider removing `'static`: `&str`\n \n error: constants have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:16:17\n+  --> $DIR/redundant_static_lifetimes.rs:17:17\n    |\n LL | const VAR_SIX: &'static u8 = &5;\n    |                -^^^^^^^--- help: consider removing `'static`: `&u8`\n \n error: constants have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:18:20\n+  --> $DIR/redundant_static_lifetimes.rs:19:20\n    |\n LL | const VAR_HEIGHT: &'static Foo = &Foo {};\n    |                   -^^^^^^^---- help: consider removing `'static`: `&Foo`\n \n error: constants have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:20:19\n+  --> $DIR/redundant_static_lifetimes.rs:21:19\n    |\n LL | const VAR_SLICE: &'static [u8] = b\"Test constant #1\"; // ERROR Consider removing 'static.\n    |                  -^^^^^^^----- help: consider removing `'static`: `&[u8]`\n \n error: constants have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:22:19\n+  --> $DIR/redundant_static_lifetimes.rs:23:19\n    |\n LL | const VAR_TUPLE: &'static (u8, u8) = &(1, 2); // ERROR Consider removing 'static.\n    |                  -^^^^^^^--------- help: consider removing `'static`: `&(u8, u8)`\n \n error: constants have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:24:19\n+  --> $DIR/redundant_static_lifetimes.rs:25:19\n    |\n LL | const VAR_ARRAY: &'static [u8; 1] = b\"T\"; // ERROR Consider removing 'static.\n    |                  -^^^^^^^-------- help: consider removing `'static`: `&[u8; 1]`\n \n error: statics have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:26:25\n+  --> $DIR/redundant_static_lifetimes.rs:27:25\n    |\n LL | static STATIC_VAR_ONE: &'static str = \"Test static #1\"; // ERROR Consider removing 'static.\n    |                        -^^^^^^^---- help: consider removing `'static`: `&str`\n \n error: statics have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:30:29\n+  --> $DIR/redundant_static_lifetimes.rs:31:29\n    |\n LL | static STATIC_VAR_THREE: &[&'static str] = &[\"one\", \"two\"]; // ERROR Consider removing 'static\n    |                            -^^^^^^^---- help: consider removing `'static`: `&str`\n \n error: statics have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:32:25\n+  --> $DIR/redundant_static_lifetimes.rs:33:25\n    |\n LL | static STATIC_VAR_SIX: &'static u8 = &5;\n    |                        -^^^^^^^--- help: consider removing `'static`: `&u8`\n \n error: statics have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:34:28\n+  --> $DIR/redundant_static_lifetimes.rs:35:28\n    |\n LL | static STATIC_VAR_HEIGHT: &'static Foo = &Foo {};\n    |                           -^^^^^^^---- help: consider removing `'static`: `&Foo`\n \n error: statics have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:36:27\n+  --> $DIR/redundant_static_lifetimes.rs:37:27\n    |\n LL | static STATIC_VAR_SLICE: &'static [u8] = b\"Test static #3\"; // ERROR Consider removing 'static.\n    |                          -^^^^^^^----- help: consider removing `'static`: `&[u8]`\n \n error: statics have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:38:27\n+  --> $DIR/redundant_static_lifetimes.rs:39:27\n    |\n LL | static STATIC_VAR_TUPLE: &'static (u8, u8) = &(1, 2); // ERROR Consider removing 'static.\n    |                          -^^^^^^^--------- help: consider removing `'static`: `&(u8, u8)`\n \n error: statics have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:40:27\n+  --> $DIR/redundant_static_lifetimes.rs:41:27\n    |\n LL | static STATIC_VAR_ARRAY: &'static [u8; 1] = b\"T\"; // ERROR Consider removing 'static.\n    |                          -^^^^^^^-------- help: consider removing `'static`: `&[u8; 1]`\n \n-error: aborting due to 16 previous errors\n+error: statics have by default a `'static` lifetime\n+  --> $DIR/redundant_static_lifetimes.rs:68:16\n+   |\n+LL |     static V: &'static u8 = &17;\n+   |               -^^^^^^^--- help: consider removing `'static`: `&u8`\n+\n+error: aborting due to 17 previous errors\n "}, {"sha": "9786c7b12128ba811fb0298222d3e48b821eed9f", "filename": "tests/ui/unnested_or_patterns.fixed", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Funnested_or_patterns.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Funnested_or_patterns.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnested_or_patterns.fixed?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,9 +1,9 @@\n // run-rustfix\n \n-#![feature(box_patterns)]\n+#![feature(box_patterns, custom_inner_attributes)]\n #![warn(clippy::unnested_or_patterns)]\n #![allow(clippy::cognitive_complexity, clippy::match_ref_pats, clippy::upper_case_acronyms)]\n-#![allow(unreachable_patterns, irrefutable_let_patterns, unused_variables)]\n+#![allow(unreachable_patterns, irrefutable_let_patterns, unused)]\n \n fn main() {\n     // Should be ignored by this lint, as nesting requires more characters.\n@@ -33,3 +33,15 @@ fn main() {\n     if let S { x: 0 | 1, y } = (S { x: 0, y: 1 }) {}\n     if let S { x: 0, y, .. } | S { y, x: 1 } = (S { x: 0, y: 1 }) {}\n }\n+\n+fn msrv_1_52() {\n+    #![clippy::msrv = \"1.52\"]\n+\n+    if let [1] | [52] = [0] {}\n+}\n+\n+fn msrv_1_53() {\n+    #![clippy::msrv = \"1.53\"]\n+\n+    if let [1 | 53] = [0] {}\n+}"}, {"sha": "f57322396d4ac242c09efab9a7c9bdde7e8779cb", "filename": "tests/ui/unnested_or_patterns.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Funnested_or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Funnested_or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnested_or_patterns.rs?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,9 +1,9 @@\n // run-rustfix\n \n-#![feature(box_patterns)]\n+#![feature(box_patterns, custom_inner_attributes)]\n #![warn(clippy::unnested_or_patterns)]\n #![allow(clippy::cognitive_complexity, clippy::match_ref_pats, clippy::upper_case_acronyms)]\n-#![allow(unreachable_patterns, irrefutable_let_patterns, unused_variables)]\n+#![allow(unreachable_patterns, irrefutable_let_patterns, unused)]\n \n fn main() {\n     // Should be ignored by this lint, as nesting requires more characters.\n@@ -33,3 +33,15 @@ fn main() {\n     if let S { x: 0, y } | S { y, x: 1 } = (S { x: 0, y: 1 }) {}\n     if let S { x: 0, y, .. } | S { y, x: 1 } = (S { x: 0, y: 1 }) {}\n }\n+\n+fn msrv_1_52() {\n+    #![clippy::msrv = \"1.52\"]\n+\n+    if let [1] | [52] = [0] {}\n+}\n+\n+fn msrv_1_53() {\n+    #![clippy::msrv = \"1.53\"]\n+\n+    if let [1] | [53] = [0] {}\n+}"}, {"sha": "fbc12fff0b0e7dccc8d4c89aab51a408b499ea83", "filename": "tests/ui/unnested_or_patterns.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Funnested_or_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Funnested_or_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnested_or_patterns.stderr?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -175,5 +175,16 @@ help: nest the patterns\n LL |     if let S { x: 0 | 1, y } = (S { x: 0, y: 1 }) {}\n    |            ~~~~~~~~~~~~~~~~~\n \n-error: aborting due to 16 previous errors\n+error: unnested or-patterns\n+  --> $DIR/unnested_or_patterns.rs:46:12\n+   |\n+LL |     if let [1] | [53] = [0] {}\n+   |            ^^^^^^^^^^\n+   |\n+help: nest the patterns\n+   |\n+LL |     if let [1 | 53] = [0] {}\n+   |            ~~~~~~~~\n+\n+error: aborting due to 17 previous errors\n "}, {"sha": "3b54fe9d5ff3d66e8d7074b7884a9367537e340d", "filename": "tests/ui/use_self.fixed", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fuse_self.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fuse_self.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.fixed?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n // aux-build:proc_macro_derive.rs\n \n+#![feature(custom_inner_attributes)]\n #![warn(clippy::use_self)]\n #![allow(dead_code, unreachable_code)]\n #![allow(\n@@ -617,3 +618,35 @@ mod issue6902 {\n         Bar = 1,\n     }\n }\n+\n+fn msrv_1_36() {\n+    #![clippy::msrv = \"1.36\"]\n+\n+    enum E {\n+        A,\n+    }\n+\n+    impl E {\n+        fn foo(self) {\n+            match self {\n+                E::A => {},\n+            }\n+        }\n+    }\n+}\n+\n+fn msrv_1_37() {\n+    #![clippy::msrv = \"1.37\"]\n+\n+    enum E {\n+        A,\n+    }\n+\n+    impl E {\n+        fn foo(self) {\n+            match self {\n+                Self::A => {},\n+            }\n+        }\n+    }\n+}"}, {"sha": "bf87633cd2d8f1b675552f2af3b5fae37ad5f191", "filename": "tests/ui/use_self.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n // aux-build:proc_macro_derive.rs\n \n+#![feature(custom_inner_attributes)]\n #![warn(clippy::use_self)]\n #![allow(dead_code, unreachable_code)]\n #![allow(\n@@ -617,3 +618,35 @@ mod issue6902 {\n         Bar = 1,\n     }\n }\n+\n+fn msrv_1_36() {\n+    #![clippy::msrv = \"1.36\"]\n+\n+    enum E {\n+        A,\n+    }\n+\n+    impl E {\n+        fn foo(self) {\n+            match self {\n+                E::A => {},\n+            }\n+        }\n+    }\n+}\n+\n+fn msrv_1_37() {\n+    #![clippy::msrv = \"1.37\"]\n+\n+    enum E {\n+        A,\n+    }\n+\n+    impl E {\n+        fn foo(self) {\n+            match self {\n+                E::A => {},\n+            }\n+        }\n+    }\n+}"}, {"sha": "16fb0609242cbfea2724b8b548ef41f720898739", "filename": "tests/ui/use_self.stderr", "status": "modified", "additions": 48, "deletions": 42, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fuse_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712/tests%2Fui%2Fuse_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.stderr?ref=28cd1ec9b7dc0eef2ecf9f3ee95fd2179802b712", "patch": "@@ -1,250 +1,256 @@\n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:22:21\n+  --> $DIR/use_self.rs:23:21\n    |\n LL |         fn new() -> Foo {\n    |                     ^^^ help: use the applicable keyword: `Self`\n    |\n    = note: `-D clippy::use-self` implied by `-D warnings`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:23:13\n+  --> $DIR/use_self.rs:24:13\n    |\n LL |             Foo {}\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:25:22\n+  --> $DIR/use_self.rs:26:22\n    |\n LL |         fn test() -> Foo {\n    |                      ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:26:13\n+  --> $DIR/use_self.rs:27:13\n    |\n LL |             Foo::new()\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:31:25\n+  --> $DIR/use_self.rs:32:25\n    |\n LL |         fn default() -> Foo {\n    |                         ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:32:13\n+  --> $DIR/use_self.rs:33:13\n    |\n LL |             Foo::new()\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:97:24\n+  --> $DIR/use_self.rs:98:24\n    |\n LL |         fn bad(foos: &[Foo]) -> impl Iterator<Item = &Foo> {\n    |                        ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:97:55\n+  --> $DIR/use_self.rs:98:55\n    |\n LL |         fn bad(foos: &[Foo]) -> impl Iterator<Item = &Foo> {\n    |                                                       ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:112:13\n+  --> $DIR/use_self.rs:113:13\n    |\n LL |             TS(0)\n    |             ^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:147:29\n+  --> $DIR/use_self.rs:148:29\n    |\n LL |                 fn bar() -> Bar {\n    |                             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:148:21\n+  --> $DIR/use_self.rs:149:21\n    |\n LL |                     Bar { foo: Foo {} }\n    |                     ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:159:21\n+  --> $DIR/use_self.rs:160:21\n    |\n LL |         fn baz() -> Foo {\n    |                     ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:160:13\n+  --> $DIR/use_self.rs:161:13\n    |\n LL |             Foo {}\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:177:21\n+  --> $DIR/use_self.rs:178:21\n    |\n LL |             let _ = Enum::B(42);\n    |                     ^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:178:21\n+  --> $DIR/use_self.rs:179:21\n    |\n LL |             let _ = Enum::C { field: true };\n    |                     ^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:179:21\n+  --> $DIR/use_self.rs:180:21\n    |\n LL |             let _ = Enum::A;\n    |                     ^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:221:13\n+  --> $DIR/use_self.rs:222:13\n    |\n LL |             nested::A::fun_1();\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:222:13\n+  --> $DIR/use_self.rs:223:13\n    |\n LL |             nested::A::A;\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:224:13\n+  --> $DIR/use_self.rs:225:13\n    |\n LL |             nested::A {};\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:243:13\n+  --> $DIR/use_self.rs:244:13\n    |\n LL |             TestStruct::from_something()\n    |             ^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:257:25\n+  --> $DIR/use_self.rs:258:25\n    |\n LL |         async fn g() -> S {\n    |                         ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:258:13\n+  --> $DIR/use_self.rs:259:13\n    |\n LL |             S {}\n    |             ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:262:16\n+  --> $DIR/use_self.rs:263:16\n    |\n LL |             &p[S::A..S::B]\n    |                ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:262:22\n+  --> $DIR/use_self.rs:263:22\n    |\n LL |             &p[S::A..S::B]\n    |                      ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:285:29\n+  --> $DIR/use_self.rs:286:29\n    |\n LL |         fn foo(value: T) -> Foo<T> {\n    |                             ^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:286:13\n+  --> $DIR/use_self.rs:287:13\n    |\n LL |             Foo::<T> { value }\n    |             ^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:458:13\n+  --> $DIR/use_self.rs:459:13\n    |\n LL |             A::new::<submod::B>(submod::B {})\n    |             ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:495:13\n+  --> $DIR/use_self.rs:496:13\n    |\n LL |             S2::new()\n    |             ^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:532:17\n+  --> $DIR/use_self.rs:533:17\n    |\n LL |                 Foo::Bar => unimplemented!(),\n    |                 ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:533:17\n+  --> $DIR/use_self.rs:534:17\n    |\n LL |                 Foo::Baz => unimplemented!(),\n    |                 ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:539:20\n+  --> $DIR/use_self.rs:540:20\n    |\n LL |             if let Foo::Bar = self {\n    |                    ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:563:17\n+  --> $DIR/use_self.rs:564:17\n    |\n LL |                 Something::Num(n) => *n,\n    |                 ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:564:17\n+  --> $DIR/use_self.rs:565:17\n    |\n LL |                 Something::TupleNums(n, _m) => *n,\n    |                 ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:565:17\n+  --> $DIR/use_self.rs:566:17\n    |\n LL |                 Something::StructNums { one, two: _ } => *one,\n    |                 ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:571:17\n+  --> $DIR/use_self.rs:572:17\n    |\n LL |                 crate::issue8845::Something::Num(n) => *n,\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:572:17\n+  --> $DIR/use_self.rs:573:17\n    |\n LL |                 crate::issue8845::Something::TupleNums(n, _m) => *n,\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:573:17\n+  --> $DIR/use_self.rs:574:17\n    |\n LL |                 crate::issue8845::Something::StructNums { one, two: _ } => *one,\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:589:17\n+  --> $DIR/use_self.rs:590:17\n    |\n LL |             let Foo(x) = self;\n    |                 ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:594:17\n+  --> $DIR/use_self.rs:595:17\n    |\n LL |             let crate::issue8845::Foo(x) = self;\n    |                 ^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:601:17\n+  --> $DIR/use_self.rs:602:17\n    |\n LL |             let Bar { x, .. } = self;\n    |                 ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:606:17\n+  --> $DIR/use_self.rs:607:17\n    |\n LL |             let crate::issue8845::Bar { x, .. } = self;\n    |                 ^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n-error: aborting due to 41 previous errors\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:648:17\n+   |\n+LL |                 E::A => {},\n+   |                 ^ help: use the applicable keyword: `Self`\n+\n+error: aborting due to 42 previous errors\n "}]}