{"sha": "a008a55ff680ec600b5617d6a1f1701450aa8911", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwMDhhNTVmZjY4MGVjNjAwYjU2MTdkNmExZjE3MDE0NTBhYTg5MTE=", "commit": {"author": {"name": "Tom Eccles", "email": "tom.eccles@codethink.co.uk", "date": "2020-05-18T13:56:34Z"}, "committer": {"name": "Tom Eccles", "email": "tom.eccles@codethink.co.uk", "date": "2020-06-09T15:22:15Z"}, "message": "Add a disabled builder for riscv64 emulated tests\n\nThis will run all tests for `riscv64gc-unknown-linux-gnu` in a QEMU\ninstance. This is based upon the armhf QEMU test image.", "tree": {"sha": "e90d0ededcc983570e9cc0293bb308a13b7684ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e90d0ededcc983570e9cc0293bb308a13b7684ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a008a55ff680ec600b5617d6a1f1701450aa8911", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a008a55ff680ec600b5617d6a1f1701450aa8911", "html_url": "https://github.com/rust-lang/rust/commit/a008a55ff680ec600b5617d6a1f1701450aa8911", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a008a55ff680ec600b5617d6a1f1701450aa8911/comments", "author": {"login": "tblah", "id": 3716681, "node_id": "MDQ6VXNlcjM3MTY2ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/3716681?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tblah", "html_url": "https://github.com/tblah", "followers_url": "https://api.github.com/users/tblah/followers", "following_url": "https://api.github.com/users/tblah/following{/other_user}", "gists_url": "https://api.github.com/users/tblah/gists{/gist_id}", "starred_url": "https://api.github.com/users/tblah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tblah/subscriptions", "organizations_url": "https://api.github.com/users/tblah/orgs", "repos_url": "https://api.github.com/users/tblah/repos", "events_url": "https://api.github.com/users/tblah/events{/privacy}", "received_events_url": "https://api.github.com/users/tblah/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tblah", "id": 3716681, "node_id": "MDQ6VXNlcjM3MTY2ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/3716681?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tblah", "html_url": "https://github.com/tblah", "followers_url": "https://api.github.com/users/tblah/followers", "following_url": "https://api.github.com/users/tblah/following{/other_user}", "gists_url": "https://api.github.com/users/tblah/gists{/gist_id}", "starred_url": "https://api.github.com/users/tblah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tblah/subscriptions", "organizations_url": "https://api.github.com/users/tblah/orgs", "repos_url": "https://api.github.com/users/tblah/repos", "events_url": "https://api.github.com/users/tblah/events{/privacy}", "received_events_url": "https://api.github.com/users/tblah/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73558160933b2764ed9a84b1b2b647e128eac3f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/73558160933b2764ed9a84b1b2b647e128eac3f8", "html_url": "https://github.com/rust-lang/rust/commit/73558160933b2764ed9a84b1b2b647e128eac3f8"}], "stats": {"total": 334, "additions": 319, "deletions": 15}, "files": [{"sha": "47673ce1e870304894f260e5d33925db20cf2f45", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a008a55ff680ec600b5617d6a1f1701450aa8911/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/a008a55ff680ec600b5617d6a1f1701450aa8911/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=a008a55ff680ec600b5617d6a1f1701450aa8911", "patch": "@@ -141,6 +141,8 @@ def v(*args):\n   \"rootfs in qemu testing, you probably don't want to use this\")\n v(\"qemu-aarch64-rootfs\", \"target.aarch64-unknown-linux-gnu.qemu-rootfs\",\n   \"rootfs in qemu testing, you probably don't want to use this\")\n+v(\"qemu-riscv64-rootfs\", \"target.riscv64gc-unknown-linux-gnu.qemu-rootfs\",\n+  \"rootfs in qemu testing, you probably don't want to use this\")\n v(\"experimental-targets\", \"llvm.experimental-targets\",\n   \"experimental LLVM targets to build\")\n v(\"release-channel\", \"rust.channel\", \"the name of the release channel to build\")"}, {"sha": "08d0c5b2cac1e70e8b87dbd49348ad32c889c364", "filename": "src/ci/docker/disabled/riscv64gc-linux/0001-Remove-stime-function-calls.patch", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/a008a55ff680ec600b5617d6a1f1701450aa8911/src%2Fci%2Fdocker%2Fdisabled%2Friscv64gc-linux%2F0001-Remove-stime-function-calls.patch", "raw_url": "https://github.com/rust-lang/rust/raw/a008a55ff680ec600b5617d6a1f1701450aa8911/src%2Fci%2Fdocker%2Fdisabled%2Friscv64gc-linux%2F0001-Remove-stime-function-calls.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Friscv64gc-linux%2F0001-Remove-stime-function-calls.patch?ref=a008a55ff680ec600b5617d6a1f1701450aa8911", "patch": "@@ -0,0 +1,96 @@\n+From c820da85c65c7f3aa9e9cb3ed71ada69bf9b783e Mon Sep 17 00:00:00 2001\n+From: Alistair Francis <alistair.francis@wdc.com>\n+Date: Tue, 19 Nov 2019 13:06:40 +0100\n+Subject: [PATCH] Remove stime() function calls\n+\n+stime() has been deprecated in glibc 2.31 and replaced with\n+clock_settime(). Let's replace the stime() function calls with\n+clock_settime() in preperation.\n+\n+function                                             old     new   delta\n+rdate_main                                           197     224     +27\n+clock_settime                                          -      27     +27\n+date_main                                            926     941     +15\n+stime                                                 37       -     -37\n+------------------------------------------------------------------------------\n+(add/remove: 2/2 grow/shrink: 2/0 up/down: 69/-37)             Total: 32 bytes\n+\n+Signed-off-by: Alistair Francis <alistair.francis@wdc.com>\n+Signed-off-by: Denys Vlasenko <vda.linux@googlemail.com>\n+\n+[Tom Eccles: adjust patch context to apply on top of 1.31.1-stable]\n+Signed-off-by: Tom Eccles <tom.eccles@codethink.co.uk>\n+---\n+ coreutils/date.c         | 6 +++++-\n+ libbb/missing_syscalls.c | 8 --------\n+ util-linux/rdate.c       | 8 ++++++--\n+ 3 files changed, 11 insertions(+), 11 deletions(-)\n+\n+diff --git a/coreutils/date.c b/coreutils/date.c\n+index 3414d38ae..4ade6abb4 100644\n+--- a/coreutils/date.c\n++++ b/coreutils/date.c\n+@@ -279,6 +279,9 @@ int date_main(int argc UNUSED_PARAM, char **argv)\n+ \t\ttime(&ts.tv_sec);\n+ #endif\n+ \t}\n++#if !ENABLE_FEATURE_DATE_NANO\n++\tts.tv_nsec = 0;\n++#endif\n+ \tlocaltime_r(&ts.tv_sec, &tm_time);\n+ \n+ \t/* If date string is given, update tm_time, and maybe set date */\n+@@ -301,9 +304,10 @@ int date_main(int argc UNUSED_PARAM, char **argv)\n+ \t\tif (date_str[0] != '@')\n+ \t\t\ttm_time.tm_isdst = -1;\n+ \t\tts.tv_sec = validate_tm_time(date_str, &tm_time);\n++\t\tts.tv_nsec = 0;\n+ \n+ \t\t/* if setting time, set it */\n+-\t\tif ((opt & OPT_SET) && stime(&ts.tv_sec) < 0) {\n++\t\tif ((opt & OPT_SET) && clock_settime(CLOCK_REALTIME, &ts) < 0) {\n+ \t\t\tbb_perror_msg(\"can't set date\");\n+ \t\t}\n+ \t}\n+diff --git a/libbb/missing_syscalls.c b/libbb/missing_syscalls.c\n+index 87cf59b3d..dc40d9155 100644\n+--- a/libbb/missing_syscalls.c\n++++ b/libbb/missing_syscalls.c\n+@@ -15,14 +15,6 @@ pid_t getsid(pid_t pid)\n+ \treturn syscall(__NR_getsid, pid);\n+ }\n+ \n+-int stime(const time_t *t)\n+-{\n+-\tstruct timeval tv;\n+-\ttv.tv_sec = *t;\n+-\ttv.tv_usec = 0;\n+-\treturn settimeofday(&tv, NULL);\n+-}\n+-\n+ int sethostname(const char *name, size_t len)\n+ {\n+ \treturn syscall(__NR_sethostname, name, len);\n+diff --git a/util-linux/rdate.c b/util-linux/rdate.c\n+index 70f829e7f..878375d78 100644\n+--- a/util-linux/rdate.c\n++++ b/util-linux/rdate.c\n+@@ -95,9 +95,13 @@ int rdate_main(int argc UNUSED_PARAM, char **argv)\n+ \tif (!(flags & 2)) { /* no -p (-s may be present) */\n+ \t\tif (time(NULL) == remote_time)\n+ \t\t\tbb_error_msg(\"current time matches remote time\");\n+-\t\telse\n+-\t\t\tif (stime(&remote_time) < 0)\n++\t\telse {\n++\t\t\tstruct timespec ts;\n++\t\t\tts.tv_sec = remote_time;\n++\t\t\tts.tv_nsec = 0;\n++\t\t\tif (clock_settime(CLOCK_REALTIME, &ts) < 0)\n+ \t\t\t\tbb_perror_msg_and_die(\"can't set time of day\");\n++\t\t}\n+ \t}\n+ \n+ \tif (flags != 1) /* not lone -s */\n+-- \n+2.25.1\n+"}, {"sha": "f21dc2ba309b8218effbb0305cf8d1c5afefbafa", "filename": "src/ci/docker/disabled/riscv64gc-linux/Dockerfile", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/a008a55ff680ec600b5617d6a1f1701450aa8911/src%2Fci%2Fdocker%2Fdisabled%2Friscv64gc-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/a008a55ff680ec600b5617d6a1f1701450aa8911/src%2Fci%2Fdocker%2Fdisabled%2Friscv64gc-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Friscv64gc-linux%2FDockerfile?ref=a008a55ff680ec600b5617d6a1f1701450aa8911", "patch": "@@ -0,0 +1,102 @@\n+# based on armhf-gnu/Dockerfile\n+FROM ubuntu:20.04\n+\n+RUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections\n+RUN apt-get update -y && apt-get install -y --no-install-recommends \\\n+    bc \\\n+    bison \\\n+    ca-certificates \\\n+    cmake \\\n+    cpio \\\n+    curl \\\n+    debian-ports-archive-keyring \\\n+    debootstrap \\\n+    flex \\\n+    gcc \\\n+    gcc-riscv64-linux-gnu \\\n+    git \\\n+    g++-riscv64-linux-gnu \\\n+    g++ \\\n+    libc6-dev \\\n+    libc6-dev-riscv64-cross \\\n+    make \\\n+    patch \\\n+    python3 \\\n+    qemu-system-misc \\\n+    xz-utils\n+\n+ENV ARCH=riscv\n+ENV CROSS_COMPILE=riscv64-linux-gnu-\n+\n+WORKDIR /build\n+\n+# From https://github.com/michaeljclark/busybear-linux/blob/master/conf/linux.config\n+COPY riscv64gc-linux/linux.config /build\n+\n+# Compile the kernel that we're going to be emulating with. This is\n+# basically just done to be compatible with the QEMU target that we're going\n+# to be using when running tests.\n+RUN curl https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.6.16.tar.xz | tar xJf - && \\\n+    cp linux.config linux-5.6.16/.config && \\\n+    cd /build/linux-5.6.16 && \\\n+    make olddefconfig && \\\n+    make -j$(nproc) vmlinux\n+RUN cp linux-5.6.16/vmlinux /tmp\n+RUN rm -rf linux-5.6.16\n+\n+# Compile an instance of busybox as this provides a lightweight system and init\n+# binary which we will boot into. Only trick here is configuring busybox to\n+# build static binaries.\n+RUN curl https://busybox.net/downloads/busybox-1.31.1.tar.bz2 | tar xjf -\n+COPY riscv64gc-linux/0001-Remove-stime-function-calls.patch /build/busybox-1.31.1/\n+RUN cd /build/busybox-1.31.1 && \\\n+    patch -p1 -i 0001-Remove-stime-function-calls.patch && \\\n+    make defconfig && \\\n+    sed -i 's/.*CONFIG_STATIC.*/CONFIG_STATIC=y/' .config && \\\n+    make -j$(nproc) && \\\n+    make install && \\\n+    mv _install /tmp/rootfs && \\\n+    cd /build && \\\n+    rm -rf busybox-1.31.1\n+\n+# Download the ubuntu rootfs, which we'll use as a chroot for all our tests\n+# This is only needed to provide /lib/* and /usr/lib/*\n+WORKDIR /tmp\n+RUN debootstrap --variant=minbase --arch=riscv64 --foreign focal /tmp/rootfs/ubuntu\n+RUN cd rootfs && mkdir proc sys dev etc etc/init.d\n+# rootfs/ubuntu/proc is in a weird state (access fails with ELOOP) until\n+# rootfs/ubuntu/debootstrap/debootstrap --second-stage is run (under emulation),\n+# but this takes ages. Instead hack it into a good enough state.\n+# /proc is used by std::env::current_exe() (which is roughly\n+# `readlink /proc/self/exe`)\n+RUN cd rootfs/ubuntu && rm -rf proc && mkdir proc\n+\n+# Copy over our init script, which starts up our test server and also a few other\n+# misc tasks\n+COPY scripts/qemu-bare-bones-rcS rootfs/etc/init.d/rcS\n+RUN chmod +x rootfs/etc/init.d/rcS\n+\n+# Helper to quickly fill the entropy pool in the kernel\n+COPY scripts/qemu-bare-bones-addentropy.c /tmp/addentropy.c\n+RUN riscv64-linux-gnu-gcc addentropy.c -o rootfs/addentropy -static\n+\n+# download and build the riscv bootloader\n+RUN git clone https://github.com/riscv/riscv-pk\n+WORKDIR /tmp/riscv-pk\n+# nothing special about this revision: it is just master at the time of writing\n+# v1.0.0 doesn't build\n+RUN git checkout 5d9ed238e1cabfbca3c47f50d32894ce94bfc304\n+RUN mkdir build && cd build && \\\n+    ../configure --with-payload=/tmp/vmlinux --host=riscv64-linux-gnu && \\\n+    make -j$(nproc) && \\\n+    cp bbl /tmp\n+WORKDIR /tmp\n+RUN rm -rf /tmp/riscv-pk\n+\n+COPY scripts/sccache.sh /scripts/\n+RUN sh /scripts/sccache.sh\n+\n+ENV RUST_CONFIGURE_ARGS --qemu-riscv64-rootfs=/tmp/rootfs\n+ENV SCRIPT python3 ../x.py test --target riscv64gc-unknown-linux-gnu\n+\n+ENV NO_CHANGE_USER=1"}, {"sha": "5142664742f20248d66d550dfdbf64e94167adf5", "filename": "src/ci/docker/disabled/riscv64gc-linux/linux.config", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a008a55ff680ec600b5617d6a1f1701450aa8911/src%2Fci%2Fdocker%2Fdisabled%2Friscv64gc-linux%2Flinux.config", "raw_url": "https://github.com/rust-lang/rust/raw/a008a55ff680ec600b5617d6a1f1701450aa8911/src%2Fci%2Fdocker%2Fdisabled%2Friscv64gc-linux%2Flinux.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Friscv64gc-linux%2Flinux.config?ref=a008a55ff680ec600b5617d6a1f1701450aa8911", "patch": "@@ -0,0 +1,51 @@\n+CONFIG_DEFAULT_HOSTNAME=\"busybear\"\n+CONFIG_SYSVIPC=y\n+CONFIG_POSIX_MQUEUE=y\n+CONFIG_IKCONFIG=y\n+CONFIG_IKCONFIG_PROC=y\n+CONFIG_CGROUPS=y\n+CONFIG_CGROUP_SCHED=y\n+CONFIG_CFS_BANDWIDTH=y\n+CONFIG_CGROUP_BPF=y\n+CONFIG_NAMESPACES=y\n+CONFIG_USER_NS=y\n+CONFIG_CHECKPOINT_RESTORE=y\n+CONFIG_BLK_DEV_INITRD=y\n+CONFIG_EXPERT=y\n+CONFIG_BPF_SYSCALL=y\n+CONFIG_SMP=y\n+CONFIG_MODULES=y\n+CONFIG_NET=y\n+CONFIG_PACKET=y\n+CONFIG_PACKET_DIAG=y\n+CONFIG_UNIX=y\n+CONFIG_INET=y\n+CONFIG_NETLINK_DIAG=y\n+# CONFIG_WIRELESS is not set\n+CONFIG_PCI=y\n+CONFIG_DEVTMPFS=y\n+CONFIG_BLK_DEV_LOOP=y\n+CONFIG_VIRTIO_BLK=y\n+CONFIG_NETDEVICES=y\n+CONFIG_VIRTIO_NET=y\n+# CONFIG_ETHERNET is not set\n+# CONFIG_WLAN is not set\n+CONFIG_SERIAL_8250=y\n+CONFIG_SERIAL_8250_CONSOLE=y\n+CONFIG_SERIAL_OF_PLATFORM=y\n+CONFIG_HVC_RISCV_SBI=y\n+# CONFIG_HW_RANDOM is not set\n+# CONFIG_USB_SUPPORT is not set\n+CONFIG_VIRTIO_MMIO=y\n+CONFIG_SIFIVE_PLIC=y\n+CONFIG_RAS=y\n+CONFIG_EXT2_FS=y\n+CONFIG_EXT3_FS=y\n+CONFIG_EXT4_FS_POSIX_ACL=y\n+CONFIG_AUTOFS4_FS=y\n+CONFIG_MSDOS_FS=y\n+CONFIG_VFAT_FS=y\n+CONFIG_TMPFS=y\n+# CONFIG_CRYPTO_ECHAINIV is not set\n+# CONFIG_CRYPTO_HW is not set\n+CONFIG_PRINTK_TIME=y"}, {"sha": "299ec0f0b4c14d84100c2902371609535f45528e", "filename": "src/tools/remote-test-client/src/main.rs", "status": "modified", "additions": 68, "deletions": 15, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/a008a55ff680ec600b5617d6a1f1701450aa8911/src%2Ftools%2Fremote-test-client%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a008a55ff680ec600b5617d6a1f1701450aa8911/src%2Ftools%2Fremote-test-client%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fremote-test-client%2Fsrc%2Fmain.rs?ref=a008a55ff680ec600b5617d6a1f1701450aa8911", "patch": "@@ -107,13 +107,23 @@ fn start_android_emulator(server: &Path) {\n     Command::new(\"adb\").arg(\"shell\").arg(\"/data/tmp/testd\").spawn().unwrap();\n }\n \n-fn start_qemu_emulator(target: &str, rootfs: &Path, server: &Path, tmpdir: &Path) {\n+fn prepare_rootfs(target: &str, rootfs: &Path, server: &Path, rootfs_img: &Path) {\n+    t!(fs::copy(server, rootfs.join(\"testd\")));\n+\n+    match target {\n+        \"arm-unknown-linux-gnueabihf\" | \"aarch64-unknown-linux-gnu\" => {\n+            prepare_rootfs_cpio(rootfs, rootfs_img)\n+        }\n+        \"riscv64gc-unknown-linux-gnu\" => prepare_rootfs_ext4(rootfs, rootfs_img),\n+        _ => panic!(\"{} is not supported\", target),\n+    }\n+}\n+\n+fn prepare_rootfs_cpio(rootfs: &Path, rootfs_img: &Path) {\n     // Generate a new rootfs image now that we've updated the test server\n     // executable. This is the equivalent of:\n     //\n     //      find $rootfs -print 0 | cpio --null -o --format=newc > rootfs.img\n-    t!(fs::copy(server, rootfs.join(\"testd\")));\n-    let rootfs_img = tmpdir.join(\"rootfs.img\");\n     let mut cmd = Command::new(\"cpio\");\n     cmd.arg(\"--null\")\n         .arg(\"-o\")\n@@ -128,6 +138,38 @@ fn start_qemu_emulator(target: &str, rootfs: &Path, server: &Path, tmpdir: &Path\n     t!(io::copy(&mut child.stdout.take().unwrap(), &mut t!(File::create(&rootfs_img))));\n     assert!(t!(child.wait()).success());\n \n+    fn add_files(w: &mut dyn Write, root: &Path, cur: &Path) {\n+        for entry in t!(cur.read_dir()) {\n+            let entry = t!(entry);\n+            let path = entry.path();\n+            let to_print = path.strip_prefix(root).unwrap();\n+            t!(write!(w, \"{}\\u{0}\", to_print.to_str().unwrap()));\n+            if t!(entry.file_type()).is_dir() {\n+                add_files(w, root, &path);\n+            }\n+        }\n+    }\n+}\n+\n+fn prepare_rootfs_ext4(rootfs: &Path, rootfs_img: &Path) {\n+    let mut dd = Command::new(\"dd\");\n+    dd.arg(\"if=/dev/zero\")\n+        .arg(&format!(\"of={}\", rootfs_img.to_string_lossy()))\n+        .arg(\"bs=1M\")\n+        .arg(\"count=1024\");\n+    let mut dd_child = t!(dd.spawn());\n+    assert!(t!(dd_child.wait()).success());\n+\n+    let mut mkfs = Command::new(\"mkfs.ext4\");\n+    mkfs.arg(\"-d\").arg(rootfs).arg(rootfs_img);\n+    let mut mkfs_child = t!(mkfs.spawn());\n+    assert!(t!(mkfs_child.wait()).success());\n+}\n+\n+fn start_qemu_emulator(target: &str, rootfs: &Path, server: &Path, tmpdir: &Path) {\n+    let rootfs_img = &tmpdir.join(\"rootfs.img\");\n+    prepare_rootfs(target, rootfs, server, rootfs_img);\n+\n     // Start up the emulator, in the background\n     match target {\n         \"arm-unknown-linux-gnueabihf\" => {\n@@ -170,19 +212,30 @@ fn start_qemu_emulator(target: &str, rootfs: &Path, server: &Path, tmpdir: &Path\n                 .arg(\"virtio-net-device,netdev=net0,mac=00:00:00:00:00:00\");\n             t!(cmd.spawn());\n         }\n-        _ => panic!(\"cannot start emulator for: {}\" < target),\n-    }\n-\n-    fn add_files(w: &mut dyn Write, root: &Path, cur: &Path) {\n-        for entry in t!(cur.read_dir()) {\n-            let entry = t!(entry);\n-            let path = entry.path();\n-            let to_print = path.strip_prefix(root).unwrap();\n-            t!(write!(w, \"{}\\u{0}\", to_print.to_str().unwrap()));\n-            if t!(entry.file_type()).is_dir() {\n-                add_files(w, root, &path);\n-            }\n+        \"riscv64gc-unknown-linux-gnu\" => {\n+            let mut cmd = Command::new(\"qemu-system-riscv64\");\n+            cmd.arg(\"-nographic\")\n+                .arg(\"-machine\")\n+                .arg(\"virt\")\n+                .arg(\"-m\")\n+                .arg(\"1024\")\n+                .arg(\"-bios\")\n+                .arg(\"none\")\n+                .arg(\"-kernel\")\n+                .arg(\"/tmp/bbl\")\n+                .arg(\"-append\")\n+                .arg(\"quiet console=ttyS0 root=/dev/vda rw\")\n+                .arg(\"-netdev\")\n+                .arg(\"user,id=net0,hostfwd=tcp::12345-:12345\")\n+                .arg(\"-device\")\n+                .arg(\"virtio-net-device,netdev=net0,mac=00:00:00:00:00:00\")\n+                .arg(\"-device\")\n+                .arg(\"virtio-blk-device,drive=hd0\")\n+                .arg(\"-drive\")\n+                .arg(&format!(\"file={},format=raw,id=hd0\", &rootfs_img.to_string_lossy()));\n+            t!(cmd.spawn());\n         }\n+        _ => panic!(\"cannot start emulator for: {}\" < target),\n     }\n }\n "}]}