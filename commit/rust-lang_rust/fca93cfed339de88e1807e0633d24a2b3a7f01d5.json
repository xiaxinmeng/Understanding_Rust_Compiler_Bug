{"sha": "fca93cfed339de88e1807e0633d24a2b3a7f01d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjYTkzY2ZlZDMzOWRlODhlMTgwN2UwNjMzZDI0YTJiM2E3ZjAxZDU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-02-09T14:49:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-09T14:49:02Z"}, "message": "Merge #7610\n\n7610: Cleanup test r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "e9cefdfa7b70209d547d40500b3409903252dcdd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9cefdfa7b70209d547d40500b3409903252dcdd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fca93cfed339de88e1807e0633d24a2b3a7f01d5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgIqDeCRBK7hj4Ov3rIwAAdHIIAKHk+fyl3eye9pcofIh3ZS3d\na6+zbNlOPl+90NR/RwRWYH3vdV2D+DRRmqfc8l1aAjIxLFgE7sC+soW3iGptPXHZ\ngBbnunI7ibERw4E9NuzCjKGSv73113+MtRbcJ62LeKB5gdaRTq9IrQaTEubruVpm\nz8RmECZ/RQHTtvSsd+ItdoDJmJeJIGKUNNxQ4SQexbGdIxrUSvDx3/7sRZGwNYDj\nU3PUUtWip18HKhSuTMijZMFqg169JxeAiy5tKitc3GFQ3HSM6k2uTxl6ktS+Z5An\nL3YT9sQyOtIYB7IuhMetKsRtGt2mudZtGDjUqfyJk/eLsxOmZQgewIAs4oo5JSQ=\n=LiQt\n-----END PGP SIGNATURE-----\n", "payload": "tree e9cefdfa7b70209d547d40500b3409903252dcdd\nparent 876c4519e37db3cd134efb5dda604ac5a29c3853\nparent 2dc67c85b94a8e858706568c4116b3123348941b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1612882142 +0000\ncommitter GitHub <noreply@github.com> 1612882142 +0000\n\nMerge #7610\n\n7610: Cleanup test r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fca93cfed339de88e1807e0633d24a2b3a7f01d5", "html_url": "https://github.com/rust-lang/rust/commit/fca93cfed339de88e1807e0633d24a2b3a7f01d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fca93cfed339de88e1807e0633d24a2b3a7f01d5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "876c4519e37db3cd134efb5dda604ac5a29c3853", "url": "https://api.github.com/repos/rust-lang/rust/commits/876c4519e37db3cd134efb5dda604ac5a29c3853", "html_url": "https://github.com/rust-lang/rust/commit/876c4519e37db3cd134efb5dda604ac5a29c3853"}, {"sha": "2dc67c85b94a8e858706568c4116b3123348941b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dc67c85b94a8e858706568c4116b3123348941b", "html_url": "https://github.com/rust-lang/rust/commit/2dc67c85b94a8e858706568c4116b3123348941b"}], "stats": {"total": 451, "additions": 234, "deletions": 217}, "files": [{"sha": "e3f3985d148b4493eba454836b78cff205f40fc9", "filename": "crates/ide/src/join_lines.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/fca93cfed339de88e1807e0633d24a2b3a7f01d5/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fca93cfed339de88e1807e0633d24a2b3a7f01d5/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fjoin_lines.rs?ref=fca93cfed339de88e1807e0633d24a2b3a7f01d5", "patch": "@@ -270,27 +270,28 @@ fn foo() {\n \n     #[test]\n     fn test_join_lines_diverging_block() {\n-        let before = r\"\n-            fn foo() {\n-                loop {\n-                    match x {\n-                        92 => $0{\n-                            continue;\n-                        }\n-                    }\n-                }\n-            }\n-        \";\n-        let after = r\"\n-            fn foo() {\n-                loop {\n-                    match x {\n-                        92 => $0continue,\n-                    }\n-                }\n+        check_join_lines(\n+            r\"\n+fn foo() {\n+    loop {\n+        match x {\n+            92 => $0{\n+                continue;\n             }\n-        \";\n-        check_join_lines(before, after);\n+        }\n+    }\n+}\n+        \",\n+            r\"\n+fn foo() {\n+    loop {\n+        match x {\n+            92 => $0continue,\n+        }\n+    }\n+}\n+        \",\n+        );\n     }\n \n     #[test]"}, {"sha": "f979ba434696837da922a78e5771ea5c6977df19", "filename": "crates/ide/src/syntax_tree.rs", "status": "modified", "additions": 169, "deletions": 197, "changes": 366, "blob_url": "https://github.com/rust-lang/rust/blob/fca93cfed339de88e1807e0633d24a2b3a7f01d5/crates%2Fide%2Fsrc%2Fsyntax_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fca93cfed339de88e1807e0633d24a2b3a7f01d5/crates%2Fide%2Fsrc%2Fsyntax_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_tree.rs?ref=fca93cfed339de88e1807e0633d24a2b3a7f01d5", "patch": "@@ -100,258 +100,230 @@ fn syntax_tree_for_token(node: &SyntaxToken, text_range: TextRange) -> Option<St\n \n #[cfg(test)]\n mod tests {\n-    use test_utils::assert_eq_text;\n+    use expect_test::expect;\n \n     use crate::fixture;\n \n+    fn check(ra_fixture: &str, expect: expect_test::Expect) {\n+        let (analysis, file_id) = fixture::file(ra_fixture);\n+        let syn = analysis.syntax_tree(file_id, None).unwrap();\n+        expect.assert_eq(&syn)\n+    }\n+    fn check_range(ra_fixture: &str, expect: expect_test::Expect) {\n+        let (analysis, frange) = fixture::range(ra_fixture);\n+        let syn = analysis.syntax_tree(frange.file_id, Some(frange.range)).unwrap();\n+        expect.assert_eq(&syn)\n+    }\n+\n     #[test]\n     fn test_syntax_tree_without_range() {\n         // Basic syntax\n-        let (analysis, file_id) = fixture::file(r#\"fn foo() {}\"#);\n-        let syn = analysis.syntax_tree(file_id, None).unwrap();\n-\n-        assert_eq_text!(\n-            r#\"\n-SOURCE_FILE@0..11\n-  FN@0..11\n-    FN_KW@0..2 \"fn\"\n-    WHITESPACE@2..3 \" \"\n-    NAME@3..6\n-      IDENT@3..6 \"foo\"\n-    PARAM_LIST@6..8\n-      L_PAREN@6..7 \"(\"\n-      R_PAREN@7..8 \")\"\n-    WHITESPACE@8..9 \" \"\n-    BLOCK_EXPR@9..11\n-      L_CURLY@9..10 \"{\"\n-      R_CURLY@10..11 \"}\"\n-\"#\n-            .trim(),\n-            syn.trim()\n+        check(\n+            r#\"fn foo() {}\"#,\n+            expect![[r#\"\n+                SOURCE_FILE@0..11\n+                  FN@0..11\n+                    FN_KW@0..2 \"fn\"\n+                    WHITESPACE@2..3 \" \"\n+                    NAME@3..6\n+                      IDENT@3..6 \"foo\"\n+                    PARAM_LIST@6..8\n+                      L_PAREN@6..7 \"(\"\n+                      R_PAREN@7..8 \")\"\n+                    WHITESPACE@8..9 \" \"\n+                    BLOCK_EXPR@9..11\n+                      L_CURLY@9..10 \"{\"\n+                      R_CURLY@10..11 \"}\"\n+            \"#]],\n         );\n \n-        let (analysis, file_id) = fixture::file(\n+        check(\n             r#\"\n fn test() {\n     assert!(\"\n     fn foo() {\n     }\n     \", \"\");\n-}\"#\n-            .trim(),\n-        );\n-        let syn = analysis.syntax_tree(file_id, None).unwrap();\n-\n-        assert_eq_text!(\n-            r#\"\n-SOURCE_FILE@0..60\n-  FN@0..60\n-    FN_KW@0..2 \"fn\"\n-    WHITESPACE@2..3 \" \"\n-    NAME@3..7\n-      IDENT@3..7 \"test\"\n-    PARAM_LIST@7..9\n-      L_PAREN@7..8 \"(\"\n-      R_PAREN@8..9 \")\"\n-    WHITESPACE@9..10 \" \"\n-    BLOCK_EXPR@10..60\n-      L_CURLY@10..11 \"{\"\n-      WHITESPACE@11..16 \"\\n    \"\n-      EXPR_STMT@16..58\n-        MACRO_CALL@16..57\n-          PATH@16..22\n-            PATH_SEGMENT@16..22\n-              NAME_REF@16..22\n-                IDENT@16..22 \"assert\"\n-          BANG@22..23 \"!\"\n-          TOKEN_TREE@23..57\n-            L_PAREN@23..24 \"(\"\n-            STRING@24..52 \"\\\"\\n    fn foo() {\\n     ...\"\n-            COMMA@52..53 \",\"\n-            WHITESPACE@53..54 \" \"\n-            STRING@54..56 \"\\\"\\\"\"\n-            R_PAREN@56..57 \")\"\n-        SEMICOLON@57..58 \";\"\n-      WHITESPACE@58..59 \"\\n\"\n-      R_CURLY@59..60 \"}\"\n-\"#\n-            .trim(),\n-            syn.trim()\n-        );\n+}\"#,\n+            expect![[r#\"\n+                SOURCE_FILE@0..60\n+                  FN@0..60\n+                    FN_KW@0..2 \"fn\"\n+                    WHITESPACE@2..3 \" \"\n+                    NAME@3..7\n+                      IDENT@3..7 \"test\"\n+                    PARAM_LIST@7..9\n+                      L_PAREN@7..8 \"(\"\n+                      R_PAREN@8..9 \")\"\n+                    WHITESPACE@9..10 \" \"\n+                    BLOCK_EXPR@10..60\n+                      L_CURLY@10..11 \"{\"\n+                      WHITESPACE@11..16 \"\\n    \"\n+                      EXPR_STMT@16..58\n+                        MACRO_CALL@16..57\n+                          PATH@16..22\n+                            PATH_SEGMENT@16..22\n+                              NAME_REF@16..22\n+                                IDENT@16..22 \"assert\"\n+                          BANG@22..23 \"!\"\n+                          TOKEN_TREE@23..57\n+                            L_PAREN@23..24 \"(\"\n+                            STRING@24..52 \"\\\"\\n    fn foo() {\\n     ...\"\n+                            COMMA@52..53 \",\"\n+                            WHITESPACE@53..54 \" \"\n+                            STRING@54..56 \"\\\"\\\"\"\n+                            R_PAREN@56..57 \")\"\n+                        SEMICOLON@57..58 \";\"\n+                      WHITESPACE@58..59 \"\\n\"\n+                      R_CURLY@59..60 \"}\"\n+            \"#]],\n+        )\n     }\n \n     #[test]\n     fn test_syntax_tree_with_range() {\n-        let (analysis, range) = fixture::range(r#\"$0fn foo() {}$0\"#.trim());\n-        let syn = analysis.syntax_tree(range.file_id, Some(range.range)).unwrap();\n-\n-        assert_eq_text!(\n-            r#\"\n-FN@0..11\n-  FN_KW@0..2 \"fn\"\n-  WHITESPACE@2..3 \" \"\n-  NAME@3..6\n-    IDENT@3..6 \"foo\"\n-  PARAM_LIST@6..8\n-    L_PAREN@6..7 \"(\"\n-    R_PAREN@7..8 \")\"\n-  WHITESPACE@8..9 \" \"\n-  BLOCK_EXPR@9..11\n-    L_CURLY@9..10 \"{\"\n-    R_CURLY@10..11 \"}\"\n-\"#\n-            .trim(),\n-            syn.trim()\n+        check_range(\n+            r#\"$0fn foo() {}$0\"#,\n+            expect![[r#\"\n+                FN@0..11\n+                  FN_KW@0..2 \"fn\"\n+                  WHITESPACE@2..3 \" \"\n+                  NAME@3..6\n+                    IDENT@3..6 \"foo\"\n+                  PARAM_LIST@6..8\n+                    L_PAREN@6..7 \"(\"\n+                    R_PAREN@7..8 \")\"\n+                  WHITESPACE@8..9 \" \"\n+                  BLOCK_EXPR@9..11\n+                    L_CURLY@9..10 \"{\"\n+                    R_CURLY@10..11 \"}\"\n+            \"#]],\n         );\n \n-        let (analysis, range) = fixture::range(\n-            r#\"fn test() {\n+        check_range(\n+            r#\"\n+fn test() {\n     $0assert!(\"\n     fn foo() {\n     }\n     \", \"\");$0\n-}\"#\n-            .trim(),\n-        );\n-        let syn = analysis.syntax_tree(range.file_id, Some(range.range)).unwrap();\n-\n-        assert_eq_text!(\n-            r#\"\n-EXPR_STMT@16..58\n-  MACRO_CALL@16..57\n-    PATH@16..22\n-      PATH_SEGMENT@16..22\n-        NAME_REF@16..22\n-          IDENT@16..22 \"assert\"\n-    BANG@22..23 \"!\"\n-    TOKEN_TREE@23..57\n-      L_PAREN@23..24 \"(\"\n-      STRING@24..52 \"\\\"\\n    fn foo() {\\n     ...\"\n-      COMMA@52..53 \",\"\n-      WHITESPACE@53..54 \" \"\n-      STRING@54..56 \"\\\"\\\"\"\n-      R_PAREN@56..57 \")\"\n-  SEMICOLON@57..58 \";\"\n-\"#\n-            .trim(),\n-            syn.trim()\n+}\"#,\n+            expect![[r#\"\n+                EXPR_STMT@16..58\n+                  MACRO_CALL@16..57\n+                    PATH@16..22\n+                      PATH_SEGMENT@16..22\n+                        NAME_REF@16..22\n+                          IDENT@16..22 \"assert\"\n+                    BANG@22..23 \"!\"\n+                    TOKEN_TREE@23..57\n+                      L_PAREN@23..24 \"(\"\n+                      STRING@24..52 \"\\\"\\n    fn foo() {\\n     ...\"\n+                      COMMA@52..53 \",\"\n+                      WHITESPACE@53..54 \" \"\n+                      STRING@54..56 \"\\\"\\\"\"\n+                      R_PAREN@56..57 \")\"\n+                  SEMICOLON@57..58 \";\"\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn test_syntax_tree_inside_string() {\n-        let (analysis, range) = fixture::range(\n+        check_range(\n             r#\"fn test() {\n     assert!(\"\n $0fn foo() {\n }$0\n fn bar() {\n }\n     \", \"\");\n-}\"#\n-            .trim(),\n-        );\n-        let syn = analysis.syntax_tree(range.file_id, Some(range.range)).unwrap();\n-        assert_eq_text!(\n-            r#\"\n-SOURCE_FILE@0..12\n-  FN@0..12\n-    FN_KW@0..2 \"fn\"\n-    WHITESPACE@2..3 \" \"\n-    NAME@3..6\n-      IDENT@3..6 \"foo\"\n-    PARAM_LIST@6..8\n-      L_PAREN@6..7 \"(\"\n-      R_PAREN@7..8 \")\"\n-    WHITESPACE@8..9 \" \"\n-    BLOCK_EXPR@9..12\n-      L_CURLY@9..10 \"{\"\n-      WHITESPACE@10..11 \"\\n\"\n-      R_CURLY@11..12 \"}\"\n-\"#\n-            .trim(),\n-            syn.trim()\n+}\"#,\n+            expect![[r#\"\n+                SOURCE_FILE@0..12\n+                  FN@0..12\n+                    FN_KW@0..2 \"fn\"\n+                    WHITESPACE@2..3 \" \"\n+                    NAME@3..6\n+                      IDENT@3..6 \"foo\"\n+                    PARAM_LIST@6..8\n+                      L_PAREN@6..7 \"(\"\n+                      R_PAREN@7..8 \")\"\n+                    WHITESPACE@8..9 \" \"\n+                    BLOCK_EXPR@9..12\n+                      L_CURLY@9..10 \"{\"\n+                      WHITESPACE@10..11 \"\\n\"\n+                      R_CURLY@11..12 \"}\"\n+            \"#]],\n         );\n \n         // With a raw string\n-        let (analysis, range) = fixture::range(\n+        check_range(\n             r###\"fn test() {\n     assert!(r#\"\n $0fn foo() {\n }$0\n fn bar() {\n }\n     \"#, \"\");\n-}\"###\n-                .trim(),\n-        );\n-        let syn = analysis.syntax_tree(range.file_id, Some(range.range)).unwrap();\n-        assert_eq_text!(\n-            r#\"\n-SOURCE_FILE@0..12\n-  FN@0..12\n-    FN_KW@0..2 \"fn\"\n-    WHITESPACE@2..3 \" \"\n-    NAME@3..6\n-      IDENT@3..6 \"foo\"\n-    PARAM_LIST@6..8\n-      L_PAREN@6..7 \"(\"\n-      R_PAREN@7..8 \")\"\n-    WHITESPACE@8..9 \" \"\n-    BLOCK_EXPR@9..12\n-      L_CURLY@9..10 \"{\"\n-      WHITESPACE@10..11 \"\\n\"\n-      R_CURLY@11..12 \"}\"\n-\"#\n-            .trim(),\n-            syn.trim()\n+}\"###,\n+            expect![[r#\"\n+                SOURCE_FILE@0..12\n+                  FN@0..12\n+                    FN_KW@0..2 \"fn\"\n+                    WHITESPACE@2..3 \" \"\n+                    NAME@3..6\n+                      IDENT@3..6 \"foo\"\n+                    PARAM_LIST@6..8\n+                      L_PAREN@6..7 \"(\"\n+                      R_PAREN@7..8 \")\"\n+                    WHITESPACE@8..9 \" \"\n+                    BLOCK_EXPR@9..12\n+                      L_CURLY@9..10 \"{\"\n+                      WHITESPACE@10..11 \"\\n\"\n+                      R_CURLY@11..12 \"}\"\n+            \"#]],\n         );\n \n         // With a raw string\n-        let (analysis, range) = fixture::range(\n+        check_range(\n             r###\"fn test() {\n     assert!(r$0#\"\n fn foo() {\n }\n fn bar() {\n }\"$0#, \"\");\n-}\"###\n-                .trim(),\n-        );\n-        let syn = analysis.syntax_tree(range.file_id, Some(range.range)).unwrap();\n-        assert_eq_text!(\n-            r#\"\n-SOURCE_FILE@0..25\n-  FN@0..12\n-    FN_KW@0..2 \"fn\"\n-    WHITESPACE@2..3 \" \"\n-    NAME@3..6\n-      IDENT@3..6 \"foo\"\n-    PARAM_LIST@6..8\n-      L_PAREN@6..7 \"(\"\n-      R_PAREN@7..8 \")\"\n-    WHITESPACE@8..9 \" \"\n-    BLOCK_EXPR@9..12\n-      L_CURLY@9..10 \"{\"\n-      WHITESPACE@10..11 \"\\n\"\n-      R_CURLY@11..12 \"}\"\n-  WHITESPACE@12..13 \"\\n\"\n-  FN@13..25\n-    FN_KW@13..15 \"fn\"\n-    WHITESPACE@15..16 \" \"\n-    NAME@16..19\n-      IDENT@16..19 \"bar\"\n-    PARAM_LIST@19..21\n-      L_PAREN@19..20 \"(\"\n-      R_PAREN@20..21 \")\"\n-    WHITESPACE@21..22 \" \"\n-    BLOCK_EXPR@22..25\n-      L_CURLY@22..23 \"{\"\n-      WHITESPACE@23..24 \"\\n\"\n-      R_CURLY@24..25 \"}\"\n-\"#\n-            .trim(),\n-            syn.trim()\n+}\"###,\n+            expect![[r#\"\n+                SOURCE_FILE@0..25\n+                  FN@0..12\n+                    FN_KW@0..2 \"fn\"\n+                    WHITESPACE@2..3 \" \"\n+                    NAME@3..6\n+                      IDENT@3..6 \"foo\"\n+                    PARAM_LIST@6..8\n+                      L_PAREN@6..7 \"(\"\n+                      R_PAREN@7..8 \")\"\n+                    WHITESPACE@8..9 \" \"\n+                    BLOCK_EXPR@9..12\n+                      L_CURLY@9..10 \"{\"\n+                      WHITESPACE@10..11 \"\\n\"\n+                      R_CURLY@11..12 \"}\"\n+                  WHITESPACE@12..13 \"\\n\"\n+                  FN@13..25\n+                    FN_KW@13..15 \"fn\"\n+                    WHITESPACE@15..16 \" \"\n+                    NAME@16..19\n+                      IDENT@16..19 \"bar\"\n+                    PARAM_LIST@19..21\n+                      L_PAREN@19..20 \"(\"\n+                      R_PAREN@20..21 \")\"\n+                    WHITESPACE@21..22 \" \"\n+                    BLOCK_EXPR@22..25\n+                      L_CURLY@22..23 \"{\"\n+                      WHITESPACE@23..24 \"\\n\"\n+                      R_CURLY@24..25 \"}\"\n+            \"#]],\n         );\n     }\n }"}, {"sha": "e5d43905048ef21a71ed28d58c0a5c73fcbd96d4", "filename": "editors/code/package.json", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/fca93cfed339de88e1807e0633d24a2b3a7f01d5/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/fca93cfed339de88e1807e0633d24a2b3a7f01d5/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=fca93cfed339de88e1807e0633d24a2b3a7f01d5", "patch": "@@ -950,6 +950,50 @@\n             {\n                 \"id\": \"formatSpecifier\",\n                 \"description\": \"Style for {} placeholders in format strings\"\n+            },\n+            {\n+                \"id\": \"punctuation\",\n+                \"description\": \"generic punctuation\"\n+            },\n+            {\n+                \"id\": \"parenthesis\",\n+                \"description\": \"( or )\",\n+                \"superType\": \"punctuation\"\n+            },\n+            {\n+                \"id\": \"bracket\",\n+                \"description\": \"[ or ]\",\n+                \"superType\": \"punctuation\"\n+            },\n+            {\n+                \"id\": \"brace\",\n+                \"description\": \"{ or }\",\n+                \"superType\": \"punctuation\"\n+            },\n+            {\n+                \"id\": \"angle\",\n+                \"description\": \"< or >\",\n+                \"superType\": \"punctuation\"\n+            },\n+            {\n+                \"id\": \"comma\",\n+                \"description\": \",\",\n+                \"superType\": \"punctuation\"\n+            },\n+            {\n+                \"id\": \"colon\",\n+                \"description\": \":\",\n+                \"superType\": \"punctuation\"\n+            },\n+            {\n+                \"id\": \"semicolon\",\n+                \"description\": \";\",\n+                \"superType\": \"punctuation\"\n+            },\n+            {\n+                \"id\": \"dot\",\n+                \"description\": \".\",\n+                \"superType\": \"punctuation\"\n             }\n         ],\n         \"semanticTokenModifiers\": ["}]}