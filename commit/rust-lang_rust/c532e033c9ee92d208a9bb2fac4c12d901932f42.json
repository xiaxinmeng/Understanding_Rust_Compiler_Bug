{"sha": "c532e033c9ee92d208a9bb2fac4c12d901932f42", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1MzJlMDMzYzllZTkyZDIwOGE5YmIyZmFjNGMxMmQ5MDE5MzJmNDI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-18T19:39:17Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-23T04:57:08Z"}, "message": "librustc: Change `std` to `extra` throughout libsyntax and librustc", "tree": {"sha": "286fea43f1118aeb3927e0b07cc450d6095266b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/286fea43f1118aeb3927e0b07cc450d6095266b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c532e033c9ee92d208a9bb2fac4c12d901932f42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c532e033c9ee92d208a9bb2fac4c12d901932f42", "html_url": "https://github.com/rust-lang/rust/commit/c532e033c9ee92d208a9bb2fac4c12d901932f42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c532e033c9ee92d208a9bb2fac4c12d901932f42/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3723cf7c486fd22544b71d27eca5ed7082c6dff", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3723cf7c486fd22544b71d27eca5ed7082c6dff", "html_url": "https://github.com/rust-lang/rust/commit/f3723cf7c486fd22544b71d27eca5ed7082c6dff"}], "stats": {"total": 211, "additions": 111, "deletions": 100}, "files": [{"sha": "777f45e84bcaa05351cd3aeebd21464f5c0736b1", "filename": "src/libextra/std.rc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibextra%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibextra%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fstd.rc?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -119,10 +119,16 @@ pub mod test;\n pub mod serialize;\n \n // A curious inner-module that's not exported that contains the binding\n-// 'std' so that macro-expanded references to std::serialize and such\n-// can be resolved within libcore.\n+// 'extra' so that macro-expanded references to std::serialize and such\n+// can be resolved within libextra.\n #[doc(hidden)] // FIXME #3538\n pub mod std {\n     pub use serialize;\n     pub use test;\n }\n+#[doc(hidden)] // FIXME #3538\n+pub mod extra {\n+    pub use serialize;\n+    pub use test;\n+}\n+"}, {"sha": "a5882450f67d05aebf3506fc4b7be57f5b606e45", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -125,9 +125,9 @@ pub mod jit {\n \n             // We need to tell JIT where to resolve all linked\n             // symbols from. The equivalent of -lstd, -lcore, etc.\n-            // By default the JIT will resolve symbols from the std and\n+            // By default the JIT will resolve symbols from the extra and\n             // core linked into rustc. We don't want that,\n-            // incase the user wants to use an older std library.\n+            // incase the user wants to use an older extra library.\n \n             let cstore = sess.cstore;\n             for cstore::get_used_crate_files(cstore).each |cratepath| {"}, {"sha": "4a9a12e7c0f24a8b565c7d7a772248c46932a6b6", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -30,9 +30,9 @@ use core::io;\n use core::os;\n use core::str;\n use core::vec;\n-use std::getopts::groups::{optopt, optmulti, optflag, optflagopt, getopts};\n-use std::getopts::{opt_present};\n-use std::getopts;\n+use extra::getopts::groups::{optopt, optmulti, optflag, optflagopt, getopts};\n+use extra::getopts::{opt_present};\n+use extra::getopts;\n use syntax::ast;\n use syntax::abi;\n use syntax::attr;\n@@ -200,7 +200,7 @@ pub fn compile_rest(sess: Session,\n     crate = time(time_passes, ~\"intrinsic injection\", ||\n         front::intrinsic_inject::inject_intrinsic(sess, crate));\n \n-    crate = time(time_passes, ~\"std injection\", ||\n+    crate = time(time_passes, ~\"extra injection\", ||\n         front::std_inject::maybe_inject_libstd_ref(sess, crate));\n \n     let ast_map = time(time_passes, ~\"ast indexing\", ||\n@@ -923,8 +923,8 @@ mod test {\n     use driver::driver::{build_configuration, build_session};\n     use driver::driver::{build_session_options, optgroups, str_input};\n \n-    use std::getopts::groups::getopts;\n-    use std::getopts;\n+    use extra::getopts::groups::getopts;\n+    use extra::getopts;\n     use syntax::attr;\n     use syntax::diagnostic;\n "}, {"sha": "e41f26aab083a2acc6b65b3a5b7deee107e27d3b", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -258,13 +258,13 @@ We're going to be building a module that looks more or less like:\n \n mod __test {\n   #[!resolve_unexported]\n-  extern mod std (name = \"std\", vers = \"...\");\n+  extern mod extra (name = \"extra\", vers = \"...\");\n   fn main() {\n     #[main];\n-    std::test::test_main_static(::os::args(), tests)\n+    extra::test::test_main_static(::os::args(), tests)\n   }\n \n-  static tests : &'static [std::test::TestDescAndFn] = &[\n+  static tests : &'static [extra::test::TestDescAndFn] = &[\n     ... the list of tests in the crate ...\n   ];\n }\n@@ -276,7 +276,7 @@ fn mk_std(cx: &TestCtxt) -> @ast::view_item {\n     let vers = nospan(vers);\n     let mi = ast::meta_name_value(@~\"vers\", vers);\n     let mi = nospan(mi);\n-    let id_std = cx.sess.ident_of(\"std\");\n+    let id_std = cx.sess.ident_of(\"extra\");\n     let vi = if is_std(cx) {\n         ast::view_item_use(\n             ~[@nospan(ast::view_path_simple(id_std,\n@@ -297,7 +297,7 @@ fn mk_std(cx: &TestCtxt) -> @ast::view_item {\n \n fn mk_test_module(cx: &TestCtxt) -> @ast::item {\n \n-    // Link to std\n+    // Link to extra\n     let view_items = ~[mk_std(cx)];\n \n     // A constant vector of test descriptors.\n@@ -309,7 +309,7 @@ fn mk_test_module(cx: &TestCtxt) -> @ast::item {\n     let mainfn = (quote_item!(\n         pub fn main() {\n             #[main];\n-            std::test::test_main_static(::os::args(), tests);\n+            extra::test::test_main_static(::os::args(), tests);\n         }\n     )).get();\n \n@@ -366,7 +366,7 @@ fn mk_tests(cx: &TestCtxt) -> @ast::item {\n     let test_descs = mk_test_descs(cx);\n \n     (quote_item!(\n-        pub static tests : &'static [self::std::test::TestDescAndFn] =\n+        pub static tests : &'static [self::extra::test::TestDescAndFn] =\n             $test_descs\n         ;\n     )).get()\n@@ -376,7 +376,7 @@ fn is_std(cx: &TestCtxt) -> bool {\n     let is_std = {\n         let items = attr::find_linkage_metas(cx.crate.node.attrs);\n         match attr::last_meta_item_value_str_by_name(items, \"name\") {\n-          Some(@~\"std\") => true,\n+          Some(@~\"extra\") => true,\n           _ => false\n         }\n     };\n@@ -437,9 +437,9 @@ fn mk_test_desc_and_fn_rec(cx: &TestCtxt, test: &Test) -> @ast::expr {\n     };\n \n     let t_expr = if test.bench {\n-        quote_expr!( self::std::test::StaticBenchFn($fn_expr) )\n+        quote_expr!( self::extra::test::StaticBenchFn($fn_expr) )\n     } else {\n-        quote_expr!( self::std::test::StaticTestFn($fn_expr) )\n+        quote_expr!( self::extra::test::StaticTestFn($fn_expr) )\n     };\n \n     let ignore_expr = if test.ignore {\n@@ -455,9 +455,9 @@ fn mk_test_desc_and_fn_rec(cx: &TestCtxt, test: &Test) -> @ast::expr {\n     };\n \n     let e = quote_expr!(\n-        self::std::test::TestDescAndFn {\n-            desc: self::std::test::TestDesc {\n-                name: self::std::test::StaticTestName($name_expr),\n+        self::extra::test::TestDescAndFn {\n+            desc: self::extra::test::TestDesc {\n+                name: self::extra::test::StaticTestName($name_expr),\n                 ignore: $ignore_expr,\n                 should_fail: $fail_expr\n             },"}, {"sha": "b35904dbdae3663b7360797f2fb65bd8ae7e1389", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -18,7 +18,7 @@ use metadata::decoder;\n use metadata;\n use middle::{ty, resolve};\n \n-use reader = std::ebml::reader;\n+use reader = extra::ebml::reader;\n use syntax::ast;\n use syntax::ast_map;\n use syntax::diagnostic::expect;"}, {"sha": "6cc211e0e99aba7905ae9531dce8421d1971d035", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -18,7 +18,7 @@ use metadata::cstore;\n use metadata::decoder;\n \n use core::hashmap::HashMap;\n-use std;\n+use extra;\n use syntax::ast;\n use syntax::parse::token::ident_interner;\n \n@@ -152,7 +152,7 @@ pub fn get_dep_hashes(cstore: &CStore) -> ~[~str] {\n         });\n     }\n \n-    let sorted = do std::sort::merge_sort(result) |a, b| {\n+    let sorted = do extra::sort::merge_sort(result) |a, b| {\n         (a.name, a.vers, a.hash) <= (b.name, b.vers, b.hash)\n     };\n "}, {"sha": "de44b74528dcfb3a847d3dfd7517b41ec88fb000", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -30,9 +30,9 @@ use core::io;\n use core::option;\n use core::str;\n use core::vec;\n-use std::ebml::reader;\n-use std::ebml;\n-use std::serialize::Decodable;\n+use extra::ebml::reader;\n+use extra::ebml;\n+use extra::serialize::Decodable;\n use syntax::ast_map;\n use syntax::attr;\n use syntax::diagnostic::span_handler;"}, {"sha": "715465a757784e143b3c456d7027c95b147ed6d7", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -22,11 +22,11 @@ use middle::ty;\n use middle;\n use util::ppaux::ty_to_str;\n \n-use std::flate;\n+use extra::flate;\n use core::hash::HashUtil;\n use core::hashmap::HashMap;\n-use std::serialize::Encodable;\n-use std;\n+use extra::serialize::Encodable;\n+use extra;\n use syntax::abi::AbiSet;\n use syntax::ast::*;\n use syntax::ast;\n@@ -39,7 +39,7 @@ use syntax::{ast_util, visit};\n use syntax::opt_vec::OptVec;\n use syntax::opt_vec;\n use syntax;\n-use writer = std::ebml::writer;\n+use writer = extra::ebml::writer;\n \n // used by astencode:\n type abbrev_map = @mut HashMap<ty::t, tyencode::ty_abbrev>;\n@@ -1288,7 +1288,7 @@ fn encode_crate_deps(ecx: @EncodeContext,\n         };\n \n         // Sort by cnum\n-        std::sort::quick_sort(deps, |kv1, kv2| kv1.cnum <= kv2.cnum);\n+        extra::sort::quick_sort(deps, |kv1, kv2| kv1.cnum <= kv2.cnum);\n \n         // Sanity-check the crate numbers\n         let mut expected_cnum = 1;"}, {"sha": "232101930ad28ab688ca3769b825639667e8e1fe", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -23,7 +23,7 @@ use syntax::parse::token::ident_interner;\n use syntax::print::pprust;\n use syntax::{ast, attr};\n \n-use std::flate;\n+use extra::flate;\n use core::os::consts::{macos, freebsd, linux, android, win32};\n \n pub enum os {"}, {"sha": "3ebcf72e48548ec3afcf4f77a6f0e5baeb41f307", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -25,11 +25,11 @@ use middle::{ty, typeck, moves};\n use middle;\n use util::ppaux::ty_to_str;\n \n-use std::ebml::reader;\n-use std::ebml;\n-use std::serialize;\n-use std::serialize::{Encoder, Encodable, EncoderHelpers, DecoderHelpers};\n-use std::serialize::{Decoder, Decodable};\n+use extra::ebml::reader;\n+use extra::ebml;\n+use extra::serialize;\n+use extra::serialize::{Encoder, Encodable, EncoderHelpers, DecoderHelpers};\n+use extra::serialize::{Decoder, Decodable};\n use syntax::ast;\n use syntax::ast_map;\n use syntax::ast_util::inlined_item_utils;\n@@ -39,7 +39,7 @@ use syntax::codemap;\n use syntax::fold::*;\n use syntax::fold;\n use syntax;\n-use writer = std::ebml::writer;\n+use writer = extra::ebml::writer;\n \n #[cfg(test)] use syntax::parse;\n #[cfg(test)] use syntax::print::pprust;"}, {"sha": "9d164f5eb401af6d4fcf3e52186d017d5769db66", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -19,7 +19,7 @@ use middle::typeck::method_map;\n use middle::moves;\n use util::ppaux::ty_to_str;\n \n-use std::sort;\n+use extra::sort;\n use syntax::ast::*;\n use syntax::ast_util::{unguarded_pat, walk_pat};\n use syntax::codemap::{span, dummy_sp, spanned};"}, {"sha": "2b2f2df577b2e06d8b05492158bce199fc712885", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -17,7 +17,7 @@ use middle::pat_util;\n use util::ppaux::{ty_to_str};\n \n use core::hashmap::HashMap;\n-use std::smallintmap::SmallIntMap;\n+use extra::smallintmap::SmallIntMap;\n use syntax::attr;\n use syntax::codemap::span;\n use syntax::codemap;"}, {"sha": "f92acbaf5c68cfb7951e7a9689a1abb7735f61ef", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -67,7 +67,7 @@ use util::ppaux::{Repr, ty_to_str};\n use core::hash;\n use core::hashmap::{HashMap, HashSet};\n use core::libc::c_uint;\n-use std::time;\n+use extra::time;\n use syntax::ast::ident;\n use syntax::ast_map::{path, path_elt_to_str, path_name};\n use syntax::ast_util::{local_def, path_to_ident};"}, {"sha": "d8c851127478e5525bcb5581c29fddd8c516e196", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -36,7 +36,7 @@ use util::ppaux;\n use util::ppaux::ty_to_short_str;\n \n use core::libc::c_uint;\n-use std::time;\n+use extra::time;\n use syntax::ast;\n \n pub fn trans_free(cx: block, v: ValueRef) -> block {"}, {"sha": "365b75b8dd43d454114e7d04512b413b90018624", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -36,8 +36,8 @@ use middle::typeck;\n use core::option::{Some, None};\n use core::uint;\n use core::vec;\n-use std::list::{List, Cons, Nil};\n-use std::list;\n+use extra::list::{List, Cons, Nil};\n+use extra::list;\n use syntax::ast;\n use syntax::ast::*;\n use syntax::ast_map;"}, {"sha": "761096a019e2084f37378e68a5ef76d41f69e8cd", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -30,7 +30,7 @@ use util::enum_set::{EnumSet, CLike};\n use core::ptr::to_unsafe_ptr;\n use core::to_bytes;\n use core::hashmap::{HashMap, HashSet};\n-use std::smallintmap::SmallIntMap;\n+use extra::smallintmap::SmallIntMap;\n use syntax::ast::*;\n use syntax::ast_util::is_local;\n use syntax::ast_util;"}, {"sha": "68deb900886fbc7a65f040e854e3bf1d798a3439", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -96,7 +96,7 @@ use middle::typeck::check::regionmanip::replace_bound_regions_in_fn_sig;\n use util::common::indenter;\n \n use core::hashmap::HashSet;\n-use std::list::Nil;\n+use extra::list::Nil;\n use syntax::ast::{def_id, sty_value, sty_region, sty_box};\n use syntax::ast::{sty_uniq, sty_static, node_id};\n use syntax::ast::{m_const, m_mutbl, m_imm};"}, {"sha": "6131280f900382bc008474142cb740f7c5279cef", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -112,7 +112,7 @@ use util::ppaux;\n use core::cast::transmute;\n use core::hashmap::HashMap;\n use core::util::replace;\n-use std::list::Nil;\n+use extra::list::Nil;\n use syntax::abi::AbiSet;\n use syntax::ast::{provided, required};\n use syntax::ast;"}, {"sha": "c1b33d317f1e3e6ed714afd4ade46710583a6a00", "filename": "src/librustc/middle/typeck/check/regionmanip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -19,7 +19,7 @@ use util::common::indenter;\n use util::ppaux::region_to_str;\n use util::ppaux;\n \n-use std::list::Cons;\n+use extra::list::Cons;\n \n // Helper functions related to manipulating region types.\n "}, {"sha": "d6e3f2dae5d488162526aab5963eb675598aaee8", "filename": "src/librustc/middle/typeck/infer/glb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -30,7 +30,7 @@ use syntax::codemap::span;\n use util::common::{indent, indenter};\n use util::ppaux::mt_to_str;\n \n-use std::list;\n+use extra::list;\n \n pub struct Glb(CombineFields);  // \"greatest lower bound\" (common subtype)\n "}, {"sha": "3640748b20b54822c83baaa53066a66b844f60fd", "filename": "src/librustc/middle/typeck/infer/lattice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -46,7 +46,7 @@ use middle::typeck::infer::sub::Sub;\n use middle::typeck::infer::to_str::InferStr;\n use util::common::indenter;\n \n-use std::list;\n+use extra::list;\n \n pub trait LatticeValue {\n     fn sub(cf: &CombineFields, a: &Self, b: &Self) -> ures;"}, {"sha": "f5eb0bc26351ae5bc6c6800d7393d6c67352e5dd", "filename": "src/librustc/middle/typeck/infer/lub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -24,7 +24,7 @@ use middle::typeck::isr_alist;\n use util::common::indent;\n use util::ppaux::mt_to_str;\n \n-use std::list;\n+use extra::list;\n use syntax::abi::AbiSet;\n use syntax::ast;\n use syntax::ast::{Many, Once, extern_fn, m_const, impure_fn};"}, {"sha": "f2371e927b82fef9a615971db2991d4dcb20b8a8", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -267,8 +267,8 @@ use middle::typeck::isr_alist;\n use util::common::indent;\n use util::ppaux::{bound_region_to_str, ty_to_str, trait_ref_to_str};\n \n-use std::list::Nil;\n-use std::smallintmap::SmallIntMap;\n+use extra::list::Nil;\n+use extra::smallintmap::SmallIntMap;\n use syntax::ast::{m_imm, m_mutbl};\n use syntax::ast;\n use syntax::codemap;"}, {"sha": "2578f7c8553599a24d010e5ec5e9dbf62469f851", "filename": "src/librustc/middle/typeck/infer/sub.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -23,8 +23,8 @@ use middle::typeck::infer::to_str::InferStr;\n use util::common::{indent, indenter};\n use util::ppaux::bound_region_to_str;\n \n-use std::list::Nil;\n-use std::list;\n+use extra::list::Nil;\n+use extra::list;\n use syntax::abi::AbiSet;\n use syntax::ast;\n use syntax::ast::{Onceness, m_const, purity};"}, {"sha": "e39dd986c514b0ef9174075883240913337ae798", "filename": "src/librustc/middle/typeck/infer/test.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -23,12 +23,12 @@ use middle::lang_items::{LanguageItems, language_items};\n use middle::ty::{FnTyBase, FnMeta, FnSig};\n use util::ppaux::ty_to_str;\n \n-use std::getopts::groups::{optopt, optmulti, optflag, optflagopt, getopts};\n-use std::getopts::groups;\n-use std::getopts::{opt_present};\n-use std::getopts;\n-use std::getopts;\n-use std::oldmap::HashMap;\n+use extra::getopts::groups::{optopt, optmulti, optflag, optflagopt, getopts};\n+use extra::getopts::groups;\n+use extra::getopts::{opt_present};\n+use extra::getopts;\n+use extra::getopts;\n+use extra::oldmap::HashMap;\n use syntax::codemap::dummy_sp;\n use syntax::parse::parse_crate_from_source_str;\n use syntax::{ast, attr, parse};"}, {"sha": "78739bd7b04f9dd141773f2cb7a9e855fe746b74", "filename": "src/librustc/middle/typeck/infer/unify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -10,7 +10,7 @@\n \n use core::prelude::*;\n \n-use std::smallintmap::SmallIntMap;\n+use extra::smallintmap::SmallIntMap;\n \n use middle::ty::{Vid, expected_found, IntVarValue};\n use middle::ty;"}, {"sha": "f4900f5bfeb637f29a33eee83af3afc837b229ec", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -59,8 +59,8 @@ use util::ppaux::Repr;\n use util::ppaux;\n \n use core::hashmap::HashMap;\n-use std::list::List;\n-use std::list;\n+use extra::list::List;\n+use extra::list;\n use syntax::codemap::span;\n use syntax::print::pprust::*;\n use syntax::{ast, ast_map, abi};"}, {"sha": "04375b45793b7747dac1611e6e12305a3ebccdb2", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -25,9 +25,12 @@\n #[no_std];\n \n extern mod core(name = \"std\");\n-extern mod std(name = \"extra\");\n+extern mod extra(name = \"extra\");\n extern mod syntax;\n \n+// For deriving(Encodable) purposes...\n+extern mod std(name = \"extra\", vers = \"0.7-pre\");\n+\n use core::prelude::*;\n \n use driver::driver::{host_triple, optgroups, early_error};\n@@ -38,8 +41,8 @@ use driver::driver::{compile_input};\n use driver::session;\n use middle::lint;\n \n-use std::getopts::{groups, opt_present};\n-use std::getopts;\n+use extra::getopts::{groups, opt_present};\n+use extra::getopts;\n use syntax::codemap;\n use syntax::diagnostic;\n "}, {"sha": "cbf1d0df09f689245e2f52a3ddb9da4d3ceb388d", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -15,13 +15,13 @@ use syntax::codemap::{span};\n use syntax::visit;\n \n use core::hashmap::HashSet;\n-use std;\n+use extra;\n \n pub fn time<T>(do_it: bool, what: ~str, thunk: &fn() -> T) -> T {\n     if !do_it { return thunk(); }\n-    let start = std::time::precise_time_s();\n+    let start = extra::time::precise_time_s();\n     let rv = thunk();\n-    let end = std::time::precise_time_s();\n+    let end = extra::time::precise_time_s();\n     io::println(fmt!(\"time: %3.3f s\\t%s\", end - start, what));\n     rv\n }"}, {"sha": "e5771a5db2e9504f54fdbe77babeeeb9d185927c", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -18,12 +18,12 @@ use opt_vec::OptVec;\n use parse::token::get_ident_interner;\n \n use core::cast;\n+use core::hashmap::HashMap;\n use core::option::{Option};\n-use core::to_bytes;\n use core::to_bytes::IterBytes;\n+use core::to_bytes;\n use core::to_str::ToStr;\n-use core::hashmap::HashMap;\n-use std::serialize::{Encodable, Decodable, Encoder, Decoder};\n+use extra::serialize::{Encodable, Decodable, Encoder, Decoder};\n \n \n // an identifier contains an index into the interner\n@@ -1117,7 +1117,7 @@ pub enum inlined_item {\n mod test {\n     use core::option::{None, Option, Some};\n     use core::uint;\n-    use std;\n+    use extra;\n     use codemap::*;\n     use super::*;\n \n@@ -1206,7 +1206,7 @@ mod test {\n             },\n             span: bogus_span};\n         // doesn't matter which encoder we use....\n-        let _f = (@e as @std::serialize::Encodable<std::json::Encoder>);\n+        let _f = (@e as @extra::serialize::Encodable<extra::json::Encoder>);\n     }\n \n "}, {"sha": "6ac743d3844d25099af102ce175cbcb7fa6f6039", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -20,7 +20,7 @@ use diagnostic::span_handler;\n use parse::comments::{doc_comment_style, strip_doc_comment_decoration};\n \n use core::hashmap::HashSet;\n-use std;\n+use extra;\n \n /* Constructors */\n \n@@ -258,7 +258,7 @@ pub fn last_meta_item_list_by_name(items: ~[@ast::meta_item], name: &str)\n pub fn sort_meta_items(items: &[@ast::meta_item]) -> ~[@ast::meta_item] {\n     // This is sort of stupid here, converting to a vec of mutables and back\n     let mut v = vec::to_owned(items);\n-    do std::sort::quick_sort(v) |ma, mb| {\n+    do extra::sort::quick_sort(v) |ma, mb| {\n         get_meta_item_name(*ma) <= get_meta_item_name(*mb)\n     }\n "}, {"sha": "77a6137cd17198414aa08cd860aab7d88190bba7", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -24,7 +24,7 @@ source code snippets, etc.\n use core::prelude::*;\n \n use core::to_bytes;\n-use std::serialize::{Encodable, Decodable, Encoder, Decoder};\n+use extra::serialize::{Encodable, Decodable, Encoder, Decoder};\n \n pub trait Pos {\n     fn from_uint(n: uint) -> Self;"}, {"sha": "792b561f110c1b95467caec7a56a9f09842719d5", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -13,7 +13,7 @@ use core::prelude::*;\n use codemap::{Pos, span};\n use codemap;\n \n-use std::term;\n+use extra::term;\n \n pub type Emitter = @fn(cmsp: Option<(@codemap::CodeMap, span)>,\n                        msg: &str,"}, {"sha": "d1f1c4187d52e525b69edd70acfb4a8cc1b1357f", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -53,7 +53,7 @@ fn create_derived_decodable_impl(\n                 cx.path_global(\n                     span,\n                     ~[\n-                        cx.ident_of(\"std\"),\n+                        cx.ident_of(\"extra\"),\n                         cx.ident_of(\"serialize\"),\n                         cx.ident_of(\"Decoder\"),\n                     ]))));\n@@ -66,7 +66,7 @@ fn create_derived_decodable_impl(\n         span,\n         true,\n         ~[\n-            cx.ident_of(\"std\"),\n+            cx.ident_of(\"extra\"),\n             cx.ident_of(\"serialize\"),\n             cx.ident_of(\"Decodable\")\n         ],\n@@ -150,7 +150,7 @@ fn call_substructure_decode_method(\n             cx.path_global(\n                 span,\n                 ~[\n-                    cx.ident_of(\"std\"),\n+                    cx.ident_of(\"extra\"),\n                     cx.ident_of(\"serialize\"),\n                     cx.ident_of(\"Decodable\"),\n                     cx.ident_of(\"decode\"),"}, {"sha": "6ca7d0b7b28c84d4224deb98cf2b87cdbee8ba59", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -22,7 +22,7 @@ For example, a type like:\n \n would generate two implementations like:\n \n-impl<S:std::serialize::Encoder> Encodable<S> for Node {\n+impl<S:extra::serialize::Encoder> Encodable<S> for Node {\n     fn encode(&self, s: &S) {\n         do s.emit_struct(\"Node\", 1) {\n             s.emit_field(\"id\", 0, || s.emit_uint(self.id))\n@@ -115,7 +115,7 @@ fn create_derived_encodable_impl(\n                 cx.path_global(\n                     span,\n                     ~[\n-                        cx.ident_of(\"std\"),\n+                        cx.ident_of(\"extra\"),\n                         cx.ident_of(\"serialize\"),\n                         cx.ident_of(\"Encoder\"),\n                     ]))));\n@@ -128,7 +128,7 @@ fn create_derived_encodable_impl(\n         span,\n         true,\n         ~[\n-            cx.ident_of(\"std\"),\n+            cx.ident_of(\"extra\"),\n             cx.ident_of(\"serialize\"),\n             cx.ident_of(\"Encodable\")\n         ],\n@@ -411,10 +411,10 @@ fn expand_deriving_encodable_enum_method(\n \n #[cfg(test)]\n mod test {\n-    extern mod std;\n+    extern mod extra;\n     use core::option::{None, Some};\n-    use std::serialize::Encodable;\n-    use std::serialize::Encoder;\n+    use extra::serialize::Encodable;\n+    use extra::serialize::Encoder;\n \n     // just adding the ones I want to test, for now:\n     #[deriving(Eq)]"}, {"sha": "e250f970e62f50724f2a8d16c2990151fdb9924c", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -202,7 +202,7 @@ pub struct TraitDef<'self> {\n     /// other than the current trait\n     additional_bounds: ~[Ty<'self>],\n \n-    /// Any extra lifetimes and/or bounds, e.g. `D: std::serialize::Decoder`\n+    /// Any extra lifetimes and/or bounds, e.g. `D: extra::serialize::Decoder`\n     generics: LifetimeBounds<'self>,\n \n     methods: ~[MethodDef<'self>]"}, {"sha": "63ef87161490907dc5c02586f5039d25e8b484f2", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -13,7 +13,7 @@ The compiler code necessary to implement the #[deriving] extensions.\n \n \n FIXME (#2810)--Hygiene. Search for \"__\" strings (in other files too).\n-We also assume \"std\" is the standard library, and \"core\" is the core\n+We also assume \"extra\" is the standard library, and \"core\" is the core\n library.\n \n */"}, {"sha": "f1f5a7f12b2682a03c9bf9e6eabeae30f2ae8801", "filename": "src/libsyntax/ext/pipes/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -42,7 +42,7 @@ use core::prelude::*;\n use ext::base::ExtCtxt;\n use ext::pipes::proto::{protocol_};\n \n-use std::bitv::Bitv;\n+use extra::bitv::Bitv;\n \n pub fn analyze(proto: @mut protocol_, _cx: @ExtCtxt) {\n     debug!(\"initializing colive analysis\");"}, {"sha": "77637712c7f5b80551f46790b688b7dbab5c9e20", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -20,8 +20,6 @@ use parse::token;\n \n pub use ext::tt::transcribe::{TtReader, new_tt_reader};\n \n-//use std;\n-\n pub trait reader {\n     fn is_eof(@mut self) -> bool;\n     fn next_token(@mut self) -> TokenAndSpan;"}, {"sha": "eca999231cdf2fb703d75ca0aed4eefe84efa0e9", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -343,8 +343,8 @@ pub fn maybe_aborted<T>(result : T, p: Parser) -> T {\n #[cfg(test)]\n mod test {\n     use super::*;\n-    use std::serialize::Encodable;\n-    use std;\n+    use extra::serialize::Encodable;\n+    use extra;\n     use core::io;\n     use core::option::Some;\n     use core::option::None;\n@@ -365,9 +365,9 @@ mod test {\n     }\n \n \n-    #[cfg(test)] fn to_json_str<E : Encodable<std::json::Encoder>>(val: @E) -> ~str {\n+    #[cfg(test)] fn to_json_str<E : Encodable<extra::json::Encoder>>(val: @E) -> ~str {\n         do io::with_str_writer |writer| {\n-            let mut encoder = std::json::Encoder(writer);\n+            let mut encoder = extra::json::Encoder(writer);\n             val.encode(&mut encoder);\n         }\n     }"}, {"sha": "8ec281a6bc1f772562be18145e59cd0dc7cd5d41", "filename": "src/libsyntax/syntax.rc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibsyntax%2Fsyntax.rc", "raw_url": "https://github.com/rust-lang/rust/raw/c532e033c9ee92d208a9bb2fac4c12d901932f42/src%2Flibsyntax%2Fsyntax.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsyntax.rc?ref=c532e033c9ee92d208a9bb2fac4c12d901932f42", "patch": "@@ -27,6 +27,10 @@\n #[no_std];\n \n extern mod core(name = \"std\");\n+extern mod extra(name = \"extra\");\n+\n+// For deriving(Encodable) purposes...\n+#[cfg(stage0)]\n extern mod std(name = \"extra\");\n \n use core::prelude::*;"}]}