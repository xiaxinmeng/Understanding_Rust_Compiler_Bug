{"sha": "b1f5b1ba5fd12a058d153e9da8f11cd1bc597bf0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxZjViMWJhNWZkMTJhMDU4ZDE1M2U5ZGE4ZjExY2QxYmM1OTdiZjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-25T17:55:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-25T17:55:47Z"}, "message": "auto merge of #8029 : emillon/rust/issue-6804, r=cmr\n\nHi,\r\n\r\nAs noted in #6804, a pattern that contains `NaN` will never match because `NaN != NaN`. This adds a warning for such a case. The first commit handles the basic case and the second one generalizes it to more complex patterns using `walk_pat`.", "tree": {"sha": "d50a42ff7c3d172e21157325a1cbae7d33361f40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d50a42ff7c3d172e21157325a1cbae7d33361f40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1f5b1ba5fd12a058d153e9da8f11cd1bc597bf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1f5b1ba5fd12a058d153e9da8f11cd1bc597bf0", "html_url": "https://github.com/rust-lang/rust/commit/b1f5b1ba5fd12a058d153e9da8f11cd1bc597bf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1f5b1ba5fd12a058d153e9da8f11cd1bc597bf0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "baa649ede6df96f645a9e28acfdc0b66b63e48b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/baa649ede6df96f645a9e28acfdc0b66b63e48b5", "html_url": "https://github.com/rust-lang/rust/commit/baa649ede6df96f645a9e28acfdc0b66b63e48b5"}, {"sha": "f929a49d9c07115124a168bcc9651956683b4c22", "url": "https://api.github.com/repos/rust-lang/rust/commits/f929a49d9c07115124a168bcc9651956683b4c22", "html_url": "https://github.com/rust-lang/rust/commit/f929a49d9c07115124a168bcc9651956683b4c22"}], "stats": {"total": 44, "additions": 43, "deletions": 1}, "files": [{"sha": "793cd374718dff57fa269b1cca545b12046919b4", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b1f5b1ba5fd12a058d153e9da8f11cd1bc597bf0/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f5b1ba5fd12a058d153e9da8f11cd1bc597bf0/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=b1f5b1ba5fd12a058d153e9da8f11cd1bc597bf0", "patch": "@@ -10,7 +10,7 @@\n \n \n use middle::const_eval::{compare_const_vals, lookup_const_by_id};\n-use middle::const_eval::{eval_const_expr, const_val, const_bool};\n+use middle::const_eval::{eval_const_expr, const_val, const_bool, const_float};\n use middle::pat_util::*;\n use middle::ty::*;\n use middle::ty;\n@@ -102,6 +102,27 @@ pub fn check_arms(cx: &MatchCheckCtxt, arms: &[arm]) {\n     let mut seen = ~[];\n     for arms.iter().advance |arm| {\n         for arm.pats.iter().advance |pat| {\n+\n+            // Check that we do not match against a static NaN (#6804)\n+            let pat_matches_nan: &fn(@pat) -> bool = |p| {\n+                match cx.tcx.def_map.find(&p.id) {\n+                    Some(&def_static(did, false)) => {\n+                        let const_expr = lookup_const_by_id(cx.tcx, did).get();\n+                        match eval_const_expr(cx.tcx, const_expr) {\n+                            const_float(f) if f.is_NaN() => true,\n+                            _ => false\n+                        }\n+                    }\n+                    _ => false\n+                }\n+            };\n+            for walk_pat(*pat) |p| {\n+                if pat_matches_nan(p) {\n+                    cx.tcx.sess.span_warn(p.span, \"unmatchable NaN in pattern, \\\n+                                                   use the is_NaN method in a guard instead\");\n+                }\n+            }\n+\n             let v = ~[*pat];\n             match is_useful(cx, &seen, v) {\n               not_useful => {"}, {"sha": "0a62e889d091a921c91d29d1eefd9ab9fdef2576", "filename": "src/test/compile-fail/issue-6804.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b1f5b1ba5fd12a058d153e9da8f11cd1bc597bf0/src%2Ftest%2Fcompile-fail%2Fissue-6804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f5b1ba5fd12a058d153e9da8f11cd1bc597bf0/src%2Ftest%2Fcompile-fail%2Fissue-6804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6804.rs?ref=b1f5b1ba5fd12a058d153e9da8f11cd1bc597bf0", "patch": "@@ -0,0 +1,21 @@\n+// Matching against NaN should result in a warning\n+\n+use std::float::NaN;\n+\n+fn main() {\n+    let x = NaN;\n+    match x {\n+        NaN => {},\n+        _ => {},\n+    };\n+    //~^^^ WARNING unmatchable NaN in pattern, use the is_NaN method in a guard instead\n+    match [x, 1.0] {\n+        [NaN, _] => {},\n+        _ => {},\n+    };\n+    //~^^^ WARNING unmatchable NaN in pattern, use the is_NaN method in a guard instead\n+}\n+\n+// At least one error is needed so that compilation fails\n+#[static_assert]\n+static b: bool = false; //~ ERROR static assertion failed"}]}