{"sha": "80826c3944df4233fd532ee8cf465851dfe1b0fc", "node_id": "C_kwDOAAsO6NoAKDgwODI2YzM5NDRkZjQyMzNmZDUzMmVlOGNmNDY1ODUxZGZlMWIwZmM", "commit": {"author": {"name": "Guilherme-Vasconcelos", "email": "49197151+Guilherme-Vasconcelos@users.noreply.github.com", "date": "2022-07-18T00:20:51Z"}, "committer": {"name": "Guilherme-Vasconcelos", "email": "49197151+Guilherme-Vasconcelos@users.noreply.github.com", "date": "2022-08-14T15:45:24Z"}, "message": "Implement clippy::manual_empty_string_creations lint", "tree": {"sha": "b075a98d6d209d02cb031d598656da85942abfc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b075a98d6d209d02cb031d598656da85942abfc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80826c3944df4233fd532ee8cf465851dfe1b0fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80826c3944df4233fd532ee8cf465851dfe1b0fc", "html_url": "https://github.com/rust-lang/rust/commit/80826c3944df4233fd532ee8cf465851dfe1b0fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80826c3944df4233fd532ee8cf465851dfe1b0fc/comments", "author": {"login": "Guilherme-Vasconcelos", "id": 49197151, "node_id": "MDQ6VXNlcjQ5MTk3MTUx", "avatar_url": "https://avatars.githubusercontent.com/u/49197151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Guilherme-Vasconcelos", "html_url": "https://github.com/Guilherme-Vasconcelos", "followers_url": "https://api.github.com/users/Guilherme-Vasconcelos/followers", "following_url": "https://api.github.com/users/Guilherme-Vasconcelos/following{/other_user}", "gists_url": "https://api.github.com/users/Guilherme-Vasconcelos/gists{/gist_id}", "starred_url": "https://api.github.com/users/Guilherme-Vasconcelos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Guilherme-Vasconcelos/subscriptions", "organizations_url": "https://api.github.com/users/Guilherme-Vasconcelos/orgs", "repos_url": "https://api.github.com/users/Guilherme-Vasconcelos/repos", "events_url": "https://api.github.com/users/Guilherme-Vasconcelos/events{/privacy}", "received_events_url": "https://api.github.com/users/Guilherme-Vasconcelos/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Guilherme-Vasconcelos", "id": 49197151, "node_id": "MDQ6VXNlcjQ5MTk3MTUx", "avatar_url": "https://avatars.githubusercontent.com/u/49197151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Guilherme-Vasconcelos", "html_url": "https://github.com/Guilherme-Vasconcelos", "followers_url": "https://api.github.com/users/Guilherme-Vasconcelos/followers", "following_url": "https://api.github.com/users/Guilherme-Vasconcelos/following{/other_user}", "gists_url": "https://api.github.com/users/Guilherme-Vasconcelos/gists{/gist_id}", "starred_url": "https://api.github.com/users/Guilherme-Vasconcelos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Guilherme-Vasconcelos/subscriptions", "organizations_url": "https://api.github.com/users/Guilherme-Vasconcelos/orgs", "repos_url": "https://api.github.com/users/Guilherme-Vasconcelos/repos", "events_url": "https://api.github.com/users/Guilherme-Vasconcelos/events{/privacy}", "received_events_url": "https://api.github.com/users/Guilherme-Vasconcelos/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d5d191f6af4d4697e9b983b655aa7dd96fd966f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d5d191f6af4d4697e9b983b655aa7dd96fd966f", "html_url": "https://github.com/rust-lang/rust/commit/4d5d191f6af4d4697e9b983b655aa7dd96fd966f"}], "stats": {"total": 333, "additions": 332, "deletions": 1}, "files": [{"sha": "eedbe10320d74bbb6b6ec4c7ef9e6f0f1e7d7f88", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/80826c3944df4233fd532ee8cf465851dfe1b0fc/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/80826c3944df4233fd532ee8cf465851dfe1b0fc/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=80826c3944df4233fd532ee8cf465851dfe1b0fc", "patch": "@@ -3828,6 +3828,7 @@ Released 2018-09-13\n [`manual_assert`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_assert\n [`manual_async_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_async_fn\n [`manual_bits`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_bits\n+[`manual_empty_string_creations`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_empty_string_creations\n [`manual_filter_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_filter_map\n [`manual_find`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_find\n [`manual_find_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_find_map"}, {"sha": "e253f656b0de5c89f2bf84fd3c5d94d537495798", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/80826c3944df4233fd532ee8cf465851dfe1b0fc/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80826c3944df4233fd532ee8cf465851dfe1b0fc/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=80826c3944df4233fd532ee8cf465851dfe1b0fc", "patch": "@@ -124,6 +124,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(main_recursion::MAIN_RECURSION),\n     LintId::of(manual_async_fn::MANUAL_ASYNC_FN),\n     LintId::of(manual_bits::MANUAL_BITS),\n+    LintId::of(manual_empty_string_creations::MANUAL_EMPTY_STRING_CREATIONS),\n     LintId::of(manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE),\n     LintId::of(manual_rem_euclid::MANUAL_REM_EUCLID),\n     LintId::of(manual_retain::MANUAL_RETAIN),"}, {"sha": "29d923a0d8d7bb761df1121d486558662dd8cf2e", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/80826c3944df4233fd532ee8cf465851dfe1b0fc/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80826c3944df4233fd532ee8cf465851dfe1b0fc/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=80826c3944df4233fd532ee8cf465851dfe1b0fc", "patch": "@@ -244,6 +244,7 @@ store.register_lints(&[\n     manual_assert::MANUAL_ASSERT,\n     manual_async_fn::MANUAL_ASYNC_FN,\n     manual_bits::MANUAL_BITS,\n+    manual_empty_string_creations::MANUAL_EMPTY_STRING_CREATIONS,\n     manual_instant_elapsed::MANUAL_INSTANT_ELAPSED,\n     manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE,\n     manual_ok_or::MANUAL_OK_OR,"}, {"sha": "6972c75597aaca2d616cce9de5192cb650d3146e", "filename": "clippy_lints/src/lib.register_style.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/80826c3944df4233fd532ee8cf465851dfe1b0fc/clippy_lints%2Fsrc%2Flib.register_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80826c3944df4233fd532ee8cf465851dfe1b0fc/clippy_lints%2Fsrc%2Flib.register_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_style.rs?ref=80826c3944df4233fd532ee8cf465851dfe1b0fc", "patch": "@@ -44,6 +44,7 @@ store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n     LintId::of(main_recursion::MAIN_RECURSION),\n     LintId::of(manual_async_fn::MANUAL_ASYNC_FN),\n     LintId::of(manual_bits::MANUAL_BITS),\n+    LintId::of(manual_empty_string_creations::MANUAL_EMPTY_STRING_CREATIONS),\n     LintId::of(manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE),\n     LintId::of(map_clone::MAP_CLONE),\n     LintId::of(match_result_ok::MATCH_RESULT_OK),"}, {"sha": "4201cd9c0bf11dd9a3409d03693e70cff656c4bf", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80826c3944df4233fd532ee8cf465851dfe1b0fc/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80826c3944df4233fd532ee8cf465851dfe1b0fc/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=80826c3944df4233fd532ee8cf465851dfe1b0fc", "patch": "@@ -273,6 +273,7 @@ mod main_recursion;\n mod manual_assert;\n mod manual_async_fn;\n mod manual_bits;\n+mod manual_empty_string_creations;\n mod manual_instant_elapsed;\n mod manual_non_exhaustive;\n mod manual_ok_or;\n@@ -933,6 +934,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(std_instead_of_core::StdReexports::default()));\n     store.register_late_pass(|| Box::new(manual_instant_elapsed::ManualInstantElapsed));\n     store.register_late_pass(|| Box::new(partialeq_to_none::PartialeqToNone));\n+    store.register_late_pass(|| Box::new(manual_empty_string_creations::ManualEmptyStringCreations));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "dd602a89b4f6650780c5fd12189e36db5a154066", "filename": "clippy_lints/src/manual_empty_string_creations.rs", "status": "added", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/80826c3944df4233fd532ee8cf465851dfe1b0fc/clippy_lints%2Fsrc%2Fmanual_empty_string_creations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80826c3944df4233fd532ee8cf465851dfe1b0fc/clippy_lints%2Fsrc%2Fmanual_empty_string_creations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_empty_string_creations.rs?ref=80826c3944df4233fd532ee8cf465851dfe1b0fc", "patch": "@@ -0,0 +1,141 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use rustc_ast::LitKind;\n+use rustc_errors::Applicability::MachineApplicable;\n+use rustc_hir::{Expr, ExprKind, PathSegment, QPath, TyKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::{sym, symbol, Span};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    ///\n+    /// Checks for usage of `\"\"` to create a `String`, such as `\"\".to_string()`, `\"\".to_owned()`,\n+    /// `String::from(\"\")` and others.\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// Different ways of creating an empty string makes your code less standardized, which can\n+    /// be confusing.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let a = \"\".to_string();\n+    /// let b: String = \"\".into();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let a = String::new();\n+    /// let b = String::new();\n+    /// ```\n+    #[clippy::version = \"1.65.0\"]\n+    pub MANUAL_EMPTY_STRING_CREATIONS,\n+    style,\n+    \"empty String is being created manually\"\n+}\n+declare_lint_pass!(ManualEmptyStringCreations => [MANUAL_EMPTY_STRING_CREATIONS]);\n+\n+impl LateLintPass<'_> for ManualEmptyStringCreations {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n+        if expr.span.from_expansion() {\n+            return;\n+        }\n+\n+        let ty = cx.typeck_results().expr_ty(expr);\n+        match ty.kind() {\n+            ty::Adt(adt_def, _) if adt_def.is_struct() => {\n+                if !cx.tcx.is_diagnostic_item(sym::String, adt_def.did()) {\n+                    return;\n+                }\n+            },\n+            _ => return,\n+        }\n+\n+        match expr.kind {\n+            ExprKind::Call(func, args) => {\n+                parse_call(cx, expr.span, func, args);\n+            },\n+            ExprKind::MethodCall(path_segment, args, _) => {\n+                parse_method_call(cx, expr.span, path_segment, args);\n+            },\n+            _ => (),\n+        }\n+    }\n+}\n+\n+/// Checks if an expression's kind corresponds to an empty &str.\n+fn is_expr_kind_empty_str(expr_kind: &ExprKind<'_>) -> bool {\n+    if  let ExprKind::Lit(lit) = expr_kind &&\n+        let LitKind::Str(value, _) = lit.node &&\n+        value == symbol::kw::Empty\n+    {\n+        return true;\n+    }\n+\n+    false\n+}\n+\n+/// Emits the `MANUAL_EMPTY_STRING_CREATION` warning and suggests the appropriate fix.\n+fn warn_then_suggest(cx: &LateContext<'_>, span: Span) {\n+    span_lint_and_sugg(\n+        cx,\n+        MANUAL_EMPTY_STRING_CREATIONS,\n+        span,\n+        \"empty String is being created manually\",\n+        \"consider using\",\n+        \"String::new()\".into(),\n+        MachineApplicable,\n+    );\n+}\n+\n+/// Tries to parse an expression as a method call, emiting the warning if necessary.\n+fn parse_method_call(cx: &LateContext<'_>, span: Span, path_segment: &PathSegment<'_>, args: &[Expr<'_>]) {\n+    if args.is_empty() {\n+        // When parsing TryFrom::try_from(...).expect(...), we will have more than 1 arg.\n+        return;\n+    }\n+\n+    let ident = path_segment.ident.as_str();\n+    let method_arg_kind = &args[0].kind;\n+    if [\"to_string\", \"to_owned\", \"into\"].contains(&ident) && is_expr_kind_empty_str(method_arg_kind) {\n+        warn_then_suggest(cx, span);\n+    } else if let ExprKind::Call(func, args) = method_arg_kind {\n+        // If our first argument is a function call itself, it could be an `unwrap`-like function.\n+        // E.g. String::try_from(\"hello\").unwrap(), TryFrom::try_from(\"\").expect(\"hello\"), etc.\n+        parse_call(cx, span, func, args);\n+    }\n+}\n+\n+/// Tries to parse an expression as a function call, emiting the warning if necessary.\n+fn parse_call(cx: &LateContext<'_>, span: Span, func: &Expr<'_>, args: &[Expr<'_>]) {\n+    if args.len() != 1 {\n+        return;\n+    }\n+\n+    let arg_kind = &args[0].kind;\n+    if let ExprKind::Path(qpath) = &func.kind {\n+        if let QPath::TypeRelative(_, _) = qpath {\n+            // String::from(...) or String::try_from(...)\n+            if  let QPath::TypeRelative(ty, path_seg) = qpath &&\n+                [sym::from, sym::try_from].contains(&path_seg.ident.name) &&\n+                let TyKind::Path(qpath) = &ty.kind &&\n+                let QPath::Resolved(_, path) = qpath &&\n+                let [path_seg] = path.segments &&\n+                path_seg.ident.name == sym::String &&\n+                is_expr_kind_empty_str(arg_kind)\n+            {\n+                warn_then_suggest(cx, span);\n+            }\n+        } else if let QPath::Resolved(_, path) = qpath {\n+            // From::from(...) or TryFrom::try_from(...)\n+            if  let [path_seg1, path_seg2] = path.segments &&\n+                is_expr_kind_empty_str(arg_kind) && (\n+                    (path_seg1.ident.name == sym::From && path_seg2.ident.name == sym::from) ||\n+                    (path_seg1.ident.name == sym::TryFrom && path_seg2.ident.name == sym::try_from)\n+                )\n+            {\n+                warn_then_suggest(cx, span);\n+            }\n+        }\n+    }\n+}"}, {"sha": "d539d11a39f3c074aba602ef8a35128d841c7dcf", "filename": "clippy_utils/src/msrvs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80826c3944df4233fd532ee8cf465851dfe1b0fc/clippy_utils%2Fsrc%2Fmsrvs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80826c3944df4233fd532ee8cf465851dfe1b0fc/clippy_utils%2Fsrc%2Fmsrvs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmsrvs.rs?ref=80826c3944df4233fd532ee8cf465851dfe1b0fc", "patch": "@@ -32,8 +32,8 @@ msrv_aliases! {\n     1,30,0 { ITERATOR_FIND_MAP, TOOL_ATTRIBUTES }\n     1,28,0 { FROM_BOOL }\n     1,26,0 { RANGE_INCLUSIVE, STRING_RETAIN }\n+    1,24,0 { IS_ASCII_DIGIT }\n     1,18,0 { HASH_MAP_RETAIN, HASH_SET_RETAIN }\n     1,17,0 { FIELD_INIT_SHORTHAND, STATIC_IN_CONST, EXPECT_ERR }\n     1,16,0 { STR_REPEAT }\n-    1,24,0 { IS_ASCII_DIGIT }\n }"}, {"sha": "3516312ee0c5823f4ac8d8e793ebeb600f713fc4", "filename": "tests/ui/manual_empty_string_creations.fixed", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/80826c3944df4233fd532ee8cf465851dfe1b0fc/tests%2Fui%2Fmanual_empty_string_creations.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/80826c3944df4233fd532ee8cf465851dfe1b0fc/tests%2Fui%2Fmanual_empty_string_creations.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_empty_string_creations.fixed?ref=80826c3944df4233fd532ee8cf465851dfe1b0fc", "patch": "@@ -0,0 +1,63 @@\n+// run-rustfix\n+\n+#![warn(clippy::manual_empty_string_creations)]\n+\n+macro_rules! create_strings_from_macro {\n+    // When inside a macro, nothing should warn to prevent false positives.\n+    ($some_str:expr) => {\n+        let _: String = $some_str.into();\n+        let _ = $some_str.to_string();\n+    }\n+}\n+\n+fn main() {\n+    // Method calls\n+    let _ = String::new();\n+    let _ = \"no warning\".to_string();\n+\n+    let _ = String::new();\n+    let _ = \"no warning\".to_owned();\n+\n+    let _: String = String::new();\n+    let _: String = \"no warning\".into();\n+\n+    let _: SomeOtherStruct = \"no warning\".into();\n+    let _: SomeOtherStruct = \"\".into(); // No warning too. We are not converting into String.\n+\n+    // Calls\n+    let _ = String::new();\n+    let _ = String::new();\n+    let _ = String::from(\"no warning\");\n+    let _ = SomeOtherStruct::from(\"no warning\");\n+    let _ = SomeOtherStruct::from(\"\"); // Again: no warning.\n+\n+    let _ = String::new();\n+    let _ = String::try_from(\"no warning\").unwrap();\n+    let _ = String::try_from(\"no warning\").expect(\"this should not warn\");\n+    let _ = SomeOtherStruct::try_from(\"no warning\").unwrap();\n+    let _ = SomeOtherStruct::try_from(\"\").unwrap(); // Again: no warning.\n+\n+    let _: String = String::new();\n+    let _: String = From::from(\"no warning\");\n+    let _: SomeOtherStruct = From::from(\"no warning\");\n+    let _: SomeOtherStruct = From::from(\"\"); // Again: no warning.\n+\n+    let _: String = String::new();\n+    let _: String = TryFrom::try_from(\"no warning\").unwrap();\n+    let _: String = TryFrom::try_from(\"no warning\").expect(\"this should not warn\");\n+    let _: String = String::new();\n+    let _: SomeOtherStruct = TryFrom::try_from(\"no_warning\").unwrap();\n+    let _: SomeOtherStruct = TryFrom::try_from(\"\").unwrap(); // Again: no warning.\n+\n+    // Macros (never warn)\n+    create_strings_from_macro!(\"\");\n+    create_strings_from_macro!(\"Hey\");\n+}\n+\n+struct SomeOtherStruct {}\n+\n+impl From<&str> for SomeOtherStruct {\n+    fn from(_value: &str) -> Self {\n+        Self {}\n+    }\n+}"}, {"sha": "ed39a05ed5c40bbf5a796f3d221505483ec6ce2c", "filename": "tests/ui/manual_empty_string_creations.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/80826c3944df4233fd532ee8cf465851dfe1b0fc/tests%2Fui%2Fmanual_empty_string_creations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80826c3944df4233fd532ee8cf465851dfe1b0fc/tests%2Fui%2Fmanual_empty_string_creations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_empty_string_creations.rs?ref=80826c3944df4233fd532ee8cf465851dfe1b0fc", "patch": "@@ -0,0 +1,63 @@\n+// run-rustfix\n+\n+#![warn(clippy::manual_empty_string_creations)]\n+\n+macro_rules! create_strings_from_macro {\n+    // When inside a macro, nothing should warn to prevent false positives.\n+    ($some_str:expr) => {\n+        let _: String = $some_str.into();\n+        let _ = $some_str.to_string();\n+    };\n+}\n+\n+fn main() {\n+    // Method calls\n+    let _ = \"\".to_string();\n+    let _ = \"no warning\".to_string();\n+\n+    let _ = \"\".to_owned();\n+    let _ = \"no warning\".to_owned();\n+\n+    let _: String = \"\".into();\n+    let _: String = \"no warning\".into();\n+\n+    let _: SomeOtherStruct = \"no warning\".into();\n+    let _: SomeOtherStruct = \"\".into(); // No warning too. We are not converting into String.\n+\n+    // Calls\n+    let _ = String::from(\"\");\n+    let _ = <String>::from(\"\");\n+    let _ = String::from(\"no warning\");\n+    let _ = SomeOtherStruct::from(\"no warning\");\n+    let _ = SomeOtherStruct::from(\"\"); // Again: no warning.\n+\n+    let _ = String::try_from(\"\").unwrap();\n+    let _ = String::try_from(\"no warning\").unwrap();\n+    let _ = String::try_from(\"no warning\").expect(\"this should not warn\");\n+    let _ = SomeOtherStruct::try_from(\"no warning\").unwrap();\n+    let _ = SomeOtherStruct::try_from(\"\").unwrap(); // Again: no warning.\n+\n+    let _: String = From::from(\"\");\n+    let _: String = From::from(\"no warning\");\n+    let _: SomeOtherStruct = From::from(\"no warning\");\n+    let _: SomeOtherStruct = From::from(\"\"); // Again: no warning.\n+\n+    let _: String = TryFrom::try_from(\"\").unwrap();\n+    let _: String = TryFrom::try_from(\"no warning\").unwrap();\n+    let _: String = TryFrom::try_from(\"no warning\").expect(\"this should not warn\");\n+    let _: String = TryFrom::try_from(\"\").expect(\"this should warn\");\n+    let _: SomeOtherStruct = TryFrom::try_from(\"no_warning\").unwrap();\n+    let _: SomeOtherStruct = TryFrom::try_from(\"\").unwrap(); // Again: no warning.\n+\n+    // Macros (never warn)\n+    create_strings_from_macro!(\"\");\n+    create_strings_from_macro!(\"Hey\");\n+}\n+\n+struct SomeOtherStruct {}\n+\n+impl From<&str> for SomeOtherStruct {\n+    fn from(_value: &str) -> Self {\n+        Self {}\n+    }\n+}"}, {"sha": "f38ba02a508f7d52aa22523cde33959ee8a5f4d9", "filename": "tests/ui/manual_empty_string_creations.stderr", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/80826c3944df4233fd532ee8cf465851dfe1b0fc/tests%2Fui%2Fmanual_empty_string_creations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/80826c3944df4233fd532ee8cf465851dfe1b0fc/tests%2Fui%2Fmanual_empty_string_creations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_empty_string_creations.stderr?ref=80826c3944df4233fd532ee8cf465851dfe1b0fc", "patch": "@@ -0,0 +1,58 @@\n+error: empty String is being created manually\n+  --> $DIR/manual_empty_string_creations.rs:15:13\n+   |\n+LL |     let _ = \"\".to_string();\n+   |             ^^^^^^^^^^^^^^ help: consider using: `String::new()`\n+   |\n+   = note: `-D clippy::manual-empty-string-creations` implied by `-D warnings`\n+\n+error: empty String is being created manually\n+  --> $DIR/manual_empty_string_creations.rs:18:13\n+   |\n+LL |     let _ = \"\".to_owned();\n+   |             ^^^^^^^^^^^^^ help: consider using: `String::new()`\n+\n+error: empty String is being created manually\n+  --> $DIR/manual_empty_string_creations.rs:21:21\n+   |\n+LL |     let _: String = \"\".into();\n+   |                     ^^^^^^^^^ help: consider using: `String::new()`\n+\n+error: empty String is being created manually\n+  --> $DIR/manual_empty_string_creations.rs:28:13\n+   |\n+LL |     let _ = String::from(\"\");\n+   |             ^^^^^^^^^^^^^^^^ help: consider using: `String::new()`\n+\n+error: empty String is being created manually\n+  --> $DIR/manual_empty_string_creations.rs:29:13\n+   |\n+LL |     let _ = <String>::from(\"\");\n+   |             ^^^^^^^^^^^^^^^^^^ help: consider using: `String::new()`\n+\n+error: empty String is being created manually\n+  --> $DIR/manual_empty_string_creations.rs:34:13\n+   |\n+LL |     let _ = String::try_from(\"\").unwrap();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `String::new()`\n+\n+error: empty String is being created manually\n+  --> $DIR/manual_empty_string_creations.rs:40:21\n+   |\n+LL |     let _: String = From::from(\"\");\n+   |                     ^^^^^^^^^^^^^^ help: consider using: `String::new()`\n+\n+error: empty String is being created manually\n+  --> $DIR/manual_empty_string_creations.rs:45:21\n+   |\n+LL |     let _: String = TryFrom::try_from(\"\").unwrap();\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `String::new()`\n+\n+error: empty String is being created manually\n+  --> $DIR/manual_empty_string_creations.rs:48:21\n+   |\n+LL |     let _: String = TryFrom::try_from(\"\").expect(\"this should warn\");\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `String::new()`\n+\n+error: aborting due to 9 previous errors\n+"}]}