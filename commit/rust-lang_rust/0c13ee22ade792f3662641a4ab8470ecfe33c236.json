{"sha": "0c13ee22ade792f3662641a4ab8470ecfe33c236", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMTNlZTIyYWRlNzkyZjM2NjI2NDFhNGFiODQ3MGVjZmUzM2MyMzY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-08T00:34:02Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-08T00:34:02Z"}, "message": "core: Use substr in extfmt instead of slice_bytes", "tree": {"sha": "c8bd0eda7b09102be77428d57c3133b9dabe42f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8bd0eda7b09102be77428d57c3133b9dabe42f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c13ee22ade792f3662641a4ab8470ecfe33c236", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c13ee22ade792f3662641a4ab8470ecfe33c236", "html_url": "https://github.com/rust-lang/rust/commit/0c13ee22ade792f3662641a4ab8470ecfe33c236", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c13ee22ade792f3662641a4ab8470ecfe33c236/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1aa23947a630fbc5678eeabeca5a653a37871bdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/1aa23947a630fbc5678eeabeca5a653a37871bdd", "html_url": "https://github.com/rust-lang/rust/commit/1aa23947a630fbc5678eeabeca5a653a37871bdd"}], "stats": {"total": 3, "additions": 1, "deletions": 2}, "files": [{"sha": "d87ba9a5ca9a28afb94c939d25ff15b9fe48fb91", "filename": "src/libcore/extfmt.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c13ee22ade792f3662641a4ab8470ecfe33c236/src%2Flibcore%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c13ee22ade792f3662641a4ab8470ecfe33c236/src%2Flibcore%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fextfmt.rs?ref=0c13ee22ade792f3662641a4ab8470ecfe33c236", "patch": "@@ -321,13 +321,12 @@ mod rt {\n         // For strings, precision is the maximum characters\n         // displayed\n \n-        // FIXME: substr works on bytes, not chars!\n         let unpadded =\n             alt cv.precision {\n               count_implied { s }\n               count_is(max) {\n                 if max as uint < str::char_len(s) {\n-                    str::unsafe::slice_bytes(s, 0u, max as uint)\n+                    str::substr(s, 0u, max as uint)\n                 } else { s }\n               }\n             };"}]}