{"sha": "0adfd810f8aa16ce9e63f6feae182db0ba4833ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhZGZkODEwZjhhYTE2Y2U5ZTYzZjZmZWFlMTgyZGIwYmE0ODMzZWY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-04-17T21:22:55Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-04-20T11:44:43Z"}, "message": "rustc: combine type_needs_drop_given_env and may_drop into needs_drop.", "tree": {"sha": "322aa0cad9d4240faf3db5884cb3b793916a3dc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/322aa0cad9d4240faf3db5884cb3b793916a3dc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0adfd810f8aa16ce9e63f6feae182db0ba4833ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0adfd810f8aa16ce9e63f6feae182db0ba4833ef", "html_url": "https://github.com/rust-lang/rust/commit/0adfd810f8aa16ce9e63f6feae182db0ba4833ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0adfd810f8aa16ce9e63f6feae182db0ba4833ef/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ad3b94847db8cbee27947d7d62a6add28a9c0e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ad3b94847db8cbee27947d7d62a6add28a9c0e9", "html_url": "https://github.com/rust-lang/rust/commit/9ad3b94847db8cbee27947d7d62a6add28a9c0e9"}], "stats": {"total": 132, "additions": 68, "deletions": 64}, "files": [{"sha": "5c0889976c21a7bd8f462030899ac58b51429368", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 35, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0adfd810f8aa16ce9e63f6feae182db0ba4833ef/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0adfd810f8aa16ce9e63f6feae182db0ba4833ef/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=0adfd810f8aa16ce9e63f6feae182db0ba4833ef", "patch": "@@ -425,8 +425,8 @@ bitflags! {\n         const MOVES_BY_DEFAULT  = 1 << 19,\n         const FREEZENESS_CACHED = 1 << 20,\n         const IS_FREEZE         = 1 << 21,\n-        const MAY_DROP_CACHED   = 1 << 22,\n-        const MAY_DROP          = 1 << 23,\n+        const NEEDS_DROP_CACHED = 1 << 22,\n+        const NEEDS_DROP        = 1 << 23,\n     }\n }\n \n@@ -2381,39 +2381,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         Some(self.item_mir(did))\n     }\n \n-    /// If `type_needs_drop` returns true, then `ty` is definitely\n-    /// non-copy and *might* have a destructor attached; if it returns\n-    /// false, then `ty` definitely has no destructor (i.e. no drop glue).\n-    ///\n-    /// (Note that this implies that if `ty` has a destructor attached,\n-    /// then `type_needs_drop` will definitely return `true` for `ty`.)\n-    pub fn type_needs_drop_given_env(self,\n-                                     ty: Ty<'gcx>,\n-                                     param_env: &ty::ParameterEnvironment<'gcx>) -> bool {\n-        // Issue #22536: We first query type_moves_by_default.  It sees a\n-        // normalized version of the type, and therefore will definitely\n-        // know whether the type implements Copy (and thus needs no\n-        // cleanup/drop/zeroing) ...\n-        let tcx = self.global_tcx();\n-        let implements_copy = !ty.moves_by_default(tcx, param_env, DUMMY_SP);\n-\n-        if implements_copy { return false; }\n-\n-        // ... (issue #22536 continued) but as an optimization, still use\n-        // prior logic of asking for the structural `may_drop`.\n-\n-        // FIXME(#22815): Note that calling `ty::may_drop` is a\n-        // conservative heuristic; it may report `true` (\"may drop\")\n-        // when actual type does not actually have a destructor associated\n-        // with it. But since `ty` absolutely did not have the `Copy`\n-        // bound attached (see above), it is sound to treat it as having a\n-        // destructor.\n-\n-        let may_drop = ty.may_drop(tcx);\n-        debug!(\"type_needs_drop ty={:?} may_drop={:?}\", ty, may_drop);\n-        may_drop\n-    }\n-\n     /// Get the attributes of a definition.\n     pub fn get_attrs(self, did: DefId) -> Cow<'gcx, [ast::Attribute]> {\n         if let Some(id) = self.hir.as_local_node_id(did) {"}, {"sha": "49d79f6545e2dd682b3cb1ff55ac936f7fced871", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 58, "deletions": 20, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/0adfd810f8aa16ce9e63f6feae182db0ba4833ef/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0adfd810f8aa16ce9e63f6feae182db0ba4833ef/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=0adfd810f8aa16ce9e63f6feae182db0ba4833ef", "patch": "@@ -699,31 +699,52 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n         result\n     }\n \n+    /// If `ty.needs_drop(...)` returns `true`, then `ty` is definitely\n+    /// non-copy and *might* have a destructor attached; if it returns\n+    /// `false`, then `ty` definitely has no destructor (i.e. no drop glue).\n+    ///\n+    /// (Note that this implies that if `ty` has a destructor attached,\n+    /// then `needs_drop` will definitely return `true` for `ty`.)\n     #[inline]\n-    pub fn may_drop(&'tcx self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> bool {\n-        if self.flags.get().intersects(TypeFlags::MAY_DROP_CACHED) {\n-            return self.flags.get().intersects(TypeFlags::MAY_DROP);\n+    pub fn needs_drop(&'tcx self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                    param_env: &ty::ParameterEnvironment<'tcx>) -> bool {\n+        if self.flags.get().intersects(TypeFlags::NEEDS_DROP_CACHED) {\n+            return self.flags.get().intersects(TypeFlags::NEEDS_DROP);\n         }\n \n-        self.may_drop_inner(tcx, &mut FxHashSet())\n+        self.needs_drop_uncached(tcx, param_env, &mut FxHashSet())\n     }\n \n-    fn may_drop_inner(&'tcx self,\n-                      tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                      visited: &mut FxHashSet<Ty<'tcx>>)\n-                      -> bool {\n-        if self.flags.get().intersects(TypeFlags::MAY_DROP_CACHED) {\n-            return self.flags.get().intersects(TypeFlags::MAY_DROP);\n+    fn needs_drop_inner(&'tcx self,\n+                        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                        param_env: &ty::ParameterEnvironment<'tcx>,\n+                        stack: &mut FxHashSet<Ty<'tcx>>)\n+                        -> bool {\n+        if self.flags.get().intersects(TypeFlags::NEEDS_DROP_CACHED) {\n+            return self.flags.get().intersects(TypeFlags::NEEDS_DROP);\n         }\n \n         // This should be reported as an error by `check_representable`.\n         //\n         // Consider the type as not needing drop in the meanwhile to avoid\n         // further errors.\n-        if visited.replace(self).is_some() {\n+        if let Some(_) = stack.replace(self) {\n             return false;\n         }\n \n+        let needs_drop = self.needs_drop_uncached(tcx, param_env, stack);\n+\n+        // \"Pop\" the cycle detection \"stack\".\n+        stack.remove(self);\n+\n+        needs_drop\n+    }\n+\n+    fn needs_drop_uncached(&'tcx self,\n+                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                           param_env: &ty::ParameterEnvironment<'tcx>,\n+                           stack: &mut FxHashSet<Ty<'tcx>>)\n+                           -> bool {\n         assert!(!self.needs_infer());\n \n         let result = match self.sty {\n@@ -733,6 +754,21 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n             ty::TyFnDef(..) | ty::TyFnPtr(_) | ty::TyChar |\n             ty::TyRawPtr(_) | ty::TyRef(..) | ty::TyStr => false,\n \n+            // Issue #22536: We first query type_moves_by_default.  It sees a\n+            // normalized version of the type, and therefore will definitely\n+            // know whether the type implements Copy (and thus needs no\n+            // cleanup/drop/zeroing) ...\n+            _ if !self.moves_by_default(tcx, param_env, DUMMY_SP) => false,\n+\n+            // ... (issue #22536 continued) but as an optimization, still use\n+            // prior logic of asking for the structural \"may drop\".\n+\n+            // FIXME(#22815): Note that this is a conservative heuristic;\n+            // it may report that the type \"may drop\" when actual type does\n+            // not actually have a destructor associated with it. But since\n+            // the type absolutely did not have the `Copy` bound attached\n+            // (see above), it is sound to treat it as having a destructor.\n+\n             // User destructors are the only way to have concrete drop types.\n             ty::TyAdt(def, _) if def.has_dtor(tcx) => true,\n \n@@ -743,16 +779,16 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n \n             // Structural recursion.\n             ty::TyArray(ty, _) | ty::TySlice(ty) => {\n-                ty.may_drop_inner(tcx, visited)\n+                ty.needs_drop_inner(tcx, param_env, stack)\n             }\n \n             ty::TyClosure(def_id, ref substs) => {\n                 substs.upvar_tys(def_id, tcx)\n-                    .any(|ty| ty.may_drop_inner(tcx, visited))\n+                    .any(|ty| ty.needs_drop_inner(tcx, param_env, stack))\n             }\n \n             ty::TyTuple(ref tys, _) => {\n-                tys.iter().any(|ty| ty.may_drop_inner(tcx, visited))\n+                tys.iter().any(|ty| ty.needs_drop_inner(tcx, param_env, stack))\n             }\n \n             // unions don't have destructors regardless of the child types\n@@ -761,17 +797,19 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n             ty::TyAdt(def, substs) => {\n                 def.variants.iter().any(|v| {\n                     v.fields.iter().any(|f| {\n-                        f.ty(tcx, substs).may_drop_inner(tcx, visited)\n+                        f.ty(tcx, substs).needs_drop_inner(tcx, param_env, stack)\n                     })\n                 })\n             }\n         };\n \n-        self.flags.set(self.flags.get() | if result {\n-            TypeFlags::MAY_DROP_CACHED | TypeFlags::MAY_DROP\n-        } else {\n-            TypeFlags::MAY_DROP_CACHED\n-        });\n+        if !self.has_param_types() && !self.has_self_ty() {\n+            self.flags.set(self.flags.get() | if result {\n+                TypeFlags::NEEDS_DROP_CACHED | TypeFlags::NEEDS_DROP\n+            } else {\n+                TypeFlags::NEEDS_DROP_CACHED\n+            });\n+        }\n \n         result\n     }"}, {"sha": "de5613dbfaa38b183c8d34d4584c233191501805", "filename": "src/librustc_borrowck/borrowck/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0adfd810f8aa16ce9e63f6feae182db0ba4833ef/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0adfd810f8aa16ce9e63f6feae182db0ba4833ef/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs?ref=0adfd810f8aa16ce9e63f6feae182db0ba4833ef", "patch": "@@ -322,7 +322,7 @@ fn on_all_drop_children_bits<'a, 'tcx, F>(\n         let ty = lvalue.ty(mir, tcx).to_ty(tcx);\n         debug!(\"on_all_drop_children_bits({:?}, {:?} : {:?})\", path, lvalue, ty);\n \n-        if tcx.type_needs_drop_given_env(ty, &ctxt.param_env) {\n+        if ty.needs_drop(tcx, &ctxt.param_env) {\n             each_child(child);\n         } else {\n             debug!(\"on_all_drop_children_bits - skipping\")"}, {"sha": "1c69f3cff172a4321a49062bfcffcf3397e6c0fa", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0adfd810f8aa16ce9e63f6feae182db0ba4833ef/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0adfd810f8aa16ce9e63f6feae182db0ba4833ef/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=0adfd810f8aa16ce9e63f6feae182db0ba4833ef", "patch": "@@ -1152,7 +1152,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnionsWithDropFields {\n             let param_env = &ty::ParameterEnvironment::for_item(ctx.tcx, item.id);\n             for field in vdata.fields() {\n                 let field_ty = ctx.tcx.item_type(ctx.tcx.hir.local_def_id(field.id));\n-                if ctx.tcx.type_needs_drop_given_env(field_ty, param_env) {\n+                if field_ty.needs_drop(ctx.tcx, param_env) {\n                     ctx.span_lint(UNIONS_WITH_DROP_FIELDS,\n                                   field.span,\n                                   \"union contains a field with possibly non-trivial drop code, \\"}, {"sha": "db9da2a280b94cc70af7e43645fef9e0e1b247bf", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0adfd810f8aa16ce9e63f6feae182db0ba4833ef/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0adfd810f8aa16ce9e63f6feae182db0ba4833ef/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=0adfd810f8aa16ce9e63f6feae182db0ba4833ef", "patch": "@@ -168,7 +168,7 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n                   type with inference types/regions\",\n                  ty);\n         });\n-        self.tcx.type_needs_drop_given_env(ty, &self.infcx.parameter_environment)\n+        ty.needs_drop(self.tcx.global_tcx(), &self.infcx.parameter_environment)\n     }\n \n     pub fn tcx(&self) -> TyCtxt<'a, 'gcx, 'tcx> {"}, {"sha": "892d67ac23725f2bd7015be805006a96bee95190", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0adfd810f8aa16ce9e63f6feae182db0ba4833ef/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0adfd810f8aa16ce9e63f6feae182db0ba4833ef/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=0adfd810f8aa16ce9e63f6feae182db0ba4833ef", "patch": "@@ -357,7 +357,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                     // a regular goto.\n                     let ty = location.ty(&callee_mir, tcx).subst(tcx, callsite.substs);\n                     let ty = ty.to_ty(tcx);\n-                    if tcx.type_needs_drop_given_env(ty, &param_env) {\n+                    if ty.needs_drop(tcx, &param_env) {\n                         cost += CALL_PENALTY;\n                         if let Some(unwind) = unwind {\n                             work_list.push(unwind);"}, {"sha": "526c1488ab480e96fe6873c985548f3cb7d8b610", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0adfd810f8aa16ce9e63f6feae182db0ba4833ef/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0adfd810f8aa16ce9e63f6feae182db0ba4833ef/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=0adfd810f8aa16ce9e63f6feae182db0ba4833ef", "patch": "@@ -83,7 +83,7 @@ impl<'a, 'tcx> Qualif {\n         if ty.is_freeze(tcx, param_env, DUMMY_SP) {\n             *self = *self - Qualif::MUTABLE_INTERIOR;\n         }\n-        if !tcx.type_needs_drop_given_env(ty, param_env) {\n+        if !ty.needs_drop(tcx, param_env) {\n             *self = *self - Qualif::NEEDS_DROP;\n         }\n     }"}, {"sha": "07025fcfdb944de518e3e1dff13abb71f1611a48", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0adfd810f8aa16ce9e63f6feae182db0ba4833ef/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0adfd810f8aa16ce9e63f6feae182db0ba4833ef/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=0adfd810f8aa16ce9e63f6feae182db0ba4833ef", "patch": "@@ -277,8 +277,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n \n         let mut fields = fields;\n         fields.retain(|&(ref lvalue, _)| {\n-            self.tcx().type_needs_drop_given_env(\n-                self.lvalue_ty(lvalue), self.elaborator.param_env())\n+            self.lvalue_ty(lvalue).needs_drop(self.tcx(), self.elaborator.param_env())\n         });\n \n         debug!(\"drop_ladder - fields needing drop: {:?}\", fields);"}, {"sha": "fdb67522133781f74b3c2430ab58bc3aec917006", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0adfd810f8aa16ce9e63f6feae182db0ba4833ef/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0adfd810f8aa16ce9e63f6feae182db0ba4833ef/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=0adfd810f8aa16ce9e63f6feae182db0ba4833ef", "patch": "@@ -89,7 +89,7 @@ impl<'a, 'gcx> CheckCrateVisitor<'a, 'gcx> {\n             self.promotable = false;\n         }\n \n-        if self.tcx.type_needs_drop_given_env(ty, &self.param_env) {\n+        if ty.needs_drop(self.tcx, &self.param_env) {\n             self.promotable = false;\n         }\n     }"}, {"sha": "1d1921bf7b96dd1ee62f1e146ad08cb0507d39a0", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0adfd810f8aa16ce9e63f6feae182db0ba4833ef/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0adfd810f8aa16ce9e63f6feae182db0ba4833ef/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=0adfd810f8aa16ce9e63f6feae182db0ba4833ef", "patch": "@@ -392,7 +392,7 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n     }\n \n     pub fn type_needs_drop(&self, ty: Ty<'tcx>) -> bool {\n-        self.tcx.type_needs_drop_given_env(ty, &self.empty_param_env)\n+        ty.needs_drop(self.tcx, &self.empty_param_env)\n     }\n \n     pub fn type_is_sized(&self, ty: Ty<'tcx>) -> bool {"}]}