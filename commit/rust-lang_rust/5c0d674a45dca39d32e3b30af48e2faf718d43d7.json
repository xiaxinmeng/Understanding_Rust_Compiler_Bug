{"sha": "5c0d674a45dca39d32e3b30af48e2faf718d43d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjMGQ2NzRhNDVkY2EzOWQzMmUzYjMwYWY0OGUyZmFmNzE4ZDQzZDc=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-01-13T20:02:16Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-01-15T02:14:16Z"}, "message": "convert ast::foreign_item to a struct", "tree": {"sha": "5305e7bc2cf508915e99b659eefe96921709f6a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5305e7bc2cf508915e99b659eefe96921709f6a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c0d674a45dca39d32e3b30af48e2faf718d43d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c0d674a45dca39d32e3b30af48e2faf718d43d7", "html_url": "https://github.com/rust-lang/rust/commit/5c0d674a45dca39d32e3b30af48e2faf718d43d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c0d674a45dca39d32e3b30af48e2faf718d43d7/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1f1a1204ad3a68a90490fcad69ab2c3e6be4086", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1f1a1204ad3a68a90490fcad69ab2c3e6be4086", "html_url": "https://github.com/rust-lang/rust/commit/e1f1a1204ad3a68a90490fcad69ab2c3e6be4086"}], "stats": {"total": 78, "additions": 42, "deletions": 36}, "files": [{"sha": "f59c42315debb9c1b119daa1ac6ce04c2f5fb6fd", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5c0d674a45dca39d32e3b30af48e2faf718d43d7/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0d674a45dca39d32e3b30af48e2faf718d43d7/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=5c0d674a45dca39d32e3b30af48e2faf718d43d7", "patch": "@@ -107,7 +107,8 @@ fn type_uses_for(ccx: @crate_ctxt, fn_id: def_id, n_tps: uint)\n       ast_map::node_variant(_, _, _) => {\n         for uint::range(0u, n_tps) |n| { cx.uses[n] |= use_repr;}\n       }\n-      ast_map::node_foreign_item(i@@{node: foreign_item_fn(*), _},\n+      ast_map::node_foreign_item(i@@foreign_item { node: foreign_item_fn(*),\n+                                                   _ },\n                                  abi, _) => {\n         if abi == foreign_abi_rust_intrinsic {\n             let flags = match cx.ccx.sess.str_of(i.ident) {"}, {"sha": "d782b54c80a7e08ea93a96ded54ce44b3bd0834a", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c0d674a45dca39d32e3b30af48e2faf718d43d7/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0d674a45dca39d32e3b30af48e2faf718d43d7/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=5c0d674a45dca39d32e3b30af48e2faf718d43d7", "patch": "@@ -72,7 +72,7 @@ fn get_fn_sig(srv: astsrv::Srv, fn_id: doc::AstId) -> Option<~str> {\n             ident: ident,\n             node: ast::item_fn(decl, _, tys, _), _\n           }, _) |\n-          ast_map::node_foreign_item(@{\n+          ast_map::node_foreign_item(@ast::foreign_item {\n             ident: ident,\n             node: ast::foreign_item_fn(decl, _, tys), _\n           }, _, _) => {"}, {"sha": "5d822b317729bc406ca701853f9ee631b902e8e9", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5c0d674a45dca39d32e3b30af48e2faf718d43d7/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0d674a45dca39d32e3b30af48e2faf718d43d7/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=5c0d674a45dca39d32e3b30af48e2faf718d43d7", "patch": "@@ -1574,13 +1574,14 @@ type struct_dtor_ = {id: node_id,\n \n #[auto_encode]\n #[auto_decode]\n-type foreign_item =\n-    {ident: ident,\n-     attrs: ~[attribute],\n-     node: foreign_item_,\n-     id: node_id,\n-     span: span,\n-     vis: visibility};\n+struct foreign_item {\n+    ident: ident,\n+    attrs: ~[attribute],\n+    node: foreign_item_,\n+    id: node_id,\n+    span: span,\n+    vis: visibility,\n+}\n \n #[auto_encode]\n #[auto_decode]"}, {"sha": "a5cb9dcfaa207b43a80436eff858c893244f745b", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5c0d674a45dca39d32e3b30af48e2faf718d43d7/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0d674a45dca39d32e3b30af48e2faf718d43d7/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=5c0d674a45dca39d32e3b30af48e2faf718d43d7", "patch": "@@ -178,25 +178,29 @@ fn noop_fold_foreign_item(&&ni: @foreign_item, fld: ast_fold)\n     let fold_arg = |x| fold_arg_(x, fld);\n     let fold_attribute = |x| fold_attribute_(x, fld);\n \n-    return @{ident: fld.fold_ident(ni.ident),\n-          attrs: vec::map(ni.attrs, |x| fold_attribute(*x)),\n-          node:\n-              match ni.node {\n+    @ast::foreign_item {\n+        ident: fld.fold_ident(ni.ident),\n+        attrs: vec::map(ni.attrs, |x| fold_attribute(*x)),\n+        node:\n+            match ni.node {\n                 foreign_item_fn(fdec, purity, typms) => {\n-                  foreign_item_fn(\n-                      {inputs: vec::map(fdec.inputs, |a| fold_arg(*a)),\n-                       output: fld.fold_ty(fdec.output),\n-                       cf: fdec.cf},\n-                      purity,\n-                      fold_ty_params(typms, fld))\n+                    foreign_item_fn(\n+                        {\n+                            inputs: fdec.inputs.map(|a| fold_arg(*a)),\n+                            output: fld.fold_ty(fdec.output),\n+                            cf: fdec.cf,\n+                        },\n+                        purity,\n+                        fold_ty_params(typms, fld))\n                 }\n                 foreign_item_const(t) => {\n-                  foreign_item_const(fld.fold_ty(t))\n+                    foreign_item_const(fld.fold_ty(t))\n                 }\n-              },\n-          id: fld.new_id(ni.id),\n-          span: fld.new_span(ni.span),\n-          vis: ni.vis};\n+            },\n+        id: fld.new_id(ni.id),\n+        span: fld.new_span(ni.span),\n+        vis: ni.vis,\n+    }\n }\n \n fn noop_fold_item(&&i: @item, fld: ast_fold) -> Option<@item> {"}, {"sha": "7d247afaa530ce6a30e4a11a1496936f7a3423be", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5c0d674a45dca39d32e3b30af48e2faf718d43d7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0d674a45dca39d32e3b30af48e2faf718d43d7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=5c0d674a45dca39d32e3b30af48e2faf718d43d7", "patch": "@@ -3123,12 +3123,12 @@ impl Parser {\n         let (decl, _) = self.parse_fn_decl(|p| p.parse_arg());\n         let mut hi = self.span.hi;\n         self.expect(token::SEMI);\n-        return @{ident: t.ident,\n-                 attrs: attrs,\n-                 node: foreign_item_fn(decl, purity, t.tps),\n-                 id: self.get_id(),\n-                 span: mk_sp(lo, hi),\n-                 vis: vis};\n+        @ast::foreign_item { ident: t.ident,\n+                             attrs: attrs,\n+                             node: foreign_item_fn(decl, purity, t.tps),\n+                             id: self.get_id(),\n+                             span: mk_sp(lo, hi),\n+                             vis: vis }\n     }\n \n     fn parse_item_foreign_const(vis: ast::visibility,\n@@ -3140,12 +3140,12 @@ impl Parser {\n         let ty = self.parse_ty(false);\n         let hi = self.span.hi;\n         self.expect(token::SEMI);\n-        return @{ident: ident,\n-                 attrs: attrs,\n-                 node: foreign_item_const(move ty),\n-                 id: self.get_id(),\n-                 span: mk_sp(lo, hi),\n-                 vis: vis};\n+        @ast::foreign_item { ident: ident,\n+                             attrs: attrs,\n+                             node: foreign_item_const(ty),\n+                             id: self.get_id(),\n+                             span: mk_sp(lo, hi),\n+                             vis: vis }\n     }\n \n     fn parse_fn_purity() -> purity {"}]}