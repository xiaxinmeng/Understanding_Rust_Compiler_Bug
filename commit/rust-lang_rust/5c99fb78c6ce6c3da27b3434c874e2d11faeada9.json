{"sha": "5c99fb78c6ce6c3da27b3434c874e2d11faeada9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjOTlmYjc4YzZjZTZjM2RhMjdiMzQzNGM4NzRlMmQxMWZhZWFkYTk=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-11-17T23:13:06Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-11-17T23:13:06Z"}, "message": "Rollup merge of #29892 - steveklabnik:doc_fromiterator, r=alexcrichton\n\nAnd modifying IntoIterator for consisntency with it.\n\nPart of #29360", "tree": {"sha": "87b910a358f1177a065722e33b049b4fb9e3cac0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87b910a358f1177a065722e33b049b4fb9e3cac0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c99fb78c6ce6c3da27b3434c874e2d11faeada9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c99fb78c6ce6c3da27b3434c874e2d11faeada9", "html_url": "https://github.com/rust-lang/rust/commit/5c99fb78c6ce6c3da27b3434c874e2d11faeada9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c99fb78c6ce6c3da27b3434c874e2d11faeada9/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e4f6c8f5f3911901da1fdc483a15276ecaea592", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e4f6c8f5f3911901da1fdc483a15276ecaea592", "html_url": "https://github.com/rust-lang/rust/commit/6e4f6c8f5f3911901da1fdc483a15276ecaea592"}, {"sha": "9d663a3e4a85be4c45194cd1c987dd77dee45ab7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d663a3e4a85be4c45194cd1c987dd77dee45ab7", "html_url": "https://github.com/rust-lang/rust/commit/9d663a3e4a85be4c45194cd1c987dd77dee45ab7"}], "stats": {"total": 148, "additions": 132, "deletions": 16}, "files": [{"sha": "020f7e37a4a1de4437506ab08135dc873f36a1b7", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 132, "deletions": 16, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/5c99fb78c6ce6c3da27b3434c874e2d11faeada9/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c99fb78c6ce6c3da27b3434c874e2d11faeada9/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=5c99fb78c6ce6c3da27b3434c874e2d11faeada9", "patch": "@@ -2375,32 +2375,118 @@ impl<'a, I: Iterator + ?Sized> Iterator for &'a mut I {\n }\n \n /// Conversion from an `Iterator`.\n+///\n+/// By implementing `FromIterator` for a type, you define how it will be\n+/// created from an iterator. This is common for types which describe a\n+/// collection of some kind.\n+///\n+/// `FromIterator`'s [`from_iter()`] is rarely called explicitly, and is instead\n+/// used through [`Iterator`]'s [`collect()`] method. See [`collect()`]'s\n+/// documentation for more examples.\n+///\n+/// [`from_iter()`]: #tymethod.from_iter\n+/// [`Iterator`]: trait.Iterator.html\n+/// [`collect()`]: trait.Iterator.html#method.collect\n+///\n+/// See also: [`IntoIterator`].\n+///\n+/// [`IntoIterator`]: trait.IntoIterator.html\n+///\n+/// # Examples\n+///\n+/// Basic usage:\n+///\n+/// ```\n+/// use std::iter::FromIterator;\n+///\n+/// let five_fives = std::iter::repeat(5).take(5);\n+///\n+/// let v = Vec::from_iter(five_fives);\n+///\n+/// assert_eq!(v, vec![5, 5, 5, 5, 5]);\n+/// ```\n+///\n+/// Using [`collect()`] to implicitly use `FromIterator`:\n+///\n+/// ```\n+/// let five_fives = std::iter::repeat(5).take(5);\n+///\n+/// let v: Vec<i32> = five_fives.collect();\n+///\n+/// assert_eq!(v, vec![5, 5, 5, 5, 5]);\n+/// ```\n+///\n+/// Implementing `FromIterator` for your type:\n+///\n+/// ```\n+/// use std::iter::FromIterator;\n+///\n+/// // A sample collection, that's just a wrapper over Vec<T>\n+/// #[derive(Debug)]\n+/// struct MyCollection(Vec<i32>);\n+///\n+/// // Let's give it some methods so we can create one and add things\n+/// // to it.\n+/// impl MyCollection {\n+///     fn new() -> MyCollection {\n+///         MyCollection(Vec::new())\n+///     }\n+///\n+///     fn add(&mut self, elem: i32) {\n+///         self.0.push(elem);\n+///     }\n+/// }\n+///\n+/// // and we'll implement FromIterator\n+/// impl FromIterator<i32> for MyCollection {\n+///     fn from_iter<I: IntoIterator<Item=i32>>(iterator: I) -> Self {\n+///         let mut c = MyCollection::new();\n+///\n+///         for i in iterator {\n+///             c.add(i);\n+///         }\n+///\n+///         c\n+///     }\n+/// }\n+///\n+/// // Now we can make a new iterator...\n+/// let iter = (0..5).into_iter();\n+///\n+/// // ... and make a MyCollection out of it\n+/// let c = MyCollection::from_iter(iter);\n+///\n+/// assert_eq!(c.0, vec![0, 1, 2, 3, 4]);\n+///\n+/// // collect works too!\n+///\n+/// let iter = (0..5).into_iter();\n+/// let c: MyCollection = iter.collect();\n+///\n+/// assert_eq!(c.0, vec![0, 1, 2, 3, 4]);\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented=\"a collection of type `{Self}` cannot be \\\n                           built from an iterator over elements of type `{A}`\"]\n pub trait FromIterator<A>: Sized {\n-    /// Builds a container with elements from something iterable.\n+    /// Creates a value from an iterator.\n+    ///\n+    /// See the [module-level documentation] for more.\n+    ///\n+    /// [module-level documentation]: trait.FromIterator.html\n     ///\n     /// # Examples\n     ///\n-    /// ```\n-    /// use std::collections::HashSet;\n-    /// use std::iter::FromIterator;\n+    /// Basic usage:\n     ///\n-    /// let colors_vec = vec![\"red\", \"red\", \"yellow\", \"blue\"];\n-    /// let colors_set = HashSet::<&str>::from_iter(colors_vec);\n-    /// assert_eq!(colors_set.len(), 3);\n     /// ```\n+    /// use std::iter::FromIterator;\n     ///\n-    /// `FromIterator` is more commonly used implicitly via the\n-    /// `Iterator::collect` method:\n+    /// let five_fives = std::iter::repeat(5).take(5);\n     ///\n-    /// ```\n-    /// use std::collections::HashSet;\n+    /// let v = Vec::from_iter(five_fives);\n     ///\n-    /// let colors_vec = vec![\"red\", \"red\", \"yellow\", \"blue\"];\n-    /// let colors_set = colors_vec.into_iter().collect::<HashSet<&str>>();\n-    /// assert_eq!(colors_set.len(), 3);\n+    /// assert_eq!(v, vec![5, 5, 5, 5, 5]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn from_iter<T: IntoIterator<Item=A>>(iterator: T) -> Self;\n@@ -2415,9 +2501,13 @@ pub trait FromIterator<A>: Sized {\n /// One benefit of implementing `IntoIterator` is that your type will [work\n /// with Rust's `for` loop syntax](index.html#for-loops-and-intoiterator).\n ///\n+/// See also: [`FromIterator`].\n+///\n+/// [`FromIterator`]: trait.FromIterator.html\n+///\n /// # Examples\n ///\n-/// Vectors implement `IntoIterator`:\n+/// Basic usage:\n ///\n /// ```\n /// let v = vec![1, 2, 3];\n@@ -2489,7 +2579,33 @@ pub trait IntoIterator {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type IntoIter: Iterator<Item=Self::Item>;\n \n-    /// Consumes `Self` and returns an iterator over it.\n+    /// Creates an iterator from a value.\n+    ///\n+    /// See the [module-level documentation] for more.\n+    ///\n+    /// [module-level documentation]: trait.IntoIterator.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// let v = vec![1, 2, 3];\n+    ///\n+    /// let mut iter = v.into_iter();\n+    ///\n+    /// let n = iter.next();\n+    /// assert_eq!(Some(1), n);\n+    ///\n+    /// let n = iter.next();\n+    /// assert_eq!(Some(2), n);\n+    ///\n+    /// let n = iter.next();\n+    /// assert_eq!(Some(3), n);\n+    ///\n+    /// let n = iter.next();\n+    /// assert_eq!(None, n);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn into_iter(self) -> Self::IntoIter;\n }"}]}