{"sha": "b4f393ee8a1517e2c35afa4d71cbcea5187e5857", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZjM5M2VlOGExNTE3ZTJjMzVhZmE0ZDcxY2JjZWE1MTg3ZTU4NTc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-21T08:04:02Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-21T17:26:43Z"}, "message": "rollup merge of #19967: apasel422/binary_heap\n\nJust a few simplifications and a missing `assert!`.", "tree": {"sha": "8fd83fcb0d0d74221b5f97ea798ad2d352e622df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fd83fcb0d0d74221b5f97ea798ad2d352e622df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4f393ee8a1517e2c35afa4d71cbcea5187e5857", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4f393ee8a1517e2c35afa4d71cbcea5187e5857", "html_url": "https://github.com/rust-lang/rust/commit/b4f393ee8a1517e2c35afa4d71cbcea5187e5857", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4f393ee8a1517e2c35afa4d71cbcea5187e5857/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c030a87b3028e3ca102ea56073867f5132a15f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c030a87b3028e3ca102ea56073867f5132a15f5", "html_url": "https://github.com/rust-lang/rust/commit/8c030a87b3028e3ca102ea56073867f5132a15f5"}, {"sha": "01aa4ca7d8da7e2dabc91aa3de4616109c93a9d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/01aa4ca7d8da7e2dabc91aa3de4616109c93a9d2", "html_url": "https://github.com/rust-lang/rust/commit/01aa4ca7d8da7e2dabc91aa3de4616109c93a9d2"}], "stats": {"total": 52, "additions": 28, "deletions": 24}, "files": [{"sha": "0840e8ec881cd0bde575913f6167d63e5b84cc46", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 28, "deletions": 24, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/b4f393ee8a1517e2c35afa4d71cbcea5187e5857/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f393ee8a1517e2c35afa4d71cbcea5187e5857/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=b4f393ee8a1517e2c35afa4d71cbcea5187e5857", "patch": "@@ -239,7 +239,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// }\n     /// ```\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n-    pub fn iter<'a>(&'a self) -> Items<'a, T> {\n+    pub fn iter(&self) -> Items<T> {\n         Items { iter: self.data.iter() }\n     }\n \n@@ -280,8 +280,8 @@ impl<T: Ord> BinaryHeap<T> {\n     /// assert_eq!(heap.top(), Some(&5i));\n     ///\n     /// ```\n-    pub fn top<'a>(&'a self) -> Option<&'a T> {\n-        if self.is_empty() { None } else { Some(&self.data[0]) }\n+    pub fn top(&self) -> Option<&T> {\n+        self.data.get(0)\n     }\n \n     /// Returns the number of elements the queue can hold without reallocating.\n@@ -392,9 +392,9 @@ impl<T: Ord> BinaryHeap<T> {\n     /// ```\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn push(&mut self, item: T) {\n+        let old_len = self.len();\n         self.data.push(item);\n-        let new_len = self.len() - 1;\n-        self.siftup(0, new_len);\n+        self.siftup(0, old_len);\n     }\n \n     /// Pushes an item onto a queue then pops the greatest item off the queue in\n@@ -415,10 +415,16 @@ impl<T: Ord> BinaryHeap<T> {\n     /// assert_eq!(heap.top(), Some(&3i));\n     /// ```\n     pub fn push_pop(&mut self, mut item: T) -> T {\n-        if !self.is_empty() && *self.top().unwrap() > item {\n-            swap(&mut item, &mut self.data[0]);\n-            self.siftdown(0);\n+        match self.data.get_mut(0) {\n+            None => return item,\n+            Some(top) => if *top > item {\n+                swap(&mut item, top);\n+            } else {\n+                return item;\n+            },\n         }\n+\n+        self.siftdown(0);\n         item\n     }\n \n@@ -465,7 +471,7 @@ impl<T: Ord> BinaryHeap<T> {\n     ///     println!(\"{}\", x);\n     /// }\n     /// ```\n-    pub fn into_vec(self) -> Vec<T> { let BinaryHeap{data: v} = self; v }\n+    pub fn into_vec(self) -> Vec<T> { self.data }\n \n     /// Consumes the `BinaryHeap` and returns a vector in sorted\n     /// (ascending) order.\n@@ -482,15 +488,14 @@ impl<T: Ord> BinaryHeap<T> {\n     /// let vec = heap.into_sorted_vec();\n     /// assert_eq!(vec, vec![1i, 2, 3, 4, 5, 6, 7]);\n     /// ```\n-    pub fn into_sorted_vec(self) -> Vec<T> {\n-        let mut q = self;\n-        let mut end = q.len();\n+    pub fn into_sorted_vec(mut self) -> Vec<T> {\n+        let mut end = self.len();\n         while end > 1 {\n             end -= 1;\n-            q.data.swap(0, end);\n-            q.siftdown_range(0, end)\n+            self.data.swap(0, end);\n+            self.siftdown_range(0, end)\n         }\n-        q.into_vec()\n+        self.into_vec()\n     }\n \n     // The implementations of siftup and siftdown use unsafe blocks in\n@@ -566,21 +571,21 @@ impl<T: Ord> BinaryHeap<T> {\n }\n \n /// `BinaryHeap` iterator.\n-pub struct Items <'a, T:'a> {\n+pub struct Items<'a, T: 'a> {\n     iter: slice::Items<'a, T>,\n }\n \n impl<'a, T> Iterator<&'a T> for Items<'a, T> {\n     #[inline]\n-    fn next(&mut self) -> Option<(&'a T)> { self.iter.next() }\n+    fn next(&mut self) -> Option<&'a T> { self.iter.next() }\n \n     #[inline]\n     fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n }\n \n impl<'a, T> DoubleEndedIterator<&'a T> for Items<'a, T> {\n     #[inline]\n-    fn next_back(&mut self) -> Option<(&'a T)> { self.iter.next_back() }\n+    fn next_back(&mut self) -> Option<&'a T> { self.iter.next_back() }\n }\n \n impl<'a, T> ExactSizeIterator<&'a T> for Items<'a, T> {}\n@@ -627,8 +632,7 @@ impl<'a, T: 'a> ExactSizeIterator<T> for Drain<'a, T> {}\n \n impl<T: Ord> FromIterator<T> for BinaryHeap<T> {\n     fn from_iter<Iter: Iterator<T>>(iter: Iter) -> BinaryHeap<T> {\n-        let vec: Vec<T> = iter.collect();\n-        BinaryHeap::from_vec(vec)\n+        BinaryHeap::from_vec(iter.collect())\n     }\n }\n \n@@ -822,20 +826,20 @@ mod tests {\n \n     #[test]\n     fn test_empty_pop() {\n-        let mut heap: BinaryHeap<int> = BinaryHeap::new();\n+        let mut heap = BinaryHeap::<int>::new();\n         assert!(heap.pop().is_none());\n     }\n \n     #[test]\n     fn test_empty_top() {\n-        let empty: BinaryHeap<int> = BinaryHeap::new();\n+        let empty = BinaryHeap::<int>::new();\n         assert!(empty.top().is_none());\n     }\n \n     #[test]\n     fn test_empty_replace() {\n-        let mut heap: BinaryHeap<int> = BinaryHeap::new();\n-        heap.replace(5).is_none();\n+        let mut heap = BinaryHeap::<int>::new();\n+        assert!(heap.replace(5).is_none());\n     }\n \n     #[test]"}]}