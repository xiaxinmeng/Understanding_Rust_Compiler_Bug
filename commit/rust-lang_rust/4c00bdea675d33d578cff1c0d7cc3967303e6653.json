{"sha": "4c00bdea675d33d578cff1c0d7cc3967303e6653", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMDBiZGVhNjc1ZDMzZDU3OGNmZjFjMGQ3Y2MzOTY3MzAzZTY2NTM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-10-20T09:46:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-20T09:46:43Z"}, "message": "Merge #6266\n\n6266: Generate diagnostics docs r=matklad a=popzxc\n\nResolves #6215\r\n\n\nCo-authored-by: Igor Aleksanov <popzxc@yandex.ru>", "tree": {"sha": "bc1cd5b714e9566e2c87f33582d8c587cf46f6c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc1cd5b714e9566e2c87f33582d8c587cf46f6c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c00bdea675d33d578cff1c0d7cc3967303e6653", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfjrIDCRBK7hj4Ov3rIwAAdHIIAFgvTgfpWZQ5aAFXPSSUsDFS\nVsWtmm3EgllQlRjcLlVgktxB+D1eLt1hKpl+/K549qSsaDf6l7MLyBlvvuxVa/AL\n9523cTKHOzcBRTYr3mOvNKrKfksJeDmiIWQkAp2FTim7/Uvn1gbyChgJ6rO9UZ8b\nRttd+j1Hs6LCWys0j1oi1uHxQeONnnH280dJPPIT7VZE50SSvuxpiQ/PXqj8S0I2\n3xwiLw9hHjZG5nc0i0gouFv62Zdfn5jV8522lMltAjmne9tdDp30c2WUdYqek/Zg\nomKvexuc1TmMBsyz0u84qKOwAnbcXZGdXQjqx8qmmAUVyNlWPusJx+XG3CrN/Pw=\n=N2Vv\n-----END PGP SIGNATURE-----\n", "payload": "tree bc1cd5b714e9566e2c87f33582d8c587cf46f6c0\nparent 378dd90bab65fa6df078444c3932118105a460b8\nparent b8a74e03708819c04862005ad0a91757dd63d654\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1603187203 +0000\ncommitter GitHub <noreply@github.com> 1603187203 +0000\n\nMerge #6266\n\n6266: Generate diagnostics docs r=matklad a=popzxc\n\nResolves #6215\r\n\n\nCo-authored-by: Igor Aleksanov <popzxc@yandex.ru>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c00bdea675d33d578cff1c0d7cc3967303e6653", "html_url": "https://github.com/rust-lang/rust/commit/4c00bdea675d33d578cff1c0d7cc3967303e6653", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c00bdea675d33d578cff1c0d7cc3967303e6653/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "378dd90bab65fa6df078444c3932118105a460b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/378dd90bab65fa6df078444c3932118105a460b8", "html_url": "https://github.com/rust-lang/rust/commit/378dd90bab65fa6df078444c3932118105a460b8"}, {"sha": "b8a74e03708819c04862005ad0a91757dd63d654", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8a74e03708819c04862005ad0a91757dd63d654", "html_url": "https://github.com/rust-lang/rust/commit/b8a74e03708819c04862005ad0a91757dd63d654"}], "stats": {"total": 162, "additions": 156, "deletions": 6}, "files": [{"sha": "b205bf3fb680a2b41ed22a017fe2b7f96fddd355", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c00bdea675d33d578cff1c0d7cc3967303e6653/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/4c00bdea675d33d578cff1c0d7cc3967303e6653/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=4c00bdea675d33d578cff1c0d7cc3967303e6653", "patch": "@@ -9,3 +9,4 @@ crates/*/target\n .vscode/settings.json\n generated_assists.adoc\n generated_features.adoc\n+generated_diagnostic.adoc"}, {"sha": "fcfbbbad38498d3bf3ff766462e89a6686a48277", "filename": "crates/hir_def/src/diagnostics.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4c00bdea675d33d578cff1c0d7cc3967303e6653/crates%2Fhir_def%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c00bdea675d33d578cff1c0d7cc3967303e6653/crates%2Fhir_def%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdiagnostics.rs?ref=4c00bdea675d33d578cff1c0d7cc3967303e6653", "patch": "@@ -7,6 +7,9 @@ use syntax::{ast, AstPtr, SyntaxNodePtr};\n \n use hir_expand::{HirFileId, InFile};\n \n+// Diagnostic: unresolved-module\n+//\n+// This diagnostic is triggered if rust-analyzer is unable to discover referred module.\n #[derive(Debug)]\n pub struct UnresolvedModule {\n     pub file: HirFileId,\n@@ -29,6 +32,9 @@ impl Diagnostic for UnresolvedModule {\n     }\n }\n \n+// Diagnostic: unresolved-extern-crate\n+//\n+// This diagnostic is triggered if rust-analyzer is unable to discover referred extern crate.\n #[derive(Debug)]\n pub struct UnresolvedExternCrate {\n     pub file: HirFileId,\n@@ -50,6 +56,9 @@ impl Diagnostic for UnresolvedExternCrate {\n     }\n }\n \n+// Diagnostic: unresolved-import\n+//\n+// This diagnostic is triggered if rust-analyzer is unable to discover imported module.\n #[derive(Debug)]\n pub struct UnresolvedImport {\n     pub file: HirFileId,"}, {"sha": "b58fe0ed7721f039d091d26620f841c2db1a8065", "filename": "crates/hir_ty/src/diagnostics.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/4c00bdea675d33d578cff1c0d7cc3967303e6653/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c00bdea675d33d578cff1c0d7cc3967303e6653/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs?ref=4c00bdea675d33d578cff1c0d7cc3967303e6653", "patch": "@@ -36,6 +36,9 @@ pub fn validate_body(db: &dyn HirDatabase, owner: DefWithBodyId, sink: &mut Diag\n     validator.validate_body(db);\n }\n \n+// Diagnostic: no-such-field\n+//\n+// This diagnostic is triggered if created structure does not have field provided in record.\n #[derive(Debug)]\n pub struct NoSuchField {\n     pub file: HirFileId,\n@@ -60,6 +63,17 @@ impl Diagnostic for NoSuchField {\n     }\n }\n \n+// Diagnostic: missing-structure-fields\n+//\n+// This diagnostic is triggered if record lacks some fields that exist in the corresponding structure.\n+//\n+// Example:\n+//\n+// ```rust\n+// struct A { a: u8, b: u8 }\n+//\n+// let a = A { a: 10 };\n+// ```\n #[derive(Debug)]\n pub struct MissingFields {\n     pub file: HirFileId,\n@@ -96,6 +110,21 @@ impl Diagnostic for MissingFields {\n     }\n }\n \n+// Diagnostic: missing-pat-fields\n+//\n+// This diagnostic is triggered if pattern lacks some fields that exist in the corresponding structure.\n+//\n+// Example:\n+//\n+// ```rust\n+// struct A { a: u8, b: u8 }\n+//\n+// let a = A { a: 10, b: 20 };\n+//\n+// if let A { a } = a {\n+//     // ...\n+// }\n+// ```\n #[derive(Debug)]\n pub struct MissingPatFields {\n     pub file: HirFileId,\n@@ -130,6 +159,9 @@ impl Diagnostic for MissingPatFields {\n     }\n }\n \n+// Diagnostic: missing-match-arm\n+//\n+// This diagnostic is triggered if `match` block is missing one or more match arms.\n #[derive(Debug)]\n pub struct MissingMatchArms {\n     pub file: HirFileId,\n@@ -152,6 +184,17 @@ impl Diagnostic for MissingMatchArms {\n     }\n }\n \n+// Diagnostic: missing-ok-in-tail-expr\n+//\n+// This diagnostic is triggered if block that should return `Result` returns a value not wrapped in `Ok`.\n+//\n+// Example:\n+//\n+// ```rust\n+// fn foo() -> Result<u8, ()> {\n+//     10\n+// }\n+// ```\n #[derive(Debug)]\n pub struct MissingOkInTailExpr {\n     pub file: HirFileId,\n@@ -173,6 +216,9 @@ impl Diagnostic for MissingOkInTailExpr {\n     }\n }\n \n+// Diagnostic: break-outside-of-loop\n+//\n+// This diagnostic is triggered if `break` keyword is used outside of a loop.\n #[derive(Debug)]\n pub struct BreakOutsideOfLoop {\n     pub file: HirFileId,\n@@ -194,6 +240,9 @@ impl Diagnostic for BreakOutsideOfLoop {\n     }\n }\n \n+// Diagnostic: missing-unsafe\n+//\n+// This diagnostic is triggered if operation marked as `unsafe` is used outside of `unsafe` function or block.\n #[derive(Debug)]\n pub struct MissingUnsafe {\n     pub file: HirFileId,\n@@ -215,6 +264,9 @@ impl Diagnostic for MissingUnsafe {\n     }\n }\n \n+// Diagnostic: mismatched-arg-count\n+//\n+// This diagnostic is triggered if function is invoked with an incorrect amount of arguments.\n #[derive(Debug)]\n pub struct MismatchedArgCount {\n     pub file: HirFileId,\n@@ -264,6 +316,9 @@ impl fmt::Display for CaseType {\n     }\n }\n \n+// Diagnostic: incorrect-ident-case\n+//\n+// This diagnostic is triggered if item name doesn't follow https://doc.rust-lang.org/1.0.0/style/style/naming/README.html[Rust naming convention].\n #[derive(Debug)]\n pub struct IncorrectCase {\n     pub file: HirFileId,"}, {"sha": "afa70347191868497236faf451e21cba1b15d773", "filename": "xtask/src/codegen.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4c00bdea675d33d578cff1c0d7cc3967303e6653/xtask%2Fsrc%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c00bdea675d33d578cff1c0d7cc3967303e6653/xtask%2Fsrc%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen.rs?ref=4c00bdea675d33d578cff1c0d7cc3967303e6653", "patch": "@@ -10,6 +10,7 @@ mod gen_parser_tests;\n mod gen_assists_docs;\n mod gen_feature_docs;\n mod gen_features;\n+mod gen_diagnostic_docs;\n \n use std::{\n     fmt, mem,\n@@ -21,6 +22,7 @@ use crate::{ensure_rustfmt, project_root, Result};\n \n pub use self::{\n     gen_assists_docs::{generate_assists_docs, generate_assists_tests},\n+    gen_diagnostic_docs::generate_diagnostic_docs,\n     gen_feature_docs::generate_feature_docs,\n     gen_features::generate_features,\n     gen_parser_tests::generate_parser_tests,\n@@ -47,6 +49,7 @@ impl CodegenCmd {\n         generate_assists_tests(Mode::Overwrite)?;\n         generate_assists_docs(Mode::Overwrite)?;\n         generate_feature_docs(Mode::Overwrite)?;\n+        generate_diagnostic_docs(Mode::Overwrite)?;\n         Ok(())\n     }\n }"}, {"sha": "d7c85ebe9f8d565f9628c7e424e706c4ec38d4b2", "filename": "xtask/src/codegen/gen_assists_docs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c00bdea675d33d578cff1c0d7cc3967303e6653/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c00bdea675d33d578cff1c0d7cc3967303e6653/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs?ref=4c00bdea675d33d578cff1c0d7cc3967303e6653", "patch": "@@ -1,6 +1,6 @@\n //! Generates `assists.md` documentation.\n \n-use std::{fmt, fs, path::Path};\n+use std::{fmt, path::Path};\n \n use crate::{\n     codegen::{self, extract_comment_blocks_with_empty_lines, reformat, Location, Mode, PREAMBLE},\n@@ -39,7 +39,7 @@ impl Assist {\n         return Ok(res);\n \n         fn collect_file(acc: &mut Vec<Assist>, path: &Path) -> Result<()> {\n-            let text = fs::read_to_string(path)?;\n+            let text = xshell::read_file(path)?;\n             let comment_blocks = extract_comment_blocks_with_empty_lines(\"Assist\", &text);\n \n             for block in comment_blocks {"}, {"sha": "00aaea5b7755b324a156bff3ddc0dc6591aa2051", "filename": "xtask/src/codegen/gen_diagnostic_docs.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/4c00bdea675d33d578cff1c0d7cc3967303e6653/xtask%2Fsrc%2Fcodegen%2Fgen_diagnostic_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c00bdea675d33d578cff1c0d7cc3967303e6653/xtask%2Fsrc%2Fcodegen%2Fgen_diagnostic_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_diagnostic_docs.rs?ref=4c00bdea675d33d578cff1c0d7cc3967303e6653", "patch": "@@ -0,0 +1,74 @@\n+//! Generates `assists.md` documentation.\n+\n+use std::{fmt, path::PathBuf};\n+\n+use crate::{\n+    codegen::{self, extract_comment_blocks_with_empty_lines, Location, Mode, PREAMBLE},\n+    project_root, rust_files, Result,\n+};\n+\n+pub fn generate_diagnostic_docs(mode: Mode) -> Result<()> {\n+    let diagnostics = Diagnostic::collect()?;\n+    let contents =\n+        diagnostics.into_iter().map(|it| it.to_string()).collect::<Vec<_>>().join(\"\\n\\n\");\n+    let contents = format!(\"//{}\\n{}\\n\", PREAMBLE, contents.trim());\n+    let dst = project_root().join(\"docs/user/generated_diagnostic.adoc\");\n+    codegen::update(&dst, &contents, mode)?;\n+    Ok(())\n+}\n+\n+#[derive(Debug)]\n+struct Diagnostic {\n+    id: String,\n+    location: Location,\n+    doc: String,\n+}\n+\n+impl Diagnostic {\n+    fn collect() -> Result<Vec<Diagnostic>> {\n+        let mut res = Vec::new();\n+        for path in rust_files(&project_root()) {\n+            collect_file(&mut res, path)?;\n+        }\n+        res.sort_by(|lhs, rhs| lhs.id.cmp(&rhs.id));\n+        return Ok(res);\n+\n+        fn collect_file(acc: &mut Vec<Diagnostic>, path: PathBuf) -> Result<()> {\n+            let text = xshell::read_file(&path)?;\n+            let comment_blocks = extract_comment_blocks_with_empty_lines(\"Diagnostic\", &text);\n+\n+            for block in comment_blocks {\n+                let id = block.id;\n+                if let Err(msg) = is_valid_diagnostic_name(&id) {\n+                    panic!(\"invalid diagnostic name: {:?}:\\n  {}\", id, msg)\n+                }\n+                let doc = block.contents.join(\"\\n\");\n+                let location = Location::new(path.clone(), block.line);\n+                acc.push(Diagnostic { id, location, doc })\n+            }\n+\n+            Ok(())\n+        }\n+    }\n+}\n+\n+fn is_valid_diagnostic_name(diagnostic: &str) -> Result<(), String> {\n+    let diagnostic = diagnostic.trim();\n+    if diagnostic.find(char::is_whitespace).is_some() {\n+        return Err(\"Diagnostic names can't contain whitespace symbols\".into());\n+    }\n+    if diagnostic.chars().any(|c| c.is_ascii_uppercase()) {\n+        return Err(\"Diagnostic names can't contain uppercase symbols\".into());\n+    }\n+    if diagnostic.chars().any(|c| !c.is_ascii()) {\n+        return Err(\"Diagnostic can't contain non-ASCII symbols\".into());\n+    }\n+\n+    Ok(())\n+}\n+\n+impl fmt::Display for Diagnostic {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        writeln!(f, \"=== {}\\n**Source:** {}\\n{}\", self.id, self.location, self.doc)\n+    }\n+}"}, {"sha": "065dd33f15486714268397658656d104d940e327", "filename": "xtask/src/codegen/gen_feature_docs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c00bdea675d33d578cff1c0d7cc3967303e6653/xtask%2Fsrc%2Fcodegen%2Fgen_feature_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c00bdea675d33d578cff1c0d7cc3967303e6653/xtask%2Fsrc%2Fcodegen%2Fgen_feature_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_feature_docs.rs?ref=4c00bdea675d33d578cff1c0d7cc3967303e6653", "patch": "@@ -1,6 +1,6 @@\n //! Generates `assists.md` documentation.\n \n-use std::{fmt, fs, path::PathBuf};\n+use std::{fmt, path::PathBuf};\n \n use crate::{\n     codegen::{self, extract_comment_blocks_with_empty_lines, Location, Mode, PREAMBLE},\n@@ -33,7 +33,7 @@ impl Feature {\n         return Ok(res);\n \n         fn collect_file(acc: &mut Vec<Feature>, path: PathBuf) -> Result<()> {\n-            let text = fs::read_to_string(&path)?;\n+            let text = xshell::read_file(&path)?;\n             let comment_blocks = extract_comment_blocks_with_empty_lines(\"Feature\", &text);\n \n             for block in comment_blocks {"}, {"sha": "19ae949d4ab8e2ba77b614ad0aef4240c5854c50", "filename": "xtask/src/codegen/gen_parser_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c00bdea675d33d578cff1c0d7cc3967303e6653/xtask%2Fsrc%2Fcodegen%2Fgen_parser_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c00bdea675d33d578cff1c0d7cc3967303e6653/xtask%2Fsrc%2Fcodegen%2Fgen_parser_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_parser_tests.rs?ref=4c00bdea675d33d578cff1c0d7cc3967303e6653", "patch": "@@ -124,7 +124,7 @@ fn existing_tests(dir: &Path, ok: bool) -> Result<HashMap<String, (PathBuf, Test\n             let file_name = path.file_name().unwrap().to_str().unwrap();\n             file_name[5..file_name.len() - 3].to_string()\n         };\n-        let text = fs::read_to_string(&path)?;\n+        let text = xshell::read_file(&path)?;\n         let test = Test { name: name.clone(), text, ok };\n         if let Some(old) = res.insert(name, (path, test)) {\n             println!(\"Duplicate test: {:?}\", old);"}, {"sha": "3cf0d849f4ffda55782640ecc509c97d2141ce69", "filename": "xtask/src/release.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4c00bdea675d33d578cff1c0d7cc3967303e6653/xtask%2Fsrc%2Frelease.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c00bdea675d33d578cff1c0d7cc3967303e6653/xtask%2Fsrc%2Frelease.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Frelease.rs?ref=4c00bdea675d33d578cff1c0d7cc3967303e6653", "patch": "@@ -52,7 +52,14 @@ https://github.com/sponsors/rust-analyzer[GitHub Sponsors].\n         let path = changelog_dir.join(format!(\"{}-changelog-{}.adoc\", today, changelog_n));\n         write_file(&path, &contents)?;\n \n-        for &adoc in [\"manual.adoc\", \"generated_features.adoc\", \"generated_assists.adoc\"].iter() {\n+        for &adoc in [\n+            \"manual.adoc\",\n+            \"generated_features.adoc\",\n+            \"generated_assists.adoc\",\n+            \"generated_diagnostic.adoc\",\n+        ]\n+        .iter()\n+        {\n             let src = project_root().join(\"./docs/user/\").join(adoc);\n             let dst = website_root.join(adoc);\n             cp(src, dst)?;"}, {"sha": "faaef2fd4590fbbe54a4d892b7fd7a724b1a3a02", "filename": "xtask/tests/tidy.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c00bdea675d33d578cff1c0d7cc3967303e6653/xtask%2Ftests%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c00bdea675d33d578cff1c0d7cc3967303e6653/xtask%2Ftests%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Ftests%2Ftidy.rs?ref=4c00bdea675d33d578cff1c0d7cc3967303e6653", "patch": "@@ -42,6 +42,7 @@ fn smoke_test_docs_generation() {\n     // We don't commit docs to the repo, so we can just overwrite in tests.\n     codegen::generate_assists_docs(Mode::Overwrite).unwrap();\n     codegen::generate_feature_docs(Mode::Overwrite).unwrap();\n+    codegen::generate_diagnostic_docs(Mode::Overwrite).unwrap();\n }\n \n #[test]"}]}