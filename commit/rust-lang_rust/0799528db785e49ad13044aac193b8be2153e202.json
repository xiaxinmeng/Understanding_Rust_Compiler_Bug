{"sha": "0799528db785e49ad13044aac193b8be2153e202", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3OTk1MjhkYjc4NWU0OWFkMTMwNDRhYWMxOTNiOGJlMjE1M2UyMDI=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-07-13T13:28:43Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-08-05T21:08:29Z"}, "message": "* Rename LightSpan::empty into LightSpan::dummy\n* Add Classifier::new_light_span to wrap LightSpan::new_in_file constructor", "tree": {"sha": "0debe8a278d1e22e2bf7c94b45c4bd72f14cfd08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0debe8a278d1e22e2bf7c94b45c4bd72f14cfd08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0799528db785e49ad13044aac193b8be2153e202", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0799528db785e49ad13044aac193b8be2153e202", "html_url": "https://github.com/rust-lang/rust/commit/0799528db785e49ad13044aac193b8be2153e202", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0799528db785e49ad13044aac193b8be2153e202/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd69fa8670aaf67cde504acd097a2b4ddc74f88a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd69fa8670aaf67cde504acd097a2b4ddc74f88a", "html_url": "https://github.com/rust-lang/rust/commit/fd69fa8670aaf67cde504acd097a2b4ddc74f88a"}], "stats": {"total": 42, "additions": 19, "deletions": 23}, "files": [{"sha": "4555d98d2bfcd2ced01abb431919e0b07bc93940", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/0799528db785e49ad13044aac193b8be2153e202/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0799528db785e49ad13044aac193b8be2153e202/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=0799528db785e49ad13044aac193b8be2153e202", "patch": "@@ -235,6 +235,12 @@ impl<'a> Classifier<'a> {\n         }\n     }\n \n+    /// Convenient wrapper around [`LightSpan::new_in_file`] to prevent passing the `file_span_lo`\n+    /// argument every time.\n+    fn new_light_span(&self, lo: u32, hi: u32) -> LightSpan {\n+        LightSpan::new_in_file(self.file_span_lo, lo, hi)\n+    }\n+\n     /// Concatenate colons and idents as one when possible.\n     fn get_full_ident_path(&mut self) -> Vec<(TokenKind, usize, usize)> {\n         let start = self.byte_pos as usize;\n@@ -313,14 +319,12 @@ impl<'a> Classifier<'a> {\n                 .unwrap_or(false)\n             {\n                 let tokens = self.get_full_ident_path();\n-                // We need this variable because `tokens` is consumed in the loop.\n-                let skip = !tokens.is_empty();\n-                for (token, start, end) in tokens {\n-                    let text = &self.src[start..end];\n-                    self.advance(token, text, sink, start as u32);\n+                for (token, start, end) in &tokens {\n+                    let text = &self.src[*start..*end];\n+                    self.advance(*token, text, sink, *start as u32);\n                     self.byte_pos += text.len() as u32;\n                 }\n-                if skip {\n+                if !tokens.is_empty() {\n                     continue;\n                 }\n             }\n@@ -483,24 +487,16 @@ impl<'a> Classifier<'a> {\n                         self.in_macro_nonterminal = false;\n                         Class::MacroNonTerminal\n                     }\n-                    \"self\" | \"Self\" => Class::Self_(LightSpan::new_in_file(\n-                        self.file_span_lo,\n-                        before,\n-                        before + text.len() as u32,\n-                    )),\n-                    _ => Class::Ident(LightSpan::new_in_file(\n-                        self.file_span_lo,\n-                        before,\n-                        before + text.len() as u32,\n-                    )),\n+                    \"self\" | \"Self\" => {\n+                        Class::Self_(self.new_light_span(before, before + text.len() as u32))\n+                    }\n+                    _ => Class::Ident(self.new_light_span(before, before + text.len() as u32)),\n                 },\n                 Some(c) => c,\n             },\n-            TokenKind::RawIdent | TokenKind::UnknownPrefix => Class::Ident(LightSpan::new_in_file(\n-                self.file_span_lo,\n-                before,\n-                before + text.len() as u32,\n-            )),\n+            TokenKind::RawIdent | TokenKind::UnknownPrefix => {\n+                Class::Ident(self.new_light_span(before, before + text.len() as u32))\n+            }\n             TokenKind::Lifetime { .. } => Class::Lifetime,\n         };\n         // Anything that didn't return above is the simple case where we the\n@@ -564,7 +560,7 @@ fn string<T: Display>(\n                 \"self\" | \"Self\" => write!(\n                     &mut path,\n                     \"<span class=\\\"{}\\\">{}</span>\",\n-                    Class::Self_(LightSpan::empty()).as_html(),\n+                    Class::Self_(LightSpan::dummy()).as_html(),\n                     t\n                 ),\n                 \"crate\" | \"super\" => {"}, {"sha": "390ac88faf08259ae8031169ee37c3ba82e1ca12", "filename": "src/librustdoc/html/render/span_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0799528db785e49ad13044aac193b8be2153e202/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0799528db785e49ad13044aac193b8be2153e202/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs?ref=0799528db785e49ad13044aac193b8be2153e202", "patch": "@@ -51,7 +51,7 @@ impl LightSpan {\n         Self { lo: lo + file_span_lo, hi: hi + file_span_lo }\n     }\n \n-    crate fn empty() -> Self {\n+    crate fn dummy() -> Self {\n         Self { lo: 0, hi: 0 }\n     }\n "}]}