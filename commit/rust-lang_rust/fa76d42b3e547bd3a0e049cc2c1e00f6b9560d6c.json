{"sha": "fa76d42b3e547bd3a0e049cc2c1e00f6b9560d6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNzZkNDJiM2U1NDdiZDNhMGUwNDljYzJjMWUwMGY2Yjk1NjBkNmM=", "commit": {"author": {"name": "oliver-giersch", "email": "oliver.giersch@googlemail.com", "date": "2018-10-13T15:39:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-13T15:39:37Z"}, "message": "Merge pull request #1 from rust-lang/master\n\nsync fork with upstream (master)", "tree": {"sha": "40d9eb773863de13bd2f7bfcad5e88eb19bf1f96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40d9eb773863de13bd2f7bfcad5e88eb19bf1f96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa76d42b3e547bd3a0e049cc2c1e00f6b9560d6c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbwhG5CRBK7hj4Ov3rIwAAdHIIAAFaLtVpratGtYW5sHniqZHN\n1T587IuA6CUSdJk29f+edO2cFRYHnpF5LqvAzL1F7AdK9pSLEMkNES/BQo+q0Cvh\n+N2POxyOQyRfvlidnYsU5z75H1yWfS8kWjAnNwmzW2dGBEM0jn5va8yhni7pgAJh\nvDtsN+8rsoZH45Gg1Mlu6CSkokeQ4PDIM0wjJ5JqoZ4BXc1Rqvf8imMvR1kGVz0F\nkEuB+pG2TK6wVC06qMh+JNR66lTZIqCp+tAyS/6OE7fT6Vh+6WTFlCK3+mjTYw3L\nFyJYyMY8HUzV2gi+9EM7lcgPdFgWGkKEWRN7cbzmpBn9mPoVfoSaXyHVujD3v2U=\n=1US3\n-----END PGP SIGNATURE-----\n", "payload": "tree 40d9eb773863de13bd2f7bfcad5e88eb19bf1f96\nparent 2d81989974a134025be733115574bee8084095b4\nparent 24faa975895b548a2868491b1268076cc599151d\nauthor oliver-giersch <oliver.giersch@googlemail.com> 1539445177 +0200\ncommitter GitHub <noreply@github.com> 1539445177 +0200\n\nMerge pull request #1 from rust-lang/master\n\nsync fork with upstream (master)"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa76d42b3e547bd3a0e049cc2c1e00f6b9560d6c", "html_url": "https://github.com/rust-lang/rust/commit/fa76d42b3e547bd3a0e049cc2c1e00f6b9560d6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa76d42b3e547bd3a0e049cc2c1e00f6b9560d6c/comments", "author": {"login": "oliver-giersch", "id": 19815381, "node_id": "MDQ6VXNlcjE5ODE1Mzgx", "avatar_url": "https://avatars.githubusercontent.com/u/19815381?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oliver-giersch", "html_url": "https://github.com/oliver-giersch", "followers_url": "https://api.github.com/users/oliver-giersch/followers", "following_url": "https://api.github.com/users/oliver-giersch/following{/other_user}", "gists_url": "https://api.github.com/users/oliver-giersch/gists{/gist_id}", "starred_url": "https://api.github.com/users/oliver-giersch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oliver-giersch/subscriptions", "organizations_url": "https://api.github.com/users/oliver-giersch/orgs", "repos_url": "https://api.github.com/users/oliver-giersch/repos", "events_url": "https://api.github.com/users/oliver-giersch/events{/privacy}", "received_events_url": "https://api.github.com/users/oliver-giersch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d81989974a134025be733115574bee8084095b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d81989974a134025be733115574bee8084095b4", "html_url": "https://github.com/rust-lang/rust/commit/2d81989974a134025be733115574bee8084095b4"}, {"sha": "24faa975895b548a2868491b1268076cc599151d", "url": "https://api.github.com/repos/rust-lang/rust/commits/24faa975895b548a2868491b1268076cc599151d", "html_url": "https://github.com/rust-lang/rust/commit/24faa975895b548a2868491b1268076cc599151d"}], "stats": {"total": 457, "additions": 295, "deletions": 162}, "files": [{"sha": "1d21a5cf79d107b13e1e417016d88ffcddd84beb", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fa76d42b3e547bd3a0e049cc2c1e00f6b9560d6c/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa76d42b3e547bd3a0e049cc2c1e00f6b9560d6c/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=fa76d42b3e547bd3a0e049cc2c1e00f6b9560d6c", "patch": "@@ -637,8 +637,8 @@ Erroneous code example:\n ```compile_fail,E0152\n #![feature(lang_items)]\n \n-#[lang = \"panic_impl\"]\n-struct Foo; // error: duplicate lang item found: `panic_impl`\n+#[lang = \"arc\"]\n+struct Foo; // error: duplicate lang item found: `arc`\n ```\n \n Lang items are already implemented in the standard library. Unless you are\n@@ -2116,6 +2116,20 @@ struct Foo;\n ```\n \"##,\n \n+E0718: r##\"\n+This error indicates that a `#[lang = \"..\"]` attribute was placed\n+on the wrong type of item.\n+\n+Examples of erroneous code:\n+\n+```compile_fail,E0718\n+#![feature(lang_items)]\n+\n+#[lang = \"arc\"]\n+static X: u32 = 42;\n+```\n+\"##,\n+\n }\n \n "}, {"sha": "020012d756a1c901c401c1f2239f5221868e0d2a", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 57, "deletions": 17, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/fa76d42b3e547bd3a0e049cc2c1e00f6b9560d6c/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa76d42b3e547bd3a0e049cc2c1e00f6b9560d6c/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=fa76d42b3e547bd3a0e049cc2c1e00f6b9560d6c", "patch": "@@ -14,40 +14,80 @@\n //! conflicts between multiple such attributes attached to the same\n //! item.\n \n-use syntax_pos::Span;\n-use ty::TyCtxt;\n-\n use hir;\n use hir::intravisit::{self, Visitor, NestedVisitorMap};\n+use ty::TyCtxt;\n+use std::fmt::{self, Display};\n+use syntax_pos::Span;\n \n #[derive(Copy, Clone, PartialEq)]\n-enum Target {\n+pub(crate) enum Target {\n+    ExternCrate,\n+    Use,\n+    Static,\n+    Const,\n     Fn,\n+    Closure,\n+    Mod,\n+    ForeignMod,\n+    GlobalAsm,\n+    Ty,\n+    Existential,\n+    Enum,\n     Struct,\n     Union,\n-    Enum,\n-    Const,\n-    ForeignMod,\n+    Trait,\n+    TraitAlias,\n+    Impl,\n     Expression,\n     Statement,\n-    Closure,\n-    Static,\n-    Trait,\n-    Other,\n+}\n+\n+impl Display for Target {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}\", match *self {\n+            Target::ExternCrate => \"extern crate\",\n+            Target::Use => \"use\",\n+            Target::Static => \"static item\",\n+            Target::Const => \"constant item\",\n+            Target::Fn => \"function\",\n+            Target::Closure => \"closure\",\n+            Target::Mod => \"module\",\n+            Target::ForeignMod => \"foreign module\",\n+            Target::GlobalAsm => \"global asm\",\n+            Target::Ty => \"type alias\",\n+            Target::Existential => \"existential type\",\n+            Target::Enum => \"enum\",\n+            Target::Struct => \"struct\",\n+            Target::Union => \"union\",\n+            Target::Trait => \"trait\",\n+            Target::TraitAlias => \"trait alias\",\n+            Target::Impl => \"item\",\n+            Target::Expression => \"expression\",\n+            Target::Statement => \"statement\",\n+        })\n+    }\n }\n \n impl Target {\n-    fn from_item(item: &hir::Item) -> Target {\n+    pub(crate) fn from_item(item: &hir::Item) -> Target {\n         match item.node {\n+            hir::ItemKind::ExternCrate(..) => Target::ExternCrate,\n+            hir::ItemKind::Use(..) => Target::Use,\n+            hir::ItemKind::Static(..) => Target::Static,\n+            hir::ItemKind::Const(..) => Target::Const,\n             hir::ItemKind::Fn(..) => Target::Fn,\n+            hir::ItemKind::Mod(..) => Target::Mod,\n+            hir::ItemKind::ForeignMod(..) => Target::ForeignMod,\n+            hir::ItemKind::GlobalAsm(..) => Target::GlobalAsm,\n+            hir::ItemKind::Ty(..) => Target::Ty,\n+            hir::ItemKind::Existential(..) => Target::Existential,\n+            hir::ItemKind::Enum(..) => Target::Enum,\n             hir::ItemKind::Struct(..) => Target::Struct,\n             hir::ItemKind::Union(..) => Target::Union,\n-            hir::ItemKind::Enum(..) => Target::Enum,\n-            hir::ItemKind::Const(..) => Target::Const,\n-            hir::ItemKind::ForeignMod(..) => Target::ForeignMod,\n-            hir::ItemKind::Static(..) => Target::Static,\n             hir::ItemKind::Trait(..) => Target::Trait,\n-            _ => Target::Other,\n+            hir::ItemKind::TraitAlias(..) => Target::TraitAlias,\n+            hir::ItemKind::Impl(..) => Target::Impl,\n         }\n     }\n }"}, {"sha": "c5d028c1735d52e276c411d799ba25ef0c05d0b2", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 164, "deletions": 140, "changes": 304, "blob_url": "https://github.com/rust-lang/rust/blob/fa76d42b3e547bd3a0e049cc2c1e00f6b9560d6c/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa76d42b3e547bd3a0e049cc2c1e00f6b9560d6c/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=fa76d42b3e547bd3a0e049cc2c1e00f6b9560d6c", "patch": "@@ -22,6 +22,7 @@\n pub use self::LangItem::*;\n \n use hir::def_id::DefId;\n+use hir::check_attr::Target;\n use ty::{self, TyCtxt};\n use middle::weak_lang_items;\n use util::nodemap::FxHashMap;\n@@ -36,7 +37,7 @@ use hir;\n // So you probably just want to nip down to the end.\n macro_rules! language_item_table {\n     (\n-        $( $variant:ident, $name:expr, $method:ident; )*\n+        $( $variant:ident, $name:expr, $method:ident, $target:path; )*\n     ) => {\n \n enum_from_u32! {\n@@ -96,26 +97,49 @@ impl LanguageItems {\n \n struct LanguageItemCollector<'a, 'tcx: 'a> {\n     items: LanguageItems,\n-\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-\n-    item_refs: FxHashMap<&'static str, usize>,\n+    item_refs: FxHashMap<&'static str, (usize, Target)>,\n }\n \n impl<'a, 'v, 'tcx> ItemLikeVisitor<'v> for LanguageItemCollector<'a, 'tcx> {\n     fn visit_item(&mut self, item: &hir::Item) {\n         if let Some((value, span)) = extract(&item.attrs) {\n-            let item_index = self.item_refs.get(&*value.as_str()).cloned();\n-\n-            if let Some(item_index) = item_index {\n-                let def_id = self.tcx.hir.local_def_id(item.id);\n-                self.collect_item(item_index, def_id);\n-            } else {\n-                let mut err = struct_span_err!(self.tcx.sess, span, E0522,\n-                                               \"definition of an unknown language item: `{}`\",\n-                                               value);\n-                err.span_label(span, format!(\"definition of unknown language item `{}`\", value));\n-                err.emit();\n+            let actual_target = Target::from_item(item);\n+            match self.item_refs.get(&*value.as_str()).cloned() {\n+                // Known lang item with attribute on correct target.\n+                Some((item_index, expected_target)) if actual_target == expected_target => {\n+                    let def_id = self.tcx.hir.local_def_id(item.id);\n+                    self.collect_item(item_index, def_id);\n+                },\n+                // Known lang item with attribute on incorrect target.\n+                Some((_, expected_target)) => {\n+                    let mut err = struct_span_err!(\n+                        self.tcx.sess, span, E0718,\n+                        \"`{}` language item must be applied to a {}\",\n+                        value, expected_target,\n+                    );\n+                    err.span_label(\n+                        span,\n+                        format!(\n+                            \"attribute should be applied to a {}, not a {}\",\n+                            expected_target, actual_target,\n+                        ),\n+                    );\n+                    err.emit();\n+                },\n+                // Unknown lang item.\n+                _ => {\n+                    let mut err = struct_span_err!(\n+                        self.tcx.sess, span, E0522,\n+                        \"definition of an unknown language item: `{}`\",\n+                        value\n+                    );\n+                    err.span_label(\n+                        span,\n+                        format!(\"definition of unknown language item `{}`\", value)\n+                    );\n+                    err.emit();\n+                },\n             }\n         }\n     }\n@@ -133,7 +157,7 @@ impl<'a, 'tcx> LanguageItemCollector<'a, 'tcx> {\n     fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> LanguageItemCollector<'a, 'tcx> {\n         let mut item_refs = FxHashMap();\n \n-        $( item_refs.insert($name, $variant as usize); )*\n+        $( item_refs.insert($name, ($variant as usize, $target)); )*\n \n         LanguageItemCollector {\n             tcx,\n@@ -210,84 +234,84 @@ pub fn collect<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> LanguageItems {\n }\n \n language_item_table! {\n-//  Variant name,                    Name,                      Method name;\n-    CharImplItem,                    \"char\",                    char_impl;\n-    StrImplItem,                     \"str\",                     str_impl;\n-    SliceImplItem,                   \"slice\",                   slice_impl;\n-    SliceU8ImplItem,                 \"slice_u8\",                slice_u8_impl;\n-    StrAllocImplItem,                \"str_alloc\",               str_alloc_impl;\n-    SliceAllocImplItem,              \"slice_alloc\",             slice_alloc_impl;\n-    SliceU8AllocImplItem,            \"slice_u8_alloc\",          slice_u8_alloc_impl;\n-    ConstPtrImplItem,                \"const_ptr\",               const_ptr_impl;\n-    MutPtrImplItem,                  \"mut_ptr\",                 mut_ptr_impl;\n-    I8ImplItem,                      \"i8\",                      i8_impl;\n-    I16ImplItem,                     \"i16\",                     i16_impl;\n-    I32ImplItem,                     \"i32\",                     i32_impl;\n-    I64ImplItem,                     \"i64\",                     i64_impl;\n-    I128ImplItem,                     \"i128\",                   i128_impl;\n-    IsizeImplItem,                   \"isize\",                   isize_impl;\n-    U8ImplItem,                      \"u8\",                      u8_impl;\n-    U16ImplItem,                     \"u16\",                     u16_impl;\n-    U32ImplItem,                     \"u32\",                     u32_impl;\n-    U64ImplItem,                     \"u64\",                     u64_impl;\n-    U128ImplItem,                    \"u128\",                    u128_impl;\n-    UsizeImplItem,                   \"usize\",                   usize_impl;\n-    F32ImplItem,                     \"f32\",                     f32_impl;\n-    F64ImplItem,                     \"f64\",                     f64_impl;\n-    F32RuntimeImplItem,              \"f32_runtime\",             f32_runtime_impl;\n-    F64RuntimeImplItem,              \"f64_runtime\",             f64_runtime_impl;\n-\n-    SizedTraitLangItem,              \"sized\",                   sized_trait;\n-    UnsizeTraitLangItem,             \"unsize\",                  unsize_trait;\n-    CopyTraitLangItem,               \"copy\",                    copy_trait;\n-    CloneTraitLangItem,              \"clone\",                   clone_trait;\n-    SyncTraitLangItem,               \"sync\",                    sync_trait;\n-    FreezeTraitLangItem,             \"freeze\",                  freeze_trait;\n-\n-    DropTraitLangItem,               \"drop\",                    drop_trait;\n-\n-    CoerceUnsizedTraitLangItem,      \"coerce_unsized\",          coerce_unsized_trait;\n-\n-    AddTraitLangItem,                \"add\",                     add_trait;\n-    SubTraitLangItem,                \"sub\",                     sub_trait;\n-    MulTraitLangItem,                \"mul\",                     mul_trait;\n-    DivTraitLangItem,                \"div\",                     div_trait;\n-    RemTraitLangItem,                \"rem\",                     rem_trait;\n-    NegTraitLangItem,                \"neg\",                     neg_trait;\n-    NotTraitLangItem,                \"not\",                     not_trait;\n-    BitXorTraitLangItem,             \"bitxor\",                  bitxor_trait;\n-    BitAndTraitLangItem,             \"bitand\",                  bitand_trait;\n-    BitOrTraitLangItem,              \"bitor\",                   bitor_trait;\n-    ShlTraitLangItem,                \"shl\",                     shl_trait;\n-    ShrTraitLangItem,                \"shr\",                     shr_trait;\n-    AddAssignTraitLangItem,          \"add_assign\",              add_assign_trait;\n-    SubAssignTraitLangItem,          \"sub_assign\",              sub_assign_trait;\n-    MulAssignTraitLangItem,          \"mul_assign\",              mul_assign_trait;\n-    DivAssignTraitLangItem,          \"div_assign\",              div_assign_trait;\n-    RemAssignTraitLangItem,          \"rem_assign\",              rem_assign_trait;\n-    BitXorAssignTraitLangItem,       \"bitxor_assign\",           bitxor_assign_trait;\n-    BitAndAssignTraitLangItem,       \"bitand_assign\",           bitand_assign_trait;\n-    BitOrAssignTraitLangItem,        \"bitor_assign\",            bitor_assign_trait;\n-    ShlAssignTraitLangItem,          \"shl_assign\",              shl_assign_trait;\n-    ShrAssignTraitLangItem,          \"shr_assign\",              shr_assign_trait;\n-    IndexTraitLangItem,              \"index\",                   index_trait;\n-    IndexMutTraitLangItem,           \"index_mut\",               index_mut_trait;\n-\n-    UnsafeCellTypeLangItem,          \"unsafe_cell\",             unsafe_cell_type;\n-\n-    DerefTraitLangItem,              \"deref\",                   deref_trait;\n-    DerefMutTraitLangItem,           \"deref_mut\",               deref_mut_trait;\n-\n-    FnTraitLangItem,                 \"fn\",                      fn_trait;\n-    FnMutTraitLangItem,              \"fn_mut\",                  fn_mut_trait;\n-    FnOnceTraitLangItem,             \"fn_once\",                 fn_once_trait;\n-\n-    GeneratorStateLangItem,          \"generator_state\",         gen_state;\n-    GeneratorTraitLangItem,          \"generator\",               gen_trait;\n-\n-    EqTraitLangItem,                 \"eq\",                      eq_trait;\n-    PartialOrdTraitLangItem,         \"partial_ord\",             partial_ord_trait;\n-    OrdTraitLangItem,                \"ord\",                     ord_trait;\n+//  Variant name,                Name,                 Method name,             Target;\n+    CharImplItem,                \"char\",               char_impl,               Target::Impl;\n+    StrImplItem,                 \"str\",                str_impl,                Target::Impl;\n+    SliceImplItem,               \"slice\",              slice_impl,              Target::Impl;\n+    SliceU8ImplItem,             \"slice_u8\",           slice_u8_impl,           Target::Impl;\n+    StrAllocImplItem,            \"str_alloc\",          str_alloc_impl,          Target::Impl;\n+    SliceAllocImplItem,          \"slice_alloc\",        slice_alloc_impl,        Target::Impl;\n+    SliceU8AllocImplItem,        \"slice_u8_alloc\",     slice_u8_alloc_impl,     Target::Impl;\n+    ConstPtrImplItem,            \"const_ptr\",          const_ptr_impl,          Target::Impl;\n+    MutPtrImplItem,              \"mut_ptr\",            mut_ptr_impl,            Target::Impl;\n+    I8ImplItem,                  \"i8\",                 i8_impl,                 Target::Impl;\n+    I16ImplItem,                 \"i16\",                i16_impl,                Target::Impl;\n+    I32ImplItem,                 \"i32\",                i32_impl,                Target::Impl;\n+    I64ImplItem,                 \"i64\",                i64_impl,                Target::Impl;\n+    I128ImplItem,                \"i128\",               i128_impl,               Target::Impl;\n+    IsizeImplItem,               \"isize\",              isize_impl,              Target::Impl;\n+    U8ImplItem,                  \"u8\",                 u8_impl,                 Target::Impl;\n+    U16ImplItem,                 \"u16\",                u16_impl,                Target::Impl;\n+    U32ImplItem,                 \"u32\",                u32_impl,                Target::Impl;\n+    U64ImplItem,                 \"u64\",                u64_impl,                Target::Impl;\n+    U128ImplItem,                \"u128\",               u128_impl,               Target::Impl;\n+    UsizeImplItem,               \"usize\",              usize_impl,              Target::Impl;\n+    F32ImplItem,                 \"f32\",                f32_impl,                Target::Impl;\n+    F64ImplItem,                 \"f64\",                f64_impl,                Target::Impl;\n+    F32RuntimeImplItem,          \"f32_runtime\",        f32_runtime_impl,        Target::Impl;\n+    F64RuntimeImplItem,          \"f64_runtime\",        f64_runtime_impl,        Target::Impl;\n+\n+    SizedTraitLangItem,          \"sized\",              sized_trait,             Target::Trait;\n+    UnsizeTraitLangItem,         \"unsize\",             unsize_trait,            Target::Trait;\n+    CopyTraitLangItem,           \"copy\",               copy_trait,              Target::Trait;\n+    CloneTraitLangItem,          \"clone\",              clone_trait,             Target::Trait;\n+    SyncTraitLangItem,           \"sync\",               sync_trait,              Target::Trait;\n+    FreezeTraitLangItem,         \"freeze\",             freeze_trait,            Target::Trait;\n+\n+    DropTraitLangItem,           \"drop\",               drop_trait,              Target::Trait;\n+\n+    CoerceUnsizedTraitLangItem,  \"coerce_unsized\",     coerce_unsized_trait,    Target::Trait;\n+\n+    AddTraitLangItem,            \"add\",                add_trait,               Target::Trait;\n+    SubTraitLangItem,            \"sub\",                sub_trait,               Target::Trait;\n+    MulTraitLangItem,            \"mul\",                mul_trait,               Target::Trait;\n+    DivTraitLangItem,            \"div\",                div_trait,               Target::Trait;\n+    RemTraitLangItem,            \"rem\",                rem_trait,               Target::Trait;\n+    NegTraitLangItem,            \"neg\",                neg_trait,               Target::Trait;\n+    NotTraitLangItem,            \"not\",                not_trait,               Target::Trait;\n+    BitXorTraitLangItem,         \"bitxor\",             bitxor_trait,            Target::Trait;\n+    BitAndTraitLangItem,         \"bitand\",             bitand_trait,            Target::Trait;\n+    BitOrTraitLangItem,          \"bitor\",              bitor_trait,             Target::Trait;\n+    ShlTraitLangItem,            \"shl\",                shl_trait,               Target::Trait;\n+    ShrTraitLangItem,            \"shr\",                shr_trait,               Target::Trait;\n+    AddAssignTraitLangItem,      \"add_assign\",         add_assign_trait,        Target::Trait;\n+    SubAssignTraitLangItem,      \"sub_assign\",         sub_assign_trait,        Target::Trait;\n+    MulAssignTraitLangItem,      \"mul_assign\",         mul_assign_trait,        Target::Trait;\n+    DivAssignTraitLangItem,      \"div_assign\",         div_assign_trait,        Target::Trait;\n+    RemAssignTraitLangItem,      \"rem_assign\",         rem_assign_trait,        Target::Trait;\n+    BitXorAssignTraitLangItem,   \"bitxor_assign\",      bitxor_assign_trait,     Target::Trait;\n+    BitAndAssignTraitLangItem,   \"bitand_assign\",      bitand_assign_trait,     Target::Trait;\n+    BitOrAssignTraitLangItem,    \"bitor_assign\",       bitor_assign_trait,      Target::Trait;\n+    ShlAssignTraitLangItem,      \"shl_assign\",         shl_assign_trait,        Target::Trait;\n+    ShrAssignTraitLangItem,      \"shr_assign\",         shr_assign_trait,        Target::Trait;\n+    IndexTraitLangItem,          \"index\",              index_trait,             Target::Trait;\n+    IndexMutTraitLangItem,       \"index_mut\",          index_mut_trait,         Target::Trait;\n+\n+    UnsafeCellTypeLangItem,      \"unsafe_cell\",        unsafe_cell_type,        Target::Struct;\n+\n+    DerefTraitLangItem,          \"deref\",              deref_trait,             Target::Trait;\n+    DerefMutTraitLangItem,       \"deref_mut\",          deref_mut_trait,         Target::Trait;\n+\n+    FnTraitLangItem,             \"fn\",                 fn_trait,                Target::Trait;\n+    FnMutTraitLangItem,          \"fn_mut\",             fn_mut_trait,            Target::Trait;\n+    FnOnceTraitLangItem,         \"fn_once\",            fn_once_trait,           Target::Trait;\n+\n+    GeneratorStateLangItem,      \"generator_state\",    gen_state,               Target::Enum;\n+    GeneratorTraitLangItem,      \"generator\",          gen_trait,               Target::Trait;\n+\n+    EqTraitLangItem,             \"eq\",                 eq_trait,                Target::Trait;\n+    PartialOrdTraitLangItem,     \"partial_ord\",        partial_ord_trait,       Target::Trait;\n+    OrdTraitLangItem,            \"ord\",                ord_trait,               Target::Trait;\n \n     // A number of panic-related lang items. The `panic` item corresponds to\n     // divide-by-zero and various panic cases with `match`. The\n@@ -298,68 +322,68 @@ language_item_table! {\n     // defined to use it, but a final product is required to define it\n     // somewhere. Additionally, there are restrictions on crates that use a weak\n     // lang item, but do not have it defined.\n-    PanicFnLangItem,                 \"panic\",                   panic_fn;\n-    PanicBoundsCheckFnLangItem,      \"panic_bounds_check\",      panic_bounds_check_fn;\n-    PanicInfoLangItem,               \"panic_info\",              panic_info;\n-    PanicImplLangItem,               \"panic_impl\",              panic_impl;\n+    PanicFnLangItem,             \"panic\",              panic_fn,                Target::Fn;\n+    PanicBoundsCheckFnLangItem,  \"panic_bounds_check\", panic_bounds_check_fn,   Target::Fn;\n+    PanicInfoLangItem,           \"panic_info\",         panic_info,              Target::Struct;\n+    PanicImplLangItem,           \"panic_impl\",         panic_impl,              Target::Fn;\n     // Libstd panic entry point. Necessary for const eval to be able to catch it\n-    BeginPanicFnLangItem,            \"begin_panic\",             begin_panic_fn;\n+    BeginPanicFnLangItem,        \"begin_panic\",        begin_panic_fn,          Target::Fn;\n \n-    ExchangeMallocFnLangItem,        \"exchange_malloc\",         exchange_malloc_fn;\n-    BoxFreeFnLangItem,               \"box_free\",                box_free_fn;\n-    DropInPlaceFnLangItem,           \"drop_in_place\",           drop_in_place_fn;\n-    OomLangItem,                     \"oom\",                     oom;\n-    AllocLayoutLangItem,             \"alloc_layout\",            alloc_layout;\n+    ExchangeMallocFnLangItem,    \"exchange_malloc\",    exchange_malloc_fn,      Target::Fn;\n+    BoxFreeFnLangItem,           \"box_free\",           box_free_fn,             Target::Fn;\n+    DropInPlaceFnLangItem,       \"drop_in_place\",      drop_in_place_fn,        Target::Fn;\n+    OomLangItem,                 \"oom\",                oom,                     Target::Fn;\n+    AllocLayoutLangItem,         \"alloc_layout\",       alloc_layout,            Target::Struct;\n \n-    StartFnLangItem,                 \"start\",                   start_fn;\n+    StartFnLangItem,             \"start\",              start_fn,                Target::Fn;\n \n-    EhPersonalityLangItem,           \"eh_personality\",          eh_personality;\n-    EhUnwindResumeLangItem,          \"eh_unwind_resume\",        eh_unwind_resume;\n-    MSVCTryFilterLangItem,           \"msvc_try_filter\",         msvc_try_filter;\n+    EhPersonalityLangItem,       \"eh_personality\",     eh_personality,          Target::Fn;\n+    EhUnwindResumeLangItem,      \"eh_unwind_resume\",   eh_unwind_resume,        Target::Fn;\n+    MSVCTryFilterLangItem,       \"msvc_try_filter\",    msvc_try_filter,         Target::Static;\n \n-    OwnedBoxLangItem,                \"owned_box\",               owned_box;\n+    OwnedBoxLangItem,            \"owned_box\",          owned_box,               Target::Struct;\n \n-    PhantomDataItem,                 \"phantom_data\",            phantom_data;\n+    PhantomDataItem,             \"phantom_data\",       phantom_data,            Target::Struct;\n \n-    ManuallyDropItem,                \"manually_drop\",           manually_drop;\n+    ManuallyDropItem,            \"manually_drop\",      manually_drop,           Target::Struct;\n \n-    DebugTraitLangItem,              \"debug_trait\",             debug_trait;\n+    DebugTraitLangItem,          \"debug_trait\",        debug_trait,             Target::Trait;\n \n     // A lang item for each of the 128-bit operators we can optionally lower.\n-    I128AddFnLangItem,               \"i128_add\",                i128_add_fn;\n-    U128AddFnLangItem,               \"u128_add\",                u128_add_fn;\n-    I128SubFnLangItem,               \"i128_sub\",                i128_sub_fn;\n-    U128SubFnLangItem,               \"u128_sub\",                u128_sub_fn;\n-    I128MulFnLangItem,               \"i128_mul\",                i128_mul_fn;\n-    U128MulFnLangItem,               \"u128_mul\",                u128_mul_fn;\n-    I128DivFnLangItem,               \"i128_div\",                i128_div_fn;\n-    U128DivFnLangItem,               \"u128_div\",                u128_div_fn;\n-    I128RemFnLangItem,               \"i128_rem\",                i128_rem_fn;\n-    U128RemFnLangItem,               \"u128_rem\",                u128_rem_fn;\n-    I128ShlFnLangItem,               \"i128_shl\",                i128_shl_fn;\n-    U128ShlFnLangItem,               \"u128_shl\",                u128_shl_fn;\n-    I128ShrFnLangItem,               \"i128_shr\",                i128_shr_fn;\n-    U128ShrFnLangItem,               \"u128_shr\",                u128_shr_fn;\n+    I128AddFnLangItem,           \"i128_add\",           i128_add_fn,             Target::Fn;\n+    U128AddFnLangItem,           \"u128_add\",           u128_add_fn,             Target::Fn;\n+    I128SubFnLangItem,           \"i128_sub\",           i128_sub_fn,             Target::Fn;\n+    U128SubFnLangItem,           \"u128_sub\",           u128_sub_fn,             Target::Fn;\n+    I128MulFnLangItem,           \"i128_mul\",           i128_mul_fn,             Target::Fn;\n+    U128MulFnLangItem,           \"u128_mul\",           u128_mul_fn,             Target::Fn;\n+    I128DivFnLangItem,           \"i128_div\",           i128_div_fn,             Target::Fn;\n+    U128DivFnLangItem,           \"u128_div\",           u128_div_fn,             Target::Fn;\n+    I128RemFnLangItem,           \"i128_rem\",           i128_rem_fn,             Target::Fn;\n+    U128RemFnLangItem,           \"u128_rem\",           u128_rem_fn,             Target::Fn;\n+    I128ShlFnLangItem,           \"i128_shl\",           i128_shl_fn,             Target::Fn;\n+    U128ShlFnLangItem,           \"u128_shl\",           u128_shl_fn,             Target::Fn;\n+    I128ShrFnLangItem,           \"i128_shr\",           i128_shr_fn,             Target::Fn;\n+    U128ShrFnLangItem,           \"u128_shr\",           u128_shr_fn,             Target::Fn;\n     // And overflow versions for the operators that are checkable.\n     // While MIR calls these Checked*, they return (T,bool), not Option<T>.\n-    I128AddoFnLangItem,              \"i128_addo\",               i128_addo_fn;\n-    U128AddoFnLangItem,              \"u128_addo\",               u128_addo_fn;\n-    I128SuboFnLangItem,              \"i128_subo\",               i128_subo_fn;\n-    U128SuboFnLangItem,              \"u128_subo\",               u128_subo_fn;\n-    I128MuloFnLangItem,              \"i128_mulo\",               i128_mulo_fn;\n-    U128MuloFnLangItem,              \"u128_mulo\",               u128_mulo_fn;\n-    I128ShloFnLangItem,              \"i128_shlo\",               i128_shlo_fn;\n-    U128ShloFnLangItem,              \"u128_shlo\",               u128_shlo_fn;\n-    I128ShroFnLangItem,              \"i128_shro\",               i128_shro_fn;\n-    U128ShroFnLangItem,              \"u128_shro\",               u128_shro_fn;\n+    I128AddoFnLangItem,          \"i128_addo\",          i128_addo_fn,            Target::Fn;\n+    U128AddoFnLangItem,          \"u128_addo\",          u128_addo_fn,            Target::Fn;\n+    I128SuboFnLangItem,          \"i128_subo\",          i128_subo_fn,            Target::Fn;\n+    U128SuboFnLangItem,          \"u128_subo\",          u128_subo_fn,            Target::Fn;\n+    I128MuloFnLangItem,          \"i128_mulo\",          i128_mulo_fn,            Target::Fn;\n+    U128MuloFnLangItem,          \"u128_mulo\",          u128_mulo_fn,            Target::Fn;\n+    I128ShloFnLangItem,          \"i128_shlo\",          i128_shlo_fn,            Target::Fn;\n+    U128ShloFnLangItem,          \"u128_shlo\",          u128_shlo_fn,            Target::Fn;\n+    I128ShroFnLangItem,          \"i128_shro\",          i128_shro_fn,            Target::Fn;\n+    U128ShroFnLangItem,          \"u128_shro\",          u128_shro_fn,            Target::Fn;\n \n     // Align offset for stride != 1, must not panic.\n-    AlignOffsetLangItem,             \"align_offset\",            align_offset_fn;\n+    AlignOffsetLangItem,         \"align_offset\",       align_offset_fn,         Target::Fn;\n \n-    TerminationTraitLangItem,        \"termination\",             termination;\n+    TerminationTraitLangItem,    \"termination\",        termination,             Target::Trait;\n \n-    Arc,                             \"arc\",                     arc;\n-    Rc,                              \"rc\",                      rc;\n+    Arc,                         \"arc\",                arc,                     Target::Struct;\n+    Rc,                          \"rc\",                 rc,                      Target::Struct;\n }\n \n impl<'a, 'tcx, 'gcx> TyCtxt<'a, 'tcx, 'gcx> {"}, {"sha": "96a4d51bd2437195a69aa430af507c906215cb1e", "filename": "src/test/ui/error-codes/E0152.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa76d42b3e547bd3a0e049cc2c1e00f6b9560d6c/src%2Ftest%2Fui%2Ferror-codes%2FE0152.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa76d42b3e547bd3a0e049cc2c1e00f6b9560d6c/src%2Ftest%2Fui%2Ferror-codes%2FE0152.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0152.rs?ref=fa76d42b3e547bd3a0e049cc2c1e00f6b9560d6c", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(lang_items)]\n \n-#[lang = \"panic_impl\"]\n+#[lang = \"arc\"]\n struct Foo; //~ ERROR E0152\n \n fn main() {"}, {"sha": "a0530f24de6790c973a77085a2ed55186b20781a", "filename": "src/test/ui/error-codes/E0152.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa76d42b3e547bd3a0e049cc2c1e00f6b9560d6c/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa76d42b3e547bd3a0e049cc2c1e00f6b9560d6c/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr?ref=fa76d42b3e547bd3a0e049cc2c1e00f6b9560d6c", "patch": "@@ -1,10 +1,10 @@\n-error[E0152]: duplicate lang item found: `panic_impl`.\n+error[E0152]: duplicate lang item found: `arc`.\n   --> $DIR/E0152.rs:14:1\n    |\n LL | struct Foo; //~ ERROR E0152\n    | ^^^^^^^^^^^\n    |\n-   = note: first defined in crate `std`.\n+   = note: first defined in crate `alloc`.\n \n error: aborting due to previous error\n "}, {"sha": "ce74e35ac6bb610c05f9142af334d88007a67c79", "filename": "src/test/ui/error-codes/E0718.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fa76d42b3e547bd3a0e049cc2c1e00f6b9560d6c/src%2Ftest%2Fui%2Ferror-codes%2FE0718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa76d42b3e547bd3a0e049cc2c1e00f6b9560d6c/src%2Ftest%2Fui%2Ferror-codes%2FE0718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0718.rs?ref=fa76d42b3e547bd3a0e049cc2c1e00f6b9560d6c", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(lang_items)]\n+\n+// Arc is expected to be a struct, so this will error.\n+#[lang = \"arc\"]\n+static X: u32 = 42;\n+\n+fn main() {}"}, {"sha": "8ce721d30a16b64913acfd62191baeecad4a5b47", "filename": "src/test/ui/error-codes/E0718.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fa76d42b3e547bd3a0e049cc2c1e00f6b9560d6c/src%2Ftest%2Fui%2Ferror-codes%2FE0718.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa76d42b3e547bd3a0e049cc2c1e00f6b9560d6c/src%2Ftest%2Fui%2Ferror-codes%2FE0718.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0718.stderr?ref=fa76d42b3e547bd3a0e049cc2c1e00f6b9560d6c", "patch": "@@ -0,0 +1,9 @@\n+error[E0718]: `arc` language item must be applied to a struct\n+  --> $DIR/E0718.rs:14:1\n+   |\n+LL | #[lang = \"arc\"]\n+   | ^^^^^^^^^^^^^^^ attribute should be applied to a struct, not a static item\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0718`."}, {"sha": "04e02682bc12b6263de2da62b6b5996acfe9a5cc", "filename": "src/test/ui/panic-handler/panic-handler-wrong-location.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fa76d42b3e547bd3a0e049cc2c1e00f6b9560d6c/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-wrong-location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa76d42b3e547bd3a0e049cc2c1e00f6b9560d6c/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-wrong-location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-wrong-location.rs?ref=fa76d42b3e547bd3a0e049cc2c1e00f6b9560d6c", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-C panic=abort\n+\n+#![no_std]\n+#![no_main]\n+\n+#[panic_handler]\n+#[no_mangle]\n+static X: u32 = 42;"}, {"sha": "f761e26b86e712acf20e185e375124c0b1be584f", "filename": "src/test/ui/panic-handler/panic-handler-wrong-location.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fa76d42b3e547bd3a0e049cc2c1e00f6b9560d6c/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-wrong-location.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa76d42b3e547bd3a0e049cc2c1e00f6b9560d6c/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-wrong-location.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-wrong-location.stderr?ref=fa76d42b3e547bd3a0e049cc2c1e00f6b9560d6c", "patch": "@@ -0,0 +1,11 @@\n+error[E0718]: `panic_impl` language item must be applied to a function\n+  --> $DIR/panic-handler-wrong-location.rs:16:1\n+   |\n+LL | #[panic_handler]\n+   | ^^^^^^^^^^^^^^^^ attribute should be applied to a function, not a static item\n+\n+error: `#[panic_handler]` function required, but not found\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0718`."}]}