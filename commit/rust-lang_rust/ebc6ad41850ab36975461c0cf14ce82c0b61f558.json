{"sha": "ebc6ad41850ab36975461c0cf14ce82c0b61f558", "node_id": "C_kwDOAAsO6NoAKGViYzZhZDQxODUwYWIzNjk3NTQ2MWMwY2YxNGNlODJjMGI2MWY1NTg", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-12-30T14:23:33Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-12-30T14:25:38Z"}, "message": "Sync from rust 65d8785f0a85d233e00fc84445f1aab451ec9f4f", "tree": {"sha": "a1eb8448685f4ce439d58d014d93edfe28ac69cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1eb8448685f4ce439d58d014d93edfe28ac69cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebc6ad41850ab36975461c0cf14ce82c0b61f558", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebc6ad41850ab36975461c0cf14ce82c0b61f558", "html_url": "https://github.com/rust-lang/rust/commit/ebc6ad41850ab36975461c0cf14ce82c0b61f558", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebc6ad41850ab36975461c0cf14ce82c0b61f558/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2989a25273013dd90c2704b4c0a484c6455b78aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/2989a25273013dd90c2704b4c0a484c6455b78aa", "html_url": "https://github.com/rust-lang/rust/commit/2989a25273013dd90c2704b4c0a484c6455b78aa"}, {"sha": "c5d0023afb166baf705e0a46b9795dc878d14e71", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5d0023afb166baf705e0a46b9795dc878d14e71", "html_url": "https://github.com/rust-lang/rust/commit/c5d0023afb166baf705e0a46b9795dc878d14e71"}], "stats": {"total": 91, "additions": 25, "deletions": 66}, "files": [{"sha": "a8b1e70e2bb801e432b5940d126bd4cad33eca63", "filename": "src/abi.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebc6ad41850ab36975461c0cf14ce82c0b61f558/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc6ad41850ab36975461c0cf14ce82c0b61f558/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=ebc6ad41850ab36975461c0cf14ce82c0b61f558", "patch": "@@ -14,7 +14,7 @@ impl<'a, 'gcc, 'tcx> AbiBuilderMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n         // TODO(antoyo)\n     }\n \n-    fn get_param(&self, index: usize) -> Self::Value {\n+    fn get_param(&mut self, index: usize) -> Self::Value {\n         self.cx.current_func.borrow().expect(\"current func\")\n             .get_param(index as i32)\n             .to_rvalue()\n@@ -48,8 +48,8 @@ impl GccType for CastTarget {\n         let mut args: Vec<_> = self\n             .prefix\n             .iter()\n-            .flat_map(|option_kind| {\n-                option_kind.map(|kind| Reg { kind, size: self.prefix_chunk_size }.gcc_type(cx))\n+            .flat_map(|option_reg| {\n+                option_reg.map(|reg| reg.gcc_type(cx))\n             })\n             .chain((0..rest_count).map(|_| rest_gcc_unit))\n             .collect();"}, {"sha": "453bcd601d3fe51b391b5627930c4350190d5bcc", "filename": "src/asm.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ebc6ad41850ab36975461c0cf14ce82c0b61f558/src%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc6ad41850ab36975461c0cf14ce82c0b61f558/src%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fasm.rs?ref=ebc6ad41850ab36975461c0cf14ce82c0b61f558", "patch": "@@ -117,7 +117,14 @@ impl<'a, 'gcc, 'tcx> AsmBuilderMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n         true\n     }\n \n-    fn codegen_inline_asm(&mut self, template: &[InlineAsmTemplatePiece], rust_operands: &[InlineAsmOperandRef<'tcx, Self>], options: InlineAsmOptions, _span: &[Span], _instance: Instance<'_>) {\n+    fn codegen_inline_asm(&mut self, template: &[InlineAsmTemplatePiece], rust_operands: &[InlineAsmOperandRef<'tcx, Self>], options: InlineAsmOptions, span: &[Span], _instance: Instance<'_>, _dest_catch_funclet: Option<(Self::BasicBlock, Self::BasicBlock, Option<&Self::Funclet>)>) {\n+        if options.contains(InlineAsmOptions::MAY_UNWIND) {\n+            self.sess()\n+                .struct_span_err(span[0], \"GCC backend does not support unwinding from inline asm\")\n+                .emit();\n+            return;\n+        }\n+\n         let asm_arch = self.tcx.sess.asm_arch.unwrap();\n         let is_x86 = matches!(asm_arch, InlineAsmArch::X86 | InlineAsmArch::X86_64);\n         let att_dialect = is_x86 && options.contains(InlineAsmOptions::ATT_SYNTAX);\n@@ -552,7 +559,6 @@ fn reg_to_gcc(reg: InlineAsmRegOrRegClass) -> ConstraintOrRegister {\n             InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::vreg) => unimplemented!(),\n             InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::vreg_low16) => unimplemented!(),\n             InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg) => unimplemented!(),\n-            InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg_thumb) => unimplemented!(),\n             InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg)\n             | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::dreg_low16)\n             | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::qreg_low8) => unimplemented!(),\n@@ -561,6 +567,7 @@ fn reg_to_gcc(reg: InlineAsmRegOrRegClass) -> ConstraintOrRegister {\n             | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::qreg_low4) => unimplemented!(),\n             InlineAsmRegClass::Arm(ArmInlineAsmRegClass::dreg)\n             | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::qreg) => unimplemented!(),\n+            InlineAsmRegClass::Avr(_) => unimplemented!(),\n             InlineAsmRegClass::Bpf(_) => unimplemented!(),\n             InlineAsmRegClass::Hexagon(HexagonInlineAsmRegClass::reg) => unimplemented!(),\n             InlineAsmRegClass::Mips(MipsInlineAsmRegClass::reg) => unimplemented!(),\n@@ -611,8 +618,7 @@ fn dummy_output_type<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, reg: InlineAsmRegCl\n         | InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::vreg_low16) => {\n             unimplemented!()\n         }\n-        InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg)\n-        | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg_thumb) => cx.type_i32(),\n+        InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg)=> cx.type_i32(),\n         InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg)\n         | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg_low16) => cx.type_f32(),\n         InlineAsmRegClass::Arm(ArmInlineAsmRegClass::dreg)\n@@ -623,6 +629,7 @@ fn dummy_output_type<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, reg: InlineAsmRegCl\n         | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::qreg_low4) => {\n             unimplemented!()\n         }\n+        InlineAsmRegClass::Avr(_) => unimplemented!(),\n         InlineAsmRegClass::Bpf(_) => unimplemented!(),\n         InlineAsmRegClass::Hexagon(HexagonInlineAsmRegClass::reg) => cx.type_i32(),\n         InlineAsmRegClass::Mips(MipsInlineAsmRegClass::reg) => cx.type_i32(),\n@@ -719,8 +726,7 @@ fn modifier_to_gcc(arch: InlineAsmArch, reg: InlineAsmRegClass, modifier: Option\n         | InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::vreg_low16) => {\n             unimplemented!()\n         }\n-        InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg)\n-        | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg_thumb) => unimplemented!(),\n+        InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg)  => unimplemented!(),\n         InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg)\n         | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg_low16) => unimplemented!(),\n         InlineAsmRegClass::Arm(ArmInlineAsmRegClass::dreg)\n@@ -731,6 +737,7 @@ fn modifier_to_gcc(arch: InlineAsmArch, reg: InlineAsmRegClass, modifier: Option\n         | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::qreg_low4) => {\n             unimplemented!()\n         }\n+        InlineAsmRegClass::Avr(_) => unimplemented!(),\n         InlineAsmRegClass::Bpf(_) => unimplemented!(),\n         InlineAsmRegClass::Hexagon(_) => unimplemented!(),\n         InlineAsmRegClass::Mips(_) => unimplemented!(),"}, {"sha": "334ef32f1d1d7471f7bb6b2bf0b511974cfeae9b", "filename": "src/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebc6ad41850ab36975461c0cf14ce82c0b61f558/src%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc6ad41850ab36975461c0cf14ce82c0b61f558/src%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fback%2Fwrite.rs?ref=ebc6ad41850ab36975461c0cf14ce82c0b61f558", "patch": "@@ -32,7 +32,7 @@ pub(crate) unsafe fn codegen(cgcx: &CodegenContext<GccCodegenBackend>, _diag_han\n         if config.emit_asm {\n             let _timer = cgcx\n                 .prof\n-                .generic_activity_with_arg(\"LLVM_module_codegen_emit_asm\", &module.name[..]);\n+                .generic_activity_with_arg(\"LLVM_module_codegen_emit_asm\", &*module.name);\n             let path = cgcx.output_filenames.temp_path(OutputType::Assembly, module_name);\n             context.compile_to_file(OutputKind::Assembler, path.to_str().expect(\"path to str\"));\n         }\n@@ -41,7 +41,7 @@ pub(crate) unsafe fn codegen(cgcx: &CodegenContext<GccCodegenBackend>, _diag_han\n             EmitObj::ObjectCode(_) => {\n                 let _timer = cgcx\n                     .prof\n-                    .generic_activity_with_arg(\"LLVM_module_codegen_emit_obj\", &module.name[..]);\n+                    .generic_activity_with_arg(\"LLVM_module_codegen_emit_obj\", &*module.name);\n                 if env::var(\"CG_GCCJIT_DUMP_MODULE_NAMES\").as_deref() == Ok(\"1\") {\n                     println!(\"Module {}\", module.name);\n                 }"}, {"sha": "c6df250d2fd269e57995b2ba74b012db0ebe87ce", "filename": "src/base.rs", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ebc6ad41850ab36975461c0cf14ce82c0b61f558/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc6ad41850ab36975461c0cf14ce82c0b61f558/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=ebc6ad41850ab36975461c0cf14ce82c0b61f558", "patch": "@@ -135,40 +135,3 @@ pub fn compile_codegen_unit<'tcx>(tcx: TyCtxt<'tcx>, cgu_name: Symbol) -> (Modul\n \n     (module, cost)\n }\n-\n-pub fn write_compressed_metadata<'tcx>(tcx: TyCtxt<'tcx>, metadata: &EncodedMetadata, gcc_module: &mut GccContext) {\n-    use snap::write::FrameEncoder;\n-    use std::io::Write;\n-\n-    // Historical note:\n-    //\n-    // When using link.exe it was seen that the section name `.note.rustc`\n-    // was getting shortened to `.note.ru`, and according to the PE and COFF\n-    // specification:\n-    //\n-    // > Executable images do not use a string table and do not support\n-    // > section names longer than 8 characters\n-    //\n-    // https://docs.microsoft.com/en-us/windows/win32/debug/pe-format\n-    //\n-    // As a result, we choose a slightly shorter name! As to why\n-    // `.note.rustc` works on MinGW, see\n-    // https://github.com/llvm/llvm-project/blob/llvmorg-12.0.0/lld/COFF/Writer.cpp#L1190-L1197\n-    let section_name = if tcx.sess.target.is_like_osx { \"__DATA,.rustc\" } else { \".rustc\" };\n-\n-    let context = &gcc_module.context;\n-    let mut compressed = rustc_metadata::METADATA_HEADER.to_vec();\n-    FrameEncoder::new(&mut compressed).write_all(&metadata.raw_data()).unwrap();\n-\n-    let name = exported_symbols::metadata_symbol_name(tcx);\n-    let typ = context.new_array_type(None, context.new_type::<u8>(), compressed.len() as i32);\n-    let global = context.new_global(None, GlobalKind::Exported, typ, name);\n-    global.global_set_initializer(&compressed);\n-    global.set_link_section(section_name);\n-\n-    // Also generate a .section directive to force no\n-    // flags, at least for ELF outputs, so that the\n-    // metadata doesn't get loaded into memory.\n-    let directive = format!(\".section {}\", section_name);\n-    context.add_top_level_asm(None, &directive);\n-}"}, {"sha": "5851826147dfac9fd5cedacf1d9120f406be702b", "filename": "src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc6ad41850ab36975461c0cf14ce82c0b61f558/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc6ad41850ab36975461c0cf14ce82c0b61f558/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=ebc6ad41850ab36975461c0cf14ce82c0b61f558", "patch": "@@ -32,7 +32,7 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n             return value;\n         }\n \n-        let global = self.global_string(&*symbol.as_str());\n+        let global = self.global_string(symbol.as_str());\n \n         self.const_cstr_cache.borrow_mut().insert(symbol, global);\n         global"}, {"sha": "dbee505a4977b26f1853acb52643f194fd5c437b", "filename": "src/declare.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebc6ad41850ab36975461c0cf14ce82c0b61f558/src%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc6ad41850ab36975461c0cf14ce82c0b61f558/src%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdeclare.rs?ref=ebc6ad41850ab36975461c0cf14ce82c0b61f558", "patch": "@@ -17,7 +17,7 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n                 global.set_tls_model(self.tls_model);\n             }\n             if let Some(link_section) = link_section {\n-                global.set_link_section(&link_section.as_str());\n+                global.set_link_section(link_section.as_str());\n             }\n             global\n         }\n@@ -53,7 +53,7 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n             global.set_tls_model(self.tls_model);\n         }\n         if let Some(link_section) = link_section {\n-            global.set_link_section(&link_section.as_str());\n+            global.set_link_section(link_section.as_str());\n         }\n         let global_address = global.get_address(None);\n         self.globals.borrow_mut().insert(name.to_string(), global_address);"}, {"sha": "572ac559d09dfb89fb5842cab86c7903d900dae7", "filename": "src/intrinsic/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ebc6ad41850ab36975461c0cf14ce82c0b61f558/src%2Fintrinsic%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc6ad41850ab36975461c0cf14ce82c0b61f558/src%2Fintrinsic%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic%2Fmod.rs?ref=ebc6ad41850ab36975461c0cf14ce82c0b61f558", "patch": "@@ -88,7 +88,7 @@ impl<'a, 'gcc, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n         let arg_tys = sig.inputs();\n         let ret_ty = sig.output();\n         let name = tcx.item_name(def_id);\n-        let name_str = &*name.as_str();\n+        let name_str = name.as_str();\n \n         let llret_ty = self.layout_of(ret_ty).gcc_type(self, true);\n         let result = PlaceRef::new_sized(llresult, fn_abi.ret.layout);\n@@ -316,7 +316,7 @@ impl<'a, 'gcc, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n                     extended_asm.add_input_operand(None, \"r\", result.llval);\n                     extended_asm.add_clobber(\"memory\");\n                     extended_asm.set_volatile_flag(true);\n-                    \n+\n                     // We have copied the value to `result` already.\n                     return;\n                 }\n@@ -363,10 +363,6 @@ impl<'a, 'gcc, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n         cond\n     }\n \n-    fn sideeffect(&mut self) {\n-        // TODO(antoyo)\n-    }\n-\n     fn type_test(&mut self, _pointer: Self::Value, _typeid: Self::Value) -> Self::Value {\n         // Unsupported.\n         self.context.new_rvalue_from_int(self.int_type, 0)"}, {"sha": "aff27f71d91c464612577e5a275c452a65a674d2", "filename": "src/intrinsic/simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc6ad41850ab36975461c0cf14ce82c0b61f558/src%2Fintrinsic%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc6ad41850ab36975461c0cf14ce82c0b61f558/src%2Fintrinsic%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic%2Fsimd.rs?ref=ebc6ad41850ab36975461c0cf14ce82c0b61f558", "patch": "@@ -52,7 +52,7 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n     let sig =\n         tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), callee_ty.fn_sig(tcx));\n     let arg_tys = sig.inputs();\n-    let name_str = &*name.as_str();\n+    let name_str = name.as_str();\n \n     // every intrinsic below takes a SIMD vector as its first argument\n     require_simd!(arg_tys[0], \"input\");"}, {"sha": "30a33b99e5053f4dac1d5422eb473502811bfce1", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ebc6ad41850ab36975461c0cf14ce82c0b61f558/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc6ad41850ab36975461c0cf14ce82c0b61f558/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=ebc6ad41850ab36975461c0cf14ce82c0b61f558", "patch": "@@ -22,7 +22,6 @@ extern crate rustc_session;\n extern crate rustc_span;\n extern crate rustc_symbol_mangling;\n extern crate rustc_target;\n-extern crate snap;\n \n // This prevents duplicating functions and statics that are already part of the host rustc process.\n #[allow(unused_extern_crates)]\n@@ -97,7 +96,7 @@ impl CodegenBackend for GccCodegenBackend {\n         Box::new(res)\n     }\n \n-    fn join_codegen(&self, ongoing_codegen: Box<dyn Any>, sess: &Session) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorReported> {\n+    fn join_codegen(&self, ongoing_codegen: Box<dyn Any>, sess: &Session, _outputs: &OutputFilenames) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorReported> {\n         let (codegen_results, work_products) = ongoing_codegen\n             .downcast::<rustc_codegen_ssa::back::write::OngoingCodegen<GccCodegenBackend>>()\n             .expect(\"Expected GccCodegenBackend's OngoingCodegen, found Box<Any>\")\n@@ -128,10 +127,6 @@ impl ExtraBackendMethods for GccCodegenBackend {\n         }\n     }\n \n-    fn write_compressed_metadata<'tcx>(&self, tcx: TyCtxt<'tcx>, metadata: &EncodedMetadata, gcc_module: &mut Self::Module) {\n-        base::write_compressed_metadata(tcx, metadata, gcc_module)\n-    }\n-\n     fn codegen_allocator<'tcx>(&self, tcx: TyCtxt<'tcx>, mods: &mut Self::Module, module_name: &str, kind: AllocatorKind, has_alloc_error_handler: bool) {\n         unsafe { allocator::codegen(tcx, mods, module_name, kind, has_alloc_error_handler) }\n     }"}, {"sha": "42572bdedf008193d01c15d4cab984b9160800a7", "filename": "tests/run/asm.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc6ad41850ab36975461c0cf14ce82c0b61f558/tests%2Frun%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc6ad41850ab36975461c0cf14ce82c0b61f558/tests%2Frun%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun%2Fasm.rs?ref=ebc6ad41850ab36975461c0cf14ce82c0b61f558", "patch": "@@ -3,8 +3,6 @@\n // Run-time:\n //   status: 0\n \n-#![feature(asm, global_asm)]\n-\n global_asm!(\"\n     .global add_asm\n add_asm:"}]}