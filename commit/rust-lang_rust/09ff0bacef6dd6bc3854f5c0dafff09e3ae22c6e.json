{"sha": "09ff0bacef6dd6bc3854f5c0dafff09e3ae22c6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5ZmYwYmFjZWY2ZGQ2YmMzODU0ZjVjMGRhZmZmMDllM2FlMjJjNmU=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2018-12-15T13:01:57Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-02-01T14:43:55Z"}, "message": "Fix emitting lint", "tree": {"sha": "ead929882814988e46a0de1655871c8f02f160af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ead929882814988e46a0de1655871c8f02f160af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09ff0bacef6dd6bc3854f5c0dafff09e3ae22c6e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAlxUWysACgkQtAh+UQ6Y\nsWRJxg/8C3VTIWeYKYlwvjZ5EOmF/eXD70yDA9q3sKRpAsv1rMewxza8I1qZ4WV+\niaoS80KYCRQRbmSgYeRB+TRF2NlkLzRxboy36OUWycSM68SrRSQsqnnkcyO1iw+z\n8bSswmL3ggOZ4Dlg39j0d0eRCBxSjFoS3RojRPpa1L/GucY4JssnJn+pb0JczVvu\nAfkz0SFr/jjMs75P3EfCnO31Yb/smRo/1ijavsccvdQ0k5I6EN6zfV4u8+wJyDXP\nZmHT97lBfywClsc2WPutU2/7lheoA7OpQx7h45XEiZfAxXl6iRk4EihJSmJ9Dx92\nFzqWAUsjA1mupA0G55cc7LVuKnRd8R+fniKLNqEsA0UgGvWsvHmc6TtpGpo08TJT\n6Nwlxe4a0ieWJ1AuvAJagta8PthrNbED+yKDNq3SgPVZdrEHTPAFCMmFjb5isJbe\nfL2A18gUNk66eCBhVmJ0laDwXIxunfojA+cMSBKtvvQAKtW6zxX0XJOcz6pYhoTY\n/F3u1wk6p1y8Q8SYzYxEvB5mI04xlkEKUIeImVuWSMlmxvUHT03GMWk6AWBhzrgS\npAHoKWHqGlhiJ44RI+v+tGIpQd+u1NlWhrQhbK4oifJVdTSFb55geDrblK7hX1un\nqRkG9SVwzKtkXe/6iNCYtLcnnDkJqe2OXj8T27kjfl+xbbRsVrU=\n=nQ7P\n-----END PGP SIGNATURE-----", "payload": "tree ead929882814988e46a0de1655871c8f02f160af\nparent 8b6f3ddf2347509f9ff90c34e48673a25624d6e5\nauthor Aaron Hill <aa1ronham@gmail.com> 1544878917 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1549032235 -0500\n\nFix emitting lint\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09ff0bacef6dd6bc3854f5c0dafff09e3ae22c6e", "html_url": "https://github.com/rust-lang/rust/commit/09ff0bacef6dd6bc3854f5c0dafff09e3ae22c6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09ff0bacef6dd6bc3854f5c0dafff09e3ae22c6e/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b6f3ddf2347509f9ff90c34e48673a25624d6e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b6f3ddf2347509f9ff90c34e48673a25624d6e5", "html_url": "https://github.com/rust-lang/rust/commit/8b6f3ddf2347509f9ff90c34e48673a25624d6e5"}], "stats": {"total": 49, "additions": 31, "deletions": 18}, "files": [{"sha": "dfc4e5b5db45d2bcfe39b2ddf52ebee4c5182c7d", "filename": "src/librustc_privacy/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/09ff0bacef6dd6bc3854f5c0dafff09e3ae22c6e/src%2Flibrustc_privacy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/09ff0bacef6dd6bc3854f5c0dafff09e3ae22c6e/src%2Flibrustc_privacy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2FCargo.toml?ref=09ff0bacef6dd6bc3854f5c0dafff09e3ae22c6e", "patch": "@@ -13,4 +13,5 @@ rustc = { path = \"../librustc\" }\n rustc_typeck = { path = \"../librustc_typeck\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n-rustc_data_structures = { path = \"../librustc_data_structures\" }\n\\ No newline at end of file\n+rustc_data_structures = { path = \"../librustc_data_structures\" }\n+log = \"0.4\""}, {"sha": "ce0a4a654825a9f532c7cbad7a69fc9859ea8d71", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/09ff0bacef6dd6bc3854f5c0dafff09e3ae22c6e/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09ff0bacef6dd6bc3854f5c0dafff09e3ae22c6e/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=09ff0bacef6dd6bc3854f5c0dafff09e3ae22c6e", "patch": "@@ -9,6 +9,7 @@\n \n #[macro_use] extern crate rustc;\n #[macro_use] extern crate syntax;\n+#[macro_use] extern crate log;\n extern crate rustc_typeck;\n extern crate syntax_pos;\n extern crate rustc_data_structures;\n@@ -1451,6 +1452,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n \n struct SearchInterfaceForPrivateItemsVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    item_id: ast::NodeId,\n     item_def_id: DefId,\n     span: Span,\n     /// The visitor checks that each component type is at least this visible.\n@@ -1516,16 +1518,18 @@ impl<'a, 'tcx: 'a> SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n                                    &format!(\"{} (error {})\", msg, err_code));\n             }\n \n-            if self.leaks_private_dep(trait_ref.def_id) {\n-                self.tcx.lint_node(lint::builtin::LEAKED_PRIVATE_DEPENDENCY,\n-                                   node_id,\n-                                   self.span,\n-                                   &format!(\"trait `{}` from private dependency '{}' in public \\\n-                                             interface\", trait_ref,\n-                                             trait_ref.def_id.krate));\n+        }\n+\n+        if self.leaks_private_dep(trait_ref.def_id) {\n+            self.tcx.lint_node(lint::builtin::LEAKED_PRIVATE_DEPENDENCY,\n+                               self.item_id,\n+                               self.span,\n+                               &format!(\"trait `{}` from private dependency '{}' in public \\\n+                                         interface\", trait_ref,\n+                                         self.tcx.crate_name(trait_ref.def_id.krate)));\n \n-            }\n         }\n+\n     }\n \n     /// An item is 'leaked' from a private dependency if all\n@@ -1537,9 +1541,13 @@ impl<'a, 'tcx: 'a> SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n         if !self.tcx.features().public_private_dependencies {\n             return false\n         }\n-        self.required_visibility == ty::Visibility::Public &&\n+        let ret = self.required_visibility == ty::Visibility::Public &&\n             !item_id.is_local() &&\n-            !self.public_crates.contains(&item_id.krate)\n+            !self.public_crates.contains(&item_id.krate);\n+\n+\n+        debug!(\"leaks_private_dep(item_id={:?})={}\", item_id, ret);\n+        return ret;\n     }\n }\n \n@@ -1601,14 +1609,17 @@ impl<'a, 'tcx: 'a> TypeVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'\n                     }\n                 }\n \n-                if self.leaks_private_dep(def_id) {\n-                    self.tcx.lint_node(lint::builtin::LEAKED_PRIVATE_DEPENDENCY,\n-                                       node_id,\n-                                       self.span,\n-                                       &format!(\"type '{}' from private dependency '{}' in \\\n-                                                public interface\", ty, def_id.krate));\n-                }\n             }\n+\n+            if self.leaks_private_dep(def_id) {\n+                self.tcx.lint_node(lint::builtin::LEAKED_PRIVATE_DEPENDENCY,\n+                                   self.item_id,\n+                                   self.span,\n+                                   &format!(\"type '{}' from private dependency '{}' in \\\n+                                            public interface\", ty,\n+                                            self.tcx.crate_name(def_id.krate)));\n+            }\n+\n         }\n \n         ty.super_visit_with(self)\n@@ -1673,6 +1684,7 @@ impl<'a, 'tcx> PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n \n         SearchInterfaceForPrivateItemsVisitor {\n             tcx: self.tcx,\n+            item_id,\n             item_def_id: self.tcx.hir().local_def_id(item_id),\n             span: self.tcx.hir().span(item_id),\n             required_visibility,"}]}