{"sha": "282029526646fc93cd8bc098191c4e110a4c4938", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4MjAyOTUyNjY0NmZjOTNjZDhiYzA5ODE5MWM0ZTExMGE0YzQ5Mzg=", "commit": {"author": {"name": "Stephen M. Coakley", "email": "me@stephencoakley.com", "date": "2017-04-02T03:17:59Z"}, "committer": {"name": "Stephen M. Coakley", "email": "me@stephencoakley.com", "date": "2017-04-03T06:23:52Z"}, "message": "Derive Hash for ThreadId + better example", "tree": {"sha": "8a953426a6c401e07653bd2be0d07849375e69e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a953426a6c401e07653bd2be0d07849375e69e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/282029526646fc93cd8bc098191c4e110a4c4938", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJY4ep9AAoJEJG1nBhJTE/AnyMP/RY54fxfn6sZ4d+LRHXAvQk7\nY5ZV4evuH/28WXvBOjmL/w/FH7EfT1JTp2ieExNiyKe1V4zshXirKU9HXNEjbRD/\n0u6q0dQvCqzPTeGKMu6zEgDdDk42OUZpM6ZpwPTblyNxVRQJCMMQwUwGIE+2tfok\nZGNXhtmwQVNDgABhGzaTv5HAiMR2SrSSDuVENQet3iBBgLOodSbw7bYI8JLC0y7O\nHG4geyo0x5P6xiIxvi4svhr2nI2F+FA31xkBwAF9D1bI38brYbxoSBRbh5llbTfC\no0hBFa4P6DEda+v/pbCwxfDOIsYbkSW0k4EMx2ukViCqyhUlExZ5KWCeIHCqAKur\n7LFtiCgxpawO+2EZA4uuBc+CHbhPN2TLnDgKyBcSASDXDbcE/nosIA5qUu9e8aTv\nTyuM+2Urf8h8PyOB8f2zAVKuz7cAdnfABXJs2VZSwteMQQA04vPAzLOWL6diMQRp\nt5A5mFr8G19elMBd6kdLPnQRKfQT4+01hZCNIYzgT5CXu43qDHkbofpNxf5eBaaz\nhoQW/D7bjulGEdQgtQHHKbWjXCsVB3J0KeiNQNs4mrKaVRfYHFyNTZKL50rinp+F\nRU42I5ZvEIOAFzdmpr7fWatokrnTZsGRlqgdOiUAC4/2RXCt21JLD83J/sM/a4pr\nxYsopi6WssFSbBOjR+Ev\n=Oqp+\n-----END PGP SIGNATURE-----", "payload": "tree 8a953426a6c401e07653bd2be0d07849375e69e9\nparent 5e122f59ba23494d460466cca53c71646d99c767\nauthor Stephen M. Coakley <me@stephencoakley.com> 1491103079 -0500\ncommitter Stephen M. Coakley <me@stephencoakley.com> 1491200632 -0500\n\nDerive Hash for ThreadId + better example\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/282029526646fc93cd8bc098191c4e110a4c4938", "html_url": "https://github.com/rust-lang/rust/commit/282029526646fc93cd8bc098191c4e110a4c4938", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/282029526646fc93cd8bc098191c4e110a4c4938/comments", "author": {"login": "sagebind", "id": 2192863, "node_id": "MDQ6VXNlcjIxOTI4NjM=", "avatar_url": "https://avatars.githubusercontent.com/u/2192863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sagebind", "html_url": "https://github.com/sagebind", "followers_url": "https://api.github.com/users/sagebind/followers", "following_url": "https://api.github.com/users/sagebind/following{/other_user}", "gists_url": "https://api.github.com/users/sagebind/gists{/gist_id}", "starred_url": "https://api.github.com/users/sagebind/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sagebind/subscriptions", "organizations_url": "https://api.github.com/users/sagebind/orgs", "repos_url": "https://api.github.com/users/sagebind/repos", "events_url": "https://api.github.com/users/sagebind/events{/privacy}", "received_events_url": "https://api.github.com/users/sagebind/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sagebind", "id": 2192863, "node_id": "MDQ6VXNlcjIxOTI4NjM=", "avatar_url": "https://avatars.githubusercontent.com/u/2192863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sagebind", "html_url": "https://github.com/sagebind", "followers_url": "https://api.github.com/users/sagebind/followers", "following_url": "https://api.github.com/users/sagebind/following{/other_user}", "gists_url": "https://api.github.com/users/sagebind/gists{/gist_id}", "starred_url": "https://api.github.com/users/sagebind/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sagebind/subscriptions", "organizations_url": "https://api.github.com/users/sagebind/orgs", "repos_url": "https://api.github.com/users/sagebind/repos", "events_url": "https://api.github.com/users/sagebind/events{/privacy}", "received_events_url": "https://api.github.com/users/sagebind/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e122f59ba23494d460466cca53c71646d99c767", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e122f59ba23494d460466cca53c71646d99c767", "html_url": "https://github.com/rust-lang/rust/commit/5e122f59ba23494d460466cca53c71646d99c767"}], "stats": {"total": 30, "additions": 13, "deletions": 17}, "files": [{"sha": "21f9757ad116b09987c3a997603056786ba21fb0", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/282029526646fc93cd8bc098191c4e110a4c4938/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282029526646fc93cd8bc098191c4e110a4c4938/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=282029526646fc93cd8bc098191c4e110a4c4938", "patch": "@@ -652,8 +652,8 @@ pub fn park_timeout(dur: Duration) {\n /// A unique identifier for a running thread.\n ///\n /// A `ThreadId` is an opaque object that has a unique value for each thread\n-/// that creates one. `ThreadId`s do not correspond to a thread's system-\n-/// designated identifier.\n+/// that creates one. `ThreadId`s are not guaranteed to correspond to a thread's\n+/// system-designated identifier.\n ///\n /// # Examples\n ///\n@@ -662,17 +662,15 @@ pub fn park_timeout(dur: Duration) {\n ///\n /// use std::thread;\n ///\n-/// let handler = thread::Builder::new()\n-///     .spawn(|| {\n-///         let thread = thread::current();\n-///         let thread_id = thread.id();\n-///     })\n-///     .unwrap();\n+/// let other_thread = thread::spawn(|| {\n+///     thread::current().id()\n+/// });\n ///\n-/// handler.join().unwrap();\n+/// let other_thread_id = other_thread.join().unwrap();\n+/// assert!(thread::current().id() != other_thread_id);\n /// ```\n #[unstable(feature = \"thread_id\", issue = \"21507\")]\n-#[derive(Eq, PartialEq, Copy, Clone)]\n+#[derive(Clone, Copy, Eq, PartialEq, Hash)]\n pub struct ThreadId(u64);\n \n impl ThreadId {\n@@ -795,14 +793,12 @@ impl Thread {\n     ///\n     /// use std::thread;\n     ///\n-    /// let handler = thread::Builder::new()\n-    ///     .spawn(|| {\n-    ///         let thread = thread::current();\n-    ///         println!(\"thread id: {:?}\", thread.id());\n-    ///     })\n-    ///     .unwrap();\n+    /// let other_thread = thread::spawn(|| {\n+    ///     thread::current().id()\n+    /// });\n     ///\n-    /// handler.join().unwrap();\n+    /// let other_thread_id = other_thread.join().unwrap();\n+    /// assert!(thread::current().id() != other_thread_id);\n     /// ```\n     #[unstable(feature = \"thread_id\", issue = \"21507\")]\n     pub fn id(&self) -> ThreadId {"}]}