{"sha": "e36f557e4d0f591888dab84c9b5d5d47b0ea6c83", "node_id": "C_kwDOAAsO6NoAKGUzNmY1NTdlNGQwZjU5MTg4OGRhYjg0YzliNWQ1ZDQ3YjBlYTZjODM", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2022-01-01T16:51:13Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2022-01-01T17:04:09Z"}, "message": "internal: add more prefix entry point tests", "tree": {"sha": "2e655ef94a1da5335fff7e2c627128262dbcea11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e655ef94a1da5335fff7e2c627128262dbcea11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e36f557e4d0f591888dab84c9b5d5d47b0ea6c83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e36f557e4d0f591888dab84c9b5d5d47b0ea6c83", "html_url": "https://github.com/rust-lang/rust/commit/e36f557e4d0f591888dab84c9b5d5d47b0ea6c83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e36f557e4d0f591888dab84c9b5d5d47b0ea6c83/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c210a49b6871f9bd903f1d36a95b6f2de24429d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c210a49b6871f9bd903f1d36a95b6f2de24429d", "html_url": "https://github.com/rust-lang/rust/commit/9c210a49b6871f9bd903f1d36a95b6f2de24429d"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "d52c6fbb16fd2a181a9037c9aff2d494b9315efe", "filename": "crates/parser/src/tests/entries.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e36f557e4d0f591888dab84c9b5d5d47b0ea6c83/crates%2Fparser%2Fsrc%2Ftests%2Fentries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36f557e4d0f591888dab84c9b5d5d47b0ea6c83/crates%2Fparser%2Fsrc%2Ftests%2Fentries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftests%2Fentries.rs?ref=e36f557e4d0f591888dab84c9b5d5d47b0ea6c83", "patch": "@@ -59,10 +59,30 @@ fn path() {\n     check_prefix(PrefixEntryPoint::Path, \"foo::<> baz\", \"foo::<>\");\n     check_prefix(PrefixEntryPoint::Path, \"foo<> baz\", \"foo<>\");\n     check_prefix(PrefixEntryPoint::Path, \"Fn() -> i32?\", \"Fn() -> i32\");\n-    // FIXME: this shouldn't be accepted as path actually.\n+    // FIXME: This shouldn't be accepted as path actually.\n     check_prefix(PrefixEntryPoint::Path, \"<_>::foo\", \"<_>::foo\");\n }\n \n+#[test]\n+fn item() {\n+    // FIXME: This shouldn't consume the semicolon.\n+    check_prefix(PrefixEntryPoint::Item, \"fn foo() {};\", \"fn foo() {};\");\n+    check_prefix(PrefixEntryPoint::Item, \"#[attr] pub struct S {} 92\", \"#[attr] pub struct S {}\");\n+    check_prefix(PrefixEntryPoint::Item, \"item!{}?\", \"item!{}\");\n+    check_prefix(PrefixEntryPoint::Item, \"????\", \"?\");\n+}\n+\n+#[test]\n+fn meta_item() {\n+    check_prefix(PrefixEntryPoint::MetaItem, \"attr, \", \"attr\");\n+    check_prefix(\n+        PrefixEntryPoint::MetaItem,\n+        \"attr(some token {stream});\",\n+        \"attr(some token {stream})\",\n+    );\n+    check_prefix(PrefixEntryPoint::MetaItem, \"path::attr = 2 * 2!\", \"path::attr = 2 * 2\");\n+}\n+\n fn check_prefix(entry: PrefixEntryPoint, input: &str, prefix: &str) {\n     let lexed = LexedStr::new(input);\n     let input = lexed.to_input();"}]}