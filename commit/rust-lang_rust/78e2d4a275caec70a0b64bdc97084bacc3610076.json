{"sha": "78e2d4a275caec70a0b64bdc97084bacc3610076", "node_id": "C_kwDOAAsO6NoAKDc4ZTJkNGEyNzVjYWVjNzBhMGI2NGJkYzk3MDg0YmFjYzM2MTAwNzY", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-09T16:39:00Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-09T16:39:00Z"}, "message": "Remove support for vector icmp for now\n\nReal simd support will need an overhaul in the future anyway. For now it\nonly complicates the code.", "tree": {"sha": "02e9109ca7871c22a9b070dd47196a85f44f29a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02e9109ca7871c22a9b070dd47196a85f44f29a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78e2d4a275caec70a0b64bdc97084bacc3610076", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78e2d4a275caec70a0b64bdc97084bacc3610076", "html_url": "https://github.com/rust-lang/rust/commit/78e2d4a275caec70a0b64bdc97084bacc3610076", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78e2d4a275caec70a0b64bdc97084bacc3610076/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ace43e65012a5e4a3e07d399a2a5832e18cf917", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ace43e65012a5e4a3e07d399a2a5832e18cf917", "html_url": "https://github.com/rust-lang/rust/commit/8ace43e65012a5e4a3e07d399a2a5832e18cf917"}], "stats": {"total": 46, "additions": 15, "deletions": 31}, "files": [{"sha": "443e2954e5117a8bb2bc9015e12da578fd03f79c", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 15, "deletions": 31, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/78e2d4a275caec70a0b64bdc97084bacc3610076/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e2d4a275caec70a0b64bdc97084bacc3610076/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=78e2d4a275caec70a0b64bdc97084bacc3610076", "patch": "@@ -17,37 +17,21 @@ fn validate_simd_type(fx: &mut FunctionCx<'_, '_, '_>, intrinsic: Symbol, span:\n \n macro simd_cmp {\n     ($fx:expr, $cc:ident|$cc_f:ident($x:ident, $y:ident) -> $ret:ident) => {\n-        let vector_ty = clif_vector_type($fx.tcx, $x.layout());\n-\n-        if let Some(vector_ty) = vector_ty {\n-            let x = $x.load_scalar($fx);\n-            let y = $y.load_scalar($fx);\n-            let val = if vector_ty.lane_type().is_float() {\n-                $fx.bcx.ins().fcmp(FloatCC::$cc_f, x, y)\n-            } else {\n-                $fx.bcx.ins().icmp(IntCC::$cc, x, y)\n-            };\n-\n-            // HACK This depends on the fact that icmp for vectors represents bools as 0 and !0, not 0 and 1.\n-            let val = $fx.bcx.ins().raw_bitcast(vector_ty, val);\n-\n-            $ret.write_cvalue($fx, CValue::by_val(val, $ret.layout()));\n-        } else {\n-            simd_pair_for_each_lane(\n-                $fx,\n-                $x,\n-                $y,\n-                $ret,\n-                |fx, lane_layout, res_lane_layout, x_lane, y_lane| {\n-                    let res_lane = match lane_layout.ty.kind() {\n-                        ty::Uint(_) | ty::Int(_) => fx.bcx.ins().icmp(IntCC::$cc, x_lane, y_lane),\n-                        ty::Float(_) => fx.bcx.ins().fcmp(FloatCC::$cc_f, x_lane, y_lane),\n-                        _ => unreachable!(\"{:?}\", lane_layout.ty),\n-                    };\n-                    bool_to_zero_or_max_uint(fx, res_lane_layout, res_lane)\n-                },\n-            );\n-        }\n+        // FIXME use vector icmp when possible\n+        simd_pair_for_each_lane(\n+            $fx,\n+            $x,\n+            $y,\n+            $ret,\n+            |fx, lane_layout, res_lane_layout, x_lane, y_lane| {\n+                let res_lane = match lane_layout.ty.kind() {\n+                    ty::Uint(_) | ty::Int(_) => fx.bcx.ins().icmp(IntCC::$cc, x_lane, y_lane),\n+                    ty::Float(_) => fx.bcx.ins().fcmp(FloatCC::$cc_f, x_lane, y_lane),\n+                    _ => unreachable!(\"{:?}\", lane_layout.ty),\n+                };\n+                bool_to_zero_or_max_uint(fx, res_lane_layout, res_lane)\n+            },\n+        );\n     },\n     ($fx:expr, $cc_u:ident|$cc_s:ident|$cc_f:ident($x:ident, $y:ident) -> $ret:ident) => {\n         // FIXME use vector icmp when possible"}]}