{"sha": "5bda576cd6b3be40f62a37e134ee7245e911fb8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViZGE1NzZjZDZiM2JlNDBmNjJhMzdlMTM0ZWU3MjQ1ZTkxMWZiOGI=", "commit": {"author": {"name": "James Miller", "email": "james@aatch.net", "date": "2016-04-20T23:43:01Z"}, "committer": {"name": "James Miller", "email": "james@aatch.net", "date": "2016-04-28T01:18:51Z"}, "message": "Factor out function call checking to a helper method\n\nThe logic for checking `call` and `invoke` instructions was duplicated\nbetween them, so factor it out to a helper method.", "tree": {"sha": "b77d3878178ac2988cab06677dbc4ebcc81dde68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b77d3878178ac2988cab06677dbc4ebcc81dde68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bda576cd6b3be40f62a37e134ee7245e911fb8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bda576cd6b3be40f62a37e134ee7245e911fb8b", "html_url": "https://github.com/rust-lang/rust/commit/5bda576cd6b3be40f62a37e134ee7245e911fb8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bda576cd6b3be40f62a37e134ee7245e911fb8b/comments", "author": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5d7783546f938c7c2903b4d5143ff8e8e612674", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5d7783546f938c7c2903b4d5143ff8e8e612674", "html_url": "https://github.com/rust-lang/rust/commit/b5d7783546f938c7c2903b4d5143ff8e8e612674"}], "stats": {"total": 79, "additions": 30, "deletions": 49}, "files": [{"sha": "9f032cdbfe5130fa42b2dff8a9e2b289150179c2", "filename": "src/librustc_trans/builder.rs", "status": "modified", "additions": 29, "deletions": 48, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/5bda576cd6b3be40f62a37e134ee7245e911fb8b/src%2Flibrustc_trans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bda576cd6b3be40f62a37e134ee7245e911fb8b/src%2Flibrustc_trans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbuilder.rs?ref=5bda576cd6b3be40f62a37e134ee7245e911fb8b", "patch": "@@ -175,30 +175,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                    .collect::<Vec<String>>()\n                    .join(\", \"));\n \n-        if cfg!(debug_assertions) {\n-            let mut fn_ty = val_ty(llfn);\n-            // Strip off pointers\n-            while fn_ty.kind() == llvm::TypeKind::Pointer {\n-                fn_ty = fn_ty.element_type();\n-            }\n-\n-            assert!(fn_ty.kind() == llvm::TypeKind::Function,\n-                    \"builder::invoke not passed a function\");\n-\n-            let param_tys = fn_ty.func_params();\n-\n-            let iter = param_tys.into_iter()\n-                .zip(args.iter().map(|&v| val_ty(v)));\n-            for (i, (expected_ty, actual_ty)) in iter.enumerate() {\n-                if expected_ty != actual_ty {\n-                    bug!(\"Type mismatch in invoke of {:?}. \\\n-                      Expected {:?} for param {}, got {:?}\",\n-                     Value(llfn),\n-                     expected_ty, i, actual_ty);\n-\n-                }\n-            }\n-        }\n+        check_call(\"invoke\", llfn, args);\n \n         let bundle = bundle.as_ref().map(|b| b.raw()).unwrap_or(0 as *mut _);\n \n@@ -880,30 +857,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                    .collect::<Vec<String>>()\n                    .join(\", \"));\n \n-        if cfg!(debug_assertions) {\n-            let mut fn_ty = val_ty(llfn);\n-            // Strip off pointers\n-            while fn_ty.kind() == llvm::TypeKind::Pointer {\n-                fn_ty = fn_ty.element_type();\n-            }\n-\n-            assert!(fn_ty.kind() == llvm::TypeKind::Function,\n-                    \"builder::call not passed a function\");\n-\n-            let param_tys = fn_ty.func_params();\n-\n-            let iter = param_tys.into_iter()\n-                .zip(args.iter().map(|&v| val_ty(v)));\n-            for (i, (expected_ty, actual_ty)) in iter.enumerate() {\n-                if expected_ty != actual_ty {\n-                    bug!(\"Type mismatch in function call of {:?}. \\\n-                      Expected {:?} for param {}, got {:?}\",\n-                     Value(llfn),\n-                     expected_ty, i, actual_ty);\n-\n-                }\n-            }\n-        }\n+        check_call(\"call\", llfn, args);\n \n         let bundle = bundle.as_ref().map(|b| b.raw()).unwrap_or(0 as *mut _);\n \n@@ -1147,3 +1101,30 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n     }\n }\n+\n+fn check_call(typ: &str, llfn: ValueRef, args: &[ValueRef]) {\n+    if cfg!(debug_assertions) {\n+        let mut fn_ty = val_ty(llfn);\n+        // Strip off pointers\n+        while fn_ty.kind() == llvm::TypeKind::Pointer {\n+            fn_ty = fn_ty.element_type();\n+        }\n+\n+        assert!(fn_ty.kind() == llvm::TypeKind::Function,\n+                \"builder::{} not passed a function\", typ);\n+\n+        let param_tys = fn_ty.func_params();\n+\n+        let iter = param_tys.into_iter()\n+            .zip(args.iter().map(|&v| val_ty(v)));\n+        for (i, (expected_ty, actual_ty)) in iter.enumerate() {\n+            if expected_ty != actual_ty {\n+                bug!(\"Type mismatch in function call of {:?}. \\\n+                      Expected {:?} for param {}, got {:?}\",\n+                     Value(llfn),\n+                     expected_ty, i, actual_ty);\n+\n+            }\n+        }\n+    }\n+}"}, {"sha": "d0b47934bcf16baae773ca6ee71e7d5df9b39401", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bda576cd6b3be40f62a37e134ee7245e911fb8b/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bda576cd6b3be40f62a37e134ee7245e911fb8b/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=5bda576cd6b3be40f62a37e134ee7245e911fb8b", "patch": "@@ -444,7 +444,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                            \"bad final argument to \\\"rust-call\\\" fn {:?}\", tuple.ty)\n         };\n \n-        // Handle both by-ref and immediate tuples. This gives us the option of\n+        // Handle both by-ref and immediate tuples.\n         match tuple.val {\n             Ref(llval) => {\n                 let base_repr = adt::represent_type(bcx.ccx(), tuple.ty);"}]}