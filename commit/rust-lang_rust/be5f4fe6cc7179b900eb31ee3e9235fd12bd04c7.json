{"sha": "be5f4fe6cc7179b900eb31ee3e9235fd12bd04c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlNWY0ZmU2Y2M3MTc5YjkwMGViMzFlZTNlOTIzNWZkMTJiZDA0Yzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-29T09:04:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-29T09:04:08Z"}, "message": "Auto merge of #42262 - Mark-Simulacrum:issue-40350, r=eddyb\n\nDon't ICE with nested enums in missing docs lint.\n\nFixes #40350.", "tree": {"sha": "308f4d1790d5ca8996329b386537d9554da064c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/308f4d1790d5ca8996329b386537d9554da064c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be5f4fe6cc7179b900eb31ee3e9235fd12bd04c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be5f4fe6cc7179b900eb31ee3e9235fd12bd04c7", "html_url": "https://github.com/rust-lang/rust/commit/be5f4fe6cc7179b900eb31ee3e9235fd12bd04c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be5f4fe6cc7179b900eb31ee3e9235fd12bd04c7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "911192764ddfe7a869c75d9167a8e95bcc3b8684", "url": "https://api.github.com/repos/rust-lang/rust/commits/911192764ddfe7a869c75d9167a8e95bcc3b8684", "html_url": "https://github.com/rust-lang/rust/commit/911192764ddfe7a869c75d9167a8e95bcc3b8684"}, {"sha": "918875f32dfeb1d983bb2eabce482e173bebcf84", "url": "https://api.github.com/repos/rust-lang/rust/commits/918875f32dfeb1d983bb2eabce482e173bebcf84", "html_url": "https://github.com/rust-lang/rust/commit/918875f32dfeb1d983bb2eabce482e173bebcf84"}], "stats": {"total": 73, "additions": 29, "deletions": 44}, "files": [{"sha": "58c53c5b4b98c7168c0eb976a901629a52cd339d", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 5, "deletions": 44, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/be5f4fe6cc7179b900eb31ee3e9235fd12bd04c7/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5f4fe6cc7179b900eb31ee3e9235fd12bd04c7/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=be5f4fe6cc7179b900eb31ee3e9235fd12bd04c7", "patch": "@@ -259,12 +259,6 @@ declare_lint! {\n }\n \n pub struct MissingDoc {\n-    /// Stack of IDs of struct definitions.\n-    struct_def_stack: Vec<ast::NodeId>,\n-\n-    /// True if inside variant definition\n-    in_variant: bool,\n-\n     /// Stack of whether #[doc(hidden)] is set\n     /// at each level which has lint attributes.\n     doc_hidden_stack: Vec<bool>,\n@@ -276,8 +270,6 @@ pub struct MissingDoc {\n impl MissingDoc {\n     pub fn new() -> MissingDoc {\n         MissingDoc {\n-            struct_def_stack: vec![],\n-            in_variant: false,\n             doc_hidden_stack: vec![false],\n             private_traits: HashSet::new(),\n         }\n@@ -345,25 +337,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n         self.doc_hidden_stack.pop().expect(\"empty doc_hidden_stack\");\n     }\n \n-    fn check_struct_def(&mut self,\n-                        _: &LateContext,\n-                        _: &hir::VariantData,\n-                        _: ast::Name,\n-                        _: &hir::Generics,\n-                        item_id: ast::NodeId) {\n-        self.struct_def_stack.push(item_id);\n-    }\n-\n-    fn check_struct_def_post(&mut self,\n-                             _: &LateContext,\n-                             _: &hir::VariantData,\n-                             _: ast::Name,\n-                             _: &hir::Generics,\n-                             item_id: ast::NodeId) {\n-        let popped = self.struct_def_stack.pop().expect(\"empty struct_def_stack\");\n-        assert!(popped == item_id);\n-    }\n-\n     fn check_crate(&mut self, cx: &LateContext, krate: &hir::Crate) {\n         self.check_missing_docs_attrs(cx, None, &krate.attrs, krate.span, \"crate\");\n     }\n@@ -451,16 +424,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n \n     fn check_struct_field(&mut self, cx: &LateContext, sf: &hir::StructField) {\n         if !sf.is_positional() {\n-            if sf.vis == hir::Public || self.in_variant {\n-                let cur_struct_def = *self.struct_def_stack\n-                    .last()\n-                    .expect(\"empty struct_def_stack\");\n-                self.check_missing_docs_attrs(cx,\n-                                              Some(cur_struct_def),\n-                                              &sf.attrs,\n-                                              sf.span,\n-                                              \"a struct field\")\n-            }\n+            self.check_missing_docs_attrs(cx,\n+                                          Some(sf.id),\n+                                          &sf.attrs,\n+                                          sf.span,\n+                                          \"a struct field\")\n         }\n     }\n \n@@ -470,13 +438,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n                                       &v.node.attrs,\n                                       v.span,\n                                       \"a variant\");\n-        assert!(!self.in_variant);\n-        self.in_variant = true;\n-    }\n-\n-    fn check_variant_post(&mut self, _: &LateContext, _: &hir::Variant, _: &hir::Generics) {\n-        assert!(self.in_variant);\n-        self.in_variant = false;\n     }\n }\n "}, {"sha": "39249ee4718b1017553fc3dff98b9e5570e8dd06", "filename": "src/test/compile-fail/issue-40350.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/be5f4fe6cc7179b900eb31ee3e9235fd12bd04c7/src%2Ftest%2Fcompile-fail%2Fissue-40350.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5f4fe6cc7179b900eb31ee3e9235fd12bd04c7/src%2Ftest%2Fcompile-fail%2Fissue-40350.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-40350.rs?ref=be5f4fe6cc7179b900eb31ee3e9235fd12bd04c7", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+#![allow(warnings)]\n+\n+enum E {\n+    A = {\n+        enum F { B }\n+        0\n+    }\n+}\n+\n+#[rustc_error]\n+fn main() {}\n+//~^ ERROR compilation successful\n+"}]}