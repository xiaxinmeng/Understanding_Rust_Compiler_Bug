{"sha": "eb086505b805792a6afe67a644cde6b4ab002f14", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViMDg2NTA1YjgwNTc5MmE2YWZlNjdhNjQ0Y2RlNmI0YWIwMDJmMTQ=", "commit": {"author": {"name": "Diggory Blake", "email": "diggsey@googlemail.com", "date": "2015-01-21T04:35:57Z"}, "committer": {"name": "Diggory Blake", "email": "diggsey@googlemail.com", "date": "2015-01-21T04:35:57Z"}, "message": "Display negative trait implementations correctly in rustdoc\n\nAdded doc test", "tree": {"sha": "7dab95c3c469a9cac80815977b12998582a3f665", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7dab95c3c469a9cac80815977b12998582a3f665"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb086505b805792a6afe67a644cde6b4ab002f14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb086505b805792a6afe67a644cde6b4ab002f14", "html_url": "https://github.com/rust-lang/rust/commit/eb086505b805792a6afe67a644cde6b4ab002f14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb086505b805792a6afe67a644cde6b4ab002f14/comments", "author": {"login": "Diggsey", "id": 451321, "node_id": "MDQ6VXNlcjQ1MTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/451321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Diggsey", "html_url": "https://github.com/Diggsey", "followers_url": "https://api.github.com/users/Diggsey/followers", "following_url": "https://api.github.com/users/Diggsey/following{/other_user}", "gists_url": "https://api.github.com/users/Diggsey/gists{/gist_id}", "starred_url": "https://api.github.com/users/Diggsey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Diggsey/subscriptions", "organizations_url": "https://api.github.com/users/Diggsey/orgs", "repos_url": "https://api.github.com/users/Diggsey/repos", "events_url": "https://api.github.com/users/Diggsey/events{/privacy}", "received_events_url": "https://api.github.com/users/Diggsey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Diggsey", "id": 451321, "node_id": "MDQ6VXNlcjQ1MTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/451321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Diggsey", "html_url": "https://github.com/Diggsey", "followers_url": "https://api.github.com/users/Diggsey/followers", "following_url": "https://api.github.com/users/Diggsey/following{/other_user}", "gists_url": "https://api.github.com/users/Diggsey/gists{/gist_id}", "starred_url": "https://api.github.com/users/Diggsey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Diggsey/subscriptions", "organizations_url": "https://api.github.com/users/Diggsey/orgs", "repos_url": "https://api.github.com/users/Diggsey/repos", "events_url": "https://api.github.com/users/Diggsey/events{/privacy}", "received_events_url": "https://api.github.com/users/Diggsey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0f86de49748b472d4d189d9688b0d856c000914", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0f86de49748b472d4d189d9688b0d856c000914", "html_url": "https://github.com/rust-lang/rust/commit/a0f86de49748b472d4d189d9688b0d856c000914"}], "stats": {"total": 51, "additions": 51, "deletions": 0}, "files": [{"sha": "519292fa9e067cebeb3386217e21d34c903e960d", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb086505b805792a6afe67a644cde6b4ab002f14/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb086505b805792a6afe67a644cde6b4ab002f14/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=eb086505b805792a6afe67a644cde6b4ab002f14", "patch": "@@ -317,6 +317,7 @@ fn build_impl(cx: &DocContext, tcx: &ty::ctxt,\n             }\n         }\n     }).collect();\n+    let polarity = csearch::get_impl_polarity(tcx, did);\n     return Some(clean::Item {\n         inner: clean::ImplItem(clean::Impl {\n             derived: clean::detect_derived(attrs.as_slice()),\n@@ -329,6 +330,7 @@ fn build_impl(cx: &DocContext, tcx: &ty::ctxt,\n             for_: ty.ty.clean(cx),\n             generics: (&ty.generics, subst::TypeSpace).clean(cx),\n             items: trait_items,\n+            polarity: polarity.map(|p| { p.clean(cx) }),\n         }),\n         source: clean::Span::empty(),\n         name: None,"}, {"sha": "db945fe9a7bc9d934765b66531c3900df427474a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/eb086505b805792a6afe67a644cde6b4ab002f14/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb086505b805792a6afe67a644cde6b4ab002f14/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=eb086505b805792a6afe67a644cde6b4ab002f14", "patch": "@@ -2082,13 +2082,29 @@ impl Clean<Mutability> for ast::Mutability {\n     }\n }\n \n+#[derive(Show, Clone, RustcEncodable, RustcDecodable, PartialEq, Copy)]\n+pub enum ImplPolarity {\n+    Positive,\n+    Negative,\n+}\n+\n+impl Clean<ImplPolarity> for ast::ImplPolarity {\n+    fn clean(&self, _: &DocContext) -> ImplPolarity {\n+        match self {\n+            &ast::ImplPolarity::Positive => ImplPolarity::Positive,\n+            &ast::ImplPolarity::Negative => ImplPolarity::Negative,\n+        }\n+    }\n+}\n+\n #[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct Impl {\n     pub generics: Generics,\n     pub trait_: Option<Type>,\n     pub for_: Type,\n     pub items: Vec<Item>,\n     pub derived: bool,\n+    pub polarity: Option<ImplPolarity>,\n }\n \n fn detect_derived<M: AttrMetaMethods>(attrs: &[M]) -> bool {\n@@ -2115,6 +2131,7 @@ impl Clean<Item> for doctree::Impl {\n                         }\n                     }).collect(),\n                 derived: detect_derived(self.attrs.as_slice()),\n+                polarity: Some(self.polarity.clean(cx)),\n             }),\n         }\n     }"}, {"sha": "9e94db3317132e3af7f64154b22331e8496bd878", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb086505b805792a6afe67a644cde6b4ab002f14/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb086505b805792a6afe67a644cde6b4ab002f14/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=eb086505b805792a6afe67a644cde6b4ab002f14", "patch": "@@ -2085,6 +2085,10 @@ fn render_impl(w: &mut fmt::Formatter, i: &Impl) -> fmt::Result {\n     try!(write!(w, \"<h3 class='impl'>{}<code>impl{} \",\n                 ConciseStability(&i.stability),\n                 i.impl_.generics));\n+    match i.impl_.polarity {\n+        Some(clean::ImplPolarity::Negative) => try!(write!(w, \"!\")),\n+        _ => {}\n+    }\n     match i.impl_.trait_ {\n         Some(ref ty) => try!(write!(w, \"{} for \", *ty)),\n         None => {}"}, {"sha": "1316ee256e147d8e5eedbd72572910dc58b88e00", "filename": "src/test/run-make/rustdoc-negative-impl/Makefile", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb086505b805792a6afe67a644cde6b4ab002f14/src%2Ftest%2Frun-make%2Frustdoc-negative-impl%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/eb086505b805792a6afe67a644cde6b4ab002f14/src%2Ftest%2Frun-make%2Frustdoc-negative-impl%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-negative-impl%2FMakefile?ref=eb086505b805792a6afe67a644cde6b4ab002f14", "patch": "@@ -0,0 +1,6 @@\n+-include ../tools.mk\n+\n+all: foo.rs\n+\t$(HOST_RPATH_ENV) $(RUSTDOC) -w html -o $(TMPDIR)/doc foo.rs\n+\t$(HTMLDOCCK) $(TMPDIR)/doc foo.rs\n+"}, {"sha": "eaa3af8656371981d8cc78d6351a915b720591ed", "filename": "src/test/run-make/rustdoc-negative-impl/foo.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/eb086505b805792a6afe67a644cde6b4ab002f14/src%2Ftest%2Frun-make%2Frustdoc-negative-impl%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb086505b805792a6afe67a644cde6b4ab002f14/src%2Ftest%2Frun-make%2Frustdoc-negative-impl%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-negative-impl%2Ffoo.rs?ref=eb086505b805792a6afe67a644cde6b4ab002f14", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(optin_builtin_traits)]\n+\n+// @matches foo/struct.Alpha.html '//pre' \"pub struct Alpha\"\n+pub struct Alpha;\n+// @matches foo/struct.Bravo.html '//pre' \"pub struct Bravo<B>\"\n+pub struct Bravo<B>;\n+\n+// @matches foo/struct.Alpha.html '//*[@class=\"impl\"]//code' \"impl !.*Send.* for .*Alpha\"\n+impl !Send for Alpha {}\n+\n+// @matches foo/struct.Bravo.html '//*[@class=\"impl\"]//code' \"impl<B> !.*Send.* for .*Bravo.*<B>\"\n+impl<B> !Send for Bravo<B> {}"}]}