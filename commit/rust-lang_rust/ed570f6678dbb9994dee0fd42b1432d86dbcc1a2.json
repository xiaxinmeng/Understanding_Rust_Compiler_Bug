{"sha": "ed570f6678dbb9994dee0fd42b1432d86dbcc1a2", "node_id": "C_kwDOAAsO6NoAKGVkNTcwZjY2NzhkYmI5OTk0ZGVlMGZkNDJiMTQzMmQ4NmRiY2MxYTI", "commit": {"author": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-09-30T21:45:42Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-10-01T16:31:39Z"}, "message": "Fix gep", "tree": {"sha": "190d5f416e064a6b1976c877e3a51095450e3d36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/190d5f416e064a6b1976c877e3a51095450e3d36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed570f6678dbb9994dee0fd42b1432d86dbcc1a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed570f6678dbb9994dee0fd42b1432d86dbcc1a2", "html_url": "https://github.com/rust-lang/rust/commit/ed570f6678dbb9994dee0fd42b1432d86dbcc1a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed570f6678dbb9994dee0fd42b1432d86dbcc1a2/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12105bc0d7664998f8caa45252cf8e8d1c2b38fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/12105bc0d7664998f8caa45252cf8e8d1c2b38fc", "html_url": "https://github.com/rust-lang/rust/commit/12105bc0d7664998f8caa45252cf8e8d1c2b38fc"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "aa4c6f2f83723ebc9b792fc3a7f3e48fe5a51423", "filename": "src/builder.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ed570f6678dbb9994dee0fd42b1432d86dbcc1a2/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed570f6678dbb9994dee0fd42b1432d86dbcc1a2/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=ed570f6678dbb9994dee0fd42b1432d86dbcc1a2", "patch": "@@ -858,16 +858,25 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n     }\n \n     fn gep(&mut self, _typ: Type<'gcc>, ptr: RValue<'gcc>, indices: &[RValue<'gcc>]) -> RValue<'gcc> {\n-        let mut result = ptr;\n+        let ptr_type = ptr.get_type();\n+        let mut pointee_type = ptr.get_type();\n+        // NOTE: we cannot use array indexing here like in inbounds_gep because array indexing is\n+        // always considered in bounds in GCC (TODO(antoyo): to be verified).\n+        // So, we have to cast to a number.\n+        let mut result = self.context.new_bitcast(None, ptr, self.sizet_type);\n+        // FIXME(antoyo): if there were more than 1 index, this code is probably wrong and would\n+        // require dereferencing the pointer.\n         for index in indices {\n-            result = self.context.new_array_access(None, result, *index).get_address(None).to_rvalue();\n+            pointee_type = pointee_type.get_pointee().expect(\"pointee type\");\n+            let pointee_size = self.context.new_rvalue_from_int(index.get_type(), pointee_type.get_size() as i32);\n+            result = result + self.gcc_int_cast(*index * pointee_size, self.sizet_type);\n         }\n-        result\n+        self.context.new_bitcast(None, result, ptr_type)\n     }\n \n     fn inbounds_gep(&mut self, _typ: Type<'gcc>, ptr: RValue<'gcc>, indices: &[RValue<'gcc>]) -> RValue<'gcc> {\n-        // FIXME(antoyo): would be safer if doing the same thing (loop) as gep.\n-        // TODO(antoyo): specify inbounds somehow.\n+        // NOTE: array indexing is always considered in bounds in GCC (TODO(antoyo): to be verified).\n+        // TODO: replace with a loop like gep.\n         match indices.len() {\n             1 => {\n                 self.context.new_array_access(None, ptr, indices[0]).get_address(None)"}]}