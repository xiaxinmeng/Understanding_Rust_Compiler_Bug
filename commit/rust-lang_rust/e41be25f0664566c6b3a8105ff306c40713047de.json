{"sha": "e41be25f0664566c6b3a8105ff306c40713047de", "node_id": "C_kwDOAAsO6NoAKGU0MWJlMjVmMDY2NDU2NmM2YjNhODEwNWZmMzA2YzQwNzEzMDQ3ZGU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-09T12:04:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-09T12:04:51Z"}, "message": "Rollup merge of #99787 - aDotInTheVoid:rdj-dyn, r=camelid,notriddle,GuillaumeGomez\n\nRustdoc-Json: Document HRTB's on DynTrait\n\nCloses https://github.com/rust-lang/rust/issues/99118\n\nProbably best reviewed commit by commit.\n\n`@rustbot` modify labels: +A-rustdoc-json\n\ncc `@Enselic`\n\nr? `@CraftSpider`", "tree": {"sha": "4f694f84f53b21d4643352f1b9be0238b3f92a02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f694f84f53b21d4643352f1b9be0238b3f92a02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e41be25f0664566c6b3a8105ff306c40713047de", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi8k1jCRBK7hj4Ov3rIwAAyOgIAA906bdIA/RsAVfQRJ7QDYoh\nDjsE/L+itOK3lWYm2zRQPeTlWh3HZ4zbM6AyTB64am25Pjpif2BSKAHhzTPXEnlj\nATHGOPaCgcQOVATrarU1K8BP9rM50gxW3CGR6fCpm6Jhvzn9Ryg8OUuIGHACV2E8\nS0vgYDIC3jnl4ghYxZ9E1VxatSkDHqoIIPdPfckv0VGhG/r2EriSstX2ijAtGaUc\nihW57ozW1ObSSR94rHCZb7OmE78sdE5J616wz/tGxD2lNoy9fCI6Z92EnixX8t5/\nlLx6RbdpdZZVWl37b37/zIBfo85FXt60TNZ1mOoF4UEsMt4uxxXvvtnnkTKNNnQ=\n=Nhvu\n-----END PGP SIGNATURE-----\n", "payload": "tree 4f694f84f53b21d4643352f1b9be0238b3f92a02\nparent 1dc485891479f5cbe07b6b87ae227fd54e5d3805\nparent 6290f92d07fd7ecdbd2f752fde9b12f926b592fa\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1660046691 +0530\ncommitter GitHub <noreply@github.com> 1660046691 +0530\n\nRollup merge of #99787 - aDotInTheVoid:rdj-dyn, r=camelid,notriddle,GuillaumeGomez\n\nRustdoc-Json: Document HRTB's on DynTrait\n\nCloses https://github.com/rust-lang/rust/issues/99118\n\nProbably best reviewed commit by commit.\n\n`@rustbot` modify labels: +A-rustdoc-json\n\ncc `@Enselic`\n\nr? `@CraftSpider`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e41be25f0664566c6b3a8105ff306c40713047de", "html_url": "https://github.com/rust-lang/rust/commit/e41be25f0664566c6b3a8105ff306c40713047de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e41be25f0664566c6b3a8105ff306c40713047de/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dc485891479f5cbe07b6b87ae227fd54e5d3805", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dc485891479f5cbe07b6b87ae227fd54e5d3805", "html_url": "https://github.com/rust-lang/rust/commit/1dc485891479f5cbe07b6b87ae227fd54e5d3805"}, {"sha": "6290f92d07fd7ecdbd2f752fde9b12f926b592fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/6290f92d07fd7ecdbd2f752fde9b12f926b592fa", "html_url": "https://github.com/rust-lang/rust/commit/6290f92d07fd7ecdbd2f752fde9b12f926b592fa"}], "stats": {"total": 236, "additions": 159, "deletions": 77}, "files": [{"sha": "a705e2384959f1b8ad56db2d1a2ce3d2e44d9fc7", "filename": "src/etc/check_missing_items.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e41be25f0664566c6b3a8105ff306c40713047de/src%2Fetc%2Fcheck_missing_items.py", "raw_url": "https://github.com/rust-lang/rust/raw/e41be25f0664566c6b3a8105ff306c40713047de/src%2Fetc%2Fcheck_missing_items.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcheck_missing_items.py?ref=e41be25f0664566c6b3a8105ff306c40713047de", "patch": "@@ -88,8 +88,8 @@ def check_type(ty):\n                         for bound in binding[\"binding\"][\"constraint\"]:\n                             check_generic_bound(bound)\n             elif \"parenthesized\" in args:\n-                for ty in args[\"parenthesized\"][\"inputs\"]:\n-                    check_type(ty)\n+                for input_ty in args[\"parenthesized\"][\"inputs\"]:\n+                    check_type(input_ty)\n                 if args[\"parenthesized\"][\"output\"]:\n                     check_type(args[\"parenthesized\"][\"output\"])\n         if not valid_id(ty[\"inner\"][\"id\"]):"}, {"sha": "8caba8cb9029cf1548c2c9892122bdf1c19767f9", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 59, "deletions": 61, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/e41be25f0664566c6b3a8105ff306c40713047de/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41be25f0664566c6b3a8105ff306c40713047de/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=e41be25f0664566c6b3a8105ff306c40713047de", "patch": "@@ -119,6 +119,16 @@ where\n     }\n }\n \n+impl<I, T, U> FromWithTcx<I> for Vec<U>\n+where\n+    I: IntoIterator<Item = T>,\n+    U: FromWithTcx<T>,\n+{\n+    fn from_tcx(f: I, tcx: TyCtxt<'_>) -> Vec<U> {\n+        f.into_iter().map(|x| x.into_tcx(tcx)).collect()\n+    }\n+}\n+\n pub(crate) fn from_deprecation(deprecation: rustc_attr::Deprecation) -> Deprecation {\n     #[rustfmt::skip]\n     let rustc_attr::Deprecation { since, note, is_since_rustc_version: _, suggestion: _ } = deprecation;\n@@ -130,11 +140,11 @@ impl FromWithTcx<clean::GenericArgs> for GenericArgs {\n         use clean::GenericArgs::*;\n         match args {\n             AngleBracketed { args, bindings } => GenericArgs::AngleBracketed {\n-                args: args.into_vec().into_iter().map(|a| a.into_tcx(tcx)).collect(),\n-                bindings: bindings.into_iter().map(|a| a.into_tcx(tcx)).collect(),\n+                args: args.into_vec().into_tcx(tcx),\n+                bindings: bindings.into_tcx(tcx),\n             },\n             Parenthesized { inputs, output } => GenericArgs::Parenthesized {\n-                inputs: inputs.into_vec().into_iter().map(|a| a.into_tcx(tcx)).collect(),\n+                inputs: inputs.into_vec().into_tcx(tcx),\n                 output: output.map(|a| (*a).into_tcx(tcx)),\n             },\n         }\n@@ -145,7 +155,7 @@ impl FromWithTcx<clean::GenericArg> for GenericArg {\n     fn from_tcx(arg: clean::GenericArg, tcx: TyCtxt<'_>) -> Self {\n         use clean::GenericArg::*;\n         match arg {\n-            Lifetime(l) => GenericArg::Lifetime(l.0.to_string()),\n+            Lifetime(l) => GenericArg::Lifetime(convert_lifetime(l)),\n             Type(t) => GenericArg::Type(t.into_tcx(tcx)),\n             Const(box c) => GenericArg::Const(c.into_tcx(tcx)),\n             Infer => GenericArg::Infer,\n@@ -177,9 +187,7 @@ impl FromWithTcx<clean::TypeBindingKind> for TypeBindingKind {\n         use clean::TypeBindingKind::*;\n         match kind {\n             Equality { term } => TypeBindingKind::Equality(term.into_tcx(tcx)),\n-            Constraint { bounds } => {\n-                TypeBindingKind::Constraint(bounds.into_iter().map(|a| a.into_tcx(tcx)).collect())\n-            }\n+            Constraint { bounds } => TypeBindingKind::Constraint(bounds.into_tcx(tcx)),\n         }\n     }\n }\n@@ -244,7 +252,7 @@ fn from_clean_item(item: clean::Item, tcx: TyCtxt<'_>) -> ItemEnum {\n         TraitAliasItem(t) => ItemEnum::TraitAlias(t.into_tcx(tcx)),\n         MethodItem(m, _) => ItemEnum::Method(from_function_method(m, true, header.unwrap(), tcx)),\n         TyMethodItem(m) => ItemEnum::Method(from_function_method(m, false, header.unwrap(), tcx)),\n-        ImplItem(i) => ItemEnum::Impl(i.into_tcx(tcx)),\n+        ImplItem(i) => ItemEnum::Impl((*i).into_tcx(tcx)),\n         StaticItem(s) => ItemEnum::Static(s.into_tcx(tcx)),\n         ForeignStaticItem(s) => ItemEnum::Static(s.into_tcx(tcx)),\n         ForeignTypeItem => ItemEnum::ForeignType,\n@@ -260,12 +268,12 @@ fn from_clean_item(item: clean::Item, tcx: TyCtxt<'_>) -> ItemEnum {\n         }\n         TyAssocTypeItem(g, b) => ItemEnum::AssocType {\n             generics: (*g).into_tcx(tcx),\n-            bounds: b.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n+            bounds: b.into_tcx(tcx),\n             default: None,\n         },\n         AssocTypeItem(t, b) => ItemEnum::AssocType {\n             generics: t.generics.into_tcx(tcx),\n-            bounds: b.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n+            bounds: b.into_tcx(tcx),\n             default: Some(t.item_type.unwrap_or(t.type_).into_tcx(tcx)),\n         },\n         // `convert_item` early returns `None` for stripped items and keywords.\n@@ -347,15 +355,15 @@ fn convert_abi(a: RustcAbi) -> Abi {\n     }\n }\n \n+fn convert_lifetime(l: clean::Lifetime) -> String {\n+    l.0.to_string()\n+}\n+\n impl FromWithTcx<clean::Generics> for Generics {\n     fn from_tcx(generics: clean::Generics, tcx: TyCtxt<'_>) -> Self {\n         Generics {\n-            params: generics.params.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n-            where_predicates: generics\n-                .where_predicates\n-                .into_iter()\n-                .map(|x| x.into_tcx(tcx))\n-                .collect(),\n+            params: generics.params.into_tcx(tcx),\n+            where_predicates: generics.where_predicates.into_tcx(tcx),\n         }\n     }\n }\n@@ -374,10 +382,10 @@ impl FromWithTcx<clean::GenericParamDefKind> for GenericParamDefKind {\n         use clean::GenericParamDefKind::*;\n         match kind {\n             Lifetime { outlives } => GenericParamDefKind::Lifetime {\n-                outlives: outlives.into_iter().map(|lt| lt.0.to_string()).collect(),\n+                outlives: outlives.into_iter().map(convert_lifetime).collect(),\n             },\n             Type { did: _, bounds, default, synthetic } => GenericParamDefKind::Type {\n-                bounds: bounds.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n+                bounds: bounds.into_tcx(tcx),\n                 default: default.map(|x| (*x).into_tcx(tcx)),\n                 synthetic,\n             },\n@@ -395,7 +403,7 @@ impl FromWithTcx<clean::WherePredicate> for WherePredicate {\n         match predicate {\n             BoundPredicate { ty, bounds, bound_params } => WherePredicate::BoundPredicate {\n                 type_: ty.into_tcx(tcx),\n-                bounds: bounds.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n+                bounds: bounds.into_tcx(tcx),\n                 generic_params: bound_params\n                     .into_iter()\n                     .map(|x| GenericParamDef {\n@@ -405,8 +413,8 @@ impl FromWithTcx<clean::WherePredicate> for WherePredicate {\n                     .collect(),\n             },\n             RegionPredicate { lifetime, bounds } => WherePredicate::RegionPredicate {\n-                lifetime: lifetime.0.to_string(),\n-                bounds: bounds.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n+                lifetime: convert_lifetime(lifetime),\n+                bounds: bounds.into_tcx(tcx),\n             },\n             EqPredicate { lhs, rhs } => {\n                 WherePredicate::EqPredicate { lhs: lhs.into_tcx(tcx), rhs: rhs.into_tcx(tcx) }\n@@ -424,11 +432,11 @@ impl FromWithTcx<clean::GenericBound> for GenericBound {\n                 let trait_ = clean::Type::Path { path: trait_ }.into_tcx(tcx);\n                 GenericBound::TraitBound {\n                     trait_,\n-                    generic_params: generic_params.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n+                    generic_params: generic_params.into_tcx(tcx),\n                     modifier: from_trait_bound_modifier(modifier),\n                 }\n             }\n-            Outlives(lifetime) => GenericBound::Outlives(lifetime.0.to_string()),\n+            Outlives(lifetime) => GenericBound::Outlives(convert_lifetime(lifetime)),\n         }\n     }\n }\n@@ -447,8 +455,8 @@ pub(crate) fn from_trait_bound_modifier(\n impl FromWithTcx<clean::Type> for Type {\n     fn from_tcx(ty: clean::Type, tcx: TyCtxt<'_>) -> Self {\n         use clean::Type::{\n-            Array, BareFunction, BorrowedRef, DynTrait, Generic, ImplTrait, Infer, Primitive,\n-            QPath, RawPointer, Slice, Tuple,\n+            Array, BareFunction, BorrowedRef, Generic, ImplTrait, Infer, Primitive, QPath,\n+            RawPointer, Slice, Tuple,\n         };\n \n         match ty {\n@@ -458,40 +466,24 @@ impl FromWithTcx<clean::Type> for Type {\n                 args: path.segments.last().map(|args| Box::new(args.clone().args.into_tcx(tcx))),\n                 param_names: Vec::new(),\n             },\n-            DynTrait(mut bounds, lt) => {\n-                let first_trait = bounds.remove(0).trait_;\n-\n-                Type::ResolvedPath {\n-                    name: first_trait.whole_name(),\n-                    id: from_item_id(first_trait.def_id().into(), tcx),\n-                    args: first_trait\n-                        .segments\n-                        .last()\n-                        .map(|args| Box::new(args.clone().args.into_tcx(tcx))),\n-                    param_names: bounds\n-                        .into_iter()\n-                        .map(|t| {\n-                            clean::GenericBound::TraitBound(t, rustc_hir::TraitBoundModifier::None)\n-                        })\n-                        .chain(lt.map(clean::GenericBound::Outlives))\n-                        .map(|bound| bound.into_tcx(tcx))\n-                        .collect(),\n-                }\n-            }\n+            clean::Type::DynTrait(bounds, lt) => Type::DynTrait(DynTrait {\n+                lifetime: lt.map(convert_lifetime),\n+                traits: bounds.into_tcx(tcx),\n+            }),\n             Generic(s) => Type::Generic(s.to_string()),\n             Primitive(p) => Type::Primitive(p.as_sym().to_string()),\n             BareFunction(f) => Type::FunctionPointer(Box::new((*f).into_tcx(tcx))),\n-            Tuple(t) => Type::Tuple(t.into_iter().map(|x| x.into_tcx(tcx)).collect()),\n+            Tuple(t) => Type::Tuple(t.into_tcx(tcx)),\n             Slice(t) => Type::Slice(Box::new((*t).into_tcx(tcx))),\n             Array(t, s) => Type::Array { type_: Box::new((*t).into_tcx(tcx)), len: s },\n-            ImplTrait(g) => Type::ImplTrait(g.into_iter().map(|x| x.into_tcx(tcx)).collect()),\n+            ImplTrait(g) => Type::ImplTrait(g.into_tcx(tcx)),\n             Infer => Type::Infer,\n             RawPointer(mutability, type_) => Type::RawPointer {\n                 mutable: mutability == ast::Mutability::Mut,\n                 type_: Box::new((*type_).into_tcx(tcx)),\n             },\n             BorrowedRef { lifetime, mutability, type_ } => Type::BorrowedRef {\n-                lifetime: lifetime.map(|l| l.0.to_string()),\n+                lifetime: lifetime.map(convert_lifetime),\n                 mutable: mutability == ast::Mutability::Mut,\n                 type_: Box::new((*type_).into_tcx(tcx)),\n             },\n@@ -528,7 +520,7 @@ impl FromWithTcx<clean::BareFunctionDecl> for FunctionPointer {\n                 async_: false,\n                 abi: convert_abi(abi),\n             },\n-            generic_params: generic_params.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n+            generic_params: generic_params.into_tcx(tcx),\n             decl: decl.into_tcx(tcx),\n         }\n     }\n@@ -562,16 +554,28 @@ impl FromWithTcx<clean::Trait> for Trait {\n             is_unsafe,\n             items: ids(items, tcx),\n             generics: generics.into_tcx(tcx),\n-            bounds: bounds.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n+            bounds: bounds.into_tcx(tcx),\n             implementations: Vec::new(), // Added in JsonRenderer::item\n         }\n     }\n }\n \n-impl FromWithTcx<Box<clean::Impl>> for Impl {\n-    fn from_tcx(impl_: Box<clean::Impl>, tcx: TyCtxt<'_>) -> Self {\n+impl FromWithTcx<clean::PolyTrait> for PolyTrait {\n+    fn from_tcx(\n+        clean::PolyTrait { trait_, generic_params }: clean::PolyTrait,\n+        tcx: TyCtxt<'_>,\n+    ) -> Self {\n+        PolyTrait {\n+            trait_: clean::Type::Path { path: trait_ }.into_tcx(tcx),\n+            generic_params: generic_params.into_tcx(tcx),\n+        }\n+    }\n+}\n+\n+impl FromWithTcx<clean::Impl> for Impl {\n+    fn from_tcx(impl_: clean::Impl, tcx: TyCtxt<'_>) -> Self {\n         let provided_trait_methods = impl_.provided_trait_methods(tcx);\n-        let clean::Impl { unsafety, generics, trait_, for_, items, polarity, kind } = *impl_;\n+        let clean::Impl { unsafety, generics, trait_, for_, items, polarity, kind } = impl_;\n         // FIXME: should `trait_` be a clean::Path equivalent in JSON?\n         let trait_ = trait_.map(|path| clean::Type::Path { path }.into_tcx(tcx));\n         // FIXME: use something like ImplKind in JSON?\n@@ -730,10 +734,7 @@ impl FromWithTcx<Box<clean::Typedef>> for Typedef {\n \n impl FromWithTcx<clean::OpaqueTy> for OpaqueTy {\n     fn from_tcx(opaque: clean::OpaqueTy, tcx: TyCtxt<'_>) -> Self {\n-        OpaqueTy {\n-            bounds: opaque.bounds.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n-            generics: opaque.generics.into_tcx(tcx),\n-        }\n+        OpaqueTy { bounds: opaque.bounds.into_tcx(tcx), generics: opaque.generics.into_tcx(tcx) }\n     }\n }\n \n@@ -749,10 +750,7 @@ impl FromWithTcx<clean::Static> for Static {\n \n impl FromWithTcx<clean::TraitAlias> for TraitAlias {\n     fn from_tcx(alias: clean::TraitAlias, tcx: TyCtxt<'_>) -> Self {\n-        TraitAlias {\n-            generics: alias.generics.into_tcx(tcx),\n-            params: alias.bounds.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n-        }\n+        TraitAlias { generics: alias.generics.into_tcx(tcx), params: alias.bounds.into_tcx(tcx) }\n     }\n }\n "}, {"sha": "bd4ea98441d66d5c6eab5bcfcf1f69fb1253d08a", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e41be25f0664566c6b3a8105ff306c40713047de/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41be25f0664566c6b3a8105ff306c40713047de/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=e41be25f0664566c6b3a8105ff306c40713047de", "patch": "@@ -9,7 +9,7 @@ use std::path::PathBuf;\n use serde::{Deserialize, Serialize};\n \n /// rustdoc format-version.\n-pub const FORMAT_VERSION: u32 = 16;\n+pub const FORMAT_VERSION: u32 = 17;\n \n /// A `Crate` is the root of the emitted JSON blob. It contains all type/documentation information\n /// about the language items in the local crate, as well as info about external items to allow\n@@ -115,6 +115,35 @@ pub enum Visibility {\n     },\n }\n \n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n+pub struct DynTrait {\n+    /// All the traits implemented. One of them is the vtable, and the rest must be auto traits.\n+    pub traits: Vec<PolyTrait>,\n+    /// The lifetime of the whole dyn object\n+    /// ```text\n+    /// dyn Debug + 'static\n+    ///             ^^^^^^^\n+    ///             |\n+    ///             this part\n+    /// ```\n+    pub lifetime: Option<String>,\n+}\n+\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n+/// A trait and potential HRTBs\n+pub struct PolyTrait {\n+    #[serde(rename = \"trait\")]\n+    pub trait_: Type,\n+    /// Used for Higher-Rank Trait Bounds (HRTBs)\n+    /// ```text\n+    /// dyn for<'a> Fn() -> &'a i32\"\n+    ///     ^^^^^^^\n+    ///       |\n+    ///       this part\n+    /// ```\n+    pub generic_params: Vec<GenericParamDef>,\n+}\n+\n #[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n pub enum GenericArgs {\n@@ -395,7 +424,7 @@ pub enum WherePredicate {\n         type_: Type,\n         bounds: Vec<GenericBound>,\n         /// Used for Higher-Rank Trait Bounds (HRTBs)\n-        /// ```plain\n+        /// ```text\n         /// where for<'a> &'a T: Iterator,\"\n         ///       ^^^^^^^\n         ///       |\n@@ -420,7 +449,7 @@ pub enum GenericBound {\n         #[serde(rename = \"trait\")]\n         trait_: Type,\n         /// Used for Higher-Rank Trait Bounds (HRTBs)\n-        /// ```plain\n+        /// ```text\n         /// where F: for<'a, 'b> Fn(&'a u8, &'b u8)\n         ///          ^^^^^^^^^^^\n         ///          |\n@@ -458,6 +487,7 @@ pub enum Type {\n         args: Option<Box<GenericArgs>>,\n         param_names: Vec<GenericBound>,\n     },\n+    DynTrait(DynTrait),\n     /// Parameterized types\n     Generic(String),\n     /// Fixed-size numeric types (plus int/usize/float), char, arrays, slices, and tuples\n@@ -505,7 +535,7 @@ pub enum Type {\n pub struct FunctionPointer {\n     pub decl: FnDecl,\n     /// Used for Higher-Rank Trait Bounds (HRTBs)\n-    /// ```plain\n+    /// ```text\n     /// for<'c> fn(val: &'c i32) -> i32\n     /// ^^^^^^^\n     ///       |"}, {"sha": "c18b54d1fdf0ed18bba992190874850bed4e7a16", "filename": "src/test/rustdoc-json/type/dyn.rs", "status": "modified", "additions": 38, "deletions": 10, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e41be25f0664566c6b3a8105ff306c40713047de/src%2Ftest%2Frustdoc-json%2Ftype%2Fdyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41be25f0664566c6b3a8105ff306c40713047de/src%2Ftest%2Frustdoc-json%2Ftype%2Fdyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftype%2Fdyn.rs?ref=e41be25f0664566c6b3a8105ff306c40713047de", "patch": "@@ -1,21 +1,49 @@\n // ignore-tidy-linelength\n+use std::fmt::Debug;\n \n-// @count dyn.json \"$.index[*][?(@.name=='dyn')].inner.items\" 1\n+// @count dyn.json \"$.index[*][?(@.name=='dyn')].inner.items[*]\" 3\n // @set sync_int_gen = - \"$.index[*][?(@.name=='SyncIntGen')].id\"\n-// @is - \"$.index[*][?(@.name=='dyn')].inner.items[0]\" $sync_int_gen\n+// @set ref_fn       = - \"$.index[*][?(@.name=='RefFn')].id\"\n+// @set weird_order  = - \"$.index[*][?(@.name=='WeirdOrder')].id\"\n+// @has - \"$.index[*][?(@.name=='dyn')].inner.items[*]\" $sync_int_gen\n+// @has - \"$.index[*][?(@.name=='dyn')].inner.items[*]\" $ref_fn\n+// @has - \"$.index[*][?(@.name=='dyn')].inner.items[*]\" $weird_order\n \n // @is    - \"$.index[*][?(@.name=='SyncIntGen')].kind\" \\\"typedef\\\"\n // @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.generics\" '{\"params\": [], \"where_predicates\": []}'\n // @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.kind\" \\\"resolved_path\\\"\n // @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.name\" \\\"Box\\\"\n // @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.bindings\" []\n // @count - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args\" 1\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.kind\" \\\"resolved_path\\\"\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.kind\" \\\"resolved_path\\\"\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.name\" \\\"Fn\\\"\n-// @count - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.param_names[*]\" 3\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.param_names[0].trait_bound.trait.inner.name\" \\\"Send\\\"\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.param_names[1].trait_bound.trait.inner.name\" \\\"Sync\\\"\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.param_names[2]\" \"{\\\"outlives\\\": \\\"'static\\\"}\"\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.args\" '{\"parenthesized\": {\"inputs\": [],\"output\": {\"inner\": \"i32\",\"kind\": \"primitive\"}}}'\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.kind\" \\\"dyn_trait\\\"\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.lifetime\" \\\"\\'static\\\"\n+// @count - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[*]\" 3\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[0].generic_params\" []\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[1].generic_params\" []\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[2].generic_params\" []\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[0].trait.inner.name\" '\"Fn\"'\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[1].trait.inner.name\" '\"Send\"'\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[2].trait.inner.name\" '\"Sync\"'\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[0].trait.inner.args\" '{\"parenthesized\": {\"inputs\": [],\"output\": {\"inner\": \"i32\",\"kind\": \"primitive\"}}}'\n pub type SyncIntGen = Box<dyn Fn() -> i32 + Send + Sync + 'static>;\n+\n+// @is - \"$.index[*][?(@.name=='RefFn')].kind\" \\\"typedef\\\"\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.generics\" '{\"params\": [{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''a\"}],\"where_predicates\": []}'\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.kind\" '\"borrowed_ref\"'\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.mutable\" 'false'\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.lifetime\" \"\\\"'a\\\"\"\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.kind\" '\"dyn_trait\"'\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.lifetime\" null\n+// @count - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[*]\" 1\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].generic_params\" '[{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''b\"}]'\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.kind\" '\"resolved_path\"'\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.inner.name\" '\"Fn\"'\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.inner.args.parenthesized.inputs[0].kind\" '\"borrowed_ref\"'\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.inner.args.parenthesized.inputs[0].inner.lifetime\" \"\\\"'b\\\"\"\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.inner.args.parenthesized.output.kind\" '\"borrowed_ref\"'\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.inner.args.parenthesized.output.inner.lifetime\" \"\\\"'b\\\"\"\n+pub type RefFn<'a> = &'a dyn for<'b> Fn(&'b i32) -> &'b i32;\n+\n+// @is    - \"$.index[*][?(@.name=='WeirdOrder')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[0].trait.inner.name\" '\"Send\"'\n+// @is    - \"$.index[*][?(@.name=='WeirdOrder')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[1].trait.inner.name\" '\"Debug\"'\n+pub type WeirdOrder = Box<dyn Send + Debug>;"}, {"sha": "9311737be0fec0ead932028d4332be8e5b4b034d", "filename": "src/test/rustdoc-json/type/hrtb.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e41be25f0664566c6b3a8105ff306c40713047de/src%2Ftest%2Frustdoc-json%2Ftype%2Fhrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41be25f0664566c6b3a8105ff306c40713047de/src%2Ftest%2Frustdoc-json%2Ftype%2Fhrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftype%2Fhrtb.rs?ref=e41be25f0664566c6b3a8105ff306c40713047de", "patch": "@@ -0,0 +1,26 @@\n+// ignore-tidy-linelength\n+\n+// @has hrtb.json\n+\n+// @is - \"$.index[*][?(@.name=='genfn')].inner.generics.where_predicates[0].bound_predicate.type\" '{\"inner\": \"F\",\"kind\": \"generic\"}'\n+// @is - \"$.index[*][?(@.name=='genfn')].inner.generics.where_predicates[0].bound_predicate.generic_params\" '[{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''a\"},{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''b\"}]'\n+pub fn genfn<F>(f: F)\n+where\n+    for<'a, 'b> F: Fn(&'a i32, &'b i32),\n+{\n+    let zero = 0;\n+    f(&zero, &zero);\n+}\n+\n+// @is - \"$.index[*][?(@.name=='dynfn')].inner.generics\" '{\"params\": [], \"where_predicates\": []}'\n+// @is - \"$.index[*][?(@.name=='dynfn')].inner.generics\" '{\"params\": [], \"where_predicates\": []}'\n+// @is - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].kind\" '\"borrowed_ref\"'\n+// @is - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.kind\" '\"dyn_trait\"'\n+// @is - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.inner.lifetime\" null\n+// @count - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.inner.traits[*]\" 1\n+// @is - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.inner.traits[0].generic_params\" '[{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''a\"},{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''b\"}]'\n+// @is - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.inner.traits[0].trait.inner.name\" '\"Fn\"'\n+pub fn dynfn(f: &dyn for<'a, 'b> Fn(&'a i32, &'b i32)) {\n+    let zero = 0;\n+    f(&zero, &zero);\n+}"}]}