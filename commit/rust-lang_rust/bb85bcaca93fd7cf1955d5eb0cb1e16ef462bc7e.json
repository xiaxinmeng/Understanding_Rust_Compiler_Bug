{"sha": "bb85bcaca93fd7cf1955d5eb0cb1e16ef462bc7e", "node_id": "C_kwDOAAsO6NoAKGJiODViY2FjYTkzZmQ3Y2YxOTU1ZDVlYjBjYjFlMTZlZjQ2MmJjN2U", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-27T03:42:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-27T03:42:59Z"}, "message": "Auto merge of #96195 - sunfishcode:sunfishcode/handle-or-error-type, r=joshtriplett\n\n Define a dedicated error type for `HandleOrNull` and `HandleOrInvalid`.\n\nDefine `NullHandleError` and `InvalidHandleError` types, that implement std::error::Error, and use them as the error types in `HandleOrNull` and `HandleOrInvalid`,\n\nThis addresses [this concern](https://github.com/rust-lang/rust/issues/87074#issuecomment-1080031167).\n\nThis is the same as #95387.\n\nr? `@joshtriplett`", "tree": {"sha": "93cd7e42d20b7ad6d4aaca6bab09b8b61abbd434", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93cd7e42d20b7ad6d4aaca6bab09b8b61abbd434"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb85bcaca93fd7cf1955d5eb0cb1e16ef462bc7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb85bcaca93fd7cf1955d5eb0cb1e16ef462bc7e", "html_url": "https://github.com/rust-lang/rust/commit/bb85bcaca93fd7cf1955d5eb0cb1e16ef462bc7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb85bcaca93fd7cf1955d5eb0cb1e16ef462bc7e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99b70ee230a363220d97148d567f07366d7ea4e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/99b70ee230a363220d97148d567f07366d7ea4e0", "html_url": "https://github.com/rust-lang/rust/commit/99b70ee230a363220d97148d567f07366d7ea4e0"}, {"sha": "531c9373be094ad4e3ee28464dfacbb2fdea50a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/531c9373be094ad4e3ee28464dfacbb2fdea50a5", "html_url": "https://github.com/rust-lang/rust/commit/531c9373be094ad4e3ee28464dfacbb2fdea50a5"}], "stats": {"total": 154, "additions": 144, "deletions": 10}, "files": [{"sha": "e4de52612ef6232a8b0f668bb960311214d64556", "filename": "library/std/src/os/windows/io/handle.rs", "status": "modified", "additions": 44, "deletions": 8, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/bb85bcaca93fd7cf1955d5eb0cb1e16ef462bc7e/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb85bcaca93fd7cf1955d5eb0cb1e16ef462bc7e/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs?ref=bb85bcaca93fd7cf1955d5eb0cb1e16ef462bc7e", "patch": "@@ -76,7 +76,7 @@ pub struct OwnedHandle {\n /// `NULL`. This ensures that such FFI calls cannot start using the handle without\n /// checking for `NULL` first.\n ///\n-/// This type concerns any value other than `NULL` to be valid, including `INVALID_HANDLE_VALUE`.\n+/// This type considers any value other than `NULL` to be valid, including `INVALID_HANDLE_VALUE`.\n /// This is because APIs that use `NULL` as their sentry value don't treat `INVALID_HANDLE_VALUE`\n /// as special.\n ///\n@@ -96,7 +96,7 @@ pub struct HandleOrNull(OwnedHandle);\n /// `INVALID_HANDLE_VALUE`. This ensures that such FFI calls cannot start using the handle without\n /// checking for `INVALID_HANDLE_VALUE` first.\n ///\n-/// This type concerns any value other than `INVALID_HANDLE_VALUE` to be valid, including `NULL`.\n+/// This type considers any value other than `INVALID_HANDLE_VALUE` to be valid, including `NULL`.\n /// This is because APIs that use `INVALID_HANDLE_VALUE` as their sentry value may return `NULL`\n /// under `windows_subsystem = \"windows\"` or other situations where I/O devices are detached.\n ///\n@@ -143,17 +143,17 @@ impl BorrowedHandle<'_> {\n }\n \n impl TryFrom<HandleOrNull> for OwnedHandle {\n-    type Error = ();\n+    type Error = NullHandleError;\n \n     #[inline]\n-    fn try_from(handle_or_null: HandleOrNull) -> Result<Self, ()> {\n+    fn try_from(handle_or_null: HandleOrNull) -> Result<Self, NullHandleError> {\n         let owned_handle = handle_or_null.0;\n         if owned_handle.handle.is_null() {\n             // Don't call `CloseHandle`; it'd be harmless, except that it could\n             // overwrite the `GetLastError` error.\n             forget(owned_handle);\n \n-            Err(())\n+            Err(NullHandleError(()))\n         } else {\n             Ok(owned_handle)\n         }\n@@ -201,23 +201,59 @@ impl OwnedHandle {\n }\n \n impl TryFrom<HandleOrInvalid> for OwnedHandle {\n-    type Error = ();\n+    type Error = InvalidHandleError;\n \n     #[inline]\n-    fn try_from(handle_or_invalid: HandleOrInvalid) -> Result<Self, ()> {\n+    fn try_from(handle_or_invalid: HandleOrInvalid) -> Result<Self, InvalidHandleError> {\n         let owned_handle = handle_or_invalid.0;\n         if owned_handle.handle == c::INVALID_HANDLE_VALUE {\n             // Don't call `CloseHandle`; it'd be harmless, except that it could\n             // overwrite the `GetLastError` error.\n             forget(owned_handle);\n \n-            Err(())\n+            Err(InvalidHandleError(()))\n         } else {\n             Ok(owned_handle)\n         }\n     }\n }\n \n+/// This is the error type used by [`HandleOrNull`] when attempting to convert\n+/// into a handle, to indicate that the value is null.\n+// The empty field prevents constructing this, and allows extending it in the future.\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct NullHandleError(());\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl fmt::Display for NullHandleError {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        \"A HandleOrNull could not be converted to a handle because it was null\".fmt(fmt)\n+    }\n+}\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl crate::error::Error for NullHandleError {}\n+\n+/// This is the error type used by [`HandleOrInvalid`] when attempting to\n+/// convert into a handle, to indicate that the value is\n+/// `INVALID_HANDLE_VALUE`.\n+// The empty field prevents constructing this, and allows extending it in the future.\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct InvalidHandleError(());\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl fmt::Display for InvalidHandleError {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        \"A HandleOrInvalid could not be converted to a handle because it was INVALID_HANDLE_VALUE\"\n+            .fmt(fmt)\n+    }\n+}\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl crate::error::Error for InvalidHandleError {}\n+\n impl AsRawHandle for BorrowedHandle<'_> {\n     #[inline]\n     fn as_raw_handle(&self) -> RawHandle {"}, {"sha": "ab9cc707aa0be37bdca812ae9a83c74bcbb40bf0", "filename": "src/test/ui/coercion/coerce-issue-49593-box-never-windows.nofallback.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/bb85bcaca93fd7cf1955d5eb0cb1e16ef462bc7e/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never-windows.nofallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb85bcaca93fd7cf1955d5eb0cb1e16ef462bc7e/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never-windows.nofallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never-windows.nofallback.stderr?ref=bb85bcaca93fd7cf1955d5eb0cb1e16ef462bc7e", "patch": "@@ -0,0 +1,39 @@\n+error[E0277]: the trait bound `(): std::error::Error` is not satisfied\n+  --> $DIR/coerce-issue-49593-box-never-windows.rs:18:53\n+   |\n+LL |     /* *mut $0 is coerced to Box<dyn Error> here */ Box::<_ /* ! */>::new(x)\n+   |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::error::Error` is not implemented for `()`\n+   |\n+   = help: the following other types implement trait `std::error::Error`:\n+             !\n+             &'a T\n+             AccessError\n+             AddrParseError\n+             Arc<T>\n+             BorrowError\n+             BorrowMutError\n+             Box<T>\n+           and 45 others\n+   = note: required for the cast to the object type `dyn std::error::Error`\n+\n+error[E0277]: the trait bound `(): std::error::Error` is not satisfied\n+  --> $DIR/coerce-issue-49593-box-never-windows.rs:23:49\n+   |\n+LL |     /* *mut $0 is coerced to *mut Error here */ raw_ptr_box::<_ /* ! */>(x)\n+   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::error::Error` is not implemented for `()`\n+   |\n+   = help: the following other types implement trait `std::error::Error`:\n+             !\n+             &'a T\n+             AccessError\n+             AddrParseError\n+             Arc<T>\n+             BorrowError\n+             BorrowMutError\n+             Box<T>\n+           and 45 others\n+   = note: required for the cast to the object type `(dyn std::error::Error + 'static)`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "95d3935caa9ef7bf02fc51b4e0f1c7caca8b0e6f", "filename": "src/test/ui/coercion/coerce-issue-49593-box-never-windows.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/bb85bcaca93fd7cf1955d5eb0cb1e16ef462bc7e/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never-windows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb85bcaca93fd7cf1955d5eb0cb1e16ef462bc7e/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never-windows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never-windows.rs?ref=bb85bcaca93fd7cf1955d5eb0cb1e16ef462bc7e", "patch": "@@ -0,0 +1,58 @@\n+// revisions: nofallback fallback\n+// only-windows - the number of `Error` impls is platform-dependent\n+//[fallback] check-pass\n+//[nofallback] check-fail\n+\n+#![feature(never_type)]\n+#![cfg_attr(fallback, feature(never_type_fallback))]\n+#![allow(unreachable_code)]\n+\n+use std::error::Error;\n+use std::mem;\n+\n+fn raw_ptr_box<T>(t: T) -> *mut T {\n+    panic!()\n+}\n+\n+fn foo(x: !) -> Box<dyn Error> {\n+    /* *mut $0 is coerced to Box<dyn Error> here */ Box::<_ /* ! */>::new(x)\n+    //[nofallback]~^ ERROR trait bound `(): std::error::Error` is not satisfied\n+}\n+\n+fn foo_raw_ptr(x: !) -> *mut dyn Error {\n+    /* *mut $0 is coerced to *mut Error here */ raw_ptr_box::<_ /* ! */>(x)\n+    //[nofallback]~^ ERROR trait bound `(): std::error::Error` is not satisfied\n+}\n+\n+fn no_coercion(d: *mut dyn Error) -> *mut dyn Error {\n+    /* an unsize coercion won't compile here, and it is indeed not used\n+       because there is nothing requiring the _ to be Sized */\n+    d as *mut _\n+}\n+\n+trait Xyz {}\n+struct S;\n+struct T;\n+impl Xyz for S {}\n+impl Xyz for T {}\n+\n+fn foo_no_never() {\n+    let mut x /* : Option<S> */ = None;\n+    let mut first_iter = false;\n+    loop {\n+        if !first_iter {\n+            let y: Box<dyn Xyz>\n+                = /* Box<$0> is coerced to Box<Xyz> here */ Box::new(x.unwrap());\n+        }\n+\n+        x = Some(S);\n+        first_iter = true;\n+    }\n+\n+    let mut y : Option<S> = None;\n+    // assert types are equal\n+    mem::swap(&mut x, &mut y);\n+}\n+\n+fn main() {\n+}"}, {"sha": "1daa91f025a8925827efe68655f3792b1c06c805", "filename": "src/test/ui/coercion/coerce-issue-49593-box-never.nofallback.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb85bcaca93fd7cf1955d5eb0cb1e16ef462bc7e/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.nofallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb85bcaca93fd7cf1955d5eb0cb1e16ef462bc7e/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.nofallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.nofallback.stderr?ref=bb85bcaca93fd7cf1955d5eb0cb1e16ef462bc7e", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `(): std::error::Error` is not satisfied\n-  --> $DIR/coerce-issue-49593-box-never.rs:17:53\n+  --> $DIR/coerce-issue-49593-box-never.rs:18:53\n    |\n LL |     /* *mut $0 is coerced to Box<dyn Error> here */ Box::<_ /* ! */>::new(x)\n    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::error::Error` is not implemented for `()`\n@@ -17,7 +17,7 @@ LL |     /* *mut $0 is coerced to Box<dyn Error> here */ Box::<_ /* ! */>::new(x\n    = note: required for the cast to the object type `dyn std::error::Error`\n \n error[E0277]: the trait bound `(): std::error::Error` is not satisfied\n-  --> $DIR/coerce-issue-49593-box-never.rs:22:49\n+  --> $DIR/coerce-issue-49593-box-never.rs:23:49\n    |\n LL |     /* *mut $0 is coerced to *mut Error here */ raw_ptr_box::<_ /* ! */>(x)\n    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::error::Error` is not implemented for `()`"}, {"sha": "16efb65acb2b68de082c8e4a838a5dbb2948378f", "filename": "src/test/ui/coercion/coerce-issue-49593-box-never.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb85bcaca93fd7cf1955d5eb0cb1e16ef462bc7e/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb85bcaca93fd7cf1955d5eb0cb1e16ef462bc7e/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.rs?ref=bb85bcaca93fd7cf1955d5eb0cb1e16ef462bc7e", "patch": "@@ -1,4 +1,5 @@\n // revisions: nofallback fallback\n+// ignore-windows - the number of `Error` impls is platform-dependent\n //[fallback] check-pass\n //[nofallback] check-fail\n "}]}