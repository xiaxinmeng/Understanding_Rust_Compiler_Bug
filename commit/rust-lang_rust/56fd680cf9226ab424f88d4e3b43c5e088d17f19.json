{"sha": "56fd680cf9226ab424f88d4e3b43c5e088d17f19", "node_id": "C_kwDOAAsO6NoAKDU2ZmQ2ODBjZjkyMjZhYjQyNGY4OGQ0ZTNiNDNjNWUwODhkMTdmMTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-27T11:31:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-27T11:31:37Z"}, "message": "Auto merge of #96046 - oli-obk:const_typeck, r=cjgillot\n\nMove various checks to typeck so them failing causes the typeck result to get tainted\n\nFixes #69487\nfixes #79047\n\ncc `@RalfJung` this gets rid of the `Transmute` invalid program error variant", "tree": {"sha": "aa1cb6dee38662302ec1969d5d092ec733ac3396", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa1cb6dee38662302ec1969d5d092ec733ac3396"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56fd680cf9226ab424f88d4e3b43c5e088d17f19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56fd680cf9226ab424f88d4e3b43c5e088d17f19", "html_url": "https://github.com/rust-lang/rust/commit/56fd680cf9226ab424f88d4e3b43c5e088d17f19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56fd680cf9226ab424f88d4e3b43c5e088d17f19/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46147119ec545045948bc799581d93edd3b1617b", "url": "https://api.github.com/repos/rust-lang/rust/commits/46147119ec545045948bc799581d93edd3b1617b", "html_url": "https://github.com/rust-lang/rust/commit/46147119ec545045948bc799581d93edd3b1617b"}, {"sha": "4332c2fbbd47ecdcfb620a284254feed3367bec4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4332c2fbbd47ecdcfb620a284254feed3367bec4", "html_url": "https://github.com/rust-lang/rust/commit/4332c2fbbd47ecdcfb620a284254feed3367bec4"}], "stats": {"total": 1393, "additions": 875, "deletions": 518}, "files": [{"sha": "955480a1a7411631f29b3bdf0103cb1427e3f93c", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -906,16 +906,12 @@ where\n         }\n         // We still require the sizes to match.\n         if src.layout.size != dest.layout.size {\n-            // FIXME: This should be an assert instead of an error, but if we transmute within an\n-            // array length computation, `typeck` may not have yet been run and errored out. In fact\n-            // most likely we *are* running `typeck` right now. Investigate whether we can bail out\n-            // on `typeck_results().has_errors` at all const eval entry points.\n-            debug!(\"Size mismatch when transmuting!\\nsrc: {:#?}\\ndest: {:#?}\", src, dest);\n-            self.tcx.sess.delay_span_bug(\n+            span_bug!(\n                 self.cur_span(),\n-                \"size-changing transmute, should have been caught by transmute checking\",\n+                \"size-changing transmute, should have been caught by transmute checking: {:#?}\\ndest: {:#?}\",\n+                src,\n+                dest\n             );\n-            throw_inval!(TransmuteSizeDiff(src.layout.ty, dest.layout.ty));\n         }\n         // Unsized copies rely on interpreting `src.meta` with `dest.layout`, we want\n         // to avoid that here."}, {"sha": "e6c9c6693c5ab68cb4b072ac38f41771dbec0bdd", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -937,7 +937,6 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n                         //\n                         // maybe move the check to a MIR pass?\n                         tcx.ensure().check_mod_liveness(module);\n-                        tcx.ensure().check_mod_intrinsics(module);\n                     });\n                 });\n             }"}, {"sha": "cb6fd006c3efe9fd8fec1ca6bac4604c175a4215", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -149,8 +149,6 @@ pub enum InvalidProgramInfo<'tcx> {\n     /// (which unfortunately typeck does not reject).\n     /// Not using `FnAbiError` as that contains a nested `LayoutError`.\n     FnAbiAdjustForForeignAbi(call::AdjustForForeignAbiError),\n-    /// An invalid transmute happened.\n-    TransmuteSizeDiff(Ty<'tcx>, Ty<'tcx>),\n     /// SizeOf of unsized type was requested.\n     SizeOfUnsizedType(Ty<'tcx>),\n }\n@@ -166,11 +164,6 @@ impl fmt::Display for InvalidProgramInfo<'_> {\n             }\n             Layout(ref err) => write!(f, \"{}\", err),\n             FnAbiAdjustForForeignAbi(ref err) => write!(f, \"{}\", err),\n-            TransmuteSizeDiff(from_ty, to_ty) => write!(\n-                f,\n-                \"transmuting `{}` to `{}` is not possible, because these types do not have the same size\",\n-                from_ty, to_ty\n-            ),\n             SizeOfUnsizedType(ty) => write!(f, \"size_of called on unsized type `{}`\", ty),\n         }\n     }"}, {"sha": "68b81efaa000221605877611dadc3b7c19a4e7ae", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -804,10 +804,6 @@ rustc_queries! {\n         desc { |tcx| \"checking privacy in {}\", describe_as_module(key, tcx) }\n     }\n \n-    query check_mod_intrinsics(key: LocalDefId) -> () {\n-        desc { |tcx| \"checking intrinsics in {}\", describe_as_module(key, tcx) }\n-    }\n-\n     query check_mod_liveness(key: LocalDefId) -> () {\n         desc { |tcx| \"checking liveness of variables in {}\", describe_as_module(key, tcx) }\n     }"}, {"sha": "a2d8e5168c4d063d1da4fa78f44432a9c0975f67", "filename": "compiler/rustc_passes/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib.rs?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -30,7 +30,6 @@ mod diagnostic_items;\n pub mod entry;\n pub mod hir_id_validator;\n pub mod hir_stats;\n-mod intrinsicck;\n mod lang_items;\n pub mod layout_test;\n mod lib_features;\n@@ -54,7 +53,6 @@ pub fn provide(providers: &mut Providers) {\n     loops::provide(providers);\n     naked_functions::provide(providers);\n     liveness::provide(providers);\n-    intrinsicck::provide(providers);\n     reachable::provide(providers);\n     stability::provide(providers);\n     upvars::provide(providers);"}, {"sha": "0cefa802c857d8034955573ad9ae0e23ee26fcfc", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -273,6 +273,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         error: &SelectionError<'tcx>,\n         fallback_has_occurred: bool,\n     ) {\n+        self.set_tainted_by_errors();\n         let tcx = self.tcx;\n         let mut span = obligation.cause.span;\n "}, {"sha": "a6d7fecb2e83b46f93471975d8df7b80e3d5b8fc", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -1,3 +1,5 @@\n+use crate::check::wfcheck::for_item;\n+\n use super::coercion::CoerceMany;\n use super::compare_method::check_type_bounds;\n use super::compare_method::{compare_const_impl, compare_impl_method, compare_ty_impl};\n@@ -871,6 +873,14 @@ pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, id: hir::ItemId) {\n                 }\n             }\n         }\n+        DefKind::GlobalAsm => {\n+            let it = tcx.hir().item(id);\n+            let hir::ItemKind::GlobalAsm(asm) = it.kind else { span_bug!(it.span, \"DefKind::GlobalAsm but got {:#?}\", it) };\n+            for_item(tcx, it).with_fcx(|fcx| {\n+                fcx.check_asm(asm, it.hir_id());\n+                Default::default()\n+            })\n+        }\n         _ => {}\n     }\n }"}, {"sha": "ea81f1ef90c9a148a82e26b8b25405a4f11d1987", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -51,6 +51,7 @@ use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, Pos};\n+use rustc_target::spec::abi::Abi::RustIntrinsic;\n use rustc_trait_selection::infer::InferCtxtExt;\n use rustc_trait_selection::traits::{self, ObligationCauseCode};\n \n@@ -294,7 +295,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.check_lang_item_path(lang_item, expr, hir_id)\n             }\n             ExprKind::Path(ref qpath) => self.check_expr_path(qpath, expr, &[]),\n-            ExprKind::InlineAsm(asm) => self.check_expr_asm(asm),\n+            ExprKind::InlineAsm(asm) => {\n+                // We defer some asm checks as we may not have resolved the input and output types yet (they may still be infer vars).\n+                self.deferred_asm_checks.borrow_mut().push((asm, expr.hir_id));\n+                self.check_expr_asm(asm)\n+            }\n             ExprKind::Break(destination, ref expr_opt) => {\n                 self.check_expr_break(destination, expr_opt.as_deref(), expr)\n             }\n@@ -530,8 +535,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             _ => self.instantiate_value_path(segs, opt_ty, res, expr.span, expr.hir_id).0,\n         };\n \n-        if let ty::FnDef(..) = ty.kind() {\n+        if let ty::FnDef(did, ..) = *ty.kind() {\n             let fn_sig = ty.fn_sig(tcx);\n+            if tcx.fn_sig(did).abi() == RustIntrinsic && tcx.item_name(did) == sym::transmute {\n+                let from = fn_sig.inputs().skip_binder()[0];\n+                let to = fn_sig.output().skip_binder();\n+                // We defer the transmute to the end of typeck, once all inference vars have\n+                // been resolved or we errored. This is important as we can only check transmute\n+                // on concrete types, but the output type may not be known yet (it would only\n+                // be known if explicitly specified via turbofish).\n+                self.deferred_transmute_checks.borrow_mut().push((from, to, expr.span));\n+            }\n             if !tcx.features().unsized_fn_params {\n                 // We want to remove some Sized bounds from std functions,\n                 // but don't want to expose the removal to stable Rust."}, {"sha": "34cc02f180b40b74d13068971a2733f44555a2b7", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -47,6 +47,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    pub(in super::super) fn check_transmutes(&self) {\n+        let mut deferred_transmute_checks = self.deferred_transmute_checks.borrow_mut();\n+        debug!(\"FnCtxt::check_transmutes: {} deferred checks\", deferred_transmute_checks.len());\n+        for (from, to, span) in deferred_transmute_checks.drain(..) {\n+            self.check_transmute(span, from, to);\n+        }\n+    }\n+\n+    pub(in super::super) fn check_asms(&self) {\n+        let mut deferred_asm_checks = self.deferred_asm_checks.borrow_mut();\n+        debug!(\"FnCtxt::check_asm: {} deferred checks\", deferred_asm_checks.len());\n+        for (asm, hir_id) in deferred_asm_checks.drain(..) {\n+            let enclosing_id = self.tcx.hir().enclosing_body_owner(hir_id);\n+            self.check_asm(asm, enclosing_id);\n+        }\n+    }\n+\n     pub(in super::super) fn check_method_argument_types(\n         &self,\n         sp: Span,"}, {"sha": "08a64d8e67364570fa3507590e0f8202d986211d", "filename": "compiler/rustc_typeck/src/check/inherited.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -50,6 +50,10 @@ pub struct Inherited<'a, 'tcx> {\n \n     pub(super) deferred_cast_checks: RefCell<Vec<super::cast::CastCheck<'tcx>>>,\n \n+    pub(super) deferred_transmute_checks: RefCell<Vec<(Ty<'tcx>, Ty<'tcx>, Span)>>,\n+\n+    pub(super) deferred_asm_checks: RefCell<Vec<(&'tcx hir::InlineAsm<'tcx>, hir::HirId)>>,\n+\n     pub(super) deferred_generator_interiors:\n         RefCell<Vec<(hir::BodyId, Ty<'tcx>, hir::GeneratorKind)>>,\n \n@@ -113,6 +117,8 @@ impl<'a, 'tcx> Inherited<'a, 'tcx> {\n             deferred_sized_obligations: RefCell::new(Vec::new()),\n             deferred_call_resolutions: RefCell::new(Default::default()),\n             deferred_cast_checks: RefCell::new(Vec::new()),\n+            deferred_transmute_checks: RefCell::new(Vec::new()),\n+            deferred_asm_checks: RefCell::new(Vec::new()),\n             deferred_generator_interiors: RefCell::new(Vec::new()),\n             diverging_type_vars: RefCell::new(Default::default()),\n             body_id,"}, {"sha": "027868be8bb0df8ab3046a6eff7115e7a992ed55", "filename": "compiler/rustc_typeck/src/check/intrinsicck.rs", "status": "renamed", "additions": 51, "deletions": 94, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsicck.rs?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -1,37 +1,16 @@\n-use hir::intravisit::walk_inline_asm;\n use rustc_ast::InlineAsmTemplatePiece;\n use rustc_data_structures::stable_set::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n-use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{DefId, LocalDefId};\n-use rustc_hir::intravisit::{self, Visitor};\n use rustc_index::vec::Idx;\n use rustc_middle::ty::layout::{LayoutError, SizeSkeleton};\n-use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, FloatTy, IntTy, Ty, TyCtxt, UintTy};\n+use rustc_middle::ty::{self, FloatTy, InferTy, IntTy, Ty, TyCtxt, TypeFoldable, UintTy};\n use rustc_session::lint;\n-use rustc_span::{sym, Span, Symbol, DUMMY_SP};\n+use rustc_span::{Span, Symbol, DUMMY_SP};\n use rustc_target::abi::{Pointer, VariantIdx};\n-use rustc_target::asm::{InlineAsmRegOrRegClass, InlineAsmType};\n+use rustc_target::asm::{InlineAsmReg, InlineAsmRegClass, InlineAsmRegOrRegClass, InlineAsmType};\n \n-fn check_mod_intrinsics(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n-    tcx.hir().deep_visit_item_likes_in_module(module_def_id, &mut ItemVisitor { tcx });\n-}\n-\n-pub fn provide(providers: &mut Providers) {\n-    *providers = Providers { check_mod_intrinsics, ..*providers };\n-}\n-\n-struct ItemVisitor<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n-}\n-\n-struct ExprVisitor<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n-    typeck_results: &'tcx ty::TypeckResults<'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n-}\n+use super::FnCtxt;\n \n /// If the type is `Option<T>`, it will return `T`, otherwise\n /// the type itself. Works on most `Option`-like types.\n@@ -60,14 +39,15 @@ fn unpack_option_like<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> {\n     ty\n }\n \n-impl<'tcx> ExprVisitor<'tcx> {\n-    fn def_id_is_transmute(&self, def_id: DefId) -> bool {\n-        self.tcx.is_intrinsic(def_id) && self.tcx.item_name(def_id) == sym::transmute\n-    }\n-\n-    fn check_transmute(&self, span: Span, from: Ty<'tcx>, to: Ty<'tcx>) {\n-        let sk_from = SizeSkeleton::compute(from, self.tcx, self.param_env);\n-        let sk_to = SizeSkeleton::compute(to, self.tcx, self.param_env);\n+impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n+    pub fn check_transmute(&self, span: Span, from: Ty<'tcx>, to: Ty<'tcx>) {\n+        let convert = |ty: Ty<'tcx>| {\n+            let ty = self.resolve_vars_if_possible(ty);\n+            let ty = self.tcx.normalize_erasing_regions(self.param_env, ty);\n+            (SizeSkeleton::compute(ty, self.tcx, self.param_env), ty)\n+        };\n+        let (sk_from, from) = convert(from);\n+        let (sk_to, to) = convert(to);\n \n         // Check for same size using the skeletons.\n         if let (Ok(sk_from), Ok(sk_to)) = (sk_from, sk_to) {\n@@ -139,7 +119,8 @@ impl<'tcx> ExprVisitor<'tcx> {\n         target_features: &FxHashSet<Symbol>,\n     ) -> Option<InlineAsmType> {\n         // Check the type against the allowed types for inline asm.\n-        let ty = self.typeck_results.expr_ty_adjusted(expr);\n+        let ty = self.typeck_results.borrow().expr_ty_adjusted(expr);\n+        let ty = self.resolve_vars_if_possible(ty);\n         let asm_ty_isize = match self.tcx.sess.target.pointer_width {\n             16 => InlineAsmType::I16,\n             32 => InlineAsmType::I32,\n@@ -152,10 +133,24 @@ impl<'tcx> ExprVisitor<'tcx> {\n             ty::Error(_) => return None,\n             ty::Int(IntTy::I8) | ty::Uint(UintTy::U8) => Some(InlineAsmType::I8),\n             ty::Int(IntTy::I16) | ty::Uint(UintTy::U16) => Some(InlineAsmType::I16),\n+            // Somewhat of a hack: fallback in the presence of errors does not actually\n+            // fall back to i32, but to ty::Error. For integer inference variables this\n+            // means that they don't get any fallback and stay as `{integer}`.\n+            // Since compilation can't succeed anyway, it's fine to use this to avoid printing\n+            // \"cannot use value of type `{integer}`\", even though that would absolutely\n+            // work due due i32 fallback if the current function had no other errors.\n+            ty::Infer(InferTy::IntVar(_)) => {\n+                assert!(self.is_tainted_by_errors());\n+                Some(InlineAsmType::I32)\n+            }\n             ty::Int(IntTy::I32) | ty::Uint(UintTy::U32) => Some(InlineAsmType::I32),\n             ty::Int(IntTy::I64) | ty::Uint(UintTy::U64) => Some(InlineAsmType::I64),\n             ty::Int(IntTy::I128) | ty::Uint(UintTy::U128) => Some(InlineAsmType::I128),\n             ty::Int(IntTy::Isize) | ty::Uint(UintTy::Usize) => Some(asm_ty_isize),\n+            ty::Infer(InferTy::FloatVar(_)) => {\n+                assert!(self.is_tainted_by_errors());\n+                Some(InlineAsmType::F32)\n+            }\n             ty::Float(FloatTy::F32) => Some(InlineAsmType::F32),\n             ty::Float(FloatTy::F64) => Some(InlineAsmType::F64),\n             ty::FnPtr(_) => Some(asm_ty_isize),\n@@ -208,6 +203,11 @@ impl<'tcx> ExprVisitor<'tcx> {\n             return None;\n         };\n \n+        if ty.has_infer_types_or_consts() {\n+            assert!(self.is_tainted_by_errors());\n+            return None;\n+        }\n+\n         // Check that the type implements Copy. The only case where this can\n         // possibly fail is for SIMD types which don't #[derive(Copy)].\n         if !ty.is_copy_modulo_regions(self.tcx.at(DUMMY_SP), self.param_env) {\n@@ -230,10 +230,10 @@ impl<'tcx> ExprVisitor<'tcx> {\n             if in_asm_ty != asm_ty {\n                 let msg = \"incompatible types for asm inout argument\";\n                 let mut err = self.tcx.sess.struct_span_err(vec![in_expr.span, expr.span], msg);\n-                err.span_label(\n-                    in_expr.span,\n-                    &format!(\"type `{}`\", self.typeck_results.expr_ty_adjusted(in_expr)),\n-                );\n+\n+                let in_expr_ty = self.typeck_results.borrow().expr_ty_adjusted(in_expr);\n+                let in_expr_ty = self.resolve_vars_if_possible(in_expr_ty);\n+                err.span_label(in_expr.span, &format!(\"type `{in_expr_ty}`\"));\n                 err.span_label(expr.span, &format!(\"type `{ty}`\"));\n                 err.note(\n                     \"asm inout arguments must have the same type, \\\n@@ -337,12 +337,14 @@ impl<'tcx> ExprVisitor<'tcx> {\n         Some(asm_ty)\n     }\n \n-    fn check_asm(&self, asm: &hir::InlineAsm<'tcx>, hir_id: hir::HirId) {\n+    pub fn check_asm(&self, asm: &hir::InlineAsm<'tcx>, enclosing_id: hir::HirId) {\n         let hir = self.tcx.hir();\n-        let enclosing_id = hir.enclosing_body_owner(hir_id);\n         let enclosing_def_id = hir.local_def_id(enclosing_id).to_def_id();\n         let target_features = self.tcx.asm_target_features(enclosing_def_id);\n-        let asm_arch = self.tcx.sess.asm_arch.unwrap();\n+        let Some(asm_arch) = self.tcx.sess.asm_arch else {\n+            self.tcx.sess.delay_span_bug(DUMMY_SP, \"target architecture does not support asm\");\n+            return;\n+        };\n         for (idx, (op, op_sp)) in asm.operands.iter().enumerate() {\n             // Validate register classes against currently enabled target\n             // features. We check that at least one type is available for\n@@ -358,6 +360,11 @@ impl<'tcx> ExprVisitor<'tcx> {\n                 // Some explicit registers cannot be used depending on the\n                 // target. Reject those here.\n                 if let InlineAsmRegOrRegClass::Reg(reg) = reg {\n+                    if let InlineAsmReg::Err = reg {\n+                        // `validate` will panic on `Err`, as an error must\n+                        // already have been reported.\n+                        continue;\n+                    }\n                     if let Err(msg) = reg.validate(\n                         asm_arch,\n                         self.tcx.sess.relocation_model(),\n@@ -374,6 +381,9 @@ impl<'tcx> ExprVisitor<'tcx> {\n                 if !op.is_clobber() {\n                     let mut missing_required_features = vec![];\n                     let reg_class = reg.reg_class();\n+                    if let InlineAsmRegClass::Err = reg_class {\n+                        continue;\n+                    }\n                     for &(_, feature) in reg_class.supported_types(asm_arch) {\n                         match feature {\n                             Some(feature) => {\n@@ -482,33 +492,6 @@ impl<'tcx> ExprVisitor<'tcx> {\n                         );\n                     }\n                 }\n-                // These are checked in ItemVisitor.\n-                hir::InlineAsmOperand::Const { .. }\n-                | hir::InlineAsmOperand::SymFn { .. }\n-                | hir::InlineAsmOperand::SymStatic { .. } => {}\n-            }\n-        }\n-    }\n-}\n-\n-impl<'tcx> Visitor<'tcx> for ItemVisitor<'tcx> {\n-    fn visit_nested_body(&mut self, body_id: hir::BodyId) {\n-        let owner_def_id = self.tcx.hir().body_owner_def_id(body_id);\n-        let body = self.tcx.hir().body(body_id);\n-        let param_env = self.tcx.param_env(owner_def_id.to_def_id());\n-        let typeck_results = self.tcx.typeck(owner_def_id);\n-        ExprVisitor { tcx: self.tcx, param_env, typeck_results }.visit_body(body);\n-        self.visit_body(body);\n-    }\n-\n-    fn visit_inline_asm(&mut self, asm: &'tcx hir::InlineAsm<'tcx>, id: hir::HirId) {\n-        for (op, op_sp) in asm.operands.iter() {\n-            match *op {\n-                // These are checked in ExprVisitor.\n-                hir::InlineAsmOperand::In { .. }\n-                | hir::InlineAsmOperand::Out { .. }\n-                | hir::InlineAsmOperand::InOut { .. }\n-                | hir::InlineAsmOperand::SplitInOut { .. } => {}\n                 // No special checking is needed for these:\n                 // - Typeck has checked that Const operands are integers.\n                 // - AST lowering guarantees that SymStatic points to a static.\n@@ -534,31 +517,5 @@ impl<'tcx> Visitor<'tcx> for ItemVisitor<'tcx> {\n                 }\n             }\n         }\n-        walk_inline_asm(self, asm, id);\n-    }\n-}\n-\n-impl<'tcx> Visitor<'tcx> for ExprVisitor<'tcx> {\n-    fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {\n-        match expr.kind {\n-            hir::ExprKind::Path(ref qpath) => {\n-                let res = self.typeck_results.qpath_res(qpath, expr.hir_id);\n-                if let Res::Def(DefKind::Fn, did) = res\n-                    && self.def_id_is_transmute(did)\n-                {\n-                    let typ = self.typeck_results.node_type(expr.hir_id);\n-                    let sig = typ.fn_sig(self.tcx);\n-                    let from = sig.inputs().skip_binder()[0];\n-                    let to = sig.output().skip_binder();\n-                    self.check_transmute(expr.span, from, to);\n-                }\n-            }\n-\n-            hir::ExprKind::InlineAsm(asm) => self.check_asm(asm, expr.hir_id),\n-\n-            _ => {}\n-        }\n-\n-        intravisit::walk_expr(self, expr);\n     }\n }", "previous_filename": "compiler/rustc_passes/src/intrinsicck.rs"}, {"sha": "7e686d0f5e99aad5bebaee340b387e1c3860fdde", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -81,6 +81,7 @@ mod gather_locals;\n mod generator_interior;\n mod inherited;\n pub mod intrinsic;\n+mod intrinsicck;\n pub mod method;\n mod op;\n mod pat;\n@@ -487,6 +488,12 @@ fn typeck_with_fallback<'tcx>(\n \n         fcx.select_all_obligations_or_error();\n \n+        if !fcx.infcx.is_tainted_by_errors() {\n+            fcx.check_transmutes();\n+        }\n+\n+        fcx.check_asms();\n+\n         if fn_sig.is_some() {\n             fcx.regionck_fn(id, body, span, wf_tys);\n         } else {"}, {"sha": "a6c7573b787c6496a4f8fd597ce64042a58a66ed", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -41,15 +41,15 @@ use std::ops::ControlFlow;\n /// ```ignore (illustrative)\n /// F: for<'b, 'tcx> where 'tcx FnOnce(FnCtxt<'b, 'tcx>)\n /// ```\n-struct CheckWfFcxBuilder<'tcx> {\n+pub(super) struct CheckWfFcxBuilder<'tcx> {\n     inherited: super::InheritedBuilder<'tcx>,\n     id: hir::HirId,\n     span: Span,\n     param_env: ty::ParamEnv<'tcx>,\n }\n \n impl<'tcx> CheckWfFcxBuilder<'tcx> {\n-    fn with_fcx<F>(&mut self, f: F)\n+    pub(super) fn with_fcx<F>(&mut self, f: F)\n     where\n         F: for<'b> FnOnce(&FnCtxt<'b, 'tcx>) -> FxHashSet<Ty<'tcx>>,\n     {\n@@ -972,7 +972,7 @@ fn check_associated_item(\n     })\n }\n \n-fn for_item<'tcx>(tcx: TyCtxt<'tcx>, item: &hir::Item<'_>) -> CheckWfFcxBuilder<'tcx> {\n+pub(super) fn for_item<'tcx>(tcx: TyCtxt<'tcx>, item: &hir::Item<'_>) -> CheckWfFcxBuilder<'tcx> {\n     for_id(tcx, item.def_id, item.span)\n }\n "}, {"sha": "454c71d4971eb1b9a71befe0fc24af32d12d8946", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -63,6 +63,7 @@ This API is completely unstable and subject to change.\n #![feature(hash_drain_filter)]\n #![feature(if_let_guard)]\n #![feature(is_sorted)]\n+#![feature(iter_intersperse)]\n #![feature(label_break_value)]\n #![feature(let_chains)]\n #![feature(let_else)]"}, {"sha": "2b6a9b71cd506390b41464288f84f165b3b6c9db", "filename": "src/test/ui/asm/aarch64/bad-reg.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.rs?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -36,9 +36,11 @@ fn main() {\n \n         asm!(\"\", in(\"p0\") foo);\n         //~^ ERROR register class `preg` can only be used as a clobber, not as an input or output\n+        //~| ERROR type `i32` cannot be used with this register class\n         asm!(\"\", out(\"p0\") _);\n         asm!(\"{}\", in(preg) foo);\n         //~^ ERROR register class `preg` can only be used as a clobber, not as an input or output\n+        //~| ERROR type `i32` cannot be used with this register class\n         asm!(\"{}\", out(preg) _);\n         //~^ ERROR register class `preg` can only be used as a clobber, not as an input or output\n "}, {"sha": "0ba627dac309fc8e44534a91082cbf50de1c809b", "filename": "src/test/ui/asm/aarch64/bad-reg.stderr", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.stderr?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -87,60 +87,76 @@ LL |         asm!(\"\", in(\"p0\") foo);\n    |                  ^^^^^^^^^^^^\n \n error: register class `preg` can only be used as a clobber, not as an input or output\n-  --> $DIR/bad-reg.rs:40:20\n+  --> $DIR/bad-reg.rs:41:20\n    |\n LL |         asm!(\"{}\", in(preg) foo);\n    |                    ^^^^^^^^^^^^\n \n error: register class `preg` can only be used as a clobber, not as an input or output\n-  --> $DIR/bad-reg.rs:42:20\n+  --> $DIR/bad-reg.rs:44:20\n    |\n LL |         asm!(\"{}\", out(preg) _);\n    |                    ^^^^^^^^^^^\n \n error: register `x0` conflicts with register `x0`\n-  --> $DIR/bad-reg.rs:48:32\n+  --> $DIR/bad-reg.rs:50:32\n    |\n LL |         asm!(\"\", in(\"x0\") foo, in(\"w0\") bar);\n    |                  ------------  ^^^^^^^^^^^^ register `x0`\n    |                  |\n    |                  register `x0`\n \n error: register `x0` conflicts with register `x0`\n-  --> $DIR/bad-reg.rs:50:32\n+  --> $DIR/bad-reg.rs:52:32\n    |\n LL |         asm!(\"\", in(\"x0\") foo, out(\"x0\") bar);\n    |                  ------------  ^^^^^^^^^^^^^ register `x0`\n    |                  |\n    |                  register `x0`\n    |\n help: use `lateout` instead of `out` to avoid conflict\n-  --> $DIR/bad-reg.rs:50:18\n+  --> $DIR/bad-reg.rs:52:18\n    |\n LL |         asm!(\"\", in(\"x0\") foo, out(\"x0\") bar);\n    |                  ^^^^^^^^^^^^\n \n error: register `v0` conflicts with register `v0`\n-  --> $DIR/bad-reg.rs:53:32\n+  --> $DIR/bad-reg.rs:55:32\n    |\n LL |         asm!(\"\", in(\"v0\") foo, in(\"q0\") bar);\n    |                  ------------  ^^^^^^^^^^^^ register `v0`\n    |                  |\n    |                  register `v0`\n \n error: register `v0` conflicts with register `v0`\n-  --> $DIR/bad-reg.rs:55:32\n+  --> $DIR/bad-reg.rs:57:32\n    |\n LL |         asm!(\"\", in(\"v0\") foo, out(\"q0\") bar);\n    |                  ------------  ^^^^^^^^^^^^^ register `v0`\n    |                  |\n    |                  register `v0`\n    |\n help: use `lateout` instead of `out` to avoid conflict\n-  --> $DIR/bad-reg.rs:55:18\n+  --> $DIR/bad-reg.rs:57:18\n    |\n LL |         asm!(\"\", in(\"v0\") foo, out(\"q0\") bar);\n    |                  ^^^^^^^^^^^^\n \n-error: aborting due to 18 previous errors\n+error: type `i32` cannot be used with this register class\n+  --> $DIR/bad-reg.rs:37:27\n+   |\n+LL |         asm!(\"\", in(\"p0\") foo);\n+   |                           ^^^\n+   |\n+   = note: register class `preg` supports these types: \n+\n+error: type `i32` cannot be used with this register class\n+  --> $DIR/bad-reg.rs:41:29\n+   |\n+LL |         asm!(\"{}\", in(preg) foo);\n+   |                             ^^^\n+   |\n+   = note: register class `preg` supports these types: \n+\n+error: aborting due to 20 previous errors\n "}, {"sha": "e4d29754556c80ccdf8ae412db3b8f2ae60e8d44", "filename": "src/test/ui/asm/aarch64/type-check-2-2.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2-2.rs?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -0,0 +1,37 @@\n+// only-aarch64\n+\n+#![feature(repr_simd, never_type, asm_sym)]\n+\n+use std::arch::{asm, global_asm};\n+\n+#[repr(simd)]\n+#[derive(Clone, Copy)]\n+struct SimdType(f32, f32, f32, f32);\n+\n+#[repr(simd)]\n+struct SimdNonCopy(f32, f32, f32, f32);\n+\n+fn main() {\n+    unsafe {\n+        // Inputs must be initialized\n+\n+        let x: u64;\n+        asm!(\"{}\", in(reg) x);\n+        //~^ ERROR use of possibly-uninitialized variable: `x`\n+        let mut y: u64;\n+        asm!(\"{}\", inout(reg) y);\n+        //~^ ERROR use of possibly-uninitialized variable: `y`\n+        let _ = y;\n+\n+        // Outputs require mutable places\n+\n+        let v: Vec<u64> = vec![0, 1, 2];\n+        asm!(\"{}\", in(reg) v[0]);\n+        asm!(\"{}\", out(reg) v[0]);\n+        //~^ ERROR cannot borrow `v` as mutable, as it is not declared as mutable\n+        asm!(\"{}\", inout(reg) v[0]);\n+        //~^ ERROR cannot borrow `v` as mutable, as it is not declared as mutable\n+\n+        // Sym operands must point to a function or static\n+    }\n+}"}, {"sha": "37bbe394994e08c9e4d2dcd836b2f2d1bb24ad33", "filename": "src/test/ui/asm/aarch64/type-check-2-2.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2-2.stderr?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -0,0 +1,34 @@\n+error[E0381]: use of possibly-uninitialized variable: `x`\n+  --> $DIR/type-check-2-2.rs:19:28\n+   |\n+LL |         asm!(\"{}\", in(reg) x);\n+   |                            ^ use of possibly-uninitialized `x`\n+\n+error[E0381]: use of possibly-uninitialized variable: `y`\n+  --> $DIR/type-check-2-2.rs:22:9\n+   |\n+LL |         asm!(\"{}\", inout(reg) y);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^ use of possibly-uninitialized `y`\n+\n+error[E0596]: cannot borrow `v` as mutable, as it is not declared as mutable\n+  --> $DIR/type-check-2-2.rs:30:29\n+   |\n+LL |         let v: Vec<u64> = vec![0, 1, 2];\n+   |             - help: consider changing this to be mutable: `mut v`\n+LL |         asm!(\"{}\", in(reg) v[0]);\n+LL |         asm!(\"{}\", out(reg) v[0]);\n+   |                             ^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow `v` as mutable, as it is not declared as mutable\n+  --> $DIR/type-check-2-2.rs:32:31\n+   |\n+LL |         let v: Vec<u64> = vec![0, 1, 2];\n+   |             - help: consider changing this to be mutable: `mut v`\n+...\n+LL |         asm!(\"{}\", inout(reg) v[0]);\n+   |                               ^ cannot borrow as mutable\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0381, E0596.\n+For more information about an error, try `rustc --explain E0381`."}, {"sha": "fdafe63c7b07b51b2dfd77addcd0530153b1ee43", "filename": "src/test/ui/asm/aarch64/type-check-2.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2.rs?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -15,23 +15,6 @@ fn main() {\n     unsafe {\n         // Inputs must be initialized\n \n-        let x: u64;\n-        asm!(\"{}\", in(reg) x);\n-        //~^ ERROR use of possibly-uninitialized variable: `x`\n-        let mut y: u64;\n-        asm!(\"{}\", inout(reg) y);\n-        //~^ ERROR use of possibly-uninitialized variable: `y`\n-        let _ = y;\n-\n-        // Outputs require mutable places\n-\n-        let v: Vec<u64> = vec![0, 1, 2];\n-        asm!(\"{}\", in(reg) v[0]);\n-        asm!(\"{}\", out(reg) v[0]);\n-        //~^ ERROR cannot borrow `v` as mutable, as it is not declared as mutable\n-        asm!(\"{}\", inout(reg) v[0]);\n-        //~^ ERROR cannot borrow `v` as mutable, as it is not declared as mutable\n-\n         // Sym operands must point to a function or static\n \n         const C: i32 = 0;"}, {"sha": "4b99652cd20bd0805e8644c1a063af4350e944b1", "filename": "src/test/ui/asm/aarch64/type-check-2.stderr", "status": "modified", "additions": 25, "deletions": 57, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2.stderr?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -1,21 +1,37 @@\n+error: invalid `sym` operand\n+  --> $DIR/type-check-2.rs:75:19\n+   |\n+LL | global_asm!(\"{}\", sym C);\n+   |                   ^^^^^ is an `i32`\n+   |\n+   = help: `sym` operands must refer to either a function or a static\n+\n+error: invalid `sym` operand\n+  --> $DIR/type-check-2.rs:24:20\n+   |\n+LL |         asm!(\"{}\", sym C);\n+   |                    ^^^^^ is an `i32`\n+   |\n+   = help: `sym` operands must refer to either a function or a static\n+\n error: arguments for inline assembly must be copyable\n-  --> $DIR/type-check-2.rs:46:31\n+  --> $DIR/type-check-2.rs:29:31\n    |\n LL |         asm!(\"{:v}\", in(vreg) SimdNonCopy(0.0, 0.0, 0.0, 0.0));\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `SimdNonCopy` does not implement the Copy trait\n \n-error: cannot use value of type `[closure@$DIR/type-check-2.rs:58:28: 58:38]` for inline assembly\n-  --> $DIR/type-check-2.rs:58:28\n+error: cannot use value of type `[closure@$DIR/type-check-2.rs:41:28: 41:38]` for inline assembly\n+  --> $DIR/type-check-2.rs:41:28\n    |\n LL |         asm!(\"{}\", in(reg) |x: i32| x);\n    |                            ^^^^^^^^^^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `Vec<i32>` for inline assembly\n-  --> $DIR/type-check-2.rs:60:28\n+  --> $DIR/type-check-2.rs:43:28\n    |\n LL |         asm!(\"{}\", in(reg) vec![0]);\n    |                            ^^^^^^^\n@@ -24,84 +40,36 @@ LL |         asm!(\"{}\", in(reg) vec![0]);\n    = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: cannot use value of type `(i32, i32, i32)` for inline assembly\n-  --> $DIR/type-check-2.rs:62:28\n+  --> $DIR/type-check-2.rs:45:28\n    |\n LL |         asm!(\"{}\", in(reg) (1, 2, 3));\n    |                            ^^^^^^^^^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `[i32; 3]` for inline assembly\n-  --> $DIR/type-check-2.rs:64:28\n+  --> $DIR/type-check-2.rs:47:28\n    |\n LL |         asm!(\"{}\", in(reg) [1, 2, 3]);\n    |                            ^^^^^^^^^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `fn() {main}` for inline assembly\n-  --> $DIR/type-check-2.rs:72:31\n+  --> $DIR/type-check-2.rs:55:31\n    |\n LL |         asm!(\"{}\", inout(reg) f);\n    |                               ^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `&mut i32` for inline assembly\n-  --> $DIR/type-check-2.rs:75:31\n+  --> $DIR/type-check-2.rs:58:31\n    |\n LL |         asm!(\"{}\", inout(reg) r);\n    |                               ^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n-error: invalid `sym` operand\n-  --> $DIR/type-check-2.rs:41:20\n-   |\n-LL |         asm!(\"{}\", sym C);\n-   |                    ^^^^^ is an `i32`\n-   |\n-   = help: `sym` operands must refer to either a function or a static\n-\n-error: invalid `sym` operand\n-  --> $DIR/type-check-2.rs:92:19\n-   |\n-LL | global_asm!(\"{}\", sym C);\n-   |                   ^^^^^ is an `i32`\n-   |\n-   = help: `sym` operands must refer to either a function or a static\n-\n-error[E0381]: use of possibly-uninitialized variable: `x`\n-  --> $DIR/type-check-2.rs:19:28\n-   |\n-LL |         asm!(\"{}\", in(reg) x);\n-   |                            ^ use of possibly-uninitialized `x`\n-\n-error[E0381]: use of possibly-uninitialized variable: `y`\n-  --> $DIR/type-check-2.rs:22:9\n-   |\n-LL |         asm!(\"{}\", inout(reg) y);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^ use of possibly-uninitialized `y`\n-\n-error[E0596]: cannot borrow `v` as mutable, as it is not declared as mutable\n-  --> $DIR/type-check-2.rs:30:29\n-   |\n-LL |         let v: Vec<u64> = vec![0, 1, 2];\n-   |             - help: consider changing this to be mutable: `mut v`\n-LL |         asm!(\"{}\", in(reg) v[0]);\n-LL |         asm!(\"{}\", out(reg) v[0]);\n-   |                             ^ cannot borrow as mutable\n-\n-error[E0596]: cannot borrow `v` as mutable, as it is not declared as mutable\n-  --> $DIR/type-check-2.rs:32:31\n-   |\n-LL |         let v: Vec<u64> = vec![0, 1, 2];\n-   |             - help: consider changing this to be mutable: `mut v`\n-...\n-LL |         asm!(\"{}\", inout(reg) v[0]);\n-   |                               ^ cannot borrow as mutable\n-\n-error: aborting due to 13 previous errors\n+error: aborting due to 9 previous errors\n \n-Some errors have detailed explanations: E0381, E0596.\n-For more information about an error, try `rustc --explain E0381`."}, {"sha": "623f6593d79ba51b1a1a56d410c4266e8dd48dae", "filename": "src/test/ui/asm/aarch64/type-check-3.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-3.rs?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -95,21 +95,3 @@ fn main() {\n         asm!(\"{:x}\", inout(reg) main => val_u64);\n     }\n }\n-\n-// Constants must be... constant\n-\n-static S: i32 = 1;\n-const fn const_foo(x: i32) -> i32 {\n-    x\n-}\n-const fn const_bar<T>(x: T) -> T {\n-    x\n-}\n-global_asm!(\"{}\", const S);\n-//~^ ERROR constants cannot refer to statics\n-global_asm!(\"{}\", const const_foo(0));\n-global_asm!(\"{}\", const const_foo(S));\n-//~^ ERROR constants cannot refer to statics\n-global_asm!(\"{}\", const const_bar(0));\n-global_asm!(\"{}\", const const_bar(S));\n-//~^ ERROR constants cannot refer to statics"}, {"sha": "b320abdc01b721a1cea17ae89b34cf7cfe025430", "filename": "src/test/ui/asm/aarch64/type-check-3.stderr", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-3.stderr?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -143,30 +143,5 @@ LL |         asm!(\"{:x}\", inout(reg) main => val_u32);\n    |\n    = note: asm inout arguments must have the same type, unless they are both pointers or integers of the same size\n \n-error[E0013]: constants cannot refer to statics\n-  --> $DIR/type-check-3.rs:108:25\n-   |\n-LL | global_asm!(\"{}\", const S);\n-   |                         ^\n-   |\n-   = help: consider extracting the value of the `static` to a `const`, and referring to that\n-\n-error[E0013]: constants cannot refer to statics\n-  --> $DIR/type-check-3.rs:111:35\n-   |\n-LL | global_asm!(\"{}\", const const_foo(S));\n-   |                                   ^\n-   |\n-   = help: consider extracting the value of the `static` to a `const`, and referring to that\n-\n-error[E0013]: constants cannot refer to statics\n-  --> $DIR/type-check-3.rs:114:35\n-   |\n-LL | global_asm!(\"{}\", const const_bar(S));\n-   |                                   ^\n-   |\n-   = help: consider extracting the value of the `static` to a `const`, and referring to that\n-\n-error: aborting due to 9 previous errors; 10 warnings emitted\n+error: aborting due to 6 previous errors; 10 warnings emitted\n \n-For more information about this error, try `rustc --explain E0013`."}, {"sha": "bd23755c02316ee099600add3c46ca20b3cd35e7", "filename": "src/test/ui/asm/aarch64/type-check-4.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-4.rs?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -0,0 +1,32 @@\n+// only-aarch64\n+// compile-flags: -C target-feature=+neon\n+\n+#![feature(repr_simd, stdsimd, asm_const)]\n+\n+use std::arch::aarch64::float64x2_t;\n+use std::arch::{asm, global_asm};\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+struct Simd256bit(f64, f64, f64, f64);\n+\n+fn main() {\n+}\n+\n+// Constants must be... constant\n+\n+static S: i32 = 1;\n+const fn const_foo(x: i32) -> i32 {\n+    x\n+}\n+const fn const_bar<T>(x: T) -> T {\n+    x\n+}\n+global_asm!(\"{}\", const S);\n+//~^ ERROR constants cannot refer to statics\n+global_asm!(\"{}\", const const_foo(0));\n+global_asm!(\"{}\", const const_foo(S));\n+//~^ ERROR constants cannot refer to statics\n+global_asm!(\"{}\", const const_bar(0));\n+global_asm!(\"{}\", const const_bar(S));\n+//~^ ERROR constants cannot refer to statics"}, {"sha": "4837e647beae12be570edd4d61f3dea736ede9d5", "filename": "src/test/ui/asm/aarch64/type-check-4.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-4.stderr?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -0,0 +1,27 @@\n+error[E0013]: constants cannot refer to statics\n+  --> $DIR/type-check-4.rs:25:25\n+   |\n+LL | global_asm!(\"{}\", const S);\n+   |                         ^\n+   |\n+   = help: consider extracting the value of the `static` to a `const`, and referring to that\n+\n+error[E0013]: constants cannot refer to statics\n+  --> $DIR/type-check-4.rs:28:35\n+   |\n+LL | global_asm!(\"{}\", const const_foo(S));\n+   |                                   ^\n+   |\n+   = help: consider extracting the value of the `static` to a `const`, and referring to that\n+\n+error[E0013]: constants cannot refer to statics\n+  --> $DIR/type-check-4.rs:31:35\n+   |\n+LL | global_asm!(\"{}\", const const_bar(S));\n+   |                                   ^\n+   |\n+   = help: consider extracting the value of the `static` to a `const`, and referring to that\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0013`."}, {"sha": "7ef93e15f5ba1cbfc31493e5be0acab675062257", "filename": "src/test/ui/asm/bad-template.aarch64_mirunsafeck.stderr", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_mirunsafeck.stderr?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -89,7 +89,7 @@ LL |         asm!(\"{:foo}\", in(reg) foo);\n    |                 ^^^\n \n error: multiple unused asm arguments\n-  --> $DIR/bad-template.rs:52:18\n+  --> $DIR/bad-template.rs:53:18\n    |\n LL |         asm!(\"\", in(reg) 0, in(reg) 1);\n    |                  ^^^^^^^^^  ^^^^^^^^^ argument never used\n@@ -99,37 +99,37 @@ LL |         asm!(\"\", in(reg) 0, in(reg) 1);\n    = help: if these arguments are intentionally unused, consider using them in an asm comment: `\"/* {0} {1} */\"`\n \n error: invalid reference to argument at index 0\n-  --> $DIR/bad-template.rs:58:14\n+  --> $DIR/bad-template.rs:59:14\n    |\n LL | global_asm!(\"{}\");\n    |              ^^ from here\n    |\n    = note: no arguments were given\n \n error: invalid reference to argument at index 1\n-  --> $DIR/bad-template.rs:60:14\n+  --> $DIR/bad-template.rs:61:14\n    |\n LL | global_asm!(\"{1}\", const FOO);\n    |              ^^^ from here\n    |\n    = note: there is 1 argument\n \n error: argument never used\n-  --> $DIR/bad-template.rs:60:20\n+  --> $DIR/bad-template.rs:61:20\n    |\n LL | global_asm!(\"{1}\", const FOO);\n    |                    ^^^^^^^^^ argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {0} */\"`\n \n error: there is no argument named `a`\n-  --> $DIR/bad-template.rs:63:15\n+  --> $DIR/bad-template.rs:64:15\n    |\n LL | global_asm!(\"{a}\");\n    |               ^\n \n error: invalid reference to argument at index 0\n-  --> $DIR/bad-template.rs:65:14\n+  --> $DIR/bad-template.rs:66:14\n    |\n LL | global_asm!(\"{}\", a = const FOO);\n    |              ^^   ------------- named argument\n@@ -138,43 +138,43 @@ LL | global_asm!(\"{}\", a = const FOO);\n    |\n    = note: no positional arguments were given\n note: named arguments cannot be referenced by position\n-  --> $DIR/bad-template.rs:65:19\n+  --> $DIR/bad-template.rs:66:19\n    |\n LL | global_asm!(\"{}\", a = const FOO);\n    |                   ^^^^^^^^^^^^^\n \n error: named argument never used\n-  --> $DIR/bad-template.rs:65:19\n+  --> $DIR/bad-template.rs:66:19\n    |\n LL | global_asm!(\"{}\", a = const FOO);\n    |                   ^^^^^^^^^^^^^ named argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {a} */\"`\n \n error: invalid reference to argument at index 1\n-  --> $DIR/bad-template.rs:68:14\n+  --> $DIR/bad-template.rs:69:14\n    |\n LL | global_asm!(\"{1}\", a = const FOO);\n    |              ^^^ from here\n    |\n    = note: no positional arguments were given\n \n error: named argument never used\n-  --> $DIR/bad-template.rs:68:20\n+  --> $DIR/bad-template.rs:69:20\n    |\n LL | global_asm!(\"{1}\", a = const FOO);\n    |                    ^^^^^^^^^^^^^ named argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {a} */\"`\n \n error: asm template modifier must be a single character\n-  --> $DIR/bad-template.rs:71:16\n+  --> $DIR/bad-template.rs:72:16\n    |\n LL | global_asm!(\"{:foo}\", const FOO);\n    |                ^^^\n \n error: multiple unused asm arguments\n-  --> $DIR/bad-template.rs:73:17\n+  --> $DIR/bad-template.rs:74:17\n    |\n LL | global_asm!(\"\", const FOO, const FOO);\n    |                 ^^^^^^^^^  ^^^^^^^^^ argument never used\n@@ -183,5 +183,15 @@ LL | global_asm!(\"\", const FOO, const FOO);\n    |\n    = help: if these arguments are intentionally unused, consider using them in an asm comment: `\"/* {0} {1} */\"`\n \n-error: aborting due to 21 previous errors\n+warning: formatting may not be suitable for sub-register argument\n+  --> $DIR/bad-template.rs:50:15\n+   |\n+LL |         asm!(\"{:foo}\", in(reg) foo);\n+   |               ^^^^^^           --- for this argument\n+   |\n+   = note: `#[warn(asm_sub_register)]` on by default\n+   = help: use the `w` modifier to have the register formatted as `w0`\n+   = help: or use the `x` modifier to keep the default formatting of `x0`\n+\n+error: aborting due to 21 previous errors; 1 warning emitted\n "}, {"sha": "7ef93e15f5ba1cbfc31493e5be0acab675062257", "filename": "src/test/ui/asm/bad-template.aarch64_thirunsafeck.stderr", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_thirunsafeck.stderr?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -89,7 +89,7 @@ LL |         asm!(\"{:foo}\", in(reg) foo);\n    |                 ^^^\n \n error: multiple unused asm arguments\n-  --> $DIR/bad-template.rs:52:18\n+  --> $DIR/bad-template.rs:53:18\n    |\n LL |         asm!(\"\", in(reg) 0, in(reg) 1);\n    |                  ^^^^^^^^^  ^^^^^^^^^ argument never used\n@@ -99,37 +99,37 @@ LL |         asm!(\"\", in(reg) 0, in(reg) 1);\n    = help: if these arguments are intentionally unused, consider using them in an asm comment: `\"/* {0} {1} */\"`\n \n error: invalid reference to argument at index 0\n-  --> $DIR/bad-template.rs:58:14\n+  --> $DIR/bad-template.rs:59:14\n    |\n LL | global_asm!(\"{}\");\n    |              ^^ from here\n    |\n    = note: no arguments were given\n \n error: invalid reference to argument at index 1\n-  --> $DIR/bad-template.rs:60:14\n+  --> $DIR/bad-template.rs:61:14\n    |\n LL | global_asm!(\"{1}\", const FOO);\n    |              ^^^ from here\n    |\n    = note: there is 1 argument\n \n error: argument never used\n-  --> $DIR/bad-template.rs:60:20\n+  --> $DIR/bad-template.rs:61:20\n    |\n LL | global_asm!(\"{1}\", const FOO);\n    |                    ^^^^^^^^^ argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {0} */\"`\n \n error: there is no argument named `a`\n-  --> $DIR/bad-template.rs:63:15\n+  --> $DIR/bad-template.rs:64:15\n    |\n LL | global_asm!(\"{a}\");\n    |               ^\n \n error: invalid reference to argument at index 0\n-  --> $DIR/bad-template.rs:65:14\n+  --> $DIR/bad-template.rs:66:14\n    |\n LL | global_asm!(\"{}\", a = const FOO);\n    |              ^^   ------------- named argument\n@@ -138,43 +138,43 @@ LL | global_asm!(\"{}\", a = const FOO);\n    |\n    = note: no positional arguments were given\n note: named arguments cannot be referenced by position\n-  --> $DIR/bad-template.rs:65:19\n+  --> $DIR/bad-template.rs:66:19\n    |\n LL | global_asm!(\"{}\", a = const FOO);\n    |                   ^^^^^^^^^^^^^\n \n error: named argument never used\n-  --> $DIR/bad-template.rs:65:19\n+  --> $DIR/bad-template.rs:66:19\n    |\n LL | global_asm!(\"{}\", a = const FOO);\n    |                   ^^^^^^^^^^^^^ named argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {a} */\"`\n \n error: invalid reference to argument at index 1\n-  --> $DIR/bad-template.rs:68:14\n+  --> $DIR/bad-template.rs:69:14\n    |\n LL | global_asm!(\"{1}\", a = const FOO);\n    |              ^^^ from here\n    |\n    = note: no positional arguments were given\n \n error: named argument never used\n-  --> $DIR/bad-template.rs:68:20\n+  --> $DIR/bad-template.rs:69:20\n    |\n LL | global_asm!(\"{1}\", a = const FOO);\n    |                    ^^^^^^^^^^^^^ named argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {a} */\"`\n \n error: asm template modifier must be a single character\n-  --> $DIR/bad-template.rs:71:16\n+  --> $DIR/bad-template.rs:72:16\n    |\n LL | global_asm!(\"{:foo}\", const FOO);\n    |                ^^^\n \n error: multiple unused asm arguments\n-  --> $DIR/bad-template.rs:73:17\n+  --> $DIR/bad-template.rs:74:17\n    |\n LL | global_asm!(\"\", const FOO, const FOO);\n    |                 ^^^^^^^^^  ^^^^^^^^^ argument never used\n@@ -183,5 +183,15 @@ LL | global_asm!(\"\", const FOO, const FOO);\n    |\n    = help: if these arguments are intentionally unused, consider using them in an asm comment: `\"/* {0} {1} */\"`\n \n-error: aborting due to 21 previous errors\n+warning: formatting may not be suitable for sub-register argument\n+  --> $DIR/bad-template.rs:50:15\n+   |\n+LL |         asm!(\"{:foo}\", in(reg) foo);\n+   |               ^^^^^^           --- for this argument\n+   |\n+   = note: `#[warn(asm_sub_register)]` on by default\n+   = help: use the `w` modifier to have the register formatted as `w0`\n+   = help: or use the `x` modifier to keep the default formatting of `x0`\n+\n+error: aborting due to 21 previous errors; 1 warning emitted\n "}, {"sha": "556371747920e9f9f1398bb92935c087bb6d09ad", "filename": "src/test/ui/asm/bad-template.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Fbad-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Fbad-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.rs?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -49,6 +49,7 @@ fn main() {\n         //[aarch64_thirunsafeck,aarch64_mirunsafeck]~^ ERROR invalid reference to argument at index 0\n         asm!(\"{:foo}\", in(reg) foo);\n         //~^ ERROR asm template modifier must be a single character\n+        //~| WARN formatting may not be suitable for sub-register argument [asm_sub_register]\n         asm!(\"\", in(reg) 0, in(reg) 1);\n         //~^ ERROR multiple unused asm arguments\n     }"}, {"sha": "250bc3be42ebb42fed995abba4b73aafb986173d", "filename": "src/test/ui/asm/bad-template.x86_64_mirunsafeck.stderr", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_mirunsafeck.stderr?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -89,7 +89,7 @@ LL |         asm!(\"{:foo}\", in(reg) foo);\n    |                 ^^^\n \n error: multiple unused asm arguments\n-  --> $DIR/bad-template.rs:52:18\n+  --> $DIR/bad-template.rs:53:18\n    |\n LL |         asm!(\"\", in(reg) 0, in(reg) 1);\n    |                  ^^^^^^^^^  ^^^^^^^^^ argument never used\n@@ -99,37 +99,37 @@ LL |         asm!(\"\", in(reg) 0, in(reg) 1);\n    = help: if these arguments are intentionally unused, consider using them in an asm comment: `\"/* {0} {1} */\"`\n \n error: invalid reference to argument at index 0\n-  --> $DIR/bad-template.rs:58:14\n+  --> $DIR/bad-template.rs:59:14\n    |\n LL | global_asm!(\"{}\");\n    |              ^^ from here\n    |\n    = note: no arguments were given\n \n error: invalid reference to argument at index 1\n-  --> $DIR/bad-template.rs:60:14\n+  --> $DIR/bad-template.rs:61:14\n    |\n LL | global_asm!(\"{1}\", const FOO);\n    |              ^^^ from here\n    |\n    = note: there is 1 argument\n \n error: argument never used\n-  --> $DIR/bad-template.rs:60:20\n+  --> $DIR/bad-template.rs:61:20\n    |\n LL | global_asm!(\"{1}\", const FOO);\n    |                    ^^^^^^^^^ argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {0} */\"`\n \n error: there is no argument named `a`\n-  --> $DIR/bad-template.rs:63:15\n+  --> $DIR/bad-template.rs:64:15\n    |\n LL | global_asm!(\"{a}\");\n    |               ^\n \n error: invalid reference to argument at index 0\n-  --> $DIR/bad-template.rs:65:14\n+  --> $DIR/bad-template.rs:66:14\n    |\n LL | global_asm!(\"{}\", a = const FOO);\n    |              ^^   ------------- named argument\n@@ -138,43 +138,43 @@ LL | global_asm!(\"{}\", a = const FOO);\n    |\n    = note: no positional arguments were given\n note: named arguments cannot be referenced by position\n-  --> $DIR/bad-template.rs:65:19\n+  --> $DIR/bad-template.rs:66:19\n    |\n LL | global_asm!(\"{}\", a = const FOO);\n    |                   ^^^^^^^^^^^^^\n \n error: named argument never used\n-  --> $DIR/bad-template.rs:65:19\n+  --> $DIR/bad-template.rs:66:19\n    |\n LL | global_asm!(\"{}\", a = const FOO);\n    |                   ^^^^^^^^^^^^^ named argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {a} */\"`\n \n error: invalid reference to argument at index 1\n-  --> $DIR/bad-template.rs:68:14\n+  --> $DIR/bad-template.rs:69:14\n    |\n LL | global_asm!(\"{1}\", a = const FOO);\n    |              ^^^ from here\n    |\n    = note: no positional arguments were given\n \n error: named argument never used\n-  --> $DIR/bad-template.rs:68:20\n+  --> $DIR/bad-template.rs:69:20\n    |\n LL | global_asm!(\"{1}\", a = const FOO);\n    |                    ^^^^^^^^^^^^^ named argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {a} */\"`\n \n error: asm template modifier must be a single character\n-  --> $DIR/bad-template.rs:71:16\n+  --> $DIR/bad-template.rs:72:16\n    |\n LL | global_asm!(\"{:foo}\", const FOO);\n    |                ^^^\n \n error: multiple unused asm arguments\n-  --> $DIR/bad-template.rs:73:17\n+  --> $DIR/bad-template.rs:74:17\n    |\n LL | global_asm!(\"\", const FOO, const FOO);\n    |                 ^^^^^^^^^  ^^^^^^^^^ argument never used\n@@ -183,5 +183,15 @@ LL | global_asm!(\"\", const FOO, const FOO);\n    |\n    = help: if these arguments are intentionally unused, consider using them in an asm comment: `\"/* {0} {1} */\"`\n \n-error: aborting due to 21 previous errors\n+warning: formatting may not be suitable for sub-register argument\n+  --> $DIR/bad-template.rs:50:15\n+   |\n+LL |         asm!(\"{:foo}\", in(reg) foo);\n+   |               ^^^^^^           --- for this argument\n+   |\n+   = note: `#[warn(asm_sub_register)]` on by default\n+   = help: use the `e` modifier to have the register formatted as `eax`\n+   = help: or use the `r` modifier to keep the default formatting of `rax`\n+\n+error: aborting due to 21 previous errors; 1 warning emitted\n "}, {"sha": "250bc3be42ebb42fed995abba4b73aafb986173d", "filename": "src/test/ui/asm/bad-template.x86_64_thirunsafeck.stderr", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_thirunsafeck.stderr?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -89,7 +89,7 @@ LL |         asm!(\"{:foo}\", in(reg) foo);\n    |                 ^^^\n \n error: multiple unused asm arguments\n-  --> $DIR/bad-template.rs:52:18\n+  --> $DIR/bad-template.rs:53:18\n    |\n LL |         asm!(\"\", in(reg) 0, in(reg) 1);\n    |                  ^^^^^^^^^  ^^^^^^^^^ argument never used\n@@ -99,37 +99,37 @@ LL |         asm!(\"\", in(reg) 0, in(reg) 1);\n    = help: if these arguments are intentionally unused, consider using them in an asm comment: `\"/* {0} {1} */\"`\n \n error: invalid reference to argument at index 0\n-  --> $DIR/bad-template.rs:58:14\n+  --> $DIR/bad-template.rs:59:14\n    |\n LL | global_asm!(\"{}\");\n    |              ^^ from here\n    |\n    = note: no arguments were given\n \n error: invalid reference to argument at index 1\n-  --> $DIR/bad-template.rs:60:14\n+  --> $DIR/bad-template.rs:61:14\n    |\n LL | global_asm!(\"{1}\", const FOO);\n    |              ^^^ from here\n    |\n    = note: there is 1 argument\n \n error: argument never used\n-  --> $DIR/bad-template.rs:60:20\n+  --> $DIR/bad-template.rs:61:20\n    |\n LL | global_asm!(\"{1}\", const FOO);\n    |                    ^^^^^^^^^ argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {0} */\"`\n \n error: there is no argument named `a`\n-  --> $DIR/bad-template.rs:63:15\n+  --> $DIR/bad-template.rs:64:15\n    |\n LL | global_asm!(\"{a}\");\n    |               ^\n \n error: invalid reference to argument at index 0\n-  --> $DIR/bad-template.rs:65:14\n+  --> $DIR/bad-template.rs:66:14\n    |\n LL | global_asm!(\"{}\", a = const FOO);\n    |              ^^   ------------- named argument\n@@ -138,43 +138,43 @@ LL | global_asm!(\"{}\", a = const FOO);\n    |\n    = note: no positional arguments were given\n note: named arguments cannot be referenced by position\n-  --> $DIR/bad-template.rs:65:19\n+  --> $DIR/bad-template.rs:66:19\n    |\n LL | global_asm!(\"{}\", a = const FOO);\n    |                   ^^^^^^^^^^^^^\n \n error: named argument never used\n-  --> $DIR/bad-template.rs:65:19\n+  --> $DIR/bad-template.rs:66:19\n    |\n LL | global_asm!(\"{}\", a = const FOO);\n    |                   ^^^^^^^^^^^^^ named argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {a} */\"`\n \n error: invalid reference to argument at index 1\n-  --> $DIR/bad-template.rs:68:14\n+  --> $DIR/bad-template.rs:69:14\n    |\n LL | global_asm!(\"{1}\", a = const FOO);\n    |              ^^^ from here\n    |\n    = note: no positional arguments were given\n \n error: named argument never used\n-  --> $DIR/bad-template.rs:68:20\n+  --> $DIR/bad-template.rs:69:20\n    |\n LL | global_asm!(\"{1}\", a = const FOO);\n    |                    ^^^^^^^^^^^^^ named argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {a} */\"`\n \n error: asm template modifier must be a single character\n-  --> $DIR/bad-template.rs:71:16\n+  --> $DIR/bad-template.rs:72:16\n    |\n LL | global_asm!(\"{:foo}\", const FOO);\n    |                ^^^\n \n error: multiple unused asm arguments\n-  --> $DIR/bad-template.rs:73:17\n+  --> $DIR/bad-template.rs:74:17\n    |\n LL | global_asm!(\"\", const FOO, const FOO);\n    |                 ^^^^^^^^^  ^^^^^^^^^ argument never used\n@@ -183,5 +183,15 @@ LL | global_asm!(\"\", const FOO, const FOO);\n    |\n    = help: if these arguments are intentionally unused, consider using them in an asm comment: `\"/* {0} {1} */\"`\n \n-error: aborting due to 21 previous errors\n+warning: formatting may not be suitable for sub-register argument\n+  --> $DIR/bad-template.rs:50:15\n+   |\n+LL |         asm!(\"{:foo}\", in(reg) foo);\n+   |               ^^^^^^           --- for this argument\n+   |\n+   = note: `#[warn(asm_sub_register)]` on by default\n+   = help: use the `e` modifier to have the register formatted as `eax`\n+   = help: or use the `r` modifier to keep the default formatting of `rax`\n+\n+error: aborting due to 21 previous errors; 1 warning emitted\n "}, {"sha": "9e626f5711db4269f5ffe64d8a858f7b49a19c63", "filename": "src/test/ui/asm/naked-functions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -37,6 +37,7 @@ pub unsafe extern \"C\" fn inc(a: u32) -> u32 {\n }\n \n #[naked]\n+#[allow(asm_sub_register)]\n pub unsafe extern \"C\" fn inc_asm(a: u32) -> u32 {\n     asm!(\"/* {0} */\", in(reg) a, options(noreturn));\n     //~^ ERROR referencing function parameters is not allowed in naked functions"}, {"sha": "1828066b692a4a840e99d4b3c8b7c4edd87163b2", "filename": "src/test/ui/asm/naked-functions.stderr", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -1,23 +1,23 @@\n error: asm with the `pure` option must have at least one output\n-  --> $DIR/naked-functions.rs:110:14\n+  --> $DIR/naked-functions.rs:111:14\n    |\n LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^\n \n error: this is a user specified error\n-  --> $DIR/naked-functions.rs:202:5\n+  --> $DIR/naked-functions.rs:203:5\n    |\n LL |     compile_error!(\"this is a user specified error\")\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this is a user specified error\n-  --> $DIR/naked-functions.rs:208:5\n+  --> $DIR/naked-functions.rs:209:5\n    |\n LL |     compile_error!(\"this is a user specified error\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: asm template must be a string literal\n-  --> $DIR/naked-functions.rs:215:10\n+  --> $DIR/naked-functions.rs:216:10\n    |\n LL |     asm!(invalid_syntax)\n    |          ^^^^^^^^^^^^^^\n@@ -66,21 +66,21 @@ LL | | }\n    | |_^\n \n error: referencing function parameters is not allowed in naked functions\n-  --> $DIR/naked-functions.rs:41:31\n+  --> $DIR/naked-functions.rs:42:31\n    |\n LL |     asm!(\"/* {0} */\", in(reg) a, options(noreturn));\n    |                               ^\n    |\n    = help: follow the calling convention in asm block to use parameters\n \n error[E0787]: only `const` and `sym` operands are supported in naked functions\n-  --> $DIR/naked-functions.rs:41:23\n+  --> $DIR/naked-functions.rs:42:23\n    |\n LL |     asm!(\"/* {0} */\", in(reg) a, options(noreturn));\n    |                       ^^^^^^^^^\n \n error[E0787]: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:47:1\n+  --> $DIR/naked-functions.rs:48:1\n    |\n LL | / pub unsafe extern \"C\" fn inc_closure(a: u32) -> u32 {\n LL | |\n@@ -90,7 +90,7 @@ LL | | }\n    | |_^\n \n error[E0787]: only `const` and `sym` operands are supported in naked functions\n-  --> $DIR/naked-functions.rs:64:10\n+  --> $DIR/naked-functions.rs:65:10\n    |\n LL |          in(reg) a,\n    |          ^^^^^^^^^\n@@ -105,7 +105,7 @@ LL |          out(reg) e,\n    |          ^^^^^^^^^^\n \n error[E0787]: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:62:5\n+  --> $DIR/naked-functions.rs:63:5\n    |\n LL | /     asm!(\"/* {0} {1} {2} {3} {4} {5} {6} */\",\n LL | |\n@@ -122,7 +122,7 @@ LL |          sym G, options(noreturn),\n    |               +++++++++++++++++++\n \n error[E0787]: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:53:1\n+  --> $DIR/naked-functions.rs:54:1\n    |\n LL | / pub unsafe extern \"C\" fn unsupported_operands() {\n LL | |\n@@ -142,15 +142,15 @@ LL | | }\n    | |_^\n \n error[E0787]: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:76:1\n+  --> $DIR/naked-functions.rs:77:1\n    |\n LL | / pub extern \"C\" fn missing_assembly() {\n LL | |\n LL | | }\n    | |_^\n \n error[E0787]: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:83:5\n+  --> $DIR/naked-functions.rs:84:5\n    |\n LL |     asm!(\"\");\n    |     ^^^^^^^^\n@@ -161,7 +161,7 @@ LL |     asm!(\"\", options(noreturn));\n    |            +++++++++++++++++++\n \n error[E0787]: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:85:5\n+  --> $DIR/naked-functions.rs:86:5\n    |\n LL |     asm!(\"\");\n    |     ^^^^^^^^\n@@ -172,7 +172,7 @@ LL |     asm!(\"\", options(noreturn));\n    |            +++++++++++++++++++\n \n error[E0787]: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:87:5\n+  --> $DIR/naked-functions.rs:88:5\n    |\n LL |     asm!(\"\");\n    |     ^^^^^^^^\n@@ -183,7 +183,7 @@ LL |     asm!(\"\", options(noreturn));\n    |            +++++++++++++++++++\n \n error[E0787]: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:81:1\n+  --> $DIR/naked-functions.rs:82:1\n    |\n LL | / pub extern \"C\" fn too_many_asm_blocks() {\n LL | |\n@@ -201,15 +201,15 @@ LL | | }\n    | |_^\n \n error: referencing function parameters is not allowed in naked functions\n-  --> $DIR/naked-functions.rs:96:11\n+  --> $DIR/naked-functions.rs:97:11\n    |\n LL |         *&y\n    |           ^\n    |\n    = help: follow the calling convention in asm block to use parameters\n \n error[E0787]: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:94:5\n+  --> $DIR/naked-functions.rs:95:5\n    |\n LL | /     pub extern \"C\" fn inner(y: usize) -> usize {\n LL | |\n@@ -220,19 +220,19 @@ LL | |     }\n    | |_____^\n \n error[E0787]: asm options unsupported in naked functions: `nomem`, `preserves_flags`\n-  --> $DIR/naked-functions.rs:104:5\n+  --> $DIR/naked-functions.rs:105:5\n    |\n LL |     asm!(\"\", options(nomem, preserves_flags, noreturn));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0787]: asm options unsupported in naked functions: `nostack`, `pure`, `readonly`\n-  --> $DIR/naked-functions.rs:110:5\n+  --> $DIR/naked-functions.rs:111:5\n    |\n LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0787]: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:110:5\n+  --> $DIR/naked-functions.rs:111:5\n    |\n LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -243,57 +243,57 @@ LL |     asm!(\"\", options(noreturn), options(readonly, nostack), options(pure));\n    |            +++++++++++++++++++\n \n error[E0787]: asm options unsupported in naked functions: `may_unwind`\n-  --> $DIR/naked-functions.rs:118:5\n+  --> $DIR/naked-functions.rs:119:5\n    |\n LL |     asm!(\"\", options(noreturn, may_unwind));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: Rust ABI is unsupported in naked functions\n-  --> $DIR/naked-functions.rs:123:15\n+  --> $DIR/naked-functions.rs:124:15\n    |\n LL | pub unsafe fn default_abi() {\n    |               ^^^^^^^^^^^\n    |\n    = note: `#[warn(undefined_naked_function_abi)]` on by default\n \n warning: Rust ABI is unsupported in naked functions\n-  --> $DIR/naked-functions.rs:129:15\n+  --> $DIR/naked-functions.rs:130:15\n    |\n LL | pub unsafe fn rust_abi() {\n    |               ^^^^^^^^\n \n error: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:169:1\n+  --> $DIR/naked-functions.rs:170:1\n    |\n LL | #[inline]\n    | ^^^^^^^^^\n \n error: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:176:1\n+  --> $DIR/naked-functions.rs:177:1\n    |\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^\n \n error: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:183:1\n+  --> $DIR/naked-functions.rs:184:1\n    |\n LL | #[inline(never)]\n    | ^^^^^^^^^^^^^^^^\n \n error: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:190:1\n+  --> $DIR/naked-functions.rs:191:1\n    |\n LL | #[inline]\n    | ^^^^^^^^^\n \n error: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:192:1\n+  --> $DIR/naked-functions.rs:193:1\n    |\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^\n \n error: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:194:1\n+  --> $DIR/naked-functions.rs:195:1\n    |\n LL | #[inline(never)]\n    | ^^^^^^^^^^^^^^^^"}, {"sha": "50b369ae0452736aa723c0b32361e858cce21640", "filename": "src/test/ui/asm/type-check-1.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.rs?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -22,10 +22,13 @@ fn main() {\n         let v: [u64; 3] = [0, 1, 2];\n         asm!(\"{}\", in(reg) v[..]);\n         //~^ ERROR the size for values of type `[u64]` cannot be known at compilation time\n+        //~| ERROR cannot use value of type `[u64]` for inline assembly\n         asm!(\"{}\", out(reg) v[..]);\n         //~^ ERROR the size for values of type `[u64]` cannot be known at compilation time\n+        //~| ERROR cannot use value of type `[u64]` for inline assembly\n         asm!(\"{}\", inout(reg) v[..]);\n         //~^ ERROR the size for values of type `[u64]` cannot be known at compilation time\n+        //~| ERROR cannot use value of type `[u64]` for inline assembly\n \n         // Constants must be... constant\n "}, {"sha": "52d814ce6829c707f438b18e02deac0ef0bf900c", "filename": "src/test/ui/asm/type-check-1.stderr", "status": "modified", "additions": 36, "deletions": 12, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -1,5 +1,5 @@\n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/type-check-1.rs:39:26\n+  --> $DIR/type-check-1.rs:42:26\n    |\n LL |         let x = 0;\n    |         ----- help: consider using `const` instead of `let`: `const x`\n@@ -8,7 +8,7 @@ LL |         asm!(\"{}\", const x);\n    |                          ^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/type-check-1.rs:42:36\n+  --> $DIR/type-check-1.rs:45:36\n    |\n LL |         let x = 0;\n    |         ----- help: consider using `const` instead of `let`: `const x`\n@@ -17,7 +17,7 @@ LL |         asm!(\"{}\", const const_foo(x));\n    |                                    ^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/type-check-1.rs:45:36\n+  --> $DIR/type-check-1.rs:48:36\n    |\n LL |         let x = 0;\n    |         ----- help: consider using `const` instead of `let`: `const x`\n@@ -26,21 +26,21 @@ LL |         asm!(\"{}\", const const_bar(x));\n    |                                    ^ non-constant value\n \n error: invalid `sym` operand\n-  --> $DIR/type-check-1.rs:47:24\n+  --> $DIR/type-check-1.rs:50:24\n    |\n LL |         asm!(\"{}\", sym x);\n    |                        ^ is a local variable\n    |\n    = help: `sym` operands must refer to either a function or a static\n \n error[E0308]: mismatched types\n-  --> $DIR/type-check-1.rs:55:26\n+  --> $DIR/type-check-1.rs:58:26\n    |\n LL |         asm!(\"{}\", const 0f32);\n    |                          ^^^^ expected integer, found `f32`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-check-1.rs:57:26\n+  --> $DIR/type-check-1.rs:60:26\n    |\n LL |         asm!(\"{}\", const 0 as *mut u8);\n    |                          ^^^^^^^^^^^^ expected integer, found *-ptr\n@@ -49,7 +49,7 @@ LL |         asm!(\"{}\", const 0 as *mut u8);\n            found raw pointer `*mut u8`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-check-1.rs:59:26\n+  --> $DIR/type-check-1.rs:62:26\n    |\n LL |         asm!(\"{}\", const &0);\n    |                          ^^ expected integer, found `&{integer}`\n@@ -82,7 +82,7 @@ LL |         asm!(\"{}\", in(reg) v[..]);\n    = note: all inline asm arguments must have a statically known size\n \n error[E0277]: the size for values of type `[u64]` cannot be known at compilation time\n-  --> $DIR/type-check-1.rs:25:29\n+  --> $DIR/type-check-1.rs:26:29\n    |\n LL |         asm!(\"{}\", out(reg) v[..]);\n    |                             ^^^^^ doesn't have a size known at compile-time\n@@ -91,30 +91,54 @@ LL |         asm!(\"{}\", out(reg) v[..]);\n    = note: all inline asm arguments must have a statically known size\n \n error[E0277]: the size for values of type `[u64]` cannot be known at compilation time\n-  --> $DIR/type-check-1.rs:27:31\n+  --> $DIR/type-check-1.rs:29:31\n    |\n LL |         asm!(\"{}\", inout(reg) v[..]);\n    |                               ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[u64]`\n    = note: all inline asm arguments must have a statically known size\n \n+error: cannot use value of type `[u64]` for inline assembly\n+  --> $DIR/type-check-1.rs:23:28\n+   |\n+LL |         asm!(\"{}\", in(reg) v[..]);\n+   |                            ^^^^^\n+   |\n+   = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n+\n+error: cannot use value of type `[u64]` for inline assembly\n+  --> $DIR/type-check-1.rs:26:29\n+   |\n+LL |         asm!(\"{}\", out(reg) v[..]);\n+   |                             ^^^^^\n+   |\n+   = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n+\n+error: cannot use value of type `[u64]` for inline assembly\n+  --> $DIR/type-check-1.rs:29:31\n+   |\n+LL |         asm!(\"{}\", inout(reg) v[..]);\n+   |                               ^^^^^\n+   |\n+   = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n+\n error[E0308]: mismatched types\n-  --> $DIR/type-check-1.rs:73:25\n+  --> $DIR/type-check-1.rs:76:25\n    |\n LL | global_asm!(\"{}\", const 0f32);\n    |                         ^^^^ expected integer, found `f32`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-check-1.rs:75:25\n+  --> $DIR/type-check-1.rs:78:25\n    |\n LL | global_asm!(\"{}\", const 0 as *mut u8);\n    |                         ^^^^^^^^^^^^ expected integer, found *-ptr\n    |\n    = note:     expected type `{integer}`\n            found raw pointer `*mut u8`\n \n-error: aborting due to 14 previous errors\n+error: aborting due to 17 previous errors\n \n Some errors have detailed explanations: E0277, E0308, E0435.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "a4f50a534a1580dab525d9a537b48a6502c6dc03", "filename": "src/test/ui/asm/x86_64/bad-reg.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-reg.rs?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -32,16 +32,21 @@ fn main() {\n \n         asm!(\"\", in(\"st(2)\") foo);\n         //~^ ERROR register class `x87_reg` can only be used as a clobber, not as an input or output\n+        //~| ERROR `i32` cannot be used with this register class\n         asm!(\"\", in(\"mm0\") foo);\n         //~^ ERROR register class `mmx_reg` can only be used as a clobber, not as an input or output\n+        //~| ERROR `i32` cannot be used with this register class\n         asm!(\"\", in(\"k0\") foo);\n         //~^ ERROR register class `kreg0` can only be used as a clobber, not as an input or output\n+        //~| ERROR `i32` cannot be used with this register class\n         asm!(\"\", out(\"st(2)\") _);\n         asm!(\"\", out(\"mm0\") _);\n         asm!(\"{}\", in(x87_reg) foo);\n         //~^ ERROR register class `x87_reg` can only be used as a clobber, not as an input or output\n+        //~| ERROR `i32` cannot be used with this register class\n         asm!(\"{}\", in(mmx_reg) foo);\n         //~^ ERROR register class `mmx_reg` can only be used as a clobber, not as an input or output\n+        //~| ERROR `i32` cannot be used with this register class\n         asm!(\"{}\", out(x87_reg) _);\n         //~^ ERROR register class `x87_reg` can only be used as a clobber, not as an input or output\n         asm!(\"{}\", out(mmx_reg) _);\n@@ -52,9 +57,12 @@ fn main() {\n \n         asm!(\"\", in(\"eax\") foo, in(\"al\") bar);\n         //~^ ERROR register `al` conflicts with register `ax`\n+        //~| ERROR `i32` cannot be used with this register class\n         asm!(\"\", in(\"rax\") foo, out(\"rax\") bar);\n         //~^ ERROR register `ax` conflicts with register `ax`\n         asm!(\"\", in(\"al\") foo, lateout(\"al\") bar);\n+        //~^ ERROR `i32` cannot be used with this register class\n+        //~| ERROR `i32` cannot be used with this register class\n         asm!(\"\", in(\"xmm0\") foo, in(\"ymm0\") bar);\n         //~^ ERROR register `ymm0` conflicts with register `xmm0`\n         asm!(\"\", in(\"xmm0\") foo, out(\"ymm0\") bar);"}, {"sha": "82b7ebd0fb07abde2f0920028342b581344ad95d", "filename": "src/test/ui/asm/x86_64/bad-reg.stderr", "status": "modified", "additions": 77, "deletions": 13, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-reg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-reg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-reg.stderr?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -71,84 +71,148 @@ LL |         asm!(\"\", in(\"st(2)\") foo);\n    |                  ^^^^^^^^^^^^^^^\n \n error: register class `mmx_reg` can only be used as a clobber, not as an input or output\n-  --> $DIR/bad-reg.rs:35:18\n+  --> $DIR/bad-reg.rs:36:18\n    |\n LL |         asm!(\"\", in(\"mm0\") foo);\n    |                  ^^^^^^^^^^^^^\n \n error: register class `kreg0` can only be used as a clobber, not as an input or output\n-  --> $DIR/bad-reg.rs:37:18\n+  --> $DIR/bad-reg.rs:39:18\n    |\n LL |         asm!(\"\", in(\"k0\") foo);\n    |                  ^^^^^^^^^^^^\n \n error: register class `x87_reg` can only be used as a clobber, not as an input or output\n-  --> $DIR/bad-reg.rs:41:20\n+  --> $DIR/bad-reg.rs:44:20\n    |\n LL |         asm!(\"{}\", in(x87_reg) foo);\n    |                    ^^^^^^^^^^^^^^^\n \n error: register class `mmx_reg` can only be used as a clobber, not as an input or output\n-  --> $DIR/bad-reg.rs:43:20\n+  --> $DIR/bad-reg.rs:47:20\n    |\n LL |         asm!(\"{}\", in(mmx_reg) foo);\n    |                    ^^^^^^^^^^^^^^^\n \n error: register class `x87_reg` can only be used as a clobber, not as an input or output\n-  --> $DIR/bad-reg.rs:45:20\n+  --> $DIR/bad-reg.rs:50:20\n    |\n LL |         asm!(\"{}\", out(x87_reg) _);\n    |                    ^^^^^^^^^^^^^^\n \n error: register class `mmx_reg` can only be used as a clobber, not as an input or output\n-  --> $DIR/bad-reg.rs:47:20\n+  --> $DIR/bad-reg.rs:52:20\n    |\n LL |         asm!(\"{}\", out(mmx_reg) _);\n    |                    ^^^^^^^^^^^^^^\n \n error: register `al` conflicts with register `ax`\n-  --> $DIR/bad-reg.rs:53:33\n+  --> $DIR/bad-reg.rs:58:33\n    |\n LL |         asm!(\"\", in(\"eax\") foo, in(\"al\") bar);\n    |                  -------------  ^^^^^^^^^^^^ register `al`\n    |                  |\n    |                  register `ax`\n \n error: register `ax` conflicts with register `ax`\n-  --> $DIR/bad-reg.rs:55:33\n+  --> $DIR/bad-reg.rs:61:33\n    |\n LL |         asm!(\"\", in(\"rax\") foo, out(\"rax\") bar);\n    |                  -------------  ^^^^^^^^^^^^^^ register `ax`\n    |                  |\n    |                  register `ax`\n    |\n help: use `lateout` instead of `out` to avoid conflict\n-  --> $DIR/bad-reg.rs:55:18\n+  --> $DIR/bad-reg.rs:61:18\n    |\n LL |         asm!(\"\", in(\"rax\") foo, out(\"rax\") bar);\n    |                  ^^^^^^^^^^^^^\n \n error: register `ymm0` conflicts with register `xmm0`\n-  --> $DIR/bad-reg.rs:58:34\n+  --> $DIR/bad-reg.rs:66:34\n    |\n LL |         asm!(\"\", in(\"xmm0\") foo, in(\"ymm0\") bar);\n    |                  --------------  ^^^^^^^^^^^^^^ register `ymm0`\n    |                  |\n    |                  register `xmm0`\n \n error: register `ymm0` conflicts with register `xmm0`\n-  --> $DIR/bad-reg.rs:60:34\n+  --> $DIR/bad-reg.rs:68:34\n    |\n LL |         asm!(\"\", in(\"xmm0\") foo, out(\"ymm0\") bar);\n    |                  --------------  ^^^^^^^^^^^^^^^ register `ymm0`\n    |                  |\n    |                  register `xmm0`\n    |\n help: use `lateout` instead of `out` to avoid conflict\n-  --> $DIR/bad-reg.rs:60:18\n+  --> $DIR/bad-reg.rs:68:18\n    |\n LL |         asm!(\"\", in(\"xmm0\") foo, out(\"ymm0\") bar);\n    |                  ^^^^^^^^^^^^^^\n \n-error: aborting due to 20 previous errors\n+error: type `i32` cannot be used with this register class\n+  --> $DIR/bad-reg.rs:33:30\n+   |\n+LL |         asm!(\"\", in(\"st(2)\") foo);\n+   |                              ^^^\n+   |\n+   = note: register class `x87_reg` supports these types: \n+\n+error: type `i32` cannot be used with this register class\n+  --> $DIR/bad-reg.rs:36:28\n+   |\n+LL |         asm!(\"\", in(\"mm0\") foo);\n+   |                            ^^^\n+   |\n+   = note: register class `mmx_reg` supports these types: \n+\n+error: type `i32` cannot be used with this register class\n+  --> $DIR/bad-reg.rs:39:27\n+   |\n+LL |         asm!(\"\", in(\"k0\") foo);\n+   |                           ^^^\n+   |\n+   = note: register class `kreg0` supports these types: \n+\n+error: type `i32` cannot be used with this register class\n+  --> $DIR/bad-reg.rs:44:32\n+   |\n+LL |         asm!(\"{}\", in(x87_reg) foo);\n+   |                                ^^^\n+   |\n+   = note: register class `x87_reg` supports these types: \n+\n+error: type `i32` cannot be used with this register class\n+  --> $DIR/bad-reg.rs:47:32\n+   |\n+LL |         asm!(\"{}\", in(mmx_reg) foo);\n+   |                                ^^^\n+   |\n+   = note: register class `mmx_reg` supports these types: \n+\n+error: type `i32` cannot be used with this register class\n+  --> $DIR/bad-reg.rs:58:42\n+   |\n+LL |         asm!(\"\", in(\"eax\") foo, in(\"al\") bar);\n+   |                                          ^^^\n+   |\n+   = note: register class `reg_byte` supports these types: i8\n+\n+error: type `i32` cannot be used with this register class\n+  --> $DIR/bad-reg.rs:63:27\n+   |\n+LL |         asm!(\"\", in(\"al\") foo, lateout(\"al\") bar);\n+   |                           ^^^\n+   |\n+   = note: register class `reg_byte` supports these types: i8\n+\n+error: type `i32` cannot be used with this register class\n+  --> $DIR/bad-reg.rs:63:46\n+   |\n+LL |         asm!(\"\", in(\"al\") foo, lateout(\"al\") bar);\n+   |                                              ^^^\n+   |\n+   = note: register class `reg_byte` supports these types: i8\n+\n+error: aborting due to 28 previous errors\n "}, {"sha": "59d8cde3fb6c7037d26aadcf297b096f41e47e37", "filename": "src/test/ui/asm/x86_64/type-check-2.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-2.rs?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -13,20 +13,16 @@ fn main() {\n \n         let x: u64;\n         asm!(\"{}\", in(reg) x);\n-        //~^ ERROR use of possibly-uninitialized variable: `x`\n         let mut y: u64;\n         asm!(\"{}\", inout(reg) y);\n-        //~^ ERROR use of possibly-uninitialized variable: `y`\n         let _ = y;\n \n         // Outputs require mutable places\n \n         let v: Vec<u64> = vec![0, 1, 2];\n         asm!(\"{}\", in(reg) v[0]);\n         asm!(\"{}\", out(reg) v[0]);\n-        //~^ ERROR cannot borrow `v` as mutable, as it is not declared as mutable\n         asm!(\"{}\", inout(reg) v[0]);\n-        //~^ ERROR cannot borrow `v` as mutable, as it is not declared as mutable\n \n         // Sym operands must point to a function or static\n \n@@ -36,6 +32,8 @@ fn main() {\n         asm!(\"{}\", sym main);\n         asm!(\"{}\", sym C);\n         //~^ ERROR invalid `sym` operand\n+        asm!(\"{}\", sym x);\n+        //~^ ERROR invalid `sym` operand\n \n         // Register operands must be Copy\n "}, {"sha": "46baeb511ca775a99f0b779be416c4105ba57b2f", "filename": "src/test/ui/asm/x86_64/type-check-2.stderr", "status": "modified", "additions": 33, "deletions": 57, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-2.stderr?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -1,21 +1,45 @@\n+error: invalid `sym` operand\n+  --> $DIR/type-check-2.rs:35:24\n+   |\n+LL |         asm!(\"{}\", sym x);\n+   |                        ^ is a local variable\n+   |\n+   = help: `sym` operands must refer to either a function or a static\n+\n+error: invalid `sym` operand\n+  --> $DIR/type-check-2.rs:86:19\n+   |\n+LL | global_asm!(\"{}\", sym C);\n+   |                   ^^^^^ is an `i32`\n+   |\n+   = help: `sym` operands must refer to either a function or a static\n+\n+error: invalid `sym` operand\n+  --> $DIR/type-check-2.rs:33:20\n+   |\n+LL |         asm!(\"{}\", sym C);\n+   |                    ^^^^^ is an `i32`\n+   |\n+   = help: `sym` operands must refer to either a function or a static\n+\n error: arguments for inline assembly must be copyable\n-  --> $DIR/type-check-2.rs:42:32\n+  --> $DIR/type-check-2.rs:40:32\n    |\n LL |         asm!(\"{}\", in(xmm_reg) SimdNonCopy(0.0, 0.0, 0.0, 0.0));\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `SimdNonCopy` does not implement the Copy trait\n \n-error: cannot use value of type `[closure@$DIR/type-check-2.rs:54:28: 54:38]` for inline assembly\n-  --> $DIR/type-check-2.rs:54:28\n+error: cannot use value of type `[closure@$DIR/type-check-2.rs:52:28: 52:38]` for inline assembly\n+  --> $DIR/type-check-2.rs:52:28\n    |\n LL |         asm!(\"{}\", in(reg) |x: i32| x);\n    |                            ^^^^^^^^^^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `Vec<i32>` for inline assembly\n-  --> $DIR/type-check-2.rs:56:28\n+  --> $DIR/type-check-2.rs:54:28\n    |\n LL |         asm!(\"{}\", in(reg) vec![0]);\n    |                            ^^^^^^^\n@@ -24,84 +48,36 @@ LL |         asm!(\"{}\", in(reg) vec![0]);\n    = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: cannot use value of type `(i32, i32, i32)` for inline assembly\n-  --> $DIR/type-check-2.rs:58:28\n+  --> $DIR/type-check-2.rs:56:28\n    |\n LL |         asm!(\"{}\", in(reg) (1, 2, 3));\n    |                            ^^^^^^^^^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `[i32; 3]` for inline assembly\n-  --> $DIR/type-check-2.rs:60:28\n+  --> $DIR/type-check-2.rs:58:28\n    |\n LL |         asm!(\"{}\", in(reg) [1, 2, 3]);\n    |                            ^^^^^^^^^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `fn() {main}` for inline assembly\n-  --> $DIR/type-check-2.rs:68:31\n+  --> $DIR/type-check-2.rs:66:31\n    |\n LL |         asm!(\"{}\", inout(reg) f);\n    |                               ^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `&mut i32` for inline assembly\n-  --> $DIR/type-check-2.rs:71:31\n+  --> $DIR/type-check-2.rs:69:31\n    |\n LL |         asm!(\"{}\", inout(reg) r);\n    |                               ^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n-error: invalid `sym` operand\n-  --> $DIR/type-check-2.rs:37:20\n-   |\n-LL |         asm!(\"{}\", sym C);\n-   |                    ^^^^^ is an `i32`\n-   |\n-   = help: `sym` operands must refer to either a function or a static\n-\n-error: invalid `sym` operand\n-  --> $DIR/type-check-2.rs:88:19\n-   |\n-LL | global_asm!(\"{}\", sym C);\n-   |                   ^^^^^ is an `i32`\n-   |\n-   = help: `sym` operands must refer to either a function or a static\n-\n-error[E0381]: use of possibly-uninitialized variable: `x`\n-  --> $DIR/type-check-2.rs:15:28\n-   |\n-LL |         asm!(\"{}\", in(reg) x);\n-   |                            ^ use of possibly-uninitialized `x`\n-\n-error[E0381]: use of possibly-uninitialized variable: `y`\n-  --> $DIR/type-check-2.rs:18:9\n-   |\n-LL |         asm!(\"{}\", inout(reg) y);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^ use of possibly-uninitialized `y`\n-\n-error[E0596]: cannot borrow `v` as mutable, as it is not declared as mutable\n-  --> $DIR/type-check-2.rs:26:29\n-   |\n-LL |         let v: Vec<u64> = vec![0, 1, 2];\n-   |             - help: consider changing this to be mutable: `mut v`\n-LL |         asm!(\"{}\", in(reg) v[0]);\n-LL |         asm!(\"{}\", out(reg) v[0]);\n-   |                             ^ cannot borrow as mutable\n-\n-error[E0596]: cannot borrow `v` as mutable, as it is not declared as mutable\n-  --> $DIR/type-check-2.rs:28:31\n-   |\n-LL |         let v: Vec<u64> = vec![0, 1, 2];\n-   |             - help: consider changing this to be mutable: `mut v`\n-...\n-LL |         asm!(\"{}\", inout(reg) v[0]);\n-   |                               ^ cannot borrow as mutable\n-\n-error: aborting due to 13 previous errors\n+error: aborting due to 10 previous errors\n \n-Some errors have detailed explanations: E0381, E0596.\n-For more information about an error, try `rustc --explain E0381`."}, {"sha": "89c849c75234e78aa218991a1a2956abc40ac3fa", "filename": "src/test/ui/asm/x86_64/type-check-3.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-3.rs?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -71,21 +71,3 @@ fn main() {\n         asm!(\"{:r}\", inout(reg) main => val_u64);\n     }\n }\n-\n-// Constants must be... constant\n-\n-static S: i32 = 1;\n-const fn const_foo(x: i32) -> i32 {\n-    x\n-}\n-const fn const_bar<T>(x: T) -> T {\n-    x\n-}\n-global_asm!(\"{}\", const S);\n-//~^ ERROR constants cannot refer to statics\n-global_asm!(\"{}\", const const_foo(0));\n-global_asm!(\"{}\", const const_foo(S));\n-//~^ ERROR constants cannot refer to statics\n-global_asm!(\"{}\", const const_bar(0));\n-global_asm!(\"{}\", const const_bar(S));\n-//~^ ERROR constants cannot refer to statics"}, {"sha": "b38ea8cc4d8ee7bfe8dbfbd5098af4b035128754", "filename": "src/test/ui/asm/x86_64/type-check-3.stderr", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-3.stderr?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -114,30 +114,5 @@ LL |         asm!(\"{:r}\", inout(reg) main => val_u32);\n    |\n    = note: asm inout arguments must have the same type, unless they are both pointers or integers of the same size\n \n-error[E0013]: constants cannot refer to statics\n-  --> $DIR/type-check-3.rs:84:25\n-   |\n-LL | global_asm!(\"{}\", const S);\n-   |                         ^\n-   |\n-   = help: consider extracting the value of the `static` to a `const`, and referring to that\n-\n-error[E0013]: constants cannot refer to statics\n-  --> $DIR/type-check-3.rs:87:35\n-   |\n-LL | global_asm!(\"{}\", const const_foo(S));\n-   |                                   ^\n-   |\n-   = help: consider extracting the value of the `static` to a `const`, and referring to that\n-\n-error[E0013]: constants cannot refer to statics\n-  --> $DIR/type-check-3.rs:90:35\n-   |\n-LL | global_asm!(\"{}\", const const_bar(S));\n-   |                                   ^\n-   |\n-   = help: consider extracting the value of the `static` to a `const`, and referring to that\n-\n-error: aborting due to 12 previous errors; 4 warnings emitted\n+error: aborting due to 9 previous errors; 4 warnings emitted\n \n-For more information about this error, try `rustc --explain E0013`."}, {"sha": "da3b76c3d23a66f69d961b325339cec01af2b139", "filename": "src/test/ui/asm/x86_64/type-check-4.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-4.rs?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -0,0 +1,29 @@\n+// only-x86_64\n+// compile-flags: -C target-feature=+avx512f\n+\n+#![feature(asm_const, asm_sym)]\n+\n+use std::arch::{asm, global_asm};\n+\n+use std::arch::x86_64::{_mm256_setzero_ps, _mm_setzero_ps};\n+\n+fn main() {\n+}\n+\n+// Constants must be... constant\n+\n+static S: i32 = 1;\n+const fn const_foo(x: i32) -> i32 {\n+    x\n+}\n+const fn const_bar<T>(x: T) -> T {\n+    x\n+}\n+global_asm!(\"{}\", const S);\n+//~^ ERROR constants cannot refer to statics\n+global_asm!(\"{}\", const const_foo(0));\n+global_asm!(\"{}\", const const_foo(S));\n+//~^ ERROR constants cannot refer to statics\n+global_asm!(\"{}\", const const_bar(0));\n+global_asm!(\"{}\", const const_bar(S));\n+//~^ ERROR constants cannot refer to statics"}, {"sha": "33f4638fb4b3721b3f374ce42e09899942c6a55d", "filename": "src/test/ui/asm/x86_64/type-check-4.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-4.stderr?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -0,0 +1,27 @@\n+error[E0013]: constants cannot refer to statics\n+  --> $DIR/type-check-4.rs:22:25\n+   |\n+LL | global_asm!(\"{}\", const S);\n+   |                         ^\n+   |\n+   = help: consider extracting the value of the `static` to a `const`, and referring to that\n+\n+error[E0013]: constants cannot refer to statics\n+  --> $DIR/type-check-4.rs:25:35\n+   |\n+LL | global_asm!(\"{}\", const const_foo(S));\n+   |                                   ^\n+   |\n+   = help: consider extracting the value of the `static` to a `const`, and referring to that\n+\n+error[E0013]: constants cannot refer to statics\n+  --> $DIR/type-check-4.rs:28:35\n+   |\n+LL | global_asm!(\"{}\", const const_bar(S));\n+   |                                   ^\n+   |\n+   = help: consider extracting the value of the `static` to a `const`, and referring to that\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0013`."}, {"sha": "474478f6a88e1bc50483a4ec02a9b1a143d88b8c", "filename": "src/test/ui/asm/x86_64/type-check-5.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-5.rs?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -0,0 +1,63 @@\n+// only-x86_64\n+\n+#![feature(repr_simd, never_type, asm_sym)]\n+\n+use std::arch::asm;\n+\n+#[repr(simd)]\n+struct SimdNonCopy(f32, f32, f32, f32);\n+\n+fn main() {\n+    unsafe {\n+        // Inputs must be initialized\n+\n+        let x: u64;\n+        asm!(\"{}\", in(reg) x);\n+        //~^ ERROR use of possibly-uninitialized variable: `x`\n+        let mut y: u64;\n+        asm!(\"{}\", inout(reg) y);\n+        //~^ ERROR use of possibly-uninitialized variable: `y`\n+        let _ = y;\n+\n+        // Outputs require mutable places\n+\n+        let v: Vec<u64> = vec![0, 1, 2];\n+        asm!(\"{}\", in(reg) v[0]);\n+        asm!(\"{}\", out(reg) v[0]);\n+        //~^ ERROR cannot borrow `v` as mutable, as it is not declared as mutable\n+        asm!(\"{}\", inout(reg) v[0]);\n+        //~^ ERROR cannot borrow `v` as mutable, as it is not declared as mutable\n+\n+        // Sym operands must point to a function or static\n+\n+        const C: i32 = 0;\n+        static S: i32 = 0;\n+        asm!(\"{}\", sym S);\n+        asm!(\"{}\", sym main);\n+\n+        // Register operands must be Copy\n+\n+        // Register operands must be integers, floats, SIMD vectors, pointers or\n+        // function pointers.\n+\n+        asm!(\"{}\", in(reg) 0i64);\n+        asm!(\"{}\", in(reg) 0f64);\n+        asm!(\"{}\", in(xmm_reg) std::arch::x86_64::_mm_setzero_ps());\n+        asm!(\"{}\", in(reg) 0 as *const u8);\n+        asm!(\"{}\", in(reg) 0 as *mut u8);\n+        asm!(\"{}\", in(reg) main as fn());\n+\n+        // Register inputs (but not outputs) allow references and function types\n+\n+        let mut f = main;\n+        let mut r = &mut 0;\n+        asm!(\"{}\", in(reg) f);\n+        asm!(\"{}\", in(reg) r);\n+        let _ = (f, r);\n+\n+        // Type checks ignore never type\n+\n+        let u: ! = unreachable!();\n+        asm!(\"{}\", in(reg) u);\n+    }\n+}"}, {"sha": "181ecaf58558563a9b3f7491be7c658bcc231e04", "filename": "src/test/ui/asm/x86_64/type-check-5.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-5.stderr?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -0,0 +1,34 @@\n+error[E0381]: use of possibly-uninitialized variable: `x`\n+  --> $DIR/type-check-5.rs:15:28\n+   |\n+LL |         asm!(\"{}\", in(reg) x);\n+   |                            ^ use of possibly-uninitialized `x`\n+\n+error[E0381]: use of possibly-uninitialized variable: `y`\n+  --> $DIR/type-check-5.rs:18:9\n+   |\n+LL |         asm!(\"{}\", inout(reg) y);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^ use of possibly-uninitialized `y`\n+\n+error[E0596]: cannot borrow `v` as mutable, as it is not declared as mutable\n+  --> $DIR/type-check-5.rs:26:29\n+   |\n+LL |         let v: Vec<u64> = vec![0, 1, 2];\n+   |             - help: consider changing this to be mutable: `mut v`\n+LL |         asm!(\"{}\", in(reg) v[0]);\n+LL |         asm!(\"{}\", out(reg) v[0]);\n+   |                             ^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow `v` as mutable, as it is not declared as mutable\n+  --> $DIR/type-check-5.rs:28:31\n+   |\n+LL |         let v: Vec<u64> = vec![0, 1, 2];\n+   |             - help: consider changing this to be mutable: `mut v`\n+...\n+LL |         asm!(\"{}\", inout(reg) v[0]);\n+   |                               ^ cannot borrow as mutable\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0381, E0596.\n+For more information about an error, try `rustc --explain E0381`."}, {"sha": "001dc708f893210ec189f1542906ba2340a17499", "filename": "src/test/ui/consts/issue-91434.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fconsts%2Fissue-91434.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fconsts%2Fissue-91434.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-91434.rs?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -2,5 +2,4 @@ fn main() {\n     [9; [[9E; h]]];\n     //~^ ERROR: expected at least one digit in exponent\n     //~| ERROR: cannot find value `h` in this scope [E0425]\n-    //~| ERROR: constant expression depends on a generic parameter\n }"}, {"sha": "08d3ad77053d5d6502d44ff295bad05bf64926e8", "filename": "src/test/ui/consts/issue-91434.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fconsts%2Fissue-91434.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fconsts%2Fissue-91434.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-91434.stderr?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -10,14 +10,6 @@ error[E0425]: cannot find value `h` in this scope\n LL |     [9; [[9E; h]]];\n    |               ^ not found in this scope\n \n-error: constant expression depends on a generic parameter\n-  --> $DIR/issue-91434.rs:2:9\n-   |\n-LL |     [9; [[9E; h]]];\n-   |         ^^^^^^^^^\n-   |\n-   = note: this may fail depending on what value the parameter takes\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0425`."}, {"sha": "1ec271401fb4c34e906cddce0bb6fa7011760b18", "filename": "src/test/ui/consts/nested_erroneous_ctfe.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fconsts%2Fnested_erroneous_ctfe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fconsts%2Fnested_erroneous_ctfe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fnested_erroneous_ctfe.rs?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    [9; || [9; []]];\n+    //~^ ERROR: mismatched types\n+}"}, {"sha": "d579a54e9836fb76c713521fc0dfa77a57481ee3", "filename": "src/test/ui/consts/nested_erroneous_ctfe.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fconsts%2Fnested_erroneous_ctfe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fconsts%2Fnested_erroneous_ctfe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fnested_erroneous_ctfe.stderr?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/nested_erroneous_ctfe.rs:2:16\n+   |\n+LL |     [9; || [9; []]];\n+   |                ^^ expected `usize`, found array of 0 elements\n+   |\n+   = note: expected type `usize`\n+             found array `[_; 0]`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "852a5b3b46a21385dd0f7ab014c13340facec3e1", "filename": "src/test/ui/consts/transmute-size-mismatch-before-typeck.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.rs?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -5,15 +5,9 @@\n \n fn main() {\n     match &b\"\"[..] {\n-        ZST => {} //~ ERROR could not evaluate constant pattern\n-                  //~| ERROR could not evaluate constant pattern\n+        ZST => {}\n     }\n }\n \n const ZST: &[u8] = unsafe { std::mem::transmute(1usize) };\n-//~^ ERROR any use of this value will cause an error\n-//~| ERROR cannot transmute between types of different sizes\n-//~| WARN this was previously accepted by the compiler but is being phased out\n-\n-// Once the `any use of this value will cause an error` disappears in this test, make sure to\n-// remove the `TransmuteSizeDiff` error variant and make its emitter site an assertion again.\n+//~^ ERROR cannot transmute between types of different sizes"}, {"sha": "4e8470173a101e9561d7d68b89a3d08c901e1d62", "filename": "src/test/ui/consts/transmute-size-mismatch-before-typeck.stderr", "status": "modified", "additions": 2, "deletions": 26, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.stderr?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -1,36 +1,12 @@\n-error: any use of this value will cause an error\n-  --> $DIR/transmute-size-mismatch-before-typeck.rs:13:29\n-   |\n-LL | const ZST: &[u8] = unsafe { std::mem::transmute(1usize) };\n-   | ----------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                             |\n-   |                             transmuting `usize` to `&[u8]` is not possible, because these types do not have the same size\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-\n-error: could not evaluate constant pattern\n-  --> $DIR/transmute-size-mismatch-before-typeck.rs:8:9\n-   |\n-LL |         ZST => {}\n-   |         ^^^\n-\n error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n-  --> $DIR/transmute-size-mismatch-before-typeck.rs:13:29\n+  --> $DIR/transmute-size-mismatch-before-typeck.rs:12:29\n    |\n LL | const ZST: &[u8] = unsafe { std::mem::transmute(1usize) };\n    |                             ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: source type: `usize` (word size)\n    = note: target type: `&[u8]` (2 * word size)\n \n-error: could not evaluate constant pattern\n-  --> $DIR/transmute-size-mismatch-before-typeck.rs:8:9\n-   |\n-LL |         ZST => {}\n-   |         ^^^\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0512`."}, {"sha": "43e33cbb120619ee707ca813cec1ace034382c29", "filename": "src/test/ui/rfc-2091-track-caller/error-with-naked.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.rs?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -4,6 +4,7 @@\n use std::arch::asm;\n \n #[track_caller] //~ ERROR cannot use `#[track_caller]` with `#[naked]`\n+//~^ ERROR `#[track_caller]` requires Rust ABI\n #[naked]\n extern \"C\" fn f() {\n     asm!(\"\", options(noreturn));\n@@ -13,6 +14,7 @@ struct S;\n \n impl S {\n     #[track_caller] //~ ERROR cannot use `#[track_caller]` with `#[naked]`\n+    //~^ ERROR `#[track_caller]` requires Rust ABI\n     #[naked]\n     extern \"C\" fn g() {\n         asm!(\"\", options(noreturn));"}, {"sha": "3f7d0df42a00ae596775f0d0b54f6f30fac0a3ac", "filename": "src/test/ui/rfc-2091-track-caller/error-with-naked.stderr", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.stderr?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -5,11 +5,24 @@ LL | #[track_caller]\n    | ^^^^^^^^^^^^^^^\n \n error[E0736]: cannot use `#[track_caller]` with `#[naked]`\n-  --> $DIR/error-with-naked.rs:15:5\n+  --> $DIR/error-with-naked.rs:16:5\n    |\n LL |     #[track_caller]\n    |     ^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error[E0737]: `#[track_caller]` requires Rust ABI\n+  --> $DIR/error-with-naked.rs:6:1\n+   |\n+LL | #[track_caller]\n+   | ^^^^^^^^^^^^^^^\n+\n+error[E0737]: `#[track_caller]` requires Rust ABI\n+  --> $DIR/error-with-naked.rs:16:5\n+   |\n+LL |     #[track_caller]\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0736`.\n+Some errors have detailed explanations: E0736, E0737.\n+For more information about an error, try `rustc --explain E0736`."}, {"sha": "438ac35fdea515276a4d7bfb41028aa21fd9ea21", "filename": "src/test/ui/type-alias-impl-trait/issue-53092-2.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53092-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53092-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53092-2.rs?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -0,0 +1,15 @@\n+#![feature(type_alias_impl_trait)]\n+#![allow(dead_code)]\n+\n+type Bug<T, U> = impl Fn(T) -> U + Copy; //~ ERROR cycle detected\n+\n+const CONST_BUG: Bug<u8, ()> = unsafe { std::mem::transmute(|_: u8| ()) };\n+//~^ ERROR: cannot transmute\n+\n+fn make_bug<T, U: From<T>>() -> Bug<T, U> {\n+    |x| x.into() //~ ERROR the trait bound `U: From<T>` is not satisfied\n+}\n+\n+fn main() {\n+    CONST_BUG(0);\n+}"}, {"sha": "f4a0cdb1625b80f236326a980e59743fbbcbc9af", "filename": "src/test/ui/type-alias-impl-trait/issue-53092-2.stderr", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53092-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53092-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53092-2.stderr?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -0,0 +1,55 @@\n+error[E0391]: cycle detected when computing type of `Bug::{opaque#0}`\n+  --> $DIR/issue-53092-2.rs:4:18\n+   |\n+LL | type Bug<T, U> = impl Fn(T) -> U + Copy;\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: ...which requires type-checking `CONST_BUG`...\n+  --> $DIR/issue-53092-2.rs:6:1\n+   |\n+LL | const CONST_BUG: Bug<u8, ()> = unsafe { std::mem::transmute(|_: u8| ()) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...which requires computing layout of `Bug<u8, ()>`...\n+   = note: ...which requires normalizing `Bug<u8, ()>`...\n+   = note: ...which again requires computing type of `Bug::{opaque#0}`, completing the cycle\n+note: cycle used when checking item types in top-level module\n+  --> $DIR/issue-53092-2.rs:1:1\n+   |\n+LL | / #![feature(type_alias_impl_trait)]\n+LL | | #![allow(dead_code)]\n+LL | |\n+LL | | type Bug<T, U> = impl Fn(T) -> U + Copy;\n+...  |\n+LL | |     CONST_BUG(0);\n+LL | | }\n+   | |_^\n+\n+error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n+  --> $DIR/issue-53092-2.rs:6:41\n+   |\n+LL | const CONST_BUG: Bug<u8, ()> = unsafe { std::mem::transmute(|_: u8| ()) };\n+   |                                         ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: source type: `[closure@$DIR/issue-53092-2.rs:6:61: 6:71]` (0 bits)\n+   = note: target type: `Bug<u8, ()>` (size can vary because of [type error])\n+\n+error[E0277]: the trait bound `U: From<T>` is not satisfied\n+  --> $DIR/issue-53092-2.rs:10:5\n+   |\n+LL |     |x| x.into()\n+   |     ^^^^^^^^^^^^ the trait `From<T>` is not implemented for `U`\n+   |\n+note: required by a bound in `make_bug`\n+  --> $DIR/issue-53092-2.rs:9:19\n+   |\n+LL | fn make_bug<T, U: From<T>>() -> Bug<T, U> {\n+   |                   ^^^^^^^ required by this bound in `make_bug`\n+help: consider restricting type parameter `U`\n+   |\n+LL | type Bug<T, U: std::convert::From<T>> = impl Fn(T) -> U + Copy;\n+   |              +++++++++++++++++++++++\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0277, E0391, E0512.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "1be5b46d6df682f606c3164377909ad0a84a78c5", "filename": "src/test/ui/type-alias-impl-trait/issue-53092.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53092.rs?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -3,7 +3,12 @@\n \n type Bug<T, U> = impl Fn(T) -> U + Copy;\n \n-const CONST_BUG: Bug<u8, ()> = unsafe { std::mem::transmute(|_: u8| ()) };\n+union Moo {\n+    x: Bug<u8, ()>,\n+    y: (),\n+}\n+\n+const CONST_BUG: Bug<u8, ()> = unsafe { Moo { y: () }.x };\n \n fn make_bug<T, U: From<T>>() -> Bug<T, U> {\n     |x| x.into() //~ ERROR the trait bound `U: From<T>` is not satisfied"}, {"sha": "2109cf8a784dc568c5d8555456ab228f4a90eb25", "filename": "src/test/ui/type-alias-impl-trait/issue-53092.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53092.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53092.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53092.stderr?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `U: From<T>` is not satisfied\n-  --> $DIR/issue-53092.rs:9:5\n+  --> $DIR/issue-53092.rs:14:5\n    |\n LL |     |x| x.into()\n    |     ^^^^^^^^^^^^ the trait `From<T>` is not implemented for `U`\n    |\n note: required by a bound in `make_bug`\n-  --> $DIR/issue-53092.rs:8:19\n+  --> $DIR/issue-53092.rs:13:19\n    |\n LL | fn make_bug<T, U: From<T>>() -> Bug<T, U> {\n    |                   ^^^^^^^ required by this bound in `make_bug`"}, {"sha": "46621362e4f73a2bc56837348fa7cf133a639fd1", "filename": "src/test/ui/type-alias-impl-trait/no_inferrable_concrete_type.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.rs?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -3,13 +3,17 @@\n \n #![feature(type_alias_impl_trait)]\n \n-type Foo = impl Copy; //~ unconstrained opaque type\n+mod foo {\n+    pub type Foo = impl Copy;\n+    //~^ ERROR unconstrained opaque type\n \n-// make compiler happy about using 'Foo'\n-fn bar(x: Foo) -> Foo {\n-    x\n+    // make compiler happy about using 'Foo'\n+    pub fn bar(x: Foo) -> Foo {\n+        x\n+    }\n }\n \n fn main() {\n-    let _: Foo = std::mem::transmute(0u8);\n+    let _: foo::Foo = std::mem::transmute(0u8);\n+    //~^ ERROR cannot transmute between types of different sizes, or dependently-sized types\n }"}, {"sha": "337708b876524920b548aac95dfca8ffb6d0845f", "filename": "src/test/ui/type-alias-impl-trait/no_inferrable_concrete_type.stderr", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56fd680cf9226ab424f88d4e3b43c5e088d17f19/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.stderr?ref=56fd680cf9226ab424f88d4e3b43c5e088d17f19", "patch": "@@ -1,10 +1,20 @@\n error: unconstrained opaque type\n-  --> $DIR/no_inferrable_concrete_type.rs:6:12\n+  --> $DIR/no_inferrable_concrete_type.rs:7:20\n    |\n-LL | type Foo = impl Copy;\n-   |            ^^^^^^^^^\n+LL |     pub type Foo = impl Copy;\n+   |                    ^^^^^^^^^\n    |\n    = note: `Foo` must be used in combination with a concrete type within the same module\n \n-error: aborting due to previous error\n+error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n+  --> $DIR/no_inferrable_concrete_type.rs:17:23\n+   |\n+LL |     let _: foo::Foo = std::mem::transmute(0u8);\n+   |                       ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: source type: `u8` (8 bits)\n+   = note: target type: `Foo` (size can vary because of [type error])\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0512`."}]}