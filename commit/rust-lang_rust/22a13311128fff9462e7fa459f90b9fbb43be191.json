{"sha": "22a13311128fff9462e7fa459f90b9fbb43be191", "node_id": "C_kwDOAAsO6NoAKDIyYTEzMzExMTI4ZmZmOTQ2MmU3ZmE0NTlmOTBiOWZiYjQzYmUxOTE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-09T04:08:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-09T04:08:32Z"}, "message": "Rollup merge of #90796 - Amanieu:remove_reg_thumb, r=joshtriplett\n\nRemove the reg_thumb register class for asm! on ARM\n\nAlso restricts r8-r14 from being used on Thumb1 targets as per #90736.\n\ncc ``@Lokathor``\n\nr? ``@joshtriplett``", "tree": {"sha": "1a93d72d1d794095370a631f7da6e56b672361f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a93d72d1d794095370a631f7da6e56b672361f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22a13311128fff9462e7fa459f90b9fbb43be191", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhsYFACRBK7hj4Ov3rIwAAFb8IALDm/GvAU+RHutwFIcyUc6lW\nVHbdgxxV8dKNf5ntSA3Pl9zkNuDUtp98Hgh8hQSlKf+vEjuGtQx1oTpm/u0NCgOa\nGj3UI7LGU4HzIEvHLtWyHxEAdWARJBgNYmdeOyMl7R6h3Fl6z3DYfVc8n6RmxFZ9\nhh1nyE5peUyBv8sqv7PP5w8aT6HI7u0Z9pHR80tUQO76FCJ2vVgMJs7zYb+d2GuK\nBzROMLEO1pe0b9Zl7zMAuKNj/bJz++qEht5cyIQTv4WrKaV01I94OuvpPWZS2SGw\nyjPPj9JJaZa5NxW9/64xlTy+8JoAUblRDGpnAbzzQKIw6LOkin8BIf20AP98PH0=\n=86R6\n-----END PGP SIGNATURE-----\n", "payload": "tree 1a93d72d1d794095370a631f7da6e56b672361f4\nparent 856eefece946994ea76030c756df5fdf669cac9e\nparent 908f300dd7878f6bcd0f5479c2db680067aec3d8\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639022912 +0100\ncommitter GitHub <noreply@github.com> 1639022912 +0100\n\nRollup merge of #90796 - Amanieu:remove_reg_thumb, r=joshtriplett\n\nRemove the reg_thumb register class for asm! on ARM\n\nAlso restricts r8-r14 from being used on Thumb1 targets as per #90736.\n\ncc ``@Lokathor``\n\nr? ``@joshtriplett``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22a13311128fff9462e7fa459f90b9fbb43be191", "html_url": "https://github.com/rust-lang/rust/commit/22a13311128fff9462e7fa459f90b9fbb43be191", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22a13311128fff9462e7fa459f90b9fbb43be191/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "856eefece946994ea76030c756df5fdf669cac9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/856eefece946994ea76030c756df5fdf669cac9e", "html_url": "https://github.com/rust-lang/rust/commit/856eefece946994ea76030c756df5fdf669cac9e"}, {"sha": "908f300dd7878f6bcd0f5479c2db680067aec3d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/908f300dd7878f6bcd0f5479c2db680067aec3d8", "html_url": "https://github.com/rust-lang/rust/commit/908f300dd7878f6bcd0f5479c2db680067aec3d8"}], "stats": {"total": 95, "additions": 30, "deletions": 65}, "files": [{"sha": "10edcf36955da78eceb762ad518b01924b1ef20e", "filename": "compiler/rustc_codegen_gcc/src/asm.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/22a13311128fff9462e7fa459f90b9fbb43be191/compiler%2Frustc_codegen_gcc%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a13311128fff9462e7fa459f90b9fbb43be191/compiler%2Frustc_codegen_gcc%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fasm.rs?ref=22a13311128fff9462e7fa459f90b9fbb43be191", "patch": "@@ -568,7 +568,6 @@ fn reg_to_gcc(reg: InlineAsmRegOrRegClass) -> ConstraintOrRegister {\n             InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::vreg) => unimplemented!(),\n             InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::vreg_low16) => unimplemented!(),\n             InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg) => unimplemented!(),\n-            InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg_thumb) => unimplemented!(),\n             InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg)\n             | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::dreg_low16)\n             | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::qreg_low8) => unimplemented!(),\n@@ -628,8 +627,7 @@ fn dummy_output_type<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, reg: InlineAsmRegCl\n         | InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::vreg_low16) => {\n             unimplemented!()\n         }\n-        InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg)\n-        | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg_thumb) => cx.type_i32(),\n+        InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg)=> cx.type_i32(),\n         InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg)\n         | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg_low16) => cx.type_f32(),\n         InlineAsmRegClass::Arm(ArmInlineAsmRegClass::dreg)\n@@ -737,8 +735,7 @@ fn modifier_to_gcc(arch: InlineAsmArch, reg: InlineAsmRegClass, modifier: Option\n         | InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::vreg_low16) => {\n             unimplemented!()\n         }\n-        InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg)\n-        | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg_thumb) => unimplemented!(),\n+        InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg)  => unimplemented!(),\n         InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg)\n         | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg_low16) => unimplemented!(),\n         InlineAsmRegClass::Arm(ArmInlineAsmRegClass::dreg)"}, {"sha": "f3c3a1749081126d1d0bb64c180c7bb6b5d181f1", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/22a13311128fff9462e7fa459f90b9fbb43be191/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a13311128fff9462e7fa459f90b9fbb43be191/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=22a13311128fff9462e7fa459f90b9fbb43be191", "patch": "@@ -632,7 +632,6 @@ fn reg_to_llvm(reg: InlineAsmRegOrRegClass, layout: Option<&TyAndLayout<'tcx>>)\n                 unreachable!(\"clobber-only\")\n             }\n             InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg) => \"r\",\n-            InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg_thumb) => \"l\",\n             InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg)\n             | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::dreg_low16)\n             | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::qreg_low8) => \"t\",\n@@ -703,8 +702,7 @@ fn modifier_to_llvm(\n         InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::preg) => {\n             unreachable!(\"clobber-only\")\n         }\n-        InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg)\n-        | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg_thumb) => None,\n+        InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg) => None,\n         InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg)\n         | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg_low16) => None,\n         InlineAsmRegClass::Arm(ArmInlineAsmRegClass::dreg)\n@@ -785,8 +783,7 @@ fn dummy_output_type(cx: &CodegenCx<'ll, 'tcx>, reg: InlineAsmRegClass) -> &'ll\n         InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::preg) => {\n             unreachable!(\"clobber-only\")\n         }\n-        InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg)\n-        | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg_thumb) => cx.type_i32(),\n+        InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg) => cx.type_i32(),\n         InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg)\n         | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg_low16) => cx.type_f32(),\n         InlineAsmRegClass::Arm(ArmInlineAsmRegClass::dreg)"}, {"sha": "ba72e3cfafce2e01bdc607ee1978f4a4c69b6218", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22a13311128fff9462e7fa459f90b9fbb43be191/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a13311128fff9462e7fa459f90b9fbb43be191/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=22a13311128fff9462e7fa459f90b9fbb43be191", "patch": "@@ -35,6 +35,7 @@ const ARM_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     // since it should be enabled per-function using #[instruction_set], not\n     // #[target_feature].\n     (\"thumb-mode\", Some(sym::arm_target_feature)),\n+    (\"thumb2\", Some(sym::arm_target_feature)),\n ];\n \n const AARCH64_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &["}, {"sha": "0b851f1df5b7ef11d76613b7ddbf6050a4417c4d", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22a13311128fff9462e7fa459f90b9fbb43be191/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a13311128fff9462e7fa459f90b9fbb43be191/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=22a13311128fff9462e7fa459f90b9fbb43be191", "patch": "@@ -1058,7 +1058,6 @@ symbols! {\n         reg_nonzero,\n         reg_pair,\n         reg_ptr,\n-        reg_thumb,\n         reg_upper,\n         register_attr,\n         register_tool,"}, {"sha": "4eeb7fcc71bceb6cf80a43d429ec5b220ee16dd7", "filename": "compiler/rustc_target/src/asm/arm.rs", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/22a13311128fff9462e7fa459f90b9fbb43be191/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a13311128fff9462e7fa459f90b9fbb43be191/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs?ref=22a13311128fff9462e7fa459f90b9fbb43be191", "patch": "@@ -6,7 +6,6 @@ use std::fmt;\n def_reg_class! {\n     Arm ArmInlineAsmRegClass {\n         reg,\n-        reg_thumb,\n         sreg,\n         sreg_low16,\n         dreg,\n@@ -47,7 +46,7 @@ impl ArmInlineAsmRegClass {\n         _arch: InlineAsmArch,\n     ) -> &'static [(InlineAsmType, Option<&'static str>)] {\n         match self {\n-            Self::reg | Self::reg_thumb => types! { _: I8, I16, I32, F32; },\n+            Self::reg => types! { _: I8, I16, I32, F32; },\n             Self::sreg | Self::sreg_low16 => types! { \"vfp2\": I32, F32; },\n             Self::dreg | Self::dreg_low16 | Self::dreg_low8 => types! {\n                 \"vfp2\": I64, F64, VecI8(8), VecI16(4), VecI32(2), VecI64(1), VecF32(2);\n@@ -88,20 +87,32 @@ fn frame_pointer_r7(\n     }\n }\n \n+fn not_thumb1(\n+    _arch: InlineAsmArch,\n+    mut has_feature: impl FnMut(&str) -> bool,\n+    _target: &Target,\n+) -> Result<(), &'static str> {\n+    if has_feature(\"thumb-mode\") && !has_feature(\"thumb2\") {\n+        Err(\"high registers (r8+) cannot be used in Thumb-1 code\")\n+    } else {\n+        Ok(())\n+    }\n+}\n+\n def_regs! {\n     Arm ArmInlineAsmReg ArmInlineAsmRegClass {\n-        r0: reg, reg_thumb = [\"r0\", \"a1\"],\n-        r1: reg, reg_thumb = [\"r1\", \"a2\"],\n-        r2: reg, reg_thumb = [\"r2\", \"a3\"],\n-        r3: reg, reg_thumb = [\"r3\", \"a4\"],\n-        r4: reg, reg_thumb = [\"r4\", \"v1\"],\n-        r5: reg, reg_thumb = [\"r5\", \"v2\"],\n-        r7: reg, reg_thumb = [\"r7\", \"v4\"] % frame_pointer_r7,\n-        r8: reg = [\"r8\", \"v5\"],\n-        r10: reg = [\"r10\", \"sl\"],\n+        r0: reg = [\"r0\", \"a1\"],\n+        r1: reg = [\"r1\", \"a2\"],\n+        r2: reg = [\"r2\", \"a3\"],\n+        r3: reg = [\"r3\", \"a4\"],\n+        r4: reg = [\"r4\", \"v1\"],\n+        r5: reg = [\"r5\", \"v2\"],\n+        r7: reg = [\"r7\", \"v4\"] % frame_pointer_r7,\n+        r8: reg = [\"r8\", \"v5\"] % not_thumb1,\n+        r10: reg = [\"r10\", \"sl\"] % not_thumb1,\n         r11: reg = [\"r11\", \"fp\"] % frame_pointer_r11,\n-        r12: reg = [\"r12\", \"ip\"],\n-        r14: reg = [\"r14\", \"lr\"],\n+        r12: reg = [\"r12\", \"ip\"] % not_thumb1,\n+        r14: reg = [\"r14\", \"lr\"] % not_thumb1,\n         s0: sreg, sreg_low16 = [\"s0\"],\n         s1: sreg, sreg_low16 = [\"s1\"],\n         s2: sreg, sreg_low16 = [\"s2\"],"}, {"sha": "59987cccde67385bb265568f1e3003908140b6b5", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22a13311128fff9462e7fa459f90b9fbb43be191/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/22a13311128fff9462e7fa459f90b9fbb43be191/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=22a13311128fff9462e7fa459f90b9fbb43be191", "patch": "@@ -564,12 +564,8 @@ Here is the list of currently supported register classes:\n | AArch64 | `vreg` | `v[0-31]` | `w` |\n | AArch64 | `vreg_low16` | `v[0-15]` | `x` |\n | AArch64 | `preg` | `p[0-15]`, `ffr` | Only clobbers |\n-| ARM (ARM) | `reg` | `r[0-12]`, `r14` | `r` |\n-| ARM (Thumb2) | `reg` | `r[0-12]`, `r14` | `r` |\n+| ARM (ARM/Thumb2) | `reg` | `r[0-12]`, `r14` | `r` |\n | ARM (Thumb1) | `reg` | `r[0-7]` | `r` |\n-| ARM (ARM) | `reg_thumb` | `r[0-r12]`, `r14` | `l` |\n-| ARM (Thumb2) | `reg_thumb` | `r[0-7]` | `l` |\n-| ARM (Thumb1) | `reg_thumb` | `r[0-7]` | `l` |\n | ARM | `sreg` | `s[0-31]` | `t` |\n | ARM | `sreg_low16` | `s[0-15]` | `x` |\n | ARM | `dreg` | `d[0-31]` | `w` |"}, {"sha": "88ffeaecfecb6e86f6e5ae921db213d72b38993b", "filename": "src/test/assembly/asm/arm-modifiers.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22a13311128fff9462e7fa459f90b9fbb43be191/src%2Ftest%2Fassembly%2Fasm%2Farm-modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a13311128fff9462e7fa459f90b9fbb43be191/src%2Ftest%2Fassembly%2Fasm%2Farm-modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Farm-modifiers.rs?ref=22a13311128fff9462e7fa459f90b9fbb43be191", "patch": "@@ -59,12 +59,6 @@ macro_rules! check {\n // CHECK: @NO_APP\n check!(reg \"\" reg i32 \"mov\");\n \n-// CHECK-LABEL: reg_thumb:\n-// CHECK: @APP\n-// CHECK: mov r0, r0\n-// CHECK: @NO_APP\n-check!(reg_thumb \"\" reg_thumb i32 \"mov\");\n-\n // CHECK-LABEL: sreg:\n // CHECK: @APP\n // CHECK: vmov.f32 s0, s0"}, {"sha": "5ac1af6afd67d33fe02ee7e504057a653c50c27a", "filename": "src/test/assembly/asm/arm-types.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/22a13311128fff9462e7fa459f90b9fbb43be191/src%2Ftest%2Fassembly%2Fasm%2Farm-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a13311128fff9462e7fa459f90b9fbb43be191/src%2Ftest%2Fassembly%2Fasm%2Farm-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Farm-types.rs?ref=22a13311128fff9462e7fa459f90b9fbb43be191", "patch": "@@ -163,36 +163,6 @@ check!(reg_f32 f32 reg \"mov\");\n // CHECK: @NO_APP\n check!(reg_ptr ptr reg \"mov\");\n \n-// CHECK-LABEL: reg_thumb_i8:\n-// CHECK: @APP\n-// CHECK: mov {{[a-z0-9]+}}, {{[a-z0-9]+}}\n-// CHECK: @NO_APP\n-check!(reg_thumb_i8 i8 reg_thumb \"mov\");\n-\n-// CHECK-LABEL: reg_thumb_i16:\n-// CHECK: @APP\n-// CHECK: mov {{[a-z0-9]+}}, {{[a-z0-9]+}}\n-// CHECK: @NO_APP\n-check!(reg_thumb_i16 i16 reg_thumb \"mov\");\n-\n-// CHECK-LABEL: reg_thumb_i32:\n-// CHECK: @APP\n-// CHECK: mov {{[a-z0-9]+}}, {{[a-z0-9]+}}\n-// CHECK: @NO_APP\n-check!(reg_thumb_i32 i32 reg_thumb \"mov\");\n-\n-// CHECK-LABEL: reg_thumb_f32:\n-// CHECK: @APP\n-// CHECK: mov {{[a-z0-9]+}}, {{[a-z0-9]+}}\n-// CHECK: @NO_APP\n-check!(reg_thumb_f32 f32 reg_thumb \"mov\");\n-\n-// CHECK-LABEL: reg_thumb_ptr:\n-// CHECK: @APP\n-// CHECK: mov {{[a-z0-9]+}}, {{[a-z0-9]+}}\n-// CHECK: @NO_APP\n-check!(reg_thumb_ptr ptr reg_thumb \"mov\");\n-\n // CHECK-LABEL: sreg_i32:\n // CHECK: @APP\n // CHECK: vmov.f32 s{{[0-9]+}}, s{{[0-9]+}}"}]}