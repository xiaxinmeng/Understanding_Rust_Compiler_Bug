{"sha": "229808405859c46494957df4a5d0cf0e1ba2d257", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyOTgwODQwNTg1OWM0NjQ5NDk1N2RmNGE1ZDBjZjBlMWJhMmQyNTc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-11-26T17:47:08Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-11-27T00:50:12Z"}, "message": "rollup merge of #19326: huonw/safer-syntax\n\nThis makes it correct (e.g. avoiding null pointers) and safe.", "tree": {"sha": "0b2a2bf1a0f3b2ac8608898d41d7de26afd8c0ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b2a2bf1a0f3b2ac8608898d41d7de26afd8c0ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/229808405859c46494957df4a5d0cf0e1ba2d257", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/229808405859c46494957df4a5d0cf0e1ba2d257", "html_url": "https://github.com/rust-lang/rust/commit/229808405859c46494957df4a5d0cf0e1ba2d257", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/229808405859c46494957df4a5d0cf0e1ba2d257/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c27ab6125278ef6bf309959f3de2791802e0778", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c27ab6125278ef6bf309959f3de2791802e0778", "html_url": "https://github.com/rust-lang/rust/commit/9c27ab6125278ef6bf309959f3de2791802e0778"}, {"sha": "4653ad02055e1accae0fce6aad000b01fbe61d20", "url": "https://api.github.com/repos/rust-lang/rust/commits/4653ad02055e1accae0fce6aad000b01fbe61d20", "html_url": "https://github.com/rust-lang/rust/commit/4653ad02055e1accae0fce6aad000b01fbe61d20"}], "stats": {"total": 109, "additions": 19, "deletions": 90}, "files": [{"sha": "ed5aded795b798aaf1d9b43aa08bb9848cdcf940", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/229808405859c46494957df4a5d0cf0e1ba2d257/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/229808405859c46494957df4a5d0cf0e1ba2d257/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=229808405859c46494957df4a5d0cf0e1ba2d257", "patch": "@@ -5606,7 +5606,7 @@ pub fn check_bounds_are_used<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         if !*b {\n             span_err!(ccx.tcx.sess, span, E0091,\n                 \"type parameter `{}` is unused\",\n-                token::get_ident(tps.get(i).ident));\n+                token::get_ident(tps[i].ident));\n         }\n     }\n }"}, {"sha": "ec1cff73e96c63708755bfa1792e695ae272a8bb", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/229808405859c46494957df4a5d0cf0e1ba2d257/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/229808405859c46494957df4a5d0cf0e1ba2d257/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=229808405859c46494957df4a5d0cf0e1ba2d257", "patch": "@@ -87,6 +87,7 @@\n #[doc(no_inline)] pub use slice::{SlicePrelude, AsSlice, CloneSlicePrelude};\n #[doc(no_inline)] pub use slice::{VectorVector, PartialEqSlicePrelude, OrdSlicePrelude};\n #[doc(no_inline)] pub use slice::{CloneSliceAllocPrelude, OrdSliceAllocPrelude, SliceAllocPrelude};\n+#[doc(no_inline)] pub use slice::{BoxedSlicePrelude};\n #[doc(no_inline)] pub use string::{IntoString, String, ToString};\n #[doc(no_inline)] pub use vec::Vec;\n "}, {"sha": "43b428b5a1c4199eac5ee7039ee3820cac001419", "filename": "src/libsyntax/owned_slice.rs", "status": "modified", "additions": 16, "deletions": 88, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/229808405859c46494957df4a5d0cf0e1ba2d257/src%2Flibsyntax%2Fowned_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/229808405859c46494957df4a5d0cf0e1ba2d257/src%2Flibsyntax%2Fowned_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fowned_slice.rs?ref=229808405859c46494957df4a5d0cf0e1ba2d257", "patch": "@@ -10,99 +10,39 @@\n \n use std::fmt;\n use std::default::Default;\n-use std::hash;\n-use std::{mem, raw, ptr, slice, vec};\n-use std::rt::heap::EMPTY;\n+use std::vec;\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n \n-/// A non-growable owned slice. This would preferably become `~[T]`\n-/// under DST.\n-#[unsafe_no_drop_flag] // data is set to null on destruction\n+/// A non-growable owned slice. This is a separate type to allow the\n+/// representation to change.\n+#[deriving(Hash, PartialEq, Eq, PartialOrd, Ord)]\n pub struct OwnedSlice<T> {\n-    /// null iff len == 0\n-    data: *mut T,\n-    len: uint,\n+    data: Box<[T]>\n }\n \n impl<T:fmt::Show> fmt::Show for OwnedSlice<T> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        try!(\"OwnedSlice {{\".fmt(fmt));\n-        for i in self.iter() {\n-            try!(i.fmt(fmt));\n-        }\n-        try!(\"}}\".fmt(fmt));\n-        Ok(())\n-    }\n-}\n-\n-#[unsafe_destructor]\n-impl<T> Drop for OwnedSlice<T> {\n-    fn drop(&mut self) {\n-        if self.data.is_null() { return }\n-\n-        // extract the vector\n-        let v = mem::replace(self, OwnedSlice::empty());\n-        // free via the Vec destructor\n-        v.into_vec();\n+        self.data.fmt(fmt)\n     }\n }\n \n impl<T> OwnedSlice<T> {\n     pub fn empty() -> OwnedSlice<T> {\n-        OwnedSlice  { data: ptr::null_mut(), len: 0 }\n+        OwnedSlice  { data: box [] }\n     }\n \n     #[inline(never)]\n-    pub fn from_vec(mut v: Vec<T>) -> OwnedSlice<T> {\n-        let len = v.len();\n-\n-        if len == 0 {\n-            OwnedSlice::empty()\n-        } else {\n-            // drop excess capacity to avoid breaking sized deallocation\n-            v.shrink_to_fit();\n-\n-            let p = v.as_mut_ptr();\n-            // we own the allocation now\n-            unsafe { mem::forget(v) }\n-\n-            OwnedSlice { data: p, len: len }\n-        }\n+    pub fn from_vec(v: Vec<T>) -> OwnedSlice<T> {\n+        OwnedSlice { data: v.into_boxed_slice() }\n     }\n \n     #[inline(never)]\n     pub fn into_vec(self) -> Vec<T> {\n-        // null is ok, because len == 0 in that case, as required by Vec.\n-        unsafe {\n-            let ret = Vec::from_raw_parts(self.data, self.len, self.len);\n-            // the vector owns the allocation now\n-            mem::forget(self);\n-            ret\n-        }\n+        self.data.into_vec()\n     }\n \n     pub fn as_slice<'a>(&'a self) -> &'a [T] {\n-        let ptr = if self.data.is_null() {\n-            // length zero, i.e. this will never be read as a T.\n-            EMPTY as *const T\n-        } else {\n-            self.data as *const T\n-        };\n-\n-        let slice: &[T] = unsafe {mem::transmute(raw::Slice {\n-            data: ptr,\n-            len: self.len\n-        })};\n-\n-        slice\n-    }\n-\n-    pub fn get<'a>(&'a self, i: uint) -> &'a T {\n-        self.as_slice().get(i).expect(\"OwnedSlice: index out of bounds\")\n-    }\n-\n-    pub fn iter<'r>(&'r self) -> slice::Items<'r, T> {\n-        self.as_slice().iter()\n+        &*self.data\n     }\n \n     pub fn move_iter(self) -> vec::MoveItems<T> {\n@@ -112,10 +52,12 @@ impl<T> OwnedSlice<T> {\n     pub fn map<U>(&self, f: |&T| -> U) -> OwnedSlice<U> {\n         self.iter().map(f).collect()\n     }\n+}\n \n-    pub fn len(&self) -> uint { self.len }\n-\n-    pub fn is_empty(&self) -> bool { self.len == 0 }\n+impl<T> Deref<[T]> for OwnedSlice<T> {\n+    fn deref(&self) -> &[T] {\n+        self.as_slice()\n+    }\n }\n \n impl<T> Default for OwnedSlice<T> {\n@@ -130,20 +72,6 @@ impl<T: Clone> Clone for OwnedSlice<T> {\n     }\n }\n \n-impl<S: hash::Writer, T: hash::Hash<S>> hash::Hash<S> for OwnedSlice<T> {\n-    fn hash(&self, state: &mut S) {\n-        self.as_slice().hash(state)\n-    }\n-}\n-\n-impl<T: PartialEq> PartialEq for OwnedSlice<T> {\n-    fn eq(&self, other: &OwnedSlice<T>) -> bool {\n-        self.as_slice() == other.as_slice()\n-    }\n-}\n-\n-impl<T: Eq> Eq for OwnedSlice<T> {}\n-\n impl<T> FromIterator<T> for OwnedSlice<T> {\n     fn from_iter<I: Iterator<T>>(iter: I) -> OwnedSlice<T> {\n         OwnedSlice::from_vec(iter.collect())"}, {"sha": "c12c3098279a97252f585b3b0d59853849862cc8", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/229808405859c46494957df4a5d0cf0e1ba2d257/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/229808405859c46494957df4a5d0cf0e1ba2d257/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=229808405859c46494957df4a5d0cf0e1ba2d257", "patch": "@@ -2394,7 +2394,7 @@ impl<'a> State<'a> {\n                 s.print_lifetime_def(lifetime)\n             } else {\n                 let idx = idx - generics.lifetimes.len();\n-                let param = generics.ty_params.get(idx);\n+                let param = &generics.ty_params[idx];\n                 s.print_ty_param(param)\n             }\n         }));"}]}