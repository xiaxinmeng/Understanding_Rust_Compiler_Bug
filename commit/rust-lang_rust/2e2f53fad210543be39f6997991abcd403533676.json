{"sha": "2e2f53fad210543be39f6997991abcd403533676", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlMmY1M2ZhZDIxMDU0M2JlMzlmNjk5Nzk5MWFiY2Q0MDM1MzM2NzY=", "commit": {"author": {"name": "Michael Neumann", "email": "mneumann@ntecs.de", "date": "2014-07-29T14:44:39Z"}, "committer": {"name": "Michael Neumann", "email": "mneumann@ntecs.de", "date": "2014-07-29T14:44:39Z"}, "message": "Port Rust to DragonFlyBSD\n\nNot included are two required patches:\n\n* LLVM: segmented stack support for DragonFly [1]\n\n* jemalloc: simple configure patches\n\n[1]: http://reviews.llvm.org/D4705", "tree": {"sha": "2f20ba5f45c3e60332b2cc5509659002862b6160", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f20ba5f45c3e60332b2cc5509659002862b6160"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e2f53fad210543be39f6997991abcd403533676", "comment_count": 10, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e2f53fad210543be39f6997991abcd403533676", "html_url": "https://github.com/rust-lang/rust/commit/2e2f53fad210543be39f6997991abcd403533676", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e2f53fad210543be39f6997991abcd403533676/comments", "author": {"login": "mneumann", "id": 34112, "node_id": "MDQ6VXNlcjM0MTEy", "avatar_url": "https://avatars.githubusercontent.com/u/34112?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mneumann", "html_url": "https://github.com/mneumann", "followers_url": "https://api.github.com/users/mneumann/followers", "following_url": "https://api.github.com/users/mneumann/following{/other_user}", "gists_url": "https://api.github.com/users/mneumann/gists{/gist_id}", "starred_url": "https://api.github.com/users/mneumann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mneumann/subscriptions", "organizations_url": "https://api.github.com/users/mneumann/orgs", "repos_url": "https://api.github.com/users/mneumann/repos", "events_url": "https://api.github.com/users/mneumann/events{/privacy}", "received_events_url": "https://api.github.com/users/mneumann/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mneumann", "id": 34112, "node_id": "MDQ6VXNlcjM0MTEy", "avatar_url": "https://avatars.githubusercontent.com/u/34112?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mneumann", "html_url": "https://github.com/mneumann", "followers_url": "https://api.github.com/users/mneumann/followers", "following_url": "https://api.github.com/users/mneumann/following{/other_user}", "gists_url": "https://api.github.com/users/mneumann/gists{/gist_id}", "starred_url": "https://api.github.com/users/mneumann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mneumann/subscriptions", "organizations_url": "https://api.github.com/users/mneumann/orgs", "repos_url": "https://api.github.com/users/mneumann/repos", "events_url": "https://api.github.com/users/mneumann/events{/privacy}", "received_events_url": "https://api.github.com/users/mneumann/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72e2c7dec34bd87fab6bb15bb7d3d97269d4afd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/72e2c7dec34bd87fab6bb15bb7d3d97269d4afd3", "html_url": "https://github.com/rust-lang/rust/commit/72e2c7dec34bd87fab6bb15bb7d3d97269d4afd3"}], "stats": {"total": 493, "additions": 457, "deletions": 36}, "files": [{"sha": "e08e28e0aece0eecae3c97da8ca41244d511418e", "filename": "configure", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e2f53fad210543be39f6997991abcd403533676/configure", "raw_url": "https://github.com/rust-lang/rust/raw/2e2f53fad210543be39f6997991abcd403533676/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=2e2f53fad210543be39f6997991abcd403533676", "patch": "@@ -291,6 +291,10 @@ case $CFG_OSTYPE in\n         CFG_OSTYPE=unknown-freebsd\n         ;;\n \n+    DragonFly)\n+        CFG_OSTYPE=unknown-dragonfly\n+        ;;\n+\n     Darwin)\n         CFG_OSTYPE=apple-darwin\n         ;;"}, {"sha": "29643ea25f70714ecbc48eadf1c77767d644f5c6", "filename": "mk/platform.mk", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2e2f53fad210543be39f6997991abcd403533676/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/2e2f53fad210543be39f6997991abcd403533676/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=2e2f53fad210543be39f6997991abcd403533676", "patch": "@@ -580,6 +580,33 @@ CFG_LDPATH_x86_64-unknown-freebsd :=\n CFG_RUN_x86_64-unknown-freebsd=$(2)\n CFG_RUN_TARG_x86_64-unknown-freebsd=$(call CFG_RUN_x86_64-unknown-freebsd,,$(2))\n \n+# x86_64-pc-dragonfly-elf configuration\n+CC_x86_64-unknown-dragonfly=$(CC)\n+CXX_x86_64-unknown-dragonfly=$(CXX)\n+CPP_x86_64-unknown-dragonfly=$(CPP)\n+AR_x86_64-unknown-dragonfly=$(AR)\n+CFG_LIB_NAME_x86_64-unknown-dragonfly=lib$(1).so\n+CFG_STATIC_LIB_NAME_x86_64-unknown-dragonfly=lib$(1).a\n+CFG_LIB_GLOB_x86_64-unknown-dragonfly=lib$(1)-*.so\n+CFG_LIB_DSYM_GLOB_x86_64-unknown-dragonfly=$(1)-*.dylib.dSYM\n+CFG_CFLAGS_x86_64-unknown-dragonfly := -I/usr/include -I/usr/local/include $(CFLAGS)\n+CFG_GCCISH_CFLAGS_x86_64-unknown-dragonfly := -Wall -Werror -g -fPIC -I/usr/include -I/usr/local/include $(CFLAGS)\n+CFG_GCCISH_LINK_FLAGS_x86_64-unknown-dragonfly := -shared -fPIC -g -pthread  -lrt\n+CFG_GCCISH_DEF_FLAG_x86_64-unknown-dragonfly := -Wl,--export-dynamic,--dynamic-list=\n+CFG_GCCISH_PRE_LIB_FLAGS_x86_64-unknown-dragonfly := -Wl,-whole-archive\n+CFG_GCCISH_POST_LIB_FLAGS_x86_64-unknown-dragonfly := -Wl,-no-whole-archive\n+CFG_DEF_SUFFIX_x86_64-unknown-dragonfly := .bsd.def\n+CFG_LLC_FLAGS_x86_64-unknown-dragonfly :=\n+CFG_INSTALL_NAME_x86_64-unknown-dragonfly =\n+CFG_LIBUV_LINK_FLAGS_x86_64-unknown-dragonfly := -pthread  -lkvm\n+CFG_EXE_SUFFIX_x86_64-unknown-dragonfly :=\n+CFG_WINDOWSY_x86_64-unknown-dragonfly :=\n+CFG_UNIXY_x86_64-unknown-dragonfly := 1\n+CFG_PATH_MUNGE_x86_64-unknown-dragonfly :=\n+CFG_LDPATH_x86_64-unknown-dragonfly :=\n+CFG_RUN_x86_64-unknown-dragonfly=$(2)\n+CFG_RUN_TARG_x86_64-unknown-dragonfly=$(call CFG_RUN_x86_64-unknown-dragonfly,,$(2))\n+\n \n # The -Qunused-arguments sidesteps spurious warnings from clang\n define FILTER_FLAGS"}, {"sha": "13ed4abb438bf4a4e5ca00763f1dda4ad355ccb5", "filename": "mk/rt.mk", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e2f53fad210543be39f6997991abcd403533676/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/2e2f53fad210543be39f6997991abcd403533676/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=2e2f53fad210543be39f6997991abcd403533676", "patch": "@@ -171,6 +171,10 @@ else ifeq ($(OSTYPE_$(1)), apple-ios)\n   JEMALLOC_ARGS_$(1) := --disable-tls\n else ifeq ($(OSTYPE_$(1)), unknown-freebsd)\n   LIBUV_OSTYPE_$(1) := freebsd\n+else ifeq ($(OSTYPE_$(1)), unknown-dragonfly)\n+  LIBUV_OSTYPE_$(1) := freebsd\n+  # required on DragonFly, otherwise gyp fails with a Python exception\n+  LIBUV_GYP_ARGS_$(1) := --no-parallel\n else ifeq ($(OSTYPE_$(1)), linux-androideabi)\n   LIBUV_OSTYPE_$(1) := android\n   LIBUV_ARGS_$(1) := PLATFORM=android host=android OS=linux\n@@ -202,7 +206,7 @@ $$(LIBUV_MAKEFILE_$(1)): $$(LIBUV_DEPS) $$(MKFILE_DEPS) $$(LIBUV_STAMP_$(1))\n \t $$(CFG_PYTHON) ./gyp_uv.py -f make -Dtarget_arch=$$(LIBUV_ARCH_$(1)) \\\n \t   -D ninja \\\n \t   -DOS=$$(LIBUV_OSTYPE_$(1)) \\\n-\t   -Goutput_dir=$$(@D) --generator-output $$(@D))\n+\t   -Goutput_dir=$$(@D) $$(LIBUV_GYP_ARGS_$(1)) --generator-output $$(@D))\n \ttouch $$@\n \n # Windows has a completely different build system for libuv because of mingw. In"}, {"sha": "3283759402db746277b6b98424203c31a45871d0", "filename": "src/doc/rust.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e2f53fad210543be39f6997991abcd403533676/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/2e2f53fad210543be39f6997991abcd403533676/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=2e2f53fad210543be39f6997991abcd403533676", "patch": "@@ -2001,7 +2001,7 @@ The following configurations must be defined by the implementation:\n    `\"unix\"` or `\"windows\"`. The value of this configuration option is defined as\n    a configuration itself, like `unix` or `windows`.\n  * `target_os = \"...\"`. Operating system of the target, examples include\n-   `\"win32\"`, `\"macos\"`, `\"linux\"`, `\"android\"` or `\"freebsd\"`.\n+   `\"win32\"`, `\"macos\"`, `\"linux\"`, `\"android\"`, `\"freebsd\"` or `\"dragonfly\"`.\n  * `target_word_size = \"...\"`. Target word size in bits. This is set to `\"32\"`\n    for targets with 32-bit pointers, and likewise set to `\"64\"` for 64-bit\n    pointers."}, {"sha": "56ebd4f140f523f0d517ec30be5c879b71909e40", "filename": "src/etc/local_stage0.sh", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2e2f53fad210543be39f6997991abcd403533676/src%2Fetc%2Flocal_stage0.sh", "raw_url": "https://github.com/rust-lang/rust/raw/2e2f53fad210543be39f6997991abcd403533676/src%2Fetc%2Flocal_stage0.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flocal_stage0.sh?ref=2e2f53fad210543be39f6997991abcd403533676", "patch": "@@ -18,7 +18,7 @@ LIB_PREFIX=lib\n \n OS=`uname -s`\n case $OS in\n-    (\"Linux\"|\"FreeBSD\")\n+    (\"Linux\"|\"FreeBSD\"|\"DragonFly\")\n     BIN_SUF=\n     LIB_SUF=.so\n     break\n@@ -58,3 +58,6 @@ cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}extra*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_D\n cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}rust*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}std*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}syntax*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n+\n+# do not fail if one of the above fails, as all we need is a working rustc!\n+exit 0"}, {"sha": "113c192ec07bf46b0a5c77e24965a5900b1eda88", "filename": "src/etc/mklldeps.py", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e2f53fad210543be39f6997991abcd403533676/src%2Fetc%2Fmklldeps.py", "raw_url": "https://github.com/rust-lang/rust/raw/2e2f53fad210543be39f6997991abcd403533676/src%2Fetc%2Fmklldeps.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fmklldeps.py?ref=2e2f53fad210543be39f6997991abcd403533676", "patch": "@@ -56,6 +56,8 @@ def run(args):\n         os = 'linux'\n     elif 'freebsd' in os:\n         os = 'freebsd'\n+    elif 'dragonfly' in os:\n+        os = 'dragonfly'\n     elif 'android' in os:\n         os = 'android'\n     elif 'win' in os or 'mingw' in os:"}, {"sha": "af53766617cfe1159d92692413cdbbfcde6b5996", "filename": "src/libgreen/stack.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e2f53fad210543be39f6997991abcd403533676/src%2Flibgreen%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2f53fad210543be39f6997991abcd403533676/src%2Flibgreen%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fstack.rs?ref=2e2f53fad210543be39f6997991abcd403533676", "patch": "@@ -25,10 +25,14 @@ pub struct Stack {\n // anyway), but some platforms don't support it at all. For example, it appears\n // that there's a bug in freebsd that MAP_STACK implies MAP_FIXED (so it always\n // fails): http://lists.freebsd.org/pipermail/freebsd-bugs/2011-July/044840.html\n-#[cfg(not(windows), not(target_os = \"freebsd\"))]\n+//\n+// DragonFly BSD also seems to suffer from the same problem. When MAP_STACK is\n+// used, it returns the same `ptr` multiple times.\n+#[cfg(not(windows), not(target_os = \"freebsd\"), not(target_os = \"dragonfly\"))]\n static STACK_FLAGS: libc::c_int = libc::MAP_STACK | libc::MAP_PRIVATE |\n                                   libc::MAP_ANON;\n #[cfg(target_os = \"freebsd\")]\n+#[cfg(target_os = \"dragonfly\")]\n static STACK_FLAGS: libc::c_int = libc::MAP_PRIVATE | libc::MAP_ANON;\n #[cfg(windows)]\n static STACK_FLAGS: libc::c_int = 0;"}, {"sha": "1bc64ffcc92ae8f05a26f3e72ae30607d0b56b38", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 221, "deletions": 5, "changes": 226, "blob_url": "https://github.com/rust-lang/rust/blob/2e2f53fad210543be39f6997991abcd403533676/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2f53fad210543be39f6997991abcd403533676/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=2e2f53fad210543be39f6997991abcd403533676", "patch": "@@ -269,7 +269,8 @@ pub use funcs::bsd43::{shutdown};\n #[cfg(windows)] pub use funcs::extra::kernel32::{MoveFileExW, VirtualProtect};\n #[cfg(windows)] pub use funcs::extra::msvcrt::{get_osfhandle, open_osfhandle};\n \n-#[cfg(target_os = \"linux\")] #[cfg(target_os = \"android\")] #[cfg(target_os = \"freebsd\")]\n+#[cfg(target_os = \"linux\")] #[cfg(target_os = \"android\")]\n+#[cfg(target_os = \"freebsd\")] #[cfg(target_os = \"dragonfly\")]\n pub use consts::os::posix01::{CLOCK_REALTIME, CLOCK_MONOTONIC};\n \n #[cfg(target_os = \"linux\")] #[cfg(target_os = \"android\")]\n@@ -279,6 +280,7 @@ pub use funcs::posix01::unistd::{fdatasync};\n pub use consts::os::extra::{MAP_STACK};\n \n #[cfg(target_os = \"freebsd\")]\n+#[cfg(target_os = \"dragonfly\")]\n pub use consts::os::bsd44::{TCP_KEEPIDLE};\n \n #[cfg(target_os = \"macos\")]\n@@ -937,6 +939,205 @@ pub mod types {\n         }\n     }\n \n+    #[cfg(target_os = \"dragonfly\")]\n+    pub mod os {\n+        pub mod common {\n+            pub mod posix01 {\n+                use types::common::c95::{c_void};\n+                use types::os::arch::c95::{c_char, c_int, size_t,\n+                                                 time_t, suseconds_t, c_long};\n+                use types::os::arch::c99::{uintptr_t};\n+\n+                pub type pthread_t = uintptr_t;\n+\n+                pub struct glob_t {\n+                    pub gl_pathc:  size_t,\n+                    pub __unused1: size_t,\n+                    pub gl_offs:   size_t,\n+                    pub __unused2: c_int,\n+                    pub gl_pathv:  *mut *mut c_char,\n+\n+                    pub __unused3: *mut c_void,\n+\n+                    pub __unused4: *mut c_void,\n+                    pub __unused5: *mut c_void,\n+                    pub __unused6: *mut c_void,\n+                    pub __unused7: *mut c_void,\n+                    pub __unused8: *mut c_void,\n+                }\n+\n+                pub struct timeval {\n+                    pub tv_sec: time_t,\n+                    pub tv_usec: suseconds_t,\n+                }\n+\n+                pub struct timespec {\n+                    pub tv_sec: time_t,\n+                    pub tv_nsec: c_long,\n+                }\n+\n+                pub enum timezone {}\n+\n+                pub type sighandler_t = size_t;\n+            }\n+            pub mod bsd44 {\n+                use types::os::arch::c95::{c_char, c_int, c_uint};\n+\n+                pub type socklen_t = u32;\n+                pub type sa_family_t = u8;\n+                pub type in_port_t = u16;\n+                pub type in_addr_t = u32;\n+                pub struct sockaddr {\n+                    pub sa_len: u8,\n+                    pub sa_family: sa_family_t,\n+                    pub sa_data: [u8, ..14],\n+                }\n+                pub struct sockaddr_storage {\n+                    pub ss_len: u8,\n+                    pub ss_family: sa_family_t,\n+                    pub __ss_pad1: [u8, ..6],\n+                    pub __ss_align: i64,\n+                    pub __ss_pad2: [u8, ..112],\n+                }\n+                pub struct sockaddr_in {\n+                    pub sin_len: u8,\n+                    pub sin_family: sa_family_t,\n+                    pub sin_port: in_port_t,\n+                    pub sin_addr: in_addr,\n+                    pub sin_zero: [u8, ..8],\n+                }\n+                pub struct in_addr {\n+                    pub s_addr: in_addr_t,\n+                }\n+                pub struct sockaddr_in6 {\n+                    pub sin6_len: u8,\n+                    pub sin6_family: sa_family_t,\n+                    pub sin6_port: in_port_t,\n+                    pub sin6_flowinfo: u32,\n+                    pub sin6_addr: in6_addr,\n+                    pub sin6_scope_id: u32,\n+                }\n+                pub struct in6_addr {\n+                    pub s6_addr: [u16, ..8]\n+                }\n+                pub struct ip_mreq {\n+                    pub imr_multiaddr: in_addr,\n+                    pub imr_interface: in_addr,\n+                }\n+                pub struct ip6_mreq {\n+                    pub ipv6mr_multiaddr: in6_addr,\n+                    pub ipv6mr_interface: c_uint,\n+                }\n+                pub struct addrinfo {\n+                    pub ai_flags: c_int,\n+                    pub ai_family: c_int,\n+                    pub ai_socktype: c_int,\n+                    pub ai_protocol: c_int,\n+                    pub ai_addrlen: socklen_t,\n+                    pub ai_canonname: *mut c_char,\n+                    pub ai_addr: *mut sockaddr,\n+                    pub ai_next: *mut addrinfo,\n+                }\n+                pub struct sockaddr_un {\n+                    pub sun_len: u8,\n+                    pub sun_family: sa_family_t,\n+                    pub sun_path: [c_char, ..104]\n+                }\n+            }\n+        }\n+\n+        #[cfg(target_arch = \"x86_64\")]\n+        pub mod arch {\n+            pub mod c95 {\n+                pub type c_char = i8;\n+                pub type c_schar = i8;\n+                pub type c_uchar = u8;\n+                pub type c_short = i16;\n+                pub type c_ushort = u16;\n+                pub type c_int = i32;\n+                pub type c_uint = u32;\n+                pub type c_long = i64;\n+                pub type c_ulong = u64;\n+                pub type c_float = f32;\n+                pub type c_double = f64;\n+                pub type size_t = u64;\n+                pub type ptrdiff_t = i64;\n+                pub type clock_t = i32;\n+                pub type time_t = i64;\n+                pub type suseconds_t = i64;\n+                pub type wchar_t = i32;\n+            }\n+            pub mod c99 {\n+                pub type c_longlong = i64;\n+                pub type c_ulonglong = u64;\n+                pub type intptr_t = int;\n+                pub type uintptr_t = uint;\n+            }\n+            pub mod posix88 {\n+                pub type off_t = i64;\n+                pub type dev_t = u32;\n+                pub type ino_t = u32;\n+                pub type pid_t = i32;\n+                pub type uid_t = u32;\n+                pub type gid_t = u32;\n+                pub type useconds_t = u32;\n+                pub type mode_t = u16;\n+                pub type ssize_t = i64;\n+            }\n+            pub mod posix01 {\n+                use types::common::c95::{c_void};\n+                use types::common::c99::{uint16_t, uint32_t, int32_t, uint64_t, int64_t};\n+                use types::os::arch::c95::{c_long, time_t};\n+                use types::os::arch::posix88::{dev_t, gid_t};\n+                use types::os::arch::posix88::{mode_t, off_t};\n+                use types::os::arch::posix88::{uid_t};\n+\n+                pub type nlink_t = u16;\n+                pub type blksize_t = uint32_t;\n+                pub type ino_t = uint64_t;\n+                pub type blkcnt_t = i64;\n+                pub type fflags_t = u32;\n+\n+                pub struct stat {\n+                    pub st_ino: ino_t,\n+                    pub st_nlink: nlink_t,\n+                    pub st_dev: dev_t,\n+                    pub st_mode: mode_t,\n+                    pub st_padding1: uint16_t,\n+                    pub st_uid: uid_t,\n+                    pub st_gid: gid_t,\n+                    pub st_rdev: dev_t,\n+                    pub st_atime: time_t,\n+                    pub st_atime_nsec: c_long,\n+                    pub st_mtime: time_t,\n+                    pub st_mtime_nsec: c_long,\n+                    pub st_ctime: time_t,\n+                    pub st_ctime_nsec: c_long,\n+                    pub st_size: off_t,\n+                    pub st_blocks: blkcnt_t,\n+                    pub st_blksize: blksize_t,\n+                    pub st_flags: fflags_t,\n+                    pub st_gen: uint32_t,\n+                    pub st_lspare: int32_t,\n+                    pub st_qspare1: int64_t,\n+                    pub st_qspare2: int64_t,\n+                }\n+                pub struct utimbuf {\n+                    pub actime: time_t,\n+                    pub modtime: time_t,\n+                }\n+\n+                pub type pthread_attr_t = *mut c_void;\n+            }\n+            pub mod posix08 {\n+            }\n+            pub mod bsd44 {\n+            }\n+            pub mod extra {\n+            }\n+        }\n+    }\n+\n     #[cfg(target_os = \"win32\")]\n     pub mod os {\n         pub mod common {\n@@ -2736,6 +2937,7 @@ pub mod consts {\n     }\n \n     #[cfg(target_os = \"freebsd\")]\n+    #[cfg(target_os = \"dragonfly\")]\n     pub mod os {\n         pub mod c95 {\n             use types::os::arch::c95::{c_int, c_uint};\n@@ -2989,12 +3191,15 @@ pub mod consts {\n             #[cfg(target_arch = \"arm\")]\n             pub static PTHREAD_STACK_MIN: size_t = 4096;\n \n-            #[cfg(target_arch = \"mips\")]\n-            #[cfg(target_arch = \"mipsel\")]\n-            #[cfg(target_arch = \"x86\")]\n-            #[cfg(target_arch = \"x86_64\")]\n+            #[cfg(target_os = \"freebsd\", target_arch = \"mips\")]\n+            #[cfg(target_os = \"freebsd\", target_arch = \"mipsel\")]\n+            #[cfg(target_os = \"freebsd\", target_arch = \"x86\")]\n+            #[cfg(target_os = \"freebsd\", target_arch = \"x86_64\")]\n             pub static PTHREAD_STACK_MIN: size_t = 2048;\n \n+            #[cfg(target_os = \"dragonfly\")]\n+            pub static PTHREAD_STACK_MIN: size_t = 1024;\n+\n             pub static CLOCK_REALTIME: c_int = 0;\n             pub static CLOCK_MONOTONIC: c_int = 4;\n         }\n@@ -3056,7 +3261,10 @@ pub mod consts {\n             pub static O_SYNC : c_int = 128;\n             pub static CTL_KERN: c_int = 1;\n             pub static KERN_PROC: c_int = 14;\n+            #[cfg(target_os = \"freebsd\")]\n             pub static KERN_PROC_PATHNAME: c_int = 12;\n+            #[cfg(target_os = \"dragonfly\")]\n+            pub static KERN_PROC_PATHNAME: c_int = 9;\n \n             pub static MAP_COPY : c_int = 0x0002;\n             pub static MAP_RENAME : c_int = 0x0020;\n@@ -3809,6 +4017,7 @@ pub mod funcs {\n     #[cfg(target_os = \"macos\")]\n     #[cfg(target_os = \"ios\")]\n     #[cfg(target_os = \"freebsd\")]\n+    #[cfg(target_os = \"dragonfly\")]\n     pub mod posix88 {\n         pub mod stat_ {\n             use types::os::arch::c95::{c_char, c_int};\n@@ -3821,6 +4030,7 @@ pub mod funcs {\n \n                 #[cfg(target_os = \"linux\")]\n                 #[cfg(target_os = \"freebsd\")]\n+                #[cfg(target_os = \"dragonfly\")]\n                 #[cfg(target_os = \"android\")]\n                 #[cfg(target_os = \"ios\")]\n                 pub fn fstat(fildes: c_int, buf: *mut stat) -> c_int;\n@@ -3834,6 +4044,7 @@ pub mod funcs {\n \n                 #[cfg(target_os = \"linux\")]\n                 #[cfg(target_os = \"freebsd\")]\n+                #[cfg(target_os = \"dragonfly\")]\n                 #[cfg(target_os = \"android\")]\n                 #[cfg(target_os = \"ios\")]\n                 pub fn stat(path: *const c_char, buf: *mut stat) -> c_int;\n@@ -4016,6 +4227,7 @@ pub mod funcs {\n     #[cfg(target_os = \"macos\")]\n     #[cfg(target_os = \"ios\")]\n     #[cfg(target_os = \"freebsd\")]\n+    #[cfg(target_os = \"dragonfly\")]\n     pub mod posix01 {\n         pub mod stat_ {\n             use types::os::arch::c95::{c_char, c_int};\n@@ -4024,6 +4236,7 @@ pub mod funcs {\n             extern {\n                 #[cfg(target_os = \"linux\")]\n                 #[cfg(target_os = \"freebsd\")]\n+                #[cfg(target_os = \"dragonfly\")]\n                 #[cfg(target_os = \"android\")]\n                 #[cfg(target_os = \"ios\")]\n                 pub fn lstat(path: *const c_char, buf: *mut stat) -> c_int;\n@@ -4129,6 +4342,7 @@ pub mod funcs {\n     #[cfg(target_os = \"macos\")]\n     #[cfg(target_os = \"ios\")]\n     #[cfg(target_os = \"freebsd\")]\n+    #[cfg(target_os = \"dragonfly\")]\n     pub mod posix08 {\n         pub mod unistd {\n         }\n@@ -4212,6 +4426,7 @@ pub mod funcs {\n     #[cfg(target_os = \"macos\")]\n     #[cfg(target_os = \"ios\")]\n     #[cfg(target_os = \"freebsd\")]\n+    #[cfg(target_os = \"dragonfly\")]\n     pub mod bsd44 {\n         use types::common::c95::{c_void};\n         use types::os::arch::c95::{c_char, c_uchar, c_int, c_uint, size_t};\n@@ -4275,6 +4490,7 @@ pub mod funcs {\n     }\n \n     #[cfg(target_os = \"freebsd\")]\n+    #[cfg(target_os = \"dragonfly\")]\n     pub mod extra {\n     }\n "}, {"sha": "af4d309dfe250d2853ed2d48909b2874449699b2", "filename": "src/libnative/io/c_unix.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2e2f53fad210543be39f6997991abcd403533676/src%2Flibnative%2Fio%2Fc_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2f53fad210543be39f6997991abcd403533676/src%2Flibnative%2Fio%2Fc_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fc_unix.rs?ref=2e2f53fad210543be39f6997991abcd403533676", "patch": "@@ -22,6 +22,7 @@ use libc;\n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"ios\")]\n #[cfg(target_os = \"freebsd\")]\n+#[cfg(target_os = \"dragonfly\")]\n pub static FIONBIO: libc::c_ulong = 0x8004667e;\n #[cfg(target_os = \"linux\", target_arch = \"x86\")]\n #[cfg(target_os = \"linux\", target_arch = \"x86_64\")]\n@@ -35,6 +36,7 @@ pub static FIONBIO: libc::c_ulong = 0x667e;\n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"ios\")]\n #[cfg(target_os = \"freebsd\")]\n+#[cfg(target_os = \"dragonfly\")]\n pub static FIOCLEX: libc::c_ulong = 0x20006601;\n #[cfg(target_os = \"linux\", target_arch = \"x86\")]\n #[cfg(target_os = \"linux\", target_arch = \"x86_64\")]\n@@ -48,6 +50,7 @@ pub static FIOCLEX: libc::c_ulong = 0x6601;\n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"ios\")]\n #[cfg(target_os = \"freebsd\")]\n+#[cfg(target_os = \"dragonfly\")]\n pub static MSG_DONTWAIT: libc::c_int = 0x80;\n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"android\")]\n@@ -99,13 +102,15 @@ mod select {\n \n #[cfg(target_os = \"android\")]\n #[cfg(target_os = \"freebsd\")]\n+#[cfg(target_os = \"dragonfly\")]\n #[cfg(target_os = \"linux\")]\n mod select {\n     use std::uint;\n \n     pub static FD_SETSIZE: uint = 1024;\n \n     pub struct fd_set {\n+        // FIXME: shouldn't this be a c_ulong?\n         fds_bits: [uint, ..(FD_SETSIZE / uint::BITS)]\n     }\n \n@@ -202,6 +207,7 @@ mod signal {\n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"ios\")]\n #[cfg(target_os = \"freebsd\")]\n+#[cfg(target_os = \"dragonfly\")]\n mod signal {\n     use libc;\n \n@@ -218,6 +224,7 @@ mod signal {\n     #[cfg(target_os = \"ios\")]\n     pub type sigset_t = u32;\n     #[cfg(target_os = \"freebsd\")]\n+    #[cfg(target_os = \"dragonfly\")]\n     pub struct sigset_t {\n         bits: [u32, ..4],\n     }\n@@ -243,6 +250,7 @@ mod signal {\n     }\n \n     #[cfg(target_os = \"freebsd\")]\n+    #[cfg(target_os = \"dragonfly\")]\n     pub struct sigaction {\n         pub sa_handler: extern fn(libc::c_int),\n         pub sa_flags: libc::c_int,"}, {"sha": "db5421481ee42eca7fbb8520a988ce87d4e6f347", "filename": "src/libnative/io/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2e2f53fad210543be39f6997991abcd403533676/src%2Flibnative%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2f53fad210543be39f6997991abcd403533676/src%2Flibnative%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fmod.rs?ref=2e2f53fad210543be39f6997991abcd403533676", "patch": "@@ -52,6 +52,7 @@ pub mod file;\n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"ios\")]\n #[cfg(target_os = \"freebsd\")]\n+#[cfg(target_os = \"dragonfly\")]\n #[cfg(target_os = \"android\")]\n #[cfg(target_os = \"linux\")]\n #[path = \"timer_unix.rs\"]"}, {"sha": "7a90ede8ca863283f79dd1f75666b4465cd2c76a", "filename": "src/libnative/io/net.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e2f53fad210543be39f6997991abcd403533676/src%2Flibnative%2Fio%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2f53fad210543be39f6997991abcd403533676/src%2Flibnative%2Fio%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fnet.rs?ref=2e2f53fad210543be39f6997991abcd403533676", "patch": "@@ -326,11 +326,13 @@ impl TcpStream {\n                    seconds as libc::c_int)\n     }\n     #[cfg(target_os = \"freebsd\")]\n+    #[cfg(target_os = \"dragonfly\")]\n     fn set_tcp_keepalive(&mut self, seconds: uint) -> IoResult<()> {\n         setsockopt(self.fd(), libc::IPPROTO_TCP, libc::TCP_KEEPIDLE,\n                    seconds as libc::c_int)\n     }\n-    #[cfg(not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"freebsd\"))]\n+    #[cfg(not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"freebsd\"),\n+      not(target_os = \"dragonfly\"))]\n     fn set_tcp_keepalive(&mut self, _seconds: uint) -> IoResult<()> {\n         Ok(())\n     }"}, {"sha": "c89a40d65135144f880d0904619392942793a434", "filename": "src/libnative/io/process.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2e2f53fad210543be39f6997991abcd403533676/src%2Flibnative%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2f53fad210543be39f6997991abcd403533676/src%2Flibnative%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fprocess.rs?ref=2e2f53fad210543be39f6997991abcd403533676", "patch": "@@ -847,6 +847,7 @@ fn translate_status(status: c_int) -> rtio::ProcessExit {\n     #[cfg(target_os = \"macos\")]\n     #[cfg(target_os = \"ios\")]\n     #[cfg(target_os = \"freebsd\")]\n+    #[cfg(target_os = \"dragonfly\")]\n     mod imp {\n         pub fn WIFEXITED(status: i32) -> bool { (status & 0x7f) == 0 }\n         pub fn WEXITSTATUS(status: i32) -> i32 { status >> 8 }"}, {"sha": "bb031219b7735d1e5099683f68c740b99c165496", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2e2f53fad210543be39f6997991abcd403533676/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2f53fad210543be39f6997991abcd403533676/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=2e2f53fad210543be39f6997991abcd403533676", "patch": "@@ -927,6 +927,7 @@ pub fn filename_for_input(sess: &Session,\n                 abi::OsLinux => (loader::LINUX_DLL_PREFIX, loader::LINUX_DLL_SUFFIX),\n                 abi::OsAndroid => (loader::ANDROID_DLL_PREFIX, loader::ANDROID_DLL_SUFFIX),\n                 abi::OsFreebsd => (loader::FREEBSD_DLL_PREFIX, loader::FREEBSD_DLL_SUFFIX),\n+                abi::OsDragonfly => (loader::DRAGONFLY_DLL_PREFIX, loader::DRAGONFLY_DLL_SUFFIX),\n                 abi::OsiOS => unreachable!(),\n             };\n             out_filename.with_filename(format!(\"{}{}{}\",\n@@ -944,6 +945,7 @@ pub fn filename_for_input(sess: &Session,\n                 abi::OsLinux |\n                 abi::OsAndroid |\n                 abi::OsFreebsd |\n+                abi::OsDragonfly |\n                 abi::OsiOS => out_filename.clone(),\n             }\n         }\n@@ -1311,7 +1313,7 @@ fn link_args(cmd: &mut Command,\n         cmd.arg(\"-Wl,--gc-sections\");\n     }\n \n-    if sess.targ_cfg.os == abi::OsLinux {\n+    if sess.targ_cfg.os == abi::OsLinux || sess.targ_cfg.os == abi::OsDragonfly {\n         // GNU-style linkers will use this to omit linking to libraries which\n         // don't actually fulfill any relocations, but only for libraries which\n         // follow this flag. Thus, use it before specifying libraries to link to.\n@@ -1436,6 +1438,12 @@ fn link_args(cmd: &mut Command,\n                   \"-L/usr/local/lib/gcc46\",\n                   \"-L/usr/local/lib/gcc44\"]);\n     }\n+    else if sess.targ_cfg.os == abi::OsDragonfly {\n+        cmd.args([\"-L/usr/local/lib\",\n+                  \"-L/usr/lib/gcc47\",\n+                  \"-L/usr/lib/gcc44\"]);\n+    }\n+\n \n     // FIXME (#2397): At some point we want to rpath our guesses as to\n     // where extern libraries might live, based on the"}, {"sha": "f4309d9e51b56f7ae14c84349c09fb896aa0fd94", "filename": "src/librustc/driver/config.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2e2f53fad210543be39f6997991abcd403533676/src%2Flibrustc%2Fdriver%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2f53fad210543be39f6997991abcd403533676/src%2Flibrustc%2Fdriver%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fconfig.rs?ref=2e2f53fad210543be39f6997991abcd403533676", "patch": "@@ -390,12 +390,13 @@ pub fn default_lib_output() -> CrateType {\n \n pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n     let tos = match sess.targ_cfg.os {\n-        abi::OsWin32 =>   InternedString::new(\"win32\"),\n-        abi::OsMacos =>   InternedString::new(\"macos\"),\n-        abi::OsLinux =>   InternedString::new(\"linux\"),\n-        abi::OsAndroid => InternedString::new(\"android\"),\n-        abi::OsFreebsd => InternedString::new(\"freebsd\"),\n-        abi::OsiOS =>     InternedString::new(\"ios\"),\n+        abi::OsWin32 =>     InternedString::new(\"win32\"),\n+        abi::OsMacos =>     InternedString::new(\"macos\"),\n+        abi::OsLinux =>     InternedString::new(\"linux\"),\n+        abi::OsAndroid =>   InternedString::new(\"android\"),\n+        abi::OsFreebsd =>   InternedString::new(\"freebsd\"),\n+        abi::OsDragonfly => InternedString::new(\"dragonfly\"),\n+        abi::OsiOS =>       InternedString::new(\"ios\"),\n     };\n \n     // ARM is bi-endian, however using NDK seems to default\n@@ -451,13 +452,14 @@ pub fn get_os(triple: &str) -> Option<abi::Os> {\n     None\n }\n static os_names : &'static [(&'static str, abi::Os)] = &[\n-    (\"mingw32\", abi::OsWin32),\n-    (\"win32\",   abi::OsWin32),\n-    (\"darwin\",  abi::OsMacos),\n-    (\"android\", abi::OsAndroid),\n-    (\"linux\",   abi::OsLinux),\n-    (\"freebsd\", abi::OsFreebsd),\n-    (\"ios\",     abi::OsiOS)];\n+    (\"mingw32\",   abi::OsWin32),\n+    (\"win32\",     abi::OsWin32),\n+    (\"darwin\",    abi::OsMacos),\n+    (\"android\",   abi::OsAndroid),\n+    (\"linux\",     abi::OsLinux),\n+    (\"freebsd\",   abi::OsFreebsd),\n+    (\"dragonfly\", abi::OsDragonfly),\n+    (\"ios\",       abi::OsiOS)];\n \n pub fn get_arch(triple: &str) -> Option<abi::Architecture> {\n     for &(arch, abi) in architecture_abis.iter() {"}, {"sha": "4b9dd1003ec604ec6827ca67abbccd1b527d2be8", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2e2f53fad210543be39f6997991abcd403533676/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2f53fad210543be39f6997991abcd403533676/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=2e2f53fad210543be39f6997991abcd403533676", "patch": "@@ -251,6 +251,9 @@ pub static LINUX_DLL_SUFFIX: &'static str = \".so\";\n pub static FREEBSD_DLL_PREFIX: &'static str = \"lib\";\n pub static FREEBSD_DLL_SUFFIX: &'static str = \".so\";\n \n+pub static DRAGONFLY_DLL_PREFIX: &'static str = \"lib\";\n+pub static DRAGONFLY_DLL_SUFFIX: &'static str = \".so\";\n+\n pub static ANDROID_DLL_PREFIX: &'static str = \"lib\";\n pub static ANDROID_DLL_SUFFIX: &'static str = \".so\";\n \n@@ -617,6 +620,7 @@ impl<'a> Context<'a> {\n             abi::OsLinux => Some((LINUX_DLL_PREFIX, LINUX_DLL_SUFFIX)),\n             abi::OsAndroid => Some((ANDROID_DLL_PREFIX, ANDROID_DLL_SUFFIX)),\n             abi::OsFreebsd => Some((FREEBSD_DLL_PREFIX, FREEBSD_DLL_SUFFIX)),\n+            abi::OsDragonfly => Some((DRAGONFLY_DLL_PREFIX, DRAGONFLY_DLL_SUFFIX)),\n             abi::OsiOS => None,\n         }\n     }\n@@ -823,7 +827,8 @@ pub fn meta_section_name(os: abi::Os) -> Option<&'static str> {\n         abi::OsWin32 => Some(\".note.rustc\"),\n         abi::OsLinux => Some(\".note.rustc\"),\n         abi::OsAndroid => Some(\".note.rustc\"),\n-        abi::OsFreebsd => Some(\".note.rustc\")\n+        abi::OsFreebsd => Some(\".note.rustc\"),\n+        abi::OsDragonfly => Some(\".note.rustc\"),\n     }\n }\n \n@@ -834,7 +839,8 @@ pub fn read_meta_section_name(os: abi::Os) -> &'static str {\n         abi::OsWin32 => \".note.rustc\",\n         abi::OsLinux => \".note.rustc\",\n         abi::OsAndroid => \".note.rustc\",\n-        abi::OsFreebsd => \".note.rustc\"\n+        abi::OsFreebsd => \".note.rustc\",\n+        abi::OsDragonfly => \".note.rustc\"\n     }\n }\n "}, {"sha": "9bb90427e7ccf24127a290115ab18369654a05e2", "filename": "src/librustc_back/arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e2f53fad210543be39f6997991abcd403533676/src%2Flibrustc_back%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2f53fad210543be39f6997991abcd403533676/src%2Flibrustc_back%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Farm.rs?ref=2e2f53fad210543be39f6997991abcd403533676", "patch": "@@ -61,7 +61,7 @@ pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs\n                 -a0:0:64-n32\".to_string()\n           }\n \n-          abi::OsFreebsd => {\n+          abi::OsFreebsd | abi::OsDragonfly => {\n             \"e-p:32:32:32\\\n                 -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n                 -f32:32:32-f64:64:64\\"}, {"sha": "43bf3e8e4af385efeb1ad5b1553f86ce98d8e277", "filename": "src/librustc_back/mips.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e2f53fad210543be39f6997991abcd403533676/src%2Flibrustc_back%2Fmips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2f53fad210543be39f6997991abcd403533676/src%2Flibrustc_back%2Fmips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fmips.rs?ref=2e2f53fad210543be39f6997991abcd403533676", "patch": "@@ -56,7 +56,7 @@ pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs\n                 -a0:0:64-n32\".to_string()\n           }\n \n-          abi::OsFreebsd => {\n+          abi::OsFreebsd | abi::OsDragonfly => {\n             \"E-p:32:32:32\\\n                 -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n                 -f32:32:32-f64:64:64\\"}, {"sha": "87f74e72504ac01dec6d411f04466e67355b2e73", "filename": "src/librustc_back/mipsel.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e2f53fad210543be39f6997991abcd403533676/src%2Flibrustc_back%2Fmipsel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2f53fad210543be39f6997991abcd403533676/src%2Flibrustc_back%2Fmipsel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fmipsel.rs?ref=2e2f53fad210543be39f6997991abcd403533676", "patch": "@@ -56,7 +56,7 @@ pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs\n                 -a0:0:64-n32\".to_string()\n           }\n \n-          abi::OsFreebsd => {\n+          abi::OsFreebsd | abi::OsDragonfly => {\n             \"e-p:32:32:32\\\n                 -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n                 -f32:32:32-f64:64:64\\"}, {"sha": "94d197ad06a8d23c6e9f84402657400aeb3e797d", "filename": "src/librustc_back/rpath.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2e2f53fad210543be39f6997991abcd403533676/src%2Flibrustc_back%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2f53fad210543be39f6997991abcd403533676/src%2Flibrustc_back%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Frpath.rs?ref=2e2f53fad210543be39f6997991abcd403533676", "patch": "@@ -37,6 +37,12 @@ pub fn get_rpath_flags(config: RPathConfig) -> Vec<String> {\n                         \"-Wl,-rpath,/usr/local/lib/gcc44\".to_string(),\n                         \"-Wl,-z,origin\".to_string()]);\n     }\n+    else if config.os == abi::OsDragonfly {\n+        flags.push_all([\"-Wl,-rpath,/usr/lib/gcc47\".to_string(),\n+                        \"-Wl,-rpath,/usr/lib/gcc44\".to_string(),\n+                        \"-Wl,-z,origin\".to_string()]);\n+    }\n+\n \n     debug!(\"preparing the RPATH!\");\n \n@@ -105,7 +111,7 @@ fn get_rpath_relative_to_output(config: &mut RPathConfig,\n \n     // Mac doesn't appear to support $ORIGIN\n     let prefix = match config.os {\n-        abi::OsAndroid | abi::OsLinux | abi::OsFreebsd\n+        abi::OsAndroid | abi::OsLinux | abi::OsFreebsd | abi::OsDragonfly\n                           => \"$ORIGIN\",\n         abi::OsMacos => \"@loader_path\",\n         abi::OsWin32 | abi::OsiOS => unreachable!()\n@@ -222,6 +228,20 @@ mod test {\n         assert_eq!(res.as_slice(), \"$ORIGIN/../lib\");\n     }\n \n+    #[test]\n+    #[cfg(target_os = \"dragonfly\")]\n+    fn test_rpath_relative() {\n+        let config = &mut RPathConfig {\n+            os: abi::OsDragonfly,\n+            used_crates: Vec::new(),\n+            out_filename: Path::new(\"bin/rustc\"),\n+            get_install_prefix_lib_path: || fail!(),\n+            realpath: |p| Ok(p.clone())\n+        };\n+        let res = get_rpath_relative_to_output(config, &Path::new(\"lib/libstd.so\"));\n+        assert_eq!(res.as_slice(), \"$ORIGIN/../lib\");\n+    }\n+\n     #[test]\n     #[cfg(target_os = \"macos\")]\n     fn test_rpath_relative() {"}, {"sha": "3c444806e13e55c45b113b54b2d9f33702053a52", "filename": "src/librustc_back/x86.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e2f53fad210543be39f6997991abcd403533676/src%2Flibrustc_back%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2f53fad210543be39f6997991abcd403533676/src%2Flibrustc_back%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fx86.rs?ref=2e2f53fad210543be39f6997991abcd403533676", "patch": "@@ -48,6 +48,10 @@ pub fn get_target_strs(target_triple: String, target_os: abi::Os)\n           abi::OsFreebsd => {\n             \"e-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\".to_string()\n           }\n+          abi::OsDragonfly => {\n+            \"e-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\".to_string()\n+          }\n+\n         },\n \n         target_triple: target_triple,"}, {"sha": "b4b5765986bab3b3533bd22fe6b5254984485620", "filename": "src/librustc_back/x86_64.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e2f53fad210543be39f6997991abcd403533676/src%2Flibrustc_back%2Fx86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2f53fad210543be39f6997991abcd403533676/src%2Flibrustc_back%2Fx86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fx86_64.rs?ref=2e2f53fad210543be39f6997991abcd403533676", "patch": "@@ -52,6 +52,12 @@ pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs\n                 f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-\\\n                 s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string()\n           }\n+          abi::OsDragonfly => {\n+            \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n+                f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-\\\n+                s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string()\n+          }\n+\n         },\n \n         target_triple: target_triple,"}, {"sha": "f22950e7a299e235c8922a1d7edeec6d513c514e", "filename": "src/librustdoc/flock.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2e2f53fad210543be39f6997991abcd403533676/src%2Flibrustdoc%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2f53fad210543be39f6997991abcd403533676/src%2Flibrustdoc%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fflock.rs?ref=2e2f53fad210543be39f6997991abcd403533676", "patch": "@@ -63,6 +63,27 @@ mod imp {\n         pub static F_SETLKW: libc::c_int = 13;\n     }\n \n+    #[cfg(target_os = \"dragonfly\")]\n+    mod os {\n+        use libc;\n+\n+        pub struct flock {\n+            pub l_start: libc::off_t,\n+            pub l_len: libc::off_t,\n+            pub l_pid: libc::pid_t,\n+            pub l_type: libc::c_short,\n+            pub l_whence: libc::c_short,\n+\n+            // not actually here, but brings in line with freebsd\n+            pub l_sysid: libc::c_int,\n+        }\n+\n+        pub static F_UNLCK: libc::c_short = 2;\n+        pub static F_WRLCK: libc::c_short = 3;\n+        pub static F_SETLK: libc::c_int = 8;\n+        pub static F_SETLKW: libc::c_int = 9;\n+    }\n+\n     #[cfg(target_os = \"macos\")]\n     #[cfg(target_os = \"ios\")]\n     mod os {"}, {"sha": "531bbe038fcbbc5664097ced27680ad9bb3f377c", "filename": "src/librustrt/args.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2e2f53fad210543be39f6997991abcd403533676/src%2Flibrustrt%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2f53fad210543be39f6997991abcd403533676/src%2Flibrustrt%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fargs.rs?ref=2e2f53fad210543be39f6997991abcd403533676", "patch": "@@ -42,6 +42,7 @@ pub fn clone() -> Option<Vec<Vec<u8>>> { imp::clone() }\n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"android\")]\n #[cfg(target_os = \"freebsd\")]\n+#[cfg(target_os = \"dragonfly\")]\n mod imp {\n     use core::prelude::*;\n "}, {"sha": "789723af1b1332e8fc73bb58cf0c70e2dbcaebb1", "filename": "src/librustrt/libunwind.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2e2f53fad210543be39f6997991abcd403533676/src%2Flibrustrt%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2f53fad210543be39f6997991abcd403533676/src%2Flibrustrt%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flibunwind.rs?ref=2e2f53fad210543be39f6997991abcd403533676", "patch": "@@ -94,6 +94,9 @@ extern {}\n #[link(name = \"gcc\")]\n extern {}\n \n+#[cfg(target_os = \"dragonfly\")]\n+#[link(name = \"gcc_pic\")]\n+extern {}\n \n extern \"C\" {\n     // iOS on armv7 uses SjLj exceptions and requires to link"}, {"sha": "f24c2609d09e81b93f6f7a1af38ba0201c9ee4d0", "filename": "src/librustrt/mutex.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2e2f53fad210543be39f6997991abcd403533676/src%2Flibrustrt%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2f53fad210543be39f6997991abcd403533676/src%2Flibrustrt%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fmutex.rs?ref=2e2f53fad210543be39f6997991abcd403533676", "patch": "@@ -347,6 +347,7 @@ mod imp {\n     type pthread_condattr_t = libc::c_void;\n \n     #[cfg(target_os = \"freebsd\")]\n+    #[cfg(target_os = \"dragonfly\")]\n     mod os {\n         use libc;\n "}, {"sha": "6544c020e09494bfd6707ac13fe97f7f69da8710", "filename": "src/librustrt/stack.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2e2f53fad210543be39f6997991abcd403533676/src%2Flibrustrt%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2f53fad210543be39f6997991abcd403533676/src%2Flibrustrt%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fstack.rs?ref=2e2f53fad210543be39f6997991abcd403533676", "patch": "@@ -194,6 +194,10 @@ pub unsafe fn record_sp_limit(limit: uint) {\n     unsafe fn target_record_sp_limit(limit: uint) {\n         asm!(\"movq $0, %fs:24\" :: \"r\"(limit) :: \"volatile\")\n     }\n+    #[cfg(target_arch = \"x86_64\", target_os = \"dragonfly\")] #[inline(always)]\n+    unsafe fn target_record_sp_limit(limit: uint) {\n+        asm!(\"movq $0, %fs:32\" :: \"r\"(limit) :: \"volatile\")\n+    }\n \n     // x86\n     #[cfg(target_arch = \"x86\", target_os = \"macos\")]\n@@ -272,6 +276,13 @@ pub unsafe fn get_sp_limit() -> uint {\n         asm!(\"movq %fs:24, $0\" : \"=r\"(limit) ::: \"volatile\");\n         return limit;\n     }\n+    #[cfg(target_arch = \"x86_64\", target_os = \"dragonfly\")] #[inline(always)]\n+    unsafe fn target_get_sp_limit() -> uint {\n+        let limit;\n+        asm!(\"movq %fs:32, $0\" : \"=r\"(limit) ::: \"volatile\");\n+        return limit;\n+    }\n+\n \n     // x86\n     #[cfg(target_arch = \"x86\", target_os = \"macos\")]"}, {"sha": "b9b12686170c0eacb01d2672be93bf231079b57b", "filename": "src/librustrt/thread_local_storage.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2e2f53fad210543be39f6997991abcd403533676/src%2Flibrustrt%2Fthread_local_storage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2f53fad210543be39f6997991abcd403533676/src%2Flibrustrt%2Fthread_local_storage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fthread_local_storage.rs?ref=2e2f53fad210543be39f6997991abcd403533676", "patch": "@@ -43,6 +43,7 @@ type pthread_key_t = ::libc::c_ulong;\n \n #[cfg(target_os=\"linux\")]\n #[cfg(target_os=\"freebsd\")]\n+#[cfg(target_os=\"dragonfly\")]\n #[cfg(target_os=\"android\")]\n #[cfg(target_os = \"ios\")]\n #[allow(non_camel_case_types)] // foreign type"}, {"sha": "2bcd2101d890b979a81ca1833fb86d98922b4efd", "filename": "src/librustuv/uvll.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e2f53fad210543be39f6997991abcd403533676/src%2Flibrustuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2f53fad210543be39f6997991abcd403533676/src%2Flibrustuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvll.rs?ref=2e2f53fad210543be39f6997991abcd403533676", "patch": "@@ -719,6 +719,7 @@ extern {\n extern {}\n \n #[cfg(target_os = \"linux\")]\n+#[cfg(target_os = \"dragonfly\")]\n #[link(name = \"rt\")]\n extern {}\n \n@@ -729,5 +730,6 @@ extern {}\n extern {}\n \n #[cfg(target_os = \"freebsd\")]\n+#[cfg(target_os = \"dragonfly\")]\n #[link(name = \"kvm\")]\n extern {}"}, {"sha": "2c4e0ea67010f2c9143d5b6a33ffc87a32cc7ec4", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e2f53fad210543be39f6997991abcd403533676/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2f53fad210543be39f6997991abcd403533676/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=2e2f53fad210543be39f6997991abcd403533676", "patch": "@@ -193,6 +193,7 @@ mod test {\n     #[cfg(target_os = \"linux\")]\n     #[cfg(target_os = \"macos\")]\n     #[cfg(target_os = \"freebsd\")]\n+    #[cfg(target_os = \"dragonfly\")]\n     fn test_errors_do_not_crash() {\n         // Open /dev/null as a library to get an error, and make sure\n         // that only causes an error, and not a crash.\n@@ -209,6 +210,7 @@ mod test {\n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"ios\")]\n #[cfg(target_os = \"freebsd\")]\n+#[cfg(target_os = \"dragonfly\")]\n pub mod dl {\n \n     use c_str::{CString, ToCStr};"}, {"sha": "7fff510a60a4b19ae7a2c69c97c46d723b63320c", "filename": "src/libstd/os.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2e2f53fad210543be39f6997991abcd403533676/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2f53fad210543be39f6997991abcd403533676/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=2e2f53fad210543be39f6997991abcd403533676", "patch": "@@ -651,6 +651,7 @@ pub fn dll_filename(base: &str) -> String {\n pub fn self_exe_name() -> Option<Path> {\n \n     #[cfg(target_os = \"freebsd\")]\n+    #[cfg(target_os = \"dragonfly\")]\n     fn load_self() -> Option<Vec<u8>> {\n         unsafe {\n             use libc::funcs::bsd44::*;\n@@ -913,6 +914,16 @@ pub fn errno() -> int {\n         }\n     }\n \n+    #[cfg(target_os = \"dragonfly\")]\n+    fn errno_location() -> *const c_int {\n+        extern {\n+            fn __dfly_error() -> *const c_int;\n+        }\n+        unsafe {\n+            __dfly_error()\n+        }\n+    }\n+\n     #[cfg(target_os = \"linux\")]\n     #[cfg(target_os = \"android\")]\n     fn errno_location() -> *const c_int {\n@@ -961,6 +972,7 @@ pub fn error_string(errnum: uint) -> String {\n         #[cfg(target_os = \"ios\")]\n         #[cfg(target_os = \"android\")]\n         #[cfg(target_os = \"freebsd\")]\n+        #[cfg(target_os = \"dragonfly\")]\n         fn strerror_r(errnum: c_int, buf: *mut c_char, buflen: libc::size_t)\n                       -> c_int {\n             extern {\n@@ -1167,6 +1179,7 @@ fn real_args_as_bytes() -> Vec<Vec<u8>> {\n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"android\")]\n #[cfg(target_os = \"freebsd\")]\n+#[cfg(target_os = \"dragonfly\")]\n fn real_args_as_bytes() -> Vec<Vec<u8>> {\n     use rt;\n \n@@ -1767,6 +1780,37 @@ pub mod consts {\n     pub static EXE_EXTENSION: &'static str = \"\";\n }\n \n+#[cfg(target_os = \"dragonfly\")]\n+pub mod consts {\n+    pub use os::arch_consts::ARCH;\n+\n+    pub static FAMILY: &'static str = \"unix\";\n+\n+    /// A string describing the specific operating system in use: in this\n+    /// case, `dragonfly`.\n+    pub static SYSNAME: &'static str = \"dragonfly\";\n+\n+    /// Specifies the filename prefix used for shared libraries on this\n+    /// platform: in this case, `lib`.\n+    pub static DLL_PREFIX: &'static str = \"lib\";\n+\n+    /// Specifies the filename suffix used for shared libraries on this\n+    /// platform: in this case, `.so`.\n+    pub static DLL_SUFFIX: &'static str = \".so\";\n+\n+    /// Specifies the file extension used for shared libraries on this\n+    /// platform that goes after the dot: in this case, `so`.\n+    pub static DLL_EXTENSION: &'static str = \"so\";\n+\n+    /// Specifies the filename suffix used for executable binaries on this\n+    /// platform: in this case, the empty string.\n+    pub static EXE_SUFFIX: &'static str = \"\";\n+\n+    /// Specifies the file extension, if any, used for executable binaries\n+    /// on this platform: in this case, the empty string.\n+    pub static EXE_EXTENSION: &'static str = \"\";\n+}\n+\n #[cfg(target_os = \"android\")]\n pub mod consts {\n     pub use os::arch_consts::ARCH;"}, {"sha": "00477f8e119ce518d50b500981f1c27dae43cffd", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e2f53fad210543be39f6997991abcd403533676/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2f53fad210543be39f6997991abcd403533676/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=2e2f53fad210543be39f6997991abcd403533676", "patch": "@@ -464,11 +464,15 @@ mod imp {\n         // the symbols. The libbacktrace API also states that the filename must\n         // be in \"permanent memory\", so we copy it to a static and then use the\n         // static as the pointer.\n+        //\n+        // FIXME: We also call self_exe_name() on DragonFly BSD. I haven't \n+        //        tested if this is required or not.\n         unsafe fn init_state() -> *mut backtrace_state {\n             static mut STATE: *mut backtrace_state = 0 as *mut backtrace_state;\n             static mut LAST_FILENAME: [libc::c_char, ..256] = [0, ..256];\n             if !STATE.is_null() { return STATE }\n-            let selfname = if cfg!(target_os = \"freebsd\") {\n+            let selfname = if cfg!(target_os = \"freebsd\") || \n+                              cfg!(target_os = \"dragonfly\") {\n                 os::self_exe_name()\n             } else {\n                 None"}, {"sha": "1717aeb84300013696e1d92576015a83b7393377", "filename": "src/libstd/rtdeps.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e2f53fad210543be39f6997991abcd403533676/src%2Flibstd%2Frtdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2f53fad210543be39f6997991abcd403533676/src%2Flibstd%2Frtdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frtdeps.rs?ref=2e2f53fad210543be39f6997991abcd403533676", "patch": "@@ -38,6 +38,10 @@ extern {}\n #[link(name = \"pthread\")]\n extern {}\n \n+#[cfg(target_os = \"dragonfly\")]\n+#[link(name = \"pthread\")]\n+extern {}\n+\n #[cfg(target_os = \"macos\")]\n #[link(name = \"System\")]\n extern {}"}, {"sha": "b0296710cfe7f1baede278715c7479166ea0ec22", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e2f53fad210543be39f6997991abcd403533676/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2f53fad210543be39f6997991abcd403533676/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=2e2f53fad210543be39f6997991abcd403533676", "patch": "@@ -11,7 +11,8 @@\n use std::fmt;\n \n #[deriving(PartialEq)]\n-pub enum Os { OsWin32, OsMacos, OsLinux, OsAndroid, OsFreebsd, OsiOS, }\n+pub enum Os { OsWin32, OsMacos, OsLinux, OsAndroid, OsFreebsd, OsiOS, \n+              OsDragonfly }\n \n #[deriving(PartialEq, Eq, Hash, Encodable, Decodable, Clone)]\n pub enum Abi {\n@@ -150,7 +151,8 @@ impl fmt::Show for Os {\n             OsMacos => \"macos\".fmt(f),\n             OsiOS => \"ios\".fmt(f),\n             OsAndroid => \"android\".fmt(f),\n-            OsFreebsd => \"freebsd\".fmt(f)\n+            OsFreebsd => \"freebsd\".fmt(f),\n+            OsDragonfly => \"dragonfly\".fmt(f)\n         }\n     }\n }"}, {"sha": "c82da57c12847af48603e9bbc1660d0a57a4e36f", "filename": "src/rt/arch/x86_64/morestack.S", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e2f53fad210543be39f6997991abcd403533676/src%2Frt%2Farch%2Fx86_64%2Fmorestack.S", "raw_url": "https://github.com/rust-lang/rust/raw/2e2f53fad210543be39f6997991abcd403533676/src%2Frt%2Farch%2Fx86_64%2Fmorestack.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Fmorestack.S?ref=2e2f53fad210543be39f6997991abcd403533676", "patch": "@@ -15,13 +15,13 @@\n \n #if defined(__APPLE__)\n #define EXHAUSTED               _rust_stack_exhausted\n-#elif defined(__linux__) || defined(__FreeBSD__)\n+#elif defined(__linux__) || defined(__FreeBSD__) || defined(__DragonFly__)\n #define EXHAUSTED               rust_stack_exhausted@PLT\n #else\n #define EXHAUSTED               rust_stack_exhausted\n #endif\n \n-#if defined(__linux__) || defined(__FreeBSD__)\n+#if defined(__linux__) || defined(__FreeBSD__) || defined(__DragonFly__)\n \t.hidden MORESTACK\n #else\n #if defined(__APPLE__)"}, {"sha": "89cb27c1f1ae1473aa32a8b166f9df88c7586d46", "filename": "src/rt/rust_builtin.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2e2f53fad210543be39f6997991abcd403533676/src%2Frt%2Frust_builtin.c", "raw_url": "https://github.com/rust-lang/rust/raw/2e2f53fad210543be39f6997991abcd403533676/src%2Frt%2Frust_builtin.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.c?ref=2e2f53fad210543be39f6997991abcd403533676", "patch": "@@ -70,7 +70,7 @@ extern char **environ;\n #endif\n #endif\n \n-#if defined(__FreeBSD__) || defined(__linux__) || defined(__ANDROID__)\n+#if defined(__FreeBSD__) || defined(__linux__) || defined(__ANDROID__) || defined(__DragonFly__)\n extern char **environ;\n #endif\n \n@@ -357,6 +357,13 @@ rust_unset_sigprocmask() {\n \n #endif\n \n+#if defined(__DragonFly__)\n+#include <errno.h>\n+// In DragonFly __error() is an inline function and as such\n+// no symbol exists for it.\n+int *__dfly_error(void) { return __error(); }\n+#endif\n+\n //\n // Local Variables:\n // mode: C++"}]}