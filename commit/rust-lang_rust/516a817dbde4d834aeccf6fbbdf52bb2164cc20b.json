{"sha": "516a817dbde4d834aeccf6fbbdf52bb2164cc20b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxNmE4MTdkYmRlNGQ4MzRhZWNjZjZmYmJkZjUyYmIyMTY0Y2MyMGI=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-11-03T22:38:02Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-11-09T16:10:13Z"}, "message": "Move next_node_id to Resolver\n\nThis doesn't migrate the pretty-printing everybody loops, which will be\ndone in the next few commits.", "tree": {"sha": "a8ec0d39211008a052d4b7c9700ecb12a4082dda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8ec0d39211008a052d4b7c9700ecb12a4082dda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/516a817dbde4d834aeccf6fbbdf52bb2164cc20b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/516a817dbde4d834aeccf6fbbdf52bb2164cc20b", "html_url": "https://github.com/rust-lang/rust/commit/516a817dbde4d834aeccf6fbbdf52bb2164cc20b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/516a817dbde4d834aeccf6fbbdf52bb2164cc20b/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a5027519a4a634baa6cde5b698b907d27fbe6b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a5027519a4a634baa6cde5b698b907d27fbe6b3", "html_url": "https://github.com/rust-lang/rust/commit/5a5027519a4a634baa6cde5b698b907d27fbe6b3"}], "stats": {"total": 128, "additions": 64, "deletions": 64}, "files": [{"sha": "f2d5f043f909dcd60b6d731bf3636e30c005b7b9", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/516a817dbde4d834aeccf6fbbdf52bb2164cc20b/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516a817dbde4d834aeccf6fbbdf52bb2164cc20b/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=516a817dbde4d834aeccf6fbbdf52bb2164cc20b", "patch": "@@ -183,6 +183,8 @@ pub trait Resolver {\n     ) -> (ast::Path, Res<NodeId>);\n \n     fn lint_buffer(&mut self) -> &mut lint::LintBuffer;\n+\n+    fn next_node_id(&mut self) -> NodeId;\n }\n \n type NtToTokenstream = fn(&Nonterminal, &ParseSess, Span) -> TokenStream;\n@@ -672,7 +674,8 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn next_id(&mut self) -> hir::HirId {\n-        self.lower_node_id(self.sess.next_node_id())\n+        let node_id = self.resolver.next_node_id();\n+        self.lower_node_id(node_id)\n     }\n \n     fn lower_res(&mut self, res: Res<NodeId>) -> Res {\n@@ -781,7 +784,7 @@ impl<'a> LoweringContext<'a> {\n         hir_name: ParamName,\n         parent_index: DefIndex,\n     ) -> hir::GenericParam {\n-        let node_id = self.sess.next_node_id();\n+        let node_id = self.resolver.next_node_id();\n \n         // Get the name we'll use to make the def-path. Note\n         // that collisions are ok here and this shouldn't\n@@ -1106,7 +1109,7 @@ impl<'a> LoweringContext<'a> {\n                     // Desugar `AssocTy: Bounds` into `AssocTy = impl Bounds`. We do this by\n                     // constructing the HIR for `impl bounds...` and then lowering that.\n \n-                    let impl_trait_node_id = self.sess.next_node_id();\n+                    let impl_trait_node_id = self.resolver.next_node_id();\n                     let parent_def_index = self.current_hir_id_owner.last().unwrap().0;\n                     self.resolver.definitions().create_def_with_parent(\n                         parent_def_index,\n@@ -1117,9 +1120,10 @@ impl<'a> LoweringContext<'a> {\n                     );\n \n                     self.with_dyn_type_scope(false, |this| {\n+                        let node_id = this.resolver.next_node_id();\n                         let ty = this.lower_ty(\n                             &Ty {\n-                                id: this.sess.next_node_id(),\n+                                id: node_id,\n                                 kind: TyKind::ImplTrait(impl_trait_node_id, bounds.clone()),\n                                 span: constraint.span,\n                             },\n@@ -1586,7 +1590,7 @@ impl<'a> LoweringContext<'a> {\n                         name,\n                     }));\n \n-                    let def_node_id = self.context.sess.next_node_id();\n+                    let def_node_id = self.context.resolver.next_node_id();\n                     let hir_id =\n                         self.context.lower_node_id_with_owner(def_node_id, self.opaque_ty_id);\n                     self.context.resolver.definitions().create_def_with_parent(\n@@ -3234,7 +3238,7 @@ impl<'a> LoweringContext<'a> {\n             Some(id) => (id, \"`'_` cannot be used here\", \"`'_` is a reserved lifetime name\"),\n \n             None => (\n-                self.sess.next_node_id(),\n+                self.resolver.next_node_id(),\n                 \"`&` without an explicit lifetime name cannot be used here\",\n                 \"explicit lifetime name needed here\",\n             ),\n@@ -3271,7 +3275,7 @@ impl<'a> LoweringContext<'a> {\n                     span,\n                     \"expected 'implicit elided lifetime not allowed' error\",\n                 );\n-                let id = self.sess.next_node_id();\n+                let id = self.resolver.next_node_id();\n                 self.new_named_lifetime(id, span, hir::LifetimeName::Error)\n             }\n             // `PassThrough` is the normal case."}, {"sha": "42ce74aedef951517328f8994c3d0e8bc74ddd4f", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/516a817dbde4d834aeccf6fbbdf52bb2164cc20b/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516a817dbde4d834aeccf6fbbdf52bb2164cc20b/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=516a817dbde4d834aeccf6fbbdf52bb2164cc20b", "patch": "@@ -595,7 +595,7 @@ impl LoweringContext<'_> {\n         };\n \n         // `::std::task::Poll::Ready(result) => break result`\n-        let loop_node_id = self.sess.next_node_id();\n+        let loop_node_id = self.resolver.next_node_id();\n         let loop_hir_id = self.lower_node_id(loop_node_id);\n         let ready_arm = {\n             let x_ident = Ident::with_dummy_span(sym::result);"}, {"sha": "4e20f476d85cd70a6c831ce6d386b84a1c662022", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/516a817dbde4d834aeccf6fbbdf52bb2164cc20b/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516a817dbde4d834aeccf6fbbdf52bb2164cc20b/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=516a817dbde4d834aeccf6fbbdf52bb2164cc20b", "patch": "@@ -522,7 +522,7 @@ impl LoweringContext<'_> {\n                     let ident = *ident;\n                     let mut path = path.clone();\n                     for seg in &mut path.segments {\n-                        seg.id = self.sess.next_node_id();\n+                        seg.id = self.resolver.next_node_id();\n                     }\n                     let span = path.span;\n \n@@ -599,7 +599,7 @@ impl LoweringContext<'_> {\n \n                     // Give the segments new node-ids since they are being cloned.\n                     for seg in &mut prefix.segments {\n-                        seg.id = self.sess.next_node_id();\n+                        seg.id = self.resolver.next_node_id();\n                     }\n \n                     // Each `use` import is an item and thus are owners of the"}, {"sha": "bab7ab89ce751b29c0bd04a50de7625168c2e697", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/516a817dbde4d834aeccf6fbbdf52bb2164cc20b/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516a817dbde4d834aeccf6fbbdf52bb2164cc20b/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=516a817dbde4d834aeccf6fbbdf52bb2164cc20b", "patch": "@@ -21,7 +21,6 @@ use errors::{DiagnosticBuilder, DiagnosticId, Applicability};\n use errors::emitter::{Emitter, EmitterWriter};\n use errors::emitter::HumanReadableErrorType;\n use errors::annotate_snippet_emitter_writer::{AnnotateSnippetEmitterWriter};\n-use syntax::ast::{self, NodeId};\n use syntax::edition::Edition;\n use syntax::expand::allocator::AllocatorKind;\n use syntax::feature_gate::{self, AttributeType};\n@@ -38,7 +37,7 @@ use rustc_data_structures::jobserver;\n use ::jobserver::Client;\n \n use std;\n-use std::cell::{self, Cell, RefCell};\n+use std::cell::{self, RefCell};\n use std::env;\n use std::fmt;\n use std::io::Write;\n@@ -127,8 +126,6 @@ pub struct Session {\n     /// Data about code being compiled, gathered during compilation.\n     pub code_stats: Lock<CodeStats>,\n \n-    next_node_id: OneThread<Cell<ast::NodeId>>,\n-\n     /// If `-zfuel=crate=n` is specified, `Some(crate)`.\n     optimization_fuel_crate: Option<String>,\n \n@@ -355,21 +352,6 @@ impl Session {\n         self.diagnostic().span_note_without_error(sp, msg)\n     }\n \n-    pub fn reserve_node_ids(&self, count: usize) -> ast::NodeId {\n-        let id = self.next_node_id.get();\n-\n-        match id.as_usize().checked_add(count) {\n-            Some(next) => {\n-                self.next_node_id.set(ast::NodeId::from_usize(next));\n-            }\n-            None => bug!(\"input too large; ran out of node-IDs!\"),\n-        }\n-\n-        id\n-    }\n-    pub fn next_node_id(&self) -> NodeId {\n-        self.reserve_node_ids(1)\n-    }\n     pub fn diagnostic(&self) -> &errors::Handler {\n         &self.parse_sess.span_diagnostic\n     }\n@@ -1187,7 +1169,6 @@ fn build_session_(\n         recursion_limit: Once::new(),\n         type_length_limit: Once::new(),\n         const_eval_stack_frame_limit: 100,\n-        next_node_id: OneThread::new(Cell::new(NodeId::from_u32(1))),\n         allocator_kind: Once::new(),\n         injected_panic_runtime: Once::new(),\n         imported_macro_spans: OneThread::new(RefCell::new(FxHashMap::default())),"}, {"sha": "0a803187d49a8d8f27c21d5ab996460f81c04fe7", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/516a817dbde4d834aeccf6fbbdf52bb2164cc20b/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/516a817dbde4d834aeccf6fbbdf52bb2164cc20b/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=516a817dbde4d834aeccf6fbbdf52bb2164cc20b", "patch": "@@ -27,5 +27,6 @@ rustc_save_analysis = { path = \"../librustc_save_analysis\" }\n rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n rustc_interface = { path = \"../librustc_interface\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n+rustc_resolve = { path = \"../librustc_resolve\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "478868579c7305a7d4ebdbfa19869468e716915a", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/516a817dbde4d834aeccf6fbbdf52bb2164cc20b/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516a817dbde4d834aeccf6fbbdf52bb2164cc20b/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=516a817dbde4d834aeccf6fbbdf52bb2164cc20b", "patch": "@@ -291,7 +291,6 @@ pub fn run_compiler(\n \n         if let Some((ppm, opt_uii)) = pretty_info {\n             if ppm.needs_ast_map(&opt_uii) {\n-                pretty::visit_crate(sess, &mut compiler.parse()?.peek_mut(), ppm);\n                 compiler.global_ctxt()?.peek_mut().enter(|tcx| {\n                     let expanded_crate = compiler.expansion()?.take().0;\n                     pretty::print_after_hir_lowering(\n@@ -305,8 +304,7 @@ pub fn run_compiler(\n                     Ok(())\n                 })?;\n             } else {\n-                let mut krate = compiler.parse()?.take();\n-                pretty::visit_crate(sess, &mut krate, ppm);\n+                let krate = compiler.parse()?.take();\n                 pretty::print_after_parsing(\n                     sess,\n                     &compiler.input(),"}, {"sha": "42941f25061ab54261800f56ec0f1e89758a5055", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/516a817dbde4d834aeccf6fbbdf52bb2164cc20b/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516a817dbde4d834aeccf6fbbdf52bb2164cc20b/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=516a817dbde4d834aeccf6fbbdf52bb2164cc20b", "patch": "@@ -8,11 +8,9 @@ use rustc::session::Session;\n use rustc::session::config::Input;\n use rustc::ty::{self, TyCtxt};\n use rustc::util::common::ErrorReported;\n-use rustc_interface::util::ReplaceBodyWithLoop;\n use rustc_mir::util::{write_mir_pretty, write_mir_graphviz};\n \n use syntax::ast;\n-use syntax::mut_visit::MutVisitor;\n use syntax::print::{pprust};\n use syntax_pos::FileName;\n \n@@ -572,12 +570,6 @@ impl UserIdentifiedItem {\n     }\n }\n \n-pub fn visit_crate(sess: &Session, krate: &mut ast::Crate, ppm: PpMode) {\n-    if let PpmSource(PpmEveryBodyLoops) = ppm {\n-        ReplaceBodyWithLoop::new(sess).visit_crate(krate);\n-    }\n-}\n-\n fn get_source(input: &Input, sess: &Session) -> (String, FileName) {\n     let src_name = source_name(input);\n     let src = String::clone(&sess.source_map()"}, {"sha": "048b5cff2bf010d7ac051ea403364a14c2a86176", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/516a817dbde4d834aeccf6fbbdf52bb2164cc20b/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516a817dbde4d834aeccf6fbbdf52bb2164cc20b/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=516a817dbde4d834aeccf6fbbdf52bb2164cc20b", "patch": "@@ -395,7 +395,7 @@ fn configure_and_expand_inner<'a>(\n     // If we're actually rustdoc then there's no need to actually compile\n     // anything, so switch everything to just looping\n     if sess.opts.actually_rustdoc {\n-        util::ReplaceBodyWithLoop::new(sess).visit_crate(&mut krate);\n+        util::ReplaceBodyWithLoop::new(&mut resolver).visit_crate(&mut krate);\n     }\n \n     let has_proc_macro_decls = time(sess, \"AST validation\", || {"}, {"sha": "0c08f65d11d95f97f29fea02a534c0c17a85fea0", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/516a817dbde4d834aeccf6fbbdf52bb2164cc20b/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516a817dbde4d834aeccf6fbbdf52bb2164cc20b/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=516a817dbde4d834aeccf6fbbdf52bb2164cc20b", "patch": "@@ -18,7 +18,7 @@ use rustc_mir;\n use rustc_passes;\n use rustc_plugin;\n use rustc_privacy;\n-use rustc_resolve;\n+use rustc_resolve::{self, Resolver};\n use rustc_typeck;\n use std::env;\n use std::env::consts::{DLL_PREFIX, DLL_SUFFIX};\n@@ -715,18 +715,18 @@ pub fn build_output_filenames(\n //    ambitious form of the closed RFC #1637. See also [#34511].\n //\n // [#34511]: https://github.com/rust-lang/rust/issues/34511#issuecomment-322340401\n-pub struct ReplaceBodyWithLoop<'a> {\n+pub struct ReplaceBodyWithLoop<'a, 'b> {\n     within_static_or_const: bool,\n     nested_blocks: Option<Vec<ast::Block>>,\n-    sess: &'a Session,\n+    resolver: &'a mut Resolver<'b>,\n }\n \n-impl<'a> ReplaceBodyWithLoop<'a> {\n-    pub fn new(sess: &'a Session) -> ReplaceBodyWithLoop<'a> {\n+impl<'a, 'b> ReplaceBodyWithLoop<'a, 'b> {\n+    pub fn new(resolver: &'a mut Resolver<'b>) -> ReplaceBodyWithLoop<'a, 'b> {\n         ReplaceBodyWithLoop {\n             within_static_or_const: false,\n             nested_blocks: None,\n-            sess\n+            resolver,\n         }\n     }\n \n@@ -788,11 +788,12 @@ impl<'a> ReplaceBodyWithLoop<'a> {\n     }\n \n     fn is_sig_const(sig: &ast::FnSig) -> bool {\n-        sig.header.constness.node == ast::Constness::Const || Self::should_ignore_fn(&sig.decl)\n+        sig.header.constness.node == ast::Constness::Const ||\n+            ReplaceBodyWithLoop::should_ignore_fn(&sig.decl)\n     }\n }\n \n-impl<'a> MutVisitor for ReplaceBodyWithLoop<'a> {\n+impl<'a> MutVisitor for ReplaceBodyWithLoop<'a, '_> {\n     fn visit_item_kind(&mut self, i: &mut ast::ItemKind) {\n         let is_const = match i {\n             ast::ItemKind::Static(..) | ast::ItemKind::Const(..) => true,\n@@ -827,40 +828,40 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a> {\n     fn visit_block(&mut self, b: &mut P<ast::Block>) {\n         fn stmt_to_block(rules: ast::BlockCheckMode,\n                          s: Option<ast::Stmt>,\n-                         sess: &Session) -> ast::Block {\n+                         resolver: &mut Resolver<'_>) -> ast::Block {\n             ast::Block {\n                 stmts: s.into_iter().collect(),\n                 rules,\n-                id: sess.next_node_id(),\n+                id: resolver.next_node_id(),\n                 span: syntax_pos::DUMMY_SP,\n             }\n         }\n \n-        fn block_to_stmt(b: ast::Block, sess: &Session) -> ast::Stmt {\n+        fn block_to_stmt(b: ast::Block, resolver: &mut Resolver<'_>) -> ast::Stmt {\n             let expr = P(ast::Expr {\n-                id: sess.next_node_id(),\n+                id: resolver.next_node_id(),\n                 kind: ast::ExprKind::Block(P(b), None),\n                 span: syntax_pos::DUMMY_SP,\n                 attrs: ThinVec::new(),\n             });\n \n             ast::Stmt {\n-                id: sess.next_node_id(),\n+                id: resolver.next_node_id(),\n                 kind: ast::StmtKind::Expr(expr),\n                 span: syntax_pos::DUMMY_SP,\n             }\n         }\n \n-        let empty_block = stmt_to_block(BlockCheckMode::Default, None, self.sess);\n+        let empty_block = stmt_to_block(BlockCheckMode::Default, None, self.resolver);\n         let loop_expr = P(ast::Expr {\n             kind: ast::ExprKind::Loop(P(empty_block), None),\n-            id: self.sess.next_node_id(),\n+            id: self.resolver.next_node_id(),\n             span: syntax_pos::DUMMY_SP,\n                 attrs: ThinVec::new(),\n         });\n \n         let loop_stmt = ast::Stmt {\n-            id: self.sess.next_node_id(),\n+            id: self.resolver.next_node_id(),\n             span: syntax_pos::DUMMY_SP,\n             kind: ast::StmtKind::Expr(loop_expr),\n         };\n@@ -878,7 +879,7 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a> {\n                     // we put a Some in there earlier with that replace(), so this is valid\n                     let new_blocks = self.nested_blocks.take().unwrap();\n                     self.nested_blocks = old_blocks;\n-                    stmts.extend(new_blocks.into_iter().map(|b| block_to_stmt(b, &self.sess)));\n+                    stmts.extend(new_blocks.into_iter().map(|b| block_to_stmt(b, self.resolver)));\n                 }\n \n                 let mut new_block = ast::Block {\n@@ -892,7 +893,7 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a> {\n                         old_blocks.push(new_block);\n                     }\n \n-                    stmt_to_block(b.rules, Some(loop_stmt), self.sess)\n+                    stmt_to_block(b.rules, Some(loop_stmt), &mut self.resolver)\n                 } else {\n                     //push `loop {}` onto the end of our fresh block and yield that\n                     new_block.stmts.push(loop_stmt);"}, {"sha": "1ce356d48913dd88053ba5f1b936cf5baae84f71", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/516a817dbde4d834aeccf6fbbdf52bb2164cc20b/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516a817dbde4d834aeccf6fbbdf52bb2164cc20b/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=516a817dbde4d834aeccf6fbbdf52bb2164cc20b", "patch": "@@ -449,7 +449,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                                     name: kw::PathRoot,\n                                     span: source.ident.span,\n                                 },\n-                                id: Some(self.r.session.next_node_id()),\n+                                id: Some(self.r.next_node_id()),\n                             });\n                             source.ident.name = crate_name;\n                         }"}, {"sha": "94b4418c16a2a99a25998a1469c5883075f18cc8", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/516a817dbde4d834aeccf6fbbdf52bb2164cc20b/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516a817dbde4d834aeccf6fbbdf52bb2164cc20b/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=516a817dbde4d834aeccf6fbbdf52bb2164cc20b", "patch": "@@ -961,6 +961,8 @@ pub struct Resolver<'a> {\n     variant_vis: DefIdMap<ty::Visibility>,\n \n     lint_buffer: lint::LintBuffer,\n+\n+    next_node_id: NodeId,\n }\n \n /// Nothing really interesting here; it just provides memory for the rest of the crate.\n@@ -1078,6 +1080,10 @@ impl<'a> hir::lowering::Resolver for Resolver<'a> {\n     fn lint_buffer(&mut self) -> &mut lint::LintBuffer {\n         &mut self.lint_buffer\n     }\n+\n+    fn next_node_id(&mut self) -> NodeId {\n+        self.next_node_id()\n+    }\n }\n \n impl<'a> Resolver<'a> {\n@@ -1226,7 +1232,24 @@ impl<'a> Resolver<'a> {\n                     .collect(),\n             variant_vis: Default::default(),\n             lint_buffer: lint::LintBuffer::default(),\n+            next_node_id: NodeId::from_u32(1),\n+        }\n+    }\n+\n+    pub fn reserve_node_ids(&mut self, count: usize) -> ast::NodeId {\n+        let id = self.next_node_id;\n+\n+        match id.as_usize().checked_add(count) {\n+            Some(next) => {\n+                self.next_node_id = ast::NodeId::from_usize(next);\n+            }\n+            None => panic!(\"input too large; ran out of node-IDs!\"),\n         }\n+\n+        id\n+    }\n+    pub fn next_node_id(&mut self) -> NodeId {\n+        self.reserve_node_ids(1)\n     }\n \n     pub fn lint_buffer(&mut self) -> &mut lint::LintBuffer {\n@@ -2827,9 +2850,9 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n-    fn new_ast_path_segment(&self, ident: Ident) -> ast::PathSegment {\n+    fn new_ast_path_segment(&mut self, ident: Ident) -> ast::PathSegment {\n         let mut seg = ast::PathSegment::from_ident(ident);\n-        seg.id = self.session.next_node_id();\n+        seg.id = self.next_node_id();\n         seg\n     }\n "}, {"sha": "cc811d3b59a41c4bec4fdd482857d4e3ef6ec169", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/516a817dbde4d834aeccf6fbbdf52bb2164cc20b/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516a817dbde4d834aeccf6fbbdf52bb2164cc20b/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=516a817dbde4d834aeccf6fbbdf52bb2164cc20b", "patch": "@@ -95,7 +95,7 @@ fn fast_print_path(path: &ast::Path) -> Symbol {\n \n impl<'a> base::Resolver for Resolver<'a> {\n     fn next_node_id(&mut self) -> NodeId {\n-        self.session.next_node_id()\n+        self.next_node_id()\n     }\n \n     fn resolve_dollar_crates(&mut self) {"}]}