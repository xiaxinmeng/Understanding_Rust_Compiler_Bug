{"sha": "b71f6df5dd74804682a500ca7eb251e34e58b1cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3MWY2ZGY1ZGQ3NDgwNDY4MmE1MDBjYTdlYjI1MWUzNGU1OGIxY2I=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-06-26T09:35:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-06-26T09:35:37Z"}, "message": "Rollup merge of #51730 - MajorBreakfast:pin-get-mut-unchecked, r=withoutboats\n\nNew safe associated functions for PinMut\n\n- Add safe `get_mut` and `map`\n- Rename unsafe equivalents to `get_mut_unchecked` and `map_unchecked`\n\nThe discussion about this starts [in this comment](https://github.com/rust-lang/rust/issues/49150#issuecomment-399604573) on the tracking issue.", "tree": {"sha": "b7f5b03a6c2ec0f17c8500aaa7aa42a7f9327e13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7f5b03a6c2ec0f17c8500aaa7aa42a7f9327e13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b71f6df5dd74804682a500ca7eb251e34e58b1cb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbMgjpCRBK7hj4Ov3rIwAAdHIIAFKX/eUk2AcqrJ/dtyCSZAhR\n7mCKXO6rb864CdMoyQrUTS/9IMKojqgmuCJdNrPlBsskeOLLFU7aurVgTayH/hvY\nYqKm8Alg4YUo88A8oVJIViwrVJ5OgnAwqic/3FpuTXX8GXjD1LyxRfF2iiQm6FEv\nnJASZT7jcyoIJg5uwCP1OdxsMJ0rXVLlpLNiLY/9PpWBJmQh80OU17WrR7/zMd3m\nsSQXi2wZgCtJtVBZsfllk45SIpULGC5uM7Oq0d3WXQiFx6NGaMIdPSBYWEBtgZKw\nyvzkX+5PugogsrI3P7+6ep/MwOiY3WjAjCpONo8a6y7OcIYvuj4TTW9gFQ/kZrg=\n=ly3w\n-----END PGP SIGNATURE-----\n", "payload": "tree b7f5b03a6c2ec0f17c8500aaa7aa42a7f9327e13\nparent 1215965a12f94b0e304b41ebf71d17f988f42f96\nparent 3bcb85ee658e7a5362f5e381c337f07381f916dc\nauthor Pietro Albini <pietro@pietroalbini.org> 1530005737 +0200\ncommitter GitHub <noreply@github.com> 1530005737 +0200\n\nRollup merge of #51730 - MajorBreakfast:pin-get-mut-unchecked, r=withoutboats\n\nNew safe associated functions for PinMut\n\n- Add safe `get_mut` and `map`\n- Rename unsafe equivalents to `get_mut_unchecked` and `map_unchecked`\n\nThe discussion about this starts [in this comment](https://github.com/rust-lang/rust/issues/49150#issuecomment-399604573) on the tracking issue.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b71f6df5dd74804682a500ca7eb251e34e58b1cb", "html_url": "https://github.com/rust-lang/rust/commit/b71f6df5dd74804682a500ca7eb251e34e58b1cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b71f6df5dd74804682a500ca7eb251e34e58b1cb/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1215965a12f94b0e304b41ebf71d17f988f42f96", "url": "https://api.github.com/repos/rust-lang/rust/commits/1215965a12f94b0e304b41ebf71d17f988f42f96", "html_url": "https://github.com/rust-lang/rust/commit/1215965a12f94b0e304b41ebf71d17f988f42f96"}, {"sha": "3bcb85ee658e7a5362f5e381c337f07381f916dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bcb85ee658e7a5362f5e381c337f07381f916dc", "html_url": "https://github.com/rust-lang/rust/commit/3bcb85ee658e7a5362f5e381c337f07381f916dc"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "08bd9289ab48758559b14030151c36e343fbb078", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b71f6df5dd74804682a500ca7eb251e34e58b1cb/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b71f6df5dd74804682a500ca7eb251e34e58b1cb/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=b71f6df5dd74804682a500ca7eb251e34e58b1cb", "patch": "@@ -1119,6 +1119,12 @@ impl<'a, T: ?Sized + Unpin> PinMut<'a, T> {\n     pub fn new(reference: &'a mut T) -> PinMut<'a, T> {\n         PinMut { inner: reference }\n     }\n+\n+    /// Get a mutable reference to the data inside of this `PinMut`.\n+    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    pub fn get_mut(this: PinMut<'a, T>) -> &'a mut T {\n+        this.inner\n+    }\n }\n \n \n@@ -1150,21 +1156,21 @@ impl<'a, T: ?Sized> PinMut<'a, T> {\n     /// the data out of the mutable reference you receive when you call this\n     /// function.\n     #[unstable(feature = \"pin\", issue = \"49150\")]\n-    pub unsafe fn get_mut(this: PinMut<'a, T>) -> &'a mut T {\n+    pub unsafe fn get_mut_unchecked(this: PinMut<'a, T>) -> &'a mut T {\n         this.inner\n     }\n \n     /// Construct a new pin by mapping the interior value.\n     ///\n-    /// For example, if you  wanted to get a `PinMut` of a field of something, you\n-    /// could use this to get access to that field in one line of code.\n+    /// For example, if you  wanted to get a `PinMut` of a field of something,\n+    /// you could use this to get access to that field in one line of code.\n     ///\n     /// This function is unsafe. You must guarantee that the data you return\n     /// will not move so long as the argument value does not move (for example,\n     /// because it is one of the fields of that value), and also that you do\n     /// not move out of the argument you receive to the interior function.\n     #[unstable(feature = \"pin\", issue = \"49150\")]\n-    pub unsafe fn map<U, F>(this: PinMut<'a, T>, f: F) -> PinMut<'a, U> where\n+    pub unsafe fn map_unchecked<U, F>(this: PinMut<'a, T>, f: F) -> PinMut<'a, U> where\n         F: FnOnce(&mut T) -> &mut U\n     {\n         PinMut { inner: f(this.inner) }"}, {"sha": "20bc173f7e1548043c5c28bebfb57649e5518472", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b71f6df5dd74804682a500ca7eb251e34e58b1cb/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b71f6df5dd74804682a500ca7eb251e34e58b1cb/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=b71f6df5dd74804682a500ca7eb251e34e58b1cb", "patch": "@@ -275,7 +275,7 @@ impl<T> Option<T> {\n     #[unstable(feature = \"pin\", issue = \"49150\")]\n     pub fn as_pin_mut<'a>(self: PinMut<'a, Self>) -> Option<PinMut<'a, T>> {\n         unsafe {\n-            PinMut::get_mut(self).as_mut().map(|x| PinMut::new_unchecked(x))\n+            PinMut::get_mut_unchecked(self).as_mut().map(|x| PinMut::new_unchecked(x))\n         }\n     }\n "}, {"sha": "c1cc36f3b419a2364eeef8c4df4d608e075d1a06", "filename": "src/libstd/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b71f6df5dd74804682a500ca7eb251e34e58b1cb/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b71f6df5dd74804682a500ca7eb251e34e58b1cb/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=b71f6df5dd74804682a500ca7eb251e34e58b1cb", "patch": "@@ -43,7 +43,7 @@ impl<T: Generator<Yield = ()>> !Unpin for GenFuture<T> {}\n impl<T: Generator<Yield = ()>> Future for GenFuture<T> {\n     type Output = T::Return;\n     fn poll(self: PinMut<Self>, cx: &mut task::Context) -> Poll<Self::Output> {\n-        set_task_cx(cx, || match unsafe { PinMut::get_mut(self).0.resume() } {\n+        set_task_cx(cx, || match unsafe { PinMut::get_mut_unchecked(self).0.resume() } {\n             GeneratorState::Yielded(()) => Poll::Pending,\n             GeneratorState::Complete(x) => Poll::Ready(x),\n         })"}, {"sha": "451420ae88ad8179f1ec1f37efaad1a458bf13fb", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b71f6df5dd74804682a500ca7eb251e34e58b1cb/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b71f6df5dd74804682a500ca7eb251e34e58b1cb/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=b71f6df5dd74804682a500ca7eb251e34e58b1cb", "patch": "@@ -327,14 +327,9 @@ impl<T: fmt::Debug> fmt::Debug for AssertUnwindSafe<T> {\n impl<'a, F: Future> Future for AssertUnwindSafe<F> {\n     type Output = F::Output;\n \n-    fn poll(mut self: PinMut<Self>, cx: &mut task::Context) -> Poll<Self::Output> {\n-        unsafe {\n-            let pinned_field = PinMut::new_unchecked(\n-                &mut PinMut::get_mut(self.reborrow()).0\n-            );\n-\n-            pinned_field.poll(cx)\n-        }\n+    fn poll(self: PinMut<Self>, cx: &mut task::Context) -> Poll<Self::Output> {\n+        let pinned_field = unsafe { PinMut::map_unchecked(self, |x| &mut x.0) };\n+        pinned_field.poll(cx)\n     }\n }\n "}]}