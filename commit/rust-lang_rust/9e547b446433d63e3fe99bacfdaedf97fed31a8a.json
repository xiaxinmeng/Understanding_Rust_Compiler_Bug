{"sha": "9e547b446433d63e3fe99bacfdaedf97fed31a8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNTQ3YjQ0NjQzM2Q2M2UzZmU5OWJhY2ZkYWVkZjk3ZmVkMzFhOGE=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-06-07T21:12:43Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-06-07T22:10:12Z"}, "message": "Differentiate different defining uses of taits when they reference distinct generic parameters", "tree": {"sha": "2df6a2063ec89a78e3b18621074d988777279271", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2df6a2063ec89a78e3b18621074d988777279271"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e547b446433d63e3fe99bacfdaedf97fed31a8a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmC+mUUACgkQgTGiTgx5\n768URw/+PH9nIEZy/MCgJMzBNcPH6zLJ6iRqDV3Bptj2scfw8PhIS2g/OcMDaDV7\nVuWUzo/KdxzFIPDEgHy8DD4tdQ7m/aGo7QM65a2DdbGYiInGbmho6B9caqrdqlqK\nnFbkTrMLivyyAR7AQPpa0zdSsdkYh6CY4YtPAKmNxcLxwezBfXgexzZpdyEsy5+h\nLKxpgHMiATdE2wTMuGLzm7xfvT30CA5+fUJuKxgiF4yuedi+/X1EVcbypU8qbyuL\n3eQa+nOTRJpLy2JyTcy4F81EdKI+F2q8jD5d0IXsQiXTHKUFt3GknnJqC0QpaYWn\nb8N2ta7prqAmDNtldT9w5rBdbpmEREVpVSGQO6WgiFh7gJjhfYw/Vb4md9z9QnHH\nRyWrBJ3xpChMjNo1U7QqEPZYJG1b2Y5WV1oGDazgTn9cDINWFx//toej1WfqqIwN\nyhOCBxJkQAMg1duVA/pH77f/jMphNS7hUMEGbRkwtD1KQVQISC3fu7bZ55bU5Wwa\npR4ssOZZuHOhKJpSqarwKCsz1fwmIxxm15uVVNLrEgr3HjDA7T/Pt+hoCOGt4oa3\ndQt6ysm66imrsEaGV5b8lzS32mQEMa/CB/a6UyDWcnDM/7Zp0vXqPHsM4BODfbpS\ncCw3jvE5afpjxlmiJxX8ocENCgZcCecwb2WL37DZNVuduKFBSeI=\n=iCqI\n-----END PGP SIGNATURE-----", "payload": "tree 2df6a2063ec89a78e3b18621074d988777279271\nparent e3863735144095312ab6486191fc8666d7c54e4b\nauthor Santiago Pastorino <spastorino@gmail.com> 1623100363 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1623103812 -0300\n\nDifferentiate different defining uses of taits when they reference distinct generic parameters\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e547b446433d63e3fe99bacfdaedf97fed31a8a", "html_url": "https://github.com/rust-lang/rust/commit/9e547b446433d63e3fe99bacfdaedf97fed31a8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e547b446433d63e3fe99bacfdaedf97fed31a8a/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3863735144095312ab6486191fc8666d7c54e4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3863735144095312ab6486191fc8666d7c54e4b", "html_url": "https://github.com/rust-lang/rust/commit/e3863735144095312ab6486191fc8666d7c54e4b"}], "stats": {"total": 48, "additions": 38, "deletions": 10}, "files": [{"sha": "89ec211f2627bcadf4ec47f8eb14e5095e71aa2b", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9e547b446433d63e3fe99bacfdaedf97fed31a8a/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e547b446433d63e3fe99bacfdaedf97fed31a8a/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=9e547b446433d63e3fe99bacfdaedf97fed31a8a", "patch": "@@ -11,7 +11,7 @@ use rustc_infer::infer::free_regions::FreeRegionRelations;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::{self, InferCtxt, InferOk};\n use rustc_middle::ty::fold::{BottomUpFolder, TypeFoldable, TypeFolder, TypeVisitor};\n-use rustc_middle::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, Subst, SubstsRef};\n+use rustc_middle::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, Subst};\n use rustc_middle::ty::{self, OpaqueTypeKey, Ty, TyCtxt};\n use rustc_span::Span;\n \n@@ -1007,7 +1007,9 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n                             ),\n                         };\n                         if in_definition_scope {\n-                            return self.fold_opaque_ty(ty, def_id.to_def_id(), substs, origin);\n+                            let opaque_type_key =\n+                                OpaqueTypeKey { def_id: def_id.to_def_id(), substs };\n+                            return self.fold_opaque_ty(ty, opaque_type_key, origin);\n                         }\n \n                         debug!(\n@@ -1029,23 +1031,18 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n     fn fold_opaque_ty(\n         &mut self,\n         ty: Ty<'tcx>,\n-        def_id: DefId,\n-        substs: SubstsRef<'tcx>,\n+        opaque_type_key: OpaqueTypeKey<'tcx>,\n         origin: hir::OpaqueTyOrigin,\n     ) -> Ty<'tcx> {\n         let infcx = self.infcx;\n         let tcx = infcx.tcx;\n+        let OpaqueTypeKey { def_id, substs } = opaque_type_key;\n \n         debug!(\"instantiate_opaque_types: Opaque(def_id={:?}, substs={:?})\", def_id, substs);\n \n         // Use the same type variable if the exact same opaque type appears more\n         // than once in the return type (e.g., if it's passed to a type alias).\n-        if let Some(opaque_defn) = self\n-            .opaque_types\n-            .iter()\n-            .find(|(opaque_type_key, _)| opaque_type_key.def_id == def_id)\n-            .map(|(_, opaque_defn)| opaque_defn)\n-        {\n+        if let Some(opaque_defn) = self.opaque_types.get(&opaque_type_key) {\n             debug!(\"instantiate_opaque_types: returning concrete ty {:?}\", opaque_defn.concrete_ty);\n             return opaque_defn.concrete_ty;\n         }"}, {"sha": "67351e2015993d48aacd01a33b5440abef2ba95c", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9e547b446433d63e3fe99bacfdaedf97fed31a8a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e547b446433d63e3fe99bacfdaedf97fed31a8a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn.rs?ref=9e547b446433d63e3fe99bacfdaedf97fed31a8a", "patch": "@@ -0,0 +1,16 @@\n+// https://github.com/rust-lang/rust/issues/73481\n+// This test used to cause unsoundness, since one of the two possible\n+// resolutions was chosen at random instead of erroring due to conflicts.\n+\n+#![feature(min_type_alias_impl_trait)]\n+\n+type X<A, B> = impl Into<&'static A>;\n+//~^ ERROR the trait bound `&'static B: From<&A>` is not satisfied\n+\n+fn f<A, B: 'static>(a: &'static A, b: B) -> (X<A, B>, X<B, A>) {\n+    (a, a)\n+}\n+\n+fn main() {\n+    println!(\"{}\", <X<_, _> as Into<&String>>::into(f(&[1isize, 2, 3], String::new()).1));\n+}"}, {"sha": "731c6e2788dde5e6b8206e90ef1caa0548013516", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9e547b446433d63e3fe99bacfdaedf97fed31a8a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e547b446433d63e3fe99bacfdaedf97fed31a8a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn.stderr?ref=9e547b446433d63e3fe99bacfdaedf97fed31a8a", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: the trait bound `&'static B: From<&A>` is not satisfied\n+  --> $DIR/multiple-def-uses-in-one-fn.rs:7:16\n+   |\n+LL | type X<A, B> = impl Into<&'static A>;\n+   |                ^^^^^^^^^^^^^^^^^^^^^ the trait `From<&A>` is not implemented for `&'static B`\n+   |\n+   = note: required because of the requirements on the impl of `Into<&'static B>` for `&A`\n+help: consider introducing a `where` bound, but there might be an alternative better way to express this requirement\n+   |\n+LL | fn f<A, B: 'static>(a: &'static A, b: B) -> (X<A, B>, X<B, A>) where &'static B: From<&A> {\n+   |                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}