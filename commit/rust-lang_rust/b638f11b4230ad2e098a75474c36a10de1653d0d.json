{"sha": "b638f11b4230ad2e098a75474c36a10de1653d0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2MzhmMTFiNDIzMGFkMmUwOThhNzU0NzRjMzZhMTBkZTE2NTNkMGQ=", "commit": {"author": {"name": "Anthony Ramine", "email": "n.oxyde@gmail.com", "date": "2018-05-11T09:26:51Z"}, "committer": {"name": "Anthony Ramine", "email": "n.oxyde@gmail.com", "date": "2018-05-13T08:36:28Z"}, "message": "Introduce OperandValue::volatile_store and use it in the intrinsics\n\nFixes #50371.", "tree": {"sha": "6e38d198fde8c8f42253ce659e386d5af2a188c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e38d198fde8c8f42253ce659e386d5af2a188c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b638f11b4230ad2e098a75474c36a10de1653d0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b638f11b4230ad2e098a75474c36a10de1653d0d", "html_url": "https://github.com/rust-lang/rust/commit/b638f11b4230ad2e098a75474c36a10de1653d0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b638f11b4230ad2e098a75474c36a10de1653d0d/comments", "author": {"login": "nox", "id": 123095, "node_id": "MDQ6VXNlcjEyMzA5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/123095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nox", "html_url": "https://github.com/nox", "followers_url": "https://api.github.com/users/nox/followers", "following_url": "https://api.github.com/users/nox/following{/other_user}", "gists_url": "https://api.github.com/users/nox/gists{/gist_id}", "starred_url": "https://api.github.com/users/nox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nox/subscriptions", "organizations_url": "https://api.github.com/users/nox/orgs", "repos_url": "https://api.github.com/users/nox/repos", "events_url": "https://api.github.com/users/nox/events{/privacy}", "received_events_url": "https://api.github.com/users/nox/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nox", "id": 123095, "node_id": "MDQ6VXNlcjEyMzA5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/123095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nox", "html_url": "https://github.com/nox", "followers_url": "https://api.github.com/users/nox/followers", "following_url": "https://api.github.com/users/nox/following{/other_user}", "gists_url": "https://api.github.com/users/nox/gists{/gist_id}", "starred_url": "https://api.github.com/users/nox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nox/subscriptions", "organizations_url": "https://api.github.com/users/nox/orgs", "repos_url": "https://api.github.com/users/nox/repos", "events_url": "https://api.github.com/users/nox/events{/privacy}", "received_events_url": "https://api.github.com/users/nox/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fc409ed0938cd2f501642abcaa675977fa5035a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fc409ed0938cd2f501642abcaa675977fa5035a", "html_url": "https://github.com/rust-lang/rust/commit/6fc409ed0938cd2f501642abcaa675977fa5035a"}], "stats": {"total": 63, "additions": 35, "deletions": 28}, "files": [{"sha": "c80d989e3cb18b74f73bffa4f05afc97f307e44a", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b638f11b4230ad2e098a75474c36a10de1653d0d/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b638f11b4230ad2e098a75474c36a10de1653d0d/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=b638f11b4230ad2e098a75474c36a10de1653d0d", "patch": "@@ -220,7 +220,8 @@ impl<'a, 'tcx> ArgTypeExt<'a, 'tcx> for ArgType<'tcx, Ty<'tcx>> {\n                                   bx.pointercast(dst.llval, Type::i8p(cx)),\n                                   bx.pointercast(llscratch, Type::i8p(cx)),\n                                   C_usize(cx, self.layout.size.bytes()),\n-                                  self.layout.align.min(scratch_align));\n+                                  self.layout.align.min(scratch_align),\n+                                  false);\n \n                 bx.lifetime_end(llscratch, scratch_size);\n             }"}, {"sha": "65dce5f3ffbce15ad91613e0f6637d8ad7cdf106", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b638f11b4230ad2e098a75474c36a10de1653d0d/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b638f11b4230ad2e098a75474c36a10de1653d0d/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=b638f11b4230ad2e098a75474c36a10de1653d0d", "patch": "@@ -320,7 +320,7 @@ pub fn coerce_unsized_into<'a, 'tcx>(bx: &Builder<'a, 'tcx>,\n \n                 if src_f.layout.ty == dst_f.layout.ty {\n                     memcpy_ty(bx, dst_f.llval, src_f.llval, src_f.layout,\n-                        src_f.align.min(dst_f.align));\n+                              src_f.align.min(dst_f.align), false);\n                 } else {\n                     coerce_unsized_into(bx, src_f, dst_f);\n                 }\n@@ -408,7 +408,8 @@ pub fn call_memcpy(bx: &Builder,\n                    dst: ValueRef,\n                    src: ValueRef,\n                    n_bytes: ValueRef,\n-                   align: Align) {\n+                   align: Align,\n+                   volatile: bool) {\n     let cx = bx.cx;\n     let ptr_width = &cx.sess().target.target.target_pointer_width;\n     let key = format!(\"llvm.memcpy.p0i8.p0i8.i{}\", ptr_width);\n@@ -417,7 +418,7 @@ pub fn call_memcpy(bx: &Builder,\n     let dst_ptr = bx.pointercast(dst, Type::i8p(cx));\n     let size = bx.intcast(n_bytes, cx.isize_ty, false);\n     let align = C_i32(cx, align.abi() as i32);\n-    let volatile = C_bool(cx, false);\n+    let volatile = C_bool(cx, volatile);\n     bx.call(memcpy, &[dst_ptr, src_ptr, size, align, volatile], None);\n }\n \n@@ -427,13 +428,14 @@ pub fn memcpy_ty<'a, 'tcx>(\n     src: ValueRef,\n     layout: TyLayout<'tcx>,\n     align: Align,\n+    volatile: bool,\n ) {\n     let size = layout.size.bytes();\n     if size == 0 {\n         return;\n     }\n \n-    call_memcpy(bx, dst, src, C_usize(bx.cx, size), align);\n+    call_memcpy(bx, dst, src, C_usize(bx.cx, size), align, volatile);\n }\n \n pub fn call_memset<'a, 'tcx>(bx: &Builder<'a, 'tcx>,"}, {"sha": "49bcf9b88a065fccbe2b860dfe25b2680e1e1060", "filename": "src/librustc_trans/builder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b638f11b4230ad2e098a75474c36a10de1653d0d/src%2Flibrustc_trans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b638f11b4230ad2e098a75474c36a10de1653d0d/src%2Flibrustc_trans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbuilder.rs?ref=b638f11b4230ad2e098a75474c36a10de1653d0d", "patch": "@@ -590,13 +590,14 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n     }\n \n-    pub fn volatile_store(&self, val: ValueRef, ptr: ValueRef) -> ValueRef {\n+    pub fn volatile_store(&self, val: ValueRef, ptr: ValueRef, align: Align) -> ValueRef {\n         debug!(\"Store {:?} -> {:?}\", Value(val), Value(ptr));\n         assert!(!self.llbuilder.is_null());\n         self.count_insn(\"store.volatile\");\n         let ptr = self.check_store(val, ptr);\n         unsafe {\n             let insn = llvm::LLVMBuildStore(self.llbuilder, val, ptr);\n+            llvm::LLVMSetAlignment(insn, align.abi() as c_uint);\n             llvm::LLVMSetVolatile(insn, llvm::True);\n             insn\n         }"}, {"sha": "65e211ae740bcd81809998210dbf7a8ff86a514a", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b638f11b4230ad2e098a75474c36a10de1653d0d/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b638f11b4230ad2e098a75474c36a10de1653d0d/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=b638f11b4230ad2e098a75474c36a10de1653d0d", "patch": "@@ -247,26 +247,11 @@ pub fn trans_intrinsic_call<'a, 'tcx>(bx: &Builder<'a, 'tcx>,\n             to_immediate(bx, load, cx.layout_of(tp_ty))\n         },\n         \"volatile_store\" => {\n-            let tp_ty = substs.type_at(0);\n             let dst = args[0].deref(bx.cx);\n-            if let OperandValue::Pair(a, b) = args[1].val {\n-                bx.volatile_store(a, dst.project_field(bx, 0).llval);\n-                bx.volatile_store(b, dst.project_field(bx, 1).llval);\n-            } else {\n-                let val = if let OperandValue::Ref(ptr, align) = args[1].val {\n-                    bx.load(ptr, align)\n-                } else {\n-                    if dst.layout.is_zst() {\n-                        return;\n-                    }\n-                    from_immediate(bx, args[1].immediate())\n-                };\n-                let ptr = bx.pointercast(dst.llval, val_ty(val).ptr_to());\n-                let store = bx.volatile_store(val, ptr);\n-                unsafe {\n-                    llvm::LLVMSetAlignment(store, cx.align_of(tp_ty).abi() as u32);\n-                }\n+            if dst.layout.is_zst() {\n+                return;\n             }\n+            args[1].val.volatile_store(bx, dst);\n             return;\n         },\n         \"prefetch_read_data\" | \"prefetch_write_data\" |"}, {"sha": "df8807c318b17efe52ca78338b53efe4fafe5a38", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b638f11b4230ad2e098a75474c36a10de1653d0d/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b638f11b4230ad2e098a75474c36a10de1653d0d/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=b638f11b4230ad2e098a75474c36a10de1653d0d", "patch": "@@ -626,7 +626,7 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                     // have scary latent bugs around.\n \n                     let scratch = PlaceRef::alloca(bx, arg.layout, \"arg\");\n-                    base::memcpy_ty(bx, scratch.llval, llval, op.layout, align);\n+                    base::memcpy_ty(bx, scratch.llval, llval, op.layout, align, false);\n                     (scratch.llval, scratch.align, true)\n                 } else {\n                     (llval, align, true)"}, {"sha": "f69661782915fe7ec176865626824d0362854061", "filename": "src/librustc_trans/mir/operand.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b638f11b4230ad2e098a75474c36a10de1653d0d/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b638f11b4230ad2e098a75474c36a10de1653d0d/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Foperand.rs?ref=b638f11b4230ad2e098a75474c36a10de1653d0d", "patch": "@@ -275,6 +275,14 @@ impl<'a, 'tcx> OperandRef<'tcx> {\n \n impl<'a, 'tcx> OperandValue {\n     pub fn store(self, bx: &Builder<'a, 'tcx>, dest: PlaceRef<'tcx>) {\n+        self.store_maybe_volatile(bx, dest, false);\n+    }\n+\n+    pub fn volatile_store(self, bx: &Builder<'a, 'tcx>, dest: PlaceRef<'tcx>) {\n+        self.store_maybe_volatile(bx, dest, true);\n+    }\n+\n+    fn store_maybe_volatile(self, bx: &Builder<'a, 'tcx>, dest: PlaceRef<'tcx>, volatile: bool) {\n         debug!(\"OperandRef::store: operand={:?}, dest={:?}\", self, dest);\n         // Avoid generating stores of zero-sized values, because the only way to have a zero-sized\n         // value is through `undef`, and store itself is useless.\n@@ -284,9 +292,14 @@ impl<'a, 'tcx> OperandValue {\n         match self {\n             OperandValue::Ref(r, source_align) =>\n                 base::memcpy_ty(bx, dest.llval, r, dest.layout,\n-                                source_align.min(dest.align)),\n+                                source_align.min(dest.align), volatile),\n             OperandValue::Immediate(s) => {\n-                bx.store(base::from_immediate(bx, s), dest.llval, dest.align);\n+                let val = base::from_immediate(bx, s);\n+                if !volatile {\n+                    bx.store(val, dest.llval, dest.align);\n+                } else {\n+                    bx.volatile_store(val, dest.llval, dest.align);\n+                }\n             }\n             OperandValue::Pair(a, b) => {\n                 for (i, &x) in [a, b].iter().enumerate() {\n@@ -295,7 +308,12 @@ impl<'a, 'tcx> OperandValue {\n                     if common::val_ty(x) == Type::i1(bx.cx) {\n                         llptr = bx.pointercast(llptr, Type::i8p(bx.cx));\n                     }\n-                    bx.store(base::from_immediate(bx, x), llptr, dest.align);\n+                    let val = base::from_immediate(bx, x);\n+                    if !volatile {\n+                        bx.store(val, llptr, dest.align);\n+                    } else {\n+                        bx.volatile_store(val, llptr, dest.align);\n+                    }\n                 }\n             }\n         }"}]}