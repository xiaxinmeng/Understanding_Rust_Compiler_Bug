{"sha": "46c35c76fedb90b547201d111e6423bb1de78cd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2YzM1Yzc2ZmVkYjkwYjU0NzIwMWQxMTFlNjQyM2JiMWRlNzhjZDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-09T11:06:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-09T11:06:46Z"}, "message": "Auto merge of #80797 - pietroalbini:fix-relative-install, r=Mark-Simulacrum\n\nFix x.py install not working with relative prefix\n\nThe code powering `./x.py install` did not handle relative paths well: the installation script is executed inside a temporary directory, so all the relative paths specified in `config.toml` and in the `DESTDIR` environment variable were relative to that temporary directory. The original code fixed the problem for `config.toml` paths by canonicalizing the prefix, but breaking `DESTDIR`. https://github.com/rust-lang/rust/pull/80240 fixed the `DESTDIR` problem, but also regressed `config.toml` paths (#80683).\n\nThis PR refactors the installation code to generate paths that *in my understanding* are correct, adding comments in the meantime to explain what each step does. There was no documentation on why choices were made before, so my understanding could actually be wrong.\n\nRegardless, executed `./x.py install` with various combinations of `config.toml` and `DESTDIR` paths, and everything seems to work according to my understanding. Still, I'd love if `@vext01` and `@yshui` could test these changes.\n\nr? `@Mark-Simulacrum`\n`@rustbot` modify labels: beta-nominated T-infra", "tree": {"sha": "6683cd1a230eda33281c9b6d5d0850b29fd27668", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6683cd1a230eda33281c9b6d5d0850b29fd27668"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46c35c76fedb90b547201d111e6423bb1de78cd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46c35c76fedb90b547201d111e6423bb1de78cd6", "html_url": "https://github.com/rust-lang/rust/commit/46c35c76fedb90b547201d111e6423bb1de78cd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46c35c76fedb90b547201d111e6423bb1de78cd6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f9dc9a1821d55b1641c517feac7fcd6ac76aadc", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f9dc9a1821d55b1641c517feac7fcd6ac76aadc", "html_url": "https://github.com/rust-lang/rust/commit/1f9dc9a1821d55b1641c517feac7fcd6ac76aadc"}, {"sha": "2caf9bcb33b73ea952bfb3f2750d2a80622caaae", "url": "https://api.github.com/repos/rust-lang/rust/commits/2caf9bcb33b73ea952bfb3f2750d2a80622caaae", "html_url": "https://github.com/rust-lang/rust/commit/2caf9bcb33b73ea952bfb3f2750d2a80622caaae"}], "stats": {"total": 99, "additions": 44, "deletions": 55}, "files": [{"sha": "fd0acc3a919b0ead5ec4a53a634a67773ae25f4a", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 44, "deletions": 55, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/46c35c76fedb90b547201d111e6423bb1de78cd6/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46c35c76fedb90b547201d111e6423bb1de78cd6/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=46c35c76fedb90b547201d111e6423bb1de78cd6", "patch": "@@ -5,7 +5,7 @@\n \n use std::env;\n use std::fs;\n-use std::path::{Component, Path, PathBuf};\n+use std::path::{Component, PathBuf};\n use std::process::Command;\n \n use build_helper::t;\n@@ -26,74 +26,63 @@ fn install_sh(\n ) {\n     builder.info(&format!(\"Install {} stage{} ({:?})\", package, stage, host));\n \n-    let prefix_default = PathBuf::from(\"/usr/local\");\n-    let sysconfdir_default = PathBuf::from(\"/etc\");\n-    let datadir_default = PathBuf::from(\"share\");\n-    let docdir_default = datadir_default.join(\"doc/rust\");\n-    let libdir_default = PathBuf::from(\"lib\");\n-    let mandir_default = datadir_default.join(\"man\");\n-    let prefix = builder.config.prefix.as_ref().unwrap_or(&prefix_default);\n-    let sysconfdir = builder.config.sysconfdir.as_ref().unwrap_or(&sysconfdir_default);\n-    let datadir = builder.config.datadir.as_ref().unwrap_or(&datadir_default);\n-    let docdir = builder.config.docdir.as_ref().unwrap_or(&docdir_default);\n-    let bindir = &builder.config.bindir;\n-    let libdir = builder.config.libdir.as_ref().unwrap_or(&libdir_default);\n-    let mandir = builder.config.mandir.as_ref().unwrap_or(&mandir_default);\n-\n-    let sysconfdir = prefix.join(sysconfdir);\n-    let datadir = prefix.join(datadir);\n-    let docdir = prefix.join(docdir);\n-    let bindir = prefix.join(bindir);\n-    let libdir = prefix.join(libdir);\n-    let mandir = prefix.join(mandir);\n-\n-    let destdir = env::var_os(\"DESTDIR\").map(PathBuf::from);\n-\n-    let prefix = add_destdir(&prefix, &destdir);\n-    let sysconfdir = add_destdir(&sysconfdir, &destdir);\n-    let datadir = add_destdir(&datadir, &destdir);\n-    let docdir = add_destdir(&docdir, &destdir);\n-    let bindir = add_destdir(&bindir, &destdir);\n-    let libdir = add_destdir(&libdir, &destdir);\n-    let mandir = add_destdir(&mandir, &destdir);\n-\n-    let prefix = {\n-        fs::create_dir_all(&prefix)\n-            .unwrap_or_else(|err| panic!(\"could not create {}: {}\", prefix.display(), err));\n-        fs::canonicalize(&prefix)\n-            .unwrap_or_else(|err| panic!(\"could not canonicalize {}: {}\", prefix.display(), err))\n-    };\n+    let prefix = default_path(&builder.config.prefix, \"/usr/local\");\n+    let sysconfdir = prefix.join(default_path(&builder.config.sysconfdir, \"/etc\"));\n+    let datadir = prefix.join(default_path(&builder.config.datadir, \"share\"));\n+    let docdir = prefix.join(default_path(&builder.config.docdir, \"share/doc\"));\n+    let mandir = prefix.join(default_path(&builder.config.mandir, \"share/man\"));\n+    let libdir = prefix.join(default_path(&builder.config.libdir, \"lib\"));\n+    let bindir = prefix.join(&builder.config.bindir); // Default in config.rs\n \n     let empty_dir = builder.out.join(\"tmp/empty_dir\");\n-\n     t!(fs::create_dir_all(&empty_dir));\n \n     let mut cmd = Command::new(\"sh\");\n     cmd.current_dir(&empty_dir)\n         .arg(sanitize_sh(&tarball.decompressed_output().join(\"install.sh\")))\n-        .arg(format!(\"--prefix={}\", sanitize_sh(&prefix)))\n-        .arg(format!(\"--sysconfdir={}\", sanitize_sh(&sysconfdir)))\n-        .arg(format!(\"--datadir={}\", sanitize_sh(&datadir)))\n-        .arg(format!(\"--docdir={}\", sanitize_sh(&docdir)))\n-        .arg(format!(\"--bindir={}\", sanitize_sh(&bindir)))\n-        .arg(format!(\"--libdir={}\", sanitize_sh(&libdir)))\n-        .arg(format!(\"--mandir={}\", sanitize_sh(&mandir)))\n+        .arg(format!(\"--prefix={}\", prepare_dir(prefix)))\n+        .arg(format!(\"--sysconfdir={}\", prepare_dir(sysconfdir)))\n+        .arg(format!(\"--datadir={}\", prepare_dir(datadir)))\n+        .arg(format!(\"--docdir={}\", prepare_dir(docdir)))\n+        .arg(format!(\"--bindir={}\", prepare_dir(bindir)))\n+        .arg(format!(\"--libdir={}\", prepare_dir(libdir)))\n+        .arg(format!(\"--mandir={}\", prepare_dir(mandir)))\n         .arg(\"--disable-ldconfig\");\n     builder.run(&mut cmd);\n     t!(fs::remove_dir_all(&empty_dir));\n }\n \n-fn add_destdir(path: &Path, destdir: &Option<PathBuf>) -> PathBuf {\n-    let mut ret = match *destdir {\n-        Some(ref dest) => dest.clone(),\n-        None => return path.to_path_buf(),\n-    };\n-    for part in path.components() {\n-        if let Component::Normal(s) = part {\n-            ret.push(s)\n+fn default_path(config: &Option<PathBuf>, default: &str) -> PathBuf {\n+    PathBuf::from(config.as_ref().cloned().unwrap_or_else(|| PathBuf::from(default)))\n+}\n+\n+fn prepare_dir(mut path: PathBuf) -> String {\n+    // The DESTDIR environment variable is a standard way to install software in a subdirectory\n+    // while keeping the original directory structure, even if the prefix or other directories\n+    // contain absolute paths.\n+    //\n+    // More information on the environment variable is available here:\n+    // https://www.gnu.org/prep/standards/html_node/DESTDIR.html\n+    if let Some(destdir) = env::var_os(\"DESTDIR\").map(PathBuf::from) {\n+        let without_destdir = path.clone();\n+        path = destdir;\n+        // Custom .join() which ignores disk roots.\n+        for part in without_destdir.components() {\n+            if let Component::Normal(s) = part {\n+                path.push(s)\n+            }\n         }\n     }\n-    ret\n+\n+    // The installation command is not executed from the current directory, but from a temporary\n+    // directory. To prevent relative paths from breaking this converts relative paths to absolute\n+    // paths. std::fs::canonicalize is not used as that requires the path to actually be present.\n+    if path.is_relative() {\n+        path = std::env::current_dir().expect(\"failed to get the current directory\").join(path);\n+        assert!(path.is_absolute(), \"could not make the path relative\");\n+    }\n+\n+    sanitize_sh(&path)\n }\n \n macro_rules! install {"}]}