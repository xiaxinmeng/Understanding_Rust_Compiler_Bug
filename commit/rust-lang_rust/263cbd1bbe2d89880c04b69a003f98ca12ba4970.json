{"sha": "263cbd1bbe2d89880c04b69a003f98ca12ba4970", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2M2NiZDFiYmUyZDg5ODgwYzA0YjY5YTAwM2Y5OGNhMTJiYTQ5NzA=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-03-22T11:43:19Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-03-22T11:43:19Z"}, "message": "remove redundant closures (clippy::redundant_closure)", "tree": {"sha": "df9f187c92391eff28bfddf8b70bfe0e76b854cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df9f187c92391eff28bfddf8b70bfe0e76b854cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/263cbd1bbe2d89880c04b69a003f98ca12ba4970", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/263cbd1bbe2d89880c04b69a003f98ca12ba4970", "html_url": "https://github.com/rust-lang/rust/commit/263cbd1bbe2d89880c04b69a003f98ca12ba4970", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/263cbd1bbe2d89880c04b69a003f98ca12ba4970/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5574b1df577f737373b42cbf364b6cab2dfa5960", "url": "https://api.github.com/repos/rust-lang/rust/commits/5574b1df577f737373b42cbf364b6cab2dfa5960", "html_url": "https://github.com/rust-lang/rust/commit/5574b1df577f737373b42cbf364b6cab2dfa5960"}], "stats": {"total": 74, "additions": 33, "deletions": 41}, "files": [{"sha": "bde66c406af7f20fd64ae7cbbcf1c3b6f449f448", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=263cbd1bbe2d89880c04b69a003f98ca12ba4970", "patch": "@@ -196,7 +196,7 @@ impl<K: Clone, V: Clone> Clone for BTreeMap<K, V> {\n                                 (root, length)\n                             };\n \n-                            out_node.push(k, v, subroot.unwrap_or_else(|| node::Root::new_leaf()));\n+                            out_node.push(k, v, subroot.unwrap_or_else(node::Root::new_leaf));\n                             out_tree.length += 1 + sublength;\n                         }\n                     }\n@@ -2147,7 +2147,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// If the root node is the empty (non-allocated) root node, allocate our\n     /// own node.\n     fn ensure_root_is_owned(&mut self) -> &mut node::Root<K, V> {\n-        self.root.get_or_insert_with(|| node::Root::new_leaf())\n+        self.root.get_or_insert_with(node::Root::new_leaf)\n     }\n }\n "}, {"sha": "f3ae2b3d57a8f5426ea0241703ff42ddb301da98", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=263cbd1bbe2d89880c04b69a003f98ca12ba4970", "patch": "@@ -245,7 +245,7 @@ impl DepGraph {\n         C: DepGraphSafe + StableHashingContextProvider<'a>,\n     {\n         if let Some(ref data) = self.data {\n-            let task_deps = create_task(key).map(|deps| Lock::new(deps));\n+            let task_deps = create_task(key).map(Lock::new);\n \n             // In incremental mode, hash the result of the task. We don't\n             // do anything with the hash yet, but we are computing it"}, {"sha": "dd2a3f6c29a76ab2231ed4959c4c0da6b5552cfc", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=263cbd1bbe2d89880c04b69a003f98ca12ba4970", "patch": "@@ -796,7 +796,7 @@ impl UndefMask {\n         }\n \n         // FIXME(oli-obk): optimize this for allocations larger than a block.\n-        let idx = (start.bytes()..end.bytes()).map(|i| Size::from_bytes(i)).find(|&i| !self.get(i));\n+        let idx = (start.bytes()..end.bytes()).map(Size::from_bytes).find(|&i| !self.get(i));\n \n         match idx {\n             Some(idx) => Err(idx),"}, {"sha": "9d00cbe1951eae945d91632df238dfec7039df0a", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=263cbd1bbe2d89880c04b69a003f98ca12ba4970", "patch": "@@ -250,7 +250,7 @@ impl ParenthesizedArgs {\n     pub fn as_angle_bracketed_args(&self) -> AngleBracketedArgs {\n         AngleBracketedArgs {\n             span: self.span,\n-            args: self.inputs.iter().cloned().map(|input| GenericArg::Type(input)).collect(),\n+            args: self.inputs.iter().cloned().map(GenericArg::Type).collect(),\n             constraints: vec![],\n         }\n     }"}, {"sha": "91b61ebbce69a2d9f36c7265e6d6acc519963e1b", "filename": "src/librustc_ast_lowering/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc_ast_lowering%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc_ast_lowering%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fpath.rs?ref=263cbd1bbe2d89880c04b69a003f98ca12ba4970", "patch": "@@ -272,7 +272,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         if !generic_args.parenthesized && !has_lifetimes {\n             generic_args.args = self\n                 .elided_path_lifetimes(path_span, expected_lifetimes)\n-                .map(|lt| GenericArg::Lifetime(lt))\n+                .map(GenericArg::Lifetime)\n                 .chain(generic_args.args.into_iter())\n                 .collect();\n             if expected_lifetimes > 0 && param_mode == ParamMode::Explicit {"}, {"sha": "d83c98572a272611d6a2064fd620d7d386e19acb", "filename": "src/librustc_builtin_macros/deriving/generic/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fty.rs?ref=263cbd1bbe2d89880c04b69a003f98ca12ba4970", "patch": "@@ -76,8 +76,8 @@ impl<'a> Path<'a> {\n             self.params.iter().map(|t| t.to_ty(cx, span, self_ty, self_generics)).collect();\n         let params = lt\n             .into_iter()\n-            .map(|lt| GenericArg::Lifetime(lt))\n-            .chain(tys.into_iter().map(|ty| GenericArg::Type(ty)))\n+            .map(GenericArg::Lifetime)\n+            .chain(tys.into_iter().map(GenericArg::Type))\n             .collect();\n \n         match self.kind {"}, {"sha": "485719c5175643532a5d7618e17ca614f1ba1e4b", "filename": "src/librustc_data_structures/sharded.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc_data_structures%2Fsharded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc_data_structures%2Fsharded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsharded.rs?ref=263cbd1bbe2d89880c04b69a003f98ca12ba4970", "patch": "@@ -30,7 +30,7 @@ pub struct Sharded<T> {\n impl<T: Default> Default for Sharded<T> {\n     #[inline]\n     fn default() -> Self {\n-        Self::new(|| T::default())\n+        Self::new(T::default)\n     }\n }\n "}, {"sha": "fffae0bfd24d967f84a141a6ef540e246619b200", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=263cbd1bbe2d89880c04b69a003f98ca12ba4970", "patch": "@@ -162,7 +162,7 @@ impl<'a> DiagnosticBuilder<'a> {\n         message: &str,\n         span: Option<S>,\n     ) -> &mut Self {\n-        let span = span.map(|s| s.into()).unwrap_or_else(|| MultiSpan::new());\n+        let span = span.map(|s| s.into()).unwrap_or_else(MultiSpan::new);\n         self.0.diagnostic.sub(level, message, span, None);\n         self\n     }"}, {"sha": "f8bf0315d0c9f0a4a26729a9bd4efcb444566dee", "filename": "src/librustc_feature/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc_feature%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc_feature%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Flib.rs?ref=263cbd1bbe2d89880c04b69a003f98ca12ba4970", "patch": "@@ -51,7 +51,7 @@ pub struct Feature {\n \n impl Feature {\n     fn issue(&self) -> Option<NonZeroU32> {\n-        self.issue.and_then(|i| NonZeroU32::new(i))\n+        self.issue.and_then(NonZeroU32::new)\n     }\n }\n "}, {"sha": "cb1ed87b02fdaf80f6b1b2c76c940830f6a6e71b", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=263cbd1bbe2d89880c04b69a003f98ca12ba4970", "patch": "@@ -703,7 +703,7 @@ impl<'tcx> QueryContext<'tcx> {\n     where\n         F: FnOnce(TyCtxt<'tcx>) -> R,\n     {\n-        ty::tls::enter_global(self.0, |tcx| f(tcx))\n+        ty::tls::enter_global(self.0, f)\n     }\n \n     pub fn print_stats(&mut self) {"}, {"sha": "c1a95c094b10c76962d4049a66f4c5143ea46229", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=263cbd1bbe2d89880c04b69a003f98ca12ba4970", "patch": "@@ -327,7 +327,7 @@ impl<'a> CrateLocator<'a> {\n                     .into_iter()\n                     .filter_map(|entry| entry.files())\n                     .flatten()\n-                    .map(|location| PathBuf::from(location))\n+                    .map(PathBuf::from)\n                     .collect()\n             } else {\n                 // SVH being specified means this is a transitive dependency,"}, {"sha": "c15f2a726ee705e5d2f4c570be1a4615ae3691ca", "filename": "src/librustc_mir/dataflow/generic/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fgraphviz.rs?ref=263cbd1bbe2d89880c04b69a003f98ca12ba4970", "patch": "@@ -577,7 +577,7 @@ fn write_diff<A: Analysis<'tcx>>(\n     let mut clear = HybridBitSet::new_empty(len);\n \n     // FIXME: Implement a lazy iterator over the symmetric difference of two bitsets.\n-    for i in (0..len).map(|i| A::Idx::new(i)) {\n+    for i in (0..len).map(A::Idx::new) {\n         match (from.contains(i), to.contains(i)) {\n             (false, true) => set.insert(i),\n             (true, false) => clear.insert(i),"}, {"sha": "cbd19f080eb9ef8acd6a22e5f165952d7a223027", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=263cbd1bbe2d89880c04b69a003f98ca12ba4970", "patch": "@@ -895,7 +895,7 @@ fn create_mono_items_for_vtable_methods<'tcx>(\n                     .unwrap()\n                 })\n                 .filter(|&instance| should_monomorphize_locally(tcx, &instance))\n-                .map(|instance| create_fn_mono_item(instance));\n+                .map(create_fn_mono_item);\n             output.extend(methods);\n         }\n "}, {"sha": "89063a4227fa9cb56ee597e8baeb3e057005d9c9", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=263cbd1bbe2d89880c04b69a003f98ca12ba4970", "patch": "@@ -2066,7 +2066,7 @@ fn split_grouped_constructors<'p, 'tcx>(\n                         }\n                         intersection\n                     })\n-                    .flat_map(|range| range_borders(range));\n+                    .flat_map(range_borders);\n                 let ctor_borders = range_borders(ctor_range.clone());\n                 let mut borders: Vec<_> = row_borders.chain(ctor_borders).collect();\n                 borders.sort_unstable();"}, {"sha": "a80c3b72044ef8319d0752a198011a3a5d4d4358", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=263cbd1bbe2d89880c04b69a003f98ca12ba4970", "patch": "@@ -1148,7 +1148,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n \n                 let sub_span = path.segments.last().unwrap().ident.span;\n                 if !self.span.filter_generated(sub_span) {\n-                    let ref_id = self.lookup_def_id(id).map(|id| id_from_def_id(id));\n+                    let ref_id = self.lookup_def_id(id).map(id_from_def_id);\n                     let alias_span = alias.map(|i| self.span_from_span(i.span));\n                     let span = self.span_from_span(sub_span);\n                     self.dumper.import("}, {"sha": "024633c3b3dec638e66bfd1afeecf3d8282153b5", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=263cbd1bbe2d89880c04b69a003f98ca12ba4970", "patch": "@@ -326,7 +326,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                                     .as_ref()\n                                     .and_then(|t| self.lookup_def_id(t.ref_id))\n                                     .map(id_from_def_id)\n-                                    .unwrap_or_else(|| null_id()),\n+                                    .unwrap_or_else(null_id),\n                             },\n                             Impl {\n                                 id: impl_id,\n@@ -487,9 +487,9 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n             qualname,\n             // FIXME you get better data here by using the visitor.\n             value: String::new(),\n-            parent: parent_scope.map(|id| id_from_def_id(id)),\n+            parent: parent_scope.map(id_from_def_id),\n             children: vec![],\n-            decl_id: decl_id.map(|id| id_from_def_id(id)),\n+            decl_id: decl_id.map(id_from_def_id),\n             docs,\n             sig: None,\n             attributes: lower_attributes(attributes, self),\n@@ -541,7 +541,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                                 .tcx\n                                 .find_field_index(ident, variant)\n                                 .map(|index| id_from_def_id(variant.fields[index].did))\n-                                .unwrap_or_else(|| null_id()),\n+                                .unwrap_or_else(null_id),\n                         }))\n                     }\n                     ty::Tuple(..) => None,\n@@ -590,14 +590,11 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                 Some(Data::RefData(Ref {\n                     kind: RefKind::Function,\n                     span,\n-                    ref_id: def_id\n-                        .or(decl_id)\n-                        .map(|id| id_from_def_id(id))\n-                        .unwrap_or_else(|| null_id()),\n+                    ref_id: def_id.or(decl_id).map(id_from_def_id).unwrap_or_else(|| null_id()),\n                 }))\n             }\n             ast::ExprKind::Path(_, ref path) => {\n-                self.get_path_data(expr.id, path).map(|d| Data::RefData(d))\n+                self.get_path_data(expr.id, path).map(Data::RefData)\n             }\n             _ => {\n                 // FIXME\n@@ -1075,7 +1072,7 @@ fn id_from_def_id(id: DefId) -> rls_data::Id {\n \n fn id_from_node_id(id: NodeId, scx: &SaveContext<'_, '_>) -> rls_data::Id {\n     let def_id = scx.tcx.hir().opt_local_def_id_from_node_id(id);\n-    def_id.map(|id| id_from_def_id(id)).unwrap_or_else(|| {\n+    def_id.map(id_from_def_id).unwrap_or_else(|| {\n         // Create a *fake* `DefId` out of a `NodeId` by subtracting the `NodeId`\n         // out of the maximum u32 value. This will work unless you have *billions*\n         // of definitions in a single crate (very unlikely to actually happen)."}, {"sha": "6c4d70c09a39ac6f810fb99b1165df5ec24f039e", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=263cbd1bbe2d89880c04b69a003f98ca12ba4970", "patch": "@@ -1310,7 +1310,7 @@ fn select_incremental_path(\n         (None, Some(path)) => Some(path),\n         (None, None) => None,\n     }\n-    .map(|m| PathBuf::from(m))\n+    .map(PathBuf::from)\n }\n \n fn collect_print_requests("}, {"sha": "260363a5d1fb5cd926ae2e71d5e5e6ffe80f09ed", "filename": "src/librustc_trait_selection/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs?ref=263cbd1bbe2d89880c04b69a003f98ca12ba4970", "patch": "@@ -131,7 +131,7 @@ impl<'a, 'tcx> FulfillmentContext<'tcx> {\n             // FIXME: if we kept the original cache key, we could mark projection\n             // obligations as complete for the projection cache here.\n \n-            errors.extend(outcome.errors.into_iter().map(|e| to_fulfillment_error(e)));\n+            errors.extend(outcome.errors.into_iter().map(to_fulfillment_error));\n \n             // If nothing new was added, no need to keep looping.\n             if outcome.stalled {\n@@ -214,7 +214,7 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n             .predicates\n             .to_errors(CodeAmbiguity)\n             .into_iter()\n-            .map(|e| to_fulfillment_error(e))\n+            .map(to_fulfillment_error)\n             .collect();\n         if errors.is_empty() { Ok(()) } else { Err(errors) }\n     }"}, {"sha": "5cc1da045fc371e42bae948300efb33a0c08507d", "filename": "src/librustc_trait_selection/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs?ref=263cbd1bbe2d89880c04b69a003f98ca12ba4970", "patch": "@@ -39,7 +39,7 @@ pub fn astconv_object_safety_violations(\n     let violations = traits::supertrait_def_ids(tcx, trait_def_id)\n         .map(|def_id| predicates_reference_self(tcx, def_id, true))\n         .filter(|spans| !spans.is_empty())\n-        .map(|spans| ObjectSafetyViolation::SupertraitSelf(spans))\n+        .map(ObjectSafetyViolation::SupertraitSelf)\n         .collect();\n \n     debug!(\"astconv_object_safety_violations(trait_def_id={:?}) = {:?}\", trait_def_id, violations);"}, {"sha": "2f59620be93c340b5bbec7ff394fe50391432d14", "filename": "src/librustc_trait_selection/traits/select.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs?ref=263cbd1bbe2d89880c04b69a003f98ca12ba4970", "patch": "@@ -2947,13 +2947,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 let existential_predicates = data_a.map_bound(|data_a| {\n                     let iter = data_a\n                         .principal()\n-                        .map(|x| ty::ExistentialPredicate::Trait(x))\n+                        .map(ty::ExistentialPredicate::Trait)\n                         .into_iter()\n-                        .chain(\n-                            data_a\n-                                .projection_bounds()\n-                                .map(|x| ty::ExistentialPredicate::Projection(x)),\n-                        )\n+                        .chain(data_a.projection_bounds().map(ty::ExistentialPredicate::Projection))\n                         .chain(data_b.auto_traits().map(ty::ExistentialPredicate::AutoTrait));\n                     tcx.mk_existential_predicates(iter)\n                 });"}, {"sha": "408e5c2d2f24d78462ce1a8048d0f17816c2c346", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=263cbd1bbe2d89880c04b69a003f98ca12ba4970", "patch": "@@ -1693,9 +1693,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         };\n \n         // Erase the `dummy_self` (`trait_object_dummy_self`) used above.\n-        let existential_trait_refs = regular_traits\n-            .iter()\n-            .map(|i| i.trait_ref().map_bound(|trait_ref| trait_ref_to_existential(trait_ref)));\n+        let existential_trait_refs =\n+            regular_traits.iter().map(|i| i.trait_ref().map_bound(trait_ref_to_existential));\n         let existential_projections = bounds.projection_bounds.iter().map(|(bound, _)| {\n             bound.map_bound(|b| {\n                 let trait_ref = trait_ref_to_existential(b.projection_ty.trait_ref(tcx));"}, {"sha": "f666ef72d5278c0016ba342943a163a4c0a88db0", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/263cbd1bbe2d89880c04b69a003f98ca12ba4970/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=263cbd1bbe2d89880c04b69a003f98ca12ba4970", "patch": "@@ -677,7 +677,7 @@ fn compare_number_of_generics<'tcx>(\n                         impl_count,\n                         kind,\n                         pluralize!(impl_count),\n-                        suffix.unwrap_or_else(|| String::new()),\n+                        suffix.unwrap_or_else(String::new),\n                     ),\n                 );\n             }"}]}