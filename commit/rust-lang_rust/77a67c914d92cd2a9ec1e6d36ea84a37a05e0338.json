{"sha": "77a67c914d92cd2a9ec1e6d36ea84a37a05e0338", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3YTY3YzkxNGQ5MmNkMmE5ZWMxZTZkMzZlYTg0YTM3YTA1ZTAzMzg=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-02-26T18:02:22Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-03-01T15:20:17Z"}, "message": "Place::Local(x) is now Place::Base(PlaceBase::Local(x))", "tree": {"sha": "87ef52662a292a7afb590b9e3723c6f322358946", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87ef52662a292a7afb590b9e3723c6f322358946"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77a67c914d92cd2a9ec1e6d36ea84a37a05e0338", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAlx5TbIACgkQiMlBzaHU\nZDKajw//TjLDKV2TFZMiUlKR9J40YH5NmQ/HDHDLvqXnG7mYtgS5y1c+4k5TarMN\n4VQTrnCyXaXFd4IHNSaHaoan09jyC1xX62hkV5icvc765e8oLTjM3ieGgL4qOEug\no8Wq1UTBkNRjkAgkhBTfdqK6w/FWOH0pE1TLb+JZyMUw7uy106EMiP1eB0384QM5\nXFoEoXknSdQTo1q/62UKZmYTnRKYG8Uju9jz29aLNkoNMqFBBDHdC9oafRjTT99e\nh4tfXSpTs7+bGnHs+cQZB+7oGtZkc0cQau3Mt3oEM5d3ImoNB5XRkLUhe+VBFlwp\nYfuxTf8HrO+XUC0OBFLYq8AtHn69Ypn0lj3w4AZnWlt/y3NjrTFZWUY30xWWNelN\nfLZZIx07me6FT7mRX32/dBC7pbK5wkHw2TN/RzgejDZfBqHJGWG4o7J/Gz4+GNpb\nrKauIi74EnJ5jZbfcE/fhn2UStr50J6wuvGSIT3j7dAXp+zIy9YAeG1kDP1UTKvn\nlSft39NHxErkXE+RI+b2eqNfVxNfFMWVDi9Hz7buBE/AYFgw9sm1Ww6k22Ka514f\nrKzxcgB/NUpRkI2AtUNBmZRCFd6bAp0Fnmn3eGH8oc2d6cJhIaHuLZGlVIWdO9MY\nBe7vvMk2CyN+PWZRm66aaTaq6FmNgp0LGe3mj7Tqjuf9GFGja4U=\n=a/hm\n-----END PGP SIGNATURE-----", "payload": "tree 87ef52662a292a7afb590b9e3723c6f322358946\nparent 9f2055637e3a32064517c888f7d69b4fad6d67c5\nauthor Santiago Pastorino <spastorino@gmail.com> 1551204142 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1551453617 -0300\n\nPlace::Local(x) is now Place::Base(PlaceBase::Local(x))\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77a67c914d92cd2a9ec1e6d36ea84a37a05e0338", "html_url": "https://github.com/rust-lang/rust/commit/77a67c914d92cd2a9ec1e6d36ea84a37a05e0338", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77a67c914d92cd2a9ec1e6d36ea84a37a05e0338/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f2055637e3a32064517c888f7d69b4fad6d67c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f2055637e3a32064517c888f7d69b4fad6d67c5", "html_url": "https://github.com/rust-lang/rust/commit/9f2055637e3a32064517c888f7d69b4fad6d67c5"}], "stats": {"total": 9, "additions": 5, "deletions": 4}, "files": [{"sha": "65276937bc2d08cc10a703d710c03d944e1e252c", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/77a67c914d92cd2a9ec1e6d36ea84a37a05e0338/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a67c914d92cd2a9ec1e6d36ea84a37a05e0338/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=77a67c914d92cd2a9ec1e6d36ea84a37a05e0338", "patch": "@@ -143,7 +143,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n                 let pred_arg = if_chain! {\n                     if let Some((pred_fn_def_id, pred_arg, pred_arg_ty, Some(res))) =\n                         is_call_with_ref_arg(cx, mir, &pred_terminator.kind);\n-                    if *res == mir::Place::Local(cloned);\n+                    if *res == mir::Place::Base(mir::PlaceBase::Local(cloned));\n                     if match_def_path(cx.tcx, pred_fn_def_id, &paths::DEREF_TRAIT_METHOD);\n                     if match_type(cx, pred_arg_ty, &paths::PATH_BUF)\n                         || match_type(cx, pred_arg_ty, &paths::OS_STRING);\n@@ -229,7 +229,7 @@ fn is_call_with_ref_arg<'tcx>(\n     if_chain! {\n         if let TerminatorKind::Call { func, args, destination, .. } = kind;\n         if args.len() == 1;\n-        if let mir::Operand::Move(mir::Place::Local(local)) = &args[0];\n+        if let mir::Operand::Move(mir::Place::Base(mir::PlaceBase::Local(local))) = &args[0];\n         if let ty::FnDef(def_id, _) = func.ty(&*mir, cx.tcx).sty;\n         if let (inner_ty, 1) = walk_ptrs_ty_depth(args[0].ty(&*mir, cx.tcx));\n         if !is_copy(cx, inner_ty);\n@@ -255,7 +255,7 @@ fn find_stmt_assigns_to<'a, 'tcx: 'a>(\n     stmts\n         .rev()\n         .find_map(|stmt| {\n-            if let mir::StatementKind::Assign(mir::Place::Local(local), v) = &stmt.kind {\n+            if let mir::StatementKind::Assign(mir::Place::Base(mir::PlaceBase::Local(local)), v) = &stmt.kind {\n                 if *local == to {\n                     return Some(v);\n                 }\n@@ -285,6 +285,7 @@ fn base_local_and_movability<'tcx>(\n     mut place: &mir::Place<'tcx>,\n ) -> Option<(mir::Local, CannotMoveOut)> {\n     use rustc::mir::Place::*;\n+    use rustc::mir::PlaceBase;\n \n     // Dereference. You cannot move things out from a borrowed value.\n     let mut deref = false;\n@@ -293,7 +294,7 @@ fn base_local_and_movability<'tcx>(\n \n     loop {\n         match place {\n-            Local(local) => return Some((*local, deref || field)),\n+            Base(PlaceBase::Local(local)) => return Some((*local, deref || field)),\n             Projection(proj) => {\n                 place = &proj.base;\n                 deref = deref || matches!(proj.elem, mir::ProjectionElem::Deref);"}]}