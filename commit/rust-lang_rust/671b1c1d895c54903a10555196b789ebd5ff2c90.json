{"sha": "671b1c1d895c54903a10555196b789ebd5ff2c90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MWIxYzFkODk1YzU0OTAzYTEwNTU1MTk2Yjc4OWViZDVmZjJjOTA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-01-25T23:37:20Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-01-26T00:43:01Z"}, "message": "std: Stabilize APIs for the 1.16.0 release\n\nThis commit applies the stabilization/deprecations of the 1.16.0 release, as\ntracked by the rust-lang/rust issue tracker and the final-comment-period tag.\n\nThe following APIs were stabilized:\n\n* `VecDeque::truncate`\n* `VecDeque::resize`\n* `String::insert_str`\n* `Duration::checked_{add,sub,div,mul}`\n* `str::replacen`\n* `SocketAddr::is_ipv{4,6}`\n* `IpAddr::is_ipv{4,6}`\n* `str::repeat`\n* `Vec::dedup_by`\n* `Vec::dedup_by_key`\n* `Result::unwrap_or_default`\n* `<*const T>::wrapping_offset`\n* `<*mut T>::wrapping_offset`\n* `CommandExt::creation_flags` (on Windows)\n* `File::set_permissions`\n* `String::split_off`\n\nThe following APIs were deprecated\n\n* `EnumSet` - replaced with other ecosystem abstractions, long since unstable\n\nCloses #27788\nCloses #35553\nCloses #35774\nCloses #36436\nCloses #36949\nCloses #37079\nCloses #37087\nCloses #37516\nCloses #37827\nCloses #37916\nCloses #37966\nCloses #38080", "tree": {"sha": "a6a30d529d3d441636df26bbab5e1316df984636", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6a30d529d3d441636df26bbab5e1316df984636"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/671b1c1d895c54903a10555196b789ebd5ff2c90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/671b1c1d895c54903a10555196b789ebd5ff2c90", "html_url": "https://github.com/rust-lang/rust/commit/671b1c1d895c54903a10555196b789ebd5ff2c90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/671b1c1d895c54903a10555196b789ebd5ff2c90/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1283c029557bcde106adde71f467fe133b3ffeff", "url": "https://api.github.com/repos/rust-lang/rust/commits/1283c029557bcde106adde71f467fe133b3ffeff", "html_url": "https://github.com/rust-lang/rust/commit/1283c029557bcde106adde71f467fe133b3ffeff"}], "stats": {"total": 397, "additions": 26, "deletions": 371}, "files": [{"sha": "78b610797778190f398d75eafbadcb0f4b4a25a5", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671b1c1d895c54903a10555196b789ebd5ff2c90/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671b1c1d895c54903a10555196b789ebd5ff2c90/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=671b1c1d895c54903a10555196b789ebd5ff2c90", "patch": "@@ -17,6 +17,8 @@\n             reason = \"matches collection reform specification, \\\n                       waiting for dust to settle\",\n             issue = \"37966\")]\n+#![rustc_deprecated(since = \"1.16.0\", reason = \"long since replaced\")]\n+#![allow(deprecated)]\n \n use core::marker;\n use core::fmt;"}, {"sha": "39de87c08407f5bcea0f9050c2557758e403e28d", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/671b1c1d895c54903a10555196b789ebd5ff2c90/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671b1c1d895c54903a10555196b789ebd5ff2c90/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=671b1c1d895c54903a10555196b789ebd5ff2c90", "patch": "@@ -79,6 +79,7 @@ pub use btree_set::BTreeSet;\n #[doc(no_inline)]\n pub use linked_list::LinkedList;\n #[doc(no_inline)]\n+#[allow(deprecated)]\n pub use enum_set::EnumSet;\n #[doc(no_inline)]\n pub use vec_deque::VecDeque;"}, {"sha": "458d5114829f459b404ddcb8e34debd5b553fd5b", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/671b1c1d895c54903a10555196b789ebd5ff2c90/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671b1c1d895c54903a10555196b789ebd5ff2c90/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=671b1c1d895c54903a10555196b789ebd5ff2c90", "patch": "@@ -1607,7 +1607,6 @@ impl str {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// # #![feature(str_replacen)]\n     /// let s = \"foo foo 123 foo\";\n     /// assert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\n     /// assert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\n@@ -1617,13 +1616,10 @@ impl str {\n     /// When the pattern doesn't match:\n     ///\n     /// ```\n-    /// # #![feature(str_replacen)]\n     /// let s = \"this is old\";\n     /// assert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n     /// ```\n-    #[unstable(feature = \"str_replacen\",\n-               issue = \"36436\",\n-               reason = \"only need to replace first N matches\")]\n+    #[stable(feature = \"str_replacen\", since = \"1.16.0\")]\n     pub fn replacen<'a, P: Pattern<'a>>(&'a self, pat: P, to: &str, count: usize) -> String {\n         // Hope to reduce the times of re-allocation\n         let mut result = String::with_capacity(32);\n@@ -1795,11 +1791,9 @@ impl str {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(repeat_str)]\n-    ///\n     /// assert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n     /// ```\n-    #[unstable(feature = \"repeat_str\", issue = \"37079\")]\n+    #[stable(feature = \"repeat_str\", since = \"1.16.0\")]\n     pub fn repeat(&self, n: usize) -> String {\n         let mut s = String::with_capacity(self.len() * n);\n         s.extend((0..n).map(|_| self));"}, {"sha": "b184a8603e6bd1be5fa4568e3a68ab46174d9e64", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/671b1c1d895c54903a10555196b789ebd5ff2c90/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671b1c1d895c54903a10555196b789ebd5ff2c90/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=671b1c1d895c54903a10555196b789ebd5ff2c90", "patch": "@@ -1166,18 +1166,14 @@ impl String {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(insert_str)]\n-    ///\n     /// let mut s = String::from(\"bar\");\n     ///\n     /// s.insert_str(0, \"foo\");\n     ///\n     /// assert_eq!(\"foobar\", s);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"insert_str\",\n-               reason = \"recent addition\",\n-               issue = \"35553\")]\n+    #[stable(feature = \"insert_str\", since = \"1.16.0\")]\n     pub fn insert_str(&mut self, idx: usize, string: &str) {\n         assert!(self.is_char_boundary(idx));\n \n@@ -1270,7 +1266,6 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(string_split_off)]\n     /// # fn main() {\n     /// let mut hello = String::from(\"Hello, World!\");\n     /// let world = hello.split_off(7);\n@@ -1279,7 +1274,7 @@ impl String {\n     /// # }\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"string_split_off\", issue = \"38080\")]\n+    #[stable(feature = \"string_split_off\", since = \"1.16.0\")]\n     pub fn split_off(&mut self, mid: usize) -> String {\n         assert!(self.is_char_boundary(mid));\n         let other = self.vec.split_off(mid);"}, {"sha": "1f8fd32da9ab8829bbd5a1b2308ad07ce35c86ea", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/671b1c1d895c54903a10555196b789ebd5ff2c90/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671b1c1d895c54903a10555196b789ebd5ff2c90/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=671b1c1d895c54903a10555196b789ebd5ff2c90", "patch": "@@ -820,15 +820,13 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(dedup_by)]\n-    ///\n     /// let mut vec = vec![10, 20, 21, 30, 20];\n     ///\n     /// vec.dedup_by_key(|i| *i / 10);\n     ///\n     /// assert_eq!(vec, [10, 20, 30, 20]);\n     /// ```\n-    #[unstable(feature = \"dedup_by\", reason = \"recently added\", issue = \"37087\")]\n+    #[stable(feature = \"dedup_by\", since = \"1.16.0\")]\n     #[inline]\n     pub fn dedup_by_key<F, K>(&mut self, mut key: F) where F: FnMut(&mut T) -> K, K: PartialEq {\n         self.dedup_by(|a, b| key(a) == key(b))\n@@ -841,7 +839,6 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(dedup_by)]\n     /// use std::ascii::AsciiExt;\n     ///\n     /// let mut vec = vec![\"foo\", \"bar\", \"Bar\", \"baz\", \"bar\"];\n@@ -850,7 +847,7 @@ impl<T> Vec<T> {\n     ///\n     /// assert_eq!(vec, [\"foo\", \"bar\", \"baz\", \"bar\"]);\n     /// ```\n-    #[unstable(feature = \"dedup_by\", reason = \"recently added\", issue = \"37087\")]\n+    #[stable(feature = \"dedup_by\", since = \"1.16.0\")]\n     pub fn dedup_by<F>(&mut self, mut same_bucket: F) where F: FnMut(&mut T, &mut T) -> bool {\n         unsafe {\n             // Although we have a mutable reference to `self`, we cannot make"}, {"sha": "5b1bc3a3ae4f14897d934c8c0f7d787903f405cc", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/671b1c1d895c54903a10555196b789ebd5ff2c90/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671b1c1d895c54903a10555196b789ebd5ff2c90/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=671b1c1d895c54903a10555196b789ebd5ff2c90", "patch": "@@ -643,8 +643,6 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(deque_extras)]\n-    ///\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -655,9 +653,7 @@ impl<T> VecDeque<T> {\n     /// assert_eq!(buf.len(), 1);\n     /// assert_eq!(Some(&5), buf.get(0));\n     /// ```\n-    #[unstable(feature = \"deque_extras\",\n-               reason = \"matches collection reform specification; waiting on panic semantics\",\n-               issue = \"27788\")]\n+    #[stable(feature = \"deque_extras\", since = \"1.16.0\")]\n     pub fn truncate(&mut self, len: usize) {\n         for _ in len..self.len() {\n             self.pop_back();\n@@ -1779,8 +1775,6 @@ impl<T: Clone> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(deque_extras)]\n-    ///\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -1793,9 +1787,7 @@ impl<T: Clone> VecDeque<T> {\n     ///     assert_eq!(a, b);\n     /// }\n     /// ```\n-    #[unstable(feature = \"deque_extras\",\n-               reason = \"matches collection reform specification; waiting on panic semantics\",\n-               issue = \"27788\")]\n+    #[stable(feature = \"deque_extras\", since = \"1.16.0\")]\n     pub fn resize(&mut self, new_len: usize, value: T) {\n         let len = self.len();\n "}, {"sha": "972361326d7bb33af99e99d0a34b49ff8a4ccc70", "filename": "src/libcollectionstest/enum_set.rs", "status": "removed", "additions": 0, "deletions": 268, "changes": 268, "blob_url": "https://github.com/rust-lang/rust/blob/1283c029557bcde106adde71f467fe133b3ffeff/src%2Flibcollectionstest%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1283c029557bcde106adde71f467fe133b3ffeff/src%2Flibcollectionstest%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fenum_set.rs?ref=1283c029557bcde106adde71f467fe133b3ffeff", "patch": "@@ -1,268 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::mem;\n-\n-use collections::enum_set::{CLike, EnumSet};\n-\n-use self::Foo::*;\n-\n-#[derive(Copy, Clone, PartialEq, Debug)]\n-#[repr(usize)]\n-enum Foo {\n-    A,\n-    B,\n-    C,\n-}\n-\n-impl CLike for Foo {\n-    fn to_usize(&self) -> usize {\n-        *self as usize\n-    }\n-\n-    fn from_usize(v: usize) -> Foo {\n-        unsafe { mem::transmute(v) }\n-    }\n-}\n-\n-#[test]\n-fn test_new() {\n-    let e: EnumSet<Foo> = EnumSet::new();\n-    assert!(e.is_empty());\n-}\n-\n-#[test]\n-fn test_show() {\n-    let mut e = EnumSet::new();\n-    assert!(format!(\"{:?}\", e) == \"{}\");\n-    e.insert(A);\n-    assert!(format!(\"{:?}\", e) == \"{A}\");\n-    e.insert(C);\n-    assert!(format!(\"{:?}\", e) == \"{A, C}\");\n-}\n-\n-#[test]\n-fn test_len() {\n-    let mut e = EnumSet::new();\n-    assert_eq!(e.len(), 0);\n-    e.insert(A);\n-    e.insert(B);\n-    e.insert(C);\n-    assert_eq!(e.len(), 3);\n-    e.remove(&A);\n-    assert_eq!(e.len(), 2);\n-    e.clear();\n-    assert_eq!(e.len(), 0);\n-}\n-\n-///////////////////////////////////////////////////////////////////////////\n-// intersect\n-\n-#[test]\n-fn test_two_empties_do_not_intersect() {\n-    let e1: EnumSet<Foo> = EnumSet::new();\n-    let e2: EnumSet<Foo> = EnumSet::new();\n-    assert!(e1.is_disjoint(&e2));\n-}\n-\n-#[test]\n-fn test_empty_does_not_intersect_with_full() {\n-    let e1: EnumSet<Foo> = EnumSet::new();\n-\n-    let mut e2: EnumSet<Foo> = EnumSet::new();\n-    e2.insert(A);\n-    e2.insert(B);\n-    e2.insert(C);\n-\n-    assert!(e1.is_disjoint(&e2));\n-}\n-\n-#[test]\n-fn test_disjoint_intersects() {\n-    let mut e1: EnumSet<Foo> = EnumSet::new();\n-    e1.insert(A);\n-\n-    let mut e2: EnumSet<Foo> = EnumSet::new();\n-    e2.insert(B);\n-\n-    assert!(e1.is_disjoint(&e2));\n-}\n-\n-#[test]\n-fn test_overlapping_intersects() {\n-    let mut e1: EnumSet<Foo> = EnumSet::new();\n-    e1.insert(A);\n-\n-    let mut e2: EnumSet<Foo> = EnumSet::new();\n-    e2.insert(A);\n-    e2.insert(B);\n-\n-    assert!(!e1.is_disjoint(&e2));\n-}\n-\n-///////////////////////////////////////////////////////////////////////////\n-// contains and contains_elem\n-\n-#[test]\n-fn test_superset() {\n-    let mut e1: EnumSet<Foo> = EnumSet::new();\n-    e1.insert(A);\n-\n-    let mut e2: EnumSet<Foo> = EnumSet::new();\n-    e2.insert(A);\n-    e2.insert(B);\n-\n-    let mut e3: EnumSet<Foo> = EnumSet::new();\n-    e3.insert(C);\n-\n-    assert!(e1.is_subset(&e2));\n-    assert!(e2.is_superset(&e1));\n-    assert!(!e3.is_superset(&e2));\n-    assert!(!e2.is_superset(&e3))\n-}\n-\n-#[test]\n-fn test_contains() {\n-    let mut e1: EnumSet<Foo> = EnumSet::new();\n-    e1.insert(A);\n-    assert!(e1.contains(&A));\n-    assert!(!e1.contains(&B));\n-    assert!(!e1.contains(&C));\n-\n-    e1.insert(A);\n-    e1.insert(B);\n-    assert!(e1.contains(&A));\n-    assert!(e1.contains(&B));\n-    assert!(!e1.contains(&C));\n-}\n-\n-///////////////////////////////////////////////////////////////////////////\n-// iter\n-\n-#[test]\n-fn test_iterator() {\n-    let mut e1: EnumSet<Foo> = EnumSet::new();\n-\n-    let elems: Vec<Foo> = e1.iter().collect();\n-    assert!(elems.is_empty());\n-\n-    e1.insert(A);\n-    let elems: Vec<_> = e1.iter().collect();\n-    assert_eq!(elems, [A]);\n-\n-    e1.insert(C);\n-    let elems: Vec<_> = e1.iter().collect();\n-    assert_eq!(elems, [A, C]);\n-\n-    e1.insert(C);\n-    let elems: Vec<_> = e1.iter().collect();\n-    assert_eq!(elems, [A, C]);\n-\n-    e1.insert(B);\n-    let elems: Vec<_> = e1.iter().collect();\n-    assert_eq!(elems, [A, B, C]);\n-}\n-\n-///////////////////////////////////////////////////////////////////////////\n-// operators\n-\n-#[test]\n-fn test_operators() {\n-    let mut e1: EnumSet<Foo> = EnumSet::new();\n-    e1.insert(A);\n-    e1.insert(C);\n-\n-    let mut e2: EnumSet<Foo> = EnumSet::new();\n-    e2.insert(B);\n-    e2.insert(C);\n-\n-    let e_union = e1 | e2;\n-    let elems: Vec<_> = e_union.iter().collect();\n-    assert_eq!(elems, [A, B, C]);\n-\n-    let e_intersection = e1 & e2;\n-    let elems: Vec<_> = e_intersection.iter().collect();\n-    assert_eq!(elems, [C]);\n-\n-    // Another way to express intersection\n-    let e_intersection = e1 - (e1 - e2);\n-    let elems: Vec<_> = e_intersection.iter().collect();\n-    assert_eq!(elems, [C]);\n-\n-    let e_subtract = e1 - e2;\n-    let elems: Vec<_> = e_subtract.iter().collect();\n-    assert_eq!(elems, [A]);\n-\n-    // Bitwise XOR of two sets, aka symmetric difference\n-    let e_symmetric_diff = e1 ^ e2;\n-    let elems: Vec<_> = e_symmetric_diff.iter().collect();\n-    assert_eq!(elems, [A, B]);\n-\n-    // Another way to express symmetric difference\n-    let e_symmetric_diff = (e1 - e2) | (e2 - e1);\n-    let elems: Vec<_> = e_symmetric_diff.iter().collect();\n-    assert_eq!(elems, [A, B]);\n-\n-    // Yet another way to express symmetric difference\n-    let e_symmetric_diff = (e1 | e2) - (e1 & e2);\n-    let elems: Vec<_> = e_symmetric_diff.iter().collect();\n-    assert_eq!(elems, [A, B]);\n-}\n-\n-#[test]\n-#[should_panic]\n-fn test_overflow() {\n-    #[allow(dead_code)]\n-    #[derive(Copy, Clone)]\n-    #[repr(usize)]\n-    enum Bar {\n-        V00, V01, V02, V03, V04, V05, V06, V07, V08, V09,\n-        V10, V11, V12, V13, V14, V15, V16, V17, V18, V19,\n-        V20, V21, V22, V23, V24, V25, V26, V27, V28, V29,\n-        V30, V31, V32, V33, V34, V35, V36, V37, V38, V39,\n-        V40, V41, V42, V43, V44, V45, V46, V47, V48, V49,\n-        V50, V51, V52, V53, V54, V55, V56, V57, V58, V59,\n-        V60, V61, V62, V63, V64, V65, V66, V67, V68, V69,\n-    }\n-\n-    impl CLike for Bar {\n-        fn to_usize(&self) -> usize {\n-            *self as usize\n-        }\n-\n-        fn from_usize(v: usize) -> Bar {\n-            unsafe { mem::transmute(v) }\n-        }\n-    }\n-    let mut set = EnumSet::new();\n-    set.insert(Bar::V64);\n-}\n-\n-#[test]\n-fn test_extend_ref() {\n-    let mut a = EnumSet::new();\n-    a.insert(A);\n-\n-    a.extend(&[A, C]);\n-\n-    assert_eq!(a.len(), 2);\n-    assert!(a.contains(&A));\n-    assert!(a.contains(&C));\n-\n-    let mut b = EnumSet::new();\n-    b.insert(B);\n-\n-    a.extend(&b);\n-\n-    assert_eq!(a.len(), 3);\n-    assert!(a.contains(&A));\n-    assert!(a.contains(&B));\n-    assert!(a.contains(&C));\n-}"}, {"sha": "b146672893f8dcf60ce09202a95581696ff34e8f", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/671b1c1d895c54903a10555196b789ebd5ff2c90/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671b1c1d895c54903a10555196b789ebd5ff2c90/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=671b1c1d895c54903a10555196b789ebd5ff2c90", "patch": "@@ -18,17 +18,12 @@\n #![feature(collections)]\n #![feature(collections_bound)]\n #![feature(const_fn)]\n-#![feature(dedup_by)]\n-#![feature(enumset)]\n #![feature(exact_size_is_empty)]\n #![feature(pattern)]\n #![feature(placement_in_syntax)]\n #![feature(rand)]\n-#![feature(repeat_str)]\n #![feature(step_by)]\n #![feature(str_escape)]\n-#![feature(str_replacen)]\n-#![feature(string_split_off)]\n #![feature(test)]\n #![feature(unboxed_closures)]\n #![feature(unicode)]\n@@ -47,7 +42,6 @@ mod bench;\n mod binary_heap;\n mod btree;\n mod cow_str;\n-mod enum_set;\n mod fmt;\n mod linked_list;\n mod slice;"}, {"sha": "02851c224e2e35b019c8cd6a0a06446156916716", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/671b1c1d895c54903a10555196b789ebd5ff2c90/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671b1c1d895c54903a10555196b789ebd5ff2c90/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=671b1c1d895c54903a10555196b789ebd5ff2c90", "patch": "@@ -448,7 +448,6 @@ impl<T: ?Sized> *const T {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(ptr_wrapping_offset)]\n     /// // Iterate using a raw pointer in increments of two elements\n     /// let data = [1u8, 2, 3, 4, 5];\n     /// let mut ptr: *const u8 = data.as_ptr();\n@@ -463,7 +462,7 @@ impl<T: ?Sized> *const T {\n     ///     ptr = ptr.wrapping_offset(step);\n     /// }\n     /// ```\n-    #[unstable(feature = \"ptr_wrapping_offset\", issue = \"37570\")]\n+    #[stable(feature = \"ptr_wrapping_offset\", since = \"1.16.0\")]\n     #[inline]\n     pub fn wrapping_offset(self, count: isize) -> *const T where T: Sized {\n         unsafe {\n@@ -572,7 +571,6 @@ impl<T: ?Sized> *mut T {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(ptr_wrapping_offset)]\n     /// // Iterate using a raw pointer in increments of two elements\n     /// let mut data = [1u8, 2, 3, 4, 5];\n     /// let mut ptr: *mut u8 = data.as_mut_ptr();\n@@ -587,7 +585,7 @@ impl<T: ?Sized> *mut T {\n     /// }\n     /// assert_eq!(&data, &[0, 2, 0, 4, 0]);\n     /// ```\n-    #[unstable(feature = \"ptr_wrapping_offset\", issue = \"37570\")]\n+    #[stable(feature = \"ptr_wrapping_offset\", since = \"1.16.0\")]\n     #[inline]\n     pub fn wrapping_offset(self, count: isize) -> *mut T where T: Sized {\n         unsafe {"}, {"sha": "0a2e363965347830468dd2283c34e967e7a68df6", "filename": "src/libcore/result.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/671b1c1d895c54903a10555196b789ebd5ff2c90/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671b1c1d895c54903a10555196b789ebd5ff2c90/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=671b1c1d895c54903a10555196b789ebd5ff2c90", "patch": "@@ -840,8 +840,6 @@ impl<T: Default, E> Result<T, E> {\n     /// `Err` on error.\n     ///\n     /// ```\n-    /// #![feature(result_unwrap_or_default)]\n-    ///\n     /// let good_year_from_input = \"1909\";\n     /// let bad_year_from_input = \"190blarg\";\n     /// let good_year = good_year_from_input.parse().unwrap_or_default();\n@@ -854,7 +852,7 @@ impl<T: Default, E> Result<T, E> {\n     /// [`FromStr`]: ../../std/str/trait.FromStr.html\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"result_unwrap_or_default\", issue = \"37516\")]\n+    #[stable(feature = \"result_unwrap_or_default\", since = \"1.16.0\")]\n     pub fn unwrap_or_default(self) -> T {\n         match self {\n             Ok(x) => x,"}, {"sha": "8e5893b5ecbed8de5b000b7b9333ae71be31b36c", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/671b1c1d895c54903a10555196b789ebd5ff2c90/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671b1c1d895c54903a10555196b789ebd5ff2c90/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=671b1c1d895c54903a10555196b789ebd5ff2c90", "patch": "@@ -32,7 +32,6 @@\n #![feature(unicode)]\n #![feature(unique)]\n #![feature(ordering_chaining)]\n-#![feature(result_unwrap_or_default)]\n #![feature(ptr_unaligned)]\n \n extern crate core;"}, {"sha": "05cfb6352fbb800e49a8b8210ff7d3814963b709", "filename": "src/libserialize/collection_impls.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/671b1c1d895c54903a10555196b789ebd5ff2c90/src%2Flibserialize%2Fcollection_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671b1c1d895c54903a10555196b789ebd5ff2c90/src%2Flibserialize%2Fcollection_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fcollection_impls.rs?ref=671b1c1d895c54903a10555196b789ebd5ff2c90", "patch": "@@ -11,11 +11,9 @@\n //! Implementations of serialization for structures found in libcollections\n \n use std::hash::{Hash, BuildHasher};\n-use std::mem;\n \n use {Decodable, Encodable, Decoder, Encoder};\n use std::collections::{LinkedList, VecDeque, BTreeMap, BTreeSet, HashMap, HashSet};\n-use collections::enum_set::{EnumSet, CLike};\n \n impl<\n     T: Encodable\n@@ -128,33 +126,6 @@ impl<\n     }\n }\n \n-impl<\n-    T: Encodable + CLike\n-> Encodable for EnumSet<T> {\n-    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        let mut bits = 0;\n-        for item in self {\n-            bits |= 1 << item.to_usize();\n-        }\n-        s.emit_usize(bits)\n-    }\n-}\n-\n-impl<\n-    T: Decodable + CLike\n-> Decodable for EnumSet<T> {\n-    fn decode<D: Decoder>(d: &mut D) -> Result<EnumSet<T>, D::Error> {\n-        let bits = d.read_usize()?;\n-        let mut set = EnumSet::new();\n-        for bit in 0..(mem::size_of::<usize>()*8) {\n-            if bits & (1 << bit) != 0 {\n-                set.insert(CLike::from_usize(bit));\n-            }\n-        }\n-        Ok(set)\n-    }\n-}\n-\n impl<K, V, S> Encodable for HashMap<K, V, S>\n     where K: Encodable + Hash + Eq,\n           V: Encodable,"}, {"sha": "1cb83fa33da068ecca77c6aaedc1111d8f0c55fe", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/671b1c1d895c54903a10555196b789ebd5ff2c90/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671b1c1d895c54903a10555196b789ebd5ff2c90/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=671b1c1d895c54903a10555196b789ebd5ff2c90", "patch": "@@ -30,7 +30,6 @@ Core encoding and decoding interfaces.\n #![feature(box_syntax)]\n #![feature(collections)]\n #![feature(core_intrinsics)]\n-#![feature(enumset)]\n #![feature(specialization)]\n #![feature(staged_api)]\n #![cfg_attr(test, feature(test))]"}, {"sha": "249627c430cb7d49299b5cda6a3c4b1d9da91384", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/671b1c1d895c54903a10555196b789ebd5ff2c90/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671b1c1d895c54903a10555196b789ebd5ff2c90/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=671b1c1d895c54903a10555196b789ebd5ff2c90", "patch": "@@ -404,7 +404,6 @@ impl File {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(set_permissions_atomic)]\n     /// # fn foo() -> std::io::Result<()> {\n     /// use std::fs::File;\n     ///\n@@ -415,7 +414,7 @@ impl File {\n     /// # Ok(())\n     /// # }\n     /// ```\n-    #[unstable(feature = \"set_permissions_atomic\", issue=\"37916\")]\n+    #[stable(feature = \"set_permissions_atomic\", since = \"1.16.0\")]\n     pub fn set_permissions(&self, perm: Permissions) -> io::Result<()> {\n         self.inner.set_permissions(perm.0)\n     }"}, {"sha": "751878c687c0150c21d53932b03d39e96c8250df", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/671b1c1d895c54903a10555196b789ebd5ff2c90/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671b1c1d895c54903a10555196b789ebd5ff2c90/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=671b1c1d895c54903a10555196b789ebd5ff2c90", "patch": "@@ -148,8 +148,6 @@ impl SocketAddr {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(sockaddr_checker)]\n-    ///\n     /// use std::net::{IpAddr, Ipv4Addr, SocketAddr};\n     ///\n     /// fn main() {\n@@ -158,7 +156,7 @@ impl SocketAddr {\n     ///     assert_eq!(socket.is_ipv6(), false);\n     /// }\n     /// ```\n-    #[unstable(feature = \"sockaddr_checker\", issue = \"36949\")]\n+    #[stable(feature = \"sockaddr_checker\", since = \"1.16.0\")]\n     pub fn is_ipv4(&self) -> bool {\n         match *self {\n             SocketAddr::V4(_) => true,\n@@ -172,8 +170,6 @@ impl SocketAddr {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(sockaddr_checker)]\n-    ///\n     /// use std::net::{IpAddr, Ipv6Addr, SocketAddr};\n     ///\n     /// fn main() {\n@@ -183,7 +179,7 @@ impl SocketAddr {\n     ///     assert_eq!(socket.is_ipv6(), true);\n     /// }\n     /// ```\n-    #[unstable(feature = \"sockaddr_checker\", issue = \"36949\")]\n+    #[stable(feature = \"sockaddr_checker\", since = \"1.16.0\")]\n     pub fn is_ipv6(&self) -> bool {\n         match *self {\n             SocketAddr::V4(_) => false,"}, {"sha": "7803cf728f2e98777855e0fa32e7f09e4985769b", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/671b1c1d895c54903a10555196b789ebd5ff2c90/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671b1c1d895c54903a10555196b789ebd5ff2c90/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=671b1c1d895c54903a10555196b789ebd5ff2c90", "patch": "@@ -196,8 +196,6 @@ impl IpAddr {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ipaddr_checker)]\n-    ///\n     /// use std::net::{IpAddr, Ipv4Addr, Ipv6Addr};\n     ///\n     /// fn main() {\n@@ -206,7 +204,7 @@ impl IpAddr {\n     ///                false);\n     /// }\n     /// ```\n-    #[unstable(feature = \"ipaddr_checker\", issue = \"36949\")]\n+    #[stable(feature = \"ipaddr_checker\", since = \"1.16.0\")]\n     pub fn is_ipv4(&self) -> bool {\n         match *self {\n             IpAddr::V4(_) => true,\n@@ -219,8 +217,6 @@ impl IpAddr {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ipaddr_checker)]\n-    ///\n     /// use std::net::{IpAddr, Ipv4Addr, Ipv6Addr};\n     ///\n     /// fn main() {\n@@ -229,7 +225,7 @@ impl IpAddr {\n     ///                true);\n     /// }\n     /// ```\n-    #[unstable(feature = \"ipaddr_checker\", issue = \"36949\")]\n+    #[stable(feature = \"ipaddr_checker\", since = \"1.16.0\")]\n     pub fn is_ipv6(&self) -> bool {\n         match *self {\n             IpAddr::V4(_) => false,"}, {"sha": "1419a4af4273831d81dc3017db2cfbde008e1b82", "filename": "src/libstd/sys/windows/ext/process.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/671b1c1d895c54903a10555196b789ebd5ff2c90/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671b1c1d895c54903a10555196b789ebd5ff2c90/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs?ref=671b1c1d895c54903a10555196b789ebd5ff2c90", "patch": "@@ -99,17 +99,17 @@ impl ExitStatusExt for process::ExitStatus {\n }\n \n /// Windows-specific extensions to the `std::process::Command` builder\n-#[unstable(feature = \"windows_process_extensions\", issue = \"37827\")]\n+#[stable(feature = \"windows_process_extensions\", since = \"1.16.0\")]\n pub trait CommandExt {\n     /// Sets the [process creation flags][1] to be passed to `CreateProcess`.\n     ///\n     /// These will always be ORed with `CREATE_UNICODE_ENVIRONMENT`.\n     /// [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/ms684863(v=vs.85).aspx\n-    #[unstable(feature = \"windows_process_extensions\", issue = \"37827\")]\n+    #[stable(feature = \"windows_process_extensions\", since = \"1.16.0\")]\n     fn creation_flags(&mut self, flags: u32) -> &mut process::Command;\n }\n \n-#[unstable(feature = \"windows_process_extensions\", issue = \"37827\")]\n+#[stable(feature = \"windows_process_extensions\", since = \"1.16.0\")]\n impl CommandExt for process::Command {\n     fn creation_flags(&mut self, flags: u32) -> &mut process::Command {\n         self.as_inner_mut().creation_flags(flags);"}, {"sha": "af7eaeb3106b2e73151cbd08a108fd44f3e5b8a7", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/671b1c1d895c54903a10555196b789ebd5ff2c90/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671b1c1d895c54903a10555196b789ebd5ff2c90/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=671b1c1d895c54903a10555196b789ebd5ff2c90", "patch": "@@ -154,14 +154,12 @@ impl Duration {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(duration_checked_ops)]\n-    ///\n     /// use std::time::Duration;\n     ///\n     /// assert_eq!(Duration::new(0, 0).checked_add(Duration::new(0, 1)), Some(Duration::new(0, 1)));\n     /// assert_eq!(Duration::new(1, 0).checked_add(Duration::new(std::u64::MAX, 0)), None);\n     /// ```\n-    #[unstable(feature = \"duration_checked_ops\", issue = \"35774\")]\n+    #[stable(feature = \"duration_checked_ops\", since = \"1.16.0\")]\n     #[inline]\n     pub fn checked_add(self, rhs: Duration) -> Option<Duration> {\n         if let Some(mut secs) = self.secs.checked_add(rhs.secs) {\n@@ -194,14 +192,12 @@ impl Duration {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(duration_checked_ops)]\n-    ///\n     /// use std::time::Duration;\n     ///\n     /// assert_eq!(Duration::new(0, 1).checked_sub(Duration::new(0, 0)), Some(Duration::new(0, 1)));\n     /// assert_eq!(Duration::new(0, 0).checked_sub(Duration::new(0, 1)), None);\n     /// ```\n-    #[unstable(feature = \"duration_checked_ops\", issue = \"35774\")]\n+    #[stable(feature = \"duration_checked_ops\", since = \"1.16.0\")]\n     #[inline]\n     pub fn checked_sub(self, rhs: Duration) -> Option<Duration> {\n         if let Some(mut secs) = self.secs.checked_sub(rhs.secs) {\n@@ -232,14 +228,12 @@ impl Duration {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(duration_checked_ops)]\n-    ///\n     /// use std::time::Duration;\n     ///\n     /// assert_eq!(Duration::new(0, 500_000_001).checked_mul(2), Some(Duration::new(1, 2)));\n     /// assert_eq!(Duration::new(std::u64::MAX - 1, 0).checked_mul(2), None);\n     /// ```\n-    #[unstable(feature = \"duration_checked_ops\", issue = \"35774\")]\n+    #[stable(feature = \"duration_checked_ops\", since = \"1.16.0\")]\n     #[inline]\n     pub fn checked_mul(self, rhs: u32) -> Option<Duration> {\n         // Multiply nanoseconds as u64, because it cannot overflow that way.\n@@ -269,15 +263,13 @@ impl Duration {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(duration_checked_ops)]\n-    ///\n     /// use std::time::Duration;\n     ///\n     /// assert_eq!(Duration::new(2, 0).checked_div(2), Some(Duration::new(1, 0)));\n     /// assert_eq!(Duration::new(1, 0).checked_div(2), Some(Duration::new(0, 500_000_000)));\n     /// assert_eq!(Duration::new(2, 0).checked_div(0), None);\n     /// ```\n-    #[unstable(feature = \"duration_checked_ops\", issue = \"35774\")]\n+    #[stable(feature = \"duration_checked_ops\", since = \"1.16.0\")]\n     #[inline]\n     pub fn checked_div(self, rhs: u32) -> Option<Duration> {\n         if rhs != 0 {"}]}