{"sha": "f77b68a3cb0b4a8f611322934c4c4d9335167560", "node_id": "C_kwDOAAsO6NoAKGY3N2I2OGEzY2IwYjRhOGY2MTEzMjI5MzRjNGM0ZDkzMzUxNjc1NjA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-08T17:29:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-08T17:29:57Z"}, "message": "Auto merge of #13860 - danieleades:clippy, r=lnicola\n\nfix a bunch of clippy lints\n\nfixes a bunch of clippy lints for fun and profit\n\ni'm aware of this repo's position on clippy. The changes are split into separate commits so they can be reviewed separately", "tree": {"sha": "5c094e1c882cb6005dc7b52139c2a4cb4a153f0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c094e1c882cb6005dc7b52139c2a4cb4a153f0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f77b68a3cb0b4a8f611322934c4c4d9335167560", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f77b68a3cb0b4a8f611322934c4c4d9335167560", "html_url": "https://github.com/rust-lang/rust/commit/f77b68a3cb0b4a8f611322934c4c4d9335167560", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f77b68a3cb0b4a8f611322934c4c4d9335167560/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bd1a095936f2c16493743a05f6f14285c98ec8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bd1a095936f2c16493743a05f6f14285c98ec8a", "html_url": "https://github.com/rust-lang/rust/commit/1bd1a095936f2c16493743a05f6f14285c98ec8a"}, {"sha": "bb083b82023a5fc187a01c4db98c3ac40d9b351d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb083b82023a5fc187a01c4db98c3ac40d9b351d", "html_url": "https://github.com/rust-lang/rust/commit/bb083b82023a5fc187a01c4db98c3ac40d9b351d"}], "stats": {"total": 673, "additions": 298, "deletions": 375}, "files": [{"sha": "590a93fbaa1a0f003613650e75d918d1ef48b896", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -408,8 +408,7 @@ impl CargoHandle {\n             Ok(())\n         } else {\n             Err(io::Error::new(io::ErrorKind::Other, format!(\n-                \"Cargo watcher failed, the command produced no valid metadata (exit code: {:?}):\\n{}\",\n-                exit_status, error\n+                \"Cargo watcher failed, the command produced no valid metadata (exit code: {exit_status:?}):\\n{error}\"\n             )))\n         }\n     }"}, {"sha": "e6b05f27a5447b20606e1162769af1a510bdacda", "filename": "crates/hir-def/src/data.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fdata.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -234,8 +234,7 @@ impl TraitData {\n         let item_tree = tree_id.item_tree(db);\n         let tr_def = &item_tree[tree_id.value];\n         let _cx = stdx::panic_context::enter(format!(\n-            \"trait_data_query({:?} -> {:?} -> {:?})\",\n-            tr, tr_loc, tr_def\n+            \"trait_data_query({tr:?} -> {tr_loc:?} -> {tr_def:?})\"\n         ));\n         let name = tr_def.name.clone();\n         let is_auto = tr_def.is_auto;\n@@ -543,7 +542,7 @@ impl<'a> AssocItemCollector<'a> {\n             if !attrs.is_cfg_enabled(self.expander.cfg_options()) {\n                 self.inactive_diagnostics.push(DefDiagnostic::unconfigured_code(\n                     self.module_id.local_id,\n-                    InFile::new(self.expander.current_file_id(), item.ast_id(&item_tree).upcast()),\n+                    InFile::new(self.expander.current_file_id(), item.ast_id(item_tree).upcast()),\n                     attrs.cfg().unwrap(),\n                     self.expander.cfg_options().clone(),\n                 ));\n@@ -552,7 +551,7 @@ impl<'a> AssocItemCollector<'a> {\n \n             'attrs: for attr in &*attrs {\n                 let ast_id =\n-                    AstId::new(self.expander.current_file_id(), item.ast_id(&item_tree).upcast());\n+                    AstId::new(self.expander.current_file_id(), item.ast_id(item_tree).upcast());\n                 let ast_id_with_path = AstIdWithPath { path: (*attr.path).clone(), ast_id };\n \n                 if let Ok(ResolvedAttr::Macro(call_id)) = self.def_map.resolve_attr_macro(\n@@ -619,10 +618,8 @@ impl<'a> AssocItemCollector<'a> {\n \n                         let ast_id_map = self.db.ast_id_map(self.expander.current_file_id());\n                         let call = ast_id_map.get(call.ast_id).to_node(&root);\n-                        let _cx = stdx::panic_context::enter(format!(\n-                            \"collect_items MacroCall: {}\",\n-                            call\n-                        ));\n+                        let _cx =\n+                            stdx::panic_context::enter(format!(\"collect_items MacroCall: {call}\"));\n                         let res = self.expander.enter_expand::<ast::MacroItems>(self.db, call);\n \n                         if let Ok(ExpandResult { value: Some((mark, _)), .. }) = res {"}, {"sha": "ddd7ad99e9ad3cd083821803bcb0b64ae700dd98", "filename": "crates/hir-def/src/find_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Ffind_path.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -176,7 +176,7 @@ fn find_path_for_module(\n \n     // - if relative paths are fine, check if we are searching for a parent\n     if prefixed.filter(PrefixKind::is_absolute).is_none() {\n-        if let modpath @ Some(_) = find_self_super(&def_map, module_id, from) {\n+        if let modpath @ Some(_) = find_self_super(def_map, module_id, from) {\n             return modpath;\n         }\n     }"}, {"sha": "f74559f5d66346bb9a148974a7ae82b37f02209f", "filename": "crates/hir-def/src/generics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fgenerics.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -142,8 +142,8 @@ pub enum WherePredicateTypeTarget {\n \n impl GenericParams {\n     /// Iterator of type_or_consts field\n-    pub fn iter<'a>(\n-        &'a self,\n+    pub fn iter(\n+        &self,\n     ) -> impl DoubleEndedIterator<Item = (Idx<TypeOrConstParamData>, &TypeOrConstParamData)> {\n         self.type_or_consts.iter()\n     }"}, {"sha": "63e92df0e72044baf97b193c58865747d9d8b4fe", "filename": "crates/hir-def/src/import_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-def%2Fsrc%2Fimport_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-def%2Fsrc%2Fimport_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fimport_map.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -393,8 +393,8 @@ impl Query {\n /// Searches dependencies of `krate` for an importable path matching `query`.\n ///\n /// This returns a list of items that could be imported from dependencies of `krate`.\n-pub fn search_dependencies<'a>(\n-    db: &'a dyn DefDatabase,\n+pub fn search_dependencies(\n+    db: &dyn DefDatabase,\n     krate: CrateId,\n     query: Query,\n ) -> FxHashSet<ItemInNs> {"}, {"sha": "c7b213b7e981446e90efefbb2933e0c407085995", "filename": "crates/hir-def/src/item_scope.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fitem_scope.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -96,7 +96,7 @@ pub(crate) enum BuiltinShadowMode {\n /// Legacy macros can only be accessed through special methods like `get_legacy_macros`.\n /// Other methods will only resolve values, types and module scoped macros only.\n impl ItemScope {\n-    pub fn entries<'a>(&'a self) -> impl Iterator<Item = (&'a Name, PerNs)> + 'a {\n+    pub fn entries(&self) -> impl Iterator<Item = (&Name, PerNs)> + '_ {\n         // FIXME: shadowing\n         self.types\n             .keys()\n@@ -159,18 +159,17 @@ impl ItemScope {\n     pub(crate) fn name_of(&self, item: ItemInNs) -> Option<(&Name, Visibility)> {\n         let (def, mut iter) = match item {\n             ItemInNs::Macros(def) => {\n-                return self\n-                    .macros\n-                    .iter()\n-                    .find_map(|(name, &(other_def, vis))| (other_def == def).then(|| (name, vis)));\n+                return self.macros.iter().find_map(|(name, &(other_def, vis))| {\n+                    (other_def == def).then_some((name, vis))\n+                });\n             }\n             ItemInNs::Types(def) => (def, self.types.iter()),\n             ItemInNs::Values(def) => (def, self.values.iter()),\n         };\n-        iter.find_map(|(name, &(other_def, vis))| (other_def == def).then(|| (name, vis)))\n+        iter.find_map(|(name, &(other_def, vis))| (other_def == def).then_some((name, vis)))\n     }\n \n-    pub(crate) fn traits<'a>(&'a self) -> impl Iterator<Item = TraitId> + 'a {\n+    pub(crate) fn traits(&self) -> impl Iterator<Item = TraitId> + '_ {\n         self.types\n             .values()\n             .filter_map(|&(def, _)| match def {\n@@ -327,7 +326,7 @@ impl ItemScope {\n         changed\n     }\n \n-    pub(crate) fn resolutions<'a>(&'a self) -> impl Iterator<Item = (Option<Name>, PerNs)> + 'a {\n+    pub(crate) fn resolutions(&self) -> impl Iterator<Item = (Option<Name>, PerNs)> + '_ {\n         self.entries().map(|(name, res)| (Some(name.clone()), res)).chain(\n             self.unnamed_trait_imports\n                 .iter()"}, {"sha": "79c85d118316a9d03108cd3ac010e5fe36d51aca", "filename": "crates/hir-def/src/macro_expansion_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -170,7 +170,7 @@ pub fn identity_when_valid(_attr: TokenStream, item: TokenStream) -> TokenStream\n             }\n             let pp = pretty_print_macro_expansion(\n                 parse.syntax_node(),\n-                show_token_ids.then(|| &*token_map),\n+                show_token_ids.then_some(&*token_map),\n             );\n             let indent = IndentLevel::from_node(call.syntax());\n             let pp = reindent(indent, pp);"}, {"sha": "160203b7783443e5ccbf456027e093e68a954c53", "filename": "crates/hir-def/src/nameres/collector.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -67,7 +67,7 @@ pub(super) fn collect_defs(db: &dyn DefDatabase, mut def_map: DefMap, tree_id: T\n         let dep_def_map = db.crate_def_map(dep.crate_id);\n         let dep_root = dep_def_map.module_id(dep_def_map.root);\n \n-        deps.insert(dep.as_name(), dep_root.into());\n+        deps.insert(dep.as_name(), dep_root);\n \n         if dep.is_prelude() && !tree_id.is_block() {\n             def_map.extern_prelude.insert(dep.as_name(), dep_root);\n@@ -1094,7 +1094,7 @@ impl DefCollector<'_> {\n                         ast_id,\n                         *expand_to,\n                         self.def_map.krate,\n-                        &resolver_def_id,\n+                        resolver_def_id,\n                         &mut |_err| (),\n                     );\n                     if let Ok(Ok(call_id)) = call_id {\n@@ -1110,7 +1110,7 @@ impl DefCollector<'_> {\n                         *derive_attr,\n                         *derive_pos as u32,\n                         self.def_map.krate,\n-                        &resolver,\n+                        resolver,\n                     );\n \n                     if let Ok((macro_id, def_id, call_id)) = id {\n@@ -2085,7 +2085,7 @@ impl ModCollector<'_, '_> {\n                                 .scope\n                                 .get_legacy_macro(name)\n                                 .and_then(|it| it.last())\n-                                .map(|&it| macro_id_to_def_id(self.def_collector.db, it.into()))\n+                                .map(|&it| macro_id_to_def_id(self.def_collector.db, it))\n                         },\n                     )\n                 })"}, {"sha": "1d9d5cccded2333a3d51d598476e6f01b789e02c", "filename": "crates/hir-def/src/nameres/path_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fpath_resolution.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -390,7 +390,7 @@ impl DefMap {\n             .get_legacy_macro(name)\n             // FIXME: shadowing\n             .and_then(|it| it.last())\n-            .map_or_else(PerNs::none, |&m| PerNs::macros(m.into(), Visibility::Public));\n+            .map_or_else(PerNs::none, |&m| PerNs::macros(m, Visibility::Public));\n         let from_scope = self[module].scope.get(name);\n         let from_builtin = match self.block {\n             Some(_) => {"}, {"sha": "1ef7f9577fe8b24c08b31c726fa1582de2dff87d", "filename": "crates/hir-def/src/resolver.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fresolver.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -381,7 +381,7 @@ impl Resolver {\n         });\n         def_map[module_id].scope.legacy_macros().for_each(|(name, macs)| {\n             macs.iter().for_each(|&mac| {\n-                res.add(name, ScopeDef::ModuleDef(ModuleDefId::MacroId(MacroId::from(mac))));\n+                res.add(name, ScopeDef::ModuleDef(ModuleDefId::MacroId(mac)));\n             })\n         });\n         def_map.extern_prelude().for_each(|(name, &def)| {\n@@ -517,10 +517,7 @@ impl Scope {\n                 });\n                 m.def_map[m.module_id].scope.legacy_macros().for_each(|(name, macs)| {\n                     macs.iter().for_each(|&mac| {\n-                        acc.add(\n-                            name,\n-                            ScopeDef::ModuleDef(ModuleDefId::MacroId(MacroId::from(mac))),\n-                        );\n+                        acc.add(name, ScopeDef::ModuleDef(ModuleDefId::MacroId(mac)));\n                     })\n                 });\n             }"}, {"sha": "58d192f9fe0085b145f39acef889b29b878f5996", "filename": "crates/hir-expand/src/builtin_attr_macro.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-expand%2Fsrc%2Fbuiltin_attr_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-expand%2Fsrc%2Fbuiltin_attr_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fbuiltin_attr_macro.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -115,7 +115,8 @@ pub fn pseudo_derive_attr_expansion(\n     };\n \n     let mut token_trees = Vec::new();\n-    for tt in (&args.token_trees)\n+    for tt in args\n+        .token_trees\n         .split(|tt| matches!(tt, tt::TokenTree::Leaf(tt::Leaf::Punct(tt::Punct { char: ',', .. }))))\n     {\n         token_trees.push(mk_leaf('#'));"}, {"sha": "5522bdf3b3fe2a9cd10e1b5d2eccaec9c80f9dd7", "filename": "crates/hir-expand/src/builtin_fn_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -449,7 +449,7 @@ fn concat_bytes_expand(\n                 match token.kind() {\n                     syntax::SyntaxKind::BYTE => bytes.push(token.text().to_string()),\n                     syntax::SyntaxKind::BYTE_STRING => {\n-                        let components = unquote_byte_string(lit).unwrap_or_else(Vec::new);\n+                        let components = unquote_byte_string(lit).unwrap_or_default();\n                         components.into_iter().for_each(|x| bytes.push(x.to_string()));\n                     }\n                     _ => {"}, {"sha": "a1474c44e6c6f27bec6e7e0f1f9937f0d7e642ee", "filename": "crates/hir-expand/src/eager.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-expand%2Fsrc%2Feager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-expand%2Fsrc%2Feager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Feager.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -208,7 +208,7 @@ fn eager_macro_recur(\n     // Collect replacement\n     for child in children {\n         let def = match child.path().and_then(|path| ModPath::from_src(db, path, hygiene)) {\n-            Some(path) => macro_resolver(path.clone()).ok_or_else(|| UnresolvedMacro { path })?,\n+            Some(path) => macro_resolver(path.clone()).ok_or(UnresolvedMacro { path })?,\n             None => {\n                 diagnostic_sink(ExpandError::Other(\"malformed macro invocation\".into()));\n                 continue;"}, {"sha": "e8b3e312aab7aa3a33149ae2ef7079cfe793555b", "filename": "crates/hir-expand/src/name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fname.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -62,7 +62,7 @@ impl<'a> UnescapedName<'a> {\n                     it.clone()\n                 }\n             }\n-            Repr::TupleField(it) => SmolStr::new(&it.to_string()),\n+            Repr::TupleField(it) => SmolStr::new(it.to_string()),\n         }\n     }\n }\n@@ -139,7 +139,7 @@ impl Name {\n     pub fn to_smol_str(&self) -> SmolStr {\n         match &self.0 {\n             Repr::Text(it) => it.clone(),\n-            Repr::TupleField(it) => SmolStr::new(&it.to_string()),\n+            Repr::TupleField(it) => SmolStr::new(it.to_string()),\n         }\n     }\n "}, {"sha": "cbcf8f74c556d77b5e4db521c59badd54389df40", "filename": "crates/hir-ty/src/autoderef.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-ty%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-ty%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fautoderef.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -82,11 +82,11 @@ pub(crate) fn autoderef_step(\n }\n \n // FIXME: replace uses of this with Autoderef above\n-pub fn autoderef<'a>(\n-    db: &'a dyn HirDatabase,\n+pub fn autoderef(\n+    db: &dyn HirDatabase,\n     env: Arc<TraitEnvironment>,\n     ty: Canonical<Ty>,\n-) -> impl Iterator<Item = Canonical<Ty>> + 'a {\n+) -> impl Iterator<Item = Canonical<Ty>> + '_ {\n     let mut table = InferenceTable::new(db, env);\n     let ty = table.instantiate_canonical(ty);\n     let mut autoderef = Autoderef::new(&mut table, ty);"}, {"sha": "8df70330fa9eb7d97806912ad454e34ae38c44ca", "filename": "crates/hir-ty/src/consteval.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -131,15 +131,15 @@ fn scalar_max(scalar: &Scalar) -> i128 {\n             IntTy::I16 => i16::MAX as i128,\n             IntTy::I32 => i32::MAX as i128,\n             IntTy::I64 => i64::MAX as i128,\n-            IntTy::I128 => i128::MAX as i128,\n+            IntTy::I128 => i128::MAX,\n         },\n         Scalar::Uint(x) => match x {\n             chalk_ir::UintTy::Usize => usize::MAX as i128,\n             chalk_ir::UintTy::U8 => u8::MAX as i128,\n             chalk_ir::UintTy::U16 => u16::MAX as i128,\n             chalk_ir::UintTy::U32 => u32::MAX as i128,\n             chalk_ir::UintTy::U64 => u64::MAX as i128,\n-            chalk_ir::UintTy::U128 => i128::MAX as i128, // ignore too big u128 for now\n+            chalk_ir::UintTy::U128 => i128::MAX, // ignore too big u128 for now\n         },\n         Scalar::Float(_) => 0,\n     }\n@@ -404,7 +404,7 @@ pub(crate) fn path_to_const(\n     args_lazy: impl FnOnce() -> Generics,\n     debruijn: DebruijnIndex,\n ) -> Option<Const> {\n-    match resolver.resolve_path_in_value_ns_fully(db.upcast(), &path) {\n+    match resolver.resolve_path_in_value_ns_fully(db.upcast(), path) {\n         Some(ValueNs::GenericParam(p)) => {\n             let ty = db.const_param_ty(p);\n             let args = args_lazy();\n@@ -511,10 +511,10 @@ pub(crate) fn const_eval_query_variant(\n     )\n }\n \n-pub(crate) fn eval_to_const<'a>(\n+pub(crate) fn eval_to_const(\n     expr: Idx<Expr>,\n     mode: ParamLoweringMode,\n-    ctx: &mut InferenceContext<'a>,\n+    ctx: &mut InferenceContext<'_>,\n     args: impl FnOnce() -> Generics,\n     debruijn: DebruijnIndex,\n ) -> Const {"}, {"sha": "3c930c077b3beeaf34e780820a6a9975f2fa9956", "filename": "crates/hir-ty/src/consteval/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -25,7 +25,6 @@ fn eval_goal(ra_fixture: &str) -> Result<ComputedExpr, ConstEvalError> {\n     let scope = &def_map[module_id.local_id].scope;\n     let const_id = scope\n         .declarations()\n-        .into_iter()\n         .find_map(|x| match x {\n             hir_def::ModuleDefId::ConstId(x) => {\n                 if db.const_data(x).name.as_ref()?.to_string() == \"GOAL\" {"}, {"sha": "8f9cdac3784c780adab80c4e9a4bf6078e69971b", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -961,7 +961,7 @@ impl<'a> InferenceContext<'a> {\n             Expr::RecordLit { path, fields, .. } => {\n                 let subs = fields.iter().map(|f| (f.name.clone(), f.expr));\n \n-                self.infer_record_pat_like(path.as_deref(), &rhs_ty, (), lhs.into(), subs)\n+                self.infer_record_pat_like(path.as_deref(), &rhs_ty, (), lhs, subs)\n             }\n             Expr::Underscore => rhs_ty.clone(),\n             _ => {\n@@ -1360,7 +1360,7 @@ impl<'a> InferenceContext<'a> {\n                             ty,\n                             c,\n                             ParamLoweringMode::Placeholder,\n-                            || generics(this.db.upcast(), (&this.resolver).generic_def().unwrap()),\n+                            || generics(this.db.upcast(), this.resolver.generic_def().unwrap()),\n                             DebruijnIndex::INNERMOST,\n                         )\n                     },"}, {"sha": "f154dac8e879d19e47b4b1380c86361139427574", "filename": "crates/hir-ty/src/infer/pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -153,7 +153,7 @@ impl<'a> InferenceContext<'a> {\n     ) -> Ty {\n         let mut expected = self.resolve_ty_shallow(expected);\n \n-        if is_non_ref_pat(&self.body, pat) {\n+        if is_non_ref_pat(self.body, pat) {\n             let mut pat_adjustments = Vec::new();\n             while let Some((inner, _lifetime, mutability)) = expected.as_reference() {\n                 pat_adjustments.push(expected.clone());\n@@ -220,7 +220,7 @@ impl<'a> InferenceContext<'a> {\n                 ),\n             Pat::Record { path: p, args: fields, ellipsis: _ } => {\n                 let subs = fields.iter().map(|f| (f.name.clone(), f.pat));\n-                self.infer_record_pat_like(p.as_deref(), &expected, default_bm, pat.into(), subs)\n+                self.infer_record_pat_like(p.as_deref(), &expected, default_bm, pat, subs)\n             }\n             Pat::Path(path) => {\n                 // FIXME use correct resolver for the surrounding expression"}, {"sha": "441503a300e5c2ae1a982657485a677ce0b3a4a2", "filename": "crates/hir-ty/src/interner.rs", "status": "modified", "additions": 28, "deletions": 37, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-ty%2Fsrc%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-ty%2Fsrc%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finterner.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -228,26 +228,23 @@ impl chalk_ir::interner::Interner for Interner {\n         Interned::new(InternedWrapper(chalk_ir::TyData { kind, flags }))\n     }\n \n-    fn ty_data<'a>(self, ty: &'a Self::InternedType) -> &'a chalk_ir::TyData<Self> {\n+    fn ty_data(self, ty: &Self::InternedType) -> &chalk_ir::TyData<Self> {\n         &ty.0\n     }\n \n     fn intern_lifetime(self, lifetime: chalk_ir::LifetimeData<Self>) -> Self::InternedLifetime {\n         Interned::new(InternedWrapper(lifetime))\n     }\n \n-    fn lifetime_data<'a>(\n-        self,\n-        lifetime: &'a Self::InternedLifetime,\n-    ) -> &'a chalk_ir::LifetimeData<Self> {\n+    fn lifetime_data(self, lifetime: &Self::InternedLifetime) -> &chalk_ir::LifetimeData<Self> {\n         &lifetime.0\n     }\n \n     fn intern_const(self, constant: chalk_ir::ConstData<Self>) -> Self::InternedConst {\n         Interned::new(InternedWrapper(constant))\n     }\n \n-    fn const_data<'a>(self, constant: &'a Self::InternedConst) -> &'a chalk_ir::ConstData<Self> {\n+    fn const_data(self, constant: &Self::InternedConst) -> &chalk_ir::ConstData<Self> {\n         &constant.0\n     }\n \n@@ -267,10 +264,10 @@ impl chalk_ir::interner::Interner for Interner {\n         parameter\n     }\n \n-    fn generic_arg_data<'a>(\n+    fn generic_arg_data(\n         self,\n-        parameter: &'a Self::InternedGenericArg,\n-    ) -> &'a chalk_ir::GenericArgData<Self> {\n+        parameter: &Self::InternedGenericArg,\n+    ) -> &chalk_ir::GenericArgData<Self> {\n         parameter\n     }\n \n@@ -285,11 +282,11 @@ impl chalk_ir::interner::Interner for Interner {\n         data.into_iter().collect()\n     }\n \n-    fn goal_data<'a>(self, goal: &'a Self::InternedGoal) -> &'a GoalData<Self> {\n+    fn goal_data(self, goal: &Self::InternedGoal) -> &GoalData<Self> {\n         goal\n     }\n \n-    fn goals_data<'a>(self, goals: &'a Self::InternedGoals) -> &'a [Goal<Interner>] {\n+    fn goals_data(self, goals: &Self::InternedGoals) -> &[Goal<Interner>] {\n         goals\n     }\n \n@@ -300,10 +297,7 @@ impl chalk_ir::interner::Interner for Interner {\n         Ok(Interned::new(InternedWrapper(data.into_iter().collect::<Result<_, _>>()?)))\n     }\n \n-    fn substitution_data<'a>(\n-        self,\n-        substitution: &'a Self::InternedSubstitution,\n-    ) -> &'a [GenericArg] {\n+    fn substitution_data(self, substitution: &Self::InternedSubstitution) -> &[GenericArg] {\n         &substitution.as_ref().0\n     }\n \n@@ -314,10 +308,10 @@ impl chalk_ir::interner::Interner for Interner {\n         data\n     }\n \n-    fn program_clause_data<'a>(\n+    fn program_clause_data(\n         self,\n-        clause: &'a Self::InternedProgramClause,\n-    ) -> &'a chalk_ir::ProgramClauseData<Self> {\n+        clause: &Self::InternedProgramClause,\n+    ) -> &chalk_ir::ProgramClauseData<Self> {\n         clause\n     }\n \n@@ -328,10 +322,10 @@ impl chalk_ir::interner::Interner for Interner {\n         Ok(Interned::new(InternedWrapper(data.into_iter().collect::<Result<_, _>>()?)))\n     }\n \n-    fn program_clauses_data<'a>(\n+    fn program_clauses_data(\n         self,\n-        clauses: &'a Self::InternedProgramClauses,\n-    ) -> &'a [chalk_ir::ProgramClause<Self>] {\n+        clauses: &Self::InternedProgramClauses,\n+    ) -> &[chalk_ir::ProgramClause<Self>] {\n         clauses\n     }\n \n@@ -342,10 +336,10 @@ impl chalk_ir::interner::Interner for Interner {\n         Ok(Interned::new(InternedWrapper(data.into_iter().collect::<Result<_, _>>()?)))\n     }\n \n-    fn quantified_where_clauses_data<'a>(\n+    fn quantified_where_clauses_data(\n         self,\n-        clauses: &'a Self::InternedQuantifiedWhereClauses,\n-    ) -> &'a [chalk_ir::QuantifiedWhereClause<Self>] {\n+        clauses: &Self::InternedQuantifiedWhereClauses,\n+    ) -> &[chalk_ir::QuantifiedWhereClause<Self>] {\n         clauses\n     }\n \n@@ -356,10 +350,10 @@ impl chalk_ir::interner::Interner for Interner {\n         Ok(Interned::new(InternedWrapper(data.into_iter().collect::<Result<_, _>>()?)))\n     }\n \n-    fn variable_kinds_data<'a>(\n+    fn variable_kinds_data(\n         self,\n-        parameter_kinds: &'a Self::InternedVariableKinds,\n-    ) -> &'a [chalk_ir::VariableKind<Self>] {\n+        parameter_kinds: &Self::InternedVariableKinds,\n+    ) -> &[chalk_ir::VariableKind<Self>] {\n         &parameter_kinds.as_ref().0\n     }\n \n@@ -370,10 +364,10 @@ impl chalk_ir::interner::Interner for Interner {\n         Ok(Interned::new(InternedWrapper(data.into_iter().collect::<Result<_, _>>()?)))\n     }\n \n-    fn canonical_var_kinds_data<'a>(\n+    fn canonical_var_kinds_data(\n         self,\n-        canonical_var_kinds: &'a Self::InternedCanonicalVarKinds,\n-    ) -> &'a [chalk_ir::CanonicalVarKind<Self>] {\n+        canonical_var_kinds: &Self::InternedCanonicalVarKinds,\n+    ) -> &[chalk_ir::CanonicalVarKind<Self>] {\n         canonical_var_kinds\n     }\n \n@@ -384,10 +378,10 @@ impl chalk_ir::interner::Interner for Interner {\n         data.into_iter().collect()\n     }\n \n-    fn constraints_data<'a>(\n+    fn constraints_data(\n         self,\n-        constraints: &'a Self::InternedConstraints,\n-    ) -> &'a [chalk_ir::InEnvironment<chalk_ir::Constraint<Self>>] {\n+        constraints: &Self::InternedConstraints,\n+    ) -> &[chalk_ir::InEnvironment<chalk_ir::Constraint<Self>>] {\n         constraints\n     }\n     fn debug_closure_id(\n@@ -410,10 +404,7 @@ impl chalk_ir::interner::Interner for Interner {\n         Ok(Interned::new(InternedWrapper(data.into_iter().collect::<Result<_, _>>()?)))\n     }\n \n-    fn variances_data<'a>(\n-        self,\n-        variances: &'a Self::InternedVariances,\n-    ) -> &'a [chalk_ir::Variance] {\n+    fn variances_data(self, variances: &Self::InternedVariances) -> &[chalk_ir::Variance] {\n         variances\n     }\n }"}, {"sha": "7a1cca3143ec85ccb6a132865e8cc1e8fb7b81e3", "filename": "crates/hir-ty/src/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-ty%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-ty%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flayout.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -241,7 +241,7 @@ pub fn layout_of_ty(db: &dyn HirDatabase, ty: &Ty, krate: CrateId) -> Result<Lay\n \n fn layout_of_unit(cx: &LayoutCx<'_>, dl: &TargetDataLayout) -> Result<Layout, LayoutError> {\n     cx.univariant::<RustcEnumVariantIdx, &&Layout>(\n-        &dl,\n+        dl,\n         &[],\n         &ReprOptions::default(),\n         StructKind::AlwaysSized,"}, {"sha": "53838cf41d2745fd4897d0e13dea3e368b0ca636", "filename": "crates/hir-ty/src/layout/tests.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftests.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -12,8 +12,7 @@ use super::layout_of_ty;\n fn eval_goal(ra_fixture: &str, minicore: &str) -> Result<Layout, LayoutError> {\n     // using unstable cargo features failed, fall back to using plain rustc\n     let mut cmd = std::process::Command::new(\"rustc\");\n-    cmd.args(&[\"-Z\", \"unstable-options\", \"--print\", \"target-spec-json\"])\n-        .env(\"RUSTC_BOOTSTRAP\", \"1\");\n+    cmd.args([\"-Z\", \"unstable-options\", \"--print\", \"target-spec-json\"]).env(\"RUSTC_BOOTSTRAP\", \"1\");\n     let output = cmd.output().unwrap();\n     assert!(output.status.success(), \"{}\", output.status);\n     let stdout = String::from_utf8(output.stdout).unwrap();\n@@ -30,15 +29,14 @@ fn eval_goal(ra_fixture: &str, minicore: &str) -> Result<Layout, LayoutError> {\n     let scope = &def_map[module_id.local_id].scope;\n     let adt_id = scope\n         .declarations()\n-        .into_iter()\n         .find_map(|x| match x {\n             hir_def::ModuleDefId::AdtId(x) => {\n                 let name = match x {\n                     hir_def::AdtId::StructId(x) => db.struct_data(x).name.to_smol_str(),\n                     hir_def::AdtId::UnionId(x) => db.union_data(x).name.to_smol_str(),\n                     hir_def::AdtId::EnumId(x) => db.enum_data(x).name.to_smol_str(),\n                 };\n-                (name == \"Goal\").then(|| x)\n+                (name == \"Goal\").then_some(x)\n             }\n             _ => None,\n         })"}, {"sha": "592410008a679c3e979cd3b34d21d3215577e986", "filename": "crates/hir-ty/src/lower.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flower.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -780,7 +780,7 @@ impl<'a> TyLoweringContext<'a> {\n                         |_, c, ty| {\n                             const_or_path_to_chalk(\n                                 self.db,\n-                                &self.resolver,\n+                                self.resolver,\n                                 ty,\n                                 c,\n                                 self.type_param_mode,\n@@ -1796,8 +1796,7 @@ pub(crate) fn impl_self_ty_query(db: &dyn HirDatabase, impl_id: ImplId) -> Binde\n     let impl_data = db.impl_data(impl_id);\n     let resolver = impl_id.resolver(db.upcast());\n     let _cx = stdx::panic_context::enter(format!(\n-        \"impl_self_ty_query({:?} -> {:?} -> {:?})\",\n-        impl_id, impl_loc, impl_data\n+        \"impl_self_ty_query({impl_id:?} -> {impl_loc:?} -> {impl_data:?})\"\n     ));\n     let generics = generics(db.upcast(), impl_id.into());\n     let ctx =\n@@ -1834,8 +1833,7 @@ pub(crate) fn impl_trait_query(db: &dyn HirDatabase, impl_id: ImplId) -> Option<\n     let impl_data = db.impl_data(impl_id);\n     let resolver = impl_id.resolver(db.upcast());\n     let _cx = stdx::panic_context::enter(format!(\n-        \"impl_trait_query({:?} -> {:?} -> {:?})\",\n-        impl_id, impl_loc, impl_data\n+        \"impl_trait_query({impl_id:?} -> {impl_loc:?} -> {impl_data:?})\"\n     ));\n     let ctx =\n         TyLoweringContext::new(db, &resolver).with_type_param_mode(ParamLoweringMode::Variable);\n@@ -1854,7 +1852,7 @@ pub(crate) fn return_type_impl_traits(\n     let ctx_ret = TyLoweringContext::new(db, &resolver)\n         .with_impl_trait_mode(ImplTraitLoweringMode::Opaque)\n         .with_type_param_mode(ParamLoweringMode::Variable);\n-    let _ret = (&ctx_ret).lower_ty(&data.ret_type);\n+    let _ret = ctx_ret.lower_ty(&data.ret_type);\n     let generics = generics(db.upcast(), def.into());\n     let return_type_impl_traits =\n         ReturnTypeImplTraits { impl_traits: ctx_ret.opaque_type_data.into_inner() };"}, {"sha": "2328dceb83901899ca67e1a999dc27e037d6420a", "filename": "crates/hir-ty/src/method_resolution.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -714,7 +714,7 @@ fn lookup_impl_assoc_item_for_trait_ref(\n     let impl_data = find_matching_impl(impls, table, trait_ref)?;\n     impl_data.items.iter().find_map(|it| match it {\n         AssocItemId::FunctionId(f) => {\n-            (db.function_data(*f).name == *name).then(|| AssocItemId::FunctionId(*f))\n+            (db.function_data(*f).name == *name).then_some(AssocItemId::FunctionId(*f))\n         }\n         AssocItemId::ConstId(c) => db\n             .const_data(*c)\n@@ -926,7 +926,7 @@ fn iterate_method_candidates_by_receiver(\n     while let Some((self_ty, _)) = autoderef.next() {\n         iterate_inherent_methods(\n             &self_ty,\n-            &mut autoderef.table,\n+            autoderef.table,\n             name,\n             Some(&receiver_ty),\n             Some(receiver_adjustments.clone()),\n@@ -941,7 +941,7 @@ fn iterate_method_candidates_by_receiver(\n     while let Some((self_ty, _)) = autoderef.next() {\n         iterate_trait_method_candidates(\n             &self_ty,\n-            &mut autoderef.table,\n+            autoderef.table,\n             traits_in_scope,\n             name,\n             Some(&receiver_ty),\n@@ -1246,7 +1246,7 @@ fn is_valid_candidate(\n                     let expected_self_ty = TyBuilder::impl_self_ty(db, impl_id)\n                         .fill_with_inference_vars(table)\n                         .build();\n-                    table.unify(&expected_self_ty, &self_ty)\n+                    table.unify(&expected_self_ty, self_ty)\n                 });\n                 if !self_ty_matches {\n                     cov_mark::hit!(const_candidate_self_type_mismatch);"}, {"sha": "778a6b82047ef1da1cdf8e05590217ee8dc1cf5e", "filename": "crates/hir-ty/src/traits.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftraits.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -55,13 +55,10 @@ impl TraitEnvironment {\n         }\n     }\n \n-    pub fn traits_in_scope_from_clauses<'a>(\n-        &'a self,\n-        ty: Ty,\n-    ) -> impl Iterator<Item = TraitId> + 'a {\n+    pub fn traits_in_scope_from_clauses(&self, ty: Ty) -> impl Iterator<Item = TraitId> + '_ {\n         self.traits_from_clauses\n             .iter()\n-            .filter_map(move |(self_ty, trait_id)| (*self_ty == ty).then(|| *trait_id))\n+            .filter_map(move |(self_ty, trait_id)| (*self_ty == ty).then_some(*trait_id))\n     }\n }\n "}, {"sha": "9893566bd549c9e2648ab8879f193150807adaea", "filename": "crates/hir-ty/src/utils.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir-ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Futils.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -184,9 +184,7 @@ pub(crate) struct Generics {\n }\n \n impl Generics {\n-    pub(crate) fn iter_id<'a>(\n-        &'a self,\n-    ) -> impl Iterator<Item = Either<TypeParamId, ConstParamId>> + 'a {\n+    pub(crate) fn iter_id(&self) -> impl Iterator<Item = Either<TypeParamId, ConstParamId>> + '_ {\n         self.iter().map(|(id, data)| match data {\n             TypeOrConstParamData::TypeParamData(_) => Either::Left(TypeParamId::from_unchecked(id)),\n             TypeOrConstParamData::ConstParamData(_) => {\n@@ -216,9 +214,9 @@ impl Generics {\n     }\n \n     /// Iterator over types and const params of parent.\n-    pub(crate) fn iter_parent<'a>(\n-        &'a self,\n-    ) -> impl DoubleEndedIterator<Item = (TypeOrConstParamId, &'a TypeOrConstParamData)> + 'a {\n+    pub(crate) fn iter_parent(\n+        &self,\n+    ) -> impl DoubleEndedIterator<Item = (TypeOrConstParamId, &TypeOrConstParamData)> {\n         self.parent_generics().into_iter().flat_map(|it| {\n             let to_toc_id =\n                 move |(local_id, p)| (TypeOrConstParamId { parent: it.def, local_id }, p);"}, {"sha": "2b24b5c31b27659662246664847600f48fea6dda", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -608,7 +608,7 @@ impl Module {\n     pub fn legacy_macros(self, db: &dyn HirDatabase) -> Vec<Macro> {\n         let def_map = self.id.def_map(db.upcast());\n         let scope = &def_map[self.id.local_id].scope;\n-        scope.legacy_macros().flat_map(|(_, it)| it).map(|&it| MacroId::from(it).into()).collect()\n+        scope.legacy_macros().flat_map(|(_, it)| it).map(|&it| it.into()).collect()\n     }\n \n     pub fn impl_defs(self, db: &dyn HirDatabase) -> Vec<Impl> {\n@@ -1559,7 +1559,7 @@ impl Function {\n     }\n \n     pub fn self_param(self, db: &dyn HirDatabase) -> Option<SelfParam> {\n-        self.has_self_param(db).then(|| SelfParam { func: self.id })\n+        self.has_self_param(db).then_some(SelfParam { func: self.id })\n     }\n \n     pub fn assoc_fn_params(self, db: &dyn HirDatabase) -> Vec<Param> {\n@@ -2411,7 +2411,7 @@ pub struct DeriveHelper {\n \n impl DeriveHelper {\n     pub fn derive(&self) -> Macro {\n-        Macro { id: self.derive.into() }\n+        Macro { id: self.derive }\n     }\n \n     pub fn name(&self, db: &dyn HirDatabase) -> Name {\n@@ -2781,7 +2781,7 @@ impl Impl {\n     pub fn all_for_trait(db: &dyn HirDatabase, trait_: Trait) -> Vec<Impl> {\n         let krate = trait_.module(db).krate();\n         let mut all = Vec::new();\n-        for Crate { id } in krate.transitive_reverse_dependencies(db).into_iter() {\n+        for Crate { id } in krate.transitive_reverse_dependencies(db) {\n             let impls = db.trait_impls_in_crate(id);\n             all.extend(impls.for_trait(trait_.id).map(Self::from))\n         }"}, {"sha": "e0d26103915c0881f51a1a4cbea2f5757fedc258", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -795,7 +795,7 @@ impl<'db> SemanticsImpl<'db> {\n                 // requeue the tokens we got from mapping our current token down\n                 stack.extend(mapped_tokens);\n                 // if the length changed we have found a mapping for the token\n-                (stack.len() != len).then(|| ())\n+                (stack.len() != len).then_some(())\n             };\n \n         // Remap the next token in the queue into a macro call its in, if it is not being remapped\n@@ -1221,7 +1221,7 @@ impl<'db> SemanticsImpl<'db> {\n         krate\n             .dependencies(self.db)\n             .into_iter()\n-            .find_map(|dep| (dep.name == name).then(|| dep.krate))\n+            .find_map(|dep| (dep.name == name).then_some(dep.krate))\n     }\n \n     fn resolve_variant(&self, record_lit: ast::RecordExpr) -> Option<VariantId> {\n@@ -1252,7 +1252,7 @@ impl<'db> SemanticsImpl<'db> {\n \n     fn to_def<T: ToDef>(&self, src: &T) -> Option<T::Def> {\n         let src = self.find_file(src.syntax()).with_value(src).cloned();\n-        T::to_def(&self, src)\n+        T::to_def(self, src)\n     }\n \n     fn to_module_def(&self, file: FileId) -> impl Iterator<Item = Module> {"}, {"sha": "059b80bcf1392b6538e758f9b3ce0046422ede8c", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -228,7 +228,7 @@ impl SourceAnalyzer {\n         db: &dyn HirDatabase,\n         pat: &ast::Pat,\n     ) -> Option<SmallVec<[Type; 1]>> {\n-        let pat_id = self.pat_id(&pat)?;\n+        let pat_id = self.pat_id(pat)?;\n         let infer = self.infer.as_ref()?;\n         Some(\n             infer\n@@ -270,7 +270,7 @@ impl SourceAnalyzer {\n         db: &dyn HirDatabase,\n         await_expr: &ast::AwaitExpr,\n     ) -> Option<FunctionId> {\n-        let mut ty = self.ty_of_expr(db, &await_expr.expr()?.into())?.clone();\n+        let mut ty = self.ty_of_expr(db, &await_expr.expr()?)?.clone();\n \n         let into_future_trait = self\n             .resolver\n@@ -316,7 +316,7 @@ impl SourceAnalyzer {\n             ast::UnaryOp::Not => name![not],\n             ast::UnaryOp::Neg => name![neg],\n         };\n-        let ty = self.ty_of_expr(db, &prefix_expr.expr()?.into())?;\n+        let ty = self.ty_of_expr(db, &prefix_expr.expr()?)?;\n \n         let (op_trait, op_fn) = self.lang_trait_fn(db, &lang_item_name, &lang_item_name)?;\n         // HACK: subst for all methods coincides with that for their trait because the methods\n@@ -331,8 +331,8 @@ impl SourceAnalyzer {\n         db: &dyn HirDatabase,\n         index_expr: &ast::IndexExpr,\n     ) -> Option<FunctionId> {\n-        let base_ty = self.ty_of_expr(db, &index_expr.base()?.into())?;\n-        let index_ty = self.ty_of_expr(db, &index_expr.index()?.into())?;\n+        let base_ty = self.ty_of_expr(db, &index_expr.base()?)?;\n+        let index_ty = self.ty_of_expr(db, &index_expr.index()?)?;\n \n         let lang_item_name = name![index];\n \n@@ -352,8 +352,8 @@ impl SourceAnalyzer {\n         binop_expr: &ast::BinExpr,\n     ) -> Option<FunctionId> {\n         let op = binop_expr.op_kind()?;\n-        let lhs = self.ty_of_expr(db, &binop_expr.lhs()?.into())?;\n-        let rhs = self.ty_of_expr(db, &binop_expr.rhs()?.into())?;\n+        let lhs = self.ty_of_expr(db, &binop_expr.lhs()?)?;\n+        let rhs = self.ty_of_expr(db, &binop_expr.rhs()?)?;\n \n         let (op_trait, op_fn) = lang_names_for_bin_op(op)\n             .and_then(|(name, lang_item)| self.lang_trait_fn(db, &lang_item, &name))?;\n@@ -372,7 +372,7 @@ impl SourceAnalyzer {\n         db: &dyn HirDatabase,\n         try_expr: &ast::TryExpr,\n     ) -> Option<FunctionId> {\n-        let ty = self.ty_of_expr(db, &try_expr.expr()?.into())?;\n+        let ty = self.ty_of_expr(db, &try_expr.expr()?)?;\n \n         let op_fn =\n             db.lang_item(self.resolver.krate(), name![branch].to_smol_str())?.as_function()?;\n@@ -824,7 +824,7 @@ impl SourceAnalyzer {\n     }\n \n     fn ty_of_expr(&self, db: &dyn HirDatabase, expr: &ast::Expr) -> Option<&Ty> {\n-        self.infer.as_ref()?.type_of_expr.get(self.expr_id(db, &expr)?)\n+        self.infer.as_ref()?.type_of_expr.get(self.expr_id(db, expr)?)\n     }\n }\n \n@@ -987,7 +987,7 @@ fn resolve_hir_path_(\n                         db,\n                         def,\n                         res.in_type_ns()?,\n-                        |name, id| (name == unresolved.name).then(|| id),\n+                        |name, id| (name == unresolved.name).then_some(id),\n                     )\n                 })\n                 .map(TypeAlias::from)"}, {"sha": "8e4ac69ae6f630c5da076ca0652e312c601d06f5", "filename": "crates/ide-assists/src/handlers/add_missing_match_arms.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -326,7 +326,7 @@ impl ExtendedEnum {\n fn resolve_enum_def(sema: &Semantics<'_, RootDatabase>, expr: &ast::Expr) -> Option<ExtendedEnum> {\n     sema.type_of_expr(expr)?.adjusted().autoderef(sema.db).find_map(|ty| match ty.as_adt() {\n         Some(Adt::Enum(e)) => Some(ExtendedEnum::Enum(e)),\n-        _ => ty.is_bool().then(|| ExtendedEnum::Bool),\n+        _ => ty.is_bool().then_some(ExtendedEnum::Bool),\n     })\n }\n \n@@ -344,7 +344,7 @@ fn resolve_tuple_of_enum_def(\n                 // For now we only handle expansion for a tuple of enums. Here\n                 // we map non-enum items to None and rely on `collect` to\n                 // convert Vec<Option<hir::Enum>> into Option<Vec<hir::Enum>>.\n-                _ => ty.is_bool().then(|| ExtendedEnum::Bool),\n+                _ => ty.is_bool().then_some(ExtendedEnum::Bool),\n             })\n         })\n         .collect()"}, {"sha": "879c478acf882ff704ce00234043c107d90532bf", "filename": "crates/ide-assists/src/handlers/add_return_type.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_return_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_return_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_return_type.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -35,16 +35,16 @@ pub(crate) fn add_return_type(acc: &mut Assists, ctx: &AssistContext<'_>) -> Opt\n             match builder_edit_pos {\n                 InsertOrReplace::Insert(insert_pos, needs_whitespace) => {\n                     let preceeding_whitespace = if needs_whitespace { \" \" } else { \"\" };\n-                    builder.insert(insert_pos, &format!(\"{preceeding_whitespace}-> {ty} \"))\n+                    builder.insert(insert_pos, format!(\"{preceeding_whitespace}-> {ty} \"))\n                 }\n                 InsertOrReplace::Replace(text_range) => {\n-                    builder.replace(text_range, &format!(\"-> {ty}\"))\n+                    builder.replace(text_range, format!(\"-> {ty}\"))\n                 }\n             }\n             if let FnType::Closure { wrap_expr: true } = fn_type {\n                 cov_mark::hit!(wrap_closure_non_block_expr);\n                 // `|x| x` becomes `|x| -> T x` which is invalid, so wrap it in a block\n-                builder.replace(tail_expr.syntax().text_range(), &format!(\"{{{tail_expr}}}\"));\n+                builder.replace(tail_expr.syntax().text_range(), format!(\"{{{tail_expr}}}\"));\n             }\n         },\n     )"}, {"sha": "698ad78cce6ffb0159d5077cb28436453a25286a", "filename": "crates/ide-assists/src/handlers/auto_import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -203,7 +203,7 @@ fn relevance_score(\n         // get the distance between the imported path and the current module\n         // (prefer items that are more local)\n         Some((item_module, current_module)) => {\n-            score -= module_distance_hueristic(db, &current_module, &item_module) as i32;\n+            score -= module_distance_hueristic(db, current_module, &item_module) as i32;\n         }\n \n         // could not find relevant modules, so just use the length of the path as an estimate"}, {"sha": "f32ef2d59d8917937063e2781b952f98bcf2cf91", "filename": "crates/ide-assists/src/handlers/convert_iter_for_each_to_for.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -216,7 +216,7 @@ fn validate_method_call_expr(\n     let krate = module.krate();\n \n     let iter_trait = FamousDefs(sema, krate).core_iter_Iterator()?;\n-    it_type.impls_trait(sema.db, iter_trait, &[]).then(|| (expr, receiver))\n+    it_type.impls_trait(sema.db, iter_trait, &[]).then_some((expr, receiver))\n }\n \n #[cfg(test)]"}, {"sha": "74f74b793a44c3fb47223e67e68c1acff0f6aa00", "filename": "crates/ide-assists/src/handlers/extract_function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -588,7 +588,7 @@ impl FunctionBody {\n             FunctionBody::Expr(expr) => Some(expr.clone()),\n             FunctionBody::Span { parent, text_range } => {\n                 let tail_expr = parent.tail_expr()?;\n-                text_range.contains_range(tail_expr.syntax().text_range()).then(|| tail_expr)\n+                text_range.contains_range(tail_expr.syntax().text_range()).then_some(tail_expr)\n             }\n         }\n     }"}, {"sha": "0fa7bd558bbfabb22a34a104a243fb3f6e159253", "filename": "crates/ide-assists/src/handlers/extract_module.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_module.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -118,13 +118,13 @@ pub(crate) fn extract_module(acc: &mut Assists, ctx: &AssistContext<'_>) -> Opti\n \n             let mut body_items: Vec<String> = Vec::new();\n             let mut items_to_be_processed: Vec<ast::Item> = module.body_items.clone();\n-            let mut new_item_indent = old_item_indent + 1;\n \n-            if impl_parent.is_some() {\n-                new_item_indent = old_item_indent + 2;\n+            let new_item_indent = if impl_parent.is_some() {\n+                old_item_indent + 2\n             } else {\n                 items_to_be_processed = [module.use_items.clone(), items_to_be_processed].concat();\n-            }\n+                old_item_indent + 1\n+            };\n \n             for item in items_to_be_processed {\n                 let item = item.indent(IndentLevel(1));"}, {"sha": "49debafe1a0ad7810bdf2a29b3612fb26aa487bd", "filename": "crates/ide-assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -178,7 +178,7 @@ fn extract_generic_params(\n             .fold(false, |tagged, ty| tag_generics_in_variant(&ty, &mut generics) || tagged),\n     };\n \n-    let generics = generics.into_iter().filter_map(|(param, tag)| tag.then(|| param));\n+    let generics = generics.into_iter().filter_map(|(param, tag)| tag.then_some(param));\n     tagged_one.then(|| make::generic_param_list(generics))\n }\n "}, {"sha": "2d074a33e7fdebee691d460b918677c062f10b56", "filename": "crates/ide-assists/src/handlers/generate_default_from_new.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -53,7 +53,7 @@ pub(crate) fn generate_default_from_new(acc: &mut Assists, ctx: &AssistContext<'\n         return None;\n     }\n \n-    let impl_ = fn_node.syntax().ancestors().into_iter().find_map(ast::Impl::cast)?;\n+    let impl_ = fn_node.syntax().ancestors().find_map(ast::Impl::cast)?;\n     if is_default_implemented(ctx, &impl_) {\n         cov_mark::hit!(default_block_is_already_present);\n         cov_mark::hit!(struct_in_module_with_default);"}, {"sha": "b6958e29193ca7ffb31601b0d4583a3338463b28", "filename": "crates/ide-assists/src/handlers/generate_deref.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_deref.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -85,8 +85,7 @@ fn generate_tuple_deref(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()\n     let strukt = ctx.find_node_at_offset::<ast::Struct>()?;\n     let field = ctx.find_node_at_offset::<ast::TupleField>()?;\n     let field_list = ctx.find_node_at_offset::<ast::TupleFieldList>()?;\n-    let field_list_index =\n-        field_list.syntax().children().into_iter().position(|s| &s == field.syntax())?;\n+    let field_list_index = field_list.syntax().children().position(|s| &s == field.syntax())?;\n \n     let deref_type_to_generate = match existing_deref_impl(&ctx.sema, &strukt) {\n         None => DerefType::Deref,"}, {"sha": "cd037f7492c66246c1b417db19c830b77ed5e862", "filename": "crates/ide-assists/src/handlers/generate_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_variant.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -180,7 +180,7 @@ fn make_tuple_field_list(\n ) -> Option<ast::FieldList> {\n     let args = call_expr.arg_list()?.args();\n     let tuple_fields = args.map(|arg| {\n-        let ty = expr_ty(ctx, arg, &scope).unwrap_or_else(make::ty_placeholder);\n+        let ty = expr_ty(ctx, arg, scope).unwrap_or_else(make::ty_placeholder);\n         make::tuple_field(None, ty)\n     });\n     Some(make::tuple_field_list(tuple_fields).into())"}, {"sha": "da9b0cda5b59402c687b16f2b2323f19d046f19f", "filename": "crates/ide-assists/src/handlers/generate_function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -514,7 +514,7 @@ fn fn_args(\n ///     vec![\"foo_1\".into(), \"foo_2\".into(), \"bar_1\".into(), \"baz\".into(), \"bar_2\".into()];\n /// assert_eq!(names, expected);\n /// ```\n-fn deduplicate_arg_names(arg_names: &mut Vec<String>) {\n+fn deduplicate_arg_names(arg_names: &mut [String]) {\n     let mut arg_name_counts = FxHashMap::default();\n     for name in arg_names.iter() {\n         *arg_name_counts.entry(name).or_insert(0) += 1;"}, {"sha": "15641b448d001c6fa18b0b44914e856e6c7a4824", "filename": "crates/ide-assists/src/handlers/generate_getter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -176,7 +176,7 @@ pub(crate) fn generate_getter_impl(\n                 // for separating it from other assoc items, that needs\n                 // to be handled spearately\n                 let mut getter_buf =\n-                    generate_getter_from_info(ctx, &getter_info, &record_field_info);\n+                    generate_getter_from_info(ctx, &getter_info, record_field_info);\n \n                 // Insert `$0` only for last getter we generate\n                 if i == record_fields_count - 1 {\n@@ -271,7 +271,7 @@ fn generate_getter_from_info(\n     }}\",\n         vis,\n         record_field_info.fn_name,\n-        info.mutable.then(|| \"mut \").unwrap_or_default(),\n+        info.mutable.then_some(\"mut \").unwrap_or_default(),\n         ty,\n         body,\n     );"}, {"sha": "8d311262a753fa3f54f5ad93e919c3fda366312d", "filename": "crates/ide-assists/src/handlers/generate_new.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -70,7 +70,7 @@ pub(crate) fn generate_new(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option\n                 )?;\n \n                 let expr = use_trivial_constructor(\n-                    &ctx.sema.db,\n+                    ctx.sema.db,\n                     ide_db::helpers::mod_path_to_ast(&type_path),\n                     &ty,\n                 )?;"}, {"sha": "5982e9d61dbf91331eab191cf20ea175fa9a8e42", "filename": "crates/ide-assists/src/handlers/inline_type_alias.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_type_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_type_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_type_alias.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -138,7 +138,7 @@ pub(crate) fn inline_type_alias(acc: &mut Assists, ctx: &AssistContext<'_>) -> O\n             replacement = Replacement::Plain;\n         }\n         _ => {\n-            let alias = get_type_alias(&ctx, &alias_instance)?;\n+            let alias = get_type_alias(ctx, &alias_instance)?;\n             concrete_type = alias.ty()?;\n             replacement = inline(&alias, &alias_instance)?;\n         }\n@@ -158,7 +158,7 @@ impl Replacement {\n     fn to_text(&self, concrete_type: &ast::Type) -> String {\n         match self {\n             Replacement::Generic { lifetime_map, const_and_type_map } => {\n-                create_replacement(&lifetime_map, &const_and_type_map, &concrete_type)\n+                create_replacement(lifetime_map, const_and_type_map, concrete_type)\n             }\n             Replacement::Plain => concrete_type.to_string(),\n         }\n@@ -240,7 +240,7 @@ impl ConstAndTypeMap {\n     ) -> Option<Self> {\n         let mut inner = HashMap::new();\n         let instance_generics = generic_args_to_const_and_type_generics(instance_args);\n-        let alias_generics = generic_param_list_to_const_and_type_generics(&alias_generics);\n+        let alias_generics = generic_param_list_to_const_and_type_generics(alias_generics);\n \n         if instance_generics.len() > alias_generics.len() {\n             cov_mark::hit!(too_many_generic_args);"}, {"sha": "52dd670ec2a469a1c11b9cc535dd87887f972ca9", "filename": "crates/ide-assists/src/handlers/remove_dbg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -64,7 +64,7 @@ fn compute_dbg_replacement(macro_call: ast::MacroCall) -> Option<(TextRange, Str\n     let input_expressions = mac_input.group_by(|tok| tok.kind() == T![,]);\n     let input_expressions = input_expressions\n         .into_iter()\n-        .filter_map(|(is_sep, group)| (!is_sep).then(|| group))\n+        .filter_map(|(is_sep, group)| (!is_sep).then_some(group))\n         .map(|mut tokens| syntax::hacks::parse_expr_from_str(&tokens.join(\"\")))\n         .collect::<Option<Vec<ast::Expr>>>()?;\n "}, {"sha": "6626ce07959974f3ca3eb995c1a5e45134c0e905", "filename": "crates/ide-assists/src/handlers/replace_turbofish_with_explicit_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_turbofish_with_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_turbofish_with_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_turbofish_with_explicit_type.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -42,7 +42,7 @@ pub(crate) fn replace_turbofish_with_explicit_type(\n     let r_angle = generic_args.r_angle_token()?;\n     let turbofish_range = TextRange::new(colon2.text_range().start(), r_angle.text_range().end());\n \n-    let turbofish_args: Vec<GenericArg> = generic_args.generic_args().into_iter().collect();\n+    let turbofish_args: Vec<GenericArg> = generic_args.generic_args().collect();\n \n     // Find type of ::<_>\n     if turbofish_args.len() != 1 {"}, {"sha": "7f612c2a142c77789a55ed12482f6e877721e707", "filename": "crates/ide-assists/src/handlers/unnecessary_async.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Fhandlers%2Funnecessary_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Fhandlers%2Funnecessary_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Funnecessary_async.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -107,7 +107,7 @@ fn find_all_references(\n /// If no await expression is found, returns None.\n fn find_await_expression(ctx: &AssistContext<'_>, nameref: &NameRef) -> Option<ast::AwaitExpr> {\n     // From the nameref, walk up the tree to the await expression.\n-    let await_expr = if let Some(path) = full_path_of_name_ref(&nameref) {\n+    let await_expr = if let Some(path) = full_path_of_name_ref(nameref) {\n         // Function calls.\n         path.syntax()\n             .parent()"}, {"sha": "b4f50c7fb26a45699f402f6cfdbe0983ea8f4565", "filename": "crates/ide-assists/src/tests/sourcegen.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Ftests%2Fsourcegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Ftests%2Fsourcegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fsourcegen.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -95,8 +95,7 @@ impl Assist {\n                 let id = block.id;\n                 assert!(\n                     id.chars().all(|it| it.is_ascii_lowercase() || it == '_'),\n-                    \"invalid assist id: {:?}\",\n-                    id\n+                    \"invalid assist id: {id:?}\"\n                 );\n                 let mut lines = block.contents.iter().peekable();\n                 let location = sourcegen::Location { file: path.to_path_buf(), line: block.line };"}, {"sha": "57c37e5b8386d6b73f2065e7df2b80652b78f14a", "filename": "crates/ide-assists/src/utils.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Futils.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -613,7 +613,7 @@ pub(crate) fn convert_reference_type(\n }\n \n fn handle_copy(ty: &hir::Type, db: &dyn HirDatabase) -> Option<ReferenceConversionType> {\n-    ty.is_copy(db).then(|| ReferenceConversionType::Copy)\n+    ty.is_copy(db).then_some(ReferenceConversionType::Copy)\n }\n \n fn handle_as_ref_str(\n@@ -624,7 +624,7 @@ fn handle_as_ref_str(\n     let str_type = hir::BuiltinType::str().ty(db);\n \n     ty.impls_trait(db, famous_defs.core_convert_AsRef()?, &[str_type])\n-        .then(|| ReferenceConversionType::AsRefStr)\n+        .then_some(ReferenceConversionType::AsRefStr)\n }\n \n fn handle_as_ref_slice(\n@@ -636,7 +636,7 @@ fn handle_as_ref_slice(\n     let slice_type = hir::Type::new_slice(type_argument);\n \n     ty.impls_trait(db, famous_defs.core_convert_AsRef()?, &[slice_type])\n-        .then(|| ReferenceConversionType::AsRefSlice)\n+        .then_some(ReferenceConversionType::AsRefSlice)\n }\n \n fn handle_dereferenced(\n@@ -647,7 +647,7 @@ fn handle_dereferenced(\n     let type_argument = ty.type_arguments().next()?;\n \n     ty.impls_trait(db, famous_defs.core_convert_AsRef()?, &[type_argument])\n-        .then(|| ReferenceConversionType::Dereferenced)\n+        .then_some(ReferenceConversionType::Dereferenced)\n }\n \n fn handle_option_as_ref("}, {"sha": "d4abb51259e9990763a44b6304c0311334d33604", "filename": "crates/ide-assists/src/utils/gen_trait_fn_body.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -419,7 +419,7 @@ fn gen_partial_eq(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n         make::ext::path_from_idents([\"Self\", &variant.name()?.to_string()])\n     }\n \n-    fn gen_tuple_field(field_name: &String) -> ast::Pat {\n+    fn gen_tuple_field(field_name: &str) -> ast::Pat {\n         ast::Pat::IdentPat(make::ident_pat(false, false, make::name(field_name)))\n     }\n "}, {"sha": "bb950c76f88310db010df2b55a4e741408e92b62", "filename": "crates/ide-completion/src/completions/attribute.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -357,7 +357,7 @@ fn parse_comma_sep_expr(input: ast::TokenTree) -> Option<Vec<ast::Expr>> {\n     Some(\n         input_expressions\n             .into_iter()\n-            .filter_map(|(is_sep, group)| (!is_sep).then(|| group))\n+            .filter_map(|(is_sep, group)| (!is_sep).then_some(group))\n             .filter_map(|mut tokens| syntax::hacks::parse_expr_from_str(&tokens.join(\"\")))\n             .collect::<Vec<ast::Expr>>(),\n     )\n@@ -371,9 +371,7 @@ fn attributes_are_sorted() {\n     attrs.for_each(|next| {\n         assert!(\n             prev < next,\n-            r#\"ATTRIBUTES array is not sorted, \"{}\" should come after \"{}\"\"#,\n-            prev,\n-            next\n+            r#\"ATTRIBUTES array is not sorted, \"{prev}\" should come after \"{next}\"\"#\n         );\n         prev = next;\n     });"}, {"sha": "7c6e5e100f63fdb264ebf0c80a4f587855155c72", "filename": "crates/ide-completion/src/completions/dot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -32,12 +32,12 @@ pub(crate) fn complete_dot(\n         complete_fields(\n             acc,\n             ctx,\n-            &receiver_ty,\n+            receiver_ty,\n             |acc, field, ty| acc.add_field(ctx, dot_access, None, field, &ty),\n             |acc, field, ty| acc.add_tuple_field(ctx, None, field, &ty),\n         );\n     }\n-    complete_methods(ctx, &receiver_ty, |func| acc.add_method(ctx, dot_access, func, None, None));\n+    complete_methods(ctx, receiver_ty, |func| acc.add_method(ctx, dot_access, func, None, None));\n }\n \n pub(crate) fn complete_undotted_self("}, {"sha": "1002be21131d915025b516738376db689a4fde6f", "filename": "crates/ide-completion/src/completions/env_vars.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fenv_vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fenv_vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fenv_vars.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -68,28 +68,26 @@ mod tests {\n             &format!(\n                 r#\"\n             #[rustc_builtin_macro]\n-            macro_rules! {} {{\n+            macro_rules! {macro_name} {{\n                 ($var:literal) => {{ 0 }}\n             }}\n \n             fn main() {{\n-                let foo = {}!(\"CAR$0\");\n+                let foo = {macro_name}!(\"CAR$0\");\n             }}\n-        \"#,\n-                macro_name, macro_name\n+        \"#\n             ),\n             &format!(\n                 r#\"\n             #[rustc_builtin_macro]\n-            macro_rules! {} {{\n+            macro_rules! {macro_name} {{\n                 ($var:literal) => {{ 0 }}\n             }}\n \n             fn main() {{\n-                let foo = {}!(\"CARGO_BIN_NAME\");\n+                let foo = {macro_name}!(\"CARGO_BIN_NAME\");\n             }}\n-        \"#,\n-                macro_name, macro_name\n+        \"#\n             ),\n         );\n     }"}, {"sha": "cfe4787f734d70a6d58c134b2a656e904d505623", "filename": "crates/ide-completion/src/completions/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -64,7 +64,7 @@ pub(crate) fn complete_expr_path(\n                 acc.add_enum_variants(ctx, path_ctx, e);\n             }\n \n-            ctx.iterate_path_candidates(&ty, |item| {\n+            ctx.iterate_path_candidates(ty, |item| {\n                 add_assoc_item(acc, item);\n             });\n "}, {"sha": "5c46c5806e65e8fd8639d3cbc352c288726238a2", "filename": "crates/ide-completion/src/completions/format_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fformat_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fformat_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fformat_string.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -13,7 +13,7 @@ pub(crate) fn format_string(\n     original: &ast::String,\n     expanded: &ast::String,\n ) {\n-    if !is_format_string(&expanded) {\n+    if !is_format_string(expanded) {\n         return;\n     }\n     let cursor = ctx.position.offset;"}, {"sha": "9a060857e9e4c45ac92f150a103f203ecab8589d", "filename": "crates/ide-completion/src/completions/item_list/trait_impl.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -845,11 +845,10 @@ trait Test {{\n struct T;\n \n impl Test for T {{\n-    {}\n-    {}\n+    {hint}\n+    {next_sibling}\n }}\n-\"#,\n-                    hint, next_sibling\n+\"#\n                 ),\n                 &format!(\n                     r#\"\n@@ -861,11 +860,10 @@ trait Test {{\n struct T;\n \n impl Test for T {{\n-    {}\n-    {}\n+    {completed}\n+    {next_sibling}\n }}\n-\"#,\n-                    completed, next_sibling\n+\"#\n                 ),\n             )\n         };\n@@ -905,10 +903,9 @@ struct T;\n impl Foo for T {{\n     // Comment\n     #[bar]\n-    {}\n+    {hint}\n }}\n-\"#,\n-                    hint\n+\"#\n                 ),\n                 &format!(\n                     r#\"\n@@ -922,10 +919,9 @@ struct T;\n impl Foo for T {{\n     // Comment\n     #[bar]\n-    {}\n+    {completed}\n }}\n-\"#,\n-                    completed\n+\"#\n                 ),\n             )\n         };"}, {"sha": "3db400604b023e1f70bb578cd4a7a9a409c52dd7", "filename": "crates/ide-completion/src/completions/postfix.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -153,8 +153,7 @@ pub(crate) fn complete_postfix(\n                     \"match\",\n                     \"match expr {}\",\n                     &format!(\n-                        \"match {} {{\\n    Some(${{1:_}}) => {{$2}},\\n    None => {{$0}},\\n}}\",\n-                        receiver_text\n+                        \"match {receiver_text} {{\\n    Some(${{1:_}}) => {{$2}},\\n    None => {{$0}},\\n}}\"\n                     ),\n                 )\n                 .add_to(acc);"}, {"sha": "37849c251a480e82896c9b6c8e5e187a4b24a43c", "filename": "crates/ide-completion/src/completions/type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -58,7 +58,7 @@ pub(crate) fn complete_type_path(\n             trait_.items(ctx.sema.db).into_iter().for_each(|item| add_assoc_item(acc, item))\n         }\n         Qualified::TypeAnchor { ty: Some(ty), trait_: None } => {\n-            ctx.iterate_path_candidates(&ty, |item| {\n+            ctx.iterate_path_candidates(ty, |item| {\n                 add_assoc_item(acc, item);\n             });\n "}, {"sha": "e34824e22eac10af3befb77828b62ff5cea5a435", "filename": "crates/ide-completion/src/context/analysis.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -226,7 +226,7 @@ fn analyze(\n             find_node_at_offset(&file_with_fake_ident, offset)\n         {\n             let parent = name_ref.syntax().parent()?;\n-            let (mut nameref_ctx, _) = classify_name_ref(&sema, &original_file, name_ref, parent)?;\n+            let (mut nameref_ctx, _) = classify_name_ref(sema, &original_file, name_ref, parent)?;\n             if let NameRefKind::Path(path_ctx) = &mut nameref_ctx.kind {\n                 path_ctx.kind = PathKind::Derive {\n                     existing_derives: sema\n@@ -277,7 +277,7 @@ fn analyze(\n             return Some((analysis, (None, None), QualifierCtx::default()));\n         }\n     };\n-    let expected = expected_type_and_name(sema, &self_token, &name_like);\n+    let expected = expected_type_and_name(sema, self_token, &name_like);\n     let mut qual_ctx = QualifierCtx::default();\n     let analysis = match name_like {\n         ast::NameLike::Lifetime(lifetime) => {\n@@ -374,7 +374,7 @@ fn expected_type_and_name(\n                 ast::ArgList(_) => {\n                     cov_mark::hit!(expected_type_fn_param);\n                     ActiveParameter::at_token(\n-                        &sema,\n+                        sema,\n                        token.clone(),\n                     ).map(|ap| {\n                         let name = ap.ident().map(NameOrNameRef::Name);\n@@ -507,7 +507,7 @@ fn classify_lifetime(\n             _ => LifetimeKind::Lifetime,\n         }\n     };\n-    let lifetime = find_node_at_offset(&original_file, lifetime.syntax().text_range().start());\n+    let lifetime = find_node_at_offset(original_file, lifetime.syntax().text_range().start());\n \n     Some(LifetimeContext { lifetime, kind })\n }\n@@ -548,7 +548,7 @@ fn classify_name(\n             _ => return None,\n         }\n     };\n-    let name = find_node_at_offset(&original_file, name.syntax().text_range().start());\n+    let name = find_node_at_offset(original_file, name.syntax().text_range().start());\n     Some(NameContext { name, kind })\n }\n \n@@ -558,7 +558,7 @@ fn classify_name_ref(\n     name_ref: ast::NameRef,\n     parent: SyntaxNode,\n ) -> Option<(NameRefContext, QualifierCtx)> {\n-    let nameref = find_node_at_offset(&original_file, name_ref.syntax().text_range().start());\n+    let nameref = find_node_at_offset(original_file, name_ref.syntax().text_range().start());\n \n     let make_res = |kind| (NameRefContext { nameref: nameref.clone(), kind }, Default::default());\n "}, {"sha": "1b09ad1731f9de498e71bff2dae0cda7e6f1e191", "filename": "crates/ide-completion/src/render/union_literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-completion%2Fsrc%2Frender%2Funion_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-completion%2Fsrc%2Frender%2Funion_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Funion_literal.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -68,7 +68,7 @@ pub(crate) fn render_union_literal(\n \n     item.set_documentation(ctx.docs(un))\n         .set_deprecated(ctx.is_deprecated(un))\n-        .detail(&detail)\n+        .detail(detail)\n         .set_relevance(ctx.completion_relevance());\n \n     match ctx.snippet_cap() {"}, {"sha": "abe14e48e22362476d2860351f3a57c57ecb5b3d", "filename": "crates/ide-completion/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -183,7 +183,7 @@ pub(crate) fn check_edit_with_config(\n     let ra_fixture_after = trim_indent(ra_fixture_after);\n     let (db, position) = position(ra_fixture_before);\n     let completions: Vec<CompletionItem> =\n-        crate::completions(&db, &config, position, None).unwrap().into();\n+        crate::completions(&db, &config, position, None).unwrap();\n     let (completion,) = completions\n         .iter()\n         .filter(|it| it.lookup() == what)"}, {"sha": "27b6321f3a7a534deaddb5ac36f582c925e6bbfe", "filename": "crates/ide-db/src/imports/merge_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-db%2Fsrc%2Fimports%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-db%2Fsrc%2Fimports%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fimports%2Fmerge_imports.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -91,7 +91,7 @@ fn recursive_merge(lhs: &ast::UseTree, rhs: &ast::UseTree, merge: MergeBehavior)\n         .flat_map(|list| list.use_trees())\n         // We use Option here to early return from this function(this is not the\n         // same as a `filter` op).\n-        .map(|tree| merge.is_tree_allowed(&tree).then(|| tree))\n+        .map(|tree| merge.is_tree_allowed(&tree).then_some(tree))\n         .collect::<Option<_>>()?;\n     use_trees.sort_unstable_by(|a, b| path_cmp_for_sort(a.path(), b.path()));\n     for rhs_t in rhs.use_tree_list().into_iter().flat_map(|list| list.use_trees()) {"}, {"sha": "b2b0e49085c8c66cf39b378e6725afd298027682", "filename": "crates/ide-db/src/search.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsearch.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -608,7 +608,7 @@ impl<'a> FindUsages<'a> {\n                 let reference = FileReference {\n                     range,\n                     name: ast::NameLike::NameRef(name_ref.clone()),\n-                    category: is_name_ref_in_import(name_ref).then(|| ReferenceCategory::Import),\n+                    category: is_name_ref_in_import(name_ref).then_some(ReferenceCategory::Import),\n                 };\n                 sink(file_id, reference)\n             }\n@@ -787,7 +787,7 @@ impl ReferenceCategory {\n     fn new(def: &Definition, r: &ast::NameRef) -> Option<ReferenceCategory> {\n         // Only Locals and Fields have accesses for now.\n         if !matches!(def, Definition::Local(_) | Definition::Field(_)) {\n-            return is_name_ref_in_import(r).then(|| ReferenceCategory::Import);\n+            return is_name_ref_in_import(r).then_some(ReferenceCategory::Import);\n         }\n \n         let mode = r.syntax().ancestors().find_map(|node| {"}, {"sha": "a34dc1b69507e0d9af7ca3a580bcf211ac7d14d2", "filename": "crates/ide-db/src/syntax_helpers/node_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fnode_ext.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -452,7 +452,7 @@ pub fn parse_tt_as_comma_sep_paths(input: ast::TokenTree) -> Option<Vec<ast::Pat\n     let input_expressions = tokens.group_by(|tok| tok.kind() == T![,]);\n     let paths = input_expressions\n         .into_iter()\n-        .filter_map(|(is_sep, group)| (!is_sep).then(|| group))\n+        .filter_map(|(is_sep, group)| (!is_sep).then_some(group))\n         .filter_map(|mut tokens| {\n             syntax::hacks::parse_expr_from_str(&tokens.join(\"\")).and_then(|expr| match expr {\n                 ast::Expr::PathExpr(it) => it.path(),"}, {"sha": "43af4d4f16aab5a62ae04f2ada97f9271d9e751d", "filename": "crates/ide-diagnostics/src/handlers/missing_fields.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -128,9 +128,9 @@ fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::MissingFields) -> Option<Vec<Ass\n                         )?;\n \n                         use_trivial_constructor(\n-                            &ctx.sema.db,\n+                            ctx.sema.db,\n                             ide_db::helpers::mod_path_to_ast(&type_path),\n-                            &ty,\n+                            ty,\n                         )\n                     })();\n "}, {"sha": "8da04e628d67001f978b00d4dd2448f8646177c4", "filename": "crates/ide-diagnostics/src/handlers/no_such_field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fno_such_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fno_such_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fno_such_field.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -68,7 +68,7 @@ fn missing_record_expr_field_fixes(\n     }\n     let new_field = make::record_field(\n         None,\n-        make::name(&record_expr_field.field_name()?.ident_token()?.text()),\n+        make::name(record_expr_field.field_name()?.ident_token()?.text()),\n         make::ty(&new_field_type.display_source_code(sema.db, module.into()).ok()?),\n     );\n "}, {"sha": "64ba08ac883bab3a60924e6e4ea0f434fe89fce8", "filename": "crates/ide-diagnostics/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-diagnostics%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-diagnostics%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Flib.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -229,7 +229,7 @@ pub fn diagnostics(\n     for node in parse.syntax().descendants() {\n         handlers::useless_braces::useless_braces(&mut res, file_id, &node);\n         handlers::field_shorthand::field_shorthand(&mut res, file_id, &node);\n-        handlers::json_is_not_rust::json_in_items(&sema, &mut res, file_id, &node, &config);\n+        handlers::json_is_not_rust::json_in_items(&sema, &mut res, file_id, &node, config);\n     }\n \n     let module = sema.to_module_def(file_id);"}, {"sha": "9e7fcfc590b7037abd34bbbedc2e38e7f3dcb8d8", "filename": "crates/ide-diagnostics/src/tests/sourcegen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-diagnostics%2Fsrc%2Ftests%2Fsourcegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide-diagnostics%2Fsrc%2Ftests%2Fsourcegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Ftests%2Fsourcegen.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -11,7 +11,7 @@ fn sourcegen_diagnostic_docs() {\n         diagnostics.into_iter().map(|it| it.to_string()).collect::<Vec<_>>().join(\"\\n\\n\");\n     let contents = sourcegen::add_preamble(\"sourcegen_diagnostic_docs\", contents);\n     let dst = project_root().join(\"docs/user/generated_diagnostic.adoc\");\n-    fs::write(&dst, &contents).unwrap();\n+    fs::write(dst, contents).unwrap();\n }\n \n #[derive(Debug)]"}, {"sha": "b4a7f2b918a46e4783ca30059231856f11e4d4b0", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -273,7 +273,7 @@ impl DocCommentToken {\n             let (in_expansion_range, link, ns) =\n                 extract_definitions_from_docs(&docs).into_iter().find_map(|(range, link, ns)| {\n                     let mapped = doc_mapping.map(range)?;\n-                    (mapped.value.contains(abs_in_expansion_offset)).then(|| (mapped.value, link, ns))\n+                    (mapped.value.contains(abs_in_expansion_offset)).then_some((mapped.value, link, ns))\n                 })?;\n             // get the relative range to the doc/attribute in the expansion\n             let in_expansion_relative_range = in_expansion_range - descended_prefix_len - token_start;\n@@ -285,7 +285,7 @@ impl DocCommentToken {\n     }\n }\n \n-fn broken_link_clone_cb<'a>(link: BrokenLink<'a>) -> Option<(CowStr<'a>, CowStr<'a>)> {\n+fn broken_link_clone_cb(link: BrokenLink<'_>) -> Option<(CowStr<'_>, CowStr<'_>)> {\n     Some((/*url*/ link.reference.clone(), /*title*/ link.reference))\n }\n "}, {"sha": "418043d67981175834afe681a47d58d65da5c86d", "filename": "crates/ide/src/expand_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fexpand_macro.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -163,7 +163,7 @@ fn _format(\n ) -> Option<String> {\n     use ide_db::base_db::{FileLoader, SourceDatabase};\n     // hack until we get hygiene working (same character amount to preserve formatting as much as possible)\n-    const DOLLAR_CRATE_REPLACE: &str = &\"__r_a_\";\n+    const DOLLAR_CRATE_REPLACE: &str = \"__r_a_\";\n     let expansion = expansion.replace(\"$crate\", DOLLAR_CRATE_REPLACE);\n     let (prefix, suffix) = match kind {\n         SyntaxKind::MACRO_PAT => (\"fn __(\", \": u32);\"),"}, {"sha": "9f78c75e90aa21d1696fed76073f087c93a156ef", "filename": "crates/ide/src/extend_selection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fextend_selection.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -205,7 +205,7 @@ fn extend_single_word_in_comment_or_string(\n     }\n \n     let start_idx = before.rfind(non_word_char)? as u32;\n-    let end_idx = after.find(non_word_char).unwrap_or_else(|| after.len()) as u32;\n+    let end_idx = after.find(non_word_char).unwrap_or(after.len()) as u32;\n \n     let from: TextSize = (start_idx + 1).into();\n     let to: TextSize = (cursor_position + end_idx).into();"}, {"sha": "190ab80ba0ff36db74bfd27a194aef9d0322b7ce", "filename": "crates/ide/src/goto_implementation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_implementation.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -110,7 +110,7 @@ fn impls_for_trait_item(\n         .filter_map(|imp| {\n             let item = imp.items(sema.db).iter().find_map(|itm| {\n                 let itm_name = itm.name(sema.db)?;\n-                (itm_name == fun_name).then(|| *itm)\n+                (itm_name == fun_name).then_some(*itm)\n             })?;\n             item.try_to_nav(sema.db)\n         })"}, {"sha": "55f8779eed7d01b08b24705e7d20614a6c7e106d", "filename": "crates/ide/src/highlight_related.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhighlight_related.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -110,7 +110,7 @@ fn highlight_references(\n         .and_then(|decl| decl.focus_range)\n         .map(|range| {\n             let category =\n-                references::decl_mutability(&def, node, range).then(|| ReferenceCategory::Write);\n+                references::decl_mutability(&def, node, range).then_some(ReferenceCategory::Write);\n             HighlightedRange { range, category }\n         });\n         if let Some(hl_range) = hl_range {\n@@ -365,7 +365,7 @@ mod tests {\n \n         let mut expected = annotations\n             .into_iter()\n-            .map(|(r, access)| (r.range, (!access.is_empty()).then(|| access)))\n+            .map(|(r, access)| (r.range, (!access.is_empty()).then_some(access)))\n             .collect::<Vec<_>>();\n \n         let mut actual = hls"}, {"sha": "b214fa12a4fecf9f7e7b0c03b5538fd804fd0d33", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -195,7 +195,7 @@ pub(crate) fn hover(\n         // fallback to type hover if there aren't any other suggestions\n         // this finds its own range instead of using the closest token's range\n         .or_else(|| {\n-            descended.iter().find_map(|token| hover_type_fallback(sema, config, token, &token))\n+            descended.iter().find_map(|token| hover_type_fallback(sema, config, token, token))\n         })\n }\n "}, {"sha": "47257f0bfad053ea015c51ba8b1ddc8b66efeeec", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -276,7 +276,7 @@ pub(super) fn struct_rest_pat(\n         }\n     };\n     for (_, t) in &missing_fields {\n-        walk_and_push_ty(sema.db, &t, &mut push_new_def);\n+        walk_and_push_ty(sema.db, t, &mut push_new_def);\n     }\n \n     res.markup = {"}, {"sha": "86d25e2f5ad031b41d084fec1c1fba45268028fc", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -253,7 +253,7 @@ fn label_of_ty(\n         ty: hir::Type,\n         label_builder: &mut InlayHintLabelBuilder<'_>,\n     ) {\n-        let iter_item_type = hint_iterator(sema, &famous_defs, &ty);\n+        let iter_item_type = hint_iterator(sema, famous_defs, &ty);\n         match iter_item_type {\n             Some(ty) => {\n                 const LABEL_START: &str = \"impl Iterator<Item = \";\n@@ -279,7 +279,7 @@ fn label_of_ty(\n         location_link_enabled: config.location_links,\n         result: InlayHintLabel::default(),\n     };\n-    rec(sema, &famous_defs, config.max_length, ty, &mut label_builder);\n+    rec(sema, famous_defs, config.max_length, ty, &mut label_builder);\n     let r = label_builder.finish();\n     Some(r)\n }\n@@ -315,7 +315,7 @@ pub(crate) fn inlay_hints(\n \n     let mut acc = Vec::new();\n \n-    if let Some(scope) = sema.scope(&file) {\n+    if let Some(scope) = sema.scope(file) {\n         let famous_defs = FamousDefs(&sema, scope.krate());\n \n         let hints = |node| hints(&mut acc, &famous_defs, config, file_id, node);"}, {"sha": "adec19c765a14292dad7fdb8d489baafa75f0216", "filename": "crates/ide/src/inlay_hints/bind_pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -167,7 +167,7 @@ fn is_named_constructor(\n         ast::PathSegmentKind::Type { type_ref: Some(ty), trait_ref: None } => ty.to_string(),\n         _ => return None,\n     };\n-    (ctor_name == ty_name).then(|| ())\n+    (ctor_name == ty_name).then_some(())\n }\n \n fn pat_is_enum_variant(db: &RootDatabase, bind_pat: &ast::IdentPat, pat_ty: &hir::Type) -> bool {"}, {"sha": "a0166d0048ab051c4fd67c656685d633a2180ae0", "filename": "crates/ide/src/inlay_hints/binding_mode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide%2Fsrc%2Finlay_hints%2Fbinding_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide%2Fsrc%2Finlay_hints%2Fbinding_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fbinding_mode.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -31,7 +31,7 @@ pub(super) fn hints(\n         .last();\n     let range =\n         outer_paren_pat.as_ref().map_or_else(|| pat.syntax(), |it| it.syntax()).text_range();\n-    let pattern_adjustments = sema.pattern_adjustments(&pat);\n+    let pattern_adjustments = sema.pattern_adjustments(pat);\n     pattern_adjustments.iter().for_each(|ty| {\n         let reference = ty.is_reference();\n         let mut_reference = ty.is_mutable_reference();"}, {"sha": "15bdf14fb9b6dee775a00c14f60afef4608e1279", "filename": "crates/ide/src/rename.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frename.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -364,11 +364,8 @@ mod tests {\n             }\n             Err(err) => {\n                 if ra_fixture_after.starts_with(\"error:\") {\n-                    let error_message = ra_fixture_after\n-                        .chars()\n-                        .into_iter()\n-                        .skip(\"error:\".len())\n-                        .collect::<String>();\n+                    let error_message =\n+                        ra_fixture_after.chars().skip(\"error:\".len()).collect::<String>();\n                     assert_eq!(error_message.trim(), err.to_string());\n                 } else {\n                     panic!(\"Rename to '{new_name}' failed unexpectedly: {err}\")"}, {"sha": "892e6a9bb0ab8c77c046940ffadf693ce3125b22", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -111,7 +111,7 @@ fn punctuation(\n             let is_raw_ptr = (|| {\n                 let prefix_expr = parent.and_then(ast::PrefixExpr::cast)?;\n                 let expr = prefix_expr.expr()?;\n-                sema.type_of_expr(&expr)?.original.is_raw_ptr().then(|| ())\n+                sema.type_of_expr(&expr)?.original.is_raw_ptr().then_some(())\n             })();\n             if let Some(()) = is_raw_ptr {\n                 HlTag::Operator(HlOperator::Other) | HlMod::Unsafe"}, {"sha": "2373db97a3e414ef4fc2e0b3c78a2661835c8bfa", "filename": "crates/mbe/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fmbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fmbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Flib.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -140,7 +140,7 @@ impl Shift {\n                     | tt::Leaf::Punct(tt::Punct { id, .. })\n                     | tt::Leaf::Literal(tt::Literal { id, .. })) = leaf;\n \n-                    (id != tt::TokenId::unspecified()).then(|| id.0)\n+                    (id != tt::TokenId::unspecified()).then_some(id.0)\n                 }\n             };\n             subtree.token_trees.iter().filter_map(filter).max()"}, {"sha": "fad905e97f456ceef3649db46fba8d7e49937902", "filename": "crates/mbe/src/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fmbe%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fmbe%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fparser.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -116,9 +116,9 @@ enum Mode {\n     Template,\n }\n \n-fn next_op<'a>(\n+fn next_op(\n     first_peeked: &tt::TokenTree,\n-    src: &mut TtIter<'a>,\n+    src: &mut TtIter<'_>,\n     mode: Mode,\n ) -> Result<Op, ParseError> {\n     let res = match first_peeked {\n@@ -273,7 +273,7 @@ fn parse_repeat(src: &mut TtIter<'_>) -> Result<(Option<Separator>, RepeatKind),\n                         _ => return Err(ParseError::InvalidRepeat),\n                     },\n                 };\n-                return Ok((has_sep.then(|| separator), repeat_kind));\n+                return Ok((has_sep.then_some(separator), repeat_kind));\n             }\n         }\n     }"}, {"sha": "5c965055634eb5f5d848b5a56c62c1dfa3de8995", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -145,7 +145,7 @@ pub fn parse_exprs_with_sep(tt: &tt::Subtree, sep: char) -> Vec<tt::Subtree> {\n     }\n \n     if iter.peek_n(0).is_some() {\n-        res.push(tt::Subtree { delimiter: None, token_trees: iter.into_iter().cloned().collect() });\n+        res.push(tt::Subtree { delimiter: None, token_trees: iter.cloned().collect() });\n     }\n \n     res"}, {"sha": "c1a6083655822d59a8e26e7b614e8b43017ff1ff", "filename": "crates/mbe/src/syntax_bridge/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fmbe%2Fsrc%2Fsyntax_bridge%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fmbe%2Fsrc%2Fsyntax_bridge%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge%2Ftests.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -30,7 +30,7 @@ fn check_punct_spacing(fixture: &str) {\n     while !cursor.eof() {\n         while let Some(token_tree) = cursor.token_tree() {\n             if let TokenTreeRef::Leaf(Leaf::Punct(Punct { spacing, id, .. }), _) = token_tree {\n-                if let Some(expected) = annotations.remove(&id) {\n+                if let Some(expected) = annotations.remove(id) {\n                     assert_eq!(expected, *spacing);\n                 }\n             }"}, {"sha": "af3b6f63cf51c9fafab483cbcc4036c2aad3984d", "filename": "crates/parser/src/grammar/paths.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fparser%2Fsrc%2Fgrammar%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fparser%2Fsrc%2Fgrammar%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fpaths.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -83,11 +83,12 @@ fn path_segment(p: &mut Parser<'_>, mode: Mode, first: bool) {\n         }\n         p.expect(T![>]);\n     } else {\n-        let mut empty = true;\n-        if first {\n+        let empty = if first {\n             p.eat(T![::]);\n-            empty = false;\n-        }\n+            false\n+        } else {\n+            true\n+        };\n         match p.current() {\n             IDENT => {\n                 name_ref(p);"}, {"sha": "6ca841cfe07326a014ae69b082e62ff0df0f53d2", "filename": "crates/parser/src/output.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fparser%2Fsrc%2Foutput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fparser%2Fsrc%2Foutput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Foutput.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -54,7 +54,7 @@ impl Output {\n     }\n \n     pub(crate) fn token(&mut self, kind: SyntaxKind, n_tokens: u8) {\n-        let e = ((kind as u16 as u32) << 16) | ((n_tokens as u32) << 8) | (0 << 4) | 1;\n+        let e = ((kind as u16 as u32) << 16) | ((n_tokens as u32) << 8) | 1;\n         self.event.push(e)\n     }\n "}, {"sha": "b178c46263e0a7609e42acf5feb2729f9e7cd52a", "filename": "crates/proc-macro-api/src/msg/flat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fproc-macro-api%2Fsrc%2Fmsg%2Fflat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fproc-macro-api%2Fsrc%2Fmsg%2Fflat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-api%2Fsrc%2Fmsg%2Fflat.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -210,7 +210,7 @@ impl<'a> Writer<'a> {\n             let idx_tag = match child {\n                 tt::TokenTree::Subtree(it) => {\n                     let idx = self.enqueue(it);\n-                    idx << 2 | 0b00\n+                    idx << 2\n                 }\n                 tt::TokenTree::Leaf(leaf) => match leaf {\n                     tt::Leaf::Literal(lit) => {"}, {"sha": "068f79f824dcac89e601328cec87f55fdae8f25f", "filename": "crates/proc-macro-srv/src/abis/abi_sysroot/ra_server.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -182,7 +182,7 @@ impl server::TokenStream for RustAnalyzer {\n             .map(|tree| match tree {\n                 tt::TokenTree::Leaf(tt::Leaf::Ident(ident)) => {\n                     bridge::TokenTree::Ident(bridge::Ident {\n-                        sym: Symbol::intern(&ident.text.trim_start_matches(\"r#\")),\n+                        sym: Symbol::intern(ident.text.trim_start_matches(\"r#\")),\n                         is_raw: ident.text.starts_with(\"r#\"),\n                         span: ident.id,\n                     })"}, {"sha": "efbeb90ca9dd54956cf8107a6944543a732f77e3", "filename": "crates/proc-macro-srv/src/tests/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fproc-macro-srv%2Fsrc%2Ftests%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fproc-macro-srv%2Fsrc%2Ftests%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Ftests%2Futils.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -30,12 +30,12 @@ fn assert_expand_impl(macro_name: &str, input: &str, attr: Option<&str>, expect:\n     let attr = attr.map(|attr| parse_string(attr).unwrap().into_subtree());\n \n     let res = expander.expand(macro_name, &fixture.into_subtree(), attr.as_ref()).unwrap();\n-    expect.assert_eq(&format!(\"{:?}\", res));\n+    expect.assert_eq(&format!(\"{res:?}\"));\n }\n \n pub(crate) fn list() -> Vec<String> {\n     let dylib_path = proc_macro_test_dylib_path();\n     let mut srv = ProcMacroSrv::default();\n     let res = srv.list_macros(&dylib_path).unwrap();\n-    res.into_iter().map(|(name, kind)| format!(\"{} [{:?}]\", name, kind)).collect()\n+    res.into_iter().map(|(name, kind)| format!(\"{name} [{kind:?}]\")).collect()\n }"}, {"sha": "7ca3c7d629570494724523d74f08abc66bdc07a3", "filename": "crates/profile/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fprofile%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fprofile%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Flib.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -114,11 +114,11 @@ impl Drop for CpuSpan {\n             match out {\n                 Ok(out) if out.status.success() => {\n                     let svg = profile_data.with_extension(\"svg\");\n-                    std::fs::write(&svg, &out.stdout).unwrap();\n+                    std::fs::write(&svg, out.stdout).unwrap();\n                     eprintln!(\"Profile rendered to:\\n\\n    {}\\n\", svg.display());\n                 }\n                 _ => {\n-                    eprintln!(\"Failed to run:\\n\\n   {:?}\\n\", cmd);\n+                    eprintln!(\"Failed to run:\\n\\n   {cmd:?}\\n\");\n                 }\n             }\n         }"}, {"sha": "6550cf27e9916761dcbe48964119e60b24e2cf42", "filename": "crates/project-model/src/build_scripts.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -66,15 +66,15 @@ impl WorkspaceBuildScripts {\n             _ => {\n                 let mut cmd = Command::new(toolchain::cargo());\n \n-                cmd.args(&[\"check\", \"--quiet\", \"--workspace\", \"--message-format=json\"]);\n+                cmd.args([\"check\", \"--quiet\", \"--workspace\", \"--message-format=json\"]);\n \n                 // --all-targets includes tests, benches and examples in addition to the\n                 // default lib and bins. This is an independent concept from the --target\n                 // flag below.\n                 cmd.arg(\"--all-targets\");\n \n                 if let Some(target) = &config.target {\n-                    cmd.args(&[\"--target\", target]);\n+                    cmd.args([\"--target\", target]);\n                 }\n \n                 match &config.features {\n@@ -122,7 +122,7 @@ impl WorkspaceBuildScripts {\n             InvocationLocation::Root(root) if config.run_build_script_command.is_some() => {\n                 root.as_path()\n             }\n-            _ => &workspace.workspace_root(),\n+            _ => workspace.workspace_root(),\n         }\n         .as_ref();\n \n@@ -133,7 +133,7 @@ impl WorkspaceBuildScripts {\n                 // building build scripts failed, attempt to build with --keep-going so\n                 // that we potentially get more build data\n                 let mut cmd = Self::build_command(config)?;\n-                cmd.args(&[\"-Z\", \"unstable-options\", \"--keep-going\"]).env(\"RUSTC_BOOTSTRAP\", \"1\");\n+                cmd.args([\"-Z\", \"unstable-options\", \"--keep-going\"]).env(\"RUSTC_BOOTSTRAP\", \"1\");\n                 let mut res = Self::run_per_ws(cmd, workspace, current_dir, progress)?;\n                 res.error = Some(error);\n                 Ok(res)\n@@ -303,8 +303,7 @@ impl WorkspaceBuildScripts {\n                                         Ok(it) => acc.push(it),\n                                         Err(err) => {\n                                             push_err(&format!(\n-                                                \"invalid cfg from cargo-metadata: {}\",\n-                                                err\n+                                                \"invalid cfg from cargo-metadata: {err}\"\n                                             ));\n                                             return;\n                                         }"}, {"sha": "467cf0917875a0e43f6914fec0e18ec82c7071dd", "filename": "crates/project-model/src/cargo_workspace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -411,7 +411,7 @@ impl CargoWorkspace {\n         CargoWorkspace { packages, targets, workspace_root }\n     }\n \n-    pub fn packages<'a>(&'a self) -> impl Iterator<Item = Package> + ExactSizeIterator + 'a {\n+    pub fn packages(&self) -> impl Iterator<Item = Package> + ExactSizeIterator + '_ {\n         self.packages.iter().map(|(id, _pkg)| id)\n     }\n \n@@ -517,7 +517,7 @@ fn cargo_config_build_target(\n     cargo_config.envs(extra_env);\n     cargo_config\n         .current_dir(cargo_toml.parent())\n-        .args(&[\"-Z\", \"unstable-options\", \"config\", \"get\", \"build.target\"])\n+        .args([\"-Z\", \"unstable-options\", \"config\", \"get\", \"build.target\"])\n         .env(\"RUSTC_BOOTSTRAP\", \"1\");\n     // if successful we receive `build.target = \"target-triple\"`\n     // or `build.target = [\"<target 1>\", ..]`"}, {"sha": "0066f6717efe6457b05c8bd2b3b4cb4fe7a64328", "filename": "crates/project-model/src/rustc_cfg.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fproject-model%2Fsrc%2Frustc_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fproject-model%2Fsrc%2Frustc_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Frustc_cfg.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -50,10 +50,10 @@ fn get_rust_cfgs(\n         cargo_config.envs(extra_env);\n         cargo_config\n             .current_dir(cargo_toml.parent())\n-            .args(&[\"rustc\", \"-Z\", \"unstable-options\", \"--print\", \"cfg\"])\n+            .args([\"rustc\", \"-Z\", \"unstable-options\", \"--print\", \"cfg\"])\n             .env(\"RUSTC_BOOTSTRAP\", \"1\");\n         if let Some(target) = target {\n-            cargo_config.args(&[\"--target\", target]);\n+            cargo_config.args([\"--target\", target]);\n         }\n         match utf8_stdout(cargo_config) {\n             Ok(it) => return Ok(it),\n@@ -63,9 +63,9 @@ fn get_rust_cfgs(\n     // using unstable cargo features failed, fall back to using plain rustc\n     let mut cmd = Command::new(toolchain::rustc());\n     cmd.envs(extra_env);\n-    cmd.args(&[\"--print\", \"cfg\", \"-O\"]);\n+    cmd.args([\"--print\", \"cfg\", \"-O\"]);\n     if let Some(target) = target {\n-        cmd.args(&[\"--target\", target]);\n+        cmd.args([\"--target\", target]);\n     }\n     utf8_stdout(cmd)\n }"}, {"sha": "8d5ab0061e518bcfebc93e87eb530444046d9e2b", "filename": "crates/project-model/src/sysroot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fproject-model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fproject-model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fsysroot.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -171,7 +171,7 @@ fn discover_sysroot_dir(\n ) -> Result<AbsPathBuf> {\n     let mut rustc = Command::new(toolchain::rustc());\n     rustc.envs(extra_env);\n-    rustc.current_dir(current_dir).args(&[\"--print\", \"sysroot\"]);\n+    rustc.current_dir(current_dir).args([\"--print\", \"sysroot\"]);\n     tracing::debug!(\"Discovering sysroot by {:?}\", rustc);\n     let stdout = utf8_stdout(rustc)?;\n     Ok(AbsPathBuf::assert(PathBuf::from(stdout)))\n@@ -203,7 +203,7 @@ fn discover_sysroot_src_dir_or_add_component(\n         .or_else(|| {\n             let mut rustup = Command::new(toolchain::rustup());\n             rustup.envs(extra_env);\n-            rustup.current_dir(current_dir).args(&[\"component\", \"add\", \"rust-src\"]);\n+            rustup.current_dir(current_dir).args([\"component\", \"add\", \"rust-src\"]);\n             tracing::info!(\"adding rust-src component by {:?}\", rustup);\n             utf8_stdout(rustup).ok()?;\n             get_rust_src(sysroot_path)"}, {"sha": "40cf47c3f55979690d7d3a76722dfbc8046c9291", "filename": "crates/project-model/src/target_data_layout.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fproject-model%2Fsrc%2Ftarget_data_layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fproject-model%2Fsrc%2Ftarget_data_layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Ftarget_data_layout.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -15,10 +15,10 @@ pub(super) fn get(\n             let mut cmd = Command::new(toolchain::rustc());\n             cmd.envs(extra_env);\n             cmd.current_dir(cargo_toml.parent())\n-                .args(&[\"-Z\", \"unstable-options\", \"rustc\", \"--print\", \"target-spec-json\"])\n+                .args([\"-Z\", \"unstable-options\", \"rustc\", \"--print\", \"target-spec-json\"])\n                 .env(\"RUSTC_BOOTSTRAP\", \"1\");\n             if let Some(target) = target {\n-                cmd.args(&[\"--target\", target]);\n+                cmd.args([\"--target\", target]);\n             }\n             match utf8_stdout(cmd) {\n                 Ok(it) => return Ok(it),\n@@ -28,10 +28,10 @@ pub(super) fn get(\n         // using unstable cargo features failed, fall back to using plain rustc\n         let mut cmd = Command::new(toolchain::rustc());\n         cmd.envs(extra_env)\n-            .args(&[\"-Z\", \"unstable-options\", \"rustc\", \"--print\", \"target-spec-json\"])\n+            .args([\"-Z\", \"unstable-options\", \"rustc\", \"--print\", \"target-spec-json\"])\n             .env(\"RUSTC_BOOTSTRAP\", \"1\");\n         if let Some(target) = target {\n-            cmd.args(&[\"--target\", target]);\n+            cmd.args([\"--target\", target]);\n         }\n         utf8_stdout(cmd)\n     })()"}, {"sha": "e2382aa37e8e5e724c5f0a101bca7f7aae398836", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -407,7 +407,7 @@ impl ProjectWorkspace {\n                 [\"libexec\", \"lib\"]\n                     .into_iter()\n                     .map(|segment| sysroot.root().join(segment).join(&standalone_server_name))\n-                    .find(|server_path| std::fs::metadata(&server_path).is_ok())\n+                    .find(|server_path| std::fs::metadata(server_path).is_ok())\n             }\n             _ => None,\n         }"}, {"sha": "122d2e6ff1b762dce6b8753761576b689fcb299b", "filename": "crates/rust-analyzer/src/caps.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -42,7 +42,7 @@ pub fn server_capabilities(config: &Config) -> ServerCapabilities {\n                 \"(\".to_string(),\n             ]),\n             all_commit_characters: None,\n-            completion_item: completion_item(&config),\n+            completion_item: completion_item(config),\n             work_done_progress_options: WorkDoneProgressOptions { work_done_progress: None },\n         }),\n         signature_help_provider: Some(SignatureHelpOptions {\n@@ -67,7 +67,7 @@ pub fn server_capabilities(config: &Config) -> ServerCapabilities {\n         },\n         document_on_type_formatting_provider: Some(DocumentOnTypeFormattingOptions {\n             first_trigger_character: \"=\".to_string(),\n-            more_trigger_character: Some(more_trigger_character(&config)),\n+            more_trigger_character: Some(more_trigger_character(config)),\n         }),\n         selection_range_provider: Some(SelectionRangeProviderCapability::Simple(true)),\n         folding_range_provider: Some(FoldingRangeProviderCapability::Simple(true)),"}, {"sha": "b050d1e95ac1f4afd36b79fab89c5c5fdcf413cc", "filename": "crates/rust-analyzer/src/cli/scip.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fscip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fscip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fscip.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -102,7 +102,7 @@ impl flags::Scip {\n                 let symbol = tokens_to_symbol\n                     .entry(id)\n                     .or_insert_with(|| {\n-                        let symbol = token_to_symbol(&token).unwrap_or_else(&mut new_local_symbol);\n+                        let symbol = token_to_symbol(token).unwrap_or_else(&mut new_local_symbol);\n                         scip::symbol::format_symbol(symbol)\n                     })\n                     .clone();\n@@ -176,7 +176,7 @@ fn get_relative_filepath(\n     rootpath: &vfs::AbsPathBuf,\n     file_id: ide::FileId,\n ) -> Option<String> {\n-    Some(vfs.file_path(file_id).as_path()?.strip_prefix(&rootpath)?.as_ref().to_str()?.to_string())\n+    Some(vfs.file_path(file_id).as_path()?.strip_prefix(rootpath)?.as_ref().to_str()?.to_string())\n }\n \n // SCIP Ranges have a (very large) optimization that ranges if they are on the same line"}, {"sha": "4ee92b3d4ed09624ff2f3688b3131785bcda8678", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -1908,9 +1908,7 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n     let doc = doc.trim_end_matches('\\n');\n     assert!(\n         doc.ends_with('.') && doc.starts_with(char::is_uppercase),\n-        \"bad docs for {}: {:?}\",\n-        field,\n-        doc\n+        \"bad docs for {field}: {doc:?}\"\n     );\n     let default = default.parse::<serde_json::Value>().unwrap();\n \n@@ -2213,17 +2211,16 @@ fn manual(fields: &[(&'static str, &'static str, &[&str], &str)]) -> String {\n             let doc = doc_comment_to_string(doc);\n             if default.contains('\\n') {\n                 format!(\n-                    r#\"[[{}]]{}::\n+                    r#\"[[{name}]]{name}::\n +\n --\n Default:\n ----\n-{}\n+{default}\n ----\n-{}\n+{doc}\n --\n-\"#,\n-                    name, name, default, doc\n+\"#\n                 )\n             } else {\n                 format!(\"[[{name}]]{name} (default: `{default}`)::\\n+\\n--\\n{doc}--\\n\")"}, {"sha": "83b03fe4736217f21d45a0ca1391a3d0603ed310", "filename": "crates/rust-analyzer/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -101,8 +101,7 @@ impl DiagnosticCollection {\n         file_id: FileId,\n     ) -> impl Iterator<Item = &lsp_types::Diagnostic> {\n         let native = self.native.get(&file_id).into_iter().flatten();\n-        let check =\n-            self.check.values().filter_map(move |it| it.get(&file_id)).into_iter().flatten();\n+        let check = self.check.values().filter_map(move |it| it.get(&file_id)).flatten();\n         native.chain(check)\n     }\n "}, {"sha": "acb416a0689329f25edddff908c4c8d8c04e5aea", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -505,8 +505,7 @@ fn rustc_code_description(code: Option<&str>) -> Option<lsp_types::CodeDescripti\n fn clippy_code_description(code: Option<&str>) -> Option<lsp_types::CodeDescription> {\n     code.and_then(|code| {\n         lsp_types::Url::parse(&format!(\n-            \"https://rust-lang.github.io/rust-clippy/master/index.html#{}\",\n-            code\n+            \"https://rust-lang.github.io/rust-clippy/master/index.html#{code}\"\n         ))\n         .ok()\n         .map(|href| lsp_types::CodeDescription { href })"}, {"sha": "2dbb14fcd9a676f2a3802ba1a528537fdce5fd1c", "filename": "crates/rust-analyzer/src/from_proto.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -25,12 +25,9 @@ pub(crate) fn vfs_path(url: &lsp_types::Url) -> Result<vfs::VfsPath> {\n \n pub(crate) fn offset(line_index: &LineIndex, position: lsp_types::Position) -> Result<TextSize> {\n     let line_col = match line_index.encoding {\n-        PositionEncoding::Utf8 => {\n-            LineCol { line: position.line as u32, col: position.character as u32 }\n-        }\n+        PositionEncoding::Utf8 => LineCol { line: position.line, col: position.character },\n         PositionEncoding::Utf16 => {\n-            let line_col =\n-                LineColUtf16 { line: position.line as u32, col: position.character as u32 };\n+            let line_col = LineColUtf16 { line: position.line, col: position.character };\n             line_index.index.to_utf8(line_col)\n         }\n     };"}, {"sha": "59bdd3061272cbc82338a273937d76f6017fd962", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -1101,9 +1101,7 @@ pub(crate) fn handle_code_action(\n     }\n \n     // Fixes from `cargo check`.\n-    for fix in\n-        snap.check_fixes.values().filter_map(|it| it.get(&frange.file_id)).into_iter().flatten()\n-    {\n+    for fix in snap.check_fixes.values().filter_map(|it| it.get(&frange.file_id)).flatten() {\n         // FIXME: this mapping is awkward and shouldn't exist. Refactor\n         // `snap.check_fixes` to not convert to LSP prematurely.\n         let intersect_fix_range = fix"}, {"sha": "0bc940dfe8dab8413a7de156b91e555e3f8a30bf", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -414,10 +414,7 @@ impl GlobalState {\n         let loop_duration = loop_start.elapsed();\n         if loop_duration > Duration::from_millis(100) && was_quiescent {\n             tracing::warn!(\"overly long loop turn: {:?}\", loop_duration);\n-            self.poke_rust_analyzer_developer(format!(\n-                \"overly long loop turn: {:?}\",\n-                loop_duration\n-            ));\n+            self.poke_rust_analyzer_developer(format!(\"overly long loop turn: {loop_duration:?}\"));\n         }\n         Ok(())\n     }\n@@ -880,7 +877,7 @@ impl GlobalState {\n                 if let Ok(vfs_path) = from_proto::vfs_path(&params.text_document.uri) {\n                     // Re-fetch workspaces if a workspace related file has changed\n                     if let Some(abs_path) = vfs_path.as_path() {\n-                        if reload::should_refresh_for_change(&abs_path, ChangeKind::Modify) {\n+                        if reload::should_refresh_for_change(abs_path, ChangeKind::Modify) {\n                             this.fetch_workspaces_queue\n                                 .request_op(format!(\"DidSaveTextDocument {}\", abs_path.display()));\n                         }"}, {"sha": "c2cc3f422d206b80b2efcdf1f2dc9b23150dbc1c", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -161,8 +161,8 @@ impl SemanticTokensBuilder {\n \n     /// Push a new token onto the builder\n     pub(crate) fn push(&mut self, range: Range, token_index: u32, modifier_bitset: u32) {\n-        let mut push_line = range.start.line as u32;\n-        let mut push_char = range.start.character as u32;\n+        let mut push_line = range.start.line;\n+        let mut push_char = range.start.character;\n \n         if !self.data.is_empty() {\n             push_line -= self.prev_line;\n@@ -177,15 +177,15 @@ impl SemanticTokensBuilder {\n         let token = SemanticToken {\n             delta_line: push_line,\n             delta_start: push_char,\n-            length: token_len as u32,\n+            length: token_len,\n             token_type: token_index,\n             token_modifiers_bitset: modifier_bitset,\n         };\n \n         self.data.push(token);\n \n-        self.prev_line = range.start.line as u32;\n-        self.prev_char = range.start.character as u32;\n+        self.prev_line = range.start.line;\n+        self.prev_char = range.start.character;\n     }\n \n     pub(crate) fn build(self) -> SemanticTokens {"}, {"sha": "a12bd3952cc1cb0c12ffb515666575c4b75dbd00", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -228,7 +228,7 @@ fn completion_item(\n     max_relevance: u32,\n     item: CompletionItem,\n ) {\n-    let insert_replace_support = config.insert_replace_support().then(|| tdpp.position);\n+    let insert_replace_support = config.insert_replace_support().then_some(tdpp.position);\n     let mut additional_text_edits = Vec::new();\n \n     // LSP does not allow arbitrary edits in completion, so we have to do a\n@@ -258,7 +258,7 @@ fn completion_item(\n         text_edit.unwrap()\n     };\n \n-    let insert_text_format = item.is_snippet().then(|| lsp_types::InsertTextFormat::SNIPPET);\n+    let insert_text_format = item.is_snippet().then_some(lsp_types::InsertTextFormat::SNIPPET);\n     let tags = item.deprecated().then(|| vec![lsp_types::CompletionItemTag::DEPRECATED]);\n     let command = if item.trigger_call_info() && config.client_commands().trigger_parameter_hints {\n         Some(command::trigger_parameter_hints())"}, {"sha": "5e3e19d44d738e785f6305ac14bfb767b1528007", "filename": "crates/rust-analyzer/tests/slow-tests/main.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -528,14 +528,13 @@ fn test_missing_module_code_action_in_json_project() {\n     let code = format!(\n         r#\"\n //- /rust-project.json\n-{PROJECT}\n+{project}\n \n //- /src/lib.rs\n mod bar;\n \n fn main() {{}}\n \"#,\n-        PROJECT = project,\n     );\n \n     let server =\n@@ -605,13 +604,12 @@ name = \"foo\"\n version = \"0.0.0\"\n \n //- /src/lib.rs\n-{}\n+{librs}\n \n-{}\n+{libs}\n \n fn main() {{}}\n-\"#,\n-        librs, libs\n+\"#\n     ))\n     .with_config(serde_json::json!({\n         \"cargo\": { \"sysroot\": \"discover\" }"}, {"sha": "2eafb0da69210b095b00b19472adb4379a8dc69e", "filename": "crates/rust-analyzer/tests/slow-tests/sourcegen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsourcegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsourcegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsourcegen.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -14,7 +14,7 @@ fn sourcegen_feature_docs() {\n         contents.trim()\n     );\n     let dst = sourcegen::project_root().join(\"docs/user/generated_features.adoc\");\n-    fs::write(&dst, &contents).unwrap();\n+    fs::write(dst, contents).unwrap();\n }\n \n #[derive(Debug)]"}, {"sha": "35b5af731925e827c1ccad431ad0644486381786", "filename": "crates/rust-analyzer/tests/slow-tests/tidy.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Ftidy.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -56,12 +56,11 @@ fn check_lsp_extensions_docs() {\n             \"\n lsp_ext.rs was changed without touching lsp-extensions.md.\n \n-Expected hash: {:x}\n-Actual hash:   {:x}\n+Expected hash: {expected_hash:x}\n+Actual hash:   {actual_hash:x}\n \n Please adjust docs/dev/lsp-extensions.md.\n-\",\n-            expected_hash, actual_hash\n+\"\n         )\n     }\n }"}, {"sha": "72d26635c33692de44c9f046f86f12b60bba3db4", "filename": "crates/sourcegen/src/lib.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fsourcegen%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fsourcegen%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsourcegen%2Fsrc%2Flib.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -65,10 +65,7 @@ impl CommentBlock {\n                 let first = block.contents.remove(0);\n                 first.strip_prefix(&tag).map(|id| {\n                     if block.is_doc {\n-                        panic!(\n-                            \"Use plain (non-doc) comments with tags like {}:\\n    {}\",\n-                            tag, first\n-                        );\n+                        panic!(\"Use plain (non-doc) comments with tags like {tag}:\\n    {first}\");\n                     }\n \n                     block.id = id.trim().to_string();\n@@ -122,7 +119,7 @@ pub struct Location {\n \n impl fmt::Display for Location {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let path = self.file.strip_prefix(&project_root()).unwrap().display().to_string();\n+        let path = self.file.strip_prefix(project_root()).unwrap().display().to_string();\n         let path = path.replace('\\\\', \"/\");\n         let name = self.file.file_name().unwrap();\n         write!(\n@@ -178,7 +175,7 @@ pub fn ensure_file_contents(file: &Path, contents: &str) {\n         }\n     }\n \n-    let display_path = file.strip_prefix(&project_root()).unwrap_or(file);\n+    let display_path = file.strip_prefix(project_root()).unwrap_or(file);\n     eprintln!(\n         \"\\n\\x1b[31;1merror\\x1b[0m: {} was not up-to-date, updating\\n\",\n         display_path.display()"}, {"sha": "0c21d2674b1a05d0a09cae7b33c21f602774fced", "filename": "crates/stdx/src/hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fstdx%2Fsrc%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fstdx%2Fsrc%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Fhash.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -51,7 +51,7 @@ impl Hasher for NoHashHasher {\n     }\n \n     fn write_u64(&mut self, i: u64) {\n-        self.0 = i as u64;\n+        self.0 = i;\n     }\n \n     fn write_usize(&mut self, i: usize) {"}, {"sha": "c402a7bceaebc06d04fc31d7cd3d4edabc19a411", "filename": "crates/syntax/src/algo.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fsyntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fsyntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Falgo.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -646,8 +646,7 @@ fn main() {\n             .format_with(\"\\n\", |v, f| f(&format!(\"Line {}: {}\", line_number(v), &fmt_syntax(v))));\n \n         let actual = format!(\n-            \"insertions:\\n\\n{}\\n\\nreplacements:\\n\\n{}\\n\\ndeletions:\\n\\n{}\\n\",\n-            insertions, replacements, deletions\n+            \"insertions:\\n\\n{insertions}\\n\\nreplacements:\\n\\n{replacements}\\n\\ndeletions:\\n\\n{deletions}\\n\"\n         );\n         expected_diff.assert_eq(&actual);\n "}, {"sha": "a493c92e7dae90d2218002010c2fd89d1c9ee5a9", "filename": "crates/syntax/src/ast/edit_in_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -888,6 +888,6 @@ enum Foo {\n         let enum_ = ast_mut_from_text::<ast::Enum>(before);\n         enum_.variant_list().map(|it| it.add_variant(variant));\n         let after = enum_.to_string();\n-        assert_eq_text!(&trim_indent(expected.trim()), &trim_indent(&after.trim()));\n+        assert_eq_text!(&trim_indent(expected.trim()), &trim_indent(after.trim()));\n     }\n }"}, {"sha": "a214a5e4462cf9a51712a7fb72738d0b2ae0d931", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -3921,7 +3921,7 @@ impl AnyHasArgList {\n impl AstNode for AnyHasArgList {\n     fn can_cast(kind: SyntaxKind) -> bool { matches!(kind, CALL_EXPR | METHOD_CALL_EXPR) }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        Self::can_cast(syntax.kind()).then(|| AnyHasArgList { syntax })\n+        Self::can_cast(syntax.kind()).then_some(AnyHasArgList { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n@@ -4006,7 +4006,7 @@ impl AstNode for AnyHasAttrs {\n         )\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        Self::can_cast(syntax.kind()).then(|| AnyHasAttrs { syntax })\n+        Self::can_cast(syntax.kind()).then_some(AnyHasAttrs { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n@@ -4043,7 +4043,7 @@ impl AstNode for AnyHasDocComments {\n         )\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        Self::can_cast(syntax.kind()).then(|| AnyHasDocComments { syntax })\n+        Self::can_cast(syntax.kind()).then_some(AnyHasDocComments { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n@@ -4058,7 +4058,7 @@ impl AstNode for AnyHasGenericParams {\n         matches!(kind, ENUM | FN | IMPL | STRUCT | TRAIT | TYPE_ALIAS | UNION)\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        Self::can_cast(syntax.kind()).then(|| AnyHasGenericParams { syntax })\n+        Self::can_cast(syntax.kind()).then_some(AnyHasGenericParams { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n@@ -4071,7 +4071,7 @@ impl AnyHasLoopBody {\n impl AstNode for AnyHasLoopBody {\n     fn can_cast(kind: SyntaxKind) -> bool { matches!(kind, FOR_EXPR | LOOP_EXPR | WHILE_EXPR) }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        Self::can_cast(syntax.kind()).then(|| AnyHasLoopBody { syntax })\n+        Self::can_cast(syntax.kind()).then_some(AnyHasLoopBody { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n@@ -4084,7 +4084,7 @@ impl AnyHasModuleItem {\n impl AstNode for AnyHasModuleItem {\n     fn can_cast(kind: SyntaxKind) -> bool { matches!(kind, MACRO_ITEMS | SOURCE_FILE | ITEM_LIST) }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        Self::can_cast(syntax.kind()).then(|| AnyHasModuleItem { syntax })\n+        Self::can_cast(syntax.kind()).then_some(AnyHasModuleItem { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n@@ -4119,7 +4119,7 @@ impl AstNode for AnyHasName {\n         )\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        Self::can_cast(syntax.kind()).then(|| AnyHasName { syntax })\n+        Self::can_cast(syntax.kind()).then_some(AnyHasName { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n@@ -4137,7 +4137,7 @@ impl AstNode for AnyHasTypeBounds {\n         )\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        Self::can_cast(syntax.kind()).then(|| AnyHasTypeBounds { syntax })\n+        Self::can_cast(syntax.kind()).then_some(AnyHasTypeBounds { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n@@ -4171,7 +4171,7 @@ impl AstNode for AnyHasVisibility {\n         )\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        Self::can_cast(syntax.kind()).then(|| AnyHasVisibility { syntax })\n+        Self::can_cast(syntax.kind()).then_some(AnyHasVisibility { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }"}, {"sha": "168439053c27abd77f27952258e5a242046fefb8", "filename": "crates/syntax/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fsyntax%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fsyntax%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -157,7 +157,7 @@ fn collect_rust_files(root_dir: &Path, paths: &[&str]) -> Vec<(PathBuf, String)>\n /// Collects paths to all `.rs` files from `dir` in a sorted `Vec<PathBuf>`.\n fn rust_files_in_dir(dir: &Path) -> Vec<PathBuf> {\n     let mut acc = Vec::new();\n-    for file in fs::read_dir(&dir).unwrap() {\n+    for file in fs::read_dir(dir).unwrap() {\n         let file = file.unwrap();\n         let path = file.path();\n         if path.extension().unwrap_or_default() == \"rs\" {"}, {"sha": "03aa2c451e84803a655b032a94aeb6676ba3c216", "filename": "crates/syntax/src/tests/sourcegen_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -253,7 +253,7 @@ fn generate_nodes(kinds: KindsSrc<'_>, grammar: &AstSrc) -> String {\n                             matches!(kind, #(#kinds)|*)\n                         }\n                         fn cast(syntax: SyntaxNode) -> Option<Self> {\n-                            Self::can_cast(syntax.kind()).then(|| #name { syntax })\n+                            Self::can_cast(syntax.kind()).then_some(#name { syntax })\n                         }\n                         fn syntax(&self) -> &SyntaxNode {\n                             &self.syntax"}, {"sha": "15c30c52a54862f7142d3bceaadf705b5d2f0b72", "filename": "crates/test-utils/src/assert_linear.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Ftest-utils%2Fsrc%2Fassert_linear.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Ftest-utils%2Fsrc%2Fassert_linear.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest-utils%2Fsrc%2Fassert_linear.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -100,7 +100,7 @@ impl Round {\n \n         self.linear = rmse < 0.05 && max_error < 0.1 && a > -0.1;\n \n-        fn normalize(xs: &mut Vec<f64>) {\n+        fn normalize(xs: &mut [f64]) {\n             let max = xs.iter().copied().max_by(|a, b| a.partial_cmp(b).unwrap()).unwrap();\n             xs.iter_mut().for_each(|it| *it /= max);\n         }"}, {"sha": "d1afd0039aa4b0b5d52f9cd65c496b2501dd1236", "filename": "crates/test-utils/src/fixture.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Ftest-utils%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Ftest-utils%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest-utils%2Fsrc%2Ffixture.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -135,11 +135,9 @@ impl Fixture {\n             if line.contains(\"//-\") {\n                 assert!(\n                     line.starts_with(\"//-\"),\n-                    \"Metadata line {} has invalid indentation. \\\n+                    \"Metadata line {ix} has invalid indentation. \\\n                      All metadata lines need to have the same indentation.\\n\\\n-                     The offending line: {:?}\",\n-                    ix,\n-                    line\n+                     The offending line: {line:?}\"\n                 );\n             }\n \n@@ -222,9 +220,7 @@ impl Fixture {\n         for prelude_dep in extern_prelude.iter().flatten() {\n             assert!(\n                 deps.contains(prelude_dep),\n-                \"extern-prelude {:?} must be a subset of deps {:?}\",\n-                extern_prelude,\n-                deps\n+                \"extern-prelude {extern_prelude:?} must be a subset of deps {deps:?}\"\n             );\n         }\n \n@@ -348,11 +344,7 @@ impl MiniCore {\n \n             let mut keep = true;\n             for &region in &active_regions {\n-                assert!(\n-                    !region.starts_with(' '),\n-                    \"region marker starts with a space: {:?}\",\n-                    region\n-                );\n+                assert!(!region.starts_with(' '), \"region marker starts with a space: {region:?}\");\n                 self.assert_valid_flag(region);\n                 seen_regions.push(region);\n                 keep &= self.has_flag(region);"}, {"sha": "a7a52e08e75a8448663c2cb45e725dc13a8ccbae", "filename": "crates/test-utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Ftest-utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/crates%2Ftest-utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest-utils%2Fsrc%2Flib.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -479,7 +479,7 @@ pub fn try_ensure_file_contents(file: &Path, contents: &str) -> Result<(), ()> {\n         }\n         _ => (),\n     }\n-    let display_path = file.strip_prefix(&project_root()).unwrap_or(file);\n+    let display_path = file.strip_prefix(project_root()).unwrap_or(file);\n     eprintln!(\n         \"\\n\\x1b[31;1merror\\x1b[0m: {} was not up-to-date, updating\\n\",\n         display_path.display()"}, {"sha": "b95cec4f013610ca706a7572aea6063eefd26b08", "filename": "lib/lsp-server/src/lib.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/lib%2Flsp-server%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/lib%2Flsp-server%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Flsp-server%2Fsrc%2Flib.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -128,15 +128,11 @@ impl Connection {\n                     self.sender.send(resp.into()).unwrap();\n                 }\n                 Ok(msg) => {\n-                    return Err(ProtocolError(format!(\n-                        \"expected initialize request, got {:?}\",\n-                        msg\n-                    )))\n+                    return Err(ProtocolError(format!(\"expected initialize request, got {msg:?}\")))\n                 }\n                 Err(e) => {\n                     return Err(ProtocolError(format!(\n-                        \"expected initialize request, got error: {}\",\n-                        e\n+                        \"expected initialize request, got error: {e}\"\n                     )))\n                 }\n             };\n@@ -154,15 +150,11 @@ impl Connection {\n         match &self.receiver.recv() {\n             Ok(Message::Notification(n)) if n.is_initialized() => (),\n             Ok(msg) => {\n-                return Err(ProtocolError(format!(\n-                    \"expected Message::Notification, got: {:?}\",\n-                    msg,\n-                )))\n+                return Err(ProtocolError(format!(\"expected Message::Notification, got: {msg:?}\",)))\n             }\n             Err(e) => {\n                 return Err(ProtocolError(format!(\n-                    \"expected initialized notification, got error: {}\",\n-                    e,\n+                    \"expected initialized notification, got error: {e}\",\n                 )))\n             }\n         }"}, {"sha": "d2a1483e3873ac9a5c6b9eb1115c1b45127e8069", "filename": "xtask/src/release/changelog.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f77b68a3cb0b4a8f611322934c4c4d9335167560/xtask%2Fsrc%2Frelease%2Fchangelog.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77b68a3cb0b4a8f611322934c4c4d9335167560/xtask%2Fsrc%2Frelease%2Fchangelog.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Frelease%2Fchangelog.rs?ref=f77b68a3cb0b4a8f611322934c4c4d9335167560", "patch": "@@ -63,31 +63,30 @@ pub(crate) fn get_changelog(\n \n     let contents = format!(\n         \"\\\n-= Changelog #{}\n+= Changelog #{changelog_n}\n :sectanchors:\n :experimental:\n :page-layout: post\n \n-Commit: commit:{}[] +\n-Release: release:{}[]\n+Commit: commit:{commit}[] +\n+Release: release:{today}[]\n \n == New Features\n \n-{}\n+{features}\n \n == Fixes\n \n-{}\n+{fixes}\n \n == Internal Improvements\n \n-{}\n+{internal}\n \n == Others\n \n-{}\n-\",\n-        changelog_n, commit, today, features, fixes, internal, others\n+{others}\n+\"\n     );\n     Ok(contents)\n }"}]}