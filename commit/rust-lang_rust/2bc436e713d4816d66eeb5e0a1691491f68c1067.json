{"sha": "2bc436e713d4816d66eeb5e0a1691491f68c1067", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiYzQzNmU3MTNkNDgxNmQ2NmVlYjVlMGExNjkxNDkxZjY4YzEwNjc=", "commit": {"author": {"name": "Georg Semmler", "email": "georg_semmler_05@web.de", "date": "2018-12-29T01:13:06Z"}, "committer": {"name": "Georg Semmler", "email": "georg_semmler_05@web.de", "date": "2019-01-03T21:27:12Z"}, "message": "Add missing files", "tree": {"sha": "5514c62352fb481188d7fbc30ae3c18f1e40eced", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5514c62352fb481188d7fbc30ae3c18f1e40eced"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bc436e713d4816d66eeb5e0a1691491f68c1067", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEt/EOFp+yWvA8Dk28qHvO5SBc5IkFAlwufjAACgkQqHvO5SBc\n5IltAAf/a65mPwBl39J2uTqmKbLFc3Df/jdCXmDfGV0pbulZpyCGDW8JNlbCxcAg\nbXcMrDiUolfSv+0c5A6M53IaytfM3pcQreKsXv93Y5udNn57xtOBZE5/HBEmlXNc\njamfneE5w93ekBYus0dN24J1ej2YZFs9chpCNwpLrzFJSCqEkNb34F+F6im/CUtE\nFPvlx4VeU/Jho3Ywqfve+SNVNBicpEwbDjKsngxc3MeHFi2oOCicJbSSQuzbusOe\nYBxDOBgUvDYLnlYM5/rct4ht1ft4XfOa3rK/uUxHpDuBr6O1RztHC7iUoMYA7YMc\nAlnOu0b2qpWxMihkzDIXegGON5X/2A==\n=T+Ec\n-----END PGP SIGNATURE-----", "payload": "tree 5514c62352fb481188d7fbc30ae3c18f1e40eced\nparent d6ffd88d21543a78a143b3047ba21b984143a8ca\nauthor Georg Semmler <georg_semmler_05@web.de> 1546045986 +0100\ncommitter Georg Semmler <georg_semmler_05@web.de> 1546550832 +0100\n\nAdd missing files\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bc436e713d4816d66eeb5e0a1691491f68c1067", "html_url": "https://github.com/rust-lang/rust/commit/2bc436e713d4816d66eeb5e0a1691491f68c1067", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bc436e713d4816d66eeb5e0a1691491f68c1067/comments", "author": {"login": "weiznich", "id": 1674512, "node_id": "MDQ6VXNlcjE2NzQ1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1674512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiznich", "html_url": "https://github.com/weiznich", "followers_url": "https://api.github.com/users/weiznich/followers", "following_url": "https://api.github.com/users/weiznich/following{/other_user}", "gists_url": "https://api.github.com/users/weiznich/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiznich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiznich/subscriptions", "organizations_url": "https://api.github.com/users/weiznich/orgs", "repos_url": "https://api.github.com/users/weiznich/repos", "events_url": "https://api.github.com/users/weiznich/events{/privacy}", "received_events_url": "https://api.github.com/users/weiznich/received_events", "type": "User", "site_admin": false}, "committer": {"login": "weiznich", "id": 1674512, "node_id": "MDQ6VXNlcjE2NzQ1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1674512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiznich", "html_url": "https://github.com/weiznich", "followers_url": "https://api.github.com/users/weiznich/followers", "following_url": "https://api.github.com/users/weiznich/following{/other_user}", "gists_url": "https://api.github.com/users/weiznich/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiznich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiznich/subscriptions", "organizations_url": "https://api.github.com/users/weiznich/orgs", "repos_url": "https://api.github.com/users/weiznich/repos", "events_url": "https://api.github.com/users/weiznich/events{/privacy}", "received_events_url": "https://api.github.com/users/weiznich/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6ffd88d21543a78a143b3047ba21b984143a8ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6ffd88d21543a78a143b3047ba21b984143a8ca", "html_url": "https://github.com/rust-lang/rust/commit/d6ffd88d21543a78a143b3047ba21b984143a8ca"}], "stats": {"total": 1135, "additions": 1008, "deletions": 127}, "files": [{"sha": "c8d027b25c7486dedf9ca2aec24f832d8def828b", "filename": "src/test/ui/coherence/auxiliary/re_rebalance_coherence_lib.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fauxiliary%2Fre_rebalance_coherence_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fauxiliary%2Fre_rebalance_coherence_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fauxiliary%2Fre_rebalance_coherence_lib.rs?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,23 @@\n+\n+pub trait Backend{}\n+pub trait SupportsDefaultKeyword {}\n+\n+impl SupportsDefaultKeyword for Postgres {}\n+\n+pub struct Postgres;\n+\n+impl Backend for Postgres {}\n+\n+pub struct AstPass<DB>(::std::marker::PhantomData<DB>);\n+\n+pub trait QueryFragment<DB: Backend> {}\n+\n+\n+#[derive(Debug, Clone, Copy)]\n+pub struct BatchInsert<'a, T: 'a, Tab> {\n+    _marker: ::std::marker::PhantomData<(&'a T, Tab)>,\n+}\n+\n+impl<'a, T:'a, Tab, DB> QueryFragment<DB> for BatchInsert<'a, T, Tab>\n+where DB: SupportsDefaultKeyword + Backend,\n+{}"}, {"sha": "0389a6228efcd5f2ad69f52bf985a1591304496d", "filename": "src/test/ui/coherence/coherence-all-remote.old.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,5 +1,5 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-all-remote.rs:6:1\n+  --> $DIR/coherence-all-remote.rs:9:1\n    |\n LL | impl<T> Remote1<T> for isize { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type", "previous_filename": "src/test/ui/coherence/coherence-all-remote.stderr"}, {"sha": "0389a6228efcd5f2ad69f52bf985a1591304496d", "filename": "src/test/ui/coherence/coherence-all-remote.re.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,11 @@\n+error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n+  --> $DIR/coherence-all-remote.rs:9:1\n+   |\n+LL | impl<T> Remote1<T> for isize { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |\n+   = note: only traits defined in the current crate can be implemented for a type parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0210`."}, {"sha": "54fec07e65a0deced9a656af192adbae9db14035", "filename": "src/test/ui/coherence/coherence-bigint-param.old.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,5 +1,5 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-bigint-param.rs:8:1\n+  --> $DIR/coherence-bigint-param.rs:11:1\n    |\n LL | impl<T> Remote1<BigInt> for T { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type", "previous_filename": "src/test/ui/coherence/coherence-bigint-param.stderr"}, {"sha": "54fec07e65a0deced9a656af192adbae9db14035", "filename": "src/test/ui/coherence/coherence-bigint-param.re.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,11 @@\n+error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n+  --> $DIR/coherence-bigint-param.rs:11:1\n+   |\n+LL | impl<T> Remote1<BigInt> for T { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |\n+   = note: only traits defined in the current crate can be implemented for a type parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0210`."}, {"sha": "a6d29048b4d8ccbfa8dc287599dd7057470a13b1", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-blanket-implemented.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,10 +1,10 @@\n error[E0119]: conflicting implementations of trait `MyTrait`:\n-  --> $DIR/coherence-blanket-conflicts-with-blanket-implemented.rs:24:1\n+  --> $DIR/coherence-blanket-conflicts-with-blanket-implemented.rs:28:1\n    |\n LL | impl<T:Even> MyTrait for T {\n    | -------------------------- first implementation here\n ...\n-LL | impl<T:Odd> MyTrait for T { //~ ERROR E0119\n+LL | impl<T:Odd> MyTrait for T {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n \n error: aborting due to previous error", "previous_filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-blanket-implemented.stderr"}, {"sha": "a6d29048b4d8ccbfa8dc287599dd7057470a13b1", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-blanket-implemented.re.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,12 @@\n+error[E0119]: conflicting implementations of trait `MyTrait`:\n+  --> $DIR/coherence-blanket-conflicts-with-blanket-implemented.rs:28:1\n+   |\n+LL | impl<T:Even> MyTrait for T {\n+   | -------------------------- first implementation here\n+...\n+LL | impl<T:Odd> MyTrait for T {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "1f3ddd1dc42c6d2b114da853807a8777c59515b4", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-blanket-unimplemented.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,10 +1,10 @@\n error[E0119]: conflicting implementations of trait `MyTrait`:\n-  --> $DIR/coherence-blanket-conflicts-with-blanket-unimplemented.rs:20:1\n+  --> $DIR/coherence-blanket-conflicts-with-blanket-unimplemented.rs:24:1\n    |\n LL | impl<T:Even> MyTrait for T {\n    | -------------------------- first implementation here\n ...\n-LL | impl<T:Odd> MyTrait for T { //~ ERROR E0119\n+LL | impl<T:Odd> MyTrait for T {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n \n error: aborting due to previous error", "previous_filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-blanket-unimplemented.stderr"}, {"sha": "1f3ddd1dc42c6d2b114da853807a8777c59515b4", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-blanket-unimplemented.re.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,12 @@\n+error[E0119]: conflicting implementations of trait `MyTrait`:\n+  --> $DIR/coherence-blanket-conflicts-with-blanket-unimplemented.rs:24:1\n+   |\n+LL | impl<T:Even> MyTrait for T {\n+   | -------------------------- first implementation here\n+...\n+LL | impl<T:Odd> MyTrait for T {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "298ac6d1f21694b892cf3cc7266e5dae2316a2cc", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-cross-crate.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,7 +1,7 @@\n error[E0119]: conflicting implementations of trait `go_trait::GoMut` for type `MyThingy`:\n-  --> $DIR/coherence-blanket-conflicts-with-specific-cross-crate.rs:15:1\n+  --> $DIR/coherence-blanket-conflicts-with-specific-cross-crate.rs:18:1\n    |\n-LL | impl GoMut for MyThingy { //~ ERROR conflicting implementations\n+LL | impl GoMut for MyThingy {\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: conflicting implementation in crate `go_trait`:", "previous_filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-cross-crate.stderr"}, {"sha": "298ac6d1f21694b892cf3cc7266e5dae2316a2cc", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-cross-crate.re.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,13 @@\n+error[E0119]: conflicting implementations of trait `go_trait::GoMut` for type `MyThingy`:\n+  --> $DIR/coherence-blanket-conflicts-with-specific-cross-crate.rs:18:1\n+   |\n+LL | impl GoMut for MyThingy {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: conflicting implementation in crate `go_trait`:\n+           - impl<G> go_trait::GoMut for G\n+             where G: go_trait::Go;\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "94bbbdbe0a404ad0ae7d8dbdc32df885418206d8", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-multidispatch.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,10 +1,10 @@\n error[E0119]: conflicting implementations of trait `MyTrait<MyType>` for type `MyType`:\n-  --> $DIR/coherence-blanket-conflicts-with-specific-multidispatch.rs:22:1\n+  --> $DIR/coherence-blanket-conflicts-with-specific-multidispatch.rs:26:1\n    |\n LL | impl<T> MyTrait<T> for T {\n    | ------------------------ first implementation here\n ...\n-LL | impl MyTrait<MyType> for MyType { //~ ERROR E0119\n+LL | impl MyTrait<MyType> for MyType {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyType`\n \n error: aborting due to previous error", "previous_filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-multidispatch.stderr"}, {"sha": "94bbbdbe0a404ad0ae7d8dbdc32df885418206d8", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-multidispatch.re.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,12 @@\n+error[E0119]: conflicting implementations of trait `MyTrait<MyType>` for type `MyType`:\n+  --> $DIR/coherence-blanket-conflicts-with-specific-multidispatch.rs:26:1\n+   |\n+LL | impl<T> MyTrait<T> for T {\n+   | ------------------------ first implementation here\n+...\n+LL | impl MyTrait<MyType> for MyType {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyType`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "cf799c20cb49cff6afd4d187e4110b3391552074", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-trait.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-trait.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-trait.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-trait.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,10 +1,10 @@\n error[E0119]: conflicting implementations of trait `MyTrait` for type `MyType`:\n-  --> $DIR/coherence-blanket-conflicts-with-specific-trait.rs:20:1\n+  --> $DIR/coherence-blanket-conflicts-with-specific-trait.rs:24:1\n    |\n LL | impl<T:OtherTrait> MyTrait for T {\n    | -------------------------------- first implementation here\n ...\n-LL | impl MyTrait for MyType { //~ ERROR E0119\n+LL | impl MyTrait for MyType {\n    | ^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyType`\n \n error: aborting due to previous error", "previous_filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-trait.stderr"}, {"sha": "cf799c20cb49cff6afd4d187e4110b3391552074", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-trait.re.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-trait.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-trait.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-trait.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,12 @@\n+error[E0119]: conflicting implementations of trait `MyTrait` for type `MyType`:\n+  --> $DIR/coherence-blanket-conflicts-with-specific-trait.rs:24:1\n+   |\n+LL | impl<T:OtherTrait> MyTrait for T {\n+   | -------------------------------- first implementation here\n+...\n+LL | impl MyTrait for MyType {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyType`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "0807b11a434f98fa5a6d950bf0ae0ca8be8285e5", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,10 +1,10 @@\n error[E0119]: conflicting implementations of trait `MyTrait` for type `MyType`:\n-  --> $DIR/coherence-blanket-conflicts-with-specific.rs:19:1\n+  --> $DIR/coherence-blanket-conflicts-with-specific.rs:23:1\n    |\n LL | impl<T> MyTrait for T {\n    | --------------------- first implementation here\n ...\n-LL | impl MyTrait for MyType { //~ ERROR E0119\n+LL | impl MyTrait for MyType {\n    | ^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyType`\n \n error: aborting due to previous error", "previous_filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific.stderr"}, {"sha": "0807b11a434f98fa5a6d950bf0ae0ca8be8285e5", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific.re.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,12 @@\n+error[E0119]: conflicting implementations of trait `MyTrait` for type `MyType`:\n+  --> $DIR/coherence-blanket-conflicts-with-specific.rs:23:1\n+   |\n+LL | impl<T> MyTrait for T {\n+   | --------------------- first implementation here\n+...\n+LL | impl MyTrait for MyType {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyType`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "bb3641f224780f045d9a2addb1ddb1fd03fe6e24", "filename": "src/test/ui/coherence/coherence-conflicting-negative-trait-impl.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `std::marker::Send` for type `TestType<_>`:\n-  --> $DIR/coherence-conflicting-negative-trait-impl.rs:10:1\n+  --> $DIR/coherence-conflicting-negative-trait-impl.rs:13:1\n    |\n LL | unsafe impl<T: MyTrait+'static> Send for TestType<T> {}\n    | ---------------------------------------------------- first implementation here\n@@ -8,7 +8,7 @@ LL | impl<T: MyTrait> !Send for TestType<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `TestType<_>`\n \n error[E0119]: conflicting implementations of trait `std::marker::Send` for type `TestType<i32>`:\n-  --> $DIR/coherence-conflicting-negative-trait-impl.rs:15:1\n+  --> $DIR/coherence-conflicting-negative-trait-impl.rs:19:1\n    |\n LL | unsafe impl<T:'static> Send for TestType<T> {}\n    | ------------------------------------------- first implementation here", "previous_filename": "src/test/ui/coherence/coherence-conflicting-negative-trait-impl.stderr"}, {"sha": "bb3641f224780f045d9a2addb1ddb1fd03fe6e24", "filename": "src/test/ui/coherence/coherence-conflicting-negative-trait-impl.re.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,21 @@\n+error[E0119]: conflicting implementations of trait `std::marker::Send` for type `TestType<_>`:\n+  --> $DIR/coherence-conflicting-negative-trait-impl.rs:13:1\n+   |\n+LL | unsafe impl<T: MyTrait+'static> Send for TestType<T> {}\n+   | ---------------------------------------------------- first implementation here\n+LL | \n+LL | impl<T: MyTrait> !Send for TestType<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `TestType<_>`\n+\n+error[E0119]: conflicting implementations of trait `std::marker::Send` for type `TestType<i32>`:\n+  --> $DIR/coherence-conflicting-negative-trait-impl.rs:19:1\n+   |\n+LL | unsafe impl<T:'static> Send for TestType<T> {}\n+   | ------------------------------------------- first implementation here\n+LL | \n+LL | impl !Send for TestType<i32> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `TestType<i32>`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "dd9cfab503f72f174c8cab1d66ce7e23bdda120b", "filename": "src/test/ui/coherence/coherence-cow.a.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.a.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,5 +1,5 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-cow.rs:28:1\n+  --> $DIR/coherence-cow.rs:18:1\n    |\n LL | impl<T> Remote for Pair<T,Cover<T>> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type"}, {"sha": "fb3ca3fc6b777b84f0063ddc4f9da6be1bd02fa4", "filename": "src/test/ui/coherence/coherence-cow.b.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.b.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,5 +1,5 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-cow.rs:33:1\n+  --> $DIR/coherence-cow.rs:23:1\n    |\n LL | impl<T> Remote for Pair<Cover<T>,T> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type"}, {"sha": "f17823b7f8954609a5dcde537095c024bdaf6e16", "filename": "src/test/ui/coherence/coherence-cow.c.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.c.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,5 +1,5 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-cow.rs:38:1\n+  --> $DIR/coherence-cow.rs:28:1\n    |\n LL | impl<T,U> Remote for Pair<Cover<T>,U> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type"}, {"sha": "ed627600b0f5d39bdc2794d8a50d9ce10e5e2b84", "filename": "src/test/ui/coherence/coherence-cow.re_a.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_a.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,12 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-cow.rs:18:1\n+   |\n+LL | impl<T> Remote for Pair<T,Cover<T>> { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "1a85887ae7bc47ece6da6c5e3a97a64a529a3813", "filename": "src/test/ui/coherence/coherence-cow.re_b.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_b.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,12 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-cow.rs:23:1\n+   |\n+LL | impl<T> Remote for Pair<Cover<T>,T> { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "8043b6702b07efb983cd4aa758be1b8a8b76591e", "filename": "src/test/ui/coherence/coherence-cow.re_c.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_c.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,12 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-cow.rs:28:1\n+   |\n+LL | impl<T,U> Remote for Pair<Cover<T>,U> { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "3ba32a528354ef23db71e39f26b172afb6be7f60", "filename": "src/test/ui/coherence/coherence-cross-crate-conflict.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `trait_impl_conflict::Foo` for type `isize`:\n-  --> $DIR/coherence-cross-crate-conflict.rs:8:1\n+  --> $DIR/coherence-cross-crate-conflict.rs:12:1\n    |\n LL | impl<A> Foo for A {\n    | ^^^^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL | impl<A> Foo for A {\n            - impl trait_impl_conflict::Foo for isize;\n \n error[E0210]: type parameter `A` must be used as the type parameter for some local type (e.g., `MyStruct<A>`)\n-  --> $DIR/coherence-cross-crate-conflict.rs:8:1\n+  --> $DIR/coherence-cross-crate-conflict.rs:12:1\n    |\n LL | impl<A> Foo for A {\n    | ^^^^^^^^^^^^^^^^^ type parameter `A` must be used as the type parameter for some local type", "previous_filename": "src/test/ui/coherence/coherence-cross-crate-conflict.stderr"}, {"sha": "3ba32a528354ef23db71e39f26b172afb6be7f60", "filename": "src/test/ui/coherence/coherence-cross-crate-conflict.re.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,21 @@\n+error[E0119]: conflicting implementations of trait `trait_impl_conflict::Foo` for type `isize`:\n+  --> $DIR/coherence-cross-crate-conflict.rs:12:1\n+   |\n+LL | impl<A> Foo for A {\n+   | ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: conflicting implementation in crate `trait_impl_conflict`:\n+           - impl trait_impl_conflict::Foo for isize;\n+\n+error[E0210]: type parameter `A` must be used as the type parameter for some local type (e.g., `MyStruct<A>`)\n+  --> $DIR/coherence-cross-crate-conflict.rs:12:1\n+   |\n+LL | impl<A> Foo for A {\n+   | ^^^^^^^^^^^^^^^^^ type parameter `A` must be used as the type parameter for some local type\n+   |\n+   = note: only traits defined in the current crate can be implemented for a type parameter\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors occurred: E0119, E0210.\n+For more information about an error, try `rustc --explain E0119`."}, {"sha": "534f4b0dcdb3c988d6323dfc06ce2f8b7cfdc326", "filename": "src/test/ui/coherence/coherence-default-trait-impl.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,11 +1,11 @@\n error[E0199]: implementing the trait `MySafeTrait` is not unsafe\n-  --> $DIR/coherence-default-trait-impl.rs:7:1\n+  --> $DIR/coherence-default-trait-impl.rs:10:1\n    |\n LL | unsafe impl MySafeTrait for Foo {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0200]: the trait `MyUnsafeTrait` requires an `unsafe impl` declaration\n-  --> $DIR/coherence-default-trait-impl.rs:12:1\n+  --> $DIR/coherence-default-trait-impl.rs:16:1\n    |\n LL | impl MyUnsafeTrait for Foo {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/coherence/coherence-default-trait-impl.stderr"}, {"sha": "534f4b0dcdb3c988d6323dfc06ce2f8b7cfdc326", "filename": "src/test/ui/coherence/coherence-default-trait-impl.re.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,16 @@\n+error[E0199]: implementing the trait `MySafeTrait` is not unsafe\n+  --> $DIR/coherence-default-trait-impl.rs:10:1\n+   |\n+LL | unsafe impl MySafeTrait for Foo {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0200]: the trait `MyUnsafeTrait` requires an `unsafe impl` declaration\n+  --> $DIR/coherence-default-trait-impl.rs:16:1\n+   |\n+LL | impl MyUnsafeTrait for Foo {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors occurred: E0199, E0200.\n+For more information about an error, try `rustc --explain E0199`."}, {"sha": "b81f75533176f086af77d297a803d1e05ffc8733", "filename": "src/test/ui/coherence/coherence-error-suppression.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-error-suppression.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-error-suppression.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-error-suppression.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,7 +1,7 @@\n error[E0412]: cannot find type `DoesNotExist` in this scope\n-  --> $DIR/coherence-error-suppression.rs:9:14\n+  --> $DIR/coherence-error-suppression.rs:13:14\n    |\n-LL | impl Foo for DoesNotExist {} //~ ERROR cannot find type `DoesNotExist` in this scope\n+LL | impl Foo for DoesNotExist {}\n    |              ^^^^^^^^^^^^ not found in this scope\n \n error: aborting due to previous error", "previous_filename": "src/test/ui/coherence/coherence-error-suppression.stderr"}, {"sha": "b81f75533176f086af77d297a803d1e05ffc8733", "filename": "src/test/ui/coherence/coherence-error-suppression.re.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-error-suppression.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-error-suppression.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-error-suppression.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,9 @@\n+error[E0412]: cannot find type `DoesNotExist` in this scope\n+  --> $DIR/coherence-error-suppression.rs:13:14\n+   |\n+LL | impl Foo for DoesNotExist {}\n+   |              ^^^^^^^^^^^^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0412`."}, {"sha": "b48f6bbfb94173b5014619501417e84bc9081ea7", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait-object-safe.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,7 +1,7 @@\n error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n-  --> $DIR/coherence-impl-trait-for-trait-object-safe.rs:7:6\n+  --> $DIR/coherence-impl-trait-for-trait-object-safe.rs:11:6\n    |\n-LL | impl NotObjectSafe for NotObjectSafe { } //~ ERROR E0038\n+LL | impl NotObjectSafe for NotObjectSafe { }\n    |      ^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n    |\n    = note: method `eq` references the `Self` type in its arguments or return type", "previous_filename": "src/test/ui/coherence/coherence-impl-trait-for-trait-object-safe.stderr"}, {"sha": "b48f6bbfb94173b5014619501417e84bc9081ea7", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait-object-safe.re.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,11 @@\n+error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n+  --> $DIR/coherence-impl-trait-for-trait-object-safe.rs:11:6\n+   |\n+LL | impl NotObjectSafe for NotObjectSafe { }\n+   |      ^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n+   |\n+   = note: method `eq` references the `Self` type in its arguments or return type\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "324747603f91128fbaf2e6f519f686abacab4d2d", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait.old.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,19 +1,19 @@\n error[E0371]: the object type `(dyn Baz + 'static)` automatically implements the trait `Foo`\n-  --> $DIR/coherence-impl-trait-for-trait.rs:9:1\n+  --> $DIR/coherence-impl-trait-for-trait.rs:13:1\n    |\n-LL | impl Foo for Baz { }   //~ ERROR E0371\n+LL | impl Foo for Baz { }\n    | ^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Foo`\n \n error[E0371]: the object type `(dyn Baz + 'static)` automatically implements the trait `Bar`\n-  --> $DIR/coherence-impl-trait-for-trait.rs:10:1\n+  --> $DIR/coherence-impl-trait-for-trait.rs:16:1\n    |\n-LL | impl Bar for Baz { }   //~ ERROR E0371\n+LL | impl Bar for Baz { }\n    | ^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Bar`\n \n error[E0371]: the object type `(dyn Baz + 'static)` automatically implements the trait `Baz`\n-  --> $DIR/coherence-impl-trait-for-trait.rs:11:1\n+  --> $DIR/coherence-impl-trait-for-trait.rs:19:1\n    |\n-LL | impl Baz for Baz { }   //~ ERROR E0371\n+LL | impl Baz for Baz { }\n    | ^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Baz`\n \n error: aborting due to 3 previous errors", "previous_filename": "src/test/ui/coherence/coherence-impl-trait-for-trait.stderr"}, {"sha": "324747603f91128fbaf2e6f519f686abacab4d2d", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait.re.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,21 @@\n+error[E0371]: the object type `(dyn Baz + 'static)` automatically implements the trait `Foo`\n+  --> $DIR/coherence-impl-trait-for-trait.rs:13:1\n+   |\n+LL | impl Foo for Baz { }\n+   | ^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Foo`\n+\n+error[E0371]: the object type `(dyn Baz + 'static)` automatically implements the trait `Bar`\n+  --> $DIR/coherence-impl-trait-for-trait.rs:16:1\n+   |\n+LL | impl Bar for Baz { }\n+   | ^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Bar`\n+\n+error[E0371]: the object type `(dyn Baz + 'static)` automatically implements the trait `Baz`\n+  --> $DIR/coherence-impl-trait-for-trait.rs:19:1\n+   |\n+LL | impl Baz for Baz { }\n+   | ^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Baz`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0371`."}, {"sha": "defbbbadd5598461f3be680663469a6edc8322a7", "filename": "src/test/ui/coherence/coherence-impls-copy.old.stderr", "status": "renamed", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `i32`:\n-  --> $DIR/coherence-impls-copy.rs:5:1\n+  --> $DIR/coherence-impls-copy.rs:8:1\n    |\n LL | impl Copy for i32 {}\n    | ^^^^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL | impl Copy for i32 {}\n            - impl std::marker::Copy for i32;\n \n error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `&NotSync`:\n-  --> $DIR/coherence-impls-copy.rs:31:1\n+  --> $DIR/coherence-impls-copy.rs:37:1\n    |\n LL | impl Copy for &'static NotSync {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -18,7 +18,7 @@ LL | impl Copy for &'static NotSync {}\n              where T: ?Sized;\n \n error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `&[NotSync]`:\n-  --> $DIR/coherence-impls-copy.rs:38:1\n+  --> $DIR/coherence-impls-copy.rs:45:1\n    |\n LL | impl Copy for &'static [NotSync] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -28,25 +28,25 @@ LL | impl Copy for &'static [NotSync] {}\n              where T: ?Sized;\n \n error[E0206]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/coherence-impls-copy.rs:23:15\n+  --> $DIR/coherence-impls-copy.rs:27:15\n    |\n LL | impl Copy for &'static mut MyType {}\n    |               ^^^^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n \n error[E0206]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/coherence-impls-copy.rs:27:15\n+  --> $DIR/coherence-impls-copy.rs:32:15\n    |\n LL | impl Copy for (MyType, MyType) {}\n    |               ^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n \n error[E0206]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/coherence-impls-copy.rs:34:15\n+  --> $DIR/coherence-impls-copy.rs:40:15\n    |\n LL | impl Copy for [MyType] {}\n    |               ^^^^^^^^ type is not a structure or enumeration\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-copy.rs:5:1\n+  --> $DIR/coherence-impls-copy.rs:8:1\n    |\n LL | impl Copy for i32 {}\n    | ^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n@@ -55,7 +55,7 @@ LL | impl Copy for i32 {}\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-copy.rs:27:1\n+  --> $DIR/coherence-impls-copy.rs:32:1\n    |\n LL | impl Copy for (MyType, MyType) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n@@ -64,7 +64,7 @@ LL | impl Copy for (MyType, MyType) {}\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-copy.rs:34:1\n+  --> $DIR/coherence-impls-copy.rs:40:1\n    |\n LL | impl Copy for [MyType] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n@@ -73,7 +73,7 @@ LL | impl Copy for [MyType] {}\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-copy.rs:38:1\n+  --> $DIR/coherence-impls-copy.rs:45:1\n    |\n LL | impl Copy for &'static [NotSync] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate", "previous_filename": "src/test/ui/coherence/coherence-impls-copy.stderr"}, {"sha": "defbbbadd5598461f3be680663469a6edc8322a7", "filename": "src/test/ui/coherence/coherence-impls-copy.re.stderr", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,87 @@\n+error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `i32`:\n+  --> $DIR/coherence-impls-copy.rs:8:1\n+   |\n+LL | impl Copy for i32 {}\n+   | ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: conflicting implementation in crate `core`:\n+           - impl std::marker::Copy for i32;\n+\n+error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `&NotSync`:\n+  --> $DIR/coherence-impls-copy.rs:37:1\n+   |\n+LL | impl Copy for &'static NotSync {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: conflicting implementation in crate `core`:\n+           - impl<T> std::marker::Copy for &T\n+             where T: ?Sized;\n+\n+error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `&[NotSync]`:\n+  --> $DIR/coherence-impls-copy.rs:45:1\n+   |\n+LL | impl Copy for &'static [NotSync] {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: conflicting implementation in crate `core`:\n+           - impl<T> std::marker::Copy for &T\n+             where T: ?Sized;\n+\n+error[E0206]: the trait `Copy` may not be implemented for this type\n+  --> $DIR/coherence-impls-copy.rs:27:15\n+   |\n+LL | impl Copy for &'static mut MyType {}\n+   |               ^^^^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n+\n+error[E0206]: the trait `Copy` may not be implemented for this type\n+  --> $DIR/coherence-impls-copy.rs:32:15\n+   |\n+LL | impl Copy for (MyType, MyType) {}\n+   |               ^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n+\n+error[E0206]: the trait `Copy` may not be implemented for this type\n+  --> $DIR/coherence-impls-copy.rs:40:15\n+   |\n+LL | impl Copy for [MyType] {}\n+   |               ^^^^^^^^ type is not a structure or enumeration\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-copy.rs:8:1\n+   |\n+LL | impl Copy for i32 {}\n+   | ^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-copy.rs:32:1\n+   |\n+LL | impl Copy for (MyType, MyType) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-copy.rs:40:1\n+   |\n+LL | impl Copy for [MyType] {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-copy.rs:45:1\n+   |\n+LL | impl Copy for &'static [NotSync] {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to 10 previous errors\n+\n+Some errors occurred: E0117, E0119, E0206.\n+For more information about an error, try `rustc --explain E0117`."}, {"sha": "ca45c28ec2d7484393b95d6efedaa96474007c57", "filename": "src/test/ui/coherence/coherence-impls-send.old.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,5 +1,5 @@\n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-send.rs:17:1\n+  --> $DIR/coherence-impls-send.rs:20:1\n    |\n LL | unsafe impl Send for (MyType, MyType) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n@@ -8,13 +8,13 @@ LL | unsafe impl Send for (MyType, MyType) {}\n    = note: define and implement a trait or new type instead\n \n error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `&'static NotSync`\n-  --> $DIR/coherence-impls-send.rs:20:1\n+  --> $DIR/coherence-impls-send.rs:24:1\n    |\n LL | unsafe impl Send for &'static NotSync {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't implement cross-crate trait with a default impl for non-struct/enum type\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-send.rs:23:1\n+  --> $DIR/coherence-impls-send.rs:28:1\n    |\n LL | unsafe impl Send for [MyType] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n@@ -23,7 +23,7 @@ LL | unsafe impl Send for [MyType] {}\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-send.rs:26:1\n+  --> $DIR/coherence-impls-send.rs:32:1\n    |\n LL | unsafe impl Send for &'static [NotSync] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate", "previous_filename": "src/test/ui/coherence/coherence-impls-send.stderr"}, {"sha": "ca45c28ec2d7484393b95d6efedaa96474007c57", "filename": "src/test/ui/coherence/coherence-impls-send.re.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,37 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-send.rs:20:1\n+   |\n+LL | unsafe impl Send for (MyType, MyType) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `&'static NotSync`\n+  --> $DIR/coherence-impls-send.rs:24:1\n+   |\n+LL | unsafe impl Send for &'static NotSync {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't implement cross-crate trait with a default impl for non-struct/enum type\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-send.rs:28:1\n+   |\n+LL | unsafe impl Send for [MyType] {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-send.rs:32:1\n+   |\n+LL | unsafe impl Send for &'static [NotSync] {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors occurred: E0117, E0321.\n+For more information about an error, try `rustc --explain E0117`."}, {"sha": "c9c7dd0ed66887edfcb537efc4c818e4705f5cf0", "filename": "src/test/ui/coherence/coherence-impls-sized.old.stderr", "status": "renamed", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,61 +1,61 @@\n error[E0322]: explicit impls for the `Sized` trait are not permitted\n-  --> $DIR/coherence-impls-sized.rs:14:1\n+  --> $DIR/coherence-impls-sized.rs:17:1\n    |\n-LL | impl Sized for TestE {} //~ ERROR E0322\n+LL | impl Sized for TestE {}\n    | ^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n \n error[E0322]: explicit impls for the `Sized` trait are not permitted\n-  --> $DIR/coherence-impls-sized.rs:17:1\n+  --> $DIR/coherence-impls-sized.rs:22:1\n    |\n-LL | impl Sized for MyType {} //~ ERROR E0322\n+LL | impl Sized for MyType {}\n    | ^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n \n error[E0322]: explicit impls for the `Sized` trait are not permitted\n-  --> $DIR/coherence-impls-sized.rs:20:1\n+  --> $DIR/coherence-impls-sized.rs:27:1\n    |\n-LL | impl Sized for (MyType, MyType) {} //~ ERROR E0322\n+LL | impl Sized for (MyType, MyType) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n \n error[E0322]: explicit impls for the `Sized` trait are not permitted\n-  --> $DIR/coherence-impls-sized.rs:24:1\n+  --> $DIR/coherence-impls-sized.rs:34:1\n    |\n-LL | impl Sized for &'static NotSync {} //~ ERROR E0322\n+LL | impl Sized for &'static NotSync {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n \n error[E0322]: explicit impls for the `Sized` trait are not permitted\n-  --> $DIR/coherence-impls-sized.rs:27:1\n+  --> $DIR/coherence-impls-sized.rs:39:1\n    |\n-LL | impl Sized for [MyType] {} //~ ERROR E0322\n+LL | impl Sized for [MyType] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n \n error[E0322]: explicit impls for the `Sized` trait are not permitted\n-  --> $DIR/coherence-impls-sized.rs:31:1\n+  --> $DIR/coherence-impls-sized.rs:46:1\n    |\n-LL | impl Sized for &'static [NotSync] {} //~ ERROR E0322\n+LL | impl Sized for &'static [NotSync] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-sized.rs:20:1\n+  --> $DIR/coherence-impls-sized.rs:27:1\n    |\n-LL | impl Sized for (MyType, MyType) {} //~ ERROR E0322\n+LL | impl Sized for (MyType, MyType) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n    = note: the impl does not reference any types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-sized.rs:27:1\n+  --> $DIR/coherence-impls-sized.rs:39:1\n    |\n-LL | impl Sized for [MyType] {} //~ ERROR E0322\n+LL | impl Sized for [MyType] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n    = note: the impl does not reference any types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-sized.rs:31:1\n+  --> $DIR/coherence-impls-sized.rs:46:1\n    |\n-LL | impl Sized for &'static [NotSync] {} //~ ERROR E0322\n+LL | impl Sized for &'static [NotSync] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n    = note: the impl does not reference any types defined in this crate", "previous_filename": "src/test/ui/coherence/coherence-impls-sized.stderr"}, {"sha": "c9c7dd0ed66887edfcb537efc4c818e4705f5cf0", "filename": "src/test/ui/coherence/coherence-impls-sized.re.stderr", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,67 @@\n+error[E0322]: explicit impls for the `Sized` trait are not permitted\n+  --> $DIR/coherence-impls-sized.rs:17:1\n+   |\n+LL | impl Sized for TestE {}\n+   | ^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n+\n+error[E0322]: explicit impls for the `Sized` trait are not permitted\n+  --> $DIR/coherence-impls-sized.rs:22:1\n+   |\n+LL | impl Sized for MyType {}\n+   | ^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n+\n+error[E0322]: explicit impls for the `Sized` trait are not permitted\n+  --> $DIR/coherence-impls-sized.rs:27:1\n+   |\n+LL | impl Sized for (MyType, MyType) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n+\n+error[E0322]: explicit impls for the `Sized` trait are not permitted\n+  --> $DIR/coherence-impls-sized.rs:34:1\n+   |\n+LL | impl Sized for &'static NotSync {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n+\n+error[E0322]: explicit impls for the `Sized` trait are not permitted\n+  --> $DIR/coherence-impls-sized.rs:39:1\n+   |\n+LL | impl Sized for [MyType] {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n+\n+error[E0322]: explicit impls for the `Sized` trait are not permitted\n+  --> $DIR/coherence-impls-sized.rs:46:1\n+   |\n+LL | impl Sized for &'static [NotSync] {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-sized.rs:27:1\n+   |\n+LL | impl Sized for (MyType, MyType) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-sized.rs:39:1\n+   |\n+LL | impl Sized for [MyType] {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-sized.rs:46:1\n+   |\n+LL | impl Sized for &'static [NotSync] {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to 9 previous errors\n+\n+Some errors occurred: E0117, E0322.\n+For more information about an error, try `rustc --explain E0117`."}, {"sha": "a2fa49acd2c906404a6f8d27961a86e177eaf946", "filename": "src/test/ui/coherence/coherence-inherited-assoc-ty-cycle-err.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,12 +1,12 @@\n error[E0391]: cycle detected when processing `Trait`\n-  --> $DIR/coherence-inherited-assoc-ty-cycle-err.rs:9:1\n+  --> $DIR/coherence-inherited-assoc-ty-cycle-err.rs:12:1\n    |\n LL | trait Trait<T> { type Assoc; }\n    | ^^^^^^^^^^^^^^\n    |\n    = note: ...which again requires processing `Trait`, completing the cycle\n note: cycle used when coherence checking all impls of trait `Trait`\n-  --> $DIR/coherence-inherited-assoc-ty-cycle-err.rs:9:1\n+  --> $DIR/coherence-inherited-assoc-ty-cycle-err.rs:12:1\n    |\n LL | trait Trait<T> { type Assoc; }\n    | ^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/coherence/coherence-inherited-assoc-ty-cycle-err.stderr"}, {"sha": "a2fa49acd2c906404a6f8d27961a86e177eaf946", "filename": "src/test/ui/coherence/coherence-inherited-assoc-ty-cycle-err.re.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,16 @@\n+error[E0391]: cycle detected when processing `Trait`\n+  --> $DIR/coherence-inherited-assoc-ty-cycle-err.rs:12:1\n+   |\n+LL | trait Trait<T> { type Assoc; }\n+   | ^^^^^^^^^^^^^^\n+   |\n+   = note: ...which again requires processing `Trait`, completing the cycle\n+note: cycle used when coherence checking all impls of trait `Trait`\n+  --> $DIR/coherence-inherited-assoc-ty-cycle-err.rs:12:1\n+   |\n+LL | trait Trait<T> { type Assoc; }\n+   | ^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0391`."}, {"sha": "ac77241e9e7918ee00bf356e0d0eddbc4be70757", "filename": "src/test/ui/coherence/coherence-lone-type-parameter.old.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,5 +1,5 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-lone-type-parameter.rs:6:1\n+  --> $DIR/coherence-lone-type-parameter.rs:9:1\n    |\n LL | impl<T> Remote for T { }\n    | ^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type", "previous_filename": "src/test/ui/coherence/coherence-lone-type-parameter.stderr"}, {"sha": "ac77241e9e7918ee00bf356e0d0eddbc4be70757", "filename": "src/test/ui/coherence/coherence-lone-type-parameter.re.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,11 @@\n+error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n+  --> $DIR/coherence-lone-type-parameter.rs:9:1\n+   |\n+LL | impl<T> Remote for T { }\n+   | ^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |\n+   = note: only traits defined in the current crate can be implemented for a type parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0210`."}, {"sha": "7ed47dca4972de3c16fb636e6c61d16dfc78f107", "filename": "src/test/ui/coherence/coherence-negative-impls-safe.old.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,5 +1,5 @@\n error[E0198]: negative impls cannot be unsafe\n-  --> $DIR/coherence-negative-impls-safe.rs:7:1\n+  --> $DIR/coherence-negative-impls-safe.rs:10:1\n    |\n LL | unsafe impl !Send for TestType {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/coherence/coherence-negative-impls-safe.stderr"}, {"sha": "7ed47dca4972de3c16fb636e6c61d16dfc78f107", "filename": "src/test/ui/coherence/coherence-negative-impls-safe.re.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,9 @@\n+error[E0198]: negative impls cannot be unsafe\n+  --> $DIR/coherence-negative-impls-safe.rs:10:1\n+   |\n+LL | unsafe impl !Send for TestType {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0198`."}, {"sha": "81465e718567669dfca3ced49a27b7769e88838a", "filename": "src/test/ui/coherence/coherence-no-direct-lifetime-dispatch.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-no-direct-lifetime-dispatch.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-no-direct-lifetime-dispatch.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-no-direct-lifetime-dispatch.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,9 +1,9 @@\n error[E0119]: conflicting implementations of trait `MyTrait`:\n-  --> $DIR/coherence-no-direct-lifetime-dispatch.rs:6:1\n+  --> $DIR/coherence-no-direct-lifetime-dispatch.rs:10:1\n    |\n LL | impl<T> MyTrait for T {}\n    | --------------------- first implementation here\n-LL | impl<T: 'static> MyTrait for T {} //~ ERROR E0119\n+LL | impl<T: 'static> MyTrait for T {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n \n error: aborting due to previous error", "previous_filename": "src/test/ui/coherence/coherence-no-direct-lifetime-dispatch.stderr"}, {"sha": "81465e718567669dfca3ced49a27b7769e88838a", "filename": "src/test/ui/coherence/coherence-no-direct-lifetime-dispatch.re.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-no-direct-lifetime-dispatch.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-no-direct-lifetime-dispatch.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-no-direct-lifetime-dispatch.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,11 @@\n+error[E0119]: conflicting implementations of trait `MyTrait`:\n+  --> $DIR/coherence-no-direct-lifetime-dispatch.rs:10:1\n+   |\n+LL | impl<T> MyTrait for T {}\n+   | --------------------- first implementation here\n+LL | impl<T: 'static> MyTrait for T {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "da5de461bf41b62df8ad37ac8035c2e47c69a0ca", "filename": "src/test/ui/coherence/coherence-orphan.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,5 +1,5 @@\n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-orphan.rs:11:1\n+  --> $DIR/coherence-orphan.rs:13:1\n    |\n LL | impl TheTrait<usize> for isize { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n@@ -8,7 +8,7 @@ LL | impl TheTrait<usize> for isize { }\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-orphan.rs:18:1\n+  --> $DIR/coherence-orphan.rs:21:1\n    |\n LL | impl !Send for Vec<isize> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate", "previous_filename": "src/test/ui/coherence/coherence-orphan.stderr"}, {"sha": "da5de461bf41b62df8ad37ac8035c2e47c69a0ca", "filename": "src/test/ui/coherence/coherence-orphan.re.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,21 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-orphan.rs:13:1\n+   |\n+LL | impl TheTrait<usize> for isize { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-orphan.rs:21:1\n+   |\n+LL | impl !Send for Vec<isize> { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "c7f85b0b59078517b12fa348e9eb84f09bf3bf52", "filename": "src/test/ui/coherence/coherence-overlap-all-t-and-tuple.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-all-t-and-tuple.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-all-t-and-tuple.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-all-t-and-tuple.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,10 +1,10 @@\n error[E0119]: conflicting implementations of trait `From<(_,)>` for type `(_,)`:\n-  --> $DIR/coherence-overlap-all-t-and-tuple.rs:16:1\n+  --> $DIR/coherence-overlap-all-t-and-tuple.rs:20:1\n    |\n LL | impl <T> From<T> for T {\n    | ---------------------- first implementation here\n ...\n-LL | impl <T11, U11> From<(U11,)> for (T11,) { //~ ERROR E0119\n+LL | impl <T11, U11> From<(U11,)> for (T11,) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(_,)`\n \n error: aborting due to previous error", "previous_filename": "src/test/ui/coherence/coherence-overlap-all-t-and-tuple.stderr"}, {"sha": "c7f85b0b59078517b12fa348e9eb84f09bf3bf52", "filename": "src/test/ui/coherence/coherence-overlap-all-t-and-tuple.re.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-all-t-and-tuple.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-all-t-and-tuple.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-all-t-and-tuple.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,12 @@\n+error[E0119]: conflicting implementations of trait `From<(_,)>` for type `(_,)`:\n+  --> $DIR/coherence-overlap-all-t-and-tuple.rs:20:1\n+   |\n+LL | impl <T> From<T> for T {\n+   | ---------------------- first implementation here\n+...\n+LL | impl <T11, U11> From<(U11,)> for (T11,) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(_,)`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "dcfc017f1b0387a620a9125175545a7bedffb2af", "filename": "src/test/ui/coherence/coherence-overlap-downstream-inherent.old.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream-inherent.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream-inherent.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream-inherent.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,18 +1,18 @@\n error[E0592]: duplicate definitions with name `dummy`\n-  --> $DIR/coherence-overlap-downstream-inherent.rs:7:26\n+  --> $DIR/coherence-overlap-downstream-inherent.rs:11:26\n    |\n LL | impl<T:Sugar> Sweet<T> { fn dummy(&self) { } }\n    |                          ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n-LL | //~^ ERROR E0592\n+...\n LL | impl<T:Fruit> Sweet<T> { fn dummy(&self) { } }\n    |                          ------------------- other definition for `dummy`\n \n error[E0592]: duplicate definitions with name `f`\n-  --> $DIR/coherence-overlap-downstream-inherent.rs:13:38\n+  --> $DIR/coherence-overlap-downstream-inherent.rs:18:38\n    |\n LL | impl<X, T> A<T, X> where T: Bar<X> { fn f(&self) {} }\n    |                                      ^^^^^^^^^^^^^^ duplicate definitions for `f`\n-LL | //~^ ERROR E0592\n+...\n LL | impl<X> A<i32, X> { fn f(&self) {} }\n    |                     -------------- other definition for `f`\n    |", "previous_filename": "src/test/ui/coherence/coherence-overlap-downstream-inherent.stderr"}, {"sha": "dcfc017f1b0387a620a9125175545a7bedffb2af", "filename": "src/test/ui/coherence/coherence-overlap-downstream-inherent.re.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream-inherent.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream-inherent.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream-inherent.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,23 @@\n+error[E0592]: duplicate definitions with name `dummy`\n+  --> $DIR/coherence-overlap-downstream-inherent.rs:11:26\n+   |\n+LL | impl<T:Sugar> Sweet<T> { fn dummy(&self) { } }\n+   |                          ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n+...\n+LL | impl<T:Fruit> Sweet<T> { fn dummy(&self) { } }\n+   |                          ------------------- other definition for `dummy`\n+\n+error[E0592]: duplicate definitions with name `f`\n+  --> $DIR/coherence-overlap-downstream-inherent.rs:18:38\n+   |\n+LL | impl<X, T> A<T, X> where T: Bar<X> { fn f(&self) {} }\n+   |                                      ^^^^^^^^^^^^^^ duplicate definitions for `f`\n+...\n+LL | impl<X> A<i32, X> { fn f(&self) {} }\n+   |                     -------------- other definition for `f`\n+   |\n+   = note: downstream crates may implement trait `Bar<_>` for type `i32`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0592`."}, {"sha": "b4847c03d417990e1ef3743cd795db486cac7138", "filename": "src/test/ui/coherence/coherence-overlap-downstream.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,13 +1,13 @@\n error[E0119]: conflicting implementations of trait `Sweet`:\n-  --> $DIR/coherence-overlap-downstream.rs:8:1\n+  --> $DIR/coherence-overlap-downstream.rs:12:1\n    |\n LL | impl<T:Sugar> Sweet for T { }\n    | ------------------------- first implementation here\n LL | impl<T:Fruit> Sweet for T { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n \n error[E0119]: conflicting implementations of trait `Foo<_>` for type `i32`:\n-  --> $DIR/coherence-overlap-downstream.rs:14:1\n+  --> $DIR/coherence-overlap-downstream.rs:19:1\n    |\n LL | impl<X, T> Foo<X> for T where T: Bar<X> {}\n    | --------------------------------------- first implementation here", "previous_filename": "src/test/ui/coherence/coherence-overlap-downstream.stderr"}, {"sha": "b4847c03d417990e1ef3743cd795db486cac7138", "filename": "src/test/ui/coherence/coherence-overlap-downstream.re.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,21 @@\n+error[E0119]: conflicting implementations of trait `Sweet`:\n+  --> $DIR/coherence-overlap-downstream.rs:12:1\n+   |\n+LL | impl<T:Sugar> Sweet for T { }\n+   | ------------------------- first implementation here\n+LL | impl<T:Fruit> Sweet for T { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n+\n+error[E0119]: conflicting implementations of trait `Foo<_>` for type `i32`:\n+  --> $DIR/coherence-overlap-downstream.rs:19:1\n+   |\n+LL | impl<X, T> Foo<X> for T where T: Bar<X> {}\n+   | --------------------------------------- first implementation here\n+LL | impl<X> Foo<X> for i32 {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i32`\n+   |\n+   = note: downstream crates may implement trait `Bar<_>` for type `i32`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "6fd9307754033b1aba0efd541986c7eed51b451f", "filename": "src/test/ui/coherence/coherence-overlap-issue-23516-inherent.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516-inherent.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516-inherent.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516-inherent.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,9 +1,9 @@\n error[E0592]: duplicate definitions with name `dummy`\n-  --> $DIR/coherence-overlap-issue-23516-inherent.rs:9:25\n+  --> $DIR/coherence-overlap-issue-23516-inherent.rs:13:25\n    |\n LL | impl<T:Sugar> Cake<T> { fn dummy(&self) { } }\n    |                         ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n-LL | //~^ ERROR E0592\n+...\n LL | impl<U:Sugar> Cake<Box<U>> { fn dummy(&self) { } }\n    |                              ------------------- other definition for `dummy`\n    |", "previous_filename": "src/test/ui/coherence/coherence-overlap-issue-23516-inherent.stderr"}, {"sha": "6fd9307754033b1aba0efd541986c7eed51b451f", "filename": "src/test/ui/coherence/coherence-overlap-issue-23516-inherent.re.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516-inherent.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516-inherent.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516-inherent.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,14 @@\n+error[E0592]: duplicate definitions with name `dummy`\n+  --> $DIR/coherence-overlap-issue-23516-inherent.rs:13:25\n+   |\n+LL | impl<T:Sugar> Cake<T> { fn dummy(&self) { } }\n+   |                         ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n+...\n+LL | impl<U:Sugar> Cake<Box<U>> { fn dummy(&self) { } }\n+   |                              ------------------- other definition for `dummy`\n+   |\n+   = note: downstream crates may implement trait `Sugar` for type `std::boxed::Box<_>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0592`."}, {"sha": "d17d67adf0eae97c0a5d72d94ce1dcb4f5368a29", "filename": "src/test/ui/coherence/coherence-overlap-issue-23516.old.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `Sweet` for type `std::boxed::Box<_>`:\n-  --> $DIR/coherence-overlap-issue-23516.rs:8:1\n+  --> $DIR/coherence-overlap-issue-23516.rs:12:1\n    |\n LL | impl<T:Sugar> Sweet for T { }\n    | ------------------------- first implementation here", "previous_filename": "src/test/ui/coherence/coherence-overlap-issue-23516.stderr"}, {"sha": "d17d67adf0eae97c0a5d72d94ce1dcb4f5368a29", "filename": "src/test/ui/coherence/coherence-overlap-issue-23516.re.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,13 @@\n+error[E0119]: conflicting implementations of trait `Sweet` for type `std::boxed::Box<_>`:\n+  --> $DIR/coherence-overlap-issue-23516.rs:12:1\n+   |\n+LL | impl<T:Sugar> Sweet for T { }\n+   | ------------------------- first implementation here\n+LL | impl<U:Sugar> Sweet for Box<U> { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `std::boxed::Box<_>`\n+   |\n+   = note: downstream crates may implement trait `Sugar` for type `std::boxed::Box<_>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "429e67573b59befec12b3cd68c4e5f5de79091ad", "filename": "src/test/ui/coherence/coherence-overlap-messages.old.stderr", "status": "renamed", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-messages.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-messages.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-messages.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,42 +1,42 @@\n error[E0119]: conflicting implementations of trait `Foo`:\n-  --> $DIR/coherence-overlap-messages.rs:4:1\n+  --> $DIR/coherence-overlap-messages.rs:8:1\n    |\n LL | impl<T> Foo for T {}\n    | ----------------- first implementation here\n-LL | impl<U> Foo for U {} //~ ERROR conflicting implementations of trait `Foo`:\n+LL | impl<U> Foo for U {}\n    | ^^^^^^^^^^^^^^^^^ conflicting implementation\n \n error[E0119]: conflicting implementations of trait `Bar` for type `(u8, u8)`:\n-  --> $DIR/coherence-overlap-messages.rs:9:1\n+  --> $DIR/coherence-overlap-messages.rs:16:1\n    |\n LL | impl<T> Bar for (T, u8) {}\n    | ----------------------- first implementation here\n-LL | impl<T> Bar for (u8, T) {} //~ ERROR conflicting implementations of trait `Bar` for type `(u8, u8)`:\n+LL | impl<T> Bar for (u8, T) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(u8, u8)`\n \n error[E0119]: conflicting implementations of trait `Baz<u8>` for type `u8`:\n-  --> $DIR/coherence-overlap-messages.rs:14:1\n+  --> $DIR/coherence-overlap-messages.rs:23:1\n    |\n LL | impl<T> Baz<u8> for T {}\n    | --------------------- first implementation here\n-LL | impl<T> Baz<T> for u8 {} //~ ERROR conflicting implementations of trait `Baz<u8>` for type `u8`:\n+LL | impl<T> Baz<T> for u8 {}\n    | ^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `u8`\n \n error[E0119]: conflicting implementations of trait `Quux<_, _>`:\n-  --> $DIR/coherence-overlap-messages.rs:19:1\n+  --> $DIR/coherence-overlap-messages.rs:30:1\n    |\n LL | impl<T, U, V> Quux<U, V> for T {}\n    | ------------------------------ first implementation here\n-LL | impl<T, U> Quux<U, U> for T {} //~ ERROR conflicting implementations of trait `Quux<_, _>`:\n+LL | impl<T, U> Quux<U, U> for T {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n \n error[E0119]: conflicting implementations of trait `Quux<_, _>`:\n-  --> $DIR/coherence-overlap-messages.rs:20:1\n+  --> $DIR/coherence-overlap-messages.rs:33:1\n    |\n LL | impl<T, U, V> Quux<U, V> for T {}\n    | ------------------------------ first implementation here\n-LL | impl<T, U> Quux<U, U> for T {} //~ ERROR conflicting implementations of trait `Quux<_, _>`:\n-LL | impl<T, V> Quux<T, V> for T {} //~ ERROR conflicting implementations of trait `Quux<_, _>`:\n+...\n+LL | impl<T, V> Quux<T, V> for T {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n \n error: aborting due to 5 previous errors", "previous_filename": "src/test/ui/coherence/coherence-overlap-messages.stderr"}, {"sha": "429e67573b59befec12b3cd68c4e5f5de79091ad", "filename": "src/test/ui/coherence/coherence-overlap-messages.re.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-messages.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-messages.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-messages.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,44 @@\n+error[E0119]: conflicting implementations of trait `Foo`:\n+  --> $DIR/coherence-overlap-messages.rs:8:1\n+   |\n+LL | impl<T> Foo for T {}\n+   | ----------------- first implementation here\n+LL | impl<U> Foo for U {}\n+   | ^^^^^^^^^^^^^^^^^ conflicting implementation\n+\n+error[E0119]: conflicting implementations of trait `Bar` for type `(u8, u8)`:\n+  --> $DIR/coherence-overlap-messages.rs:16:1\n+   |\n+LL | impl<T> Bar for (T, u8) {}\n+   | ----------------------- first implementation here\n+LL | impl<T> Bar for (u8, T) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(u8, u8)`\n+\n+error[E0119]: conflicting implementations of trait `Baz<u8>` for type `u8`:\n+  --> $DIR/coherence-overlap-messages.rs:23:1\n+   |\n+LL | impl<T> Baz<u8> for T {}\n+   | --------------------- first implementation here\n+LL | impl<T> Baz<T> for u8 {}\n+   | ^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `u8`\n+\n+error[E0119]: conflicting implementations of trait `Quux<_, _>`:\n+  --> $DIR/coherence-overlap-messages.rs:30:1\n+   |\n+LL | impl<T, U, V> Quux<U, V> for T {}\n+   | ------------------------------ first implementation here\n+LL | impl<T, U> Quux<U, U> for T {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n+\n+error[E0119]: conflicting implementations of trait `Quux<_, _>`:\n+  --> $DIR/coherence-overlap-messages.rs:33:1\n+   |\n+LL | impl<T, U, V> Quux<U, V> for T {}\n+   | ------------------------------ first implementation here\n+...\n+LL | impl<T, V> Quux<T, V> for T {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "928b65e003918323b570ea07e61f43c316115872", "filename": "src/test/ui/coherence/coherence-overlap-upstream-inherent.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream-inherent.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream-inherent.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream-inherent.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,9 +1,9 @@\n error[E0592]: duplicate definitions with name `dummy`\n-  --> $DIR/coherence-overlap-upstream-inherent.rs:11:32\n+  --> $DIR/coherence-overlap-upstream-inherent.rs:15:32\n    |\n LL | impl<T> A<T> where T: Remote { fn dummy(&self) { } }\n    |                                ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n-LL | //~^ ERROR E0592\n+...\n LL | impl A<i16> { fn dummy(&self) { } }\n    |               ------------------- other definition for `dummy`\n    |", "previous_filename": "src/test/ui/coherence/coherence-overlap-upstream-inherent.stderr"}, {"sha": "928b65e003918323b570ea07e61f43c316115872", "filename": "src/test/ui/coherence/coherence-overlap-upstream-inherent.re.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream-inherent.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream-inherent.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream-inherent.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,14 @@\n+error[E0592]: duplicate definitions with name `dummy`\n+  --> $DIR/coherence-overlap-upstream-inherent.rs:15:32\n+   |\n+LL | impl<T> A<T> where T: Remote { fn dummy(&self) { } }\n+   |                                ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n+...\n+LL | impl A<i16> { fn dummy(&self) { } }\n+   |               ------------------- other definition for `dummy`\n+   |\n+   = note: upstream crates may add new impl of trait `coherence_lib::Remote` for type `i16` in future versions\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0592`."}, {"sha": "6c3484c2d8c4df3ca0ac3d9deee704c982ea70dc", "filename": "src/test/ui/coherence/coherence-overlap-upstream.old.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `Foo` for type `i16`:\n-  --> $DIR/coherence-overlap-upstream.rs:12:1\n+  --> $DIR/coherence-overlap-upstream.rs:16:1\n    |\n LL | impl<T> Foo for T where T: Remote {}\n    | --------------------------------- first implementation here", "previous_filename": "src/test/ui/coherence/coherence-overlap-upstream.stderr"}, {"sha": "6c3484c2d8c4df3ca0ac3d9deee704c982ea70dc", "filename": "src/test/ui/coherence/coherence-overlap-upstream.re.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,13 @@\n+error[E0119]: conflicting implementations of trait `Foo` for type `i16`:\n+  --> $DIR/coherence-overlap-upstream.rs:16:1\n+   |\n+LL | impl<T> Foo for T where T: Remote {}\n+   | --------------------------------- first implementation here\n+LL | impl Foo for i16 {}\n+   | ^^^^^^^^^^^^^^^^ conflicting implementation for `i16`\n+   |\n+   = note: upstream crates may add new impl of trait `coherence_lib::Remote` for type `i16` in future versions\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "b275af9668d16124b04687bc1f9f288e313ea8ba", "filename": "src/test/ui/coherence/coherence-overlapping-pairs.old.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,5 +1,5 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-overlapping-pairs.rs:8:1\n+  --> $DIR/coherence-overlapping-pairs.rs:11:1\n    |\n LL | impl<T> Remote for lib::Pair<T,Foo> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type", "previous_filename": "src/test/ui/coherence/coherence-overlapping-pairs.stderr"}, {"sha": "0f2ec6f4ce0699d079c518744333b87abc9c2eca", "filename": "src/test/ui/coherence/coherence-overlapping-pairs.re.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,12 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-overlapping-pairs.rs:11:1\n+   |\n+LL | impl<T> Remote for lib::Pair<T,Foo> { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "8b25bee6e2f82a148a15c118e2d109908f8c0356", "filename": "src/test/ui/coherence/coherence-pair-covered-uncovered-1.old.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,5 +1,5 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-pair-covered-uncovered-1.rs:11:1\n+  --> $DIR/coherence-pair-covered-uncovered-1.rs:15:1\n    |\n LL | impl<T, U> Remote1<Pair<T, Local<U>>> for i32 { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type", "previous_filename": "src/test/ui/coherence/coherence-pair-covered-uncovered-1.stderr"}, {"sha": "0c654ca41835d5f1c81a55eea2b38605d1395b00", "filename": "src/test/ui/coherence/coherence-pair-covered-uncovered-1.re.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,12 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-pair-covered-uncovered-1.rs:15:1\n+   |\n+LL | impl<T, U> Remote1<Pair<T, Local<U>>> for i32 { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "39558d8dcc03797c442d2a0a8f48ee5abb7c19f7", "filename": "src/test/ui/coherence/coherence-pair-covered-uncovered.old.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,5 +1,5 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-pair-covered-uncovered.rs:8:1\n+  --> $DIR/coherence-pair-covered-uncovered.rs:11:1\n    |\n LL | impl<T,U> Remote for Pair<T,Local<U>> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type", "previous_filename": "src/test/ui/coherence/coherence-pair-covered-uncovered.stderr"}, {"sha": "9bddc15390212cb4b2674c9d049daae3aeca4d30", "filename": "src/test/ui/coherence/coherence-pair-covered-uncovered.re.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,12 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-pair-covered-uncovered.rs:11:1\n+   |\n+LL | impl<T,U> Remote for Pair<T,Local<U>> { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "cde9360ddf2c8f92b56611fc39c694df9a4b533e", "filename": "src/test/ui/coherence/coherence-projection-conflict-orphan.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,10 +1,10 @@\n error[E0119]: conflicting implementations of trait `Foo<i32>` for type `i32`:\n-  --> $DIR/coherence-projection-conflict-orphan.rs:16:1\n+  --> $DIR/coherence-projection-conflict-orphan.rs:19:1\n    |\n LL | impl Foo<i32> for i32 { }\n    | --------------------- first implementation here\n LL | \n-LL | impl<A:Iterator> Foo<A::Item> for A { }  //~ ERROR E0119\n+LL | impl<A:Iterator> Foo<A::Item> for A { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i32`\n    |\n    = note: upstream crates may add new impl of trait `std::iter::Iterator` for type `i32` in future versions", "previous_filename": "src/test/ui/coherence/coherence-projection-conflict-orphan.stderr"}, {"sha": "cde9360ddf2c8f92b56611fc39c694df9a4b533e", "filename": "src/test/ui/coherence/coherence-projection-conflict-orphan.re.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,14 @@\n+error[E0119]: conflicting implementations of trait `Foo<i32>` for type `i32`:\n+  --> $DIR/coherence-projection-conflict-orphan.rs:19:1\n+   |\n+LL | impl Foo<i32> for i32 { }\n+   | --------------------- first implementation here\n+LL | \n+LL | impl<A:Iterator> Foo<A::Item> for A { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i32`\n+   |\n+   = note: upstream crates may add new impl of trait `std::iter::Iterator` for type `i32` in future versions\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "b53a4c973edac4a660b08bb853e0982cfcec06b9", "filename": "src/test/ui/coherence/coherence-projection-conflict-ty-param.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,10 +1,10 @@\n error[E0119]: conflicting implementations of trait `Foo<_>` for type `std::option::Option<_>`:\n-  --> $DIR/coherence-projection-conflict-ty-param.rs:10:1\n+  --> $DIR/coherence-projection-conflict-ty-param.rs:14:1\n    |\n LL | impl <P, T: Foo<P>> Foo<P> for Option<T> {}\n    | ---------------------------------------- first implementation here\n LL | \n-LL | impl<T, U> Foo<T> for Option<U> { } //~ ERROR E0119\n+LL | impl<T, U> Foo<T> for Option<U> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `std::option::Option<_>`\n \n error: aborting due to previous error", "previous_filename": "src/test/ui/coherence/coherence-projection-conflict-ty-param.stderr"}, {"sha": "b53a4c973edac4a660b08bb853e0982cfcec06b9", "filename": "src/test/ui/coherence/coherence-projection-conflict-ty-param.re.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,12 @@\n+error[E0119]: conflicting implementations of trait `Foo<_>` for type `std::option::Option<_>`:\n+  --> $DIR/coherence-projection-conflict-ty-param.rs:14:1\n+   |\n+LL | impl <P, T: Foo<P>> Foo<P> for Option<T> {}\n+   | ---------------------------------------- first implementation here\n+LL | \n+LL | impl<T, U> Foo<T> for Option<U> { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `std::option::Option<_>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "c2e5fc86175126dc4f9a69f8b0de444c0f1b6cfa", "filename": "src/test/ui/coherence/coherence-projection-conflict.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,10 +1,10 @@\n error[E0119]: conflicting implementations of trait `Foo<i32>` for type `i32`:\n-  --> $DIR/coherence-projection-conflict.rs:11:1\n+  --> $DIR/coherence-projection-conflict.rs:15:1\n    |\n LL | impl Foo<i32> for i32 { }\n    | --------------------- first implementation here\n LL | \n-LL | impl<A:Bar> Foo<A::Output> for A { } //~ ERROR E0119\n+LL | impl<A:Bar> Foo<A::Output> for A { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i32`\n \n error: aborting due to previous error", "previous_filename": "src/test/ui/coherence/coherence-projection-conflict.stderr"}, {"sha": "c2e5fc86175126dc4f9a69f8b0de444c0f1b6cfa", "filename": "src/test/ui/coherence/coherence-projection-conflict.re.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,12 @@\n+error[E0119]: conflicting implementations of trait `Foo<i32>` for type `i32`:\n+  --> $DIR/coherence-projection-conflict.rs:15:1\n+   |\n+LL | impl Foo<i32> for i32 { }\n+   | --------------------- first implementation here\n+LL | \n+LL | impl<A:Bar> Foo<A::Output> for A { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i32`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "e832bdebbddebfd80a561872a702e4e526c8345f", "filename": "src/test/ui/coherence/coherence-tuple-conflict.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-tuple-conflict.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-tuple-conflict.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-tuple-conflict.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,10 +1,10 @@\n error[E0119]: conflicting implementations of trait `MyTrait` for type `(_, _)`:\n-  --> $DIR/coherence-tuple-conflict.rs:15:1\n+  --> $DIR/coherence-tuple-conflict.rs:19:1\n    |\n LL | impl<T> MyTrait for (T,T) {\n    | ------------------------- first implementation here\n ...\n-LL | impl<A,B> MyTrait for (A,B) { //~ ERROR E0119\n+LL | impl<A,B> MyTrait for (A,B) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(_, _)`\n \n error: aborting due to previous error", "previous_filename": "src/test/ui/coherence/coherence-tuple-conflict.stderr"}, {"sha": "e832bdebbddebfd80a561872a702e4e526c8345f", "filename": "src/test/ui/coherence/coherence-tuple-conflict.re.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-tuple-conflict.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-tuple-conflict.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-tuple-conflict.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,12 @@\n+error[E0119]: conflicting implementations of trait `MyTrait` for type `(_, _)`:\n+  --> $DIR/coherence-tuple-conflict.rs:19:1\n+   |\n+LL | impl<T> MyTrait for (T,T) {\n+   | ------------------------- first implementation here\n+...\n+LL | impl<A,B> MyTrait for (A,B) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(_, _)`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "1c1118a58c6f0eb0778b65642447a2dc7c1ba64f", "filename": "src/test/ui/coherence/coherence-vec-local-2.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,7 +1,7 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-vec-local-2.rs:11:1\n+  --> $DIR/coherence-vec-local-2.rs:14:1\n    |\n-LL | impl<T> Remote for Vec<Local<T>> { } //~ ERROR E0210\n+LL | impl<T> Remote for Vec<Local<T>> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter", "previous_filename": "src/test/ui/coherence/coherence-vec-local-2.stderr"}, {"sha": "37859f7cfa285f4f413fc76295f0d65970344a47", "filename": "src/test/ui/coherence/coherence-vec-local-2.re.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,12 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-vec-local-2.rs:14:1\n+   |\n+LL | impl<T> Remote for Vec<Local<T>> { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "304aaaf36875ccd67327bbff67c991b571bd2e13", "filename": "src/test/ui/coherence/coherence-vec-local.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,7 +1,7 @@\n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-vec-local.rs:11:1\n+  --> $DIR/coherence-vec-local.rs:14:1\n    |\n-LL | impl Remote for Vec<Local> { } //~ ERROR E0117\n+LL | impl Remote for Vec<Local> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n    = note: the impl does not reference any types defined in this crate", "previous_filename": "src/test/ui/coherence/coherence-vec-local.stderr"}, {"sha": "304aaaf36875ccd67327bbff67c991b571bd2e13", "filename": "src/test/ui/coherence/coherence-vec-local.re.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,12 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-vec-local.rs:14:1\n+   |\n+LL | impl Remote for Vec<Local> { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "12c7a1f977c3fefdd878d8b73309af7ee6b1077a", "filename": "src/test/ui/coherence/coherence_copy_like_err_fundamental_struct_tuple.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,10 +1,10 @@\n error[E0119]: conflicting implementations of trait `MyTrait` for type `lib::MyFundamentalStruct<(MyType,)>`:\n-  --> $DIR/coherence_copy_like_err_fundamental_struct_tuple.rs:17:1\n+  --> $DIR/coherence_copy_like_err_fundamental_struct_tuple.rs:19:1\n    |\n LL | impl<T: lib::MyCopy> MyTrait for T { }\n    | ---------------------------------- first implementation here\n ...\n-LL | impl MyTrait for lib::MyFundamentalStruct<(MyType,)> { } //~ ERROR E0119\n+LL | impl MyTrait for lib::MyFundamentalStruct<(MyType,)> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `lib::MyFundamentalStruct<(MyType,)>`\n    |\n    = note: upstream crates may add new impl of trait `lib::MyCopy` for type `lib::MyFundamentalStruct<(MyType,)>` in future versions", "previous_filename": "src/test/ui/coherence/coherence_copy_like_err_fundamental_struct_tuple.stderr"}, {"sha": "12c7a1f977c3fefdd878d8b73309af7ee6b1077a", "filename": "src/test/ui/coherence/coherence_copy_like_err_fundamental_struct_tuple.re.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,14 @@\n+error[E0119]: conflicting implementations of trait `MyTrait` for type `lib::MyFundamentalStruct<(MyType,)>`:\n+  --> $DIR/coherence_copy_like_err_fundamental_struct_tuple.rs:19:1\n+   |\n+LL | impl<T: lib::MyCopy> MyTrait for T { }\n+   | ---------------------------------- first implementation here\n+...\n+LL | impl MyTrait for lib::MyFundamentalStruct<(MyType,)> { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `lib::MyFundamentalStruct<(MyType,)>`\n+   |\n+   = note: upstream crates may add new impl of trait `lib::MyCopy` for type `lib::MyFundamentalStruct<(MyType,)>` in future versions\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "1b6c62e9bf3a802b7c21b36102200be6eec0d172", "filename": "src/test/ui/coherence/coherence_copy_like_err_struct.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,10 +1,10 @@\n error[E0119]: conflicting implementations of trait `MyTrait` for type `lib::MyStruct<MyType>`:\n-  --> $DIR/coherence_copy_like_err_struct.rs:19:1\n+  --> $DIR/coherence_copy_like_err_struct.rs:22:1\n    |\n LL | impl<T: lib::MyCopy> MyTrait for T { }\n    | ---------------------------------- first implementation here\n ...\n-LL | impl MyTrait for lib::MyStruct<MyType> { } //~ ERROR E0119\n+LL | impl MyTrait for lib::MyStruct<MyType> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `lib::MyStruct<MyType>`\n    |\n    = note: upstream crates may add new impl of trait `lib::MyCopy` for type `lib::MyStruct<MyType>` in future versions", "previous_filename": "src/test/ui/coherence/coherence_copy_like_err_struct.stderr"}, {"sha": "1b6c62e9bf3a802b7c21b36102200be6eec0d172", "filename": "src/test/ui/coherence/coherence_copy_like_err_struct.re.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,14 @@\n+error[E0119]: conflicting implementations of trait `MyTrait` for type `lib::MyStruct<MyType>`:\n+  --> $DIR/coherence_copy_like_err_struct.rs:22:1\n+   |\n+LL | impl<T: lib::MyCopy> MyTrait for T { }\n+   | ---------------------------------- first implementation here\n+...\n+LL | impl MyTrait for lib::MyStruct<MyType> { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `lib::MyStruct<MyType>`\n+   |\n+   = note: upstream crates may add new impl of trait `lib::MyCopy` for type `lib::MyStruct<MyType>` in future versions\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "11bd788c761530cdedc7182762d1d4414e167a1e", "filename": "src/test/ui/coherence/coherence_copy_like_err_tuple.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,10 +1,10 @@\n error[E0119]: conflicting implementations of trait `MyTrait` for type `(MyType,)`:\n-  --> $DIR/coherence_copy_like_err_tuple.rs:18:1\n+  --> $DIR/coherence_copy_like_err_tuple.rs:21:1\n    |\n LL | impl<T: lib::MyCopy> MyTrait for T { }\n    | ---------------------------------- first implementation here\n ...\n-LL | impl MyTrait for (MyType,) { } //~ ERROR E0119\n+LL | impl MyTrait for (MyType,) { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(MyType,)`\n    |\n    = note: upstream crates may add new impl of trait `lib::MyCopy` for type `(MyType,)` in future versions", "previous_filename": "src/test/ui/coherence/coherence_copy_like_err_tuple.stderr"}, {"sha": "11bd788c761530cdedc7182762d1d4414e167a1e", "filename": "src/test/ui/coherence/coherence_copy_like_err_tuple.re.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,14 @@\n+error[E0119]: conflicting implementations of trait `MyTrait` for type `(MyType,)`:\n+  --> $DIR/coherence_copy_like_err_tuple.rs:21:1\n+   |\n+LL | impl<T: lib::MyCopy> MyTrait for T { }\n+   | ---------------------------------- first implementation here\n+...\n+LL | impl MyTrait for (MyType,) { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(MyType,)`\n+   |\n+   = note: upstream crates may add new impl of trait `lib::MyCopy` for type `(MyType,)` in future versions\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "fa564459b21334faf795a35ce3dfd7a5ad0592da", "filename": "src/test/ui/coherence/coherence_inherent.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,7 +1,7 @@\n error[E0599]: no method named `the_fn` found for type `&Lib::TheStruct` in the current scope\n-  --> $DIR/coherence_inherent.rs:31:11\n+  --> $DIR/coherence_inherent.rs:35:11\n    |\n-LL |         s.the_fn(); //~ ERROR no method named `the_fn` found\n+LL |         s.the_fn();\n    |           ^^^^^^\n    |\n    = help: items from traits can only be used if the trait is in scope", "previous_filename": "src/test/ui/coherence/coherence_inherent.stderr"}, {"sha": "fa564459b21334faf795a35ce3dfd7a5ad0592da", "filename": "src/test/ui/coherence/coherence_inherent.re.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,13 @@\n+error[E0599]: no method named `the_fn` found for type `&Lib::TheStruct` in the current scope\n+  --> $DIR/coherence_inherent.rs:35:11\n+   |\n+LL |         s.the_fn();\n+   |           ^^^^^^\n+   |\n+   = help: items from traits can only be used if the trait is in scope\n+   = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+           `use Lib::TheTrait;`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "4d93e699031f37896c917b8e2f132ae680a389cc", "filename": "src/test/ui/coherence/coherence_inherent_cc.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,7 +1,7 @@\n error[E0599]: no method named `the_fn` found for type `&coherence_inherent_cc_lib::TheStruct` in the current scope\n-  --> $DIR/coherence_inherent_cc.rs:23:11\n+  --> $DIR/coherence_inherent_cc.rs:26:11\n    |\n-LL |         s.the_fn(); //~ ERROR no method named `the_fn` found\n+LL |         s.the_fn();\n    |           ^^^^^^\n    |\n    = help: items from traits can only be used if the trait is in scope", "previous_filename": "src/test/ui/coherence/coherence_inherent_cc.stderr"}, {"sha": "4d93e699031f37896c917b8e2f132ae680a389cc", "filename": "src/test/ui/coherence/coherence_inherent_cc.re.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,13 @@\n+error[E0599]: no method named `the_fn` found for type `&coherence_inherent_cc_lib::TheStruct` in the current scope\n+  --> $DIR/coherence_inherent_cc.rs:26:11\n+   |\n+LL |         s.the_fn();\n+   |           ^^^^^^\n+   |\n+   = help: items from traits can only be used if the trait is in scope\n+   = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+           `use coherence_inherent_cc_lib::TheTrait;`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "61c94c1c7cad78e0af42701e84080719377d7a62", "filename": "src/test/ui/coherence/coherence_local_err_struct.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,7 +1,7 @@\n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence_local_err_struct.rs:16:1\n+  --> $DIR/coherence_local_err_struct.rs:17:1\n    |\n-LL | impl lib::MyCopy for lib::MyStruct<MyType> { } //~ ERROR E0117\n+LL | impl lib::MyCopy for lib::MyStruct<MyType> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n    = note: the impl does not reference any types defined in this crate", "previous_filename": "src/test/ui/coherence/coherence_local_err_struct.stderr"}, {"sha": "61c94c1c7cad78e0af42701e84080719377d7a62", "filename": "src/test/ui/coherence/coherence_local_err_struct.re.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,12 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence_local_err_struct.rs:17:1\n+   |\n+LL | impl lib::MyCopy for lib::MyStruct<MyType> { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "934e2fcb890e35b99f0b184210cf913c877f4ca4", "filename": "src/test/ui/coherence/coherence_local_err_tuple.old.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.old.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -1,7 +1,7 @@\n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence_local_err_tuple.rs:16:1\n+  --> $DIR/coherence_local_err_tuple.rs:17:1\n    |\n-LL | impl lib::MyCopy for (MyType,) { } //~ ERROR E0117\n+LL | impl lib::MyCopy for (MyType,) { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n    = note: the impl does not reference any types defined in this crate", "previous_filename": "src/test/ui/coherence/coherence_local_err_tuple.stderr"}, {"sha": "934e2fcb890e35b99f0b184210cf913c877f4ca4", "filename": "src/test/ui/coherence/coherence_local_err_tuple.re.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.re.stderr?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,12 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence_local_err_tuple.rs:17:1\n+   |\n+LL | impl lib::MyCopy for (MyType,) { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "33ad4e9753661e43a751da07236968fe7d21cb06", "filename": "src/test/ui/coherence/re-rebalance-coherence.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fre-rebalance-coherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc436e713d4816d66eeb5e0a1691491f68c1067/src%2Ftest%2Fui%2Fcoherence%2Fre-rebalance-coherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fre-rebalance-coherence.rs?ref=2bc436e713d4816d66eeb5e0a1691491f68c1067", "patch": "@@ -0,0 +1,13 @@\n+#![feature(re_rebalance_coherence)]\n+\n+// run-pass\n+// aux-build:re_rebalance_coherence_lib.rs\n+\n+extern crate re_rebalance_coherence_lib as lib;\n+use lib::*;\n+\n+struct Oracle;\n+impl Backend for Oracle {}\n+impl<'a, T:'a, Tab> QueryFragment<Oracle> for BatchInsert<'a, T, Tab> {}\n+\n+fn main() {}"}]}