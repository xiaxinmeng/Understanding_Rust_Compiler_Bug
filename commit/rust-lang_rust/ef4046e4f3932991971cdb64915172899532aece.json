{"sha": "ef4046e4f3932991971cdb64915172899532aece", "node_id": "C_kwDOAAsO6NoAKGVmNDA0NmU0ZjM5MzI5OTE5NzFjZGI2NDkxNTE3Mjg5OTUzMmFlY2U", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-11T17:01:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-11T17:01:44Z"}, "message": "Auto merge of #106730 - Nilstrieb:rollup-f7p8dsa, r=Nilstrieb\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #106321 (Collect and emit proper backtraces for `delay_span_bug`s)\n - #106397 (Check `impl`'s `where` clauses in `consider_impl_candidate` in experimental solver)\n - #106427 (Improve fluent error messages)\n - #106570 (add tests for div_duration_* functions)\n - #106648 (Polymorphization cleanup)\n - #106664 (Remove unnecessary lseek syscall when using std::fs::read)\n - #106709 (Disable \"split dwarf inlining\" by default.)\n - #106715 (Autolabel and ping wg for changes to new solver)\n - #106717 (fix typo LocalItemId -> ItemLocalId)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "0d19af73ce4d98d239abf182b4dc07a44dff124f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d19af73ce4d98d239abf182b4dc07a44dff124f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef4046e4f3932991971cdb64915172899532aece", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef4046e4f3932991971cdb64915172899532aece", "html_url": "https://github.com/rust-lang/rust/commit/ef4046e4f3932991971cdb64915172899532aece", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef4046e4f3932991971cdb64915172899532aece/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b22c152958eade17a71d899b29a2d39bcc77aa48", "url": "https://api.github.com/repos/rust-lang/rust/commits/b22c152958eade17a71d899b29a2d39bcc77aa48", "html_url": "https://github.com/rust-lang/rust/commit/b22c152958eade17a71d899b29a2d39bcc77aa48"}, {"sha": "9aeef61820b4cd14b3f4cab601a95b15ced5862e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9aeef61820b4cd14b3f4cab601a95b15ced5862e", "html_url": "https://github.com/rust-lang/rust/commit/9aeef61820b4cd14b3f4cab601a95b15ced5862e"}], "stats": {"total": 748, "additions": 550, "deletions": 198}, "files": [{"sha": "a61d3ab40a5ca1c0efa4c9d1339ef95bf38be99b", "filename": "compiler/rustc_const_eval/src/interpret/util.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs?ref=ef4046e4f3932991971cdb64915172899532aece", "patch": "@@ -40,12 +40,11 @@ where\n                         let index = index\n                             .try_into()\n                             .expect(\"more generic parameters than can fit into a `u32`\");\n-                        let is_used = unused_params.contains(index).map_or(true, |unused| !unused);\n                         // Only recurse when generic parameters in fns, closures and generators\n                         // are used and require substitution.\n                         // Just in case there are closures or generators within this subst,\n                         // recurse.\n-                        if is_used && subst.needs_subst() {\n+                        if unused_params.is_used(index) && subst.needs_subst() {\n                             return subst.visit_with(self);\n                         }\n                     }"}, {"sha": "fcb73c64356fdeca925ed83b1b763031eca32e0a", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=ef4046e4f3932991971cdb64915172899532aece", "patch": "@@ -1196,8 +1196,8 @@ static DEFAULT_HOOK: LazyLock<Box<dyn Fn(&panic::PanicInfo<'_>) + Sync + Send +\n             };\n \n             // Invoke the default handler, which prints the actual panic message and optionally a backtrace\n-            // Don't do this for `GoodPathBug`, which already emits its own more useful backtrace.\n-            if !info.payload().is::<rustc_errors::GoodPathBug>() {\n+            // Don't do this for delayed bugs, which already emit their own more useful backtrace.\n+            if !info.payload().is::<rustc_errors::DelayedBugPanic>() {\n                 (*DEFAULT_HOOK)(info);\n \n                 // Separate the output with an empty line\n@@ -1235,7 +1235,7 @@ pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     // a .span_bug or .bug call has already printed what\n     // it wants to print.\n     if !info.payload().is::<rustc_errors::ExplicitBug>()\n-        && !info.payload().is::<rustc_errors::GoodPathBug>()\n+        && !info.payload().is::<rustc_errors::DelayedBugPanic>()\n     {\n         let mut d = rustc_errors::Diagnostic::new(rustc_errors::Level::Bug, \"unexpected panic\");\n         handler.emit_diagnostic(&mut d);"}, {"sha": "7f01df321010bd39682d7378b980e6ea29a0e285", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=ef4046e4f3932991971cdb64915172899532aece", "patch": "@@ -28,6 +28,7 @@ use rustc_error_messages::{FluentArgs, SpanLabel};\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use std::borrow::Cow;\n use std::cmp::{max, min, Reverse};\n+use std::error::Report;\n use std::io::prelude::*;\n use std::io::{self, IsTerminal};\n use std::iter;\n@@ -250,7 +251,7 @@ pub trait Emitter: Translate {\n         let mut primary_span = diag.span.clone();\n         let suggestions = diag.suggestions.as_deref().unwrap_or(&[]);\n         if let Some((sugg, rest)) = suggestions.split_first() {\n-            let msg = self.translate_message(&sugg.msg, fluent_args);\n+            let msg = self.translate_message(&sugg.msg, fluent_args).map_err(Report::new).unwrap();\n             if rest.is_empty() &&\n                // ^ if there is only one suggestion\n                // don't display multi-suggestions as labels\n@@ -1325,7 +1326,7 @@ impl EmitterWriter {\n         //                very *weird* formats\n         //                see?\n         for (text, style) in msg.iter() {\n-            let text = self.translate_message(text, args);\n+            let text = self.translate_message(text, args).map_err(Report::new).unwrap();\n             let lines = text.split('\\n').collect::<Vec<_>>();\n             if lines.len() > 1 {\n                 for (i, line) in lines.iter().enumerate() {\n@@ -1387,7 +1388,7 @@ impl EmitterWriter {\n                 label_width += 2;\n             }\n             for (text, _) in msg.iter() {\n-                let text = self.translate_message(text, args);\n+                let text = self.translate_message(text, args).map_err(Report::new).unwrap();\n                 // Account for newlines to align output to its label.\n                 for (line, text) in normalize_whitespace(&text).lines().enumerate() {\n                     buffer.append(\n@@ -2301,7 +2302,9 @@ impl FileWithAnnotatedLines {\n                     hi.col_display += 1;\n                 }\n \n-                let label = label.as_ref().map(|m| emitter.translate_message(m, args).to_string());\n+                let label = label.as_ref().map(|m| {\n+                    emitter.translate_message(m, args).map_err(Report::new).unwrap().to_string()\n+                });\n \n                 if lo.line != hi.line {\n                     let ml = MultilineAnnotation {"}, {"sha": "ec0a2fe8cd8d010bf0d1fc5a4c32a88bf15aa32c", "filename": "compiler/rustc_errors/src/error.rs", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_errors%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_errors%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Ferror.rs?ref=ef4046e4f3932991971cdb64915172899532aece", "patch": "@@ -0,0 +1,137 @@\n+use rustc_error_messages::{\n+    fluent_bundle::resolver::errors::{ReferenceKind, ResolverError},\n+    FluentArgs, FluentError,\n+};\n+use std::borrow::Cow;\n+use std::error::Error;\n+use std::fmt;\n+\n+#[derive(Debug)]\n+pub enum TranslateError<'args> {\n+    One {\n+        id: &'args Cow<'args, str>,\n+        args: &'args FluentArgs<'args>,\n+        kind: TranslateErrorKind<'args>,\n+    },\n+    Two {\n+        primary: Box<TranslateError<'args>>,\n+        fallback: Box<TranslateError<'args>>,\n+    },\n+}\n+\n+impl<'args> TranslateError<'args> {\n+    pub fn message(id: &'args Cow<'args, str>, args: &'args FluentArgs<'args>) -> Self {\n+        Self::One { id, args, kind: TranslateErrorKind::MessageMissing }\n+    }\n+    pub fn primary(id: &'args Cow<'args, str>, args: &'args FluentArgs<'args>) -> Self {\n+        Self::One { id, args, kind: TranslateErrorKind::PrimaryBundleMissing }\n+    }\n+    pub fn attribute(\n+        id: &'args Cow<'args, str>,\n+        args: &'args FluentArgs<'args>,\n+        attr: &'args str,\n+    ) -> Self {\n+        Self::One { id, args, kind: TranslateErrorKind::AttributeMissing { attr } }\n+    }\n+    pub fn value(id: &'args Cow<'args, str>, args: &'args FluentArgs<'args>) -> Self {\n+        Self::One { id, args, kind: TranslateErrorKind::ValueMissing }\n+    }\n+\n+    pub fn fluent(\n+        id: &'args Cow<'args, str>,\n+        args: &'args FluentArgs<'args>,\n+        errs: Vec<FluentError>,\n+    ) -> Self {\n+        Self::One { id, args, kind: TranslateErrorKind::Fluent { errs } }\n+    }\n+\n+    pub fn and(self, fallback: TranslateError<'args>) -> TranslateError<'args> {\n+        Self::Two { primary: Box::new(self), fallback: Box::new(fallback) }\n+    }\n+}\n+\n+#[derive(Debug)]\n+pub enum TranslateErrorKind<'args> {\n+    MessageMissing,\n+    PrimaryBundleMissing,\n+    AttributeMissing { attr: &'args str },\n+    ValueMissing,\n+    Fluent { errs: Vec<FluentError> },\n+}\n+\n+impl fmt::Display for TranslateError<'_> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        use TranslateErrorKind::*;\n+\n+        match self {\n+            Self::One { id, args, kind } => {\n+                writeln!(f, \"failed while formatting fluent string `{id}`: \")?;\n+                match kind {\n+                    MessageMissing => writeln!(f, \"message was missing\")?,\n+                    PrimaryBundleMissing => writeln!(f, \"the primary bundle was missing\")?,\n+                    AttributeMissing { attr } => {\n+                        writeln!(f, \"the attribute `{attr}` was missing\")?;\n+                        writeln!(f, \"help: add `.{attr} = <message>`\")?;\n+                    }\n+                    ValueMissing => writeln!(f, \"the value was missing\")?,\n+                    Fluent { errs } => {\n+                        for err in errs {\n+                            match err {\n+                                FluentError::ResolverError(ResolverError::Reference(\n+                                    ReferenceKind::Message { id, .. }\n+                                    | ReferenceKind::Variable { id, .. },\n+                                )) => {\n+                                    if args.iter().any(|(arg_id, _)| arg_id == id) {\n+                                        writeln!(\n+                                            f,\n+                                            \"argument `{id}` exists but was not referenced correctly\"\n+                                        )?;\n+                                        writeln!(f, \"help: try using `{{${id}}}` instead\")?;\n+                                    } else {\n+                                        writeln!(\n+                                            f,\n+                                            \"the fluent string has an argument `{id}` that was not found.\"\n+                                        )?;\n+                                        let vars: Vec<&str> =\n+                                            args.iter().map(|(a, _v)| a).collect();\n+                                        match &*vars {\n+                                            [] => writeln!(f, \"help: no arguments are available\")?,\n+                                            [one] => writeln!(\n+                                                f,\n+                                                \"help: the argument `{one}` is available\"\n+                                            )?,\n+                                            [first, middle @ .., last] => {\n+                                                write!(f, \"help: the arguments `{first}`\")?;\n+                                                for a in middle {\n+                                                    write!(f, \", `{a}`\")?;\n+                                                }\n+                                                writeln!(f, \" and `{last}` are available\")?;\n+                                            }\n+                                        }\n+                                    }\n+                                }\n+                                _ => writeln!(f, \"{err}\")?,\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            // If someone cares about primary bundles, they'll probably notice it's missing\n+            // regardless or will be using `debug_assertions`\n+            // so we skip the arm below this one to avoid confusing the regular user.\n+            Self::Two { primary: box Self::One { kind: PrimaryBundleMissing, .. }, fallback } => {\n+                fmt::Display::fmt(fallback, f)?;\n+            }\n+            Self::Two { primary, fallback } => {\n+                writeln!(\n+                    f,\n+                    \"first, fluent formatting using the primary bundle failed:\\n {primary}\\n \\\n+                    while attempting to recover by using the fallback bundle instead, another error occurred:\\n{fallback}\"\n+                )?;\n+            }\n+        }\n+        Ok(())\n+    }\n+}\n+\n+impl Error for TranslateError<'_> {}"}, {"sha": "dc38b8725ad1e94ef2d29e94b82a0cd19a8357a2", "filename": "compiler/rustc_errors/src/json.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson.rs?ref=ef4046e4f3932991971cdb64915172899532aece", "patch": "@@ -24,6 +24,7 @@ use rustc_data_structures::sync::Lrc;\n use rustc_error_messages::FluentArgs;\n use rustc_span::hygiene::ExpnData;\n use rustc_span::Span;\n+use std::error::Report;\n use std::io::{self, Write};\n use std::path::Path;\n use std::sync::{Arc, Mutex};\n@@ -321,7 +322,8 @@ impl Diagnostic {\n     fn from_errors_diagnostic(diag: &crate::Diagnostic, je: &JsonEmitter) -> Diagnostic {\n         let args = to_fluent_args(diag.args());\n         let sugg = diag.suggestions.iter().flatten().map(|sugg| {\n-            let translated_message = je.translate_message(&sugg.msg, &args);\n+            let translated_message =\n+                je.translate_message(&sugg.msg, &args).map_err(Report::new).unwrap();\n             Diagnostic {\n                 message: translated_message.to_string(),\n                 code: None,\n@@ -411,7 +413,10 @@ impl DiagnosticSpan {\n         Self::from_span_etc(\n             span.span,\n             span.is_primary,\n-            span.label.as_ref().map(|m| je.translate_message(m, args)).map(|m| m.to_string()),\n+            span.label\n+                .as_ref()\n+                .map(|m| je.translate_message(m, args).unwrap())\n+                .map(|m| m.to_string()),\n             suggestion,\n             je,\n         )"}, {"sha": "535812fb0e228f7e413c219293395bdbde4ad7f7", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 31, "deletions": 24, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=ef4046e4f3932991971cdb64915172899532aece", "patch": "@@ -11,6 +11,10 @@\n #![feature(never_type)]\n #![feature(result_option_inspect)]\n #![feature(rustc_attrs)]\n+#![feature(yeet_expr)]\n+#![feature(try_blocks)]\n+#![feature(box_patterns)]\n+#![feature(error_reporter)]\n #![allow(incomplete_features)]\n \n #[macro_use]\n@@ -40,8 +44,8 @@ use rustc_span::source_map::SourceMap;\n use rustc_span::HashStableContext;\n use rustc_span::{Loc, Span};\n \n-use std::any::Any;\n use std::borrow::Cow;\n+use std::error::Report;\n use std::fmt;\n use std::hash::Hash;\n use std::num::NonZeroUsize;\n@@ -55,11 +59,14 @@ mod diagnostic;\n mod diagnostic_builder;\n mod diagnostic_impls;\n pub mod emitter;\n+pub mod error;\n pub mod json;\n mod lock;\n pub mod registry;\n mod snippet;\n mod styled_buffer;\n+#[cfg(test)]\n+mod tests;\n pub mod translation;\n \n pub use diagnostic_builder::IntoDiagnostic;\n@@ -364,9 +371,9 @@ pub use rustc_span::fatal_error::{FatalError, FatalErrorMarker};\n /// or `.span_bug` rather than a failed assertion, etc.\n pub struct ExplicitBug;\n \n-/// Signifies that the compiler died with an explicit call to `.delay_good_path_bug`\n+/// Signifies that the compiler died with an explicit call to `.delay_*_bug`\n /// rather than a failed assertion, etc.\n-pub struct GoodPathBug;\n+pub struct DelayedBugPanic;\n \n pub use diagnostic::{\n     AddToDiagnostic, DecorateLint, Diagnostic, DiagnosticArg, DiagnosticArgValue, DiagnosticId,\n@@ -399,7 +406,7 @@ struct HandlerInner {\n     warn_count: usize,\n     deduplicated_err_count: usize,\n     emitter: Box<dyn Emitter + sync::Send>,\n-    delayed_span_bugs: Vec<Diagnostic>,\n+    delayed_span_bugs: Vec<DelayedDiagnostic>,\n     delayed_good_path_bugs: Vec<DelayedDiagnostic>,\n     /// This flag indicates that an expected diagnostic was emitted and suppressed.\n     /// This is used for the `delayed_good_path_bugs` check.\n@@ -505,11 +512,7 @@ impl Drop for HandlerInner {\n \n         if !self.has_errors() {\n             let bugs = std::mem::replace(&mut self.delayed_span_bugs, Vec::new());\n-            self.flush_delayed(\n-                bugs,\n-                \"no errors encountered even though `delay_span_bug` issued\",\n-                ExplicitBug,\n-            );\n+            self.flush_delayed(bugs, \"no errors encountered even though `delay_span_bug` issued\");\n         }\n \n         // FIXME(eddyb) this explains what `delayed_good_path_bugs` are!\n@@ -520,9 +523,8 @@ impl Drop for HandlerInner {\n         if !self.has_any_message() && !self.suppressed_expected_diag {\n             let bugs = std::mem::replace(&mut self.delayed_good_path_bugs, Vec::new());\n             self.flush_delayed(\n-                bugs.into_iter().map(DelayedDiagnostic::decorate),\n+                bugs,\n                 \"no warnings or errors encountered even though `delayed_good_path_bugs` issued\",\n-                GoodPathBug,\n             );\n         }\n \n@@ -622,7 +624,14 @@ impl Handler {\n     ) -> SubdiagnosticMessage {\n         let inner = self.inner.borrow();\n         let args = crate::translation::to_fluent_args(args);\n-        SubdiagnosticMessage::Eager(inner.emitter.translate_message(&message, &args).to_string())\n+        SubdiagnosticMessage::Eager(\n+            inner\n+                .emitter\n+                .translate_message(&message, &args)\n+                .map_err(Report::new)\n+                .unwrap()\n+                .to_string(),\n+        )\n     }\n \n     // This is here to not allow mutation of flags;\n@@ -1223,11 +1232,7 @@ impl Handler {\n     pub fn flush_delayed(&self) {\n         let mut inner = self.inner.lock();\n         let bugs = std::mem::replace(&mut inner.delayed_span_bugs, Vec::new());\n-        inner.flush_delayed(\n-            bugs,\n-            \"no errors encountered even though `delay_span_bug` issued\",\n-            ExplicitBug,\n-        );\n+        inner.flush_delayed(bugs, \"no errors encountered even though `delay_span_bug` issued\");\n     }\n }\n \n@@ -1287,7 +1292,9 @@ impl HandlerInner {\n             // once *any* errors were emitted (and truncate `delayed_span_bugs`\n             // when an error is first emitted, also), but maybe there's a case\n             // in which that's not sound? otherwise this is really inefficient.\n-            self.delayed_span_bugs.push(diagnostic.clone());\n+            let backtrace = std::backtrace::Backtrace::force_capture();\n+            self.delayed_span_bugs\n+                .push(DelayedDiagnostic::with_backtrace(diagnostic.clone(), backtrace));\n \n             if !self.flags.report_delayed_bugs {\n                 return Some(ErrorGuaranteed::unchecked_claim_error_was_emitted());\n@@ -1562,7 +1569,6 @@ impl HandlerInner {\n         }\n         let mut diagnostic = Diagnostic::new(Level::DelayedBug, msg);\n         diagnostic.set_span(sp.into());\n-        diagnostic.note(&format!(\"delayed at {}\", std::panic::Location::caller()));\n         self.emit_diagnostic(&mut diagnostic).unwrap()\n     }\n \n@@ -1605,12 +1611,13 @@ impl HandlerInner {\n \n     fn flush_delayed(\n         &mut self,\n-        bugs: impl IntoIterator<Item = Diagnostic>,\n+        bugs: impl IntoIterator<Item = DelayedDiagnostic>,\n         explanation: impl Into<DiagnosticMessage> + Copy,\n-        panic_with: impl Any + Send + 'static,\n     ) {\n         let mut no_bugs = true;\n-        for mut bug in bugs {\n+        for bug in bugs {\n+            let mut bug = bug.decorate();\n+\n             if no_bugs {\n                 // Put the overall explanation before the `DelayedBug`s, to\n                 // frame them better (e.g. separate warnings from them).\n@@ -1633,9 +1640,9 @@ impl HandlerInner {\n             self.emit_diagnostic(&mut bug);\n         }\n \n-        // Panic with `ExplicitBug` to avoid \"unexpected panic\" messages.\n+        // Panic with `DelayedBugPanic` to avoid \"unexpected panic\" messages.\n         if !no_bugs {\n-            panic::panic_any(panic_with);\n+            panic::panic_any(DelayedBugPanic);\n         }\n     }\n "}, {"sha": "52103e4609770b50f3ae767ffb8ac754c8439059", "filename": "compiler/rustc_errors/src/tests.rs", "status": "added", "additions": 188, "deletions": 0, "changes": 188, "blob_url": "https://github.com/rust-lang/rust/blob/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_errors%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_errors%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Ftests.rs?ref=ef4046e4f3932991971cdb64915172899532aece", "patch": "@@ -0,0 +1,188 @@\n+use crate::error::{TranslateError, TranslateErrorKind};\n+use crate::fluent_bundle::*;\n+use crate::translation::Translate;\n+use crate::FluentBundle;\n+use rustc_data_structures::sync::Lrc;\n+use rustc_error_messages::fluent_bundle::resolver::errors::{ReferenceKind, ResolverError};\n+use rustc_error_messages::langid;\n+use rustc_error_messages::DiagnosticMessage;\n+\n+struct Dummy {\n+    bundle: FluentBundle,\n+}\n+\n+impl Translate for Dummy {\n+    fn fluent_bundle(&self) -> Option<&Lrc<FluentBundle>> {\n+        None\n+    }\n+\n+    fn fallback_fluent_bundle(&self) -> &FluentBundle {\n+        &self.bundle\n+    }\n+}\n+\n+fn make_dummy(ftl: &'static str) -> Dummy {\n+    let resource = FluentResource::try_new(ftl.into()).expect(\"Failed to parse an FTL string.\");\n+\n+    let langid_en = langid!(\"en-US\");\n+\n+    #[cfg(parallel_compiler)]\n+    let mut bundle = FluentBundle::new_concurrent(vec![langid_en]);\n+\n+    #[cfg(not(parallel_compiler))]\n+    let mut bundle = FluentBundle::new(vec![langid_en]);\n+\n+    bundle.add_resource(resource).expect(\"Failed to add FTL resources to the bundle.\");\n+\n+    Dummy { bundle }\n+}\n+\n+#[test]\n+fn wellformed_fluent() {\n+    let dummy = make_dummy(\"mir_build_borrow_of_moved_value = borrow of moved value\n+    .label = value moved into `{$name}` here\n+    .occurs_because_label = move occurs because `{$name}` has type `{$ty}` which does not implement the `Copy` trait\n+    .value_borrowed_label = value borrowed here after move\n+    .suggestion = borrow this binding in the pattern to avoid moving the value\");\n+\n+    let mut args = FluentArgs::new();\n+    args.set(\"name\", \"Foo\");\n+    args.set(\"ty\", \"std::string::String\");\n+    {\n+        let message = DiagnosticMessage::FluentIdentifier(\n+            \"mir_build_borrow_of_moved_value\".into(),\n+            Some(\"suggestion\".into()),\n+        );\n+\n+        assert_eq!(\n+            dummy.translate_message(&message, &args).unwrap(),\n+            \"borrow this binding in the pattern to avoid moving the value\"\n+        );\n+    }\n+\n+    {\n+        let message = DiagnosticMessage::FluentIdentifier(\n+            \"mir_build_borrow_of_moved_value\".into(),\n+            Some(\"value_borrowed_label\".into()),\n+        );\n+\n+        assert_eq!(\n+            dummy.translate_message(&message, &args).unwrap(),\n+            \"value borrowed here after move\"\n+        );\n+    }\n+\n+    {\n+        let message = DiagnosticMessage::FluentIdentifier(\n+            \"mir_build_borrow_of_moved_value\".into(),\n+            Some(\"occurs_because_label\".into()),\n+        );\n+\n+        assert_eq!(\n+            dummy.translate_message(&message, &args).unwrap(),\n+            \"move occurs because `\\u{2068}Foo\\u{2069}` has type `\\u{2068}std::string::String\\u{2069}` which does not implement the `Copy` trait\"\n+        );\n+\n+        {\n+            let message = DiagnosticMessage::FluentIdentifier(\n+                \"mir_build_borrow_of_moved_value\".into(),\n+                Some(\"label\".into()),\n+            );\n+\n+            assert_eq!(\n+                dummy.translate_message(&message, &args).unwrap(),\n+                \"value moved into `\\u{2068}Foo\\u{2069}` here\"\n+            );\n+        }\n+    }\n+}\n+\n+#[test]\n+fn misformed_fluent() {\n+    let dummy = make_dummy(\"mir_build_borrow_of_moved_value = borrow of moved value\n+    .label = value moved into `{name}` here\n+    .occurs_because_label = move occurs because `{$oops}` has type `{$ty}` which does not implement the `Copy` trait\n+    .suggestion = borrow this binding in the pattern to avoid moving the value\");\n+\n+    let mut args = FluentArgs::new();\n+    args.set(\"name\", \"Foo\");\n+    args.set(\"ty\", \"std::string::String\");\n+    {\n+        let message = DiagnosticMessage::FluentIdentifier(\n+            \"mir_build_borrow_of_moved_value\".into(),\n+            Some(\"value_borrowed_label\".into()),\n+        );\n+\n+        let err = dummy.translate_message(&message, &args).unwrap_err();\n+        assert!(\n+            matches!(\n+                &err,\n+                TranslateError::Two {\n+                    primary: box TranslateError::One {\n+                        kind: TranslateErrorKind::PrimaryBundleMissing,\n+                        ..\n+                    },\n+                    fallback: box TranslateError::One {\n+                        kind: TranslateErrorKind::AttributeMissing { attr: \"value_borrowed_label\" },\n+                        ..\n+                    }\n+                }\n+            ),\n+            \"{err:#?}\"\n+        );\n+        assert_eq!(\n+            format!(\"{err}\"),\n+            \"failed while formatting fluent string `mir_build_borrow_of_moved_value`: \\nthe attribute `value_borrowed_label` was missing\\nhelp: add `.value_borrowed_label = <message>`\\n\"\n+        );\n+    }\n+\n+    {\n+        let message = DiagnosticMessage::FluentIdentifier(\n+            \"mir_build_borrow_of_moved_value\".into(),\n+            Some(\"label\".into()),\n+        );\n+\n+        let err = dummy.translate_message(&message, &args).unwrap_err();\n+        if let TranslateError::Two {\n+            primary: box TranslateError::One { kind: TranslateErrorKind::PrimaryBundleMissing, .. },\n+            fallback: box TranslateError::One { kind: TranslateErrorKind::Fluent { errs }, .. },\n+        } = &err\n+            && let [FluentError::ResolverError(ResolverError::Reference(\n+                ReferenceKind::Message { id, .. }\n+                    | ReferenceKind::Variable { id, .. },\n+            ))] = &**errs\n+            && id == \"name\"\n+        {} else {\n+            panic!(\"{err:#?}\")\n+        };\n+        assert_eq!(\n+            format!(\"{err}\"),\n+            \"failed while formatting fluent string `mir_build_borrow_of_moved_value`: \\nargument `name` exists but was not referenced correctly\\nhelp: try using `{$name}` instead\\n\"\n+        );\n+    }\n+\n+    {\n+        let message = DiagnosticMessage::FluentIdentifier(\n+            \"mir_build_borrow_of_moved_value\".into(),\n+            Some(\"occurs_because_label\".into()),\n+        );\n+\n+        let err = dummy.translate_message(&message, &args).unwrap_err();\n+        if let TranslateError::Two {\n+            primary: box TranslateError::One { kind: TranslateErrorKind::PrimaryBundleMissing, .. },\n+            fallback: box TranslateError::One { kind: TranslateErrorKind::Fluent { errs }, .. },\n+        } = &err\n+            && let [FluentError::ResolverError(ResolverError::Reference(\n+                ReferenceKind::Message { id, .. }\n+                    | ReferenceKind::Variable { id, .. },\n+            ))] = &**errs\n+            && id == \"oops\"\n+        {} else {\n+            panic!(\"{err:#?}\")\n+        };\n+        assert_eq!(\n+            format!(\"{err}\"),\n+            \"failed while formatting fluent string `mir_build_borrow_of_moved_value`: \\nthe fluent string has an argument `oops` that was not found.\\nhelp: the arguments `name` and `ty` are available\\n\"\n+        );\n+    }\n+}"}, {"sha": "addfc9726ca445372aadeeae6f2a64aa0676d05c", "filename": "compiler/rustc_errors/src/translation.rs", "status": "modified", "additions": 46, "deletions": 71, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_errors%2Fsrc%2Ftranslation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_errors%2Fsrc%2Ftranslation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Ftranslation.rs?ref=ef4046e4f3932991971cdb64915172899532aece", "patch": "@@ -1,11 +1,10 @@\n+use crate::error::TranslateError;\n use crate::snippet::Style;\n use crate::{DiagnosticArg, DiagnosticMessage, FluentBundle};\n use rustc_data_structures::sync::Lrc;\n-use rustc_error_messages::{\n-    fluent_bundle::resolver::errors::{ReferenceKind, ResolverError},\n-    FluentArgs, FluentError,\n-};\n+use rustc_error_messages::FluentArgs;\n use std::borrow::Cow;\n+use std::error::Report;\n \n /// Convert diagnostic arguments (a rustc internal type that exists to implement\n /// `Encodable`/`Decodable`) into `FluentArgs` which is necessary to perform translation.\n@@ -46,7 +45,10 @@ pub trait Translate {\n         args: &FluentArgs<'_>,\n     ) -> Cow<'_, str> {\n         Cow::Owned(\n-            messages.iter().map(|(m, _)| self.translate_message(m, args)).collect::<String>(),\n+            messages\n+                .iter()\n+                .map(|(m, _)| self.translate_message(m, args).map_err(Report::new).unwrap())\n+                .collect::<String>(),\n         )\n     }\n \n@@ -55,83 +57,56 @@ pub trait Translate {\n         &'a self,\n         message: &'a DiagnosticMessage,\n         args: &'a FluentArgs<'_>,\n-    ) -> Cow<'_, str> {\n+    ) -> Result<Cow<'_, str>, TranslateError<'_>> {\n         trace!(?message, ?args);\n         let (identifier, attr) = match message {\n             DiagnosticMessage::Str(msg) | DiagnosticMessage::Eager(msg) => {\n-                return Cow::Borrowed(msg);\n+                return Ok(Cow::Borrowed(msg));\n             }\n             DiagnosticMessage::FluentIdentifier(identifier, attr) => (identifier, attr),\n         };\n+        let translate_with_bundle =\n+            |bundle: &'a FluentBundle| -> Result<Cow<'_, str>, TranslateError<'_>> {\n+                let message = bundle\n+                    .get_message(identifier)\n+                    .ok_or(TranslateError::message(identifier, args))?;\n+                let value = match attr {\n+                    Some(attr) => message\n+                        .get_attribute(attr)\n+                        .ok_or(TranslateError::attribute(identifier, args, attr))?\n+                        .value(),\n+                    None => message.value().ok_or(TranslateError::value(identifier, args))?,\n+                };\n+                debug!(?message, ?value);\n \n-        let translate_with_bundle = |bundle: &'a FluentBundle| -> Option<(Cow<'_, str>, Vec<_>)> {\n-            let message = bundle.get_message(identifier)?;\n-            let value = match attr {\n-                Some(attr) => message.get_attribute(attr)?.value(),\n-                None => message.value()?,\n+                let mut errs = vec![];\n+                let translated = bundle.format_pattern(value, Some(args), &mut errs);\n+                debug!(?translated, ?errs);\n+                if errs.is_empty() {\n+                    Ok(translated)\n+                } else {\n+                    Err(TranslateError::fluent(identifier, args, errs))\n+                }\n             };\n-            debug!(?message, ?value);\n-\n-            let mut errs = vec![];\n-            let translated = bundle.format_pattern(value, Some(args), &mut errs);\n-            debug!(?translated, ?errs);\n-            Some((translated, errs))\n-        };\n \n-        self.fluent_bundle()\n-            .and_then(|bundle| translate_with_bundle(bundle))\n-            // If `translate_with_bundle` returns `None` with the primary bundle, this is likely\n-            // just that the primary bundle doesn't contain the message being translated, so\n-            // proceed to the fallback bundle.\n-            //\n-            // However, when errors are produced from translation, then that means the translation\n-            // is broken (e.g. `{$foo}` exists in a translation but `foo` isn't provided).\n-            //\n-            // In debug builds, assert so that compiler devs can spot the broken translation and\n-            // fix it..\n-            .inspect(|(_, errs)| {\n-                debug_assert!(\n-                    errs.is_empty(),\n-                    \"identifier: {:?}, attr: {:?}, args: {:?}, errors: {:?}\",\n-                    identifier,\n-                    attr,\n-                    args,\n-                    errs\n-                );\n-            })\n-            // ..otherwise, for end users, an error about this wouldn't be useful or actionable, so\n-            // just hide it and try with the fallback bundle.\n-            .filter(|(_, errs)| errs.is_empty())\n-            .or_else(|| translate_with_bundle(self.fallback_fluent_bundle()))\n-            .map(|(translated, errs)| {\n-                // Always bail out for errors with the fallback bundle.\n+        try {\n+            match self.fluent_bundle().map(|b| translate_with_bundle(b)) {\n+                // The primary bundle was present and translation succeeded\n+                Some(Ok(t)) => t,\n \n-                let mut help_messages = vec![];\n+                // Always yeet out for errors on debug\n+                Some(Err(primary)) if cfg!(debug_assertions) => do yeet primary,\n \n-                if !errs.is_empty() {\n-                    for error in &errs {\n-                        match error {\n-                            FluentError::ResolverError(ResolverError::Reference(\n-                                ReferenceKind::Message { id, .. },\n-                            )) if args.iter().any(|(arg_id, _)| arg_id == id) => {\n-                                help_messages.push(format!(\"Argument `{id}` exists but was not referenced correctly. Try using `{{${id}}}` instead\"));\n-                            }\n-                            _ => {}\n-                        }\n-                    }\n+                // If `translate_with_bundle` returns `Err` with the primary bundle, this is likely\n+                // just that the primary bundle doesn't contain the message being translated or\n+                // something else went wrong) so proceed to the fallback bundle.\n+                Some(Err(primary)) => translate_with_bundle(self.fallback_fluent_bundle())\n+                    .map_err(|fallback| primary.and(fallback))?,\n \n-                    panic!(\n-                        \"Encountered errors while formatting message for `{identifier}`\\n\\\n-                        help: {}\\n\\\n-                        attr: `{attr:?}`\\n\\\n-                        args: `{args:?}`\\n\\\n-                        errors: `{errs:?}`\",\n-                        help_messages.join(\"\\nhelp: \")\n-                    );\n-                }\n-\n-                translated\n-            })\n-            .expect(\"failed to find message in primary or fallback fluent bundles\")\n+                // The primary bundle is missing, proceed to the fallback bundle\n+                None => translate_with_bundle(self.fallback_fluent_bundle())\n+                    .map_err(|fallback| TranslateError::primary(identifier, args).and(fallback))?,\n+            }\n+        }\n     }\n }"}, {"sha": "404abe2b068cbee561421d5b69f7dfc82ccbb70e", "filename": "compiler/rustc_hir/src/hir_id.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs?ref=ef4046e4f3932991971cdb64915172899532aece", "patch": "@@ -148,7 +148,7 @@ rustc_index::newtype_index! {\n     /// that is, within a `hir::Item`, `hir::TraitItem`, or `hir::ImplItem`. There is no\n     /// guarantee that the numerical value of a given `ItemLocalId` corresponds to\n     /// the node's position within the owning item in any way, but there is a\n-    /// guarantee that the `LocalItemId`s within an owner occupy a dense range of\n+    /// guarantee that the `ItemLocalId`s within an owner occupy a dense range of\n     /// integers starting at zero, so a mapping that maps all or most nodes within\n     /// an \"item-like\" to something else can be implemented by a `Vec` instead of a\n     /// tree or hash map.\n@@ -161,7 +161,7 @@ impl ItemLocalId {\n     pub const INVALID: ItemLocalId = ItemLocalId::MAX;\n }\n \n-// Safety: Ord is implement as just comparing the LocalItemId's numerical\n+// Safety: Ord is implement as just comparing the ItemLocalId's numerical\n // values and these are not changed by (de-)serialization.\n unsafe impl StableOrd for ItemLocalId {}\n "}, {"sha": "bdc4ae391f0435b1f9451886d82fd13cda584bdd", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=ef4046e4f3932991971cdb64915172899532aece", "patch": "@@ -1429,7 +1429,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             let instance =\n                 ty::InstanceDef::Item(ty::WithOptConstParam::unknown(def_id.to_def_id()));\n             let unused = tcx.unused_generic_params(instance);\n-            if !unused.is_empty() {\n+            if !unused.all_used() {\n                 record!(self.tables.unused_generic_params[def_id.to_def_id()] <- unused);\n             }\n         }"}, {"sha": "bf9be714daf7e940b09c29bdc1819efee06106a6", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=ef4046e4f3932991971cdb64915172899532aece", "patch": "@@ -13,7 +13,7 @@ use rustc_hir::def::{CtorKind, DefKind};\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, DefPathHash, StableCrateId};\n use rustc_hir::definitions::DefKey;\n use rustc_hir::lang_items::LangItem;\n-use rustc_index::bit_set::{BitSet, FiniteBitSet};\n+use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n use rustc_middle::metadata::ModChild;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrs;\n@@ -22,7 +22,7 @@ use rustc_middle::middle::resolve_lifetime::ObjectLifetimeDefault;\n use rustc_middle::mir;\n use rustc_middle::ty::fast_reject::SimplifiedType;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, ReprOptions, Ty};\n+use rustc_middle::ty::{self, ReprOptions, Ty, UnusedGenericParams};\n use rustc_middle::ty::{DeducedParamAttrs, GeneratorDiagnosticData, ParameterizedOverTcx, TyCtxt};\n use rustc_serialize::opaque::FileEncoder;\n use rustc_session::config::SymbolManglingVersion;\n@@ -384,7 +384,7 @@ define_tables! {\n     trait_item_def_id: Table<DefIndex, RawDefId>,\n     inherent_impls: Table<DefIndex, LazyArray<DefIndex>>,\n     expn_that_defined: Table<DefIndex, LazyValue<ExpnId>>,\n-    unused_generic_params: Table<DefIndex, LazyValue<FiniteBitSet<u32>>>,\n+    unused_generic_params: Table<DefIndex, LazyValue<UnusedGenericParams>>,\n     params_in_repr: Table<DefIndex, LazyValue<BitSet<u32>>>,\n     repr_options: Table<DefIndex, LazyValue<ReprOptions>>,\n     // `def_keys` and `def_path_hashes` represent a lazy version of a"}, {"sha": "076ce1bdb3486f52604e53a7843c9e45356bf7ba", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=ef4046e4f3932991971cdb64915172899532aece", "patch": "@@ -1839,7 +1839,7 @@ rustc_queries! {\n         desc { \"getting codegen unit `{sym}`\" }\n     }\n \n-    query unused_generic_params(key: ty::InstanceDef<'tcx>) -> FiniteBitSet<u32> {\n+    query unused_generic_params(key: ty::InstanceDef<'tcx>) -> UnusedGenericParams {\n         cache_on_disk_if { key.def_id().is_local() }\n         desc {\n             |tcx| \"determining which generic parameters are unused by `{}`\","}, {"sha": "4ee4d7caec1f3c86593240e6a3da72eddc30202b", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=ef4046e4f3932991971cdb64915172899532aece", "patch": "@@ -6,6 +6,7 @@ use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def::Namespace;\n use rustc_hir::def_id::{CrateNum, DefId};\n use rustc_hir::lang_items::LangItem;\n+use rustc_index::bit_set::FiniteBitSet;\n use rustc_macros::HashStable;\n use rustc_middle::ty::normalize_erasing_regions::NormalizationError;\n use rustc_span::Symbol;\n@@ -711,7 +712,7 @@ fn polymorphize<'tcx>(\n     }\n \n     InternalSubsts::for_item(tcx, def_id, |param, _| {\n-        let is_unused = unused.contains(param.index).unwrap_or(false);\n+        let is_unused = unused.is_unused(param.index);\n         debug!(\"polymorphize: param={:?} is_unused={:?}\", param, is_unused);\n         match param.kind {\n             // Upvar case: If parameter is a type parameter..\n@@ -733,7 +734,7 @@ fn polymorphize<'tcx>(\n             // Simple case: If parameter is a const or type parameter..\n             ty::GenericParamDefKind::Const { .. } | ty::GenericParamDefKind::Type { .. } if\n                 // ..and is within range and unused..\n-                unused.contains(param.index).unwrap_or(false) =>\n+                unused.is_unused(param.index) =>\n                     // ..then use the identity for this parameter.\n                     tcx.mk_param_from_def(param),\n \n@@ -774,3 +775,36 @@ fn needs_fn_once_adapter_shim(\n         (ty::ClosureKind::FnMut | ty::ClosureKind::FnOnce, _) => Err(()),\n     }\n }\n+\n+// Set bits represent unused generic parameters.\n+// An empty set indicates that all parameters are used.\n+#[derive(Debug, Copy, Clone, Eq, PartialEq, Decodable, Encodable, HashStable)]\n+pub struct UnusedGenericParams(FiniteBitSet<u32>);\n+\n+impl UnusedGenericParams {\n+    pub fn new_all_unused(amount: u32) -> Self {\n+        let mut bitset = FiniteBitSet::new_empty();\n+        bitset.set_range(0..amount);\n+        Self(bitset)\n+    }\n+\n+    pub fn new_all_used() -> Self {\n+        Self(FiniteBitSet::new_empty())\n+    }\n+\n+    pub fn mark_used(&mut self, idx: u32) {\n+        self.0.clear(idx);\n+    }\n+\n+    pub fn is_unused(&self, idx: u32) -> bool {\n+        self.0.contains(idx).unwrap_or(false)\n+    }\n+\n+    pub fn is_used(&self, idx: u32) -> bool {\n+        !self.is_unused(idx)\n+    }\n+\n+    pub fn all_used(&self) -> bool {\n+        self.0.is_empty()\n+    }\n+}"}, {"sha": "fa571d480b6460e0c4d75e9cce13f70757d0fe61", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=ef4046e4f3932991971cdb64915172899532aece", "patch": "@@ -86,7 +86,7 @@ pub use self::context::{\n     tls, CtxtInterners, DeducedParamAttrs, FreeRegionInfo, GlobalCtxt, Lift, OnDiskCache, TyCtxt,\n     TyCtxtFeed,\n };\n-pub use self::instance::{Instance, InstanceDef, ShortInstance};\n+pub use self::instance::{Instance, InstanceDef, ShortInstance, UnusedGenericParams};\n pub use self::list::List;\n pub use self::parameterized::ParameterizedOverTcx;\n pub use self::rvalue_scopes::RvalueScopes;"}, {"sha": "72f451985796b82ac54a5809cf1f7dfd8dec9bd8", "filename": "compiler/rustc_middle/src/ty/parameterized.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs?ref=ef4046e4f3932991971cdb64915172899532aece", "patch": "@@ -60,6 +60,7 @@ trivially_parameterized_over_tcx! {\n     ty::ImplPolarity,\n     ty::ReprOptions,\n     ty::TraitDef,\n+    ty::UnusedGenericParams,\n     ty::Visibility<DefIndex>,\n     ty::adjustment::CoerceUnsizedInfo,\n     ty::fast_reject::SimplifiedType,"}, {"sha": "9d4ee22a7273beba58c8cb282379a132a7585c03", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=ef4046e4f3932991971cdb64915172899532aece", "patch": "@@ -34,7 +34,7 @@ use crate::ty::layout::TyAndLayout;\n use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::util::AlwaysRequiresDrop;\n use crate::ty::GeneratorDiagnosticData;\n-use crate::ty::{self, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt};\n+use crate::ty::{self, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt, UnusedGenericParams};\n use rustc_ast as ast;\n use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_attr as attr;\n@@ -50,7 +50,7 @@ use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, LocalDefId};\n use rustc_hir::hir_id::OwnerId;\n use rustc_hir::lang_items::{LangItem, LanguageItems};\n use rustc_hir::{Crate, ItemLocalId, TraitCandidate};\n-use rustc_index::{bit_set::FiniteBitSet, vec::IndexVec};\n+use rustc_index::vec::IndexVec;\n use rustc_session::config::{EntryFnType, OptLevel, OutputFilenames, SymbolManglingVersion};\n use rustc_session::cstore::{CrateDepKind, CrateSource};\n use rustc_session::cstore::{ExternCrate, ForeignModule, LinkagePreference, NativeLib};"}, {"sha": "5233cfb21203ba470e434673a921670a82bc1960", "filename": "compiler/rustc_monomorphize/src/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs?ref=ef4046e4f3932991971cdb64915172899532aece", "patch": "@@ -32,13 +32,13 @@ pub struct TypeLengthLimit {\n     pub type_length: usize,\n }\n \n-pub struct UnusedGenericParams {\n+pub struct UnusedGenericParamsHint {\n     pub span: Span,\n     pub param_spans: Vec<Span>,\n     pub param_names: Vec<String>,\n }\n \n-impl IntoDiagnostic<'_> for UnusedGenericParams {\n+impl IntoDiagnostic<'_> for UnusedGenericParamsHint {\n     #[track_caller]\n     fn into_diagnostic(\n         self,"}, {"sha": "c8fc69eb856abdc5b12b202122e5fbde68851f75", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 18, "deletions": 65, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=ef4046e4f3932991971cdb64915172899532aece", "patch": "@@ -6,7 +6,6 @@\n //! for their size, offset of a field, etc.).\n \n use rustc_hir::{def::DefKind, def_id::DefId, ConstContext};\n-use rustc_index::bit_set::FiniteBitSet;\n use rustc_middle::mir::{\n     self,\n     visit::{TyContext, Visitor},\n@@ -17,12 +16,12 @@ use rustc_middle::ty::{\n     query::Providers,\n     subst::SubstsRef,\n     visit::{TypeSuperVisitable, TypeVisitable, TypeVisitor},\n-    Const, Ty, TyCtxt,\n+    Const, Ty, TyCtxt, UnusedGenericParams,\n };\n use rustc_span::symbol::sym;\n use std::ops::ControlFlow;\n \n-use crate::errors::UnusedGenericParams;\n+use crate::errors::UnusedGenericParamsHint;\n \n /// Provide implementations of queries relating to polymorphization analysis.\n pub fn provide(providers: &mut Providers) {\n@@ -36,31 +35,30 @@ pub fn provide(providers: &mut Providers) {\n fn unused_generic_params<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     instance: ty::InstanceDef<'tcx>,\n-) -> FiniteBitSet<u32> {\n+) -> UnusedGenericParams {\n     if !tcx.sess.opts.unstable_opts.polymorphize {\n         // If polymorphization disabled, then all parameters are used.\n-        return FiniteBitSet::new_empty();\n+        return UnusedGenericParams::new_all_used();\n     }\n \n     let def_id = instance.def_id();\n     // Exit early if this instance should not be polymorphized.\n     if !should_polymorphize(tcx, def_id, instance) {\n-        return FiniteBitSet::new_empty();\n+        return UnusedGenericParams::new_all_used();\n     }\n \n     let generics = tcx.generics_of(def_id);\n     debug!(?generics);\n \n     // Exit early when there are no parameters to be unused.\n     if generics.count() == 0 {\n-        return FiniteBitSet::new_empty();\n+        return UnusedGenericParams::new_all_used();\n     }\n \n     // Create a bitset with N rightmost ones for each parameter.\n     let generics_count: u32 =\n         generics.count().try_into().expect(\"more generic parameters than can fit into a `u32`\");\n-    let mut unused_parameters = FiniteBitSet::<u32>::new_empty();\n-    unused_parameters.set_range(0..generics_count);\n+    let mut unused_parameters = UnusedGenericParams::new_all_unused(generics_count);\n     debug!(?unused_parameters, \"(start)\");\n \n     mark_used_by_default_parameters(tcx, def_id, generics, &mut unused_parameters);\n@@ -78,7 +76,7 @@ fn unused_generic_params<'tcx>(\n     debug!(?unused_parameters, \"(end)\");\n \n     // Emit errors for debugging and testing if enabled.\n-    if !unused_parameters.is_empty() {\n+    if !unused_parameters.all_used() {\n         emit_unused_generic_params_error(tcx, def_id, generics, &unused_parameters);\n     }\n \n@@ -136,13 +134,13 @@ fn mark_used_by_default_parameters<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n     generics: &'tcx ty::Generics,\n-    unused_parameters: &mut FiniteBitSet<u32>,\n+    unused_parameters: &mut UnusedGenericParams,\n ) {\n     match tcx.def_kind(def_id) {\n         DefKind::Closure | DefKind::Generator => {\n             for param in &generics.params {\n                 debug!(?param, \"(closure/gen)\");\n-                unused_parameters.clear(param.index);\n+                unused_parameters.mark_used(param.index);\n             }\n         }\n         DefKind::Mod\n@@ -178,7 +176,7 @@ fn mark_used_by_default_parameters<'tcx>(\n             for param in &generics.params {\n                 debug!(?param, \"(other)\");\n                 if let ty::GenericParamDefKind::Lifetime = param.kind {\n-                    unused_parameters.clear(param.index);\n+                    unused_parameters.mark_used(param.index);\n                 }\n             }\n         }\n@@ -196,7 +194,7 @@ fn emit_unused_generic_params_error<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n     generics: &'tcx ty::Generics,\n-    unused_parameters: &FiniteBitSet<u32>,\n+    unused_parameters: &UnusedGenericParams,\n ) {\n     let base_def_id = tcx.typeck_root_def_id(def_id);\n     if !tcx.has_attr(base_def_id, sym::rustc_polymorphize_error) {\n@@ -213,7 +211,7 @@ fn emit_unused_generic_params_error<'tcx>(\n     let mut next_generics = Some(generics);\n     while let Some(generics) = next_generics {\n         for param in &generics.params {\n-            if unused_parameters.contains(param.index).unwrap_or(false) {\n+            if unused_parameters.is_unused(param.index) {\n                 debug!(?param);\n                 let def_span = tcx.def_span(param.def_id);\n                 param_spans.push(def_span);\n@@ -224,14 +222,14 @@ fn emit_unused_generic_params_error<'tcx>(\n         next_generics = generics.parent.map(|did| tcx.generics_of(did));\n     }\n \n-    tcx.sess.emit_err(UnusedGenericParams { span: fn_span, param_spans, param_names });\n+    tcx.sess.emit_err(UnusedGenericParamsHint { span: fn_span, param_spans, param_names });\n }\n \n /// Visitor used to aggregate generic parameter uses.\n struct MarkUsedGenericParams<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n-    unused_parameters: &'a mut FiniteBitSet<u32>,\n+    unused_parameters: &'a mut UnusedGenericParams,\n }\n \n impl<'a, 'tcx> MarkUsedGenericParams<'a, 'tcx> {\n@@ -244,7 +242,7 @@ impl<'a, 'tcx> MarkUsedGenericParams<'a, 'tcx> {\n         debug!(?self.unused_parameters, ?unused);\n         for (i, arg) in substs.iter().enumerate() {\n             let i = i.try_into().unwrap();\n-            if !unused.contains(i).unwrap_or(false) {\n+            if unused.is_used(i) {\n                 arg.visit_with(self);\n             }\n         }\n@@ -308,7 +306,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n         match c.kind() {\n             ty::ConstKind::Param(param) => {\n                 debug!(?param);\n-                self.unused_parameters.clear(param.index);\n+                self.unused_parameters.mark_used(param.index);\n                 ControlFlow::CONTINUE\n             }\n             ty::ConstKind::Unevaluated(ty::UnevaluatedConst { def, substs })\n@@ -342,55 +340,10 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n             }\n             ty::Param(param) => {\n                 debug!(?param);\n-                self.unused_parameters.clear(param.index);\n+                self.unused_parameters.mark_used(param.index);\n                 ControlFlow::CONTINUE\n             }\n             _ => ty.super_visit_with(self),\n         }\n     }\n }\n-\n-/// Visitor used to check if a generic parameter is used.\n-struct HasUsedGenericParams<'a> {\n-    unused_parameters: &'a FiniteBitSet<u32>,\n-}\n-\n-impl<'a, 'tcx> TypeVisitor<'tcx> for HasUsedGenericParams<'a> {\n-    type BreakTy = ();\n-\n-    #[instrument(level = \"debug\", skip(self))]\n-    fn visit_const(&mut self, c: Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        if !c.has_non_region_param() {\n-            return ControlFlow::CONTINUE;\n-        }\n-\n-        match c.kind() {\n-            ty::ConstKind::Param(param) => {\n-                if self.unused_parameters.contains(param.index).unwrap_or(false) {\n-                    ControlFlow::CONTINUE\n-                } else {\n-                    ControlFlow::BREAK\n-                }\n-            }\n-            _ => c.super_visit_with(self),\n-        }\n-    }\n-\n-    #[instrument(level = \"debug\", skip(self))]\n-    fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        if !ty.has_non_region_param() {\n-            return ControlFlow::CONTINUE;\n-        }\n-\n-        match ty.kind() {\n-            ty::Param(param) => {\n-                if self.unused_parameters.contains(param.index).unwrap_or(false) {\n-                    ControlFlow::CONTINUE\n-                } else {\n-                    ControlFlow::BREAK\n-                }\n-            }\n-            _ => ty.super_visit_with(self),\n-        }\n-    }\n-}"}, {"sha": "b062b43873b29b28120a142ea689a4c83977932b", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=ef4046e4f3932991971cdb64915172899532aece", "patch": "@@ -1570,7 +1570,7 @@ options! {\n     /// o/w tests have closure@path\n     span_free_formats: bool = (false, parse_bool, [UNTRACKED],\n         \"exclude spans when debug-printing compiler state (default: no)\"),\n-    split_dwarf_inlining: bool = (true, parse_bool, [TRACKED],\n+    split_dwarf_inlining: bool = (false, parse_bool, [TRACKED],\n         \"provide minimal debug info in the object/executable to facilitate online \\\n          symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF\"),\n     split_dwarf_kind: SplitDwarfKind = (SplitDwarfKind::Split, parse_split_dwarf_kind, [TRACKED],"}, {"sha": "3d649bea19ddfc966ed0f9ceb3e659e12f4a0950", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=ef4046e4f3932991971cdb64915172899532aece", "patch": "@@ -131,8 +131,14 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n             else {\n                 return\n             };\n-\n-            let nested_goals = obligations.into_iter().map(|o| o.into()).collect();\n+            let where_clause_bounds = tcx\n+                .predicates_of(impl_def_id)\n+                .instantiate(tcx, impl_substs)\n+                .predicates\n+                .into_iter()\n+                .map(|pred| goal.with(tcx, pred));\n+\n+            let nested_goals = obligations.into_iter().map(|o| o.into()).chain(where_clause_bounds).collect();\n             let Ok(trait_ref_certainty) = acx.cx.evaluate_all(acx.infcx, nested_goals) else { return };\n \n             let Some(assoc_def) = fetch_eligible_assoc_item_def("}, {"sha": "c69cc39acb53cea516568532d109556cfaee5a86", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef4046e4f3932991971cdb64915172899532aece/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=ef4046e4f3932991971cdb64915172899532aece", "patch": "@@ -71,7 +71,9 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n         goal: Goal<'tcx, TraitPredicate<'tcx>>,\n         impl_def_id: DefId,\n     ) {\n-        let impl_trait_ref = acx.cx.tcx.bound_impl_trait_ref(impl_def_id).unwrap();\n+        let tcx = acx.cx.tcx;\n+\n+        let impl_trait_ref = tcx.bound_impl_trait_ref(impl_def_id).unwrap();\n         let drcx = DeepRejectCtxt { treat_obligation_params: TreatParams::AsPlaceholder };\n         if iter::zip(goal.predicate.trait_ref.substs, impl_trait_ref.skip_binder().substs)\n             .any(|(goal, imp)| !drcx.generic_args_may_unify(goal, imp))\n@@ -81,7 +83,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n \n         acx.infcx.probe(|_| {\n             let impl_substs = acx.infcx.fresh_substs_for_item(DUMMY_SP, impl_def_id);\n-            let impl_trait_ref = impl_trait_ref.subst(acx.cx.tcx, impl_substs);\n+            let impl_trait_ref = impl_trait_ref.subst(tcx, impl_substs);\n \n             let Ok(InferOk { obligations, .. }) = acx\n                 .infcx\n@@ -92,8 +94,15 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n             else {\n                 return\n             };\n-\n-            let nested_goals = obligations.into_iter().map(|o| o.into()).collect();\n+            let where_clause_bounds = tcx\n+                .predicates_of(impl_def_id)\n+                .instantiate(tcx, impl_substs)\n+                .predicates\n+                .into_iter()\n+                .map(|pred| goal.with(tcx, pred));\n+\n+            let nested_goals =\n+                obligations.into_iter().map(|o| o.into()).chain(where_clause_bounds).collect();\n \n             let Ok(certainty) = acx.cx.evaluate_all(acx.infcx, nested_goals) else { return };\n             acx.try_insert_candidate(CandidateSource::Impl(impl_def_id), certainty);"}, {"sha": "2975c81f8fec90e872ab684df3b39d793cbfa025", "filename": "library/core/tests/time.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ef4046e4f3932991971cdb64915172899532aece/library%2Fcore%2Ftests%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef4046e4f3932991971cdb64915172899532aece/library%2Fcore%2Ftests%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Ftime.rs?ref=ef4046e4f3932991971cdb64915172899532aece", "patch": "@@ -173,6 +173,32 @@ fn div() {\n     assert_eq!(Duration::new(99, 999_999_000) / 100, Duration::new(0, 999_999_990));\n }\n \n+#[test]\n+fn div_duration_f32() {\n+    assert_eq!(Duration::ZERO.div_duration_f32(Duration::MAX), 0.0);\n+    assert_eq!(Duration::MAX.div_duration_f32(Duration::ZERO), f32::INFINITY);\n+    assert_eq!((Duration::SECOND * 2).div_duration_f32(Duration::SECOND), 2.0);\n+    assert!(Duration::ZERO.div_duration_f32(Duration::ZERO).is_nan());\n+    // These tests demonstrate it doesn't panic with extreme values.\n+    // Accuracy of the computed value is not a huge concern, we know floats don't work well\n+    // at these extremes.\n+    assert!((Duration::MAX).div_duration_f32(Duration::NANOSECOND) > 10.0f32.powf(28.0));\n+    assert!((Duration::NANOSECOND).div_duration_f32(Duration::MAX) < 0.1);\n+}\n+\n+#[test]\n+fn div_duration_f64() {\n+    assert_eq!(Duration::ZERO.div_duration_f64(Duration::MAX), 0.0);\n+    assert_eq!(Duration::MAX.div_duration_f64(Duration::ZERO), f64::INFINITY);\n+    assert_eq!((Duration::SECOND * 2).div_duration_f64(Duration::SECOND), 2.0);\n+    assert!(Duration::ZERO.div_duration_f64(Duration::ZERO).is_nan());\n+    // These tests demonstrate it doesn't panic with extreme values.\n+    // Accuracy of the computed value is not a huge concern, we know floats don't work well\n+    // at these extremes.\n+    assert!((Duration::MAX).div_duration_f64(Duration::NANOSECOND) > 10.0f64.powf(28.0));\n+    assert!((Duration::NANOSECOND).div_duration_f64(Duration::MAX) < 0.1);\n+}\n+\n #[test]\n fn checked_div() {\n     assert_eq!(Duration::new(2, 0).checked_div(2), Some(Duration::new(1, 0)));"}, {"sha": "5c5ef0b1125a0d712a5ef787ce99ab5f0ec801f0", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ef4046e4f3932991971cdb64915172899532aece/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef4046e4f3932991971cdb64915172899532aece/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=ef4046e4f3932991971cdb64915172899532aece", "patch": "@@ -249,8 +249,9 @@ pub struct DirBuilder {\n pub fn read<P: AsRef<Path>>(path: P) -> io::Result<Vec<u8>> {\n     fn inner(path: &Path) -> io::Result<Vec<u8>> {\n         let mut file = File::open(path)?;\n-        let mut bytes = Vec::new();\n-        file.read_to_end(&mut bytes)?;\n+        let size = file.metadata().map(|m| m.len()).unwrap_or(0);\n+        let mut bytes = Vec::with_capacity(size as usize);\n+        io::default_read_to_end(&mut file, &mut bytes)?;\n         Ok(bytes)\n     }\n     inner(path.as_ref())\n@@ -288,8 +289,9 @@ pub fn read<P: AsRef<Path>>(path: P) -> io::Result<Vec<u8>> {\n pub fn read_to_string<P: AsRef<Path>>(path: P) -> io::Result<String> {\n     fn inner(path: &Path) -> io::Result<String> {\n         let mut file = File::open(path)?;\n-        let mut string = String::new();\n-        file.read_to_string(&mut string)?;\n+        let size = file.metadata().map(|m| m.len()).unwrap_or(0);\n+        let mut string = String::with_capacity(size as usize);\n+        io::default_read_to_string(&mut file, &mut string)?;\n         Ok(string)\n     }\n     inner(path.as_ref())"}, {"sha": "7158355ffdacc65b06457aa5dc55882ec6967a8e", "filename": "src/librustdoc/passes/lint/check_code_block_syntax.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef4046e4f3932991971cdb64915172899532aece/src%2Flibrustdoc%2Fpasses%2Flint%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef4046e4f3932991971cdb64915172899532aece/src%2Flibrustdoc%2Fpasses%2Flint%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Flint%2Fcheck_code_block_syntax.rs?ref=ef4046e4f3932991971cdb64915172899532aece", "patch": "@@ -156,7 +156,9 @@ impl Emitter for BufferEmitter {\n         let mut buffer = self.buffer.borrow_mut();\n \n         let fluent_args = to_fluent_args(diag.args());\n-        let translated_main_message = self.translate_message(&diag.message[0].0, &fluent_args);\n+        let translated_main_message = self\n+            .translate_message(&diag.message[0].0, &fluent_args)\n+            .unwrap_or_else(|e| panic!(\"{e}\"));\n \n         buffer.messages.push(format!(\"error from rustc: {}\", translated_main_message));\n         if diag.is_error() {"}, {"sha": "1f1b1f1110dbfb044af6ed32364aaec16609dc5d", "filename": "triagebot.toml", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ef4046e4f3932991971cdb64915172899532aece/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ef4046e4f3932991971cdb64915172899532aece/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=ef4046e4f3932991971cdb64915172899532aece", "patch": "@@ -249,6 +249,11 @@ trigger_files = [\n [autolabel.\"S-waiting-on-review\"]\n new_pr = true\n \n+[autolabel.\"WG-trait-system-refactor\"]\n+trigger_files = [\n+    \"compiler/rustc_trait_selection/solve\"\n+]\n+\n [notify-zulip.\"I-prioritize\"]\n zulip_stream = 245100 # #t-compiler/wg-prioritization/alerts\n topic = \"#{number} {title}\"\n@@ -344,7 +349,7 @@ cc = [\"@BoxyUwU\"]\n \n [mentions.\"compiler/rustc_trait_selection/src/solve/\"]\n message = \"Some changes occurred to the core trait solver\"\n-cc = [\"@lcnr\", \"@compiler-errors\"]\n+cc = [\"@rust-lang/initiative-trait-system-refactor\"]\n \n [mentions.\"compiler/rustc_trait_selection/src/traits/engine.rs\"]\n message = \"\"\""}]}