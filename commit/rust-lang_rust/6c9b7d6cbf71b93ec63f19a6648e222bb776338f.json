{"sha": "6c9b7d6cbf71b93ec63f19a6648e222bb776338f", "node_id": "C_kwDOAAsO6NoAKDZjOWI3ZDZjYmY3MWI5M2VjNjNmMTlhNjY0OGUyMjJiYjc3NjMzOGY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-06-02T23:02:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-02T23:02:05Z"}, "message": "Rollup merge of #109609 - cjgillot:split-anon-const, r=BoxyUwU\n\nSeparate AnonConst from ConstBlock in HIR.\n\nTheir behaviours are different enough to justify having separate nodes.", "tree": {"sha": "97036209fbb3740b6fc85f93105beada8fa7dbe5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97036209fbb3740b6fc85f93105beada8fa7dbe5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c9b7d6cbf71b93ec63f19a6648e222bb776338f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkenTtCRBK7hj4Ov3rIwAAP9IIACxL5VAmfPtah6S3NELRscgY\nmb1aNaKYgmoHWtxDHT075nUaa0564gIFZ6BefWFNwGE6l4kyglVs/S6aEdKp/Ng8\ngWkm7orazf2uBq4UrhvqGkgWvKeXk+ECAsZ8lZDWf257n5dzQW0w2pl+4id1xKhs\nHgVjKM/SMudvvrS9Lu3PtFxyBskTl6I/Pb5xuQs+jkHN7ijfnKDjGnIO9xpWNbz5\nIMfsx5gKDfpBRXywGDfSKA+QCS6jVpVkjUmuXw7GftwIksdvkUayPxow7yryxolj\n9psQ6+Y4/peSw6A7kpOT7Gfz0sWNBIf/y8UFVcNBpa5lZaZrFbwsTNkaDhzMPeE=\n=yQwp\n-----END PGP SIGNATURE-----\n", "payload": "tree 97036209fbb3740b6fc85f93105beada8fa7dbe5\nparent dd5d7c729d4e8a59708df64002e09dbcbc4005ba\nparent ca4d0d4c24207928e5f8528e6d920b5905640d0a\nauthor Michael Goulet <michael@errs.io> 1685746925 -0700\ncommitter GitHub <noreply@github.com> 1685746925 -0700\n\nRollup merge of #109609 - cjgillot:split-anon-const, r=BoxyUwU\n\nSeparate AnonConst from ConstBlock in HIR.\n\nTheir behaviours are different enough to justify having separate nodes.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c9b7d6cbf71b93ec63f19a6648e222bb776338f", "html_url": "https://github.com/rust-lang/rust/commit/6c9b7d6cbf71b93ec63f19a6648e222bb776338f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c9b7d6cbf71b93ec63f19a6648e222bb776338f/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd5d7c729d4e8a59708df64002e09dbcbc4005ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd5d7c729d4e8a59708df64002e09dbcbc4005ba", "html_url": "https://github.com/rust-lang/rust/commit/dd5d7c729d4e8a59708df64002e09dbcbc4005ba"}, {"sha": "ca4d0d4c24207928e5f8528e6d920b5905640d0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca4d0d4c24207928e5f8528e6d920b5905640d0a", "html_url": "https://github.com/rust-lang/rust/commit/ca4d0d4c24207928e5f8528e6d920b5905640d0a"}], "stats": {"total": 179, "additions": 111, "deletions": 68}, "files": [{"sha": "f52797c4f3f1dd4cf4a4c23dfae00de8246fc220", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c9b7d6cbf71b93ec63f19a6648e222bb776338f/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c9b7d6cbf71b93ec63f19a6648e222bb776338f/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=6c9b7d6cbf71b93ec63f19a6648e222bb776338f", "patch": "@@ -71,9 +71,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n             let kind = match &e.kind {\n                 ExprKind::Array(exprs) => hir::ExprKind::Array(self.lower_exprs(exprs)),\n-                ExprKind::ConstBlock(anon_const) => {\n-                    let anon_const = self.lower_anon_const(anon_const);\n-                    hir::ExprKind::ConstBlock(anon_const)\n+                ExprKind::ConstBlock(c) => {\n+                    let c = self.with_new_scopes(|this| hir::ConstBlock {\n+                        def_id: this.local_def_id(c.id),\n+                        hir_id: this.lower_node_id(c.id),\n+                        body: this.lower_const_body(c.value.span, Some(&c.value)),\n+                    });\n+                    hir::ExprKind::ConstBlock(c)\n                 }\n                 ExprKind::Repeat(expr, count) => {\n                     let expr = self.lower_expr(expr);"}, {"sha": "ce847906fb99a7f65ee327afccf3ddd313462e34", "filename": "compiler/rustc_ast_lowering/src/index.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6c9b7d6cbf71b93ec63f19a6648e222bb776338f/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c9b7d6cbf71b93ec63f19a6648e222bb776338f/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs?ref=6c9b7d6cbf71b93ec63f19a6648e222bb776338f", "patch": "@@ -223,6 +223,14 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         });\n     }\n \n+    fn visit_inline_const(&mut self, constant: &'hir ConstBlock) {\n+        self.insert(DUMMY_SP, constant.hir_id, Node::ConstBlock(constant));\n+\n+        self.with_parent(constant.hir_id, |this| {\n+            intravisit::walk_inline_const(this, constant);\n+        });\n+    }\n+\n     fn visit_expr(&mut self, expr: &'hir Expr<'hir>) {\n         self.insert(expr.span, expr.hir_id, Node::Expr(expr));\n "}, {"sha": "70fc66947df997d23b384cced4f15ef1f86c54ef", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6c9b7d6cbf71b93ec63f19a6648e222bb776338f/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c9b7d6cbf71b93ec63f19a6648e222bb776338f/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=6c9b7d6cbf71b93ec63f19a6648e222bb776338f", "patch": "@@ -1675,6 +1675,14 @@ pub struct AnonConst {\n     pub body: BodyId,\n }\n \n+/// An inline constant expression `const { something }`.\n+#[derive(Copy, Clone, Debug, HashStable_Generic)]\n+pub struct ConstBlock {\n+    pub hir_id: HirId,\n+    pub def_id: LocalDefId,\n+    pub body: BodyId,\n+}\n+\n /// An expression.\n #[derive(Debug, Clone, Copy, HashStable_Generic)]\n pub struct Expr<'hir> {\n@@ -1922,7 +1930,7 @@ pub fn is_range_literal(expr: &Expr<'_>) -> bool {\n #[derive(Debug, Clone, Copy, HashStable_Generic)]\n pub enum ExprKind<'hir> {\n     /// Allow anonymous constants from an inline `const` block\n-    ConstBlock(AnonConst),\n+    ConstBlock(ConstBlock),\n     /// An array (e.g., `[a, b, c, d]`).\n     Array(&'hir [Expr<'hir>]),\n     /// A function call.\n@@ -3641,6 +3649,7 @@ pub enum Node<'hir> {\n     Variant(&'hir Variant<'hir>),\n     Field(&'hir FieldDef<'hir>),\n     AnonConst(&'hir AnonConst),\n+    ConstBlock(&'hir ConstBlock),\n     Expr(&'hir Expr<'hir>),\n     ExprField(&'hir ExprField<'hir>),\n     Stmt(&'hir Stmt<'hir>),\n@@ -3695,6 +3704,7 @@ impl<'hir> Node<'hir> {\n             Node::TypeBinding(b) => Some(b.ident),\n             Node::Param(..)\n             | Node::AnonConst(..)\n+            | Node::ConstBlock(..)\n             | Node::Expr(..)\n             | Node::Stmt(..)\n             | Node::Block(..)\n@@ -3758,7 +3768,7 @@ impl<'hir> Node<'hir> {\n             })\n             | Node::Expr(Expr {\n                 kind:\n-                    ExprKind::ConstBlock(AnonConst { body, .. })\n+                    ExprKind::ConstBlock(ConstBlock { body, .. })\n                     | ExprKind::Closure(Closure { body, .. })\n                     | ExprKind::Repeat(_, ArrayLen::Body(AnonConst { body, .. })),\n                 ..\n@@ -3878,6 +3888,13 @@ impl<'hir> Node<'hir> {\n         this\n     }\n \n+    /// Expect a [`Node::ConstBlock`] or panic.\n+    #[track_caller]\n+    pub fn expect_inline_const(self) -> &'hir ConstBlock {\n+        let Node::ConstBlock(this) = self else { self.expect_failed(\"an inline constant\") };\n+        this\n+    }\n+\n     /// Expect a [`Node::Expr`] or panic.\n     #[track_caller]\n     pub fn expect_expr(self) -> &'hir Expr<'hir> {"}, {"sha": "f84c814bd9278061fcd5f75de11054955b20b2e3", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c9b7d6cbf71b93ec63f19a6648e222bb776338f/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c9b7d6cbf71b93ec63f19a6648e222bb776338f/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=6c9b7d6cbf71b93ec63f19a6648e222bb776338f", "patch": "@@ -335,6 +335,9 @@ pub trait Visitor<'v>: Sized {\n     fn visit_anon_const(&mut self, c: &'v AnonConst) {\n         walk_anon_const(self, c)\n     }\n+    fn visit_inline_const(&mut self, c: &'v ConstBlock) {\n+        walk_inline_const(self, c)\n+    }\n     fn visit_expr(&mut self, ex: &'v Expr<'v>) {\n         walk_expr(self, ex)\n     }\n@@ -679,13 +682,18 @@ pub fn walk_anon_const<'v, V: Visitor<'v>>(visitor: &mut V, constant: &'v AnonCo\n     visitor.visit_nested_body(constant.body);\n }\n \n+pub fn walk_inline_const<'v, V: Visitor<'v>>(visitor: &mut V, constant: &'v ConstBlock) {\n+    visitor.visit_id(constant.hir_id);\n+    visitor.visit_nested_body(constant.body);\n+}\n+\n pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>) {\n     visitor.visit_id(expression.hir_id);\n     match expression.kind {\n         ExprKind::Array(subexpressions) => {\n             walk_list!(visitor, visit_expr, subexpressions);\n         }\n-        ExprKind::ConstBlock(ref anon_const) => visitor.visit_anon_const(anon_const),\n+        ExprKind::ConstBlock(ref const_block) => visitor.visit_inline_const(const_block),\n         ExprKind::Repeat(ref element, ref count) => {\n             visitor.visit_expr(element);\n             visitor.visit_array_length(count)"}, {"sha": "5bd6fcb9612ddf81f5cce690dbfc9af026c1568a", "filename": "compiler/rustc_hir_analysis/src/check/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c9b7d6cbf71b93ec63f19a6648e222bb776338f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c9b7d6cbf71b93ec63f19a6648e222bb776338f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fregion.rs?ref=6c9b7d6cbf71b93ec63f19a6648e222bb776338f", "patch": "@@ -392,7 +392,7 @@ fn resolve_expr<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, expr: &'tcx h\n         // Manually recurse over closures and inline consts, because they are the only\n         // case of nested bodies that share the parent environment.\n         hir::ExprKind::Closure(&hir::Closure { body, .. })\n-        | hir::ExprKind::ConstBlock(hir::AnonConst { body, .. }) => {\n+        | hir::ExprKind::ConstBlock(hir::ConstBlock { body, .. }) => {\n             let body = visitor.tcx.hir().body(body);\n             visitor.visit_body(body);\n         }"}, {"sha": "32a7e8af862fadb91e7dbe4f4a42eb56793615ce", "filename": "compiler/rustc_hir_analysis/src/collect/generics_of.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6c9b7d6cbf71b93ec63f19a6648e222bb776338f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c9b7d6cbf71b93ec63f19a6648e222bb776338f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs?ref=6c9b7d6cbf71b93ec63f19a6648e222bb776338f", "patch": "@@ -123,9 +123,6 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Generics {\n                     {\n                         Some(parent_def_id.to_def_id())\n                     }\n-                    Node::Expr(&Expr { kind: ExprKind::ConstBlock(_), .. }) => {\n-                        Some(tcx.typeck_root_def_id(def_id.to_def_id()))\n-                    }\n                     // Exclude `GlobalAsm` here which cannot have generics.\n                     Node::Expr(&Expr { kind: ExprKind::InlineAsm(asm), .. })\n                         if asm.operands.iter().any(|(op, _op_sp)| match op {\n@@ -142,7 +139,8 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Generics {\n                 }\n             }\n         }\n-        Node::Expr(&hir::Expr { kind: hir::ExprKind::Closure { .. }, .. }) => {\n+        Node::ConstBlock(_)\n+        | Node::Expr(&hir::Expr { kind: hir::ExprKind::Closure { .. }, .. }) => {\n             Some(tcx.typeck_root_def_id(def_id.to_def_id()))\n         }\n         Node::Item(item) => match item.kind {\n@@ -339,17 +337,14 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Generics {\n     }\n \n     // provide junk type parameter defs for const blocks.\n-    if let Node::AnonConst(_) = node {\n-        let parent_node = tcx.hir().get_parent(hir_id);\n-        if let Node::Expr(&Expr { kind: ExprKind::ConstBlock(_), .. }) = parent_node {\n-            params.push(ty::GenericParamDef {\n-                index: next_index(),\n-                name: Symbol::intern(\"<const_ty>\"),\n-                def_id: def_id.to_def_id(),\n-                pure_wrt_drop: false,\n-                kind: ty::GenericParamDefKind::Type { has_default: false, synthetic: false },\n-            });\n-        }\n+    if let Node::ConstBlock(_) = node {\n+        params.push(ty::GenericParamDef {\n+            index: next_index(),\n+            name: Symbol::intern(\"<const_ty>\"),\n+            def_id: def_id.to_def_id(),\n+            pure_wrt_drop: false,\n+            kind: ty::GenericParamDefKind::Type { has_default: false, synthetic: false },\n+        });\n     }\n \n     let param_def_id_to_index = params.iter().map(|param| (param.def_id, param.index)).collect();"}, {"sha": "c2b837fcfa6704512bc91d0c4d8c5a91572648b6", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6c9b7d6cbf71b93ec63f19a6648e222bb776338f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c9b7d6cbf71b93ec63f19a6648e222bb776338f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=6c9b7d6cbf71b93ec63f19a6648e222bb776338f", "patch": "@@ -34,12 +34,6 @@ fn anon_const_type_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> Ty<'tcx> {\n         Node::Ty(&Ty { kind: TyKind::Typeof(ref e), .. }) if e.hir_id == hir_id => {\n             return tcx.typeck(def_id).node_type(e.hir_id)\n         }\n-        Node::Expr(&Expr { kind: ExprKind::ConstBlock(ref anon_const), .. })\n-            if anon_const.hir_id == hir_id =>\n-        {\n-            let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n-            return substs.as_inline_const().ty()\n-        }\n         Node::Expr(&Expr { kind: ExprKind::InlineAsm(asm), .. })\n         | Node::Item(&Item { kind: ItemKind::GlobalAsm(asm), .. })\n             if asm.operands.iter().any(|(op, _op_sp)| match op {\n@@ -487,6 +481,11 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::EarlyBinder<Ty\n \n         Node::AnonConst(_) => anon_const_type_of(tcx, def_id),\n \n+        Node::ConstBlock(_) => {\n+            let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n+            substs.as_inline_const().ty()\n+        }\n+\n         Node::GenericParam(param) => match &param.kind {\n             GenericParamKind::Type { default: Some(ty), .. }\n             | GenericParamKind::Const { ty, .. } => icx.to_ty(ty),"}, {"sha": "ced46fe426c474bdf33ef3020e768d07f2e6173b", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6c9b7d6cbf71b93ec63f19a6648e222bb776338f/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c9b7d6cbf71b93ec63f19a6648e222bb776338f/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=6c9b7d6cbf71b93ec63f19a6648e222bb776338f", "patch": "@@ -84,6 +84,7 @@ impl<'a> State<'a> {\n             Node::ImplItem(a) => self.print_impl_item(a),\n             Node::Variant(a) => self.print_variant(a),\n             Node::AnonConst(a) => self.print_anon_const(a),\n+            Node::ConstBlock(a) => self.print_inline_const(a),\n             Node::Expr(a) => self.print_expr(a),\n             Node::ExprField(a) => self.print_expr_field(&a),\n             Node::Stmt(a) => self.print_stmt(a),\n@@ -1095,10 +1096,10 @@ impl<'a> State<'a> {\n         self.end()\n     }\n \n-    fn print_expr_anon_const(&mut self, anon_const: &hir::AnonConst) {\n+    fn print_inline_const(&mut self, constant: &hir::ConstBlock) {\n         self.ibox(INDENT_UNIT);\n         self.word_space(\"const\");\n-        self.print_anon_const(anon_const);\n+        self.ann.nested(self, Nested::Body(constant.body));\n         self.end()\n     }\n \n@@ -1370,7 +1371,7 @@ impl<'a> State<'a> {\n                 self.print_expr_vec(exprs);\n             }\n             hir::ExprKind::ConstBlock(ref anon_const) => {\n-                self.print_expr_anon_const(anon_const);\n+                self.print_inline_const(anon_const);\n             }\n             hir::ExprKind::Repeat(element, ref count) => {\n                 self.print_expr_repeat(element, count);"}, {"sha": "3c5feb1ba513ddb63112dfd9f0ae757f460d2644", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6c9b7d6cbf71b93ec63f19a6648e222bb776338f/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c9b7d6cbf71b93ec63f19a6648e222bb776338f/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=6c9b7d6cbf71b93ec63f19a6648e222bb776338f", "patch": "@@ -348,9 +348,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             ExprKind::DropTemps(e) => self.check_expr_with_expectation(e, expected),\n             ExprKind::Array(args) => self.check_expr_array(args, expected, expr),\n-            ExprKind::ConstBlock(ref anon_const) => {\n-                self.check_expr_const_block(anon_const, expected, expr)\n-            }\n+            ExprKind::ConstBlock(ref block) => self.check_expr_const_block(block, expected, expr),\n             ExprKind::Repeat(element, ref count) => {\n                 self.check_expr_repeat(element, count, expected, expr)\n             }\n@@ -1368,20 +1366,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn check_expr_const_block(\n         &self,\n-        anon_const: &'tcx hir::AnonConst,\n+        block: &'tcx hir::ConstBlock,\n         expected: Expectation<'tcx>,\n         _expr: &'tcx hir::Expr<'tcx>,\n     ) -> Ty<'tcx> {\n-        let body = self.tcx.hir().body(anon_const.body);\n+        let body = self.tcx.hir().body(block.body);\n \n         // Create a new function context.\n-        let def_id = anon_const.def_id;\n+        let def_id = block.def_id;\n         let fcx = FnCtxt::new(self, self.param_env.with_const(), def_id);\n         crate::GatherLocalsVisitor::new(&fcx).visit_body(body);\n \n         let ty = fcx.check_expr_with_expectation(&body.value, expected);\n         fcx.require_type_is_sized(ty, body.value.span, traits::ConstSized);\n-        fcx.write_ty(anon_const.hir_id, ty);\n+        fcx.write_ty(block.hir_id, ty);\n         ty\n     }\n "}, {"sha": "786a8c28f998bdc17ed17878ace31ccc091aac3a", "filename": "compiler/rustc_hir_typeck/src/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c9b7d6cbf71b93ec63f19a6648e222bb776338f/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c9b7d6cbf71b93ec63f19a6648e222bb776338f/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=6c9b7d6cbf71b93ec63f19a6648e222bb776338f", "patch": "@@ -270,6 +270,7 @@ impl<'a, 'tcx> DropRangeVisitor<'a, 'tcx> {\n                 | hir::Node::Variant(..)\n                 | hir::Node::Field(..)\n                 | hir::Node::AnonConst(..)\n+                | hir::Node::ConstBlock(..)\n                 | hir::Node::Stmt(..)\n                 | hir::Node::PathSegment(..)\n                 | hir::Node::Ty(..)"}, {"sha": "cbc012c55c3a2b75ac7aae1ff0328c5df7afbeb3", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6c9b7d6cbf71b93ec63f19a6648e222bb776338f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c9b7d6cbf71b93ec63f19a6648e222bb776338f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=6c9b7d6cbf71b93ec63f19a6648e222bb776338f", "patch": "@@ -1191,7 +1191,7 @@ fn should_encode_type(tcx: TyCtxt<'_>, def_id: LocalDefId, def_kind: DefKind) ->\n \n fn should_encode_const(def_kind: DefKind) -> bool {\n     match def_kind {\n-        DefKind::Const | DefKind::AssocConst | DefKind::AnonConst => true,\n+        DefKind::Const | DefKind::AssocConst | DefKind::AnonConst | DefKind::InlineConst => true,\n \n         DefKind::Struct\n         | DefKind::Union\n@@ -1210,7 +1210,6 @@ fn should_encode_const(def_kind: DefKind) -> bool {\n         | DefKind::Closure\n         | DefKind::Generator\n         | DefKind::ConstParam\n-        | DefKind::InlineConst\n         | DefKind::AssocTy\n         | DefKind::TyParam\n         | DefKind::Trait"}, {"sha": "5f2eb890c4eba551836f81837b205857d802b3f7", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6c9b7d6cbf71b93ec63f19a6648e222bb776338f/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c9b7d6cbf71b93ec63f19a6648e222bb776338f/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=6c9b7d6cbf71b93ec63f19a6648e222bb776338f", "patch": "@@ -44,6 +44,7 @@ pub fn associated_body(node: Node<'_>) -> Option<(LocalDefId, BodyId)> {\n         }\n \n         Node::AnonConst(constant) => Some((constant.def_id, constant.body)),\n+        Node::ConstBlock(constant) => Some((constant.def_id, constant.body)),\n \n         _ => None,\n     }\n@@ -240,15 +241,8 @@ impl<'hir> Map<'hir> {\n                     None => bug!(\"constructor node without a constructor\"),\n                 }\n             }\n-            Node::AnonConst(_) => {\n-                let inline = match self.find_parent(hir_id) {\n-                    Some(Node::Expr(&Expr {\n-                        kind: ExprKind::ConstBlock(ref anon_const), ..\n-                    })) if anon_const.hir_id == hir_id => true,\n-                    _ => false,\n-                };\n-                if inline { DefKind::InlineConst } else { DefKind::AnonConst }\n-            }\n+            Node::AnonConst(_) => DefKind::AnonConst,\n+            Node::ConstBlock(_) => DefKind::InlineConst,\n             Node::Field(_) => DefKind::Field,\n             Node::Expr(expr) => match expr.kind {\n                 ExprKind::Closure(Closure { movability: None, .. }) => DefKind::Closure,\n@@ -1060,6 +1054,7 @@ impl<'hir> Map<'hir> {\n             Node::Variant(variant) => variant.span,\n             Node::Field(field) => field.span,\n             Node::AnonConst(constant) => self.body(constant.body).value.span,\n+            Node::ConstBlock(constant) => self.body(constant.body).value.span,\n             Node::Expr(expr) => expr.span,\n             Node::ExprField(field) => field.span,\n             Node::Stmt(stmt) => stmt.span,\n@@ -1289,6 +1284,7 @@ fn hir_id_to_string(map: Map<'_>, id: HirId) -> String {\n             format!(\"{id} (field `{}` in {})\", field.ident, path_str(field.def_id))\n         }\n         Some(Node::AnonConst(_)) => node_str(\"const\"),\n+        Some(Node::ConstBlock(_)) => node_str(\"const\"),\n         Some(Node::Expr(_)) => node_str(\"expr\"),\n         Some(Node::ExprField(_)) => node_str(\"expr field\"),\n         Some(Node::Stmt(_)) => node_str(\"stmt\"),\n@@ -1434,6 +1430,11 @@ impl<'hir> Visitor<'hir> for ItemCollector<'hir> {\n         intravisit::walk_anon_const(self, c)\n     }\n \n+    fn visit_inline_const(&mut self, c: &'hir ConstBlock) {\n+        self.body_owners.push(c.def_id);\n+        intravisit::walk_inline_const(self, c)\n+    }\n+\n     fn visit_expr(&mut self, ex: &'hir Expr<'hir>) {\n         if let ExprKind::Closure(closure) = ex.kind {\n             self.body_owners.push(closure.def_id);"}, {"sha": "7f0c1d53f729a4d20bc8a76493a85a78dd690fcb", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c9b7d6cbf71b93ec63f19a6648e222bb776338f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c9b7d6cbf71b93ec63f19a6648e222bb776338f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=6c9b7d6cbf71b93ec63f19a6648e222bb776338f", "patch": "@@ -556,7 +556,7 @@ fn construct_const<'a, 'tcx>(\n             span,\n             ..\n         }) => (*span, ty.span),\n-        Node::AnonConst(_) => {\n+        Node::AnonConst(_) | Node::ConstBlock(_) => {\n             let span = tcx.def_span(def);\n             (span, span)\n         }"}, {"sha": "8eeb055ed82d09a3c813ec450c08a27c7b44ee20", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6c9b7d6cbf71b93ec63f19a6648e222bb776338f/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c9b7d6cbf71b93ec63f19a6648e222bb776338f/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=6c9b7d6cbf71b93ec63f19a6648e222bb776338f", "patch": "@@ -582,22 +582,15 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n     /// Converts inline const patterns.\n     fn lower_inline_const(\n         &mut self,\n-        anon_const: &'tcx hir::AnonConst,\n+        block: &'tcx hir::ConstBlock,\n         id: hir::HirId,\n         span: Span,\n     ) -> PatKind<'tcx> {\n         let tcx = self.tcx;\n-        let def_id = anon_const.def_id;\n-        let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-        let body_id = match tcx.hir().get(hir_id) {\n-            hir::Node::AnonConst(ac) => ac.body,\n-            _ => span_bug!(\n-                tcx.def_span(def_id.to_def_id()),\n-                \"from_inline_const can only process anonymous constants\"\n-            ),\n-        };\n+        let def_id = block.def_id;\n+        let body_id = block.body;\n         let expr = &tcx.hir().body(body_id).value;\n-        let ty = tcx.typeck(def_id).node_type(hir_id);\n+        let ty = tcx.typeck(def_id).node_type(block.hir_id);\n \n         // Special case inline consts that are just literals. This is solely\n         // a performance optimization, as we could also just go through the regular"}, {"sha": "2f851cd1eb5f7425f3d338653abcb50b0e7779a9", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c9b7d6cbf71b93ec63f19a6648e222bb776338f/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c9b7d6cbf71b93ec63f19a6648e222bb776338f/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=6c9b7d6cbf71b93ec63f19a6648e222bb776338f", "patch": "@@ -421,10 +421,8 @@ impl<'tcx> intravisit::Visitor<'tcx> for UnusedUnsafeVisitor<'_, 'tcx> {\n         intravisit::walk_block(self, block);\n     }\n \n-    fn visit_anon_const(&mut self, c: &'tcx hir::AnonConst) {\n-        if matches!(self.tcx.def_kind(c.def_id), DefKind::InlineConst) {\n-            self.visit_body(self.tcx.hir().body(c.body))\n-        }\n+    fn visit_inline_const(&mut self, c: &'tcx hir::ConstBlock) {\n+        self.visit_body(self.tcx.hir().body(c.body))\n     }\n \n     fn visit_fn("}, {"sha": "fc437c429fbeba6298e837dae9f41204cbdb3479", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6c9b7d6cbf71b93ec63f19a6648e222bb776338f/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c9b7d6cbf71b93ec63f19a6648e222bb776338f/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=6c9b7d6cbf71b93ec63f19a6648e222bb776338f", "patch": "@@ -199,6 +199,11 @@ impl<'tcx> Visitor<'tcx> for CheckConstVisitor<'tcx> {\n         self.recurse_into(kind, None, |this| intravisit::walk_anon_const(this, anon));\n     }\n \n+    fn visit_inline_const(&mut self, block: &'tcx hir::ConstBlock) {\n+        let kind = Some(hir::ConstContext::Const);\n+        self.recurse_into(kind, None, |this| intravisit::walk_inline_const(this, block));\n+    }\n+\n     fn visit_body(&mut self, body: &'tcx hir::Body<'tcx>) {\n         let owner = self.tcx.hir().body_owner_def_id(body.id());\n         let kind = self.tcx.hir().body_const_context(owner);"}, {"sha": "d5ac1cd9ce3355fac0a2e206f6a96d79ec82e2e1", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6c9b7d6cbf71b93ec63f19a6648e222bb776338f/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c9b7d6cbf71b93ec63f19a6648e222bb776338f/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=6c9b7d6cbf71b93ec63f19a6648e222bb776338f", "patch": "@@ -500,6 +500,17 @@ impl<'tcx> Visitor<'tcx> for MarkSymbolVisitor<'tcx> {\n \n         self.in_pat = in_pat;\n     }\n+\n+    fn visit_inline_const(&mut self, c: &'tcx hir::ConstBlock) {\n+        // When inline const blocks are used in pattern position, paths\n+        // referenced by it should be considered as used.\n+        let in_pat = mem::replace(&mut self.in_pat, false);\n+\n+        self.live_symbols.insert(c.def_id);\n+        intravisit::walk_inline_const(self, c);\n+\n+        self.in_pat = in_pat;\n+    }\n }\n \n fn has_allow_dead_code_or_lang_attr(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {"}, {"sha": "7c64df6a50ecf5738a7965d5cb6b24e019dc8a75", "filename": "compiler/rustc_passes/src/loops.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c9b7d6cbf71b93ec63f19a6648e222bb776338f/compiler%2Frustc_passes%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c9b7d6cbf71b93ec63f19a6648e222bb776338f/compiler%2Frustc_passes%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Floops.rs?ref=6c9b7d6cbf71b93ec63f19a6648e222bb776338f", "patch": "@@ -24,7 +24,7 @@ enum Context {\n     Closure(Span),\n     AsyncClosure(Span),\n     LabeledBlock,\n-    AnonConst,\n+    Constant,\n }\n \n #[derive(Copy, Clone)]\n@@ -53,7 +53,11 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n     }\n \n     fn visit_anon_const(&mut self, c: &'hir hir::AnonConst) {\n-        self.with_context(AnonConst, |v| intravisit::walk_anon_const(v, c));\n+        self.with_context(Constant, |v| intravisit::walk_anon_const(v, c));\n+    }\n+\n+    fn visit_inline_const(&mut self, c: &'hir hir::ConstBlock) {\n+        self.with_context(Constant, |v| intravisit::walk_inline_const(v, c));\n     }\n \n     fn visit_expr(&mut self, e: &'hir hir::Expr<'hir>) {\n@@ -192,7 +196,7 @@ impl<'a, 'hir> CheckLoopVisitor<'a, 'hir> {\n             AsyncClosure(closure_span) => {\n                 self.sess.emit_err(BreakInsideAsyncBlock { span, closure_span, name });\n             }\n-            Normal | AnonConst => {\n+            Normal | Constant => {\n                 self.sess.emit_err(OutsideLoop { span, name, is_break: name == \"break\" });\n             }\n         }"}, {"sha": "fe2d1fba7fe6ec40a36de4b0b151ff9a31bd4011", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c9b7d6cbf71b93ec63f19a6648e222bb776338f/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c9b7d6cbf71b93ec63f19a6648e222bb776338f/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=6c9b7d6cbf71b93ec63f19a6648e222bb776338f", "patch": "@@ -186,6 +186,7 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n                 kind: hir::TraitItemKind::Const(..), ..\n             })\n             | hir::Node::AnonConst(_)\n+            | hir::Node::ConstBlock(_)\n             | hir::Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Const(..), .. })\n             | hir::Node::ImplItem(hir::ImplItem {\n                 kind:"}]}