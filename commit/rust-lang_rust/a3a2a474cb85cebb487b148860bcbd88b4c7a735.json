{"sha": "a3a2a474cb85cebb487b148860bcbd88b4c7a735", "node_id": "C_kwDOAAsO6NoAKGEzYTJhNDc0Y2I4NWNlYmI0ODdiMTQ4ODYwYmNiZDg4YjRjN2E3MzU", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-05-23T08:15:34Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-05-23T08:15:34Z"}, "message": "split flag section into common and advanced flags", "tree": {"sha": "eb662b27047322d9c9d1af035b2c3e2849ab616e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb662b27047322d9c9d1af035b2c3e2849ab616e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3a2a474cb85cebb487b148860bcbd88b4c7a735", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3a2a474cb85cebb487b148860bcbd88b4c7a735", "html_url": "https://github.com/rust-lang/rust/commit/a3a2a474cb85cebb487b148860bcbd88b4c7a735", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3a2a474cb85cebb487b148860bcbd88b4c7a735/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab03d32622e7eb44866e178e1180651dd39f73d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab03d32622e7eb44866e178e1180651dd39f73d0", "html_url": "https://github.com/rust-lang/rust/commit/ab03d32622e7eb44866e178e1180651dd39f73d0"}], "stats": {"total": 72, "additions": 39, "deletions": 33}, "files": [{"sha": "876b2fcf972ae6274ea931cc6cb312687b35e8a0", "filename": "README.md", "status": "modified", "additions": 39, "deletions": 33, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/a3a2a474cb85cebb487b148860bcbd88b4c7a735/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/a3a2a474cb85cebb487b148860bcbd88b4c7a735/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=a3a2a474cb85cebb487b148860bcbd88b4c7a735", "patch": "@@ -258,33 +258,12 @@ up the sysroot.  If you are using `miri` (the Miri driver) directly, see the\n [miri-flags]: #miri--z-flags-and-environment-variables\n \n Miri adds its own set of `-Z` flags, which are usually set via the `MIRIFLAGS`\n-environment variable. Some of these are **unsound**, which means they can lead\n-to Miri failing to detect cases of undefined behavior in a program.\n+environment variable. We first document the most relevant and most commonly used flags:\n \n-* `-Zmiri-check-number-validity` enables checking of integer and float validity\n-  (e.g., they must be initialized and not carry pointer provenance) as part of\n-  enforcing validity invariants. This has no effect when\n-  `-Zmiri-disable-validation` is present.\n * `-Zmiri-compare-exchange-weak-failure-rate=<rate>` changes the failure rate of\n   `compare_exchange_weak` operations. The default is `0.8` (so 4 out of 5 weak ops will fail).\n   You can change it to any value between `0.0` and `1.0`, where `1.0` means it\n   will always fail and `0.0` means it will never fail.\n-* `-Zmiri-disable-abi-check` disables checking [function ABI]. Using this flag\n-  is **unsound**.\n-* `-Zmiri-disable-alignment-check` disables checking pointer alignment, so you\n-  can focus on other failures, but it means Miri can miss bugs in your program.\n-  Using this flag is **unsound**.\n-* `-Zmiri-disable-data-race-detector` disables checking for data races.  Using\n-  this flag is **unsound**.\n-* `-Zmiri-disable-stacked-borrows` disables checking the experimental\n-  [Stacked Borrows] aliasing rules.  This can make Miri run faster, but it also\n-  means no aliasing violations will be detected.  Using this flag is **unsound**\n-  (but the affected soundness rules are experimental).\n-* `-Zmiri-disable-validation` disables enforcing validity invariants, which are\n-  enforced by default.  This is mostly useful to focus on other failures (such\n-  as out-of-bounds accesses) first.  Setting this flag means Miri can miss bugs\n-  in your program.  However, this can also help to make Miri run faster.  Using\n-  this flag is **unsound**.\n * `-Zmiri-disable-isolation` disables host isolation.  As a consequence,\n   the program has access to host resources such as environment variables, file\n   systems, and randomness.\n@@ -305,6 +284,44 @@ to Miri failing to detect cases of undefined behavior in a program.\n   `-Zmiri-disable-validation` is set.\n * `-Zmiri-ignore-leaks` disables the memory leak checker, and also allows some\n   remaining threads to exist when the main thread exits.\n+* `-Zmiri-seed=<hex>` configures the seed of the RNG that Miri uses to resolve\n+  non-determinism. This RNG is used to pick base addresses for allocations. When\n+  isolation is enabled (the default), this is also used to emulate system\n+  entropy. The default seed is 0. You can increase test coverage by running Miri\n+  multiple times with different seeds.\n+  **NOTE**: This entropy is not good enough for cryptographic use! Do not\n+  generate secret keys in Miri or perform other kinds of cryptographic\n+  operations that rely on proper random numbers.\n+* `-Zmiri-strict-provenance` enables [strict\n+  provenance](https://github.com/rust-lang/rust/issues/95228) checking in Miri. This means that\n+  casting an integer to a pointer yields a result with 'invalid' provenance, i.e., with provenance\n+  that cannot be used for any memory access. Also implies `-Zmiri-tag-raw-pointers` and\n+  `-Zmiri-check-number-validity`.\n+\n+The remaining flags are for advanced use only, and more likely to change or be removed.\n+Some of these are **unsound**, which means they can lead\n+to Miri failing to detect cases of undefined behavior in a program.\n+\n+* `-Zmiri-check-number-validity` enables checking of integer and float validity\n+  (e.g., they must be initialized and not carry pointer provenance) as part of\n+  enforcing validity invariants. This has no effect when\n+  `-Zmiri-disable-validation` is present.\n+* `-Zmiri-disable-abi-check` disables checking [function ABI]. Using this flag\n+  is **unsound**.\n+* `-Zmiri-disable-alignment-check` disables checking pointer alignment, so you\n+  can focus on other failures, but it means Miri can miss bugs in your program.\n+  Using this flag is **unsound**.\n+* `-Zmiri-disable-data-race-detector` disables checking for data races.  Using\n+  this flag is **unsound**.\n+* `-Zmiri-disable-stacked-borrows` disables checking the experimental\n+  [Stacked Borrows] aliasing rules.  This can make Miri run faster, but it also\n+  means no aliasing violations will be detected.  Using this flag is **unsound**\n+  (but the affected soundness rules are experimental).\n+* `-Zmiri-disable-validation` disables enforcing validity invariants, which are\n+  enforced by default.  This is mostly useful to focus on other failures (such\n+  as out-of-bounds accesses) first.  Setting this flag means Miri can miss bugs\n+  in your program.  However, this can also help to make Miri run faster.  Using\n+  this flag is **unsound**.\n * `-Zmiri-measureme=<name>` enables `measureme` profiling for the interpreted program.\n    This can be used to find which parts of your program are executing slowly under Miri.\n    The profile is written out to a file with the prefix `<name>`, and can be processed\n@@ -329,17 +346,6 @@ to Miri failing to detect cases of undefined behavior in a program.\n   memory/pointers which is subject to these operations. Also note that this flag\n   is currently incompatible with Stacked Borrows, so you will have to also pass\n   `-Zmiri-disable-stacked-borrows` to use this.\n-* `-Zmiri-seed=<hex>` configures the seed of the RNG that Miri uses to resolve\n-  non-determinism.  This RNG is used to pick base addresses for allocations.\n-  When isolation is enabled (the default), this is also used to emulate system\n-  entropy.  The default seed is 0.  **NOTE**: This entropy is not good enough\n-  for cryptographic use!  Do not generate secret keys in Miri or perform other\n-  kinds of cryptographic operations that rely on proper random numbers.\n-* `-Zmiri-strict-provenance` enables [strict\n-  provenance](https://github.com/rust-lang/rust/issues/95228) checking in Miri. This means that\n-  casting an integer to a pointer yields a result with 'invalid' provenance, i.e., with provenance\n-  that cannot be used for any memory access. Also implies `-Zmiri-tag-raw-pointers` and\n-  `-Zmiri-check-number-validity`.\n * `-Zmiri-symbolic-alignment-check` makes the alignment check more strict.  By\n   default, alignment is checked by casting the pointer to an integer, and making\n   sure that is a multiple of the alignment.  This can lead to cases where a"}]}