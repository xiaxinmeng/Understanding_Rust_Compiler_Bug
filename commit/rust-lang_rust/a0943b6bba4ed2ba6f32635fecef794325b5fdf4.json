{"sha": "a0943b6bba4ed2ba6f32635fecef794325b5fdf4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwOTQzYjZiYmE0ZWQyYmE2ZjMyNjM1ZmVjZWY3OTQzMjViNWZkZjQ=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2018-08-02T17:59:16Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2018-08-02T17:59:16Z"}, "message": "Filter out duplicated trait predicates when generating auto traits\n\nFixes #51236", "tree": {"sha": "ce59aff49eac9296b17ca310d249a4554839a9da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce59aff49eac9296b17ca310d249a4554839a9da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0943b6bba4ed2ba6f32635fecef794325b5fdf4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAltjRowACgkQtAh+UQ6Y\nsWR83Q/5AXUDcwvGA73KMph7SbqM4YrYXElLn5LBsibzuZa6y320FQc3Ri9X7GXe\nJdOyfmcPoYfbwnu8EBxoC1h5Xz/9pm+Z8vMtYveX5yGlopPS1eWp9WEu/3muPirB\nfQd9dUDYndXRd6QALyMo8yYr3zs47wvx+wXn7+mq9D7uOdFHIBEDeJL1GwgiS3/H\nazRr8T3y9Kql2hsjfwvHA9qgOUm61gwrsoLbtuRoJSygw0y0AmAAx7aQ/q9vzjZp\nc3b9MWiMGVjEHH+GSdwviAvI4cw7IxizQG8ZQ4oPcffW6jGZvZe4u53Klsogs8Ut\nBes/j7aufD4PRrMGpSYhvM8P4EHDb5RgGKNzqleAFWbma2SdV3mUHK1cgaKypT0j\n1iDQ60ePHDw1Pr7zMh9nAYNSDZqhIS/uL70bizGyQzIN4rrKElbpUD90bZXEcXXm\n/OAKMQUsllsrObhBZF1mnqDYB/fTglpMvqTcZLwkP6jKKsEMNlL2GAVT4EFt+aPR\nDYJkWeOJ1iFXt3Tb/evY5Tcrcca/vYDoNuD8nCcUT4YUvRjYCPCjWa35bPro1Q/N\npHQRTau/QD/PXM4LWTPmYjpyrGgtJepBjRr/Pex4QXIldT5PoUt8WRiEO67kfODV\nmm5fxC5qDCDejEj9XQB233hNAio8M830SuHxM91h2ISJcWmzekU=\n=zSeE\n-----END PGP SIGNATURE-----", "payload": "tree ce59aff49eac9296b17ca310d249a4554839a9da\nparent bff08f2731fe658d50e291e8b6285e9cd735b528\nauthor Aaron Hill <aa1ronham@gmail.com> 1533232756 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1533232756 -0400\n\nFilter out duplicated trait predicates when generating auto traits\n\nFixes #51236\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0943b6bba4ed2ba6f32635fecef794325b5fdf4", "html_url": "https://github.com/rust-lang/rust/commit/a0943b6bba4ed2ba6f32635fecef794325b5fdf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0943b6bba4ed2ba6f32635fecef794325b5fdf4/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bff08f2731fe658d50e291e8b6285e9cd735b528", "url": "https://api.github.com/repos/rust-lang/rust/commits/bff08f2731fe658d50e291e8b6285e9cd735b528", "html_url": "https://github.com/rust-lang/rust/commit/bff08f2731fe658d50e291e8b6285e9cd735b528"}], "stats": {"total": 90, "additions": 87, "deletions": 3}, "files": [{"sha": "ffc4838cf8bc65229e47f2e5ffdaf598f9f1fbb4", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 63, "deletions": 3, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/a0943b6bba4ed2ba6f32635fecef794325b5fdf4/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0943b6bba4ed2ba6f32635fecef794325b5fdf4/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=a0943b6bba4ed2ba6f32635fecef794325b5fdf4", "patch": "@@ -326,6 +326,9 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         let mut user_computed_preds: FxHashSet<_> =\n             user_env.caller_bounds.iter().cloned().collect();\n \n+\n+\n+\n         let mut new_env = param_env.clone();\n         let dummy_cause = ObligationCause::misc(DUMMY_SP, ast::DUMMY_NODE_ID);\n \n@@ -358,7 +361,8 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                 &Err(SelectionError::Unimplemented) => {\n                     if self.is_of_param(pred.skip_binder().trait_ref.substs) {\n                         already_visited.remove(&pred);\n-                        user_computed_preds.insert(ty::Predicate::Trait(pred.clone()));\n+                        self.add_user_pred(&mut user_computed_preds, ty::Predicate::Trait(pred.clone()));\n+                        //user_computed_preds.insert(ty::Predicate::Trait(pred.clone()));\n                         predicates.push_back(pred);\n                     } else {\n                         debug!(\n@@ -393,6 +397,62 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         return Some((new_env, final_user_env));\n     }\n \n+    fn add_user_pred<'c>(&self, user_computed_preds: &mut FxHashSet<ty::Predicate<'c>>, new_pred: ty::Predicate<'c>) {\n+        let mut should_add_new = true;\n+        user_computed_preds.retain(|&old_pred| {\n+            match (&new_pred, old_pred) {\n+                (&ty::Predicate::Trait(new_trait), ty::Predicate::Trait(old_trait)) => {\n+                    if new_trait.def_id() == old_trait.def_id() {\n+                        let new_substs = new_trait.skip_binder().trait_ref.substs;\n+                        let old_substs = old_trait.skip_binder().trait_ref.substs;\n+                        if !new_substs.types().eq(old_substs.types()) {\n+                            // We can't compare lifetimes if the types are different,\n+                            // so skip checking old_pred\n+                            return true\n+                        }\n+\n+                        for (new_region, old_region) in new_substs.regions().zip(old_substs.regions()) {\n+                            match (new_region, old_region) {\n+                                // If both predicates have an 'ReLateBound' (a HRTB) in the\n+                                // same spot, we do nothing\n+                                (ty::RegionKind::ReLateBound(_, _), ty::RegionKind::ReLateBound(_, _)) => {},\n+\n+                                (ty::RegionKind::ReLateBound(_, _), _) => {\n+                                    // The new predicate has a HRTB in a spot where the old\n+                                    // predicate does not (if they both had a HRTB, the previous\n+                                    // match arm would have executed).\n+                                    //\n+                                    // The means we want to remove the older predicate from\n+                                    // user_computed_preds, since having both it and the new\n+                                    // predicate in a ParamEnv would confuse SelectionContext\n+                                    // We're currently in the predicate passed to 'retain',\n+                                    // so we return 'false' to remove the old predicate from\n+                                    // user_computed_preds\n+                                    return false;\n+                                },\n+                                (_, ty::RegionKind::ReLateBound(_, _)) => {\n+                                    // This is the opposite situation as the previous arm - the\n+                                    // old predicate has a HRTB lifetime in a place where the\n+                                    // new predicate does not. We want to leave the old\n+                                    // predicate in user_computed_preds, and skip adding\n+                                    // new_pred to user_computed_params.\n+                                    should_add_new = false\n+                                }\n+                                _ => {}\n+                            }\n+                        }\n+                    }\n+                },\n+                _ => {}\n+            }\n+            return true\n+        });\n+\n+        if should_add_new {\n+            user_computed_preds.insert(new_pred);\n+        }\n+    }\n+\n     pub fn region_name(&self, region: Region) -> Option<String> {\n         match region {\n             &ty::ReEarlyBound(r) => Some(r.name.to_string()),\n@@ -555,15 +615,15 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                     let substs = &p.skip_binder().trait_ref.substs;\n \n                     if self.is_of_param(substs) && !only_projections && is_new_pred {\n-                        computed_preds.insert(predicate);\n+                        self.add_user_pred(computed_preds, predicate);\n                     }\n                     predicates.push_back(p.clone());\n                 }\n                 &ty::Predicate::Projection(p) => {\n                     // If the projection isn't all type vars, then\n                     // we don't want to add it as a bound\n                     if self.is_of_param(p.skip_binder().projection_ty.substs) && is_new_pred {\n-                        computed_preds.insert(predicate);\n+                        self.add_user_pred(computed_preds, predicate);\n                     } else {\n                         match poly_project_and_unify_type(select, &obligation.with(p.clone())) {\n                             Err(e) => {"}, {"sha": "541a1c5e19f2a321f2787f131b6621625deab5d7", "filename": "src/test/rustdoc/issue-51236.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a0943b6bba4ed2ba6f32635fecef794325b5fdf4/src%2Ftest%2Frustdoc%2Fissue-51236.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0943b6bba4ed2ba6f32635fecef794325b5fdf4/src%2Ftest%2Frustdoc%2Fissue-51236.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-51236.rs?ref=a0943b6bba4ed2ba6f32635fecef794325b5fdf4", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::marker::PhantomData;\n+\n+pub mod traits {\n+    pub trait Owned<'a> {\n+        type Reader;\n+    }\n+}\n+\n+// @has issue_51236/struct.Owned.html\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<T> Send for \\\n+// Owned<T> where <T as Owned<'static>>::Reader: Send\"\n+pub struct Owned<T> where T: for<'a> ::traits::Owned<'a> {\n+    marker: PhantomData<<T as ::traits::Owned<'static>>::Reader>,\n+}"}]}