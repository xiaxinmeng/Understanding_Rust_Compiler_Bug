{"sha": "467d381d3afce474309d6ba9a334fa9b463c3a7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2N2QzODFkM2FmY2U0NzQzMDlkNmJhOWEzMzRmYTliNDYzYzNhN2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-25T02:25:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-25T02:25:38Z"}, "message": "auto merge of #7931 : blake2-ppc/rust/chain-mut-ref, r=pcwalton\n\nFirst, clean up the uses of \"None\" and \"Some\" to always use consistent title case matching the variant names.\r\n\r\nAdd .chain_mut_ref() which is a missing method. A use case example for this method is extraction of an optional value from an Option\\<Container\\> value.", "tree": {"sha": "902b9b0cbfe5387f1138dda1dce06745d4cba93b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/902b9b0cbfe5387f1138dda1dce06745d4cba93b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/467d381d3afce474309d6ba9a334fa9b463c3a7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/467d381d3afce474309d6ba9a334fa9b463c3a7f", "html_url": "https://github.com/rust-lang/rust/commit/467d381d3afce474309d6ba9a334fa9b463c3a7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/467d381d3afce474309d6ba9a334fa9b463c3a7f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a726f0573dcfcd01ae9b37266014df0e26f2e22", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a726f0573dcfcd01ae9b37266014df0e26f2e22", "html_url": "https://github.com/rust-lang/rust/commit/4a726f0573dcfcd01ae9b37266014df0e26f2e22"}, {"sha": "625ca7afe4fb50758215d623d45de84a5f4290ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/625ca7afe4fb50758215d623d45de84a5f4290ae", "html_url": "https://github.com/rust-lang/rust/commit/625ca7afe4fb50758215d623d45de84a5f4290ae"}], "stats": {"total": 35, "additions": 23, "deletions": 12}, "files": [{"sha": "eb3f227562a82c9eca7b5bb88885bdb6e76d3b79", "filename": "src/libstd/option.rs", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/467d381d3afce474309d6ba9a334fa9b463c3a7f/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467d381d3afce474309d6ba9a334fa9b463c3a7f/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=467d381d3afce474309d6ba9a334fa9b463c3a7f", "patch": "@@ -118,13 +118,13 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Returns true if the option equals `none`\n+    /// Returns true if the option equals `None`\n     #[inline]\n     pub fn is_none(&self) -> bool {\n         match *self { None => true, Some(_) => false }\n     }\n \n-    /// Returns true if the option contains some value\n+    /// Returns true if the option contains a `Some` value\n     #[inline]\n     pub fn is_some(&self) -> bool { !self.is_none() }\n \n@@ -158,6 +158,17 @@ impl<T> Option<T> {\n         }\n     }\n \n+    /// Update an optional value by optionally running its content by mut reference\n+    /// through a function that returns an option.\n+    #[inline]\n+    pub fn chain_mut_ref<'a, U>(&'a mut self, f: &fn(x: &'a mut T) -> Option<U>)\n+                                -> Option<U> {\n+        match *self {\n+            Some(ref mut x) => f(x),\n+            None => None\n+        }\n+    }\n+\n     /// Filters an optional value using given function.\n     #[inline(always)]\n     pub fn filtered(self, f: &fn(t: &T) -> bool) -> Option<T> {\n@@ -167,19 +178,19 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Maps a `some` value from one type to another by reference\n+    /// Maps a `Some` value from one type to another by reference\n     #[inline]\n     pub fn map<'a, U>(&'a self, f: &fn(&'a T) -> U) -> Option<U> {\n         match *self { Some(ref x) => Some(f(x)), None => None }\n     }\n \n-    /// Maps a `some` value from one type to another by a mutable reference\n+    /// Maps a `Some` value from one type to another by a mutable reference\n     #[inline]\n     pub fn map_mut<'a, U>(&'a mut self, f: &fn(&'a mut T) -> U) -> Option<U> {\n         match *self { Some(ref mut x) => Some(f(x)), None => None }\n     }\n \n-    /// Maps a `some` value from one type to another by a mutable reference,\n+    /// Maps a `Some` value from one type to another by a mutable reference,\n     /// or returns a default value.\n     #[inline]\n     pub fn map_mut_default<'a, U>(&'a mut self, def: U, f: &fn(&'a mut T) -> U) -> U {\n@@ -260,7 +271,7 @@ impl<T> Option<T> {\n     pub fn get_ref<'a>(&'a self) -> &'a T {\n         match *self {\n           Some(ref x) => x,\n-          None => fail!(\"option::get_ref none\")\n+          None => fail!(\"option::get_ref None\")\n         }\n     }\n \n@@ -282,7 +293,7 @@ impl<T> Option<T> {\n     pub fn get_mut_ref<'a>(&'a mut self) -> &'a mut T {\n         match *self {\n           Some(ref mut x) => x,\n-          None => fail!(\"option::get_mut_ref none\")\n+          None => fail!(\"option::get_mut_ref None\")\n         }\n     }\n \n@@ -306,7 +317,7 @@ impl<T> Option<T> {\n          */\n         match self {\n           Some(x) => x,\n-          None => fail!(\"option::unwrap none\")\n+          None => fail!(\"option::unwrap None\")\n         }\n     }\n \n@@ -320,7 +331,7 @@ impl<T> Option<T> {\n      */\n     #[inline]\n     pub fn take_unwrap(&mut self) -> T {\n-        if self.is_none() { fail!(\"option::take_unwrap none\") }\n+        if self.is_none() { fail!(\"option::take_unwrap None\") }\n         self.take().unwrap()\n     }\n \n@@ -330,7 +341,7 @@ impl<T> Option<T> {\n      *\n      * # Failure\n      *\n-     * Fails if the value equals `none`\n+     * Fails if the value equals `None`\n      */\n     #[inline]\n     pub fn expect(self, reason: &str) -> T {\n@@ -358,7 +369,7 @@ impl<T> Option<T> {\n     pub fn get(self) -> T {\n         match self {\n           Some(x) => return x,\n-          None => fail!(\"option::get none\")\n+          None => fail!(\"option::get None\")\n         }\n     }\n \n@@ -368,7 +379,7 @@ impl<T> Option<T> {\n         match self { Some(x) => x, None => def }\n     }\n \n-    /// Applies a function zero or more times until the result is none.\n+    /// Applies a function zero or more times until the result is None.\n     #[inline]\n     pub fn while_some(self, blk: &fn(v: T) -> Option<T>) {\n         let mut opt = self;"}]}