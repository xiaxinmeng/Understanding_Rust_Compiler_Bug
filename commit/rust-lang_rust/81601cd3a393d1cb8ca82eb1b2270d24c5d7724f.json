{"sha": "81601cd3a393d1cb8ca82eb1b2270d24c5d7724f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNjAxY2QzYTM5M2QxY2I4Y2E4MmViMWIyMjcwZDI0YzVkNzcyNGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-11-04T17:40:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-04T17:40:30Z"}, "message": "Auto merge of #37306 - bluss:trusted-len, r=alexcrichton\n\nAdd Iterator trait TrustedLen to enable better FromIterator / Extend\n\nThis trait attempts to improve FromIterator / Extend code by enabling it to trust the iterator to produce an exact number of elements, which means that reallocation needs to happen only once and is moved out of the loop.\n\n`TrustedLen` differs from `ExactSizeIterator` in that it attempts to include _more_ iterators by allowing for the case that the iterator's len does not fit in `usize`. Consumers must check for this case (for example they could panic, since they can't allocate a collection of that size).\n\nFor example, chain can be TrustedLen and all numerical ranges can be TrustedLen. All they need to do is to report an exact size if it fits in `usize`, and `None` as the upper bound otherwise.\n\nThe trait describes its contract like this:\n\n```\nAn iterator that reports an accurate length using size_hint.\n\nThe iterator reports a size hint where it is either exact\n(lower bound is equal to upper bound), or the upper bound is `None`.\nThe upper bound must only be `None` if the actual iterator length is\nlarger than `usize::MAX`.\n\nThe iterator must produce exactly the number of elements it reported.\n\nThis trait must only be implemented when the contract is upheld.\nConsumers of this trait must inspect `.size_hint()`\u2019s upper bound.\n```\n\nFixes #37232", "tree": {"sha": "382c3db508896e0398ca4943c3c9b10cef2c9da6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/382c3db508896e0398ca4943c3c9b10cef2c9da6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81601cd3a393d1cb8ca82eb1b2270d24c5d7724f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81601cd3a393d1cb8ca82eb1b2270d24c5d7724f", "html_url": "https://github.com/rust-lang/rust/commit/81601cd3a393d1cb8ca82eb1b2270d24c5d7724f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81601cd3a393d1cb8ca82eb1b2270d24c5d7724f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccfc38f034e3f53cb460936bd9744085d4a63b40", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccfc38f034e3f53cb460936bd9744085d4a63b40", "html_url": "https://github.com/rust-lang/rust/commit/ccfc38f034e3f53cb460936bd9744085d4a63b40"}, {"sha": "f0e6b90790da2203f04fa44ee3ed8f24dcc5f4dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0e6b90790da2203f04fa44ee3ed8f24dcc5f4dc", "html_url": "https://github.com/rust-lang/rust/commit/f0e6b90790da2203f04fa44ee3ed8f24dcc5f4dc"}], "stats": {"total": 206, "additions": 146, "deletions": 60}, "files": [{"sha": "23d6edd6d794e88c86cc7b2cfc2d0267365a2ee6", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81601cd3a393d1cb8ca82eb1b2270d24c5d7724f/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81601cd3a393d1cb8ca82eb1b2270d24c5d7724f/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=81601cd3a393d1cb8ca82eb1b2270d24c5d7724f", "patch": "@@ -50,6 +50,7 @@\n #![feature(specialization)]\n #![feature(staged_api)]\n #![feature(step_by)]\n+#![feature(trusted_len)]\n #![feature(unicode)]\n #![feature(unique)]\n #![cfg_attr(test, feature(rand, test))]"}, {"sha": "71c49ee616cbced754c823e495b7b31aaea477e0", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 43, "deletions": 57, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/81601cd3a393d1cb8ca82eb1b2270d24c5d7724f/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81601cd3a393d1cb8ca82eb1b2270d24c5d7724f/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=81601cd3a393d1cb8ca82eb1b2270d24c5d7724f", "patch": "@@ -75,15 +75,14 @@ use core::cmp::Ordering;\n use core::fmt;\n use core::hash::{self, Hash};\n use core::intrinsics::{arith_offset, assume};\n-use core::iter::{FromIterator, FusedIterator};\n+use core::iter::{FromIterator, FusedIterator, TrustedLen};\n use core::mem;\n use core::ops::{Index, IndexMut};\n use core::ops;\n use core::ptr;\n use core::ptr::Shared;\n use core::slice;\n \n-use super::SpecExtend;\n use super::range::RangeArgument;\n \n /// A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.\n@@ -1245,26 +1244,7 @@ impl<T: Clone> Vec<T> {\n     /// ```\n     #[stable(feature = \"vec_extend_from_slice\", since = \"1.6.0\")]\n     pub fn extend_from_slice(&mut self, other: &[T]) {\n-        self.reserve(other.len());\n-\n-        // Unsafe code so this can be optimised to a memcpy (or something\n-        // similarly fast) when T is Copy. LLVM is easily confused, so any\n-        // extra operations during the loop can prevent this optimisation.\n-        unsafe {\n-            let len = self.len();\n-            let ptr = self.get_unchecked_mut(len) as *mut T;\n-            // Use SetLenOnDrop to work around bug where compiler\n-            // may not realize the store through `ptr` trough self.set_len()\n-            // don't alias.\n-            let mut local_len = SetLenOnDrop::new(&mut self.len);\n-\n-            for i in 0..other.len() {\n-                ptr::write(ptr.offset(i as isize), other.get_unchecked(i).clone());\n-                local_len.increment_len(1);\n-            }\n-\n-            // len set by scope guard\n-        }\n+        self.extend(other.iter().cloned())\n     }\n }\n \n@@ -1606,19 +1586,25 @@ impl<'a, T> IntoIterator for &'a mut Vec<T> {\n impl<T> Extend<T> for Vec<T> {\n     #[inline]\n     fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {\n-        <Self as SpecExtend<I>>::spec_extend(self, iter);\n+        self.extend_desugared(iter.into_iter())\n     }\n }\n \n-impl<I: IntoIterator> SpecExtend<I> for Vec<I::Item> {\n-    default fn spec_extend(&mut self, iter: I) {\n-        self.extend_desugared(iter.into_iter())\n-    }\n+trait IsTrustedLen : Iterator {\n+    fn trusted_len(&self) -> Option<usize> { None }\n }\n+impl<I> IsTrustedLen for I where I: Iterator { }\n \n-impl<T> SpecExtend<Vec<T>> for Vec<T> {\n-    fn spec_extend(&mut self, ref mut other: Vec<T>) {\n-        self.append(other);\n+impl<I> IsTrustedLen for I where I: TrustedLen\n+{\n+    fn trusted_len(&self) -> Option<usize> {\n+        let (low, high) = self.size_hint();\n+        if let Some(high_value) = high {\n+            debug_assert_eq!(low, high_value,\n+                             \"TrustedLen iterator's size hint is not exact: {:?}\",\n+                             (low, high));\n+        }\n+        high\n     }\n }\n \n@@ -1629,16 +1615,30 @@ impl<T> Vec<T> {\n         //      for item in iterator {\n         //          self.push(item);\n         //      }\n-        while let Some(element) = iterator.next() {\n-            let len = self.len();\n-            if len == self.capacity() {\n-                let (lower, _) = iterator.size_hint();\n-                self.reserve(lower.saturating_add(1));\n-            }\n+        if let Some(additional) = iterator.trusted_len() {\n+            self.reserve(additional);\n             unsafe {\n-                ptr::write(self.get_unchecked_mut(len), element);\n-                // NB can't overflow since we would have had to alloc the address space\n-                self.set_len(len + 1);\n+                let mut ptr = self.as_mut_ptr().offset(self.len() as isize);\n+                let mut local_len = SetLenOnDrop::new(&mut self.len);\n+                for element in iterator {\n+                    ptr::write(ptr, element);\n+                    ptr = ptr.offset(1);\n+                    // NB can't overflow since we would have had to alloc the address space\n+                    local_len.increment_len(1);\n+                }\n+            }\n+        } else {\n+            while let Some(element) = iterator.next() {\n+                let len = self.len();\n+                if len == self.capacity() {\n+                    let (lower, _) = iterator.size_hint();\n+                    self.reserve(lower.saturating_add(1));\n+                }\n+                unsafe {\n+                    ptr::write(self.get_unchecked_mut(len), element);\n+                    // NB can't overflow since we would have had to alloc the address space\n+                    self.set_len(len + 1);\n+                }\n             }\n         }\n     }\n@@ -1647,24 +1647,7 @@ impl<T> Vec<T> {\n #[stable(feature = \"extend_ref\", since = \"1.2.0\")]\n impl<'a, T: 'a + Copy> Extend<&'a T> for Vec<T> {\n     fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) {\n-        <I as SpecExtendVec<T>>::extend_vec(iter, self);\n-    }\n-}\n-\n-// helper trait for specialization of Vec's Extend impl\n-trait SpecExtendVec<T> {\n-    fn extend_vec(self, vec: &mut Vec<T>);\n-}\n-\n-impl <'a, T: 'a + Copy, I: IntoIterator<Item=&'a T>> SpecExtendVec<T> for I {\n-    default fn extend_vec(self, vec: &mut Vec<T>) {\n-        vec.extend(self.into_iter().cloned());\n-    }\n-}\n-\n-impl<'a, T: Copy> SpecExtendVec<T> for &'a [T] {\n-    fn extend_vec(self, vec: &mut Vec<T>) {\n-        vec.extend_from_slice(self);\n+        self.extend(iter.into_iter().map(|&x| x))\n     }\n }\n \n@@ -1988,6 +1971,9 @@ impl<T> ExactSizeIterator for IntoIter<T> {}\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<T> FusedIterator for IntoIter<T> {}\n \n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<T> TrustedLen for IntoIter<T> {}\n+\n #[stable(feature = \"vec_into_iter_clone\", since = \"1.8.0\")]\n impl<T: Clone> Clone for IntoIter<T> {\n     fn clone(&self) -> IntoIter<T> {"}, {"sha": "57c1d783b64b295c6e080c43a978697110feaa85", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/81601cd3a393d1cb8ca82eb1b2270d24c5d7724f/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81601cd3a393d1cb8ca82eb1b2270d24c5d7724f/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=81601cd3a393d1cb8ca82eb1b2270d24c5d7724f", "patch": "@@ -328,6 +328,8 @@ pub use self::traits::{FromIterator, IntoIterator, DoubleEndedIterator, Extend};\n pub use self::traits::{ExactSizeIterator, Sum, Product};\n #[unstable(feature = \"fused\", issue = \"35602\")]\n pub use self::traits::FusedIterator;\n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+pub use self::traits::TrustedLen;\n \n mod iterator;\n mod range;\n@@ -372,6 +374,10 @@ impl<I> ExactSizeIterator for Rev<I>\n impl<I> FusedIterator for Rev<I>\n     where I: FusedIterator + DoubleEndedIterator {}\n \n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<I> TrustedLen for Rev<I>\n+    where I: TrustedLen + DoubleEndedIterator {}\n+\n /// An iterator that clones the elements of an underlying iterator.\n ///\n /// This `struct` is created by the [`cloned()`] method on [`Iterator`]. See its\n@@ -438,6 +444,12 @@ unsafe impl<'a, I, T: 'a> TrustedRandomAccess for Cloned<I>\n     fn may_have_side_effect() -> bool { true }\n }\n \n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<'a, I, T: 'a> TrustedLen for Cloned<I>\n+    where I: TrustedLen<Item=&'a T>,\n+          T: Clone\n+{}\n+\n /// An iterator that repeats endlessly.\n ///\n /// This `struct` is created by the [`cycle()`] method on [`Iterator`]. See its\n@@ -667,6 +679,11 @@ impl<A, B> FusedIterator for Chain<A, B>\n           B: FusedIterator<Item=A::Item>,\n {}\n \n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<A, B> TrustedLen for Chain<A, B>\n+    where A: TrustedLen, B: TrustedLen<Item=A::Item>,\n+{}\n+\n /// An iterator that iterates two other iterators simultaneously.\n ///\n /// This `struct` is created by the [`zip()`] method on [`Iterator`]. See its\n@@ -884,6 +901,11 @@ unsafe impl<A, B> TrustedRandomAccess for Zip<A, B>\n impl<A, B> FusedIterator for Zip<A, B>\n     where A: FusedIterator, B: FusedIterator, {}\n \n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<A, B> TrustedLen for Zip<A, B>\n+    where A: TrustedLen, B: TrustedLen,\n+{}\n+\n /// An iterator that maps the values of `iter` with `f`.\n ///\n /// This `struct` is created by the [`map()`] method on [`Iterator`]. See its\n@@ -991,6 +1013,11 @@ impl<B, I: ExactSizeIterator, F> ExactSizeIterator for Map<I, F>\n impl<B, I: FusedIterator, F> FusedIterator for Map<I, F>\n     where F: FnMut(I::Item) -> B {}\n \n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<B, I, F> TrustedLen for Map<I, F>\n+    where I: TrustedLen,\n+          F: FnMut(I::Item) -> B {}\n+\n #[doc(hidden)]\n unsafe impl<B, I, F> TrustedRandomAccess for Map<I, F>\n     where I: TrustedRandomAccess,\n@@ -1227,6 +1254,12 @@ unsafe impl<I> TrustedRandomAccess for Enumerate<I>\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<I> FusedIterator for Enumerate<I> where I: FusedIterator {}\n \n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<I> TrustedLen for Enumerate<I>\n+    where I: TrustedLen,\n+{}\n+\n+\n /// An iterator with a `peek()` that returns an optional reference to the next\n /// element.\n ///"}, {"sha": "7c96be2facb485a38171167448751db6c63fd4b5", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/81601cd3a393d1cb8ca82eb1b2270d24c5d7724f/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81601cd3a393d1cb8ca82eb1b2270d24c5d7724f/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=81601cd3a393d1cb8ca82eb1b2270d24c5d7724f", "patch": "@@ -12,7 +12,7 @@ use mem;\n use ops::{self, Add, Sub};\n use usize;\n \n-use super::FusedIterator;\n+use super::{FusedIterator, TrustedLen};\n \n /// Objects that can be stepped over in both directions.\n ///\n@@ -480,6 +480,22 @@ macro_rules! range_incl_exact_iter_impl {\n     )*)\n }\n \n+macro_rules! range_trusted_len_impl {\n+    ($($t:ty)*) => ($(\n+        #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+        unsafe impl TrustedLen for ops::Range<$t> { }\n+    )*)\n+}\n+\n+macro_rules! range_incl_trusted_len_impl {\n+    ($($t:ty)*) => ($(\n+        #[unstable(feature = \"inclusive_range\",\n+                   reason = \"recently added, follows RFC\",\n+                   issue = \"28237\")]\n+        unsafe impl TrustedLen for ops::RangeInclusive<$t> { }\n+    )*)\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A: Step> Iterator for ops::Range<A> where\n     for<'a> &'a A: Add<&'a A, Output = A>\n@@ -513,6 +529,13 @@ impl<A: Step> Iterator for ops::Range<A> where\n range_exact_iter_impl!(usize u8 u16 u32 isize i8 i16 i32);\n range_incl_exact_iter_impl!(u8 u16 i8 i16);\n \n+// These macros generate `TrustedLen` impls.\n+//\n+// They need to guarantee that .size_hint() is either exact, or that\n+// the upper bound is None when it does not fit the type limits.\n+range_trusted_len_impl!(usize isize u8 i8 u16 i16 u32 i32 i64 u64);\n+range_incl_trusted_len_impl!(usize isize u8 i8 u16 i16 u32 i32 i64 u64);\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A: Step + Clone> DoubleEndedIterator for ops::Range<A> where\n     for<'a> &'a A: Add<&'a A, Output = A>,"}, {"sha": "2b0dd63a5714a61416ee2b8d712149dde8a14dc0", "filename": "src/libcore/iter/traits.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/81601cd3a393d1cb8ca82eb1b2270d24c5d7724f/src%2Flibcore%2Fiter%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81601cd3a393d1cb8ca82eb1b2270d24c5d7724f/src%2Flibcore%2Fiter%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits.rs?ref=81601cd3a393d1cb8ca82eb1b2270d24c5d7724f", "patch": "@@ -665,3 +665,22 @@ pub trait FusedIterator: Iterator {}\n \n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, I: FusedIterator + ?Sized> FusedIterator for &'a mut I {}\n+\n+/// An iterator that reports an accurate length using size_hint.\n+///\n+/// The iterator reports a size hint where it is either exact\n+/// (lower bound is equal to upper bound), or the upper bound is `None`.\n+/// The upper bound must only be `None` if the actual iterator length is\n+/// larger than `usize::MAX`.\n+///\n+/// The iterator must produce exactly the number of elements it reported.\n+///\n+/// # Safety\n+///\n+/// This trait must only be implemented when the contract is upheld.\n+/// Consumers of this trait must inspect `.size_hint()`\u2019s upper bound.\n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+pub unsafe trait TrustedLen : Iterator {}\n+\n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<'a, I: TrustedLen + ?Sized> TrustedLen for &'a mut I {}"}, {"sha": "607e16887a831b8faaa0fcb22a351ec481f5909d", "filename": "src/libcore/option.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/81601cd3a393d1cb8ca82eb1b2270d24c5d7724f/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81601cd3a393d1cb8ca82eb1b2270d24c5d7724f/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=81601cd3a393d1cb8ca82eb1b2270d24c5d7724f", "patch": "@@ -145,7 +145,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use iter::{FromIterator, FusedIterator};\n+use iter::{FromIterator, FusedIterator, TrustedLen};\n use mem;\n \n // Note that this is not a lang item per se, but it has a hidden dependency on\n@@ -803,6 +803,7 @@ impl<A> DoubleEndedIterator for Item<A> {\n \n impl<A> ExactSizeIterator for Item<A> {}\n impl<A> FusedIterator for Item<A> {}\n+unsafe impl<A> TrustedLen for Item<A> {}\n \n /// An iterator over a reference of the contained item in an [`Option`].\n ///\n@@ -833,6 +834,9 @@ impl<'a, A> ExactSizeIterator for Iter<'a, A> {}\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, A> FusedIterator for Iter<'a, A> {}\n \n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<'a, A> TrustedLen for Iter<'a, A> {}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, A> Clone for Iter<'a, A> {\n     fn clone(&self) -> Iter<'a, A> {\n@@ -868,6 +872,8 @@ impl<'a, A> ExactSizeIterator for IterMut<'a, A> {}\n \n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, A> FusedIterator for IterMut<'a, A> {}\n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<'a, A> TrustedLen for IterMut<'a, A> {}\n \n /// An iterator over the item contained inside an [`Option`].\n ///\n@@ -898,6 +904,9 @@ impl<A> ExactSizeIterator for IntoIter<A> {}\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<A> FusedIterator for IntoIter<A> {}\n \n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<A> TrustedLen for IntoIter<A> {}\n+\n /////////////////////////////////////////////////////////////////////////////\n // FromIterator\n /////////////////////////////////////////////////////////////////////////////"}, {"sha": "afed99d265f1921cebedd29697934b6a6a5bf8fe", "filename": "src/libcore/result.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/81601cd3a393d1cb8ca82eb1b2270d24c5d7724f/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81601cd3a393d1cb8ca82eb1b2270d24c5d7724f/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=81601cd3a393d1cb8ca82eb1b2270d24c5d7724f", "patch": "@@ -249,7 +249,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use fmt;\n-use iter::{FromIterator, FusedIterator};\n+use iter::{FromIterator, FusedIterator, TrustedLen};\n \n /// `Result` is a type that represents either success (`Ok`) or failure (`Err`).\n ///\n@@ -924,6 +924,9 @@ impl<'a, T> ExactSizeIterator for Iter<'a, T> {}\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, T> FusedIterator for Iter<'a, T> {}\n \n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<'a, A> TrustedLen for Iter<'a, A> {}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Clone for Iter<'a, T> {\n     fn clone(&self) -> Iter<'a, T> { Iter { inner: self.inner } }\n@@ -962,6 +965,9 @@ impl<'a, T> ExactSizeIterator for IterMut<'a, T> {}\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, T> FusedIterator for IterMut<'a, T> {}\n \n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<'a, A> TrustedLen for IterMut<'a, A> {}\n+\n /// An iterator over the value in a [`Ok`] variant of a [`Result`]. This struct is\n /// created by the [`into_iter`] method on [`Result`][`Result`] (provided by\n /// the [`IntoIterator`] trait).\n@@ -999,6 +1005,9 @@ impl<T> ExactSizeIterator for IntoIter<T> {}\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<T> FusedIterator for IntoIter<T> {}\n \n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<A> TrustedLen for IntoIter<A> {}\n+\n /////////////////////////////////////////////////////////////////////////////\n // FromIterator\n /////////////////////////////////////////////////////////////////////////////"}, {"sha": "871b63145ca6d24c8981bae053aadc54bfee7a6c", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81601cd3a393d1cb8ca82eb1b2270d24c5d7724f/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81601cd3a393d1cb8ca82eb1b2270d24c5d7724f/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=81601cd3a393d1cb8ca82eb1b2270d24c5d7724f", "patch": "@@ -988,6 +988,9 @@ impl<'a, T> ExactSizeIterator for Iter<'a, T> {}\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, T> FusedIterator for Iter<'a, T> {}\n \n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<'a, T> TrustedLen for Iter<'a, T> {}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Clone for Iter<'a, T> {\n     fn clone(&self) -> Iter<'a, T> { Iter { ptr: self.ptr, end: self.end, _marker: self._marker } }\n@@ -1109,6 +1112,9 @@ impl<'a, T> ExactSizeIterator for IterMut<'a, T> {}\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, T> FusedIterator for IterMut<'a, T> {}\n \n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<'a, T> TrustedLen for IterMut<'a, T> {}\n+\n /// An internal abstraction over the splitting iterators, so that\n /// splitn, splitn_mut etc can be implemented once.\n #[doc(hidden)]"}]}