{"sha": "0f364ac3821a58411407f2fd1547ae823f8f0143", "node_id": "C_kwDOAAsO6NoAKDBmMzY0YWMzODIxYTU4NDExNDA3ZjJmZDE1NDdhZTgyM2Y4ZjAxNDM", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-04-14T10:09:57Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-04-14T10:09:57Z"}, "message": "add line numbers to error messages", "tree": {"sha": "1be473700b3db52b74c48fbb059bf38d11fd4ffd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1be473700b3db52b74c48fbb059bf38d11fd4ffd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f364ac3821a58411407f2fd1547ae823f8f0143", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmQ5JnwACgkQzXazX3c0\ndp569xAAlwJsZ+i5mN3mDuKHcrlxPHo/SXpOgj5ICkt69lbCtdNYJRcsp3MEkLhV\nu6YzfGrqy/6/xTPT2Eihc9YaIQbiXVP/3rQUTqLHWsI5478MODdZM4EdgpMnHtOG\nMmoyWnjV51sTGURSPDxtxOss4L1BY9B5AmSm1AETsE+t2Y4/7a3vwfKwGgbPYdYV\nkIAihYnDDTtjQQKOzGfgxk+upHy6WjodepMnOnijmj6F4Ze8DecaQYftjB6yrr7w\nLeFUWETOaS/aE6fTI7bXyo3VqgmCdnhyY8AYMT5J+4iAIyswA8I3rpEHw7EsQpW0\nYdmYDUIBLB+olRjCxtHMBYiosyFd9vOdbj/YGxIkRAOXnm+OUM4PD3/NT1SKtz4y\nNp8wXywf7+rcYIu677SAAb+dWTm+hlL0ovLFe/CoTHtKRJVPO9B/6rNLQ/tyIB/0\nKsL5GVqZs4XaUG7/m7lA45Sc6Rhes/cvi75GyytUga5V6L3N1HoG64M22FWwvmkN\n1C/InjixL74niBm+Wc4WEmv6kkKJXLOHgkx5elnad9sBrdiotQpU8CGLTSB+IwPN\npwvSPNPBv0p3IiAyUruN3Chfp1FNH2DESbZYe6zpzAfxFkDR3mnxTMEyu1CWha6N\nisRKzubfwR1GjbWQ7PIbJKJrA1iPS5r+6Gb3BGaPLVJfM/0k8EM=\n=eg8N\n-----END PGP SIGNATURE-----", "payload": "tree 1be473700b3db52b74c48fbb059bf38d11fd4ffd\nparent 741a0ec8429424e10689a1da24820bc4c84f1bcc\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1681466997 +0200\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1681466997 +0200\n\nadd line numbers to error messages\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f364ac3821a58411407f2fd1547ae823f8f0143", "html_url": "https://github.com/rust-lang/rust/commit/0f364ac3821a58411407f2fd1547ae823f8f0143", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f364ac3821a58411407f2fd1547ae823f8f0143/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "741a0ec8429424e10689a1da24820bc4c84f1bcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/741a0ec8429424e10689a1da24820bc4c84f1bcc", "html_url": "https://github.com/rust-lang/rust/commit/741a0ec8429424e10689a1da24820bc4c84f1bcc"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "91a23776de7214ff6bd3608f0a0e775b3d9917a1", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0f364ac3821a58411407f2fd1547ae823f8f0143/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f364ac3821a58411407f2fd1547ae823f8f0143/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=0f364ac3821a58411407f2fd1547ae823f8f0143", "patch": "@@ -35,7 +35,7 @@ impl EarlyProps {\n \n     pub fn from_reader<R: Read>(config: &Config, testfile: &Path, rdr: R) -> Self {\n         let mut props = EarlyProps::default();\n-        iter_header(testfile, rdr, &mut |_, ln| {\n+        iter_header(testfile, rdr, &mut |_, ln, _| {\n             config.push_name_value_directive(ln, directives::AUX_BUILD, &mut props.aux, |r| {\n                 r.trim().to_string()\n             });\n@@ -283,7 +283,7 @@ impl TestProps {\n         if !testfile.is_dir() {\n             let file = File::open(testfile).unwrap();\n \n-            iter_header(testfile, file, &mut |revision, ln| {\n+            iter_header(testfile, file, &mut |revision, ln, _| {\n                 if revision.is_some() && revision != cfg {\n                     return;\n                 }\n@@ -577,7 +577,7 @@ pub fn line_directive<'line>(\n     }\n }\n \n-fn iter_header<R: Read>(testfile: &Path, rdr: R, it: &mut dyn FnMut(Option<&str>, &str)) {\n+fn iter_header<R: Read>(testfile: &Path, rdr: R, it: &mut dyn FnMut(Option<&str>, &str, usize)) {\n     if testfile.is_dir() {\n         return;\n     }\n@@ -586,8 +586,10 @@ fn iter_header<R: Read>(testfile: &Path, rdr: R, it: &mut dyn FnMut(Option<&str>\n \n     let mut rdr = BufReader::new(rdr);\n     let mut ln = String::new();\n+    let mut line_number = 0;\n \n     loop {\n+        line_number += 1;\n         ln.clear();\n         if rdr.read_line(&mut ln).unwrap() == 0 {\n             break;\n@@ -600,7 +602,7 @@ fn iter_header<R: Read>(testfile: &Path, rdr: R, it: &mut dyn FnMut(Option<&str>\n         if ln.starts_with(\"fn\") || ln.starts_with(\"mod\") {\n             return;\n         } else if let Some((lncfg, ln)) = line_directive(comment, ln) {\n-            it(lncfg, ln);\n+            it(lncfg, ln, line_number);\n         }\n     }\n }\n@@ -859,7 +861,7 @@ pub fn make_test_description<R: Read>(\n \n     let needs_cache = needs::CachedNeedsConditions::load(config);\n \n-    iter_header(path, src, &mut |revision, ln| {\n+    iter_header(path, src, &mut |revision, ln, line_number| {\n         if revision.is_some() && revision != cfg {\n             return;\n         }\n@@ -875,7 +877,7 @@ pub fn make_test_description<R: Read>(\n                         ignore_message = Some(&*Box::leak(Box::<str>::from(reason)));\n                     }\n                     IgnoreDecision::Error { message } => {\n-                        eprintln!(\"error: {}: {message}\", path.display());\n+                        eprintln!(\"error: {}:{line_number}: {message}\", path.display());\n                         *poisoned = true;\n                         return;\n                     }"}]}