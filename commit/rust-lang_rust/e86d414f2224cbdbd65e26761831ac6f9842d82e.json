{"sha": "e86d414f2224cbdbd65e26761831ac6f9842d82e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NmQ0MTRmMjIyNGNiZGJkNjVlMjY3NjE4MzFhYzZmOTg0MmQ4MmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-14T04:29:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-14T04:29:20Z"}, "message": "auto merge of #8497 : nikomatsakis/rust/improvements-to-object-coercion, r=pcwalton\n\nWhile looking over the code for object coercion, I realized that it wasn't quite handling freezing and reborrowing correctly. Tweak the code, adding tests for the relevant cases. \r\n\r\nr? @pcwalton", "tree": {"sha": "e954e7a00c46c659df6c7e8885bc6139a6fced2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e954e7a00c46c659df6c7e8885bc6139a6fced2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e86d414f2224cbdbd65e26761831ac6f9842d82e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e86d414f2224cbdbd65e26761831ac6f9842d82e", "html_url": "https://github.com/rust-lang/rust/commit/e86d414f2224cbdbd65e26761831ac6f9842d82e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e86d414f2224cbdbd65e26761831ac6f9842d82e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7585b34d3171eb79057dbf8196312b08a5bc328b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7585b34d3171eb79057dbf8196312b08a5bc328b", "html_url": "https://github.com/rust-lang/rust/commit/7585b34d3171eb79057dbf8196312b08a5bc328b"}, {"sha": "bf2d3c840bc9584055778ed6b08ddf6e32a0f45a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf2d3c840bc9584055778ed6b08ddf6e32a0f45a", "html_url": "https://github.com/rust-lang/rust/commit/bf2d3c840bc9584055778ed6b08ddf6e32a0f45a"}], "stats": {"total": 139, "additions": 126, "deletions": 13}, "files": [{"sha": "21cabb5a74539224bcaf63f0074892d06da32bb5", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e86d414f2224cbdbd65e26761831ac6f9842d82e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86d414f2224cbdbd65e26761831ac6f9842d82e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=e86d414f2224cbdbd65e26761831ac6f9842d82e", "patch": "@@ -391,7 +391,7 @@ fn visit_expr(expr: @ast::expr, (rcx, v): (@mut Rcx, rvt)) {\n             let target_ty = rcx.resolve_node_type(expr.id);\n             match ty::get(target_ty).sty {\n                 ty::ty_trait(_, _, ty::RegionTraitStore(trait_region), _, _) => {\n-                    let source_ty = rcx.fcx.expr_ty(source);\n+                    let source_ty = rcx.resolve_expr_type_adjusted(source);\n                     constrain_regions_in_type(\n                         rcx,\n                         trait_region,\n@@ -1153,17 +1153,20 @@ pub mod guarantor {\n         match ty::get(ty).sty {\n             ty::ty_rptr(r, _) |\n             ty::ty_evec(_, ty::vstore_slice(r)) |\n+            ty::ty_trait(_, _, ty::RegionTraitStore(r), _, _) |\n             ty::ty_estr(ty::vstore_slice(r)) => {\n                 BorrowedPointer(r)\n             }\n             ty::ty_uniq(*) |\n             ty::ty_estr(ty::vstore_uniq) |\n+            ty::ty_trait(_, _, ty::UniqTraitStore, _, _) |\n             ty::ty_evec(_, ty::vstore_uniq) => {\n                 OwnedPointer\n             }\n             ty::ty_box(*) |\n             ty::ty_ptr(*) |\n             ty::ty_evec(_, ty::vstore_box) |\n+            ty::ty_trait(_, _, ty::BoxTraitStore, _, _) |\n             ty::ty_estr(ty::vstore_box) => {\n                 OtherPointer\n             }"}, {"sha": "7736dbbb99d98058251e2bd921e904f4b8188e05", "filename": "src/librustc/middle/typeck/infer/coercion.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e86d414f2224cbdbd65e26761831ac6f9842d82e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86d414f2224cbdbd65e26761831ac6f9842d82e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs?ref=e86d414f2224cbdbd65e26761831ac6f9842d82e", "patch": "@@ -121,9 +121,9 @@ impl Coerce {\n                 };\n             }\n \n-            ty::ty_trait(_, _, ty::RegionTraitStore(*), _, _) => {\n+            ty::ty_trait(_, _, ty::RegionTraitStore(*), m, _) => {\n                 return do self.unpack_actual_value(a) |sty_a| {\n-                    self.coerce_borrowed_object(a, sty_a, b)\n+                    self.coerce_borrowed_object(a, sty_a, b, m)\n                 };\n             }\n \n@@ -274,34 +274,30 @@ impl Coerce {\n     fn coerce_borrowed_object(&self,\n                               a: ty::t,\n                               sty_a: &ty::sty,\n-                              b: ty::t) -> CoerceResult\n+                              b: ty::t,\n+                              b_mutbl: ast::mutability) -> CoerceResult\n     {\n         debug!(\"coerce_borrowed_object(a=%s, sty_a=%?, b=%s)\",\n                a.inf_str(self.infcx), sty_a,\n                b.inf_str(self.infcx));\n \n         let tcx = self.infcx.tcx;\n         let r_a = self.infcx.next_region_var(Coercion(self.trace));\n-        let trt_mut;\n \n         let a_borrowed = match *sty_a {\n-            ty::ty_trait(_, _, ty::RegionTraitStore(_), _, _) => {\n-                return self.subtype(a, b);\n-            }\n-            ty::ty_trait(did, ref substs, _, m, b) => {\n-                trt_mut = m;\n+            ty::ty_trait(did, ref substs, _, _, b) => {\n                 ty::mk_trait(tcx, did, substs.clone(),\n-                             ty::RegionTraitStore(r_a), m, b)\n+                             ty::RegionTraitStore(r_a), b_mutbl, b)\n             }\n             _ => {\n                 return self.subtype(a, b);\n             }\n         };\n \n-        if_ok!(self.tys(a_borrowed, b));\n+        if_ok!(self.subtype(a_borrowed, b));\n         Ok(Some(@AutoDerefRef(AutoDerefRef {\n             autoderefs: 0,\n-            autoref: Some(AutoBorrowObj(r_a, trt_mut))\n+            autoref: Some(AutoBorrowObj(r_a, b_mutbl))\n         })))\n     }\n "}, {"sha": "c70d752ef303339bc735bcd700bfa50facc76fbf", "filename": "src/test/run-fail/borrowck-wg-fail-object-arg.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e86d414f2224cbdbd65e26761831ac6f9842d82e/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-object-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86d414f2224cbdbd65e26761831ac6f9842d82e/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-object-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-object-arg.rs?ref=e86d414f2224cbdbd65e26761831ac6f9842d82e", "patch": "@@ -0,0 +1,22 @@\n+// error-pattern:borrowed\n+\n+trait Foo {\n+    fn foo(&self, @mut int);\n+}\n+\n+impl Foo for int {\n+    fn foo(&self, x: @mut int) {\n+        *x += *self;\n+    }\n+}\n+\n+fn it_takes_two(f: &Foo, g: &mut Foo) {\n+}\n+\n+fn main() {\n+    let x = @mut 3_i;\n+    let y = x as @mut Foo;\n+    let z = y;\n+\n+    it_takes_two(y, z);\n+}"}, {"sha": "4dda5ca556eda9970d90d1a55456282b0f4e0d2a", "filename": "src/test/run-pass/objects-coerce-freeze-borrored.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e86d414f2224cbdbd65e26761831ac6f9842d82e/src%2Ftest%2Frun-pass%2Fobjects-coerce-freeze-borrored.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86d414f2224cbdbd65e26761831ac6f9842d82e/src%2Ftest%2Frun-pass%2Fobjects-coerce-freeze-borrored.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-coerce-freeze-borrored.rs?ref=e86d414f2224cbdbd65e26761831ac6f9842d82e", "patch": "@@ -0,0 +1,48 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we can coerce an `@Object` to an `&Object`\n+\n+trait Foo {\n+    fn foo(&self) -> uint;\n+    fn bar(&mut self) -> uint;\n+}\n+\n+impl Foo for uint {\n+    fn foo(&self) -> uint {\n+        *self\n+    }\n+\n+    fn bar(&mut self) -> uint {\n+        *self += 1;\n+        *self\n+    }\n+}\n+\n+fn do_it_mut(obj: &mut Foo) {\n+    let x = obj.bar();\n+    let y = obj.foo();\n+    assert_eq!(x, y);\n+\n+    do_it_imm(obj, y);\n+}\n+\n+fn do_it_imm(obj: &Foo, v: uint) {\n+    let y = obj.foo();\n+    assert_eq!(v, y);\n+}\n+\n+fn main() {\n+    let mut x = 22_u;\n+    let obj = &mut x as &mut Foo;\n+    do_it_mut(obj);\n+    do_it_imm(obj, 23u);\n+    do_it_mut(obj);\n+}"}, {"sha": "fe4eb2ea48e49b2304f734b0b1a73e40a380cf61", "filename": "src/test/run-pass/objects-coerce-from-managed-to-borrowed.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e86d414f2224cbdbd65e26761831ac6f9842d82e/src%2Ftest%2Frun-pass%2Fobjects-coerce-from-managed-to-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86d414f2224cbdbd65e26761831ac6f9842d82e/src%2Ftest%2Frun-pass%2Fobjects-coerce-from-managed-to-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-coerce-from-managed-to-borrowed.rs?ref=e86d414f2224cbdbd65e26761831ac6f9842d82e", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we can coerce an `@Object` to an `&Object`\n+\n+trait Foo {\n+    fn foo(&self) -> uint;\n+    fn bar(&mut self) -> uint;\n+}\n+\n+impl Foo for uint {\n+    fn foo(&self) -> uint {\n+        *self\n+    }\n+\n+    fn bar(&mut self) -> uint {\n+        *self += 1;\n+        *self\n+    }\n+}\n+\n+fn do_it_mut(obj: &mut Foo) {\n+    let x = obj.bar();\n+    let y = obj.foo();\n+    assert_eq!(x, y);\n+}\n+\n+fn do_it_imm(obj: &Foo, v: uint) {\n+    let y = obj.foo();\n+    assert_eq!(v, y);\n+}\n+\n+fn main() {\n+    let x = @mut 22u as @mut Foo;\n+    do_it_mut(x);\n+    do_it_imm(x, 23u);\n+}"}]}