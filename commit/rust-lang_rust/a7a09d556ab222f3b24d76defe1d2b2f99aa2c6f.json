{"sha": "a7a09d556ab222f3b24d76defe1d2b2f99aa2c6f", "node_id": "C_kwDOAAsO6NoAKGE3YTA5ZDU1NmFiMjIyZjNiMjRkNzZkZWZlMWQyYjJmOTlhYTJjNmY", "commit": {"author": {"name": "yvt", "email": "i@yvt.jp", "date": "2022-04-06T13:07:02Z"}, "committer": {"name": "yvt", "email": "i@yvt.jp", "date": "2022-04-06T13:11:52Z"}, "message": "Wrap numbers with `black_box` in-line, remove `one`", "tree": {"sha": "3ebf9d6722359240bc7cab4accd2662f950424c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ebf9d6722359240bc7cab4accd2662f950424c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7a09d556ab222f3b24d76defe1d2b2f99aa2c6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7a09d556ab222f3b24d76defe1d2b2f99aa2c6f", "html_url": "https://github.com/rust-lang/rust/commit/a7a09d556ab222f3b24d76defe1d2b2f99aa2c6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7a09d556ab222f3b24d76defe1d2b2f99aa2c6f/comments", "author": {"login": "yvt", "id": 5253988, "node_id": "MDQ6VXNlcjUyNTM5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/5253988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yvt", "html_url": "https://github.com/yvt", "followers_url": "https://api.github.com/users/yvt/followers", "following_url": "https://api.github.com/users/yvt/following{/other_user}", "gists_url": "https://api.github.com/users/yvt/gists{/gist_id}", "starred_url": "https://api.github.com/users/yvt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yvt/subscriptions", "organizations_url": "https://api.github.com/users/yvt/orgs", "repos_url": "https://api.github.com/users/yvt/repos", "events_url": "https://api.github.com/users/yvt/events{/privacy}", "received_events_url": "https://api.github.com/users/yvt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yvt", "id": 5253988, "node_id": "MDQ6VXNlcjUyNTM5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/5253988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yvt", "html_url": "https://github.com/yvt", "followers_url": "https://api.github.com/users/yvt/followers", "following_url": "https://api.github.com/users/yvt/following{/other_user}", "gists_url": "https://api.github.com/users/yvt/gists{/gist_id}", "starred_url": "https://api.github.com/users/yvt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yvt/subscriptions", "organizations_url": "https://api.github.com/users/yvt/orgs", "repos_url": "https://api.github.com/users/yvt/repos", "events_url": "https://api.github.com/users/yvt/events{/privacy}", "received_events_url": "https://api.github.com/users/yvt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5061e3ad163a75e81ed7b69e2113b5db135bc51a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5061e3ad163a75e81ed7b69e2113b5db135bc51a", "html_url": "https://github.com/rust-lang/rust/commit/5061e3ad163a75e81ed7b69e2113b5db135bc51a"}], "stats": {"total": 353, "additions": 174, "deletions": 179}, "files": [{"sha": "2b90e4ae8d82b9079b571be7d305d8d6f3f9967c", "filename": "tests/run/int.rs", "status": "modified", "additions": 174, "deletions": 179, "changes": 353, "blob_url": "https://github.com/rust-lang/rust/blob/a7a09d556ab222f3b24d76defe1d2b2f99aa2c6f/tests%2Frun%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7a09d556ab222f3b24d76defe1d2b2f99aa2c6f/tests%2Frun%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun%2Fint.rs?ref=a7a09d556ab222f3b24d76defe1d2b2f99aa2c6f", "patch": "@@ -3,7 +3,7 @@\n // Run-time:\n //   status: 0\n \n-#![feature(bench_black_box, core_intrinsics, start)]\n+#![feature(bench_black_box, const_black_box, core_intrinsics, start)]\n \n #![no_std]\n \n@@ -18,39 +18,34 @@ fn panic_handler(_: &core::panic::PanicInfo) -> ! {\n \n #[start]\n fn main(_argc: isize, _argv: *const *const u8) -> isize {\n-    let one: isize = core::hint::black_box(1);\n+    use core::hint::black_box;\n \n     macro_rules! check {\n         ($ty:ty, $expr:expr) => {\n             {\n-                const EXPECTED: $ty = {\n-                    #[allow(non_upper_case_globals)]\n-                    #[allow(dead_code)]\n-                    const one: isize = 1;\n-                    $expr\n-                };\n+                const EXPECTED: $ty = $expr;\n                 assert_eq!($expr, EXPECTED);\n             }\n         };\n     }\n \n-    check!(u32, (2220326408_u32 + one as u32) >> (32 - 6));\n+    check!(u32, (2220326408_u32 + black_box(1)) >> (32 - 6));\n \n     /// Generate `check!` tests for integer types at least as wide as 128 bits.\n     macro_rules! check_ops128 {\n         () => {\n             check_ops64!();\n \n             // Shifts.\n-            check!(T, VAL1 << (one + 63) as T);\n-            check!(T, VAL1 << (one + 80) as T);\n-            check!(T, VAL3 << (one + 62) as T);\n-            check!(T, VAL3 << (one + 63) as T);\n-\n-            check!(T, VAL1 >> (one + 63) as T);\n-            check!(T, VAL2 >> (one + 63) as T);\n-            check!(T, VAL3 >> (one + 63) as T);\n-            check!(T, VAL3 >> (one + 80) as T);\n+            check!(T, VAL1 << black_box(64));\n+            check!(T, VAL1 << black_box(81));\n+            check!(T, VAL3 << black_box(63));\n+            check!(T, VAL3 << black_box(64));\n+\n+            check!(T, VAL1 >> black_box(64));\n+            check!(T, VAL2 >> black_box(64));\n+            check!(T, VAL3 >> black_box(64));\n+            check!(T, VAL3 >> black_box(81));\n         };\n     }\n \n@@ -60,225 +55,225 @@ fn main(_argc: isize, _argv: *const *const u8) -> isize {\n             check_ops32!();\n \n             // Shifts.\n-            check!(T, VAL2 << (one + 32) as T);\n-            check!(T, VAL2 << (one + 48) as T);\n-            check!(T, VAL2 << (one + 60) as T);\n-            check!(T, VAL2 << (one + 62) as T);\n-\n-            check!(T, VAL3 << (one + 32) as T);\n-            check!(T, VAL3 << (one + 48) as T);\n-            check!(T, VAL3 << (one + 60) as T);\n-\n-            check!(T, VAL1 >> (one + 32) as T);\n-            check!(T, VAL1 >> (one + 48) as T);\n-            check!(T, VAL1 >> (one + 60) as T);\n-            check!(T, VAL1 >> (one + 62) as T);\n-\n-            check!(T, VAL2 >> (one + 32) as T);\n-            check!(T, VAL2 >> (one + 48) as T);\n-            check!(T, VAL2 >> (one + 60) as T);\n-            check!(T, VAL2 >> (one + 62) as T);\n-\n-            check!(T, VAL3 >> (one + 32) as T);\n-            check!(T, VAL3 >> (one + 48) as T);\n-            check!(T, VAL3 >> (one + 60) as T);\n-            check!(T, VAL3 >> (one + 62) as T);\n+            check!(T, VAL2 << black_box(33));\n+            check!(T, VAL2 << black_box(49));\n+            check!(T, VAL2 << black_box(61));\n+            check!(T, VAL2 << black_box(63));\n+\n+            check!(T, VAL3 << black_box(33));\n+            check!(T, VAL3 << black_box(49));\n+            check!(T, VAL3 << black_box(61));\n+\n+            check!(T, VAL1 >> black_box(33));\n+            check!(T, VAL1 >> black_box(49));\n+            check!(T, VAL1 >> black_box(61));\n+            check!(T, VAL1 >> black_box(63));\n+\n+            check!(T, VAL2 >> black_box(33));\n+            check!(T, VAL2 >> black_box(49));\n+            check!(T, VAL2 >> black_box(61));\n+            check!(T, VAL2 >> black_box(63));\n+\n+            check!(T, VAL3 >> black_box(33));\n+            check!(T, VAL3 >> black_box(49));\n+            check!(T, VAL3 >> black_box(61));\n+            check!(T, VAL3 >> black_box(63));\n         };\n     }\n \n     /// Generate `check!` tests for integer types at least as wide as 32 bits.\n     macro_rules! check_ops32 {\n         () => {\n             // Shifts.\n-            check!(T, VAL2 << one as T);\n-            check!(T, VAL2 << (one as T - 1));\n-\n-            check!(T, VAL3 << one as T);\n-            check!(T, VAL3 << (one as T - 1));\n-\n-            check!(T, VAL1.wrapping_shl(one as u32 - 1));\n-            check!(T, VAL1.wrapping_shl(one as u32));\n-            check!(T, VAL1.wrapping_shl((one + 32) as u32));\n-            check!(T, VAL1.wrapping_shl((one + 48) as u32));\n-            check!(T, VAL1.wrapping_shl((one + 60) as u32));\n-            check!(T, VAL1.wrapping_shl((one + 62) as u32));\n-            check!(T, VAL1.wrapping_shl((one + 63) as u32));\n-            check!(T, VAL1.wrapping_shl((one + 80) as u32));\n-\n-            check!(Option<T>, VAL1.checked_shl(one as u32 - 1));\n-            check!(Option<T>, VAL1.checked_shl(one as u32));\n-            check!(Option<T>, VAL1.checked_shl((one + 32) as u32));\n-            check!(Option<T>, VAL1.checked_shl((one + 48) as u32));\n-            check!(Option<T>, VAL1.checked_shl((one + 60) as u32));\n-            check!(Option<T>, VAL1.checked_shl((one + 62) as u32));\n-            check!(Option<T>, VAL1.checked_shl((one + 63) as u32));\n-            check!(Option<T>, VAL1.checked_shl((one + 80) as u32));\n-\n-            check!(T, VAL1 >> (one as T - 1));\n-            check!(T, VAL1 >> one as T);\n-\n-            check!(T, VAL2 >> one as T);\n-            check!(T, VAL2 >> (one as T - 1));\n-\n-            check!(T, VAL3 >> (one as T - 1));\n-            check!(T, VAL3 >> one as T);\n-\n-            check!(T, VAL1.wrapping_shr(one as u32 - 1));\n-            check!(T, VAL1.wrapping_shr(one as u32));\n-            check!(T, VAL1.wrapping_shr((one + 32) as u32));\n-            check!(T, VAL1.wrapping_shr((one + 48) as u32));\n-            check!(T, VAL1.wrapping_shr((one + 60) as u32));\n-            check!(T, VAL1.wrapping_shr((one + 62) as u32));\n-            check!(T, VAL1.wrapping_shr((one + 63) as u32));\n-            check!(T, VAL1.wrapping_shr((one + 80) as u32));\n-\n-            check!(Option<T>, VAL1.checked_shr(one as u32 - 1));\n-            check!(Option<T>, VAL1.checked_shr(one as u32));\n-            check!(Option<T>, VAL1.checked_shr((one + 32) as u32));\n-            check!(Option<T>, VAL1.checked_shr((one + 48) as u32));\n-            check!(Option<T>, VAL1.checked_shr((one + 60) as u32));\n-            check!(Option<T>, VAL1.checked_shr((one + 62) as u32));\n-            check!(Option<T>, VAL1.checked_shr((one + 63) as u32));\n-            check!(Option<T>, VAL1.checked_shr((one + 80) as u32));\n+            check!(T, VAL2 << black_box(1));\n+            check!(T, VAL2 << black_box(0));\n+\n+            check!(T, VAL3 << black_box(1));\n+            check!(T, VAL3 << black_box(0));\n+\n+            check!(T, VAL1.wrapping_shl(black_box(0)));\n+            check!(T, VAL1.wrapping_shl(black_box(1)));\n+            check!(T, VAL1.wrapping_shl(black_box(33)));\n+            check!(T, VAL1.wrapping_shl(black_box(49)));\n+            check!(T, VAL1.wrapping_shl(black_box(61)));\n+            check!(T, VAL1.wrapping_shl(black_box(63)));\n+            check!(T, VAL1.wrapping_shl(black_box(64)));\n+            check!(T, VAL1.wrapping_shl(black_box(81)));\n+\n+            check!(Option<T>, VAL1.checked_shl(black_box(0)));\n+            check!(Option<T>, VAL1.checked_shl(black_box(1)));\n+            check!(Option<T>, VAL1.checked_shl(black_box(33)));\n+            check!(Option<T>, VAL1.checked_shl(black_box(49)));\n+            check!(Option<T>, VAL1.checked_shl(black_box(61)));\n+            check!(Option<T>, VAL1.checked_shl(black_box(63)));\n+            check!(Option<T>, VAL1.checked_shl(black_box(64)));\n+            check!(Option<T>, VAL1.checked_shl(black_box(81)));\n+\n+            check!(T, VAL1 >> black_box(0));\n+            check!(T, VAL1 >> black_box(1));\n+\n+            check!(T, VAL2 >> black_box(1));\n+            check!(T, VAL2 >> black_box(0));\n+\n+            check!(T, VAL3 >> black_box(0));\n+            check!(T, VAL3 >> black_box(1));\n+\n+            check!(T, VAL1.wrapping_shr(black_box(0)));\n+            check!(T, VAL1.wrapping_shr(black_box(1)));\n+            check!(T, VAL1.wrapping_shr(black_box(33)));\n+            check!(T, VAL1.wrapping_shr(black_box(49)));\n+            check!(T, VAL1.wrapping_shr(black_box(61)));\n+            check!(T, VAL1.wrapping_shr(black_box(63)));\n+            check!(T, VAL1.wrapping_shr(black_box(64)));\n+            check!(T, VAL1.wrapping_shr(black_box(81)));\n+\n+            check!(Option<T>, VAL1.checked_shr(black_box(0)));\n+            check!(Option<T>, VAL1.checked_shr(black_box(1)));\n+            check!(Option<T>, VAL1.checked_shr(black_box(33)));\n+            check!(Option<T>, VAL1.checked_shr(black_box(49)));\n+            check!(Option<T>, VAL1.checked_shr(black_box(61)));\n+            check!(Option<T>, VAL1.checked_shr(black_box(63)));\n+            check!(Option<T>, VAL1.checked_shr(black_box(64)));\n+            check!(Option<T>, VAL1.checked_shr(black_box(81)));\n \n             // Casts\n-            check!(u64, (VAL1 >> one as T) as u64);\n+            check!(u64, (VAL1 >> black_box(1)) as u64);\n \n             // Addition.\n-            check!(T, VAL1 + one as T);\n-            check!(T, VAL2 + one as T);\n-            check!(T, VAL2 + (VAL2 + one as T) as T);\n-            check!(T, VAL3 + one as T);\n-\n-            check!(Option<T>, VAL1.checked_add(one as T));\n-            check!(Option<T>, VAL2.checked_add(one as T));\n-            check!(Option<T>, VAL2.checked_add((VAL2 + one as T) as T));\n+            check!(T, VAL1 + black_box(1));\n+            check!(T, VAL2 + black_box(1));\n+            check!(T, VAL2 + (VAL2 + black_box(1)));\n+            check!(T, VAL3 + black_box(1));\n+\n+            check!(Option<T>, VAL1.checked_add(black_box(1)));\n+            check!(Option<T>, VAL2.checked_add(black_box(1)));\n+            check!(Option<T>, VAL2.checked_add(VAL2 + black_box(1)));\n             check!(Option<T>, VAL3.checked_add(T::MAX));\n             check!(Option<T>, VAL3.checked_add(T::MIN));\n \n-            check!(T, VAL1.wrapping_add(one as T));\n-            check!(T, VAL2.wrapping_add(one as T));\n-            check!(T, VAL2.wrapping_add((VAL2 + one as T) as T));\n+            check!(T, VAL1.wrapping_add(black_box(1)));\n+            check!(T, VAL2.wrapping_add(black_box(1)));\n+            check!(T, VAL2.wrapping_add(VAL2 + black_box(1)));\n             check!(T, VAL3.wrapping_add(T::MAX));\n             check!(T, VAL3.wrapping_add(T::MIN));\n \n-            check!((T, bool), VAL1.overflowing_add(one as T));\n-            check!((T, bool), VAL2.overflowing_add(one as T));\n-            check!((T, bool), VAL2.overflowing_add((VAL2 + one as T) as T));\n+            check!((T, bool), VAL1.overflowing_add(black_box(1)));\n+            check!((T, bool), VAL2.overflowing_add(black_box(1)));\n+            check!((T, bool), VAL2.overflowing_add(VAL2 + black_box(1)));\n             check!((T, bool), VAL3.overflowing_add(T::MAX));\n             check!((T, bool), VAL3.overflowing_add(T::MIN));\n \n-            check!(T, VAL1.saturating_add(one as T));\n-            check!(T, VAL2.saturating_add(one as T));\n-            check!(T, VAL2.saturating_add((VAL2 + one as T) as T));\n+            check!(T, VAL1.saturating_add(black_box(1)));\n+            check!(T, VAL2.saturating_add(black_box(1)));\n+            check!(T, VAL2.saturating_add(VAL2 + black_box(1)));\n             check!(T, VAL3.saturating_add(T::MAX));\n             check!(T, VAL3.saturating_add(T::MIN));\n \n             // Subtraction\n-            check!(T, VAL1 - one as T);\n-            check!(T, VAL2 - one as T);\n-            check!(T, VAL3 - one as T);\n+            check!(T, VAL1 - black_box(1));\n+            check!(T, VAL2 - black_box(1));\n+            check!(T, VAL3 - black_box(1));\n \n-            check!(Option<T>, VAL1.checked_sub(one as T));\n-            check!(Option<T>, VAL2.checked_sub(one as T));\n-            check!(Option<T>, VAL2.checked_sub((VAL2 + one as T) as T));\n+            check!(Option<T>, VAL1.checked_sub(black_box(1)));\n+            check!(Option<T>, VAL2.checked_sub(black_box(1)));\n+            check!(Option<T>, VAL2.checked_sub(VAL2 + black_box(1)));\n             check!(Option<T>, VAL3.checked_sub(T::MAX));\n             check!(Option<T>, VAL3.checked_sub(T::MIN));\n \n-            check!(T, VAL1.wrapping_sub(one as T));\n-            check!(T, VAL2.wrapping_sub(one as T));\n-            check!(T, VAL2.wrapping_sub((VAL2 + one as T) as T));\n+            check!(T, VAL1.wrapping_sub(black_box(1)));\n+            check!(T, VAL2.wrapping_sub(black_box(1)));\n+            check!(T, VAL2.wrapping_sub(VAL2 + black_box(1)));\n             check!(T, VAL3.wrapping_sub(T::MAX));\n             check!(T, VAL3.wrapping_sub(T::MIN));\n \n-            check!((T, bool), VAL1.overflowing_sub(one as T));\n-            check!((T, bool), VAL2.overflowing_sub(one as T));\n-            check!((T, bool), VAL2.overflowing_sub((VAL2 + one as T) as T));\n+            check!((T, bool), VAL1.overflowing_sub(black_box(1)));\n+            check!((T, bool), VAL2.overflowing_sub(black_box(1)));\n+            check!((T, bool), VAL2.overflowing_sub(VAL2 + black_box(1)));\n             check!((T, bool), VAL3.overflowing_sub(T::MAX));\n             check!((T, bool), VAL3.overflowing_sub(T::MIN));\n \n-            check!(T, VAL1.saturating_sub(one as T));\n-            check!(T, VAL2.saturating_sub(one as T));\n-            check!(T, VAL2.saturating_sub((VAL2 + one as T) as T));\n+            check!(T, VAL1.saturating_sub(black_box(1)));\n+            check!(T, VAL2.saturating_sub(black_box(1)));\n+            check!(T, VAL2.saturating_sub(VAL2 + black_box(1)));\n             check!(T, VAL3.saturating_sub(T::MAX));\n             check!(T, VAL3.saturating_sub(T::MIN));\n \n             // Multiplication\n-            check!(T, VAL1 * (one + 1) as T);\n-            check!(T, VAL1 * (one as T + VAL2));\n-            check!(T, VAL2 * (one + 1) as T);\n-            check!(T, VAL2 * (one as T + VAL2));\n-            check!(T, VAL3 * one as T);\n-            check!(T, VAL4 * (one + 1) as T);\n-            check!(T, VAL5 * (one + 1) as T);\n-\n-            check!(Option<T>, VAL1.checked_mul((one + 1) as T));\n-            check!(Option<T>, VAL1.checked_mul((one as T + VAL2)));\n+            check!(T, VAL1 * black_box(2));\n+            check!(T, VAL1 * (black_box(1) + VAL2));\n+            check!(T, VAL2 * black_box(2));\n+            check!(T, VAL2 * (black_box(1) + VAL2));\n+            check!(T, VAL3 * black_box(1));\n+            check!(T, VAL4 * black_box(2));\n+            check!(T, VAL5 * black_box(2));\n+\n+            check!(Option<T>, VAL1.checked_mul(black_box(2)));\n+            check!(Option<T>, VAL1.checked_mul(black_box(1) + VAL2));\n             check!(Option<T>, VAL3.checked_mul(VAL3));\n-            check!(Option<T>, VAL4.checked_mul((one + 1) as T));\n-            check!(Option<T>, VAL5.checked_mul((one + 1) as T));\n+            check!(Option<T>, VAL4.checked_mul(black_box(2)));\n+            check!(Option<T>, VAL5.checked_mul(black_box(2)));\n \n-            check!(T, VAL1.wrapping_mul((one + 1) as T));\n-            check!(T, VAL1.wrapping_mul((one as T + VAL2)));\n+            check!(T, VAL1.wrapping_mul(black_box(2)));\n+            check!(T, VAL1.wrapping_mul((black_box(1) + VAL2)));\n             check!(T, VAL3.wrapping_mul(VAL3));\n-            check!(T, VAL4.wrapping_mul((one + 1) as T));\n-            check!(T, VAL5.wrapping_mul((one + 1) as T));\n+            check!(T, VAL4.wrapping_mul(black_box(2)));\n+            check!(T, VAL5.wrapping_mul(black_box(2)));\n \n-            check!((T, bool), VAL1.overflowing_mul((one + 1) as T));\n-            check!((T, bool), VAL1.overflowing_mul((one as T + VAL2)));\n+            check!((T, bool), VAL1.overflowing_mul(black_box(2)));\n+            check!((T, bool), VAL1.overflowing_mul(black_box(1) + VAL2));\n             check!((T, bool), VAL3.overflowing_mul(VAL3));\n-            check!((T, bool), VAL4.overflowing_mul((one + 1) as T));\n-            check!((T, bool), VAL5.overflowing_mul((one + 1) as T));\n+            check!((T, bool), VAL4.overflowing_mul(black_box(2)));\n+            check!((T, bool), VAL5.overflowing_mul(black_box(2)));\n \n-            check!(T, VAL1.saturating_mul((one + 1) as T));\n-            check!(T, VAL1.saturating_mul((one as T + VAL2)));\n+            check!(T, VAL1.saturating_mul(black_box(2)));\n+            check!(T, VAL1.saturating_mul(black_box(1) + VAL2));\n             check!(T, VAL3.saturating_mul(VAL3));\n-            check!(T, VAL4.saturating_mul((one + 1) as T));\n-            check!(T, VAL5.saturating_mul((one + 1) as T));\n+            check!(T, VAL4.saturating_mul(black_box(2)));\n+            check!(T, VAL5.saturating_mul(black_box(2)));\n \n             // Division.\n-            check!(T, VAL1 / (one + 1) as T);\n-            check!(T, VAL1 / (one + 2) as T);\n+            check!(T, VAL1 / black_box(2));\n+            check!(T, VAL1 / black_box(3));\n \n-            check!(T, VAL2 / (one + 1) as T);\n-            check!(T, VAL2 / (one + 2) as T);\n+            check!(T, VAL2 / black_box(2));\n+            check!(T, VAL2 / black_box(3));\n \n-            check!(T, VAL3 / (one + 1) as T);\n-            check!(T, VAL3 / (one + 2) as T);\n-            check!(T, VAL3 / (one as T + VAL4));\n-            check!(T, VAL3 / (one as T + VAL2));\n+            check!(T, VAL3 / black_box(2));\n+            check!(T, VAL3 / black_box(3));\n+            check!(T, VAL3 / (black_box(1) + VAL4));\n+            check!(T, VAL3 / (black_box(1) + VAL2));\n \n-            check!(T, VAL4 / (one + 1) as T);\n-            check!(T, VAL4 / (one + 2) as T);\n+            check!(T, VAL4 / black_box(2));\n+            check!(T, VAL4 / black_box(3));\n \n-            check!(Option<T>, VAL1.checked_div((one + 1) as T));\n-            check!(Option<T>, VAL1.checked_div((one as T + VAL2)));\n+            check!(Option<T>, VAL1.checked_div(black_box(2)));\n+            check!(Option<T>, VAL1.checked_div(black_box(1) + VAL2));\n             check!(Option<T>, VAL3.checked_div(VAL3));\n-            check!(Option<T>, VAL4.checked_div((one + 1) as T));\n-            check!(Option<T>, VAL5.checked_div((one + 1) as T));\n-            check!(Option<T>, (T::MIN).checked_div((0 as T).wrapping_sub(one as T)));\n-            check!(Option<T>, VAL5.checked_div((one - 1) as T)); // var5 / 0\n+            check!(Option<T>, VAL4.checked_div(black_box(2)));\n+            check!(Option<T>, VAL5.checked_div(black_box(2)));\n+            check!(Option<T>, (T::MIN).checked_div(black_box(0 as T).wrapping_sub(1)));\n+            check!(Option<T>, VAL5.checked_div(black_box(0))); // var5 / 0\n \n-            check!(T, VAL1.wrapping_div((one + 1) as T));\n-            check!(T, VAL1.wrapping_div((one as T + VAL2)));\n+            check!(T, VAL1.wrapping_div(black_box(2)));\n+            check!(T, VAL1.wrapping_div(black_box(1) + VAL2));\n             check!(T, VAL3.wrapping_div(VAL3));\n-            check!(T, VAL4.wrapping_div((one + 1) as T));\n-            check!(T, VAL5.wrapping_div((one + 1) as T));\n-            check!(T, (T::MIN).wrapping_div((0 as T).wrapping_sub(one as T)));\n+            check!(T, VAL4.wrapping_div(black_box(2)));\n+            check!(T, VAL5.wrapping_div(black_box(2)));\n+            check!(T, (T::MIN).wrapping_div(black_box(0 as T).wrapping_sub(1)));\n \n-            check!((T, bool), VAL1.overflowing_div((one + 1) as T));\n-            check!((T, bool), VAL1.overflowing_div((one as T + VAL2)));\n+            check!((T, bool), VAL1.overflowing_div(black_box(2)));\n+            check!((T, bool), VAL1.overflowing_div(black_box(1) + VAL2));\n             check!((T, bool), VAL3.overflowing_div(VAL3));\n-            check!((T, bool), VAL4.overflowing_div((one + 1) as T));\n-            check!((T, bool), VAL5.overflowing_div((one + 1) as T));\n-            check!((T, bool), (T::MIN).overflowing_div((0 as T).wrapping_sub(one as T)));\n+            check!((T, bool), VAL4.overflowing_div(black_box(2)));\n+            check!((T, bool), VAL5.overflowing_div(black_box(2)));\n+            check!((T, bool), (T::MIN).overflowing_div(black_box(0 as T).wrapping_sub(1)));\n \n-            check!(T, VAL1.saturating_div((one + 1) as T));\n-            check!(T, VAL1.saturating_div((one as T + VAL2)));\n+            check!(T, VAL1.saturating_div(black_box(2)));\n+            check!(T, VAL1.saturating_div((black_box(1) + VAL2)));\n             check!(T, VAL3.saturating_div(VAL3));\n-            check!(T, VAL4.saturating_div((one + 1) as T));\n-            check!(T, VAL5.saturating_div((one + 1) as T));\n-            check!(T, (T::MIN).saturating_div((0 as T).wrapping_sub(one as T)));\n+            check!(T, VAL4.saturating_div(black_box(2)));\n+            check!(T, VAL5.saturating_div(black_box(2)));\n+            check!(T, (T::MIN).saturating_div((0 as T).wrapping_sub(black_box(1))));\n         };\n     }\n "}]}