{"sha": "60c3bbd8447593b06fcab55ed9bd2f0f0af678fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwYzNiYmQ4NDQ3NTkzYjA2ZmNhYjU1ZWQ5YmQyZjBmMGFmNjc4ZmM=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-26T18:11:43Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-26T20:32:29Z"}, "message": "Formatting.", "tree": {"sha": "7b9ab4f5f67213e62c182dcb824210a33cabd318", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b9ab4f5f67213e62c182dcb824210a33cabd318"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60c3bbd8447593b06fcab55ed9bd2f0f0af678fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60c3bbd8447593b06fcab55ed9bd2f0f0af678fc", "html_url": "https://github.com/rust-lang/rust/commit/60c3bbd8447593b06fcab55ed9bd2f0f0af678fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60c3bbd8447593b06fcab55ed9bd2f0f0af678fc/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51d10249e7b91e501a07df87ef56a6a35ee9c4cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/51d10249e7b91e501a07df87ef56a6a35ee9c4cd", "html_url": "https://github.com/rust-lang/rust/commit/51d10249e7b91e501a07df87ef56a6a35ee9c4cd"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "44dfdcfccab9b5367e2757e01ff3b9fbe53eade5", "filename": "compiler/rustc_hir/src/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60c3bbd8447593b06fcab55ed9bd2f0f0af678fc/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c3bbd8447593b06fcab55ed9bd2f0f0af678fc/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Farena.rs?ref=60c3bbd8447593b06fcab55ed9bd2f0f0af678fc", "patch": "@@ -29,7 +29,7 @@ macro_rules! arena_types {\n             [] field_pat: rustc_hir::FieldPat<$tcx>,\n             [] fn_decl: rustc_hir::FnDecl<$tcx>,\n             [] foreign_item: rustc_hir::ForeignItem<$tcx>,\n-            [] foreign_item_ref: rustc_hir::ForeignItemRef<$tcx>,\n+            [few] foreign_item_ref: rustc_hir::ForeignItemRef<$tcx>,\n             [] impl_item_ref: rustc_hir::ImplItemRef<$tcx>,\n             [few] inline_asm: rustc_hir::InlineAsm<$tcx>,\n             [few] llvm_inline_asm: rustc_hir::LlvmInlineAsm<$tcx>,"}, {"sha": "f01d44171056f44c724df69d592fff9bed16876d", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/60c3bbd8447593b06fcab55ed9bd2f0f0af678fc/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c3bbd8447593b06fcab55ed9bd2f0f0af678fc/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=60c3bbd8447593b06fcab55ed9bd2f0f0af678fc", "patch": "@@ -1855,7 +1855,7 @@ pub struct FnSig<'hir> {\n }\n \n // The bodies for items are stored \"out of line\", in a separate\n-// hashmap in the `Crate`. Here we just record the node-id of the item\n+// hashmap in the `Crate`. Here we just record the hir-id of the item\n // so it can fetched later.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Encodable, Debug)]\n pub struct TraitItemId {\n@@ -1899,7 +1899,7 @@ pub enum TraitItemKind<'hir> {\n }\n \n // The bodies for items are stored \"out of line\", in a separate\n-// hashmap in the `Crate`. Here we just record the node-id of the item\n+// hashmap in the `Crate`. Here we just record the hir-id of the item\n // so it can fetched later.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Encodable, Debug)]\n pub struct ImplItemId {\n@@ -2441,7 +2441,7 @@ impl VariantData<'hir> {\n }\n \n // The bodies for items are stored \"out of line\", in a separate\n-// hashmap in the `Crate`. Here we just record the node-id of the item\n+// hashmap in the `Crate`. Here we just record the hir-id of the item\n // so it can fetched later.\n #[derive(Copy, Clone, Encodable, Debug)]\n pub struct ItemId {\n@@ -2624,7 +2624,7 @@ pub enum AssocItemKind {\n }\n \n // The bodies for items are stored \"out of line\", in a separate\n-// hashmap in the `Crate`. Here we just record the node-id of the item\n+// hashmap in the `Crate`. Here we just record the hir-id of the item\n // so it can fetched later.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Encodable, Debug)]\n pub struct ForeignItemId {"}, {"sha": "3e8fc689acf7a83987b838055134408824dfe752", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60c3bbd8447593b06fcab55ed9bd2f0f0af678fc/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c3bbd8447593b06fcab55ed9bd2f0f0af678fc/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=60c3bbd8447593b06fcab55ed9bd2f0f0af678fc", "patch": "@@ -289,7 +289,7 @@ pub trait Visitor<'v>: Sized {\n         walk_list!(self, visit_impl_item, opt_item);\n     }\n \n-    /// Like `visit_nested_item()`, but for impl items. See\n+    /// Like `visit_nested_item()`, but for foreign items. See\n     /// `visit_nested_item()` for advice on when to override this\n     /// method.\n     fn visit_nested_foreign_item(&mut self, id: ForeignItemId) {"}, {"sha": "52ffd9a7975a3568ff5b6fc6725eb9fbfa225062", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60c3bbd8447593b06fcab55ed9bd2f0f0af678fc/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c3bbd8447593b06fcab55ed9bd2f0f0af678fc/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=60c3bbd8447593b06fcab55ed9bd2f0f0af678fc", "patch": "@@ -1225,7 +1225,7 @@ impl EncodeContext<'a, 'tcx> {\n             hir::ItemKind::Mod(ref m) => {\n                 return self.encode_info_for_mod(item.hir_id, m, &item.attrs);\n             }\n-            hir::ItemKind::ForeignMod{..} => EntryKind::ForeignMod,\n+            hir::ItemKind::ForeignMod { .. } => EntryKind::ForeignMod,\n             hir::ItemKind::GlobalAsm(..) => EntryKind::GlobalAsm,\n             hir::ItemKind::TyAlias(..) => EntryKind::Type,\n             hir::ItemKind::OpaqueTy(..) => {"}, {"sha": "5ff631a24573f16ab062a2291703d98e882c0d4a", "filename": "compiler/rustc_passes/src/entry.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60c3bbd8447593b06fcab55ed9bd2f0f0af678fc/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c3bbd8447593b06fcab55ed9bd2f0f0af678fc/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fentry.rs?ref=60c3bbd8447593b06fcab55ed9bd2f0f0af678fc", "patch": "@@ -46,7 +46,9 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for EntryContext<'a, 'tcx> {\n         // Entry fn is never a trait item.\n     }\n \n-    fn visit_foreign_item(&mut self, _: &'tcx ForeignItem<'tcx>) {}\n+    fn visit_foreign_item(&mut self, _: &'tcx ForeignItem<'tcx>) {\n+        // Entry fn is never a foreign item.\n+    }\n }\n \n fn entry_fn(tcx: TyCtxt<'_>, cnum: CrateNum) -> Option<(LocalDefId, EntryFnType)> {"}, {"sha": "fde83af99a569bdbd85803a957e36d78520ec727", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60c3bbd8447593b06fcab55ed9bd2f0f0af678fc/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c3bbd8447593b06fcab55ed9bd2f0f0af678fc/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=60c3bbd8447593b06fcab55ed9bd2f0f0af678fc", "patch": "@@ -379,7 +379,9 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a, 'tcx\n         // processed in visit_item above\n     }\n \n-    fn visit_foreign_item(&mut self, _foreign_item: &hir::ForeignItem<'_>) {}\n+    fn visit_foreign_item(&mut self, _foreign_item: &hir::ForeignItem<'_>) {\n+        // We never export foreign functions as they have no body to export.\n+    }\n }\n \n fn reachable_set<'tcx>(tcx: TyCtxt<'tcx>, crate_num: CrateNum) -> FxHashSet<LocalDefId> {"}, {"sha": "f6bbbd80bf1eb0bc174c5d66887049bea027b0a2", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60c3bbd8447593b06fcab55ed9bd2f0f0af678fc/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c3bbd8447593b06fcab55ed9bd2f0f0af678fc/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=60c3bbd8447593b06fcab55ed9bd2f0f0af678fc", "patch": "@@ -499,7 +499,7 @@ impl<'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'tcx> {\n         // optional. They inherit stability from their parents when unannotated.\n         if !matches!(\n             i.kind,\n-            hir::ItemKind::Impl { of_trait: None, .. } | hir::ItemKind::ForeignMod{..}\n+            hir::ItemKind::Impl { of_trait: None, .. } | hir::ItemKind::ForeignMod { .. }\n         ) {\n             self.check_missing_stability(i.hir_id, i.span);\n         }"}]}