{"sha": "e0d5b92b84424b5b1dbd2dec7d32e92e1550832b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwZDViOTJiODQ0MjRiNWIxZGJkMmRlYzdkMzJlOTJlMTU1MDgzMmI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-08T23:28:25Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-10T03:00:15Z"}, "message": "rt: Begin moving stack-building functions to rust_stack.cpp", "tree": {"sha": "82e9a9ba272b53b0c87871503ec8fb649cca12ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82e9a9ba272b53b0c87871503ec8fb649cca12ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0d5b92b84424b5b1dbd2dec7d32e92e1550832b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0d5b92b84424b5b1dbd2dec7d32e92e1550832b", "html_url": "https://github.com/rust-lang/rust/commit/e0d5b92b84424b5b1dbd2dec7d32e92e1550832b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0d5b92b84424b5b1dbd2dec7d32e92e1550832b/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2983e77383edd852bb30a022e4599e7c42670ac5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2983e77383edd852bb30a022e4599e7c42670ac5", "html_url": "https://github.com/rust-lang/rust/commit/2983e77383edd852bb30a022e4599e7c42670ac5"}], "stats": {"total": 121, "additions": 68, "deletions": 53}, "files": [{"sha": "e07bec1487fda70133376d90d7d42348fb5e4e65", "filename": "mk/rt.mk", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0d5b92b84424b5b1dbd2dec7d32e92e1550832b/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e0d5b92b84424b5b1dbd2dec7d32e92e1550832b/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=e0d5b92b84424b5b1dbd2dec7d32e92e1550832b", "patch": "@@ -45,6 +45,7 @@ RUNTIME_CS_$(1) := \\\n               rt/rust_task_thread.cpp \\\n               rt/rust_scheduler.cpp \\\n               rt/rust_task.cpp \\\n+              rt/rust_stack.cpp \\\n               rt/rust_task_list.cpp \\\n               rt/rust_port.cpp \\\n               rt/rust_upcall.cpp \\\n@@ -84,6 +85,7 @@ RUNTIME_HDR_$(1) := rt/globals.h \\\n                rt/rust_scheduler.h \\\n                rt/rust_shape.h \\\n                rt/rust_task.h \\\n+               rt/rust_stack.h \\\n                rt/rust_task_list.h \\\n                rt/rust_log.h \\\n                rt/circular_buffer.h \\"}, {"sha": "c3cde81925f223754540cbb16cde0200c210fb37", "filename": "src/rt/rust_stack.cpp", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e0d5b92b84424b5b1dbd2dec7d32e92e1550832b/src%2Frt%2Frust_stack.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e0d5b92b84424b5b1dbd2dec7d32e92e1550832b/src%2Frt%2Frust_stack.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_stack.cpp?ref=e0d5b92b84424b5b1dbd2dec7d32e92e1550832b", "patch": "@@ -0,0 +1,42 @@\n+#include \"rust_internal.h\"\n+\n+#include \"vg/valgrind.h\"\n+#include \"vg/memcheck.h\"\n+\n+// A value that goes at the end of the stack and must not be touched\n+const uint8_t stack_canary[] = {0xAB, 0xCD, 0xAB, 0xCD,\n+                                0xAB, 0xCD, 0xAB, 0xCD,\n+                                0xAB, 0xCD, 0xAB, 0xCD,\n+                                0xAB, 0xCD, 0xAB, 0xCD};\n+\n+void\n+config_valgrind_stack(stk_seg *stk) {\n+    stk->valgrind_id =\n+        VALGRIND_STACK_REGISTER(&stk->data[0],\n+                                stk->end);\n+#ifndef NVALGRIND\n+    // Establish that the stack is accessible.  This must be done when reusing\n+    // old stack segments, since the act of popping the stack previously\n+    // caused valgrind to consider the whole thing inaccessible.\n+    size_t sz = stk->end - (uintptr_t)&stk->data[0];\n+    VALGRIND_MAKE_MEM_UNDEFINED(stk->data + sizeof(stack_canary),\n+                                sz - sizeof(stack_canary));\n+#endif\n+}\n+\n+void\n+unconfig_valgrind_stack(stk_seg *stk) {\n+    VALGRIND_STACK_DEREGISTER(stk->valgrind_id);\n+}\n+\n+void\n+add_stack_canary(stk_seg *stk) {\n+    memcpy(stk->data, stack_canary, sizeof(stack_canary));\n+    assert(sizeof(stack_canary) == 16 && \"Stack canary was not the expected size\");\n+}\n+\n+void\n+check_stack_canary(stk_seg *stk) {\n+    assert(!memcmp(stk->data, stack_canary, sizeof(stack_canary))\n+      && \"Somebody killed the canary\");\n+}"}, {"sha": "d665b4fa2c15c221ff4ea662a2b380b8a6cf04aa", "filename": "src/rt/rust_stack.h", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e0d5b92b84424b5b1dbd2dec7d32e92e1550832b/src%2Frt%2Frust_stack.h", "raw_url": "https://github.com/rust-lang/rust/raw/e0d5b92b84424b5b1dbd2dec7d32e92e1550832b/src%2Frt%2Frust_stack.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_stack.h?ref=e0d5b92b84424b5b1dbd2dec7d32e92e1550832b", "patch": "@@ -0,0 +1,23 @@\n+struct stk_seg {\n+    stk_seg *prev;\n+    stk_seg *next;\n+    uintptr_t end;\n+    unsigned int valgrind_id;\n+#ifndef _LP64\n+    uint32_t pad;\n+#endif\n+\n+    uint8_t data[];\n+};\n+\n+void\n+config_valgrind_stack(stk_seg *stk);\n+\n+void\n+unconfig_valgrind_stack(stk_seg *stk);\n+\n+void\n+add_stack_canary(stk_seg *stk);\n+\n+void\n+check_stack_canary(stk_seg *stk);"}, {"sha": "79b3d873e8893074cfa3baafeaad3d24cec5499c", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e0d5b92b84424b5b1dbd2dec7d32e92e1550832b/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e0d5b92b84424b5b1dbd2dec7d32e92e1550832b/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=e0d5b92b84424b5b1dbd2dec7d32e92e1550832b", "patch": "@@ -2,9 +2,6 @@\n #include \"rust_internal.h\"\n #include \"rust_cc.h\"\n \n-#include \"vg/valgrind.h\"\n-#include \"vg/memcheck.h\"\n-\n #ifndef __WIN32__\n #include <execinfo.h>\n #endif\n@@ -60,12 +57,6 @@\n #endif\n #endif\n \n-// A value that goes at the end of the stack and must not be touched\n-const uint8_t stack_canary[] = {0xAB, 0xCD, 0xAB, 0xCD,\n-                                0xAB, 0xCD, 0xAB, 0xCD,\n-                                0xAB, 0xCD, 0xAB, 0xCD,\n-                                0xAB, 0xCD, 0xAB, 0xCD};\n-\n static size_t\n get_next_stk_size(rust_task_thread *thread, rust_task *task,\n                   size_t min, size_t current, size_t requested) {\n@@ -90,38 +81,6 @@ get_next_stk_size(rust_task_thread *thread, rust_task *task,\n \n // Task stack segments. Heap allocated and chained together.\n \n-static void\n-config_valgrind_stack(stk_seg *stk) {\n-    stk->valgrind_id =\n-        VALGRIND_STACK_REGISTER(&stk->data[0],\n-                                stk->end);\n-#ifndef NVALGRIND\n-    // Establish that the stack is accessible.  This must be done when reusing\n-    // old stack segments, since the act of popping the stack previously\n-    // caused valgrind to consider the whole thing inaccessible.\n-    size_t sz = stk->end - (uintptr_t)&stk->data[0];\n-    VALGRIND_MAKE_MEM_UNDEFINED(stk->data + sizeof(stack_canary),\n-                                sz - sizeof(stack_canary));\n-#endif\n-}\n-\n-static void\n-unconfig_valgrind_stack(stk_seg *stk) {\n-VALGRIND_STACK_DEREGISTER(stk->valgrind_id);\n-}\n-\n-static void\n-add_stack_canary(stk_seg *stk) {\n-    memcpy(stk->data, stack_canary, sizeof(stack_canary));\n-    assert(sizeof(stack_canary) == 16 && \"Stack canary was not the expected size\");\n-}\n-\n-static void\n-check_stack_canary(stk_seg *stk) {\n-    assert(!memcmp(stk->data, stack_canary, sizeof(stack_canary))\n-      && \"Somebody killed the canary\");\n-}\n-\n // The amount of stack in a segment available to Rust code\n static size_t\n user_stack_size(stk_seg *stk) {"}, {"sha": "1289358bf9cb28d64bdb5aa3186b827e3974a68d", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e0d5b92b84424b5b1dbd2dec7d32e92e1550832b/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/e0d5b92b84424b5b1dbd2dec7d32e92e1550832b/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=e0d5b92b84424b5b1dbd2dec7d32e92e1550832b", "patch": "@@ -15,6 +15,7 @@\n #include \"rust_kernel.h\"\n #include \"rust_obstack.h\"\n #include \"boxed_region.h\"\n+#include \"rust_stack.h\"\n \n // Corresponds to the rust chan (currently _chan) type.\n struct chan_handle {\n@@ -24,18 +25,6 @@ struct chan_handle {\n \n struct rust_box;\n \n-struct stk_seg {\n-    stk_seg *prev;\n-    stk_seg *next;\n-    uintptr_t end;\n-    unsigned int valgrind_id;\n-#ifndef _LP64\n-    uint32_t pad;\n-#endif\n-\n-    uint8_t data[];\n-};\n-\n struct frame_glue_fns {\n     uintptr_t mark_glue_off;\n     uintptr_t drop_glue_off;"}]}