{"sha": "50fd0765b5e6150b026ed590a3b4771421751d2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZmQwNzY1YjVlNjE1MGIwMjZlZDU5MGEzYjQ3NzE0MjE3NTFkMmI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-11-03T14:55:09Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-11-03T14:55:09Z"}, "message": "call drop \"glue\" for enums", "tree": {"sha": "f6472b2b7032d04894f2336cf9c83f6e2a102bfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6472b2b7032d04894f2336cf9c83f6e2a102bfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50fd0765b5e6150b026ed590a3b4771421751d2b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYG0/NAAoJEFbW7qD8Z6xGR2YP/RR1cpfaGV8QezpurD+8Huro\nlUwhosjomwnqUVLWZMubPj8XlWuosVya5SO/EgPA7qdjq7Vo0Mx49+gwdEwlwZYy\nk1OcYjlipxtPPE7rYhr9K5QCOGazx0Eg5cjRjEUaOqRE5UageSD73Hszx2xfh6t1\nSIin3Ie1XfqQi8yQ4A0brslulmJN1BAVtH1YnJlAiJyO+clyLkLiVQGYLam/aCah\nEZG0h+C2a1oBdu4K7eKX1S+XDMILwUL2egIvW31oINNM6PrXpg3dO1++L6MZvxrp\nNzwQJk+C+XUDWpgEPSNhklV0qypfX9mBpgC+F7z3MTleCL/Wx8h+e3j6zOAby0aT\no57wrx3MWc0tPF8HFSagcCoWwWAGfzt7JZVWxTbG8LhjKpbQHqPsJD3Su8mRkB/Q\nZr5smORpW6Bw08KxJUo2AwhUYUTTd7PnM/OcX5i4oAY33zmC0EotbF1JMlkGE/c7\n550CMlGilwUVVc0zGiX0FXAIfMYNAqQbt57dpQ4u1IdjyVshFhEtCdAYZUqa9Bgl\n8JQTDWsVkLWrcRBkq6WsIJ7Kc/AwLB4UNTerF0GVu1uHMsuekHqWXN09HykiJl+e\nPQg11nSZENca45z4KnPuBe9vy/LBv8Xsm8GlwfoJeWGTwanEG+8WEDMlhWvFMPNA\nzNvKNyGW1j2HozeHO2Wg\n=AE2u\n-----END PGP SIGNATURE-----", "payload": "tree f6472b2b7032d04894f2336cf9c83f6e2a102bfb\nparent b90cc77bac0bb2577568fb12d340c0ea7e787d1d\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1478184909 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1478184909 +0100\n\ncall drop \"glue\" for enums"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50fd0765b5e6150b026ed590a3b4771421751d2b", "html_url": "https://github.com/rust-lang/rust/commit/50fd0765b5e6150b026ed590a3b4771421751d2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50fd0765b5e6150b026ed590a3b4771421751d2b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b90cc77bac0bb2577568fb12d340c0ea7e787d1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b90cc77bac0bb2577568fb12d340c0ea7e787d1d", "html_url": "https://github.com/rust-lang/rust/commit/b90cc77bac0bb2577568fb12d340c0ea7e787d1d"}], "stats": {"total": 37, "additions": 28, "deletions": 9}, "files": [{"sha": "4e6be7fdec92b8d31b35f0d1388b7ebd81cca27f", "filename": "src/interpreter/terminator/mod.rs", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/50fd0765b5e6150b026ed590a3b4771421751d2b/src%2Finterpreter%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50fd0765b5e6150b026ed590a3b4771421751d2b/src%2Finterpreter%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fmod.rs?ref=50fd0765b5e6150b026ed590a3b4771421751d2b", "patch": "@@ -490,15 +490,34 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         match ty.sty {\n             ty::TyAdt(adt_def, substs) => {\n                 // FIXME: some structs are represented as ByValPair\n-                let ptr = self.force_allocation(lval)?.to_ptr();\n-                if adt_def.is_univariant() {\n-                    for (i, field_ty) in adt_def.struct_variant().fields.iter().enumerate() {\n-                        let field_ty = self.monomorphize_field_ty(field_ty, substs);\n-                        let offset = self.get_field_offset(ty, i)?.bytes() as isize;\n-                        self.drop(Lvalue::from_ptr(ptr.offset(offset)), field_ty)?;\n-                    }\n-                } else {\n-                    unimplemented!()\n+                let adt_ptr = self.force_allocation(lval)?.to_ptr();\n+                let layout = self.type_layout(ty);\n+                let fields = match *layout {\n+                    Layout::Univariant { ref variant, .. } => {\n+                        adt_def.struct_variant().fields.iter().zip(&variant.offsets)\n+                    },\n+                    Layout::General { ref variants, .. } => {\n+                        let discr_val = self.read_discriminant_value(adt_ptr, ty)?;\n+                        match adt_def.variants.iter().position(|v| discr_val == v.disr_val.to_u64_unchecked()) {\n+                            // start at offset 1, to skip over the discriminant\n+                            Some(i) => adt_def.variants[i].fields.iter().zip(&variants[i].offsets[1..]),\n+                            None => return Err(EvalError::InvalidDiscriminant),\n+                        }\n+                    },\n+                    Layout::StructWrappedNullablePointer { nndiscr, ref nonnull, .. } => {\n+                        let discr = self.read_discriminant_value(adt_ptr, ty)?;\n+                        if discr == nndiscr {\n+                            adt_def.variants[discr as usize].fields.iter().zip(&nonnull.offsets)\n+                        } else {\n+                            // FIXME: the zst variant might contain zst types that impl Drop\n+                            return Ok(()); // nothing to do, this is zero sized (e.g. `None`)\n+                        }\n+                    },\n+                    _ => bug!(\"{:?} is not an adt layout\", layout),\n+                };\n+                for (field_ty, offset) in fields {\n+                    let field_ty = self.monomorphize_field_ty(field_ty, substs);\n+                    self.drop(Lvalue::from_ptr(adt_ptr.offset(offset.bytes() as isize)), field_ty)?;\n                 }\n             },\n             ty::TyTuple(fields) => {"}]}