{"sha": "32b01c78d0502c8a4cc36abbe8dc3c000436df98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyYjAxYzc4ZDA1MDJjOGE0Y2MzNmFiYmU4ZGMzYzAwMDQzNmRmOTg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-11T07:53:38Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-12T07:43:55Z"}, "message": "avoid computing cur_span all the time", "tree": {"sha": "2862ac3fbd5d233d2d95a7a2d4222beafea7468c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2862ac3fbd5d233d2d95a7a2d4222beafea7468c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32b01c78d0502c8a4cc36abbe8dc3c000436df98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32b01c78d0502c8a4cc36abbe8dc3c000436df98", "html_url": "https://github.com/rust-lang/rust/commit/32b01c78d0502c8a4cc36abbe8dc3c000436df98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32b01c78d0502c8a4cc36abbe8dc3c000436df98/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ac6fd0405c2f3defa9ad8ee3d4026469fbda018", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ac6fd0405c2f3defa9ad8ee3d4026469fbda018", "html_url": "https://github.com/rust-lang/rust/commit/0ac6fd0405c2f3defa9ad8ee3d4026469fbda018"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "310b09f71631e268226e6952ab57494f804d6443", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/32b01c78d0502c8a4cc36abbe8dc3c000436df98/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32b01c78d0502c8a4cc36abbe8dc3c000436df98/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=32b01c78d0502c8a4cc36abbe8dc3c000436df98", "patch": "@@ -317,7 +317,10 @@ pub fn const_eval_raw_provider<'tcx>(\n             if is_static {\n                 // Ensure that if the above error was either `TooGeneric` or `Reported`\n                 // an error must be reported.\n-                let v = err.report_as_error(ecx.tcx_at(), \"could not evaluate static initializer\");\n+                let v = err.report_as_error(\n+                    ecx.tcx.at(ecx.cur_span()),\n+                    \"could not evaluate static initializer\",\n+                );\n \n                 // If this is `Reveal:All`, then we need to make sure an error is reported but if\n                 // this is `Reveal::UserFacing`, then it's expected that we could get a\n@@ -373,13 +376,16 @@ pub fn const_eval_raw_provider<'tcx>(\n                         // anything else (array lengths, enum initializers, constant patterns) are\n                         // reported as hard errors\n                         } else {\n-                            err.report_as_error(ecx.tcx_at(), \"evaluation of constant value failed\")\n+                            err.report_as_error(\n+                                ecx.tcx.at(ecx.cur_span()),\n+                                \"evaluation of constant value failed\",\n+                            )\n                         }\n                     }\n                 }\n             } else {\n                 // use of broken constant from other crate\n-                err.report_as_error(ecx.tcx_at(), \"could not evaluate constant\")\n+                err.report_as_error(ecx.tcx.at(ecx.cur_span()), \"could not evaluate constant\")\n             }\n         })\n }"}, {"sha": "866cdce7b77b63a1755974e89740b99508c5a8a8", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32b01c78d0502c8a4cc36abbe8dc3c000436df98/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32b01c78d0502c8a4cc36abbe8dc3c000436df98/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=32b01c78d0502c8a4cc36abbe8dc3c000436df98", "patch": "@@ -323,7 +323,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n     #[inline(always)]\n     pub fn tcx_at(&self) -> TyCtxtAt<'tcx> {\n-        self.tcx.at(self.cur_span())\n+        // Computing the current span has a non-trivial cost, and for cycle errors\n+        // the \"root span\" is good enough.\n+        self.tcx.at(self.root_span)\n     }\n \n     #[inline(always)]\n@@ -406,7 +408,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n     #[inline]\n     pub fn type_is_freeze(&self, ty: Ty<'tcx>) -> bool {\n-        ty.is_freeze(self.tcx, self.param_env, self.cur_span())\n+        ty.is_freeze(self.tcx, self.param_env, self.root_span)\n     }\n \n     pub fn load_mir(\n@@ -889,7 +891,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // FIXME: We can hit delay_span_bug if this is an invalid const, interning finds\n         // that problem, but we never run validation to show an error. Can we ensure\n         // this does not happen?\n-        let val = self.tcx_at().const_eval_raw(param_env.and(gid))?;\n+        let val = self.tcx.at(self.cur_span()).const_eval_raw(param_env.and(gid))?;\n         self.raw_const_to_mplace(val)\n     }\n "}]}