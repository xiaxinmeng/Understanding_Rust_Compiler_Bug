{"sha": "a12f50ddc4ed73cbca436827ae3958a104d915d3", "node_id": "C_kwDOAAsO6NoAKGExMmY1MGRkYzRlZDczY2JjYTQzNjgyN2FlMzk1OGExMDRkOTE1ZDM", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-05-08T22:12:45Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-05-25T15:15:04Z"}, "message": "rustc_metadata: use configurable AtomicBool for privateness flag\n\nThis switches to using a `Cell` for single-threaded rustc.", "tree": {"sha": "ceed17a4ced20016d35dfbd4c7676402f7184500", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ceed17a4ced20016d35dfbd4c7676402f7184500"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a12f50ddc4ed73cbca436827ae3958a104d915d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a12f50ddc4ed73cbca436827ae3958a104d915d3", "html_url": "https://github.com/rust-lang/rust/commit/a12f50ddc4ed73cbca436827ae3958a104d915d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a12f50ddc4ed73cbca436827ae3958a104d915d3/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b537c1f1756b43228c3c392a54ddec91b0f1d205", "url": "https://api.github.com/repos/rust-lang/rust/commits/b537c1f1756b43228c3c392a54ddec91b0f1d205", "html_url": "https://github.com/rust-lang/rust/commit/b537c1f1756b43228c3c392a54ddec91b0f1d205"}], "stats": {"total": 18, "additions": 16, "deletions": 2}, "files": [{"sha": "df8285cc7292faebfb2069580b8011bbb043a20e", "filename": "compiler/rustc_data_structures/src/sync.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a12f50ddc4ed73cbca436827ae3958a104d915d3/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12f50ddc4ed73cbca436827ae3958a104d915d3/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs?ref=a12f50ddc4ed73cbca436827ae3958a104d915d3", "patch": "@@ -143,6 +143,20 @@ cfg_if! {\n                 self.0.set(val);\n                 result\n             }\n+            pub fn fetch_update(\n+                &self,\n+                _order_set: Ordering,\n+                _order_get: Ordering,\n+                mut f: impl FnMut(bool) -> Option<bool>,\n+            ) -> Result<bool, bool> {\n+                let prev = self.0.get();\n+                if let Some(next) = f(prev) {\n+                    self.0.set(next);\n+                    Ok(prev)\n+                } else {\n+                    Err(prev)\n+                }\n+            }\n         }\n \n         impl<T: Copy + PartialEq> Atomic<T> {"}, {"sha": "325ffcae7e98b97aca8aedb23f2e3c265cb4d419", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a12f50ddc4ed73cbca436827ae3958a104d915d3/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12f50ddc4ed73cbca436827ae3958a104d915d3/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=a12f50ddc4ed73cbca436827ae3958a104d915d3", "patch": "@@ -9,7 +9,7 @@ use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::owned_slice::OwnedSlice;\n use rustc_data_structures::svh::Svh;\n-use rustc_data_structures::sync::{AppendOnlyVec, Lock, Lrc, OnceCell};\n+use rustc_data_structures::sync::{AppendOnlyVec, AtomicBool, Lock, Lrc, OnceCell};\n use rustc_data_structures::unhash::UnhashMap;\n use rustc_expand::base::{SyntaxExtension, SyntaxExtensionKind};\n use rustc_expand::proc_macro::{AttrProcMacro, BangProcMacro, DeriveProcMacro};\n@@ -40,7 +40,7 @@ use proc_macro::bridge::client::ProcMacro;\n use std::iter::TrustedLen;\n use std::num::NonZeroUsize;\n use std::path::Path;\n-use std::sync::atomic::{AtomicBool, Ordering};\n+use std::sync::atomic::Ordering;\n use std::{io, iter, mem};\n \n pub(super) use cstore_impl::provide;"}]}