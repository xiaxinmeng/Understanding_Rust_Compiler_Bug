{"sha": "bc4ecb199b4ad3a580d3b29e659e707ce1a29f04", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNGVjYjE5OWI0YWQzYTU4MGQzYjI5ZTY1OWU3MDdjZTFhMjlmMDQ=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-03-10T20:05:02Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-03-10T20:05:02Z"}, "message": "Use expect-test for builtin macro/derive tests", "tree": {"sha": "487a52f6a620479abc33f79380e6933aaa14a726", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/487a52f6a620479abc33f79380e6933aaa14a726"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc4ecb199b4ad3a580d3b29e659e707ce1a29f04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc4ecb199b4ad3a580d3b29e659e707ce1a29f04", "html_url": "https://github.com/rust-lang/rust/commit/bc4ecb199b4ad3a580d3b29e659e707ce1a29f04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc4ecb199b4ad3a580d3b29e659e707ce1a29f04/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c32e2d8a045e4ba7d45ac9651572a226324cefa", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c32e2d8a045e4ba7d45ac9651572a226324cefa", "html_url": "https://github.com/rust-lang/rust/commit/6c32e2d8a045e4ba7d45ac9651572a226324cefa"}], "stats": {"total": 146, "additions": 66, "deletions": 80}, "files": [{"sha": "b1fef2e80a6cf2d51c29748a4da4a3f7e0886a65", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc4ecb199b4ad3a580d3b29e659e707ce1a29f04/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/bc4ecb199b4ad3a580d3b29e659e707ce1a29f04/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=bc4ecb199b4ad3a580d3b29e659e707ce1a29f04", "patch": "@@ -526,6 +526,7 @@ dependencies = [\n  \"base_db\",\n  \"cfg\",\n  \"either\",\n+ \"expect-test\",\n  \"la-arena\",\n  \"log\",\n  \"mbe\","}, {"sha": "f649ab9259be1cbe42666a282d5103042028a1fc", "filename": "crates/hir_expand/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc4ecb199b4ad3a580d3b29e659e707ce1a29f04/crates%2Fhir_expand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bc4ecb199b4ad3a580d3b29e659e707ce1a29f04/crates%2Fhir_expand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2FCargo.toml?ref=bc4ecb199b4ad3a580d3b29e659e707ce1a29f04", "patch": "@@ -25,3 +25,4 @@ mbe = { path = \"../mbe\", version = \"0.0.0\" }\n \n [dev-dependencies]\n test_utils = { path = \"../test_utils\" }\n+expect-test = \"1.1\""}, {"sha": "dfdb9cf5928a615632a60a4490669d52e5e789b6", "filename": "crates/hir_expand/src/builtin_derive.rs", "status": "modified", "additions": 29, "deletions": 37, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/bc4ecb199b4ad3a580d3b29e659e707ce1a29f04/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4ecb199b4ad3a580d3b29e659e707ce1a29f04/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive.rs?ref=bc4ecb199b4ad3a580d3b29e659e707ce1a29f04", "patch": "@@ -267,13 +267,14 @@ fn partial_ord_expand(\n #[cfg(test)]\n mod tests {\n     use base_db::{fixture::WithFixture, CrateId, SourceDatabase};\n+    use expect_test::{expect, Expect};\n     use name::{known, Name};\n \n     use crate::{test_db::TestDB, AstId, MacroCallId, MacroCallKind, MacroCallLoc};\n \n     use super::*;\n \n-    fn expand_builtin_derive(s: &str, name: Name) -> String {\n+    fn expand_builtin_derive(ra_fixture: &str, name: Name) -> String {\n         let expander = BuiltinDeriveExpander::find_by_name(&name).unwrap();\n         let fixture = format!(\n             r#\"//- /main.rs crate:main deps:core\n@@ -282,7 +283,7 @@ $0\n //- /lib.rs crate:core\n // empty\n \"#,\n-            s\n+            ra_fixture\n         );\n \n         let (db, file_pos) = TestDB::with_position(&fixture);\n@@ -314,66 +315,57 @@ $0\n         parsed.text().to_string()\n     }\n \n+    fn check_derive(ra_fixture: &str, name: Name, expected: Expect) {\n+        let expanded = expand_builtin_derive(ra_fixture, name);\n+        expected.assert_eq(&expanded);\n+    }\n+\n     #[test]\n     fn test_copy_expand_simple() {\n-        let expanded = expand_builtin_derive(\n+        check_derive(\n             r#\"\n-        #[derive(Copy)]\n-        struct Foo;\n-\"#,\n+            #[derive(Copy)]\n+            struct Foo;\n+            \"#,\n             known::Copy,\n+            expect![[\"impl< >core::marker::CopyforFoo< >{}\"]],\n         );\n-\n-        assert_eq!(expanded, \"impl< >core::marker::CopyforFoo< >{}\");\n     }\n \n     #[test]\n     fn test_copy_expand_with_type_params() {\n-        let expanded = expand_builtin_derive(\n+        check_derive(\n             r#\"\n-        #[derive(Copy)]\n-        struct Foo<A, B>;\n-\"#,\n+            #[derive(Copy)]\n+            struct Foo<A, B>;\n+            \"#,\n             known::Copy,\n-        );\n-\n-        assert_eq!(\n-            expanded,\n-            \"impl<T0:core::marker::Copy,T1:core::marker::Copy>core::marker::CopyforFoo<T0,T1>{}\"\n+            expect![[\"impl<T0:core::marker::Copy,T1:core::marker::Copy>core::marker::CopyforFoo<T0,T1>{}\"]],\n         );\n     }\n \n     #[test]\n     fn test_copy_expand_with_lifetimes() {\n-        let expanded = expand_builtin_derive(\n+        check_derive(\n             r#\"\n-        #[derive(Copy)]\n-        struct Foo<A, B, 'a, 'b>;\n-\"#,\n+            #[derive(Copy)]\n+            struct Foo<A, B, 'a, 'b>;\n+            \"#,\n             known::Copy,\n-        );\n-\n-        // We currently just ignore lifetimes\n-\n-        assert_eq!(\n-            expanded,\n-            \"impl<T0:core::marker::Copy,T1:core::marker::Copy>core::marker::CopyforFoo<T0,T1>{}\"\n+            // We currently just ignore lifetimes\n+            expect![[\"impl<T0:core::marker::Copy,T1:core::marker::Copy>core::marker::CopyforFoo<T0,T1>{}\"]],\n         );\n     }\n \n     #[test]\n     fn test_clone_expand() {\n-        let expanded = expand_builtin_derive(\n+        check_derive(\n             r#\"\n-        #[derive(Clone)]\n-        struct Foo<A, B>;\n-\"#,\n+            #[derive(Clone)]\n+            struct Foo<A, B>;\n+            \"#,\n             known::Clone,\n-        );\n-\n-        assert_eq!(\n-            expanded,\n-            \"impl<T0:core::clone::Clone,T1:core::clone::Clone>core::clone::CloneforFoo<T0,T1>{}\"\n+            expect![[\"impl<T0:core::clone::Clone,T1:core::clone::Clone>core::clone::CloneforFoo<T0,T1>{}\"]],\n         );\n     }\n }"}, {"sha": "2a79c892b53f4f20953a45b7a0f6c5cc7c2b276f", "filename": "crates/hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 35, "deletions": 43, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/bc4ecb199b4ad3a580d3b29e659e707ce1a29f04/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4ecb199b4ad3a580d3b29e659e707ce1a29f04/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=bc4ecb199b4ad3a580d3b29e659e707ce1a29f04", "patch": "@@ -491,6 +491,7 @@ mod tests {\n         MacroCallLoc,\n     };\n     use base_db::{fixture::WithFixture, SourceDatabase};\n+    use expect_test::{expect, Expect};\n     use std::sync::Arc;\n     use syntax::ast::NameOwner;\n \n@@ -574,87 +575,86 @@ mod tests {\n         db.parse_or_expand(file_id).unwrap().to_string()\n     }\n \n+    fn check_expansion(ra_fixture: &str, expect: Expect) {\n+        let expansion = expand_builtin_macro(ra_fixture);\n+        expect.assert_eq(&expansion);\n+    }\n+\n     #[test]\n     fn test_column_expand() {\n-        let expanded = expand_builtin_macro(\n+        check_expansion(\n             r#\"\n             #[rustc_builtin_macro]\n             macro_rules! column {() => {}}\n             column!()\n             \"#,\n+            expect![[\"0\"]],\n         );\n-\n-        assert_eq!(expanded, \"0\");\n     }\n \n     #[test]\n     fn test_line_expand() {\n-        let expanded = expand_builtin_macro(\n+        check_expansion(\n             r#\"\n             #[rustc_builtin_macro]\n             macro_rules! line {() => {}}\n             line!()\n             \"#,\n+            expect![[\"0\"]],\n         );\n-\n-        assert_eq!(expanded, \"0\");\n     }\n \n     #[test]\n     fn test_stringify_expand() {\n-        let expanded = expand_builtin_macro(\n+        check_expansion(\n             r#\"\n             #[rustc_builtin_macro]\n             macro_rules! stringify {() => {}}\n             stringify!(a b c)\n             \"#,\n+            expect![[\"\\\"a b c\\\"\"]],\n         );\n-\n-        assert_eq!(expanded, \"\\\"a b c\\\"\");\n     }\n \n     #[test]\n     fn test_env_expand() {\n-        let expanded = expand_builtin_macro(\n+        check_expansion(\n             r#\"\n             #[rustc_builtin_macro]\n             macro_rules! env {() => {}}\n             env!(\"TEST_ENV_VAR\")\n             \"#,\n+            expect![[\"\\\"__RA_UNIMPLEMENTED__\\\"\"]],\n         );\n-\n-        assert_eq!(expanded, \"\\\"__RA_UNIMPLEMENTED__\\\"\");\n     }\n \n     #[test]\n     fn test_option_env_expand() {\n-        let expanded = expand_builtin_macro(\n+        check_expansion(\n             r#\"\n             #[rustc_builtin_macro]\n             macro_rules! option_env {() => {}}\n             option_env!(\"TEST_ENV_VAR\")\n             \"#,\n+            expect![[\"std::option::Option::None:: < &str>\"]],\n         );\n-\n-        assert_eq!(expanded, \"std::option::Option::None:: < &str>\");\n     }\n \n     #[test]\n     fn test_file_expand() {\n-        let expanded = expand_builtin_macro(\n+        check_expansion(\n             r#\"\n             #[rustc_builtin_macro]\n             macro_rules! file {() => {}}\n             file!()\n             \"#,\n+            expect![[r#\"\"\"\"#]],\n         );\n-\n-        assert_eq!(expanded, \"\\\"\\\"\");\n     }\n \n     #[test]\n     fn test_assert_expand() {\n-        let expanded = expand_builtin_macro(\n+        check_expansion(\n             r#\"\n             #[rustc_builtin_macro]\n             macro_rules! assert {\n@@ -663,14 +663,13 @@ mod tests {\n             }\n             assert!(true, \"{} {:?}\", arg1(a, b, c), arg2);\n             \"#,\n+            expect![[\"{{(&(true), &(\\\"{} {:?}\\\"), &(arg1(a,b,c)), &(arg2),);}}\"]],\n         );\n-\n-        assert_eq!(expanded, \"{{(&(true), &(\\\"{} {:?}\\\"), &(arg1(a,b,c)), &(arg2),);}}\");\n     }\n \n     #[test]\n     fn test_compile_error_expand() {\n-        let expanded = expand_builtin_macro(\n+        check_expansion(\n             r#\"\n             #[rustc_builtin_macro]\n             macro_rules! compile_error {\n@@ -679,15 +678,14 @@ mod tests {\n             }\n             compile_error!(\"error!\");\n             \"#,\n+            // This expands to nothing (since it's in item position), but emits an error.\n+            expect![[\"\"]],\n         );\n-\n-        // This expands to nothing (since it's in item position), but emits an error.\n-        assert_eq!(expanded, \"\");\n     }\n \n     #[test]\n     fn test_format_args_expand() {\n-        let expanded = expand_builtin_macro(\n+        check_expansion(\n             r#\"\n             #[rustc_builtin_macro]\n             macro_rules! format_args {\n@@ -696,17 +694,15 @@ mod tests {\n             }\n             format_args!(\"{} {:?}\", arg1(a, b, c), arg2);\n             \"#,\n-        );\n-\n-        assert_eq!(\n-            expanded,\n-            r#\"std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(arg1(a,b,c)),std::fmt::Display::fmt),std::fmt::ArgumentV1::new(&(arg2),std::fmt::Display::fmt),])\"#\n+            expect![[\n+                r#\"std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(arg1(a,b,c)),std::fmt::Display::fmt),std::fmt::ArgumentV1::new(&(arg2),std::fmt::Display::fmt),])\"#\n+            ]],\n         );\n     }\n \n     #[test]\n     fn test_format_args_expand_with_comma_exprs() {\n-        let expanded = expand_builtin_macro(\n+        check_expansion(\n             r#\"\n             #[rustc_builtin_macro]\n             macro_rules! format_args {\n@@ -715,17 +711,15 @@ mod tests {\n             }\n             format_args!(\"{} {:?}\", a::<A,B>(), b);\n             \"#,\n-        );\n-\n-        assert_eq!(\n-            expanded,\n-            r#\"std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(a::<A,B>()),std::fmt::Display::fmt),std::fmt::ArgumentV1::new(&(b),std::fmt::Display::fmt),])\"#\n+            expect![[\n+                r#\"std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(a::<A,B>()),std::fmt::Display::fmt),std::fmt::ArgumentV1::new(&(b),std::fmt::Display::fmt),])\"#\n+            ]],\n         );\n     }\n \n     #[test]\n     fn test_include_bytes_expand() {\n-        let expanded = expand_builtin_macro(\n+        check_expansion(\n             r#\"\n             #[rustc_builtin_macro]\n             macro_rules! include_bytes {\n@@ -734,21 +728,19 @@ mod tests {\n             }\n             include_bytes(\"foo\");\n             \"#,\n+            expect![[r#\"b\"\"\"#]],\n         );\n-\n-        assert_eq!(expanded, r#\"b\"\"\"#);\n     }\n \n     #[test]\n     fn test_concat_expand() {\n-        let expanded = expand_builtin_macro(\n+        check_expansion(\n             r##\"\n             #[rustc_builtin_macro]\n             macro_rules! concat {}\n             concat!(\"foo\", \"r\", 0, r#\"bar\"#, false);\n             \"##,\n+            expect![[r#\"\"foor0barfalse\"\"#]],\n         );\n-\n-        assert_eq!(expanded, r#\"\"foor0barfalse\"\"#);\n     }\n }"}]}