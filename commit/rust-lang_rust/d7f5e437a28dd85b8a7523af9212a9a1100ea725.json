{"sha": "d7f5e437a28dd85b8a7523af9212a9a1100ea725", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3ZjVlNDM3YTI4ZGQ4NWI4YTc1MjNhZjkyMTJhOWExMTAwZWE3MjU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-22T02:03:52Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-22T02:03:54Z"}, "message": "core::rt: Add the local heap to newsched tasks\n\nReusing the existing boxed_region implementation from the runtime", "tree": {"sha": "fac7e88de46f3583839b3c2b82d541af7b7b8197", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fac7e88de46f3583839b3c2b82d541af7b7b8197"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7f5e437a28dd85b8a7523af9212a9a1100ea725", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7f5e437a28dd85b8a7523af9212a9a1100ea725", "html_url": "https://github.com/rust-lang/rust/commit/d7f5e437a28dd85b8a7523af9212a9a1100ea725", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7f5e437a28dd85b8a7523af9212a9a1100ea725/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fe118b26fdb2897eb000ae47f912cc6b2534324", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fe118b26fdb2897eb000ae47f912cc6b2534324", "html_url": "https://github.com/rust-lang/rust/commit/2fe118b26fdb2897eb000ae47f912cc6b2534324"}], "stats": {"total": 180, "additions": 170, "deletions": 10}, "files": [{"sha": "fbd4a77d79b98342a0fe0565de675eb888ceb517", "filename": "src/libcore/rt/local_heap.rs", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5e437a28dd85b8a7523af9212a9a1100ea725/src%2Flibcore%2Frt%2Flocal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5e437a28dd85b8a7523af9212a9a1100ea725/src%2Flibcore%2Frt%2Flocal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Flocal_heap.rs?ref=d7f5e437a28dd85b8a7523af9212a9a1100ea725", "patch": "@@ -0,0 +1,81 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! The local, garbage collected heap\n+\n+use libc::{c_void, uintptr_t, size_t};\n+use ops::Drop;\n+\n+type MemoryRegion = c_void;\n+type BoxedRegion = c_void;\n+\n+pub type OpaqueBox = c_void;\n+pub type TypeDesc = c_void;\n+\n+pub struct LocalHeap {\n+    memory_region: *MemoryRegion,\n+    boxed_region: *BoxedRegion\n+}\n+\n+impl LocalHeap {\n+    pub fn new() -> LocalHeap {\n+        unsafe {\n+            // Don't need synchronization for the single-threaded local heap\n+            let synchronized = false as uintptr_t;\n+            // XXX: These usually come from the environment\n+            let detailed_leaks = false as uintptr_t;\n+            let poison_on_free = false as uintptr_t;\n+            let region = rust_new_memory_region(synchronized, detailed_leaks, poison_on_free);\n+            assert!(region.is_not_null());\n+            let boxed = rust_new_boxed_region(region, poison_on_free);\n+            assert!(boxed.is_not_null());\n+            LocalHeap {\n+                memory_region: region,\n+                boxed_region: boxed\n+            }\n+        }\n+    }\n+\n+    pub fn alloc(&mut self, td: *TypeDesc, size: uint) -> *OpaqueBox {\n+        unsafe {\n+            return rust_boxed_region_malloc(self.boxed_region, td, size as size_t);\n+        }\n+    }\n+\n+    pub fn free(&mut self, box: *OpaqueBox) {\n+        unsafe {\n+            return rust_boxed_region_free(self.boxed_region, box);\n+        }\n+    }\n+}\n+\n+impl Drop for LocalHeap {\n+    fn finalize(&self) {\n+        unsafe {\n+            rust_delete_boxed_region(self.boxed_region);\n+            rust_delete_memory_region(self.memory_region);\n+        }\n+    }\n+}\n+\n+extern {\n+    fn rust_new_memory_region(synchronized: uintptr_t,\n+                               detailed_leaks: uintptr_t,\n+                               poison_on_free: uintptr_t) -> *MemoryRegion;\n+    fn rust_delete_memory_region(region: *MemoryRegion);\n+    fn rust_new_boxed_region(region: *MemoryRegion,\n+                             poison_on_free: uintptr_t) -> *BoxedRegion;\n+    fn rust_delete_boxed_region(region: *BoxedRegion);\n+    fn rust_boxed_region_malloc(region: *BoxedRegion,\n+                                td: *TypeDesc,\n+                                size: size_t) -> *OpaqueBox;\n+    fn rust_boxed_region_free(region: *BoxedRegion, box: *OpaqueBox);\n+}\n+"}, {"sha": "b9d99283e14f21eed55754e0c5f3da132ecc0b8a", "filename": "src/libcore/rt/local_services.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5e437a28dd85b8a7523af9212a9a1100ea725/src%2Flibcore%2Frt%2Flocal_services.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5e437a28dd85b8a7523af9212a9a1100ea725/src%2Flibcore%2Frt%2Flocal_services.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Flocal_services.rs?ref=d7f5e437a28dd85b8a7523af9212a9a1100ea725", "patch": "@@ -20,6 +20,7 @@\n \n use prelude::*;\n use super::sched::{Task, local_sched};\n+use super::local_heap::LocalHeap;\n \n pub struct LocalServices {\n     heap: LocalHeap,\n@@ -29,7 +30,6 @@ pub struct LocalServices {\n     unwinder: Unwinder\n }\n \n-pub struct LocalHeap;\n pub struct GarbageCollector;\n pub struct LocalStorage;\n pub struct Logger;\n@@ -38,7 +38,7 @@ pub struct Unwinder;\n impl LocalServices {\n     pub fn new() -> LocalServices {\n         LocalServices {\n-            heap: LocalHeap,\n+            heap: LocalHeap::new(),\n             gc: GarbageCollector,\n             storage: LocalStorage,\n             logger: Logger,\n@@ -61,3 +61,18 @@ pub fn borrow_local_services(f: &fn(&mut LocalServices)) {\n         }\n     }\n }\n+\n+#[cfg(test)]\n+mod test {\n+    use rt::test::*;\n+\n+    #[test]\n+    fn local_heap() {\n+        do run_in_newsched_task() {\n+            let a = @5;\n+            let b = a;\n+            assert!(*a == 5);\n+            assert!(*b == 5);\n+        }\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "4a767d61f74445be8d599238443509baaa2f3425", "filename": "src/libcore/rt/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5e437a28dd85b8a7523af9212a9a1100ea725/src%2Flibcore%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5e437a28dd85b8a7523af9212a9a1100ea725/src%2Flibcore%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fmod.rs?ref=d7f5e437a28dd85b8a7523af9212a9a1100ea725", "patch": "@@ -49,6 +49,7 @@ mod context;\n mod thread;\n pub mod env;\n pub mod local_services;\n+mod local_heap;\n \n /// Tools for testing the runtime\n #[cfg(test)]"}, {"sha": "0bf1ad36a1faf2f216952bfde24b5156145d6fc0", "filename": "src/libcore/unstable/lang.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5e437a28dd85b8a7523af9212a9a1100ea725/src%2Flibcore%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5e437a28dd85b8a7523af9212a9a1100ea725/src%2Flibcore%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Flang.rs?ref=d7f5e437a28dd85b8a7523af9212a9a1100ea725", "patch": "@@ -17,6 +17,8 @@ use str;\n use sys;\n use unstable::exchange_alloc;\n use cast::transmute;\n+use rt::{context, OldTaskContext};\n+use rt::local_services::borrow_local_services;\n \n #[allow(non_camel_case_types)]\n pub type rust_task = c_void;\n@@ -81,7 +83,18 @@ pub unsafe fn exchange_free(ptr: *c_char) {\n #[lang=\"malloc\"]\n #[inline(always)]\n pub unsafe fn local_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n-    return rustrt::rust_upcall_malloc(td, size);\n+    match context() {\n+        OldTaskContext => {\n+            return rustrt::rust_upcall_malloc(td, size);\n+        }\n+        _ => {\n+            let mut alloc = ::ptr::null();\n+            do borrow_local_services |srv| {\n+                alloc = srv.heap.alloc(td as *c_void, size as uint) as *c_char;\n+            }\n+            return alloc;\n+        }\n+    }\n }\n \n // NB: Calls to free CANNOT be allowed to fail, as throwing an exception from\n@@ -90,7 +103,16 @@ pub unsafe fn local_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n #[lang=\"free\"]\n #[inline(always)]\n pub unsafe fn local_free(ptr: *c_char) {\n-    rustrt::rust_upcall_free(ptr);\n+    match context() {\n+        OldTaskContext => {\n+            rustrt::rust_upcall_free(ptr);\n+        }\n+        _ => {\n+            do borrow_local_services |srv| {\n+                srv.heap.free(ptr as *c_void);\n+            }\n+        }\n+    }\n }\n \n #[lang=\"borrow_as_imm\"]"}, {"sha": "a49b52bffe15366be65ad230daea67387d298585", "filename": "src/rt/boxed_region.cpp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5e437a28dd85b8a7523af9212a9a1100ea725/src%2Frt%2Fboxed_region.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5e437a28dd85b8a7523af9212a9a1100ea725/src%2Frt%2Fboxed_region.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fboxed_region.cpp?ref=d7f5e437a28dd85b8a7523af9212a9a1100ea725", "patch": "@@ -27,11 +27,11 @@ rust_opaque_box *boxed_region::malloc(type_desc *td, size_t body_size) {\n     if (live_allocs) live_allocs->prev = box;\n     live_allocs = box;\n \n-    LOG(rust_get_current_task(), box,\n+    /*LOG(rust_get_current_task(), box,\n         \"@malloc()=%p with td %p, size %lu==%lu+%lu, \"\n         \"align %lu, prev %p, next %p\\n\",\n         box, td, total_size, sizeof(rust_opaque_box), body_size,\n-        td->align, box->prev, box->next);\n+        td->align, box->prev, box->next);*/\n \n     return box;\n }\n@@ -50,9 +50,9 @@ rust_opaque_box *boxed_region::realloc(rust_opaque_box *box,\n     if (new_box->next) new_box->next->prev = new_box;\n     if (live_allocs == box) live_allocs = new_box;\n \n-    LOG(rust_get_current_task(), box,\n+    /*LOG(rust_get_current_task(), box,\n         \"@realloc()=%p with orig=%p, size %lu==%lu+%lu\",\n-        new_box, box, total_size, sizeof(rust_opaque_box), new_size);\n+        new_box, box, total_size, sizeof(rust_opaque_box), new_size);*/\n \n     return new_box;\n }\n@@ -74,9 +74,9 @@ void boxed_region::free(rust_opaque_box *box) {\n     // double frees (kind of).\n     assert(box->td != NULL);\n \n-    LOG(rust_get_current_task(), box,\n+    /*LOG(rust_get_current_task(), box,\n         \"@free(%p) with td %p, prev %p, next %p\\n\",\n-        box, box->td, box->prev, box->next);\n+        box, box->td, box->prev, box->next);*/\n \n     if (box->prev) box->prev->next = box->next;\n     if (box->next) box->next->prev = box->prev;"}, {"sha": "b8749b8f73d81ab38d8d7ffb3c6ecb107869ede6", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5e437a28dd85b8a7523af9212a9a1100ea725/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5e437a28dd85b8a7523af9212a9a1100ea725/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=d7f5e437a28dd85b8a7523af9212a9a1100ea725", "patch": "@@ -851,6 +851,41 @@ rust_initialize_global_state() {\n     }\n }\n \n+extern \"C\" CDECL memory_region*\n+rust_new_memory_region(uintptr_t synchronized,\n+                       uintptr_t detailed_leaks,\n+                       uintptr_t poison_on_free) {\n+    return new memory_region((bool)synchronized,\n+                             (bool)detailed_leaks,\n+                             (bool)poison_on_free);\n+}\n+\n+extern \"C\" CDECL void\n+rust_delete_memory_region(memory_region *region) {\n+    delete region;\n+}\n+\n+extern \"C\" CDECL boxed_region*\n+rust_new_boxed_region(memory_region *region,\n+                      uintptr_t poison_on_free) {\n+    return new boxed_region(region, poison_on_free);\n+}\n+\n+extern \"C\" CDECL void\n+rust_delete_boxed_region(boxed_region *region) {\n+    delete region;\n+}\n+\n+extern \"C\" CDECL rust_opaque_box*\n+rust_boxed_region_malloc(boxed_region *region, type_desc *td, size_t size) {\n+    return region->malloc(td, size);\n+}\n+\n+extern \"C\" CDECL void\n+rust_boxed_region_free(boxed_region *region, rust_opaque_box *box) {\n+    region->free(box);\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "9aa801567836049b38191dfb904848633bbac709", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5e437a28dd85b8a7523af9212a9a1100ea725/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5e437a28dd85b8a7523af9212a9a1100ea725/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=d7f5e437a28dd85b8a7523af9212a9a1100ea725", "patch": "@@ -222,3 +222,9 @@ rust_uv_free_ip6_addr\n rust_call_nullary_fn\n rust_initialize_global_state\n rust_dbg_next_port\n+rust_new_memory_region\n+rust_delete_memory_region\n+rust_new_boxed_region\n+rust_delete_boxed_region\n+rust_boxed_region_malloc\n+rust_boxed_region_free"}]}