{"sha": "91986fa9339f701d329cf1c728b9df086ac31f43", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxOTg2ZmE5MzM5ZjcwMWQzMjljZjFjNzI4YjlkZjA4NmFjMzFmNDM=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-09T04:56:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-06-09T04:56:39Z"}, "message": "Merge pull request #2836 from mati865/upcoming_breakage\n\nUpcoming breakage", "tree": {"sha": "66b06db84e085dcb9d651e26a53da38fe85dc59f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66b06db84e085dcb9d651e26a53da38fe85dc59f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91986fa9339f701d329cf1c728b9df086ac31f43", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbG14HCRBK7hj4Ov3rIwAAdHIIAJaQNtCo7FiMp7w51myWYpCa\naUIy09FcCYCD2pLysh+K90MgD68Wj+zpZPv5ZjBcr718l81+yuf4mIBC26fQjvKO\ncoLK9gtPJ7GT0ePXGaYc1ayiw87L2UMhcUcjMBFtXa3drOoCo6dZMqHlAjaYKKhT\nICcBtQ91m87jKyGd4Pe4iEfe12q5rsBEoSu8BZZuJFOXw1Ui+0ZSpIHSCsdgfdOP\nY6H9lI7Ghg5oCCFL9WbQGTH/W6yNLFE9WCDyh/e/NhvMGekv2UBqOzaYc3OhMyp8\nXd1W20XP2zorcSRPd0zcFyobGYyMB8OjiQtcda+2EpNqFBx6nDmhIpxfJwbvq8A=\n=PKMF\n-----END PGP SIGNATURE-----\n", "payload": "tree 66b06db84e085dcb9d651e26a53da38fe85dc59f\nparent d68b8cea15fa80ebbd99e4b1dd2c7e25fc6c7c9c\nparent b45fb35ec4cff21d027fa25dd31b5045867ccf03\nauthor Oliver Schneider <github35764891676564198441@oli-obk.de> 1528520199 +0200\ncommitter GitHub <noreply@github.com> 1528520199 +0200\n\nMerge pull request #2836 from mati865/upcoming_breakage\n\nUpcoming breakage"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91986fa9339f701d329cf1c728b9df086ac31f43", "html_url": "https://github.com/rust-lang/rust/commit/91986fa9339f701d329cf1c728b9df086ac31f43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91986fa9339f701d329cf1c728b9df086ac31f43/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d68b8cea15fa80ebbd99e4b1dd2c7e25fc6c7c9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d68b8cea15fa80ebbd99e4b1dd2c7e25fc6c7c9c", "html_url": "https://github.com/rust-lang/rust/commit/d68b8cea15fa80ebbd99e4b1dd2c7e25fc6c7c9c"}, {"sha": "b45fb35ec4cff21d027fa25dd31b5045867ccf03", "url": "https://api.github.com/repos/rust-lang/rust/commits/b45fb35ec4cff21d027fa25dd31b5045867ccf03", "html_url": "https://github.com/rust-lang/rust/commit/b45fb35ec4cff21d027fa25dd31b5045867ccf03"}], "stats": {"total": 185, "additions": 59, "deletions": 126}, "files": [{"sha": "0288176f436b2eb961a4d9ef80aff897994d3fe4", "filename": "clippy_lints/src/approx_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91986fa9339f701d329cf1c728b9df086ac31f43/clippy_lints%2Fsrc%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91986fa9339f701d329cf1c728b9df086ac31f43/clippy_lints%2Fsrc%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fapprox_const.rs?ref=91986fa9339f701d329cf1c728b9df086ac31f43", "patch": "@@ -1,9 +1,9 @@\n+use crate::utils::span_lint;\n use rustc::hir::*;\n use rustc::lint::*;\n use std::f64::consts as f64;\n use syntax::ast::{FloatTy, Lit, LitKind};\n use syntax::symbol;\n-use crate::utils::span_lint;\n \n /// **What it does:** Checks for floating point literals that approximate\n /// constants which are defined in"}, {"sha": "a9ccc336a199dfad065431742dccfbbe73b37ab9", "filename": "clippy_lints/src/arithmetic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91986fa9339f701d329cf1c728b9df086ac31f43/clippy_lints%2Fsrc%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91986fa9339f701d329cf1c728b9df086ac31f43/clippy_lints%2Fsrc%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farithmetic.rs?ref=91986fa9339f701d329cf1c728b9df086ac31f43", "patch": "@@ -1,7 +1,7 @@\n+use crate::utils::span_lint;\n use rustc::hir;\n use rustc::lint::*;\n use syntax::codemap::Span;\n-use crate::utils::span_lint;\n \n /// **What it does:** Checks for plain integer arithmetic.\n ///"}, {"sha": "77aa5e834258d685851e4f2a4d4aa6d995fbffe0", "filename": "clippy_lints/src/array_indexing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91986fa9339f701d329cf1c728b9df086ac31f43/clippy_lints%2Fsrc%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91986fa9339f701d329cf1c728b9df086ac31f43/clippy_lints%2Fsrc%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farray_indexing.rs?ref=91986fa9339f701d329cf1c728b9df086ac31f43", "patch": "@@ -1,10 +1,10 @@\n use crate::consts::{constant, Constant};\n+use crate::utils::higher::Range;\n+use crate::utils::{self, higher};\n use rustc::hir;\n use rustc::lint::*;\n use rustc::ty;\n use syntax::ast::RangeLimits;\n-use crate::utils::higher::Range;\n-use crate::utils::{self, higher};\n \n /// **What it does:** Checks for out of bounds array indexing with a constant\n /// index."}, {"sha": "ba405610c9024b25c917f436a23fea5e55d19722", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91986fa9339f701d329cf1c728b9df086ac31f43/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91986fa9339f701d329cf1c728b9df086ac31f43/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=91986fa9339f701d329cf1c728b9df086ac31f43", "patch": "@@ -1,9 +1,9 @@\n+use crate::utils::{get_trait_def_id, implements_trait, snippet_opt, span_lint_and_then, SpanlessEq};\n+use crate::utils::{higher, sugg};\n use rustc::hir;\n use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc::lint::*;\n use syntax::ast;\n-use crate::utils::{get_trait_def_id, implements_trait, snippet_opt, span_lint_and_then, SpanlessEq};\n-use crate::utils::{higher, sugg};\n \n /// **What it does:** Checks for compound assignment operations (`+=` and\n /// similar)."}, {"sha": "830c8985660bf9b5f44b850fe6a48f7106a4f8ac", "filename": "src/driver.rs", "status": "modified", "additions": 46, "deletions": 112, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/91986fa9339f701d329cf1c728b9df086ac31f43/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91986fa9339f701d329cf1c728b9df086ac31f43/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=91986fa9339f701d329cf1c728b9df086ac31f43", "patch": "@@ -12,117 +12,8 @@ extern crate rustc_errors;\n extern crate rustc_plugin;\n extern crate syntax;\n \n-use rustc::session::config::{ErrorOutputType, Input};\n-use rustc::session::{config, Session};\n-use rustc_codegen_utils::codegen_backend::CodegenBackend;\n-use rustc_driver::{driver, Compilation, CompilerCalls, RustcDefaultCalls};\n-use std::path::PathBuf;\n+use rustc_driver::{driver::CompileController, Compilation};\n use std::process::Command;\n-use syntax::ast;\n-\n-struct ClippyCompilerCalls {\n-    default: RustcDefaultCalls,\n-    run_lints: bool,\n-}\n-\n-impl ClippyCompilerCalls {\n-    fn new(run_lints: bool) -> Self {\n-        Self {\n-            default: RustcDefaultCalls,\n-            run_lints,\n-        }\n-    }\n-}\n-\n-impl<'a> CompilerCalls<'a> for ClippyCompilerCalls {\n-    fn early_callback(\n-        &mut self,\n-        matches: &getopts::Matches,\n-        sopts: &config::Options,\n-        cfg: &ast::CrateConfig,\n-        descriptions: &rustc_errors::registry::Registry,\n-        output: ErrorOutputType,\n-    ) -> Compilation {\n-        self.default.early_callback(matches, sopts, cfg, descriptions, output)\n-    }\n-    fn no_input(\n-        &mut self,\n-        matches: &getopts::Matches,\n-        sopts: &config::Options,\n-        cfg: &ast::CrateConfig,\n-        odir: &Option<PathBuf>,\n-        ofile: &Option<PathBuf>,\n-        descriptions: &rustc_errors::registry::Registry,\n-    ) -> Option<(Input, Option<PathBuf>)> {\n-        self.default.no_input(matches, sopts, cfg, odir, ofile, descriptions)\n-    }\n-    fn late_callback(\n-        &mut self,\n-        trans_crate: &CodegenBackend,\n-        matches: &getopts::Matches,\n-        sess: &Session,\n-        crate_stores: &rustc::middle::cstore::CrateStore,\n-        input: &Input,\n-        odir: &Option<PathBuf>,\n-        ofile: &Option<PathBuf>,\n-    ) -> Compilation {\n-        self.default\n-            .late_callback(trans_crate, matches, sess, crate_stores, input, odir, ofile)\n-    }\n-    fn build_controller(&mut self, sess: &Session, matches: &getopts::Matches) -> driver::CompileController<'a> {\n-        let mut control = self.default.build_controller(sess, matches);\n-\n-        if self.run_lints {\n-            let old = std::mem::replace(&mut control.after_parse.callback, box |_| {});\n-            control.after_parse.callback = Box::new(move |state| {\n-                {\n-                    let mut registry = rustc_plugin::registry::Registry::new(\n-                        state.session,\n-                        state\n-                            .krate\n-                            .as_ref()\n-                            .expect(\n-                                \"at this compilation stage \\\n-                                 the crate must be parsed\",\n-                            )\n-                            .span,\n-                    );\n-                    registry.args_hidden = Some(Vec::new());\n-                    clippy_lints::register_plugins(&mut registry);\n-\n-                    let rustc_plugin::registry::Registry {\n-                        early_lint_passes,\n-                        late_lint_passes,\n-                        lint_groups,\n-                        llvm_passes,\n-                        attributes,\n-                        ..\n-                    } = registry;\n-                    let sess = &state.session;\n-                    let mut ls = sess.lint_store.borrow_mut();\n-                    for pass in early_lint_passes {\n-                        ls.register_early_pass(Some(sess), true, pass);\n-                    }\n-                    for pass in late_lint_passes {\n-                        ls.register_late_pass(Some(sess), true, pass);\n-                    }\n-\n-                    for (name, to) in lint_groups {\n-                        ls.register_group(Some(sess), true, name, to);\n-                    }\n-\n-                    sess.plugin_llvm_passes.borrow_mut().extend(llvm_passes);\n-                    sess.plugin_attributes.borrow_mut().extend(attributes);\n-                }\n-                old(state);\n-            });\n-\n-            control.compilation_done.stop = Compilation::Stop;\n-        }\n-\n-        control\n-    }\n-}\n \n #[allow(print_stdout)]\n fn show_version() {\n@@ -198,6 +89,49 @@ pub fn main() {\n         }\n     }\n \n-    let mut ccc = ClippyCompilerCalls::new(clippy_enabled);\n-    rustc_driver::run(move || rustc_driver::run_compiler(&args, &mut ccc, None, None));\n+    let mut controller = CompileController::basic();\n+    if clippy_enabled {\n+        controller.after_parse.callback = Box::new(move |state| {\n+            let mut registry = rustc_plugin::registry::Registry::new(\n+                state.session,\n+                state\n+                    .krate\n+                    .as_ref()\n+                    .expect(\n+                        \"at this compilation stage \\\n+                         the crate must be parsed\",\n+                    )\n+                    .span,\n+            );\n+            registry.args_hidden = Some(Vec::new());\n+            clippy_lints::register_plugins(&mut registry);\n+\n+            let rustc_plugin::registry::Registry {\n+                early_lint_passes,\n+                late_lint_passes,\n+                lint_groups,\n+                llvm_passes,\n+                attributes,\n+                ..\n+            } = registry;\n+            let sess = &state.session;\n+            let mut ls = sess.lint_store.borrow_mut();\n+            for pass in early_lint_passes {\n+                ls.register_early_pass(Some(sess), true, pass);\n+            }\n+            for pass in late_lint_passes {\n+                ls.register_late_pass(Some(sess), true, pass);\n+            }\n+\n+            for (name, to) in lint_groups {\n+                ls.register_group(Some(sess), true, name, to);\n+            }\n+\n+            sess.plugin_llvm_passes.borrow_mut().extend(llvm_passes);\n+            sess.plugin_attributes.borrow_mut().extend(attributes);\n+        });\n+    }\n+    controller.compilation_done.stop = Compilation::Stop;\n+\n+    rustc_driver::run_compiler(&args, Box::new(controller), None, None);\n }"}, {"sha": "da5c5bd3227b849d40170f30ac54133efe46470e", "filename": "tests/compile-test.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/91986fa9339f701d329cf1c728b9df086ac31f43/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91986fa9339f701d329cf1c728b9df086ac31f43/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=91986fa9339f701d329cf1c728b9df086ac31f43", "patch": "@@ -3,10 +3,10 @@\n extern crate compiletest_rs as compiletest;\n extern crate test;\n \n-use std::io;\n+use std::env::{set_var, var};\n use std::ffi::OsStr;\n use std::fs;\n-use std::env::{set_var, var};\n+use std::io;\n use std::path::{Path, PathBuf};\n \n fn clippy_driver_path() -> PathBuf {\n@@ -93,12 +93,11 @@ fn run_ui_toml_tests(config: &compiletest::Config, mut tests: Vec<test::TestDesc\n                 relative_dir: dir_path.file_name().unwrap().into(),\n             };\n             let test_name = compiletest::make_test_name(&config, &paths);\n-            let index = tests.iter()\n+            let index = tests\n+                .iter()\n                 .position(|test| test.desc.name == test_name)\n                 .expect(\"The test should be in there\");\n-            result &= test::run_tests_console(\n-                &opts,\n-                vec![tests.swap_remove(index)])?;\n+            result &= test::run_tests_console(&opts, vec![tests.swap_remove(index)])?;\n         }\n     }\n     Ok(result)\n@@ -111,11 +110,11 @@ fn run_ui_toml() {\n \n     let res = run_ui_toml_tests(&config, tests);\n     match res {\n-        Ok(true) => {}\n+        Ok(true) => {},\n         Ok(false) => panic!(\"Some tests failed\"),\n         Err(e) => {\n             println!(\"I/O failure during tests: {:?}\", e);\n-        }\n+        },\n     }\n }\n "}]}