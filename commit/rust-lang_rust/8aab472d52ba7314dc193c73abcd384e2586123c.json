{"sha": "8aab472d52ba7314dc193c73abcd384e2586123c", "node_id": "C_kwDOAAsO6NoAKDhhYWI0NzJkNTJiYTczMTRkYzE5M2M3M2FiY2QzODRlMjU4NjEyM2M", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-25T15:19:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-25T15:19:31Z"}, "message": "Auto merge of #98486 - matthiaskrgr:rollup-u7m508x, r=matthiaskrgr\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #96412 (Windows: Iterative `remove_dir_all`)\n - #98126 (Mitigate MMIO stale data vulnerability)\n - #98149 (Set relocation_model to Pic on emscripten target)\n - #98194 (Leak pthread_{mutex,rwlock}_t if it's dropped while locked.)\n - #98298 (Point to type parameter definition when not finding variant, method and associated item)\n - #98311 (Reverse folder hierarchy)\n - #98401 (Add tracking issues to `--extern` option docs.)\n - #98429 (Use correct substs in enum discriminant cast)\n - #98431 (Suggest defining variable as mutable on `&mut _` type mismatch in pats)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "1a3abd6bf4f3e1e2aea0bede9472033492f83c56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a3abd6bf4f3e1e2aea0bede9472033492f83c56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8aab472d52ba7314dc193c73abcd384e2586123c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8aab472d52ba7314dc193c73abcd384e2586123c", "html_url": "https://github.com/rust-lang/rust/commit/8aab472d52ba7314dc193c73abcd384e2586123c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8aab472d52ba7314dc193c73abcd384e2586123c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00ce47209dfdd8ef8871c6ec804f0e0e04d10702", "url": "https://api.github.com/repos/rust-lang/rust/commits/00ce47209dfdd8ef8871c6ec804f0e0e04d10702", "html_url": "https://github.com/rust-lang/rust/commit/00ce47209dfdd8ef8871c6ec804f0e0e04d10702"}, {"sha": "1f923c2a415288c4122800e0862e2c478a2ad9c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f923c2a415288c4122800e0862e2c478a2ad9c9", "html_url": "https://github.com/rust-lang/rust/commit/1f923c2a415288c4122800e0862e2c478a2ad9c9"}], "stats": {"total": 1137, "additions": 766, "deletions": 371}, "files": [{"sha": "1f3cb401314d6666141ad46cc736d3811c8f7ca5", "filename": "compiler/rustc_infer/src/infer/resolve.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -92,7 +92,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticRegionResolver<'a, 'tcx> {\n                     .borrow_mut()\n                     .unwrap_region_constraints()\n                     .opportunistic_resolve_var(rid);\n-                self.tcx().reuse_or_mk_region(r, ty::ReVar(resolved))\n+                TypeFolder::tcx(self).reuse_or_mk_region(r, ty::ReVar(resolved))\n             }\n             _ => r,\n         }\n@@ -179,15 +179,13 @@ struct FullTypeResolver<'a, 'tcx> {\n     infcx: &'a InferCtxt<'a, 'tcx>,\n }\n \n-impl<'a, 'tcx> TypeFolder<'tcx> for FullTypeResolver<'a, 'tcx> {\n+impl<'a, 'tcx> FallibleTypeFolder<'tcx> for FullTypeResolver<'a, 'tcx> {\n     type Error = FixupError<'tcx>;\n \n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n-}\n \n-impl<'a, 'tcx> FallibleTypeFolder<'tcx> for FullTypeResolver<'a, 'tcx> {\n     fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {\n         if !t.needs_infer() {\n             Ok(t) // micro-optimize -- if there is nothing in this type that this fold affects..."}, {"sha": "b1b8bc13e2f1320a1578e4a8e3001f9232efe309", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 34, "deletions": 51, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -86,7 +86,7 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     /// A convenient alternative to `try_fold_with` for use with infallible\n     /// folders. Do not override this method, to ensure coherence with\n     /// `try_fold_with`.\n-    fn fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {\n+    fn fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n         self.try_fold_with(folder).into_ok()\n     }\n \n@@ -216,7 +216,7 @@ pub trait TypeSuperFoldable<'tcx>: TypeFoldable<'tcx> {\n     /// A convenient alternative to `try_super_fold_with` for use with\n     /// infallible folders. Do not override this method, to ensure coherence\n     /// with `try_super_fold_with`.\n-    fn super_fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n         self.try_super_fold_with(folder).into_ok()\n     }\n \n@@ -229,70 +229,46 @@ pub trait TypeSuperFoldable<'tcx>: TypeFoldable<'tcx> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;\n }\n \n-/// This trait is implemented for every folding traversal. There is a fold\n-/// method defined for every type of interest. Each such method has a default\n-/// that does an \"identity\" fold. Implementations of these methods often fall\n-/// back to a `super_fold_with` method if the primary argument doesn't\n-/// satisfy a particular condition.\n+/// This trait is implemented for every infallible folding traversal. There is\n+/// a fold method defined for every type of interest. Each such method has a\n+/// default that does an \"identity\" fold. Implementations of these methods\n+/// often fall back to a `super_fold_with` method if the primary argument\n+/// doesn't satisfy a particular condition.\n ///\n-/// If this folder is fallible (and therefore its [`Error`][`TypeFolder::Error`]\n-/// associated type is something other than the default `!`) then\n-/// [`FallibleTypeFolder`] should be implemented manually. Otherwise,\n-/// a blanket implementation of [`FallibleTypeFolder`] will defer to\n+/// A blanket implementation of [`FallibleTypeFolder`] will defer to\n /// the infallible methods of this trait to ensure that the two APIs\n /// are coherent.\n-pub trait TypeFolder<'tcx>: Sized {\n-    type Error = !;\n-\n+pub trait TypeFolder<'tcx>: FallibleTypeFolder<'tcx, Error = !> {\n     fn tcx<'a>(&'a self) -> TyCtxt<'tcx>;\n \n     fn fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Binder<'tcx, T>\n     where\n         T: TypeFoldable<'tcx>,\n-        Self: TypeFolder<'tcx, Error = !>,\n     {\n         t.super_fold_with(self)\n     }\n \n-    fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx>\n-    where\n-        Self: TypeFolder<'tcx, Error = !>,\n-    {\n+    fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n         t.super_fold_with(self)\n     }\n \n-    fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx>\n-    where\n-        Self: TypeFolder<'tcx, Error = !>,\n-    {\n+    fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         r.super_fold_with(self)\n     }\n \n-    fn fold_const(&mut self, c: ty::Const<'tcx>) -> ty::Const<'tcx>\n-    where\n-        Self: TypeFolder<'tcx, Error = !>,\n-    {\n+    fn fold_const(&mut self, c: ty::Const<'tcx>) -> ty::Const<'tcx> {\n         c.super_fold_with(self)\n     }\n \n-    fn fold_unevaluated(&mut self, uv: ty::Unevaluated<'tcx>) -> ty::Unevaluated<'tcx>\n-    where\n-        Self: TypeFolder<'tcx, Error = !>,\n-    {\n+    fn fold_unevaluated(&mut self, uv: ty::Unevaluated<'tcx>) -> ty::Unevaluated<'tcx> {\n         uv.super_fold_with(self)\n     }\n \n-    fn fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> ty::Predicate<'tcx>\n-    where\n-        Self: TypeFolder<'tcx, Error = !>,\n-    {\n+    fn fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> ty::Predicate<'tcx> {\n         p.super_fold_with(self)\n     }\n \n-    fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx>\n-    where\n-        Self: TypeFolder<'tcx, Error = !>,\n-    {\n+    fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {\n         bug!(\"most type folders should not be folding MIR datastructures: {:?}\", c)\n     }\n }\n@@ -304,7 +280,11 @@ pub trait TypeFolder<'tcx>: Sized {\n /// A blanket implementation of this trait (that defers to the relevant\n /// method of [`TypeFolder`]) is provided for all infallible folders in\n /// order to ensure the two APIs are coherent.\n-pub trait FallibleTypeFolder<'tcx>: TypeFolder<'tcx> {\n+pub trait FallibleTypeFolder<'tcx>: Sized {\n+    type Error;\n+\n+    fn tcx<'a>(&'a self) -> TyCtxt<'tcx>;\n+\n     fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>\n     where\n         T: TypeFoldable<'tcx>,\n@@ -350,45 +330,48 @@ pub trait FallibleTypeFolder<'tcx>: TypeFolder<'tcx> {\n // delegates to infallible methods to ensure coherence.\n impl<'tcx, F> FallibleTypeFolder<'tcx> for F\n where\n-    F: TypeFolder<'tcx, Error = !>,\n+    F: TypeFolder<'tcx>,\n {\n-    fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>\n+    type Error = !;\n+\n+    fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n+        TypeFolder::tcx(self)\n+    }\n+\n+    fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, !>\n     where\n         T: TypeFoldable<'tcx>,\n     {\n         Ok(self.fold_binder(t))\n     }\n \n-    fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {\n+    fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, !> {\n         Ok(self.fold_ty(t))\n     }\n \n-    fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {\n+    fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, !> {\n         Ok(self.fold_region(r))\n     }\n \n-    fn try_fold_const(&mut self, c: ty::Const<'tcx>) -> Result<ty::Const<'tcx>, Self::Error> {\n+    fn try_fold_const(&mut self, c: ty::Const<'tcx>) -> Result<ty::Const<'tcx>, !> {\n         Ok(self.fold_const(c))\n     }\n \n     fn try_fold_unevaluated(\n         &mut self,\n         c: ty::Unevaluated<'tcx>,\n-    ) -> Result<ty::Unevaluated<'tcx>, Self::Error> {\n+    ) -> Result<ty::Unevaluated<'tcx>, !> {\n         Ok(self.fold_unevaluated(c))\n     }\n \n-    fn try_fold_predicate(\n-        &mut self,\n-        p: ty::Predicate<'tcx>,\n-    ) -> Result<ty::Predicate<'tcx>, Self::Error> {\n+    fn try_fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> Result<ty::Predicate<'tcx>, !> {\n         Ok(self.fold_predicate(p))\n     }\n \n     fn try_fold_mir_const(\n         &mut self,\n         c: mir::ConstantKind<'tcx>,\n-    ) -> Result<mir::ConstantKind<'tcx>, Self::Error> {\n+    ) -> Result<mir::ConstantKind<'tcx>, !> {\n         Ok(self.fold_mir_const(c))\n     }\n }"}, {"sha": "66a0a192a87c179a35ed2a3162f937bb59c611bd", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -228,15 +228,13 @@ impl<'tcx> TryNormalizeAfterErasingRegionsFolder<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFolder<'tcx> for TryNormalizeAfterErasingRegionsFolder<'tcx> {\n+impl<'tcx> FallibleTypeFolder<'tcx> for TryNormalizeAfterErasingRegionsFolder<'tcx> {\n     type Error = NormalizationError<'tcx>;\n \n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n-}\n \n-impl<'tcx> FallibleTypeFolder<'tcx> for TryNormalizeAfterErasingRegionsFolder<'tcx> {\n     fn try_fold_ty(&mut self, ty: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {\n         match self.try_normalize_generic_arg_after_erasing_regions(ty.into()) {\n             Ok(t) => Ok(t.expect_ty()),"}, {"sha": "1417c8a511c24f8e0ffd784e3e9e0e8f2dc53530", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -705,7 +705,7 @@ impl<'a, 'tcx> SubstFolder<'a, 'tcx> {\n             return val;\n         }\n \n-        let result = ty::fold::shift_vars(self.tcx(), val, self.binders_passed);\n+        let result = ty::fold::shift_vars(TypeFolder::tcx(self), val, self.binders_passed);\n         debug!(\"shift_vars: shifted result = {:?}\", result);\n \n         result"}, {"sha": "08b66d0abc70241e3b01132f75e85dd6fb51437d", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 94, "deletions": 92, "changes": 186, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -1,3 +1,4 @@\n+use crate::thir::cx::region::Scope;\n use crate::thir::cx::Cx;\n use crate::thir::util::UserAnnotatedTyHelpers;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n@@ -158,6 +159,98 @@ impl<'tcx> Cx<'tcx> {\n         Expr { temp_lifetime, ty: adjustment.target, span, kind }\n     }\n \n+    /// Lowers a cast expression.\n+    ///\n+    /// Dealing with user type annotations is left to the caller.\n+    fn mirror_expr_cast(\n+        &mut self,\n+        source: &'tcx hir::Expr<'tcx>,\n+        temp_lifetime: Option<Scope>,\n+        span: Span,\n+    ) -> ExprKind<'tcx> {\n+        let tcx = self.tcx;\n+\n+        // Check to see if this cast is a \"coercion cast\", where the cast is actually done\n+        // using a coercion (or is a no-op).\n+        if self.typeck_results().is_coercion_cast(source.hir_id) {\n+            // Convert the lexpr to a vexpr.\n+            ExprKind::Use { source: self.mirror_expr(source) }\n+        } else if self.typeck_results().expr_ty(source).is_region_ptr() {\n+            // Special cased so that we can type check that the element\n+            // type of the source matches the pointed to type of the\n+            // destination.\n+            ExprKind::Pointer {\n+                source: self.mirror_expr(source),\n+                cast: PointerCast::ArrayToPointer,\n+            }\n+        } else {\n+            // check whether this is casting an enum variant discriminant\n+            // to prevent cycles, we refer to the discriminant initializer\n+            // which is always an integer and thus doesn't need to know the\n+            // enum's layout (or its tag type) to compute it during const eval\n+            // Example:\n+            // enum Foo {\n+            //     A,\n+            //     B = A as isize + 4,\n+            // }\n+            // The correct solution would be to add symbolic computations to miri,\n+            // so we wouldn't have to compute and store the actual value\n+\n+            let hir::ExprKind::Path(ref qpath) = source.kind else {\n+                return ExprKind::Cast { source: self.mirror_expr(source)};\n+            };\n+\n+            let res = self.typeck_results().qpath_res(qpath, source.hir_id);\n+            let ty = self.typeck_results().node_type(source.hir_id);\n+            let ty::Adt(adt_def, substs) = ty.kind() else {\n+                return ExprKind::Cast { source: self.mirror_expr(source)};\n+            };\n+\n+            let Res::Def(DefKind::Ctor(CtorOf::Variant, CtorKind::Const), variant_ctor_id) = res else {\n+                return ExprKind::Cast { source: self.mirror_expr(source)};\n+            };\n+\n+            let idx = adt_def.variant_index_with_ctor_id(variant_ctor_id);\n+            let (discr_did, discr_offset) = adt_def.discriminant_def_for_variant(idx);\n+\n+            use rustc_middle::ty::util::IntTypeExt;\n+            let ty = adt_def.repr().discr_type();\n+            let discr_ty = ty.to_ty(tcx);\n+\n+            let param_env_ty = self.param_env.and(discr_ty);\n+            let size = tcx\n+                .layout_of(param_env_ty)\n+                .unwrap_or_else(|e| {\n+                    panic!(\"could not compute layout for {:?}: {:?}\", param_env_ty, e)\n+                })\n+                .size;\n+\n+            let lit = ScalarInt::try_from_uint(discr_offset as u128, size).unwrap();\n+            let kind = ExprKind::NonHirLiteral { lit, user_ty: None };\n+            let offset = self.thir.exprs.push(Expr { temp_lifetime, ty: discr_ty, span, kind });\n+\n+            let source = match discr_did {\n+                // in case we are offsetting from a computed discriminant\n+                // and not the beginning of discriminants (which is always `0`)\n+                Some(did) => {\n+                    let kind = ExprKind::NamedConst { def_id: did, substs, user_ty: None };\n+                    let lhs =\n+                        self.thir.exprs.push(Expr { temp_lifetime, ty: discr_ty, span, kind });\n+                    let bin = ExprKind::Binary { op: BinOp::Add, lhs, rhs: offset };\n+                    self.thir.exprs.push(Expr {\n+                        temp_lifetime,\n+                        ty: discr_ty,\n+                        span: span,\n+                        kind: bin,\n+                    })\n+                }\n+                None => offset,\n+            };\n+\n+            ExprKind::Cast { source }\n+        }\n+    }\n+\n     fn make_mirror_unadjusted(&mut self, expr: &'tcx hir::Expr<'tcx>) -> Expr<'tcx> {\n         let tcx = self.tcx;\n         let expr_ty = self.typeck_results().expr_ty(expr);\n@@ -604,98 +697,7 @@ impl<'tcx> Cx<'tcx> {\n                     expr, cast_ty.hir_id, user_ty,\n                 );\n \n-                // Check to see if this cast is a \"coercion cast\", where the cast is actually done\n-                // using a coercion (or is a no-op).\n-                let cast = if self.typeck_results().is_coercion_cast(source.hir_id) {\n-                    // Convert the lexpr to a vexpr.\n-                    ExprKind::Use { source: self.mirror_expr(source) }\n-                } else if self.typeck_results().expr_ty(source).is_region_ptr() {\n-                    // Special cased so that we can type check that the element\n-                    // type of the source matches the pointed to type of the\n-                    // destination.\n-                    ExprKind::Pointer {\n-                        source: self.mirror_expr(source),\n-                        cast: PointerCast::ArrayToPointer,\n-                    }\n-                } else {\n-                    // check whether this is casting an enum variant discriminant\n-                    // to prevent cycles, we refer to the discriminant initializer\n-                    // which is always an integer and thus doesn't need to know the\n-                    // enum's layout (or its tag type) to compute it during const eval\n-                    // Example:\n-                    // enum Foo {\n-                    //     A,\n-                    //     B = A as isize + 4,\n-                    // }\n-                    // The correct solution would be to add symbolic computations to miri,\n-                    // so we wouldn't have to compute and store the actual value\n-                    let var = if let hir::ExprKind::Path(ref qpath) = source.kind {\n-                        let res = self.typeck_results().qpath_res(qpath, source.hir_id);\n-                        self.typeck_results().node_type(source.hir_id).ty_adt_def().and_then(\n-                            |adt_def| match res {\n-                                Res::Def(\n-                                    DefKind::Ctor(CtorOf::Variant, CtorKind::Const),\n-                                    variant_ctor_id,\n-                                ) => {\n-                                    let idx = adt_def.variant_index_with_ctor_id(variant_ctor_id);\n-                                    let (d, o) = adt_def.discriminant_def_for_variant(idx);\n-                                    use rustc_middle::ty::util::IntTypeExt;\n-                                    let ty = adt_def.repr().discr_type();\n-                                    let ty = ty.to_ty(tcx);\n-                                    Some((d, o, ty))\n-                                }\n-                                _ => None,\n-                            },\n-                        )\n-                    } else {\n-                        None\n-                    };\n-\n-                    let source = if let Some((did, offset, var_ty)) = var {\n-                        let param_env_ty = self.param_env.and(var_ty);\n-                        let size = tcx\n-                            .layout_of(param_env_ty)\n-                            .unwrap_or_else(|e| {\n-                                panic!(\"could not compute layout for {:?}: {:?}\", param_env_ty, e)\n-                            })\n-                            .size;\n-                        let lit = ScalarInt::try_from_uint(offset as u128, size).unwrap();\n-                        let kind = ExprKind::NonHirLiteral { lit, user_ty: None };\n-                        let offset = self.thir.exprs.push(Expr {\n-                            temp_lifetime,\n-                            ty: var_ty,\n-                            span: expr.span,\n-                            kind,\n-                        });\n-                        match did {\n-                            Some(did) => {\n-                                // in case we are offsetting from a computed discriminant\n-                                // and not the beginning of discriminants (which is always `0`)\n-                                let substs = InternalSubsts::identity_for_item(tcx, did);\n-                                let kind =\n-                                    ExprKind::NamedConst { def_id: did, substs, user_ty: None };\n-                                let lhs = self.thir.exprs.push(Expr {\n-                                    temp_lifetime,\n-                                    ty: var_ty,\n-                                    span: expr.span,\n-                                    kind,\n-                                });\n-                                let bin = ExprKind::Binary { op: BinOp::Add, lhs, rhs: offset };\n-                                self.thir.exprs.push(Expr {\n-                                    temp_lifetime,\n-                                    ty: var_ty,\n-                                    span: expr.span,\n-                                    kind: bin,\n-                                })\n-                            }\n-                            None => offset,\n-                        }\n-                    } else {\n-                        self.mirror_expr(source)\n-                    };\n-\n-                    ExprKind::Cast { source: source }\n-                };\n+                let cast = self.mirror_expr_cast(*source, temp_lifetime, expr.span);\n \n                 if let Some(user_ty) = user_ty {\n                     // NOTE: Creating a new Expr and wrapping a Cast inside of it may be"}, {"sha": "1b94c59b55f09bb20bb5f010a761ff10f025cbc8", "filename": "compiler/rustc_target/src/spec/wasm32_unknown_emscripten.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -1,5 +1,5 @@\n use super::{cvs, wasm_base};\n-use super::{LinkArgs, LinkerFlavor, PanicStrategy, Target, TargetOptions};\n+use super::{LinkArgs, LinkerFlavor, PanicStrategy, RelocModel, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut options = wasm_base::options();\n@@ -26,6 +26,7 @@ pub fn target() -> Target {\n         // functionality, and a .wasm file.\n         exe_suffix: \".js\".into(),\n         linker: None,\n+        relocation_model: RelocModel::Pic,\n         panic_strategy: PanicStrategy::Unwind,\n         no_default_libraries: false,\n         post_link_args,"}, {"sha": "7f15b683fda3e59e3b89fd20736f649da874f3c0", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -12,7 +12,7 @@ use rustc_data_structures::sso::SsoHashMap;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_infer::traits::Normalized;\n use rustc_middle::mir;\n-use rustc_middle::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeFolder, TypeSuperFoldable};\n+use rustc_middle::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeSuperFoldable};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitor};\n \n@@ -162,15 +162,13 @@ struct QueryNormalizer<'cx, 'tcx> {\n     universes: Vec<Option<ty::UniverseIndex>>,\n }\n \n-impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n+impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n     type Error = NoSolution;\n \n     fn tcx<'c>(&'c self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n-}\n \n-impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n     fn try_fold_binder<T: TypeFoldable<'tcx>>(\n         &mut self,\n         t: ty::Binder<'tcx, T>,"}, {"sha": "5684979eab7775f593215b41c9a1ad28000fa928", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -346,19 +346,26 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     );\n                 }\n \n-                if let Some(def) = actual.ty_adt_def() {\n-                    if let Some(full_sp) = tcx.hir().span_if_local(def.did()) {\n-                        let def_sp = tcx.sess.source_map().guess_head_span(full_sp);\n-                        err.span_label(\n-                            def_sp,\n-                            format!(\n-                                \"{} `{}` not found {}\",\n-                                item_kind,\n-                                item_name,\n-                                if def.is_enum() && !is_method { \"here\" } else { \"for this\" }\n-                            ),\n-                        );\n+                let ty_span = match actual.kind() {\n+                    ty::Param(param_type) => {\n+                        let generics = self.tcx.generics_of(self.body_id.owner.to_def_id());\n+                        let type_param = generics.type_param(param_type, self.tcx);\n+                        Some(self.tcx.def_span(type_param.def_id))\n+                    }\n+                    ty::Adt(def, _) if def.did().is_local() => {\n+                        tcx.def_ident_span(def.did()).map(|span| span)\n                     }\n+                    _ => None,\n+                };\n+\n+                if let Some(span) = ty_span {\n+                    err.span_label(\n+                        span,\n+                        format!(\n+                            \"{item_kind} `{item_name}` not found for this {}\",\n+                            actual.prefix_string(self.tcx)\n+                        ),\n+                    );\n                 }\n \n                 if self.is_fn_ty(rcvr_ty, span) {\n@@ -1951,9 +1958,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 )\n             };\n             // Obtain the span for `param` and use it for a structured suggestion.\n-            if let (Some(param), Some(table)) = (param_type, self.in_progress_typeck_results) {\n-                let table_owner = table.borrow().hir_owner;\n-                let generics = self.tcx.generics_of(table_owner.to_def_id());\n+            if let Some(param) = param_type {\n+                let generics = self.tcx.generics_of(self.body_id.owner.to_def_id());\n                 let type_param = generics.type_param(param, self.tcx);\n                 let hir = self.tcx.hir();\n                 if let Some(def_id) = type_param.def_id.as_local() {"}, {"sha": "e1ec9f13cd16605b666316116cfd8769e0e2ad97", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -663,6 +663,46 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 ast::Mutability::Not => \"\",\n             };\n \n+            let mut_var_suggestion = 'block: {\n+                if !matches!(mutbl, ast::Mutability::Mut) {\n+                    break 'block None;\n+                }\n+\n+                let ident_kind = match binding_parent {\n+                    hir::Node::Param(_) => \"parameter\",\n+                    hir::Node::Local(_) => \"variable\",\n+                    hir::Node::Arm(_) => \"binding\",\n+\n+                    // Provide diagnostics only if the parent pattern is struct-like,\n+                    // i.e. where `mut binding` makes sense\n+                    hir::Node::Pat(Pat { kind, .. }) => match kind {\n+                        PatKind::Struct(..)\n+                        | PatKind::TupleStruct(..)\n+                        | PatKind::Or(..)\n+                        | PatKind::Tuple(..)\n+                        | PatKind::Slice(..) => \"binding\",\n+\n+                        PatKind::Wild\n+                        | PatKind::Binding(..)\n+                        | PatKind::Path(..)\n+                        | PatKind::Box(..)\n+                        | PatKind::Ref(..)\n+                        | PatKind::Lit(..)\n+                        | PatKind::Range(..) => break 'block None,\n+                    },\n+\n+                    // Don't provide suggestions in other cases\n+                    _ => break 'block None,\n+                };\n+\n+                Some((\n+                    pat.span,\n+                    format!(\"to declare a mutable {ident_kind} use\"),\n+                    format!(\"mut {binding}\"),\n+                ))\n+\n+            };\n+\n             match binding_parent {\n                 // Check that there is explicit type (ie this is not a closure param with inferred type)\n                 // so we don't suggest moving something to the type that does not exist\n@@ -675,6 +715,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         ],\n                         Applicability::MachineApplicable\n                     );\n+\n+                    if let Some((sp, msg, sugg)) = mut_var_suggestion {\n+                        err.span_note(sp, format!(\"{msg}: `{sugg}`\"));\n+                    }\n                 }\n                 hir::Node::Param(_) | hir::Node::Arm(_) | hir::Node::Pat(_) => {\n                     // rely on match ergonomics or it might be nested `&&pat`\n@@ -684,6 +728,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         \"\",\n                         Applicability::MaybeIncorrect,\n                     );\n+\n+                    if let Some((sp, msg, sugg)) = mut_var_suggestion {\n+                        err.span_note(sp, format!(\"{msg}: `{sugg}`\"));\n+                    }\n+                }\n+                _ if let Some((sp, msg, sugg)) = mut_var_suggestion => {\n+                    err.span_suggestion(sp, msg, sugg, Applicability::MachineApplicable);\n                 }\n                 _ => {} // don't provide suggestions in other cases #55175\n             }"}, {"sha": "ea24fedd0eb3dbe6d7a6bb701a677afcab612383", "filename": "library/std/src/sys/sgx/abi/usercalls/alloc.rs", "status": "modified", "additions": 110, "deletions": 10, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -1,13 +1,16 @@\n #![allow(unused)]\n \n+use crate::arch::asm;\n use crate::cell::UnsafeCell;\n+use crate::cmp;\n+use crate::convert::TryInto;\n use crate::mem;\n use crate::ops::{CoerceUnsized, Deref, DerefMut, Index, IndexMut};\n use crate::ptr::{self, NonNull};\n use crate::slice;\n use crate::slice::SliceIndex;\n \n-use super::super::mem::is_user_range;\n+use super::super::mem::{is_enclave_range, is_user_range};\n use fortanix_sgx_abi::*;\n \n /// A type that can be safely read from or written to userspace.\n@@ -210,7 +213,9 @@ where\n         unsafe {\n             // Mustn't call alloc with size 0.\n             let ptr = if size > 0 {\n-                rtunwrap!(Ok, super::alloc(size, T::align_of())) as _\n+                // `copy_to_userspace` is more efficient when data is 8-byte aligned\n+                let alignment = cmp::max(T::align_of(), 8);\n+                rtunwrap!(Ok, super::alloc(size, alignment)) as _\n             } else {\n                 T::align_of() as _ // dangling pointer ok for size 0\n             };\n@@ -225,13 +230,9 @@ where\n     /// Copies `val` into freshly allocated space in user memory.\n     pub fn new_from_enclave(val: &T) -> Self {\n         unsafe {\n-            let ret = Self::new_uninit_bytes(mem::size_of_val(val));\n-            ptr::copy(\n-                val as *const T as *const u8,\n-                ret.0.as_ptr() as *mut u8,\n-                mem::size_of_val(val),\n-            );\n-            ret\n+            let mut user = Self::new_uninit_bytes(mem::size_of_val(val));\n+            user.copy_from_enclave(val);\n+            user\n         }\n     }\n \n@@ -304,6 +305,105 @@ where\n     }\n }\n \n+/// Copies `len` bytes of data from enclave pointer `src` to userspace `dst`\n+///\n+/// This function mitigates stale data vulnerabilities by ensuring all writes to untrusted memory are either:\n+///  - preceded by the VERW instruction and followed by the MFENCE; LFENCE instruction sequence\n+///  - or are in multiples of 8 bytes, aligned to an 8-byte boundary\n+///\n+/// # Panics\n+/// This function panics if:\n+///\n+/// * The `src` pointer is null\n+/// * The `dst` pointer is null\n+/// * The `src` memory range is not in enclave memory\n+/// * The `dst` memory range is not in user memory\n+///\n+/// # References\n+///  - https://www.intel.com/content/www/us/en/security-center/advisory/intel-sa-00615.html\n+///  - https://www.intel.com/content/www/us/en/developer/articles/technical/software-security-guidance/technical-documentation/processor-mmio-stale-data-vulnerabilities.html#inpage-nav-3-2-2\n+pub(crate) unsafe fn copy_to_userspace(src: *const u8, dst: *mut u8, len: usize) {\n+    unsafe fn copy_bytewise_to_userspace(src: *const u8, dst: *mut u8, len: usize) {\n+        unsafe {\n+            let mut seg_sel: u16 = 0;\n+            for off in 0..len {\n+                asm!(\"\n+                    mov %ds, ({seg_sel})\n+                    verw ({seg_sel})\n+                    movb {val}, ({dst})\n+                    mfence\n+                    lfence\n+                    \",\n+                    val = in(reg_byte) *src.offset(off as isize),\n+                    dst = in(reg) dst.offset(off as isize),\n+                    seg_sel = in(reg) &mut seg_sel,\n+                    options(nostack, att_syntax)\n+                );\n+            }\n+        }\n+    }\n+\n+    unsafe fn copy_aligned_quadwords_to_userspace(src: *const u8, dst: *mut u8, len: usize) {\n+        unsafe {\n+            asm!(\n+                \"rep movsq (%rsi), (%rdi)\",\n+                inout(\"rcx\") len / 8 => _,\n+                inout(\"rdi\") dst => _,\n+                inout(\"rsi\") src => _,\n+                options(att_syntax, nostack, preserves_flags)\n+            );\n+        }\n+    }\n+    assert!(!src.is_null());\n+    assert!(!dst.is_null());\n+    assert!(is_enclave_range(src, len));\n+    assert!(is_user_range(dst, len));\n+    assert!(len < isize::MAX as usize);\n+    assert!(!(src as usize).overflowing_add(len).1);\n+    assert!(!(dst as usize).overflowing_add(len).1);\n+\n+    if len < 8 {\n+        // Can't align on 8 byte boundary: copy safely byte per byte\n+        unsafe {\n+            copy_bytewise_to_userspace(src, dst, len);\n+        }\n+    } else if len % 8 == 0 && dst as usize % 8 == 0 {\n+        // Copying 8-byte aligned quadwords: copy quad word per quad word\n+        unsafe {\n+            copy_aligned_quadwords_to_userspace(src, dst, len);\n+        }\n+    } else {\n+        // Split copies into three parts:\n+        //   +--------+\n+        //   | small0 | Chunk smaller than 8 bytes\n+        //   +--------+\n+        //   |   big  | Chunk 8-byte aligned, and size a multiple of 8 bytes\n+        //   +--------+\n+        //   | small1 | Chunk smaller than 8 bytes\n+        //   +--------+\n+\n+        unsafe {\n+            // Copy small0\n+            let small0_size = (8 - dst as usize % 8) as u8;\n+            let small0_src = src;\n+            let small0_dst = dst;\n+            copy_bytewise_to_userspace(small0_src as _, small0_dst, small0_size as _);\n+\n+            // Copy big\n+            let small1_size = ((len - small0_size as usize) % 8) as u8;\n+            let big_size = len - small0_size as usize - small1_size as usize;\n+            let big_src = src.offset(small0_size as _);\n+            let big_dst = dst.offset(small0_size as _);\n+            copy_aligned_quadwords_to_userspace(big_src as _, big_dst, big_size);\n+\n+            // Copy small1\n+            let small1_src = src.offset(big_size as isize + small0_size as isize);\n+            let small1_dst = dst.offset(big_size as isize + small0_size as isize);\n+            copy_bytewise_to_userspace(small1_src, small1_dst, small1_size as _);\n+        }\n+    }\n+}\n+\n #[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n impl<T: ?Sized> UserRef<T>\n where\n@@ -352,7 +452,7 @@ where\n     pub fn copy_from_enclave(&mut self, val: &T) {\n         unsafe {\n             assert_eq!(mem::size_of_val(val), mem::size_of_val(&*self.0.get()));\n-            ptr::copy(\n+            copy_to_userspace(\n                 val as *const T as *const u8,\n                 self.0.get() as *mut T as *mut u8,\n                 mem::size_of_val(val),"}, {"sha": "79d1db5e1c50db01029ae14b2461cbe927843594", "filename": "library/std/src/sys/sgx/abi/usercalls/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -6,6 +6,8 @@ use crate::time::{Duration, Instant};\n pub(crate) mod alloc;\n #[macro_use]\n pub(crate) mod raw;\n+#[cfg(test)]\n+mod tests;\n \n use self::raw::*;\n "}, {"sha": "cbf7d7d54f7a2f0dd475261a1a7dad74c84a4df4", "filename": "library/std/src/sys/sgx/abi/usercalls/tests.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Ftests.rs?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -0,0 +1,30 @@\n+use super::alloc::copy_to_userspace;\n+use super::alloc::User;\n+\n+#[test]\n+fn test_copy_function() {\n+    let mut src = [0u8; 100];\n+    let mut dst = User::<[u8]>::uninitialized(100);\n+\n+    for i in 0..src.len() {\n+        src[i] = i as _;\n+    }\n+\n+    for size in 0..48 {\n+        // For all possible alignment\n+        for offset in 0..8 {\n+            // overwrite complete dst\n+            dst.copy_from_enclave(&[0u8; 100]);\n+\n+            // Copy src[0..size] to dst + offset\n+            unsafe { copy_to_userspace(src.as_ptr(), dst.as_mut_ptr().offset(offset), size) };\n+\n+            // Verify copy\n+            for byte in 0..size {\n+                unsafe {\n+                    assert_eq!(*dst.as_ptr().offset(offset + byte as isize), src[byte as usize]);\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "98afee69ba622903bebc80f4775be49fedfe4193", "filename": "library/std/src/sys/unix/locks/pthread_mutex.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_mutex.rs?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -1,5 +1,5 @@\n use crate::cell::UnsafeCell;\n-use crate::mem::MaybeUninit;\n+use crate::mem::{forget, MaybeUninit};\n use crate::sys::cvt_nz;\n use crate::sys_common::lazy_box::{LazyBox, LazyInit};\n \n@@ -23,6 +23,24 @@ impl LazyInit for Mutex {\n         unsafe { mutex.init() };\n         mutex\n     }\n+\n+    fn destroy(mutex: Box<Self>) {\n+        // We're not allowed to pthread_mutex_destroy a locked mutex,\n+        // so check first if it's unlocked.\n+        if unsafe { mutex.try_lock() } {\n+            unsafe { mutex.unlock() };\n+            drop(mutex);\n+        } else {\n+            // The mutex is locked. This happens if a MutexGuard is leaked.\n+            // In this case, we just leak the Mutex too.\n+            forget(mutex);\n+        }\n+    }\n+\n+    fn cancel_init(_: Box<Self>) {\n+        // In this case, we can just drop it without any checks,\n+        // since it cannot have been locked yet.\n+    }\n }\n \n impl Mutex {"}, {"sha": "adfe2a88338f55bbca7f7052254d9d5bfeb5d072", "filename": "library/std/src/sys/unix/locks/pthread_rwlock.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_rwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_rwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_rwlock.rs?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -1,4 +1,5 @@\n use crate::cell::UnsafeCell;\n+use crate::mem::forget;\n use crate::sync::atomic::{AtomicUsize, Ordering};\n use crate::sys_common::lazy_box::{LazyBox, LazyInit};\n \n@@ -17,6 +18,21 @@ impl LazyInit for RwLock {\n     fn init() -> Box<Self> {\n         Box::new(Self::new())\n     }\n+\n+    fn destroy(mut rwlock: Box<Self>) {\n+        // We're not allowed to pthread_rwlock_destroy a locked rwlock,\n+        // so check first if it's unlocked.\n+        if *rwlock.write_locked.get_mut() || *rwlock.num_readers.get_mut() != 0 {\n+            // The rwlock is locked. This happens if a RwLock{Read,Write}Guard is leaked.\n+            // In this case, we just leak the RwLock too.\n+            forget(rwlock);\n+        }\n+    }\n+\n+    fn cancel_init(_: Box<Self>) {\n+        // In this case, we can just drop it without any checks,\n+        // since it cannot have been locked yet.\n+    }\n }\n \n impl RwLock {"}, {"sha": "e9b1006907741a88ea82ae0aaeb4ae1284bd65d4", "filename": "library/std/src/sys/windows/fs.rs", "status": "modified", "additions": 81, "deletions": 75, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -13,6 +13,7 @@ use crate::sys::handle::Handle;\n use crate::sys::time::SystemTime;\n use crate::sys::{c, cvt};\n use crate::sys_common::{AsInner, FromInner, IntoInner};\n+use crate::thread;\n \n use super::path::maybe_verbatim;\n use super::to_u16s;\n@@ -679,7 +680,7 @@ impl<'a> DirBuffIter<'a> {\n     }\n }\n impl<'a> Iterator for DirBuffIter<'a> {\n-    type Item = &'a [u16];\n+    type Item = (&'a [u16], bool);\n     fn next(&mut self) -> Option<Self::Item> {\n         use crate::mem::size_of;\n         let buffer = &self.buffer?[self.cursor..];\n@@ -688,14 +689,16 @@ impl<'a> Iterator for DirBuffIter<'a> {\n         // SAFETY: The buffer contains a `FILE_ID_BOTH_DIR_INFO` struct but the\n         // last field (the file name) is unsized. So an offset has to be\n         // used to get the file name slice.\n-        let (name, next_entry) = unsafe {\n+        let (name, is_directory, next_entry) = unsafe {\n             let info = buffer.as_ptr().cast::<c::FILE_ID_BOTH_DIR_INFO>();\n             let next_entry = (*info).NextEntryOffset as usize;\n             let name = crate::slice::from_raw_parts(\n                 (*info).FileName.as_ptr().cast::<u16>(),\n                 (*info).FileNameLength as usize / size_of::<u16>(),\n             );\n-            (name, next_entry)\n+            let is_directory = ((*info).FileAttributes & c::FILE_ATTRIBUTE_DIRECTORY) != 0;\n+\n+            (name, is_directory, next_entry)\n         };\n \n         if next_entry == 0 {\n@@ -708,7 +711,7 @@ impl<'a> Iterator for DirBuffIter<'a> {\n         const DOT: u16 = b'.' as u16;\n         match name {\n             [DOT] | [DOT, DOT] => self.next(),\n-            _ => Some(name),\n+            _ => Some((name, is_directory)),\n         }\n     }\n }\n@@ -993,89 +996,92 @@ pub fn remove_dir_all(path: &Path) -> io::Result<()> {\n     if (file.basic_info()?.FileAttributes & c::FILE_ATTRIBUTE_DIRECTORY) == 0 {\n         return Err(io::Error::from_raw_os_error(c::ERROR_DIRECTORY as _));\n     }\n-    let mut delete: fn(&File) -> io::Result<()> = File::posix_delete;\n-    let result = match delete(&file) {\n-        Err(e) if e.kind() == io::ErrorKind::DirectoryNotEmpty => {\n-            match remove_dir_all_recursive(&file, delete) {\n-                // Return unexpected errors.\n-                Err(e) if e.kind() != io::ErrorKind::DirectoryNotEmpty => return Err(e),\n-                result => result,\n-            }\n-        }\n-        // If POSIX delete is not supported for this filesystem then fallback to win32 delete.\n-        Err(e)\n-            if e.raw_os_error() == Some(c::ERROR_NOT_SUPPORTED as i32)\n-                || e.raw_os_error() == Some(c::ERROR_INVALID_PARAMETER as i32) =>\n-        {\n-            delete = File::win32_delete;\n-            Err(e)\n-        }\n-        result => result,\n-    };\n-    if result.is_ok() {\n-        Ok(())\n-    } else {\n-        // This is a fallback to make sure the directory is actually deleted.\n-        // Otherwise this function is prone to failing with `DirectoryNotEmpty`\n-        // due to possible delays between marking a file for deletion and the\n-        // file actually being deleted from the filesystem.\n-        //\n-        // So we retry a few times before giving up.\n-        for _ in 0..5 {\n-            match remove_dir_all_recursive(&file, delete) {\n-                Err(e) if e.kind() == io::ErrorKind::DirectoryNotEmpty => {}\n-                result => return result,\n+\n+    match remove_dir_all_iterative(&file, File::posix_delete) {\n+        Err(e) => {\n+            if let Some(code) = e.raw_os_error() {\n+                match code as u32 {\n+                    // If POSIX delete is not supported for this filesystem then fallback to win32 delete.\n+                    c::ERROR_NOT_SUPPORTED\n+                    | c::ERROR_INVALID_FUNCTION\n+                    | c::ERROR_INVALID_PARAMETER => {\n+                        remove_dir_all_iterative(&file, File::win32_delete)\n+                    }\n+                    _ => Err(e),\n+                }\n+            } else {\n+                Err(e)\n             }\n         }\n-        // Try one last time.\n-        delete(&file)\n+        ok => ok,\n     }\n }\n \n-fn remove_dir_all_recursive(f: &File, delete: fn(&File) -> io::Result<()>) -> io::Result<()> {\n+fn remove_dir_all_iterative(f: &File, delete: fn(&File) -> io::Result<()>) -> io::Result<()> {\n+    // When deleting files we may loop this many times when certain error conditions occur.\n+    // This allows remove_dir_all to succeed when the error is temporary.\n+    const MAX_RETRIES: u32 = 10;\n+\n     let mut buffer = DirBuff::new();\n-    let mut restart = true;\n-    // Fill the buffer and iterate the entries.\n-    while f.fill_dir_buff(&mut buffer, restart)? {\n-        for name in buffer.iter() {\n-            // Open the file without following symlinks and try deleting it.\n-            // We try opening will all needed permissions and if that is denied\n-            // fallback to opening without `FILE_LIST_DIRECTORY` permission.\n-            // Note `SYNCHRONIZE` permission is needed for synchronous access.\n-            let mut result =\n-                open_link_no_reparse(&f, name, c::SYNCHRONIZE | c::DELETE | c::FILE_LIST_DIRECTORY);\n-            if matches!(&result, Err(e) if e.kind() == io::ErrorKind::PermissionDenied) {\n-                result = open_link_no_reparse(&f, name, c::SYNCHRONIZE | c::DELETE);\n+    let mut dirlist = vec![f.duplicate()?];\n+\n+    // FIXME: This is a hack so we can push to the dirlist vec after borrowing from it.\n+    fn copy_handle(f: &File) -> mem::ManuallyDrop<File> {\n+        unsafe { mem::ManuallyDrop::new(File::from_raw_handle(f.as_raw_handle())) }\n+    }\n+\n+    while let Some(dir) = dirlist.last() {\n+        let dir = copy_handle(dir);\n+\n+        // Fill the buffer and iterate the entries.\n+        let more_data = dir.fill_dir_buff(&mut buffer, false)?;\n+        for (name, is_directory) in buffer.iter() {\n+            if is_directory {\n+                let child_dir = open_link_no_reparse(\n+                    &dir,\n+                    name,\n+                    c::SYNCHRONIZE | c::DELETE | c::FILE_LIST_DIRECTORY,\n+                )?;\n+                dirlist.push(child_dir);\n+            } else {\n+                for i in 1..=MAX_RETRIES {\n+                    let result = open_link_no_reparse(&dir, name, c::SYNCHRONIZE | c::DELETE);\n+                    match result {\n+                        Ok(f) => delete(&f)?,\n+                        // Already deleted, so skip.\n+                        Err(e) if e.kind() == io::ErrorKind::NotFound => break,\n+                        // Retry a few times if the file is locked or a delete is already in progress.\n+                        Err(e)\n+                            if i < MAX_RETRIES\n+                                && (e.raw_os_error() == Some(c::ERROR_DELETE_PENDING as _)\n+                                    || e.raw_os_error()\n+                                        == Some(c::ERROR_SHARING_VIOLATION as _)) => {}\n+                        // Otherwise return the error.\n+                        Err(e) => return Err(e),\n+                    }\n+                    thread::yield_now();\n+                }\n             }\n-            match result {\n-                Ok(file) => match delete(&file) {\n-                    Err(e) if e.kind() == io::ErrorKind::DirectoryNotEmpty => {\n-                        // Iterate the directory's files.\n-                        // Ignore `DirectoryNotEmpty` errors here. They will be\n-                        // caught when `remove_dir_all` tries to delete the top\n-                        // level directory. It can then decide if to retry or not.\n-                        match remove_dir_all_recursive(&file, delete) {\n-                            Err(e) if e.kind() == io::ErrorKind::DirectoryNotEmpty => {}\n-                            result => result?,\n+        }\n+        // If there were no more files then delete the directory.\n+        if !more_data {\n+            if let Some(dir) = dirlist.pop() {\n+                // Retry deleting a few times in case we need to wait for a file to be deleted.\n+                for i in 1..=MAX_RETRIES {\n+                    let result = delete(&dir);\n+                    if let Err(e) = result {\n+                        if i == MAX_RETRIES || e.kind() != io::ErrorKind::DirectoryNotEmpty {\n+                            return Err(e);\n                         }\n+                        thread::yield_now();\n+                    } else {\n+                        break;\n                     }\n-                    result => result?,\n-                },\n-                // Ignore error if a delete is already in progress or the file\n-                // has already been deleted. It also ignores sharing violations\n-                // (where a file is locked by another process) as these are\n-                // usually temporary.\n-                Err(e)\n-                    if e.raw_os_error() == Some(c::ERROR_DELETE_PENDING as _)\n-                        || e.kind() == io::ErrorKind::NotFound\n-                        || e.raw_os_error() == Some(c::ERROR_SHARING_VIOLATION as _) => {}\n-                Err(e) => return Err(e),\n+                }\n             }\n         }\n-        // Continue reading directory entries without restarting from the beginning,\n-        restart = false;\n     }\n-    delete(&f)\n+    Ok(())\n }\n \n pub fn readlink(path: &Path) -> io::Result<PathBuf> {"}, {"sha": "63c3316bdeb28b95b691ca914c9120e25488dc69", "filename": "library/std/src/sys_common/lazy_box.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/library%2Fstd%2Fsrc%2Fsys_common%2Flazy_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/library%2Fstd%2Fsrc%2Fsys_common%2Flazy_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Flazy_box.rs?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -21,8 +21,21 @@ pub(crate) trait LazyInit {\n     ///\n     /// It might be called more than once per LazyBox, as multiple threads\n     /// might race to initialize it concurrently, each constructing and initializing\n-    /// their own box. (All but one of them will be destroyed right after.)\n+    /// their own box. All but one of them will be passed to `cancel_init` right after.\n     fn init() -> Box<Self>;\n+\n+    /// Any surplus boxes from `init()` that lost the initialization race\n+    /// are passed to this function for disposal.\n+    ///\n+    /// The default implementation calls destroy().\n+    fn cancel_init(x: Box<Self>) {\n+        Self::destroy(x);\n+    }\n+\n+    /// This is called to destroy a used box.\n+    ///\n+    /// The default implementation just drops it.\n+    fn destroy(_: Box<Self>) {}\n }\n \n impl<T: LazyInit> LazyBox<T> {\n@@ -45,7 +58,7 @@ impl<T: LazyInit> LazyBox<T> {\n             Err(ptr) => {\n                 // Lost the race to another thread.\n                 // Drop the box we created, and use the one from the other thread instead.\n-                drop(unsafe { Box::from_raw(new_ptr) });\n+                T::cancel_init(unsafe { Box::from_raw(new_ptr) });\n                 ptr\n             }\n         }\n@@ -71,7 +84,7 @@ impl<T: LazyInit> Drop for LazyBox<T> {\n     fn drop(&mut self) {\n         let ptr = *self.ptr.get_mut();\n         if !ptr.is_null() {\n-            drop(unsafe { Box::from_raw(ptr) });\n+            T::destroy(unsafe { Box::from_raw(ptr) });\n         }\n     }\n }"}, {"sha": "dfc1de77be4e49e84e29a18e8611d7eb0d799cf8", "filename": "src/doc/unstable-book/src/compiler-flags/extern-options.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fextern-options.md", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fextern-options.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fextern-options.md?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -1,5 +1,10 @@\n # `--extern` Options\n \n+* Tracking issue for `--extern` crate modifiers: [#98405](https://github.com/rust-lang/rust/issues/98405)\n+* Tracking issue for `noprelude`: [#98398](https://github.com/rust-lang/rust/issues/98398)\n+* Tracking issue for `priv`: [#98399](https://github.com/rust-lang/rust/issues/98399)\n+* Tracking issue for `nounused`: [#98400](https://github.com/rust-lang/rust/issues/98400)\n+\n The behavior of the `--extern` flag can be modified with `noprelude`, `priv` or `nounused` options.\n \n This is unstable feature, so you have to provide `-Zunstable-options` to enable it."}, {"sha": "a09b64aa2f5a538cad3b25ab828bda4ad66a9900", "filename": "src/test/ui/associated-item/associated-item-enum.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-enum.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no variant or associated item named `mispellable` found for enum `\n   --> $DIR/associated-item-enum.rs:17:11\n    |\n LL | enum Enum { Variant }\n-   | --------- variant or associated item `mispellable` not found here\n+   |      ---- variant or associated item `mispellable` not found for this enum\n ...\n LL |     Enum::mispellable();\n    |           ^^^^^^^^^^^\n@@ -14,7 +14,7 @@ error[E0599]: no variant or associated item named `mispellable_trait` found for\n   --> $DIR/associated-item-enum.rs:18:11\n    |\n LL | enum Enum { Variant }\n-   | --------- variant or associated item `mispellable_trait` not found here\n+   |      ---- variant or associated item `mispellable_trait` not found for this enum\n ...\n LL |     Enum::mispellable_trait();\n    |           ^^^^^^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ error[E0599]: no variant or associated item named `MISPELLABLE` found for enum `\n   --> $DIR/associated-item-enum.rs:19:11\n    |\n LL | enum Enum { Variant }\n-   | --------- variant or associated item `MISPELLABLE` not found here\n+   |      ---- variant or associated item `MISPELLABLE` not found for this enum\n ...\n LL |     Enum::MISPELLABLE;\n    |           ^^^^^^^^^^^"}, {"sha": "ba22b7aaf9828f426d0fef49dfae1d01bec26b8b", "filename": "src/test/ui/async-await/pin-needed-to-poll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no method named `poll` found for struct `Sleep` in the current sco\n   --> $DIR/pin-needed-to-poll.rs:42:20\n    |\n LL | struct Sleep;\n-   | ------------- method `poll` not found for this\n+   |        ----- method `poll` not found for this struct\n ...\n LL |         self.sleep.poll(cx)\n    |                    ^^^^ method not found in `Sleep`"}, {"sha": "b215adfa593bde48d76e6c2287994f580599714e", "filename": "src/test/ui/bogus-tag.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fbogus-tag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fbogus-tag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbogus-tag.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no variant or associated item named `Hsl` found for enum `Color` i\n   --> $DIR/bogus-tag.rs:7:16\n    |\n LL | enum Color { Rgb(isize, isize, isize), Rgba(isize, isize, isize, isize), }\n-   | ---------- variant or associated item `Hsl` not found here\n+   |      ----- variant or associated item `Hsl` not found for this enum\n ...\n LL |         Color::Hsl(h, s, l) => { println!(\"hsl\"); }\n    |                ^^^ variant or associated item not found in `Color`"}, {"sha": "a6d4e80a50c05c2ff564b42d0dfc8d887cee1dff", "filename": "src/test/ui/confuse-field-and-method/issue-18343.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-18343.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-18343.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-18343.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no method named `closure` found for struct `Obj` in the current sc\n   --> $DIR/issue-18343.rs:7:7\n    |\n LL | struct Obj<F> where F: FnMut() -> u32 {\n-   | ------------------------------------- method `closure` not found for this\n+   |        --- method `closure` not found for this struct\n ...\n LL |     o.closure();\n    |       ^^^^^^^ field, not a method"}, {"sha": "795d0e286b3d3e60a7f69b56edf0cfc06c1827f1", "filename": "src/test/ui/confuse-field-and-method/issue-2392.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no method named `closure` found for struct `Obj` in the current sc\n   --> $DIR/issue-2392.rs:36:15\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {\n-   | -------------------------------------- method `closure` not found for this\n+   |        --- method `closure` not found for this struct\n ...\n LL |     o_closure.closure();\n    |               ^^^^^^^ field, not a method\n@@ -16,7 +16,7 @@ error[E0599]: no method named `not_closure` found for struct `Obj` in the curren\n   --> $DIR/issue-2392.rs:38:15\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {\n-   | -------------------------------------- method `not_closure` not found for this\n+   |        --- method `not_closure` not found for this struct\n ...\n LL |     o_closure.not_closure();\n    |               ^^^^^^^^^^^-- help: remove the arguments\n@@ -27,7 +27,7 @@ error[E0599]: no method named `closure` found for struct `Obj` in the current sc\n   --> $DIR/issue-2392.rs:42:12\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {\n-   | -------------------------------------- method `closure` not found for this\n+   |        --- method `closure` not found for this struct\n ...\n LL |     o_func.closure();\n    |            ^^^^^^^ field, not a method\n@@ -41,7 +41,7 @@ error[E0599]: no method named `boxed_closure` found for struct `BoxedObj` in the\n   --> $DIR/issue-2392.rs:45:14\n    |\n LL | struct BoxedObj {\n-   | --------------- method `boxed_closure` not found for this\n+   |        -------- method `boxed_closure` not found for this struct\n ...\n LL |     boxed_fn.boxed_closure();\n    |              ^^^^^^^^^^^^^ field, not a method\n@@ -55,7 +55,7 @@ error[E0599]: no method named `boxed_closure` found for struct `BoxedObj` in the\n   --> $DIR/issue-2392.rs:48:19\n    |\n LL | struct BoxedObj {\n-   | --------------- method `boxed_closure` not found for this\n+   |        -------- method `boxed_closure` not found for this struct\n ...\n LL |     boxed_closure.boxed_closure();\n    |                   ^^^^^^^^^^^^^ field, not a method\n@@ -69,7 +69,7 @@ error[E0599]: no method named `closure` found for struct `Obj` in the current sc\n   --> $DIR/issue-2392.rs:53:12\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {\n-   | -------------------------------------- method `closure` not found for this\n+   |        --- method `closure` not found for this struct\n ...\n LL |     w.wrap.closure();\n    |            ^^^^^^^ field, not a method\n@@ -83,7 +83,7 @@ error[E0599]: no method named `not_closure` found for struct `Obj` in the curren\n   --> $DIR/issue-2392.rs:55:12\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {\n-   | -------------------------------------- method `not_closure` not found for this\n+   |        --- method `not_closure` not found for this struct\n ...\n LL |     w.wrap.not_closure();\n    |            ^^^^^^^^^^^-- help: remove the arguments\n@@ -94,7 +94,7 @@ error[E0599]: no method named `closure` found for struct `Obj` in the current sc\n   --> $DIR/issue-2392.rs:58:24\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {\n-   | -------------------------------------- method `closure` not found for this\n+   |        --- method `closure` not found for this struct\n ...\n LL |     check_expression().closure();\n    |                        ^^^^^^^ field, not a method\n@@ -108,7 +108,7 @@ error[E0599]: no method named `f1` found for struct `FuncContainer` in the curre\n   --> $DIR/issue-2392.rs:64:31\n    |\n LL | struct FuncContainer {\n-   | -------------------- method `f1` not found for this\n+   |        ------------- method `f1` not found for this struct\n ...\n LL |             (*self.container).f1(1);\n    |                               ^^ field, not a method\n@@ -122,7 +122,7 @@ error[E0599]: no method named `f2` found for struct `FuncContainer` in the curre\n   --> $DIR/issue-2392.rs:65:31\n    |\n LL | struct FuncContainer {\n-   | -------------------- method `f2` not found for this\n+   |        ------------- method `f2` not found for this struct\n ...\n LL |             (*self.container).f2(1);\n    |                               ^^ field, not a method\n@@ -136,7 +136,7 @@ error[E0599]: no method named `f3` found for struct `FuncContainer` in the curre\n   --> $DIR/issue-2392.rs:66:31\n    |\n LL | struct FuncContainer {\n-   | -------------------- method `f3` not found for this\n+   |        ------------- method `f3` not found for this struct\n ...\n LL |             (*self.container).f3(1);\n    |                               ^^ field, not a method"}, {"sha": "cad2697b52e927c87d06ded4b61fd652664883aa", "filename": "src/test/ui/confuse-field-and-method/issue-32128.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-32128.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-32128.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-32128.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no method named `example` found for struct `Example` in the curren\n   --> $DIR/issue-32128.rs:12:10\n    |\n LL | struct Example {\n-   | -------------- method `example` not found for this\n+   |        ------- method `example` not found for this struct\n ...\n LL |     demo.example(1);\n    |          ^^^^^^^ field, not a method"}, {"sha": "9e2f245597a4527931e3b168d609b6db354e831f", "filename": "src/test/ui/confuse-field-and-method/private-field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fprivate-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fprivate-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fprivate-field.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no method named `dog_age` found for struct `Dog` in the current sc\n   --> $DIR/private-field.rs:16:23\n    |\n LL |     pub struct Dog {\n-   |     -------------- method `dog_age` not found for this\n+   |                --- method `dog_age` not found for this struct\n ...\n LL |     let dog_age = dog.dog_age();\n    |                       ^^^^^^^ private field, not a method"}, {"sha": "576d037f3393d73f6c21e26c06a315198eeac882", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-69654.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-69654.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-69654.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-69654.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -8,7 +8,7 @@ error[E0599]: the function or associated item `foo` exists for struct `Foo<{_: u\n   --> $DIR/issue-69654.rs:17:10\n    |\n LL | struct Foo<const N: usize> {}\n-   | -------------------------- function or associated item `foo` not found for this\n+   |        --- function or associated item `foo` not found for this struct\n ...\n LL |     Foo::foo();\n    |          ^^^ function or associated item cannot be called on `Foo<{_: usize}>` due to unsatisfied trait bounds"}, {"sha": "7bfc09387b8a7f64c419fea9a4a89a044d76f69a", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-80742.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-80742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-80742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-80742.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -15,22 +15,16 @@ LL |     [u8; size_of::<T>() + 1]: ,\n error[E0599]: the function or associated item `new` exists for struct `Inline<dyn Debug>`, but its trait bounds were not satisfied\n   --> $DIR/issue-80742.rs:30:36\n    |\n-LL | / struct Inline<T>\n-LL | | where\n-LL | |     [u8; size_of::<T>() + 1]: ,\n-LL | | {\n-LL | |     _phantom: PhantomData<T>,\n-LL | |     buf: [u8; size_of::<T>() + 1],\n-LL | | }\n-   | |_- function or associated item `new` not found for this\n+LL | struct Inline<T>\n+   |        ------ function or associated item `new` not found for this struct\n ...\n-LL |       let dst = Inline::<dyn Debug>::new(0);\n-   |                                      ^^^ function or associated item cannot be called on `Inline<dyn Debug>` due to unsatisfied trait bounds\n+LL |     let dst = Inline::<dyn Debug>::new(0);\n+   |                                    ^^^ function or associated item cannot be called on `Inline<dyn Debug>` due to unsatisfied trait bounds\n    |\n   ::: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n    |\n-LL |   pub trait Debug {\n-   |   --------------- doesn't satisfy `dyn Debug: Sized`\n+LL | pub trait Debug {\n+   | --------------- doesn't satisfy `dyn Debug: Sized`\n    |\n    = note: the following trait bounds were not satisfied:\n            `dyn Debug: Sized`"}, {"sha": "ab53d6cf09a744cf598208672a74524591e0d0aa", "filename": "src/test/ui/const-generics/invalid-const-arg-for-type-param.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -16,7 +16,7 @@ error[E0599]: no method named `f` found for struct `S` in the current scope\n   --> $DIR/invalid-const-arg-for-type-param.rs:9:7\n    |\n LL | struct S;\n-   | --------- method `f` not found for this\n+   |        - method `f` not found for this struct\n ...\n LL |     S.f::<0>();\n    |       ^ method not found in `S`"}, {"sha": "422e8de6856457d4cc70a9656abc501e2a218209", "filename": "src/test/ui/const-generics/issues/issue-97634.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-97634.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-97634.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-97634.rs?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -0,0 +1,10 @@\n+// build-pass\n+\n+pub enum Register<const N: u16> {\n+    Field0 = 40,\n+    Field1,\n+}\n+\n+fn main() {\n+    let _b = Register::<0>::Field1 as u16;\n+}"}, {"sha": "4399db11665629c9e9baa43fbc27507552255df2", "filename": "src/test/ui/consts/const-needs_drop-monomorphic.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fconsts%2Fconst-needs_drop-monomorphic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fconsts%2Fconst-needs_drop-monomorphic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-needs_drop-monomorphic.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no function or associated item named `assert` found for struct `Bo\n   --> $DIR/const-needs_drop-monomorphic.rs:11:46\n    |\n LL | struct Bool<const B: bool> {}\n-   | -------------------------- function or associated item `assert` not found for this\n+   |        ---- function or associated item `assert` not found for this struct\n ...\n LL |     Bool::<{ std::mem::needs_drop::<T>() }>::assert();\n    |                                              ^^^^^^ function or associated item cannot be called on `Bool<{ std::mem::needs_drop::<T>() }>` due to unsatisfied trait bounds"}, {"sha": "3909862ff1c8bfea413db2eab4c3347b47142ab1", "filename": "src/test/ui/copy-a-resource.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fcopy-a-resource.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fcopy-a-resource.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcopy-a-resource.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no method named `clone` found for struct `Foo` in the current scop\n   --> $DIR/copy-a-resource.rs:18:16\n    |\n LL | struct Foo {\n-   | ---------- method `clone` not found for this\n+   |        --- method `clone` not found for this struct\n ...\n LL |     let _y = x.clone();\n    |                ^^^^^ method not found in `Foo`"}, {"sha": "592cc0ae90f7ca5408a292cc00f3869b6d92bcef", "filename": "src/test/ui/derives/derive-assoc-type-not-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -3,8 +3,8 @@ error[E0599]: the method `clone` exists for struct `Bar<NotClone>`, but its trai\n    |\n LL | struct Bar<T: Foo> {\n    | ------------------\n-   | |\n-   | method `clone` not found for this\n+   | |      |\n+   | |      method `clone` not found for this struct\n    | doesn't satisfy `Bar<NotClone>: Clone`\n ...\n LL | struct NotClone;"}, {"sha": "e479b539fec2d0accc5e7022b5c7844e879fbb02", "filename": "src/test/ui/derives/issue-91492.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fderives%2Fissue-91492.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fderives%2Fissue-91492.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fissue-91492.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -37,7 +37,7 @@ LL | pub struct NoDerives;\n    | --------------------- doesn't satisfy `NoDerives: Clone`\n ...\n LL | struct Object<T, A>(T, A);\n-   | -------------------------- method `use_clone` not found for this\n+   |        ------ method `use_clone` not found for this struct\n ...\n LL |     foo.use_clone();\n    |         ^^^^^^^^^ method cannot be called on `Object<NoDerives, SomeDerives>` due to unsatisfied trait bounds"}, {"sha": "b1bec5432e3e16063618872511ae09c46f7f088e", "filename": "src/test/ui/derives/issue-91550.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fderives%2Fissue-91550.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fderives%2Fissue-91550.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fissue-91550.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -25,7 +25,7 @@ LL | pub struct NoDerives;\n    | --------------------- doesn't satisfy `NoDerives: Eq`\n LL |\n LL | struct Object<T>(T);\n-   | -------------------- method `use_eq` not found for this\n+   |        ------ method `use_eq` not found for this struct\n ...\n LL |     foo.use_eq();\n    |         ^^^^^^ method cannot be called on `Object<NoDerives>` due to unsatisfied trait bounds\n@@ -44,7 +44,7 @@ LL | pub struct NoDerives;\n    | --------------------- doesn't satisfy `NoDerives: Ord`\n LL |\n LL | struct Object<T>(T);\n-   | -------------------- method `use_ord` not found for this\n+   |        ------ method `use_ord` not found for this struct\n ...\n LL |     foo.use_ord();\n    |         ^^^^^^^ method cannot be called on `Object<NoDerives>` due to unsatisfied trait bounds\n@@ -66,7 +66,7 @@ LL | pub struct NoDerives;\n    | doesn't satisfy `NoDerives: PartialOrd`\n LL |\n LL | struct Object<T>(T);\n-   | -------------------- method `use_ord_and_partial_ord` not found for this\n+   |        ------ method `use_ord_and_partial_ord` not found for this struct\n ...\n LL |     foo.use_ord_and_partial_ord();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ method cannot be called on `Object<NoDerives>` due to unsatisfied trait bounds"}, {"sha": "bd5b9f4b49ee33adad6dfe51bdd26bf865c8e76f", "filename": "src/test/ui/did_you_mean/issue-40006.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -88,7 +88,7 @@ error[E0599]: no method named `hello_method` found for struct `S` in the current\n   --> $DIR/issue-40006.rs:38:7\n    |\n LL | struct S;\n-   | --------- method `hello_method` not found for this\n+   |        - method `hello_method` not found for this struct\n ...\n LL |     S.hello_method();\n    |       ^^^^^^^^^^^^ method not found in `S`"}, {"sha": "d85fd526d52b0a4dbb51a7c1331fb0802d8988ea", "filename": "src/test/ui/dont-suggest-private-trait-method.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fdont-suggest-private-trait-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fdont-suggest-private-trait-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdont-suggest-private-trait-method.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no function or associated item named `new` found for struct `T` in\n   --> $DIR/dont-suggest-private-trait-method.rs:4:8\n    |\n LL | struct T;\n-   | --------- function or associated item `new` not found for this\n+   |        - function or associated item `new` not found for this struct\n ...\n LL |     T::new();\n    |        ^^^ function or associated item not found in `T`"}, {"sha": "49ca1d6353d15361583aa47840812184bfe6ccf1", "filename": "src/test/ui/error-codes/E0599.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Ferror-codes%2FE0599.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Ferror-codes%2FE0599.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0599.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no associated item named `NotEvenReal` found for struct `Foo` in t\n   --> $DIR/E0599.rs:4:20\n    |\n LL | struct Foo;\n-   | ----------- associated item `NotEvenReal` not found for this\n+   |        --- associated item `NotEvenReal` not found for this struct\n ...\n LL |     || if let Foo::NotEvenReal() = Foo {};\n    |                    ^^^^^^^^^^^ associated item not found in `Foo`"}, {"sha": "1322914797b18b0b6b653643430ecf4baf8c31ec", "filename": "src/test/ui/generic-associated-types/method-unsatified-assoc-type-predicate.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmethod-unsatified-assoc-type-predicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmethod-unsatified-assoc-type-predicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmethod-unsatified-assoc-type-predicate.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -3,8 +3,8 @@ error[E0599]: the method `f` exists for struct `S`, but its trait bounds were no\n    |\n LL | struct S;\n    | ---------\n-   | |\n-   | method `f` not found for this\n+   | |      |\n+   | |      method `f` not found for this struct\n    | doesn't satisfy `<S as X>::Y<i32> = i32`\n    | doesn't satisfy `S: M`\n ..."}, {"sha": "5a10a38d08ecdaaf494694eca8996d0a2b01a499", "filename": "src/test/ui/hrtb/issue-30786.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -3,8 +3,8 @@ error[E0599]: the method `filterx` exists for struct `Map<Repeat, [closure@$DIR/\n    |\n LL | pub struct Map<S, F> {\n    | --------------------\n-   | |\n-   | method `filterx` not found for this\n+   | |          |\n+   | |          method `filterx` not found for this struct\n    | doesn't satisfy `_: StreamExt`\n ...\n LL |     let filter = map.filterx(|x: &_| true);\n@@ -28,8 +28,8 @@ error[E0599]: the method `countx` exists for struct `Filter<Map<Repeat, for<'r>\n    |\n LL | pub struct Filter<S, F> {\n    | -----------------------\n-   | |\n-   | method `countx` not found for this\n+   | |          |\n+   | |          method `countx` not found for this struct\n    | doesn't satisfy `_: StreamExt`\n ...\n LL |     let count = filter.countx();"}, {"sha": "8b671e7dbb3a783cfed67f25208691b5baf18acc", "filename": "src/test/ui/impl-trait/issues/issue-21659-show-relevant-trait-impls-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-21659-show-relevant-trait-impls-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-21659-show-relevant-trait-impls-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-21659-show-relevant-trait-impls-3.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no method named `foo` found for struct `Bar` in the current scope\n   --> $DIR/issue-21659-show-relevant-trait-impls-3.rs:20:8\n    |\n LL | struct Bar;\n-   | ----------- method `foo` not found for this\n+   |        --- method `foo` not found for this struct\n ...\n LL |     f1.foo(1usize);\n    |        ^^^ method not found in `Bar`"}, {"sha": "44d775b695ee8d49b8c67ebd809e035c0620b398", "filename": "src/test/ui/impl-trait/issues/issue-62742.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-62742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-62742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-62742.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -21,7 +21,7 @@ LL | pub struct RawImpl<T>(PhantomData<T>);\n    | -------------------------------------- doesn't satisfy `RawImpl<()>: Raw<()>`\n ...\n LL | pub struct SafeImpl<T: ?Sized, A: Raw<T>>(PhantomData<(A, T)>);\n-   | --------------------------------------------------------------- function or associated item `foo` not found for this\n+   |            -------- function or associated item `foo` not found for this struct\n    |\n    = note: the following trait bounds were not satisfied:\n            `RawImpl<()>: Raw<()>`"}, {"sha": "abd57d12d9e501bc22e07b16e233ea52c5bc7601", "filename": "src/test/ui/impl-trait/method-suggestion-no-duplication.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fimpl-trait%2Fmethod-suggestion-no-duplication.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fimpl-trait%2Fmethod-suggestion-no-duplication.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmethod-suggestion-no-duplication.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no method named `is_empty` found for struct `Foo` in the current s\n   --> $DIR/method-suggestion-no-duplication.rs:7:15\n    |\n LL | struct Foo;\n-   | ----------- method `is_empty` not found for this\n+   |        --- method `is_empty` not found for this struct\n ...\n LL |     foo(|s| s.is_empty());\n    |               ^^^^^^^^ method not found in `Foo`"}, {"sha": "1d24f428fb1e1bd075c30d1fc064dcb92d8e2dec", "filename": "src/test/ui/impl-trait/no-method-suggested-traits.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -94,7 +94,7 @@ error[E0599]: no method named `method` found for struct `Foo` in the current sco\n   --> $DIR/no-method-suggested-traits.rs:40:9\n    |\n LL | struct Foo;\n-   | ----------- method `method` not found for this\n+   |        --- method `method` not found for this struct\n ...\n LL |     Foo.method();\n    |         ^^^^^^ method not found in `Foo`\n@@ -201,7 +201,7 @@ error[E0599]: no method named `method3` found for struct `Foo` in the current sc\n   --> $DIR/no-method-suggested-traits.rs:59:9\n    |\n LL | struct Foo;\n-   | ----------- method `method3` not found for this\n+   |        --- method `method3` not found for this struct\n ...\n LL |     Foo.method3();\n    |         ^^^^^^^ method not found in `Foo`\n@@ -224,7 +224,7 @@ error[E0599]: no method named `method3` found for enum `Bar` in the current scop\n   --> $DIR/no-method-suggested-traits.rs:63:12\n    |\n LL | enum Bar { X }\n-   | -------- method `method3` not found for this\n+   |      --- method `method3` not found for this enum\n ...\n LL |     Bar::X.method3();\n    |            ^^^^^^^ method not found in `Bar`"}, {"sha": "edf8a44b7e4a1750d4cf67b980fbb213f89d8059", "filename": "src/test/ui/infinite/infinite-autoderef.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Finfinite%2Finfinite-autoderef.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Finfinite%2Finfinite-autoderef.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-autoderef.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -43,7 +43,7 @@ error[E0599]: no method named `bar` found for struct `Foo` in the current scope\n   --> $DIR/infinite-autoderef.rs:25:9\n    |\n LL | struct Foo;\n-   | ----------- method `bar` not found for this\n+   |        --- method `bar` not found for this struct\n ...\n LL |     Foo.bar();\n    |         ^^^ method not found in `Foo`"}, {"sha": "7a72a5ff11a45971ce4cd996e14fb3ac2b4e8418", "filename": "src/test/ui/issues/issue-19692.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fissues%2Fissue-19692.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fissues%2Fissue-19692.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19692.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no method named `kaname` found for struct `Homura` in the current\n   --> $DIR/issue-19692.rs:4:40\n    |\n LL | struct Homura;\n-   | -------------- method `kaname` not found for this\n+   |        ------ method `kaname` not found for this struct\n ...\n LL |     let Some(ref madoka) = Some(homura.kaname());\n    |                                        ^^^^^^ method not found in `Homura`"}, {"sha": "648912a9690f4226bda2fb821c29ca3bd32cdb49", "filename": "src/test/ui/issues/issue-22933-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fissues%2Fissue-22933-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fissues%2Fissue-22933-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22933-2.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no variant or associated item named `PIE` found for enum `Deliciou\n   --> $DIR/issue-22933-2.rs:4:55\n    |\n LL | enum Delicious {\n-   | -------------- variant or associated item `PIE` not found here\n+   |      --------- variant or associated item `PIE` not found for this enum\n ...\n LL |     ApplePie = Delicious::Apple as isize | Delicious::PIE as isize,\n    |                                                       ^^^"}, {"sha": "052ccd07d411b85a87647e4f96f7fc844a6cf7b1", "filename": "src/test/ui/issues/issue-23173.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fissues%2Fissue-23173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fissues%2Fissue-23173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23173.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no variant or associated item named `Homura` found for enum `Token\n   --> $DIR/issue-23173.rs:9:23\n    |\n LL | enum Token { LeftParen, RightParen, Plus, Minus, /* etc */ }\n-   | ---------- variant or associated item `Homura` not found here\n+   |      ----- variant or associated item `Homura` not found for this enum\n ...\n LL |     use_token(&Token::Homura);\n    |                       ^^^^^^ variant or associated item not found in `Token`\n@@ -11,7 +11,7 @@ error[E0599]: no function or associated item named `method` found for struct `St\n   --> $DIR/issue-23173.rs:10:13\n    |\n LL | struct Struct {\n-   | ------------- function or associated item `method` not found for this\n+   |        ------ function or associated item `method` not found for this struct\n ...\n LL |     Struct::method();\n    |             ^^^^^^ function or associated item not found in `Struct`\n@@ -20,7 +20,7 @@ error[E0599]: no function or associated item named `method` found for struct `St\n   --> $DIR/issue-23173.rs:11:13\n    |\n LL | struct Struct {\n-   | ------------- function or associated item `method` not found for this\n+   |        ------ function or associated item `method` not found for this struct\n ...\n LL |     Struct::method;\n    |             ^^^^^^ function or associated item not found in `Struct`\n@@ -29,7 +29,7 @@ error[E0599]: no associated item named `Assoc` found for struct `Struct` in the\n   --> $DIR/issue-23173.rs:12:13\n    |\n LL | struct Struct {\n-   | ------------- associated item `Assoc` not found for this\n+   |        ------ associated item `Assoc` not found for this struct\n ...\n LL |     Struct::Assoc;\n    |             ^^^^^ associated item not found in `Struct`"}, {"sha": "c5906b8805dfe8adc9c70055dffa38aa5ef125db", "filename": "src/test/ui/issues/issue-23217.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fissues%2Fissue-23217.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fissues%2Fissue-23217.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23217.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no variant or associated item named `A` found for enum `SomeEnum`\n   --> $DIR/issue-23217.rs:2:19\n    |\n LL | pub enum SomeEnum {\n-   | ----------------- variant or associated item `A` not found here\n+   |          -------- variant or associated item `A` not found for this enum\n LL |     B = SomeEnum::A,\n    |                   ^\n    |                   |"}, {"sha": "fcc007a4a8848a95f000ca5e23f90ebc9fb49a8e", "filename": "src/test/ui/issues/issue-2823.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fissues%2Fissue-2823.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fissues%2Fissue-2823.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2823.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no method named `clone` found for struct `C` in the current scope\n   --> $DIR/issue-2823.rs:13:16\n    |\n LL | struct C {\n-   | -------- method `clone` not found for this\n+   |        - method `clone` not found for this struct\n ...\n LL |     let _d = c.clone();\n    |                ^^^^^ method not found in `C`"}, {"sha": "e0a65e33c445e15a50fe52579ea108a9ca3ae359", "filename": "src/test/ui/issues/issue-28971.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fissues%2Fissue-28971.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fissues%2Fissue-28971.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28971.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no variant or associated item named `Baz` found for enum `Foo` in\n   --> $DIR/issue-28971.rs:7:18\n    |\n LL | enum Foo {\n-   | -------- variant or associated item `Baz` not found here\n+   |      --- variant or associated item `Baz` not found for this enum\n ...\n LL |             Foo::Baz(..) => (),\n    |                  ^^^"}, {"sha": "f9ab8a5150716af4458ca0b149d2b8089d736e46", "filename": "src/test/ui/issues/issue-38919.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fissues%2Fissue-38919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fissues%2Fissue-38919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38919.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -1,6 +1,8 @@\n error[E0599]: no associated item named `Item` found for type parameter `T` in the current scope\n   --> $DIR/issue-38919.rs:2:8\n    |\n+LL | fn foo<T: Iterator>() {\n+   |        - associated item `Item` not found for this type parameter\n LL |     T::Item;\n    |        ^^^^ associated item not found in `T`\n "}, {"sha": "a52dc0c9af0c68caeb711bd29e4bbd39d8b5a859", "filename": "src/test/ui/issues/issue-41880.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fissues%2Fissue-41880.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fissues%2Fissue-41880.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41880.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no method named `iter` found for struct `Iterate` in the current s\n   --> $DIR/issue-41880.rs:27:24\n    |\n LL | pub struct Iterate<T, F> {\n-   | ------------------------ method `iter` not found for this\n+   |            ------- method `iter` not found for this struct\n ...\n LL |     println!(\"{:?}\", a.iter().take(10).collect::<Vec<usize>>());\n    |                        ^^^^ method not found in `Iterate<{integer}, [closure@$DIR/issue-41880.rs:26:24: 26:31]>`"}, {"sha": "a25b6b8802a9ce4dfc4485de6e977d0e3e12d622", "filename": "src/test/ui/issues/issue-64430.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fissues%2Fissue-64430.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fissues%2Fissue-64430.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-64430.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no method named `bar` found for struct `Foo` in the current scope\n   --> $DIR/issue-64430.rs:7:9\n    |\n LL | pub struct Foo;\n-   | --------------- method `bar` not found for this\n+   |            --- method `bar` not found for this struct\n ...\n LL |     Foo.bar()\n    |         ^^^ method not found in `Foo`"}, {"sha": "2a683c2d55a3585732819ac14bd676bd0c5e7233", "filename": "src/test/ui/issues/issue-7950.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fissues%2Fissue-7950.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fissues%2Fissue-7950.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7950.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no function or associated item named `bar` found for struct `Foo`\n   --> $DIR/issue-7950.rs:6:10\n    |\n LL | struct Foo;\n-   | ----------- function or associated item `bar` not found for this\n+   |        --- function or associated item `bar` not found for this struct\n ...\n LL |     Foo::bar();\n    |          ^^^ function or associated item not found in `Foo`"}, {"sha": "3b2a062c1c2548ac1bee802d3fff71a73013d2e6", "filename": "src/test/ui/lexical-scopes.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Flexical-scopes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Flexical-scopes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flexical-scopes.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -7,6 +7,8 @@ LL |     let t = T { i: 0 };\n error[E0599]: no function or associated item named `f` found for type parameter `Foo` in the current scope\n   --> $DIR/lexical-scopes.rs:10:10\n    |\n+LL | fn g<Foo>() {\n+   |      --- function or associated item `f` not found for this type parameter\n LL |     Foo::f();\n    |          ^ function or associated item not found in `Foo`\n "}, {"sha": "77308a2c5215a4fd95d48d5ccb940d1c29eddc1c", "filename": "src/test/ui/methods/method-call-err-msg.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -51,8 +51,8 @@ error[E0599]: `Foo` is not an iterator\n    |\n LL | pub struct Foo;\n    | ---------------\n-   | |\n-   | method `take` not found for this\n+   | |          |\n+   | |          method `take` not found for this struct\n    | doesn't satisfy `Foo: Iterator`\n ...\n LL |      .take()"}, {"sha": "492d480e13e86e535432180cff9d45c65ace48f1", "filename": "src/test/ui/methods/method-not-found-generic-arg-elision.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no method named `distance` found for struct `Point<i32>` in the cu\n   --> $DIR/method-not-found-generic-arg-elision.rs:82:23\n    |\n LL | struct Point<T> {\n-   | --------------- method `distance` not found for this\n+   |        ----- method `distance` not found for this struct\n ...\n LL |     let d = point_i32.distance();\n    |                       ^^^^^^^^ method not found in `Point<i32>`\n@@ -14,7 +14,7 @@ error[E0599]: no method named `other` found for struct `Point` in the current sc\n   --> $DIR/method-not-found-generic-arg-elision.rs:84:23\n    |\n LL | struct Point<T> {\n-   | --------------- method `other` not found for this\n+   |        ----- method `other` not found for this struct\n ...\n LL |     let d = point_i32.other();\n    |                       ^^^^^ method not found in `Point<i32>`\n@@ -29,7 +29,7 @@ error[E0599]: no method named `method` found for struct `Wrapper<bool>` in the c\n   --> $DIR/method-not-found-generic-arg-elision.rs:90:13\n    |\n LL | struct Wrapper<T>(T);\n-   | --------------------- method `method` not found for this\n+   |        ------- method `method` not found for this struct\n ...\n LL |     wrapper.method();\n    |             ^^^^^^ method not found in `Wrapper<bool>`\n@@ -45,7 +45,7 @@ error[E0599]: no method named `other` found for struct `Wrapper` in the current\n   --> $DIR/method-not-found-generic-arg-elision.rs:92:13\n    |\n LL | struct Wrapper<T>(T);\n-   | --------------------- method `other` not found for this\n+   |        ------- method `other` not found for this struct\n ...\n LL |     wrapper.other();\n    |             ^^^^^ method not found in `Wrapper<bool>`\n@@ -54,7 +54,7 @@ error[E0599]: no method named `method` found for struct `Wrapper2<'_, bool, 3_us\n   --> $DIR/method-not-found-generic-arg-elision.rs:96:13\n    |\n LL | struct Wrapper2<'a, T, const C: usize> {\n-   | -------------------------------------- method `method` not found for this\n+   |        -------- method `method` not found for this struct\n ...\n LL |     wrapper.method();\n    |             ^^^^^^ method not found in `Wrapper2<'_, bool, 3_usize>`\n@@ -68,7 +68,7 @@ error[E0599]: no method named `other` found for struct `Wrapper2` in the current\n   --> $DIR/method-not-found-generic-arg-elision.rs:98:13\n    |\n LL | struct Wrapper2<'a, T, const C: usize> {\n-   | -------------------------------------- method `other` not found for this\n+   |        -------- method `other` not found for this struct\n ...\n LL |     wrapper.other();\n    |             ^^^^^ method not found in `Wrapper2<'_, bool, 3_usize>`\n@@ -83,7 +83,7 @@ error[E0599]: the method `method` exists for struct `Struct<f64>`, but its trait\n   --> $DIR/method-not-found-generic-arg-elision.rs:104:7\n    |\n LL | struct Struct<T>{\n-   | ---------------- method `method` not found for this\n+   |        ------ method `method` not found for this struct\n ...\n LL |     s.method();\n    |       ^^^^^^ method cannot be called on `Struct<f64>` due to unsatisfied trait bounds"}, {"sha": "d50acd1ac62d2d523e0ca991d0b018a43df4ef42", "filename": "src/test/ui/mismatched_types/ref-pat-suggestions.fixed", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.fixed?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -21,4 +21,17 @@ fn main() {\n     let _ = |&mut _a: &mut u32| (); //~ ERROR mismatched types\n     let _ = |&_a: &u32| (); //~ ERROR mismatched types\n     let _ = |&mut _a: &mut u32| (); //~ ERROR mismatched types\n+\n+    #[allow(unused_mut)]\n+    {\n+        struct S(u8);\n+\n+        let mut _a = 0; //~ ERROR mismatched types\n+        let S(_b) = S(0); //~ ERROR mismatched types\n+        let (_c,) = (0,); //~ ERROR mismatched types\n+\n+        match 0 {\n+            _d => {} //~ ERROR mismatched types\n+        }\n+    }\n }"}, {"sha": "1a77f687692242c03684531315b8a8184916dde3", "filename": "src/test/ui/mismatched_types/ref-pat-suggestions.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.rs?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -21,4 +21,17 @@ fn main() {\n     let _ = |&mut &_a: &mut u32| (); //~ ERROR mismatched types\n     let _ = |&&mut _a: &u32| (); //~ ERROR mismatched types\n     let _ = |&mut &mut _a: &mut u32| (); //~ ERROR mismatched types\n+\n+    #[allow(unused_mut)]\n+    {\n+        struct S(u8);\n+\n+        let &mut _a = 0; //~ ERROR mismatched types\n+        let S(&mut _b) = S(0); //~ ERROR mismatched types\n+        let (&mut _c,) = (0,); //~ ERROR mismatched types\n+\n+        match 0 {\n+            &mut _d => {} //~ ERROR mismatched types\n+        }\n+    }\n }"}, {"sha": "d9501a9bbc61e3fa75640a7a0e2b7913c2d63e13", "filename": "src/test/ui/mismatched_types/ref-pat-suggestions.stderr", "status": "modified", "additions": 91, "deletions": 1, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -24,6 +24,11 @@ LL | fn _f1(&mut _a: u32) {}\n    |\n    = note:           expected type `u32`\n            found mutable reference `&mut _`\n+note: to declare a mutable parameter use: `mut _a`\n+  --> $DIR/ref-pat-suggestions.rs:4:8\n+   |\n+LL | fn _f1(&mut _a: u32) {}\n+   |        ^^^^^^^\n help: to take parameter `_a` by reference, move `&mut` to the type\n    |\n LL - fn _f1(&mut _a: u32) {}\n@@ -122,6 +127,11 @@ LL |     let _: fn(u32) = |&mut _a| ();\n    |\n    = note:           expected type `u32`\n            found mutable reference `&mut _`\n+note: to declare a mutable parameter use: `mut _a`\n+  --> $DIR/ref-pat-suggestions.rs:12:23\n+   |\n+LL |     let _: fn(u32) = |&mut _a| ();\n+   |                       ^^^^^^^\n help: consider removing `&mut` from the pattern\n    |\n LL -     let _: fn(u32) = |&mut _a| ();\n@@ -222,6 +232,11 @@ LL |     let _ = |&mut _a: u32| ();\n    |\n    = note:           expected type `u32`\n            found mutable reference `&mut _`\n+note: to declare a mutable parameter use: `mut _a`\n+  --> $DIR/ref-pat-suggestions.rs:19:14\n+   |\n+LL |     let _ = |&mut _a: u32| ();\n+   |              ^^^^^^^\n help: to take parameter `_a` by reference, move `&mut` to the type\n    |\n LL -     let _ = |&mut _a: u32| ();\n@@ -292,6 +307,81 @@ LL -     let _ = |&mut &mut _a: &mut u32| ();\n LL +     let _ = |&mut _a: &mut u32| ();\n    |\n \n-error: aborting due to 18 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:29:13\n+   |\n+LL |         let &mut _a = 0;\n+   |             ^^^^^^^   - this expression has type `{integer}`\n+   |             |\n+   |             expected integer, found `&mut _`\n+   |             help: to declare a mutable variable use: `mut _a`\n+   |\n+   = note:           expected type `{integer}`\n+           found mutable reference `&mut _`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:30:15\n+   |\n+LL |         let S(&mut _b) = S(0);\n+   |               ^^^^^^^    ---- this expression has type `S`\n+   |               |\n+   |               expected `u8`, found `&mut _`\n+   |\n+   = note:           expected type `u8`\n+           found mutable reference `&mut _`\n+note: to declare a mutable binding use: `mut _b`\n+  --> $DIR/ref-pat-suggestions.rs:30:15\n+   |\n+LL |         let S(&mut _b) = S(0);\n+   |               ^^^^^^^\n+help: consider removing `&mut` from the pattern\n+   |\n+LL -         let S(&mut _b) = S(0);\n+LL +         let S(_b) = S(0);\n+   |\n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:31:14\n+   |\n+LL |         let (&mut _c,) = (0,);\n+   |              ^^^^^^^     ---- this expression has type `({integer},)`\n+   |              |\n+   |              expected integer, found `&mut _`\n+   |\n+   = note:           expected type `{integer}`\n+           found mutable reference `&mut _`\n+note: to declare a mutable binding use: `mut _c`\n+  --> $DIR/ref-pat-suggestions.rs:31:14\n+   |\n+LL |         let (&mut _c,) = (0,);\n+   |              ^^^^^^^\n+help: consider removing `&mut` from the pattern\n+   |\n+LL -         let (&mut _c,) = (0,);\n+LL +         let (_c,) = (0,);\n+   |\n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:34:13\n+   |\n+LL |         match 0 {\n+   |               - this expression has type `{integer}`\n+LL |             &mut _d => {}\n+   |             ^^^^^^^ expected integer, found `&mut _`\n+   |\n+   = note:           expected type `{integer}`\n+           found mutable reference `&mut _`\n+note: to declare a mutable binding use: `mut _d`\n+  --> $DIR/ref-pat-suggestions.rs:34:13\n+   |\n+LL |             &mut _d => {}\n+   |             ^^^^^^^\n+help: consider removing `&mut` from the pattern\n+   |\n+LL -             &mut _d => {}\n+LL +             _d => {}\n+   |\n+\n+error: aborting due to 22 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "88e9cd6a9c08879767047aea628ba1227c23ad3a", "filename": "src/test/ui/noncopyable-class.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fnoncopyable-class.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fnoncopyable-class.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnoncopyable-class.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no method named `clone` found for struct `Foo` in the current scop\n   --> $DIR/noncopyable-class.rs:34:16\n    |\n LL | struct Foo {\n-   | ---------- method `clone` not found for this\n+   |        --- method `clone` not found for this struct\n ...\n LL |     let _y = x.clone();\n    |                ^^^^^ method not found in `Foo`"}, {"sha": "40a85f7f74ca81c4a7a3346b69360afa1628e500", "filename": "src/test/ui/parser/emoji-identifiers.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fparser%2Femoji-identifiers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fparser%2Femoji-identifiers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Femoji-identifiers.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -77,7 +77,7 @@ error[E0599]: no function or associated item named `full_of\u2728` found for struct\n   --> $DIR/emoji-identifiers.rs:9:8\n    |\n LL | struct \ud83d\udc40;\n-   | ---------- function or associated item `full_of\u2728` not found for this\n+   |        -- function or associated item `full_of\u2728` not found for this struct\n ...\n LL |     \ud83d\udc40::full_of\u2728()\n    |         ^^^^^^^^^"}, {"sha": "f064a25a9c9a45b0311276572691609b932fdf8e", "filename": "src/test/ui/pattern/for-loop-bad-item.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fpattern%2Ffor-loop-bad-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fpattern%2Ffor-loop-bad-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Ffor-loop-bad-item.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -8,6 +8,11 @@ LL |     for ((_, _), (&mut c, _)) in &mut map {\n    |\n    = note:           expected type `char`\n            found mutable reference `&mut _`\n+note: to declare a mutable binding use: `mut c`\n+  --> $DIR/for-loop-bad-item.rs:7:19\n+   |\n+LL |     for ((_, _), (&mut c, _)) in &mut map {\n+   |                   ^^^^^^\n help: consider removing `&mut` from the pattern\n    |\n LL -     for ((_, _), (&mut c, _)) in &mut map {"}, {"sha": "edbea330a04b6f58708975f85c250387bc3d5fc5", "filename": "src/test/ui/rust-2018/uniform-paths/issue-87932.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fissue-87932.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fissue-87932.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fissue-87932.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no function or associated item named `deserialize` found for struc\n   --> $DIR/issue-87932.rs:13:8\n    |\n LL | pub struct A {}\n-   | ------------ function or associated item `deserialize` not found for this\n+   |            - function or associated item `deserialize` not found for this struct\n ...\n LL |     A::deserialize();\n    |        ^^^^^^^^^^^ function or associated item not found in `A`"}, {"sha": "06ccc5b1afeeae609930b976e229dac863b30a03", "filename": "src/test/ui/self/point-at-arbitrary-self-type-method.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fself%2Fpoint-at-arbitrary-self-type-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fself%2Fpoint-at-arbitrary-self-type-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fpoint-at-arbitrary-self-type-method.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no method named `foo` found for struct `A` in the current scope\n   --> $DIR/point-at-arbitrary-self-type-method.rs:8:7\n    |\n LL | struct A;\n-   | --------- method `foo` not found for this\n+   |        - method `foo` not found for this struct\n ...\n LL |     fn foo(self: Box<Self>) {}\n    |        --- the method is available for `Box<A>` here"}, {"sha": "bd77f67fb4e9bb7ce9cea68b65f87623953a9837", "filename": "src/test/ui/self/point-at-arbitrary-self-type-trait-method.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fself%2Fpoint-at-arbitrary-self-type-trait-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fself%2Fpoint-at-arbitrary-self-type-trait-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fpoint-at-arbitrary-self-type-trait-method.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -6,7 +6,7 @@ LL | trait B { fn foo(self: Box<Self>); }\n    |              |\n    |              the method is available for `Box<A>` here\n LL | struct A;\n-   | --------- method `foo` not found for this\n+   |        - method `foo` not found for this struct\n ...\n LL |     A.foo()\n    |       ^^^ method not found in `A`"}, {"sha": "912618555f4db05d5ab3f90cde9f319551b7bacb", "filename": "src/test/ui/span/issue-7575.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -42,7 +42,7 @@ error[E0599]: no method named `fff` found for struct `Myisize` in the current sc\n   --> $DIR/issue-7575.rs:62:30\n    |\n LL | struct Myisize(isize);\n-   | ---------------------- method `fff` not found for this\n+   |        ------- method `fff` not found for this struct\n ...\n LL |     u.f8(42) + u.f9(342) + m.fff(42)\n    |                            --^^^\n@@ -60,6 +60,8 @@ LL |     fn fff(i: isize) -> isize {\n error[E0599]: no method named `is_str` found for type parameter `T` in the current scope\n   --> $DIR/issue-7575.rs:70:7\n    |\n+LL | fn param_bound<T: ManyImplTrait>(t: T) -> bool {\n+   |                - method `is_str` not found for this type parameter\n LL |     t.is_str()\n    |       ^^^^^^ this is an associated function, not a method\n    |"}, {"sha": "d2350bc7e4f91fb46c5b99041d2f51b3ca7bcabe", "filename": "src/test/ui/specialization/defaultimpl/specialization-trait-not-implemented.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -13,8 +13,8 @@ error[E0599]: the method `foo_one` exists for struct `MyStruct`, but its trait b\n    |\n LL | struct MyStruct;\n    | ----------------\n-   | |\n-   | method `foo_one` not found for this\n+   | |      |\n+   | |      method `foo_one` not found for this struct\n    | doesn't satisfy `MyStruct: Foo`\n ...\n LL |     println!(\"{}\", MyStruct.foo_one());"}, {"sha": "65167ce4a29e010b642f384242d0b2803638d1e8", "filename": "src/test/ui/suggestions/derive-trait-for-method-call.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fsuggestions%2Fderive-trait-for-method-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fsuggestions%2Fderive-trait-for-method-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fderive-trait-for-method-call.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -11,7 +11,7 @@ LL | enum CloneEnum {\n    | -------------- doesn't satisfy `CloneEnum: Default`\n ...\n LL | struct Foo<X, Y> (X, Y);\n-   | ------------------------ method `test` not found for this\n+   |        --- method `test` not found for this struct\n ...\n LL |     let y = x.test();\n    |               ^^^^ method cannot be called on `Foo<Enum, CloneEnum>` due to unsatisfied trait bounds\n@@ -49,7 +49,7 @@ LL | struct CloneStruct {\n    | ------------------ doesn't satisfy `CloneStruct: Default`\n ...\n LL | struct Foo<X, Y> (X, Y);\n-   | ------------------------ method `test` not found for this\n+   |        --- method `test` not found for this struct\n ...\n LL |     let y = x.test();\n    |               ^^^^ method cannot be called on `Foo<Struct, CloneStruct>` due to unsatisfied trait bounds\n@@ -71,7 +71,7 @@ error[E0599]: the method `test` exists for struct `Foo<Vec<Enum>, Instant>`, but\n   --> $DIR/derive-trait-for-method-call.rs:40:15\n    |\n LL | struct Foo<X, Y> (X, Y);\n-   | ------------------------ method `test` not found for this\n+   |        --- method `test` not found for this struct\n ...\n LL |     let y = x.test();\n    |               ^^^^ method cannot be called on `Foo<Vec<Enum>, Instant>` due to unsatisfied trait bounds"}, {"sha": "d5af89e3547a14d19cc9cbe7f928683317864789", "filename": "src/test/ui/suggestions/dont-wrap-ambiguous-receivers.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fsuggestions%2Fdont-wrap-ambiguous-receivers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fsuggestions%2Fdont-wrap-ambiguous-receivers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-wrap-ambiguous-receivers.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no method named `pick` found for struct `Chaenomeles` in the curre\n   --> $DIR/dont-wrap-ambiguous-receivers.rs:18:25\n    |\n LL |     pub struct Chaenomeles;\n-   |     ----------------------- method `pick` not found for this\n+   |                ----------- method `pick` not found for this struct\n ...\n LL |     banana::Chaenomeles.pick()\n    |                         ^^^^ method not found in `Chaenomeles`"}, {"sha": "34b6230e19be2f2dbceec5b311c2f095d8322d4e", "filename": "src/test/ui/suggestions/field-has-method.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fsuggestions%2Ffield-has-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fsuggestions%2Ffield-has-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffield-has-method.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no method named `kind` found for struct `InferOk` in the current s\n   --> $DIR/field-has-method.rs:19:15\n    |\n LL | struct InferOk<T> {\n-   | ----------------- method `kind` not found for this\n+   |        ------- method `kind` not found for this struct\n ...\n LL |     let k = i.kind();\n    |               ^^^^ method not found in `InferOk<Ty>`"}, {"sha": "20f8e65f769a4d67e2f2b45cbf0d1b651a3c7401", "filename": "src/test/ui/suggestions/impl-trait-with-missing-trait-bounds-in-arg.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-trait-bounds-in-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-trait-bounds-in-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-trait-bounds-in-arg.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -1,6 +1,8 @@\n error[E0599]: no method named `hello` found for type parameter `impl Foo` in the current scope\n   --> $DIR/impl-trait-with-missing-trait-bounds-in-arg.rs:15:9\n    |\n+LL | fn test(foo: impl Foo) {\n+   |              -------- method `hello` not found for this type parameter\n LL |     foo.hello();\n    |         ^^^^^ method not found in `impl Foo`\n    |"}, {"sha": "523d7a7ccd29c7293578ecb32c3433f9c8492d94", "filename": "src/test/ui/suggestions/issue-21673.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fsuggestions%2Fissue-21673.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fsuggestions%2Fissue-21673.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-21673.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -13,6 +13,8 @@ LL | fn call_method<T: std::fmt::Debug + Foo>(x: &T) {\n error[E0599]: no method named `method` found for type parameter `T` in the current scope\n   --> $DIR/issue-21673.rs:10:7\n    |\n+LL | fn call_method_2<T>(x: T) {\n+   |                  - method `method` not found for this type parameter\n LL |     x.method()\n    |       ^^^^^^ method not found in `T`\n    |"}, {"sha": "3497c31826c5c4dcc81b760f97305583a8341e42", "filename": "src/test/ui/suggestions/suggest-assoc-fn-call-with-turbofish.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no method named `default_hello` found for struct `GenericAssocMeth\n   --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:9:7\n    |\n LL | struct GenericAssocMethod<T>(T);\n-   | -------------------------------- method `default_hello` not found for this\n+   |        ------------------ method `default_hello` not found for this struct\n ...\n LL |     x.default_hello();\n    |     --^^^^^^^^^^^^^"}, {"sha": "dd9010e32955ebb3bf843fe3975b4c8f09bfa658", "filename": "src/test/ui/suggestions/suggest-methods.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-methods.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no method named `bat` found for struct `Foo` in the current scope\n   --> $DIR/suggest-methods.rs:18:7\n    |\n LL | struct Foo;\n-   | ----------- method `bat` not found for this\n+   |        --- method `bat` not found for this struct\n ...\n LL |     f.bat(1.0);\n    |       ^^^ help: there is an associated function with a similar name: `bar`"}, {"sha": "cccf9378d4dae6b67e20bf47e6dc88416ab02f89", "filename": "src/test/ui/suggestions/suggest-variants.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-variants.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -29,7 +29,7 @@ error[E0599]: no variant or associated item named `Squareee` found for enum `Sha\n   --> $DIR/suggest-variants.rs:15:12\n    |\n LL | enum Shape {\n-   | ---------- variant or associated item `Squareee` not found here\n+   |      ----- variant or associated item `Squareee` not found for this enum\n ...\n LL |     Shape::Squareee;\n    |            ^^^^^^^^\n@@ -41,7 +41,7 @@ error[E0599]: no variant or associated item named `Circl` found for enum `Shape`\n   --> $DIR/suggest-variants.rs:16:12\n    |\n LL | enum Shape {\n-   | ---------- variant or associated item `Circl` not found here\n+   |      ----- variant or associated item `Circl` not found for this enum\n ...\n LL |     Shape::Circl;\n    |            ^^^^^\n@@ -53,7 +53,7 @@ error[E0599]: no variant or associated item named `Rombus` found for enum `Shape\n   --> $DIR/suggest-variants.rs:17:12\n    |\n LL | enum Shape {\n-   | ---------- variant or associated item `Rombus` not found here\n+   |      ----- variant or associated item `Rombus` not found for this enum\n ...\n LL |     Shape::Rombus;\n    |            ^^^^^^ variant or associated item not found in `Shape`"}, {"sha": "aa9880a60b67c5ebd160fbe8db6944ff02adc948", "filename": "src/test/ui/suggestions/use-placement-typeck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fsuggestions%2Fuse-placement-typeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Fsuggestions%2Fuse-placement-typeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fuse-placement-typeck.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -8,7 +8,7 @@ LL |         fn abc(&self) {}\n    |            --- the method is available for `S` here\n LL |     }\n LL |     pub struct S;\n-   |     ------------- method `abc` not found for this\n+   |                - method `abc` not found for this struct\n    |\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:"}, {"sha": "188125d248d18d822162939e8528a6f4ce38a46b", "filename": "src/test/ui/traits/issue-3973.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Ftraits%2Fissue-3973.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Ftraits%2Fissue-3973.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-3973.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -11,7 +11,7 @@ error[E0599]: no function or associated item named `new` found for struct `Point\n   --> $DIR/issue-3973.rs:22:20\n    |\n LL | struct Point {\n-   | ------------ function or associated item `new` not found for this\n+   |        ----- function or associated item `new` not found for this struct\n ...\n LL |     let p = Point::new(0.0, 0.0);\n    |                    ^^^ function or associated item not found in `Point`"}, {"sha": "ae33e61d83b7a1a889af4d31f94afc15415cd758", "filename": "src/test/ui/traits/issue-65284-suggest-generic-trait-bound.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Ftraits%2Fissue-65284-suggest-generic-trait-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Ftraits%2Fissue-65284-suggest-generic-trait-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-65284-suggest-generic-trait-bound.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -1,6 +1,8 @@\n error[E0599]: no method named `foo` found for type parameter `T` in the current scope\n   --> $DIR/issue-65284-suggest-generic-trait-bound.rs:8:7\n    |\n+LL | fn do_stuff<T : Bar>(t : T) {\n+   |             - method `foo` not found for this type parameter\n LL |     t.foo()\n    |       ^^^ method not found in `T`\n    |"}, {"sha": "ca7bacdbf41ba68adb6b4f4ae36bfb065c2b727a", "filename": "src/test/ui/traits/issue-95898.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Ftraits%2Fissue-95898.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Ftraits%2Fissue-95898.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-95898.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -1,6 +1,8 @@\n error[E0599]: no method named `clone` found for type parameter `T` in the current scope\n   --> $DIR/issue-95898.rs:5:7\n    |\n+LL | fn foo<T:>(t: T) {\n+   |        - method `clone` not found for this type parameter\n LL |     t.clone();\n    |       ^^^^^ method not found in `T`\n    |"}, {"sha": "a7954f7b245951d16f269c2b3568ca29a98a6752", "filename": "src/test/ui/traits/item-privacy.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no method named `a` found for struct `S` in the current scope\n   --> $DIR/item-privacy.rs:67:7\n    |\n LL | struct S;\n-   | --------- method `a` not found for this\n+   |        - method `a` not found for this struct\n ...\n LL |     S.a();\n    |       ^ method not found in `S`\n@@ -18,7 +18,7 @@ error[E0599]: no method named `b` found for struct `S` in the current scope\n   --> $DIR/item-privacy.rs:68:7\n    |\n LL | struct S;\n-   | --------- method `b` not found for this\n+   |        - method `b` not found for this struct\n ...\n LL |         fn b(&self) { }\n    |            - the method is available for `S` here\n@@ -45,7 +45,7 @@ error[E0599]: no function or associated item named `a` found for struct `S` in t\n   --> $DIR/item-privacy.rs:78:8\n    |\n LL | struct S;\n-   | --------- function or associated item `a` not found for this\n+   |        - function or associated item `a` not found for this struct\n ...\n LL |     S::a(&S);\n    |        ^ function or associated item not found in `S`\n@@ -61,7 +61,7 @@ error[E0599]: no function or associated item named `b` found for struct `S` in t\n   --> $DIR/item-privacy.rs:80:8\n    |\n LL | struct S;\n-   | --------- function or associated item `b` not found for this\n+   |        - function or associated item `b` not found for this struct\n ...\n LL |     S::b(&S);\n    |        ^ function or associated item not found in `S`\n@@ -85,7 +85,7 @@ error[E0599]: no associated item named `A` found for struct `S` in the current s\n   --> $DIR/item-privacy.rs:97:8\n    |\n LL | struct S;\n-   | --------- associated item `A` not found for this\n+   |        - associated item `A` not found for this struct\n ...\n LL |     S::A;\n    |        ^ associated item not found in `S`\n@@ -101,7 +101,7 @@ error[E0599]: no associated item named `B` found for struct `S` in the current s\n   --> $DIR/item-privacy.rs:98:8\n    |\n LL | struct S;\n-   | --------- associated item `B` not found for this\n+   |        - associated item `B` not found for this struct\n ...\n LL |     S::B;\n    |        ^ associated item not found in `S`"}, {"sha": "d8f2f8761ff94de57cc21b9d9d4ff7ad02cd74d8", "filename": "src/test/ui/traits/negative-impls/explicitly-unimplemented-error-message.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fexplicitly-unimplemented-error-message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fexplicitly-unimplemented-error-message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fexplicitly-unimplemented-error-message.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no method named `clone` found for struct `Qux` in the current scop\n   --> $DIR/explicitly-unimplemented-error-message.rs:34:9\n    |\n LL | struct Qux;\n-   | ----------- method `clone` not found for this\n+   |        --- method `clone` not found for this struct\n ...\n LL |     Qux.clone();\n    |         ^^^^^ method not found in `Qux`\n@@ -23,7 +23,7 @@ error[E0599]: no method named `foo` found for struct `Qux` in the current scope\n   --> $DIR/explicitly-unimplemented-error-message.rs:44:9\n    |\n LL | struct Qux;\n-   | ----------- method `foo` not found for this\n+   |        --- method `foo` not found for this struct\n ...\n LL |     Qux.foo();\n    |         ^^^ method not found in `Qux`"}, {"sha": "856c0db08f79c26275f3647e9b16593aadc8652a", "filename": "src/test/ui/typeck/point-at-type-parameter-definition.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Ftypeck%2Fpoint-at-type-parameter-definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Ftypeck%2Fpoint-at-type-parameter-definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fpoint-at-type-parameter-definition.rs?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -0,0 +1,17 @@\n+trait Trait {\n+    fn do_stuff(&self);\n+}\n+\n+struct Hello;\n+\n+impl Hello {\n+    fn method(&self) {}\n+}\n+\n+impl<Hello> Trait for Vec<Hello> {\n+    fn do_stuff(&self) {\n+        self[0].method(); //~ ERROR no method named `method` found for type parameter `Hello` in the current scope\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "8a6ab61100d24dd8a98e4951b7931c4f807ee7f3", "filename": "src/test/ui/typeck/point-at-type-parameter-definition.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Ftypeck%2Fpoint-at-type-parameter-definition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Ftypeck%2Fpoint-at-type-parameter-definition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fpoint-at-type-parameter-definition.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -0,0 +1,12 @@\n+error[E0599]: no method named `method` found for type parameter `Hello` in the current scope\n+  --> $DIR/point-at-type-parameter-definition.rs:13:17\n+   |\n+LL | impl<Hello> Trait for Vec<Hello> {\n+   |      ----- method `method` not found for this type parameter\n+LL |     fn do_stuff(&self) {\n+LL |         self[0].method();\n+   |                 ^^^^^^ method not found in `Hello`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "b5c72aa524779a53fcf6a1786baee50fd0d5d561", "filename": "src/test/ui/union/union-derive-clone.mirunsafeck.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -3,8 +3,8 @@ error[E0599]: the method `clone` exists for union `U5<CloneNoCopy>`, but its tra\n    |\n LL | union U5<T> {\n    | -----------\n-   | |\n-   | method `clone` not found for this\n+   | |     |\n+   | |     method `clone` not found for this union\n    | doesn't satisfy `U5<CloneNoCopy>: Clone`\n ...\n LL | struct CloneNoCopy;"}, {"sha": "b5c72aa524779a53fcf6a1786baee50fd0d5d561", "filename": "src/test/ui/union/union-derive-clone.thirunsafeck.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aab472d52ba7314dc193c73abcd384e2586123c/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr?ref=8aab472d52ba7314dc193c73abcd384e2586123c", "patch": "@@ -3,8 +3,8 @@ error[E0599]: the method `clone` exists for union `U5<CloneNoCopy>`, but its tra\n    |\n LL | union U5<T> {\n    | -----------\n-   | |\n-   | method `clone` not found for this\n+   | |     |\n+   | |     method `clone` not found for this union\n    | doesn't satisfy `U5<CloneNoCopy>: Clone`\n ...\n LL | struct CloneNoCopy;"}]}