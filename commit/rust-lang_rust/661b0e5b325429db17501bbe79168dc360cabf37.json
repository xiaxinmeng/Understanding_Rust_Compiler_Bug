{"sha": "661b0e5b325429db17501bbe79168dc360cabf37", "node_id": "C_kwDOAAsO6NoAKDY2MWIwZTViMzI1NDI5ZGIxNzUwMWJiZTc5MTY4ZGMzNjBjYWJmMzc", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-05T13:56:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-05T13:56:49Z"}, "message": "Rollup merge of #95525 - ohno418:suggest-derivable-trait-E0277, r=compiler-errors\n\nSuggest derivable trait on E0277 error\n\nCloses https://github.com/rust-lang/rust/issues/95099 .", "tree": {"sha": "568ce36a620240e8ce4aceecd754a5e7e7a76bdd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/568ce36a620240e8ce4aceecd754a5e7e7a76bdd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/661b0e5b325429db17501bbe79168dc360cabf37", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiTEqhCRBK7hj4Ov3rIwAAj2cIAC3zXXxQ9IuNRNQ/94BDfa1r\npbjobu/OS2zezlan9H5NQRsKYzg9uLWnR0W1HDCKaOQyz6tVz13NCJVaolKBWdtC\ngccYJz0r06XTB/CvjojWaEEGn9QpXAdYdPv12da6TplKumwSsRetLlqHS0e067Da\nzZwW/+nMQ9MqttLPIv7L7Ew7rjEibe/YdJdAkdjYKUxzcgUkEXoiWwIc5STo5Y3K\nHDnB+uwDnG7wwYhGRYBbfNiiLn18A72Za5tQZN/QhcekfaVtgenpq675m5p3YzVX\n5N6UStyWGNCQZpHGUfRMpiOABVABGhPOf0Zlj9hivN2YfkM5fl1hxEyHRc3vUME=\n=M7K6\n-----END PGP SIGNATURE-----\n", "payload": "tree 568ce36a620240e8ce4aceecd754a5e7e7a76bdd\nparent 634770c0a7f8598164ab825cfe419cc8b03c36e5\nparent b831b60cefabafa78ea9da173c2ce9c0321a29c7\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1649167009 +0200\ncommitter GitHub <noreply@github.com> 1649167009 +0200\n\nRollup merge of #95525 - ohno418:suggest-derivable-trait-E0277, r=compiler-errors\n\nSuggest derivable trait on E0277 error\n\nCloses https://github.com/rust-lang/rust/issues/95099 .\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/661b0e5b325429db17501bbe79168dc360cabf37", "html_url": "https://github.com/rust-lang/rust/commit/661b0e5b325429db17501bbe79168dc360cabf37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/661b0e5b325429db17501bbe79168dc360cabf37/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "634770c0a7f8598164ab825cfe419cc8b03c36e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/634770c0a7f8598164ab825cfe419cc8b03c36e5", "html_url": "https://github.com/rust-lang/rust/commit/634770c0a7f8598164ab825cfe419cc8b03c36e5"}, {"sha": "b831b60cefabafa78ea9da173c2ce9c0321a29c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b831b60cefabafa78ea9da173c2ce9c0321a29c7", "html_url": "https://github.com/rust-lang/rust/commit/b831b60cefabafa78ea9da173c2ce9c0321a29c7"}], "stats": {"total": 340, "additions": 340, "deletions": 0}, "files": [{"sha": "9998c5bb087e17bfe1a38fa4d6482077f9995589", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -540,6 +540,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         );\n                         self.note_version_mismatch(&mut err, &trait_ref);\n                         self.suggest_remove_await(&obligation, &mut err);\n+                        self.suggest_derive(&obligation, &mut err, trait_predicate);\n \n                         if Some(trait_ref.def_id()) == tcx.lang_items().try_trait() {\n                             self.suggest_await_before_try("}, {"sha": "7c3f306717a69e24665a9b16bd19aaa587cccfe9", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -189,6 +189,13 @@ pub trait InferCtxtExt<'tcx> {\n         err: &mut Diagnostic,\n         trait_ref: &ty::PolyTraitRef<'tcx>,\n     );\n+\n+    fn suggest_derive(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+        err: &mut Diagnostic,\n+        trait_pred: ty::PolyTraitPredicate<'tcx>,\n+    );\n }\n \n fn predicate_constraint(generics: &hir::Generics<'_>, pred: String) -> (Span, String) {\n@@ -2651,6 +2658,68 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             _ => {}\n         }\n     }\n+\n+    fn suggest_derive(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+        err: &mut Diagnostic,\n+        trait_pred: ty::PolyTraitPredicate<'tcx>,\n+    ) {\n+        let Some(diagnostic_name) = self.tcx.get_diagnostic_name(trait_pred.def_id()) else {\n+            return;\n+        };\n+        let (adt, substs) = match trait_pred.skip_binder().self_ty().kind() {\n+            ty::Adt(adt, substs) if adt.did().is_local() => (adt, substs),\n+            _ => return,\n+        };\n+        let can_derive = {\n+            let is_derivable_trait = match diagnostic_name {\n+                sym::Default => !adt.is_enum(),\n+                sym::PartialEq | sym::PartialOrd => {\n+                    let rhs_ty = trait_pred.skip_binder().trait_ref.substs.type_at(1);\n+                    trait_pred.skip_binder().self_ty() == rhs_ty\n+                }\n+                sym::Eq | sym::Ord | sym::Clone | sym::Copy | sym::Hash | sym::Debug => true,\n+                _ => false,\n+            };\n+            is_derivable_trait &&\n+                // Ensure all fields impl the trait.\n+                adt.all_fields().all(|field| {\n+                    let field_ty = field.ty(self.tcx, substs);\n+                    let trait_substs = match diagnostic_name {\n+                        sym::PartialEq | sym::PartialOrd => {\n+                            self.tcx.mk_substs_trait(field_ty, &[field_ty.into()])\n+                        }\n+                        _ => self.tcx.mk_substs_trait(field_ty, &[]),\n+                    };\n+                    let trait_pred = trait_pred.map_bound_ref(|tr| ty::TraitPredicate {\n+                        trait_ref: ty::TraitRef {\n+                            substs: trait_substs,\n+                            ..trait_pred.skip_binder().trait_ref\n+                        },\n+                        ..*tr\n+                    });\n+                    let field_obl = Obligation::new(\n+                        obligation.cause.clone(),\n+                        obligation.param_env,\n+                        trait_pred.to_predicate(self.tcx),\n+                    );\n+                    self.predicate_must_hold_modulo_regions(&field_obl)\n+                })\n+        };\n+        if can_derive {\n+            err.span_suggestion_verbose(\n+                self.tcx.def_span(adt.did()).shrink_to_lo(),\n+                &format!(\n+                    \"consider annotating `{}` with `#[derive({})]`\",\n+                    trait_pred.skip_binder().self_ty(),\n+                    diagnostic_name.to_string(),\n+                ),\n+                format!(\"#[derive({})]\\n\", diagnostic_name.to_string()),\n+                Applicability::MaybeIncorrect,\n+            );\n+        }\n+    }\n }\n \n /// Collect all the returned expressions within the input expression."}, {"sha": "eba1a8e2278b7d20b11c95c26f2f57c896395891", "filename": "src/test/ui/array-slice-vec/repeat_empty_ok.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Farray-slice-vec%2Frepeat_empty_ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Farray-slice-vec%2Frepeat_empty_ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Frepeat_empty_ok.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -5,6 +5,10 @@ LL |     let headers = [Header{value: &[]}; 128];\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Header<'_>`\n    |\n    = note: the `Copy` trait is required because the repeated element will be copied\n+help: consider annotating `Header<'_>` with `#[derive(Copy)]`\n+   |\n+LL | #[derive(Copy)]\n+   |\n \n error[E0277]: the trait bound `Header<'_>: Copy` is not satisfied\n   --> $DIR/repeat_empty_ok.rs:13:19\n@@ -13,6 +17,10 @@ LL |     let headers = [Header{value: &[0]}; 128];\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Header<'_>`\n    |\n    = note: the `Copy` trait is required because the repeated element will be copied\n+help: consider annotating `Header<'_>` with `#[derive(Copy)]`\n+   |\n+LL | #[derive(Copy)]\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "43541c5dfbcb54e4f9a39a62fc49a32dbacf670f", "filename": "src/test/ui/associated-types/defaults-suitability.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -9,6 +9,10 @@ note: required by a bound in `Tr::Ty`\n    |\n LL |     type Ty: Clone = NotClone;\n    |              ^^^^^ required by this bound in `Tr::Ty`\n+help: consider annotating `NotClone` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error[E0277]: the trait bound `NotClone: Clone` is not satisfied\n   --> $DIR/defaults-suitability.rs:22:15\n@@ -24,6 +28,10 @@ LL |     Self::Ty: Clone,\n LL | {\n LL |     type Ty = NotClone;\n    |          -- required by a bound in this\n+help: consider annotating `NotClone` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error[E0277]: the trait bound `T: Clone` is not satisfied\n   --> $DIR/defaults-suitability.rs:28:23"}, {"sha": "7326324b03ccacf6a433c6f99468a3365589318c", "filename": "src/test/ui/derives/derives-span-Clone-enum-struct-variant.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -8,6 +8,10 @@ LL |      x: Error\n    |      ^^^^^^^^ the trait `Clone` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "229a4f7d9ff9494c50ca3e2c2e29cb8310c6b880", "filename": "src/test/ui/derives/derives-span-Clone-enum.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -8,6 +8,10 @@ LL |      Error\n    |      ^^^^^ the trait `Clone` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "96bad9edad94c4a9e51c4e47125f900a73747a41", "filename": "src/test/ui/derives/derives-span-Clone-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-struct.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -8,6 +8,10 @@ LL |     x: Error\n    |     ^^^^^^^^ the trait `Clone` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "b61341e57e671cd0be5603bbc9d8526d94b3e272", "filename": "src/test/ui/derives/derives-span-Clone-tuple-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -8,6 +8,10 @@ LL |     Error\n    |     ^^^^^ the trait `Clone` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "58a64a4f53bfc54b97e6f833e63737e2b30fe355", "filename": "src/test/ui/derives/derives-span-Debug-enum-struct-variant.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum-struct-variant.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -10,6 +10,10 @@ LL |      x: Error\n    = help: the trait `Debug` is not implemented for `Error`\n    = note: add `#[derive(Debug)]` to `Error` or manually `impl Debug for Error`\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Debug)]`\n+   |\n+LL | #[derive(Debug)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "e9bb5f960b04a90f77d042d9b50f18257a8500f1", "filename": "src/test/ui/derives/derives-span-Debug-enum.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -10,6 +10,10 @@ LL |      Error\n    = help: the trait `Debug` is not implemented for `Error`\n    = note: add `#[derive(Debug)]` to `Error` or manually `impl Debug for Error`\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Debug)]`\n+   |\n+LL | #[derive(Debug)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "0a117c060ff383bef671c4840f4e39767e851b65", "filename": "src/test/ui/derives/derives-span-Debug-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-struct.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -10,6 +10,10 @@ LL |     x: Error\n    = help: the trait `Debug` is not implemented for `Error`\n    = note: add `#[derive(Debug)]` to `Error` or manually `impl Debug for Error`\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Debug)]`\n+   |\n+LL | #[derive(Debug)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "f2e90a418455fbfca99b96bddcfac1d86f0b9967", "filename": "src/test/ui/derives/derives-span-Debug-tuple-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-tuple-struct.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -10,6 +10,10 @@ LL |     Error\n    = help: the trait `Debug` is not implemented for `Error`\n    = note: add `#[derive(Debug)]` to `Error` or manually `impl Debug for Error`\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Debug)]`\n+   |\n+LL | #[derive(Debug)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "d4affd535eef4ea72313be6de5cbd25f0c32a93f", "filename": "src/test/ui/derives/derives-span-Default-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-struct.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -8,6 +8,10 @@ LL |     x: Error\n    |     ^^^^^^^^ the trait `Default` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Default)]`\n+   |\n+LL | #[derive(Default)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "129351f599899ffab26414f77561697ca05aaaab", "filename": "src/test/ui/derives/derives-span-Default-tuple-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -8,6 +8,10 @@ LL |     Error\n    |     ^^^^^ the trait `Default` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Default)]`\n+   |\n+LL | #[derive(Default)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "e3fb234b96e4153b51ade0849d30f6a36c2a3a97", "filename": "src/test/ui/derives/derives-span-Eq-enum-struct-variant.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -13,6 +13,10 @@ note: required by a bound in `AssertParamIsEq`\n LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n    |                               ^^ required by this bound in `AssertParamIsEq`\n    = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Eq)]`\n+   |\n+LL | #[derive(Eq)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "4e10c3f69e735a5df6d17b558f156aad35661078", "filename": "src/test/ui/derives/derives-span-Eq-enum.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -13,6 +13,10 @@ note: required by a bound in `AssertParamIsEq`\n LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n    |                               ^^ required by this bound in `AssertParamIsEq`\n    = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Eq)]`\n+   |\n+LL | #[derive(Eq)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "bfdab052a2ed42167c6d6398d2dbbc5b8e11cba4", "filename": "src/test/ui/derives/derives-span-Eq-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -13,6 +13,10 @@ note: required by a bound in `AssertParamIsEq`\n LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n    |                               ^^ required by this bound in `AssertParamIsEq`\n    = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Eq)]`\n+   |\n+LL | #[derive(Eq)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "26b8be343336b95ac9f7947ccf639103d01ef928", "filename": "src/test/ui/derives/derives-span-Eq-tuple-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -13,6 +13,10 @@ note: required by a bound in `AssertParamIsEq`\n LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n    |                               ^^ required by this bound in `AssertParamIsEq`\n    = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Eq)]`\n+   |\n+LL | #[derive(Eq)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "fe5e0e96ac7af1290546d0ce0d52c326678d42b0", "filename": "src/test/ui/derives/derives-span-Hash-enum-struct-variant.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -8,6 +8,10 @@ LL |      x: Error\n    |      ^^^^^^^^ the trait `Hash` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Hash)]`\n+   |\n+LL | #[derive(Hash)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "99785b87ca83eef99d82a6b72095835e10f3a858", "filename": "src/test/ui/derives/derives-span-Hash-enum.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -8,6 +8,10 @@ LL |      Error\n    |      ^^^^^ the trait `Hash` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Hash)]`\n+   |\n+LL | #[derive(Hash)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "4db83dd130010c7996ee18a94ecd98e04d110622", "filename": "src/test/ui/derives/derives-span-Hash-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -8,6 +8,10 @@ LL |     x: Error\n    |     ^^^^^^^^ the trait `Hash` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Hash)]`\n+   |\n+LL | #[derive(Hash)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "8660c97e69e1c47106fe3237bbbe338e4c83854a", "filename": "src/test/ui/derives/derives-span-Hash-tuple-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -8,6 +8,10 @@ LL |     Error\n    |     ^^^^^ the trait `Hash` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Hash)]`\n+   |\n+LL | #[derive(Hash)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "6e48332c25067c5b5249fb4f85c904b21352661d", "filename": "src/test/ui/derives/derives-span-Ord-enum-struct-variant.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -8,6 +8,10 @@ LL |      x: Error\n    |      ^^^^^^^^ the trait `Ord` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Ord)]`\n+   |\n+LL | #[derive(Ord)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "b05cf0a057b233cb309e4e1c0ea4557b3f1a60d9", "filename": "src/test/ui/derives/derives-span-Ord-enum.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -8,6 +8,10 @@ LL |      Error\n    |      ^^^^^ the trait `Ord` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Ord)]`\n+   |\n+LL | #[derive(Ord)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "c4def34a83dad2166a990cda9db59f4123d84e60", "filename": "src/test/ui/derives/derives-span-Ord-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-struct.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -8,6 +8,10 @@ LL |     x: Error\n    |     ^^^^^^^^ the trait `Ord` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Ord)]`\n+   |\n+LL | #[derive(Ord)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "a3b288d0fb9cc2bc8af3d57a77cef5139efa5bd5", "filename": "src/test/ui/derives/derives-span-Ord-tuple-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -8,6 +8,10 @@ LL |     Error\n    |     ^^^^^ the trait `Ord` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Ord)]`\n+   |\n+LL | #[derive(Ord)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "2d19aaf68afb1375889e113860babea228a42937", "filename": "src/test/ui/derives/derives-span-PartialOrd-enum-struct-variant.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -9,6 +9,10 @@ LL |      x: Error\n    |\n    = help: the trait `PartialOrd` is not implemented for `Error`\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(PartialOrd)]`\n+   |\n+LL | #[derive(PartialOrd)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "dfbb8060ffa12d4568cf96b81fb91e3892caccf6", "filename": "src/test/ui/derives/derives-span-PartialOrd-enum.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -9,6 +9,10 @@ LL |      Error\n    |\n    = help: the trait `PartialOrd` is not implemented for `Error`\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(PartialOrd)]`\n+   |\n+LL | #[derive(PartialOrd)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "ba63d86e8e46c53bbab26e11a9ff6237c4922db7", "filename": "src/test/ui/derives/derives-span-PartialOrd-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -9,6 +9,10 @@ LL |     x: Error\n    |\n    = help: the trait `PartialOrd` is not implemented for `Error`\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(PartialOrd)]`\n+   |\n+LL | #[derive(PartialOrd)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "7686ed8064e7986ee4e4226c5d5e1c3afd94f54f", "filename": "src/test/ui/derives/derives-span-PartialOrd-tuple-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -9,6 +9,10 @@ LL |     Error\n    |\n    = help: the trait `PartialOrd` is not implemented for `Error`\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(PartialOrd)]`\n+   |\n+LL | #[derive(PartialOrd)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "451058cd0ee01b7be0c341ebfab35e309a173766", "filename": "src/test/ui/derives/deriving-no-inner-impl-error-message.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderiving-no-inner-impl-error-message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fderives%2Fderiving-no-inner-impl-error-message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-no-inner-impl-error-message.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -48,6 +48,10 @@ LL |     x: NoCloneOrEq\n    |     ^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `NoCloneOrEq`\n    |\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `NoCloneOrEq` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error: aborting due to 3 previous errors\n "}, {"sha": "428be79617d7feebf7b1a147b16e203f8801c092", "filename": "src/test/ui/error-codes/E0277-3.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Ferror-codes%2FE0277-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Ferror-codes%2FE0277-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277-3.rs?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -0,0 +1,8 @@\n+fn foo<T: PartialEq>(_: T) {}\n+\n+struct S;\n+\n+fn main() {\n+    foo(S);\n+    //~^ ERROR can't compare `S` with `S`\n+}"}, {"sha": "0127e1ccc81ec0e64fd06b8766ab4682df3bb643", "filename": "src/test/ui/error-codes/E0277-3.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Ferror-codes%2FE0277-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Ferror-codes%2FE0277-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277-3.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -0,0 +1,22 @@\n+error[E0277]: can't compare `S` with `S`\n+  --> $DIR/E0277-3.rs:6:9\n+   |\n+LL |     foo(S);\n+   |     --- ^ no implementation for `S == S`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `PartialEq` is not implemented for `S`\n+note: required by a bound in `foo`\n+  --> $DIR/E0277-3.rs:1:11\n+   |\n+LL | fn foo<T: PartialEq>(_: T) {}\n+   |           ^^^^^^^^^ required by this bound in `foo`\n+help: consider annotating `S` with `#[derive(PartialEq)]`\n+   |\n+LL | #[derive(PartialEq)]\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "c6fa02cb9a6b45d2e30aa2f55c12c4c3143a190c", "filename": "src/test/ui/generic-associated-types/issue-87429-associated-type-default.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-associated-type-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-associated-type-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-associated-type-default.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -10,6 +10,10 @@ note: required by a bound in `Family2::Member`\n    |\n LL |     type Member<'a>: for<'b> PartialEq<Self::Member<'b>> = Foo;\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Family2::Member`\n+help: consider annotating `Foo` with `#[derive(PartialEq)]`\n+   |\n+LL | #[derive(PartialEq)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "015e0c7792fecbe936298cf21d28d2d4e2b47ae7", "filename": "src/test/ui/generic-associated-types/issue-87429-specialization.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-specialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-specialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-specialization.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -20,6 +20,10 @@ note: required by a bound in `Family::Member`\n    |\n LL |     type Member<'a>: for<'b> PartialEq<Self::Member<'b>>;\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Family::Member`\n+help: consider annotating `Foo` with `#[derive(PartialEq)]`\n+   |\n+LL | #[derive(PartialEq)]\n+   |\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "d70bf6e1d921c3618744544c4763648cd8057d27", "filename": "src/test/ui/issues/issue-20162.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fissues%2Fissue-20162.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fissues%2Fissue-20162.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20162.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -9,6 +9,10 @@ note: required by a bound in `slice::<impl [T]>::sort`\n    |\n LL |         T: Ord,\n    |            ^^^ required by this bound in `slice::<impl [T]>::sort`\n+help: consider annotating `X` with `#[derive(Ord)]`\n+   |\n+LL | #[derive(Ord)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "266749376eb05427b9d43508a6adf14d89fe07c6", "filename": "src/test/ui/issues/issue-21160.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -7,6 +7,10 @@ LL | struct Foo(Bar);\n    |            ^^^ the trait `Hash` is not implemented for `Bar`\n    |\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Bar` with `#[derive(Hash)]`\n+   |\n+LL | #[derive(Hash)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "69ef876d2550222cac11e12ee43ae48facbfbe8d", "filename": "src/test/ui/issues/issue-34229.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fissues%2Fissue-34229.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fissues%2Fissue-34229.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34229.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -8,6 +8,10 @@ LL | #[derive(PartialEq, PartialOrd)] struct Nope(Comparable);\n    |\n    = help: the trait `PartialOrd` is not implemented for `Comparable`\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Comparable` with `#[derive(PartialOrd)]`\n+   |\n+LL | #[derive(PartialEq)] #[derive(PartialOrd)]\n+   |                      +++++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "1772d353fe4277a0f3f37ee4943b891261dea312", "filename": "src/test/ui/kindck/kindck-impl-type-params.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -93,6 +93,10 @@ note: required because of the requirements on the impl of `Gettable<Foo>` for `S\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                                ^^^^^^^^^^^     ^^^^\n    = note: required for the cast to the object type `dyn Gettable<Foo>`\n+help: consider annotating `Foo` with `#[derive(Copy)]`\n+   |\n+LL |     #[derive(Copy)]\n+   |\n \n error: aborting due to 6 previous errors\n "}, {"sha": "f227ac2477e6c33f68ca72268c195729aaf64fe8", "filename": "src/test/ui/kindck/kindck-impl-type-params.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -101,6 +101,10 @@ note: required because of the requirements on the impl of `Gettable<Foo>` for `S\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                                ^^^^^^^^^^^     ^^^^\n    = note: required for the cast to the object type `dyn Gettable<Foo>`\n+help: consider annotating `Foo` with `#[derive(Copy)]`\n+   |\n+LL |     #[derive(Copy)]\n+   |\n \n error: aborting due to 7 previous errors\n "}, {"sha": "803883460f08f4074adf2752a500673820a37b2c", "filename": "src/test/ui/malformed/malformed-derive-entry.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -28,6 +28,10 @@ note: required by a bound in `Copy`\n LL | pub trait Copy: Clone {\n    |                 ^^^^^ required by this bound in `Copy`\n    = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Test1` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error[E0277]: the trait bound `Test2: Clone` is not satisfied\n   --> $DIR/malformed-derive-entry.rs:6:10\n@@ -41,6 +45,10 @@ note: required by a bound in `Copy`\n LL | pub trait Copy: Clone {\n    |                 ^^^^^ required by this bound in `Copy`\n    = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Test2` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error: aborting due to 5 previous errors\n "}, {"sha": "c2515c40b1d778373235367e02fdfaefb501fb0b", "filename": "src/test/ui/mismatched_types/method-help-unsatisfied-bound.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -11,6 +11,10 @@ note: required by a bound in `Result::<T, E>::unwrap`\n    |\n LL |         E: fmt::Debug,\n    |            ^^^^^^^^^^ required by this bound in `Result::<T, E>::unwrap`\n+help: consider annotating `Foo` with `#[derive(Debug)]`\n+   |\n+LL | #[derive(Debug)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "92909797c9679e38685da12858c0ff02e606abae", "filename": "src/test/ui/not-clone-closure.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fnot-clone-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fnot-clone-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-clone-closure.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -11,6 +11,10 @@ LL |       let hello = hello.clone();\n    |                         ^^^^^ within `[closure@$DIR/not-clone-closure.rs:7:17: 9:6]`, the trait `Clone` is not implemented for `S`\n    |\n    = note: required because it appears within the type `[closure@$DIR/not-clone-closure.rs:7:17: 9:6]`\n+help: consider annotating `S` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "417e01e491b471a5cdce49b2a51bae0f5c121f1f", "filename": "src/test/ui/on-unimplemented/no-debug.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -7,6 +7,10 @@ LL |     println!(\"{:?} {:?}\", Foo, Bar);\n    = help: the trait `Debug` is not implemented for `Foo`\n    = note: add `#[derive(Debug)]` to `Foo` or manually `impl Debug for Foo`\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Foo` with `#[derive(Debug)]`\n+   |\n+LL | #[derive(Debug)]\n+   |\n \n error[E0277]: `Bar` doesn't implement `Debug`\n   --> $DIR/no-debug.rs:10:32"}, {"sha": "904413712cde12d9e78e8257fdc0f9f59d9dc5c2", "filename": "src/test/ui/repeat-to-run-dtor-twice.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Frepeat-to-run-dtor-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Frepeat-to-run-dtor-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepeat-to-run-dtor-twice.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -5,6 +5,10 @@ LL |     let _ = [ a; 5 ];\n    |             ^^^^^^^^ the trait `Copy` is not implemented for `Foo`\n    |\n    = note: the `Copy` trait is required because the repeated element will be copied\n+help: consider annotating `Foo` with `#[derive(Copy)]`\n+   |\n+LL | #[derive(Copy)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "ea1f66d78a3786f87239963120858c3b0d23b613", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-requires-debug.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -7,6 +7,10 @@ LL |     let _: NotDebug = dbg!(NotDebug);\n    = help: the trait `Debug` is not implemented for `NotDebug`\n    = note: add `#[derive(Debug)]` to `NotDebug` or manually `impl Debug for NotDebug`\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `NotDebug` with `#[derive(Debug)]`\n+   |\n+LL | #[derive(Debug)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "0a2a5f0f24578f27ae6faad85ff9b338aef9ce0d", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-nonconst.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -17,6 +17,10 @@ note: required by a bound in `equals_self`\n    |\n LL | const fn equals_self<T: ~const PartialEq>(t: &T) -> bool {\n    |                         ^^^^^^^^^^^^^^^^ required by this bound in `equals_self`\n+help: consider annotating `S` with `#[derive(PartialEq)]`\n+   |\n+LL | #[derive(PartialEq)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "2114594066861a517afb47854028e03b2fd4e2a2", "filename": "src/test/ui/specialization/issue-59435.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fspecialization%2Fissue-59435.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fspecialization%2Fissue-59435.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-59435.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -9,6 +9,10 @@ note: required by a bound in `MyTrait::MyType`\n    |\n LL |     type MyType: Default;\n    |                  ^^^^^^^ required by this bound in `MyTrait::MyType`\n+help: consider annotating `MyStruct` with `#[derive(Default)]`\n+   |\n+LL | #[derive(Default)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "266291f62b45dcab76e7e766f6253d58d3e42a3a", "filename": "src/test/ui/structs/struct-path-alias-bounds.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-alias-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-alias-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-alias-bounds.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -9,6 +9,10 @@ note: required by a bound in `S`\n    |\n LL | struct S<T: Clone> { a: T }\n    |             ^^^^^ required by this bound in `S`\n+help: consider annotating `NoClone` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "75658f58c8a1b5c454613430723c2d2b74742a28", "filename": "src/test/ui/suggestions/derive-macro-missing-bounds.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fsuggestions%2Fderive-macro-missing-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fsuggestions%2Fderive-macro-missing-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fderive-macro-missing-bounds.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -9,6 +9,10 @@ LL |     struct Outer<T>(Inner<T>);\n    = help: the trait `Debug` is not implemented for `a::Inner<T>`\n    = note: add `#[derive(Debug)]` to `a::Inner<T>` or manually `impl Debug for a::Inner<T>`\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `a::Inner<T>` with `#[derive(Debug)]`\n+   |\n+LL |     #[derive(Debug)]\n+   |\n help: consider introducing a `where` bound, but there might be an alternative better way to express this requirement\n    |\n LL |     struct Outer<T>(Inner<T>) where a::Inner<T>: Debug;"}, {"sha": "5d8d688a073ca9951b2da1ddb49c41c7228f93ac", "filename": "src/test/ui/suggestions/issue-84973-blacklist.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -25,6 +25,10 @@ note: required by a bound in `f_clone`\n    |\n LL | fn f_clone<T: Clone>(t: T) {}\n    |               ^^^^^ required by this bound in `f_clone`\n+help: consider annotating `S` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error[E0277]: `[static generator@$DIR/issue-84973-blacklist.rs:17:13: 17:33]` cannot be unpinned\n   --> $DIR/issue-84973-blacklist.rs:17:5"}, {"sha": "d7697dcc6405b410941fe57e09da8eb59dd07f50", "filename": "src/test/ui/traits/inductive-overflow/supertrait-auto-trait.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait-auto-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait-auto-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait-auto-trait.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -24,6 +24,10 @@ note: required by a bound in `copy`\n    |\n LL | fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }\n    |            ^^^^^ required by this bound in `copy`\n+help: consider annotating `NoClone` with `#[derive(Copy)]`\n+   |\n+LL | #[derive(Copy)]\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "62a2a64ed142c859e8ff4df050c8d08f1dd7982b", "filename": "src/test/ui/traits/issue-71136.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Ftraits%2Fissue-71136.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Ftraits%2Fissue-71136.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-71136.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -9,6 +9,10 @@ LL |     the_foos: Vec<Foo>,\n    |\n    = note: required because of the requirements on the impl of `Clone` for `Vec<Foo>`\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Foo` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "c242a7de7abfb6959212bfa7cc74050e34abcfcf", "filename": "src/test/ui/union/union-derive-clone.mirunsafeck.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -38,6 +38,10 @@ note: required by a bound in `AssertParamIsCopy`\n LL | pub struct AssertParamIsCopy<T: Copy + ?Sized> {\n    |                                 ^^^^ required by this bound in `AssertParamIsCopy`\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `U1` with `#[derive(Copy)]`\n+   |\n+LL | #[derive(Copy)]\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c242a7de7abfb6959212bfa7cc74050e34abcfcf", "filename": "src/test/ui/union/union-derive-clone.thirunsafeck.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -38,6 +38,10 @@ note: required by a bound in `AssertParamIsCopy`\n LL | pub struct AssertParamIsCopy<T: Copy + ?Sized> {\n    |                                 ^^^^ required by this bound in `AssertParamIsCopy`\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `U1` with `#[derive(Copy)]`\n+   |\n+LL | #[derive(Copy)]\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "99505f31639686770f8ecfb51ebb5daea54bd266", "filename": "src/test/ui/union/union-derive-eq.mirunsafeck.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.mirunsafeck.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -13,6 +13,10 @@ note: required by a bound in `AssertParamIsEq`\n LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n    |                               ^^ required by this bound in `AssertParamIsEq`\n    = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `PartialEqNotEq` with `#[derive(Eq)]`\n+   |\n+LL | #[derive(Eq)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "99505f31639686770f8ecfb51ebb5daea54bd266", "filename": "src/test/ui/union/union-derive-eq.thirunsafeck.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.thirunsafeck.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -13,6 +13,10 @@ note: required by a bound in `AssertParamIsEq`\n LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n    |                               ^^ required by this bound in `AssertParamIsEq`\n    = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `PartialEqNotEq` with `#[derive(Eq)]`\n+   |\n+LL | #[derive(Eq)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "e47920d3dfcf8d5496568fa1cf3d3fccdf110693", "filename": "src/test/ui/wf/wf-const-type.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fwf%2Fwf-const-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fwf%2Fwf-const-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-const-type.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -10,6 +10,10 @@ note: required by a bound in `IsCopy`\n    |\n LL | struct IsCopy<T:Copy> { t: T }\n    |                 ^^^^ required by this bound in `IsCopy`\n+help: consider annotating `NotCopy` with `#[derive(Copy)]`\n+   |\n+LL | #[derive(Copy)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "4ae69cf2e1ff8bf456e7f100883a33499624574a", "filename": "src/test/ui/wf/wf-static-type.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fwf%2Fwf-static-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fwf%2Fwf-static-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-static-type.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -10,6 +10,10 @@ note: required by a bound in `IsCopy`\n    |\n LL | struct IsCopy<T:Copy> { t: T }\n    |                 ^^^^ required by this bound in `IsCopy`\n+help: consider annotating `NotCopy` with `#[derive(Copy)]`\n+   |\n+LL | #[derive(Copy)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "c13552bc26eee730aba31adce9137ebcfc8bc9b6", "filename": "src/test/ui/where-clauses/where-clauses-method-unsatisfied.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-method-unsatisfied.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-method-unsatisfied.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-method-unsatisfied.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -11,6 +11,10 @@ note: required by a bound in `Foo::<T>::equals`\n    |\n LL |     fn equals(&self, u: &Foo<T>) -> bool where T : Eq {\n    |                                                    ^^ required by this bound in `Foo::<T>::equals`\n+help: consider annotating `Bar` with `#[derive(Eq)]`\n+   |\n+LL | #[derive(Eq)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "b1805a4522f4d1ff27e634699729d261d685017f", "filename": "src/test/ui/where-clauses/where-clauses-unsatisfied.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-unsatisfied.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/661b0e5b325429db17501bbe79168dc360cabf37/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-unsatisfied.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-unsatisfied.stderr?ref=661b0e5b325429db17501bbe79168dc360cabf37", "patch": "@@ -9,6 +9,10 @@ note: required by a bound in `equal`\n    |\n LL | fn equal<T>(a: &T, b: &T) -> bool where T : Eq { a == b }\n    |                                             ^^ required by this bound in `equal`\n+help: consider annotating `Struct` with `#[derive(Eq)]`\n+   |\n+LL | #[derive(Eq)]\n+   |\n \n error: aborting due to previous error\n "}]}