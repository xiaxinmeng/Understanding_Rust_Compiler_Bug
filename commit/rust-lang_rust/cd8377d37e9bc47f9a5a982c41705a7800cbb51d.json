{"sha": "cd8377d37e9bc47f9a5a982c41705a7800cbb51d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkODM3N2QzN2U5YmM0N2Y5YTVhOTgyYzQxNzA1YTc4MDBjYmI1MWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-04T12:37:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-04T12:37:27Z"}, "message": "Auto merge of #67866 - GuillaumeGomez:rollup-32vsg5b, r=GuillaumeGomez\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #67822 (Revert `const_err` lint checking of casts)\n - #67823 (improve some `Drop`-related error messages)\n - #67837 (Clean up err codes)\n - #67848 (Remove unused `#[link_name = \"m\"]` attributes)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "9702aa90c15372db60181490fbde313f8c6b87ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9702aa90c15372db60181490fbde313f8c6b87ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd8377d37e9bc47f9a5a982c41705a7800cbb51d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd8377d37e9bc47f9a5a982c41705a7800cbb51d", "html_url": "https://github.com/rust-lang/rust/commit/cd8377d37e9bc47f9a5a982c41705a7800cbb51d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79cf5e4fe23991ab281413623e3b50ba3deb24b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/79cf5e4fe23991ab281413623e3b50ba3deb24b2", "html_url": "https://github.com/rust-lang/rust/commit/79cf5e4fe23991ab281413623e3b50ba3deb24b2"}, {"sha": "a86a18907b881e9e144e7420f7e9d568353c0f4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a86a18907b881e9e144e7420f7e9d568353c0f4f", "html_url": "https://github.com/rust-lang/rust/commit/a86a18907b881e9e144e7420f7e9d568353c0f4f"}], "stats": {"total": 422, "additions": 204, "deletions": 218}, "files": [{"sha": "b91b52c074cd25ffef100f564d6fc934e7fb4301", "filename": "src/librustc_error_codes/error_codes/E0136.md", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0136.md", "raw_url": "https://github.com/rust-lang/rust/raw/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0136.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0136.md?ref=cd8377d37e9bc47f9a5a982c41705a7800cbb51d", "patch": "@@ -1,5 +1,4 @@\n-A binary can only have one entry point, and by default that entry point is the\n-function `main()`. If there are multiple such functions, please rename one.\n+More than one `main` function was found.\n \n Erroneous code example:\n \n@@ -14,3 +13,7 @@ fn main() { // error!\n     // ...\n }\n ```\n+\n+A binary can only have one entry point, and by default that entry point is the\n+`main()` function. If there are multiple instances of this function, please\n+rename one of them."}, {"sha": "c2e2f0240f4837abc49343e435b70f78b0cc8d05", "filename": "src/librustc_error_codes/error_codes/E0161.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0161.md", "raw_url": "https://github.com/rust-lang/rust/raw/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0161.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0161.md?ref=cd8377d37e9bc47f9a5a982c41705a7800cbb51d", "patch": "@@ -1,5 +1,4 @@\n-A value was moved. However, its size was not known at compile time, and only\n-values of a known size can be moved.\n+A value was moved whose size was not known at compile time.\n \n Erroneous code example:\n "}, {"sha": "48bb6f4b382836b6ceda03da829b69fb3598af08", "filename": "src/librustc_error_codes/error_codes/E0164.md", "status": "modified", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0164.md", "raw_url": "https://github.com/rust-lang/rust/raw/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0164.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0164.md?ref=cd8377d37e9bc47f9a5a982c41705a7800cbb51d", "patch": "@@ -1,24 +1,44 @@\n-This error means that an attempt was made to match a struct type enum\n-variant as a non-struct type:\n+Something which is neither a tuple struct nor a tuple variant was used as a\n+pattern.\n+\n+Erroneous code example:\n \n ```compile_fail,E0164\n-enum Foo { B { i: u32 } }\n+enum A {\n+    B,\n+    C,\n+}\n+\n+impl A {\n+    fn new() {}\n+}\n \n-fn bar(foo: Foo) -> u32 {\n+fn bar(foo: A) {\n     match foo {\n-        Foo::B(i) => i, // error E0164\n+        A::new() => (), // error!\n+        _ => {}\n     }\n }\n ```\n \n-Try using `{}` instead:\n+This error means that an attempt was made to match something which is neither a\n+tuple struct nor a tuple variant. Only these two elements are allowed as a\n+pattern:\n \n ```\n-enum Foo { B { i: u32 } }\n+enum A {\n+    B,\n+    C,\n+}\n+\n+impl A {\n+    fn new() {}\n+}\n \n-fn bar(foo: Foo) -> u32 {\n+fn bar(foo: A) {\n     match foo {\n-        Foo::B{i} => i,\n+        A::B => (), // ok!\n+        _ => {}\n     }\n }\n ```"}, {"sha": "958239b76e488b5f498b46c1ea3586ef39e0c9a2", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 7, "deletions": 63, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=cd8377d37e9bc47f9a5a982c41705a7800cbb51d", "patch": "@@ -12,10 +12,10 @@ use rustc::mir::visit::{\n     MutVisitor, MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor,\n };\n use rustc::mir::{\n-    read_only, AggregateKind, BasicBlock, BinOp, Body, BodyAndCache, CastKind, ClearCrossCrate,\n-    Constant, Local, LocalDecl, LocalKind, Location, Operand, Place, PlaceBase,\n-    ReadOnlyBodyAndCache, Rvalue, SourceInfo, SourceScope, SourceScopeData, Statement,\n-    StatementKind, Terminator, TerminatorKind, UnOp, RETURN_PLACE,\n+    read_only, AggregateKind, BasicBlock, BinOp, Body, BodyAndCache, ClearCrossCrate, Constant,\n+    Local, LocalDecl, LocalKind, Location, Operand, Place, PlaceBase, ReadOnlyBodyAndCache, Rvalue,\n+    SourceInfo, SourceScope, SourceScopeData, Statement, StatementKind, Terminator, TerminatorKind,\n+    UnOp, RETURN_PLACE,\n };\n use rustc::ty::layout::{\n     HasDataLayout, HasTyCtxt, LayoutError, LayoutOf, Size, TargetDataLayout, TyLayout,\n@@ -29,9 +29,9 @@ use syntax::ast::Mutability;\n \n use crate::const_eval::error_to_const_error;\n use crate::interpret::{\n-    self, intern_const_alloc_recursive, truncate, AllocId, Allocation, Frame, ImmTy, Immediate,\n-    InterpCx, LocalState, LocalValue, Memory, MemoryKind, OpTy, Operand as InterpOperand, PlaceTy,\n-    Pointer, ScalarMaybeUndef, StackPopCleanup,\n+    self, intern_const_alloc_recursive, AllocId, Allocation, Frame, ImmTy, Immediate, InterpCx,\n+    LocalState, LocalValue, Memory, MemoryKind, OpTy, Operand as InterpOperand, PlaceTy, Pointer,\n+    ScalarMaybeUndef, StackPopCleanup,\n };\n use crate::rustc::ty::subst::Subst;\n use crate::transform::{MirPass, MirSource};\n@@ -539,57 +539,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         Some(())\n     }\n \n-    fn check_cast(\n-        &mut self,\n-        op: &Operand<'tcx>,\n-        ty: Ty<'tcx>,\n-        source_info: SourceInfo,\n-        place_layout: TyLayout<'tcx>,\n-    ) -> Option<()> {\n-        if !ty.is_integral() || !op.ty(&self.local_decls, self.tcx).is_integral() {\n-            return Some(());\n-        }\n-\n-        let value = self.use_ecx(source_info, |this| {\n-            this.ecx.read_immediate(this.ecx.eval_operand(op, None)?)\n-        })?;\n-\n-        // Do not try to read bits for ZSTs. This can occur when casting an enum with one variant\n-        // to an integer. Such enums are represented as ZSTs but still have a discriminant value\n-        // which can be casted.\n-        if value.layout.is_zst() {\n-            return Some(());\n-        }\n-\n-        let value_size = value.layout.size;\n-        let value_bits = value.to_scalar().and_then(|r| r.to_bits(value_size));\n-        if let Ok(value_bits) = value_bits {\n-            let truncated = truncate(value_bits, place_layout.size);\n-            if truncated != value_bits {\n-                let scope = source_info.scope;\n-                let lint_root = match &self.source_scopes[scope].local_data {\n-                    ClearCrossCrate::Set(data) => data.lint_root,\n-                    ClearCrossCrate::Clear => return None,\n-                };\n-                self.tcx.lint_hir(\n-                    ::rustc::lint::builtin::CONST_ERR,\n-                    lint_root,\n-                    source_info.span,\n-                    &format!(\n-                        \"truncating cast: the value {} requires {} bits but the target type is \\\n-                                          only {} bits\",\n-                        value_bits,\n-                        value_size.bits(),\n-                        place_layout.size.bits()\n-                    ),\n-                );\n-                return None;\n-            }\n-        }\n-\n-        Some(())\n-    }\n-\n     fn const_prop(\n         &mut self,\n         rvalue: &Rvalue<'tcx>,\n@@ -651,11 +600,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                 }\n             }\n \n-            Rvalue::Cast(CastKind::Misc, op, ty) => {\n-                trace!(\"checking Cast(Misc, {:?}, {:?})\", op, ty);\n-                self.check_cast(op, ty, source_info, place_layout)?;\n-            }\n-\n             _ => {}\n         }\n "}, {"sha": "004fce7e35b7098a67e787eb1f1ddb7dc46af9da", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=cd8377d37e9bc47f9a5a982c41705a7800cbb51d", "patch": "@@ -47,7 +47,6 @@ pub fn check_drop_impl(tcx: TyCtxt<'_>, drop_impl_did: DefId) -> Result<(), Erro\n \n             ensure_drop_predicates_are_implied_by_item_defn(\n                 tcx,\n-                drop_impl_did,\n                 dtor_predicates,\n                 adt_def.did,\n                 self_to_impl_substs,\n@@ -95,16 +94,23 @@ fn ensure_drop_params_and_item_params_correspond<'tcx>(\n             }\n             Err(_) => {\n                 let item_span = tcx.def_span(self_type_did);\n+                let self_descr = tcx\n+                    .def_kind(self_type_did)\n+                    .map(|kind| kind.descr(self_type_did))\n+                    .unwrap_or(\"type\");\n                 struct_span_err!(\n                     tcx.sess,\n                     drop_impl_span,\n                     E0366,\n-                    \"Implementations of Drop cannot be specialized\"\n+                    \"`Drop` impls cannot be specialized\"\n                 )\n                 .span_note(\n                     item_span,\n-                    \"Use same sequence of generic type and region \\\n-                     parameters that is on the struct/enum definition\",\n+                    &format!(\n+                        \"use the same sequence of generic type, lifetime and const parameters \\\n+                        as the {} definition\",\n+                        self_descr,\n+                    ),\n                 )\n                 .emit();\n                 return Err(ErrorReported);\n@@ -143,7 +149,6 @@ fn ensure_drop_params_and_item_params_correspond<'tcx>(\n /// implied by assuming the predicates attached to self_type_did.\n fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    drop_impl_did: DefId,\n     dtor_predicates: ty::GenericPredicates<'tcx>,\n     self_type_did: DefId,\n     self_to_impl_substs: SubstsRef<'tcx>,\n@@ -187,8 +192,6 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n \n     let self_type_hir_id = tcx.hir().as_local_hir_id(self_type_did).unwrap();\n \n-    let drop_impl_span = tcx.def_span(drop_impl_did);\n-\n     // We can assume the predicates attached to struct/enum definition\n     // hold.\n     let generic_assumptions = tcx.predicates_of(self_type_did);\n@@ -205,7 +208,7 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n     // just to look for all the predicates directly.\n \n     assert_eq!(dtor_predicates.parent, None);\n-    for (predicate, _) in dtor_predicates.predicates {\n+    for (predicate, predicate_sp) in dtor_predicates.predicates {\n         // (We do not need to worry about deep analysis of type\n         // expressions etc because the Drop impls are already forced\n         // to take on a structure that is roughly an alpha-renaming of\n@@ -241,18 +244,17 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n \n         if !assumptions_in_impl_context.iter().any(predicate_matches_closure) {\n             let item_span = tcx.hir().span(self_type_hir_id);\n+            let self_descr =\n+                tcx.def_kind(self_type_did).map(|kind| kind.descr(self_type_did)).unwrap_or(\"type\");\n             struct_span_err!(\n                 tcx.sess,\n-                drop_impl_span,\n+                *predicate_sp,\n                 E0367,\n-                \"The requirement `{}` is added only by the Drop impl.\",\n-                predicate\n-            )\n-            .span_note(\n-                item_span,\n-                \"The same requirement must be part of \\\n-                 the struct/enum definition\",\n+                \"`Drop` impl requires `{}` but the {} it is implemented for does not\",\n+                predicate,\n+                self_descr,\n             )\n+            .span_note(item_span, \"the implementor must specify the same requirement\")\n             .emit();\n             result = Err(ErrorReported);\n         }"}, {"sha": "7e016cf7e9a95940a893d777016a3d5b65da5d51", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 18, "deletions": 29, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=cd8377d37e9bc47f9a5a982c41705a7800cbb51d", "patch": "@@ -13,7 +13,6 @@ use rustc::ty::util::CopyImplementationError;\n use rustc::ty::TypeFoldable;\n use rustc::ty::{self, Ty, TyCtxt};\n \n-use hir::Node;\n use rustc::hir::def_id::DefId;\n use rustc::hir::{self, ItemKind};\n \n@@ -51,35 +50,25 @@ impl<'tcx> Checker<'tcx> {\n }\n \n fn visit_implementation_of_drop(tcx: TyCtxt<'_>, impl_did: DefId) {\n-    if let ty::Adt(..) = tcx.type_of(impl_did).kind {\n-        /* do nothing */\n-    } else {\n-        // Destructors only work on nominal types.\n-        if let Some(impl_hir_id) = tcx.hir().as_local_hir_id(impl_did) {\n-            if let Some(Node::Item(item)) = tcx.hir().find(impl_hir_id) {\n-                let span = match item.kind {\n-                    ItemKind::Impl(.., ref ty, _) => ty.span,\n-                    _ => item.span,\n-                };\n-                struct_span_err!(\n-                    tcx.sess,\n-                    span,\n-                    E0120,\n-                    \"the Drop trait may only be implemented on \\\n-                                  structures\"\n-                )\n-                .span_label(span, \"implementing Drop requires a struct\")\n-                .emit();\n-            } else {\n-                bug!(\"didn't find impl in ast map\");\n-            }\n-        } else {\n-            bug!(\n-                \"found external impl of Drop trait on \\\n-                  something other than a struct\"\n-            );\n-        }\n+    // Destructors only work on nominal types.\n+    if let ty::Adt(..) | ty::Error = tcx.type_of(impl_did).kind {\n+        return;\n     }\n+\n+    let impl_hir_id = tcx.hir().as_local_hir_id(impl_did).expect(\"foreign Drop impl on non-ADT\");\n+    let sp = match tcx.hir().expect_item(impl_hir_id).kind {\n+        ItemKind::Impl(.., ty, _) => ty.span,\n+        _ => bug!(\"expected Drop impl item\"),\n+    };\n+\n+    struct_span_err!(\n+        tcx.sess,\n+        sp,\n+        E0120,\n+        \"the `Drop` trait may only be implemented for structs, enums, and unions\",\n+    )\n+    .span_label(sp, \"must be a struct, enum, or union\")\n+    .emit();\n }\n \n fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: DefId) {"}, {"sha": "f327b69fc754109060b23b56f44d3ffb832b1fb9", "filename": "src/libstd/sys/unix/cmath.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Flibstd%2Fsys%2Funix%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Flibstd%2Fsys%2Funix%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fcmath.rs?ref=cd8377d37e9bc47f9a5a982c41705a7800cbb51d", "patch": "@@ -2,7 +2,6 @@\n \n use libc::{c_double, c_float};\n \n-#[link_name = \"m\"]\n extern \"C\" {\n     pub fn acos(n: c_double) -> c_double;\n     pub fn acosf(n: c_float) -> c_float;"}, {"sha": "f327b69fc754109060b23b56f44d3ffb832b1fb9", "filename": "src/libstd/sys/vxworks/cmath.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Flibstd%2Fsys%2Fvxworks%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Flibstd%2Fsys%2Fvxworks%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fcmath.rs?ref=cd8377d37e9bc47f9a5a982c41705a7800cbb51d", "patch": "@@ -2,7 +2,6 @@\n \n use libc::{c_double, c_float};\n \n-#[link_name = \"m\"]\n extern \"C\" {\n     pub fn acos(n: c_double) -> c_double;\n     pub fn acosf(n: c_float) -> c_float;"}, {"sha": "6f5d40b494fbee722bbd6010d88f9ade4b7b6571", "filename": "src/libstd/sys/windows/cmath.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Flibstd%2Fsys%2Fwindows%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Flibstd%2Fsys%2Fwindows%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fcmath.rs?ref=cd8377d37e9bc47f9a5a982c41705a7800cbb51d", "patch": "@@ -2,7 +2,6 @@\n \n use libc::{c_double, c_float};\n \n-#[link_name = \"m\"]\n extern \"C\" {\n     pub fn acos(n: c_double) -> c_double;\n     pub fn asin(n: c_double) -> c_double;"}, {"sha": "8cc5b98250b5ae63aab41b3a90248a7dc582db89", "filename": "src/test/ui/consts/const-prop-overflowing-casts.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-overflowing-casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-overflowing-casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-overflowing-casts.rs?ref=cd8377d37e9bc47f9a5a982c41705a7800cbb51d", "patch": "@@ -1,9 +1,15 @@\n-// build-fail\n-// ignore-tidy-linelength\n+// check-pass\n+\n+enum Foo {\n+    Bar = -42,\n+    Baz = 42,\n+}\n \n fn main() {\n     let _ = 0u8 as u32;\n-    let _ = (1u32 << 31) as u16; //~ ERROR truncating cast: the value 2147483648 requires 32 bits but the target type is only 16 bits\n-    let _ = (1u16 << 15) as u8; //~ ERROR truncating cast: the value 32768 requires 16 bits but the target type is only 8 bits\n-    let _ = (!0u16) as u8; //~ ERROR truncating cast: the value 65535 requires 16 bits but the target type is only 8 bits\n+    let _ = (1u32 << 31) as u16;\n+    let _ = (1u16 << 15) as u8;\n+    let _ = (!0u16) as u8;\n+    let _ = (-1i16) as i8;\n+    let _ = (Foo::Bar) as i8;\n }"}, {"sha": "af4e2c7005afb7819e8597221c135ad54a8c8402", "filename": "src/test/ui/consts/const-prop-overflowing-casts.stderr", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/79cf5e4fe23991ab281413623e3b50ba3deb24b2/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-overflowing-casts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79cf5e4fe23991ab281413623e3b50ba3deb24b2/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-overflowing-casts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-overflowing-casts.stderr?ref=79cf5e4fe23991ab281413623e3b50ba3deb24b2", "patch": "@@ -1,22 +0,0 @@\n-error: truncating cast: the value 2147483648 requires 32 bits but the target type is only 16 bits\n-  --> $DIR/const-prop-overflowing-casts.rs:6:13\n-   |\n-LL |     let _ = (1u32 << 31) as u16;\n-   |             ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-\n-error: truncating cast: the value 32768 requires 16 bits but the target type is only 8 bits\n-  --> $DIR/const-prop-overflowing-casts.rs:7:13\n-   |\n-LL |     let _ = (1u16 << 15) as u8;\n-   |             ^^^^^^^^^^^^^^^^^^\n-\n-error: truncating cast: the value 65535 requires 16 bits but the target type is only 8 bits\n-  --> $DIR/const-prop-overflowing-casts.rs:8:13\n-   |\n-LL |     let _ = (!0u16) as u8;\n-   |             ^^^^^^^^^^^^^\n-\n-error: aborting due to 3 previous errors\n-"}, {"sha": "ef5e18126dc6860bf7e18a1ce3544d1bc190bd6f", "filename": "src/test/ui/dropck/drop-on-non-struct.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Ftest%2Fui%2Fdropck%2Fdrop-on-non-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Ftest%2Fui%2Fdropck%2Fdrop-on-non-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdrop-on-non-struct.rs?ref=cd8377d37e9bc47f9a5a982c41705a7800cbb51d", "patch": "@@ -1,10 +1,15 @@\n impl<'a> Drop for &'a mut isize {\n-    //~^ ERROR the Drop trait may only be implemented on structures\n+    //~^ ERROR the `Drop` trait may only be implemented for structs, enums, and unions\n     //~^^ ERROR E0117\n     fn drop(&mut self) {\n         println!(\"kaboom\");\n     }\n }\n \n+impl Drop for Nonexistent {\n+    //~^ ERROR cannot find type `Nonexistent`\n+    fn drop(&mut self) { }\n+}\n+\n fn main() {\n }"}, {"sha": "3991c44f2edce620e2d0bcef0002363389506837", "filename": "src/test/ui/dropck/drop-on-non-struct.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Ftest%2Fui%2Fdropck%2Fdrop-on-non-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Ftest%2Fui%2Fdropck%2Fdrop-on-non-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdrop-on-non-struct.stderr?ref=cd8377d37e9bc47f9a5a982c41705a7800cbb51d", "patch": "@@ -1,8 +1,14 @@\n-error[E0120]: the Drop trait may only be implemented on structures\n+error[E0412]: cannot find type `Nonexistent` in this scope\n+  --> $DIR/drop-on-non-struct.rs:9:15\n+   |\n+LL | impl Drop for Nonexistent {\n+   |               ^^^^^^^^^^^ not found in this scope\n+\n+error[E0120]: the `Drop` trait may only be implemented for structs, enums, and unions\n   --> $DIR/drop-on-non-struct.rs:1:19\n    |\n LL | impl<'a> Drop for &'a mut isize {\n-   |                   ^^^^^^^^^^^^^ implementing Drop requires a struct\n+   |                   ^^^^^^^^^^^^^ must be a struct, enum, or union\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/drop-on-non-struct.rs:1:1\n@@ -15,7 +21,7 @@ LL | impl<'a> Drop for &'a mut isize {\n    |\n    = note: define and implement a trait or new type instead\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0117, E0120.\n+Some errors have detailed explanations: E0117, E0120, E0412.\n For more information about an error, try `rustc --explain E0117`."}, {"sha": "dbbac514801f7ba53dead6208c26757679c1c758", "filename": "src/test/ui/error-codes/E0117.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Ftest%2Fui%2Ferror-codes%2FE0117.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Ftest%2Fui%2Ferror-codes%2FE0117.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0117.rs?ref=cd8377d37e9bc47f9a5a982c41705a7800cbb51d", "patch": "@@ -1,6 +1,5 @@\n impl Drop for u32 {} //~ ERROR E0117\n-//~| ERROR the Drop trait may only be implemented on structures\n-//~| implementing Drop requires a struct\n+//~| ERROR the `Drop` trait may only be implemented for structs, enums, and unions\n \n fn main() {\n }"}, {"sha": "b48a1d8e50d4de1c665b3a86fdad7f9abf29ef52", "filename": "src/test/ui/error-codes/E0117.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Ftest%2Fui%2Ferror-codes%2FE0117.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Ftest%2Fui%2Ferror-codes%2FE0117.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0117.stderr?ref=cd8377d37e9bc47f9a5a982c41705a7800cbb51d", "patch": "@@ -1,8 +1,8 @@\n-error[E0120]: the Drop trait may only be implemented on structures\n+error[E0120]: the `Drop` trait may only be implemented for structs, enums, and unions\n   --> $DIR/E0117.rs:1:15\n    |\n LL | impl Drop for u32 {}\n-   |               ^^^ implementing Drop requires a struct\n+   |               ^^^ must be a struct, enum, or union\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/E0117.rs:1:1"}, {"sha": "6c306455e42545b8bf4c776b3ac9075982c9e2a3", "filename": "src/test/ui/error-codes/E0120.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Ftest%2Fui%2Ferror-codes%2FE0120.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Ftest%2Fui%2Ferror-codes%2FE0120.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0120.stderr?ref=cd8377d37e9bc47f9a5a982c41705a7800cbb51d", "patch": "@@ -1,8 +1,8 @@\n-error[E0120]: the Drop trait may only be implemented on structures\n+error[E0120]: the `Drop` trait may only be implemented for structs, enums, and unions\n   --> $DIR/E0120.rs:3:15\n    |\n LL | impl Drop for dyn MyTrait {\n-   |               ^^^^^^^^^^^ implementing Drop requires a struct\n+   |               ^^^^^^^^^^^ must be a struct, enum, or union\n \n error: aborting due to previous error\n "}, {"sha": "01416a0d79e5f72d24d928b4f9166c43f09ec6d8", "filename": "src/test/ui/issues/issue-17959.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Ftest%2Fui%2Fissues%2Fissue-17959.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Ftest%2Fui%2Fissues%2Fissue-17959.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17959.rs?ref=cd8377d37e9bc47f9a5a982c41705a7800cbb51d", "patch": "@@ -9,7 +9,7 @@ struct G<T: ?Sized> {\n }\n \n impl<T> Drop for G<T> {\n-//~^ ERROR: The requirement `T: std::marker::Sized` is added only by the Drop impl. [E0367]\n+//~^ ERROR `Drop` impl requires `T: std::marker::Sized`\n     fn drop(&mut self) {\n         if !self._ptr.is_null() {\n         }"}, {"sha": "29d32c1f3cec6975cfe11734fa2793241c5f6cae", "filename": "src/test/ui/issues/issue-17959.stderr", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Ftest%2Fui%2Fissues%2Fissue-17959.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Ftest%2Fui%2Fissues%2Fissue-17959.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17959.stderr?ref=cd8377d37e9bc47f9a5a982c41705a7800cbb51d", "patch": "@@ -1,16 +1,10 @@\n-error[E0367]: The requirement `T: std::marker::Sized` is added only by the Drop impl.\n-  --> $DIR/issue-17959.rs:11:1\n+error[E0367]: `Drop` impl requires `T: std::marker::Sized` but the struct it is implemented for does not\n+  --> $DIR/issue-17959.rs:11:6\n    |\n-LL | / impl<T> Drop for G<T> {\n-LL | |\n-LL | |     fn drop(&mut self) {\n-LL | |         if !self._ptr.is_null() {\n-LL | |         }\n-LL | |     }\n-LL | | }\n-   | |_^\n+LL | impl<T> Drop for G<T> {\n+   |      ^\n    |\n-note: The same requirement must be part of the struct/enum definition\n+note: the implementor must specify the same requirement\n   --> $DIR/issue-17959.rs:7:1\n    |\n LL | / struct G<T: ?Sized> {"}, {"sha": "10d1e7c4e66dc20aa908f49e9e195030a3266ebe", "filename": "src/test/ui/issues/issue-38868.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Ftest%2Fui%2Fissues%2Fissue-38868.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Ftest%2Fui%2Fissues%2Fissue-38868.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38868.stderr?ref=cd8377d37e9bc47f9a5a982c41705a7800cbb51d", "patch": "@@ -1,4 +1,4 @@\n-error[E0366]: Implementations of Drop cannot be specialized\n+error[E0366]: `Drop` impls cannot be specialized\n   --> $DIR/issue-38868.rs:5:1\n    |\n LL | / impl Drop for List<i32> {\n@@ -8,7 +8,7 @@ LL | |     }\n LL | | }\n    | |_^\n    |\n-note: Use same sequence of generic type and region parameters that is on the struct/enum definition\n+note: use the same sequence of generic type, lifetime and const parameters as the struct definition\n   --> $DIR/issue-38868.rs:1:1\n    |\n LL | / pub struct List<T> {"}, {"sha": "d082e0a6b5dc46bf311ca1101bf7d6c88b4773cf", "filename": "src/test/ui/issues/issue-41974.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Ftest%2Fui%2Fissues%2Fissue-41974.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Ftest%2Fui%2Fissues%2Fissue-41974.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41974.stderr?ref=cd8377d37e9bc47f9a5a982c41705a7800cbb51d", "patch": "@@ -9,11 +9,11 @@ LL | impl<T> Drop for T where T: A {\n              where T: ?Sized;\n    = note: downstream crates may implement trait `A` for type `std::boxed::Box<_>`\n \n-error[E0120]: the Drop trait may only be implemented on structures\n+error[E0120]: the `Drop` trait may only be implemented for structs, enums, and unions\n   --> $DIR/issue-41974.rs:7:18\n    |\n LL | impl<T> Drop for T where T: A {\n-   |                  ^ implementing Drop requires a struct\n+   |                  ^ must be a struct, enum, or union\n \n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n   --> $DIR/issue-41974.rs:7:6"}, {"sha": "d7fec8802f08bb8d1ac2a2cfb78eb8cd70f456cf", "filename": "src/test/ui/reject-specialized-drops-8142.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Ftest%2Fui%2Freject-specialized-drops-8142.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Ftest%2Fui%2Freject-specialized-drops-8142.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freject-specialized-drops-8142.rs?ref=cd8377d37e9bc47f9a5a982c41705a7800cbb51d", "patch": "@@ -1,5 +1,5 @@\n // Issue 8142: Test that Drop impls cannot be specialized beyond the\n-// predicates attached to the struct/enum definition itself.\n+// predicates attached to the type definition itself.\n \n trait Bound { fn foo(&self) { } }\n struct K<'l1,'l2> { x: &'l1 i8, y: &'l2 u8 }\n@@ -16,12 +16,16 @@ struct U;\n struct V<Tva, Tvb> { x: *const Tva, y: *const Tvb }\n struct W<'l1, 'l2> { x: &'l1 i8, y: &'l2 u8 }\n \n+enum Enum<T> { Variant(T) }\n+struct TupleStruct<T>(T);\n+union Union<T: Copy> { f: T }\n+\n impl<'al,'adds_bnd:'al> Drop for K<'al,'adds_bnd> {                        // REJECT\n-    //~^ ERROR The requirement `'adds_bnd : 'al` is added only by the Drop impl.\n+    //~^ ERROR `Drop` impl requires `'adds_bnd : 'al`\n     fn drop(&mut self) { } }\n \n impl<'al,'adds_bnd>     Drop for L<'al,'adds_bnd> where 'adds_bnd:'al {    // REJECT\n-    //~^ ERROR The requirement `'adds_bnd : 'al` is added only by the Drop impl.\n+    //~^ ERROR `Drop` impl requires `'adds_bnd : 'al`\n     fn drop(&mut self) { } }\n \n impl<'ml>               Drop for M<'ml>         { fn drop(&mut self) { } } // ACCEPT\n@@ -34,13 +38,13 @@ impl                    Drop for N<'static>     { fn drop(&mut self) { } } // RE\n impl<COkNoBound> Drop for O<COkNoBound> { fn drop(&mut self) { } } // ACCEPT\n \n impl              Drop for P<i8>          { fn drop(&mut self) { } } // REJECT\n-//~^ ERROR Implementations of Drop cannot be specialized\n+//~^ ERROR `Drop` impls cannot be specialized\n \n impl<AddsBnd:Bound> Drop for Q<AddsBnd> { fn drop(&mut self) { } } // REJECT\n-//~^ ERROR The requirement `AddsBnd: Bound` is added only by the Drop impl.\n+//~^ ERROR `Drop` impl requires `AddsBnd: Bound`\n \n impl<'rbnd,AddsRBnd:'rbnd> Drop for R<AddsRBnd> { fn drop(&mut self) { } } // REJECT\n-//~^ ERROR The requirement `AddsRBnd : 'rbnd` is added only by the Drop impl.\n+//~^ ERROR `Drop` impl requires `AddsRBnd : 'rbnd`\n \n impl<Bs:Bound>    Drop for S<Bs>          { fn drop(&mut self) { } } // ACCEPT\n \n@@ -49,9 +53,18 @@ impl<'t,Bt:'t>    Drop for T<'t,Bt>       { fn drop(&mut self) { } } // ACCEPT\n impl              Drop for U              { fn drop(&mut self) { } } // ACCEPT\n \n impl<One>         Drop for V<One,One>     { fn drop(&mut self) { } } // REJECT\n-//~^ ERROR Implementations of Drop cannot be specialized\n+//~^ ERROR `Drop` impls cannot be specialized\n \n impl<'lw>         Drop for W<'lw,'lw>     { fn drop(&mut self) { } } // REJECT\n //~^ ERROR cannot infer an appropriate lifetime for lifetime parameter `'lw`\n \n+impl<AddsBnd:Bound> Drop for Enum<AddsBnd> { fn drop(&mut self) { } } // REJECT\n+//~^ ERROR `Drop` impl requires `AddsBnd: Bound`\n+\n+impl<AddsBnd:Bound> Drop for TupleStruct<AddsBnd> { fn drop(&mut self) { } } // REJECT\n+//~^ ERROR `Drop` impl requires `AddsBnd: Bound`\n+\n+impl<AddsBnd:Copy + Bound> Drop for Union<AddsBnd> { fn drop(&mut self) { } } // REJECT\n+//~^ ERROR `Drop` impl requires `AddsBnd: Bound`\n+\n pub fn main() { }"}, {"sha": "14618df90cb6292a0f2bba5d181804bd68f5050a", "filename": "src/test/ui/reject-specialized-drops-8142.stderr", "status": "modified", "additions": 64, "deletions": 32, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr?ref=cd8377d37e9bc47f9a5a982c41705a7800cbb51d", "patch": "@@ -1,33 +1,41 @@\n-error[E0367]: The requirement `'adds_bnd : 'al` is added only by the Drop impl.\n-  --> $DIR/reject-specialized-drops-8142.rs:19:1\n+error[E0367]: `Drop` impl requires `AddsBnd: Bound` but the union it is implemented for does not\n+  --> $DIR/reject-specialized-drops-8142.rs:67:21\n+   |\n+LL | impl<AddsBnd:Copy + Bound> Drop for Union<AddsBnd> { fn drop(&mut self) { } } // REJECT\n+   |                     ^^^^^\n+   |\n+note: the implementor must specify the same requirement\n+  --> $DIR/reject-specialized-drops-8142.rs:21:1\n+   |\n+LL | union Union<T: Copy> { f: T }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0367]: `Drop` impl requires `'adds_bnd : 'al` but the struct it is implemented for does not\n+  --> $DIR/reject-specialized-drops-8142.rs:23:20\n    |\n-LL | / impl<'al,'adds_bnd:'al> Drop for K<'al,'adds_bnd> {                        // REJECT\n-LL | |\n-LL | |     fn drop(&mut self) { } }\n-   | |____________________________^\n+LL | impl<'al,'adds_bnd:'al> Drop for K<'al,'adds_bnd> {                        // REJECT\n+   |                    ^^^\n    |\n-note: The same requirement must be part of the struct/enum definition\n+note: the implementor must specify the same requirement\n   --> $DIR/reject-specialized-drops-8142.rs:5:1\n    |\n LL | struct K<'l1,'l2> { x: &'l1 i8, y: &'l2 u8 }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0367]: The requirement `'adds_bnd : 'al` is added only by the Drop impl.\n-  --> $DIR/reject-specialized-drops-8142.rs:23:1\n+error[E0367]: `Drop` impl requires `'adds_bnd : 'al` but the struct it is implemented for does not\n+  --> $DIR/reject-specialized-drops-8142.rs:27:67\n    |\n-LL | / impl<'al,'adds_bnd>     Drop for L<'al,'adds_bnd> where 'adds_bnd:'al {    // REJECT\n-LL | |\n-LL | |     fn drop(&mut self) { } }\n-   | |____________________________^\n+LL | impl<'al,'adds_bnd>     Drop for L<'al,'adds_bnd> where 'adds_bnd:'al {    // REJECT\n+   |                                                                   ^^^\n    |\n-note: The same requirement must be part of the struct/enum definition\n+note: the implementor must specify the same requirement\n   --> $DIR/reject-specialized-drops-8142.rs:6:1\n    |\n LL | struct L<'l1,'l2> { x: &'l1 i8, y: &'l2 u8 }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/reject-specialized-drops-8142.rs:29:1\n+  --> $DIR/reject-specialized-drops-8142.rs:33:1\n    |\n LL | impl                    Drop for N<'static>     { fn drop(&mut self) { } } // REJECT\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n@@ -41,56 +49,56 @@ LL | struct N<'n> { x: &'n i8 }\n    |          ^^\n    = note: ...does not necessarily outlive the static lifetime\n \n-error[E0366]: Implementations of Drop cannot be specialized\n-  --> $DIR/reject-specialized-drops-8142.rs:36:1\n+error[E0366]: `Drop` impls cannot be specialized\n+  --> $DIR/reject-specialized-drops-8142.rs:40:1\n    |\n LL | impl              Drop for P<i8>          { fn drop(&mut self) { } } // REJECT\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: Use same sequence of generic type and region parameters that is on the struct/enum definition\n+note: use the same sequence of generic type, lifetime and const parameters as the struct definition\n   --> $DIR/reject-specialized-drops-8142.rs:10:1\n    |\n LL | struct P<Tp> { x: *const Tp }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0367]: The requirement `AddsBnd: Bound` is added only by the Drop impl.\n-  --> $DIR/reject-specialized-drops-8142.rs:39:1\n+error[E0367]: `Drop` impl requires `AddsBnd: Bound` but the struct it is implemented for does not\n+  --> $DIR/reject-specialized-drops-8142.rs:43:14\n    |\n LL | impl<AddsBnd:Bound> Drop for Q<AddsBnd> { fn drop(&mut self) { } } // REJECT\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              ^^^^^\n    |\n-note: The same requirement must be part of the struct/enum definition\n+note: the implementor must specify the same requirement\n   --> $DIR/reject-specialized-drops-8142.rs:11:1\n    |\n LL | struct Q<Tq> { x: *const Tq }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0367]: The requirement `AddsRBnd : 'rbnd` is added only by the Drop impl.\n-  --> $DIR/reject-specialized-drops-8142.rs:42:1\n+error[E0367]: `Drop` impl requires `AddsRBnd : 'rbnd` but the struct it is implemented for does not\n+  --> $DIR/reject-specialized-drops-8142.rs:46:21\n    |\n LL | impl<'rbnd,AddsRBnd:'rbnd> Drop for R<AddsRBnd> { fn drop(&mut self) { } } // REJECT\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                     ^^^^^\n    |\n-note: The same requirement must be part of the struct/enum definition\n+note: the implementor must specify the same requirement\n   --> $DIR/reject-specialized-drops-8142.rs:12:1\n    |\n LL | struct R<Tr> { x: *const Tr }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0366]: Implementations of Drop cannot be specialized\n-  --> $DIR/reject-specialized-drops-8142.rs:51:1\n+error[E0366]: `Drop` impls cannot be specialized\n+  --> $DIR/reject-specialized-drops-8142.rs:55:1\n    |\n LL | impl<One>         Drop for V<One,One>     { fn drop(&mut self) { } } // REJECT\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: Use same sequence of generic type and region parameters that is on the struct/enum definition\n+note: use the same sequence of generic type, lifetime and const parameters as the struct definition\n   --> $DIR/reject-specialized-drops-8142.rs:16:1\n    |\n LL | struct V<Tva, Tvb> { x: *const Tva, y: *const Tvb }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'lw` due to conflicting requirements\n-  --> $DIR/reject-specialized-drops-8142.rs:54:1\n+  --> $DIR/reject-specialized-drops-8142.rs:58:1\n    |\n LL | impl<'lw>         Drop for W<'lw,'lw>     { fn drop(&mut self) { } } // REJECT\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -106,14 +114,38 @@ note: ...but the lifetime must also be valid for the lifetime `'l2` as defined o\n LL | struct W<'l1, 'l2> { x: &'l1 i8, y: &'l2 u8 }\n    |               ^^^\n note: ...so that the types are compatible\n-  --> $DIR/reject-specialized-drops-8142.rs:54:1\n+  --> $DIR/reject-specialized-drops-8142.rs:58:1\n    |\n LL | impl<'lw>         Drop for W<'lw,'lw>     { fn drop(&mut self) { } } // REJECT\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: expected  `W<'l1, 'l2>`\n               found  `W<'_, '_>`\n \n-error: aborting due to 8 previous errors\n+error[E0367]: `Drop` impl requires `AddsBnd: Bound` but the enum it is implemented for does not\n+  --> $DIR/reject-specialized-drops-8142.rs:61:14\n+   |\n+LL | impl<AddsBnd:Bound> Drop for Enum<AddsBnd> { fn drop(&mut self) { } } // REJECT\n+   |              ^^^^^\n+   |\n+note: the implementor must specify the same requirement\n+  --> $DIR/reject-specialized-drops-8142.rs:19:1\n+   |\n+LL | enum Enum<T> { Variant(T) }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0367]: `Drop` impl requires `AddsBnd: Bound` but the struct it is implemented for does not\n+  --> $DIR/reject-specialized-drops-8142.rs:64:14\n+   |\n+LL | impl<AddsBnd:Bound> Drop for TupleStruct<AddsBnd> { fn drop(&mut self) { } } // REJECT\n+   |              ^^^^^\n+   |\n+note: the implementor must specify the same requirement\n+  --> $DIR/reject-specialized-drops-8142.rs:20:1\n+   |\n+LL | struct TupleStruct<T>(T);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 11 previous errors\n \n Some errors have detailed explanations: E0308, E0366, E0367, E0495.\n For more information about an error, try `rustc --explain E0308`."}, {"sha": "15f232e2c0f70cdae745538e4ae59223c25cb2ba", "filename": "src/test/ui/simd/simd-intrinsic-generic-cast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8377d37e9bc47f9a5a982c41705a7800cbb51d/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-cast.rs?ref=cd8377d37e9bc47f9a5a982c41705a7800cbb51d", "patch": "@@ -4,7 +4,6 @@\n \n #![feature(repr_simd, platform_intrinsics, concat_idents, test)]\n #![allow(non_camel_case_types)]\n-#![allow(const_err)] // the test macro casts i32s to i8 and u8 which causes lots of warnings\n \n extern crate test;\n "}]}