{"sha": "23aaeb573b626a51af9ecc97680663153e4ab2b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzYWFlYjU3M2I2MjZhNTFhZjllY2M5NzY4MDY2MzE1M2U0YWIyYjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-10T10:09:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-10T10:09:47Z"}, "message": "Auto merge of #44312 - eddyb:static-by-any-other-name, r=alexcrichton\n\nUse rvalue promotion to 'static instead of static items.\n\nFixes #44240. Among other things, in crates that do a lot of formatting, this could reduce the number of items, although I haven't measured the performance benefits. If there's a codegen slowdown, that should IMO be solved by caching the output of miri, *not* by using `static`.\n\nr? @alexcrichton", "tree": {"sha": "76d3ea096545044d5f30f1b9bfb947605a04452e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76d3ea096545044d5f30f1b9bfb947605a04452e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23aaeb573b626a51af9ecc97680663153e4ab2b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23aaeb573b626a51af9ecc97680663153e4ab2b0", "html_url": "https://github.com/rust-lang/rust/commit/23aaeb573b626a51af9ecc97680663153e4ab2b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23aaeb573b626a51af9ecc97680663153e4ab2b0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34035d23ff5acd9bd08602bfab5d667450243966", "url": "https://api.github.com/repos/rust-lang/rust/commits/34035d23ff5acd9bd08602bfab5d667450243966", "html_url": "https://github.com/rust-lang/rust/commit/34035d23ff5acd9bd08602bfab5d667450243966"}, {"sha": "10f66bd6e494c5b329f6b21b31e388e0ed3d69c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/10f66bd6e494c5b329f6b21b31e388e0ed3d69c1", "html_url": "https://github.com/rust-lang/rust/commit/10f66bd6e494c5b329f6b21b31e388e0ed3d69c1"}], "stats": {"total": 95, "additions": 16, "deletions": 79}, "files": [{"sha": "d64c984ea7d284786f392e1e0e19d9ee15364afb", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/23aaeb573b626a51af9ecc97680663153e4ab2b0/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23aaeb573b626a51af9ecc97680663153e4ab2b0/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=23aaeb573b626a51af9ecc97680663153e4ab2b0", "patch": "@@ -17,18 +17,11 @@ macro_rules! panic {\n         panic!(\"explicit panic\")\n     );\n     ($msg:expr) => ({\n-        static _MSG_FILE_LINE_COL: (&'static str, &'static str, u32, u32) =\n-            ($msg, file!(), line!(), __rust_unstable_column!());\n-        $crate::panicking::panic(&_MSG_FILE_LINE_COL)\n+        $crate::panicking::panic(&($msg, file!(), line!(), __rust_unstable_column!()))\n     });\n     ($fmt:expr, $($arg:tt)*) => ({\n-        // The leading _'s are to avoid dead code warnings if this is\n-        // used inside a dead function. Just `#[allow(dead_code)]` is\n-        // insufficient, since the user may have\n-        // `#[forbid(dead_code)]` and which cannot be overridden.\n-        static _MSG_FILE_LINE_COL: (&'static str, u32, u32) =\n-            (file!(), line!(), __rust_unstable_column!());\n-        $crate::panicking::panic_fmt(format_args!($fmt, $($arg)*), &_MSG_FILE_LINE_COL)\n+        $crate::panicking::panic_fmt(format_args!($fmt, $($arg)*),\n+                                     &(file!(), line!(), __rust_unstable_column!()))\n     });\n }\n "}, {"sha": "d6477f2babf76ec44abe18207ef4b39c18c196ef", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23aaeb573b626a51af9ecc97680663153e4ab2b0/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23aaeb573b626a51af9ecc97680663153e4ab2b0/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=23aaeb573b626a51af9ecc97680663153e4ab2b0", "patch": "@@ -29,7 +29,6 @@ use syntax::ast;\n use syntax_pos::Span;\n \n use std::fmt;\n-use std::u32;\n \n pub struct ElaborateDrops;\n "}, {"sha": "7992aefcb42037305df4d587b2405d7e055d445b", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23aaeb573b626a51af9ecc97680663153e4ab2b0/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23aaeb573b626a51af9ecc97680663153e4ab2b0/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=23aaeb573b626a51af9ecc97680663153e4ab2b0", "patch": "@@ -545,7 +545,7 @@ impl fmt::Debug for CStr {\n #[stable(feature = \"cstr_default\", since = \"1.10.0\")]\n impl<'a> Default for &'a CStr {\n     fn default() -> &'a CStr {\n-        static SLICE: &'static [c_char] = &[0];\n+        const SLICE: &'static [c_char] = &[0];\n         unsafe { CStr::from_ptr(SLICE.as_ptr()) }\n     }\n }"}, {"sha": "8089671f309d28d22e63fecc8710b5e2c704e6aa", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/23aaeb573b626a51af9ecc97680663153e4ab2b0/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23aaeb573b626a51af9ecc97680663153e4ab2b0/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=23aaeb573b626a51af9ecc97680663153e4ab2b0", "patch": "@@ -66,23 +66,11 @@ macro_rules! panic {\n         panic!(\"explicit panic\")\n     });\n     ($msg:expr) => ({\n-        $crate::rt::begin_panic($msg, {\n-            // static requires less code at runtime, more constant data\n-            static _FILE_LINE_COL: (&'static str, u32, u32) = (file!(), line!(),\n-                __rust_unstable_column!());\n-            &_FILE_LINE_COL\n-        })\n+        $crate::rt::begin_panic($msg, &(file!(), line!(), __rust_unstable_column!()))\n     });\n     ($fmt:expr, $($arg:tt)+) => ({\n-        $crate::rt::begin_panic_fmt(&format_args!($fmt, $($arg)+), {\n-            // The leading _'s are to avoid dead code warnings if this is\n-            // used inside a dead function. Just `#[allow(dead_code)]` is\n-            // insufficient, since the user may have\n-            // `#[forbid(dead_code)]` and which cannot be overridden.\n-            static _FILE_LINE_COL: (&'static str, u32, u32) = (file!(), line!(),\n-                __rust_unstable_column!());\n-            &_FILE_LINE_COL\n-        })\n+        $crate::rt::begin_panic_fmt(&format_args!($fmt, $($arg)+),\n+                                    &(file!(), line!(), __rust_unstable_column!()))\n     });\n }\n "}, {"sha": "63c533df198d0173239e67e0d202ba42b09d3dc5", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 3, "deletions": 36, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/23aaeb573b626a51af9ecc97680663153e4ab2b0/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23aaeb573b626a51af9ecc97680663153e4ab2b0/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=23aaeb573b626a51af9ecc97680663153e4ab2b0", "patch": "@@ -19,7 +19,7 @@ use syntax::ext::base;\n use syntax::ext::build::AstBuilder;\n use syntax::parse::token;\n use syntax::ptr::P;\n-use syntax::symbol::{Symbol, keywords};\n+use syntax::symbol::Symbol;\n use syntax_pos::{Span, DUMMY_SP};\n use syntax::tokenstream;\n \n@@ -501,32 +501,6 @@ impl<'a, 'b> Context<'a, 'b> {\n         }\n     }\n \n-    fn static_array(ecx: &mut ExtCtxt,\n-                    name: &str,\n-                    piece_ty: P<ast::Ty>,\n-                    pieces: Vec<P<ast::Expr>>)\n-                    -> P<ast::Expr> {\n-        let sp = piece_ty.span;\n-        let ty = ecx.ty_rptr(sp,\n-                             ecx.ty(sp, ast::TyKind::Slice(piece_ty)),\n-                             Some(ecx.lifetime(sp, keywords::StaticLifetime.ident())),\n-                             ast::Mutability::Immutable);\n-        let slice = ecx.expr_vec_slice(sp, pieces);\n-        // static instead of const to speed up codegen by not requiring this to be inlined\n-        let st = ast::ItemKind::Static(ty, ast::Mutability::Immutable, slice);\n-\n-        let name = ecx.ident_of(name);\n-        let item = ecx.item(sp, name, vec![], st);\n-        let stmt = ast::Stmt {\n-            id: ast::DUMMY_NODE_ID,\n-            node: ast::StmtKind::Item(item),\n-            span: sp,\n-        };\n-\n-        // Wrap the declaration in a block so that it forms a single expression.\n-        ecx.expr_block(ecx.block(sp, vec![stmt, ecx.stmt_expr(ecx.expr_ident(sp, name))]))\n-    }\n-\n     /// Actually builds the expression which the format_args! block will be\n     /// expanded to\n     fn into_expr(self) -> P<ast::Expr> {\n@@ -537,12 +511,7 @@ impl<'a, 'b> Context<'a, 'b> {\n \n         // First, build up the static array which will become our precompiled\n         // format \"string\"\n-        let static_lifetime = self.ecx.lifetime(self.fmtsp, keywords::StaticLifetime.ident());\n-        let piece_ty = self.ecx.ty_rptr(self.fmtsp,\n-                                        self.ecx.ty_ident(self.fmtsp, self.ecx.ident_of(\"str\")),\n-                                        Some(static_lifetime),\n-                                        ast::Mutability::Immutable);\n-        let pieces = Context::static_array(self.ecx, \"__STATIC_FMTSTR\", piece_ty, self.str_pieces);\n+        let pieces = self.ecx.expr_vec_slice(self.fmtsp, self.str_pieces);\n \n         // Before consuming the expressions, we have to remember spans for\n         // count arguments as they are now generated separate from other\n@@ -623,9 +592,7 @@ impl<'a, 'b> Context<'a, 'b> {\n         } else {\n             // Build up the static array which will store our precompiled\n             // nonstandard placeholders, if there are any.\n-            let piece_ty = self.ecx\n-                .ty_path(self.ecx.path_global(self.macsp, Context::rtpath(self.ecx, \"Argument\")));\n-            let fmt = Context::static_array(self.ecx, \"__STATIC_FMTARGS\", piece_ty, self.pieces);\n+            let fmt = self.ecx.expr_vec_slice(self.macsp, self.pieces);\n \n             (\"new_v1_formatted\", vec![pieces, args_slice, fmt])\n         };"}, {"sha": "14a499644df8bc075e1c25e2398e4850ecb4757d", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/23aaeb573b626a51af9ecc97680663153e4ab2b0/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/23aaeb573b626a51af9ecc97680663153e4ab2b0/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=23aaeb573b626a51af9ecc97680663153e4ab2b0", "patch": "@@ -42,23 +42,13 @@\n                   ((::fmt::format as\n                        fn(std::fmt::Arguments<'_>) -> std::string::String {std::fmt::format})(((<::std::fmt::Arguments>::new_v1\n                                                                                                    as\n-                                                                                                   fn(&[&str], &[std::fmt::ArgumentV1<'_>]) -> std::fmt::Arguments<'_> {std::fmt::Arguments<'_>::new_v1})(({\n-                                                                                                                                                                                                               static __STATIC_FMTSTR:\n-                                                                                                                                                                                                                      &'static [&'static str]\n-                                                                                                                                                                                                                      =\n-                                                                                                                                                                                                                   (&([(\"test\"\n-                                                                                                                                                                                                                           as\n-                                                                                                                                                                                                                           &'static str)]\n-                                                                                                                                                                                                                         as\n-                                                                                                                                                                                                                         [&'static str; 1])\n-                                                                                                                                                                                                                       as\n-                                                                                                                                                                                                                       &'static [&'static str; 1]);\n-                                                                                                                                                                                                               (__STATIC_FMTSTR\n-                                                                                                                                                                                                                   as\n-                                                                                                                                                                                                                   &'static [&'static str])\n-                                                                                                                                                                                                           }\n+                                                                                                   fn(&[&str], &[std::fmt::ArgumentV1<'_>]) -> std::fmt::Arguments<'_> {std::fmt::Arguments<'_>::new_v1})((&([(\"test\"\n+                                                                                                                                                                                                                  as\n+                                                                                                                                                                                                                  &'static str)]\n+                                                                                                                                                                                                                as\n+                                                                                                                                                                                                                [&str; 1])\n                                                                                                                                                                                                               as\n-                                                                                                                                                                                                              &[&str]),\n+                                                                                                                                                                                                              &[&str; 1]),\n                                                                                                                                                                                                           (&(match (()\n                                                                                                                                                                                                                        as\n                                                                                                                                                                                                                        ())"}]}