{"sha": "ac642aba074969860f9fb53fb9e2d52f0e0203cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjNjQyYWJhMDc0OTY5ODYwZjlmYjUzZmI5ZTJkNTJmMGUwMjAzY2I=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-12-12T06:17:35Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-12-12T06:17:35Z"}, "message": "Update the comment some more following CR feedback", "tree": {"sha": "a221f85df692310494a94b69b45ef741706d39c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a221f85df692310494a94b69b45ef741706d39c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac642aba074969860f9fb53fb9e2d52f0e0203cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac642aba074969860f9fb53fb9e2d52f0e0203cb", "html_url": "https://github.com/rust-lang/rust/commit/ac642aba074969860f9fb53fb9e2d52f0e0203cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac642aba074969860f9fb53fb9e2d52f0e0203cb/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c11392b14c3ed55b8166d3b790eeeb470764630", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c11392b14c3ed55b8166d3b790eeeb470764630", "html_url": "https://github.com/rust-lang/rust/commit/5c11392b14c3ed55b8166d3b790eeeb470764630"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "b987b94500fc4395f450709e0cb04aaa3a1df2a1", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ac642aba074969860f9fb53fb9e2d52f0e0203cb/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac642aba074969860f9fb53fb9e2d52f0e0203cb/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=ac642aba074969860f9fb53fb9e2d52f0e0203cb", "patch": "@@ -748,10 +748,10 @@ impl<T> Vec<T> {\n         self\n     }\n \n-    /// Forces the length of a vector to a particular value.\n+    /// Forces the length of the vector to `new_len`.\n     ///\n     /// This is a low-level operation that maintains none of the normal\n-    /// invariants of the type.  Normally changing the length of a `Vec`\n+    /// invariants of the type.  Normally changing the length of a vector\n     /// is done using one of the safe operations instead, such as\n     /// [`truncate`], [`resize`], [`extend`], or [`clear`].\n     ///\n@@ -762,14 +762,15 @@ impl<T> Vec<T> {\n     ///\n     /// # Safety\n     ///\n-    /// - `new_len` must be less than or equal to `capacity()`.\n-    /// - All elements between past the previous end up to the `new_len`\n-    ///   must be initialized.\n+    /// - `new_len` must be less than or equal to [`capacity()`].\n+    /// - The elements at `old_len..new_len` must be initialized.\n+    ///\n+    /// [`capacity()`]: #method.capacity\n     ///\n     /// # Examples\n     ///\n-    /// This method can be useful for situations in which the `Vec` is\n-    /// serving as a buffer for other code, particularly over FFI:\n+    /// This method can be useful for situations in which the vector\n+    /// is serving as a buffer for other code, particularly over FFI:\n     ///\n     /// ```no_run\n     /// # #![allow(dead_code)]\n@@ -786,7 +787,7 @@ impl<T> Vec<T> {\n     /// # }\n     /// # impl StreamWrapper {\n     /// pub fn get_dictionary(&self) -> Option<Vec<u8>> {\n-    ///     // Per the docs, \"32768 bytes is always enough\".\n+    ///     // Per the FFI method's docs, \"32768 bytes is always enough\".\n     ///     let mut dict = Vec::with_capacity(32_768);\n     ///     let mut dict_length = 0;\n     ///     unsafe {\n@@ -816,7 +817,8 @@ impl<T> Vec<T> {\n     /// }\n     /// ```\n     ///\n-    /// (Instead, one would normally use [`clear`] in this situation.)\n+    /// Normally, here, one would use [`clear`] instead to correctly drop\n+    /// the contents and thus not leak memory.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub unsafe fn set_len(&mut self, new_len: usize) {"}]}