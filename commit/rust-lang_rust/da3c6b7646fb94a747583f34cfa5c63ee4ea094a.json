{"sha": "da3c6b7646fb94a747583f34cfa5c63ee4ea094a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhM2M2Yjc2NDZmYjk0YTc0NzU4M2YzNGNmYTVjNjNlZTRlYTA5NGE=", "commit": {"author": {"name": "Mikhail Modin", "email": "mikhailm1@gmail.com", "date": "2016-09-05T06:47:23Z"}, "committer": {"name": "Mikhail Modin", "email": "mikhailm1@gmail.com", "date": "2016-09-13T21:00:23Z"}, "message": "map create numbers between compilations", "tree": {"sha": "85647604362a060f3370dcbc58f31db1447ca289", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85647604362a060f3370dcbc58f31db1447ca289"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da3c6b7646fb94a747583f34cfa5c63ee4ea094a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da3c6b7646fb94a747583f34cfa5c63ee4ea094a", "html_url": "https://github.com/rust-lang/rust/commit/da3c6b7646fb94a747583f34cfa5c63ee4ea094a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da3c6b7646fb94a747583f34cfa5c63ee4ea094a/comments", "author": {"login": "mikhail-m1", "id": 5663581, "node_id": "MDQ6VXNlcjU2NjM1ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/5663581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikhail-m1", "html_url": "https://github.com/mikhail-m1", "followers_url": "https://api.github.com/users/mikhail-m1/followers", "following_url": "https://api.github.com/users/mikhail-m1/following{/other_user}", "gists_url": "https://api.github.com/users/mikhail-m1/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikhail-m1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikhail-m1/subscriptions", "organizations_url": "https://api.github.com/users/mikhail-m1/orgs", "repos_url": "https://api.github.com/users/mikhail-m1/repos", "events_url": "https://api.github.com/users/mikhail-m1/events{/privacy}", "received_events_url": "https://api.github.com/users/mikhail-m1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mikhail-m1", "id": 5663581, "node_id": "MDQ6VXNlcjU2NjM1ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/5663581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikhail-m1", "html_url": "https://github.com/mikhail-m1", "followers_url": "https://api.github.com/users/mikhail-m1/followers", "following_url": "https://api.github.com/users/mikhail-m1/following{/other_user}", "gists_url": "https://api.github.com/users/mikhail-m1/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikhail-m1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikhail-m1/subscriptions", "organizations_url": "https://api.github.com/users/mikhail-m1/orgs", "repos_url": "https://api.github.com/users/mikhail-m1/repos", "events_url": "https://api.github.com/users/mikhail-m1/events{/privacy}", "received_events_url": "https://api.github.com/users/mikhail-m1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2799a56a1631ee351e4687ee649808e28cccda1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2799a56a1631ee351e4687ee649808e28cccda1", "html_url": "https://github.com/rust-lang/rust/commit/b2799a56a1631ee351e4687ee649808e28cccda1"}], "stats": {"total": 107, "additions": 92, "deletions": 15}, "files": [{"sha": "a1606c391543d5b407b19823935764e0c0945857", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/da3c6b7646fb94a747583f34cfa5c63ee4ea094a/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3c6b7646fb94a747583f34cfa5c63ee4ea094a/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=da3c6b7646fb94a747583f34cfa5c63ee4ea094a", "patch": "@@ -18,7 +18,7 @@ use hir::TraitMap;\n use hir::def::DefMap;\n use hir::def_id::{DefId, DefIndex};\n use hir::map as ast_map;\n-use hir::map::{DefKey, DefPath, DefPathData, DisambiguatedDefPathData};\n+use hir::map::{DefKey, DefPathData, DisambiguatedDefPathData};\n use middle::free_region::FreeRegionMap;\n use middle::region::RegionMaps;\n use middle::resolve_lifetime;\n@@ -538,8 +538,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn retrace_path(self, path: &DefPath) -> Option<DefId> {\n-        debug!(\"retrace_path(path={:?}, krate={:?})\", path, self.crate_name(path.krate));\n+    pub fn retrace_path(self,\n+                        krate: ast::CrateNum,\n+                        path_data: &[DisambiguatedDefPathData])\n+                        -> Option<DefId> {\n+        debug!(\"retrace_path(path={:?}, krate={:?})\", path_data, self.crate_name(krate));\n \n         let root_key = DefKey {\n             parent: None,\n@@ -549,22 +552,22 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             },\n         };\n \n-        let root_index = self.def_index_for_def_key(path.krate, root_key)\n+        let root_index = self.def_index_for_def_key(krate, root_key)\n                              .expect(\"no root key?\");\n \n         debug!(\"retrace_path: root_index={:?}\", root_index);\n \n         let mut index = root_index;\n-        for data in &path.data {\n+        for data in path_data {\n             let key = DefKey { parent: Some(index), disambiguated_data: data.clone() };\n             debug!(\"retrace_path: key={:?}\", key);\n-            match self.def_index_for_def_key(path.krate, key) {\n+            match self.def_index_for_def_key(krate, key) {\n                 Some(i) => index = i,\n                 None => return None,\n             }\n         }\n \n-        Some(DefId { krate: path.krate, index: index })\n+        Some(DefId { krate: krate, index: index })\n     }\n \n     pub fn type_parameter_def(self,"}, {"sha": "c5fad9d8554e792037b186180887ba64d5255171", "filename": "src/librustc_incremental/persist/directory.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/da3c6b7646fb94a747583f34cfa5c63ee4ea094a/src%2Flibrustc_incremental%2Fpersist%2Fdirectory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3c6b7646fb94a747583f34cfa5c63ee4ea094a/src%2Flibrustc_incremental%2Fpersist%2Fdirectory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirectory.rs?ref=da3c6b7646fb94a747583f34cfa5c63ee4ea094a", "patch": "@@ -22,6 +22,7 @@ use rustc::util::nodemap::DefIdMap;\n use std::fmt::{self, Debug};\n use std::iter::once;\n use syntax::ast;\n+use std::collections::HashMap;\n \n /// Index into the DefIdDirectory\n #[derive(Copy, Clone, Debug, PartialOrd, Ord, Hash, PartialEq, Eq,\n@@ -92,18 +93,29 @@ impl DefIdDirectory {\n     }\n \n     pub fn retrace(&self, tcx: TyCtxt) -> RetracedDefIdDirectory {\n-        let max_current_crate = self.max_current_crate(tcx);\n+\n+        fn make_key(name: &str, disambiguator: &str) -> String {\n+            format!(\"{}/{}\", name, disambiguator)\n+        }\n+\n+        let new_krates: HashMap<_, _> =\n+            once(LOCAL_CRATE)\n+            .chain(tcx.sess.cstore.crates())\n+            .map(|krate| (make_key(&tcx.crate_name(krate),\n+                                   &tcx.crate_disambiguator(krate)), krate))\n+            .collect();\n \n         let ids = self.paths.iter()\n                             .map(|path| {\n-                                if self.krate_still_valid(tcx, max_current_crate, path.krate) {\n-                                    tcx.retrace_path(path)\n+                                let old_krate_id = path.krate as usize;\n+                                assert!(old_krate_id < self.krates.len());\n+                                let old_crate_info = &self.krates[old_krate_id];\n+                                let old_crate_key = make_key(&old_crate_info.name,\n+                                                         &old_crate_info.disambiguator);\n+                                if let Some(&new_crate_key) = new_krates.get(&old_crate_key) {\n+                                    tcx.retrace_path(new_crate_key, &path.data)\n                                 } else {\n-                                    debug!(\"crate {} changed from {:?} to {:?}/{:?}\",\n-                                           path.krate,\n-                                           self.krates[path.krate as usize],\n-                                           tcx.crate_name(path.krate),\n-                                           tcx.crate_disambiguator(path.krate));\n+                                    debug!(\"crate {:?} no longer exists\", old_crate_key);\n                                     None\n                                 }\n                             })"}, {"sha": "69b4acd3e302363401a61145dd71c1851504e28e", "filename": "src/test/incremental/change_crate_order/auxiliary/a.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/da3c6b7646fb94a747583f34cfa5c63ee4ea094a/src%2Ftest%2Fincremental%2Fchange_crate_order%2Fauxiliary%2Fa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3c6b7646fb94a747583f34cfa5c63ee4ea094a/src%2Ftest%2Fincremental%2Fchange_crate_order%2Fauxiliary%2Fa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_crate_order%2Fauxiliary%2Fa.rs?ref=da3c6b7646fb94a747583f34cfa5c63ee4ea094a", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type=\"rlib\"]\n+\n+pub static A : u32 = 32;\n+"}, {"sha": "1ab97a312c1f1bca36a72d5f2a899f582223d6c5", "filename": "src/test/incremental/change_crate_order/auxiliary/b.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/da3c6b7646fb94a747583f34cfa5c63ee4ea094a/src%2Ftest%2Fincremental%2Fchange_crate_order%2Fauxiliary%2Fb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3c6b7646fb94a747583f34cfa5c63ee4ea094a/src%2Ftest%2Fincremental%2Fchange_crate_order%2Fauxiliary%2Fb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_crate_order%2Fauxiliary%2Fb.rs?ref=da3c6b7646fb94a747583f34cfa5c63ee4ea094a", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type=\"rlib\"]\n+\n+pub static B: u32 = 32;\n+"}, {"sha": "bd8742ff38e01b98572e07ec957025361575522b", "filename": "src/test/incremental/change_crate_order/main.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/da3c6b7646fb94a747583f34cfa5c63ee4ea094a/src%2Ftest%2Fincremental%2Fchange_crate_order%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3c6b7646fb94a747583f34cfa5c63ee4ea094a/src%2Ftest%2Fincremental%2Fchange_crate_order%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_crate_order%2Fmain.rs?ref=da3c6b7646fb94a747583f34cfa5c63ee4ea094a", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:a.rs\n+// aux-build:b.rs\n+// revisions:rpass1 rpass2\n+\n+#![feature(rustc_attrs)]\n+\n+\n+#[cfg(rpass1)]\n+extern crate a;\n+#[cfg(rpass1)]\n+extern crate b;\n+\n+#[cfg(rpass2)]\n+extern crate b;\n+#[cfg(rpass2)]\n+extern crate a;\n+\n+use a::A;\n+use b::B;\n+\n+//? #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+pub fn main() {\n+    A + B;\n+}"}]}