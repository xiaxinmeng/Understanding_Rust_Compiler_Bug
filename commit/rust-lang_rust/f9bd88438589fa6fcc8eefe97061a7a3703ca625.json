{"sha": "f9bd88438589fa6fcc8eefe97061a7a3703ca625", "node_id": "C_kwDOAAsO6NoAKGY5YmQ4ODQzODU4OWZhNmZjYzhlZWZlOTcwNjFhN2EzNzAzY2E2MjU", "commit": {"author": {"name": "Martin Gammels\u00e6ter", "email": "martin@mg.am", "date": "2023-03-16T10:56:33Z"}, "committer": {"name": "Martin Gammels\u00e6ter", "email": "martin@mg.am", "date": "2023-03-16T11:34:04Z"}, "message": "Split unicode case LUTs in single and multi variants\n\nThe majority of char case replacements are single char replacements,\nso storing them as [char; 3] wastes a lot of space.\n\nThis commit splits the replacement tables for both `to_lower` and\n`to_upper` into two separate tables, one with single-character mappings\nand one with multi-character mappings.\n\nThis reduces the binary size for programs using all of these tables\nwith roughly 24K bytes.", "tree": {"sha": "dacc426bbe53e58fbfadc888cc72a62854e8ca3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dacc426bbe53e58fbfadc888cc72a62854e8ca3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9bd88438589fa6fcc8eefe97061a7a3703ca625", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9bd88438589fa6fcc8eefe97061a7a3703ca625", "html_url": "https://github.com/rust-lang/rust/commit/f9bd88438589fa6fcc8eefe97061a7a3703ca625", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9bd88438589fa6fcc8eefe97061a7a3703ca625/comments", "author": {"login": "martingms", "id": 458783, "node_id": "MDQ6VXNlcjQ1ODc4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/458783?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martingms", "html_url": "https://github.com/martingms", "followers_url": "https://api.github.com/users/martingms/followers", "following_url": "https://api.github.com/users/martingms/following{/other_user}", "gists_url": "https://api.github.com/users/martingms/gists{/gist_id}", "starred_url": "https://api.github.com/users/martingms/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martingms/subscriptions", "organizations_url": "https://api.github.com/users/martingms/orgs", "repos_url": "https://api.github.com/users/martingms/repos", "events_url": "https://api.github.com/users/martingms/events{/privacy}", "received_events_url": "https://api.github.com/users/martingms/received_events", "type": "User", "site_admin": false}, "committer": {"login": "martingms", "id": 458783, "node_id": "MDQ6VXNlcjQ1ODc4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/458783?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martingms", "html_url": "https://github.com/martingms", "followers_url": "https://api.github.com/users/martingms/followers", "following_url": "https://api.github.com/users/martingms/following{/other_user}", "gists_url": "https://api.github.com/users/martingms/gists{/gist_id}", "starred_url": "https://api.github.com/users/martingms/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martingms/subscriptions", "organizations_url": "https://api.github.com/users/martingms/orgs", "repos_url": "https://api.github.com/users/martingms/repos", "events_url": "https://api.github.com/users/martingms/events{/privacy}", "received_events_url": "https://api.github.com/users/martingms/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a4eb9e3a87b1fb9a5078f6f45cf62e2f9f8bc2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a4eb9e3a87b1fb9a5078f6f45cf62e2f9f8bc2b", "html_url": "https://github.com/rust-lang/rust/commit/8a4eb9e3a87b1fb9a5078f6f45cf62e2f9f8bc2b"}], "stats": {"total": 2703, "additions": 1008, "deletions": 1695}, "files": [{"sha": "20b3587ab651bcb85258fc41aff8fbd86edd9744", "filename": "library/core/src/unicode/unicode_data.rs", "status": "modified", "additions": 963, "deletions": 1682, "changes": 2645, "blob_url": "https://github.com/rust-lang/rust/blob/f9bd88438589fa6fcc8eefe97061a7a3703ca625/library%2Fcore%2Fsrc%2Funicode%2Funicode_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9bd88438589fa6fcc8eefe97061a7a3703ca625/library%2Fcore%2Fsrc%2Funicode%2Funicode_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Funicode%2Funicode_data.rs?ref=f9bd88438589fa6fcc8eefe97061a7a3703ca625"}, {"sha": "23ad93925baf6ee5d7d2f2b356baf8bc66320d10", "filename": "src/tools/unicode-table-generator/src/case_mapping.rs", "status": "modified", "additions": 45, "deletions": 13, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/f9bd88438589fa6fcc8eefe97061a7a3703ca625/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fcase_mapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9bd88438589fa6fcc8eefe97061a7a3703ca625/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fcase_mapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fcase_mapping.rs?ref=f9bd88438589fa6fcc8eefe97061a7a3703ca625", "patch": "@@ -1,22 +1,47 @@\n use crate::{fmt_list, UnicodeData};\n-use std::{collections::BTreeMap, fmt};\n+use std::{\n+    collections::BTreeMap,\n+    fmt::{self, Write},\n+};\n \n pub(crate) fn generate_case_mapping(data: &UnicodeData) -> String {\n     let mut file = String::new();\n \n     file.push_str(HEADER.trim_start());\n-    file.push_str(&generate_table(\"LOWER\", &data.to_lower));\n+    file.push_str(&generate_tables(\"LOWER\", &data.to_lower));\n     file.push_str(\"\\n\\n\");\n-    file.push_str(&generate_table(\"UPPER\", &data.to_upper));\n+    file.push_str(&generate_tables(\"UPPER\", &data.to_upper));\n     file\n }\n \n-fn generate_table(case: &str, data: &BTreeMap<u32, (u32, u32, u32)>) -> String {\n-    format!(\n-        \"static {}CASE_TABLE: &[(char, [char; 3])] = &[{}];\",\n+fn generate_tables(case: &str, data: &BTreeMap<u32, (u32, u32, u32)>) -> String {\n+    let (single, multi): (Vec<_>, Vec<_>) = data\n+        .iter()\n+        .map(to_mapping)\n+        .filter(|(k, _)| !k.0.is_ascii())\n+        .partition(|(_, [_, s, t])| s.0 == '\\0' && t.0 == '\\0');\n+\n+    let mut tables = String::new();\n+\n+    write!(\n+        tables,\n+        \"static {}CASE_TABLE_SINGLE: &[(char, char)] = &[{}];\",\n+        case,\n+        fmt_list(single.into_iter().map(|(k, [v, _, _])| (k, v)))\n+    )\n+    .unwrap();\n+\n+    tables.push_str(\"\\n\\n\");\n+\n+    write!(\n+        tables,\n+        \"static {}CASE_TABLE_MULTI: &[(char, [char; 3])] = &[{}];\",\n         case,\n-        fmt_list(data.iter().map(to_mapping).filter(|(k, _)| !k.0.is_ascii()))\n+        fmt_list(multi)\n     )\n+    .unwrap();\n+\n+    tables\n }\n \n fn to_mapping((key, (a, b, c)): (&u32, &(u32, u32, u32))) -> (CharEscape, [CharEscape; 3]) {\n@@ -43,9 +68,9 @@ pub fn to_lower(c: char) -> [char; 3] {\n     if c.is_ascii() {\n         [(c as u8).to_ascii_lowercase() as char, '\\0', '\\0']\n     } else {\n-        match bsearch_case_table(c, LOWERCASE_TABLE) {\n+        match bsearch_case_tables(c, LOWERCASE_TABLE_SINGLE, LOWERCASE_TABLE_MULTI) {\n+            Some(replacement) => replacement,\n             None => [c, '\\0', '\\0'],\n-            Some(index) => LOWERCASE_TABLE[index].1,\n         }\n     }\n }\n@@ -54,14 +79,21 @@ pub fn to_upper(c: char) -> [char; 3] {\n     if c.is_ascii() {\n         [(c as u8).to_ascii_uppercase() as char, '\\0', '\\0']\n     } else {\n-        match bsearch_case_table(c, UPPERCASE_TABLE) {\n+        match bsearch_case_tables(c, UPPERCASE_TABLE_SINGLE, UPPERCASE_TABLE_MULTI) {\n+            Some(replacement) => replacement,\n             None => [c, '\\0', '\\0'],\n-            Some(index) => UPPERCASE_TABLE[index].1,\n         }\n     }\n }\n \n-fn bsearch_case_table(c: char, table: &[(char, [char; 3])]) -> Option<usize> {\n-    table.binary_search_by(|&(key, _)| key.cmp(&c)).ok()\n+fn bsearch_case_tables(\n+    c: char,\n+    single: &[(char, char)],\n+    multi: &[(char, [char; 3])],\n+) -> Option<[char; 3]> {\n+    match single.binary_search_by(|&(key, _)| key.cmp(&c)) {\n+        Ok(i) => Some([single[i].1, '\\0', '\\0']),\n+        Err(_) => multi.binary_search_by(|&(key, _)| key.cmp(&c)).map(|i| multi[i].1).ok(),\n+    }\n }\n \";"}]}