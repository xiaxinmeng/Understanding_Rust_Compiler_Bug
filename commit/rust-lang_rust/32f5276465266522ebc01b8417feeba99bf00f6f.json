{"sha": "32f5276465266522ebc01b8417feeba99bf00f6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyZjUyNzY0NjUyNjY1MjJlYmMwMWI4NDE3ZmVlYmE5OWJmMDBmNmY=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-03-05T23:02:14Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-03-07T21:20:18Z"}, "message": "Show mod path in hover tooltip", "tree": {"sha": "6388994a0cc67c7ca60658e81489a832569e3c4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6388994a0cc67c7ca60658e81489a832569e3c4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32f5276465266522ebc01b8417feeba99bf00f6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32f5276465266522ebc01b8417feeba99bf00f6f", "html_url": "https://github.com/rust-lang/rust/commit/32f5276465266522ebc01b8417feeba99bf00f6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32f5276465266522ebc01b8417feeba99bf00f6f/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aff82cf7ac172f213cb5dcca637cb2c5332294c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/aff82cf7ac172f213cb5dcca637cb2c5332294c1", "html_url": "https://github.com/rust-lang/rust/commit/aff82cf7ac172f213cb5dcca637cb2c5332294c1"}], "stats": {"total": 161, "additions": 132, "deletions": 29}, "files": [{"sha": "dca5f27b29711c56c35c4e6b986bcef66f226a6f", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/32f5276465266522ebc01b8417feeba99bf00f6f/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f5276465266522ebc01b8417feeba99bf00f6f/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=32f5276465266522ebc01b8417feeba99bf00f6f", "patch": "@@ -480,6 +480,14 @@ impl Adt {\n     pub fn krate(self, db: &impl HirDatabase) -> Option<Crate> {\n         Some(self.module(db).krate())\n     }\n+\n+    pub fn name(&self, db: &impl HirDatabase) -> Name {\n+        match self {\n+            Adt::Struct(s) => s.name(db),\n+            Adt::Union(u) => u.name(db),\n+            Adt::Enum(e) => e.name(db),\n+        }\n+    }\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n@@ -507,6 +515,14 @@ impl VariantDef {\n         }\n     }\n \n+    pub fn name(&self, db: &impl HirDatabase) -> Name {\n+        match self {\n+            VariantDef::Struct(s) => s.name(db),\n+            VariantDef::Union(u) => u.name(db),\n+            VariantDef::EnumVariant(e) => e.name(db),\n+        }\n+    }\n+\n     pub(crate) fn variant_data(self, db: &impl DefDatabase) -> Arc<VariantData> {\n         match self {\n             VariantDef::Struct(it) => it.variant_data(db),\n@@ -534,6 +550,14 @@ impl DefWithBody {\n             DefWithBody::Static(s) => s.module(db),\n         }\n     }\n+\n+    pub fn name(self, db: &impl HirDatabase) -> Option<Name> {\n+        match self {\n+            DefWithBody::Function(f) => Some(f.name(db)),\n+            DefWithBody::Static(s) => s.name(db),\n+            DefWithBody::Const(c) => c.name(db),\n+        }\n+    }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]"}, {"sha": "eaeaaa2b40aba7da3f3cc8481acae461f36c381a", "filename": "crates/ra_ide/src/display.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32f5276465266522ebc01b8417feeba99bf00f6f/crates%2Fra_ide%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f5276465266522ebc01b8417feeba99bf00f6f/crates%2Fra_ide%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay.rs?ref=32f5276465266522ebc01b8417feeba99bf00f6f", "patch": "@@ -68,17 +68,23 @@ pub(crate) fn macro_label(node: &ast::MacroCall) -> String {\n }\n \n pub(crate) fn rust_code_markup<CODE: AsRef<str>>(val: CODE) -> String {\n-    rust_code_markup_with_doc::<_, &str>(val, None)\n+    rust_code_markup_with_doc::<_, &str>(val, None, None)\n }\n \n-pub(crate) fn rust_code_markup_with_doc<CODE, DOC>(val: CODE, doc: Option<DOC>) -> String\n+pub(crate) fn rust_code_markup_with_doc<CODE, DOC>(\n+    val: CODE,\n+    doc: Option<DOC>,\n+    mod_path: Option<String>,\n+) -> String\n where\n     CODE: AsRef<str>,\n     DOC: AsRef<str>,\n {\n+    let mod_path =\n+        mod_path.filter(|path| !path.is_empty()).map(|path| path + \"\\n\").unwrap_or_default();\n     if let Some(doc) = doc {\n-        format!(\"```rust\\n{}\\n```\\n\\n{}\", val.as_ref(), doc.as_ref())\n+        format!(\"```rust\\n{}{}\\n```\\n\\n{}\", mod_path, val.as_ref(), doc.as_ref())\n     } else {\n-        format!(\"```rust\\n{}\\n```\", val.as_ref())\n+        format!(\"```rust\\n{}{}\\n```\", mod_path, val.as_ref())\n     }\n }"}, {"sha": "da3b679433b0edccc295dedb8d85126a0eed343b", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 94, "deletions": 25, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/32f5276465266522ebc01b8417feeba99bf00f6f/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f5276465266522ebc01b8417feeba99bf00f6f/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=32f5276465266522ebc01b8417feeba99bf00f6f", "patch": "@@ -1,6 +1,8 @@\n //! FIXME: write short doc here\n \n-use hir::{Adt, HasSource, HirDisplay, Semantics};\n+use hir::{\n+    Adt, AsAssocItem, AssocItemContainer, HasSource, HirDisplay, ModuleDef, ModuleSource, Semantics,\n+};\n use ra_ide_db::{\n     defs::{classify_name, classify_name_ref, Definition},\n     RootDatabase,\n@@ -16,6 +18,8 @@ use crate::{\n     display::{macro_label, rust_code_markup, rust_code_markup_with_doc, ShortLabel},\n     FilePosition, RangeInfo,\n };\n+use itertools::Itertools;\n+use std::iter::once;\n \n /// Contains the results when hovering over an item\n #[derive(Debug, Clone)]\n@@ -83,44 +87,86 @@ impl HoverResult {\n     }\n }\n \n-fn hover_text(docs: Option<String>, desc: Option<String>) -> Option<String> {\n-    match (desc, docs) {\n-        (Some(desc), docs) => Some(rust_code_markup_with_doc(desc, docs)),\n-        (None, Some(docs)) => Some(docs),\n+fn hover_text(\n+    docs: Option<String>,\n+    desc: Option<String>,\n+    mod_path: Option<String>,\n+) -> Option<String> {\n+    match (desc, docs, mod_path) {\n+        (Some(desc), docs, mod_path) => Some(rust_code_markup_with_doc(desc, docs, mod_path)),\n+        (None, Some(docs), _) => Some(docs),\n         _ => None,\n     }\n }\n \n+fn definition_owner_name(db: &RootDatabase, def: &Definition) -> Option<String> {\n+    match def {\n+        Definition::StructField(f) => Some(f.parent_def(db).name(db)),\n+        Definition::Local(l) => l.parent(db).name(db),\n+        Definition::ModuleDef(md) => match md {\n+            ModuleDef::Function(f) => match f.as_assoc_item(db)?.container(db) {\n+                AssocItemContainer::Trait(t) => Some(t.name(db)),\n+                AssocItemContainer::ImplDef(i) => i.target_ty(db).as_adt().map(|adt| adt.name(db)),\n+            },\n+            ModuleDef::EnumVariant(e) => Some(e.parent_enum(db).name(db)),\n+            _ => None,\n+        },\n+        Definition::SelfType(i) => i.target_ty(db).as_adt().map(|adt| adt.name(db)),\n+        _ => None,\n+    }\n+    .map(|name| name.to_string())\n+}\n+\n+fn determine_mod_path(db: &RootDatabase, def: &Definition) -> Option<String> {\n+    let mod_path = def.module(db).map(|module| {\n+        once(db.get_crate_original_name(&module.krate().into()))\n+            .chain(\n+                module\n+                    .path_to_root(db)\n+                    .into_iter()\n+                    .rev()\n+                    .map(|it| it.name(db).map(|name| name.to_string())),\n+            )\n+            .chain(once(definition_owner_name(db, def)))\n+            .filter_map(std::convert::identity)\n+            .join(\"::\")\n+    });\n+    mod_path\n+}\n+\n fn hover_text_from_name_kind(db: &RootDatabase, def: Definition) -> Option<String> {\n+    let mod_path = determine_mod_path(db, &def);\n     return match def {\n         Definition::Macro(it) => {\n             let src = it.source(db);\n-            hover_text(src.value.doc_comment_text(), Some(macro_label(&src.value)))\n+            hover_text(src.value.doc_comment_text(), Some(macro_label(&src.value)), mod_path)\n         }\n         Definition::StructField(it) => {\n             let src = it.source(db);\n             match src.value {\n-                hir::FieldSource::Named(it) => hover_text(it.doc_comment_text(), it.short_label()),\n+                hir::FieldSource::Named(it) => {\n+                    hover_text(it.doc_comment_text(), it.short_label(), mod_path)\n+                }\n                 _ => None,\n             }\n         }\n         Definition::ModuleDef(it) => match it {\n-            hir::ModuleDef::Module(it) => match it.definition_source(db).value {\n-                hir::ModuleSource::Module(it) => {\n-                    hover_text(it.doc_comment_text(), it.short_label())\n+            ModuleDef::Module(it) => match it.definition_source(db).value {\n+                ModuleSource::Module(it) => {\n+                    hover_text(it.doc_comment_text(), it.short_label(), mod_path)\n                 }\n                 _ => None,\n             },\n-            hir::ModuleDef::Function(it) => from_def_source(db, it),\n-            hir::ModuleDef::Adt(Adt::Struct(it)) => from_def_source(db, it),\n-            hir::ModuleDef::Adt(Adt::Union(it)) => from_def_source(db, it),\n-            hir::ModuleDef::Adt(Adt::Enum(it)) => from_def_source(db, it),\n-            hir::ModuleDef::EnumVariant(it) => from_def_source(db, it),\n-            hir::ModuleDef::Const(it) => from_def_source(db, it),\n-            hir::ModuleDef::Static(it) => from_def_source(db, it),\n-            hir::ModuleDef::Trait(it) => from_def_source(db, it),\n-            hir::ModuleDef::TypeAlias(it) => from_def_source(db, it),\n-            hir::ModuleDef::BuiltinType(it) => Some(it.to_string()),\n+            ModuleDef::Function(it) => from_def_source(db, it, mod_path),\n+            ModuleDef::Adt(Adt::Struct(it)) => from_def_source(db, it, mod_path),\n+            ModuleDef::Adt(Adt::Union(it)) => from_def_source(db, it, mod_path),\n+            ModuleDef::Adt(Adt::Enum(it)) => from_def_source(db, it, mod_path),\n+            ModuleDef::EnumVariant(it) => from_def_source(db, it, mod_path),\n+            ModuleDef::Const(it) => from_def_source(db, it, mod_path),\n+            ModuleDef::Static(it) => from_def_source(db, it, mod_path),\n+            ModuleDef::Trait(it) => from_def_source(db, it, mod_path),\n+            ModuleDef::TypeAlias(it) => from_def_source(db, it, mod_path),\n+            ModuleDef::BuiltinType(it) => Some(it.to_string()),\n         },\n         Definition::Local(it) => {\n             Some(rust_code_markup(it.ty(db).display_truncated(db, None).to_string()))\n@@ -131,13 +177,13 @@ fn hover_text_from_name_kind(db: &RootDatabase, def: Definition) -> Option<Strin\n         }\n     };\n \n-    fn from_def_source<A, D>(db: &RootDatabase, def: D) -> Option<String>\n+    fn from_def_source<A, D>(db: &RootDatabase, def: D, mod_path: Option<String>) -> Option<String>\n     where\n         D: HasSource<Ast = A>,\n         A: ast::DocCommentsOwner + ast::NameOwner + ShortLabel,\n     {\n         let src = def.source(db);\n-        hover_text(src.value.doc_comment_text(), src.value.short_label())\n+        hover_text(src.value.doc_comment_text(), src.value.short_label(), mod_path)\n     }\n }\n \n@@ -345,7 +391,7 @@ mod tests {\n                 };\n             }\n         \"#,\n-            &[\"field_a: u32\"],\n+            &[\"Foo\\nfield_a: u32\"],\n         );\n \n         // Hovering over the field in the definition\n@@ -362,7 +408,7 @@ mod tests {\n                 };\n             }\n         \"#,\n-            &[\"field_a: u32\"],\n+            &[\"Foo\\nfield_a: u32\"],\n         );\n     }\n \n@@ -415,7 +461,7 @@ fn main() {\n             \",\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"Some\"));\n+        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"Option\\nSome\"));\n \n         let (analysis, position) = single_file_with_position(\n             \"\n@@ -442,6 +488,7 @@ fn main() {\n             }\n         \"#,\n             &[\"\n+Option\n None\n ```\n \n@@ -462,6 +509,7 @@ The None variant\n             }\n         \"#,\n             &[\"\n+Option\n Some\n ```\n \n@@ -815,4 +863,25 @@ fn func(foo: i32) { if true { <|>foo; }; }\n             &[\"fn foo()\\n```\\n\\n<- `\\u{3000}` here\"],\n         );\n     }\n+\n+    #[test]\n+    fn zzz() {\n+        check_hover_result(\n+            \"\n+            //- /main.rs\n+            mod vvv {\n+                pub struct Test;\n+\n+                impl Test {\n+                    pub fn whatever() {}\n+                }\n+            }\n+\n+            fn main() {\n+                vvv::Test::what<|>ever();\n+            }\n+            \",\n+            &[\"vvv::Test\\npub fn whatever()\"],\n+        );\n+    }\n }"}, {"sha": "efa472c7d1d905bdd8feed53a72b443932c11966", "filename": "crates/ra_ide_db/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32f5276465266522ebc01b8417feeba99bf00f6f/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f5276465266522ebc01b8417feeba99bf00f6f/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Flib.rs?ref=32f5276465266522ebc01b8417feeba99bf00f6f", "patch": "@@ -104,6 +104,10 @@ impl RootDatabase {\n         db.query_mut(hir::db::MacroExpandQuery).set_lru_capacity(lru_capacity);\n         db\n     }\n+\n+    pub fn get_crate_original_name(&self, crate_id: &CrateId) -> Option<String> {\n+        self.debug_data.crate_names.get(crate_id).cloned()\n+    }\n }\n \n impl salsa::ParallelDatabase for RootDatabase {"}]}