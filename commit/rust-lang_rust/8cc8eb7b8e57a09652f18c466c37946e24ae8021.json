{"sha": "8cc8eb7b8e57a09652f18c466c37946e24ae8021", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjYzhlYjdiOGU1N2EwOTY1MmYxOGM0NjZjMzc5NDZlMjRhZTgwMjE=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-02-14T23:42:35Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-02-15T05:23:37Z"}, "message": "Add c_str::CString.as_bytes_no_nul()", "tree": {"sha": "8104e0baed41d769f4de52ade25ac6ef302b8583", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8104e0baed41d769f4de52ade25ac6ef302b8583"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cc8eb7b8e57a09652f18c466c37946e24ae8021", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cc8eb7b8e57a09652f18c466c37946e24ae8021", "html_url": "https://github.com/rust-lang/rust/commit/8cc8eb7b8e57a09652f18c466c37946e24ae8021", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cc8eb7b8e57a09652f18c466c37946e24ae8021/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "994747022a45b5c2b03f38dddbe8b43bf09679f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/994747022a45b5c2b03f38dddbe8b43bf09679f3", "html_url": "https://github.com/rust-lang/rust/commit/994747022a45b5c2b03f38dddbe8b43bf09679f3"}], "stats": {"total": 44, "additions": 38, "deletions": 6}, "files": [{"sha": "adbd4be316c8b78419834f1b38a4e2b2b86fa1be", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/8cc8eb7b8e57a09652f18c466c37946e24ae8021/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cc8eb7b8e57a09652f18c466c37946e24ae8021/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=8cc8eb7b8e57a09652f18c466c37946e24ae8021", "patch": "@@ -79,6 +79,7 @@ use str;\n use vec::{ImmutableVector, MutableVector};\n use vec;\n use rt::global_heap::malloc_raw;\n+use unstable::raw::Slice;\n \n /// The representation of a C String.\n ///\n@@ -169,6 +170,7 @@ impl CString {\n     }\n \n     /// Converts the CString into a `&[u8]` without copying.\n+    /// Includes the terminating NUL byte.\n     ///\n     /// # Failure\n     ///\n@@ -177,7 +179,21 @@ impl CString {\n     pub fn as_bytes<'a>(&'a self) -> &'a [u8] {\n         if self.buf.is_null() { fail!(\"CString is null!\"); }\n         unsafe {\n-            cast::transmute((self.buf, self.len() + 1))\n+            cast::transmute(Slice { data: self.buf, len: self.len() + 1 })\n+        }\n+    }\n+\n+    /// Converts the CString into a `&[u8]` without copying.\n+    /// Does not include the terminating NUL byte.\n+    ///\n+    /// # Failure\n+    ///\n+    /// Fails if the CString is null.\n+    #[inline]\n+    pub fn as_bytes_no_nul<'a>(&'a self) -> &'a [u8] {\n+        if self.buf.is_null() { fail!(\"CString is null!\"); }\n+        unsafe {\n+            cast::transmute(Slice { data: self.buf, len: self.len() })\n         }\n     }\n \n@@ -189,8 +205,7 @@ impl CString {\n     /// Fails if the CString is null.\n     #[inline]\n     pub fn as_str<'a>(&'a self) -> Option<&'a str> {\n-        let buf = self.as_bytes();\n-        let buf = buf.slice_to(buf.len()-1); // chop off the trailing NUL\n+        let buf = self.as_bytes_no_nul();\n         str::from_utf8(buf)\n     }\n \n@@ -417,7 +432,7 @@ mod tests {\n             let expected = [\"zero\", \"one\"];\n             let mut it = expected.iter();\n             let result = from_c_multistring(ptr as *libc::c_char, None, |c| {\n-                let cbytes = c.as_bytes().slice_to(c.len());\n+                let cbytes = c.as_bytes_no_nul();\n                 assert_eq!(cbytes, it.next().unwrap().as_bytes());\n             });\n             assert_eq!(result, 2);\n@@ -552,13 +567,31 @@ mod tests {\n         assert_eq!(c_str.as_bytes(), bytes!(\"foo\", 0xff, 0));\n     }\n \n+    #[test]\n+    fn test_as_bytes_no_nul() {\n+        let c_str = \"hello\".to_c_str();\n+        assert_eq!(c_str.as_bytes_no_nul(), bytes!(\"hello\"));\n+        let c_str = \"\".to_c_str();\n+        let exp: &[u8] = [];\n+        assert_eq!(c_str.as_bytes_no_nul(), exp);\n+        let c_str = bytes!(\"foo\", 0xff).to_c_str();\n+        assert_eq!(c_str.as_bytes_no_nul(), bytes!(\"foo\", 0xff));\n+    }\n+\n     #[test]\n     #[should_fail]\n     fn test_as_bytes_fail() {\n         let c_str = unsafe { CString::new(ptr::null(), false) };\n         c_str.as_bytes();\n     }\n \n+    #[test]\n+    #[should_fail]\n+    fn test_as_bytes_no_nul_fail() {\n+        let c_str = unsafe { CString::new(ptr::null(), false) };\n+        c_str.as_bytes_no_nul();\n+    }\n+\n     #[test]\n     fn test_as_str() {\n         let c_str = \"hello\".to_c_str();"}, {"sha": "13496033fd0e539ddaec35b6cadba0dc5717aec4", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8cc8eb7b8e57a09652f18c466c37946e24ae8021/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cc8eb7b8e57a09652f18c466c37946e24ae8021/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=8cc8eb7b8e57a09652f18c466c37946e24ae8021", "patch": "@@ -578,8 +578,7 @@ impl BytesContainer for ~[u8] {\n impl BytesContainer for CString {\n     #[inline]\n     fn container_as_bytes<'a>(&'a self) -> &'a [u8] {\n-        let s = self.as_bytes();\n-        s.slice_to(s.len()-1)\n+        self.as_bytes_no_nul()\n     }\n }\n "}]}