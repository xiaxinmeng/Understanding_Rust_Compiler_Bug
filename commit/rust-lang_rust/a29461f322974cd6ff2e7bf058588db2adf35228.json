{"sha": "a29461f322974cd6ff2e7bf058588db2adf35228", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyOTQ2MWYzMjI5NzRjZDZmZjJlN2JmMDU4NTg4ZGIyYWRmMzUyMjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-07T22:48:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-07T22:48:16Z"}, "message": "Auto merge of #47171 - estebank:numeric-literal-suggestion, r=nikomatsakis\n\nProvide suggestion when trying to use method on numeric literal\n\nNew output:\n\n```\nerror[E0688]: can't call method `powi` on ambiguous numeric type `{float}`\n  --> $DIR/method-on-ambiguous-numeric-type.rs:12:17\n   |\n12 |     let x = 2.0.powi(2);\n   |                 ^^^^\nhelp: you must specify a concrete type for this numeric value, like `f32`\n   |\n12 |     let x = 2.0_f32.powi(2);\n   |             ^^^^^^^\n```\n\nPrevious output:\n\n```\nerror[E0599]: no method named `powi` found for type `{float}` in the current scope\n  --> src/main.rs:12:17\n   |\n12 |     let x = 2.0.powi(2);\n   |                 ^^^^\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope, perhaps add a `use` for it:\n   |\n11 | use core::num::Float;\n   |\n```\n\nFix #40985.", "tree": {"sha": "bcc9cf06aeb27646b551c59dd66520788aab4032", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcc9cf06aeb27646b551c59dd66520788aab4032"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a29461f322974cd6ff2e7bf058588db2adf35228", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a29461f322974cd6ff2e7bf058588db2adf35228", "html_url": "https://github.com/rust-lang/rust/commit/a29461f322974cd6ff2e7bf058588db2adf35228", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a29461f322974cd6ff2e7bf058588db2adf35228/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee220daca345302c3277befee2732b6b2a5a711c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee220daca345302c3277befee2732b6b2a5a711c", "html_url": "https://github.com/rust-lang/rust/commit/ee220daca345302c3277befee2732b6b2a5a711c"}, {"sha": "f7aed3eb27888af72703da15a6b93e51e020f5fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7aed3eb27888af72703da15a6b93e51e020f5fd", "html_url": "https://github.com/rust-lang/rust/commit/f7aed3eb27888af72703da15a6b93e51e020f5fd"}], "stats": {"total": 233, "additions": 199, "deletions": 34}, "files": [{"sha": "6bdb60a6a1239672bc39032f9c758a34f3d4d52d", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a29461f322974cd6ff2e7bf058588db2adf35228/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a29461f322974cd6ff2e7bf058588db2adf35228/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=a29461f322974cd6ff2e7bf058588db2adf35228", "patch": "@@ -241,7 +241,7 @@ pub struct LifetimeDef {\n }\n \n /// A \"Path\" is essentially Rust's notion of a name; for instance:\n-/// std::cmp::PartialEq  .  It's represented as a sequence of identifiers,\n+/// `std::cmp::PartialEq`. It's represented as a sequence of identifiers,\n /// along with a bunch of supporting information.\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash)]\n pub struct Path {"}, {"sha": "15e16e59dd27c3a964f14d8fe94134c6fdb526c1", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 80, "deletions": 15, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/a29461f322974cd6ff2e7bf058588db2adf35228/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a29461f322974cd6ff2e7bf058588db2adf35228/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=a29461f322974cd6ff2e7bf058588db2adf35228", "patch": "@@ -195,15 +195,76 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     }\n                 };\n                 let mut err = if !actual.references_error() {\n-                    struct_span_err!(\n-                        tcx.sess,\n-                        span,\n-                        E0599,\n-                        \"no {} named `{}` found for type `{}` in the current scope\",\n-                        type_str,\n-                        item_name,\n-                        ty_string\n-                    )\n+                    // Suggest clamping down the type if the method that is being attempted to\n+                    // be used exists at all, and the type is an ambiuous numeric type\n+                    // ({integer}/{float}).\n+                    let mut candidates = all_traits(self.tcx)\n+                        .filter(|info| {\n+                            self.associated_item(info.def_id, item_name, Namespace::Value).is_some()\n+                        });\n+                    if let (true, false, Some(expr), Some(_)) = (actual.is_numeric(),\n+                                                                 actual.has_concrete_skeleton(),\n+                                                                 rcvr_expr,\n+                                                                 candidates.next()) {\n+                        let mut err = struct_span_err!(\n+                            tcx.sess,\n+                            span,\n+                            E0689,\n+                            \"can't call {} `{}` on ambiguous numeric type `{}`\",\n+                            type_str,\n+                            item_name,\n+                            ty_string\n+                        );\n+                        let concrete_type = if actual.is_integral() {\n+                            \"i32\"\n+                        } else {\n+                            \"f32\"\n+                        };\n+                        match expr.node {\n+                            hir::ExprLit(_) => {  // numeric literal\n+                                let snippet = tcx.sess.codemap().span_to_snippet(expr.span)\n+                                    .unwrap_or(\"<numeric literal>\".to_string());\n+                                // FIXME: use the literal for missing snippet\n+\n+                                err.span_suggestion(expr.span,\n+                                                    &format!(\"you must specify a concrete type for \\\n+                                                              this numeric value, like `{}`\",\n+                                                             concrete_type),\n+                                                    format!(\"{}_{}\",\n+                                                            snippet,\n+                                                            concrete_type));\n+                            }\n+                            hir::ExprPath(ref qpath) => {  // local binding\n+                                if let &hir::QPath::Resolved(_, ref path) = &qpath {\n+                                    if let hir::def::Def::Local(node_id) = path.def {\n+                                        let span = tcx.hir.span(node_id);\n+                                        let snippet = tcx.sess.codemap().span_to_snippet(span)\n+                                            .unwrap();\n+                                        err.span_suggestion(span,\n+                                                            &format!(\"you must specify a type for \\\n+                                                                      this binding, like `{}`\",\n+                                                                     concrete_type),\n+                                                            format!(\"{}: {}\",\n+                                                                    snippet,\n+                                                                    concrete_type));\n+                                    }\n+                                }\n+                            }\n+                            _ => {}\n+                        }\n+                        err.emit();\n+                        return;\n+                    } else {\n+                        struct_span_err!(\n+                            tcx.sess,\n+                            span,\n+                            E0599,\n+                            \"no {} named `{}` found for type `{}` in the current scope\",\n+                            type_str,\n+                            item_name,\n+                            ty_string\n+                        )\n+                    }\n                 } else {\n                     tcx.sess.diagnostic().struct_dummy()\n                 };\n@@ -305,12 +366,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                       bound_list));\n                 }\n \n-                self.suggest_traits_to_import(&mut err,\n-                                              span,\n-                                              rcvr_ty,\n-                                              item_name,\n-                                              rcvr_expr,\n-                                              out_of_scope_traits);\n+                if actual.is_numeric() && actual.is_fresh() {\n+\n+                } else {\n+                    self.suggest_traits_to_import(&mut err,\n+                                                  span,\n+                                                  rcvr_ty,\n+                                                  item_name,\n+                                                  rcvr_expr,\n+                                                  out_of_scope_traits);\n+                }\n \n                 if let Some(lev_candidate) = lev_candidate {\n                     err.help(&format!(\"did you mean `{}`?\", lev_candidate.name));"}, {"sha": "defcbdfe03d053633ef88df88585af1d1529db87", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a29461f322974cd6ff2e7bf058588db2adf35228/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a29461f322974cd6ff2e7bf058588db2adf35228/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=a29461f322974cd6ff2e7bf058588db2adf35228", "patch": "@@ -4641,6 +4641,32 @@ impl Foo for () {\n ```\n \"##,\n \n+E0689: r##\"\n+This error indicates that the numeric value for the method being passed exists\n+but the type of the numeric value or binding could not be identified.\n+\n+The error happens on numeric literals:\n+\n+```compile_fail,E0689\n+2.0.powi(2);\n+```\n+\n+and on numeric bindings without an identified concrete type:\n+\n+```compile_fail,E0689\n+let x = 2.0;\n+x.powi(2);  // same error as above\n+```\n+\n+Because of this, you must give the numeric literal or binding a type:\n+\n+```\n+let _ = 2.0_f32.powi(2);\n+let x: f32 = 2.0;\n+let _ = x.powi(2);\n+let _ = (2.0 as f32).powi(2);\n+```\n+\"##,\n }\n \n register_diagnostics! {"}, {"sha": "a4e92820e21e518fb377afb1809b3c62c476da44", "filename": "src/test/ui/issue-41652/issue_41652.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a29461f322974cd6ff2e7bf058588db2adf35228/src%2Ftest%2Fui%2Fissue-41652%2Fissue_41652.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a29461f322974cd6ff2e7bf058588db2adf35228/src%2Ftest%2Fui%2Fissue-41652%2Fissue_41652.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-41652%2Fissue_41652.rs?ref=a29461f322974cd6ff2e7bf058588db2adf35228", "patch": "@@ -17,7 +17,7 @@ struct S;\n impl issue_41652_b::Tr for S {\n     fn f() {\n         3.f()\n-        //~^ ERROR no method named `f` found for type `{integer}` in the current scope\n+        //~^ ERROR can't call method `f` on ambiguous numeric type `{integer}`\n     }\n }\n "}, {"sha": "373dff27f2e413694bc682684bcd0a07da5f33a1", "filename": "src/test/ui/issue-41652/issue_41652.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a29461f322974cd6ff2e7bf058588db2adf35228/src%2Ftest%2Fui%2Fissue-41652%2Fissue_41652.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a29461f322974cd6ff2e7bf058588db2adf35228/src%2Ftest%2Fui%2Fissue-41652%2Fissue_41652.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-41652%2Fissue_41652.stderr?ref=a29461f322974cd6ff2e7bf058588db2adf35228", "patch": "@@ -1,18 +1,12 @@\n-error[E0599]: no method named `f` found for type `{integer}` in the current scope\n+error[E0689]: can't call method `f` on ambiguous numeric type `{integer}`\n   --> $DIR/issue_41652.rs:19:11\n    |\n 19 |         3.f()\n    |           ^\n+help: you must specify a concrete type for this numeric value, like `i32`\n    |\n-   = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n-   = help: try with `{integer}::f`\n-note: candidate #1 is defined in the trait `issue_41652_b::Tr`\n-  --> $DIR/auxiliary/issue_41652_b.rs:14:5\n-   |\n-14 | /     fn f()\n-15 | |         where Self: Sized;\n-   | |__________________________^\n-   = help: to disambiguate the method call, write `issue_41652_b::Tr::f(3)` instead\n+19 |         3_i32.f()\n+   |         ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "58a30e86f222bd288b0f6ca5f0f73a8eadb11287", "filename": "src/test/ui/macros/macro-backtrace-invalid-internals.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a29461f322974cd6ff2e7bf058588db2adf35228/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a29461f322974cd6ff2e7bf058588db2adf35228/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.rs?ref=a29461f322974cd6ff2e7bf058588db2adf35228", "patch": "@@ -46,12 +46,26 @@ macro_rules! fake_anon_field_expr {\n      }\n }\n \n+macro_rules! real_method_stmt {\n+     () => {\n+          2.0.powi(2) //~ ERROR can't call method `powi` on ambiguous numeric type `{float}`\n+     }\n+}\n+\n+macro_rules! real_method_expr {\n+     () => {\n+          2.0.powi(2) //~ ERROR can't call method `powi` on ambiguous numeric type `{float}`\n+     }\n+}\n+\n fn main() {\n     fake_method_stmt!();\n     fake_field_stmt!();\n     fake_anon_field_stmt!();\n+    real_method_stmt!();\n \n     let _ = fake_method_expr!();\n     let _ = fake_field_expr!();\n     let _ = fake_anon_field_expr!();\n+    let _ = real_method_expr!();\n }"}, {"sha": "b9cad7e113dbf90aa10a4195dc0099a2a8182004", "filename": "src/test/ui/macros/macro-backtrace-invalid-internals.stderr", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a29461f322974cd6ff2e7bf058588db2adf35228/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a29461f322974cd6ff2e7bf058588db2adf35228/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr?ref=a29461f322974cd6ff2e7bf058588db2adf35228", "patch": "@@ -4,7 +4,7 @@ error[E0599]: no method named `fake` found for type `{integer}` in the current s\n 15 |           1.fake() //~ ERROR no method\n    |             ^^^^\n ...\n-50 |     fake_method_stmt!();\n+62 |     fake_method_stmt!();\n    |     -------------------- in this macro invocation\n \n error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n@@ -13,7 +13,7 @@ error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n 21 |           1.fake //~ ERROR doesn't have fields\n    |             ^^^^\n ...\n-51 |     fake_field_stmt!();\n+63 |     fake_field_stmt!();\n    |     ------------------- in this macro invocation\n \n error[E0609]: no field `0` on type `{integer}`\n@@ -22,16 +22,29 @@ error[E0609]: no field `0` on type `{integer}`\n 27 |           (1).0 //~ ERROR no field\n    |           ^^^^^\n ...\n-52 |     fake_anon_field_stmt!();\n+64 |     fake_anon_field_stmt!();\n    |     ------------------------ in this macro invocation\n \n+error[E0689]: can't call method `powi` on ambiguous numeric type `{float}`\n+  --> $DIR/macro-backtrace-invalid-internals.rs:51:15\n+   |\n+51 |           2.0.powi(2) //~ ERROR can't call method `powi` on ambiguous numeric type `{float}`\n+   |               ^^^^\n+...\n+65 |     real_method_stmt!();\n+   |     -------------------- in this macro invocation\n+help: you must specify a concrete type for this numeric value, like `f32`\n+   |\n+51 |           2.0_f32.powi(2) //~ ERROR can't call method `powi` on ambiguous numeric type `{float}`\n+   |           ^^^^^^^\n+\n error[E0599]: no method named `fake` found for type `{integer}` in the current scope\n   --> $DIR/macro-backtrace-invalid-internals.rs:33:13\n    |\n 33 |           1.fake() //~ ERROR no method\n    |             ^^^^\n ...\n-54 |     let _ = fake_method_expr!();\n+67 |     let _ = fake_method_expr!();\n    |             ------------------- in this macro invocation\n \n error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n@@ -40,7 +53,7 @@ error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n 39 |           1.fake //~ ERROR doesn't have fields\n    |             ^^^^\n ...\n-55 |     let _ = fake_field_expr!();\n+68 |     let _ = fake_field_expr!();\n    |             ------------------ in this macro invocation\n \n error[E0609]: no field `0` on type `{integer}`\n@@ -49,8 +62,21 @@ error[E0609]: no field `0` on type `{integer}`\n 45 |           (1).0 //~ ERROR no field\n    |           ^^^^^\n ...\n-56 |     let _ = fake_anon_field_expr!();\n+69 |     let _ = fake_anon_field_expr!();\n    |             ----------------------- in this macro invocation\n \n-error: aborting due to 6 previous errors\n+error[E0689]: can't call method `powi` on ambiguous numeric type `{float}`\n+  --> $DIR/macro-backtrace-invalid-internals.rs:57:15\n+   |\n+57 |           2.0.powi(2) //~ ERROR can't call method `powi` on ambiguous numeric type `{float}`\n+   |               ^^^^\n+...\n+70 |     let _ = real_method_expr!();\n+   |             ------------------- in this macro invocation\n+help: you must specify a concrete type for this numeric value, like `f32`\n+   |\n+57 |           2.0_f32.powi(2) //~ ERROR can't call method `powi` on ambiguous numeric type `{float}`\n+   |           ^^^^^^^\n+\n+error: aborting due to 8 previous errors\n "}, {"sha": "fa5bafab8717e82bb018d1fc718cda78ea01e051", "filename": "src/test/ui/suggestions/method-on-ambiguous-numeric-type.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a29461f322974cd6ff2e7bf058588db2adf35228/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-on-ambiguous-numeric-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a29461f322974cd6ff2e7bf058588db2adf35228/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-on-ambiguous-numeric-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-on-ambiguous-numeric-type.rs?ref=a29461f322974cd6ff2e7bf058588db2adf35228", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let x = 2.0.powi(2);\n+    //~^ ERROR can't call method `powi` on ambiguous numeric type `{float}`\n+    let y = 2.0;\n+    let x = y.powi(2);\n+    //~^ ERROR can't call method `powi` on ambiguous numeric type `{float}`\n+    println!(\"{:?}\", x);\n+}"}, {"sha": "c2b292c642caf4cacfe1ec9f67ca3015d107c891", "filename": "src/test/ui/suggestions/method-on-ambiguous-numeric-type.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a29461f322974cd6ff2e7bf058588db2adf35228/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-on-ambiguous-numeric-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a29461f322974cd6ff2e7bf058588db2adf35228/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-on-ambiguous-numeric-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-on-ambiguous-numeric-type.stderr?ref=a29461f322974cd6ff2e7bf058588db2adf35228", "patch": "@@ -0,0 +1,22 @@\n+error[E0689]: can't call method `powi` on ambiguous numeric type `{float}`\n+  --> $DIR/method-on-ambiguous-numeric-type.rs:12:17\n+   |\n+12 |     let x = 2.0.powi(2);\n+   |                 ^^^^\n+help: you must specify a concrete type for this numeric value, like `f32`\n+   |\n+12 |     let x = 2.0_f32.powi(2);\n+   |             ^^^^^^^\n+\n+error[E0689]: can't call method `powi` on ambiguous numeric type `{float}`\n+  --> $DIR/method-on-ambiguous-numeric-type.rs:15:15\n+   |\n+15 |     let x = y.powi(2);\n+   |               ^^^^\n+help: you must specify a type for this binding, like `f32`\n+   |\n+14 |     let y: f32 = 2.0;\n+   |         ^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}]}