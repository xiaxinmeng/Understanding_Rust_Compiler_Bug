{"sha": "eae425b10fd7803ae67d2d39e9aca902daa353ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhZTQyNWIxMGZkNzgwM2FlNjdkMmQzOWU5YWNhOTAyZGFhMzUzYmE=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-06T18:30:01Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-06T20:25:22Z"}, "message": "Implement format_args more properly", "tree": {"sha": "b55e2e44e834f8e2ac9d36db26ed16d87594eb1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b55e2e44e834f8e2ac9d36db26ed16d87594eb1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eae425b10fd7803ae67d2d39e9aca902daa353ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eae425b10fd7803ae67d2d39e9aca902daa353ba", "html_url": "https://github.com/rust-lang/rust/commit/eae425b10fd7803ae67d2d39e9aca902daa353ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eae425b10fd7803ae67d2d39e9aca902daa353ba/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a5aa03e66f1b46218f152f1e3e3db3bb1bd8077", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a5aa03e66f1b46218f152f1e3e3db3bb1bd8077", "html_url": "https://github.com/rust-lang/rust/commit/3a5aa03e66f1b46218f152f1e3e3db3bb1bd8077"}], "stats": {"total": 47, "additions": 43, "deletions": 4}, "files": [{"sha": "99303188bf23a5f8efe873082fd77e85bd8df09f", "filename": "crates/ra_hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 43, "deletions": 4, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/eae425b10fd7803ae67d2d39e9aca902daa353ba/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eae425b10fd7803ae67d2d39e9aca902daa353ba/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=eae425b10fd7803ae67d2d39e9aca902daa353ba", "patch": "@@ -207,12 +207,34 @@ fn compile_error_expand(\n fn format_args_expand(\n     _db: &dyn AstDatabase,\n     _id: MacroCallId,\n-    _tt: &tt::Subtree,\n+    tt: &tt::Subtree,\n ) -> Result<tt::Subtree, mbe::ExpandError> {\n-    // FIXME this is just a stub to make format macros type-check without mismatches\n-    // We should make this at least insert the arguments, so that go to def etc. work within format macros\n+    // We expand `format_args!(\"\", arg1, arg2)` to\n+    // `std::fmt::Arguments::new_v1(&[], &[&arg1, &arg2])`,\n+    // which is still not really correct, but close enough for now\n+    let mut args = Vec::new();\n+    let mut current = Vec::new();\n+    for tt in tt.token_trees.iter().cloned() {\n+        match tt {\n+            tt::TokenTree::Leaf(tt::Leaf::Punct(p)) if p.char == ',' => {\n+                args.push(tt::Subtree { delimiter: tt::Delimiter::None, token_trees: current });\n+                current = Vec::new();\n+            }\n+            _ => {\n+                current.push(tt);\n+            }\n+        }\n+    }\n+    if !current.is_empty() {\n+        args.push(tt::Subtree { delimiter: tt::Delimiter::None, token_trees: current });\n+    }\n+    if args.is_empty() {\n+        return Err(mbe::ExpandError::NoMatchingRule);\n+    }\n+    let _format_string = args.remove(0);\n+    let arg_tts = args.into_iter().flat_map(|arg| (quote! { & #arg , }).token_trees);\n     let expanded = quote! {\n-        std::fmt::Arguments::new_v1(&[], &[])\n+        std::fmt::Arguments::new_v1(&[], &[##arg_tts])\n     };\n     Ok(expanded)\n }\n@@ -324,4 +346,21 @@ mod tests {\n \n         assert_eq!(expanded, r#\"loop{\"error!\"}\"#);\n     }\n+\n+    #[test]\n+    fn test_format_args_expand() {\n+        let expanded = expand_builtin_macro(\n+            r#\"\n+        #[rustc_builtin_macro]\n+        macro_rules! format_args {\n+            ($fmt:expr) => ({ /* compiler built-in */ });\n+            ($fmt:expr, $($args:tt)*) => ({ /* compiler built-in */ })\n+        }\n+        format_args!(\"{} {:?}\", arg1(a, b, c), arg2);\n+\"#,\n+            BuiltinFnLikeExpander::FormatArgs,\n+        );\n+\n+        assert_eq!(expanded, r#\"std::fmt::Arguments::new_v1(&[] ,&[&arg1(a,b,c),&arg2,])\"#);\n+    }\n }"}]}