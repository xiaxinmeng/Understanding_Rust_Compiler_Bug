{"sha": "fab72301d9089761766b389df209986c2bc38e5d", "node_id": "C_kwDOAAsO6NoAKGZhYjcyMzAxZDkwODk3NjE3NjZiMzg5ZGYyMDk5ODZjMmJjMzhlNWQ", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-04-30T18:58:42Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-04-30T18:58:42Z"}, "message": "Remove config parameter of optimize_fat and avoid interior mutability for module", "tree": {"sha": "31539769a409546a5d822f09cd8183c40be22dda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31539769a409546a5d822f09cd8183c40be22dda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fab72301d9089761766b389df209986c2bc38e5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fab72301d9089761766b389df209986c2bc38e5d", "html_url": "https://github.com/rust-lang/rust/commit/fab72301d9089761766b389df209986c2bc38e5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fab72301d9089761766b389df209986c2bc38e5d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee94ff254aceccd27919f26c02541277a3ca7dd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee94ff254aceccd27919f26c02541277a3ca7dd7", "html_url": "https://github.com/rust-lang/rust/commit/ee94ff254aceccd27919f26c02541277a3ca7dd7"}], "stats": {"total": 28, "additions": 11, "deletions": 17}, "files": [{"sha": "684b845c38a2973402df7209dae00e61f9ceceb7", "filename": "compiler/rustc_codegen_gcc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fab72301d9089761766b389df209986c2bc38e5d/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab72301d9089761766b389df209986c2bc38e5d/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs?ref=fab72301d9089761766b389df209986c2bc38e5d", "patch": "@@ -229,7 +229,7 @@ impl WriteBackendMethods for GccCodegenBackend {\n         Ok(())\n     }\n \n-    fn optimize_fat(_cgcx: &CodegenContext<Self>, _module: &ModuleCodegen<Self::Module>, _config: &ModuleConfig) -> Result<(), FatalError> {\n+    fn optimize_fat(_cgcx: &CodegenContext<Self>, _module: &mut ModuleCodegen<Self::Module>) -> Result<(), FatalError> {\n         // TODO(antoyo)\n         Ok(())\n     }"}, {"sha": "b5b2a27d2378da7bd7271d263739726253aa7cc4", "filename": "compiler/rustc_codegen_llvm/src/back/lto.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fab72301d9089761766b389df209986c2bc38e5d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab72301d9089761766b389df209986c2bc38e5d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs?ref=fab72301d9089761766b389df209986c2bc38e5d", "patch": "@@ -6,9 +6,7 @@ use crate::llvm::{self, build_string, False, True};\n use crate::{llvm_util, LlvmCodegenBackend, ModuleLlvm};\n use rustc_codegen_ssa::back::lto::{LtoModuleCodegen, SerializedModule, ThinModule, ThinShared};\n use rustc_codegen_ssa::back::symbol_export;\n-use rustc_codegen_ssa::back::write::{\n-    CodegenContext, FatLTOInput, ModuleConfig, TargetMachineFactoryConfig,\n-};\n+use rustc_codegen_ssa::back::write::{CodegenContext, FatLTOInput, TargetMachineFactoryConfig};\n use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::{looks_like_rust_object_file, ModuleCodegen, ModuleKind};\n use rustc_data_structures::fx::FxHashMap;\n@@ -578,11 +576,11 @@ fn thin_lto(\n pub(crate) fn run_pass_manager(\n     cgcx: &CodegenContext<LlvmCodegenBackend>,\n     diag_handler: &Handler,\n-    module: &ModuleCodegen<ModuleLlvm>,\n-    config: &ModuleConfig,\n+    module: &mut ModuleCodegen<ModuleLlvm>,\n     thin: bool,\n ) -> Result<(), FatalError> {\n     let _timer = cgcx.prof.extra_verbose_generic_activity(\"LLVM_lto_optimize\", &*module.name);\n+    let config = cgcx.config(module.kind);\n \n     // Now we have one massive module inside of llmod. Time to run the\n     // LTO-specific optimization passes that LLVM provides.\n@@ -743,7 +741,7 @@ pub unsafe fn optimize_thin_module(\n     // that LLVM Context and Module.\n     let llcx = llvm::LLVMRustContextCreate(cgcx.fewer_names);\n     let llmod_raw = parse_module(llcx, module_name, thin_module.data(), &diag_handler)? as *const _;\n-    let module = ModuleCodegen {\n+    let mut module = ModuleCodegen {\n         module_llvm: ModuleLlvm { llmod_raw, llcx, tm },\n         name: thin_module.name().to_string(),\n         kind: ModuleKind::Regular,\n@@ -859,8 +857,7 @@ pub unsafe fn optimize_thin_module(\n         // little differently.\n         {\n             info!(\"running thin lto passes over {}\", module.name);\n-            let config = cgcx.config(module.kind);\n-            run_pass_manager(cgcx, &diag_handler, &module, config, true)?;\n+            run_pass_manager(cgcx, &diag_handler, &mut module, true)?;\n             save_temp_bitcode(cgcx, &module, \"thin-lto-after-pm\");\n         }\n     }"}, {"sha": "b48c738124d04cf33d782d611de7f139ade9c9bf", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fab72301d9089761766b389df209986c2bc38e5d/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab72301d9089761766b389df209986c2bc38e5d/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=fab72301d9089761766b389df209986c2bc38e5d", "patch": "@@ -212,11 +212,10 @@ impl WriteBackendMethods for LlvmCodegenBackend {\n     }\n     fn optimize_fat(\n         cgcx: &CodegenContext<Self>,\n-        module: &ModuleCodegen<Self::Module>,\n-        config: &ModuleConfig,\n+        module: &mut ModuleCodegen<Self::Module>,\n     ) -> Result<(), FatalError> {\n         let diag_handler = cgcx.create_diag_handler();\n-        back::lto::run_pass_manager(cgcx, &diag_handler, module, config, false)\n+        back::lto::run_pass_manager(cgcx, &diag_handler, module, false)\n     }\n     unsafe fn optimize_thin(\n         cgcx: &CodegenContext<Self>,"}, {"sha": "3c5b0e5cc43bad8734e560c3fb87099d196698ae", "filename": "compiler/rustc_codegen_ssa/src/back/lto.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fab72301d9089761766b389df209986c2bc38e5d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab72301d9089761766b389df209986c2bc38e5d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flto.rs?ref=fab72301d9089761766b389df209986c2bc38e5d", "patch": "@@ -68,10 +68,9 @@ impl<B: WriteBackendMethods> LtoModuleCodegen<B> {\n         cgcx: &CodegenContext<B>,\n     ) -> Result<ModuleCodegen<B::Module>, FatalError> {\n         match self {\n-            LtoModuleCodegen::Fat { module, .. } => {\n+            LtoModuleCodegen::Fat { mut module, .. } => {\n                 {\n-                    let config = cgcx.config(module.kind);\n-                    B::optimize_fat(cgcx, &module, config)?;\n+                    B::optimize_fat(cgcx, &mut module)?;\n                 }\n                 Ok(module)\n             }"}, {"sha": "e54ec34f1ce3716c38aec565c47951a3444c0244", "filename": "compiler/rustc_codegen_ssa/src/traits/write.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fab72301d9089761766b389df209986c2bc38e5d/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab72301d9089761766b389df209986c2bc38e5d/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fwrite.rs?ref=fab72301d9089761766b389df209986c2bc38e5d", "patch": "@@ -43,8 +43,7 @@ pub trait WriteBackendMethods: 'static + Sized + Clone {\n     ) -> Result<(), FatalError>;\n     fn optimize_fat(\n         cgcx: &CodegenContext<Self>,\n-        llmod: &ModuleCodegen<Self::Module>,\n-        config: &ModuleConfig,\n+        llmod: &mut ModuleCodegen<Self::Module>,\n     ) -> Result<(), FatalError>;\n     unsafe fn optimize_thin(\n         cgcx: &CodegenContext<Self>,"}]}