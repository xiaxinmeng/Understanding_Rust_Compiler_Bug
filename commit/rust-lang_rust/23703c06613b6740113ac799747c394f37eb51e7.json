{"sha": "23703c06613b6740113ac799747c394f37eb51e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzNzAzYzA2NjEzYjY3NDAxMTNhYzc5OTc0N2MzOTRmMzdlYjUxZTc=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-02-17T03:16:08Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-02-17T03:16:08Z"}, "message": "core: add str::find_from.", "tree": {"sha": "5fc2845e8c5954def931a04dfe417f8be14d8a3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fc2845e8c5954def931a04dfe417f8be14d8a3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23703c06613b6740113ac799747c394f37eb51e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23703c06613b6740113ac799747c394f37eb51e7", "html_url": "https://github.com/rust-lang/rust/commit/23703c06613b6740113ac799747c394f37eb51e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23703c06613b6740113ac799747c394f37eb51e7/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "042a5222d1f324a60b61bbc58f3938770d3e0cd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/042a5222d1f324a60b61bbc58f3938770d3e0cd0", "html_url": "https://github.com/rust-lang/rust/commit/042a5222d1f324a60b61bbc58f3938770d3e0cd0"}], "stats": {"total": 53, "additions": 46, "deletions": 7}, "files": [{"sha": "e1c99a48fa1038e58c5f4ef91f58224e47004a2d", "filename": "src/libcore/str.rs", "status": "modified", "additions": 46, "deletions": 7, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/23703c06613b6740113ac799747c394f37eb51e7/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23703c06613b6740113ac799747c394f37eb51e7/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=23703c06613b6740113ac799747c394f37eb51e7", "patch": "@@ -75,6 +75,7 @@ export\n    rindex,\n    find,\n    find_bytes,\n+   find_from_bytes,\n    contains,\n    starts_with,\n    ends_with,\n@@ -901,23 +902,33 @@ fn rindex(ss: str, cc: char) -> option<uint> {\n //\n // Find the char position of the first instance of one string\n // within another, or return option::none\n+fn find_bytes(haystack: str, needle: str) -> option<uint> {\n+    find_from_bytes(haystack, needle, 0u, len_bytes(haystack))\n+}\n+\n+//Function: find_from_bytes\n+//\n+// Find the char position of the first instance of one string\n+// within another, or return option::none\n //\n // FIXME: Boyer-Moore should be significantly faster\n-fn find_bytes(haystack: str, needle: str) -> option<uint> {\n-    let haystack_len = len_bytes(haystack);\n-    let needle_len   = len_bytes(needle);\n+fn find_from_bytes(haystack: str, needle: str, start: uint, end:uint)\n+  -> option<uint> {\n+    assert end <= len_bytes(haystack);\n+\n+    let needle_len = len_bytes(needle);\n \n-    if needle_len == 0u { ret some(0u); }\n-    if needle_len > haystack_len { ret none; }\n+    if needle_len == 0u { ret some(start); }\n+    if needle_len > end { ret none; }\n \n     fn match_at(haystack: str, needle: str, ii: uint) -> bool {\n         let jj = ii;\n         for c: u8 in needle { if haystack[jj] != c { ret false; } jj += 1u; }\n         ret true;\n     }\n \n-    let ii = 0u;\n-    while ii <= haystack_len - needle_len {\n+    let ii = start;\n+    while ii <= end - needle_len {\n         if match_at(haystack, needle, ii) { ret some(ii); }\n         ii += 1u;\n     }\n@@ -1757,6 +1768,34 @@ mod tests {\n         assert (find_bytes(data, \"\u0e44\u0e17\u534e\") == none);\n     }\n \n+    #[test]\n+    fn test_find_from_bytes() {\n+        // byte positions\n+        assert (find_from_bytes(\"\", \"\", 0u, 0u) == some(0u));\n+\n+        let data = \"abcabc\";\n+        assert find_from_bytes(data, \"ab\", 0u, 6u) == some(0u);\n+        assert find_from_bytes(data, \"ab\", 2u, 6u) == some(3u);\n+        assert find_from_bytes(data, \"ab\", 2u, 4u) == none;\n+\n+        let data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n+        data += data;\n+        assert find_from_bytes(data, \"\", 0u, 43u) == some(0u);\n+        assert find_from_bytes(data, \"\", 6u, 43u) == some(6u);\n+\n+        assert find_from_bytes(data, \"\u0e1b\u0e23\u0e30\", 0u, 43u) == some( 0u);\n+        assert find_from_bytes(data, \"\u0e17\u0e28\u0e44\", 0u, 43u) == some(12u);\n+        assert find_from_bytes(data, \"\u0e22\u4e2d\", 0u, 43u) == some(24u);\n+        assert find_from_bytes(data, \"i\u1ec7t\", 0u, 43u) == some(34u);\n+        assert find_from_bytes(data, \"Nam\", 0u, 43u) == some(40u);\n+\n+        assert find_from_bytes(data, \"\u0e1b\u0e23\u0e30\", 43u, 86u) == some(43u);\n+        assert find_from_bytes(data, \"\u0e17\u0e28\u0e44\", 43u, 86u) == some(55u);\n+        assert find_from_bytes(data, \"\u0e22\u4e2d\", 43u, 86u) == some(67u);\n+        assert find_from_bytes(data, \"i\u1ec7t\", 43u, 86u) == some(77u);\n+        assert find_from_bytes(data, \"Nam\", 43u, 86u) == some(83u);\n+    }\n+\n     #[test]\n     fn test_find() {\n         // char positions"}]}