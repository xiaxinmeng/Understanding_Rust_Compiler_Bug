{"sha": "1ee5829575e73f217674f0a4e271c2e4246546e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlZTU4Mjk1NzVlNzNmMjE3Njc0ZjBhNGUyNzFjMmU0MjQ2NTQ2ZTE=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-02-15T12:13:20Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-03-17T09:07:56Z"}, "message": "Update tests for erasing regions in typeck", "tree": {"sha": "5594ee995295a217ce5f41ff0bdc0174cf2a452c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5594ee995295a217ce5f41ff0bdc0174cf2a452c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ee5829575e73f217674f0a4e271c2e4246546e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ee5829575e73f217674f0a4e271c2e4246546e1", "html_url": "https://github.com/rust-lang/rust/commit/1ee5829575e73f217674f0a4e271c2e4246546e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ee5829575e73f217674f0a4e271c2e4246546e1/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a7f16e7d851f99816114cbc830c662d55376fbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a7f16e7d851f99816114cbc830c662d55376fbd", "html_url": "https://github.com/rust-lang/rust/commit/0a7f16e7d851f99816114cbc830c662d55376fbd"}], "stats": {"total": 199, "additions": 110, "deletions": 89}, "files": [{"sha": "8edece2c8d361402f4d878f981b64e0e3992ac4b", "filename": "src/test/incremental/hashes/closure_expressions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs?ref=1ee5829575e73f217674f0a4e271c2e4246546e1", "patch": "@@ -84,8 +84,8 @@ pub fn add_type_ascription_to_parameter() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, typeck_tables_of\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner_items, typeck_tables_of\")]\n+#[rustc_clean(cfg = \"cfail3\")]\n pub fn add_type_ascription_to_parameter() {\n     let closure = |x: u32| x + 1u32;\n     let _: u32 = closure(1);"}, {"sha": "139c265164bc57d71760e6efd349b4d019c91cca", "filename": "src/test/incremental/hashes/inherent_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs?ref=1ee5829575e73f217674f0a4e271c2e4246546e1", "patch": "@@ -360,7 +360,7 @@ impl Foo {\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"hir_owner,hir_owner_items,generics_of,predicates_of,type_of,typeck_tables_of\"\n+        except=\"hir_owner,hir_owner_items,generics_of,predicates_of,type_of\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn add_lifetime_bound_to_lifetime_param_of_method<'a, 'b: 'a>(&self) { }"}, {"sha": "89aa0b1a58baa9eaa315010aeec03b04ead7555b", "filename": "src/test/incremental/hashes/unary_and_binary_exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs?ref=1ee5829575e73f217674f0a4e271c2e4246546e1", "patch": "@@ -81,7 +81,7 @@ pub fn var_deref(x: &i32, y: &i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built,typeck_tables_of\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn var_deref(x: &i32, y: &i32) -> i32 {\n     *y"}, {"sha": "c858a4c5ee7c6cecce7253ae2b0de020c96606b7", "filename": "src/test/mir-opt/const-promotion-extern-static.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static.rs?ref=1ee5829575e73f217674f0a4e271c2e4246546e1", "patch": "@@ -4,9 +4,9 @@ extern \"C\" {\n \n static Y: i32 = 42;\n \n-static mut BAR: *const &'static i32 = [&Y].as_ptr();\n+static mut BAR: *const &i32 = [&Y].as_ptr();\n \n-static mut FOO: *const &'static i32 = [unsafe { &X }].as_ptr();\n+static mut FOO: *const &i32 = [unsafe { &X }].as_ptr();\n \n fn main() {}\n \n@@ -18,8 +18,8 @@ fn main() {}\n //     _4 = &(*_5);\n //     _3 = [move _4];\n //     _2 = &_3;\n-//     _1 = move _2 as &[&'static i32] (Pointer(Unsize));\n-//     _0 = const core::slice::<impl [&'static i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1];\n+//     _1 = move _2 as &[&i32] (Pointer(Unsize));\n+//     _0 = const core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1];\n // }\n // ...\n // bb2: {\n@@ -35,8 +35,8 @@ fn main() {}\n //     _4 = &(*_5);\n //     _3 = [move _4];\n //     _2 = &_3;\n-//     _1 = move _2 as &[&'static i32] (Pointer(Unsize));\n-//     _0 = const core::slice::<impl [&'static i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1];\n+//     _1 = move _2 as &[&i32] (Pointer(Unsize));\n+//     _0 = const core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1];\n // }\n // ...\n // bb2: {\n@@ -50,8 +50,8 @@ fn main() {}\n // ...\n //     _6 = const BAR::promoted[0];\n //     _2 = &(*_6);\n-//     _1 = move _2 as &[&'static i32] (Pointer(Unsize));\n-//     _0 = const core::slice::<impl [&'static i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1];\n+//     _1 = move _2 as &[&i32] (Pointer(Unsize));\n+//     _0 = const core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1];\n // }\n // ...\n // bb2: {\n@@ -63,8 +63,8 @@ fn main() {}\n // ...\n //     _6 = const FOO::promoted[0];\n //     _2 = &(*_6);\n-//     _1 = move _2 as &[&'static i32] (Pointer(Unsize));\n-//     _0 = const core::slice::<impl [&'static i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1];\n+//     _1 = move _2 as &[&i32] (Pointer(Unsize));\n+//     _0 = const core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1];\n // }\n // ...\n // bb2: {"}, {"sha": "74a606af28fc1cb222c25c1a7c888d790ec13aca", "filename": "src/test/mir-opt/no-drop-for-inactive-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fmir-opt%2Fno-drop-for-inactive-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fmir-opt%2Fno-drop-for-inactive-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno-drop-for-inactive-variant.rs?ref=1ee5829575e73f217674f0a4e271c2e4246546e1", "patch": "@@ -27,7 +27,7 @@ fn main() {\n //     }\n //     bb2: {\n //         ...\n-//         const std::rt::begin_panic::<&'static str>(const \"explicit panic\") -> bb5;\n+//         const std::rt::begin_panic::<&str>(const \"explicit panic\") -> bb5;\n //     }\n //     bb3: {\n //         unreachable;"}, {"sha": "ea106eaf595292d0d5b28baa180bbe207cfd777e", "filename": "src/test/mir-opt/remove_fake_borrows.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs?ref=1ee5829575e73f217674f0a4e271c2e4246546e1", "patch": "@@ -26,16 +26,16 @@ fn main() {\n //     goto -> bb7;\n // }\n // bb2: {\n-//     switchInt((*(*((_1 as Some).0: &'<empty> &'<empty> i32)))) -> [0i32: bb3, otherwise: bb1];\n+//     switchInt((*(*((_1 as Some).0: &&i32)))) -> [0i32: bb3, otherwise: bb1];\n // }\n // bb3: {\n //     goto -> bb4;\n // }\n // bb4: {\n //     _4 = &shallow _1;\n-//     _5 = &shallow ((_1 as Some).0: &'<empty> &'<empty> i32);\n-//     _6 = &shallow (*((_1 as Some).0: &'<empty> &'<empty> i32));\n-//     _7 = &shallow (*(*((_1 as Some).0: &'<empty> &'<empty> i32)));\n+//     _5 = &shallow ((_1 as Some).0: &&i32);\n+//     _6 = &shallow (*((_1 as Some).0: &&i32));\n+//     _7 = &shallow (*(*((_1 as Some).0: &&i32)));\n //     StorageLive(_8);\n //     _8 = _2;\n //     switchInt(move _8) -> [false: bb6, otherwise: bb5];\n@@ -72,7 +72,7 @@ fn main() {\n //     goto -> bb7;\n // }\n // bb2: {\n-//     switchInt((*(*((_1 as Some).0: &'<empty> &'<empty> i32)))) -> [0i32: bb3, otherwise: bb1];\n+//     switchInt((*(*((_1 as Some).0: &&i32)))) -> [0i32: bb3, otherwise: bb1];\n // }\n // bb3: {\n //     goto -> bb4;"}, {"sha": "1c98766b9685c254a4d6f71fe1359c3430e3d574", "filename": "src/test/mir-opt/storage_live_dead_in_statics.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.rs?ref=1ee5829575e73f217674f0a4e271c2e4246546e1", "patch": "@@ -35,12 +35,12 @@ fn main() {\n \n // END RUST SOURCE\n // START rustc.XXX.mir_map.0.mir\n-//    let mut _0: &'static Foo;\n-//    let _1: &'static Foo;\n+//    let mut _0: &Foo;\n+//    let _1: &Foo;\n //    let _2: Foo;\n-//    let mut _3: &'static [(u32, u32)];\n-//    let mut _4: &'static [(u32, u32); 42];\n-//    let _5: &'static [(u32, u32); 42];\n+//    let mut _3: &[(u32, u32)];\n+//    let mut _4: &[(u32, u32); 42];\n+//    let _5: &[(u32, u32); 42];\n //    let _6: [(u32, u32); 42];\n //    let mut _7: (u32, u32);\n //    let mut _8: (u32, u32);\n@@ -178,7 +178,7 @@ fn main() {\n //        _6 = [move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17, move _18, move _19, move _20, move _21, move _22, move _23, move _24, move _25, move _26, move _27, move _28, move _29, move _30, move _31, move _32, move _33, move _34, move _35, move _36, move _37, move _38, move _39, move _40, move _41, move _42, move _43, move _44, move _45, move _46, move _47, move _48];\n //        _5 = &_6;\n //        _4 = &(*_5);\n-//        _3 = move _4 as &'static [(u32, u32)] (Pointer(Unsize));\n+//        _3 = move _4 as &[(u32, u32)] (Pointer(Unsize));\n //        _2 = Foo { tup: const \"hi\", data: move _3 };\n //        _1 = &_2;\n //        _0 = &(*_1);"}, {"sha": "ee7586bae820af702cea233269c9cf9e9cdc65de", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=1ee5829575e73f217674f0a4e271c2e4246546e1", "patch": "@@ -34,29 +34,29 @@\n                            ((::alloc::fmt::format as\n                                 for<'r> fn(std::fmt::Arguments<'r>) -> std::string::String {std::fmt::format})(((::core::fmt::Arguments::new_v1\n                                                                                                                     as\n-                                                                                                                    fn(&[&str], &[std::fmt::ArgumentV1<'_>]) -> std::fmt::Arguments<'_> {std::fmt::Arguments::<'_>::new_v1})((&([(\"test\"\n-                                                                                                                                                                                                                                     as\n-                                                                                                                                                                                                                                     &'static str)]\n-                                                                                                                                                                                                                                   as\n-                                                                                                                                                                                                                                   [&str; 1])\n-                                                                                                                                                                                                                                 as\n-                                                                                                                                                                                                                                 &[&str; 1]),\n-                                                                                                                                                                                                                             (&(match (()\n-                                                                                                                                                                                                                                          as\n-                                                                                                                                                                                                                                          ())\n-                                                                                                                                                                                                                                    {\n-                                                                                                                                                                                                                                    ()\n-                                                                                                                                                                                                                                    =>\n-                                                                                                                                                                                                                                    ([]\n-                                                                                                                                                                                                                                        as\n-                                                                                                                                                                                                                                        [std::fmt::ArgumentV1<'_>; 0]),\n-                                                                                                                                                                                                                                }\n-                                                                                                                                                                                                                                   as\n-                                                                                                                                                                                                                                   [std::fmt::ArgumentV1<'_>; 0])\n-                                                                                                                                                                                                                                 as\n-                                                                                                                                                                                                                                 &[std::fmt::ArgumentV1<'_>; 0]))\n+                                                                                                                    fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1})((&([(\"test\"\n+                                                                                                                                                                                                                       as\n+                                                                                                                                                                                                                       &str)]\n+                                                                                                                                                                                                                     as\n+                                                                                                                                                                                                                     [&str; 1])\n+                                                                                                                                                                                                                   as\n+                                                                                                                                                                                                                   &[&str; 1]),\n+                                                                                                                                                                                                               (&(match (()\n+                                                                                                                                                                                                                            as\n+                                                                                                                                                                                                                            ())\n+                                                                                                                                                                                                                      {\n+                                                                                                                                                                                                                      ()\n+                                                                                                                                                                                                                      =>\n+                                                                                                                                                                                                                      ([]\n+                                                                                                                                                                                                                          as\n+                                                                                                                                                                                                                          [std::fmt::ArgumentV1; 0]),\n+                                                                                                                                                                                                                  }\n+                                                                                                                                                                                                                     as\n+                                                                                                                                                                                                                     [std::fmt::ArgumentV1; 0])\n+                                                                                                                                                                                                                   as\n+                                                                                                                                                                                                                   &[std::fmt::ArgumentV1; 0]))\n                                                                                                                    as\n-                                                                                                                   std::fmt::Arguments<'_>))\n+                                                                                                                   std::fmt::Arguments))\n                                as std::string::String);\n                        (res as std::string::String)\n                    } as std::string::String);"}, {"sha": "5a4777145962584d625b2f0067e8511e92630b9a", "filename": "src/test/ui/consts/transmute-size-mismatch-before-typeck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.stderr?ref=1ee5829575e73f217674f0a4e271c2e4246546e1", "patch": "@@ -21,7 +21,7 @@ LL | const ZST: &[u8] = unsafe { std::mem::transmute(1usize) };\n    |                             ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: source type: `usize` (word size)\n-   = note: target type: `&'static [u8]` (2 * word size)\n+   = note: target type: `&[u8]` (2 * word size)\n \n error: could not evaluate constant pattern\n   --> $DIR/transmute-size-mismatch-before-typeck.rs:10:9"}, {"sha": "ad854837ae5bd678985e7f483a2fd97019929755", "filename": "src/test/ui/error-codes/E0121.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fui%2Ferror-codes%2FE0121.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fui%2Ferror-codes%2FE0121.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0121.stderr?ref=1ee5829575e73f217674f0a4e271c2e4246546e1", "patch": "@@ -14,7 +14,7 @@ LL | static BAR: _ = \"test\";\n    |             ^\n    |             |\n    |             not allowed in type signatures\n-   |             help: replace `_` with the correct type: `&'static str`\n+   |             help: replace `_` with the correct type: `&str`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "09402c3d814101610a67760d90df1148e9abe146", "filename": "src/test/ui/issues/issue-21174.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fui%2Fissues%2Fissue-21174.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fui%2Fissues%2Fissue-21174.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21174.stderr?ref=1ee5829575e73f217674f0a4e271c2e4246546e1", "patch": "@@ -4,8 +4,8 @@ error[E0512]: cannot transmute between types of different sizes, or dependently-\n LL |     let new: T::B = unsafe { std::mem::transmute(value) };\n    |                              ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: source type: `<T as Trait<'a>>::A` (size can vary because of <T as Trait>::A)\n-   = note: target type: `<T as Trait<'a>>::B` (size can vary because of <T as Trait>::B)\n+   = note: source type: `<T as Trait>::A` (this type does not have a fixed size)\n+   = note: target type: `<T as Trait>::B` (this type does not have a fixed size)\n \n error: aborting due to previous error\n "}, {"sha": "bf0562713a497f1667792a8a37d2e2a7c512f7cf", "filename": "src/test/ui/lint/uninitialized-zeroed.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr?ref=1ee5829575e73f217674f0a4e271c2e4246546e1", "patch": "@@ -1,4 +1,4 @@\n-error: the type `&'static T` does not permit zero-initialization\n+error: the type `&T` does not permit zero-initialization\n   --> $DIR/uninitialized-zeroed.rs:29:32\n    |\n LL |         let _val: &'static T = mem::zeroed();\n@@ -14,7 +14,7 @@ LL | #![deny(invalid_value)]\n    |         ^^^^^^^^^^^^^\n    = note: references must be non-null\n \n-error: the type `&'static T` does not permit being left uninitialized\n+error: the type `&T` does not permit being left uninitialized\n   --> $DIR/uninitialized-zeroed.rs:30:32\n    |\n LL |         let _val: &'static T = mem::uninitialized();\n@@ -25,7 +25,7 @@ LL |         let _val: &'static T = mem::uninitialized();\n    |\n    = note: references must be non-null\n \n-error: the type `Wrap<&'static T>` does not permit zero-initialization\n+error: the type `Wrap<&T>` does not permit zero-initialization\n   --> $DIR/uninitialized-zeroed.rs:32:38\n    |\n LL |         let _val: Wrap<&'static T> = mem::zeroed();\n@@ -40,7 +40,7 @@ note: references must be non-null (in this struct field)\n LL | struct Wrap<T> { wrapped: T }\n    |                  ^^^^^^^^^^\n \n-error: the type `Wrap<&'static T>` does not permit being left uninitialized\n+error: the type `Wrap<&T>` does not permit being left uninitialized\n   --> $DIR/uninitialized-zeroed.rs:33:38\n    |\n LL |         let _val: Wrap<&'static T> = mem::uninitialized();\n@@ -121,7 +121,7 @@ LL |         let _val: Void = mem::uninitialized();\n    |\n    = note: enums with no variants have no valid value\n \n-error: the type `&'static i32` does not permit zero-initialization\n+error: the type `&i32` does not permit zero-initialization\n   --> $DIR/uninitialized-zeroed.rs:49:34\n    |\n LL |         let _val: &'static i32 = mem::zeroed();\n@@ -132,7 +132,7 @@ LL |         let _val: &'static i32 = mem::zeroed();\n    |\n    = note: references must be non-null\n \n-error: the type `&'static i32` does not permit being left uninitialized\n+error: the type `&i32` does not permit being left uninitialized\n   --> $DIR/uninitialized-zeroed.rs:50:34\n    |\n LL |         let _val: &'static i32 = mem::uninitialized();\n@@ -366,7 +366,7 @@ LL |         let _val: NonBig = mem::uninitialized();\n    |\n    = note: `NonBig` must be initialized inside its custom valid range\n \n-error: the type `&'static i32` does not permit zero-initialization\n+error: the type `&i32` does not permit zero-initialization\n   --> $DIR/uninitialized-zeroed.rs:84:34\n    |\n LL |         let _val: &'static i32 = mem::transmute(0usize);\n@@ -377,7 +377,7 @@ LL |         let _val: &'static i32 = mem::transmute(0usize);\n    |\n    = note: references must be non-null\n \n-error: the type `&'static [i32]` does not permit zero-initialization\n+error: the type `&[i32]` does not permit zero-initialization\n   --> $DIR/uninitialized-zeroed.rs:85:36\n    |\n LL |         let _val: &'static [i32] = mem::transmute((0usize, 0usize));"}, {"sha": "7d1cac8a442f5eae819c049f52de8966fb3d0fe7", "filename": "src/test/ui/pattern/usefulness/always-inhabited-union-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.rs?ref=1ee5829575e73f217674f0a4e271c2e4246546e1", "patch": "@@ -21,7 +21,7 @@ fn uninhab_union() -> Foo {\n \n fn match_on_uninhab() {\n     match uninhab_ref() {\n-        //~^ ERROR non-exhaustive patterns: type `&'static !` is non-empty\n+        //~^ ERROR non-exhaustive patterns: type `&!` is non-empty\n     }\n \n     match uninhab_union() {"}, {"sha": "e1079f912d076821d3d95434b4df0c6754f55b7d", "filename": "src/test/ui/pattern/usefulness/always-inhabited-union-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.stderr?ref=1ee5829575e73f217674f0a4e271c2e4246546e1", "patch": "@@ -1,4 +1,4 @@\n-error[E0004]: non-exhaustive patterns: type `&'static !` is non-empty\n+error[E0004]: non-exhaustive patterns: type `&!` is non-empty\n   --> $DIR/always-inhabited-union-ref.rs:23:11\n    |\n LL |     match uninhab_ref() {"}, {"sha": "06e1b0f1ac262288cc384c6b59c8041037bce83e", "filename": "src/test/ui/regions/regions-free-region-ordering-caller.migrate.stderr", "status": "modified", "additions": 40, "deletions": 18, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.migrate.stderr?ref=1ee5829575e73f217674f0a4e271c2e4246546e1", "patch": "@@ -1,32 +1,54 @@\n-error[E0623]: lifetime mismatch\n+error[E0491]: in type `&'b &'a usize`, reference has a longer lifetime than the data it references\n   --> $DIR/regions-free-region-ordering-caller.rs:11:12\n    |\n-LL | fn call2<'a, 'b>(a: &'a usize, b: &'b usize) {\n-   |                     ---------     ---------\n-   |                     |\n-   |                     these two types are declared with different lifetimes...\n LL |     let z: Option<&'b &'a usize> = None;\n-   |            ^^^^^^^^^^^^^^^^^^^^^ ...but data from `a` flows into `b` here\n+   |            ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the pointer is valid for the lifetime `'b` as defined on the function body at 10:14\n+  --> $DIR/regions-free-region-ordering-caller.rs:10:14\n+   |\n+LL | fn call2<'a, 'b>(a: &'a usize, b: &'b usize) {\n+   |              ^^\n+note: but the referenced data is only valid for the lifetime `'a` as defined on the function body at 10:10\n+  --> $DIR/regions-free-region-ordering-caller.rs:10:10\n+   |\n+LL | fn call2<'a, 'b>(a: &'a usize, b: &'b usize) {\n+   |          ^^\n \n-error[E0623]: lifetime mismatch\n+error[E0491]: in type `&'b Paramd<'a>`, reference has a longer lifetime than the data it references\n   --> $DIR/regions-free-region-ordering-caller.rs:17:12\n    |\n-LL | fn call3<'a, 'b>(a: &'a usize, b: &'b usize) {\n-   |                     ---------     ---------\n-   |                     |\n-   |                     these two types are declared with different lifetimes...\n-LL |     let y: Paramd<'a> = Paramd { x: a };\n LL |     let z: Option<&'b Paramd<'a>> = None;\n-   |            ^^^^^^^^^^^^^^^^^^^^^^ ...but data from `a` flows into `b` here\n+   |            ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the pointer is valid for the lifetime `'b` as defined on the function body at 15:14\n+  --> $DIR/regions-free-region-ordering-caller.rs:15:14\n+   |\n+LL | fn call3<'a, 'b>(a: &'a usize, b: &'b usize) {\n+   |              ^^\n+note: but the referenced data is only valid for the lifetime `'a` as defined on the function body at 15:10\n+  --> $DIR/regions-free-region-ordering-caller.rs:15:10\n+   |\n+LL | fn call3<'a, 'b>(a: &'a usize, b: &'b usize) {\n+   |          ^^\n \n-error[E0623]: lifetime mismatch\n+error[E0491]: in type `&'a &'b usize`, reference has a longer lifetime than the data it references\n   --> $DIR/regions-free-region-ordering-caller.rs:22:12\n    |\n-LL | fn call4<'a, 'b>(a: &'a usize, b: &'b usize) {\n-   |                     ---------     --------- these two types are declared with different lifetimes...\n LL |     let z: Option<&'a &'b usize> = None;\n-   |            ^^^^^^^^^^^^^^^^^^^^^ ...but data from `b` flows into `a` here\n+   |            ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the pointer is valid for the lifetime `'a` as defined on the function body at 21:10\n+  --> $DIR/regions-free-region-ordering-caller.rs:21:10\n+   |\n+LL | fn call4<'a, 'b>(a: &'a usize, b: &'b usize) {\n+   |          ^^\n+note: but the referenced data is only valid for the lifetime `'b` as defined on the function body at 21:14\n+  --> $DIR/regions-free-region-ordering-caller.rs:21:14\n+   |\n+LL | fn call4<'a, 'b>(a: &'a usize, b: &'b usize) {\n+   |              ^^\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0623`.\n+For more information about this error, try `rustc --explain E0491`."}, {"sha": "2bf4734cf73802137006e1cd64f2865447231f85", "filename": "src/test/ui/regions/regions-free-region-ordering-caller.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.rs?ref=1ee5829575e73f217674f0a4e271c2e4246546e1", "patch": "@@ -8,18 +8,18 @@\n struct Paramd<'a> { x: &'a usize }\n \n fn call2<'a, 'b>(a: &'a usize, b: &'b usize) {\n-    let z: Option<&'b &'a usize> = None;//[migrate]~ ERROR E0623\n+    let z: Option<&'b &'a usize> = None;//[migrate]~ ERROR E0491\n     //[nll]~^ ERROR lifetime may not live long enough\n }\n \n fn call3<'a, 'b>(a: &'a usize, b: &'b usize) {\n     let y: Paramd<'a> = Paramd { x: a };\n-    let z: Option<&'b Paramd<'a>> = None;//[migrate]~ ERROR E0623\n+    let z: Option<&'b Paramd<'a>> = None;//[migrate]~ ERROR E0491\n     //[nll]~^ ERROR lifetime may not live long enough\n }\n \n fn call4<'a, 'b>(a: &'a usize, b: &'b usize) {\n-    let z: Option<&'a &'b usize> = None;//[migrate]~ ERROR E0623\n+    let z: Option<&'a &'b usize> = None;//[migrate]~ ERROR E0491\n     //[nll]~^ ERROR lifetime may not live long enough\n }\n "}, {"sha": "6b79697e9839e1947c11e1a04e4f16285d4ff51e", "filename": "src/test/ui/suggestions/const-no-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fui%2Fsuggestions%2Fconst-no-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fui%2Fsuggestions%2Fconst-no-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fconst-no-type.rs?ref=1ee5829575e73f217674f0a4e271c2e4246546e1", "patch": "@@ -43,4 +43,4 @@ static S = Vec::<String>::new();\n static mut SM = \"abc\";\n //~^ ERROR missing type for `static mut` item\n //~| HELP provide a type for the item\n-//~| SUGGESTION &'static str\n+//~| SUGGESTION &str"}, {"sha": "a7b5aa5e5b124397475ba3e421d4942d8427c6b0", "filename": "src/test/ui/suggestions/const-no-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fui%2Fsuggestions%2Fconst-no-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fui%2Fsuggestions%2Fconst-no-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fconst-no-type.stderr?ref=1ee5829575e73f217674f0a4e271c2e4246546e1", "patch": "@@ -14,7 +14,7 @@ error: missing type for `static mut` item\n   --> $DIR/const-no-type.rs:43:12\n    |\n LL | static mut SM = \"abc\";\n-   |            ^^ help: provide a type for the item: `SM: &'static str`\n+   |            ^^ help: provide a type for the item: `SM: &str`\n \n error: missing type for `const` item\n   --> $DIR/const-no-type.rs:14:7"}, {"sha": "4e781318329bf0dd0c4cf925b290d132269564df", "filename": "src/test/ui/transmute/main.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fui%2Ftransmute%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fui%2Ftransmute%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Fmain.stderr?ref=1ee5829575e73f217674f0a4e271c2e4246546e1", "patch": "@@ -4,8 +4,7 @@ error[E0512]: cannot transmute between types of different sizes, or dependently-\n LL |     transmute(x)\n    |     ^^^^^^^^^\n    |\n-   = note: source type: `<C as TypeConstructor<'a>>::T` (size can vary because of <C as TypeConstructor>::T)\n-   = note: target type: `<C as TypeConstructor<'b>>::T` (size can vary because of <C as TypeConstructor>::T)\n+   = note: `<C as TypeConstructor>::T` does not have a fixed size\n \n error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n   --> $DIR/main.rs:20:17"}, {"sha": "dc86ab30dfe415a3a067627339659ae25c0a8a8f", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ee5829575e73f217674f0a4e271c2e4246546e1/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr?ref=1ee5829575e73f217674f0a4e271c2e4246546e1", "patch": "@@ -70,7 +70,7 @@ LL | static TEST3: _ = \"test\";\n    |               ^\n    |               |\n    |               not allowed in type signatures\n-   |               help: replace `_` with the correct type: `&'static str`\n+   |               help: replace `_` with the correct type: `&str`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:15:15\n@@ -232,7 +232,7 @@ LL |     static FN_TEST3: _ = \"test\";\n    |                      ^\n    |                      |\n    |                      not allowed in type signatures\n-   |                      help: replace `_` with the correct type: `&'static str`\n+   |                      help: replace `_` with the correct type: `&str`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:88:22"}]}