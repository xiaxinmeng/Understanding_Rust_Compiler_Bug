{"sha": "55e23db137bd659a4299abc29104eb643a5a0b1c", "node_id": "C_kwDOAAsO6NoAKDU1ZTIzZGIxMzdiZDY1OWE0Mjk5YWJjMjkxMDRlYjY0M2E1YTBiMWM", "commit": {"author": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-10-31T23:27:55Z"}, "committer": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2022-06-23T19:01:58Z"}, "message": "Represent SocketAddrV4 and SocketAddrV6 as Rust native encoding", "tree": {"sha": "ae4afa9c52186b1db65f20083f6030790c5a393b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae4afa9c52186b1db65f20083f6030790c5a393b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55e23db137bd659a4299abc29104eb643a5a0b1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55e23db137bd659a4299abc29104eb643a5a0b1c", "html_url": "https://github.com/rust-lang/rust/commit/55e23db137bd659a4299abc29104eb643a5a0b1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55e23db137bd659a4299abc29104eb643a5a0b1c/comments", "author": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "committer": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10f4ce324baf7cfb7ce2b2096662b82b79204944", "url": "https://api.github.com/repos/rust-lang/rust/commits/10f4ce324baf7cfb7ce2b2096662b82b79204944", "html_url": "https://github.com/rust-lang/rust/commit/10f4ce324baf7cfb7ce2b2096662b82b79204944"}], "stats": {"total": 205, "additions": 100, "deletions": 105}, "files": [{"sha": "d724f7e7843b06360829aa342d9eb5fc634a0718", "filename": "library/std/src/net/addr.rs", "status": "modified", "additions": 86, "deletions": 91, "changes": 177, "blob_url": "https://github.com/rust-lang/rust/blob/55e23db137bd659a4299abc29104eb643a5a0b1c/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55e23db137bd659a4299abc29104eb643a5a0b1c/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs?ref=55e23db137bd659a4299abc29104eb643a5a0b1c", "patch": "@@ -73,12 +73,11 @@ pub enum SocketAddr {\n /// assert_eq!(socket.ip(), &Ipv4Addr::new(127, 0, 0, 1));\n /// assert_eq!(socket.port(), 8080);\n /// ```\n-#[derive(Copy)]\n+#[derive(Copy, Clone, Eq, PartialEq)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct SocketAddrV4 {\n-    // Do not assume that this struct is implemented as the underlying system representation.\n-    // The memory layout is not part of the stable interface that std exposes.\n-    inner: c::sockaddr_in,\n+    ip: Ipv4Addr,\n+    port: u16,\n }\n \n /// An IPv6 socket address.\n@@ -107,12 +106,13 @@ pub struct SocketAddrV4 {\n /// assert_eq!(socket.ip(), &Ipv6Addr::new(0x2001, 0xdb8, 0, 0, 0, 0, 0, 1));\n /// assert_eq!(socket.port(), 8080);\n /// ```\n-#[derive(Copy)]\n+#[derive(Copy, Clone, Eq, PartialEq)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct SocketAddrV6 {\n-    // Do not assume that this struct is implemented as the underlying system representation.\n-    // The memory layout is not part of the stable interface that std exposes.\n-    inner: c::sockaddr_in6,\n+    ip: Ipv6Addr,\n+    port: u16,\n+    flowinfo: u32,\n+    scope_id: u32,\n }\n \n impl SocketAddr {\n@@ -131,7 +131,8 @@ impl SocketAddr {\n     /// ```\n     #[stable(feature = \"ip_addr\", since = \"1.7.0\")]\n     #[must_use]\n-    pub fn new(ip: IpAddr, port: u16) -> SocketAddr {\n+    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"none\")]\n+    pub const fn new(ip: IpAddr, port: u16) -> SocketAddr {\n         match ip {\n             IpAddr::V4(a) => SocketAddr::V4(SocketAddrV4::new(a, port)),\n             IpAddr::V6(a) => SocketAddr::V6(SocketAddrV6::new(a, port, 0, 0)),\n@@ -277,15 +278,9 @@ impl SocketAddrV4 {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[must_use]\n-    pub fn new(ip: Ipv4Addr, port: u16) -> SocketAddrV4 {\n-        SocketAddrV4 {\n-            inner: c::sockaddr_in {\n-                sin_family: c::AF_INET as c::sa_family_t,\n-                sin_port: htons(port),\n-                sin_addr: ip.into_inner(),\n-                ..unsafe { mem::zeroed() }\n-            },\n-        }\n+    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"none\")]\n+    pub const fn new(ip: Ipv4Addr, port: u16) -> SocketAddrV4 {\n+        SocketAddrV4 { ip, port }\n     }\n \n     /// Returns the IP address associated with this socket address.\n@@ -302,9 +297,7 @@ impl SocketAddrV4 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n     pub const fn ip(&self) -> &Ipv4Addr {\n-        // SAFETY: `Ipv4Addr` is `#[repr(C)] struct { _: in_addr; }`.\n-        // It is safe to cast from `&in_addr` to `&Ipv4Addr`.\n-        unsafe { &*(&self.inner.sin_addr as *const c::in_addr as *const Ipv4Addr) }\n+        &self.ip\n     }\n \n     /// Changes the IP address associated with this socket address.\n@@ -320,7 +313,7 @@ impl SocketAddrV4 {\n     /// ```\n     #[stable(feature = \"sockaddr_setters\", since = \"1.9.0\")]\n     pub fn set_ip(&mut self, new_ip: Ipv4Addr) {\n-        self.inner.sin_addr = new_ip.into_inner()\n+        self.ip = new_ip;\n     }\n \n     /// Returns the port number associated with this socket address.\n@@ -337,7 +330,7 @@ impl SocketAddrV4 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n     pub const fn port(&self) -> u16 {\n-        ntohs(self.inner.sin_port)\n+        self.port\n     }\n \n     /// Changes the port number associated with this socket address.\n@@ -353,7 +346,7 @@ impl SocketAddrV4 {\n     /// ```\n     #[stable(feature = \"sockaddr_setters\", since = \"1.9.0\")]\n     pub fn set_port(&mut self, new_port: u16) {\n-        self.inner.sin_port = htons(new_port);\n+        self.port = new_port;\n     }\n }\n \n@@ -376,17 +369,9 @@ impl SocketAddrV6 {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[must_use]\n-    pub fn new(ip: Ipv6Addr, port: u16, flowinfo: u32, scope_id: u32) -> SocketAddrV6 {\n-        SocketAddrV6 {\n-            inner: c::sockaddr_in6 {\n-                sin6_family: c::AF_INET6 as c::sa_family_t,\n-                sin6_port: htons(port),\n-                sin6_addr: *ip.as_inner(),\n-                sin6_flowinfo: flowinfo,\n-                sin6_scope_id: scope_id,\n-                ..unsafe { mem::zeroed() }\n-            },\n-        }\n+    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"none\")]\n+    pub const fn new(ip: Ipv6Addr, port: u16, flowinfo: u32, scope_id: u32) -> SocketAddrV6 {\n+        SocketAddrV6 { ip, port, flowinfo, scope_id }\n     }\n \n     /// Returns the IP address associated with this socket address.\n@@ -403,7 +388,7 @@ impl SocketAddrV6 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n     pub const fn ip(&self) -> &Ipv6Addr {\n-        unsafe { &*(&self.inner.sin6_addr as *const c::in6_addr as *const Ipv6Addr) }\n+        &self.ip\n     }\n \n     /// Changes the IP address associated with this socket address.\n@@ -419,7 +404,7 @@ impl SocketAddrV6 {\n     /// ```\n     #[stable(feature = \"sockaddr_setters\", since = \"1.9.0\")]\n     pub fn set_ip(&mut self, new_ip: Ipv6Addr) {\n-        self.inner.sin6_addr = *new_ip.as_inner()\n+        self.ip = new_ip;\n     }\n \n     /// Returns the port number associated with this socket address.\n@@ -436,7 +421,7 @@ impl SocketAddrV6 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n     pub const fn port(&self) -> u16 {\n-        ntohs(self.inner.sin6_port)\n+        self.port\n     }\n \n     /// Changes the port number associated with this socket address.\n@@ -452,7 +437,7 @@ impl SocketAddrV6 {\n     /// ```\n     #[stable(feature = \"sockaddr_setters\", since = \"1.9.0\")]\n     pub fn set_port(&mut self, new_port: u16) {\n-        self.inner.sin6_port = htons(new_port);\n+        self.port = new_port;\n     }\n \n     /// Returns the flow information associated with this address.\n@@ -479,7 +464,7 @@ impl SocketAddrV6 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n     pub const fn flowinfo(&self) -> u32 {\n-        self.inner.sin6_flowinfo\n+        self.flowinfo\n     }\n \n     /// Changes the flow information associated with this socket address.\n@@ -497,7 +482,7 @@ impl SocketAddrV6 {\n     /// ```\n     #[stable(feature = \"sockaddr_setters\", since = \"1.9.0\")]\n     pub fn set_flowinfo(&mut self, new_flowinfo: u32) {\n-        self.inner.sin6_flowinfo = new_flowinfo;\n+        self.flowinfo = new_flowinfo;\n     }\n \n     /// Returns the scope ID associated with this address.\n@@ -519,7 +504,7 @@ impl SocketAddrV6 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n     pub const fn scope_id(&self) -> u32 {\n-        self.inner.sin6_scope_id\n+        self.scope_id\n     }\n \n     /// Changes the scope ID associated with this socket address.\n@@ -537,19 +522,51 @@ impl SocketAddrV6 {\n     /// ```\n     #[stable(feature = \"sockaddr_setters\", since = \"1.9.0\")]\n     pub fn set_scope_id(&mut self, new_scope_id: u32) {\n-        self.inner.sin6_scope_id = new_scope_id;\n+        self.scope_id = new_scope_id;\n     }\n }\n \n impl FromInner<c::sockaddr_in> for SocketAddrV4 {\n     fn from_inner(addr: c::sockaddr_in) -> SocketAddrV4 {\n-        SocketAddrV4 { inner: addr }\n+        SocketAddrV4 {\n+            ip: unsafe { *(&addr.sin_addr as *const c::in_addr as *const Ipv4Addr) },\n+            port: ntohs(addr.sin_port),\n+        }\n     }\n }\n \n impl FromInner<c::sockaddr_in6> for SocketAddrV6 {\n     fn from_inner(addr: c::sockaddr_in6) -> SocketAddrV6 {\n-        SocketAddrV6 { inner: addr }\n+        SocketAddrV6 {\n+            ip: unsafe { *(&addr.sin6_addr as *const c::in6_addr as *const Ipv6Addr) },\n+            port: ntohs(addr.sin6_port),\n+            flowinfo: addr.sin6_flowinfo,\n+            scope_id: addr.sin6_scope_id,\n+        }\n+    }\n+}\n+\n+impl IntoInner<c::sockaddr_in> for SocketAddrV4 {\n+    fn into_inner(self) -> c::sockaddr_in {\n+        c::sockaddr_in {\n+            sin_family: c::AF_INET as c::sa_family_t,\n+            sin_port: htons(self.port),\n+            sin_addr: self.ip.into_inner(),\n+            ..unsafe { mem::zeroed() }\n+        }\n+    }\n+}\n+\n+impl IntoInner<c::sockaddr_in6> for SocketAddrV6 {\n+    fn into_inner(self) -> c::sockaddr_in6 {\n+        c::sockaddr_in6 {\n+            sin6_family: c::AF_INET6 as c::sa_family_t,\n+            sin6_port: htons(self.port),\n+            sin6_addr: *self.ip.as_inner(),\n+            sin6_flowinfo: self.flowinfo,\n+            sin6_scope_id: self.scope_id,\n+            ..unsafe { mem::zeroed() }\n+        }\n     }\n }\n \n@@ -582,14 +599,32 @@ impl<I: Into<IpAddr>> From<(I, u16)> for SocketAddr {\n     }\n }\n \n-impl<'a> IntoInner<(*const c::sockaddr, c::socklen_t)> for &'a SocketAddr {\n-    fn into_inner(self) -> (*const c::sockaddr, c::socklen_t) {\n+/// A type with the same memory layout as `c::sockaddr`. Used in converting Rust level\n+/// SocketAddr* types into their system representation. The benefit of this specific\n+/// type over using `c::sockaddr_storage` is that this type is exactly as large as it\n+/// needs to be and not a lot larger. And it can be initialized more cleanly from Rust.\n+#[repr(C)]\n+pub(crate) union SocketAddrCRepr {\n+    v4: c::sockaddr_in,\n+    v6: c::sockaddr_in6,\n+}\n+\n+impl SocketAddrCRepr {\n+    pub fn as_ptr(&self) -> *const c::sockaddr {\n+        self as *const _ as *const c::sockaddr\n+    }\n+}\n+\n+impl<'a> IntoInner<(SocketAddrCRepr, c::socklen_t)> for &'a SocketAddr {\n+    fn into_inner(self) -> (SocketAddrCRepr, c::socklen_t) {\n         match *self {\n             SocketAddr::V4(ref a) => {\n-                (a as *const _ as *const _, mem::size_of_val(a) as c::socklen_t)\n+                let sockaddr = SocketAddrCRepr { v4: a.into_inner() };\n+                (sockaddr, mem::size_of::<c::sockaddr_in>() as c::socklen_t)\n             }\n             SocketAddr::V6(ref a) => {\n-                (a as *const _ as *const _, mem::size_of_val(a) as c::socklen_t)\n+                let sockaddr = SocketAddrCRepr { v6: a.into_inner() };\n+                (sockaddr, mem::size_of::<c::sockaddr_in6>() as c::socklen_t)\n             }\n         }\n     }\n@@ -688,40 +723,6 @@ impl fmt::Debug for SocketAddrV6 {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Clone for SocketAddrV4 {\n-    fn clone(&self) -> SocketAddrV4 {\n-        *self\n-    }\n-}\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Clone for SocketAddrV6 {\n-    fn clone(&self) -> SocketAddrV6 {\n-        *self\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl PartialEq for SocketAddrV4 {\n-    fn eq(&self, other: &SocketAddrV4) -> bool {\n-        self.inner.sin_port == other.inner.sin_port\n-            && self.inner.sin_addr.s_addr == other.inner.sin_addr.s_addr\n-    }\n-}\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl PartialEq for SocketAddrV6 {\n-    fn eq(&self, other: &SocketAddrV6) -> bool {\n-        self.inner.sin6_port == other.inner.sin6_port\n-            && self.inner.sin6_addr.s6_addr == other.inner.sin6_addr.s6_addr\n-            && self.inner.sin6_flowinfo == other.inner.sin6_flowinfo\n-            && self.inner.sin6_scope_id == other.inner.sin6_scope_id\n-    }\n-}\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Eq for SocketAddrV4 {}\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Eq for SocketAddrV6 {}\n-\n #[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n impl PartialOrd for SocketAddrV4 {\n     fn partial_cmp(&self, other: &SocketAddrV4) -> Option<Ordering> {\n@@ -753,19 +754,13 @@ impl Ord for SocketAddrV6 {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl hash::Hash for SocketAddrV4 {\n     fn hash<H: hash::Hasher>(&self, s: &mut H) {\n-        (self.inner.sin_port, self.inner.sin_addr.s_addr).hash(s)\n+        (self.port, self.ip).hash(s)\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl hash::Hash for SocketAddrV6 {\n     fn hash<H: hash::Hasher>(&self, s: &mut H) {\n-        (\n-            self.inner.sin6_port,\n-            &self.inner.sin6_addr.s6_addr,\n-            self.inner.sin6_flowinfo,\n-            self.inner.sin6_scope_id,\n-        )\n-            .hash(s)\n+        (self.port, &self.ip, self.flowinfo, self.scope_id).hash(s)\n     }\n }\n "}, {"sha": "462a45b01ab49b2c99cae5d3184407599df970e1", "filename": "library/std/src/sys/unix/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55e23db137bd659a4299abc29104eb643a5a0b1c/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55e23db137bd659a4299abc29104eb643a5a0b1c/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs?ref=55e23db137bd659a4299abc29104eb643a5a0b1c", "patch": "@@ -139,8 +139,8 @@ impl Socket {\n     pub fn connect_timeout(&self, addr: &SocketAddr, timeout: Duration) -> io::Result<()> {\n         self.set_nonblocking(true)?;\n         let r = unsafe {\n-            let (addrp, len) = addr.into_inner();\n-            cvt(libc::connect(self.as_raw_fd(), addrp, len))\n+            let (addr, len) = addr.into_inner();\n+            cvt(libc::connect(self.as_raw_fd(), addr.as_ptr(), len))\n         };\n         self.set_nonblocking(false)?;\n "}, {"sha": "e0701a498fad749ba2dafec3c15aabc2970c22b8", "filename": "library/std/src/sys/windows/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55e23db137bd659a4299abc29104eb643a5a0b1c/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55e23db137bd659a4299abc29104eb643a5a0b1c/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fnet.rs?ref=55e23db137bd659a4299abc29104eb643a5a0b1c", "patch": "@@ -143,8 +143,8 @@ impl Socket {\n     pub fn connect_timeout(&self, addr: &SocketAddr, timeout: Duration) -> io::Result<()> {\n         self.set_nonblocking(true)?;\n         let result = {\n-            let (addrp, len) = addr.into_inner();\n-            let result = unsafe { c::connect(self.as_raw_socket(), addrp, len) };\n+            let (addr, len) = addr.into_inner();\n+            let result = unsafe { c::connect(self.as_raw_socket(), addr.as_ptr(), len) };\n             cvt(result).map(drop)\n         };\n         self.set_nonblocking(false)?;"}, {"sha": "8c4349bf7ed9edf3d4e84e79facea5295076dfbf", "filename": "library/std/src/sys_common/net.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/55e23db137bd659a4299abc29104eb643a5a0b1c/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55e23db137bd659a4299abc29104eb643a5a0b1c/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs?ref=55e23db137bd659a4299abc29104eb643a5a0b1c", "patch": "@@ -224,8 +224,8 @@ impl TcpStream {\n \n         let sock = Socket::new(addr, c::SOCK_STREAM)?;\n \n-        let (addrp, len) = addr.into_inner();\n-        cvt_r(|| unsafe { c::connect(sock.as_raw(), addrp, len) })?;\n+        let (addr, len) = addr.into_inner();\n+        cvt_r(|| unsafe { c::connect(sock.as_raw(), addr.as_ptr(), len) })?;\n         Ok(TcpStream { inner: sock })\n     }\n \n@@ -395,8 +395,8 @@ impl TcpListener {\n         setsockopt(&sock, c::SOL_SOCKET, c::SO_REUSEADDR, 1 as c_int)?;\n \n         // Bind our new socket\n-        let (addrp, len) = addr.into_inner();\n-        cvt(unsafe { c::bind(sock.as_raw(), addrp, len as _) })?;\n+        let (addr, len) = addr.into_inner();\n+        cvt(unsafe { c::bind(sock.as_raw(), addr.as_ptr(), len as _) })?;\n \n         cfg_if::cfg_if! {\n             if #[cfg(target_os = \"horizon\")] {\n@@ -500,8 +500,8 @@ impl UdpSocket {\n         init();\n \n         let sock = Socket::new(addr, c::SOCK_DGRAM)?;\n-        let (addrp, len) = addr.into_inner();\n-        cvt(unsafe { c::bind(sock.as_raw(), addrp, len as _) })?;\n+        let (addr, len) = addr.into_inner();\n+        cvt(unsafe { c::bind(sock.as_raw(), addr.as_ptr(), len as _) })?;\n         Ok(UdpSocket { inner: sock })\n     }\n \n@@ -531,14 +531,14 @@ impl UdpSocket {\n \n     pub fn send_to(&self, buf: &[u8], dst: &SocketAddr) -> io::Result<usize> {\n         let len = cmp::min(buf.len(), <wrlen_t>::MAX as usize) as wrlen_t;\n-        let (dstp, dstlen) = dst.into_inner();\n+        let (dst, dstlen) = dst.into_inner();\n         let ret = cvt(unsafe {\n             c::sendto(\n                 self.inner.as_raw(),\n                 buf.as_ptr() as *const c_void,\n                 len,\n                 MSG_NOSIGNAL,\n-                dstp,\n+                dst.as_ptr(),\n                 dstlen,\n             )\n         })?;\n@@ -677,8 +677,8 @@ impl UdpSocket {\n     }\n \n     pub fn connect(&self, addr: io::Result<&SocketAddr>) -> io::Result<()> {\n-        let (addrp, len) = addr?.into_inner();\n-        cvt_r(|| unsafe { c::connect(self.inner.as_raw(), addrp, len) }).map(drop)\n+        let (addr, len) = addr?.into_inner();\n+        cvt_r(|| unsafe { c::connect(self.inner.as_raw(), addr.as_ptr(), len) }).map(drop)\n     }\n }\n "}]}