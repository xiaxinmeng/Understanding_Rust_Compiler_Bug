{"sha": "02e021b6d4e1ae779dc538404a4fa0c54ed5f7ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyZTAyMWI2ZDRlMWFlNzc5ZGM1Mzg0MDRhNGZhMGM1NGVkNWY3ZWQ=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2016-04-07T17:16:40Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2018-02-28T18:23:54Z"}, "message": "Add bitreverse intrinsic", "tree": {"sha": "c0ed1f66438e71b8653c4f4f7045d708c09d50df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0ed1f66438e71b8653c4f4f7045d708c09d50df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02e021b6d4e1ae779dc538404a4fa0c54ed5f7ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02e021b6d4e1ae779dc538404a4fa0c54ed5f7ed", "html_url": "https://github.com/rust-lang/rust/commit/02e021b6d4e1ae779dc538404a4fa0c54ed5f7ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02e021b6d4e1ae779dc538404a4fa0c54ed5f7ed/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ff9872b2280009f094af0df3dcdc542cc46a5fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ff9872b2280009f094af0df3dcdc542cc46a5fd", "html_url": "https://github.com/rust-lang/rust/commit/0ff9872b2280009f094af0df3dcdc542cc46a5fd"}], "stats": {"total": 31, "additions": 28, "deletions": 3}, "files": [{"sha": "830ebad065427fa3954552f99f90595702e96ff2", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02e021b6d4e1ae779dc538404a4fa0c54ed5f7ed/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e021b6d4e1ae779dc538404a4fa0c54ed5f7ed/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=02e021b6d4e1ae779dc538404a4fa0c54ed5f7ed", "patch": "@@ -1292,6 +1292,10 @@ extern \"rust-intrinsic\" {\n     /// Reverses the bytes in an integer type `T`.\n     pub fn bswap<T>(x: T) -> T;\n \n+    /// Reverses the bits in an integer type `T`.\n+    #[cfg(not(stage0))]\n+    pub fn bitreverse<T>(x: T) -> T;\n+\n     /// Performs checked integer addition.\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `overflowing_add` method. For example,"}, {"sha": "b93e8c2ad21ca60e9bee59b4ff60b7cbf69189ee", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02e021b6d4e1ae779dc538404a4fa0c54ed5f7ed/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e021b6d4e1ae779dc538404a4fa0c54ed5f7ed/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=02e021b6d4e1ae779dc538404a4fa0c54ed5f7ed", "patch": "@@ -597,6 +597,12 @@ fn declare_intrinsic(cx: &CodegenCx, key: &str) -> Option<ValueRef> {\n     ifn!(\"llvm.bswap.i64\", fn(t_i64) -> t_i64);\n     ifn!(\"llvm.bswap.i128\", fn(t_i128) -> t_i128);\n \n+    ifn!(\"llvm.bitreverse.i8\", fn(t_i8) -> t_i8);\n+    ifn!(\"llvm.bitreverse.i16\", fn(t_i16) -> t_i16);\n+    ifn!(\"llvm.bitreverse.i32\", fn(t_i32) -> t_i32);\n+    ifn!(\"llvm.bitreverse.i64\", fn(t_i64) -> t_i64);\n+    ifn!(\"llvm.bitreverse.i128\", fn(t_i128) -> t_i128);\n+\n     ifn!(\"llvm.sadd.with.overflow.i8\", fn(t_i8, t_i8) -> mk_struct!{t_i8, i1});\n     ifn!(\"llvm.sadd.with.overflow.i16\", fn(t_i16, t_i16) -> mk_struct!{t_i16, i1});\n     ifn!(\"llvm.sadd.with.overflow.i32\", fn(t_i32, t_i32) -> mk_struct!{t_i32, i1});"}, {"sha": "3f87ce7e04792f4c417adc7ba63a0ef705576f37", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02e021b6d4e1ae779dc538404a4fa0c54ed5f7ed/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e021b6d4e1ae779dc538404a4fa0c54ed5f7ed/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=02e021b6d4e1ae779dc538404a4fa0c54ed5f7ed", "patch": "@@ -287,8 +287,8 @@ pub fn trans_intrinsic_call<'a, 'tcx>(bx: &Builder<'a, 'tcx>,\n             ], None)\n         },\n         \"ctlz\" | \"ctlz_nonzero\" | \"cttz\" | \"cttz_nonzero\" | \"ctpop\" | \"bswap\" |\n-        \"add_with_overflow\" | \"sub_with_overflow\" | \"mul_with_overflow\" |\n-        \"overflowing_add\" | \"overflowing_sub\" | \"overflowing_mul\" |\n+        \"bitreverse\" | \"add_with_overflow\" | \"sub_with_overflow\" |\n+        \"mul_with_overflow\" | \"overflowing_add\" | \"overflowing_sub\" | \"overflowing_mul\" |\n         \"unchecked_div\" | \"unchecked_rem\" | \"unchecked_shl\" | \"unchecked_shr\" => {\n             let ty = arg_tys[0];\n             match int_type_width_signed(ty, cx) {\n@@ -315,6 +315,10 @@ pub fn trans_intrinsic_call<'a, 'tcx>(bx: &Builder<'a, 'tcx>,\n                                         &[args[0].immediate()], None)\n                             }\n                         }\n+                        \"bitreverse\" => {\n+                            bx.call(cx.get_intrinsic(&format!(\"llvm.bitreverse.i{}\", width)),\n+                                &[args[0].immediate()], None)\n+                        }\n                         \"add_with_overflow\" | \"sub_with_overflow\" | \"mul_with_overflow\" => {\n                             let intrinsic = format!(\"llvm.{}{}.with.overflow.i{}\",\n                                                     if signed { 's' } else { 'u' },"}, {"sha": "2e00040d99a73f58782bc810277aa9346486715b", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02e021b6d4e1ae779dc538404a4fa0c54ed5f7ed/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e021b6d4e1ae779dc538404a4fa0c54ed5f7ed/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=02e021b6d4e1ae779dc538404a4fa0c54ed5f7ed", "patch": "@@ -275,7 +275,8 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             \"volatile_store\" =>\n                 (1, vec![ tcx.mk_mut_ptr(param(0)), param(0) ], tcx.mk_nil()),\n \n-            \"ctpop\" | \"ctlz\" | \"ctlz_nonzero\" | \"cttz\" | \"cttz_nonzero\" | \"bswap\" =>\n+            \"ctpop\" | \"ctlz\" | \"ctlz_nonzero\" | \"cttz\" | \"cttz_nonzero\" |\n+            \"bswap\" | \"bitreverse\" =>\n                 (1, vec![param(0)], param(0)),\n \n             \"add_with_overflow\" | \"sub_with_overflow\"  | \"mul_with_overflow\" =>"}, {"sha": "6e0712f6767ba765dea50b99674b50c0179bd9d0", "filename": "src/test/run-pass/intrinsics-integer.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/02e021b6d4e1ae779dc538404a4fa0c54ed5f7ed/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e021b6d4e1ae779dc538404a4fa0c54ed5f7ed/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs?ref=02e021b6d4e1ae779dc538404a4fa0c54ed5f7ed", "patch": "@@ -18,6 +18,7 @@ mod rusti {\n         pub fn cttz<T>(x: T) -> T;\n         pub fn cttz_nonzero<T>(x: T) -> T;\n         pub fn bswap<T>(x: T) -> T;\n+        pub fn bitreverse<T>(x: T) -> T;\n     }\n }\n \n@@ -138,5 +139,14 @@ pub fn main() {\n         assert_eq!(bswap(0x0ABBCC0Di32), 0x0DCCBB0A);\n         assert_eq!(bswap(0x0122334455667708u64), 0x0877665544332201);\n         assert_eq!(bswap(0x0122334455667708i64), 0x0877665544332201);\n+\n+        assert_eq!(bitreverse(0x0Au8), 0x50);\n+        assert_eq!(bitreverse(0x0Ai8), 0x50);\n+        assert_eq!(bitreverse(0x0A0Cu16), 0x3050);\n+        assert_eq!(bitreverse(0x0A0Ci16), 0x3050);\n+        assert_eq!(bitreverse(0x0ABBCC0Eu32), 0x7033DD50);\n+        assert_eq!(bitreverse(0x0ABBCC0Ei32), 0x7033DD50);\n+        assert_eq!(bitreverse(0x0122334455667708u64), 0x10EE66AA22CC4480);\n+        assert_eq!(bitreverse(0x0122334455667708i64), 0x10EE66AA22CC4480);\n     }\n }"}]}