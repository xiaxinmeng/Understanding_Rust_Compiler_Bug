{"sha": "1d5c4a77fb33cab7bf8f9d2edc6dd26b09ef65f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkNWM0YTc3ZmIzM2NhYjdiZjhmOWQyZWRjNmRkMjZiMDllZjY1ZjM=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-03-21T16:40:14Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-03-21T17:01:14Z"}, "message": "Use QuantifiedWhereClause in generic_predicates as well\n\nStill far too much binder skipping going on; I find it hard to imagine\nthis is all correct, but the tests pass.", "tree": {"sha": "9cc37c708ec3c2df8adbc1e96204c7a7e2e3ca65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cc37c708ec3c2df8adbc1e96204c7a7e2e3ca65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d5c4a77fb33cab7bf8f9d2edc6dd26b09ef65f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d5c4a77fb33cab7bf8f9d2edc6dd26b09ef65f3", "html_url": "https://github.com/rust-lang/rust/commit/1d5c4a77fb33cab7bf8f9d2edc6dd26b09ef65f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d5c4a77fb33cab7bf8f9d2edc6dd26b09ef65f3/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "590c41635952e19c3caae525a827499dbd360049", "url": "https://api.github.com/repos/rust-lang/rust/commits/590c41635952e19c3caae525a827499dbd360049", "html_url": "https://github.com/rust-lang/rust/commit/590c41635952e19c3caae525a827499dbd360049"}], "stats": {"total": 65, "additions": 28, "deletions": 37}, "files": [{"sha": "9f6d7be48393a6c1e8e375d71383011b6e3ef5d9", "filename": "crates/hir/src/display.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d5c4a77fb33cab7bf8f9d2edc6dd26b09ef65f3/crates%2Fhir%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d5c4a77fb33cab7bf8f9d2edc6dd26b09ef65f3/crates%2Fhir%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdisplay.rs?ref=1d5c4a77fb33cab7bf8f9d2edc6dd26b09ef65f3", "patch": "@@ -236,11 +236,7 @@ impl HirDisplay for TypeParam {\n         write!(f, \"{}\", self.name(f.db))?;\n         let bounds = f.db.generic_predicates_for_param(self.id);\n         let substs = Substitution::type_params(f.db, self.id.parent);\n-        let predicates = bounds\n-            .iter()\n-            .cloned()\n-            .map(|b| hir_ty::Binders::new(0, b.subst(&substs)))\n-            .collect::<Vec<_>>();\n+        let predicates = bounds.iter().cloned().map(|b| b.subst(&substs)).collect::<Vec<_>>();\n         if !(predicates.is_empty() || f.omit_verbose_types()) {\n             write_bounds_like_dyn_trait_with_prefix(\":\", &predicates, f)?;\n         }"}, {"sha": "a325b6691a0023c48e63b54e3f7132716e88c854", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d5c4a77fb33cab7bf8f9d2edc6dd26b09ef65f3/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d5c4a77fb33cab7bf8f9d2edc6dd26b09ef65f3/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=1d5c4a77fb33cab7bf8f9d2edc6dd26b09ef65f3", "patch": "@@ -1460,7 +1460,7 @@ impl TypeParam {\n     pub fn trait_bounds(self, db: &dyn HirDatabase) -> Vec<Trait> {\n         db.generic_predicates_for_param(self.id)\n             .into_iter()\n-            .filter_map(|pred| match &pred.value {\n+            .filter_map(|pred| match &pred.skip_binders().skip_binders() {\n                 hir_ty::WhereClause::Implemented(trait_ref) => {\n                     Some(Trait::from(trait_ref.hir_trait_id()))\n                 }"}, {"sha": "58e4247c6ae7c824ebabbf019aa5a3da933fb17a", "filename": "crates/hir_ty/src/db.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1d5c4a77fb33cab7bf8f9d2edc6dd26b09ef65f3/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d5c4a77fb33cab7bf8f9d2edc6dd26b09ef65f3/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdb.rs?ref=1d5c4a77fb33cab7bf8f9d2edc6dd26b09ef65f3", "patch": "@@ -12,8 +12,8 @@ use la_arena::ArenaMap;\n use crate::{\n     method_resolution::{InherentImpls, TraitImpls},\n     traits::chalk,\n-    Binders, CallableDefId, FnDefId, ImplTraitId, InferenceResult, PolyFnSig, ReturnTypeImplTraits,\n-    TraitRef, Ty, TyDefId, ValueTyDefId, WhereClause,\n+    Binders, CallableDefId, FnDefId, ImplTraitId, InferenceResult, PolyFnSig,\n+    QuantifiedWhereClause, ReturnTypeImplTraits, TraitRef, Ty, TyDefId, ValueTyDefId,\n };\n use hir_expand::name::Name;\n \n@@ -57,10 +57,13 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n \n     #[salsa::invoke(crate::lower::generic_predicates_for_param_query)]\n     #[salsa::cycle(crate::lower::generic_predicates_for_param_recover)]\n-    fn generic_predicates_for_param(&self, param_id: TypeParamId) -> Arc<[Binders<WhereClause>]>;\n+    fn generic_predicates_for_param(\n+        &self,\n+        param_id: TypeParamId,\n+    ) -> Arc<[Binders<QuantifiedWhereClause>]>;\n \n     #[salsa::invoke(crate::lower::generic_predicates_query)]\n-    fn generic_predicates(&self, def: GenericDefId) -> Arc<[Binders<WhereClause>]>;\n+    fn generic_predicates(&self, def: GenericDefId) -> Arc<[Binders<QuantifiedWhereClause>]>;\n \n     #[salsa::invoke(crate::lower::trait_environment_query)]\n     fn trait_environment(&self, def: GenericDefId) -> Arc<crate::TraitEnvironment>;"}, {"sha": "cc6b93d37ad92da1b4c8990ec2f70c5f3e3c9f85", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1d5c4a77fb33cab7bf8f9d2edc6dd26b09ef65f3/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d5c4a77fb33cab7bf8f9d2edc6dd26b09ef65f3/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=1d5c4a77fb33cab7bf8f9d2edc6dd26b09ef65f3", "patch": "@@ -581,7 +581,7 @@ impl HirDisplay for Ty {\n                             .generic_predicates(id.parent)\n                             .into_iter()\n                             .map(|pred| pred.clone().subst(&substs))\n-                            .filter(|wc| match &wc {\n+                            .filter(|wc| match &wc.skip_binders() {\n                                 WhereClause::Implemented(tr) => tr.self_type_parameter() == self,\n                                 WhereClause::AliasEq(AliasEq {\n                                     alias: AliasTy::Projection(proj),\n@@ -590,15 +590,7 @@ impl HirDisplay for Ty {\n                                 _ => false,\n                             })\n                             .collect::<Vec<_>>();\n-                        write_bounds_like_dyn_trait_with_prefix(\n-                            \"impl\",\n-                            &bounds\n-                                .iter()\n-                                .cloned()\n-                                .map(crate::Binders::wrap_empty)\n-                                .collect::<Vec<_>>(),\n-                            f,\n-                        )?;\n+                        write_bounds_like_dyn_trait_with_prefix(\"impl\", &bounds, f)?;\n                     }\n                 }\n             }"}, {"sha": "17849d552886a4f1e1e4e1ae6f8255cf9eee3cdc", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1d5c4a77fb33cab7bf8f9d2edc6dd26b09ef65f3/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d5c4a77fb33cab7bf8f9d2edc6dd26b09ef65f3/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=1d5c4a77fb33cab7bf8f9d2edc6dd26b09ef65f3", "patch": "@@ -11,6 +11,7 @@ use hir_def::{\n     AssocContainerId, FieldId, Lookup,\n };\n use hir_expand::name::{name, Name};\n+use stdx::always;\n use syntax::ast::RangeOp;\n \n use crate::{\n@@ -936,7 +937,9 @@ impl<'a> InferenceContext<'a> {\n             let def: CallableDefId = from_chalk(self.db, *fn_def);\n             let generic_predicates = self.db.generic_predicates(def.into());\n             for predicate in generic_predicates.iter() {\n-                let predicate = predicate.clone().subst(parameters);\n+                let (predicate, binders) =\n+                    predicate.clone().subst(parameters).into_value_and_skipped_binders();\n+                always!(binders == 0); // quantified where clauses not yet handled\n                 self.obligations.push(predicate.cast(&Interner));\n             }\n             // add obligation for trait implementation, if this is a trait method"}, {"sha": "90b5b17e2a411fbfdd86b906ab5a0cf918fd74f2", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1d5c4a77fb33cab7bf8f9d2edc6dd26b09ef65f3/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d5c4a77fb33cab7bf8f9d2edc6dd26b09ef65f3/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=1d5c4a77fb33cab7bf8f9d2edc6dd26b09ef65f3", "patch": "@@ -518,6 +518,10 @@ impl<T> Binders<T> {\n     pub fn skip_binders(&self) -> &T {\n         &self.value\n     }\n+\n+    pub fn into_value_and_skipped_binders(self) -> (T, usize) {\n+        (self.value, self.num_binders)\n+    }\n }\n \n impl<T: Clone> Binders<&T> {\n@@ -985,15 +989,14 @@ impl Ty {\n                             .generic_predicates(id.parent)\n                             .into_iter()\n                             .map(|pred| pred.clone().subst(&substs))\n-                            .filter(|wc| match &wc {\n+                            .filter(|wc| match &wc.skip_binders() {\n                                 WhereClause::Implemented(tr) => tr.self_type_parameter() == self,\n                                 WhereClause::AliasEq(AliasEq {\n                                     alias: AliasTy::Projection(proj),\n                                     ty: _,\n                                 }) => proj.self_type_parameter() == self,\n                                 _ => false,\n                             })\n-                            .map(Binders::wrap_empty)\n                             .collect_vec();\n \n                         Some(predicates)"}, {"sha": "f60cec649b4104c4cac1aede64db65d251526b62", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1d5c4a77fb33cab7bf8f9d2edc6dd26b09ef65f3/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d5c4a77fb33cab7bf8f9d2edc6dd26b09ef65f3/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=1d5c4a77fb33cab7bf8f9d2edc6dd26b09ef65f3", "patch": "@@ -825,7 +825,7 @@ pub fn associated_type_shorthand_candidates<R>(\n             let predicates = db.generic_predicates_for_param(param_id);\n             let mut traits_: Vec<_> = predicates\n                 .iter()\n-                .filter_map(|pred| match &pred.value {\n+                .filter_map(|pred| match &pred.value.value {\n                     WhereClause::Implemented(tr) => Some(tr.clone()),\n                     _ => None,\n                 })\n@@ -898,10 +898,7 @@ pub(crate) fn field_types_query(\n pub(crate) fn generic_predicates_for_param_query(\n     db: &dyn HirDatabase,\n     param_id: TypeParamId,\n-) -> Arc<[Binders<WhereClause>]> {\n-    // FIXME: these binders are for the type parameters of the def. We need to\n-    // introduce another level of binders for quantified where clauses (for<'a>\n-    // ...)\n+) -> Arc<[Binders<QuantifiedWhereClause>]> {\n     let resolver = param_id.parent.resolver(db.upcast());\n     let ctx =\n         TyLoweringContext::new(db, &resolver).with_type_param_mode(TypeParamLoweringMode::Variable);\n@@ -920,7 +917,7 @@ pub(crate) fn generic_predicates_for_param_query(\n             WherePredicate::Lifetime { .. } => false,\n         })\n         .flat_map(|pred| {\n-            ctx.lower_where_predicate(pred, true).map(|p| Binders::new(generics.len(), p.value))\n+            ctx.lower_where_predicate(pred, true).map(|p| Binders::new(generics.len(), p))\n         })\n         .collect()\n }\n@@ -929,7 +926,7 @@ pub(crate) fn generic_predicates_for_param_recover(\n     _db: &dyn HirDatabase,\n     _cycle: &[String],\n     _param_id: &TypeParamId,\n-) -> Arc<[Binders<WhereClause>]> {\n+) -> Arc<[Binders<QuantifiedWhereClause>]> {\n     Arc::new([])\n }\n \n@@ -984,18 +981,15 @@ pub(crate) fn trait_environment_query(\n pub(crate) fn generic_predicates_query(\n     db: &dyn HirDatabase,\n     def: GenericDefId,\n-) -> Arc<[Binders<WhereClause>]> {\n-    // FIXME: these binders are for the type parameters of the def. We need to\n-    // introduce another level of binders for quantified where clauses (for<'a>\n-    // ...)\n+) -> Arc<[Binders<QuantifiedWhereClause>]> {\n     let resolver = def.resolver(db.upcast());\n     let ctx =\n         TyLoweringContext::new(db, &resolver).with_type_param_mode(TypeParamLoweringMode::Variable);\n     let generics = generics(db.upcast(), def);\n     resolver\n         .where_predicates_in_scope()\n         .flat_map(|pred| {\n-            ctx.lower_where_predicate(pred, false).map(|p| Binders::new(generics.len(), p.value))\n+            ctx.lower_where_predicate(pred, false).map(|p| Binders::new(generics.len(), p))\n         })\n         .collect()\n }"}, {"sha": "7209dd14ec9e555cd62f7dae239a0754686539ad", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d5c4a77fb33cab7bf8f9d2edc6dd26b09ef65f3/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d5c4a77fb33cab7bf8f9d2edc6dd26b09ef65f3/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=1d5c4a77fb33cab7bf8f9d2edc6dd26b09ef65f3", "patch": "@@ -537,7 +537,7 @@ pub(super) fn convert_where_clauses(\n     let generic_predicates = db.generic_predicates(def);\n     let mut result = Vec::with_capacity(generic_predicates.len());\n     for pred in generic_predicates.iter() {\n-        result.push(crate::Binders::wrap_empty(pred.clone().subst(substs)).to_chalk(db));\n+        result.push(pred.clone().subst(substs).to_chalk(db));\n     }\n     result\n }"}, {"sha": "19874e42b130d0171edf0fd94ffc4101ee65774d", "filename": "crates/hir_ty/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d5c4a77fb33cab7bf8f9d2edc6dd26b09ef65f3/crates%2Fhir_ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d5c4a77fb33cab7bf8f9d2edc6dd26b09ef65f3/crates%2Fhir_ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Futils.rs?ref=1d5c4a77fb33cab7bf8f9d2edc6dd26b09ef65f3", "patch": "@@ -63,7 +63,7 @@ fn direct_super_trait_refs(db: &dyn HirDatabase, trait_ref: &TraitRef) -> Vec<Tr\n     db.generic_predicates_for_param(trait_self)\n         .iter()\n         .filter_map(|pred| {\n-            pred.as_ref().filter_map(|pred| match pred {\n+            pred.as_ref().filter_map(|pred| match pred.skip_binders() {\n                 WhereClause::Implemented(tr) => Some(tr.clone()),\n                 _ => None,\n             })"}]}