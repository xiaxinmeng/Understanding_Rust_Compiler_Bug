{"sha": "db0a5a105666ee4dffd0ab7cda9e0550836beb4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiMGE1YTEwNTY2NmVlNGRmZmQwYWI3Y2RhOWUwNTUwODM2YmViNGM=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-03-25T01:51:16Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-04-14T01:48:55Z"}, "message": "Improve span label", "tree": {"sha": "cdde91ce419e5362583e7d3e8a4da2756ebfa81a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdde91ce419e5362583e7d3e8a4da2756ebfa81a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db0a5a105666ee4dffd0ab7cda9e0550836beb4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db0a5a105666ee4dffd0ab7cda9e0550836beb4c", "html_url": "https://github.com/rust-lang/rust/commit/db0a5a105666ee4dffd0ab7cda9e0550836beb4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db0a5a105666ee4dffd0ab7cda9e0550836beb4c/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a40ec132621225f3d7e373d6630eb45f862fe39b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a40ec132621225f3d7e373d6630eb45f862fe39b", "html_url": "https://github.com/rust-lang/rust/commit/a40ec132621225f3d7e373d6630eb45f862fe39b"}], "stats": {"total": 40, "additions": 24, "deletions": 16}, "files": [{"sha": "7d43a2273fed9e6e7f4a2cb325bb322e5e530737", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/db0a5a105666ee4dffd0ab7cda9e0550836beb4c/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db0a5a105666ee4dffd0ab7cda9e0550836beb4c/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=db0a5a105666ee4dffd0ab7cda9e0550836beb4c", "patch": "@@ -10,7 +10,7 @@ use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n-use rustc_hir::Node;\n+use rustc_hir::{GeneratorKind, AsyncGeneratorKind, Node};\n use rustc_middle::ty::TypeckTables;\n use rustc_middle::ty::{\n     self, AdtKind, DefIdTree, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness,\n@@ -1319,15 +1319,23 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             let original_span = err.span.primary_span().unwrap();\n             let mut span = MultiSpan::from_span(original_span);\n \n-            let message = if let Some(name) = outer_generator\n-                .and_then(|generator_did| self.tcx.parent(generator_did))\n-                .and_then(|parent_did| hir.as_local_hir_id(parent_did))\n-                .and_then(|parent_hir_id| hir.opt_name(parent_hir_id))\n-            {\n-                format!(\"future returned by `{}` is not {}\", name, trait_name)\n-            } else {\n-                format!(\"future is not {}\", trait_name)\n-            };\n+            let message = outer_generator\n+                .and_then(|generator_did| Some(\n+                    match self.tcx.generator_kind(generator_did).unwrap() {\n+                        GeneratorKind::Gen => format!(\"generator is not {}\", trait_name),\n+                        GeneratorKind::Async(AsyncGeneratorKind::Fn) =>\n+                            self.tcx.parent(generator_did)\n+                                .and_then(|parent_did| hir.as_local_hir_id(parent_did))\n+                                .and_then(|parent_hir_id| hir.opt_name(parent_hir_id))\n+                                .map(|name| format!(\"future returned by `{}` is not {}\",\n+                                                    name, trait_name))?,\n+                        GeneratorKind::Async(AsyncGeneratorKind::Block) =>\n+                            format!(\"future created by async block is not {}\", trait_name),\n+                        GeneratorKind::Async(AsyncGeneratorKind::Closure) =>\n+                            format!(\"future created by async closure is not {}\", trait_name),\n+                    }\n+                ))\n+                .unwrap_or_else(|| format!(\"future is not {}\", trait_name));\n \n             span.push_span_label(original_span, message);\n             err.set_span(span);"}, {"sha": "edde947764afe263ed71c35f6ce6efd545280c7e", "filename": "src/test/ui/async-await/issue-64130-4-async-move.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db0a5a105666ee4dffd0ab7cda9e0550836beb4c/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db0a5a105666ee4dffd0ab7cda9e0550836beb4c/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.stderr?ref=db0a5a105666ee4dffd0ab7cda9e0550836beb4c", "patch": "@@ -2,7 +2,7 @@ error: future cannot be sent between threads safely\n   --> $DIR/issue-64130-4-async-move.rs:15:17\n    |\n LL |   pub fn foo() -> impl Future + Send {\n-   |                   ^^^^^^^^^^^^^^^^^^ future returned by `foo` is not `Send`\n+   |                   ^^^^^^^^^^^^^^^^^^ future created by async block is not `Send`\n ...\n LL | /     async move {\n LL | |         match client.status() {"}, {"sha": "cec40b5510148f370cee2aaa3632b48e8cce4cdc", "filename": "src/test/ui/async-await/issue-67252-unnamed-future.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db0a5a105666ee4dffd0ab7cda9e0550836beb4c/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db0a5a105666ee4dffd0ab7cda9e0550836beb4c/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr?ref=db0a5a105666ee4dffd0ab7cda9e0550836beb4c", "patch": "@@ -5,7 +5,7 @@ LL | fn spawn<T: Send>(_: T) {}\n    |             ---- required by this bound in `spawn`\n ...\n LL |     spawn(async {\n-   |     ^^^^^ future is not `Send`\n+   |     ^^^^^ future created by async block is not `Send`\n    |\n    = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `*mut ()`\n note: future is not `Send` as this value is used across an await"}, {"sha": "9f901901e207efcda57c1196049b42e098906d59", "filename": "src/test/ui/async-await/issue-68112.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db0a5a105666ee4dffd0ab7cda9e0550836beb4c/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db0a5a105666ee4dffd0ab7cda9e0550836beb4c/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr?ref=db0a5a105666ee4dffd0ab7cda9e0550836beb4c", "patch": "@@ -5,7 +5,7 @@ LL | fn require_send(_: impl Send) {}\n    |    ------------         ---- required by this bound in `require_send`\n ...\n LL |     require_send(send_fut);\n-   |     ^^^^^^^^^^^^ future returned by `test1` is not `Send`\n+   |     ^^^^^^^^^^^^ future created by async block is not `Send`\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::cell::RefCell<i32>`\n note: future is not `Send` as this value is used across an await"}, {"sha": "a04ae7220ec8833150ba06df23c077606b27ff39", "filename": "src/test/ui/async-await/issues/issue-65436-raw-ptr-not-send.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db0a5a105666ee4dffd0ab7cda9e0550836beb4c/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db0a5a105666ee4dffd0ab7cda9e0550836beb4c/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr?ref=db0a5a105666ee4dffd0ab7cda9e0550836beb4c", "patch": "@@ -5,7 +5,7 @@ LL | fn assert_send<T: Send>(_: T) {}\n    |                   ---- required by this bound in `assert_send`\n ...\n LL |     assert_send(async {\n-   |     ^^^^^^^^^^^ future returned by `main` is not `Send`\n+   |     ^^^^^^^^^^^ future created by async block is not `Send`\n    |\n    = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `*const u8`\n note: future is not `Send` as this value is used across an await"}, {"sha": "8950ff707d4aa8d386c911a43c00111176babad1", "filename": "src/test/ui/generator/issue-68112.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db0a5a105666ee4dffd0ab7cda9e0550836beb4c/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db0a5a105666ee4dffd0ab7cda9e0550836beb4c/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr?ref=db0a5a105666ee4dffd0ab7cda9e0550836beb4c", "patch": "@@ -5,7 +5,7 @@ LL | fn require_send(_: impl Send) {}\n    |    ------------         ---- required by this bound in `require_send`\n ...\n LL |     require_send(send_gen);\n-   |     ^^^^^^^^^^^^ future returned by `test1` is not `Send`\n+   |     ^^^^^^^^^^^^ generator is not `Send`\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::cell::RefCell<i32>`\n note: future is not `Send` as this value is used across an yield"}, {"sha": "0ce9770f7aa6a736a61cad6d3402a0f688d23a7f", "filename": "src/test/ui/generator/not-send-sync.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db0a5a105666ee4dffd0ab7cda9e0550836beb4c/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db0a5a105666ee4dffd0ab7cda9e0550836beb4c/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr?ref=db0a5a105666ee4dffd0ab7cda9e0550836beb4c", "patch": "@@ -18,7 +18,7 @@ LL |     fn assert_sync<T: Sync>(_: T) {}\n    |                       ---- required by this bound in `main::assert_sync`\n ...\n LL |     assert_sync(|| {\n-   |     ^^^^^^^^^^^ future returned by `main` is not `Sync`\n+   |     ^^^^^^^^^^^ generator is not `Sync`\n    |\n    = help: within `[generator@$DIR/not-send-sync.rs:9:17: 13:6 {std::cell::Cell<i32>, ()}]`, the trait `std::marker::Sync` is not implemented for `std::cell::Cell<i32>`\n note: future is not `Sync` as this value is used across an yield"}]}