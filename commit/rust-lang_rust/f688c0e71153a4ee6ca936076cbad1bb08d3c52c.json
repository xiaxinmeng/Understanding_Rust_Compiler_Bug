{"sha": "f688c0e71153a4ee6ca936076cbad1bb08d3c52c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ODhjMGU3MTE1M2E0ZWU2Y2E5MzYwNzZjYmFkMWJiMDhkM2M1MmM=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-10-07T22:18:36Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-10-07T22:18:36Z"}, "message": "Rollup merge of #28856 - chills42:master, r=steveklabnik\n\nThis is to address issue #28803 by improving some of the references to closures, to explain what they are more clearly, while hopefully still being concise.\r\n\r\nr? @steveklabnik", "tree": {"sha": "3cc2213872658d650471bc2ee3b450dfc8f21bf2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cc2213872658d650471bc2ee3b450dfc8f21bf2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f688c0e71153a4ee6ca936076cbad1bb08d3c52c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f688c0e71153a4ee6ca936076cbad1bb08d3c52c", "html_url": "https://github.com/rust-lang/rust/commit/f688c0e71153a4ee6ca936076cbad1bb08d3c52c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f688c0e71153a4ee6ca936076cbad1bb08d3c52c/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18c66b5afff6b1ba860357c07fac963ea9b50b6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/18c66b5afff6b1ba860357c07fac963ea9b50b6e", "html_url": "https://github.com/rust-lang/rust/commit/18c66b5afff6b1ba860357c07fac963ea9b50b6e"}, {"sha": "7895ec2d5752c5a5dacd17d463e401d9e85fac13", "url": "https://api.github.com/repos/rust-lang/rust/commits/7895ec2d5752c5a5dacd17d463e401d9e85fac13", "html_url": "https://github.com/rust-lang/rust/commit/7895ec2d5752c5a5dacd17d463e401d9e85fac13"}], "stats": {"total": 45, "additions": 24, "deletions": 21}, "files": [{"sha": "7d4452a4c847047d9478913034bcef43148ff17b", "filename": "src/doc/trpl/closures.md", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/f688c0e71153a4ee6ca936076cbad1bb08d3c52c/src%2Fdoc%2Ftrpl%2Fclosures.md", "raw_url": "https://github.com/rust-lang/rust/raw/f688c0e71153a4ee6ca936076cbad1bb08d3c52c/src%2Fdoc%2Ftrpl%2Fclosures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fclosures.md?ref=f688c0e71153a4ee6ca936076cbad1bb08d3c52c", "patch": "@@ -1,9 +1,10 @@\n % Closures\n \n-Rust not only has named functions, but anonymous functions as well. Anonymous\n-functions that have an associated environment are called \u2018closures\u2019, because they\n-close over an environment. Rust has a really great implementation of them, as\n-we\u2019ll see.\n+Sometimes it is useful to wrap up a function and _free variables_ for better\n+clarity and reuse. The free variables that can be used come from the\n+enclosing scope and are \u2018closed over\u2019 when used in the function. From this, we\n+get the name \u2018closures\u2019 and Rust provides a really great implementation of\n+them, as we\u2019ll see.\n \n # Syntax\n \n@@ -34,7 +35,7 @@ assert_eq!(4, plus_two(2));\n ```\n \n You\u2019ll notice a few things about closures that are a bit different from regular\n-functions defined with `fn`. The first is that we did not need to\n+named functions defined with `fn`. The first is that we did not need to\n annotate the types of arguments the closure takes or the values it returns. We\n can:\n \n@@ -44,14 +45,15 @@ let plus_one = |x: i32| -> i32 { x + 1 };\n assert_eq!(2, plus_one(1));\n ```\n \n-But we don\u2019t have to. Why is this? Basically, it was chosen for ergonomic reasons.\n-While specifying the full type for named functions is helpful with things like\n-documentation and type inference, the types of closures are rarely documented\n-since they\u2019re anonymous, and they don\u2019t cause the kinds of error-at-a-distance\n-problems that inferring named function types can.\n+But we don\u2019t have to. Why is this? Basically, it was chosen for ergonomic\n+reasons. While specifying the full type for named functions is helpful with\n+things like documentation and type inference, the full type signatures of\n+closures are rarely documented since they\u2019re anonymous, and they don\u2019t cause\n+the kinds of error-at-a-distance problems that inferring named function types\n+can.\n \n-The second is that the syntax is similar, but a bit different. I\u2019ve added spaces\n-here for easier comparison:\n+The second is that the syntax is similar, but a bit different. I\u2019ve added\n+spaces here for easier comparison:\n \n ```rust\n fn  plus_one_v1   (x: i32) -> i32 { x + 1 }\n@@ -63,8 +65,8 @@ Small differences, but they\u2019re similar.\n \n # Closures and their environment\n \n-Closures are called such because they \u2018close over their environment\u2019. It\n-looks like this:\n+The environment for a closure can include bindings from its enclosing scope in\n+addition to parameters and local bindings. It looks like this:\n \n ```rust\n let num = 5;\n@@ -197,9 +199,10 @@ frame.  Without `move`, a closure may be tied to the stack frame that created\n it, while a `move` closure is self-contained. This means that you cannot\n generally return a non-`move` closure from a function, for example.\n \n-But before we talk about taking and returning closures, we should talk some more\n-about the way that closures are implemented. As a systems language, Rust gives\n-you tons of control over what your code does, and closures are no different.\n+But before we talk about taking and returning closures, we should talk some\n+more about the way that closures are implemented. As a systems language, Rust\n+gives you tons of control over what your code does, and closures are no\n+different.\n \n # Closure implementation\n \n@@ -288,9 +291,9 @@ isn\u2019t interesting. The next part is:\n #   some_closure(1) }\n ```\n \n-Because `Fn` is a trait, we can bound our generic with it. In this case, our closure\n-takes a `i32` as an argument and returns an `i32`, and so the generic bound we use\n-is `Fn(i32) -> i32`.\n+Because `Fn` is a trait, we can bound our generic with it. In this case, our\n+closure takes a `i32` as an argument and returns an `i32`, and so the generic\n+bound we use is `Fn(i32) -> i32`.\n \n There\u2019s one other key point here: because we\u2019re bounding a generic with a\n trait, this will get monomorphized, and therefore, we\u2019ll be doing static\n@@ -452,7 +455,7 @@ autogenerated name.\n The error also points out that the return type is expected to be a reference,\n but what we are trying to return is not. Further, we cannot directly assign a\n `'static` lifetime to an object. So we'll take a different approach and return\n-a \"trait object\" by `Box`ing up the `Fn`. This _almost_ works:\n+a \u2018trait object\u2019 by `Box`ing up the `Fn`. This _almost_ works:\n \n ```rust,ignore\n fn factory() -> Box<Fn(i32) -> i32> {"}]}