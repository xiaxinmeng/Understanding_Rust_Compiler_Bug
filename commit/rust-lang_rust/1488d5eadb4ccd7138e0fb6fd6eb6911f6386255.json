{"sha": "1488d5eadb4ccd7138e0fb6fd6eb6911f6386255", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0ODhkNWVhZGI0Y2NkNzEzOGUwZmI2ZmQ2ZWI2OTExZjYzODYyNTU=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-06-23T00:32:55Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-06-23T00:32:55Z"}, "message": "Merge pull request #90 from marcusklaas/empty-imports\n\nRemove empty list imports", "tree": {"sha": "20f3b06141f17746ab1143734ba10c72d17cce18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20f3b06141f17746ab1143734ba10c72d17cce18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1488d5eadb4ccd7138e0fb6fd6eb6911f6386255", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1488d5eadb4ccd7138e0fb6fd6eb6911f6386255", "html_url": "https://github.com/rust-lang/rust/commit/1488d5eadb4ccd7138e0fb6fd6eb6911f6386255", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1488d5eadb4ccd7138e0fb6fd6eb6911f6386255/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58df4664bb144514880917cbfdab40af290b7350", "url": "https://api.github.com/repos/rust-lang/rust/commits/58df4664bb144514880917cbfdab40af290b7350", "html_url": "https://github.com/rust-lang/rust/commit/58df4664bb144514880917cbfdab40af290b7350"}, {"sha": "27d6558964dd9e5704d23a722d3ae8598bd3c13c", "url": "https://api.github.com/repos/rust-lang/rust/commits/27d6558964dd9e5704d23a722d3ae8598bd3c13c", "html_url": "https://github.com/rust-lang/rust/commit/27d6558964dd9e5704d23a722d3ae8598bd3c13c"}], "stats": {"total": 42, "additions": 27, "deletions": 15}, "files": [{"sha": "d4fe81218b8513b43d71554364ea47bae12b0ceb", "filename": "src/imports.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1488d5eadb4ccd7138e0fb6fd6eb6911f6386255/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1488d5eadb4ccd7138e0fb6fd6eb6911f6386255/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=1488d5eadb4ccd7138e0fb6fd6eb6911f6386255", "patch": "@@ -16,8 +16,6 @@ use syntax::ast;\n use syntax::parse::token;\n use syntax::print::pprust;\n \n-\n-// TODO remove empty lists (if they're even possible)\n // TODO (some day) remove unused imports, expand globs, compress many single imports into a list import\n \n fn rewrite_single_use_list(path_str: String, vpi: ast::PathListItem, vis: &str) -> String {\n@@ -41,18 +39,21 @@ fn rewrite_single_use_list(path_str: String, vpi: ast::PathListItem, vis: &str)\n \n impl<'a> FmtVisitor<'a> {\n     // Basically just pretty prints a multi-item import.\n+    // Returns None when the import can be removed.\n     pub fn rewrite_use_list(&mut self,\n                             block_indent: usize,\n                             one_line_budget: usize, // excluding indentation\n                             multi_line_budget: usize,\n                             path: &ast::Path,\n                             path_list: &[ast::PathListItem],\n-                            visibility: ast::Visibility) -> String {\n+                            visibility: ast::Visibility) -> Option<String> {\n         let path_str = pprust::path_to_string(path);\n         let vis = format_visibility(visibility);\n \n-        if path_list.len() == 1 {\n-            return rewrite_single_use_list(path_str, path_list[0], vis);\n+        match path_list.len() {\n+            0 => return None,\n+            1 => return Some(rewrite_single_use_list(path_str, path_list[0], vis)),\n+            _ => ()\n         }\n \n         // 2 = ::\n@@ -107,10 +108,10 @@ impl<'a> FmtVisitor<'a> {\n                 ast::PathListItem_::PathListMod{ .. } => None,\n             }\n         })).collect();\n-        if path_str.len() == 0 {\n+        Some(if path_str.len() == 0 {\n             format!(\"{}use {{{}}};\", vis, write_list(&items, &fmt))\n         } else {\n             format!(\"{}use {}::{{{}}};\", vis, path_str, write_list(&items, &fmt))\n-        }\n+        })\n     }\n }"}, {"sha": "e70ecc95b4fe67270ca972eccd091272fdc01940", "filename": "src/visitor.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1488d5eadb4ccd7138e0fb6fd6eb6911f6386255/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1488d5eadb4ccd7138e0fb6fd6eb6911f6386255/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=1488d5eadb4ccd7138e0fb6fd6eb6911f6386255", "patch": "@@ -159,19 +159,30 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n \n         match item.node {\n             ast::Item_::ItemUse(ref vp) => {\n-                self.format_missing_with_indent(item.span.lo);\n                 match vp.node {\n                     ast::ViewPath_::ViewPathList(ref path, ref path_list) => {\n                         let block_indent = self.block_indent;\n                         let one_line_budget = config!(max_width) - block_indent;\n                         let multi_line_budget = config!(ideal_width) - block_indent;\n-                        let new_str = self.rewrite_use_list(block_indent,\n-                                                            one_line_budget,\n-                                                            multi_line_budget,\n-                                                            path,\n-                                                            path_list,\n-                                                            item.vis);\n-                        self.changes.push_str_span(item.span, &new_str);\n+                        let formatted = self.rewrite_use_list(block_indent,\n+                                                              one_line_budget,\n+                                                              multi_line_budget,\n+                                                              path,\n+                                                              path_list,\n+                                                              item.vis);\n+\n+                        if let Some(new_str) = formatted {\n+                            self.format_missing_with_indent(item.span.lo);\n+                            self.changes.push_str_span(item.span, &new_str);\n+                        } else {\n+                            // Format up to last newline\n+                            let span = codemap::mk_sp(self.last_pos, item.span.lo);\n+                            let span_end = match self.snippet(span).rfind('\\n') {\n+                                Some(offset) => self.last_pos + BytePos(offset as u32),\n+                                None => item.span.lo\n+                            };\n+                            self.format_missing(span_end);\n+                        }\n                         self.last_pos = item.span.hi;\n                     }\n                     ast::ViewPath_::ViewPathGlob(_) => {"}]}