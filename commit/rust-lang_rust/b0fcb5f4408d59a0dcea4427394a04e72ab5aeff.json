{"sha": "b0fcb5f4408d59a0dcea4427394a04e72ab5aeff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwZmNiNWY0NDA4ZDU5YTBkY2VhNDQyNzM5NGEwNGU3MmFiNWFlZmY=", "commit": {"author": {"name": "Tomas Gavenciak", "email": "gavento@ucw.cz", "date": "2018-03-27T17:45:44Z"}, "committer": {"name": "Tomas Gavenciak", "email": "gavento@ucw.cz", "date": "2018-05-02T20:17:31Z"}, "message": "Extend tests for RFC1598 (GAT)", "tree": {"sha": "ce967ae2bf3c199a4fae736e655f6b60115226ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce967ae2bf3c199a4fae736e655f6b60115226ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0fcb5f4408d59a0dcea4427394a04e72ab5aeff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0fcb5f4408d59a0dcea4427394a04e72ab5aeff", "html_url": "https://github.com/rust-lang/rust/commit/b0fcb5f4408d59a0dcea4427394a04e72ab5aeff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0fcb5f4408d59a0dcea4427394a04e72ab5aeff/comments", "author": {"login": "gavento", "id": 956446, "node_id": "MDQ6VXNlcjk1NjQ0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/956446?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gavento", "html_url": "https://github.com/gavento", "followers_url": "https://api.github.com/users/gavento/followers", "following_url": "https://api.github.com/users/gavento/following{/other_user}", "gists_url": "https://api.github.com/users/gavento/gists{/gist_id}", "starred_url": "https://api.github.com/users/gavento/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gavento/subscriptions", "organizations_url": "https://api.github.com/users/gavento/orgs", "repos_url": "https://api.github.com/users/gavento/repos", "events_url": "https://api.github.com/users/gavento/events{/privacy}", "received_events_url": "https://api.github.com/users/gavento/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gavento", "id": 956446, "node_id": "MDQ6VXNlcjk1NjQ0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/956446?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gavento", "html_url": "https://github.com/gavento", "followers_url": "https://api.github.com/users/gavento/followers", "following_url": "https://api.github.com/users/gavento/following{/other_user}", "gists_url": "https://api.github.com/users/gavento/gists{/gist_id}", "starred_url": "https://api.github.com/users/gavento/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gavento/subscriptions", "organizations_url": "https://api.github.com/users/gavento/orgs", "repos_url": "https://api.github.com/users/gavento/repos", "events_url": "https://api.github.com/users/gavento/events{/privacy}", "received_events_url": "https://api.github.com/users/gavento/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3eadd754730923936ca2ce9c2d303fcac9af099f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3eadd754730923936ca2ce9c2d303fcac9af099f", "html_url": "https://github.com/rust-lang/rust/commit/3eadd754730923936ca2ce9c2d303fcac9af099f"}], "stats": {"total": 281, "additions": 279, "deletions": 2}, "files": [{"sha": "4ea2c828831337fe86ad13c0bfb80a86d2a08ae0", "filename": "src/test/ui/rfc1598-generic-associated-types/collections.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/b0fcb5f4408d59a0dcea4427394a04e72ab5aeff/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0fcb5f4408d59a0dcea4427394a04e72ab5aeff/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.rs?ref=b0fcb5f4408d59a0dcea4427394a04e72ab5aeff", "patch": "@@ -0,0 +1,85 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(generic_associated_types)]\n+#![feature(associated_type_defaults)]\n+\n+//FIXME(#44265): \"lifetime parameters are not allowed on this type\" errors will be addressed in a\n+//follow-up PR\n+\n+// A Collection trait and collection families.\n+// Based on http://smallcultfollowing.com/babysteps/blog/2016/11/03/associated-type-constructors-part-2-family-traits/\n+\n+trait Collection<T> {\n+    fn empty() -> Self;\n+    fn add(&mut self, value: T);\n+    fn iterate<'iter>(&'iter self) -> Self::Iter<'iter>;\n+    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+    type Iter<'iter>: Iterator<Item=&'iter T>;\n+    type Family: CollectionFamily;\n+    // Test associated type defaults with parameters\n+    type Sibling<U>: Collection<U> = <<Self as Collection<T>>::Family as CollectionFamily>::Member<U>;\n+    //~^ ERROR type parameters are not allowed on this type [E0109]\n+}\n+\n+trait CollectionFamily {\n+    type Member<T>: Collection<T, Family = Self>;\n+}\n+\n+struct VecFamily;\n+\n+impl CollectionFamily for VecFamily {\n+    type Member<T> = Vec<T>;\n+}\n+\n+impl<T> Collection<T> for Vec<T> {\n+    fn empty() -> Self {\n+        Vec::new()\n+    }\n+    fn add(&mut self, value: T) {\n+        self.push(value)\n+    }\n+    fn iterate<'iter>(&'iter self) -> Self::Iter<'iter> {\n+    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+        self.iter()\n+    }\n+    type Iter<'iter> = std::slice::Iter<'iter, T>;\n+    type Family = VecFamily;\n+}\n+\n+fn floatify<C>(ints: &C) -> <<C as Collection<i32>>::Family as CollectionFamily>::Member<f32>\n+    //~^ ERROR type parameters are not allowed on this type [E0109]\n+    where C: Collection<i32> {\n+    let mut res = C::Family::Member::<f32>::empty();\n+    for &v in ints.iterate() {\n+        res.add(v as f32);\n+    }\n+    res\n+}\n+\n+fn floatify_sibling<C>(ints: &C) -> <C as Collection<i32>>::Sibling<f32>\n+    //~^ ERROR type parameters are not allowed on this type [E0109]\n+    where C: Collection<i32> {\n+    let mut res = C::Family::Member::<f32>::empty();\n+    for &v in ints.iterate() {\n+        res.add(v as f32);\n+    }\n+    res\n+}\n+\n+fn use_floatify() {\n+    let a = vec![1i32, 2, 3];\n+    let b = floatify(a);\n+    println!(\"{}\", b.iterate().next());\n+    let c = floatify_sibling(a);\n+    println!(\"{}\", c.iterate().next());\n+}\n+\n+fn main() {}\n\\ No newline at end of file"}, {"sha": "6aa7aa993fd254d9c13d5d5eb84ecd26fb48f372", "filename": "src/test/ui/rfc1598-generic-associated-types/collections.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b0fcb5f4408d59a0dcea4427394a04e72ab5aeff/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0fcb5f4408d59a0dcea4427394a04e72ab5aeff/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.stderr?ref=b0fcb5f4408d59a0dcea4427394a04e72ab5aeff", "patch": "@@ -0,0 +1,34 @@\n+error[E0109]: type parameters are not allowed on this type\n+  --> $DIR/collections.rs:57:90\n+   |\n+LL | fn floatify<C>(ints: &C) -> <<C as Collection<i32>>::Family as CollectionFamily>::Member<f32>\n+   |                                                                                          ^^^ type parameter not allowed\n+\n+error[E0109]: type parameters are not allowed on this type\n+  --> $DIR/collections.rs:67:69\n+   |\n+LL | fn floatify_sibling<C>(ints: &C) -> <C as Collection<i32>>::Sibling<f32>\n+   |                                                                     ^^^ type parameter not allowed\n+\n+error[E0110]: lifetime parameters are not allowed on this type\n+  --> $DIR/collections.rs:23:50\n+   |\n+LL |     fn iterate<'iter>(&'iter self) -> Self::Iter<'iter>;\n+   |                                                  ^^^^^ lifetime parameter not allowed on this type\n+\n+error[E0109]: type parameters are not allowed on this type\n+  --> $DIR/collections.rs:28:100\n+   |\n+LL |     type Sibling<U>: Collection<U> = <<Self as Collection<T>>::Family as CollectionFamily>::Member<U>;\n+   |                                                                                                    ^ type parameter not allowed\n+\n+error[E0110]: lifetime parameters are not allowed on this type\n+  --> $DIR/collections.rs:49:50\n+   |\n+LL |     fn iterate<'iter>(&'iter self) -> Self::Iter<'iter> {\n+   |                                                  ^^^^^ lifetime parameter not allowed on this type\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors occurred: E0109, E0110.\n+For more information about an error, try `rustc --explain E0109`."}, {"sha": "b79aa6179adfd650b7e1ed317fbb58cebe63af41", "filename": "src/test/ui/rfc1598-generic-associated-types/iterable.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b0fcb5f4408d59a0dcea4427394a04e72ab5aeff/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0fcb5f4408d59a0dcea4427394a04e72ab5aeff/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.rs?ref=b0fcb5f4408d59a0dcea4427394a04e72ab5aeff", "patch": "@@ -29,4 +29,38 @@ trait Iterable {\n     //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n }\n \n+// Impl for struct type\n+impl<T> Iterable for Vec<T> {\n+    type Item<'a> = &'a T;\n+    type Iter<'a> = std::slice::Iter<'a, T>;\n+    type Iter2<'a> = &'a T;\n+    // gavento: ^^^ Not 100% sure about the intention here\n+    fn iter<'a>(&'a self) -> Self::Iter<'a> {\n+    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+        self.iter()\n+    }\n+}\n+\n+// Impl for a primitive type\n+impl<T> Iterable for [T] {\n+    type Item<'a> = &'a T;\n+    type Iter<'a> = std::slice::Iter<'a, T>;\n+    type Iter2<'a> = &'a T;\n+    // gavento: ^^^ Not 100% sure about the intention here\n+    fn iter<'a>(&'a self) -> Self::Iter<'a> {\n+    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+        self.iter()\n+    }\n+}\n+\n+fn make_iter<'a, I: Iterable>(it: &'a I) -> I::Iter<'a> {\n+    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+    it.iter()\n+}\n+\n+fn get_first<'a, I: Iterable>(it: &'a I) -> Option<I::Item<'a>> {\n+    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+    it.iter().next()\n+}\n+\n fn main() {}"}, {"sha": "34266dd3c512fbc66fbdb493ec6c231d53a363e5", "filename": "src/test/ui/rfc1598-generic-associated-types/iterable.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b0fcb5f4408d59a0dcea4427394a04e72ab5aeff/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0fcb5f4408d59a0dcea4427394a04e72ab5aeff/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.stderr?ref=b0fcb5f4408d59a0dcea4427394a04e72ab5aeff", "patch": "@@ -10,12 +10,36 @@ error[E0110]: lifetime parameters are not allowed on this type\n LL |     type Iter2<'a>: Deref<Target = <Self::Iter<'a> as Iterator>::Item>;\n    |                                                ^^ lifetime parameter not allowed on this type\n \n+error[E0110]: lifetime parameters are not allowed on this type\n+  --> $DIR/iterable.rs:56:53\n+   |\n+LL | fn make_iter<'a, I: Iterable>(it: &'a I) -> I::Iter<'a> {\n+   |                                                     ^^ lifetime parameter not allowed on this type\n+\n+error[E0110]: lifetime parameters are not allowed on this type\n+  --> $DIR/iterable.rs:61:60\n+   |\n+LL | fn get_first<'a, I: Iterable>(it: &'a I) -> Option<I::Item<'a>> {\n+   |                                                            ^^ lifetime parameter not allowed on this type\n+\n error[E0110]: lifetime parameters are not allowed on this type\n   --> $DIR/iterable.rs:28:41\n    |\n LL |     fn iter<'a>(&'a self) -> Self::Iter<'a>;\n    |                                         ^^ lifetime parameter not allowed on this type\n \n-error: aborting due to 3 previous errors\n+error[E0110]: lifetime parameters are not allowed on this type\n+  --> $DIR/iterable.rs:38:41\n+   |\n+LL |     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n+   |                                         ^^ lifetime parameter not allowed on this type\n+\n+error[E0110]: lifetime parameters are not allowed on this type\n+  --> $DIR/iterable.rs:50:41\n+   |\n+LL |     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n+   |                                         ^^ lifetime parameter not allowed on this type\n+\n+error: aborting due to 7 previous errors\n \n For more information about this error, try `rustc --explain E0110`."}, {"sha": "6e77ce2b3dd0cfddc4e8b720597cc887ba10911a", "filename": "src/test/ui/rfc1598-generic-associated-types/shadowing.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b0fcb5f4408d59a0dcea4427394a04e72ab5aeff/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fshadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0fcb5f4408d59a0dcea4427394a04e72ab5aeff/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fshadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fshadowing.rs?ref=b0fcb5f4408d59a0dcea4427394a04e72ab5aeff", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(generic_associated_types)]\n+\n+//FIXME(#44265): The lifetime shadowing and type parameter shadowing\n+// should cause an error. This will be addressed by a future PR.\n+// For now this compiles:\n+// must-compile-successfully\n+\n+trait Shadow<'a> {\n+    type Bar<'a>; // Error: shadowed lifetime\n+}\n+\n+trait NoShadow<'a> {\n+    type Bar<'b>; // OK\n+}\n+\n+impl<'a> NoShadow<'a> for &'a u32\n+{\n+    type Bar<'a> = i32; // Error: shadowed lifetime\n+}\n+\n+trait ShadowT<T> {\n+    type Bar<T>; // Error: shadowed type parameter\n+}\n+\n+trait NoShadowT<T> {\n+    type Bar<U>; // OK\n+}\n+\n+impl<T> NoShadowT<T> for Option<T>\n+{\n+    type Bar<T> = i32; // Error: shadowed type parameter\n+}\n+\n+fn main() {}"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/rfc1598-generic-associated-types/shadowing.stdout", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b0fcb5f4408d59a0dcea4427394a04e72ab5aeff/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fshadowing.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/b0fcb5f4408d59a0dcea4427394a04e72ab5aeff/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fshadowing.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fshadowing.stdout?ref=b0fcb5f4408d59a0dcea4427394a04e72ab5aeff"}, {"sha": "522ddb5dc135e36e162d34cc5bfb34e2f27f427b", "filename": "src/test/ui/rfc1598-generic-associated-types/streaming_iterator.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b0fcb5f4408d59a0dcea4427394a04e72ab5aeff/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0fcb5f4408d59a0dcea4427394a04e72ab5aeff/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.rs?ref=b0fcb5f4408d59a0dcea4427394a04e72ab5aeff", "patch": "@@ -35,4 +35,48 @@ struct Foo<T: StreamingIterator> {\n fn foo<T>(iter: T) where T: StreamingIterator, for<'a> T::Item<'a>: Display { /* ... */ }\n //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n \n+// Full example of enumerate iterator\n+\n+#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+struct StreamEnumerate<I> {\n+    iter: I,\n+    count: usize,\n+}\n+\n+impl<I: StreamingIterator> StreamingIterator for StreamEnumerate<I> {\n+    type Item<'a> = (usize, I::Item<'a>);\n+    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+    fn next<'a>(&'a self) -> Option<Self::Item<'a>> {\n+        //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+        match self.iter.next() {\n+            None => None,\n+            Some(val) => {\n+                let r = Some((self.count, val));\n+                self.count += 1;\n+                r\n+            }\n+        }\n+    }\n+}\n+\n+impl<I> StreamEnumerate<I> {\n+    pub fn new(iter: I) -> Self {\n+        StreamEnumerate {\n+            count: 0,\n+            iter: iter,\n+        }\n+    }\n+}\n+\n+fn test_stream_enumerate() {\n+    let v = vec![\"a\", \"b\", \"c\"];\n+    let se = StreamEnumerate::new(v.iter());\n+    let a: &str = se.next().unwrap().1;\n+    for (i, s) in se {\n+        println!(\"{} {}\", i, s);\n+    }\n+    println!(\"{}\", a);\n+}\n+\n+\n fn main() {}"}, {"sha": "607a4b8d57996e1cb0343783c379a9e4669093c8", "filename": "src/test/ui/rfc1598-generic-associated-types/streaming_iterator.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b0fcb5f4408d59a0dcea4427394a04e72ab5aeff/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0fcb5f4408d59a0dcea4427394a04e72ab5aeff/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.stderr?ref=b0fcb5f4408d59a0dcea4427394a04e72ab5aeff", "patch": "@@ -16,6 +16,18 @@ error[E0110]: lifetime parameters are not allowed on this type\n LL |     fn next<'a>(&'a self) -> Option<Self::Item<'a>>;\n    |                                                ^^ lifetime parameter not allowed on this type\n \n-error: aborting due to 3 previous errors\n+error[E0110]: lifetime parameters are not allowed on this type\n+  --> $DIR/streaming_iterator.rs:47:37\n+   |\n+LL |     type Item<'a> = (usize, I::Item<'a>);\n+   |                                     ^^ lifetime parameter not allowed on this type\n+\n+error[E0110]: lifetime parameters are not allowed on this type\n+  --> $DIR/streaming_iterator.rs:49:48\n+   |\n+LL |     fn next<'a>(&'a self) -> Option<Self::Item<'a>> {\n+   |                                                ^^ lifetime parameter not allowed on this type\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0110`."}]}