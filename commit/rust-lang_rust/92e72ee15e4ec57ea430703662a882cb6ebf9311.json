{"sha": "92e72ee15e4ec57ea430703662a882cb6ebf9311", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyZTcyZWUxNWU0ZWM1N2VhNDMwNzAzNjYyYTg4MmNiNmViZjkzMTE=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2015-03-25T16:07:46Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2015-03-25T16:07:46Z"}, "message": "Speed up reading/writing slices with #[inline]\n\nWhen built with `rustc -O`:\n\nbefore:\n\ntest bench_read_slice  ... bench:        68 ns/iter (+/- 56)\ntest bench_read_vec    ... bench:        78 ns/iter (+/- 21)\ntest bench_write_slice ... bench:       133 ns/iter (+/- 46)\ntest bench_write_vec   ... bench:       308 ns/iter (+/- 69)\n\nafter:\n\ntest bench_read_slice  ... bench:        32 ns/iter (+/- 10)\ntest bench_read_vec    ... bench:        32 ns/iter (+/- 8)\ntest bench_write_slice ... bench:        53 ns/iter (+/- 12)\ntest bench_write_vec   ... bench:       247 ns/iter (+/- 172)", "tree": {"sha": "ec429fe4fac07e90c03f9543ebc87d7822f1747f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec429fe4fac07e90c03f9543ebc87d7822f1747f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92e72ee15e4ec57ea430703662a882cb6ebf9311", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92e72ee15e4ec57ea430703662a882cb6ebf9311", "html_url": "https://github.com/rust-lang/rust/commit/92e72ee15e4ec57ea430703662a882cb6ebf9311", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92e72ee15e4ec57ea430703662a882cb6ebf9311/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "928e2e23945493a18bfc658a0adf2c06cb764e83", "url": "https://api.github.com/repos/rust-lang/rust/commits/928e2e23945493a18bfc658a0adf2c06cb764e83", "html_url": "https://github.com/rust-lang/rust/commit/928e2e23945493a18bfc658a0adf2c06cb764e83"}], "stats": {"total": 113, "additions": 113, "deletions": 0}, "files": [{"sha": "ce03e26866b7dd1376393290fc2f29ef078ce09a", "filename": "src/libstd/io/impls.rs", "status": "modified", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/92e72ee15e4ec57ea430703662a882cb6ebf9311/src%2Flibstd%2Fio%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92e72ee15e4ec57ea430703662a882cb6ebf9311/src%2Flibstd%2Fio%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fimpls.rs?ref=92e72ee15e4ec57ea430703662a882cb6ebf9311", "patch": "@@ -24,77 +24,117 @@ use vec::Vec;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, R: Read + ?Sized> Read for &'a mut R {\n+    #[inline]\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         (**self).read(buf)\n     }\n+\n+    #[inline]\n     fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n         (**self).read_to_end(buf)\n     }\n+\n+    #[inline]\n     fn read_to_string(&mut self, buf: &mut String) -> io::Result<usize> {\n         (**self).read_to_string(buf)\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, W: Write + ?Sized> Write for &'a mut W {\n+    #[inline]\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { (**self).write(buf) }\n+\n+    #[inline]\n     fn flush(&mut self) -> io::Result<()> { (**self).flush() }\n+\n+    #[inline]\n     fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {\n         (**self).write_all(buf)\n     }\n+\n+    #[inline]\n     fn write_fmt(&mut self, fmt: fmt::Arguments) -> io::Result<()> {\n         (**self).write_fmt(fmt)\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, S: Seek + ?Sized> Seek for &'a mut S {\n+    #[inline]\n     fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> { (**self).seek(pos) }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, B: BufRead + ?Sized> BufRead for &'a mut B {\n+    #[inline]\n     fn fill_buf(&mut self) -> io::Result<&[u8]> { (**self).fill_buf() }\n+\n+    #[inline]\n     fn consume(&mut self, amt: usize) { (**self).consume(amt) }\n+\n+    #[inline]\n     fn read_until(&mut self, byte: u8, buf: &mut Vec<u8>) -> io::Result<usize> {\n         (**self).read_until(byte, buf)\n     }\n+\n+    #[inline]\n     fn read_line(&mut self, buf: &mut String) -> io::Result<usize> {\n         (**self).read_line(buf)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<R: Read + ?Sized> Read for Box<R> {\n+    #[inline]\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         (**self).read(buf)\n     }\n+\n+    #[inline]\n     fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n         (**self).read_to_end(buf)\n     }\n+\n+    #[inline]\n     fn read_to_string(&mut self, buf: &mut String) -> io::Result<usize> {\n         (**self).read_to_string(buf)\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<W: Write + ?Sized> Write for Box<W> {\n+    #[inline]\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { (**self).write(buf) }\n+\n+    #[inline]\n     fn flush(&mut self) -> io::Result<()> { (**self).flush() }\n+\n+    #[inline]\n     fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {\n         (**self).write_all(buf)\n     }\n+\n+    #[inline]\n     fn write_fmt(&mut self, fmt: fmt::Arguments) -> io::Result<()> {\n         (**self).write_fmt(fmt)\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<S: Seek + ?Sized> Seek for Box<S> {\n+    #[inline]\n     fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> { (**self).seek(pos) }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<B: BufRead + ?Sized> BufRead for Box<B> {\n+    #[inline]\n     fn fill_buf(&mut self) -> io::Result<&[u8]> { (**self).fill_buf() }\n+\n+    #[inline]\n     fn consume(&mut self, amt: usize) { (**self).consume(amt) }\n+\n+    #[inline]\n     fn read_until(&mut self, byte: u8, buf: &mut Vec<u8>) -> io::Result<usize> {\n         (**self).read_until(byte, buf)\n     }\n+\n+    #[inline]\n     fn read_line(&mut self, buf: &mut String) -> io::Result<usize> {\n         (**self).read_line(buf)\n     }\n@@ -105,6 +145,7 @@ impl<B: BufRead + ?Sized> BufRead for Box<B> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Read for &'a [u8] {\n+    #[inline]\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         let amt = cmp::min(buf.len(), self.len());\n         let (a, b) = self.split_at(amt);\n@@ -116,12 +157,16 @@ impl<'a> Read for &'a [u8] {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> BufRead for &'a [u8] {\n+    #[inline]\n     fn fill_buf(&mut self) -> io::Result<&[u8]> { Ok(*self) }\n+\n+    #[inline]\n     fn consume(&mut self, amt: usize) { *self = &self[amt..]; }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Write for &'a mut [u8] {\n+    #[inline]\n     fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n         let amt = cmp::min(data.len(), self.len());\n         let (a, b) = mem::replace(self, &mut []).split_at_mut(amt);\n@@ -130,6 +175,7 @@ impl<'a> Write for &'a mut [u8] {\n         Ok(amt)\n     }\n \n+    #[inline]\n     fn write_all(&mut self, data: &[u8]) -> io::Result<()> {\n         if try!(self.write(data)) == data.len() {\n             Ok(())\n@@ -138,20 +184,87 @@ impl<'a> Write for &'a mut [u8] {\n         }\n     }\n \n+    #[inline]\n     fn flush(&mut self) -> io::Result<()> { Ok(()) }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Write for Vec<u8> {\n+    #[inline]\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.push_all(buf);\n         Ok(buf.len())\n     }\n \n+    #[inline]\n     fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {\n         self.push_all(buf);\n         Ok(())\n     }\n \n+    #[inline]\n     fn flush(&mut self) -> io::Result<()> { Ok(()) }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use io::prelude::*;\n+    use vec::Vec;\n+    use test;\n+\n+    #[bench]\n+    fn bench_read_slice(b: &mut test::Bencher) {\n+        let buf = [5; 1024];\n+        let mut dst = [0; 128];\n+\n+        b.iter(|| {\n+            let mut rd = &buf[..];\n+            for _ in (0 .. 8) {\n+                let _ = rd.read(&mut dst);\n+                test::black_box(&dst);\n+            }\n+        })\n+    }\n+\n+    #[bench]\n+    fn bench_write_slice(b: &mut test::Bencher) {\n+        let mut buf = [0; 1024];\n+        let src = [5; 128];\n+\n+        b.iter(|| {\n+            let mut wr = &mut buf[..];\n+            for _ in (0 .. 8) {\n+                let _ = wr.write_all(&src);\n+                test::black_box(&wr);\n+            }\n+        })\n+    }\n+\n+    #[bench]\n+    fn bench_read_vec(b: &mut test::Bencher) {\n+        let buf = vec![5; 1024];\n+        let mut dst = [0; 128];\n+\n+        b.iter(|| {\n+            let mut rd = &buf[..];\n+            for _ in (0 .. 8) {\n+                let _ = rd.read(&mut dst);\n+                test::black_box(&dst);\n+            }\n+        })\n+    }\n+\n+    #[bench]\n+    fn bench_write_vec(b: &mut test::Bencher) {\n+        let mut buf = Vec::with_capacity(1024);\n+        let src = [5; 128];\n+\n+        b.iter(|| {\n+            let mut wr = &mut buf[..];\n+            for _ in (0 .. 8) {\n+                let _ = wr.write_all(&src);\n+                test::black_box(&wr);\n+            }\n+        })\n+    }\n+}"}]}