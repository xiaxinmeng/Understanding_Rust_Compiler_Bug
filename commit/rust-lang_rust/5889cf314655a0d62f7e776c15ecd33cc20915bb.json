{"sha": "5889cf314655a0d62f7e776c15ecd33cc20915bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ODljZjMxNDY1NWEwZDYyZjdlNzc2YzE1ZWNkMzNjYzIwOTE1YmI=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-10-04T13:45:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-04T13:45:48Z"}, "message": "Rollup merge of #77521 - bjorn3:target_feature_whitelist, r=lcnr\n\nMove target feature whitelist from cg_llvm to cg_ssa\n\nThese target features have to be supported or at least emulated by alternative codegen backends anyway as they are used by common crates. By moving this list to cg_ssa, other codegen backends don't have to copy\nthis code.", "tree": {"sha": "1d2967dd066536d94d75ad10dfe0f3e3d8d34b9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d2967dd066536d94d75ad10dfe0f3e3d8d34b9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5889cf314655a0d62f7e776c15ecd33cc20915bb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfedIMCRBK7hj4Ov3rIwAAdHIIACKQ+yo6jADs+5sGOgIGLUPI\n9B5zvDAp9AMIkLwDfYb65YyrWJquBBuiM9ZnHFI15dRjxJ/R9XoDuQSp3eB96gRo\nwe+4DeK4AZXHcVTk8/XP2hU6APFArnciFM3vo5IhSHl1u+Fp6+yswhQmVrcUqLn/\n/b79EP6mP7NVI3o1tLKD9/64Qv1HYomWXBFyLa8M5SeU/pVaqR7UOb6Oyttkt+W2\nR2Tgp2fKuHKF5V5UtPCAoaBZf9Wut4SSJ9idVBYGuFyRdD+bDJRdvx/DZOAIBCni\nbmLjkaySvcZkjo1VZ/sazlDQgikF9i5yzbghNQcSB06wyIr5i+Iu7JDPF2aOW8A=\n=4ilo\n-----END PGP SIGNATURE-----\n", "payload": "tree 1d2967dd066536d94d75ad10dfe0f3e3d8d34b9e\nparent ec9b4d5e6cdc999926b58ccbe397f0bff623cc6e\nparent 17d1cbbbe0dc59509cf0f889d241cf58099076d4\nauthor Jonas Schievink <jonasschievink@gmail.com> 1601819148 +0200\ncommitter GitHub <noreply@github.com> 1601819148 +0200\n\nRollup merge of #77521 - bjorn3:target_feature_whitelist, r=lcnr\n\nMove target feature whitelist from cg_llvm to cg_ssa\n\nThese target features have to be supported or at least emulated by alternative codegen backends anyway as they are used by common crates. By moving this list to cg_ssa, other codegen backends don't have to copy\nthis code.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5889cf314655a0d62f7e776c15ecd33cc20915bb", "html_url": "https://github.com/rust-lang/rust/commit/5889cf314655a0d62f7e776c15ecd33cc20915bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5889cf314655a0d62f7e776c15ecd33cc20915bb/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec9b4d5e6cdc999926b58ccbe397f0bff623cc6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec9b4d5e6cdc999926b58ccbe397f0bff623cc6e", "html_url": "https://github.com/rust-lang/rust/commit/ec9b4d5e6cdc999926b58ccbe397f0bff623cc6e"}, {"sha": "17d1cbbbe0dc59509cf0f889d241cf58099076d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/17d1cbbbe0dc59509cf0f889d241cf58099076d4", "html_url": "https://github.com/rust-lang/rust/commit/17d1cbbbe0dc59509cf0f889d241cf58099076d4"}], "stats": {"total": 309, "additions": 155, "deletions": 154}, "files": [{"sha": "a633ea5e5a9ae558a1c8b7c66097a52b51191e24", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5889cf314655a0d62f7e776c15ecd33cc20915bb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5889cf314655a0d62f7e776c15ecd33cc20915bb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=5889cf314655a0d62f7e776c15ecd33cc20915bb", "patch": "@@ -349,17 +349,15 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n }\n \n pub fn provide(providers: &mut Providers) {\n+    use rustc_codegen_ssa::target_features::{all_known_features, supported_target_features};\n     providers.supported_target_features = |tcx, cnum| {\n         assert_eq!(cnum, LOCAL_CRATE);\n         if tcx.sess.opts.actually_rustdoc {\n             // rustdoc needs to be able to document functions that use all the features, so\n             // provide them all.\n-            llvm_util::all_known_features().map(|(a, b)| (a.to_string(), b)).collect()\n+            all_known_features().map(|(a, b)| (a.to_string(), b)).collect()\n         } else {\n-            llvm_util::supported_target_features(tcx.sess)\n-                .iter()\n-                .map(|&(a, b)| (a.to_string(), b))\n-                .collect()\n+            supported_target_features(tcx.sess).iter().map(|&(a, b)| (a.to_string(), b)).collect()\n         }\n     };\n "}, {"sha": "d42020047fddd44f4cf776a3f4e003c3877727e8", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 1, "deletions": 149, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/5889cf314655a0d62f7e776c15ecd33cc20915bb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5889cf314655a0d62f7e776c15ecd33cc20915bb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=5889cf314655a0d62f7e776c15ecd33cc20915bb", "patch": "@@ -1,12 +1,12 @@\n use crate::back::write::create_informational_target_machine;\n use crate::llvm;\n use libc::c_int;\n+use rustc_codegen_ssa::target_features::supported_target_features;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_feature::UnstableFeatures;\n use rustc_middle::bug;\n use rustc_session::config::PrintRequest;\n use rustc_session::Session;\n-use rustc_span::symbol::sym;\n use rustc_span::symbol::Symbol;\n use rustc_target::spec::{MergeFunctions, PanicStrategy};\n use std::ffi::CString;\n@@ -139,140 +139,6 @@ pub fn time_trace_profiler_finish(file_name: &str) {\n // WARNING: the features after applying `to_llvm_feature` must be known\n // to LLVM or the feature detection code will walk past the end of the feature\n // array, leading to crashes.\n-\n-const ARM_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n-    (\"aclass\", Some(sym::arm_target_feature)),\n-    (\"mclass\", Some(sym::arm_target_feature)),\n-    (\"rclass\", Some(sym::arm_target_feature)),\n-    (\"dsp\", Some(sym::arm_target_feature)),\n-    (\"neon\", Some(sym::arm_target_feature)),\n-    (\"crc\", Some(sym::arm_target_feature)),\n-    (\"crypto\", Some(sym::arm_target_feature)),\n-    (\"v5te\", Some(sym::arm_target_feature)),\n-    (\"v6\", Some(sym::arm_target_feature)),\n-    (\"v6k\", Some(sym::arm_target_feature)),\n-    (\"v6t2\", Some(sym::arm_target_feature)),\n-    (\"v7\", Some(sym::arm_target_feature)),\n-    (\"v8\", Some(sym::arm_target_feature)),\n-    (\"vfp2\", Some(sym::arm_target_feature)),\n-    (\"vfp3\", Some(sym::arm_target_feature)),\n-    (\"vfp4\", Some(sym::arm_target_feature)),\n-    // This is needed for inline assembly, but shouldn't be stabilized as-is\n-    // since it should be enabled per-function using #[instruction_set], not\n-    // #[target_feature].\n-    (\"thumb-mode\", Some(sym::arm_target_feature)),\n-];\n-\n-const AARCH64_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n-    (\"fp\", Some(sym::aarch64_target_feature)),\n-    (\"neon\", Some(sym::aarch64_target_feature)),\n-    (\"sve\", Some(sym::aarch64_target_feature)),\n-    (\"crc\", Some(sym::aarch64_target_feature)),\n-    (\"crypto\", Some(sym::aarch64_target_feature)),\n-    (\"ras\", Some(sym::aarch64_target_feature)),\n-    (\"lse\", Some(sym::aarch64_target_feature)),\n-    (\"rdm\", Some(sym::aarch64_target_feature)),\n-    (\"fp16\", Some(sym::aarch64_target_feature)),\n-    (\"rcpc\", Some(sym::aarch64_target_feature)),\n-    (\"dotprod\", Some(sym::aarch64_target_feature)),\n-    (\"tme\", Some(sym::aarch64_target_feature)),\n-    (\"v8.1a\", Some(sym::aarch64_target_feature)),\n-    (\"v8.2a\", Some(sym::aarch64_target_feature)),\n-    (\"v8.3a\", Some(sym::aarch64_target_feature)),\n-];\n-\n-const X86_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n-    (\"adx\", Some(sym::adx_target_feature)),\n-    (\"aes\", None),\n-    (\"avx\", None),\n-    (\"avx2\", None),\n-    (\"avx512bw\", Some(sym::avx512_target_feature)),\n-    (\"avx512cd\", Some(sym::avx512_target_feature)),\n-    (\"avx512dq\", Some(sym::avx512_target_feature)),\n-    (\"avx512er\", Some(sym::avx512_target_feature)),\n-    (\"avx512f\", Some(sym::avx512_target_feature)),\n-    (\"avx512ifma\", Some(sym::avx512_target_feature)),\n-    (\"avx512pf\", Some(sym::avx512_target_feature)),\n-    (\"avx512vbmi\", Some(sym::avx512_target_feature)),\n-    (\"avx512vl\", Some(sym::avx512_target_feature)),\n-    (\"avx512vpopcntdq\", Some(sym::avx512_target_feature)),\n-    (\"bmi1\", None),\n-    (\"bmi2\", None),\n-    (\"cmpxchg16b\", Some(sym::cmpxchg16b_target_feature)),\n-    (\"f16c\", Some(sym::f16c_target_feature)),\n-    (\"fma\", None),\n-    (\"fxsr\", None),\n-    (\"lzcnt\", None),\n-    (\"movbe\", Some(sym::movbe_target_feature)),\n-    (\"pclmulqdq\", None),\n-    (\"popcnt\", None),\n-    (\"rdrand\", None),\n-    (\"rdseed\", None),\n-    (\"rtm\", Some(sym::rtm_target_feature)),\n-    (\"sha\", None),\n-    (\"sse\", None),\n-    (\"sse2\", None),\n-    (\"sse3\", None),\n-    (\"sse4.1\", None),\n-    (\"sse4.2\", None),\n-    (\"sse4a\", Some(sym::sse4a_target_feature)),\n-    (\"ssse3\", None),\n-    (\"tbm\", Some(sym::tbm_target_feature)),\n-    (\"xsave\", None),\n-    (\"xsavec\", None),\n-    (\"xsaveopt\", None),\n-    (\"xsaves\", None),\n-];\n-\n-const HEXAGON_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n-    (\"hvx\", Some(sym::hexagon_target_feature)),\n-    (\"hvx-length128b\", Some(sym::hexagon_target_feature)),\n-];\n-\n-const POWERPC_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n-    (\"altivec\", Some(sym::powerpc_target_feature)),\n-    (\"power8-altivec\", Some(sym::powerpc_target_feature)),\n-    (\"power9-altivec\", Some(sym::powerpc_target_feature)),\n-    (\"power8-vector\", Some(sym::powerpc_target_feature)),\n-    (\"power9-vector\", Some(sym::powerpc_target_feature)),\n-    (\"vsx\", Some(sym::powerpc_target_feature)),\n-];\n-\n-const MIPS_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] =\n-    &[(\"fp64\", Some(sym::mips_target_feature)), (\"msa\", Some(sym::mips_target_feature))];\n-\n-const RISCV_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n-    (\"m\", Some(sym::riscv_target_feature)),\n-    (\"a\", Some(sym::riscv_target_feature)),\n-    (\"c\", Some(sym::riscv_target_feature)),\n-    (\"f\", Some(sym::riscv_target_feature)),\n-    (\"d\", Some(sym::riscv_target_feature)),\n-    (\"e\", Some(sym::riscv_target_feature)),\n-];\n-\n-const WASM_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n-    (\"simd128\", Some(sym::wasm_target_feature)),\n-    (\"atomics\", Some(sym::wasm_target_feature)),\n-    (\"nontrapping-fptoint\", Some(sym::wasm_target_feature)),\n-];\n-\n-/// When rustdoc is running, provide a list of all known features so that all their respective\n-/// primitives may be documented.\n-///\n-/// IMPORTANT: If you're adding another feature list above, make sure to add it to this iterator!\n-pub fn all_known_features() -> impl Iterator<Item = (&'static str, Option<Symbol>)> {\n-    std::iter::empty()\n-        .chain(ARM_ALLOWED_FEATURES.iter())\n-        .chain(AARCH64_ALLOWED_FEATURES.iter())\n-        .chain(X86_ALLOWED_FEATURES.iter())\n-        .chain(HEXAGON_ALLOWED_FEATURES.iter())\n-        .chain(POWERPC_ALLOWED_FEATURES.iter())\n-        .chain(MIPS_ALLOWED_FEATURES.iter())\n-        .chain(RISCV_ALLOWED_FEATURES.iter())\n-        .chain(WASM_ALLOWED_FEATURES.iter())\n-        .cloned()\n-}\n-\n pub fn to_llvm_feature<'a>(sess: &Session, s: &'a str) -> &'a str {\n     let arch = if sess.target.target.arch == \"x86_64\" { \"x86\" } else { &*sess.target.target.arch };\n     match (arch, s) {\n@@ -306,20 +172,6 @@ pub fn target_features(sess: &Session) -> Vec<Symbol> {\n         .collect()\n }\n \n-pub fn supported_target_features(sess: &Session) -> &'static [(&'static str, Option<Symbol>)] {\n-    match &*sess.target.target.arch {\n-        \"arm\" => ARM_ALLOWED_FEATURES,\n-        \"aarch64\" => AARCH64_ALLOWED_FEATURES,\n-        \"x86\" | \"x86_64\" => X86_ALLOWED_FEATURES,\n-        \"hexagon\" => HEXAGON_ALLOWED_FEATURES,\n-        \"mips\" | \"mips64\" => MIPS_ALLOWED_FEATURES,\n-        \"powerpc\" | \"powerpc64\" => POWERPC_ALLOWED_FEATURES,\n-        \"riscv32\" | \"riscv64\" => RISCV_ALLOWED_FEATURES,\n-        \"wasm32\" => WASM_ALLOWED_FEATURES,\n-        _ => &[],\n-    }\n-}\n-\n pub fn print_version() {\n     // Can be called without initializing LLVM\n     unsafe {"}, {"sha": "e34371ef59ac4b45987f9ef39bf5a28e0d7ca260", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5889cf314655a0d62f7e776c15ecd33cc20915bb/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5889cf314655a0d62f7e776c15ecd33cc20915bb/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=5889cf314655a0d62f7e776c15ecd33cc20915bb", "patch": "@@ -42,6 +42,7 @@ pub mod glue;\n pub mod meth;\n pub mod mir;\n pub mod mono_item;\n+pub mod target_features;\n pub mod traits;\n \n pub struct ModuleCodegen<M> {"}, {"sha": "4c61e21901bcd1064798c3dba182066d460b46cb", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/5889cf314655a0d62f7e776c15ecd33cc20915bb/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5889cf314655a0d62f7e776c15ecd33cc20915bb/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=5889cf314655a0d62f7e776c15ecd33cc20915bb", "patch": "@@ -0,0 +1,150 @@\n+use rustc_session::Session;\n+use rustc_span::symbol::sym;\n+use rustc_span::symbol::Symbol;\n+\n+const ARM_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n+    (\"aclass\", Some(sym::arm_target_feature)),\n+    (\"mclass\", Some(sym::arm_target_feature)),\n+    (\"rclass\", Some(sym::arm_target_feature)),\n+    (\"dsp\", Some(sym::arm_target_feature)),\n+    (\"neon\", Some(sym::arm_target_feature)),\n+    (\"crc\", Some(sym::arm_target_feature)),\n+    (\"crypto\", Some(sym::arm_target_feature)),\n+    (\"v5te\", Some(sym::arm_target_feature)),\n+    (\"v6\", Some(sym::arm_target_feature)),\n+    (\"v6k\", Some(sym::arm_target_feature)),\n+    (\"v6t2\", Some(sym::arm_target_feature)),\n+    (\"v7\", Some(sym::arm_target_feature)),\n+    (\"v8\", Some(sym::arm_target_feature)),\n+    (\"vfp2\", Some(sym::arm_target_feature)),\n+    (\"vfp3\", Some(sym::arm_target_feature)),\n+    (\"vfp4\", Some(sym::arm_target_feature)),\n+    // This is needed for inline assembly, but shouldn't be stabilized as-is\n+    // since it should be enabled per-function using #[instruction_set], not\n+    // #[target_feature].\n+    (\"thumb-mode\", Some(sym::arm_target_feature)),\n+];\n+\n+const AARCH64_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n+    (\"fp\", Some(sym::aarch64_target_feature)),\n+    (\"neon\", Some(sym::aarch64_target_feature)),\n+    (\"sve\", Some(sym::aarch64_target_feature)),\n+    (\"crc\", Some(sym::aarch64_target_feature)),\n+    (\"crypto\", Some(sym::aarch64_target_feature)),\n+    (\"ras\", Some(sym::aarch64_target_feature)),\n+    (\"lse\", Some(sym::aarch64_target_feature)),\n+    (\"rdm\", Some(sym::aarch64_target_feature)),\n+    (\"fp16\", Some(sym::aarch64_target_feature)),\n+    (\"rcpc\", Some(sym::aarch64_target_feature)),\n+    (\"dotprod\", Some(sym::aarch64_target_feature)),\n+    (\"tme\", Some(sym::aarch64_target_feature)),\n+    (\"v8.1a\", Some(sym::aarch64_target_feature)),\n+    (\"v8.2a\", Some(sym::aarch64_target_feature)),\n+    (\"v8.3a\", Some(sym::aarch64_target_feature)),\n+];\n+\n+const X86_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n+    (\"adx\", Some(sym::adx_target_feature)),\n+    (\"aes\", None),\n+    (\"avx\", None),\n+    (\"avx2\", None),\n+    (\"avx512bw\", Some(sym::avx512_target_feature)),\n+    (\"avx512cd\", Some(sym::avx512_target_feature)),\n+    (\"avx512dq\", Some(sym::avx512_target_feature)),\n+    (\"avx512er\", Some(sym::avx512_target_feature)),\n+    (\"avx512f\", Some(sym::avx512_target_feature)),\n+    (\"avx512ifma\", Some(sym::avx512_target_feature)),\n+    (\"avx512pf\", Some(sym::avx512_target_feature)),\n+    (\"avx512vbmi\", Some(sym::avx512_target_feature)),\n+    (\"avx512vl\", Some(sym::avx512_target_feature)),\n+    (\"avx512vpopcntdq\", Some(sym::avx512_target_feature)),\n+    (\"bmi1\", None),\n+    (\"bmi2\", None),\n+    (\"cmpxchg16b\", Some(sym::cmpxchg16b_target_feature)),\n+    (\"f16c\", Some(sym::f16c_target_feature)),\n+    (\"fma\", None),\n+    (\"fxsr\", None),\n+    (\"lzcnt\", None),\n+    (\"movbe\", Some(sym::movbe_target_feature)),\n+    (\"pclmulqdq\", None),\n+    (\"popcnt\", None),\n+    (\"rdrand\", None),\n+    (\"rdseed\", None),\n+    (\"rtm\", Some(sym::rtm_target_feature)),\n+    (\"sha\", None),\n+    (\"sse\", None),\n+    (\"sse2\", None),\n+    (\"sse3\", None),\n+    (\"sse4.1\", None),\n+    (\"sse4.2\", None),\n+    (\"sse4a\", Some(sym::sse4a_target_feature)),\n+    (\"ssse3\", None),\n+    (\"tbm\", Some(sym::tbm_target_feature)),\n+    (\"xsave\", None),\n+    (\"xsavec\", None),\n+    (\"xsaveopt\", None),\n+    (\"xsaves\", None),\n+];\n+\n+const HEXAGON_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n+    (\"hvx\", Some(sym::hexagon_target_feature)),\n+    (\"hvx-length128b\", Some(sym::hexagon_target_feature)),\n+];\n+\n+const POWERPC_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n+    (\"altivec\", Some(sym::powerpc_target_feature)),\n+    (\"power8-altivec\", Some(sym::powerpc_target_feature)),\n+    (\"power9-altivec\", Some(sym::powerpc_target_feature)),\n+    (\"power8-vector\", Some(sym::powerpc_target_feature)),\n+    (\"power9-vector\", Some(sym::powerpc_target_feature)),\n+    (\"vsx\", Some(sym::powerpc_target_feature)),\n+];\n+\n+const MIPS_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] =\n+    &[(\"fp64\", Some(sym::mips_target_feature)), (\"msa\", Some(sym::mips_target_feature))];\n+\n+const RISCV_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n+    (\"m\", Some(sym::riscv_target_feature)),\n+    (\"a\", Some(sym::riscv_target_feature)),\n+    (\"c\", Some(sym::riscv_target_feature)),\n+    (\"f\", Some(sym::riscv_target_feature)),\n+    (\"d\", Some(sym::riscv_target_feature)),\n+    (\"e\", Some(sym::riscv_target_feature)),\n+];\n+\n+const WASM_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n+    (\"simd128\", Some(sym::wasm_target_feature)),\n+    (\"atomics\", Some(sym::wasm_target_feature)),\n+    (\"nontrapping-fptoint\", Some(sym::wasm_target_feature)),\n+];\n+\n+/// When rustdoc is running, provide a list of all known features so that all their respective\n+/// primitives may be documented.\n+///\n+/// IMPORTANT: If you're adding another feature list above, make sure to add it to this iterator!\n+pub fn all_known_features() -> impl Iterator<Item = (&'static str, Option<Symbol>)> {\n+    std::iter::empty()\n+        .chain(ARM_ALLOWED_FEATURES.iter())\n+        .chain(AARCH64_ALLOWED_FEATURES.iter())\n+        .chain(X86_ALLOWED_FEATURES.iter())\n+        .chain(HEXAGON_ALLOWED_FEATURES.iter())\n+        .chain(POWERPC_ALLOWED_FEATURES.iter())\n+        .chain(MIPS_ALLOWED_FEATURES.iter())\n+        .chain(RISCV_ALLOWED_FEATURES.iter())\n+        .chain(WASM_ALLOWED_FEATURES.iter())\n+        .cloned()\n+}\n+\n+pub fn supported_target_features(sess: &Session) -> &'static [(&'static str, Option<Symbol>)] {\n+    match &*sess.target.target.arch {\n+        \"arm\" => ARM_ALLOWED_FEATURES,\n+        \"aarch64\" => AARCH64_ALLOWED_FEATURES,\n+        \"x86\" | \"x86_64\" => X86_ALLOWED_FEATURES,\n+        \"hexagon\" => HEXAGON_ALLOWED_FEATURES,\n+        \"mips\" | \"mips64\" => MIPS_ALLOWED_FEATURES,\n+        \"powerpc\" | \"powerpc64\" => POWERPC_ALLOWED_FEATURES,\n+        \"riscv32\" | \"riscv64\" => RISCV_ALLOWED_FEATURES,\n+        \"wasm32\" => WASM_ALLOWED_FEATURES,\n+        _ => &[],\n+    }\n+}"}]}