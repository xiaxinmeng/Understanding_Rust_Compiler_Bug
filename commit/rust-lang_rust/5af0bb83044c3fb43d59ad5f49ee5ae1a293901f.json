{"sha": "5af0bb83044c3fb43d59ad5f49ee5ae1a293901f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZjBiYjgzMDQ0YzNmYjQzZDU5YWQ1ZjQ5ZWU1YWUxYTI5MzkwMWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-10T18:28:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-10T18:28:30Z"}, "message": "Auto merge of #54732 - cramertj:waker, r=aturon\n\nLocalWaker and Waker cleanups\n\nr? @aturon", "tree": {"sha": "0adede37b3aed3e901135ccc2621140ebd0c1148", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0adede37b3aed3e901135ccc2621140ebd0c1148"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5af0bb83044c3fb43d59ad5f49ee5ae1a293901f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5af0bb83044c3fb43d59ad5f49ee5ae1a293901f", "html_url": "https://github.com/rust-lang/rust/commit/5af0bb83044c3fb43d59ad5f49ee5ae1a293901f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5af0bb83044c3fb43d59ad5f49ee5ae1a293901f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1041c6cd1a027ab3ada3e8538620d2e1d7067fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1041c6cd1a027ab3ada3e8538620d2e1d7067fe", "html_url": "https://github.com/rust-lang/rust/commit/e1041c6cd1a027ab3ada3e8538620d2e1d7067fe"}, {"sha": "00e0565c383f7487b5f92eeef7389607a82c8e74", "url": "https://api.github.com/repos/rust-lang/rust/commits/00e0565c383f7487b5f92eeef7389607a82c8e74", "html_url": "https://github.com/rust-lang/rust/commit/00e0565c383f7487b5f92eeef7389607a82c8e74"}], "stats": {"total": 65, "additions": 33, "deletions": 32}, "files": [{"sha": "ab4ae50c44367f3dce204ba60a4572cf60993e7d", "filename": "src/libcore/task/wake.rs", "status": "modified", "additions": 33, "deletions": 32, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/5af0bb83044c3fb43d59ad5f49ee5ae1a293901f/src%2Flibcore%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af0bb83044c3fb43d59ad5f49ee5ae1a293901f/src%2Flibcore%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fwake.rs?ref=5af0bb83044c3fb43d59ad5f49ee5ae1a293901f", "patch": "@@ -12,7 +12,7 @@\n             reason = \"futures in libcore are unstable\",\n             issue = \"50547\")]\n \n-use {fmt, mem};\n+use fmt;\n use marker::Unpin;\n use ptr::NonNull;\n \n@@ -63,6 +63,20 @@ impl Waker {\n     pub fn will_wake(&self, other: &Waker) -> bool {\n         self.inner == other.inner\n     }\n+\n+    /// Returns whether or not this `Waker` and `other` `LocalWaker` awaken\n+    /// the same task.\n+    ///\n+    /// This function works on a best-effort basis, and may return false even\n+    /// when the `Waker`s would awaken the same task. However, if this function\n+    /// returns true, it is guaranteed that the `Waker`s will awaken the same\n+    /// task.\n+    ///\n+    /// This function is primarily used for optimization purposes.\n+    #[inline]\n+    pub fn will_wake_local(&self, other: &LocalWaker) -> bool {\n+        self.will_wake(&other.0)\n+    }\n }\n \n impl Clone for Waker {\n@@ -97,9 +111,8 @@ impl Drop for Waker {\n /// Task executors can use this type to implement more optimized singlethreaded wakeup\n /// behavior.\n #[repr(transparent)]\n-pub struct LocalWaker {\n-    inner: NonNull<dyn UnsafeWake>,\n-}\n+#[derive(Clone)]\n+pub struct LocalWaker(Waker);\n \n impl Unpin for LocalWaker {}\n impl !Send for LocalWaker {}\n@@ -120,7 +133,16 @@ impl LocalWaker {\n     /// on the current thread.\n     #[inline]\n     pub unsafe fn new(inner: NonNull<dyn UnsafeWake>) -> Self {\n-        LocalWaker { inner }\n+        LocalWaker(Waker::new(inner))\n+    }\n+\n+    /// Borrows this `LocalWaker` as a `Waker`.\n+    ///\n+    /// `Waker` is nearly identical to `LocalWaker`, but is threadsafe\n+    /// (implements `Send` and `Sync`).\n+    #[inline]\n+    pub fn as_waker(&self) -> &Waker {\n+        &self.0\n     }\n \n     /// Converts this `LocalWaker` into a `Waker`.\n@@ -129,13 +151,13 @@ impl LocalWaker {\n     /// (implements `Send` and `Sync`).\n     #[inline]\n     pub fn into_waker(self) -> Waker {\n-        self.into()\n+        self.0\n     }\n \n     /// Wake up the task associated with this `LocalWaker`.\n     #[inline]\n     pub fn wake(&self) {\n-        unsafe { self.inner.as_ref().wake_local() }\n+        unsafe { self.0.inner.as_ref().wake_local() }\n     }\n \n     /// Returns whether or not this `LocalWaker` and `other` `LocalWaker` awaken the same task.\n@@ -148,7 +170,7 @@ impl LocalWaker {\n     /// This function is primarily used for optimization purposes.\n     #[inline]\n     pub fn will_wake(&self, other: &LocalWaker) -> bool {\n-        self.inner == other.inner\n+        self.0.will_wake(&other.0)\n     }\n \n     /// Returns whether or not this `LocalWaker` and `other` `Waker` awaken the same task.\n@@ -161,45 +183,24 @@ impl LocalWaker {\n     /// This function is primarily used for optimization purposes.\n     #[inline]\n     pub fn will_wake_nonlocal(&self, other: &Waker) -> bool {\n-        self.inner == other.inner\n+        self.0.will_wake(other)\n     }\n }\n \n impl From<LocalWaker> for Waker {\n     #[inline]\n     fn from(local_waker: LocalWaker) -> Self {\n-        let inner = local_waker.inner;\n-        mem::forget(local_waker);\n-        Waker { inner }\n-    }\n-}\n-\n-impl Clone for LocalWaker {\n-    #[inline]\n-    fn clone(&self) -> Self {\n-        let waker = unsafe { self.inner.as_ref().clone_raw() };\n-        let inner = waker.inner;\n-        mem::forget(waker);\n-        LocalWaker { inner }\n+        local_waker.0\n     }\n }\n \n impl fmt::Debug for LocalWaker {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.debug_struct(\"Waker\")\n+        f.debug_struct(\"LocalWaker\")\n             .finish()\n     }\n }\n \n-impl Drop for LocalWaker {\n-    #[inline]\n-    fn drop(&mut self) {\n-        unsafe {\n-            self.inner.as_ref().drop_raw()\n-        }\n-    }\n-}\n-\n /// An unsafe trait for implementing custom memory management for a `Waker` or `LocalWaker`.\n ///\n /// A `Waker` conceptually is a cloneable trait object for `Wake`, and is"}]}