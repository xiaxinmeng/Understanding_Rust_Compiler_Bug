{"sha": "828595151cc714e1deabca763765e7d7633d97ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyODU5NTE1MWNjNzE0ZTFkZWFiY2E3NjM3NjVlN2Q3NjMzZDk3ZWM=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2012-02-22T19:33:01Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-29T01:56:15Z"}, "message": "trailing whitespace fixes", "tree": {"sha": "7f14e63478ee52079882aaebc4bafbde7cedd0b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f14e63478ee52079882aaebc4bafbde7cedd0b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/828595151cc714e1deabca763765e7d7633d97ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/828595151cc714e1deabca763765e7d7633d97ec", "html_url": "https://github.com/rust-lang/rust/commit/828595151cc714e1deabca763765e7d7633d97ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/828595151cc714e1deabca763765e7d7633d97ec/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d3e08d8c6248c4e8c668bf53ff0a308873da31d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d3e08d8c6248c4e8c668bf53ff0a308873da31d", "html_url": "https://github.com/rust-lang/rust/commit/1d3e08d8c6248c4e8c668bf53ff0a308873da31d"}], "stats": {"total": 22, "additions": 10, "deletions": 12}, "files": [{"sha": "b64de837b095b14dc81512593690f7bb33382fe7", "filename": "src/libstd/uvtmp.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/828595151cc714e1deabca763765e7d7633d97ec/src%2Flibstd%2Fuvtmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/828595151cc714e1deabca763765e7d7633d97ec/src%2Flibstd%2Fuvtmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuvtmp.rs?ref=828595151cc714e1deabca763765e7d7633d97ec", "patch": "@@ -79,7 +79,8 @@ native mod rustrt {\n     fn rust_uvtmp_uv_loop_set_data(\n         loop: *ctypes::void,\n         data: *uv_loop_data);\n-    fn rust_uvtmp_uv_bind_op_cb(loop: *ctypes::void, cb: *u8) -> *ctypes::void;\n+    fn rust_uvtmp_uv_bind_op_cb(loop: *ctypes::void, cb: *u8)\n+        -> *ctypes::void;\n     fn rust_uvtmp_uv_stop_op_cb(handle: *ctypes::void);\n     fn rust_uvtmp_uv_run(loop_handle: *ctypes::void);\n     fn rust_uvtmp_uv_close(handle: *ctypes::void, cb: *u8);\n@@ -162,7 +163,6 @@ mod uv {\n                 map::new_bytes_hash();\n             let close_callbacks: map::map<[u8], fn~()> =\n                 map::new_bytes_hash();\n-            \n             let async_cbs: map::map<[u8], fn~(uv_handle)> =\n                 map::new_bytes_hash();\n             let timer_cbs: map::map<[u8], fn~(uv_handle)> =\n@@ -190,14 +190,14 @@ mod uv {\n                         comm::send(rust_loop_chan, uv_end);\n                     };\n                   }\n-                  \n+\n                   msg_run_in_bg {\n                     task::spawn_sched(task::manual_threads(1u)) {||\n                         // this call blocks\n                         rustrt::rust_uvtmp_uv_run(loop_handle);\n                     };\n                   }\n-                  \n+\n                   msg_close(handle, cb) {\n                     let id = get_id_from_handle(handle);\n                     close_callbacks.insert(id, cb);\n@@ -228,7 +228,7 @@ mod uv {\n                         cb();\n                     };\n                   }\n-                  \n+\n                   msg_async_init(callback, after_cb) {\n                     // create a new async handle\n                     // with the id as the handle's\n@@ -308,7 +308,7 @@ mod uv {\n                     let the_timer = id_to_handle.get(id);\n                     after_cb(the_timer);\n                   }\n-                  \n+\n                   uv_end() {\n                     keep_going = false;\n                   }\n@@ -353,7 +353,7 @@ mod uv {\n \n     fn close(h: uv_handle, cb: fn~()) {\n         let loop_chan = get_loop_chan_from_handle(h);\n-        comm::send(loop_chan, msg_close(h, cb)); \n+        comm::send(loop_chan, msg_close(h, cb));\n     }\n \n     fn timer_init(loop: uv_loop, after_cb: fn~(uv_handle)) {\n@@ -403,7 +403,7 @@ mod uv {\n         ret rand::mk_rng().gen_bytes(16u);\n     }\n     fn get_handle_id_from(buf: *u8) -> [u8] unsafe {\n-        ret vec::unsafe::from_buf(buf, 16u); \n+        ret vec::unsafe::from_buf(buf, 16u);\n     }\n \n     fn get_loop_chan_from_data(data: *uv_loop_data)\n@@ -475,7 +475,6 @@ mod uv {\n                 rustrt::rust_uvtmp_uv_timer_stop(handle);\n                 comm::send(loop_chan, uv_timer_stop(id, after_cb));\n               }\n-              \n               _ { fail \"unknown form of uv_operation received\"; }\n             }\n             op_pending = comm::peek(op_port);\n@@ -538,7 +537,7 @@ mod uv {\n         // close cb\n         process_close_common(id, data);\n     }\n-    \n+\n     crust fn process_close_timer(\n         id_buf: *u8,\n         handle_ptr: *ctypes::void,\n@@ -549,7 +548,6 @@ mod uv {\n         process_close_common(id, data);\n     }\n \n-    \n }\n \n #[test]\n@@ -588,7 +586,7 @@ fn test_uvtmp_uv_timer() {\n                 };\n             };\n         };\n-    }; \n+    };\n     uv::run(test_loop);\n     assert comm::recv(exit_port);\n }"}]}