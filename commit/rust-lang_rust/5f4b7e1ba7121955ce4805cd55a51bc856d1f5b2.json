{"sha": "5f4b7e1ba7121955ce4805cd55a51bc856d1f5b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNGI3ZTFiYTcxMjE5NTVjZTQ4MDVjZDU1YTUxYmM4NTZkMWY1YjI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-30T22:50:16Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-02T17:39:09Z"}, "message": "Compiler accepts input from stdin when source file is called \"-\"", "tree": {"sha": "5d790b7fe89820389d627f072743d2b1bd24e6b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d790b7fe89820389d627f072743d2b1bd24e6b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f4b7e1ba7121955ce4805cd55a51bc856d1f5b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f4b7e1ba7121955ce4805cd55a51bc856d1f5b2", "html_url": "https://github.com/rust-lang/rust/commit/5f4b7e1ba7121955ce4805cd55a51bc856d1f5b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f4b7e1ba7121955ce4805cd55a51bc856d1f5b2/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d5b651f4981b85d0e3864d8df6bd0953578e1f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d5b651f4981b85d0e3864d8df6bd0953578e1f4", "html_url": "https://github.com/rust-lang/rust/commit/2d5b651f4981b85d0e3864d8df6bd0953578e1f4"}], "stats": {"total": 83, "additions": 66, "deletions": 17}, "files": [{"sha": "5572d40d37f78a032f0c2bb2adca5052557882f5", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 32, "deletions": 10, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/5f4b7e1ba7121955ce4805cd55a51bc856d1f5b2/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f4b7e1ba7121955ce4805cd55a51bc856d1f5b2/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=5f4b7e1ba7121955ce4805cd55a51bc856d1f5b2", "patch": "@@ -86,15 +86,24 @@ fn parse_cfgspecs(cfgspecs: &vec[str]) -> ast::crate_cfg {\n     ret words;\n }\n \n+fn input_is_stdin(filename: str) -> bool { filename == \"-\" }\n+\n fn parse_input(sess: session::session, cfg: &ast::crate_cfg, input: str) ->\n    @ast::crate {\n-    ret if str::ends_with(input, \".rc\") {\n-            parser::parse_crate_from_crate_file(input, cfg,\n-                                                sess.get_parse_sess())\n-        } else if (str::ends_with(input, \".rs\")) {\n-            parser::parse_crate_from_source_file(input, cfg,\n-                                                 sess.get_parse_sess())\n-        } else { sess.fatal(\"unknown input file type: \" + input) };\n+    if !input_is_stdin(input) {\n+        parser::parse_crate_from_file(input, cfg, sess.get_parse_sess())\n+    } else {\n+        parse_input_src(sess, cfg, input).crate\n+    }\n+}\n+\n+fn parse_input_src(sess: session::session, cfg: &ast::crate_cfg,\n+                   infile: str) -> {crate: @ast::crate, src: str} {\n+    let srcbytes = ioivec::stdin().read_whole_stream();\n+    let src = str::unsafe_from_bytes_ivec(srcbytes);\n+    let crate = parser::parse_crate_from_source_str(infile, src, cfg,\n+                                                    sess.get_codemap());\n+    ret {crate: crate, src: src};\n }\n \n fn time[T](do_it: bool, what: str, thunk: fn() -> T ) -> T {\n@@ -195,7 +204,14 @@ fn pretty_print_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n         }\n     }\n \n-    let crate = parse_input(sess, cfg, input);\n+    // Because the pretty printer needs to make a pass over the source\n+    // to collect comments and literals, and we need to support reading\n+    // from stdin, we're going to just suck the source into a string\n+    // so both the parser and pretty-printer can use it.\n+    let crate_src = parse_input_src(sess, cfg, input);\n+    let crate = crate_src.crate;\n+    let src = crate_src.src;\n+\n     if expand { crate = syntax::ext::expand::expand_crate(sess, crate); }\n     let ann;\n     alt ppm {\n@@ -213,7 +229,7 @@ fn pretty_print_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n       ppm_normal. { ann = pprust::no_ann(); }\n     }\n     pprust::print_crate(sess.get_codemap(), crate, input,\n-                        ioivec::file_reader(input), ioivec::stdout(), ann);\n+                        ioivec::string_reader(src), ioivec::stdout(), ann);\n }\n \n fn version(argv0: str) {\n@@ -484,7 +500,13 @@ fn main(args: vec[str]) {\n \n     alt output_file {\n       none. {\n-        let parts: vec[str] = str::split(ifile, '.' as u8);\n+        // \"-\" as input file will cause the parser to read from stdin so we\n+        // have to make up a name\n+        let parts: vec[str] = if !input_is_stdin(ifile) {\n+            str::split(ifile, '.' as u8)\n+        } else {\n+            [\"default\", \"rs\"]\n+        };\n         vec::pop[str](parts);\n         saved_out_filename = parts.(0);\n         alt sopts.output_type {"}, {"sha": "b94be023d9dceee4e338441fbd5c8ca6e0117303", "filename": "src/comp/syntax/codemap.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5f4b7e1ba7121955ce4805cd55a51bc856d1f5b2/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f4b7e1ba7121955ce4805cd55a51bc856d1f5b2/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fcodemap.rs?ref=5f4b7e1ba7121955ce4805cd55a51bc856d1f5b2", "patch": "@@ -93,8 +93,19 @@ fn emit_diagnostic(sp: &option::t[span], msg: &str, kind: &str, color: u8,\n         termivec::reset(ioivec::stdout().get_buf_writer());\n     }\n     ioivec::stdout().write_str(#fmt(\" %s\\n\", msg));\n+\n+    maybe_highlight_lines(sp, cm, maybe_lines);\n+}\n+\n+fn maybe_highlight_lines(sp: &option::t[span], cm: &codemap,\n+                         maybe_lines: option::t[@file_lines]) {\n+\n     alt maybe_lines {\n       some(lines) {\n+        // If we're not looking at a real file then we can't re-open it to\n+        // pull out the lines\n+        if lines.name == \"-\" { ret; }\n+\n         // FIXME: reading in the entire file is the worst possible way to\n         //        get access to the necessary lines.\n         let rdr = ioivec::file_reader(lines.name);"}, {"sha": "c5bf0f2586b978340a854c39cd847c27fdc60992", "filename": "src/comp/syntax/parse/eval.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f4b7e1ba7121955ce4805cd55a51bc856d1f5b2/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f4b7e1ba7121955ce4805cd55a51bc856d1f5b2/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs?ref=5f4b7e1ba7121955ce4805cd55a51bc856d1f5b2", "patch": "@@ -9,6 +9,7 @@ import syntax::parse::parser::parser;\n import syntax::parse::parser::new_parser_from_file;\n import syntax::parse::parser::parse_inner_attrs_and_next;\n import syntax::parse::parser::parse_mod_items;\n+import syntax::parse::parser::SOURCE_FILE;\n \n export eval_crate_directives_to_mod;\n export mode_parse;\n@@ -55,7 +56,7 @@ fn eval_crate_directive(cx: ctx, cdir: @ast::crate_directive, prefix: str,\n         if cx.mode == mode_depend { cx.deps += ~[full_path]; ret; }\n         let p0 =\n             new_parser_from_file(cx.sess, cx.cfg, full_path, cx.chpos,\n-                                 cx.byte_pos);\n+                                 cx.byte_pos, SOURCE_FILE);\n         let inner_attrs = parse_inner_attrs_and_next(p0);\n         let mod_attrs = attrs + inner_attrs.inner;\n         let first_item_outer_attrs = inner_attrs.next;"}, {"sha": "58146b950ea8fe968cc8504370ad180eb8d589aa", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5f4b7e1ba7121955ce4805cd55a51bc856d1f5b2/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f4b7e1ba7121955ce4805cd55a51bc856d1f5b2/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=5f4b7e1ba7121955ce4805cd55a51bc856d1f5b2", "patch": "@@ -58,10 +58,10 @@ type parser =\n         fn get_sess() -> parse_sess ;\n     };\n \n-fn new_parser_from_file(sess: parse_sess, cfg: ast::crate_cfg, path: str,\n-                        chpos: uint, byte_pos: uint) -> parser {\n-    let ftype = SOURCE_FILE;\n-    if str::ends_with(path, \".rc\") { ftype = CRATE_FILE; }\n+fn new_parser_from_file(sess: parse_sess, cfg:\n+                        ast::crate_cfg, path: str,\n+                        chpos: uint, byte_pos: uint,\n+                        ftype: file_type) -> parser {\n     let srdr = ioivec::file_reader(path);\n     let src = str::unsafe_from_bytes_ivec(srdr.read_whole_stream());\n     let filemap = codemap::new_filemap(path, chpos, byte_pos);\n@@ -2313,7 +2313,7 @@ fn parse_native_view(p: &parser) -> (@ast::view_item)[] {\n \n fn parse_crate_from_source_file(input: &str, cfg: &ast::crate_cfg,\n                                 sess: &parse_sess) -> @ast::crate {\n-    let p = new_parser_from_file(sess, cfg, input, 0u, 0u);\n+    let p = new_parser_from_file(sess, cfg, input, 0u, 0u, SOURCE_FILE);\n     ret parse_crate_mod(p, cfg, sess);\n }\n \n@@ -2430,7 +2430,7 @@ fn parse_crate_directives(p: &parser, term: token::token,\n \n fn parse_crate_from_crate_file(input: &str, cfg: &ast::crate_cfg,\n                                sess: &parse_sess) -> @ast::crate {\n-    let p = new_parser_from_file(sess, cfg, input, 0u, 0u);\n+    let p = new_parser_from_file(sess, cfg, input, 0u, 0u, CRATE_FILE);\n     let lo = p.get_lo_pos();\n     let prefix = std::fs::dirname(p.get_filemap().name);\n     let leading_attrs = parse_inner_attrs_and_next(p);\n@@ -2455,6 +2455,21 @@ fn parse_crate_from_crate_file(input: &str, cfg: &ast::crate_cfg,\n                   attrs: crate_attrs,\n                   config: p.get_cfg()});\n }\n+\n+fn parse_crate_from_file(input: &str, cfg: &ast::crate_cfg,\n+                         sess: &parse_sess) -> @ast::crate {\n+    if str::ends_with(input, \".rc\") {\n+        parse_crate_from_crate_file(input, cfg, sess)\n+    } else if str::ends_with(input, \".rs\") {\n+        parse_crate_from_source_file(input, cfg, sess)\n+    } else {\n+        codemap::emit_error(none,\n+                            \"unknown input file type: \" + input,\n+                            sess.cm);\n+        fail\n+    }\n+}\n+\n //\n // Local Variables:\n // mode: rust"}]}