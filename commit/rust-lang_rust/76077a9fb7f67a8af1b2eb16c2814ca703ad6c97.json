{"sha": "76077a9fb7f67a8af1b2eb16c2814ca703ad6c97", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2MDc3YTlmYjdmNjdhOGFmMWIyZWIxNmMyODE0Y2E3MDNhZDZjOTc=", "commit": {"author": {"name": "Matt Brubeck", "email": "mbrubeck@limpet.net", "date": "2011-11-01T17:31:23Z"}, "committer": {"name": "Matt Brubeck", "email": "mbrubeck@limpet.net", "date": "2011-11-01T23:55:39Z"}, "message": "Add should_fail annotation for unit tests\n\nThis allows test cases to assert that a function is expected to fail.\nTests annotated with \"should_fail\" will succeed only if the function\nfails.", "tree": {"sha": "5093785e88259f901a94c9199f6908053d4841ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5093785e88259f901a94c9199f6908053d4841ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76077a9fb7f67a8af1b2eb16c2814ca703ad6c97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76077a9fb7f67a8af1b2eb16c2814ca703ad6c97", "html_url": "https://github.com/rust-lang/rust/commit/76077a9fb7f67a8af1b2eb16c2814ca703ad6c97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76077a9fb7f67a8af1b2eb16c2814ca703ad6c97/comments", "author": {"login": "mbrubeck", "id": 5920, "node_id": "MDQ6VXNlcjU5MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbrubeck", "html_url": "https://github.com/mbrubeck", "followers_url": "https://api.github.com/users/mbrubeck/followers", "following_url": "https://api.github.com/users/mbrubeck/following{/other_user}", "gists_url": "https://api.github.com/users/mbrubeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbrubeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbrubeck/subscriptions", "organizations_url": "https://api.github.com/users/mbrubeck/orgs", "repos_url": "https://api.github.com/users/mbrubeck/repos", "events_url": "https://api.github.com/users/mbrubeck/events{/privacy}", "received_events_url": "https://api.github.com/users/mbrubeck/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mbrubeck", "id": 5920, "node_id": "MDQ6VXNlcjU5MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbrubeck", "html_url": "https://github.com/mbrubeck", "followers_url": "https://api.github.com/users/mbrubeck/followers", "following_url": "https://api.github.com/users/mbrubeck/following{/other_user}", "gists_url": "https://api.github.com/users/mbrubeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbrubeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbrubeck/subscriptions", "organizations_url": "https://api.github.com/users/mbrubeck/orgs", "repos_url": "https://api.github.com/users/mbrubeck/repos", "events_url": "https://api.github.com/users/mbrubeck/events{/privacy}", "received_events_url": "https://api.github.com/users/mbrubeck/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eabc9f229574a906437dd63359caec1c15fb75ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/eabc9f229574a906437dd63359caec1c15fb75ad", "html_url": "https://github.com/rust-lang/rust/commit/eabc9f229574a906437dd63359caec1c15fb75ad"}], "stats": {"total": 149, "additions": 126, "deletions": 23}, "files": [{"sha": "4008725b6872a31d794ae798e9861b910972b37d", "filename": "src/comp/front/test.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/76077a9fb7f67a8af1b2eb16c2814ca703ad6c97/src%2Fcomp%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76077a9fb7f67a8af1b2eb16c2814ca703ad6c97/src%2Fcomp%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftest.rs?ref=76077a9fb7f67a8af1b2eb16c2814ca703ad6c97", "patch": "@@ -14,7 +14,7 @@ export modify_for_testing;\n \n type node_id_gen = fn@() -> ast::node_id;\n \n-type test = {span: span, path: [ast::ident], ignore: bool};\n+type test = {span: span, path: [ast::ident], ignore: bool, should_fail: bool};\n \n type test_ctxt =\n     @{sess: session::session,\n@@ -105,7 +105,8 @@ fn fold_item(cx: test_ctxt, &&i: @ast::item, fld: fold::ast_fold) ->\n           _ {\n             log \"this is a test function\";\n             let test = {span: i.span,\n-                        path: cx.path, ignore: is_ignored(cx, i)};\n+                        path: cx.path, ignore: is_ignored(cx, i),\n+                        should_fail: should_fail(i)};\n             cx.testfns += [test];\n             log #fmt[\"have %u test functions\", vec::len(cx.testfns)];\n           }\n@@ -148,6 +149,10 @@ fn is_ignored(cx: test_ctxt, i: @ast::item) -> bool {\n     }\n }\n \n+fn should_fail(i: @ast::item) -> bool {\n+    vec::len(attr::find_attrs_by_name(i.attrs, \"should_fail\")) > 0u\n+}\n+\n fn add_test_module(cx: test_ctxt, m: ast::_mod) -> ast::_mod {\n     let testmod = mk_test_module(cx);\n     ret {items: m.items + [testmod] with m};\n@@ -299,8 +304,19 @@ fn mk_test_desc_rec(cx: test_ctxt, test: test) -> @ast::expr {\n     let ignore_field: ast::field =\n         nospan({mut: ast::imm, ident: \"ignore\", expr: @ignore_expr});\n \n+    let fail_lit: ast::lit = nospan(ast::lit_bool(test.should_fail));\n+\n+    let fail_expr: ast::expr =\n+        {id: cx.next_node_id(),\n+         node: ast::expr_lit(@fail_lit),\n+         span: span};\n+\n+    let fail_field: ast::field =\n+        nospan({mut: ast::imm, ident: \"should_fail\", expr: @fail_expr});\n+\n     let desc_rec_: ast::expr_ =\n-        ast::expr_rec([name_field, fn_field, ignore_field], option::none);\n+        ast::expr_rec([name_field, fn_field, ignore_field, fail_field],\n+            option::none);\n     let desc_rec: ast::expr =\n         {id: cx.next_node_id(), node: desc_rec_, span: span};\n     ret @desc_rec;"}, {"sha": "a582aa57b0d5e7344ad5798c4fa40acd4460a148", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76077a9fb7f67a8af1b2eb16c2814ca703ad6c97/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76077a9fb7f67a8af1b2eb16c2814ca703ad6c97/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=76077a9fb7f67a8af1b2eb16c2814ca703ad6c97", "patch": "@@ -170,7 +170,8 @@ fn make_test(cx: cx, testfile: str, configport: port<[u8]>) ->\n    test::test_desc<fn@()> {\n     {name: make_test_name(cx.config, testfile),\n      fn: make_test_closure(testfile, chan(configport)),\n-     ignore: header::is_test_ignored(cx.config, testfile)}\n+     ignore: header::is_test_ignored(cx.config, testfile),\n+     should_fail: false}\n }\n \n fn make_test_name(config: config, testfile: str) -> str {"}, {"sha": "af1e15880afd873ec2dacfc76d12e556f68f2ce0", "filename": "src/lib/test.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/76077a9fb7f67a8af1b2eb16c2814ca703ad6c97/src%2Flib%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76077a9fb7f67a8af1b2eb16c2814ca703ad6c97/src%2Flib%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftest.rs?ref=76077a9fb7f67a8af1b2eb16c2814ca703ad6c97", "patch": "@@ -50,7 +50,8 @@ type default_test_fn = test_fn<fn()>;\n type test_desc<T> = {\n     name: test_name,\n     fn: test_fn<T>,\n-    ignore: bool\n+    ignore: bool,\n+    should_fail: bool\n };\n \n // The default console test runner. It accepts the command line\n@@ -218,7 +219,6 @@ fn run_tests<T>(opts: test_opts, tests: [test_desc<T>],\n                  callback: fn@(testevent<T>)) {\n \n     let filtered_tests = filter_tests(opts, tests);\n-\n     callback(te_filtered(filtered_tests));\n \n     // It's tempting to just spawn all the tests at once but that doesn't\n@@ -282,7 +282,8 @@ fn filter_tests<T>(opts: test_opts,\n             if test.ignore {\n                 ret option::some({name: test.name,\n                                   fn: test.fn,\n-                                  ignore: false});\n+                                  ignore: false,\n+                                  should_fail: test.should_fail});\n             } else { ret option::none; }\n         };\n \n@@ -305,17 +306,25 @@ type test_future<T> = {test: test_desc<T>, wait: fn@() -> test_result};\n \n fn run_test<T>(test: test_desc<T>,\n                 to_task: test_to_task<T>) -> test_future<T> {\n-    if !test.ignore {\n-        let test_task = to_task(test.fn);\n-        ret {test: test,\n-             wait:\n-                 bind fn (test_task: joinable) -> test_result {\n-                          alt task::join(test_task) {\n-                            task::tr_success. { tr_ok }\n-                            task::tr_failure. { tr_failed }\n-                          }\n-                      }(test_task)};\n-    } else { ret {test: test, wait: fn () -> test_result { tr_ignored }}; }\n+    if test.ignore {\n+        ret {test: test, wait: fn () -> test_result { tr_ignored }};\n+    }\n+\n+    let test_task = to_task(test.fn);\n+    ret {test: test,\n+         wait:\n+             bind fn (test_task: joinable, should_fail: bool) -> test_result {\n+                  alt task::join(test_task) {\n+                    task::tr_success. {\n+                      if should_fail { tr_failed }\n+                      else { tr_ok }\n+                    }\n+                    task::tr_failure. {\n+                      if should_fail { tr_ok }\n+                      else { tr_failed }\n+                    }\n+                  }\n+              }(test_task, test.should_fail)};\n }\n \n // We need to run our tests in another task in order to trap test failures."}, {"sha": "79b803dc6c8bbea27bef5666deb68d47e2bfe7d1", "filename": "src/test/stdtest/char.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/76077a9fb7f67a8af1b2eb16c2814ca703ad6c97/src%2Ftest%2Fstdtest%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76077a9fb7f67a8af1b2eb16c2814ca703ad6c97/src%2Ftest%2Fstdtest%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fchar.rs?ref=76077a9fb7f67a8af1b2eb16c2814ca703ad6c97", "patch": "@@ -26,3 +26,15 @@ fn test_to_digit() {\n     assert (char::to_digit('z') == 35u8);\n     assert (char::to_digit('Z') == 35u8);\n }\n+\n+#[test]\n+#[should_fail]\n+fn test_to_digit_fail_1() {\n+    char::to_digit(' ');\n+}\n+\n+#[test]\n+#[should_fail]\n+fn test_to_digit_fail_2() {\n+    char::to_digit('$');\n+}"}, {"sha": "28b9b94c2ff43440ab2449b3fb4cdbc01bb19d03", "filename": "src/test/stdtest/int.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/76077a9fb7f67a8af1b2eb16c2814ca703ad6c97/src%2Ftest%2Fstdtest%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76077a9fb7f67a8af1b2eb16c2814ca703ad6c97/src%2Ftest%2Fstdtest%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fint.rs?ref=76077a9fb7f67a8af1b2eb16c2814ca703ad6c97", "patch": "@@ -19,6 +19,18 @@ fn test_from_str() {\n     assert(int::from_str(\"-00100\") == -100);\n }\n \n+#[test]\n+#[should_fail]\n+fn test_from_str_fail_1() {\n+    int::from_str(\" \");\n+}\n+\n+#[test]\n+#[should_fail]\n+fn test_from_str_fail_2() {\n+    int::from_str(\"x\");\n+}\n+\n #[test]\n fn test_parse_buf() {\n     assert (int::parse_buf(bytes(\"123\"), 10u) == 123);\n@@ -40,6 +52,18 @@ fn test_parse_buf() {\n     assert (int::parse_buf(bytes(\"-Z\"), 36u) == -35);\n }\n \n+#[test]\n+#[should_fail]\n+fn test_parse_buf_fail_1() {\n+    int::parse_buf(bytes(\"Z\"), 35u);\n+}\n+\n+#[test]\n+#[should_fail]\n+fn test_parse_buf_fail_2() {\n+    int::parse_buf(bytes(\"-9\"), 2u);\n+}\n+\n #[test]\n fn test_to_str() {\n     assert (eq(int::to_str(0, 10u), \"0\"));"}, {"sha": "48c28243c9204960d9625342a83d1cd4153a6854", "filename": "src/test/stdtest/test.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/76077a9fb7f67a8af1b2eb16c2814ca703ad6c97/src%2Ftest%2Fstdtest%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76077a9fb7f67a8af1b2eb16c2814ca703ad6c97/src%2Ftest%2Fstdtest%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Ftest.rs?ref=76077a9fb7f67a8af1b2eb16c2814ca703ad6c97", "patch": "@@ -7,7 +7,7 @@ import std::vec;\n #[test]\n fn do_not_run_ignored_tests() {\n     fn f() { fail; }\n-    let desc = {name: \"whatever\", fn: f, ignore: true};\n+    let desc = {name: \"whatever\", fn: f, ignore: true, should_fail: false};\n     let future = test::run_test(desc, test::default_test_to_task);\n     let result = future.wait();\n     assert result != test::tr_ok;\n@@ -16,11 +16,27 @@ fn do_not_run_ignored_tests() {\n #[test]\n fn ignored_tests_result_in_ignored() {\n     fn f() { }\n-    let desc = {name: \"whatever\", fn: f, ignore: true};\n+    let desc = {name: \"whatever\", fn: f, ignore: true, should_fail: false};\n     let res = test::run_test(desc, test::default_test_to_task).wait();\n     assert (res == test::tr_ignored);\n }\n \n+#[test]\n+fn test_should_fail() {\n+    fn f() { fail; }\n+    let desc = {name: \"whatever\", fn: f, ignore: false, should_fail: true};\n+    let res = test::run_test(desc, test::default_test_to_task).wait();\n+    assert res == test::tr_ok;\n+}\n+\n+#[test]\n+fn test_should_fail_but_succeeds() {\n+    fn f() { }\n+    let desc = {name: \"whatever\", fn: f, ignore: false, should_fail: true};\n+    let res = test::run_test(desc, test::default_test_to_task).wait();\n+    assert res == test::tr_failed;\n+}\n+\n #[test]\n fn first_free_arg_should_be_a_filter() {\n     let args = [\"progname\", \"filter\"];\n@@ -44,8 +60,8 @@ fn filter_for_ignored_option() {\n \n     let opts = {filter: option::none, run_ignored: true};\n     let tests =\n-        [{name: \"1\", fn: fn () { }, ignore: true},\n-         {name: \"2\", fn: fn () { }, ignore: false}];\n+        [{name: \"1\", fn: fn () { }, ignore: true, should_fail: false},\n+         {name: \"2\", fn: fn () { }, ignore: false, should_fail: false}];\n     let filtered = test::filter_tests(opts, tests);\n \n     assert (vec::len(filtered) == 1u);\n@@ -69,7 +85,8 @@ fn sort_tests() {\n             let testfn = fn () { };\n             let tests = [];\n             for name: str in names {\n-                let test = {name: name, fn: testfn, ignore: false};\n+                let test = {name: name, fn: testfn, ignore: false,\n+                  should_fail: false};\n                 tests += [test];\n             }\n             tests"}, {"sha": "6a2b5bdbd3aebad07d000b5aef085aff75ef3fef", "filename": "src/test/stdtest/uint.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/76077a9fb7f67a8af1b2eb16c2814ca703ad6c97/src%2Ftest%2Fstdtest%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76077a9fb7f67a8af1b2eb16c2814ca703ad6c97/src%2Ftest%2Fstdtest%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fuint.rs?ref=76077a9fb7f67a8af1b2eb16c2814ca703ad6c97", "patch": "@@ -14,6 +14,18 @@ fn test_from_str() {\n     assert (uint::from_str(\"00100\") == 100u);\n }\n \n+#[test]\n+#[should_fail]\n+fn test_from_str_fail_1() {\n+    uint::from_str(\" \");\n+}\n+\n+#[test]\n+#[should_fail]\n+fn test_from_str_fail_2() {\n+    uint::from_str(\"x\");\n+}\n+\n #[test]\n fn test_parse_buf() {\n     assert (uint::parse_buf(bytes(\"123\"), 10u) == 123u);\n@@ -24,6 +36,18 @@ fn test_parse_buf() {\n     assert (uint::parse_buf(bytes(\"z\"), 36u) == 35u);\n }\n \n+#[test]\n+#[should_fail]\n+fn test_parse_buf_fail_1() {\n+    uint::parse_buf(bytes(\"Z\"), 10u);\n+}\n+\n+#[test]\n+#[should_fail]\n+fn test_parse_buf_fail_2() {\n+    uint::parse_buf(bytes(\"_\"), 2u);\n+}\n+\n #[test]\n fn test_next_power_of_two() {\n     assert (uint::next_power_of_two(0u) == 0u);"}]}