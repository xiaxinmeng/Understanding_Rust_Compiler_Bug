{"sha": "7339eca0cc700e2d75536dce3ca772eedfb86f08", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczMzllY2EwY2M3MDBlMmQ3NTUzNmRjZTNjYTc3MmVlZGZiODZmMDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-06-16T05:12:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-16T05:12:26Z"}, "message": "Auto merge of #34000 - estebank:missingargs, r=jseyfried\n\nShow types of all args when missing args\n\nWhen there're missing arguments in a function call, present a list of\nall the expected types:\n\n```rust\nfn main() {\n    t(\"\");\n}\n\nfn t(a: &str, x: String) {}\n```\n\n```bash\n% rustc file.rs\nfile.rs:3:5: 2:8 error: this function takes 2 parameters but 0\nparameters were supplied [E0061]\nfile.rs:3     t();\n              ^~~\nfile.rs:3:5: 2:8 help: run `rustc --explain E0061` to see a detailed explanation\nfile.rs:3:5: 2:8 note: the following parameter types were expected: &str, std::string::String\nerror: aborting due to previous error\n```\n\nFixes #33649", "tree": {"sha": "fa6c8ad4c71f91c29bb627883164ddaa799e43be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa6c8ad4c71f91c29bb627883164ddaa799e43be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7339eca0cc700e2d75536dce3ca772eedfb86f08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7339eca0cc700e2d75536dce3ca772eedfb86f08", "html_url": "https://github.com/rust-lang/rust/commit/7339eca0cc700e2d75536dce3ca772eedfb86f08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7339eca0cc700e2d75536dce3ca772eedfb86f08/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58adb0760726bfb6f19c055caa58af51ef393b57", "url": "https://api.github.com/repos/rust-lang/rust/commits/58adb0760726bfb6f19c055caa58af51ef393b57", "html_url": "https://github.com/rust-lang/rust/commit/58adb0760726bfb6f19c055caa58af51ef393b57"}, {"sha": "1020e3036badebc56b02661666b09a62112d04ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/1020e3036badebc56b02661666b09a62112d04ec", "html_url": "https://github.com/rust-lang/rust/commit/1020e3036badebc56b02661666b09a62112d04ec"}], "stats": {"total": 88, "additions": 55, "deletions": 33}, "files": [{"sha": "6f7f33fe24d16fc0f2da61f97fde9af971264419", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 39, "deletions": 32, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/7339eca0cc700e2d75536dce3ca772eedfb86f08/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7339eca0cc700e2d75536dce3ca772eedfb86f08/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=7339eca0cc700e2d75536dce3ca772eedfb86f08", "patch": "@@ -2402,29 +2402,45 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         let mut expected_arg_tys = expected_arg_tys;\n         let expected_arg_count = fn_inputs.len();\n+\n+        fn parameter_count_error<'tcx>(sess: &Session, sp: Span, fn_inputs: &[Ty<'tcx>],\n+                                       expected_count: usize, arg_count: usize, error_code: &str,\n+                                       variadic: bool) {\n+            let mut err = sess.struct_span_err_with_code(sp,\n+                &format!(\"this function takes {}{} parameter{} but {} parameter{} supplied\",\n+                    if variadic {\"at least \"} else {\"\"},\n+                    expected_count,\n+                    if expected_count == 1 {\"\"} else {\"s\"},\n+                    arg_count,\n+                    if arg_count == 1 {\" was\"} else {\"s were\"}),\n+                error_code);\n+            let input_types = fn_inputs.iter().map(|i| format!(\"{:?}\", i)).collect::<Vec<String>>();\n+            if input_types.len() > 0 {\n+                err.note(&format!(\"the following parameter type{} expected: {}\",\n+                        if expected_count == 1 {\" was\"} else {\"s were\"},\n+                        input_types.join(\", \")));\n+            }\n+            err.emit();\n+        }\n+\n         let formal_tys = if tuple_arguments == TupleArguments {\n             let tuple_type = self.structurally_resolved_type(sp, fn_inputs[0]);\n             match tuple_type.sty {\n+                ty::TyTuple(arg_types) if arg_types.len() != args.len() => {\n+                    parameter_count_error(tcx.sess, sp, fn_inputs, arg_types.len(), args.len(),\n+                                          \"E0057\", false);\n+                    expected_arg_tys = &[];\n+                    self.err_args(args.len())\n+                }\n                 ty::TyTuple(arg_types) => {\n-                    if arg_types.len() != args.len() {\n-                        span_err!(tcx.sess, sp, E0057,\n-                            \"this function takes {} parameter{} but {} parameter{} supplied\",\n-                            arg_types.len(),\n-                            if arg_types.len() == 1 {\"\"} else {\"s\"},\n-                            args.len(),\n-                            if args.len() == 1 {\" was\"} else {\"s were\"});\n-                        expected_arg_tys = &[];\n-                        self.err_args(args.len())\n-                    } else {\n-                        expected_arg_tys = match expected_arg_tys.get(0) {\n-                            Some(&ty) => match ty.sty {\n-                                ty::TyTuple(ref tys) => &tys,\n-                                _ => &[]\n-                            },\n-                            None => &[]\n-                        };\n-                        arg_types.to_vec()\n-                    }\n+                    expected_arg_tys = match expected_arg_tys.get(0) {\n+                        Some(&ty) => match ty.sty {\n+                            ty::TyTuple(ref tys) => &tys,\n+                            _ => &[]\n+                        },\n+                        None => &[]\n+                    };\n+                    arg_types.to_vec()\n                 }\n                 _ => {\n                     span_err!(tcx.sess, sp, E0059,\n@@ -2440,23 +2456,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             if supplied_arg_count >= expected_arg_count {\n                 fn_inputs.to_vec()\n             } else {\n-                span_err!(tcx.sess, sp, E0060,\n-                    \"this function takes at least {} parameter{} \\\n-                     but {} parameter{} supplied\",\n-                    expected_arg_count,\n-                    if expected_arg_count == 1 {\"\"} else {\"s\"},\n-                    supplied_arg_count,\n-                    if supplied_arg_count == 1 {\" was\"} else {\"s were\"});\n+                parameter_count_error(tcx.sess, sp, fn_inputs, expected_arg_count,\n+                                      supplied_arg_count, \"E0060\", true);\n                 expected_arg_tys = &[];\n                 self.err_args(supplied_arg_count)\n             }\n         } else {\n-            span_err!(tcx.sess, sp, E0061,\n-                \"this function takes {} parameter{} but {} parameter{} supplied\",\n-                expected_arg_count,\n-                if expected_arg_count == 1 {\"\"} else {\"s\"},\n-                supplied_arg_count,\n-                if supplied_arg_count == 1 {\" was\"} else {\"s were\"});\n+            parameter_count_error(tcx.sess, sp, fn_inputs, expected_arg_count, supplied_arg_count,\n+                                  \"E0061\", false);\n             expected_arg_tys = &[];\n             self.err_args(supplied_arg_count)\n         };"}, {"sha": "3591b9824145bbdd2d114d457727baf2e6143425", "filename": "src/test/compile-fail/issue-18819.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7339eca0cc700e2d75536dce3ca772eedfb86f08/src%2Ftest%2Fcompile-fail%2Fissue-18819.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7339eca0cc700e2d75536dce3ca772eedfb86f08/src%2Ftest%2Fcompile-fail%2Fissue-18819.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18819.rs?ref=7339eca0cc700e2d75536dce3ca772eedfb86f08", "patch": "@@ -24,4 +24,5 @@ fn print_x(_: &Foo<Item=bool>, extra: &str) {\n \n fn main() {\n     print_x(X);  //~error this function takes 2 parameters but 1 parameter was supplied\n+    //~^ NOTE the following parameter types were expected: &Foo<Item=bool>, &str\n }"}, {"sha": "68046056fb3156eebb5691b80a0f82c6e06eabd7", "filename": "src/test/compile-fail/issue-3044.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7339eca0cc700e2d75536dce3ca772eedfb86f08/src%2Ftest%2Fcompile-fail%2Fissue-3044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7339eca0cc700e2d75536dce3ca772eedfb86f08/src%2Ftest%2Fcompile-fail%2Fissue-3044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3044.rs?ref=7339eca0cc700e2d75536dce3ca772eedfb86f08", "patch": "@@ -14,6 +14,7 @@ fn main() {\n     needlesArr.iter().fold(|x, y| {\n     });\n     //~^^ ERROR this function takes 2 parameters but 1 parameter was supplied\n+    //~^^^ NOTE the following parameter types were expected\n     //\n     // the first error is, um, non-ideal.\n }"}, {"sha": "438d238b6fe6288c8c7202c6208dd42b2114ae30", "filename": "src/test/compile-fail/issue-4935.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7339eca0cc700e2d75536dce3ca772eedfb86f08/src%2Ftest%2Fcompile-fail%2Fissue-4935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7339eca0cc700e2d75536dce3ca772eedfb86f08/src%2Ftest%2Fcompile-fail%2Fissue-4935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4935.rs?ref=7339eca0cc700e2d75536dce3ca772eedfb86f08", "patch": "@@ -12,3 +12,4 @@\n \n fn foo(a: usize) {}\n fn main() { foo(5, 6) } //~ ERROR this function takes 1 parameter but 2 parameters were supplied\n+//~^ NOTE the following parameter type was expected"}, {"sha": "212c09364cf4c027c711e40e4f51f277052772bc", "filename": "src/test/compile-fail/method-call-err-msg.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7339eca0cc700e2d75536dce3ca772eedfb86f08/src%2Ftest%2Fcompile-fail%2Fmethod-call-err-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7339eca0cc700e2d75536dce3ca772eedfb86f08/src%2Ftest%2Fcompile-fail%2Fmethod-call-err-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-call-err-msg.rs?ref=7339eca0cc700e2d75536dce3ca772eedfb86f08", "patch": "@@ -21,10 +21,13 @@ fn main() {\n     let x = Foo;\n     x.zero(0)   //~ ERROR this function takes 0 parameters but 1 parameter was supplied\n      .one()     //~ ERROR this function takes 1 parameter but 0 parameters were supplied\n+     //~^ NOTE the following parameter type was expected\n      .two(0);   //~ ERROR this function takes 2 parameters but 1 parameter was supplied\n+     //~^ NOTE the following parameter types were expected\n \n     let y = Foo;\n     y.zero()\n      .take()    //~ ERROR no method named `take` found for type `Foo` in the current scope\n+     //~^ NOTE the method `take` exists but the following trait bounds were not satisfied\n      .one(0);\n }"}, {"sha": "1f5a54477dd6d0fa83f4597179b819deec94c5db", "filename": "src/test/compile-fail/not-enough-arguments.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7339eca0cc700e2d75536dce3ca772eedfb86f08/src%2Ftest%2Fcompile-fail%2Fnot-enough-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7339eca0cc700e2d75536dce3ca772eedfb86f08/src%2Ftest%2Fcompile-fail%2Fnot-enough-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-enough-arguments.rs?ref=7339eca0cc700e2d75536dce3ca772eedfb86f08", "patch": "@@ -19,4 +19,5 @@ fn foo(a: isize, b: isize, c: isize, d:isize) {\n fn main() {\n   foo(1, 2, 3);\n   //~^ ERROR this function takes 4 parameters but 3\n+  //~^^ NOTE the following parameter types were expected\n }"}, {"sha": "8763fb0913a87287ef21d84b391dc7be7bc6bf68", "filename": "src/test/compile-fail/overloaded-calls-bad.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7339eca0cc700e2d75536dce3ca772eedfb86f08/src%2Ftest%2Fcompile-fail%2Foverloaded-calls-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7339eca0cc700e2d75536dce3ca772eedfb86f08/src%2Ftest%2Fcompile-fail%2Foverloaded-calls-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foverloaded-calls-bad.rs?ref=7339eca0cc700e2d75536dce3ca772eedfb86f08", "patch": "@@ -36,7 +36,13 @@ fn main() {\n         y: 3,\n     };\n     let ans = s(\"what\");    //~ ERROR mismatched types\n-    let ans = s();  //~ ERROR this function takes 1 parameter but 0 parameters were supplied\n+    //~^ NOTE expected isize, found &-ptr\n+    //~| NOTE expected type\n+    //~| NOTE found type\n+    let ans = s();\n+    //~^ ERROR this function takes 1 parameter but 0 parameters were supplied\n+    //~| NOTE the following parameter type was expected\n     let ans = s(\"burma\", \"shave\");\n     //~^ ERROR this function takes 1 parameter but 2 parameters were supplied\n+    //~| NOTE the following parameter type was expected\n }"}, {"sha": "d8620ead836397d8a290c961cfb38c939913f047", "filename": "src/test/compile-fail/variadic-ffi-3.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7339eca0cc700e2d75536dce3ca772eedfb86f08/src%2Ftest%2Fcompile-fail%2Fvariadic-ffi-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7339eca0cc700e2d75536dce3ca772eedfb86f08/src%2Ftest%2Fcompile-fail%2Fvariadic-ffi-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariadic-ffi-3.rs?ref=7339eca0cc700e2d75536dce3ca772eedfb86f08", "patch": "@@ -17,7 +17,9 @@ extern \"C\" fn bar(f: isize, x: u8) {}\n fn main() {\n     unsafe {\n         foo(); //~ ERROR: this function takes at least 2 parameters but 0 parameters were supplied\n+        //~^ NOTE the following parameter types were expected\n         foo(1); //~ ERROR: this function takes at least 2 parameters but 1 parameter was supplied\n+        //~^ NOTE the following parameter types were expected\n \n         let x: unsafe extern \"C\" fn(f: isize, x: u8) = foo;\n         //~^ ERROR: mismatched types"}]}