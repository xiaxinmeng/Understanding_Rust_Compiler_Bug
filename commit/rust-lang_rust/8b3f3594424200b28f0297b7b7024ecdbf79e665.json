{"sha": "8b3f3594424200b28f0297b7b7024ecdbf79e665", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiM2YzNTk0NDI0MjAwYjI4ZjAyOTdiN2I3MDI0ZWNkYmY3OWU2NjU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-14T17:15:22Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-14T18:03:10Z"}, "message": "rustc: Change \"Collect\" to \"collect\"", "tree": {"sha": "8e285c5993a094caaec09abbd8bd076abcf5d9d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e285c5993a094caaec09abbd8bd076abcf5d9d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b3f3594424200b28f0297b7b7024ecdbf79e665", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b3f3594424200b28f0297b7b7024ecdbf79e665", "html_url": "https://github.com/rust-lang/rust/commit/8b3f3594424200b28f0297b7b7024ecdbf79e665", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b3f3594424200b28f0297b7b7024ecdbf79e665/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec30c71296fa428512396366b416f20262799380", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec30c71296fa428512396366b416f20262799380", "html_url": "https://github.com/rust-lang/rust/commit/ec30c71296fa428512396366b416f20262799380"}], "stats": {"total": 7, "additions": 3, "deletions": 4}, "files": [{"sha": "8116057c09c8c3e624ec47d3ce1c418a35411a1c", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8b3f3594424200b28f0297b7b7024ecdbf79e665/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b3f3594424200b28f0297b7b7024ecdbf79e665/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=8b3f3594424200b28f0297b7b7024ecdbf79e665", "patch": "@@ -404,7 +404,7 @@ fn write_nil_type(ty::ctxt tcx, &node_type_table ntt, uint node_id) {\n // We then annotate the AST with the resulting types and return the annotated\n // AST, along with a table mapping item IDs to their types.\n \n-mod Collect {\n+mod collect {\n     type ctxt = rec(session::session sess,\n                     @ty_item_table id_to_ty_item,\n                     ty::type_cache type_cache,\n@@ -3300,16 +3300,15 @@ type typecheck_result = tup(node_type_table, ty::type_cache, @ast::crate);\n \n fn check_crate(&ty::ctxt tcx, &@ast::crate crate) -> typecheck_result {\n     auto sess = tcx.sess;\n-    auto result = Collect::collect_item_types(sess, tcx, crate);\n+    auto result = collect::collect_item_types(sess, tcx, crate);\n \n     let vec[ast::obj_field] fields = vec();\n \n     auto hasher = hash_unify_cache_entry;\n     auto eqer = eq_unify_cache_entry;\n     auto unify_cache =\n         map::mk_hashmap[unify_cache_entry,ty::Unify::result](hasher, eqer);\n-    auto fpt =\n-        mk_fn_purity_table(crate); // use a variation on Collect\n+    auto fpt = mk_fn_purity_table(crate); // use a variation on collect\n     let node_type_table node_types = result._3;\n \n     auto ccx = @rec(sess=sess,"}]}