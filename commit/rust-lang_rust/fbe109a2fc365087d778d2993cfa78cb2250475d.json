{"sha": "fbe109a2fc365087d778d2993cfa78cb2250475d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiZTEwOWEyZmMzNjUwODdkNzc4ZDI5OTNjZmE3OGNiMjI1MDQ3NWQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-02-02T14:38:51Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-02-02T15:36:54Z"}, "message": "Avoid a hir access inside get_static", "tree": {"sha": "21efbb1e81a4561000b05fe2a1a8deab7523bfb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21efbb1e81a4561000b05fe2a1a8deab7523bfb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbe109a2fc365087d778d2993cfa78cb2250475d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbe109a2fc365087d778d2993cfa78cb2250475d", "html_url": "https://github.com/rust-lang/rust/commit/fbe109a2fc365087d778d2993cfa78cb2250475d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbe109a2fc365087d778d2993cfa78cb2250475d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d60b29d1ae8147538b8d542f7ffcc03b48e2cbda", "url": "https://api.github.com/repos/rust-lang/rust/commits/d60b29d1ae8147538b8d542f7ffcc03b48e2cbda", "html_url": "https://github.com/rust-lang/rust/commit/d60b29d1ae8147538b8d542f7ffcc03b48e2cbda"}], "stats": {"total": 80, "additions": 24, "deletions": 56}, "files": [{"sha": "80db614faf98c5960ebc822e8f7cd8a3cf889770", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 24, "deletions": 56, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/fbe109a2fc365087d778d2993cfa78cb2250475d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe109a2fc365087d778d2993cfa78cb2250475d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=fbe109a2fc365087d778d2993cfa78cb2250475d", "patch": "@@ -8,17 +8,14 @@ use crate::value::Value;\n use libc::c_uint;\n use rustc_codegen_ssa::traits::*;\n use rustc_data_structures::const_cstr;\n-use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::Node;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc_middle::mir::interpret::{\n     read_target_uint, Allocation, ErrorHandled, GlobalAlloc, Pointer,\n };\n use rustc_middle::mir::mono::MonoItem;\n use rustc_middle::ty::{self, Instance, Ty};\n use rustc_middle::{bug, span_bug};\n-use rustc_span::symbol::sym;\n use rustc_target::abi::{AddressSpace, Align, HasDataLayout, LayoutOf, Primitive, Scalar, Size};\n use tracing::debug;\n \n@@ -209,70 +206,42 @@ impl CodegenCx<'ll, 'tcx> {\n \n         let ty = instance.ty(self.tcx, ty::ParamEnv::reveal_all());\n         let sym = self.tcx.symbol_name(instance).name;\n+        let fn_attrs = self.tcx.codegen_fn_attrs(def_id);\n \n-        debug!(\"get_static: sym={} instance={:?}\", sym, instance);\n+        debug!(\"get_static: sym={} instance={:?} fn_attrs={:?}\", sym, instance, fn_attrs);\n \n-        let g = if let Some(local_def_id) = def_id.as_local() {\n-            let id = self.tcx.hir().local_def_id_to_hir_id(local_def_id);\n+        let g = if def_id.as_local().is_some() && !self.tcx.is_foreign_item(def_id) {\n             let llty = self.layout_of(ty).llvm_type(self);\n-            // FIXME: refactor this to work without accessing the HIR\n-            let (g, attrs) = match self.tcx.hir().get(id) {\n-                Node::Item(&hir::Item { attrs, kind: hir::ItemKind::Static(..), .. }) => {\n-                    if let Some(g) = self.get_declared_value(sym) {\n-                        if self.val_ty(g) != self.type_ptr_to(llty) {\n-                            span_bug!(self.tcx.def_span(def_id), \"Conflicting types for static\");\n-                        }\n-                    }\n-\n-                    let g = self.declare_global(sym, llty);\n-\n-                    if !self.tcx.is_reachable_non_generic(local_def_id) {\n-                        unsafe {\n-                            llvm::LLVMRustSetVisibility(g, llvm::Visibility::Hidden);\n-                        }\n-                    }\n-\n-                    (g, attrs)\n+            if let Some(g) = self.get_declared_value(sym) {\n+                if self.val_ty(g) != self.type_ptr_to(llty) {\n+                    span_bug!(self.tcx.def_span(def_id), \"Conflicting types for static\");\n                 }\n+            }\n \n-                Node::ForeignItem(&hir::ForeignItem {\n-                    ref attrs,\n-                    kind: hir::ForeignItemKind::Static(..),\n-                    ..\n-                }) => {\n-                    let fn_attrs = self.tcx.codegen_fn_attrs(local_def_id);\n-                    (check_and_apply_linkage(&self, &fn_attrs, ty, sym, def_id), &**attrs)\n-                }\n-\n-                item => bug!(\"get_static: expected static, found {:?}\", item),\n-            };\n-\n-            debug!(\"get_static: sym={} attrs={:?}\", sym, attrs);\n+            let g = self.declare_global(sym, llty);\n \n-            for attr in attrs {\n-                if self.tcx.sess.check_name(attr, sym::thread_local) {\n-                    llvm::set_thread_local_mode(g, self.tls_model);\n+            if !self.tcx.is_reachable_non_generic(def_id) {\n+                unsafe {\n+                    llvm::LLVMRustSetVisibility(g, llvm::Visibility::Hidden);\n                 }\n             }\n \n             g\n         } else {\n-            // FIXME(nagisa): perhaps the map of externs could be offloaded to llvm somehow?\n-            debug!(\"get_static: sym={} item_attr={:?}\", sym, self.tcx.item_attrs(def_id));\n+            check_and_apply_linkage(&self, &fn_attrs, ty, sym, def_id)\n+        };\n \n-            let attrs = self.tcx.codegen_fn_attrs(def_id);\n-            let g = check_and_apply_linkage(&self, &attrs, ty, sym, def_id);\n-\n-            // Thread-local statics in some other crate need to *always* be linked\n-            // against in a thread-local fashion, so we need to be sure to apply the\n-            // thread-local attribute locally if it was present remotely. If we\n-            // don't do this then linker errors can be generated where the linker\n-            // complains that one object files has a thread local version of the\n-            // symbol and another one doesn't.\n-            if attrs.flags.contains(CodegenFnAttrFlags::THREAD_LOCAL) {\n-                llvm::set_thread_local_mode(g, self.tls_model);\n-            }\n+        // Thread-local statics in some other crate need to *always* be linked\n+        // against in a thread-local fashion, so we need to be sure to apply the\n+        // thread-local attribute locally if it was present remotely. If we\n+        // don't do this then linker errors can be generated where the linker\n+        // complains that one object files has a thread local version of the\n+        // symbol and another one doesn't.\n+        if fn_attrs.flags.contains(CodegenFnAttrFlags::THREAD_LOCAL) {\n+            llvm::set_thread_local_mode(g, self.tls_model);\n+        }\n \n+        if def_id.as_local().is_none() {\n             let needs_dll_storage_attr = self.use_dll_storage_attrs && !self.tcx.is_foreign_item(def_id) &&\n                 // ThinLTO can't handle this workaround in all cases, so we don't\n                 // emit the attrs. Instead we make them unnecessary by disallowing\n@@ -304,8 +273,7 @@ impl CodegenCx<'ll, 'tcx> {\n                     }\n                 }\n             }\n-            g\n-        };\n+        }\n \n         if self.use_dll_storage_attrs && self.tcx.is_dllimport_foreign_item(def_id) {\n             // For foreign (native) libs we know the exact storage type to use."}]}