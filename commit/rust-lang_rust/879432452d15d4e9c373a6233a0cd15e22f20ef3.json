{"sha": "879432452d15d4e9c373a6233a0cd15e22f20ef3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3OTQzMjQ1MmQxNWQ0ZTljMzczYTYyMzNhMGNkMTVlMjJmMjBlZjM=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-03-20T20:54:04Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-03-20T20:55:34Z"}, "message": "Docs", "tree": {"sha": "918eb815d2da4758d00dfac387b805de6a771c11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/918eb815d2da4758d00dfac387b805de6a771c11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/879432452d15d4e9c373a6233a0cd15e22f20ef3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/879432452d15d4e9c373a6233a0cd15e22f20ef3", "html_url": "https://github.com/rust-lang/rust/commit/879432452d15d4e9c373a6233a0cd15e22f20ef3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/879432452d15d4e9c373a6233a0cd15e22f20ef3/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a631108d2dd0596b079b59efa37b1af00d7555db", "url": "https://api.github.com/repos/rust-lang/rust/commits/a631108d2dd0596b079b59efa37b1af00d7555db", "html_url": "https://github.com/rust-lang/rust/commit/a631108d2dd0596b079b59efa37b1af00d7555db"}], "stats": {"total": 35, "additions": 20, "deletions": 15}, "files": [{"sha": "23ab042c158eec81ad08d94b41937611a2bb9eee", "filename": "crates/hir_ty/src/autoderef.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/879432452d15d4e9c373a6233a0cd15e22f20ef3/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879432452d15d4e9c373a6233a0cd15e22f20ef3/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs?ref=879432452d15d4e9c373a6233a0cd15e22f20ef3", "patch": "@@ -27,7 +27,6 @@ pub fn autoderef<'a>(\n     krate: Option<CrateId>,\n     ty: InEnvironment<Canonical<Ty>>,\n ) -> impl Iterator<Item = Canonical<Ty>> + 'a {\n-    // from_chalk\n     let InEnvironment { value: ty, environment } = ty;\n     successors(Some(ty), move |ty| {\n         deref(db, krate?, InEnvironment { value: ty, environment: environment.clone() })"}, {"sha": "2608b56da6ff1f1b746b91e22fe59bb31ba532d5", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/879432452d15d4e9c373a6233a0cd15e22f20ef3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879432452d15d4e9c373a6233a0cd15e22f20ef3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=879432452d15d4e9c373a6233a0cd15e22f20ef3", "patch": "@@ -65,12 +65,12 @@ pub(crate) fn replace_derive_with_manual_impl(\n     let current_module = ctx.sema.scope(annotated_name.syntax()).module()?;\n     let current_crate = current_module.krate();\n \n-    let found_traits = items_locator::locate_for_name(\n+    let found_traits = items_locator::items_with_name(\n         &ctx.sema,\n         current_crate,\n         NameToImport::Exact(trait_token.text().to_string()),\n         items_locator::AssocItemSearch::Exclude,\n-        None,\n+        Some(items_locator::DEFAULT_QUERY_SEARCH_LIMIT),\n     )\n     .into_iter()\n     .filter_map(|item| match ModuleDef::from(item.as_module_def_id()?) {"}, {"sha": "9ecd82b06f974b73c9e60ec054e3f8a5cdb86c5c", "filename": "crates/ide_completion/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/879432452d15d4e9c373a6233a0cd15e22f20ef3/crates%2Fide_completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879432452d15d4e9c373a6233a0cd15e22f20ef3/crates%2Fide_completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Flib.rs?ref=879432452d15d4e9c373a6233a0cd15e22f20ef3", "patch": "@@ -152,12 +152,12 @@ pub fn resolve_completion_edits(\n     let current_module = ctx.sema.scope(position_for_import).module()?;\n     let current_crate = current_module.krate();\n \n-    let (import_path, item_to_import) = items_locator::locate_for_name(\n+    let (import_path, item_to_import) = items_locator::items_with_name(\n         &ctx.sema,\n         current_crate,\n         NameToImport::Exact(imported_name),\n         items_locator::AssocItemSearch::Include,\n-        None,\n+        Some(items_locator::DEFAULT_QUERY_SEARCH_LIMIT),\n     )\n     .into_iter()\n     .filter_map(|candidate| {"}, {"sha": "6995c3e19bac712754d7bf9653cb1343553428e3", "filename": "crates/ide_db/src/helpers/import_assets.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/879432452d15d4e9c373a6233a0cd15e22f20ef3/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879432452d15d4e9c373a6233a0cd15e22f20ef3/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs?ref=879432452d15d4e9c373a6233a0cd15e22f20ef3", "patch": "@@ -252,7 +252,7 @@ fn path_applicable_imports(\n \n     match &path_candidate.qualifier {\n         None => {\n-            items_locator::locate_for_name(\n+            items_locator::items_with_name(\n                 sema,\n                 current_crate,\n                 path_candidate.name.clone(),\n@@ -271,7 +271,7 @@ fn path_applicable_imports(\n             let unresolved_qualifier =\n                 path_to_string_stripping_turbo_fish(&first_segment_unresolved.full_qualifier);\n             let unresolved_first_segment = first_segment_unresolved.fist_segment.text();\n-            items_locator::locate_for_name(\n+            items_locator::items_with_name(\n                 sema,\n                 current_crate,\n                 path_candidate.name.clone(),\n@@ -416,7 +416,7 @@ fn trait_applicable_items(\n     let db = sema.db;\n \n     let mut required_assoc_items = FxHashSet::default();\n-    let trait_candidates = items_locator::locate_for_name(\n+    let trait_candidates = items_locator::items_with_name(\n         sema,\n         current_crate,\n         trait_candidate.assoc_item_name.clone(),"}, {"sha": "518cddd74073cbb0ac416f68c80e56a653326eb4", "filename": "crates/ide_db/src/items_locator.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/879432452d15d4e9c373a6233a0cd15e22f20ef3/crates%2Fide_db%2Fsrc%2Fitems_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879432452d15d4e9c373a6233a0cd15e22f20ef3/crates%2Fide_db%2Fsrc%2Fitems_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fitems_locator.rs?ref=879432452d15d4e9c373a6233a0cd15e22f20ef3", "patch": "@@ -1,6 +1,7 @@\n-//! This module contains an import search functionality that is provided to the assists module.\n-//! Later, this should be moved away to a separate crate that is accessible from the assists module.\n-\n+//! This module has the functionality to search the project and its dependencies for a certain item,\n+//! by its name and a few criteria.\n+//! The main reason for this module to exist is the fact that project's items and dependencies' items\n+//! are located in different caches, with different APIs.\n use either::Either;\n use hir::{\n     import_map::{self, ImportKind},\n@@ -16,24 +17,29 @@ use crate::{\n };\n use rustc_hash::FxHashSet;\n \n-pub(crate) const DEFAULT_QUERY_SEARCH_LIMIT: usize = 40;\n+/// A value to use, when uncertain which limit to pick.\n+pub const DEFAULT_QUERY_SEARCH_LIMIT: usize = 40;\n \n-/// TODO kb docs here and around + update the module doc\n+/// Three possible ways to search for the name in associated and/or other items.\n #[derive(Debug, Clone, Copy)]\n pub enum AssocItemSearch {\n+    /// Search for the name in both associated and other items.\n     Include,\n+    /// Search for the name in other items only.\n     Exclude,\n+    /// Search for the name in the associated items only.\n     AssocItemsOnly,\n }\n \n-pub fn locate_for_name(\n+/// Searches for importable items with the given name in the crate and its dependencies.\n+pub fn items_with_name(\n     sema: &Semantics<'_, RootDatabase>,\n     krate: Crate,\n     name: NameToImport,\n     assoc_item_search: AssocItemSearch,\n     limit: Option<usize>,\n ) -> FxHashSet<ItemInNs> {\n-    let _p = profile::span(\"locate_for_name\").detail(|| {\n+    let _p = profile::span(\"items_with_name\").detail(|| {\n         format!(\n             \"Name: {} ({:?}), crate: {:?}, limit: {:?}\",\n             name.text(),"}]}