{"sha": "bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjMDcyZWQwY2E4ZTJlOWY4Yzc5ZmIwNGU4NWI0N2I1YzBlOGQ2YWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-22T05:30:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-22T05:30:37Z"}, "message": "Auto merge of #47144 - estebank:moved-closure-arg, r=nikomatsakis\n\nCustom error when moving arg outside of its closure\n\nWhen given the following code:\n\n```rust\nfn give_any<F: for<'r> FnOnce(&'r ())>(f: F) {\n    f(&());\n}\n\nfn main() {\n    let mut x = None;\n    give_any(|y| x = Some(y));\n}\n```\n\nprovide a custom error:\n\n```\nerror: borrowed data cannot be moved outside of its closure\n --> file.rs:7:27\n  |\n6 |     let mut x = None;\n  |         ----- borrowed data cannot be moved into here...\n7 |     give_any(|y| x = Some(y));\n  |              ---          ^ cannot be moved outside of its closure\n  |              |\n  |              ...because it cannot outlive this closure\n```\n\ninstead of the generic lifetime error:\n\n```\nerror[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n --> file.rs:7:27\n  |\n7 |     give_any(|y| x = Some(y));\n  |                           ^\n  |\nnote: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the body at 7:14...\n --> file.rs:7:14\n  |\n7 |     give_any(|y| x = Some(y));\n  |              ^^^^^^^^^^^^^^^\nnote: ...so that expression is assignable (expected &(), found &())\n --> file.rs:7:27\n  |\n7 |     give_any(|y| x = Some(y));\n  |                           ^\nnote: but, the lifetime must be valid for the block suffix following statement 0 at 6:5...\n --> file.rs:6:5\n  |\n6 | /     let mut x = None;\n7 | |     give_any(|y| x = Some(y));\n8 | | }\n  | |_^\nnote: ...so that variable is valid at time of its declaration\n --> file.rs:6:9\n  |\n6 |     let mut x = None;\n  |         ^^^^^\n```\n\nFix #45983.", "tree": {"sha": "2f4b8f1a04496f95c61c20a355b7b247052f5138", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f4b8f1a04496f95c61c20a355b7b247052f5138"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae", "html_url": "https://github.com/rust-lang/rust/commit/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff2a7c85757542f454934e00605355bbca7bc196", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff2a7c85757542f454934e00605355bbca7bc196", "html_url": "https://github.com/rust-lang/rust/commit/ff2a7c85757542f454934e00605355bbca7bc196"}, {"sha": "6f9ecaa7cf0a15db46d13d72932acb2d678c29f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f9ecaa7cf0a15db46d13d72932acb2d678c29f1", "html_url": "https://github.com/rust-lang/rust/commit/6f9ecaa7cf0a15db46d13d72932acb2d678c29f1"}], "stats": {"total": 373, "additions": 352, "deletions": 21}, "files": [{"sha": "541c1356dd4abbd73ae604adf5c2a22c499b8786", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae", "patch": "@@ -1067,6 +1067,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                sub_region: Region<'tcx>,\n                                sup_origin: SubregionOrigin<'tcx>,\n                                sup_region: Region<'tcx>) {\n+\n         let mut err = self.report_inference_failure(var_origin);\n \n         self.tcx.note_and_explain_region(region_scope_tree, &mut err,"}, {"sha": "7b0f2933580b39429b2354fb25c0fd2fb1f49741", "filename": "src/librustc/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae", "patch": "@@ -53,7 +53,7 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n     ///\n     /// It will later be extended to trait objects.\n     pub(super) fn try_report_anon_anon_conflict(&self) -> Option<ErrorReported> {\n-        let NiceRegionError { span, sub, sup, .. } = *self;\n+        let (span, sub, sup) = self.get_regions();\n \n         // Determine whether the sub and sup consist of both anonymous (elided) regions.\n         let anon_reg_sup = self.is_suitable_region(sup)?;"}, {"sha": "59b36a50a2b09d2dcb5c774bec1d1f8bb7581191", "filename": "src/librustc/infer/error_reporting/nice_region_error/mod.rs", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs?ref=bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae", "patch": "@@ -18,46 +18,64 @@ use util::common::ErrorReported;\n mod different_lifetimes;\n mod find_anon_type;\n mod named_anon_conflict;\n+mod outlives_closure;\n mod util;\n \n impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     pub fn try_report_nice_region_error(&self, error: &RegionResolutionError<'tcx>) -> bool {\n-        let (span, sub, sup) = match *error {\n-            ConcreteFailure(ref origin, sub, sup) => (origin.span(), sub, sup),\n-            SubSupConflict(_, ref origin, sub, _, sup) => (origin.span(), sub, sup),\n-            _ => return false, // inapplicable\n-        };\n+        match *error {\n+            ConcreteFailure(..) | SubSupConflict(..) => {}\n+            _ => return false,  // inapplicable\n+        }\n \n         if let Some(tables) = self.in_progress_tables {\n             let tables = tables.borrow();\n-            NiceRegionError::new(self.tcx, span, sub, sup, Some(&tables)).try_report().is_some()\n+            NiceRegionError::new(self.tcx, error.clone(), Some(&tables)).try_report().is_some()\n         } else {\n-            NiceRegionError::new(self.tcx, span, sub, sup, None).try_report().is_some()\n+            NiceRegionError::new(self.tcx, error.clone(), None).try_report().is_some()\n         }\n     }\n }\n \n pub struct NiceRegionError<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n     tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n-    span: Span,\n-    sub: ty::Region<'tcx>,\n-    sup: ty::Region<'tcx>,\n+    error: Option<RegionResolutionError<'tcx>>,\n+    regions: Option<(Span, ty::Region<'tcx>, ty::Region<'tcx>)>,\n     tables: Option<&'cx ty::TypeckTables<'tcx>>,\n }\n \n impl<'cx, 'gcx, 'tcx> NiceRegionError<'cx, 'gcx, 'tcx> {\n     pub fn new(\n+        tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n+        error: RegionResolutionError<'tcx>,\n+        tables: Option<&'cx ty::TypeckTables<'tcx>>,\n+    ) -> Self {\n+        Self { tcx, error: Some(error), regions: None, tables }\n+    }\n+\n+    pub fn new_from_span(\n         tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n         span: Span,\n         sub: ty::Region<'tcx>,\n         sup: ty::Region<'tcx>,\n         tables: Option<&'cx ty::TypeckTables<'tcx>>,\n     ) -> Self {\n-        Self { tcx, span, sub, sup, tables }\n+        Self { tcx, error: None, regions: Some((span, sub, sup)), tables }\n     }\n \n     pub fn try_report(&self) -> Option<ErrorReported> {\n         self.try_report_named_anon_conflict()\n             .or_else(|| self.try_report_anon_anon_conflict())\n+            .or_else(|| self.try_report_outlives_closure())\n+    }\n+\n+    pub fn get_regions(&self) -> (Span, ty::Region<'tcx>, ty::Region<'tcx>) {\n+        match (&self.error, self.regions) {\n+            (&Some(ConcreteFailure(ref origin, sub, sup)), None) => (origin.span(), sub, sup),\n+            (&Some(SubSupConflict(_, ref origin, sub, _, sup)), None) => (origin.span(), sub, sup),\n+            (None, Some((span, sub, sup))) => (span, sub, sup),\n+            (Some(_), Some(_)) => panic!(\"incorrectly built NiceRegionError\"),\n+            _ => panic!(\"trying to report on an incorrect lifetime failure\"),\n+        }\n     }\n }"}, {"sha": "c106fd0c3d2c0b3c95d483d5bfdd4294272d72a1", "filename": "src/librustc/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae", "patch": "@@ -18,7 +18,7 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n     /// When given a `ConcreteFailure` for a function with arguments containing a named region and\n     /// an anonymous region, emit an descriptive diagnostic error.\n     pub(super) fn try_report_named_anon_conflict(&self) -> Option<ErrorReported> {\n-        let NiceRegionError { span, sub, sup, .. } = *self;\n+        let (span, sub, sup) = self.get_regions();\n \n         debug!(\n             \"try_report_named_anon_conflict(sub={:?}, sup={:?})\","}, {"sha": "95f44b813c5d2b6c4f8caff05aaecb21eb8881ab", "filename": "src/librustc/infer/error_reporting/nice_region_error/outlives_closure.rs", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Foutlives_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Foutlives_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Foutlives_closure.rs?ref=bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae", "patch": "@@ -0,0 +1,124 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Error Reporting for Anonymous Region Lifetime Errors\n+//! where both the regions are anonymous.\n+\n+use infer::error_reporting::nice_region_error::NiceRegionError;\n+use infer::SubregionOrigin;\n+use ty::RegionKind;\n+use hir::{Expr, ExprClosure};\n+use hir::map::NodeExpr;\n+use util::common::ErrorReported;\n+use infer::lexical_region_resolve::RegionResolutionError::SubSupConflict;\n+\n+impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n+    /// Print the error message for lifetime errors when binding excapes a closure.\n+    ///\n+    /// Consider a case where we have\n+    ///\n+    /// ```no_run\n+    /// fn with_int<F>(f: F) where F: FnOnce(&isize) {\n+    ///     let x = 3;\n+    ///     f(&x);\n+    /// }\n+    /// fn main() {\n+    ///     let mut x = None;\n+    ///     with_int(|y| x = Some(y));\n+    /// }\n+    /// ```\n+    ///\n+    /// the output will be\n+    ///\n+    /// ```text\n+    ///     let mut x = None;\n+    ///         ----- borrowed data cannot be stored into here...\n+    ///     with_int(|y| x = Some(y));\n+    ///              ---          ^ cannot be stored outside of its closure\n+    ///              |\n+    ///              ...because it cannot outlive this closure\n+    /// ```\n+    pub(super) fn try_report_outlives_closure(&self) -> Option<ErrorReported> {\n+        if let Some(SubSupConflict(origin,\n+                                   ref sub_origin,\n+                                   _,\n+                                   ref sup_origin,\n+                                   sup_region)) = self.error {\n+\n+            // #45983: when trying to assign the contents of an argument to a binding outside of a\n+            // closure, provide a specific message pointing this out.\n+            if let (&SubregionOrigin::BindingTypeIsNotValidAtDecl(ref external_span),\n+                    &RegionKind::ReFree(ref free_region)) = (&sub_origin, sup_region) {\n+                let hir = &self.tcx.hir;\n+                if let Some(node_id) = hir.as_local_node_id(free_region.scope) {\n+                    match hir.get(node_id) {\n+                        NodeExpr(Expr {\n+                            node: ExprClosure(_, _, _, closure_span, false),\n+                            ..\n+                        }) => {\n+                            let sup_sp = sup_origin.span();\n+                            let origin_sp = origin.span();\n+                            let mut err = self.tcx.sess.struct_span_err(\n+                                sup_sp,\n+                                \"borrowed data cannot be stored outside of its closure\");\n+                            err.span_label(sup_sp, \"cannot be stored outside of its closure\");\n+                            if origin_sp == sup_sp || origin_sp.contains(sup_sp) {\n+// // sup_sp == origin.span():\n+//\n+// let mut x = None;\n+//     ----- borrowed data cannot be stored into here...\n+// with_int(|y| x = Some(y));\n+//          ---          ^ cannot be stored outside of its closure\n+//          |\n+//          ...because it cannot outlive this closure\n+//\n+// // origin.contains(&sup_sp):\n+//\n+// let mut f: Option<&u32> = None;\n+//     ----- borrowed data cannot be stored into here...\n+// closure_expecting_bound(|x: &'x u32| {\n+//                         ------------ ... because it cannot outlive this closure\n+//     f = Some(x);\n+//              ^ cannot be stored outside of its closure\n+                                err.span_label(*external_span,\n+                                               \"borrowed data cannot be stored into here...\");\n+                                err.span_label(*closure_span,\n+                                               \"...because it cannot outlive this closure\");\n+                            } else {\n+// FIXME: the wording for this case could be much improved\n+//\n+// let mut lines_to_use: Vec<&CrateId> = Vec::new();\n+//                           - cannot infer an appropriate lifetime...\n+// let push_id = |installed_id: &CrateId| {\n+//     -------   ------------------------ borrowed data cannot outlive this closure\n+//     |\n+//     ...so that variable is valid at time of its declaration\n+//     lines_to_use.push(installed_id);\n+//                       ^^^^^^^^^^^^ cannot be stored outside of its closure\n+                                err.span_label(origin_sp,\n+                                               \"cannot infer an appropriate lifetime...\");\n+                                err.span_label(*external_span,\n+                                               \"...so that variable is valid at time of its \\\n+                                                declaration\");\n+                                err.span_label(*closure_span,\n+                                               \"borrowed data cannot outlive this closure\");\n+                            }\n+                            err.emit();\n+                            return Some(ErrorReported);\n+                        }\n+                        _ => {}\n+                    }\n+                }\n+            }\n+        }\n+        None\n+    }\n+}\n+"}, {"sha": "9a2f98d4622f77eb00cfd2d2898e29d049b0af05", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae", "patch": "@@ -989,7 +989,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n         if let (Some(f), Some(o)) = (fr_name, outlived_fr_name) {\n             let tables = infcx.tcx.typeck_tables_of(mir_def_id);\n-            let nice = NiceRegionError::new(infcx.tcx, blame_span, o, f, Some(tables));\n+            let nice = NiceRegionError::new_from_span(infcx.tcx, blame_span, o, f, Some(tables));\n             if let Some(ErrorReported) = nice.try_report() {\n                 return;\n             }"}, {"sha": "a6e5067195f47faad38ee2afe936ffedae4ff572", "filename": "src/test/ui/borrowck/issue-45983.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.rs?ref=bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn give_any<F: for<'r> FnOnce(&'r ())>(f: F) {\n+    f(&());\n+}\n+\n+fn main() {\n+    let x = None;\n+    give_any(|y| x = Some(y));\n+    //~^ ERROR borrowed data cannot be stored outside of its closure\n+}"}, {"sha": "496f15c289c17123db75f108b3b6341c62bbe394", "filename": "src/test/ui/borrowck/issue-45983.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.stderr?ref=bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae", "patch": "@@ -0,0 +1,12 @@\n+error: borrowed data cannot be stored outside of its closure\n+  --> $DIR/issue-45983.rs:17:27\n+   |\n+16 |     let x = None;\n+   |         - borrowed data cannot be stored into here...\n+17 |     give_any(|y| x = Some(y));\n+   |              ---          ^ cannot be stored outside of its closure\n+   |              |\n+   |              ...because it cannot outlive this closure\n+\n+error: aborting due to previous error\n+"}, {"sha": "8f1545fa009865a49bb2c7c1595f05fa5b550cd0", "filename": "src/test/ui/borrowck/issue-7573.rs", "status": "renamed", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.rs?ref=bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae", "patch": "@@ -24,9 +24,14 @@ impl CrateId {\n }\n \n pub fn remove_package_from_database() {\n-    let mut lines_to_use: Vec<&CrateId> = Vec::new(); //~ ERROR E0495\n+    let mut lines_to_use: Vec<&CrateId> = Vec::new();\n+        //~^ NOTE cannot infer an appropriate lifetime\n     let push_id = |installed_id: &CrateId| {\n+        //~^ NOTE borrowed data cannot outlive this closure\n+        //~| NOTE ...so that variable is valid at time of its declaration\n         lines_to_use.push(installed_id);\n+        //~^ ERROR borrowed data cannot be stored outside of its closure\n+        //~| NOTE cannot be stored outside of its closure\n     };\n     list_database(push_id);\n ", "previous_filename": "src/test/compile-fail/issue-7573.rs"}, {"sha": "99b48d9276c068a088274e349719f75fc2fc043f", "filename": "src/test/ui/borrowck/issue-7573.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.stderr?ref=bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae", "patch": "@@ -0,0 +1,16 @@\n+error: borrowed data cannot be stored outside of its closure\n+  --> $DIR/issue-7573.rs:32:27\n+   |\n+27 |     let mut lines_to_use: Vec<&CrateId> = Vec::new();\n+   |                               - cannot infer an appropriate lifetime...\n+28 |         //~^ NOTE cannot infer an appropriate lifetime\n+29 |     let push_id = |installed_id: &CrateId| {\n+   |         -------   ------------------------ borrowed data cannot outlive this closure\n+   |         |\n+   |         ...so that variable is valid at time of its declaration\n+...\n+32 |         lines_to_use.push(installed_id);\n+   |                           ^^^^^^^^^^^^ cannot be stored outside of its closure\n+\n+error: aborting due to previous error\n+"}, {"sha": "1c38dee99a7b0f3fac136e446022a70d8a3c6914", "filename": "src/test/ui/borrowck/regions-escape-bound-fn-2.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn-2.rs?ref=bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae", "patch": "@@ -16,5 +16,5 @@ fn with_int<F>(f: F) where F: FnOnce(&isize) {\n fn main() {\n     let mut x = None;\n     with_int(|y| x = Some(y));\n-         //~^ ERROR cannot infer\n+    //~^ ERROR borrowed data cannot be stored outside of its closure\n }", "previous_filename": "src/test/compile-fail/regions-escape-bound-fn-2.rs"}, {"sha": "3d88f4fd52e2e6443e373711c7cf22c34ff9cb7b", "filename": "src/test/ui/borrowck/regions-escape-bound-fn-2.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn-2.stderr?ref=bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae", "patch": "@@ -0,0 +1,12 @@\n+error: borrowed data cannot be stored outside of its closure\n+  --> $DIR/regions-escape-bound-fn-2.rs:18:27\n+   |\n+17 |     let mut x = None;\n+   |         ----- borrowed data cannot be stored into here...\n+18 |     with_int(|y| x = Some(y));\n+   |              ---          ^ cannot be stored outside of its closure\n+   |              |\n+   |              ...because it cannot outlive this closure\n+\n+error: aborting due to previous error\n+"}, {"sha": "c22742371acbc2fab407627b5ce5190d522a5420", "filename": "src/test/ui/borrowck/regions-escape-bound-fn.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.rs?ref=bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae", "patch": "@@ -15,5 +15,6 @@ fn with_int<F>(f: F) where F: FnOnce(&isize) {\n \n fn main() {\n     let mut x: Option<&isize> = None;\n-    with_int(|y| x = Some(y));   //~ ERROR cannot infer\n+    with_int(|y| x = Some(y));\n+    //~^ ERROR borrowed data cannot be stored outside of its closure\n }", "previous_filename": "src/test/compile-fail/regions-escape-bound-fn.rs"}, {"sha": "a2ad7c3f768c6aac17fe601d76970fa4f2d3f639", "filename": "src/test/ui/borrowck/regions-escape-bound-fn.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.stderr?ref=bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae", "patch": "@@ -0,0 +1,12 @@\n+error: borrowed data cannot be stored outside of its closure\n+  --> $DIR/regions-escape-bound-fn.rs:18:27\n+   |\n+17 |     let mut x: Option<&isize> = None;\n+   |         ----- borrowed data cannot be stored into here...\n+18 |     with_int(|y| x = Some(y));\n+   |              ---          ^ cannot be stored outside of its closure\n+   |              |\n+   |              ...because it cannot outlive this closure\n+\n+error: aborting due to previous error\n+"}, {"sha": "5a214504df4c15f46f5b2910b1f27a3235ab99e8", "filename": "src/test/ui/borrowck/regions-escape-unboxed-closure.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.rs?ref=bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae", "patch": "@@ -13,5 +13,6 @@ fn with_int(f: &mut FnMut(&isize)) {\n \n fn main() {\n     let mut x: Option<&isize> = None;\n-    with_int(&mut |y| x = Some(y));   //~ ERROR cannot infer\n+    with_int(&mut |y| x = Some(y));\n+    //~^ ERROR borrowed data cannot be stored outside of its closure\n }", "previous_filename": "src/test/compile-fail/regions-escape-unboxed-closure.rs"}, {"sha": "4b01e42fa67d02b21631fe4cf1ca601d16114534", "filename": "src/test/ui/borrowck/regions-escape-unboxed-closure.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.stderr?ref=bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae", "patch": "@@ -0,0 +1,12 @@\n+error: borrowed data cannot be stored outside of its closure\n+  --> $DIR/regions-escape-unboxed-closure.rs:16:32\n+   |\n+15 |     let mut x: Option<&isize> = None;\n+   |         ----- borrowed data cannot be stored into here...\n+16 |     with_int(&mut |y| x = Some(y));\n+   |                   ---          ^ cannot be stored outside of its closure\n+   |                   |\n+   |                   ...because it cannot outlive this closure\n+\n+error: aborting due to previous error\n+"}, {"sha": "a464c5853e1c149f3bb62d02c8e447f9e004d0da", "filename": "src/test/ui/closure-expected-type/expect-region-supply-region.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-region-supply-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-region-supply-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-region-supply-region.rs?ref=bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae", "patch": "@@ -25,7 +25,7 @@ fn expect_bound_supply_nothing() {\n     // it to escape into `f`:\n     let mut f: Option<&u32> = None;\n     closure_expecting_bound(|x| {\n-        f = Some(x); //~ ERROR E0495\n+        f = Some(x); //~ ERROR borrowed data cannot be stored outside of its closure\n     });\n }\n \n@@ -35,7 +35,7 @@ fn expect_bound_supply_bound() {\n     // closure:\n     let mut f: Option<&u32> = None;\n     closure_expecting_bound(|x: &u32| {\n-        f = Some(x); //~ ERROR E0495\n+        f = Some(x); //~ ERROR borrowed data cannot be stored outside of its closure\n     });\n }\n \n@@ -50,7 +50,7 @@ fn expect_bound_supply_named<'x>() {\n \n         // And we still cannot let `x` escape into `f`.\n         f = Some(x);\n-        //~^ ERROR cannot infer\n+        //~^ ERROR borrowed data cannot be stored outside of its closure\n     });\n }\n ", "previous_filename": "src/test/compile-fail/closure-expected-type/expect-region-supply-region.rs"}, {"sha": "ebb1e561e57ab6acec3dd4f1e24e891f7b0fd186", "filename": "src/test/ui/closure-expected-type/expect-region-supply-region.stderr", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr?ref=bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae", "patch": "@@ -0,0 +1,98 @@\n+error: borrowed data cannot be stored outside of its closure\n+  --> $DIR/expect-region-supply-region.rs:28:18\n+   |\n+26 |     let mut f: Option<&u32> = None;\n+   |         ----- borrowed data cannot be stored into here...\n+27 |     closure_expecting_bound(|x| {\n+   |                             --- ...because it cannot outlive this closure\n+28 |         f = Some(x); //~ ERROR borrowed data cannot be stored outside of its closure\n+   |                  ^ cannot be stored outside of its closure\n+\n+error: borrowed data cannot be stored outside of its closure\n+  --> $DIR/expect-region-supply-region.rs:38:18\n+   |\n+36 |     let mut f: Option<&u32> = None;\n+   |         ----- borrowed data cannot be stored into here...\n+37 |     closure_expecting_bound(|x: &u32| {\n+   |                             --------- ...because it cannot outlive this closure\n+38 |         f = Some(x); //~ ERROR borrowed data cannot be stored outside of its closure\n+   |                  ^ cannot be stored outside of its closure\n+\n+error[E0308]: mismatched types\n+  --> $DIR/expect-region-supply-region.rs:47:33\n+   |\n+47 |     closure_expecting_bound(|x: &'x u32| {\n+   |                                 ^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected type `&u32`\n+              found type `&'x u32`\n+note: the anonymous lifetime #2 defined on the body at 47:29...\n+  --> $DIR/expect-region-supply-region.rs:47:29\n+   |\n+47 |       closure_expecting_bound(|x: &'x u32| {\n+   |  _____________________________^\n+48 | |         //~^ ERROR mismatched types\n+49 | |         //~| ERROR mismatched types\n+50 | |\n+...  |\n+53 | |         //~^ ERROR borrowed data cannot be stored outside of its closure\n+54 | |     });\n+   | |_____^\n+note: ...does not necessarily outlive the lifetime 'x as defined on the function body at 42:1\n+  --> $DIR/expect-region-supply-region.rs:42:1\n+   |\n+42 | / fn expect_bound_supply_named<'x>() {\n+43 | |     let mut f: Option<&u32> = None;\n+44 | |\n+45 | |     // Here we give a type annotation that `x` should be free. We get\n+...  |\n+54 | |     });\n+55 | | }\n+   | |_^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/expect-region-supply-region.rs:47:33\n+   |\n+47 |     closure_expecting_bound(|x: &'x u32| {\n+   |                                 ^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected type `&u32`\n+              found type `&'x u32`\n+note: the lifetime 'x as defined on the function body at 42:1...\n+  --> $DIR/expect-region-supply-region.rs:42:1\n+   |\n+42 | / fn expect_bound_supply_named<'x>() {\n+43 | |     let mut f: Option<&u32> = None;\n+44 | |\n+45 | |     // Here we give a type annotation that `x` should be free. We get\n+...  |\n+54 | |     });\n+55 | | }\n+   | |_^\n+note: ...does not necessarily outlive the anonymous lifetime #2 defined on the body at 47:29\n+  --> $DIR/expect-region-supply-region.rs:47:29\n+   |\n+47 |       closure_expecting_bound(|x: &'x u32| {\n+   |  _____________________________^\n+48 | |         //~^ ERROR mismatched types\n+49 | |         //~| ERROR mismatched types\n+50 | |\n+...  |\n+53 | |         //~^ ERROR borrowed data cannot be stored outside of its closure\n+54 | |     });\n+   | |_____^\n+\n+error: borrowed data cannot be stored outside of its closure\n+  --> $DIR/expect-region-supply-region.rs:52:18\n+   |\n+43 |     let mut f: Option<&u32> = None;\n+   |         ----- borrowed data cannot be stored into here...\n+...\n+47 |     closure_expecting_bound(|x: &'x u32| {\n+   |                             ------------ ...because it cannot outlive this closure\n+...\n+52 |         f = Some(x);\n+   |                  ^ cannot be stored outside of its closure\n+\n+error: aborting due to 5 previous errors\n+"}]}