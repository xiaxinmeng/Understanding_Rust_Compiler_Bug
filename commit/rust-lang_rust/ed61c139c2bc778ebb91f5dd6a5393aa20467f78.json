{"sha": "ed61c139c2bc778ebb91f5dd6a5393aa20467f78", "node_id": "C_kwDOAAsO6NoAKGVkNjFjMTM5YzJiYzc3OGViYjkxZjVkZDZhNTM5M2FhMjA0NjdmNzg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-06T03:47:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-06T03:47:41Z"}, "message": "Auto merge of #105220 - oli-obk:feeding, r=cjgillot\n\nfeed resolver_for_lowering instead of storing it in a field\n\nr? `@cjgillot`\n\nopening this as\n\n* a discussion for `no_hash` + `feedable` queries. I think we'll want those, but I don't quite understand why they are rejected beyond a double check of the stable hashes for situations where the query is fed but also read from incremental caches.\n* and a discussion on removing all untracked fields from TyCtxt and setting it up so that they are fed queries instead", "tree": {"sha": "20013840c0bd3570212b5d4aa401ed1a26a45d62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20013840c0bd3570212b5d4aa401ed1a26a45d62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed61c139c2bc778ebb91f5dd6a5393aa20467f78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed61c139c2bc778ebb91f5dd6a5393aa20467f78", "html_url": "https://github.com/rust-lang/rust/commit/ed61c139c2bc778ebb91f5dd6a5393aa20467f78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed61c139c2bc778ebb91f5dd6a5393aa20467f78/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "226202d9026b0f24b4f7aad4de398bd8378774cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/226202d9026b0f24b4f7aad4de398bd8378774cd", "html_url": "https://github.com/rust-lang/rust/commit/226202d9026b0f24b4f7aad4de398bd8378774cd"}, {"sha": "f693b7848ea5b24ef3a503aa59e616492a9b0b22", "url": "https://api.github.com/repos/rust-lang/rust/commits/f693b7848ea5b24ef3a503aa59e616492a9b0b22", "html_url": "https://github.com/rust-lang/rust/commit/f693b7848ea5b24ef3a503aa59e616492a9b0b22"}], "stats": {"total": 143, "additions": 86, "deletions": 57}, "files": [{"sha": "f75c8669fa1e1efb1ec7c6cbe6990cc10fe4412f", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ed61c139c2bc778ebb91f5dd6a5393aa20467f78/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed61c139c2bc778ebb91f5dd6a5393aa20467f78/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=ed61c139c2bc778ebb91f5dd6a5393aa20467f78", "patch": "@@ -12,6 +12,7 @@ use rustc_ast::{self as ast, visit};\n use rustc_borrowck as mir_borrowck;\n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_data_structures::parallel;\n+use rustc_data_structures::steal::Steal;\n use rustc_data_structures::sync::{Lrc, OnceCell, WorkerLocal};\n use rustc_errors::{ErrorGuaranteed, PResult};\n use rustc_expand::base::{ExtCtxt, LintStoreExpand, ResolverExpand};\n@@ -801,14 +802,21 @@ pub fn create_global_ctxt<'tcx>(\n         TcxQueries::new(local_providers, extern_providers, query_result_on_disk_cache)\n     });\n \n+    let ty::ResolverOutputs {\n+        definitions,\n+        global_ctxt: untracked_resolutions,\n+        ast_lowering: untracked_resolver_for_lowering,\n+    } = resolver_outputs;\n+\n     let gcx = sess.time(\"setup_global_ctxt\", || {\n         global_ctxt.get_or_init(move || {\n             TyCtxt::create_global_ctxt(\n                 sess,\n                 lint_store,\n                 arena,\n                 hir_arena,\n-                resolver_outputs,\n+                definitions,\n+                untracked_resolutions,\n                 krate,\n                 dep_graph,\n                 queries.on_disk_cache.as_ref().map(OnDiskCache::as_dyn),\n@@ -820,7 +828,12 @@ pub fn create_global_ctxt<'tcx>(\n         })\n     });\n \n-    QueryContext { gcx }\n+    let mut qcx = QueryContext { gcx };\n+    qcx.enter(|tcx| {\n+        tcx.feed_unit_query()\n+            .resolver_for_lowering(tcx.arena.alloc(Steal::new(untracked_resolver_for_lowering)))\n+    });\n+    qcx\n }\n \n /// Runs the resolution, type-checking, region checking and other\n@@ -965,12 +978,10 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n pub fn start_codegen<'tcx>(\n     codegen_backend: &dyn CodegenBackend,\n     tcx: TyCtxt<'tcx>,\n-    outputs: &OutputFilenames,\n ) -> Box<dyn Any> {\n     info!(\"Pre-codegen\\n{:?}\", tcx.debug_stats());\n \n-    let (metadata, need_metadata_module) =\n-        rustc_metadata::fs::encode_and_write_metadata(tcx, outputs);\n+    let (metadata, need_metadata_module) = rustc_metadata::fs::encode_and_write_metadata(tcx);\n \n     let codegen = tcx.sess.time(\"codegen_crate\", move || {\n         codegen_backend.codegen_crate(tcx, metadata, need_metadata_module)\n@@ -986,7 +997,7 @@ pub fn start_codegen<'tcx>(\n     info!(\"Post-codegen\\n{:?}\", tcx.debug_stats());\n \n     if tcx.sess.opts.output_types.contains_key(&OutputType::Mir) {\n-        if let Err(error) = rustc_mir_transform::dump_mir::emit_mir(tcx, outputs) {\n+        if let Err(error) = rustc_mir_transform::dump_mir::emit_mir(tcx) {\n             tcx.sess.emit_err(CantEmitMIR { error });\n             tcx.sess.abort_if_errors();\n         }"}, {"sha": "f5ddd647b2435f157d4645fcf4107c11cd639f93", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ed61c139c2bc778ebb91f5dd6a5393aa20467f78/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed61c139c2bc778ebb91f5dd6a5393aa20467f78/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=ed61c139c2bc778ebb91f5dd6a5393aa20467f78", "patch": "@@ -20,6 +20,7 @@ use rustc_span::symbol::sym;\n use std::any::Any;\n use std::cell::{Ref, RefCell, RefMut};\n use std::rc::Rc;\n+use std::sync::Arc;\n \n /// Represent the result of a query.\n ///\n@@ -214,7 +215,7 @@ impl<'tcx> Queries<'tcx> {\n     pub fn global_ctxt(&'tcx self) -> Result<&Query<QueryContext<'tcx>>> {\n         self.global_ctxt.compute(|| {\n             let crate_name = self.crate_name()?.peek().clone();\n-            let outputs = self.prepare_outputs()?.peek().clone();\n+            let outputs = self.prepare_outputs()?.take();\n             let dep_graph = self.dep_graph()?.peek().clone();\n             let (krate, resolver, lint_store) = self.expansion()?.take();\n             Ok(passes::create_global_ctxt(\n@@ -235,7 +236,6 @@ impl<'tcx> Queries<'tcx> {\n \n     pub fn ongoing_codegen(&'tcx self) -> Result<&Query<Box<dyn Any>>> {\n         self.ongoing_codegen.compute(|| {\n-            let outputs = self.prepare_outputs()?;\n             self.global_ctxt()?.peek_mut().enter(|tcx| {\n                 tcx.analysis(()).ok();\n \n@@ -249,7 +249,7 @@ impl<'tcx> Queries<'tcx> {\n                 // Hook for UI tests.\n                 Self::check_for_rustc_errors_attr(tcx);\n \n-                Ok(passes::start_codegen(&***self.codegen_backend(), tcx, &*outputs.peek()))\n+                Ok(passes::start_codegen(&***self.codegen_backend(), tcx))\n             })\n         })\n     }\n@@ -293,8 +293,10 @@ impl<'tcx> Queries<'tcx> {\n         let codegen_backend = self.codegen_backend().clone();\n \n         let dep_graph = self.dep_graph()?.peek().clone();\n-        let prepare_outputs = self.prepare_outputs()?.take();\n-        let crate_hash = self.global_ctxt()?.peek_mut().enter(|tcx| tcx.crate_hash(LOCAL_CRATE));\n+        let (crate_hash, prepare_outputs) = self\n+            .global_ctxt()?\n+            .peek_mut()\n+            .enter(|tcx| (tcx.crate_hash(LOCAL_CRATE), tcx.output_filenames(()).clone()));\n         let ongoing_codegen = self.ongoing_codegen()?.take();\n \n         Ok(Linker {\n@@ -316,7 +318,7 @@ pub struct Linker {\n \n     // compilation outputs\n     dep_graph: DepGraph,\n-    prepare_outputs: OutputFilenames,\n+    prepare_outputs: Arc<OutputFilenames>,\n     crate_hash: Svh,\n     ongoing_codegen: Box<dyn Any>,\n }"}, {"sha": "789d83a0dd00d496f39eeee157d924d6f3cfd31b", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed61c139c2bc778ebb91f5dd6a5393aa20467f78/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed61c139c2bc778ebb91f5dd6a5393aa20467f78/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=ed61c139c2bc778ebb91f5dd6a5393aa20467f78", "patch": "@@ -364,10 +364,6 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n                 modifiers.eval_always.is_none(),\n                 \"Query {name} cannot be both `feedable` and `eval_always`.\"\n             );\n-            assert!(\n-                modifiers.no_hash.is_none(),\n-                \"Query {name} cannot be both `feedable` and `no_hash`.\"\n-            );\n             feedable_queries.extend(quote! {\n                 #(#doc_comments)*\n                 [#attribute_stream] fn #name(#arg) #result,"}, {"sha": "4fa440c7ca691128fa8c03012ff8c03efcdc1bab", "filename": "compiler/rustc_metadata/src/fs.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ed61c139c2bc778ebb91f5dd6a5393aa20467f78/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed61c139c2bc778ebb91f5dd6a5393aa20467f78/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs?ref=ed61c139c2bc778ebb91f5dd6a5393aa20467f78", "patch": "@@ -6,7 +6,7 @@ use crate::{encode_metadata, EncodedMetadata};\n use rustc_data_structures::temp_dir::MaybeTempDir;\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_middle::ty::TyCtxt;\n-use rustc_session::config::{CrateType, OutputFilenames, OutputType};\n+use rustc_session::config::{CrateType, OutputType};\n use rustc_session::output::filename_for_metadata;\n use rustc_session::Session;\n use tempfile::Builder as TempFileBuilder;\n@@ -38,10 +38,7 @@ pub fn emit_wrapper_file(\n     out_filename\n }\n \n-pub fn encode_and_write_metadata(\n-    tcx: TyCtxt<'_>,\n-    outputs: &OutputFilenames,\n-) -> (EncodedMetadata, bool) {\n+pub fn encode_and_write_metadata(tcx: TyCtxt<'_>) -> (EncodedMetadata, bool) {\n     #[derive(PartialEq, Eq, PartialOrd, Ord)]\n     enum MetadataKind {\n         None,\n@@ -64,7 +61,8 @@ pub fn encode_and_write_metadata(\n         .unwrap_or(MetadataKind::None);\n \n     let crate_name = tcx.crate_name(LOCAL_CRATE);\n-    let out_filename = filename_for_metadata(tcx.sess, crate_name.as_str(), outputs);\n+    let out_filename =\n+        filename_for_metadata(tcx.sess, crate_name.as_str(), tcx.output_filenames(()));\n     // To avoid races with another rustc process scanning the output directory,\n     // we need to write the file somewhere else and atomically move it to its\n     // final destination, with an `fs::rename` call. In order for the rename to"}, {"sha": "9aed75931bfc88d10cd10e5ae63b366e09f56fe0", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed61c139c2bc778ebb91f5dd6a5393aa20467f78/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed61c139c2bc778ebb91f5dd6a5393aa20467f78/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=ed61c139c2bc778ebb91f5dd6a5393aa20467f78", "patch": "@@ -28,6 +28,7 @@ macro_rules! arena_types {\n             [decode] typeck_results: rustc_middle::ty::TypeckResults<'tcx>,\n             [decode] borrowck_result:\n                 rustc_middle::mir::BorrowCheckResult<'tcx>,\n+            [] resolver: rustc_data_structures::steal::Steal<rustc_middle::ty::ResolverAstLowering>,\n             [decode] unsafety_check_result: rustc_middle::mir::UnsafetyCheckResult,\n             [decode] code_region: rustc_middle::mir::coverage::CodeRegion,\n             [] const_allocs: rustc_middle::mir::interpret::Allocation,"}, {"sha": "f2f2b22f52a37b81834c82f7e06f9a25e36c6c27", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed61c139c2bc778ebb91f5dd6a5393aa20467f78/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed61c139c2bc778ebb91f5dd6a5393aa20467f78/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=ed61c139c2bc778ebb91f5dd6a5393aa20467f78", "patch": "@@ -33,7 +33,7 @@ rustc_queries! {\n     }\n \n     query resolver_for_lowering(_: ()) -> &'tcx Steal<ty::ResolverAstLowering> {\n-        eval_always\n+        feedable\n         no_hash\n         desc { \"getting the resolver for lowering\" }\n     }"}, {"sha": "c39d04d38193bf4196d5daadb78c5f59c564d61d", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ed61c139c2bc778ebb91f5dd6a5393aa20467f78/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed61c139c2bc778ebb91f5dd6a5393aa20467f78/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=ed61c139c2bc778ebb91f5dd6a5393aa20467f78", "patch": "@@ -81,7 +81,7 @@ use std::mem;\n use std::ops::{Bound, Deref};\n use std::sync::Arc;\n \n-use super::{ImplPolarity, ResolverOutputs, RvalueScopes};\n+use super::{ImplPolarity, RvalueScopes};\n \n pub trait OnDiskCache<'tcx>: rustc_data_structures::sync::Sync {\n     /// Creates a new `OnDiskCache` instance from the serialized data in `data`.\n@@ -1034,16 +1034,29 @@ pub struct FreeRegionInfo {\n \n /// This struct should only be created by `create_def`.\n #[derive(Copy, Clone)]\n-pub struct TyCtxtFeed<'tcx> {\n+pub struct TyCtxtFeed<'tcx, KEY: Copy> {\n     pub tcx: TyCtxt<'tcx>,\n     // Do not allow direct access, as downstream code must not mutate this field.\n-    def_id: LocalDefId,\n+    key: KEY,\n }\n \n-impl<'tcx> TyCtxtFeed<'tcx> {\n+impl<'tcx> TyCtxt<'tcx> {\n+    pub fn feed_unit_query(self) -> TyCtxtFeed<'tcx, ()> {\n+        TyCtxtFeed { tcx: self, key: () }\n+    }\n+}\n+\n+impl<'tcx, KEY: Copy> TyCtxtFeed<'tcx, KEY> {\n+    #[inline(always)]\n+    pub fn key(&self) -> KEY {\n+        self.key\n+    }\n+}\n+\n+impl<'tcx> TyCtxtFeed<'tcx, LocalDefId> {\n     #[inline(always)]\n     pub fn def_id(&self) -> LocalDefId {\n-        self.def_id\n+        self.key\n     }\n }\n \n@@ -1099,7 +1112,6 @@ pub struct GlobalCtxt<'tcx> {\n \n     /// Output of the resolver.\n     pub(crate) untracked_resolutions: ty::ResolverGlobalCtxt,\n-    untracked_resolver_for_lowering: Steal<ty::ResolverAstLowering>,\n     /// The entire crate as AST. This field serves as the input for the hir_crate query,\n     /// which lowers it from AST to HIR. It must not be read or used by anything else.\n     pub untracked_crate: Steal<Lrc<ast::Crate>>,\n@@ -1262,7 +1274,8 @@ impl<'tcx> TyCtxt<'tcx> {\n         lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,\n         arena: &'tcx WorkerLocal<Arena<'tcx>>,\n         hir_arena: &'tcx WorkerLocal<hir::Arena<'tcx>>,\n-        resolver_outputs: ResolverOutputs,\n+        definitions: Definitions,\n+        untracked_resolutions: ty::ResolverGlobalCtxt,\n         krate: Lrc<ast::Crate>,\n         dep_graph: DepGraph,\n         on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,\n@@ -1271,11 +1284,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         crate_name: &str,\n         output_filenames: OutputFilenames,\n     ) -> GlobalCtxt<'tcx> {\n-        let ResolverOutputs {\n-            definitions,\n-            global_ctxt: untracked_resolutions,\n-            ast_lowering: untracked_resolver_for_lowering,\n-        } = resolver_outputs;\n         let data_layout = s.target.parse_data_layout().unwrap_or_else(|err| {\n             s.emit_fatal(err);\n         });\n@@ -1304,7 +1312,6 @@ impl<'tcx> TyCtxt<'tcx> {\n             lifetimes: common_lifetimes,\n             consts: common_consts,\n             untracked_resolutions,\n-            untracked_resolver_for_lowering: Steal::new(untracked_resolver_for_lowering),\n             untracked_crate: Steal::new(krate),\n             on_disk_cache,\n             queries,\n@@ -1515,7 +1522,7 @@ impl<'tcx> TyCtxtAt<'tcx> {\n         self,\n         parent: LocalDefId,\n         data: hir::definitions::DefPathData,\n-    ) -> TyCtxtFeed<'tcx> {\n+    ) -> TyCtxtFeed<'tcx, LocalDefId> {\n         // This function modifies `self.definitions` using a side-effect.\n         // We need to ensure that these side effects are re-run by the incr. comp. engine.\n         // Depending on the forever-red node will tell the graph that the calling query\n@@ -1536,9 +1543,9 @@ impl<'tcx> TyCtxtAt<'tcx> {\n         // This is fine because:\n         // - those queries are `eval_always` so we won't miss their result changing;\n         // - this write will have happened before these queries are called.\n-        let def_id = self.definitions.write().create_def(parent, data);\n+        let key = self.definitions.write().create_def(parent, data);\n \n-        let feed = TyCtxtFeed { tcx: self.tcx, def_id };\n+        let feed = TyCtxtFeed { tcx: self.tcx, key };\n         feed.def_span(self.span);\n         feed\n     }\n@@ -3107,7 +3114,6 @@ fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {\n \n pub fn provide(providers: &mut ty::query::Providers) {\n     providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;\n-    providers.resolver_for_lowering = |tcx, ()| &tcx.untracked_resolver_for_lowering;\n     providers.module_reexports =\n         |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);\n     providers.crate_name = |tcx, id| {"}, {"sha": "9e73236f8d59eb577d2dd5857a01b336760fd3a5", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed61c139c2bc778ebb91f5dd6a5393aa20467f78/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed61c139c2bc778ebb91f5dd6a5393aa20467f78/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=ed61c139c2bc778ebb91f5dd6a5393aa20467f78", "patch": "@@ -82,8 +82,8 @@ pub use self::consts::{\n pub use self::context::{\n     tls, CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations,\n     CtxtInterners, DeducedParamAttrs, FreeRegionInfo, GeneratorDiagnosticData,\n-    GeneratorInteriorTypeCause, GlobalCtxt, Lift, OnDiskCache, TyCtxt, TypeckResults, UserType,\n-    UserTypeAnnotationIndex,\n+    GeneratorInteriorTypeCause, GlobalCtxt, Lift, OnDiskCache, TyCtxt, TyCtxtFeed, TypeckResults,\n+    UserType, UserTypeAnnotationIndex,\n };\n pub use self::instance::{Instance, InstanceDef, ShortInstance};\n pub use self::list::List;"}, {"sha": "642900d3ab4299108844ded337ec7fb8e5c64b6b", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ed61c139c2bc778ebb91f5dd6a5393aa20467f78/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed61c139c2bc778ebb91f5dd6a5393aa20467f78/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=ed61c139c2bc778ebb91f5dd6a5393aa20467f78", "patch": "@@ -328,13 +328,25 @@ macro_rules! define_callbacks {\n     };\n }\n \n+macro_rules! hash_result {\n+    ([]) => {{\n+        Some(dep_graph::hash_result)\n+    }};\n+    ([(no_hash) $($rest:tt)*]) => {{\n+        None\n+    }};\n+    ([$other:tt $($modifiers:tt)*]) => {\n+        hash_result!([$($modifiers)*])\n+    };\n+}\n+\n macro_rules! define_feedable {\n     ($($(#[$attr:meta])* [$($modifiers:tt)*] fn $name:ident($($K:tt)*) -> $V:ty,)*) => {\n-        impl<'tcx> TyCtxtFeed<'tcx> {\n-            $($(#[$attr])*\n+        $(impl<'tcx, K: IntoQueryParam<$($K)*> + Copy> TyCtxtFeed<'tcx, K> {\n+            $(#[$attr])*\n             #[inline(always)]\n             pub fn $name(self, value: $V) -> query_stored::$name<'tcx> {\n-                let key = self.def_id().into_query_param();\n+                let key = self.key().into_query_param();\n                 opt_remap_env_constness!([$($modifiers)*][key]);\n \n                 let tcx = self.tcx;\n@@ -358,11 +370,11 @@ macro_rules! define_feedable {\n                     tcx,\n                     key,\n                     &value,\n-                    dep_graph::hash_result,\n+                    hash_result!([$($modifiers)*]),\n                 );\n                 cache.complete(key, value, dep_node_index)\n-            })*\n-        }\n+            }\n+        })*\n     }\n }\n "}, {"sha": "594cbd8977ebbf55dca5294946ce15eecde9076e", "filename": "compiler/rustc_mir_transform/src/dump_mir.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed61c139c2bc778ebb91f5dd6a5393aa20467f78/compiler%2Frustc_mir_transform%2Fsrc%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed61c139c2bc778ebb91f5dd6a5393aa20467f78/compiler%2Frustc_mir_transform%2Fsrc%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdump_mir.rs?ref=ed61c139c2bc778ebb91f5dd6a5393aa20467f78", "patch": "@@ -7,7 +7,7 @@ use crate::MirPass;\n use rustc_middle::mir::write_mir_pretty;\n use rustc_middle::mir::Body;\n use rustc_middle::ty::TyCtxt;\n-use rustc_session::config::{OutputFilenames, OutputType};\n+use rustc_session::config::OutputType;\n \n pub struct Marker(pub &'static str);\n \n@@ -19,8 +19,8 @@ impl<'tcx> MirPass<'tcx> for Marker {\n     fn run_pass(&self, _tcx: TyCtxt<'tcx>, _body: &mut Body<'tcx>) {}\n }\n \n-pub fn emit_mir(tcx: TyCtxt<'_>, outputs: &OutputFilenames) -> io::Result<()> {\n-    let path = outputs.path(OutputType::Mir);\n+pub fn emit_mir(tcx: TyCtxt<'_>) -> io::Result<()> {\n+    let path = tcx.output_filenames(()).path(OutputType::Mir);\n     let mut f = io::BufWriter::new(File::create(&path)?);\n     write_mir_pretty(tcx, None, &mut f)?;\n     Ok(())"}, {"sha": "38c7c6cce67650680b967749481eee26dcbd1b9a", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ed61c139c2bc778ebb91f5dd6a5393aa20467f78/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed61c139c2bc778ebb91f5dd6a5393aa20467f78/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=ed61c139c2bc778ebb91f5dd6a5393aa20467f78", "patch": "@@ -510,7 +510,7 @@ impl<K: DepKind> DepGraph<K> {\n         cx: Ctxt,\n         key: A,\n         result: &R,\n-        hash_result: fn(&mut StableHashingContext<'_>, &R) -> Fingerprint,\n+        hash_result: Option<fn(&mut StableHashingContext<'_>, &R) -> Fingerprint>,\n     ) -> DepNodeIndex {\n         if let Some(data) = self.data.as_ref() {\n             // The caller query has more dependencies than the node we are creating.  We may\n@@ -521,10 +521,12 @@ impl<K: DepKind> DepGraph<K> {\n             // For sanity, we still check that the loaded stable hash and the new one match.\n             if let Some(dep_node_index) = self.dep_node_index_of_opt(&node) {\n                 let _current_fingerprint =\n-                    crate::query::incremental_verify_ich(cx, result, &node, Some(hash_result));\n+                    crate::query::incremental_verify_ich(cx, result, &node, hash_result);\n \n                 #[cfg(debug_assertions)]\n-                data.current.record_edge(dep_node_index, node, _current_fingerprint);\n+                if hash_result.is_some() {\n+                    data.current.record_edge(dep_node_index, node, _current_fingerprint);\n+                }\n \n                 return dep_node_index;\n             }\n@@ -539,8 +541,9 @@ impl<K: DepKind> DepGraph<K> {\n             });\n \n             let hashing_timer = cx.profiler().incr_result_hashing();\n-            let current_fingerprint =\n-                cx.with_stable_hashing_context(|mut hcx| hash_result(&mut hcx, result));\n+            let current_fingerprint = hash_result.map(|hash_result| {\n+                cx.with_stable_hashing_context(|mut hcx| hash_result(&mut hcx, result))\n+            });\n \n             let print_status = cfg!(debug_assertions) && cx.sess().opts.unstable_opts.dep_tasks;\n \n@@ -550,7 +553,7 @@ impl<K: DepKind> DepGraph<K> {\n                 &data.previous,\n                 node,\n                 edges,\n-                Some(current_fingerprint),\n+                current_fingerprint,\n                 print_status,\n             );\n "}]}