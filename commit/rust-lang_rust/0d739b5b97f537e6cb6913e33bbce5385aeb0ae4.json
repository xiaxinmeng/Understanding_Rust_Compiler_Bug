{"sha": "0d739b5b97f537e6cb6913e33bbce5385aeb0ae4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkNzM5YjViOTdmNTM3ZTZjYjY5MTNlMzNiYmNlNTM4NWFlYjBhZTQ=", "commit": {"author": {"name": "Michael Hewson", "email": "michael@michaelhewson.ca", "date": "2017-11-07T10:33:54Z"}, "committer": {"name": "Michael Hewson", "email": "michael@michaelhewson.ca", "date": "2017-11-07T18:36:10Z"}, "message": "Update/improve documentation of ExpliciSelf", "tree": {"sha": "c2f3cf58e51b44054651486e60fafd7d50ac59f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2f3cf58e51b44054651486e60fafd7d50ac59f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d739b5b97f537e6cb6913e33bbce5385aeb0ae4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d739b5b97f537e6cb6913e33bbce5385aeb0ae4", "html_url": "https://github.com/rust-lang/rust/commit/0d739b5b97f537e6cb6913e33bbce5385aeb0ae4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d739b5b97f537e6cb6913e33bbce5385aeb0ae4/comments", "author": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fd215647ddc0abf0d5b02f567dca125c9df5c31", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fd215647ddc0abf0d5b02f567dca125c9df5c31", "html_url": "https://github.com/rust-lang/rust/commit/6fd215647ddc0abf0d5b02f567dca125c9df5c31"}], "stats": {"total": 25, "additions": 14, "deletions": 11}, "files": [{"sha": "5daae6d55eed2cdf5f201bc218d0be452b3442ad", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0d739b5b97f537e6cb6913e33bbce5385aeb0ae4/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d739b5b97f537e6cb6913e33bbce5385aeb0ae4/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=0d739b5b97f537e6cb6913e33bbce5385aeb0ae4", "patch": "@@ -1413,23 +1413,26 @@ pub enum ExplicitSelf<'tcx> {\n }\n \n impl<'tcx> ExplicitSelf<'tcx> {\n-    /// We wish to (for now) categorize an explicit self\n-    /// declaration like `self: SomeType` into either `self`,\n-    /// `&self`, `&mut self`, or `Box<self>`. We do this here\n-    /// by some simple pattern matching. A more precise check\n-    /// is done later in `check_method_receiver()`.\n+    /// Categorizes an explicit self declaration like `self: SomeType`\n+    /// into either `self`, `&self`, `&mut self`, `Box<self>`, or\n+    /// `Other` (meaning the arbitrary_self_types feature is used).\n+    /// We do this here via a combination of pattern matching and\n+    /// `can_eq`. A more precise check is done in `check_method_receiver()`.\n     ///\n     /// Examples:\n     ///\n     /// ```\n-    /// impl Foo for &T {\n+    /// impl<'a> Foo for &'a T {\n     ///     // Legal declarations:\n-    ///     fn method1(self: &&T); // ExplicitSelf::ByReference\n-    ///     fn method2(self: &T); // ExplicitSelf::ByValue\n-    ///     fn method3(self: Box<&T>); // ExplicitSelf::ByBox\n+    ///     fn method1(self: &&'a T); // ExplicitSelf::ByReference\n+    ///     fn method2(self: &'a T); // ExplicitSelf::ByValue\n+    ///     fn method3(self: Box<&'a T>); // ExplicitSelf::ByBox\n+    ///     fn method4(self: Rc<&'a T>); // ExplicitSelf::Other\n     ///\n-    ///     // Invalid cases will be caught later by `check_method_receiver`:\n-    ///     fn method_err1(self: &mut T); // ExplicitSelf::ByReference\n+    ///     // Invalid cases will be caught by `check_method_receiver`:\n+    ///     fn method_err1(self: &'a mut T); // ExplicitSelf::Other\n+    ///     fn method_err2(self: &'static T) // ExplicitSelf::ByValue\n+    ///     fn method_err3(self: &&T) // ExplicitSelf::ByReference\n     /// }\n     /// ```\n     ///"}]}