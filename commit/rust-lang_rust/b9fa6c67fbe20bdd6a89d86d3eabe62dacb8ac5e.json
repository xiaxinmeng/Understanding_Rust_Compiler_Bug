{"sha": "b9fa6c67fbe20bdd6a89d86d3eabe62dacb8ac5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5ZmE2YzY3ZmJlMjBiZGQ2YTg5ZDg2ZDNlYWJlNjJkYWNiOGFjNWU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-04-09T20:49:10Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-04-12T01:28:17Z"}, "message": "Fix spans for macros", "tree": {"sha": "07b8abfb6bc9c7f7e46bdc5aeafde85ee534002c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07b8abfb6bc9c7f7e46bdc5aeafde85ee534002c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9fa6c67fbe20bdd6a89d86d3eabe62dacb8ac5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9fa6c67fbe20bdd6a89d86d3eabe62dacb8ac5e", "html_url": "https://github.com/rust-lang/rust/commit/b9fa6c67fbe20bdd6a89d86d3eabe62dacb8ac5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9fa6c67fbe20bdd6a89d86d3eabe62dacb8ac5e/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c87ec1edb1a7e449e30b40eba24b912d77dc1f1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c87ec1edb1a7e449e30b40eba24b912d77dc1f1a", "html_url": "https://github.com/rust-lang/rust/commit/c87ec1edb1a7e449e30b40eba24b912d77dc1f1a"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "a3dd77b8197dc187b8a24d58189a9ba33550cbf5", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b9fa6c67fbe20bdd6a89d86d3eabe62dacb8ac5e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9fa6c67fbe20bdd6a89d86d3eabe62dacb8ac5e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b9fa6c67fbe20bdd6a89d86d3eabe62dacb8ac5e", "patch": "@@ -2162,13 +2162,13 @@ impl<'a> Parser<'a> {\n                             &token::CloseDelim(delim),\n                             seq_sep_none(),\n                             |p| p.parse_token_tree()));\n-                        let hi = self.span.hi;\n+                        let hi = self.last_span.hi;\n \n                         return Ok(self.mk_mac_expr(lo,\n-                                                hi,\n-                                                MacInvocTT(pth,\n-                                                           tts,\n-                                                           EMPTY_CTXT)));\n+                                                   hi,\n+                                                   MacInvocTT(pth,\n+                                                              tts,\n+                                                              EMPTY_CTXT)));\n                     }\n                     if self.check(&token::OpenDelim(token::Brace)) {\n                         // This is a struct literal, unless we're prohibited\n@@ -3449,7 +3449,7 @@ impl<'a> Parser<'a> {\n                 seq_sep_none(),\n                 |p| p.parse_token_tree()\n             ));\n-            let hi = self.span.hi;\n+            let hi = self.last_span.hi;\n \n             let style = if delim == token::Brace {\n                 MacStmtWithBraces\n@@ -3567,7 +3567,7 @@ impl<'a> Parser<'a> {\n                         token::Semi => {\n                             stmts.push(P(Spanned {\n                                 node: StmtMac(mac, MacStmtWithSemicolon),\n-                                span: span,\n+                                span: mk_sp(span.lo, self.span.hi),\n                             }));\n                             try!(self.bump());\n                         }\n@@ -3591,7 +3591,7 @@ impl<'a> Parser<'a> {\n                         token::Semi => {\n                             stmts.push(P(Spanned {\n                                 node: StmtMac(m, MacStmtWithSemicolon),\n-                                span: span,\n+                                span: mk_sp(span.lo, self.span.hi),\n                             }));\n                             try!(self.bump());\n                         }\n@@ -3610,13 +3610,15 @@ impl<'a> Parser<'a> {\n                     }\n                 }\n                 _ => { // all other kinds of statements:\n+                    let mut hi = span.hi;\n                     if classify::stmt_ends_with_semi(&node) {\n                         try!(self.commit_stmt_expecting(token::Semi));\n+                        hi = self.last_span.hi;\n                     }\n \n                     stmts.push(P(Spanned {\n                         node: node,\n-                        span: span\n+                        span: mk_sp(span.lo, hi)\n                     }));\n                 }\n             }"}]}