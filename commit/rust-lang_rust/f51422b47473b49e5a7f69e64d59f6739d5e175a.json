{"sha": "f51422b47473b49e5a7f69e64d59f6739d5e175a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1MTQyMmI0NzQ3M2I0OWU1YTdmNjllNjRkNTlmNjczOWQ1ZTE3NWE=", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-08-12T08:28:14Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-08-13T06:59:57Z"}, "message": "Update to pick Eq or Ne", "tree": {"sha": "00ca16a4cc8d554dd3d229a9d7faf76ca70a4a28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00ca16a4cc8d554dd3d229a9d7faf76ca70a4a28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f51422b47473b49e5a7f69e64d59f6739d5e175a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f51422b47473b49e5a7f69e64d59f6739d5e175a", "html_url": "https://github.com/rust-lang/rust/commit/f51422b47473b49e5a7f69e64d59f6739d5e175a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f51422b47473b49e5a7f69e64d59f6739d5e175a/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bce5eb0c08b33cf4338020a933f28cd87bbd89d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/bce5eb0c08b33cf4338020a933f28cd87bbd89d1", "html_url": "https://github.com/rust-lang/rust/commit/bce5eb0c08b33cf4338020a933f28cd87bbd89d1"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "07dec23429bd69a55e98ddc024be807587a00fe9", "filename": "src/librustc_mir/transform/match_branches.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f51422b47473b49e5a7f69e64d59f6739d5e175a/src%2Flibrustc_mir%2Ftransform%2Fmatch_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51422b47473b49e5a7f69e64d59f6739d5e175a/src%2Flibrustc_mir%2Ftransform%2Fmatch_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmatch_branches.rs?ref=f51422b47473b49e5a7f69e64d59f6739d5e175a", "patch": "@@ -52,11 +52,8 @@ impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n                         if let Some(f_c) = f_c.literal.try_eval_bool(tcx, param_env) {\n                             // This should also be a bool because it's writing to the same place\n                             let s_c = s_c.literal.try_eval_bool(tcx, param_env).unwrap();\n-                            // Check that only const assignments of opposite bool values are\n-                            // permitted.\n-                            if f_c != s_c {\n-                              continue\n-                            }\n+                            assert_ne!(f_c, s_c, \"Unexpected match would've compared eq earlier\");\n+                            continue;\n                         }\n                         continue 'outer;\n                     }\n@@ -70,14 +67,19 @@ impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n             bbs[bb_idx].terminator_mut().kind = TerminatorKind::Goto { target: first };\n             for s in bbs[first].statements.iter_mut() {\n                 if let StatementKind::Assign(box (_, ref mut rhs)) = s.kind {\n-                    let size = tcx.layout_of(param_env.and(switch_ty)).unwrap().size;\n-                    let const_cmp = Operand::const_from_scalar(\n-                        tcx,\n-                        switch_ty,\n-                        crate::interpret::Scalar::from_uint(val, size),\n-                        rustc_span::DUMMY_SP,\n-                    );\n-                    *rhs = Rvalue::BinaryOp(BinOp::Eq, Operand::Move(discr), const_cmp);\n+                    if let Rvalue::Use(Operand::Constant(c)) = rhs {\n+                        let size = tcx.layout_of(param_env.and(switch_ty)).unwrap().size;\n+                        let const_cmp = Operand::const_from_scalar(\n+                            tcx,\n+                            switch_ty,\n+                            crate::interpret::Scalar::from_uint(val, size),\n+                            rustc_span::DUMMY_SP,\n+                        );\n+                        if let Some(c) = c.literal.try_eval_bool(tcx, param_env) {\n+                            let op = if c { BinOp::Eq } else { BinOp::Ne };\n+                            *rhs = Rvalue::BinaryOp(op, Operand::Move(discr), const_cmp);\n+                        }\n+                    }\n                 }\n             }\n         }"}]}