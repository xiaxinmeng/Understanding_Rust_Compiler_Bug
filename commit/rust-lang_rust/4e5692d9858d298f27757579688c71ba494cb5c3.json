{"sha": "4e5692d9858d298f27757579688c71ba494cb5c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlNTY5MmQ5ODU4ZDI5OGYyNzc1NzU3OTY4OGM3MWJhNDk0Y2I1YzM=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-01-18T11:18:57Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-03-13T20:58:49Z"}, "message": "test that wildcard type `_` is not duplicated by `type Foo<X> = (X, X);` and potentially instantiated at different types.\n\n(Updated to reflect changes in diagnostic output and compiletest infrastructure.)", "tree": {"sha": "a422545a5b359b2b78e7976911fd685dea62e014", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a422545a5b359b2b78e7976911fd685dea62e014"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e5692d9858d298f27757579688c71ba494cb5c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e5692d9858d298f27757579688c71ba494cb5c3", "html_url": "https://github.com/rust-lang/rust/commit/4e5692d9858d298f27757579688c71ba494cb5c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e5692d9858d298f27757579688c71ba494cb5c3/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bf1f1c8f4100247c1f9b3d9b7aecea5c970263e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bf1f1c8f4100247c1f9b3d9b7aecea5c970263e", "html_url": "https://github.com/rust-lang/rust/commit/8bf1f1c8f4100247c1f9b3d9b7aecea5c970263e"}], "stats": {"total": 99, "additions": 99, "deletions": 0}, "files": [{"sha": "3d042d442d5318b3fde457e908eed0dcdca46119", "filename": "src/test/ui/nll/user-annotations/issue-55748-pat-types-constrain-bindings.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/4e5692d9858d298f27757579688c71ba494cb5c3/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-55748-pat-types-constrain-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e5692d9858d298f27757579688c71ba494cb5c3/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-55748-pat-types-constrain-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-55748-pat-types-constrain-bindings.rs?ref=4e5692d9858d298f27757579688c71ba494cb5c3", "patch": "@@ -0,0 +1,70 @@\n+// This test is ensuring that type ascriptions on let bindings\n+// constrain both:\n+//\n+// 1. the input expression on the right-hand side (after any potential\n+//    coercion, and allowing for covariance), *and*\n+//\n+// 2. the bindings (if any) nested within the pattern on the left-hand\n+//    side (and here, the type-constraint is *invariant*).\n+\n+#![feature(nll)]\n+\n+#![allow(dead_code, unused_mut)]\n+type PairUncoupled<'a, 'b, T> = (&'a T, &'b T);\n+type PairCoupledRegions<'a, T> = (&'a T, &'a T);\n+type PairCoupledTypes<T> = (T, T);\n+\n+fn uncoupled_lhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n+    let ((mut y, mut _z),): (PairUncoupled<u32>,) = ((s, &_x),); // ok\n+    // Above compiling does *not* imply below would compile.\n+    // ::std::mem::swap(&mut y, &mut _z);\n+    y\n+}\n+\n+fn swap_regions((mut y, mut _z): PairCoupledRegions<u32>) {\n+    ::std::mem::swap(&mut y, &mut _z);\n+}\n+\n+fn coupled_regions_lhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n+    let ((y, _z),): (PairCoupledRegions<u32>,) = ((s, &_x),);\n+    // If above line compiled, so should line below ...\n+\n+    // swap_regions((y, _z));\n+\n+    // ... but the ascribed type also invalidates this use of `y`\n+    y //~ ERROR lifetime may not live long enough\n+}\n+\n+fn swap_types((mut y, mut _z): PairCoupledTypes<&u32>) {\n+    ::std::mem::swap(&mut y, &mut _z);\n+}\n+\n+fn coupled_types_lhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n+    let ((y, _z),): (PairCoupledTypes<&u32>,) = ((s, &_x),);\n+    // If above line compiled, so should line below ...\n+\n+    // swap_types((y, _z));\n+\n+    // ... but the ascribed type also invalidates this use of `y`\n+    y //~ ERROR lifetime may not live long enough\n+}\n+\n+fn swap_wilds((mut y, mut _z): PairCoupledTypes<&u32>) {\n+    ::std::mem::swap(&mut y, &mut _z);\n+}\n+\n+fn coupled_wilds_lhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n+    let ((y, _z),): (PairCoupledTypes<_>,) = ((s, &_x),);\n+    // If above line compiled, so should line below\n+    // swap_wilds((y, _z));\n+\n+    // ... but the ascribed type also invalidates this use of `y`\n+    y //~ ERROR lifetime may not live long enough\n+}\n+\n+fn main() {\n+    uncoupled_lhs(&3, &4);\n+    coupled_regions_lhs(&3, &4);\n+    coupled_types_lhs(&3, &4);\n+    coupled_wilds_lhs(&3, &4);\n+}"}, {"sha": "5929707e41e10ba18c724401fd5503be3db368ae", "filename": "src/test/ui/nll/user-annotations/issue-55748-pat-types-constrain-bindings.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4e5692d9858d298f27757579688c71ba494cb5c3/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-55748-pat-types-constrain-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e5692d9858d298f27757579688c71ba494cb5c3/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-55748-pat-types-constrain-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-55748-pat-types-constrain-bindings.stderr?ref=4e5692d9858d298f27757579688c71ba494cb5c3", "patch": "@@ -0,0 +1,29 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-55748-pat-types-constrain-bindings.rs:35:5\n+   |\n+LL | fn coupled_regions_lhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n+   |                        -- lifetime `'a` defined here\n+...\n+LL |     y\n+   |     ^ returning this value requires that `'a` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/issue-55748-pat-types-constrain-bindings.rs:49:5\n+   |\n+LL | fn coupled_types_lhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n+   |                      -- lifetime `'a` defined here\n+...\n+LL |     y\n+   |     ^ returning this value requires that `'a` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/issue-55748-pat-types-constrain-bindings.rs:62:5\n+   |\n+LL | fn coupled_wilds_lhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n+   |                      -- lifetime `'a` defined here\n+...\n+LL |     y\n+   |     ^ returning this value requires that `'a` must outlive `'static`\n+\n+error: aborting due to 3 previous errors\n+"}]}