{"sha": "34ad3d629a75c8bbc419c0159c213901ce8ad28d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0YWQzZDYyOWE3NWM4YmJjNDE5YzAxNTljMjEzOTAxY2U4YWQyOGQ=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-02-09T16:25:03Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-02-09T16:25:03Z"}, "message": "Teach `find_path` about inner items", "tree": {"sha": "f458a6a05267fca4d60833a914b6d2ce93944389", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f458a6a05267fca4d60833a914b6d2ce93944389"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34ad3d629a75c8bbc419c0159c213901ce8ad28d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34ad3d629a75c8bbc419c0159c213901ce8ad28d", "html_url": "https://github.com/rust-lang/rust/commit/34ad3d629a75c8bbc419c0159c213901ce8ad28d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34ad3d629a75c8bbc419c0159c213901ce8ad28d/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7067a22e1c1ab9041475359922d1863f7d9a4f5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7067a22e1c1ab9041475359922d1863f7d9a4f5c", "html_url": "https://github.com/rust-lang/rust/commit/7067a22e1c1ab9041475359922d1863f7d9a4f5c"}], "stats": {"total": 101, "additions": 91, "deletions": 10}, "files": [{"sha": "5e2a711b84a5b6a6e5905685d0ef68f36b7d5241", "filename": "crates/hir_def/src/find_path.rs", "status": "modified", "additions": 91, "deletions": 10, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/34ad3d629a75c8bbc419c0159c213901ce8ad28d/crates%2Fhir_def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ad3d629a75c8bbc419c0159c213901ce8ad28d/crates%2Fhir_def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ffind_path.rs?ref=34ad3d629a75c8bbc419c0159c213901ce8ad28d", "patch": "@@ -13,8 +13,6 @@ use crate::{\n     ModuleDefId, ModuleId,\n };\n \n-// FIXME: handle local items\n-\n /// Find a path that can be used to refer to a certain item. This can depend on\n /// *from where* you're referring to the item, hence the `from` parameter.\n pub fn find_path(db: &dyn DefDatabase, item: ItemInNs, from: ModuleId) -> Option<ModPath> {\n@@ -107,17 +105,17 @@ fn find_path_inner(\n \n     // - if the item is already in scope, return the name under which it is\n     let def_map = from.def_map(db);\n-    let from_scope: &crate::item_scope::ItemScope = &def_map[from.local_id].scope;\n-    let scope_name =\n-        if let Some((name, _)) = from_scope.name_of(item) { Some(name.clone()) } else { None };\n+    let scope_name = def_map.with_ancestor_maps(db, from.local_id, &mut |def_map, local_id| {\n+        def_map[local_id].scope.name_of(item).map(|(name, _)| name.clone())\n+    });\n     if prefixed.is_none() && scope_name.is_some() {\n         return scope_name\n             .map(|scope_name| ModPath::from_segments(PathKind::Plain, vec![scope_name]));\n     }\n \n     // - if the item is the crate root, return `crate`\n     let root = def_map.module_id(def_map.root());\n-    if item == ItemInNs::Types(ModuleDefId::ModuleId(root)) {\n+    if item == ItemInNs::Types(ModuleDefId::ModuleId(root)) && def_map.block_id().is_none() {\n         return Some(ModPath::from_segments(PathKind::Crate, Vec::new()));\n     }\n \n@@ -230,7 +228,12 @@ fn find_path_inner(\n         }\n     }\n \n-    if let Some(prefix) = prefixed.map(PrefixKind::prefix) {\n+    if let Some(mut prefix) = prefixed.map(PrefixKind::prefix) {\n+        if matches!(prefix, PathKind::Crate | PathKind::Super(0)) && def_map.block_id().is_some() {\n+            // Inner items cannot be referred to via `crate::` or `self::` paths.\n+            prefix = PathKind::Plain;\n+        }\n+\n         best_path.or_else(|| {\n             scope_name.map(|scope_name| ModPath::from_segments(prefix, vec![scope_name]))\n         })\n@@ -358,14 +361,14 @@ mod tests {\n     /// module the cursor is in.\n     fn check_found_path_(ra_fixture: &str, path: &str, prefix_kind: Option<PrefixKind>) {\n         let (db, pos) = TestDB::with_position(ra_fixture);\n-        let module = db.module_for_file(pos.file_id);\n+        let module = db.module_at_position(pos);\n         let parsed_path_file = syntax::SourceFile::parse(&format!(\"use {};\", path));\n         let ast_path =\n             parsed_path_file.syntax_node().descendants().find_map(syntax::ast::Path::cast).unwrap();\n         let mod_path = ModPath::from_src(ast_path, &Hygiene::new_unhygienic()).unwrap();\n \n-        let crate_def_map = module.def_map(&db);\n-        let resolved = crate_def_map\n+        let def_map = module.def_map(&db);\n+        let resolved = def_map\n             .resolve_path(\n                 &db,\n                 module.local_id,\n@@ -788,4 +791,82 @@ mod tests {\n         check_found_path(code, \"u8\", \"u8\", \"u8\", \"u8\");\n         check_found_path(code, \"u16\", \"u16\", \"u16\", \"u16\");\n     }\n+\n+    #[test]\n+    fn inner_items() {\n+        check_found_path(\n+            r#\"\n+            fn main() {\n+                struct Inner {}\n+                $0\n+            }\n+        \"#,\n+            \"Inner\",\n+            \"Inner\",\n+            \"Inner\",\n+            \"Inner\",\n+        );\n+    }\n+\n+    #[test]\n+    fn inner_items_from_outer_scope() {\n+        check_found_path(\n+            r#\"\n+            fn main() {\n+                struct Struct {}\n+                {\n+                    $0\n+                }\n+            }\n+        \"#,\n+            \"Struct\",\n+            \"Struct\",\n+            \"Struct\",\n+            \"Struct\",\n+        );\n+    }\n+\n+    #[test]\n+    fn inner_items_from_inner_module() {\n+        check_found_path(\n+            r#\"\n+            fn main() {\n+                mod module {\n+                    struct Struct {}\n+                }\n+                {\n+                    $0\n+                }\n+            }\n+        \"#,\n+            \"module::Struct\",\n+            \"module::Struct\",\n+            \"module::Struct\",\n+            \"module::Struct\",\n+        );\n+    }\n+\n+    #[test]\n+    #[ignore]\n+    fn inner_items_from_parent_module() {\n+        // FIXME: ItemTree currently associates all inner items with `main`. Luckily, this sort of\n+        // code is very rare, so this isn't terrible.\n+        // To fix it, we should probably build dedicated `ItemTree`s for inner items, and not store\n+        // them in the file's main ItemTree. This would also allow us to stop parsing function\n+        // bodies when we only want to compute the crate's main DefMap.\n+        check_found_path(\n+            r#\"\n+            fn main() {\n+                struct Struct {}\n+                mod module {\n+                    $0\n+                }\n+            }\n+        \"#,\n+            \"super::Struct\",\n+            \"super::Struct\",\n+            \"super::Struct\",\n+            \"super::Struct\",\n+        );\n+    }\n }"}]}