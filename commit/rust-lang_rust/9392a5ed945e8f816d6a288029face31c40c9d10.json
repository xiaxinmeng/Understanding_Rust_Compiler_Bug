{"sha": "9392a5ed945e8f816d6a288029face31c40c9d10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzOTJhNWVkOTQ1ZThmODE2ZDZhMjg4MDI5ZmFjZTMxYzQwYzlkMTA=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-18T19:21:14Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-18T23:13:04Z"}, "message": "Use intra-doc links on HashSet", "tree": {"sha": "cf6c4b7e73264fed57d3291bf456178c78a76e40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf6c4b7e73264fed57d3291bf456178c78a76e40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9392a5ed945e8f816d6a288029face31c40c9d10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9392a5ed945e8f816d6a288029face31c40c9d10", "html_url": "https://github.com/rust-lang/rust/commit/9392a5ed945e8f816d6a288029face31c40c9d10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9392a5ed945e8f816d6a288029face31c40c9d10/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e53fea7e061a5f669e7729093f0613d047f7dfc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e53fea7e061a5f669e7729093f0613d047f7dfc3", "html_url": "https://github.com/rust-lang/rust/commit/e53fea7e061a5f669e7729093f0613d047f7dfc3"}], "stats": {"total": 47, "additions": 9, "deletions": 38}, "files": [{"sha": "10bf917daea4680534d685b4ba7678b98974d6f3", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 9, "deletions": 38, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/9392a5ed945e8f816d6a288029face31c40c9d10/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9392a5ed945e8f816d6a288029face31c40c9d10/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=9392a5ed945e8f816d6a288029face31c40c9d10", "patch": "@@ -98,12 +98,8 @@ use super::map::{self, HashMap, Keys, RandomState};\n /// // use the values stored in the set\n /// ```\n ///\n-/// [`Cell`]: ../../std/cell/struct.Cell.html\n-/// [`Eq`]: ../../std/cmp/trait.Eq.html\n-/// [`Hash`]: ../../std/hash/trait.Hash.html\n-/// [`HashMap`]: struct.HashMap.html\n-/// [`PartialEq`]: ../../std/cmp/trait.PartialEq.html\n-/// [`RefCell`]: ../../std/cell/struct.RefCell.html\n+/// [`RefCell`]: crate::cell::RefCell\n+/// [`Cell`]: crate::cell::Cell\n #[derive(Clone)]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"hashset_type\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -286,8 +282,6 @@ impl<T, S> HashSet<T, S> {\n     /// let mut set = HashSet::with_hasher(s);\n     /// set.insert(2);\n     /// ```\n-    ///\n-    /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html\n     #[inline]\n     #[stable(feature = \"hashmap_build_hasher\", since = \"1.7.0\")]\n     pub fn with_hasher(hasher: S) -> HashSet<T, S> {\n@@ -318,8 +312,6 @@ impl<T, S> HashSet<T, S> {\n     /// let mut set = HashSet::with_capacity_and_hasher(10, s);\n     /// set.insert(1);\n     /// ```\n-    ///\n-    /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html\n     #[inline]\n     #[stable(feature = \"hashmap_build_hasher\", since = \"1.7.0\")]\n     pub fn with_capacity_and_hasher(capacity: usize, hasher: S) -> HashSet<T, S> {\n@@ -328,8 +320,6 @@ impl<T, S> HashSet<T, S> {\n \n     /// Returns a reference to the set's [`BuildHasher`].\n     ///\n-    /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -577,9 +567,6 @@ where\n     /// assert_eq!(set.contains(&1), true);\n     /// assert_eq!(set.contains(&4), false);\n     /// ```\n-    ///\n-    /// [`Eq`]: ../../std/cmp/trait.Eq.html\n-    /// [`Hash`]: ../../std/hash/trait.Hash.html\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn contains<Q: ?Sized>(&self, value: &Q) -> bool\n@@ -605,9 +592,6 @@ where\n     /// assert_eq!(set.get(&2), Some(&2));\n     /// assert_eq!(set.get(&4), None);\n     /// ```\n-    ///\n-    /// [`Eq`]: ../../std/cmp/trait.Eq.html\n-    /// [`Hash`]: ../../std/hash/trait.Hash.html\n     #[inline]\n     #[stable(feature = \"set_recovery\", since = \"1.9.0\")]\n     pub fn get<Q: ?Sized>(&self, value: &Q) -> Option<&T>\n@@ -849,9 +833,6 @@ where\n     /// assert_eq!(set.remove(&2), true);\n     /// assert_eq!(set.remove(&2), false);\n     /// ```\n-    ///\n-    /// [`Eq`]: ../../std/cmp/trait.Eq.html\n-    /// [`Hash`]: ../../std/hash/trait.Hash.html\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn remove<Q: ?Sized>(&mut self, value: &Q) -> bool\n@@ -877,9 +858,6 @@ where\n     /// assert_eq!(set.take(&2), Some(2));\n     /// assert_eq!(set.take(&2), None);\n     /// ```\n-    ///\n-    /// [`Eq`]: ../../std/cmp/trait.Eq.html\n-    /// [`Hash`]: ../../std/hash/trait.Hash.html\n     #[inline]\n     #[stable(feature = \"set_recovery\", since = \"1.9.0\")]\n     pub fn take<Q: ?Sized>(&mut self, value: &Q) -> Option<T>\n@@ -1153,8 +1131,7 @@ where\n /// This `struct` is created by the [`iter`] method on [`HashSet`].\n /// See its documentation for more.\n ///\n-/// [`HashSet`]: struct.HashSet.html\n-/// [`iter`]: struct.HashSet.html#method.iter\n+/// [`iter`]: HashSet::iter\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, K: 'a> {\n     iter: Keys<'a, K, ()>,\n@@ -1165,8 +1142,7 @@ pub struct Iter<'a, K: 'a> {\n /// This `struct` is created by the [`into_iter`] method on [`HashSet`]\n /// (provided by the `IntoIterator` trait). See its documentation for more.\n ///\n-/// [`HashSet`]: struct.HashSet.html\n-/// [`into_iter`]: struct.HashSet.html#method.into_iter\n+/// [`into_iter`]: IntoIterator::into_iter\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<K> {\n     iter: map::IntoIter<K, ()>,\n@@ -1177,8 +1153,7 @@ pub struct IntoIter<K> {\n /// This `struct` is created by the [`drain`] method on [`HashSet`].\n /// See its documentation for more.\n ///\n-/// [`HashSet`]: struct.HashSet.html\n-/// [`drain`]: struct.HashSet.html#method.drain\n+/// [`drain`]: HashSet::drain\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Drain<'a, K: 'a> {\n     iter: map::Drain<'a, K, ()>,\n@@ -1189,8 +1164,7 @@ pub struct Drain<'a, K: 'a> {\n /// This `struct` is created by the [`intersection`] method on [`HashSet`].\n /// See its documentation for more.\n ///\n-/// [`HashSet`]: struct.HashSet.html\n-/// [`intersection`]: struct.HashSet.html#method.intersection\n+/// [`intersection`]: HashSet::intersection\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Intersection<'a, T: 'a, S: 'a> {\n     // iterator of the first set\n@@ -1204,8 +1178,7 @@ pub struct Intersection<'a, T: 'a, S: 'a> {\n /// This `struct` is created by the [`difference`] method on [`HashSet`].\n /// See its documentation for more.\n ///\n-/// [`HashSet`]: struct.HashSet.html\n-/// [`difference`]: struct.HashSet.html#method.difference\n+/// [`difference`]: HashSet::difference\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Difference<'a, T: 'a, S: 'a> {\n     // iterator of the first set\n@@ -1219,8 +1192,7 @@ pub struct Difference<'a, T: 'a, S: 'a> {\n /// This `struct` is created by the [`symmetric_difference`] method on\n /// [`HashSet`]. See its documentation for more.\n ///\n-/// [`HashSet`]: struct.HashSet.html\n-/// [`symmetric_difference`]: struct.HashSet.html#method.symmetric_difference\n+/// [`symmetric_difference`]: HashSet::symmetric_difference\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct SymmetricDifference<'a, T: 'a, S: 'a> {\n     iter: Chain<Difference<'a, T, S>, Difference<'a, T, S>>,\n@@ -1231,8 +1203,7 @@ pub struct SymmetricDifference<'a, T: 'a, S: 'a> {\n /// This `struct` is created by the [`union`] method on [`HashSet`].\n /// See its documentation for more.\n ///\n-/// [`HashSet`]: struct.HashSet.html\n-/// [`union`]: struct.HashSet.html#method.union\n+/// [`union`]: HashSet::union\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Union<'a, T: 'a, S: 'a> {\n     iter: Chain<Iter<'a, T>, Difference<'a, T, S>>,"}]}