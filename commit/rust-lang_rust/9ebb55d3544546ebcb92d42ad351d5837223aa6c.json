{"sha": "9ebb55d3544546ebcb92d42ad351d5837223aa6c", "node_id": "C_kwDOAAsO6NoAKDllYmI1NWQzNTQ0NTQ2ZWJjYjkyZDQyYWQzNTFkNTgzNzIyM2FhNmM", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-19T13:33:04Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-19T13:44:52Z"}, "message": "Hide more unnecessary parameter hints for constructors", "tree": {"sha": "c60f9f919c102b352c66532e39e3e5a64001785d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c60f9f919c102b352c66532e39e3e5a64001785d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ebb55d3544546ebcb92d42ad351d5837223aa6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ebb55d3544546ebcb92d42ad351d5837223aa6c", "html_url": "https://github.com/rust-lang/rust/commit/9ebb55d3544546ebcb92d42ad351d5837223aa6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ebb55d3544546ebcb92d42ad351d5837223aa6c/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fe28441b82707c891d44a6a0bce9e18cd810134", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fe28441b82707c891d44a6a0bce9e18cd810134", "html_url": "https://github.com/rust-lang/rust/commit/5fe28441b82707c891d44a6a0bce9e18cd810134"}], "stats": {"total": 43, "additions": 34, "deletions": 9}, "files": [{"sha": "3cb60d9e4464774fdec849421fb6b43a7034a01d", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/9ebb55d3544546ebcb92d42ad351d5837223aa6c/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ebb55d3544546ebcb92d42ad351d5837223aa6c/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=9ebb55d3544546ebcb92d42ad351d5837223aa6c", "patch": "@@ -894,7 +894,7 @@ fn should_hide_param_name_hint(\n     // These are to be tested in the `parameter_hint_heuristics` test\n     // hide when:\n     // - the parameter name is a suffix of the function's name\n-    // - the argument is an enum whose name is equal to the parameter\n+    // - the argument is a qualified constructing or call expression where the qualifier is an ADT\n     // - exact argument<->parameter match(ignoring leading underscore) or parameter is a prefix/suffix\n     //   of argument with _ splitting it off\n     // - param starts with `ra_fixture`\n@@ -915,10 +915,10 @@ fn should_hide_param_name_hint(\n     };\n     let fn_name = fn_name.as_deref();\n     is_param_name_suffix_of_fn_name(param_name, callable, fn_name)\n-        || is_enum_name_similar_to_param_name(sema, argument, param_name)\n         || is_argument_similar_to_param_name(argument, param_name)\n         || param_name.starts_with(\"ra_fixture\")\n         || (callable.n_params() == 1 && is_obvious_param(param_name))\n+        || is_adt_constructor_similar_to_param_name(sema, argument, param_name)\n }\n \n fn is_argument_similar_to_param_name(argument: &ast::Expr, param_name: &str) -> bool {\n@@ -974,17 +974,43 @@ fn is_param_name_suffix_of_fn_name(\n     }\n }\n \n-fn is_enum_name_similar_to_param_name(\n+fn is_adt_constructor_similar_to_param_name(\n     sema: &Semantics<RootDatabase>,\n     argument: &ast::Expr,\n     param_name: &str,\n ) -> bool {\n-    match sema.type_of_expr(argument).and_then(|t| t.original.as_adt()) {\n-        Some(hir::Adt::Enum(e)) => {\n-            to_lower_snake_case(&e.name(sema.db).to_smol_str()) == param_name\n+    let path = match argument {\n+        ast::Expr::CallExpr(c) => c.expr().and_then(|e| match e {\n+            ast::Expr::PathExpr(p) => p.path(),\n+            _ => None,\n+        }),\n+        ast::Expr::PathExpr(p) => p.path(),\n+        ast::Expr::RecordExpr(r) => r.path(),\n+        _ => return false,\n+    };\n+    let path = match path {\n+        Some(it) => it,\n+        None => return false,\n+    };\n+    (|| match sema.resolve_path(&path)? {\n+        hir::PathResolution::Def(hir::ModuleDef::Adt(_)) => {\n+            Some(to_lower_snake_case(&path.segment()?.name_ref()?.text()) == param_name)\n         }\n-        _ => false,\n-    }\n+        hir::PathResolution::Def(hir::ModuleDef::Function(_) | hir::ModuleDef::Variant(_)) => {\n+            if to_lower_snake_case(&path.segment()?.name_ref()?.text()) == param_name {\n+                return Some(true);\n+            }\n+            let qual = path.qualifier()?;\n+            match sema.resolve_path(&qual)? {\n+                hir::PathResolution::Def(hir::ModuleDef::Adt(_)) => {\n+                    Some(to_lower_snake_case(&qual.segment()?.name_ref()?.text()) == param_name)\n+                }\n+                _ => None,\n+            }\n+        }\n+        _ => None,\n+    })()\n+    .unwrap_or(false)\n }\n \n fn get_string_representation(expr: &ast::Expr) -> Option<String> {\n@@ -1309,7 +1335,6 @@ fn main() {\n                //^^ self  ^^^^ param\n     Test::from_syntax(\n         FileId {},\n-      //^^^^^^^^^ file_id\n         \"impl\".into(),\n       //^^^^^^^^^^^^^ name\n         None,"}]}