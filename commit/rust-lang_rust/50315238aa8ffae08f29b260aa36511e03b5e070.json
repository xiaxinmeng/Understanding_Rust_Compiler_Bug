{"sha": "50315238aa8ffae08f29b260aa36511e03b5e070", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwMzE1MjM4YWE4ZmZhZTA4ZjI5YjI2MGFhMzY1MTFlMDNiNWUwNzA=", "commit": {"author": {"name": "Ivan Tham", "email": "pickfire@riseup.net", "date": "2020-07-05T04:27:23Z"}, "committer": {"name": "Ivan Tham", "email": "pickfire@riseup.net", "date": "2020-08-10T10:13:56Z"}, "message": "Liballoc DoubleEndedIterator limit unsafe to pointer arithmethic", "tree": {"sha": "9054335e0fbf0901c6135344e651001178c08151", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9054335e0fbf0901c6135344e651001178c08151"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50315238aa8ffae08f29b260aa36511e03b5e070", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50315238aa8ffae08f29b260aa36511e03b5e070", "html_url": "https://github.com/rust-lang/rust/commit/50315238aa8ffae08f29b260aa36511e03b5e070", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50315238aa8ffae08f29b260aa36511e03b5e070/comments", "author": {"login": "pickfire", "id": 4687791, "node_id": "MDQ6VXNlcjQ2ODc3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4687791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pickfire", "html_url": "https://github.com/pickfire", "followers_url": "https://api.github.com/users/pickfire/followers", "following_url": "https://api.github.com/users/pickfire/following{/other_user}", "gists_url": "https://api.github.com/users/pickfire/gists{/gist_id}", "starred_url": "https://api.github.com/users/pickfire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pickfire/subscriptions", "organizations_url": "https://api.github.com/users/pickfire/orgs", "repos_url": "https://api.github.com/users/pickfire/repos", "events_url": "https://api.github.com/users/pickfire/events{/privacy}", "received_events_url": "https://api.github.com/users/pickfire/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pickfire", "id": 4687791, "node_id": "MDQ6VXNlcjQ2ODc3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4687791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pickfire", "html_url": "https://github.com/pickfire", "followers_url": "https://api.github.com/users/pickfire/followers", "following_url": "https://api.github.com/users/pickfire/following{/other_user}", "gists_url": "https://api.github.com/users/pickfire/gists{/gist_id}", "starred_url": "https://api.github.com/users/pickfire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pickfire/subscriptions", "organizations_url": "https://api.github.com/users/pickfire/orgs", "repos_url": "https://api.github.com/users/pickfire/repos", "events_url": "https://api.github.com/users/pickfire/events{/privacy}", "received_events_url": "https://api.github.com/users/pickfire/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc0d6345500932e8118ba65e98944a6a3bac3277", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc0d6345500932e8118ba65e98944a6a3bac3277", "html_url": "https://github.com/rust-lang/rust/commit/cc0d6345500932e8118ba65e98944a6a3bac3277"}], "stats": {"total": 26, "additions": 11, "deletions": 15}, "files": [{"sha": "559030e6c8a3433d42de82834bd3133d7305a131", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/50315238aa8ffae08f29b260aa36511e03b5e070/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50315238aa8ffae08f29b260aa36511e03b5e070/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=50315238aa8ffae08f29b260aa36511e03b5e070", "patch": "@@ -2703,7 +2703,7 @@ impl<T> Iterator for IntoIter<T> {\n             // purposefully don't use 'ptr.offset' because for\n             // vectors with 0-size elements this would return the\n             // same pointer.\n-            self.ptr = unsafe { arith_offset(self.ptr as *const T, 1) as *mut T };\n+            self.ptr = unsafe { arith_offset(self.ptr as *const i8, 1) as *mut T };\n \n             // Make up a value of this ZST.\n             Some(unsafe { mem::zeroed() })\n@@ -2735,22 +2735,18 @@ impl<T> Iterator for IntoIter<T> {\n impl<T> DoubleEndedIterator for IntoIter<T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<T> {\n-        unsafe {\n-            if self.end == self.ptr {\n-                None\n-            } else {\n-                if mem::size_of::<T>() == 0 {\n-                    // See above for why 'ptr.offset' isn't used\n-                    self.end = arith_offset(self.end as *const i8, -1) as *mut T;\n+        if self.end == self.ptr {\n+            None\n+        } else if mem::size_of::<T>() == 0 {\n+            // See above for why 'ptr.offset' isn't used\n+            self.end = unsafe { arith_offset(self.end as *const i8, -1) as *mut T };\n \n-                    // Make up a value of this ZST.\n-                    Some(mem::zeroed())\n-                } else {\n-                    self.end = self.end.offset(-1);\n+            // Make up a value of this ZST.\n+            Some(unsafe { mem::zeroed() })\n+        } else {\n+            self.end = unsafe { self.end.offset(-1) };\n \n-                    Some(ptr::read(self.end))\n-                }\n-            }\n+            Some(unsafe { ptr::read(self.end) })\n         }\n     }\n }"}]}