{"sha": "c2693db264900005ceb13f917dc1fab0cbf8d459", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyNjkzZGIyNjQ5MDAwMDVjZWIxM2Y5MTdkYzFmYWIwY2JmOGQ0NTk=", "commit": {"author": {"name": "Simon Vandel Sillesen", "email": "simon.vandel@gmail.com", "date": "2020-08-29T12:16:39Z"}, "committer": {"name": "Simon Vandel Sillesen", "email": "simon.vandel@gmail.com", "date": "2020-09-06T09:51:44Z"}, "message": "Add peephold optimization that simplifies Ne(_1, false) and Ne(false, _1) into _1\n\nThis was observed emitted from the MatchBranchSimplification pass.", "tree": {"sha": "3d25922685845316f578e8156d3097db5555ddab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d25922685845316f578e8156d3097db5555ddab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2693db264900005ceb13f917dc1fab0cbf8d459", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2693db264900005ceb13f917dc1fab0cbf8d459", "html_url": "https://github.com/rust-lang/rust/commit/c2693db264900005ceb13f917dc1fab0cbf8d459", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2693db264900005ceb13f917dc1fab0cbf8d459/comments", "author": {"login": "simonvandel", "id": 2770647, "node_id": "MDQ6VXNlcjI3NzA2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2770647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simonvandel", "html_url": "https://github.com/simonvandel", "followers_url": "https://api.github.com/users/simonvandel/followers", "following_url": "https://api.github.com/users/simonvandel/following{/other_user}", "gists_url": "https://api.github.com/users/simonvandel/gists{/gist_id}", "starred_url": "https://api.github.com/users/simonvandel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simonvandel/subscriptions", "organizations_url": "https://api.github.com/users/simonvandel/orgs", "repos_url": "https://api.github.com/users/simonvandel/repos", "events_url": "https://api.github.com/users/simonvandel/events{/privacy}", "received_events_url": "https://api.github.com/users/simonvandel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "simonvandel", "id": 2770647, "node_id": "MDQ6VXNlcjI3NzA2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2770647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simonvandel", "html_url": "https://github.com/simonvandel", "followers_url": "https://api.github.com/users/simonvandel/followers", "following_url": "https://api.github.com/users/simonvandel/following{/other_user}", "gists_url": "https://api.github.com/users/simonvandel/gists{/gist_id}", "starred_url": "https://api.github.com/users/simonvandel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simonvandel/subscriptions", "organizations_url": "https://api.github.com/users/simonvandel/orgs", "repos_url": "https://api.github.com/users/simonvandel/repos", "events_url": "https://api.github.com/users/simonvandel/events{/privacy}", "received_events_url": "https://api.github.com/users/simonvandel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffaf15860836c55c7e64135436b05ba16057a580", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffaf15860836c55c7e64135436b05ba16057a580", "html_url": "https://github.com/rust-lang/rust/commit/ffaf15860836c55c7e64135436b05ba16057a580"}], "stats": {"total": 130, "additions": 128, "deletions": 2}, "files": [{"sha": "96e2a0ba618a39e275a82ea6b88b95d4a45fc102", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c2693db264900005ceb13f917dc1fab0cbf8d459/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2693db264900005ceb13f917dc1fab0cbf8d459/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=c2693db264900005ceb13f917dc1fab0cbf8d459", "patch": "@@ -1954,6 +1954,15 @@ impl<'tcx> Operand<'tcx> {\n             Operand::Constant(_) => None,\n         }\n     }\n+\n+    /// Returns the `Constant` that is the target of this `Operand`, or `None` if this `Operand` is a\n+    /// place.\n+    pub fn constant(&self) -> Option<&Constant<'tcx>> {\n+        match self {\n+            Operand::Constant(x) => Some(&**x),\n+            Operand::Copy(_) | Operand::Move(_) => None,\n+        }\n+    }\n }\n \n ///////////////////////////////////////////////////////////////////////////"}, {"sha": "18cf2a2ff218b6eb59d45c84ef1b0d751b0df09a", "filename": "compiler/rustc_mir/src/transform/instcombine.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c2693db264900005ceb13f917dc1fab0cbf8d459/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2693db264900005ceb13f917dc1fab0cbf8d459/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs?ref=c2693db264900005ceb13f917dc1fab0cbf8d459", "patch": "@@ -6,7 +6,7 @@ use rustc_hir::Mutability;\n use rustc_index::vec::Idx;\n use rustc_middle::mir::visit::{MutVisitor, Visitor};\n use rustc_middle::mir::{\n-    Body, Constant, Local, Location, Operand, Place, PlaceRef, ProjectionElem, Rvalue,\n+    BinOp, Body, Constant, Local, Location, Operand, Place, PlaceRef, ProjectionElem, Rvalue,\n };\n use rustc_middle::ty::{self, TyCtxt};\n use std::mem;\n@@ -66,6 +66,11 @@ impl<'tcx> MutVisitor<'tcx> for InstCombineVisitor<'tcx> {\n             *rvalue = Rvalue::Use(Operand::Constant(box constant));\n         }\n \n+        if let Some(operand) = self.optimizations.unneeded_not_equal.remove(&location) {\n+            debug!(\"replacing {:?} with {:?}\", rvalue, operand);\n+            *rvalue = Rvalue::Use(operand);\n+        }\n+\n         self.super_rvalue(rvalue, location)\n     }\n }\n@@ -81,6 +86,23 @@ impl OptimizationFinder<'b, 'tcx> {\n     fn new(body: &'b Body<'tcx>, tcx: TyCtxt<'tcx>) -> OptimizationFinder<'b, 'tcx> {\n         OptimizationFinder { body, tcx, optimizations: OptimizationList::default() }\n     }\n+\n+    fn find_operand_in_ne_false_pattern(\n+        &self,\n+        l: &Operand<'tcx>,\n+        r: &'a Operand<'tcx>,\n+    ) -> Option<&'a Operand<'tcx>> {\n+        let const_ = l.constant()?;\n+        if const_.literal.ty == self.tcx.types.bool\n+            && const_.literal.val.try_to_bool() == Some(false)\n+        {\n+            if r.place().is_some() {\n+                return Some(r);\n+            }\n+        }\n+\n+        return None;\n+    }\n }\n \n impl Visitor<'tcx> for OptimizationFinder<'b, 'tcx> {\n@@ -106,6 +128,18 @@ impl Visitor<'tcx> for OptimizationFinder<'b, 'tcx> {\n             }\n         }\n \n+        // find Ne(_place, false) or Ne(false, _place)\n+        if let Rvalue::BinaryOp(BinOp::Ne, l, r) = rvalue {\n+            // (false, _place)\n+            if let Some(o) = self.find_operand_in_ne_false_pattern(l, r) {\n+                self.optimizations.unneeded_not_equal.insert(location, o.clone());\n+            }\n+            // (_place, false)\n+            else if let Some(o) = self.find_operand_in_ne_false_pattern(r, l) {\n+                self.optimizations.unneeded_not_equal.insert(location, o.clone());\n+            }\n+        }\n+\n         self.super_rvalue(rvalue, location)\n     }\n }\n@@ -114,4 +148,5 @@ impl Visitor<'tcx> for OptimizationFinder<'b, 'tcx> {\n struct OptimizationList<'tcx> {\n     and_stars: FxHashSet<Location>,\n     arrays_lengths: FxHashMap<Location, Constant<'tcx>>,\n+    unneeded_not_equal: FxHashMap<Location, Operand<'tcx>>,\n }"}, {"sha": "53f60baf0b675f2b0b6d314c8438d50f5e759fee", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c2693db264900005ceb13f917dc1fab0cbf8d459/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2693db264900005ceb13f917dc1fab0cbf8d459/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=c2693db264900005ceb13f917dc1fab0cbf8d459", "patch": "@@ -453,8 +453,9 @@ fn run_optimization_passes<'tcx>(\n \n     // The main optimizations that we do on MIR.\n     let optimizations: &[&dyn MirPass<'tcx>] = &[\n-        &instcombine::InstCombine,\n         &match_branches::MatchBranchSimplification,\n+        // inst combine is after MatchBranchSimplification to clean up Ne(_1, false)\n+        &instcombine::InstCombine,\n         &const_prop::ConstProp,\n         &simplify_branches::SimplifyBranches::new(\"after-const-prop\"),\n         &simplify_comparison_integral::SimplifyComparisonIntegral,"}, {"sha": "d8621b90ad80d2af53bc31b00e8b759aafb15dc8", "filename": "src/test/mir-opt/not_equal_false.opt.InstCombine.diff", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/c2693db264900005ceb13f917dc1fab0cbf8d459/src%2Ftest%2Fmir-opt%2Fnot_equal_false.opt.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c2693db264900005ceb13f917dc1fab0cbf8d459/src%2Ftest%2Fmir-opt%2Fnot_equal_false.opt.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnot_equal_false.opt.InstCombine.diff?ref=c2693db264900005ceb13f917dc1fab0cbf8d459", "patch": "@@ -0,0 +1,72 @@\n+- // MIR for `opt` before InstCombine\n++ // MIR for `opt` after InstCombine\n+  \n+  fn opt(_1: Option<()>) -> bool {\n+      debug x => _1;                       // in scope 0 at $DIR/not_equal_false.rs:3:8: 3:9\n+      let mut _0: bool;                    // return place in scope 0 at $DIR/not_equal_false.rs:3:26: 3:30\n+      let mut _2: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _3: isize;                   // in scope 0 at $DIR/not_equal_false.rs:4:17: 4:21\n+      let mut _4: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _5: isize;                   // in scope 0 at $DIR/not_equal_false.rs:4:38: 4:45\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _3 = discriminant(_1);           // scope 0 at $DIR/not_equal_false.rs:4:17: 4:21\n+          _2 = Eq(_3, const 0_isize);      // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          goto -> bb7;                     // scope 0 at $DIR/not_equal_false.rs:4:17: 4:21\n+      }\n+  \n+      bb1: {\n+          _0 = const true;                 // scope 0 at $DIR/not_equal_false.rs:4:5: 4:46\n+          goto -> bb4;                     // scope 0 at $DIR/not_equal_false.rs:4:5: 4:46\n+      }\n+  \n+      bb2: {\n+          _0 = const false;                // scope 0 at $DIR/not_equal_false.rs:4:5: 4:46\n+          goto -> bb4;                     // scope 0 at $DIR/not_equal_false.rs:4:5: 4:46\n+      }\n+  \n+      bb3: {\n+          StorageLive(_4);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _5 = discriminant(_1);           // scope 0 at $DIR/not_equal_false.rs:4:38: 4:45\n+          _4 = Eq(_5, const 1_isize);      // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          goto -> bb10;                    // scope 0 at $DIR/not_equal_false.rs:4:38: 4:45\n+      }\n+  \n+      bb4: {\n+          StorageDead(_4);                 // scope 0 at $DIR/not_equal_false.rs:4:45: 4:46\n+          StorageDead(_2);                 // scope 0 at $DIR/not_equal_false.rs:4:45: 4:46\n+          return;                          // scope 0 at $DIR/not_equal_false.rs:5:2: 5:2\n+      }\n+  \n+      bb5: {\n+          _2 = const false;                // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          goto -> bb7;                     // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      }\n+  \n+      bb6: {\n+          _2 = const true;                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          goto -> bb7;                     // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      }\n+  \n+      bb7: {\n+          switchInt(move _2) -> [false: bb3, otherwise: bb1]; // scope 0 at $DIR/not_equal_false.rs:4:5: 4:46\n+      }\n+  \n+      bb8: {\n+          _4 = const false;                // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          goto -> bb10;                    // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      }\n+  \n+      bb9: {\n+          _4 = const true;                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          goto -> bb10;                    // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      }\n+  \n+      bb10: {\n+-         _0 = Ne(_4, const false);        // scope 0 at $DIR/not_equal_false.rs:4:5: 4:46\n++         _0 = _4;                         // scope 0 at $DIR/not_equal_false.rs:4:5: 4:46\n+          goto -> bb4;                     // scope 0 at $DIR/not_equal_false.rs:4:5: 4:46\n+      }\n+  }\n+  "}, {"sha": "a98a2834e8ec91d7e28cf09825a284f1bc584a14", "filename": "src/test/mir-opt/not_equal_false.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c2693db264900005ceb13f917dc1fab0cbf8d459/src%2Ftest%2Fmir-opt%2Fnot_equal_false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2693db264900005ceb13f917dc1fab0cbf8d459/src%2Ftest%2Fmir-opt%2Fnot_equal_false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnot_equal_false.rs?ref=c2693db264900005ceb13f917dc1fab0cbf8d459", "patch": "@@ -0,0 +1,9 @@\n+// EMIT_MIR not_equal_false.opt.InstCombine.diff\n+\n+fn opt(x: Option<()>) -> bool {\n+    matches!(x, None) || matches!(x, Some(_))\n+}\n+\n+fn main() {\n+    opt(None);\n+}"}]}