{"sha": "49ea3d48a26c1325dd584c8420227f6e35721f66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5ZWEzZDQ4YTI2YzEzMjVkZDU4NGM4NDIwMjI3ZjZlMzU3MjFmNjY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-06-11T15:47:47Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-07-08T09:42:57Z"}, "message": "Remove unnecessary accessor function VariantDefData::kind", "tree": {"sha": "9afed6b45ce45fd0ce497706c8c5a1dea99955ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9afed6b45ce45fd0ce497706c8c5a1dea99955ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49ea3d48a26c1325dd584c8420227f6e35721f66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49ea3d48a26c1325dd584c8420227f6e35721f66", "html_url": "https://github.com/rust-lang/rust/commit/49ea3d48a26c1325dd584c8420227f6e35721f66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49ea3d48a26c1325dd584c8420227f6e35721f66/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2cdd9f1c97652ee799f6bb0af7c063115ff368ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cdd9f1c97652ee799f6bb0af7c063115ff368ea", "html_url": "https://github.com/rust-lang/rust/commit/2cdd9f1c97652ee799f6bb0af7c063115ff368ea"}], "stats": {"total": 52, "additions": 21, "deletions": 31}, "files": [{"sha": "93507246241de62bde905a68e9fde7acc47e7c47", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ea3d48a26c1325dd584c8420227f6e35721f66/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ea3d48a26c1325dd584c8420227f6e35721f66/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=49ea3d48a26c1325dd584c8420227f6e35721f66", "patch": "@@ -1063,7 +1063,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                             Some(tcx.lookup_item_type(variant_def.did).generics)\n                         })?;\n \n-                        match variant_def.kind() {\n+                        match variant_def.kind {\n                             ty::VariantKind::Unit => Ok(()),\n                             ty::VariantKind::Tuple => fmt_tuple(fmt, lvs),\n                             ty::VariantKind::Struct => {"}, {"sha": "03e893727d1b58c7d88142ee72bb336dfe509cfd", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49ea3d48a26c1325dd584c8420227f6e35721f66/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ea3d48a26c1325dd584c8420227f6e35721f66/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=49ea3d48a26c1325dd584c8420227f6e35721f66", "patch": "@@ -1925,14 +1925,6 @@ impl<'tcx, 'container> VariantDefData<'tcx, 'container> {\n         self.fields.iter()\n     }\n \n-    pub fn kind(&self) -> VariantKind {\n-        self.kind\n-    }\n-\n-    pub fn is_tuple_struct(&self) -> bool {\n-        self.kind() == VariantKind::Tuple\n-    }\n-\n     #[inline]\n     pub fn find_field_named(&self,\n                             name: ast::Name)"}, {"sha": "b8283ccab24bd4d4ab11dcbf060e18123ff51c7b", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49ea3d48a26c1325dd584c8420227f6e35721f66/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ea3d48a26c1325dd584c8420227f6e35721f66/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=49ea3d48a26c1325dd584c8420227f6e35721f66", "patch": "@@ -246,9 +246,9 @@ fn check_for_bindings_named_the_same_as_variants(cx: &MatchCheckCtxt, pat: &Pat)\n             let pat_ty = cx.tcx.pat_ty(p);\n             if let ty::TyEnum(edef, _) = pat_ty.sty {\n                 if let Def::Local(..) = cx.tcx.expect_def(p.id) {\n-                    if edef.variants.iter().any(|variant|\n-                        variant.name == name.node && variant.kind() == VariantKind::Unit\n-                    ) {\n+                    if edef.variants.iter().any(|variant| {\n+                        variant.name == name.node && variant.kind == VariantKind::Unit\n+                    }) {\n                         let ty_path = cx.tcx.item_path_str(edef.did);\n                         let mut err = struct_span_warn!(cx.tcx.sess, p.span, E0170,\n                             \"pattern binding `{}` is named the same as one \\\n@@ -563,7 +563,7 @@ fn construct_witness<'a,'tcx>(cx: &MatchCheckCtxt<'a,'tcx>, ctor: &Constructor,\n \n         ty::TyEnum(adt, _) | ty::TyStruct(adt, _)  => {\n             let v = ctor.variant_for_adt(adt);\n-            match v.kind() {\n+            match v.kind {\n                 VariantKind::Struct => {\n                     let field_pats: hir::HirVec<_> = v.fields.iter()\n                         .zip(pats)"}, {"sha": "6d3699e978794f8e3bd4ddb078382d2135e177c4", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ea3d48a26c1325dd584c8420227f6e35721f66/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ea3d48a26c1325dd584c8420227f6e35721f66/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=49ea3d48a26c1325dd584c8420227f6e35721f66", "patch": "@@ -498,7 +498,7 @@ pub fn get_adt_def<'a, 'tcx>(intr: &IdentInterner,\n     // this needs to be done *after* the variant is interned,\n     // to support recursive structures\n     for variant in &adt.variants {\n-        if variant.kind() == ty::VariantKind::Tuple &&\n+        if variant.kind == ty::VariantKind::Tuple &&\n             adt.adt_kind() == ty::AdtKind::Enum {\n             // tuple-like enum variant fields aren't real items - get the types\n             // from the ctor."}, {"sha": "7314259423592985f68cd4cd512a17247d7d2fd5", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ea3d48a26c1325dd584c8420227f6e35721f66/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ea3d48a26c1325dd584c8420227f6e35721f66/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=49ea3d48a26c1325dd584c8420227f6e35721f66", "patch": "@@ -217,7 +217,7 @@ fn encode_parent_item(rbml_w: &mut Encoder, id: DefId) {\n fn encode_struct_fields(rbml_w: &mut Encoder,\n                         variant: ty::VariantDef) {\n     for f in &variant.fields {\n-        if variant.is_tuple_struct() {\n+        if variant.kind == ty::VariantKind::Tuple {\n             rbml_w.start_tag(tag_item_unnamed_field);\n         } else {\n             rbml_w.start_tag(tag_item_field);\n@@ -250,7 +250,7 @@ fn encode_enum_variant_info<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n         let _task = index.record(vid, rbml_w);\n         rbml_w.start_tag(tag_items_data_item);\n         encode_def_id_and_key(ecx, rbml_w, vid);\n-        encode_family(rbml_w, match variant.kind() {\n+        encode_family(rbml_w, match variant.kind {\n             ty::VariantKind::Struct => 'V',\n             ty::VariantKind::Tuple => 'v',\n             ty::VariantKind::Unit => 'w',"}, {"sha": "45c716170f5d63ecab2265f476d258dd92c64f42", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ea3d48a26c1325dd584c8420227f6e35721f66/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ea3d48a26c1325dd584c8420227f6e35721f66/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=49ea3d48a26c1325dd584c8420227f6e35721f66", "patch": "@@ -901,7 +901,7 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                 }\n                 Def::Variant(enum_did, variant_did) => {\n                     let vinfo = cx.tcx().lookup_adt_def(enum_did).variant_with_id(variant_did);\n-                    match vinfo.kind() {\n+                    match vinfo.kind {\n                         ty::VariantKind::Unit => {\n                             let repr = adt::represent_type(cx, ety);\n                             adt::trans_const(cx, &repr, Disr::from(vinfo.disr_val), &[])"}, {"sha": "b84cc028d0ced97d4166f805aefba6ec8acd2a3d", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49ea3d48a26c1325dd584c8420227f6e35721f66/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ea3d48a26c1325dd584c8420227f6e35721f66/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=49ea3d48a26c1325dd584c8420227f6e35721f66", "patch": "@@ -1109,7 +1109,7 @@ struct StructMemberDescriptionFactory<'tcx> {\n impl<'tcx> StructMemberDescriptionFactory<'tcx> {\n     fn create_member_descriptions<'a>(&self, cx: &CrateContext<'a, 'tcx>)\n                                       -> Vec<MemberDescription> {\n-        if let ty::VariantKind::Unit = self.variant.kind() {\n+        if self.variant.kind == ty::VariantKind::Unit {\n             return Vec::new();\n         }\n \n@@ -1126,7 +1126,7 @@ impl<'tcx> StructMemberDescriptionFactory<'tcx> {\n         };\n \n         self.variant.fields.iter().enumerate().map(|(i, f)| {\n-            let name = if let ty::VariantKind::Tuple = self.variant.kind() {\n+            let name = if self.variant.kind == ty::VariantKind::Tuple {\n                 format!(\"__{}\", i)\n             } else {\n                 f.name.to_string()\n@@ -1356,7 +1356,7 @@ impl<'tcx> EnumMemberDescriptionFactory<'tcx> {\n                 // For the metadata of the wrapper struct, we need to create a\n                 // MemberDescription of the struct's single field.\n                 let sole_struct_member_description = MemberDescription {\n-                    name: match non_null_variant.kind() {\n+                    name: match non_null_variant.kind {\n                         ty::VariantKind::Tuple => \"__0\".to_string(),\n                         ty::VariantKind::Struct => {\n                             non_null_variant.fields[0].name.to_string()\n@@ -1524,7 +1524,7 @@ fn describe_enum_variant<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                            containing_scope);\n \n     // Get the argument names from the enum variant info\n-    let mut arg_names: Vec<_> = match variant.kind() {\n+    let mut arg_names: Vec<_> = match variant.kind {\n         ty::VariantKind::Unit => vec![],\n         ty::VariantKind::Tuple => {\n             variant.fields"}, {"sha": "08a8b124b1c8c85c3d48a66a562919d42d963503", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/49ea3d48a26c1325dd584c8420227f6e35721f66/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ea3d48a26c1325dd584c8420227f6e35721f66/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=49ea3d48a26c1325dd584c8420227f6e35721f66", "patch": "@@ -1671,14 +1671,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             _ => return None\n         };\n \n-        let var_kind = variant.kind();\n-        if var_kind == ty::VariantKind::Struct {\n+        if variant.kind == ty::VariantKind::Struct ||\n+           variant.kind == ty::VariantKind::Unit {\n             Some((adt, variant))\n-        } else if var_kind == ty::VariantKind::Unit {\n-             Some((adt, variant))\n-         } else {\n-             None\n-         }\n+        } else {\n+            None\n+        }\n     }\n \n     pub fn write_nil(&self, node_id: ast::NodeId) {\n@@ -2998,7 +2996,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         while let Some((base_t, autoderefs)) = autoderef.next() {\n             let field = match base_t.sty {\n                 ty::TyStruct(base_def, substs) => {\n-                    tuple_like = base_def.struct_variant().is_tuple_struct();\n+                    tuple_like = base_def.struct_variant().kind == ty::VariantKind::Tuple;\n                     if !tuple_like { continue }\n \n                     debug!(\"tuple struct named {:?}\",  base_t);"}, {"sha": "41e7a467fa33a89ff80aa890306ccdaf63d1b511", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ea3d48a26c1325dd584c8420227f6e35721f66/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ea3d48a26c1325dd584c8420227f6e35721f66/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=49ea3d48a26c1325dd584c8420227f6e35721f66", "patch": "@@ -949,7 +949,7 @@ fn convert_variant_ctor<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                   scheme: ty::TypeScheme<'tcx>,\n                                   predicates: ty::GenericPredicates<'tcx>) {\n     let tcx = ccx.tcx;\n-    let ctor_ty = match variant.kind() {\n+    let ctor_ty = match variant.kind {\n         VariantKind::Unit | VariantKind::Struct => scheme.ty,\n         VariantKind::Tuple => {\n             let inputs: Vec<_> ="}, {"sha": "b3b42b970ca8479e5c532417f7c2f17081936838", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ea3d48a26c1325dd584c8420227f6e35721f66/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ea3d48a26c1325dd584c8420227f6e35721f66/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=49ea3d48a26c1325dd584c8420227f6e35721f66", "patch": "@@ -1904,7 +1904,7 @@ impl Clean<Item> for doctree::Variant {\n \n impl<'tcx> Clean<Item> for ty::VariantDefData<'tcx, 'static> {\n     fn clean(&self, cx: &DocContext) -> Item {\n-        let kind = match self.kind() {\n+        let kind = match self.kind {\n             ty::VariantKind::Unit => CLikeVariant,\n             ty::VariantKind::Tuple => {\n                 TupleVariant("}]}