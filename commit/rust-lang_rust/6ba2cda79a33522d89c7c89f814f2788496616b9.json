{"sha": "6ba2cda79a33522d89c7c89f814f2788496616b9", "node_id": "C_kwDOAAsO6NoAKDZiYTJjZGE3OWEzMzUyMmQ4OWM3Yzg5ZjgxNGYyNzg4NDk2NjE2Yjk", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-12-02T04:29:47Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-12-02T20:36:17Z"}, "message": "Fix `zero_ptr` suggestion for `no_std` crates", "tree": {"sha": "105b0d04a5a553125140a9aabf07ecd9f31b48f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/105b0d04a5a553125140a9aabf07ecd9f31b48f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ba2cda79a33522d89c7c89f814f2788496616b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ba2cda79a33522d89c7c89f814f2788496616b9", "html_url": "https://github.com/rust-lang/rust/commit/6ba2cda79a33522d89c7c89f814f2788496616b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ba2cda79a33522d89c7c89f814f2788496616b9/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d822110d3b5625b9dc80ccc442e06fc3cc851d76", "url": "https://api.github.com/repos/rust-lang/rust/commits/d822110d3b5625b9dc80ccc442e06fc3cc851d76", "html_url": "https://github.com/rust-lang/rust/commit/d822110d3b5625b9dc80ccc442e06fc3cc851d76"}], "stats": {"total": 136, "additions": 111, "deletions": 25}, "files": [{"sha": "11177f830abd0effbbea45c5cb03b20b04d0303f", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ba2cda79a33522d89c7c89f814f2788496616b9/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba2cda79a33522d89c7c89f814f2788496616b9/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=6ba2cda79a33522d89c7c89f814f2788496616b9", "patch": "@@ -538,7 +538,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(needless_bool::NeedlessBool));\n     store.register_late_pass(|_| Box::new(needless_bool::BoolComparison));\n     store.register_late_pass(|_| Box::new(needless_for_each::NeedlessForEach));\n-    store.register_late_pass(|_| Box::new(misc::MiscLints));\n+    store.register_late_pass(|_| Box::<misc::LintPass>::default());\n     store.register_late_pass(|_| Box::new(eta_reduction::EtaReduction));\n     store.register_late_pass(|_| Box::new(mut_mut::MutMut));\n     store.register_late_pass(|_| Box::new(mut_reference::UnnecessaryMutPassed));"}, {"sha": "9f4beb92b9d2e77bc265e5f13eb3b050989fc77a", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 42, "deletions": 24, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/6ba2cda79a33522d89c7c89f814f2788496616b9/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba2cda79a33522d89c7c89f814f2788496616b9/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=6ba2cda79a33522d89c7c89f814f2788496616b9", "patch": "@@ -9,12 +9,14 @@ use rustc_hir::{\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::source_map::{ExpnKind, Span};\n \n use clippy_utils::sugg::Sugg;\n-use clippy_utils::{get_parent_expr, in_constant, is_integer_literal, iter_input_pats, last_path_segment, SpanlessEq};\n+use clippy_utils::{\n+    get_parent_expr, in_constant, is_integer_literal, is_no_std_crate, iter_input_pats, last_path_segment, SpanlessEq,\n+};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -120,14 +122,28 @@ declare_clippy_lint! {\n     \"using `0 as *{const, mut} T`\"\n }\n \n-declare_lint_pass!(MiscLints => [\n+pub struct LintPass {\n+    std_or_core: &'static str,\n+}\n+impl Default for LintPass {\n+    fn default() -> Self {\n+        Self { std_or_core: \"std\" }\n+    }\n+}\n+impl_lint_pass!(LintPass => [\n     TOPLEVEL_REF_ARG,\n     USED_UNDERSCORE_BINDING,\n     SHORT_CIRCUIT_STATEMENT,\n     ZERO_PTR,\n ]);\n \n-impl<'tcx> LateLintPass<'tcx> for MiscLints {\n+impl<'tcx> LateLintPass<'tcx> for LintPass {\n+    fn check_crate(&mut self, cx: &LateContext<'_>) {\n+        if is_no_std_crate(cx) {\n+            self.std_or_core = \"core\";\n+        }\n+    }\n+\n     fn check_fn(\n         &mut self,\n         cx: &LateContext<'tcx>,\n@@ -231,7 +247,7 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n \n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if let ExprKind::Cast(e, ty) = expr.kind {\n-            check_cast(cx, expr.span, e, ty);\n+            self.check_cast(cx, expr.span, e, ty);\n             return;\n         }\n         if in_attributes_expansion(expr) || expr.span.is_desugaring(DesugaringKind::Await) {\n@@ -310,26 +326,28 @@ fn non_macro_local(cx: &LateContext<'_>, res: def::Res) -> bool {\n     }\n }\n \n-fn check_cast(cx: &LateContext<'_>, span: Span, e: &Expr<'_>, ty: &hir::Ty<'_>) {\n-    if_chain! {\n-        if let TyKind::Ptr(ref mut_ty) = ty.kind;\n-        if is_integer_literal(e, 0);\n-        if !in_constant(cx, e.hir_id);\n-        then {\n-            let (msg, sugg_fn) = match mut_ty.mutbl {\n-                Mutability::Mut => (\"`0 as *mut _` detected\", \"std::ptr::null_mut\"),\n-                Mutability::Not => (\"`0 as *const _` detected\", \"std::ptr::null\"),\n-            };\n+impl LintPass {\n+    fn check_cast(&self, cx: &LateContext<'_>, span: Span, e: &Expr<'_>, ty: &hir::Ty<'_>) {\n+        if_chain! {\n+            if let TyKind::Ptr(ref mut_ty) = ty.kind;\n+            if is_integer_literal(e, 0);\n+            if !in_constant(cx, e.hir_id);\n+            then {\n+                let (msg, sugg_fn) = match mut_ty.mutbl {\n+                    Mutability::Mut => (\"`0 as *mut _` detected\", \"ptr::null_mut\"),\n+                    Mutability::Not => (\"`0 as *const _` detected\", \"ptr::null\"),\n+                };\n \n-            let (sugg, appl) = if let TyKind::Infer = mut_ty.ty.kind {\n-                (format!(\"{sugg_fn}()\"), Applicability::MachineApplicable)\n-            } else if let Some(mut_ty_snip) = snippet_opt(cx, mut_ty.ty.span) {\n-                (format!(\"{sugg_fn}::<{mut_ty_snip}>()\"), Applicability::MachineApplicable)\n-            } else {\n-                // `MaybeIncorrect` as type inference may not work with the suggested code\n-                (format!(\"{sugg_fn}()\"), Applicability::MaybeIncorrect)\n-            };\n-            span_lint_and_sugg(cx, ZERO_PTR, span, msg, \"try\", sugg, appl);\n+                let (sugg, appl) = if let TyKind::Infer = mut_ty.ty.kind {\n+                    (format!(\"{}::{sugg_fn}()\", self.std_or_core), Applicability::MachineApplicable)\n+                } else if let Some(mut_ty_snip) = snippet_opt(cx, mut_ty.ty.span) {\n+                    (format!(\"{}::{sugg_fn}::<{mut_ty_snip}>()\", self.std_or_core), Applicability::MachineApplicable)\n+                } else {\n+                    // `MaybeIncorrect` as type inference may not work with the suggested code\n+                    (format!(\"{}::{sugg_fn}()\", self.std_or_core), Applicability::MaybeIncorrect)\n+                };\n+                span_lint_and_sugg(cx, ZERO_PTR, span, msg, \"try\", sugg, appl);\n+            }\n         }\n     }\n }"}, {"sha": "8906c776977a80f30667b1f2cd24a1f881c6e904", "filename": "tests/ui/zero_ptr_no_std.fixed", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6ba2cda79a33522d89c7c89f814f2788496616b9/tests%2Fui%2Fzero_ptr_no_std.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6ba2cda79a33522d89c7c89f814f2788496616b9/tests%2Fui%2Fzero_ptr_no_std.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_ptr_no_std.fixed?ref=6ba2cda79a33522d89c7c89f814f2788496616b9", "patch": "@@ -0,0 +1,21 @@\n+// run-rustfix\n+\n+#![feature(lang_items, start, libc)]\n+#![no_std]\n+#![deny(clippy::zero_ptr)]\n+\n+#[start]\n+fn main(_argc: isize, _argv: *const *const u8) -> isize {\n+    let _ = core::ptr::null::<usize>();\n+    let _ = core::ptr::null_mut::<f64>();\n+    let _: *const u8 = core::ptr::null();\n+    0\n+}\n+\n+#[panic_handler]\n+fn panic(_info: &core::panic::PanicInfo) -> ! {\n+    loop {}\n+}\n+\n+#[lang = \"eh_personality\"]\n+extern \"C\" fn eh_personality() {}"}, {"sha": "379c1b18d299200f914656a4acee9ff6107edd04", "filename": "tests/ui/zero_ptr_no_std.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6ba2cda79a33522d89c7c89f814f2788496616b9/tests%2Fui%2Fzero_ptr_no_std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba2cda79a33522d89c7c89f814f2788496616b9/tests%2Fui%2Fzero_ptr_no_std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_ptr_no_std.rs?ref=6ba2cda79a33522d89c7c89f814f2788496616b9", "patch": "@@ -0,0 +1,21 @@\n+// run-rustfix\n+\n+#![feature(lang_items, start, libc)]\n+#![no_std]\n+#![deny(clippy::zero_ptr)]\n+\n+#[start]\n+fn main(_argc: isize, _argv: *const *const u8) -> isize {\n+    let _ = 0 as *const usize;\n+    let _ = 0 as *mut f64;\n+    let _: *const u8 = 0 as *const _;\n+    0\n+}\n+\n+#[panic_handler]\n+fn panic(_info: &core::panic::PanicInfo) -> ! {\n+    loop {}\n+}\n+\n+#[lang = \"eh_personality\"]\n+extern \"C\" fn eh_personality() {}"}, {"sha": "d92bb4a6528dbb7afca9c2441db814366da63890", "filename": "tests/ui/zero_ptr_no_std.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6ba2cda79a33522d89c7c89f814f2788496616b9/tests%2Fui%2Fzero_ptr_no_std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ba2cda79a33522d89c7c89f814f2788496616b9/tests%2Fui%2Fzero_ptr_no_std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_ptr_no_std.stderr?ref=6ba2cda79a33522d89c7c89f814f2788496616b9", "patch": "@@ -0,0 +1,26 @@\n+error: `0 as *const _` detected\n+  --> $DIR/zero_ptr_no_std.rs:9:13\n+   |\n+LL |     let _ = 0 as *const usize;\n+   |             ^^^^^^^^^^^^^^^^^ help: try: `core::ptr::null::<usize>()`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/zero_ptr_no_std.rs:5:9\n+   |\n+LL | #![deny(clippy::zero_ptr)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: `0 as *mut _` detected\n+  --> $DIR/zero_ptr_no_std.rs:10:13\n+   |\n+LL |     let _ = 0 as *mut f64;\n+   |             ^^^^^^^^^^^^^ help: try: `core::ptr::null_mut::<f64>()`\n+\n+error: `0 as *const _` detected\n+  --> $DIR/zero_ptr_no_std.rs:11:24\n+   |\n+LL |     let _: *const u8 = 0 as *const _;\n+   |                        ^^^^^^^^^^^^^ help: try: `core::ptr::null()`\n+\n+error: aborting due to 3 previous errors\n+"}]}