{"sha": "54f16b818b58f6d6e81891b041fc751986e75155", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0ZjE2YjgxOGI1OGY2ZDZlODE4OTFiMDQxZmM3NTE5ODZlNzUxNTU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-24T20:26:16Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-25T23:39:00Z"}, "message": "rustc: Remove support for int/uint\n\nThis commit removes all parsing, resolve, and compiler support for the old and\nlong-deprecated int/uint types.", "tree": {"sha": "8010d72c9d5baa5420b91215ac93b4ff49523f95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8010d72c9d5baa5420b91215ac93b4ff49523f95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54f16b818b58f6d6e81891b041fc751986e75155", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54f16b818b58f6d6e81891b041fc751986e75155", "html_url": "https://github.com/rust-lang/rust/commit/54f16b818b58f6d6e81891b041fc751986e75155", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54f16b818b58f6d6e81891b041fc751986e75155/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a923278c6278c63468d74772c58dbf788e88f58c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a923278c6278c63468d74772c58dbf788e88f58c", "html_url": "https://github.com/rust-lang/rust/commit/a923278c6278c63468d74772c58dbf788e88f58c"}], "stats": {"total": 237, "additions": 71, "deletions": 166}, "files": [{"sha": "7a2df4966283a6d7339d3040e2e312fa927a32c5", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=54f16b818b58f6d6e81891b041fc751986e75155", "patch": "@@ -64,7 +64,7 @@ pub fn enc_ty<'a, 'tcx>(w: &mut Encoder, cx: &ctxt<'a, 'tcx>, t: Ty<'tcx>) {\n         ty::ty_char => mywrite!(w, \"c\"),\n         ty::ty_int(t) => {\n             match t {\n-                ast::TyIs(_) => mywrite!(w, \"is\"),\n+                ast::TyIs => mywrite!(w, \"is\"),\n                 ast::TyI8 => mywrite!(w, \"MB\"),\n                 ast::TyI16 => mywrite!(w, \"MW\"),\n                 ast::TyI32 => mywrite!(w, \"ML\"),\n@@ -73,7 +73,7 @@ pub fn enc_ty<'a, 'tcx>(w: &mut Encoder, cx: &ctxt<'a, 'tcx>, t: Ty<'tcx>) {\n         }\n         ty::ty_uint(t) => {\n             match t {\n-                ast::TyUs(_) => mywrite!(w, \"us\"),\n+                ast::TyUs => mywrite!(w, \"us\"),\n                 ast::TyU8 => mywrite!(w, \"Mb\"),\n                 ast::TyU16 => mywrite!(w, \"Mw\"),\n                 ast::TyU32 => mywrite!(w, \"Ml\"),"}, {"sha": "8fff93c6b7ce29ae084a3cf438ef02ac320aeef5", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=54f16b818b58f6d6e81891b041fc751986e75155", "patch": "@@ -396,7 +396,7 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n                     Some(&ty::ty_int(int_ty)) => int_ty,\n                     _ => return false\n                 };\n-                let int_ty = if let ast::TyIs(_) = int_ty {\n+                let int_ty = if let ast::TyIs = int_ty {\n                     tcx.sess.target.int_type\n                 } else {\n                     int_ty\n@@ -406,7 +406,7 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n                     ast::TyI16 =>  (a as i16) == i16::MIN,\n                     ast::TyI32 =>  (a as i32) == i32::MIN,\n                     ast::TyI64 =>  (a as i64) == i64::MIN,\n-                    ast::TyIs(_) => unreachable!()\n+                    ast::TyIs => unreachable!()\n                 }\n             };\n             match op.node {\n@@ -628,12 +628,12 @@ fn cast_const(val: const_val, ty: Ty) -> Result<const_val, ErrKind> {\n     }\n \n     define_casts!{\n-        ty::ty_int(ast::TyIs(_)) => (int, const_int, i64),\n+        ty::ty_int(ast::TyIs) => (int, const_int, i64),\n         ty::ty_int(ast::TyI8) => (i8, const_int, i64),\n         ty::ty_int(ast::TyI16) => (i16, const_int, i64),\n         ty::ty_int(ast::TyI32) => (i32, const_int, i64),\n         ty::ty_int(ast::TyI64) => (i64, const_int, i64),\n-        ty::ty_uint(ast::TyUs(_)) => (uint, const_uint, u64),\n+        ty::ty_uint(ast::TyUs) => (uint, const_uint, u64),\n         ty::ty_uint(ast::TyU8) => (u8, const_uint, u64),\n         ty::ty_uint(ast::TyU16) => (u16, const_uint, u64),\n         ty::ty_uint(ast::TyU32) => (u32, const_uint, u64),"}, {"sha": "f3a23fba6b56b4d795f0c912cb13c80017196ab2", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=54f16b818b58f6d6e81891b041fc751986e75155", "patch": "@@ -2545,12 +2545,12 @@ impl<'tcx> CommonTypes<'tcx> {\n             bool: intern_ty(arena, interner, ty_bool),\n             char: intern_ty(arena, interner, ty_char),\n             err: intern_ty(arena, interner, ty_err),\n-            int: intern_ty(arena, interner, ty_int(ast::TyIs(false))),\n+            int: intern_ty(arena, interner, ty_int(ast::TyIs)),\n             i8: intern_ty(arena, interner, ty_int(ast::TyI8)),\n             i16: intern_ty(arena, interner, ty_int(ast::TyI16)),\n             i32: intern_ty(arena, interner, ty_int(ast::TyI32)),\n             i64: intern_ty(arena, interner, ty_int(ast::TyI64)),\n-            uint: intern_ty(arena, interner, ty_uint(ast::TyUs(false))),\n+            uint: intern_ty(arena, interner, ty_uint(ast::TyUs)),\n             u8: intern_ty(arena, interner, ty_uint(ast::TyU8)),\n             u16: intern_ty(arena, interner, ty_uint(ast::TyU16)),\n             u32: intern_ty(arena, interner, ty_uint(ast::TyU32)),\n@@ -2935,7 +2935,7 @@ impl FlagComputation {\n \n pub fn mk_mach_int<'tcx>(tcx: &ctxt<'tcx>, tm: ast::IntTy) -> Ty<'tcx> {\n     match tm {\n-        ast::TyIs(_)   => tcx.types.int,\n+        ast::TyIs   => tcx.types.int,\n         ast::TyI8   => tcx.types.i8,\n         ast::TyI16  => tcx.types.i16,\n         ast::TyI32  => tcx.types.i32,\n@@ -2945,7 +2945,7 @@ pub fn mk_mach_int<'tcx>(tcx: &ctxt<'tcx>, tm: ast::IntTy) -> Ty<'tcx> {\n \n pub fn mk_mach_uint<'tcx>(tcx: &ctxt<'tcx>, tm: ast::UintTy) -> Ty<'tcx> {\n     match tm {\n-        ast::TyUs(_)   => tcx.types.uint,\n+        ast::TyUs   => tcx.types.uint,\n         ast::TyU8   => tcx.types.u8,\n         ast::TyU16  => tcx.types.u16,\n         ast::TyU32  => tcx.types.u32,\n@@ -3612,7 +3612,7 @@ pub fn type_contents<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> TypeContents {\n \n         let result = match ty.sty {\n             // uint and int are ffi-unsafe\n-            ty_uint(ast::TyUs(_)) | ty_int(ast::TyIs(_)) => {\n+            ty_uint(ast::TyUs) | ty_int(ast::TyIs) => {\n                 TC::ReachesFfiUnsafe\n             }\n \n@@ -4175,7 +4175,7 @@ pub fn type_is_fresh(ty: Ty) -> bool {\n \n pub fn type_is_uint(ty: Ty) -> bool {\n     match ty.sty {\n-      ty_infer(IntVar(_)) | ty_uint(ast::TyUs(_)) => true,\n+      ty_infer(IntVar(_)) | ty_uint(ast::TyUs) => true,\n       _ => false\n     }\n }\n@@ -4221,7 +4221,7 @@ pub fn type_is_signed(ty: Ty) -> bool {\n \n pub fn type_is_machine(ty: Ty) -> bool {\n     match ty.sty {\n-        ty_int(ast::TyIs(_)) | ty_uint(ast::TyUs(_)) => false,\n+        ty_int(ast::TyIs) | ty_uint(ast::TyUs) => false,\n         ty_int(..) | ty_uint(..) | ty_float(..) => true,\n         _ => false\n     }"}, {"sha": "dc06bb96152e9a0c0528bb3d9580645452747cc4", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=54f16b818b58f6d6e81891b041fc751986e75155", "patch": "@@ -501,8 +501,7 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n         let features =\n             syntax::feature_gate::check_crate(sess.codemap(),\n                                               &sess.parse_sess.span_diagnostic,\n-                                              &krate,\n-                                              true);\n+                                              &krate);\n         *sess.features.borrow_mut() = features;\n         sess.abort_if_errors();\n     });\n@@ -532,8 +531,7 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n         let features =\n             syntax::feature_gate::check_crate(sess.codemap(),\n                                               &sess.parse_sess.span_diagnostic,\n-                                              &krate,\n-                                              false);\n+                                              &krate);\n         *sess.features.borrow_mut() = features;\n         sess.abort_if_errors();\n     });"}, {"sha": "df4b74d9b85846864f3762640e71318c6cde1790", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=54f16b818b58f6d6e81891b041fc751986e75155", "patch": "@@ -199,7 +199,7 @@ impl LintPass for TypeLimits {\n                         match lit.node {\n                             ast::LitInt(v, ast::SignedIntLit(_, ast::Plus)) |\n                             ast::LitInt(v, ast::UnsuffixedIntLit(ast::Plus)) => {\n-                                let int_type = if let ast::TyIs(_) = t {\n+                                let int_type = if let ast::TyIs = t {\n                                     cx.sess().target.int_type\n                                 } else {\n                                     t\n@@ -218,7 +218,7 @@ impl LintPass for TypeLimits {\n                         };\n                     },\n                     ty::ty_uint(t) => {\n-                        let uint_type = if let ast::TyUs(_) = t {\n+                        let uint_type = if let ast::TyUs = t {\n                             cx.sess().target.uint_type\n                         } else {\n                             t\n@@ -283,7 +283,7 @@ impl LintPass for TypeLimits {\n         // warnings are consistent between 32- and 64-bit platforms\n         fn int_ty_range(int_ty: ast::IntTy) -> (i64, i64) {\n             match int_ty {\n-                ast::TyIs(_) => (i64::MIN,        i64::MAX),\n+                ast::TyIs => (i64::MIN,        i64::MAX),\n                 ast::TyI8 =>    (i8::MIN  as i64, i8::MAX  as i64),\n                 ast::TyI16 =>   (i16::MIN as i64, i16::MAX as i64),\n                 ast::TyI32 =>   (i32::MIN as i64, i32::MAX as i64),\n@@ -293,7 +293,7 @@ impl LintPass for TypeLimits {\n \n         fn uint_ty_range(uint_ty: ast::UintTy) -> (u64, u64) {\n             match uint_ty {\n-                ast::TyUs(_) => (u64::MIN,         u64::MAX),\n+                ast::TyUs => (u64::MIN,         u64::MAX),\n                 ast::TyU8 =>    (u8::MIN   as u64, u8::MAX   as u64),\n                 ast::TyU16 =>   (u16::MIN  as u64, u16::MAX  as u64),\n                 ast::TyU32 =>   (u32::MIN  as u64, u32::MAX  as u64),\n@@ -310,7 +310,7 @@ impl LintPass for TypeLimits {\n \n         fn int_ty_bits(int_ty: ast::IntTy, target_int_ty: ast::IntTy) -> u64 {\n             match int_ty {\n-                ast::TyIs(_) => int_ty_bits(target_int_ty, target_int_ty),\n+                ast::TyIs => int_ty_bits(target_int_ty, target_int_ty),\n                 ast::TyI8 =>    i8::BITS  as u64,\n                 ast::TyI16 =>   i16::BITS as u64,\n                 ast::TyI32 =>   i32::BITS as u64,\n@@ -320,7 +320,7 @@ impl LintPass for TypeLimits {\n \n         fn uint_ty_bits(uint_ty: ast::UintTy, target_uint_ty: ast::UintTy) -> u64 {\n             match uint_ty {\n-                ast::TyUs(_) => uint_ty_bits(target_uint_ty, target_uint_ty),\n+                ast::TyUs => uint_ty_bits(target_uint_ty, target_uint_ty),\n                 ast::TyU8 =>    u8::BITS  as u64,\n                 ast::TyU16 =>   u16::BITS as u64,\n                 ast::TyU32 =>   u32::BITS as u64,\n@@ -395,12 +395,12 @@ struct ImproperCTypesVisitor<'a, 'tcx: 'a> {\n impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n     fn check_def(&mut self, sp: Span, id: ast::NodeId) {\n         match self.cx.tcx.def_map.borrow().get(&id).unwrap().full_def() {\n-            def::DefPrimTy(ast::TyInt(ast::TyIs(_))) => {\n+            def::DefPrimTy(ast::TyInt(ast::TyIs)) => {\n                 self.cx.span_lint(IMPROPER_CTYPES, sp,\n                                   \"found rust type `isize` in foreign module, while \\\n                                    libc::c_int or libc::c_long should be used\");\n             }\n-            def::DefPrimTy(ast::TyUint(ast::TyUs(_))) => {\n+            def::DefPrimTy(ast::TyUint(ast::TyUs)) => {\n                 self.cx.span_lint(IMPROPER_CTYPES, sp,\n                                   \"found rust type `usize` in foreign module, while \\\n                                    libc::c_uint or libc::c_ulong should be used\");"}, {"sha": "1d445344b8d870b941d64e5c1d2238a23c8c72c2", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=54f16b818b58f6d6e81891b041fc751986e75155", "patch": "@@ -744,15 +744,13 @@ impl PrimitiveTypeTable {\n         table.intern(\"char\",    TyChar);\n         table.intern(\"f32\",     TyFloat(TyF32));\n         table.intern(\"f64\",     TyFloat(TyF64));\n-        table.intern(\"int\",     TyInt(TyIs(true)));\n-        table.intern(\"isize\",   TyInt(TyIs(false)));\n+        table.intern(\"isize\",   TyInt(TyIs));\n         table.intern(\"i8\",      TyInt(TyI8));\n         table.intern(\"i16\",     TyInt(TyI16));\n         table.intern(\"i32\",     TyInt(TyI32));\n         table.intern(\"i64\",     TyInt(TyI64));\n         table.intern(\"str\",     TyStr);\n-        table.intern(\"uint\",    TyUint(TyUs(true)));\n-        table.intern(\"usize\",   TyUint(TyUs(false)));\n+        table.intern(\"usize\",   TyUint(TyUs));\n         table.intern(\"u8\",      TyUint(TyU8));\n         table.intern(\"u16\",     TyUint(TyU16));\n         table.intern(\"u32\",     TyUint(TyU32));"}, {"sha": "49bc5846e30ad43ca921c2591e406bc15ba0720e", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=54f16b818b58f6d6e81891b041fc751986e75155", "patch": "@@ -847,8 +847,8 @@ pub fn fail_if_zero_or_overflows<'blk, 'tcx>(\n             ty::ty_int(t) => {\n                 let llty = Type::int_from_ty(cx.ccx(), t);\n                 let min = match t {\n-                    ast::TyIs(_) if llty == Type::i32(cx.ccx()) => i32::MIN as u64,\n-                    ast::TyIs(_) => i64::MIN as u64,\n+                    ast::TyIs if llty == Type::i32(cx.ccx()) => i32::MIN as u64,\n+                    ast::TyIs => i64::MIN as u64,\n                     ast::TyI8 => i8::MIN as u64,\n                     ast::TyI16 => i16::MIN as u64,\n                     ast::TyI32 => i32::MIN as u64,"}, {"sha": "e0dd1cf8389baae033ef4faaa13c8132995d35aa", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=54f16b818b58f6d6e81891b041fc751986e75155", "patch": "@@ -1814,14 +1814,14 @@ fn basic_type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         ty::ty_bool => (\"bool\".to_string(), DW_ATE_boolean),\n         ty::ty_char => (\"char\".to_string(), DW_ATE_unsigned_char),\n         ty::ty_int(int_ty) => match int_ty {\n-            ast::TyIs(_) => (\"isize\".to_string(), DW_ATE_signed),\n+            ast::TyIs => (\"isize\".to_string(), DW_ATE_signed),\n             ast::TyI8 => (\"i8\".to_string(), DW_ATE_signed),\n             ast::TyI16 => (\"i16\".to_string(), DW_ATE_signed),\n             ast::TyI32 => (\"i32\".to_string(), DW_ATE_signed),\n             ast::TyI64 => (\"i64\".to_string(), DW_ATE_signed)\n         },\n         ty::ty_uint(uint_ty) => match uint_ty {\n-            ast::TyUs(_) => (\"usize\".to_string(), DW_ATE_unsigned),\n+            ast::TyUs => (\"usize\".to_string(), DW_ATE_unsigned),\n             ast::TyU8 => (\"u8\".to_string(), DW_ATE_unsigned),\n             ast::TyU16 => (\"u16\".to_string(), DW_ATE_unsigned),\n             ast::TyU32 => (\"u32\".to_string(), DW_ATE_unsigned),\n@@ -3745,12 +3745,12 @@ fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         ty::ty_bool              => output.push_str(\"bool\"),\n         ty::ty_char              => output.push_str(\"char\"),\n         ty::ty_str               => output.push_str(\"str\"),\n-        ty::ty_int(ast::TyIs(_))     => output.push_str(\"isize\"),\n+        ty::ty_int(ast::TyIs)     => output.push_str(\"isize\"),\n         ty::ty_int(ast::TyI8)    => output.push_str(\"i8\"),\n         ty::ty_int(ast::TyI16)   => output.push_str(\"i16\"),\n         ty::ty_int(ast::TyI32)   => output.push_str(\"i32\"),\n         ty::ty_int(ast::TyI64)   => output.push_str(\"i64\"),\n-        ty::ty_uint(ast::TyUs(_))    => output.push_str(\"usize\"),\n+        ty::ty_uint(ast::TyUs)    => output.push_str(\"usize\"),\n         ty::ty_uint(ast::TyU8)   => output.push_str(\"u8\"),\n         ty::ty_uint(ast::TyU16)  => output.push_str(\"u16\"),\n         ty::ty_uint(ast::TyU32)  => output.push_str(\"u32\"),"}, {"sha": "c5a22c0da9de9e3c8d67db75442324735d6c8b9d", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=54f16b818b58f6d6e81891b041fc751986e75155", "patch": "@@ -2426,12 +2426,12 @@ impl OverflowOpViaIntrinsic {\n         use middle::ty::{ty_int, ty_uint};\n \n         let new_sty = match ty.sty {\n-            ty_int(TyIs(_)) => match &tcx.sess.target.target.target_pointer_width[..] {\n+            ty_int(TyIs) => match &tcx.sess.target.target.target_pointer_width[..] {\n                 \"32\" => ty_int(TyI32),\n                 \"64\" => ty_int(TyI64),\n                 _ => panic!(\"unsupported target word size\")\n             },\n-            ty_uint(TyUs(_)) => match &tcx.sess.target.target.target_pointer_width[..] {\n+            ty_uint(TyUs) => match &tcx.sess.target.target.target_pointer_width[..] {\n                 \"32\" => ty_uint(TyU32),\n                 \"64\" => ty_uint(TyU64),\n                 _ => panic!(\"unsupported target word size\")"}, {"sha": "17c756a33f2910a4997f73822225e9df7f6b5320", "filename": "src/librustc_trans/trans/type_.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs?ref=54f16b818b58f6d6e81891b041fc751986e75155", "patch": "@@ -118,7 +118,7 @@ impl Type {\n \n     pub fn int_from_ty(ccx: &CrateContext, t: ast::IntTy) -> Type {\n         match t {\n-            ast::TyIs(_) => ccx.int_type(),\n+            ast::TyIs => ccx.int_type(),\n             ast::TyI8 => Type::i8(ccx),\n             ast::TyI16 => Type::i16(ccx),\n             ast::TyI32 => Type::i32(ccx),\n@@ -128,7 +128,7 @@ impl Type {\n \n     pub fn uint_from_ty(ccx: &CrateContext, t: ast::UintTy) -> Type {\n         match t {\n-            ast::TyUs(_) => ccx.int_type(),\n+            ast::TyUs => ccx.int_type(),\n             ast::TyU8 => Type::i8(ccx),\n             ast::TyU16 => Type::i16(ccx),\n             ast::TyU32 => Type::i32(ccx),"}, {"sha": "99dc9ceacec881cf44d0a15130d73466bd3f7c4c", "filename": "src/librustc_trans/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs?ref=54f16b818b58f6d6e81891b041fc751986e75155", "patch": "@@ -361,7 +361,7 @@ pub fn in_memory_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) ->\n                   let unsized_part = unsized_part_of_type(cx.tcx(), ty);\n                   let info_ty = match unsized_part.sty {\n                       ty::ty_str | ty::ty_vec(..) => {\n-                          Type::uint_from_ty(cx, ast::TyUs(false))\n+                          Type::uint_from_ty(cx, ast::TyUs)\n                       }\n                       ty::ty_trait(_) => Type::vtable_ptr(cx),\n                       _ => panic!(\"Unexpected type returned from \\"}, {"sha": "49406d3ae33ae96b0e4b68ec047d406bb7b7ede3", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=54f16b818b58f6d6e81891b041fc751986e75155", "patch": "@@ -325,7 +325,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n                 let lang_def_id = self.tcx().lang_items.i64_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::ty_int(ast::TyIs(_)) => {\n+            ty::ty_int(ast::TyIs) => {\n                 let lang_def_id = self.tcx().lang_items.isize_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n@@ -345,7 +345,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n                 let lang_def_id = self.tcx().lang_items.u64_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::ty_uint(ast::TyUs(_)) => {\n+            ty::ty_uint(ast::TyUs) => {\n                 let lang_def_id = self.tcx().lang_items.usize_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }"}, {"sha": "aef7557a906c661058a010c6ab13768ffece1594", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=54f16b818b58f6d6e81891b041fc751986e75155", "patch": "@@ -2186,7 +2186,7 @@ fn try_index_step<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n \n     // First, try built-in indexing.\n     match (ty::index(adjusted_ty), &index_ty.sty) {\n-        (Some(ty), &ty::ty_uint(ast::TyUs(_))) | (Some(ty), &ty::ty_infer(ty::IntVar(_))) => {\n+        (Some(ty), &ty::ty_uint(ast::TyUs)) | (Some(ty), &ty::ty_infer(ty::IntVar(_))) => {\n             debug!(\"try_index_step: success, using built-in indexing\");\n             fcx.write_adjustment(base_expr.id, base_expr.span, ty::AdjustDerefRef(adjustment));\n             return Some((tcx.types.uint, ty));\n@@ -4602,7 +4602,7 @@ pub fn check_enum_variants<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n                 ast::TyU16 => disr as u16 as Disr == disr,\n                 ast::TyU32 => disr as u32 as Disr == disr,\n                 ast::TyU64 => disr as u64 as Disr == disr,\n-                ast::TyUs(_) => uint_in_range(ccx, ccx.tcx.sess.target.uint_type, disr)\n+                ast::TyUs => uint_in_range(ccx, ccx.tcx.sess.target.uint_type, disr)\n             }\n         }\n         fn int_in_range(ccx: &CrateCtxt, ty: ast::IntTy, disr: ty::Disr) -> bool {\n@@ -4611,7 +4611,7 @@ pub fn check_enum_variants<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n                 ast::TyI16 => disr as i16 as Disr == disr,\n                 ast::TyI32 => disr as i32 as Disr == disr,\n                 ast::TyI64 => disr as i64 as Disr == disr,\n-                ast::TyIs(_) => int_in_range(ccx, ccx.tcx.sess.target.int_type, disr)\n+                ast::TyIs => int_in_range(ccx, ccx.tcx.sess.target.int_type, disr)\n             }\n         }\n         match ty {"}, {"sha": "7b76f3681c16330bcef1e1bae46ab7679427cb6c", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=54f16b818b58f6d6e81891b041fc751986e75155", "patch": "@@ -143,7 +143,7 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n                                                   \"i64\",\n                                                   item.span);\n                     }\n-                    ty::ty_int(ast::TyIs(_)) => {\n+                    ty::ty_int(ast::TyIs) => {\n                         self.check_primitive_impl(def_id,\n                                                   self.tcx.lang_items.isize_impl(),\n                                                   \"isize\",\n@@ -178,7 +178,7 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n                                                   \"u64\",\n                                                   item.span);\n                     }\n-                    ty::ty_uint(ast::TyUs(_)) => {\n+                    ty::ty_uint(ast::TyUs) => {\n                         self.check_primitive_impl(def_id,\n                                                   self.tcx.lang_items.usize_impl(),\n                                                   \"usize\","}, {"sha": "f815e8e784304e976ccde562b214db8cce8b188c", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 6, "deletions": 36, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=54f16b818b58f6d6e81891b041fc751986e75155", "patch": "@@ -1249,29 +1249,15 @@ pub enum ImplItem_ {\n     MacImplItem(Mac),\n }\n \n-#[derive(Clone, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n pub enum IntTy {\n-    TyIs(bool /* is this deprecated `int`? */),\n+    TyIs,\n     TyI8,\n     TyI16,\n     TyI32,\n     TyI64,\n }\n \n-impl PartialEq for IntTy {\n-    fn eq(&self, other: &IntTy) -> bool {\n-        match (*self, *other) {\n-            // true/false need to compare the same, so this can't be derived\n-            (TyIs(_), TyIs(_)) |\n-            (TyI8, TyI8) |\n-            (TyI16, TyI16) |\n-            (TyI32, TyI32) |\n-            (TyI64, TyI64) => true,\n-            _ => false\n-        }\n-    }\n-}\n-\n impl fmt::Debug for IntTy {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Display::fmt(self, f)\n@@ -1287,41 +1273,25 @@ impl fmt::Display for IntTy {\n impl IntTy {\n     pub fn suffix_len(&self) -> usize {\n         match *self {\n-            TyIs(true) /* i */ => 1,\n-            TyIs(false) /* is */ | TyI8 => 2,\n+            TyIs | TyI8 => 2,\n             TyI16 | TyI32 | TyI64  => 3,\n         }\n     }\n }\n \n-#[derive(Clone, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n pub enum UintTy {\n-    TyUs(bool /* is this deprecated uint? */),\n+    TyUs,\n     TyU8,\n     TyU16,\n     TyU32,\n     TyU64,\n }\n \n-impl PartialEq for UintTy {\n-    fn eq(&self, other: &UintTy) -> bool {\n-        match (*self, *other) {\n-            // true/false need to compare the same, so this can't be derived\n-            (TyUs(_), TyUs(_)) |\n-            (TyU8, TyU8) |\n-            (TyU16, TyU16) |\n-            (TyU32, TyU32) |\n-            (TyU64, TyU64) => true,\n-            _ => false\n-        }\n-    }\n-}\n-\n impl UintTy {\n     pub fn suffix_len(&self) -> usize {\n         match *self {\n-            TyUs(true) /* u */ => 1,\n-            TyUs(false) /* us */ | TyU8 => 2,\n+            TyUs | TyU8 => 2,\n             TyU16 | TyU32 | TyU64  => 3,\n         }\n     }"}, {"sha": "b7aa2aebbfac16fee39f6edbf829ac3d3cfa12d6", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=54f16b818b58f6d6e81891b041fc751986e75155", "patch": "@@ -140,7 +140,7 @@ pub fn is_path(e: P<Expr>) -> bool {\n /// We want to avoid \"45int\" and \"-3int\" in favor of \"45\" and \"-3\"\n pub fn int_ty_to_string(t: IntTy, val: Option<i64>) -> String {\n     let s = match t {\n-        TyIs(_) => \"isize\",\n+        TyIs => \"isize\",\n         TyI8 => \"i8\",\n         TyI16 => \"i16\",\n         TyI32 => \"i32\",\n@@ -160,7 +160,7 @@ pub fn int_ty_max(t: IntTy) -> u64 {\n     match t {\n         TyI8 => 0x80,\n         TyI16 => 0x8000,\n-        TyIs(_) | TyI32 => 0x80000000, // actually ni about TyIs\n+        TyIs | TyI32 => 0x80000000, // actually ni about TyIs\n         TyI64 => 0x8000000000000000\n     }\n }\n@@ -169,7 +169,7 @@ pub fn int_ty_max(t: IntTy) -> u64 {\n /// We want to avoid \"42u\" in favor of \"42us\". \"42uint\" is right out.\n pub fn uint_ty_to_string(t: UintTy, val: Option<u64>) -> String {\n     let s = match t {\n-        TyUs(_) => \"usize\",\n+        TyUs => \"usize\",\n         TyU8 => \"u8\",\n         TyU16 => \"u16\",\n         TyU32 => \"u32\",\n@@ -186,7 +186,7 @@ pub fn uint_ty_max(t: UintTy) -> u64 {\n     match t {\n         TyU8 => 0xff,\n         TyU16 => 0xffff,\n-        TyUs(_) | TyU32 => 0xffffffff, // actually ni about TyUs\n+        TyUs | TyU32 => 0xffffffff, // actually ni about TyUs\n         TyU64 => 0xffffffffffffffff\n     }\n }"}, {"sha": "2d8484e95bbc93bbae1c9763843e3bd6986385d1", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=54f16b818b58f6d6e81891b041fc751986e75155", "patch": "@@ -565,10 +565,8 @@ fn int_type_of_word(s: &str) -> Option<IntType> {\n         \"u32\" => Some(UnsignedInt(ast::TyU32)),\n         \"i64\" => Some(SignedInt(ast::TyI64)),\n         \"u64\" => Some(UnsignedInt(ast::TyU64)),\n-        \"int\" => Some(SignedInt(ast::TyIs(true))),\n-        \"uint\" => Some(UnsignedInt(ast::TyUs(true))),\n-        \"isize\" => Some(SignedInt(ast::TyIs(false))),\n-        \"usize\" => Some(UnsignedInt(ast::TyUs(false))),\n+        \"isize\" => Some(SignedInt(ast::TyIs)),\n+        \"usize\" => Some(UnsignedInt(ast::TyUs)),\n         _ => None\n     }\n }\n@@ -612,7 +610,7 @@ impl IntType {\n             SignedInt(ast::TyI16) | UnsignedInt(ast::TyU16) |\n             SignedInt(ast::TyI32) | UnsignedInt(ast::TyU32) |\n             SignedInt(ast::TyI64) | UnsignedInt(ast::TyU64) => true,\n-            SignedInt(ast::TyIs(_)) | UnsignedInt(ast::TyUs(_)) => false\n+            SignedInt(ast::TyIs) | UnsignedInt(ast::TyUs) => false\n         }\n     }\n }"}, {"sha": "5d0853761eec8321741d3dcc461559324a66e806", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=54f16b818b58f6d6e81891b041fc751986e75155", "patch": "@@ -696,10 +696,10 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.expr(sp, ast::ExprLit(P(respan(sp, lit))))\n     }\n     fn expr_usize(&self, span: Span, i: usize) -> P<ast::Expr> {\n-        self.expr_lit(span, ast::LitInt(i as u64, ast::UnsignedIntLit(ast::TyUs(false))))\n+        self.expr_lit(span, ast::LitInt(i as u64, ast::UnsignedIntLit(ast::TyUs)))\n     }\n     fn expr_int(&self, sp: Span, i: isize) -> P<ast::Expr> {\n-        self.expr_lit(sp, ast::LitInt(i as u64, ast::SignedIntLit(ast::TyIs(false),\n+        self.expr_lit(sp, ast::LitInt(i as u64, ast::SignedIntLit(ast::TyIs,\n                                                                   ast::Sign::new(i))))\n     }\n     fn expr_u32(&self, sp: Span, u: u32) -> P<ast::Expr> {"}, {"sha": "59c5bada41791719d2be0a4f6a417febd4b380e0", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=54f16b818b58f6d6e81891b041fc751986e75155", "patch": "@@ -1051,7 +1051,7 @@ impl<'a> MethodDef<'a> {\n             let arms: Vec<ast::Arm> = variants.iter().enumerate()\n                 .map(|(index, variant)| {\n                     let pat = variant_to_pat(cx, sp, type_ident, &**variant);\n-                    let lit = ast::LitInt(index as u64, ast::UnsignedIntLit(ast::TyUs(false)));\n+                    let lit = ast::LitInt(index as u64, ast::UnsignedIntLit(ast::TyUs));\n                     cx.arm(sp, vec![pat], cx.expr_lit(sp, lit))\n                 }).collect();\n "}, {"sha": "f734d0c6132fba2d8e6420c836c9d251f89a2786", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=54f16b818b58f6d6e81891b041fc751986e75155", "patch": "@@ -275,13 +275,13 @@ pub mod rt {\n         );\n     }\n \n-    impl_to_source_int! { signed, int, ast::TyIs(false) }\n+    impl_to_source_int! { signed, isize, ast::TyIs }\n     impl_to_source_int! { signed, i8,  ast::TyI8 }\n     impl_to_source_int! { signed, i16, ast::TyI16 }\n     impl_to_source_int! { signed, i32, ast::TyI32 }\n     impl_to_source_int! { signed, i64, ast::TyI64 }\n \n-    impl_to_source_int! { unsigned, uint, ast::TyUs(false) }\n+    impl_to_source_int! { unsigned, usize, ast::TyUs }\n     impl_to_source_int! { unsigned, u8,   ast::TyU8 }\n     impl_to_source_int! { unsigned, u16,  ast::TyU16 }\n     impl_to_source_int! { unsigned, u32,  ast::TyU32 }"}, {"sha": "5e80966a6177b7ca1f794758495d341966ad9822", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 65, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=54f16b818b58f6d6e81891b041fc751986e75155", "patch": "@@ -108,9 +108,6 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Status)] = &[\n     // OIBIT specific features\n     (\"optin_builtin_traits\", \"1.0.0\", Active),\n \n-    // int and uint are now deprecated\n-    (\"int_uint\", \"1.0.0\", Active),\n-\n     // macro reexport needs more discussion and stabilization\n     (\"macro_reexport\", \"1.0.0\", Active),\n \n@@ -360,7 +357,6 @@ struct Context<'a> {\n     features: Vec<&'static str>,\n     span_handler: &'a SpanHandler,\n     cm: &'a CodeMap,\n-    do_warnings: bool,\n }\n \n impl<'a> Context<'a> {\n@@ -371,12 +367,6 @@ impl<'a> Context<'a> {\n             emit_feature_err(self.span_handler, feature, span, explain);\n         }\n     }\n-\n-    fn warn_feature(&self, feature: &str, span: Span, explain: &str) {\n-        if !self.has_feature(feature) && self.do_warnings {\n-            emit_feature_warn(self.span_handler, feature, span, explain);\n-        }\n-    }\n     fn has_feature(&self, feature: &str) -> bool {\n         self.features.iter().any(|&n| n == feature)\n     }\n@@ -624,35 +614,6 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n         visit::walk_foreign_item(self, i)\n     }\n \n-    fn visit_ty(&mut self, t: &ast::Ty) {\n-        match t.node {\n-            ast::TyPath(None, ref p) => {\n-                match &*p.segments {\n-\n-                    [ast::PathSegment { identifier, .. }] => {\n-                        let name = token::get_ident(identifier);\n-                        let msg = if name == \"int\" {\n-                            Some(\"the `int` type is deprecated; \\\n-                                  use `isize` or a fixed-sized integer\")\n-                        } else if name == \"uint\" {\n-                            Some(\"the `uint` type is deprecated; \\\n-                                  use `usize` or a fixed-sized integer\")\n-                        } else {\n-                            None\n-                        };\n-\n-                        if let Some(msg) = msg {\n-                            self.context.warn_feature(\"int_uint\", t.span, msg)\n-                        }\n-                    }\n-                    _ => {}\n-                }\n-            }\n-            _ => {}\n-        }\n-        visit::walk_ty(self, t);\n-    }\n-\n     fn visit_expr(&mut self, e: &ast::Expr) {\n         match e.node {\n             ast::ExprBox(..) | ast::ExprUnary(ast::UnOp::UnUniq, _) => {\n@@ -661,25 +622,6 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                                   \"box expression syntax is experimental; \\\n                                    you can call `Box::new` instead.\");\n             }\n-            ast::ExprLit(ref lit) => {\n-                match lit.node {\n-                    ast::LitInt(_, ty) => {\n-                        let msg = if let ast::SignedIntLit(ast::TyIs(true), _) = ty {\n-                            Some(\"the `i` and `is` suffixes on integers are deprecated; \\\n-                                  use `isize` or one of the fixed-sized suffixes\")\n-                        } else if let ast::UnsignedIntLit(ast::TyUs(true)) = ty {\n-                            Some(\"the `u` and `us` suffixes on integers are deprecated; \\\n-                                  use `usize` or one of the fixed-sized suffixes\")\n-                        } else {\n-                            None\n-                        };\n-                        if let Some(msg) = msg {\n-                            self.context.warn_feature(\"int_uint\", e.span, msg);\n-                        }\n-                    }\n-                    _ => {}\n-                }\n-            }\n             _ => {}\n         }\n         visit::walk_expr(self, e);\n@@ -722,16 +664,15 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n     }\n }\n \n-fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::Crate,\n-                        do_warnings: bool,\n+fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler,\n+                        krate: &ast::Crate,\n                         check: F)\n                        -> Features\n     where F: FnOnce(&mut Context, &ast::Crate)\n {\n     let mut cx = Context {\n         features: Vec::new(),\n         span_handler: span_handler,\n-        do_warnings: do_warnings,\n         cm: cm,\n     };\n \n@@ -812,14 +753,14 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::C\n \n pub fn check_crate_macros(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::Crate)\n -> Features {\n-    check_crate_inner(cm, span_handler, krate, true,\n+    check_crate_inner(cm, span_handler, krate,\n                       |ctx, krate| visit::walk_crate(&mut MacroVisitor { context: ctx }, krate))\n }\n \n-pub fn check_crate(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::Crate,\n-                   do_warnings: bool) -> Features\n+pub fn check_crate(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::Crate)\n+                   -> Features\n {\n-    check_crate_inner(cm, span_handler, krate, do_warnings,\n+    check_crate_inner(cm, span_handler, krate,\n                       |ctx, krate| visit::walk_crate(&mut PostExpansionVisitor { context: ctx },\n                                                      krate))\n }"}, {"sha": "bea42a88bf55591f51beb04f3a21d3758b9dcc52", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f16b818b58f6d6e81891b041fc751986e75155/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=54f16b818b58f6d6e81891b041fc751986e75155", "patch": "@@ -700,18 +700,18 @@ pub fn integer_lit(s: &str, suffix: Option<&str>, sd: &SpanHandler, sp: Span) ->\n     if let Some(suf) = suffix {\n         if suf.is_empty() { sd.span_bug(sp, \"found empty literal suffix in Some\")}\n         ty = match suf {\n-            \"isize\" => ast::SignedIntLit(ast::TyIs(false), ast::Plus),\n+            \"isize\" => ast::SignedIntLit(ast::TyIs, ast::Plus),\n             \"i8\"  => ast::SignedIntLit(ast::TyI8, ast::Plus),\n             \"i16\" => ast::SignedIntLit(ast::TyI16, ast::Plus),\n             \"i32\" => ast::SignedIntLit(ast::TyI32, ast::Plus),\n             \"i64\" => ast::SignedIntLit(ast::TyI64, ast::Plus),\n-            \"usize\" => ast::UnsignedIntLit(ast::TyUs(false)),\n+            \"usize\" => ast::UnsignedIntLit(ast::TyUs),\n             \"u8\"  => ast::UnsignedIntLit(ast::TyU8),\n             \"u16\" => ast::UnsignedIntLit(ast::TyU16),\n             \"u32\" => ast::UnsignedIntLit(ast::TyU32),\n             \"u64\" => ast::UnsignedIntLit(ast::TyU64),\n-            \"i\" | \"is\" => ast::SignedIntLit(ast::TyIs(true), ast::Plus),\n-            \"u\" | \"us\" => ast::UnsignedIntLit(ast::TyUs(true)),\n+            \"is\" => ast::SignedIntLit(ast::TyIs, ast::Plus),\n+            \"us\" => ast::UnsignedIntLit(ast::TyUs),\n             _ => {\n                 // i<digits> and u<digits> look like widths, so lets\n                 // give an error message along those lines"}]}