{"sha": "2c6b0e5cf7d07cee4b26732c162b5835ab5aa53b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjNmIwZTVjZjdkMDdjZWU0YjI2NzMyYzE2MmI1ODM1YWI1YWE1M2I=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-08-07T15:06:21Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-08-14T15:36:03Z"}, "message": "Label definition of captured variables in errors.", "tree": {"sha": "398b13a565cbb757179d8e21243608abe51081e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/398b13a565cbb757179d8e21243608abe51081e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c6b0e5cf7d07cee4b26732c162b5835ab5aa53b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlty9uMACgkQAXYLT59T\n8VQBRg/8Cmbiy1Y1AD44G334UROXzNh0IcT8J3swQmADRLOaBn74pjiqSFVO3VsQ\nLoCFCowuDjQyvkdki873DMSJzSZ7XEq8M/GEQ31qctKJ72yYpzAlq2CKiulXOk7G\nC1qSXLx2Lg8MlXhAZgxWzP5+39X2dJKxYnNoNmMs/UYFRwJqYwcrtzGcvVMfiiFL\n95JhVVX1uaOg6zw+9OQtruGUui6DaKsJpnVEOyLRxPQFHKx7+qtlo/ZhVtyn0L06\np+v/s9ZQV7VkbURpVqqfXVc1Re0lrA/d0zvK9fYPWhWe+T6nxnxm8FDN7+Bt6qtd\nxcxFk17wjxwErFoKs39zY6/3fJn9JR75qb7RFLH/ec7E1Bs3xE76w3YNbYzPtpVY\n87SKVAOtl0Yo2DBWprhFEBGQ2q2DUAGeWHiOgtzD3LJEiQFX+H7oApXQVawQDxde\npEWLhtVOu/sDceNgI9yatFItsDeu9SkjHknp89sB7yG83UvREC4iB+OiGWjL25PP\niA2v9wfM9oQsplV6e5q1VJyU/6/U36pWcmMk1ky0PHzn3/1A4TqTCcMhQ5jrqbjM\nSuTtG8qRVLYADqoBsESGMuRLyiHjoZadF4oVJuRzHBPARqGusOK2+NAonpaDrMlV\ndXizeCq3tjHB/LLozLWRgH1RvLM7tyAU+ZaoZhBWfVbAjjCjuAg=\n=Esr8\n-----END PGP SIGNATURE-----", "payload": "tree 398b13a565cbb757179d8e21243608abe51081e0\nparent 51b0552bd7c32cf41317e81616f1f005328a68e7\nauthor David Wood <david@davidtw.co> 1533654381 +0200\ncommitter David Wood <david@davidtw.co> 1534260963 +0200\n\nLabel definition of captured variables in errors.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c6b0e5cf7d07cee4b26732c162b5835ab5aa53b", "html_url": "https://github.com/rust-lang/rust/commit/2c6b0e5cf7d07cee4b26732c162b5835ab5aa53b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c6b0e5cf7d07cee4b26732c162b5835ab5aa53b/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51b0552bd7c32cf41317e81616f1f005328a68e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/51b0552bd7c32cf41317e81616f1f005328a68e7", "html_url": "https://github.com/rust-lang/rust/commit/51b0552bd7c32cf41317e81616f1f005328a68e7"}], "stats": {"total": 158, "additions": 95, "deletions": 63}, "files": [{"sha": "e972b02b581f78ba6dc1241e83206da1a1ad5314", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2c6b0e5cf7d07cee4b26732c162b5835ab5aa53b/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c6b0e5cf7d07cee4b26732c162b5835ab5aa53b/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=2c6b0e5cf7d07cee4b26732c162b5835ab5aa53b", "patch": "@@ -127,22 +127,24 @@ impl<'tcx> Place<'tcx> {\n     /// of a closure type.\n     pub fn is_upvar_field_projection<'cx, 'gcx>(&self, mir: &'cx Mir<'tcx>,\n                                                 tcx: &TyCtxt<'cx, 'gcx, 'tcx>) -> Option<Field> {\n-        let place = if let Place::Projection(ref proj) = self {\n+        let (place, by_ref) = if let Place::Projection(ref proj) = self {\n             if let ProjectionElem::Deref = proj.elem {\n-                &proj.base\n+                (&proj.base, true)\n             } else {\n-                self\n+                (self, false)\n             }\n         } else {\n-            self\n+            (self, false)\n         };\n \n         match place {\n             Place::Projection(ref proj) => match proj.elem {\n                 ProjectionElem::Field(field, _ty) => {\n                     let base_ty = proj.base.ty(mir, *tcx).to_ty(*tcx);\n \n-                    if  base_ty.is_closure() || base_ty.is_generator() {\n+                    if (base_ty.is_closure() || base_ty.is_generator()) &&\n+                        (!by_ref || mir.upvar_decls[field.index()].by_ref)\n+                    {\n                         Some(field)\n                     } else {\n                         None\n@@ -153,6 +155,21 @@ impl<'tcx> Place<'tcx> {\n             _ => None,\n         }\n     }\n+\n+    /// Strip the deref projections from a `Place`. For example, given `(*(*((*_1).0: &&T)))`, this\n+    /// will return `((*_1).0)`. Once stripped of any deref projections, places can then be\n+    /// checked as upvar field projections using `is_upvar_field_projection`.\n+    pub fn strip_deref_projections(&self) -> &Place<'tcx> {\n+        let mut current = self;\n+        while let Place::Projection(ref proj) = current {\n+            if let ProjectionElem::Deref = proj.elem {\n+                current = &proj.base;\n+            } else {\n+                break;\n+            }\n+        }\n+        current\n+    }\n }\n \n pub enum RvalueInitializationState {"}, {"sha": "f96b9b8082fa799d2aee174bd92565d7b2cf0c1b", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c6b0e5cf7d07cee4b26732c162b5835ab5aa53b/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c6b0e5cf7d07cee4b26732c162b5835ab5aa53b/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=2c6b0e5cf7d07cee4b26732c162b5835ab5aa53b", "patch": "@@ -151,7 +151,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n     let location_table = &LocationTable::new(mir);\n \n     let mut errors_buffer = Vec::new();\n-    let (move_data, move_errors): (MoveData<'tcx>, Option<Vec<MoveError<'tcx>>>) =\n+    let (move_data, move_errors): (MoveData<'tcx>, Option<Vec<(Place<'tcx>, MoveError<'tcx>)>>) =\n         match MoveData::gather_moves(mir, tcx) {\n             Ok(move_data) => (move_data, None),\n             Err((move_data, move_errors)) => (move_data, Some(move_errors)),"}, {"sha": "2c3bf83fc2a403e4685c4c831b9102ece10661bc", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 51, "deletions": 23, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/2c6b0e5cf7d07cee4b26732c162b5835ab5aa53b/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c6b0e5cf7d07cee4b26732c162b5835ab5aa53b/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=2c6b0e5cf7d07cee4b26732c162b5835ab5aa53b", "patch": "@@ -11,8 +11,8 @@\n use rustc::hir;\n use rustc::mir::*;\n use rustc::ty;\n-use rustc_data_structures::indexed_vec::Idx;\n use rustc_errors::DiagnosticBuilder;\n+use rustc_data_structures::indexed_vec::Idx;\n use syntax_pos::Span;\n \n use borrow_check::MirBorrowckCtxt;\n@@ -38,6 +38,7 @@ enum GroupedMoveError<'tcx> {\n     // Match place can't be moved from\n     // e.g. match x[0] { s => (), } where x: &[String]\n     MovesFromMatchPlace {\n+        original_path: Place<'tcx>,\n         span: Span,\n         move_from: Place<'tcx>,\n         kind: IllegalMoveOriginKind<'tcx>,\n@@ -46,37 +47,43 @@ enum GroupedMoveError<'tcx> {\n     // Part of a pattern can't be moved from,\n     // e.g. match &String::new() { &x => (), }\n     MovesFromPattern {\n+        original_path: Place<'tcx>,\n         span: Span,\n         move_from: MovePathIndex,\n         kind: IllegalMoveOriginKind<'tcx>,\n         binds_to: Vec<Local>,\n     },\n     // Everything that isn't from pattern matching.\n     OtherIllegalMove {\n+        original_path: Place<'tcx>,\n         span: Span,\n         kind: IllegalMoveOriginKind<'tcx>,\n     },\n }\n \n impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n-    pub(crate) fn report_move_errors(&mut self, move_errors: Vec<MoveError<'tcx>>) {\n+    pub(crate) fn report_move_errors(&mut self, move_errors: Vec<(Place<'tcx>, MoveError<'tcx>)>) {\n         let grouped_errors = self.group_move_errors(move_errors);\n         for error in grouped_errors {\n             self.report(error);\n         }\n     }\n \n-    fn group_move_errors(&self, errors: Vec<MoveError<'tcx>>) -> Vec<GroupedMoveError<'tcx>> {\n+    fn group_move_errors(\n+        &self,\n+        errors: Vec<(Place<'tcx>, MoveError<'tcx>)>\n+    ) -> Vec<GroupedMoveError<'tcx>> {\n         let mut grouped_errors = Vec::new();\n-        for error in errors {\n-            self.append_to_grouped_errors(&mut grouped_errors, error);\n+        for (original_path, error) in errors {\n+            self.append_to_grouped_errors(&mut grouped_errors, original_path, error);\n         }\n         grouped_errors\n     }\n \n     fn append_to_grouped_errors(\n         &self,\n         grouped_errors: &mut Vec<GroupedMoveError<'tcx>>,\n+        original_path: Place<'tcx>,\n         error: MoveError<'tcx>,\n     ) {\n         match error {\n@@ -116,6 +123,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                         self.append_binding_error(\n                             grouped_errors,\n                             kind,\n+                            original_path,\n                             move_from,\n                             *local,\n                             opt_match_place,\n@@ -127,6 +135,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                 }\n                 grouped_errors.push(GroupedMoveError::OtherIllegalMove {\n                     span: stmt_source_info.span,\n+                    original_path,\n                     kind,\n                 });\n             }\n@@ -137,6 +146,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n         &self,\n         grouped_errors: &mut Vec<GroupedMoveError<'tcx>>,\n         kind: IllegalMoveOriginKind<'tcx>,\n+        original_path: Place<'tcx>,\n         move_from: &Place<'tcx>,\n         bind_to: Local,\n         match_place: &Option<Place<'tcx>>,\n@@ -176,6 +186,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                 grouped_errors.push(GroupedMoveError::MovesFromMatchPlace {\n                     span,\n                     move_from: match_place.clone(),\n+                    original_path,\n                     kind,\n                     binds_to,\n                 });\n@@ -206,6 +217,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                 grouped_errors.push(GroupedMoveError::MovesFromPattern {\n                     span: match_span,\n                     move_from: mpi,\n+                    original_path,\n                     kind,\n                     binds_to: vec![bind_to],\n                 });\n@@ -215,13 +227,23 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n \n     fn report(&mut self, error: GroupedMoveError<'tcx>) {\n         let (mut err, err_span) = {\n-            let (span, kind): (Span, &IllegalMoveOriginKind) = match error {\n-                GroupedMoveError::MovesFromMatchPlace { span, ref kind, .. }\n-                | GroupedMoveError::MovesFromPattern { span, ref kind, .. }\n-                | GroupedMoveError::OtherIllegalMove { span, ref kind } => (span, kind),\n-            };\n+            let (span, original_path, kind): (Span, &Place<'tcx>, &IllegalMoveOriginKind) =\n+                match error {\n+                    GroupedMoveError::MovesFromMatchPlace {\n+                        span,\n+                        ref original_path,\n+                        ref kind,\n+                        ..\n+                    } |\n+                    GroupedMoveError::MovesFromPattern { span, ref original_path, ref kind, .. } |\n+                    GroupedMoveError::OtherIllegalMove { span, ref original_path, ref kind } => {\n+                        (span, original_path, kind)\n+                    },\n+                };\n             let origin = Origin::Mir;\n-            debug!(\"report: span={:?}, kind={:?}\", span, kind);\n+            debug!(\"report: original_path={:?} span={:?}, kind={:?} \\\n+                   original_path.is_upvar_field_projection={:?}\", original_path, span, kind,\n+                   original_path.is_upvar_field_projection(self.mir, &self.tcx));\n             (\n                 match kind {\n                     IllegalMoveOriginKind::Static => {\n@@ -237,17 +259,11 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                                 .tcx\n                                 .cannot_move_out_of_interior_noncopy(span, ty, None, origin),\n                             ty::TyClosure(def_id, closure_substs)\n-                                if !self.mir.upvar_decls.is_empty()\n-                                    && {\n-                                        match place {\n-                                            Place::Projection(ref proj) => {\n-                                                proj.base == Place::Local(Local::new(1))\n-                                            }\n-                                            Place::Promoted(_) |\n-                                            Place::Local(_) | Place::Static(_) => unreachable!(),\n-                                        }\n-                                    } =>\n-                            {\n+                                if !self.mir.upvar_decls.is_empty() &&\n+                                    original_path.strip_deref_projections()\n+                                        .is_upvar_field_projection(self.mir, &self.tcx)\n+                                        .is_some()\n+                            => {\n                                 let closure_kind_ty =\n                                     closure_substs.closure_kind_ty(def_id, self.tcx);\n                                 let closure_kind = closure_kind_ty.to_opt_closure_kind();\n@@ -267,7 +283,19 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                                        place_description={:?}\", closure_kind_ty, closure_kind,\n                                        place_description);\n \n-                                self.tcx.cannot_move_out_of(span, place_description, origin)\n+                                let mut diag = self.tcx.cannot_move_out_of(\n+                                    span, place_description, origin);\n+\n+                                if let Some(field) = original_path.is_upvar_field_projection(\n+                                        self.mir, &self.tcx) {\n+                                    let upvar_decl = &self.mir.upvar_decls[field.index()];\n+                                    let upvar_hir_id = upvar_decl.var_hir_id.assert_crate_local();\n+                                    let upvar_node_id = self.tcx.hir.hir_to_node_id(upvar_hir_id);\n+                                    let upvar_span = self.tcx.hir.span(upvar_node_id);\n+                                    diag.span_label(upvar_span, \"captured outer variable\");\n+                                }\n+\n+                                diag\n                             }\n                             _ => self\n                                 .tcx"}, {"sha": "283cccd51174a1bbe81e32f8c8def62fb5f3805f", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 3, "deletions": 27, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2c6b0e5cf7d07cee4b26732c162b5835ab5aa53b/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c6b0e5cf7d07cee4b26732c162b5835ab5aa53b/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=2c6b0e5cf7d07cee4b26732c162b5835ab5aa53b", "patch": "@@ -71,7 +71,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                 ));\n \n                 item_msg = format!(\"`{}`\", access_place_desc.unwrap());\n-                if self.is_upvar(access_place) {\n+                if access_place.is_upvar_field_projection(self.mir, &self.tcx).is_some() {\n                     reason = \", as it is not declared as mutable\".to_string();\n                 } else {\n                     let name = self.mir.upvar_decls[upvar_index.index()].debug_name;\n@@ -90,7 +90,8 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                         the_place_err.ty(self.mir, self.tcx).to_ty(self.tcx)\n                     ));\n \n-                    reason = if self.is_upvar(access_place) {\n+                    reason = if access_place.is_upvar_field_projection(self.mir,\n+                                                                       &self.tcx).is_some() {\n                         \", as it is a captured variable in a `Fn` closure\".to_string()\n                     } else {\n                         \", as `Fn` closures cannot mutate their captured variables\".to_string()\n@@ -394,31 +395,6 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n \n         err.buffer(&mut self.errors_buffer);\n     }\n-\n-    // Does this place refer to what the user sees as an upvar\n-    fn is_upvar(&self, place: &Place<'tcx>) -> bool {\n-        match *place {\n-            Place::Projection(box Projection {\n-                ref base,\n-                elem: ProjectionElem::Field(_, _),\n-            }) => {\n-                let base_ty = base.ty(self.mir, self.tcx).to_ty(self.tcx);\n-                is_closure_or_generator(base_ty)\n-            }\n-            Place::Projection(box Projection {\n-                base:\n-                    Place::Projection(box Projection {\n-                        ref base,\n-                        elem: ProjectionElem::Field(upvar_index, _),\n-                    }),\n-                elem: ProjectionElem::Deref,\n-            }) => {\n-                let base_ty = base.ty(self.mir, self.tcx).to_ty(self.tcx);\n-                is_closure_or_generator(base_ty) && self.mir.upvar_decls[upvar_index.index()].by_ref\n-            }\n-            _ => false,\n-        }\n-    }\n }\n \n fn suggest_ampmut_self<'cx, 'gcx, 'tcx>("}, {"sha": "60030f270205523937958bbb7f78ab341002015c", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2c6b0e5cf7d07cee4b26732c162b5835ab5aa53b/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c6b0e5cf7d07cee4b26732c162b5835ab5aa53b/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=2c6b0e5cf7d07cee4b26732c162b5835ab5aa53b", "patch": "@@ -27,7 +27,7 @@ struct MoveDataBuilder<'a, 'gcx: 'tcx, 'tcx: 'a> {\n     mir: &'a Mir<'tcx>,\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     data: MoveData<'tcx>,\n-    errors: Vec<MoveError<'tcx>>,\n+    errors: Vec<(Place<'tcx>, MoveError<'tcx>)>,\n }\n \n impl<'a, 'gcx, 'tcx> MoveDataBuilder<'a, 'gcx, 'tcx> {\n@@ -186,7 +186,9 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> MoveDataBuilder<'a, 'gcx, 'tcx> {\n-    fn finalize(self) -> Result<MoveData<'tcx>, (MoveData<'tcx>, Vec<MoveError<'tcx>>)> {\n+    fn finalize(\n+        self\n+    ) -> Result<MoveData<'tcx>, (MoveData<'tcx>, Vec<(Place<'tcx>, MoveError<'tcx>)>)> {\n         debug!(\"{}\", {\n             debug!(\"moves for {:?}:\", self.mir.span);\n             for (j, mo) in self.data.moves.iter_enumerated() {\n@@ -207,9 +209,10 @@ impl<'a, 'gcx, 'tcx> MoveDataBuilder<'a, 'gcx, 'tcx> {\n     }\n }\n \n-pub(super) fn gather_moves<'a, 'gcx, 'tcx>(mir: &Mir<'tcx>, tcx: TyCtxt<'a, 'gcx, 'tcx>)\n-                                           -> Result<MoveData<'tcx>,\n-                                                     (MoveData<'tcx>, Vec<MoveError<'tcx>>)> {\n+pub(super) fn gather_moves<'a, 'gcx, 'tcx>(\n+    mir: &Mir<'tcx>,\n+    tcx: TyCtxt<'a, 'gcx, 'tcx>\n+) -> Result<MoveData<'tcx>, (MoveData<'tcx>, Vec<(Place<'tcx>, MoveError<'tcx>)>)> {\n     let mut builder = MoveDataBuilder::new(mir, tcx);\n \n     builder.gather_args();\n@@ -407,7 +410,7 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n         let path = match self.move_path_for(place) {\n             Ok(path) | Err(MoveError::UnionMove { path }) => path,\n             Err(error @ MoveError::IllegalMove { .. }) => {\n-                self.builder.errors.push(error);\n+                self.builder.errors.push((place.clone(), error));\n                 return;\n             }\n         };"}, {"sha": "7b4cbdf7131b0e67b2c3b78b5c2a3a29210be39a", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c6b0e5cf7d07cee4b26732c162b5835ab5aa53b/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c6b0e5cf7d07cee4b26732c162b5835ab5aa53b/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=2c6b0e5cf7d07cee4b26732c162b5835ab5aa53b", "patch": "@@ -313,7 +313,7 @@ impl<'tcx> MoveError<'tcx> {\n \n impl<'a, 'gcx, 'tcx> MoveData<'tcx> {\n     pub fn gather_moves(mir: &Mir<'tcx>, tcx: TyCtxt<'a, 'gcx, 'tcx>)\n-                        -> Result<Self, (Self, Vec<MoveError<'tcx>>)> {\n+                        -> Result<Self, (Self, Vec<(Place<'tcx>, MoveError<'tcx>)>)> {\n         builder::gather_moves(mir, tcx)\n     }\n }"}, {"sha": "45fa1764f7027230af918979f7648d00e8a418cb", "filename": "src/test/ui/borrowck/borrowck-in-static.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c6b0e5cf7d07cee4b26732c162b5835ab5aa53b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c6b0e5cf7d07cee4b26732c162b5835ab5aa53b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.nll.stderr?ref=2c6b0e5cf7d07cee4b26732c162b5835ab5aa53b", "patch": "@@ -1,6 +1,8 @@\n error[E0507]: cannot move out of captured variable in an `Fn` closure\n   --> $DIR/borrowck-in-static.rs:15:17\n    |\n+LL |     let x = Box::new(0);\n+   |         - captured outer variable\n LL |     Box::new(|| x) //~ ERROR cannot move out of captured outer variable\n    |                 ^ cannot move out of captured variable in an `Fn` closure\n "}, {"sha": "0eb5fc8c324356ad358fa2438ac9bb1c992834a0", "filename": "src/test/ui/borrowck/unboxed-closures-move-upvar-from-non-once-ref-closure.nll.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2c6b0e5cf7d07cee4b26732c162b5835ab5aa53b/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c6b0e5cf7d07cee4b26732c162b5835ab5aa53b/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.nll.stderr?ref=2c6b0e5cf7d07cee4b26732c162b5835ab5aa53b", "patch": "@@ -1,6 +1,9 @@\n error[E0507]: cannot move out of captured variable in an `Fn` closure\n   --> $DIR/unboxed-closures-move-upvar-from-non-once-ref-closure.rs:21:9\n    |\n+LL |     let y = vec![format!(\"World\")];\n+   |         - captured outer variable\n+LL |     call(|| {\n LL |         y.into_iter();\n    |         ^ cannot move out of captured variable in an `Fn` closure\n "}, {"sha": "a05a3911aa771144eb177e4b291e274e5b49bc29", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.nll.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2c6b0e5cf7d07cee4b26732c162b5835ab5aa53b/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c6b0e5cf7d07cee4b26732c162b5835ab5aa53b/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr?ref=2c6b0e5cf7d07cee4b26732c162b5835ab5aa53b", "patch": "@@ -31,6 +31,9 @@ LL |     f.f.call_mut(())\n error[E0507]: cannot move out of captured variable in an `FnMut` closure\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:66:13\n    |\n+LL |     let mut f = move |g: Box<FnMut(isize)>, b: isize| {\n+   |         ----- captured outer variable\n+...\n LL |         foo(f);\n    |             ^ cannot move out of captured variable in an `FnMut` closure\n "}]}