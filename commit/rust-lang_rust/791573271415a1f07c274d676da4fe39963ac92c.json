{"sha": "791573271415a1f07c274d676da4fe39963ac92c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5MTU3MzI3MTQxNWExZjA3YzI3NGQ2NzZkYTRmZTM5OTYzYWM5MmM=", "commit": {"author": {"name": "Stjepan Glavina", "email": "stjepang@gmail.com", "date": "2019-01-13T20:24:15Z"}, "committer": {"name": "Stjepan Glavina", "email": "stjepang@gmail.com", "date": "2019-01-13T20:24:15Z"}, "message": "Fix intradoc link and update issue number", "tree": {"sha": "c9af111b3439a016580ac75b633980c7c064fea6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9af111b3439a016580ac75b633980c7c064fea6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/791573271415a1f07c274d676da4fe39963ac92c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/791573271415a1f07c274d676da4fe39963ac92c", "html_url": "https://github.com/rust-lang/rust/commit/791573271415a1f07c274d676da4fe39963ac92c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/791573271415a1f07c274d676da4fe39963ac92c/comments", "author": null, "committer": null, "parents": [{"sha": "04c74f46f0a0ecf886f1c12b51483d38690fac22", "url": "https://api.github.com/repos/rust-lang/rust/commits/04c74f46f0a0ecf886f1c12b51483d38690fac22", "html_url": "https://github.com/rust-lang/rust/commit/04c74f46f0a0ecf886f1c12b51483d38690fac22"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "cc173eff03e03695b23b785fdff7692358859df3", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/791573271415a1f07c274d676da4fe39963ac92c/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/791573271415a1f07c274d676da4fe39963ac92c/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=791573271415a1f07c274d676da4fe39963ac92c", "patch": "@@ -329,7 +329,7 @@ pub use self::sources::{RepeatWith, repeat_with};\n pub use self::sources::{Empty, empty};\n #[stable(feature = \"iter_once\", since = \"1.2.0\")]\n pub use self::sources::{Once, once};\n-#[unstable(feature = \"iter_once_with\", issue = \"0\")]\n+#[unstable(feature = \"iter_once_with\", issue = \"57581\")]\n pub use self::sources::{OnceWith, once_with};\n #[unstable(feature = \"iter_unfold\", issue = \"55977\")]\n pub use self::sources::{Unfold, unfold, Successors, successors};"}, {"sha": "103d02da22f0e6f3ddc83c9c588fe82e2f7b9197", "filename": "src/libcore/iter/sources.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/791573271415a1f07c274d676da4fe39963ac92c/src%2Flibcore%2Fiter%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/791573271415a1f07c274d676da4fe39963ac92c/src%2Flibcore%2Fiter%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fsources.rs?ref=791573271415a1f07c274d676da4fe39963ac92c", "patch": "@@ -385,12 +385,12 @@ pub fn once<T>(value: T) -> Once<T> {\n ///\n /// [`once_with`]: fn.once_with.html\n #[derive(Copy, Clone, Debug)]\n-#[unstable(feature = \"iter_once_with\", issue = \"0\")]\n+#[unstable(feature = \"iter_once_with\", issue = \"57581\")]\n pub struct OnceWith<F> {\n     gen: Option<F>,\n }\n \n-#[unstable(feature = \"iter_once_with\", issue = \"0\")]\n+#[unstable(feature = \"iter_once_with\", issue = \"57581\")]\n impl<A, F: FnOnce() -> A> Iterator for OnceWith<F> {\n     type Item = A;\n \n@@ -405,24 +405,24 @@ impl<A, F: FnOnce() -> A> Iterator for OnceWith<F> {\n     }\n }\n \n-#[unstable(feature = \"iter_once_with\", issue = \"0\")]\n+#[unstable(feature = \"iter_once_with\", issue = \"57581\")]\n impl<A, F: FnOnce() -> A> DoubleEndedIterator for OnceWith<F> {\n     fn next_back(&mut self) -> Option<A> {\n         self.next()\n     }\n }\n \n-#[unstable(feature = \"iter_once_with\", issue = \"0\")]\n+#[unstable(feature = \"iter_once_with\", issue = \"57581\")]\n impl<A, F: FnOnce() -> A> ExactSizeIterator for OnceWith<F> {\n     fn len(&self) -> usize {\n         self.gen.iter().len()\n     }\n }\n \n-#[unstable(feature = \"iter_once_with\", issue = \"0\")]\n+#[unstable(feature = \"iter_once_with\", issue = \"57581\")]\n impl<A, F: FnOnce() -> A> FusedIterator for OnceWith<F> {}\n \n-#[unstable(feature = \"iter_once_with\", issue = \"0\")]\n+#[unstable(feature = \"iter_once_with\", issue = \"57581\")]\n unsafe impl<A, F: FnOnce() -> A> TrustedLen for OnceWith<F> {}\n \n /// Creates an iterator that lazily generates a value exactly once by invoking\n@@ -436,6 +436,7 @@ unsafe impl<A, F: FnOnce() -> A> TrustedLen for OnceWith<F> {}\n /// Unlike [`once`], this function will lazily generate the value on request.\n ///\n /// [`once`]: fn.once.html\n+/// [`chain`]: trait.Iterator.html#method.chain\n ///\n /// # Examples\n ///\n@@ -480,7 +481,7 @@ unsafe impl<A, F: FnOnce() -> A> TrustedLen for OnceWith<F> {}\n /// }\n /// ```\n #[inline]\n-#[unstable(feature = \"iter_once_with\", issue = \"0\")]\n+#[unstable(feature = \"iter_once_with\", issue = \"57581\")]\n pub fn once_with<A, F: FnOnce() -> A>(gen: F) -> OnceWith<F> {\n     OnceWith { gen: Some(gen) }\n }"}]}