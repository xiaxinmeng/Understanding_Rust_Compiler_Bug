{"sha": "f8fb3efe6f072f17807967006d91e256d8fbad63", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4ZmIzZWZlNmYwNzJmMTc4MDc5NjcwMDZkOTFlMjU2ZDhmYmFkNjM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-03-02T12:42:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-02T12:42:43Z"}, "message": "Rollup merge of #69624 - ehuss:toolstate-beta-regress, r=Mark-Simulacrum\n\nToolstate: Don't block beta week on already broken tools.\n\nThis changes it so that tools are allowed to be broken entering the beta week if they are already broken.  This restores the original behavior before the changes in #69332.\n\nCloses #68458", "tree": {"sha": "25e65417fdfc93db2e7816fc7fde32d209dfe246", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25e65417fdfc93db2e7816fc7fde32d209dfe246"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8fb3efe6f072f17807967006d91e256d8fbad63", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeXP9DCRBK7hj4Ov3rIwAAdHIIAJp/ZqEclljgf4lan5Ne7a5+\nxx8C/wSQws80K3zm7alkDQfXz1bcgkwFoq8egitQtIT8lhIhtB/TqBaCrYAUmXiw\nKXYzv+pW+yZV2WQgG4gBz+QPWnmEvCBJShjiumuqHwBrWyqM0wYZZV8BVFbKvzir\nZtt5MfIh9JDb62yMggNEEi0ABy7M0eTwlILbfl4DYO3ucTtony0CniroS6smgqHr\n1ElTMUTko+HMamvqKEkAUwxd5AQjD1c7dGPzYFR2i0WT8Q+zKRqUQAG0QlDH9XBG\nIL8+xQRVldTD/sqvjujGSYJTGrlJRJM2jbfUWUjcu8JYmlAudaRBu2vZE6ztTRk=\n=ZeHK\n-----END PGP SIGNATURE-----\n", "payload": "tree 25e65417fdfc93db2e7816fc7fde32d209dfe246\nparent 0255561dea9bd0e7e7ff88d88dbd969e29a1ece5\nparent 22d840e501d52310dfc1ef95792ed211e3673e62\nauthor Dylan DPC <dylan.dpc@gmail.com> 1583152963 +0100\ncommitter GitHub <noreply@github.com> 1583152963 +0100\n\nRollup merge of #69624 - ehuss:toolstate-beta-regress, r=Mark-Simulacrum\n\nToolstate: Don't block beta week on already broken tools.\n\nThis changes it so that tools are allowed to be broken entering the beta week if they are already broken.  This restores the original behavior before the changes in #69332.\n\nCloses #68458\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8fb3efe6f072f17807967006d91e256d8fbad63", "html_url": "https://github.com/rust-lang/rust/commit/f8fb3efe6f072f17807967006d91e256d8fbad63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8fb3efe6f072f17807967006d91e256d8fbad63/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0255561dea9bd0e7e7ff88d88dbd969e29a1ece5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0255561dea9bd0e7e7ff88d88dbd969e29a1ece5", "html_url": "https://github.com/rust-lang/rust/commit/0255561dea9bd0e7e7ff88d88dbd969e29a1ece5"}, {"sha": "22d840e501d52310dfc1ef95792ed211e3673e62", "url": "https://api.github.com/repos/rust-lang/rust/commits/22d840e501d52310dfc1ef95792ed211e3673e62", "html_url": "https://github.com/rust-lang/rust/commit/22d840e501d52310dfc1ef95792ed211e3673e62"}], "stats": {"total": 196, "additions": 133, "deletions": 63}, "files": [{"sha": "5c39f5d5bc3efe163826b7c88e2d0c4bf13d3316", "filename": "src/bootstrap/toolstate.rs", "status": "modified", "additions": 133, "deletions": 63, "changes": 196, "blob_url": "https://github.com/rust-lang/rust/blob/f8fb3efe6f072f17807967006d91e256d8fbad63/src%2Fbootstrap%2Ftoolstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fb3efe6f072f17807967006d91e256d8fbad63/src%2Fbootstrap%2Ftoolstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftoolstate.rs?ref=f8fb3efe6f072f17807967006d91e256d8fbad63", "patch": "@@ -6,7 +6,7 @@ use std::env;\n use std::fmt;\n use std::fs;\n use std::io::{Seek, SeekFrom};\n-use std::path::PathBuf;\n+use std::path::{Path, PathBuf};\n use std::process::Command;\n use std::time;\n \n@@ -24,7 +24,7 @@ const OS: Option<&str> = None;\n \n type ToolstateData = HashMap<Box<str>, ToolState>;\n \n-#[derive(Copy, Clone, Debug, Deserialize, Serialize, PartialEq, Eq)]\n+#[derive(Copy, Clone, Debug, Deserialize, Serialize, PartialEq, Eq, PartialOrd)]\n #[serde(rename_all = \"kebab-case\")]\n /// Whether a tool can be compiled, tested or neither\n pub enum ToolState {\n@@ -143,10 +143,31 @@ pub struct ToolStateCheck;\n impl Step for ToolStateCheck {\n     type Output = ();\n \n-    /// Runs the `linkchecker` tool as compiled in `stage` by the `host` compiler.\n+    /// Checks tool state status.\n     ///\n-    /// This tool in `src/tools` will verify the validity of all our links in the\n-    /// documentation to ensure we don't have a bunch of dead ones.\n+    /// This is intended to be used in the `checktools.sh` script. To use\n+    /// this, set `save-toolstates` in `config.toml` so that tool status will\n+    /// be saved to a JSON file. Then, run `x.py test --no-fail-fast` for all\n+    /// of the tools to populate the JSON file. After that is done, this\n+    /// command can be run to check for any status failures, and exits with an\n+    /// error if there are any.\n+    ///\n+    /// This also handles publishing the results to the `history` directory of\n+    /// the toolstate repo https://github.com/rust-lang-nursery/rust-toolstate\n+    /// if the env var `TOOLSTATE_PUBLISH` is set. Note that there is a\n+    /// *separate* step of updating the `latest.json` file and creating GitHub\n+    /// issues and comments in `src/ci/publish_toolstate.sh`, which is only\n+    /// performed on master. (The shell/python code is intended to be migrated\n+    /// here eventually.)\n+    ///\n+    /// The rules for failure are:\n+    /// * If the PR modifies a tool, the status must be test-pass.\n+    ///   NOTE: There is intent to change this, see\n+    ///   https://github.com/rust-lang/rust/issues/65000.\n+    /// * All \"stable\" tools must be test-pass on the stable or beta branches.\n+    /// * During beta promotion week, a PR is not allowed to \"regress\" a\n+    ///   stable tool. That is, the status is not allowed to get worse\n+    ///   (test-pass to test-fail or build-fail).\n     fn run(self, builder: &Builder<'_>) {\n         if builder.config.dry_run {\n             return;\n@@ -171,6 +192,8 @@ impl Step for ToolStateCheck {\n         }\n \n         check_changed_files(&toolstates);\n+        checkout_toolstate_repo();\n+        let old_toolstate = read_old_toolstate();\n \n         for (tool, _) in STABLE_TOOLS.iter() {\n             let state = toolstates[*tool];\n@@ -180,11 +203,24 @@ impl Step for ToolStateCheck {\n                     did_error = true;\n                     eprintln!(\"error: Tool `{}` should be test-pass but is {}\", tool, state);\n                 } else if in_beta_week {\n-                    did_error = true;\n-                    eprintln!(\n-                        \"error: Tool `{}` should be test-pass but is {} during beta week.\",\n-                        tool, state\n-                    );\n+                    let old_state = old_toolstate\n+                        .iter()\n+                        .find(|ts| ts.tool == *tool)\n+                        .expect(\"latest.json missing tool\")\n+                        .state();\n+                    if state < old_state {\n+                        did_error = true;\n+                        eprintln!(\n+                            \"error: Tool `{}` has regressed from {} to {} during beta week.\",\n+                            tool, old_state, state\n+                        );\n+                    } else {\n+                        eprintln!(\n+                            \"warning: Tool `{}` is not test-pass (is `{}`), \\\n+                            this should be fixed before beta is branched.\",\n+                            tool, state\n+                        );\n+                    }\n                 }\n             }\n         }\n@@ -247,6 +283,70 @@ impl Builder<'_> {\n     }\n }\n \n+fn toolstate_repo() -> String {\n+    env::var(\"TOOLSTATE_REPO\")\n+        .unwrap_or_else(|_| \"https://github.com/rust-lang-nursery/rust-toolstate.git\".to_string())\n+}\n+\n+/// Directory where the toolstate repo is checked out.\n+const TOOLSTATE_DIR: &str = \"rust-toolstate\";\n+\n+/// Checks out the toolstate repo into `TOOLSTATE_DIR`.\n+fn checkout_toolstate_repo() {\n+    if let Ok(token) = env::var(\"TOOLSTATE_REPO_ACCESS_TOKEN\") {\n+        prepare_toolstate_config(&token);\n+    }\n+    if Path::new(TOOLSTATE_DIR).exists() {\n+        eprintln!(\"Cleaning old toolstate directory...\");\n+        t!(fs::remove_dir_all(TOOLSTATE_DIR));\n+    }\n+\n+    let status = Command::new(\"git\")\n+        .arg(\"clone\")\n+        .arg(\"--depth=1\")\n+        .arg(toolstate_repo())\n+        .arg(TOOLSTATE_DIR)\n+        .status();\n+    let success = match status {\n+        Ok(s) => s.success(),\n+        Err(_) => false,\n+    };\n+    if !success {\n+        panic!(\"git clone unsuccessful (status: {:?})\", status);\n+    }\n+}\n+\n+/// Sets up config and authentication for modifying the toolstate repo.\n+fn prepare_toolstate_config(token: &str) {\n+    fn git_config(key: &str, value: &str) {\n+        let status = Command::new(\"git\").arg(\"config\").arg(\"--global\").arg(key).arg(value).status();\n+        let success = match status {\n+            Ok(s) => s.success(),\n+            Err(_) => false,\n+        };\n+        if !success {\n+            panic!(\"git config key={} value={} successful (status: {:?})\", key, value, status);\n+        }\n+    }\n+\n+    // If changing anything here, then please check that src/ci/publish_toolstate.sh is up to date\n+    // as well.\n+    git_config(\"user.email\", \"7378925+rust-toolstate-update@users.noreply.github.com\");\n+    git_config(\"user.name\", \"Rust Toolstate Update\");\n+    git_config(\"credential.helper\", \"store\");\n+\n+    let credential = format!(\"https://{}:x-oauth-basic@github.com\\n\", token,);\n+    let git_credential_path = PathBuf::from(t!(env::var(\"HOME\"))).join(\".git-credentials\");\n+    t!(fs::write(&git_credential_path, credential));\n+}\n+\n+/// Reads the latest toolstate from the toolstate repo.\n+fn read_old_toolstate() -> Vec<RepoState> {\n+    let latest_path = Path::new(TOOLSTATE_DIR).join(\"_data\").join(\"latest.json\");\n+    let old_toolstate = t!(fs::read(latest_path));\n+    t!(serde_json::from_slice(&old_toolstate))\n+}\n+\n /// This function `commit_toolstate_change` provides functionality for pushing a change\n /// to the `rust-toolstate` repository.\n ///\n@@ -274,45 +374,7 @@ impl Builder<'_> {\n ///       * See <https://help.github.com/articles/about-commit-email-addresses/>\n ///           if a private email by GitHub is wanted.\n fn commit_toolstate_change(current_toolstate: &ToolstateData, in_beta_week: bool) {\n-    fn git_config(key: &str, value: &str) {\n-        let status = Command::new(\"git\").arg(\"config\").arg(\"--global\").arg(key).arg(value).status();\n-        let success = match status {\n-            Ok(s) => s.success(),\n-            Err(_) => false,\n-        };\n-        if !success {\n-            panic!(\"git config key={} value={} successful (status: {:?})\", key, value, status);\n-        }\n-    }\n-\n-    // If changing anything here, then please check that src/ci/publish_toolstate.sh is up to date\n-    // as well.\n-    git_config(\"user.email\", \"7378925+rust-toolstate-update@users.noreply.github.com\");\n-    git_config(\"user.name\", \"Rust Toolstate Update\");\n-    git_config(\"credential.helper\", \"store\");\n-\n-    let credential = format!(\n-        \"https://{}:x-oauth-basic@github.com\\n\",\n-        t!(env::var(\"TOOLSTATE_REPO_ACCESS_TOKEN\")),\n-    );\n-    let git_credential_path = PathBuf::from(t!(env::var(\"HOME\"))).join(\".git-credentials\");\n-    t!(fs::write(&git_credential_path, credential));\n-\n-    let status = Command::new(\"git\")\n-        .arg(\"clone\")\n-        .arg(\"--depth=1\")\n-        .arg(t!(env::var(\"TOOLSTATE_REPO\")))\n-        .status();\n-    let success = match status {\n-        Ok(s) => s.success(),\n-        Err(_) => false,\n-    };\n-    if !success {\n-        panic!(\"git clone successful (status: {:?})\", status);\n-    }\n-\n-    let old_toolstate = t!(fs::read(\"rust-toolstate/_data/latest.json\"));\n-    let old_toolstate: Vec<RepoState> = t!(serde_json::from_slice(&old_toolstate));\n+    let old_toolstate = read_old_toolstate();\n \n     let message = format!(\"({} CI update)\", OS.expect(\"linux/windows only\"));\n     let mut success = false;\n@@ -322,7 +384,7 @@ fn commit_toolstate_change(current_toolstate: &ToolstateData, in_beta_week: bool\n \n         // `git commit` failing means nothing to commit.\n         let status = t!(Command::new(\"git\")\n-            .current_dir(\"rust-toolstate\")\n+            .current_dir(TOOLSTATE_DIR)\n             .arg(\"commit\")\n             .arg(\"-a\")\n             .arg(\"-m\")\n@@ -334,7 +396,7 @@ fn commit_toolstate_change(current_toolstate: &ToolstateData, in_beta_week: bool\n         }\n \n         let status = t!(Command::new(\"git\")\n-            .current_dir(\"rust-toolstate\")\n+            .current_dir(TOOLSTATE_DIR)\n             .arg(\"push\")\n             .arg(\"origin\")\n             .arg(\"master\")\n@@ -347,14 +409,14 @@ fn commit_toolstate_change(current_toolstate: &ToolstateData, in_beta_week: bool\n         eprintln!(\"Sleeping for 3 seconds before retrying push\");\n         std::thread::sleep(std::time::Duration::from_secs(3));\n         let status = t!(Command::new(\"git\")\n-            .current_dir(\"rust-toolstate\")\n+            .current_dir(TOOLSTATE_DIR)\n             .arg(\"fetch\")\n             .arg(\"origin\")\n             .arg(\"master\")\n             .status());\n         assert!(status.success());\n         let status = t!(Command::new(\"git\")\n-            .current_dir(\"rust-toolstate\")\n+            .current_dir(TOOLSTATE_DIR)\n             .arg(\"reset\")\n             .arg(\"--hard\")\n             .arg(\"origin/master\")\n@@ -375,18 +437,12 @@ fn change_toolstate(\n     let mut regressed = false;\n     for repo_state in old_toolstate {\n         let tool = &repo_state.tool;\n-        let state = if cfg!(target_os = \"linux\") {\n-            &repo_state.linux\n-        } else if cfg!(windows) {\n-            &repo_state.windows\n-        } else {\n-            unimplemented!()\n-        };\n+        let state = repo_state.state();\n         let new_state = current_toolstate[tool.as_str()];\n \n-        if new_state != *state {\n+        if new_state != state {\n             eprintln!(\"The state of `{}` has changed from `{}` to `{}`\", tool, state, new_state);\n-            if (new_state as u8) < (*state as u8) {\n+            if new_state < state {\n                 if ![\"rustc-guide\", \"miri\", \"embedded-book\"].contains(&tool.as_str()) {\n                     regressed = true;\n                 }\n@@ -403,7 +459,9 @@ fn change_toolstate(\n \n     let toolstate_serialized = t!(serde_json::to_string(&current_toolstate));\n \n-    let history_path = format!(\"rust-toolstate/history/{}.tsv\", OS.expect(\"linux/windows only\"));\n+    let history_path = Path::new(TOOLSTATE_DIR)\n+        .join(\"history\")\n+        .join(format!(\"{}.tsv\", OS.expect(\"linux/windows only\")));\n     let mut file = t!(fs::read_to_string(&history_path));\n     let end_of_first_line = file.find('\\n').unwrap();\n     file.insert_str(end_of_first_line, &format!(\"\\n{}\\t{}\", commit.trim(), toolstate_serialized));\n@@ -418,3 +476,15 @@ struct RepoState {\n     commit: String,\n     datetime: String,\n }\n+\n+impl RepoState {\n+    fn state(&self) -> ToolState {\n+        if cfg!(target_os = \"linux\") {\n+            self.linux\n+        } else if cfg!(windows) {\n+            self.windows\n+        } else {\n+            unimplemented!()\n+        }\n+    }\n+}"}]}