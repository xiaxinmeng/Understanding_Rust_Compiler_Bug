{"sha": "47c8f3f56babf7830c481cb679f81466c351db7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3YzhmM2Y1NmJhYmY3ODMwYzQ4MWNiNjc5ZjgxNDY2YzM1MWRiN2I=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-03-20T01:34:39Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-03-22T23:45:27Z"}, "message": "Combine `ModuleConfig::embed_bitcode{,_marker}`.\n\nBecause the `(true, true)` combination isn't valid.", "tree": {"sha": "6c8cfa329ffd45789c7c79d81472ade282a2abfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c8cfa329ffd45789c7c79d81472ade282a2abfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47c8f3f56babf7830c481cb679f81466c351db7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47c8f3f56babf7830c481cb679f81466c351db7b", "html_url": "https://github.com/rust-lang/rust/commit/47c8f3f56babf7830c481cb679f81466c351db7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47c8f3f56babf7830c481cb679f81466c351db7b/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d156bf658fd2478ee83d8e86e8c7c46093b74ec8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d156bf658fd2478ee83d8e86e8c7c46093b74ec8", "html_url": "https://github.com/rust-lang/rust/commit/d156bf658fd2478ee83d8e86e8c7c46093b74ec8"}], "stats": {"total": 42, "additions": 25, "deletions": 17}, "files": [{"sha": "828c4a4bdf4ee4e6c6114c5d692033f0a7786054", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47c8f3f56babf7830c481cb679f81466c351db7b/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47c8f3f56babf7830c481cb679f81466c351db7b/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=47c8f3f56babf7830c481cb679f81466c351db7b", "patch": "@@ -18,7 +18,7 @@ use rustc::bug;\n use rustc::session::config::{self, Lto, OutputType, Passes, Sanitizer, SwitchWithOptPath};\n use rustc::session::Session;\n use rustc::ty::TyCtxt;\n-use rustc_codegen_ssa::back::write::{run_assembler, CodegenContext, ModuleConfig};\n+use rustc_codegen_ssa::back::write::{run_assembler, CodegenContext, EmbedBitcode, ModuleConfig};\n use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::{CompiledModule, ModuleCodegen, RLIB_BYTECODE_EXTENSION};\n use rustc_data_structures::small_c_str::SmallCStr;\n@@ -662,7 +662,7 @@ pub(crate) unsafe fn codegen(\n                 }\n             }\n \n-            if config.embed_bitcode {\n+            if config.embed_bitcode == EmbedBitcode::Full {\n                 let _timer = cgcx.prof.generic_activity_with_arg(\n                     \"LLVM_module_codegen_embed_bitcode\",\n                     &module.name[..],\n@@ -682,7 +682,7 @@ pub(crate) unsafe fn codegen(\n                     diag_handler.err(&msg);\n                 }\n             }\n-        } else if config.embed_bitcode_marker {\n+        } else if config.embed_bitcode == EmbedBitcode::Marker {\n             embed_bitcode(cgcx, llcx, llmod, None);\n         }\n "}, {"sha": "54d30487c79b1466f69c28d4df70f84a8ff1d51d", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/47c8f3f56babf7830c481cb679f81466c351db7b/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47c8f3f56babf7830c481cb679f81466c351db7b/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=47c8f3f56babf7830c481cb679f81466c351db7b", "patch": "@@ -51,6 +51,14 @@ use std::thread;\n \n const PRE_LTO_BC_EXT: &str = \"pre-lto.bc\";\n \n+/// The kind of bitcode to embed in object files.\n+#[derive(PartialEq)]\n+pub enum EmbedBitcode {\n+    None,\n+    Marker,\n+    Full,\n+}\n+\n /// Module-specific configuration for `optimize_and_codegen`.\n pub struct ModuleConfig {\n     /// Names of additional optimization passes to run.\n@@ -93,8 +101,7 @@ pub struct ModuleConfig {\n     // emscripten's ecc compiler, when used as the linker.\n     pub obj_is_bitcode: bool,\n     pub no_integrated_as: bool,\n-    pub embed_bitcode: bool,\n-    pub embed_bitcode_marker: bool,\n+    pub embed_bitcode: EmbedBitcode,\n }\n \n impl ModuleConfig {\n@@ -119,8 +126,7 @@ impl ModuleConfig {\n             emit_asm: false,\n             emit_obj: false,\n             obj_is_bitcode: false,\n-            embed_bitcode: false,\n-            embed_bitcode_marker: false,\n+            embed_bitcode: EmbedBitcode::None,\n             no_integrated_as: false,\n \n             verify_llvm_ir: false,\n@@ -143,16 +149,15 @@ impl ModuleConfig {\n         self.new_llvm_pass_manager = sess.opts.debugging_opts.new_llvm_pass_manager;\n         self.obj_is_bitcode =\n             sess.target.target.options.obj_is_bitcode || sess.opts.cg.linker_plugin_lto.enabled();\n-        let embed_bitcode =\n-            sess.target.target.options.embed_bitcode || sess.opts.debugging_opts.embed_bitcode;\n-        if embed_bitcode {\n-            match sess.opts.optimize {\n-                config::OptLevel::No | config::OptLevel::Less => {\n-                    self.embed_bitcode_marker = embed_bitcode;\n+        self.embed_bitcode =\n+            if sess.target.target.options.embed_bitcode || sess.opts.debugging_opts.embed_bitcode {\n+                match sess.opts.optimize {\n+                    config::OptLevel::No | config::OptLevel::Less => EmbedBitcode::Marker,\n+                    _ => EmbedBitcode::Full,\n                 }\n-                _ => self.embed_bitcode = embed_bitcode,\n-            }\n-        }\n+            } else {\n+                EmbedBitcode::None\n+            };\n \n         // Copy what clang does by turning on loop vectorization at O2 and\n         // slp vectorization at O3. Otherwise configure other optimization aspects\n@@ -188,7 +193,10 @@ impl ModuleConfig {\n     }\n \n     pub fn bitcode_needed(&self) -> bool {\n-        self.emit_bc || self.obj_is_bitcode || self.emit_bc_compressed || self.embed_bitcode\n+        self.emit_bc\n+            || self.obj_is_bitcode\n+            || self.emit_bc_compressed\n+            || self.embed_bitcode == EmbedBitcode::Full\n     }\n }\n "}]}