{"sha": "05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1ZGM1ZTdkOTU2NjExNTQxNmY2ZDBiODRjYzFjNzFiY2YyYzhjZjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-20T16:45:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-20T16:45:19Z"}, "message": "Auto merge of #50119 - kennytm:rollup, r=kennytm\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #50031 (Clarified E0015 message.)\n - #50058 (Added build disk usage information)\n - #50081 (Update stdsimd submodule)\n - #50083 (wasm: Increase default stack size to 1MB)\n - #50104 (Disable auto-detection of libxml2 when compiling llvm.)\n - #50114 (Fix bad merge in #49991)\n - #50117 (must explicitly request file name when using with_file_name.)\n\nFailed merges:", "tree": {"sha": "e38ca27f894912314e2372e9d42da2dbe2381636", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e38ca27f894912314e2372e9d42da2dbe2381636"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4", "html_url": "https://github.com/rust-lang/rust/commit/05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6586074426a2f88a8eb9c530a586c74fdb26503f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6586074426a2f88a8eb9c530a586c74fdb26503f", "html_url": "https://github.com/rust-lang/rust/commit/6586074426a2f88a8eb9c530a586c74fdb26503f"}, {"sha": "53232e534c62411445fd27d1182a647833aa31b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/53232e534c62411445fd27d1182a647833aa31b9", "html_url": "https://github.com/rust-lang/rust/commit/53232e534c62411445fd27d1182a647833aa31b9"}], "stats": {"total": 61, "additions": 50, "deletions": 11}, "files": [{"sha": "c5dd3cd720548c8ea1ca9a3b7b3035ac099d7df8", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4", "patch": "@@ -136,6 +136,8 @@ file. If you still have a `config.mk` file in your directory - from\n ### Building\n [building]: #building\n \n+A default configuration shall use around 3.5 GB of disk space, whereas building a debug configuration may require more than 30 GB.\n+\n Dependencies\n - [build dependencies](README.md#building-from-source)\n - `gdb` 6.2.0 minimum, 7.1 or later recommended for test builds"}, {"sha": "d952cb5bfc4bcab8c59fa3412243d63b13581206", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4", "patch": "@@ -149,6 +149,7 @@ impl Step for Llvm {\n            .define(\"WITH_POLLY\", \"OFF\")\n            .define(\"LLVM_ENABLE_TERMINFO\", \"OFF\")\n            .define(\"LLVM_ENABLE_LIBEDIT\", \"OFF\")\n+           .define(\"LLVM_ENABLE_LIBXML2\", \"OFF\")\n            .define(\"LLVM_PARALLEL_COMPILE_JOBS\", builder.jobs().to_string())\n            .define(\"LLVM_TARGET_ARCH\", target.split('-').next().unwrap())\n            .define(\"LLVM_DEFAULT_TARGET_TRIPLE\", target);"}, {"sha": "b65e9a715facaa0a42dd70801cbe6b5df74e6bc3", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4", "patch": "@@ -930,7 +930,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n             } else if let hir::ImplItemKind::Method(ref sig, _) = ast_item.node {\n                 let generics = self.tcx.generics_of(def_id);\n                 let types = generics.parent_types as usize + generics.types.len();\n-                let needs_inline = types > 0 || tcx.trans_fn_attrs(def_id).requests_inline() &&\n+                let needs_inline = (types > 0 || tcx.trans_fn_attrs(def_id).requests_inline()) &&\n                     !self.metadata_output_only();\n                 let is_const_fn = sig.constness == hir::Constness::Const;\n                 let always_encode_mir = self.tcx.sess.opts.debugging_opts.always_encode_mir;"}, {"sha": "591732fbba911481c309062023a2af830daf9c67", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4", "patch": "@@ -964,15 +964,15 @@ This does not pose a problem by itself because they can't be accessed directly.\"\n                     let (msg, note) = if let UnstableFeatures::Disallow =\n                             self.tcx.sess.opts.unstable_features {\n                         (format!(\"calls in {}s are limited to \\\n-                                  struct and enum constructors\",\n+                                  tuple structs and tuple variants\",\n                                  self.mode),\n                          Some(\"a limited form of compile-time function \\\n                                evaluation is available on a nightly \\\n                                compiler via `const fn`\"))\n                     } else {\n                         (format!(\"calls in {}s are limited \\\n                                   to constant functions, \\\n-                                  struct and enum constructors\",\n+                                  tuple structs and tuple variants\",\n                                  self.mode),\n                          None)\n                     };"}, {"sha": "e001e809ee5f0a8d2cceb611ecc64f6664ca440b", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4", "patch": "@@ -960,6 +960,7 @@ impl Linker for WasmLd {\n \n     fn finalize(&mut self) -> Command {\n         self.cmd.arg(\"--threads\");\n+        self.cmd.arg(\"-z\").arg(\"stack-size=1048576\");\n \n         // FIXME we probably shouldn't pass this but instead pass an explicit\n         // whitelist of symbols we'll allow to be undefined. Unfortunately"}, {"sha": "1ea18a5cb431e24aa838b652ac305acc5e394d6b", "filename": "src/stdsimd", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstdsimd?ref=05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4", "patch": "@@ -1 +1 @@\n-Subproject commit effdcd0132d17b6c4badc67b4b6d3fdf749a2d22\n+Subproject commit 1ea18a5cb431e24aa838b652ac305acc5e394d6b"}, {"sha": "6fa65a541b39bdcc5a356df13cbb607564a970c4", "filename": "src/test/compile-fail/issue-43105.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4/src%2Ftest%2Fcompile-fail%2Fissue-43105.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4/src%2Ftest%2Fcompile-fail%2Fissue-43105.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-43105.rs?ref=05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4", "patch": "@@ -11,7 +11,7 @@\n fn xyz() -> u8 { 42 }\n \n const NUM: u8 = xyz();\n-//~^ ERROR calls in constants are limited to constant functions, struct and enum constructors\n+//~^ ERROR calls in constants are limited to constant functions, tuple structs and tuple variants\n //~| ERROR constant evaluation error\n \n fn main() {"}, {"sha": "9a84322ad063b37a6927a3b665bc1e13f091a126", "filename": "src/test/compile-fail/issue32829.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4/src%2Ftest%2Fcompile-fail%2Fissue32829.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4/src%2Ftest%2Fcompile-fail%2Fissue32829.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue32829.rs?ref=05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4", "patch": "@@ -7,6 +7,9 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+\n+// ignore-tidy-linelength\n+\n #![feature(const_fn)]\n \n const bad : u32 = {\n@@ -20,7 +23,7 @@ const bad_two : u32 = {\n     {\n         invalid();\n         //~^ ERROR: blocks in constants are limited to items and tail expressions\n-        //~^^ ERROR: calls in constants are limited to constant functions, struct and enum\n+        //~^^ ERROR: calls in constants are limited to constant functions, tuple structs and tuple variants\n         0\n     }\n };\n@@ -44,7 +47,7 @@ static bad_five : u32 = {\n     {\n         invalid();\n         //~^ ERROR: blocks in statics are limited to items and tail expressions\n-        //~^^ ERROR: calls in statics are limited to constant functions, struct and enum\n+        //~^^ ERROR: calls in statics are limited to constant functions, tuple structs and tuple variants\n         0\n     }\n };\n@@ -68,7 +71,7 @@ static mut bad_eight : u32 = {\n     {\n         invalid();\n         //~^ ERROR: blocks in statics are limited to items and tail expressions\n-        //~^^ ERROR: calls in statics are limited to constant functions, struct and enum\n+        //~^^ ERROR: calls in statics are limited to constant functions, tuple structs and tuple variants\n         0\n     }\n };"}, {"sha": "767f28ff7b190e283426d7b214dc049c0b11d274", "filename": "src/test/ui/const-fn-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4/src%2Ftest%2Fui%2Fconst-fn-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4/src%2Ftest%2Fui%2Fconst-fn-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-fn-error.stderr?ref=05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4", "patch": "@@ -4,7 +4,7 @@ error[E0016]: blocks in constant functions are limited to items and tail express\n LL |     let mut sum = 0;\n    |                   ^\n \n-error[E0015]: calls in constant functions are limited to constant functions, struct and enum constructors\n+error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n   --> $DIR/const-fn-error.rs:18:14\n    |\n LL |     for i in 0..x {"}, {"sha": "898ee8bbd44ed12568d99144147772ea33fc1db0", "filename": "src/test/ui/mir_check_nonconst.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4/src%2Ftest%2Fui%2Fmir_check_nonconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4/src%2Ftest%2Fui%2Fmir_check_nonconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir_check_nonconst.rs?ref=05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(dead_code)]\n+\n+struct Foo { a: u8 }\n+fn bar() -> Foo {\n+    Foo { a: 5 }\n+}\n+\n+static foo: Foo = bar();\n+//~^ ERROR calls in statics are limited to constant functions, tuple structs and tuple variants\n+\n+fn main() {}"}, {"sha": "1fddaf30576c529b37ca682774072d00e6ed7efb", "filename": "src/test/ui/mir_check_nonconst.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4/src%2Ftest%2Fui%2Fmir_check_nonconst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4/src%2Ftest%2Fui%2Fmir_check_nonconst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir_check_nonconst.stderr?ref=05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4", "patch": "@@ -0,0 +1,9 @@\n+error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n+  --> $DIR/mir_check_nonconst.rs:18:19\n+   |\n+LL | static foo: Foo = bar();\n+   |                   ^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "0f4d247633a61b46016c27b0b8b860475d3aa19b", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4", "patch": "@@ -2880,8 +2880,10 @@ impl<'test> TestCx<'test> {\n             }\n         }\n \n-        let expected_output_path = self.expected_output_path(kind);\n-        let output_file = self.output_base_name().with_file_name(&expected_output_path);\n+        let expected_output = self.expected_output_path(kind);\n+        // #50113: output is abspath; only want filename component.\n+        let expected_output = expected_output.file_name().expect(\"output path requires file name\");\n+        let output_file = self.output_base_name().with_file_name(&expected_output);\n         match File::create(&output_file).and_then(|mut f| f.write_all(actual.as_bytes())) {\n             Ok(()) => {}\n             Err(e) => self.fatal(&format!("}]}