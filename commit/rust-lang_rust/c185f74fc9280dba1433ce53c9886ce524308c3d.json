{"sha": "c185f74fc9280dba1433ce53c9886ce524308c3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxODVmNzRmYzkyODBkYmExNDMzY2U1M2M5ODg2Y2U1MjQzMDhjM2Q=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-10-27T08:53:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-27T08:53:56Z"}, "message": "Merge #2084\n\n2084: use more consistent naming r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "3f470ea1e7f737e3d846eb77b006dc75023652ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f470ea1e7f737e3d846eb77b006dc75023652ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c185f74fc9280dba1433ce53c9886ce524308c3d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdtVskCRBK7hj4Ov3rIwAAdHIIADB/378+Tc41GVUriLu1uXAt\nnkoNWnxp2SDZwY+vohJLErMBVWuV2hk2PmTeMNnJiU8CcKLAljJyHIrh9l0td0tW\n0LkMp377/pxscis8Ux7ud4yZ038EUAhq/JFNdO64LdI9DyqjO/5O4h8HcL7DFNFZ\nq9HmtHYcR1eVXBG2CdZg5afiHaKphO/k1Z8RidQSE65/6XbRFtZhR7TK6Op4nFv4\n0t1IbKfE/6qql9eeNqTWMas70Q3taReLGDqL0rAZMyaC7N5m9tTDZ5YkZgU0wagg\nc6s92dMEc8O6txf0lTOfInFF5mu1i1ahwcuLNFbpk1qseXb0sAczQdiIVF2GLPY=\n=cotM\n-----END PGP SIGNATURE-----\n", "payload": "tree 3f470ea1e7f737e3d846eb77b006dc75023652ec\nparent b85f6d522af7630ab227762076a9fbf75de502de\nparent 8118dc1bb9bc63670f72965e5115daa96e8c72fd\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1572166436 +0000\ncommitter GitHub <noreply@github.com> 1572166436 +0000\n\nMerge #2084\n\n2084: use more consistent naming r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c185f74fc9280dba1433ce53c9886ce524308c3d", "html_url": "https://github.com/rust-lang/rust/commit/c185f74fc9280dba1433ce53c9886ce524308c3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c185f74fc9280dba1433ce53c9886ce524308c3d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b85f6d522af7630ab227762076a9fbf75de502de", "url": "https://api.github.com/repos/rust-lang/rust/commits/b85f6d522af7630ab227762076a9fbf75de502de", "html_url": "https://github.com/rust-lang/rust/commit/b85f6d522af7630ab227762076a9fbf75de502de"}, {"sha": "8118dc1bb9bc63670f72965e5115daa96e8c72fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8118dc1bb9bc63670f72965e5115daa96e8c72fd", "html_url": "https://github.com/rust-lang/rust/commit/8118dc1bb9bc63670f72965e5115daa96e8c72fd"}], "stats": {"total": 150, "additions": 78, "deletions": 72}, "files": [{"sha": "5f85f20e24c85f071667b65634f1c4570e1bcc4b", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=c185f74fc9280dba1433ce53c9886ce524308c3d", "patch": "@@ -5,7 +5,7 @@ use ra_db::FileRange;\n use ra_fmt::{leading_indent, reindent};\n use ra_syntax::{\n     algo::{self, find_covering_element, find_node_at_offset},\n-    AstNode, SourceFile, SyntaxElement, SyntaxNode, SyntaxToken, TextRange, TextUnit,\n+    AstNode, SourceFile, SyntaxElement, SyntaxKind, SyntaxNode, SyntaxToken, TextRange, TextUnit,\n     TokenAtOffset,\n };\n use ra_text_edit::TextEditBuilder;\n@@ -111,7 +111,11 @@ impl<'a, DB: HirDatabase> AssistCtx<'a, DB> {\n         self.source_file.syntax().token_at_offset(self.frange.range.start())\n     }\n \n-    pub(crate) fn node_at_offset<N: AstNode>(&self) -> Option<N> {\n+    pub(crate) fn find_token_at_offset(&self, kind: SyntaxKind) -> Option<SyntaxToken> {\n+        self.token_at_offset().find(|it| it.kind() == kind)\n+    }\n+\n+    pub(crate) fn find_node_at_offset<N: AstNode>(&self) -> Option<N> {\n         find_node_at_offset(self.source_file.syntax(), self.frange.range.start())\n     }\n     pub(crate) fn covering_element(&self) -> SyntaxElement {"}, {"sha": "d1e925b71f201d0897b2040fed645db279eeec13", "filename": "crates/ra_assists/src/assists/add_derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_derive.rs?ref=c185f74fc9280dba1433ce53c9886ce524308c3d", "patch": "@@ -26,7 +26,7 @@ use crate::{Assist, AssistCtx, AssistId};\n // }\n // ```\n pub(crate) fn add_derive(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n-    let nominal = ctx.node_at_offset::<ast::NominalDef>()?;\n+    let nominal = ctx.find_node_at_offset::<ast::NominalDef>()?;\n     let node_start = derive_insertion_offset(&nominal)?;\n     ctx.add_action(AssistId(\"add_derive\"), \"add `#[derive]`\", |edit| {\n         let derive_attr = nominal"}, {"sha": "ffbdc0b6294aab09d8bc60222b39684cf2512163", "filename": "crates/ra_assists/src/assists/add_explicit_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs?ref=c185f74fc9280dba1433ce53c9886ce524308c3d", "patch": "@@ -22,7 +22,7 @@ use crate::{Assist, AssistCtx, AssistId};\n // }\n // ```\n pub(crate) fn add_explicit_type(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n-    let stmt = ctx.node_at_offset::<LetStmt>()?;\n+    let stmt = ctx.find_node_at_offset::<LetStmt>()?;\n     let expr = stmt.initializer()?;\n     let pat = stmt.pat()?;\n     // Must be a binding"}, {"sha": "fd3588d2496784dac2fb9a3b68d025cf7d17397f", "filename": "crates/ra_assists/src/assists/add_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_impl.rs?ref=c185f74fc9280dba1433ce53c9886ce524308c3d", "patch": "@@ -28,7 +28,7 @@ use crate::{Assist, AssistCtx, AssistId};\n // }\n // ```\n pub(crate) fn add_impl(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n-    let nominal = ctx.node_at_offset::<ast::NominalDef>()?;\n+    let nominal = ctx.find_node_at_offset::<ast::NominalDef>()?;\n     let name = nominal.name()?;\n     ctx.add_action(AssistId(\"add_impl\"), \"add impl\", |edit| {\n         edit.target(nominal.syntax().text_range());"}, {"sha": "2585f3045426a0f7277ca506426b5a161b78f730", "filename": "crates/ra_assists/src/assists/add_missing_impl_members.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs?ref=c185f74fc9280dba1433ce53c9886ce524308c3d", "patch": "@@ -96,7 +96,7 @@ fn add_missing_impl_members_inner(\n     assist_id: &'static str,\n     label: &'static str,\n ) -> Option<Assist> {\n-    let impl_node = ctx.node_at_offset::<ast::ImplBlock>()?;\n+    let impl_node = ctx.find_node_at_offset::<ast::ImplBlock>()?;\n     let impl_item_list = impl_node.item_list()?;\n \n     let trait_def = {"}, {"sha": "8d5984a583ada2baa652d90f0ab11f565c85767e", "filename": "crates/ra_assists/src/assists/apply_demorgan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassists%2Fapply_demorgan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassists%2Fapply_demorgan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fapply_demorgan.rs?ref=c185f74fc9280dba1433ce53c9886ce524308c3d", "patch": "@@ -24,7 +24,7 @@ use crate::{Assist, AssistCtx, AssistId};\n // }\n // ```\n pub(crate) fn apply_demorgan(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n-    let expr = ctx.node_at_offset::<ast::BinExpr>()?;\n+    let expr = ctx.find_node_at_offset::<ast::BinExpr>()?;\n     let op = expr.op_kind()?;\n     let op_range = expr.op_token()?.text_range();\n     let opposite_op = opposite_logic_op(op)?;"}, {"sha": "a1c2aaa7299a8cd4695bf1a0d2f5696913f4891a", "filename": "crates/ra_assists/src/assists/auto_import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassists%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassists%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fauto_import.rs?ref=c185f74fc9280dba1433ce53c9886ce524308c3d", "patch": "@@ -547,7 +547,7 @@ pub fn auto_import_text_edit(\n }\n \n pub(crate) fn auto_import(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n-    let path: ast::Path = ctx.node_at_offset()?;\n+    let path: ast::Path = ctx.find_node_at_offset()?;\n     // We don't want to mess with use statements\n     if path.syntax().ancestors().find_map(ast::UseItem::cast).is_some() {\n         return None;"}, {"sha": "770ea04fa3a6b32ff9e92d0a6dfb2edac5c8ba09", "filename": "crates/ra_assists/src/assists/change_visibility.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassists%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassists%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fchange_visibility.rs?ref=c185f74fc9280dba1433ce53c9886ce524308c3d", "patch": "@@ -23,7 +23,7 @@ use crate::{Assist, AssistCtx, AssistId};\n // pub(crate) fn frobnicate() {}\n // ```\n pub(crate) fn change_visibility(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n-    if let Some(vis) = ctx.node_at_offset::<ast::Visibility>() {\n+    if let Some(vis) = ctx.find_node_at_offset::<ast::Visibility>() {\n         return change_vis(ctx, vis);\n     }\n     add_vis(ctx)"}, {"sha": "75822dc65a5605989bc5cc300c092d9d01a83fc1", "filename": "crates/ra_assists/src/assists/early_return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs?ref=c185f74fc9280dba1433ce53c9886ce524308c3d", "patch": "@@ -36,7 +36,7 @@ use crate::{\n // }\n // ```\n pub(crate) fn convert_to_guarded_return(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n-    let if_expr: ast::IfExpr = ctx.node_at_offset()?;\n+    let if_expr: ast::IfExpr = ctx.find_node_at_offset()?;\n     let expr = if_expr.condition()?.expr()?;\n     let then_block = if_expr.then_branch()?.block()?;\n     if if_expr.else_branch().is_some() {"}, {"sha": "c62c0efbefd68361561786e2a882542381758cfd", "filename": "crates/ra_assists/src/assists/fill_match_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs?ref=c185f74fc9280dba1433ce53c9886ce524308c3d", "patch": "@@ -32,7 +32,7 @@ use crate::{Assist, AssistCtx, AssistId};\n // }\n // ```\n pub(crate) fn fill_match_arms(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n-    let match_expr = ctx.node_at_offset::<ast::MatchExpr>()?;\n+    let match_expr = ctx.find_node_at_offset::<ast::MatchExpr>()?;\n     let match_arm_list = match_expr.match_arm_list()?;\n \n     // We already have some match arms, so we don't provide any assists."}, {"sha": "9765d5dddc0895962ffca42b6c77e627c71591fd", "filename": "crates/ra_assists/src/assists/flip_binexpr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_binexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_binexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_binexpr.rs?ref=c185f74fc9280dba1433ce53c9886ce524308c3d", "patch": "@@ -19,7 +19,7 @@ use crate::{Assist, AssistCtx, AssistId};\n // }\n // ```\n pub(crate) fn flip_binexpr(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n-    let expr = ctx.node_at_offset::<BinExpr>()?;\n+    let expr = ctx.find_node_at_offset::<BinExpr>()?;\n     let lhs = expr.lhs()?.syntax().clone();\n     let rhs = expr.rhs()?.syntax().clone();\n     let op_range = expr.op_token()?.text_range();"}, {"sha": "53ba8011d7562d64b5cd1c7145f5665315c1f954", "filename": "crates/ra_assists/src/assists/flip_comma.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_comma.rs?ref=c185f74fc9280dba1433ce53c9886ce524308c3d", "patch": "@@ -19,7 +19,7 @@ use crate::{Assist, AssistCtx, AssistId};\n // }\n // ```\n pub(crate) fn flip_comma(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n-    let comma = ctx.token_at_offset().find(|leaf| leaf.kind() == T![,])?;\n+    let comma = ctx.find_token_at_offset(T![,])?;\n     let prev = non_trivia_sibling(comma.clone().into(), Direction::Prev)?;\n     let next = non_trivia_sibling(comma.clone().into(), Direction::Next)?;\n "}, {"sha": "fe8fa2a868dde7fa02caa3a7abbedee6ed65cc3d", "filename": "crates/ra_assists/src/assists/inline_local_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs?ref=c185f74fc9280dba1433ce53c9886ce524308c3d", "patch": "@@ -24,7 +24,7 @@ use crate::{Assist, AssistCtx, AssistId};\n // }\n // ```\n pub(crate) fn inline_local_varialbe(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n-    let let_stmt = ctx.node_at_offset::<ast::LetStmt>()?;\n+    let let_stmt = ctx.find_node_at_offset::<ast::LetStmt>()?;\n     let bind_pat = match let_stmt.pat()? {\n         ast::Pat::BindPat(pat) => pat,\n         _ => return None,"}, {"sha": "b0c4ee78b59e56a4b5274bb254080a4d53009eea", "filename": "crates/ra_assists/src/assists/merge_match_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassists%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassists%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fmerge_match_arms.rs?ref=c185f74fc9280dba1433ce53c9886ce524308c3d", "patch": "@@ -27,7 +27,7 @@ use ra_syntax::ast::{AstNode, MatchArm};\n // }\n // ```\n pub(crate) fn merge_match_arms(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n-    let current_arm = ctx.node_at_offset::<MatchArm>()?;\n+    let current_arm = ctx.find_node_at_offset::<MatchArm>()?;\n \n     // We check if the following match arm matches this one. We could, but don't,\n     // compare to the previous match arm as well."}, {"sha": "edf2897c6ce2e2b36c40d20acd4367f216a9f92f", "filename": "crates/ra_assists/src/assists/move_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_bounds.rs?ref=c185f74fc9280dba1433ce53c9886ce524308c3d", "patch": "@@ -23,7 +23,7 @@ use crate::{Assist, AssistCtx, AssistId};\n // }\n // ```\n pub(crate) fn move_bounds_to_where_clause(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n-    let type_param_list = ctx.node_at_offset::<ast::TypeParamList>()?;\n+    let type_param_list = ctx.find_node_at_offset::<ast::TypeParamList>()?;\n \n     let mut type_params = type_param_list.type_params();\n     if type_params.all(|p| p.type_bound_list().is_none()) {"}, {"sha": "e820a73c8d904c323475e67ae7cee34137eee980", "filename": "crates/ra_assists/src/assists/move_guard.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_guard.rs?ref=c185f74fc9280dba1433ce53c9886ce524308c3d", "patch": "@@ -33,7 +33,7 @@ use crate::{Assist, AssistCtx, AssistId};\n // }\n // ```\n pub(crate) fn move_guard_to_arm_body(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n-    let match_arm = ctx.node_at_offset::<MatchArm>()?;\n+    let match_arm = ctx.find_node_at_offset::<MatchArm>()?;\n     let guard = match_arm.guard()?;\n     let space_before_guard = guard.syntax().prev_sibling_or_token();\n \n@@ -91,7 +91,7 @@ pub(crate) fn move_guard_to_arm_body(mut ctx: AssistCtx<impl HirDatabase>) -> Op\n // }\n // ```\n pub(crate) fn move_arm_cond_to_match_guard(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n-    let match_arm: MatchArm = ctx.node_at_offset::<MatchArm>()?;\n+    let match_arm: MatchArm = ctx.find_node_at_offset::<MatchArm>()?;\n     let last_match_pat = match_arm.pats().last()?;\n \n     let arm_body = match_arm.expr()?;"}, {"sha": "ea756d1cabd45597590b3a66abe4666a2bd42e0c", "filename": "crates/ra_assists/src/assists/raw_string.rs", "status": "modified", "additions": 53, "deletions": 51, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs?ref=c185f74fc9280dba1433ce53c9886ce524308c3d", "patch": "@@ -1,17 +1,16 @@\n //! FIXME: write short doc here\n \n use hir::db::HirDatabase;\n-use ra_syntax::{ast::AstNode, ast::Literal, TextRange, TextUnit};\n+use ra_syntax::{\n+    SyntaxKind::{RAW_STRING, STRING},\n+    TextRange, TextUnit,\n+};\n use rustc_lexer;\n \n use crate::{Assist, AssistCtx, AssistId};\n \n pub(crate) fn make_raw_string(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n-    let literal = ctx.node_at_offset::<Literal>()?;\n-    if literal.token().kind() != ra_syntax::SyntaxKind::STRING {\n-        return None;\n-    }\n-    let token = literal.token();\n+    let token = ctx.find_token_at_offset(STRING)?;\n     let text = token.text().as_str();\n     let usual_string_range = find_usual_string_range(text)?;\n     let start_of_inside = usual_string_range.start().to_usize() + 1;\n@@ -30,85 +29,52 @@ pub(crate) fn make_raw_string(mut ctx: AssistCtx<impl HirDatabase>) -> Option<As\n         return None;\n     }\n     ctx.add_action(AssistId(\"make_raw_string\"), \"make raw string\", |edit| {\n-        edit.target(literal.syntax().text_range());\n+        edit.target(token.text_range());\n         let max_hash_streak = count_hashes(&unescaped);\n         let mut hashes = String::with_capacity(max_hash_streak + 1);\n         for _ in 0..hashes.capacity() {\n             hashes.push('#');\n         }\n-        edit.replace(\n-            literal.syntax().text_range(),\n-            format!(\"r{}\\\"{}\\\"{}\", hashes, unescaped, hashes),\n-        );\n+        edit.replace(token.text_range(), format!(\"r{}\\\"{}\\\"{}\", hashes, unescaped, hashes));\n     });\n     ctx.build()\n }\n \n-fn count_hashes(s: &str) -> usize {\n-    let mut max_hash_streak = 0usize;\n-    for idx in s.match_indices(\"\\\"#\").map(|(i, _)| i) {\n-        let (_, sub) = s.split_at(idx + 1);\n-        let nb_hash = sub.chars().take_while(|c| *c == '#').count();\n-        if nb_hash > max_hash_streak {\n-            max_hash_streak = nb_hash;\n-        }\n-    }\n-    max_hash_streak\n-}\n-\n-fn find_usual_string_range(s: &str) -> Option<TextRange> {\n-    Some(TextRange::from_to(\n-        TextUnit::from(s.find('\"')? as u32),\n-        TextUnit::from(s.rfind('\"')? as u32),\n-    ))\n-}\n-\n pub(crate) fn make_usual_string(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n-    let literal = ctx.node_at_offset::<Literal>()?;\n-    if literal.token().kind() != ra_syntax::SyntaxKind::RAW_STRING {\n-        return None;\n-    }\n-    let token = literal.token();\n+    let token = ctx.find_token_at_offset(RAW_STRING)?;\n     let text = token.text().as_str();\n     let usual_string_range = find_usual_string_range(text)?;\n     ctx.add_action(AssistId(\"make_usual_string\"), \"make usual string\", |edit| {\n-        edit.target(literal.syntax().text_range());\n+        edit.target(token.text_range());\n         // parse inside string to escape `\"`\n         let start_of_inside = usual_string_range.start().to_usize() + 1;\n         let end_of_inside = usual_string_range.end().to_usize();\n         let inside_str = &text[start_of_inside..end_of_inside];\n         let escaped = inside_str.escape_default().to_string();\n-        edit.replace(literal.syntax().text_range(), format!(\"\\\"{}\\\"\", escaped));\n+        edit.replace(token.text_range(), format!(\"\\\"{}\\\"\", escaped));\n     });\n     ctx.build()\n }\n \n pub(crate) fn add_hash(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n-    let literal = ctx.node_at_offset::<Literal>()?;\n-    if literal.token().kind() != ra_syntax::SyntaxKind::RAW_STRING {\n-        return None;\n-    }\n+    let token = ctx.find_token_at_offset(RAW_STRING)?;\n     ctx.add_action(AssistId(\"add_hash\"), \"add hash to raw string\", |edit| {\n-        edit.target(literal.syntax().text_range());\n-        edit.insert(literal.syntax().text_range().start() + TextUnit::of_char('r'), \"#\");\n-        edit.insert(literal.syntax().text_range().end(), \"#\");\n+        edit.target(token.text_range());\n+        edit.insert(token.text_range().start() + TextUnit::of_char('r'), \"#\");\n+        edit.insert(token.text_range().end(), \"#\");\n     });\n     ctx.build()\n }\n \n pub(crate) fn remove_hash(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n-    let literal = ctx.node_at_offset::<Literal>()?;\n-    if literal.token().kind() != ra_syntax::SyntaxKind::RAW_STRING {\n-        return None;\n-    }\n-    let token = literal.token();\n+    let token = ctx.find_token_at_offset(RAW_STRING)?;\n     let text = token.text().as_str();\n     if text.starts_with(\"r\\\"\") {\n         // no hash to remove\n         return None;\n     }\n     ctx.add_action(AssistId(\"remove_hash\"), \"remove hash from raw string\", |edit| {\n-        edit.target(literal.syntax().text_range());\n+        edit.target(token.text_range());\n         let result = &text[2..text.len() - 1];\n         let result = if result.starts_with(\"\\\"\") {\n             // no more hash, escape\n@@ -117,11 +83,30 @@ pub(crate) fn remove_hash(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist\n         } else {\n             result.to_owned()\n         };\n-        edit.replace(literal.syntax().text_range(), format!(\"r{}\", result));\n+        edit.replace(token.text_range(), format!(\"r{}\", result));\n     });\n     ctx.build()\n }\n \n+fn count_hashes(s: &str) -> usize {\n+    let mut max_hash_streak = 0usize;\n+    for idx in s.match_indices(\"\\\"#\").map(|(i, _)| i) {\n+        let (_, sub) = s.split_at(idx + 1);\n+        let nb_hash = sub.chars().take_while(|c| *c == '#').count();\n+        if nb_hash > max_hash_streak {\n+            max_hash_streak = nb_hash;\n+        }\n+    }\n+    max_hash_streak\n+}\n+\n+fn find_usual_string_range(s: &str) -> Option<TextRange> {\n+    Some(TextRange::from_to(\n+        TextUnit::from(s.find('\"')? as u32),\n+        TextUnit::from(s.rfind('\"')? as u32),\n+    ))\n+}\n+\n #[cfg(test)]\n mod test {\n     use super::*;\n@@ -158,6 +143,23 @@ string\"#;\n         )\n     }\n \n+    #[test]\n+    fn make_raw_string_works_inside_macros() {\n+        check_assist(\n+            make_raw_string,\n+            r#\"\n+            fn f() {\n+                format!(<|>\"x = {}\", 92)\n+            }\n+            \"#,\n+            r##\"\n+            fn f() {\n+                format!(<|>r#\"x = {}\"#, 92)\n+            }\n+            \"##,\n+        )\n+    }\n+\n     #[test]\n     fn make_raw_string_hashes_inside_works() {\n         check_assist("}, {"sha": "ac2c43e1adca3826023d92cf8e070387a9603b05", "filename": "crates/ra_assists/src/assists/remove_dbg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassists%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassists%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fremove_dbg.rs?ref=c185f74fc9280dba1433ce53c9886ce524308c3d", "patch": "@@ -8,7 +8,7 @@ use ra_syntax::{\n };\n \n pub(crate) fn remove_dbg(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n-    let macro_call = ctx.node_at_offset::<ast::MacroCall>()?;\n+    let macro_call = ctx.find_node_at_offset::<ast::MacroCall>()?;\n \n     if !is_valid_macrocall(&macro_call, \"dbg\")? {\n         return None;"}, {"sha": "da276e47bf4ec494f905db892df76066dc6fa560", "filename": "crates/ra_assists/src/assists/replace_if_let_with_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassists%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassists%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Freplace_if_let_with_match.rs?ref=c185f74fc9280dba1433ce53c9886ce524308c3d", "patch": "@@ -8,7 +8,7 @@ use ra_syntax::{ast, AstNode};\n use crate::{Assist, AssistCtx, AssistId};\n \n pub(crate) fn replace_if_let_with_match(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n-    let if_expr: ast::IfExpr = ctx.node_at_offset()?;\n+    let if_expr: ast::IfExpr = ctx.find_node_at_offset()?;\n     let cond = if_expr.condition()?;\n     let pat = cond.pat()?;\n     let expr = cond.expr()?;"}, {"sha": "09bde1b72cf525b2506653901ffd2e389b6568cb", "filename": "crates/ra_assists/src/assists/split_import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassists%2Fsplit_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c185f74fc9280dba1433ce53c9886ce524308c3d/crates%2Fra_assists%2Fsrc%2Fassists%2Fsplit_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fsplit_import.rs?ref=c185f74fc9280dba1433ce53c9886ce524308c3d", "patch": "@@ -8,7 +8,7 @@ use ra_syntax::{ast, AstNode, TextUnit, T};\n use crate::{Assist, AssistCtx, AssistId};\n \n pub(crate) fn split_import(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n-    let colon_colon = ctx.token_at_offset().find(|leaf| leaf.kind() == T![::])?;\n+    let colon_colon = ctx.find_token_at_offset(T![::])?;\n     let path = ast::Path::cast(colon_colon.parent())?;\n     let top_path = successors(Some(path), |it| it.parent_path()).last()?;\n "}]}