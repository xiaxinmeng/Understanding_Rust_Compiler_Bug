{"sha": "cf73b6851b4e8f80c170d1ba8912f3c27b816c34", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmNzNiNjg1MWI0ZThmODBjMTcwZDFiYTg5MTJmM2MyN2I4MTZjMzQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-12T17:48:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-12T17:48:25Z"}, "message": "Merge #6514\n\n6514: Fix extract_struct_from_enum_variant not updating record references r=Veykril a=Veykril\n\nRelated to #6510\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "5dd6b4395a5939c09522cec12896f1d92fd54d94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5dd6b4395a5939c09522cec12896f1d92fd54d94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf73b6851b4e8f80c170d1ba8912f3c27b816c34", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfrXVpCRBK7hj4Ov3rIwAAdHIIAKe6pkAYNC2Spi89JC7GIh78\nh0QgvXHOHNrkqm5muXd9UY4gZ4pcs2JR2Svc3oUFNGPDsmx5ay21Uw3JjyRZqGt6\njLhWRdcCDi8uSM2ynbRs+UQmvvufz98bH9YakcrAmpXdBOMm8uFay2jKRbYQX7tc\n3zvhF0Sp1di7OU9j/RFLaUqYuqrg9L+6SRr0GWIxSsWPKWvAME/Q9Tqixz3SlPNM\nY1kade+D7WcG2/DsJoA4grmgrQ4heoxCp236s+3CLMfFZkxzrx1JMmPf90kO9WoY\ngLpJ1gVfvNhdqZ1KIYpkTqPLm7bN6XiRv4exe1OFpqwnDGvkT9Xtnhqi1dV/XwQ=\n=eY/w\n-----END PGP SIGNATURE-----\n", "payload": "tree 5dd6b4395a5939c09522cec12896f1d92fd54d94\nparent 13cf3b4886b45e1a27cd9a2bcd06b07e836c15c6\nparent ccdcd52975c16df217188ccb196f45041b6f0973\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1605203305 +0000\ncommitter GitHub <noreply@github.com> 1605203305 +0000\n\nMerge #6514\n\n6514: Fix extract_struct_from_enum_variant not updating record references r=Veykril a=Veykril\n\nRelated to #6510\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf73b6851b4e8f80c170d1ba8912f3c27b816c34", "html_url": "https://github.com/rust-lang/rust/commit/cf73b6851b4e8f80c170d1ba8912f3c27b816c34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf73b6851b4e8f80c170d1ba8912f3c27b816c34/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13cf3b4886b45e1a27cd9a2bcd06b07e836c15c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/13cf3b4886b45e1a27cd9a2bcd06b07e836c15c6", "html_url": "https://github.com/rust-lang/rust/commit/13cf3b4886b45e1a27cd9a2bcd06b07e836c15c6"}, {"sha": "ccdcd52975c16df217188ccb196f45041b6f0973", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccdcd52975c16df217188ccb196f45041b6f0973", "html_url": "https://github.com/rust-lang/rust/commit/ccdcd52975c16df217188ccb196f45041b6f0973"}], "stats": {"total": 120, "additions": 92, "deletions": 28}, "files": [{"sha": "067afabf2edf7b45c765ac40c32d82e693ad10e0", "filename": "crates/assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 92, "deletions": 28, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/cf73b6851b4e8f80c170d1ba8912f3c27b816c34/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf73b6851b4e8f80c170d1ba8912f3c27b816c34/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=cf73b6851b4e8f80c170d1ba8912f3c27b816c34", "patch": "@@ -5,10 +5,9 @@ use hir::{AsName, EnumVariant, Module, ModuleDef, Name};\n use ide_db::{defs::Definition, search::Reference, RootDatabase};\n use rustc_hash::{FxHashMap, FxHashSet};\n use syntax::{\n-    algo::find_node_at_offset,\n-    algo::SyntaxRewriter,\n-    ast::{self, edit::IndentLevel, make, ArgListOwner, AstNode, NameOwner, VisibilityOwner},\n-    SourceFile, SyntaxElement,\n+    algo::{find_node_at_offset, SyntaxRewriter},\n+    ast::{self, edit::IndentLevel, make, AstNode, NameOwner, VisibilityOwner},\n+    SourceFile, SyntaxElement, SyntaxNode, T,\n };\n \n use crate::{\n@@ -130,17 +129,21 @@ fn existing_definition(db: &RootDatabase, variant_name: &ast::Name, variant: &En\n fn insert_import(\n     ctx: &AssistContext,\n     rewriter: &mut SyntaxRewriter,\n-    path: &ast::PathExpr,\n+    scope_node: &SyntaxNode,\n     module: &Module,\n     enum_module_def: &ModuleDef,\n     variant_hir_name: &Name,\n ) -> Option<()> {\n     let db = ctx.db();\n-    let mod_path = module.find_use_path(db, enum_module_def.clone());\n+    let mod_path = module.find_use_path_prefixed(\n+        db,\n+        enum_module_def.clone(),\n+        ctx.config.insert_use.prefix_kind,\n+    );\n     if let Some(mut mod_path) = mod_path {\n         mod_path.segments.pop();\n         mod_path.segments.push(variant_hir_name.clone());\n-        let scope = ImportScope::find_insert_use_container(path.syntax(), ctx)?;\n+        let scope = ImportScope::find_insert_use_container(scope_node, ctx)?;\n \n         *rewriter += insert_use(&scope, mod_path_to_ast(&mod_path), ctx.config.insert_use.merge);\n     }\n@@ -204,27 +207,31 @@ fn update_reference(\n     variant_hir_name: &Name,\n     visited_modules_set: &mut FxHashSet<Module>,\n ) -> Option<()> {\n-    let path_expr: ast::PathExpr = find_node_at_offset::<ast::PathExpr>(\n-        source_file.syntax(),\n-        reference.file_range.range.start(),\n-    )?;\n-    let call = path_expr.syntax().parent().and_then(ast::CallExpr::cast)?;\n-    let list = call.arg_list()?;\n-    let segment = path_expr.path()?.segment()?;\n-    let module = ctx.sema.scope(&path_expr.syntax()).module()?;\n+    let offset = reference.file_range.range.start();\n+    let (segment, expr) = if let Some(path_expr) =\n+        find_node_at_offset::<ast::PathExpr>(source_file.syntax(), offset)\n+    {\n+        // tuple variant\n+        (path_expr.path()?.segment()?, path_expr.syntax().parent()?.clone())\n+    } else if let Some(record_expr) =\n+        find_node_at_offset::<ast::RecordExpr>(source_file.syntax(), offset)\n+    {\n+        // record variant\n+        (record_expr.path()?.segment()?, record_expr.syntax().clone())\n+    } else {\n+        return None;\n+    };\n+\n+    let module = ctx.sema.scope(&expr).module()?;\n     if !visited_modules_set.contains(&module) {\n-        if insert_import(ctx, rewriter, &path_expr, &module, enum_module_def, variant_hir_name)\n-            .is_some()\n+        if insert_import(ctx, rewriter, &expr, &module, enum_module_def, variant_hir_name).is_some()\n         {\n             visited_modules_set.insert(module);\n         }\n     }\n-\n-    let lparen = syntax::SyntaxElement::from(list.l_paren_token()?);\n-    let rparen = syntax::SyntaxElement::from(list.r_paren_token()?);\n-    rewriter.insert_after(&lparen, segment.syntax());\n-    rewriter.insert_after(&lparen, &lparen);\n-    rewriter.insert_before(&rparen, &rparen);\n+    rewriter.insert_after(segment.syntax(), &make::token(T!['(']));\n+    rewriter.insert_after(segment.syntax(), segment.syntax());\n+    rewriter.insert_after(&expr, &make::token(T![')']));\n     Some(())\n }\n \n@@ -320,7 +327,7 @@ fn another_fn() {\n             r#\"use my_mod::my_other_mod::MyField;\n \n mod my_mod {\n-    use my_other_mod::MyField;\n+    use self::my_other_mod::MyField;\n \n     fn another_fn() {\n         let m = my_other_mod::MyEnum::MyField(MyField(1, 1));\n@@ -345,6 +352,33 @@ fn another_fn() {\n         );\n     }\n \n+    #[test]\n+    fn extract_record_fix_references() {\n+        check_assist(\n+            extract_struct_from_enum_variant,\n+            r#\"\n+enum E {\n+    <|>V { i: i32, j: i32 }\n+}\n+\n+fn f() {\n+    let e = E::V { i: 9, j: 2 };\n+}\n+\"#,\n+            r#\"\n+struct V{ pub i: i32, pub j: i32 }\n+\n+enum E {\n+    V(V)\n+}\n+\n+fn f() {\n+    let e = E::V(V { i: 9, j: 2 });\n+}\n+\"#,\n+        )\n+    }\n+\n     #[test]\n     fn test_several_files() {\n         check_assist(\n@@ -372,9 +406,7 @@ enum E {\n mod foo;\n \n //- /foo.rs\n-use V;\n-\n-use crate::E;\n+use crate::{E, V};\n fn f() {\n     let e = E::V(V(9, 2));\n }\n@@ -384,7 +416,6 @@ fn f() {\n \n     #[test]\n     fn test_several_files_record() {\n-        // FIXME: this should fix the usage as well!\n         check_assist(\n             extract_struct_from_enum_variant,\n             r#\"\n@@ -401,17 +432,50 @@ fn f() {\n }\n \"#,\n             r#\"\n+//- /main.rs\n struct V{ pub i: i32, pub j: i32 }\n \n enum E {\n     V(V)\n }\n mod foo;\n \n+//- /foo.rs\n+use crate::{E, V};\n+fn f() {\n+    let e = E::V(V { i: 9, j: 2 });\n+}\n \"#,\n         )\n     }\n \n+    #[test]\n+    fn test_extract_struct_record_nested_call_exp() {\n+        check_assist(\n+            extract_struct_from_enum_variant,\n+            r#\"\n+enum A { <|>One { a: u32, b: u32 } }\n+\n+struct B(A);\n+\n+fn foo() {\n+    let _ = B(A::One { a: 1, b: 2 });\n+}\n+\"#,\n+            r#\"\n+struct One{ pub a: u32, pub b: u32 }\n+\n+enum A { One(One) }\n+\n+struct B(A);\n+\n+fn foo() {\n+    let _ = B(A::One(One { a: 1, b: 2 }));\n+}\n+\"#,\n+        );\n+    }\n+\n     fn check_not_applicable(ra_fixture: &str) {\n         let fixture =\n             format!(\"//- /main.rs crate:main deps:core\\n{}\\n{}\", ra_fixture, FamousDefs::FIXTURE);"}]}