{"sha": "d9d02fa168016b5b5b2033a2964a723f447f94b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ZDAyZmExNjgwMTZiNWI1YjIwMzNhMjk2NGE3MjNmNDQ3Zjk0YjA=", "commit": {"author": {"name": "blitzerr", "email": "rusty.blitzerr@gmail.com", "date": "2020-09-21T03:14:44Z"}, "committer": {"name": "blitzerr", "email": "rusty.blitzerr@gmail.com", "date": "2020-09-21T23:43:36Z"}, "message": "Changing the alloc() to accept &self instead of &mut self", "tree": {"sha": "e649c2f8137da4515a01a4e606d641f7765cd18f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e649c2f8137da4515a01a4e606d641f7765cd18f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9d02fa168016b5b5b2033a2964a723f447f94b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9d02fa168016b5b5b2033a2964a723f447f94b0", "html_url": "https://github.com/rust-lang/rust/commit/d9d02fa168016b5b5b2033a2964a723f447f94b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9d02fa168016b5b5b2033a2964a723f447f94b0/comments", "author": {"login": "blitzerr", "id": 28721905, "node_id": "MDQ6VXNlcjI4NzIxOTA1", "avatar_url": "https://avatars.githubusercontent.com/u/28721905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blitzerr", "html_url": "https://github.com/blitzerr", "followers_url": "https://api.github.com/users/blitzerr/followers", "following_url": "https://api.github.com/users/blitzerr/following{/other_user}", "gists_url": "https://api.github.com/users/blitzerr/gists{/gist_id}", "starred_url": "https://api.github.com/users/blitzerr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blitzerr/subscriptions", "organizations_url": "https://api.github.com/users/blitzerr/orgs", "repos_url": "https://api.github.com/users/blitzerr/repos", "events_url": "https://api.github.com/users/blitzerr/events{/privacy}", "received_events_url": "https://api.github.com/users/blitzerr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "blitzerr", "id": 28721905, "node_id": "MDQ6VXNlcjI4NzIxOTA1", "avatar_url": "https://avatars.githubusercontent.com/u/28721905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blitzerr", "html_url": "https://github.com/blitzerr", "followers_url": "https://api.github.com/users/blitzerr/followers", "following_url": "https://api.github.com/users/blitzerr/following{/other_user}", "gists_url": "https://api.github.com/users/blitzerr/gists{/gist_id}", "starred_url": "https://api.github.com/users/blitzerr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blitzerr/subscriptions", "organizations_url": "https://api.github.com/users/blitzerr/orgs", "repos_url": "https://api.github.com/users/blitzerr/repos", "events_url": "https://api.github.com/users/blitzerr/events{/privacy}", "received_events_url": "https://api.github.com/users/blitzerr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb1dc34a831688f8eca89ea22ea2eb39e881d729", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb1dc34a831688f8eca89ea22ea2eb39e881d729", "html_url": "https://github.com/rust-lang/rust/commit/fb1dc34a831688f8eca89ea22ea2eb39e881d729"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "7d872b1a66bb9a294335ea61bf748de0077b2554", "filename": "library/alloc/src/alloc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9d02fa168016b5b5b2033a2964a723f447f94b0/library%2Falloc%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d02fa168016b5b5b2033a2964a723f447f94b0/library%2Falloc%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc.rs?ref=d9d02fa168016b5b5b2033a2964a723f447f94b0", "patch": "@@ -145,7 +145,7 @@ pub unsafe fn alloc_zeroed(layout: Layout) -> *mut u8 {\n \n impl Global {\n     #[inline]\n-    fn alloc_impl(&mut self, layout: Layout, zeroed: bool) -> Result<NonNull<[u8]>, AllocErr> {\n+    fn alloc_impl(&self, layout: Layout, zeroed: bool) -> Result<NonNull<[u8]>, AllocErr> {\n         match layout.size() {\n             0 => Ok(NonNull::slice_from_raw_parts(layout.dangling(), 0)),\n             // SAFETY: `layout` is non-zero in size,\n@@ -208,7 +208,7 @@ impl Global {\n #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n unsafe impl AllocRef for Global {\n     #[inline]\n-    fn alloc(&mut self, layout: Layout) -> Result<NonNull<[u8]>, AllocErr> {\n+    fn alloc(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocErr> {\n         self.alloc_impl(layout, false)\n     }\n "}, {"sha": "f348710d61a779e66f8f98f7e09e93b9e1050c5d", "filename": "library/alloc/src/raw_vec/tests.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d9d02fa168016b5b5b2033a2964a723f447f94b0/library%2Falloc%2Fsrc%2Fraw_vec%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d02fa168016b5b5b2033a2964a723f447f94b0/library%2Falloc%2Fsrc%2Fraw_vec%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fraw_vec%2Ftests.rs?ref=d9d02fa168016b5b5b2033a2964a723f447f94b0", "patch": "@@ -1,4 +1,5 @@\n use super::*;\n+use std::cell::Cell;\n \n #[test]\n fn allocator_param() {\n@@ -17,17 +18,17 @@ fn allocator_param() {\n     // A dumb allocator that consumes a fixed amount of fuel\n     // before allocation attempts start failing.\n     struct BoundedAlloc {\n-        fuel: usize,\n+        fuel: Cell<usize>,\n     }\n     unsafe impl AllocRef for BoundedAlloc {\n-        fn alloc(&mut self, layout: Layout) -> Result<NonNull<[u8]>, AllocErr> {\n+        fn alloc(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocErr> {\n             let size = layout.size();\n-            if size > self.fuel {\n+            if size > self.fuel.get() {\n                 return Err(AllocErr);\n             }\n             match Global.alloc(layout) {\n                 ok @ Ok(_) => {\n-                    self.fuel -= size;\n+                    self.fuel.update(|old| old - size);\n                     ok\n                 }\n                 err @ Err(_) => err,\n@@ -38,11 +39,11 @@ fn allocator_param() {\n         }\n     }\n \n-    let a = BoundedAlloc { fuel: 500 };\n+    let a = BoundedAlloc { fuel: Cell::new(500) };\n     let mut v: RawVec<u8, _> = RawVec::with_capacity_in(50, a);\n-    assert_eq!(v.alloc.fuel, 450);\n+    assert_eq!(v.alloc.fuel.get(), 450);\n     v.reserve(50, 150); // (causes a realloc, thus using 50 + 150 = 200 units of fuel)\n-    assert_eq!(v.alloc.fuel, 250);\n+    assert_eq!(v.alloc.fuel.get(), 250);\n }\n \n #[test]"}, {"sha": "b7dd249d093610798cbfac533da152224b4458bc", "filename": "library/core/src/alloc/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9d02fa168016b5b5b2033a2964a723f447f94b0/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d02fa168016b5b5b2033a2964a723f447f94b0/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs?ref=d9d02fa168016b5b5b2033a2964a723f447f94b0", "patch": "@@ -109,7 +109,7 @@ pub unsafe trait AllocRef {\n     /// call the [`handle_alloc_error`] function, rather than directly invoking `panic!` or similar.\n     ///\n     /// [`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html\n-    fn alloc(&mut self, layout: Layout) -> Result<NonNull<[u8]>, AllocErr>;\n+    fn alloc(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocErr>;\n \n     /// Behaves like `alloc`, but also ensures that the returned memory is zero-initialized.\n     ///\n@@ -348,7 +348,7 @@ where\n     A: AllocRef + ?Sized,\n {\n     #[inline]\n-    fn alloc(&mut self, layout: Layout) -> Result<NonNull<[u8]>, AllocErr> {\n+    fn alloc(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocErr> {\n         (**self).alloc(layout)\n     }\n "}, {"sha": "86ae4cf4dd213109112158dd0fc5cb6697da0766", "filename": "library/std/src/alloc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9d02fa168016b5b5b2033a2964a723f447f94b0/library%2Fstd%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d02fa168016b5b5b2033a2964a723f447f94b0/library%2Fstd%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Falloc.rs?ref=d9d02fa168016b5b5b2033a2964a723f447f94b0", "patch": "@@ -133,7 +133,7 @@ pub struct System;\n \n impl System {\n     #[inline]\n-    fn alloc_impl(&mut self, layout: Layout, zeroed: bool) -> Result<NonNull<[u8]>, AllocErr> {\n+    fn alloc_impl(&self, layout: Layout, zeroed: bool) -> Result<NonNull<[u8]>, AllocErr> {\n         match layout.size() {\n             0 => Ok(NonNull::slice_from_raw_parts(layout.dangling(), 0)),\n             // SAFETY: `layout` is non-zero in size,\n@@ -202,7 +202,7 @@ impl System {\n #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n unsafe impl AllocRef for System {\n     #[inline]\n-    fn alloc(&mut self, layout: Layout) -> Result<NonNull<[u8]>, AllocErr> {\n+    fn alloc(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocErr> {\n         self.alloc_impl(layout, false)\n     }\n "}, {"sha": "603f59ab06927d384b618b52373e5e1e3b4bb1c7", "filename": "src/test/ui/allocator/custom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9d02fa168016b5b5b2033a2964a723f447f94b0/src%2Ftest%2Fui%2Fallocator%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d02fa168016b5b5b2033a2964a723f447f94b0/src%2Ftest%2Fui%2Fallocator%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Fcustom.rs?ref=d9d02fa168016b5b5b2033a2964a723f447f94b0", "patch": "@@ -18,7 +18,7 @@ struct A;\n unsafe impl alloc::GlobalAlloc for A {\n     unsafe fn alloc(&self, layout: Layout) -> *mut u8 {\n         HITS.fetch_add(1, Ordering::SeqCst);\n-        System.alloc(layout)\n+        AllocRef::alloc(&System, layout).unwrap().as_mut_ptr()\n     }\n \n     unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout) {"}]}