{"sha": "0e584f2e741ad5c6a1aefefe6eec3e2dd9fff518", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNTg0ZjJlNzQxYWQ1YzZhMWFlZmVmZTZlZWMzZTJkZDlmZmY1MTg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-09-13T20:11:08Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-09-13T20:24:34Z"}, "message": "Fix bug in auto-ref on bounded type parameters", "tree": {"sha": "c632789f39cf78738d6b9f11444d9c583ca151fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c632789f39cf78738d6b9f11444d9c583ca151fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e584f2e741ad5c6a1aefefe6eec3e2dd9fff518", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e584f2e741ad5c6a1aefefe6eec3e2dd9fff518", "html_url": "https://github.com/rust-lang/rust/commit/0e584f2e741ad5c6a1aefefe6eec3e2dd9fff518", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e584f2e741ad5c6a1aefefe6eec3e2dd9fff518/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f6b66ecd33c849b2d42c5188b71b61161227808", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f6b66ecd33c849b2d42c5188b71b61161227808", "html_url": "https://github.com/rust-lang/rust/commit/2f6b66ecd33c849b2d42c5188b71b61161227808"}], "stats": {"total": 106, "additions": 92, "deletions": 14}, "files": [{"sha": "63ac6154810213fe67f2c818db891df093eced3f", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0e584f2e741ad5c6a1aefefe6eec3e2dd9fff518/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e584f2e741ad5c6a1aefefe6eec3e2dd9fff518/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=0e584f2e741ad5c6a1aefefe6eec3e2dd9fff518", "patch": "@@ -861,8 +861,7 @@ fn check_expr(fcx: @fn_ctxt, expr: @ast::expr,\n // variables.\n fn impl_self_ty(fcx: @fn_ctxt,\n                 expr: @ast::expr, // (potential) receiver for this impl\n-                did: ast::def_id,\n-                require_rp: bool) -> ty_param_substs_and_ty {\n+                did: ast::def_id) -> ty_param_substs_and_ty {\n     let tcx = fcx.ccx.tcx;\n \n     let {n_tps, region_param, raw_ty} = if did.crate == ast::local_crate {\n@@ -897,7 +896,7 @@ fn impl_self_ty(fcx: @fn_ctxt,\n          raw_ty: ity.ty}\n     };\n \n-    let self_r = if region_param.is_some() || require_rp {\n+    let self_r = if region_param.is_some() {\n         Some(fcx.infcx().next_region_var(expr.span, expr.id))\n     } else {\n         None"}, {"sha": "028a4560e4a46abc838b78ddf98f55e7bb6149cf", "filename": "src/rustc/middle/typeck/check/method.rs", "status": "modified", "additions": 59, "deletions": 10, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/0e584f2e741ad5c6a1aefefe6eec3e2dd9fff518/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e584f2e741ad5c6a1aefefe6eec3e2dd9fff518/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=0e584f2e741ad5c6a1aefefe6eec3e2dd9fff518", "patch": "@@ -99,7 +99,10 @@ fn lookup(\n         inherent_candidates: DVec(),\n         extension_candidates: DVec()\n     };\n-    return lcx.do_lookup(self_ty);\n+    let mme = lcx.do_lookup(self_ty);\n+    debug!(\"method lookup for %s yielded %?\",\n+           expr_repr(fcx.tcx(), expr), mme);\n+    return move mme;\n }\n \n struct LookupContext {\n@@ -333,6 +336,10 @@ impl LookupContext {\n             let rcvr_ty = ty::mk_param(tcx, param_ty.idx, param_ty.def_id);\n             let rcvr_substs = {self_ty: Some(rcvr_ty), ..bound_substs};\n \n+            let (rcvr_ty, rcvr_substs) =\n+                self.create_rcvr_ty_and_substs_for_method(\n+                    method.self_ty, rcvr_ty, move rcvr_substs);\n+\n             self.inherent_candidates.push(Candidate {\n                 rcvr_ty: rcvr_ty,\n                 rcvr_substs: rcvr_substs,\n@@ -384,8 +391,12 @@ impl LookupContext {\n         // candidate be selected if the method refers to `self`.\n         let rcvr_substs = {self_ty: Some(self_ty), ..*substs};\n \n+        let (rcvr_ty, rcvr_substs) =\n+            self.create_rcvr_ty_and_substs_for_method(\n+                method.self_ty, self_ty, move rcvr_substs);\n+\n         self.inherent_candidates.push(Candidate {\n-            rcvr_ty: self_ty,\n+            rcvr_ty: rcvr_ty,\n             rcvr_substs: move rcvr_substs,\n             num_method_tps: method.tps.len(),\n             self_mode: get_mode_from_self_type(method.self_ty),\n@@ -424,18 +435,14 @@ impl LookupContext {\n         let tcx = self.tcx();\n         let method = &impl_info.methods[idx];\n \n-        let need_rp = match method.self_type {\n-            ast::sty_region(_) => true,\n-            _ => false\n-        };\n-\n         // determine the `self` of the impl with fresh\n         // variables for each parameter:\n         let {substs: impl_substs, ty: impl_ty} =\n-            impl_self_ty(self.fcx, self.self_expr, impl_info.did, need_rp);\n+            impl_self_ty(self.fcx, self.self_expr, impl_info.did);\n \n-        let impl_ty = transform_self_type_for_method(\n-            tcx, impl_substs.self_r, impl_ty, method.self_type);\n+        let (impl_ty, impl_substs) =\n+            self.create_rcvr_ty_and_substs_for_method(\n+                method.self_type, impl_ty, move impl_substs);\n \n         candidates.push(Candidate {\n             rcvr_ty: impl_ty,\n@@ -446,6 +453,48 @@ impl LookupContext {\n         });\n     }\n \n+    fn create_rcvr_ty_and_substs_for_method(&self,\n+                                            self_decl: ast::self_ty_,\n+                                            self_ty: ty::t,\n+                                            +self_substs: ty::substs)\n+        -> (ty::t, ty::substs)\n+    {\n+        // If the self type includes a region (like &self), we need to\n+        // ensure that the receiver substitutions have a self region.\n+        // If the receiver type does not itself contain borrowed\n+        // pointers, there may not be one yet.\n+        //\n+        // FIXME(#3446)--this awkward situation comes about because\n+        // the regions in the receiver are substituted before (and\n+        // differently from) those in the argument types.  This\n+        // shouldn't really have to be.\n+        let rcvr_substs = {\n+            match self_decl {\n+                sty_static | sty_value | sty_by_ref |\n+                sty_box(_) | sty_uniq(_) => {\n+                    move self_substs\n+                }\n+                sty_region(_) if self_substs.self_r.is_some() => {\n+                    move self_substs\n+                }\n+                sty_region(_) => {\n+                    {self_r:\n+                         Some(self.infcx().next_region_var(\n+                             self.expr.span,\n+                             self.expr.id)),\n+                     ..self_substs}\n+                }\n+            }\n+        };\n+\n+        let rcvr_ty =\n+            transform_self_type_for_method(\n+                self.tcx(), rcvr_substs.self_r,\n+                self_ty, self_decl);\n+\n+        (rcvr_ty, rcvr_substs)\n+    }\n+\n     // ______________________________________________________________________\n     // Candidate selection (see comment at start of file)\n "}, {"sha": "24c505d045de117654f7ccb9da90a1308eeb9504", "filename": "src/rustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e584f2e741ad5c6a1aefefe6eec3e2dd9fff518/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e584f2e741ad5c6a1aefefe6eec3e2dd9fff518/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=0e584f2e741ad5c6a1aefefe6eec3e2dd9fff518", "patch": "@@ -239,7 +239,7 @@ fn lookup_vtable(fcx: @fn_ctxt,\n                             // to some_trait.  If not, then we try the next\n                             // impl.\n                             let {substs: substs, ty: for_ty} =\n-                                impl_self_ty(fcx, expr, im.did, false);\n+                                impl_self_ty(fcx, expr, im.did);\n                             let im_bs = ty::lookup_item_type(tcx,\n                                                              im.did).bounds;\n                             match fcx.mk_subty(false, expr.span, ty, for_ty) {"}, {"sha": "29f65af239ec52c6eb8dc1492c96e0eccc685a50", "filename": "src/test/run-pass/auto-ref-bounded-ty-param.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0e584f2e741ad5c6a1aefefe6eec3e2dd9fff518/src%2Ftest%2Frun-pass%2Fauto-ref-bounded-ty-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e584f2e741ad5c6a1aefefe6eec3e2dd9fff518/src%2Ftest%2Frun-pass%2Fauto-ref-bounded-ty-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-ref-bounded-ty-param.rs?ref=0e584f2e741ad5c6a1aefefe6eec3e2dd9fff518", "patch": "@@ -0,0 +1,30 @@\n+use to_str::ToStr;\n+\n+trait Foo {\n+    fn f(&self);\n+}\n+\n+struct Bar {\n+    x: int\n+}\n+\n+trait Baz {\n+    fn g(&self);\n+}\n+\n+impl<T:Baz> T : Foo {\n+    fn f(&self) {\n+        self.g();\n+    }\n+}\n+\n+impl Bar : Baz {\n+    fn g(&self) {\n+        io::println(self.x.to_str());\n+    }\n+}\n+\n+fn main() {\n+    let y = Bar { x: 42 };\n+    y.f();\n+}\n\\ No newline at end of file"}]}