{"sha": "e2abecd3ab406ce447a8b23c8a7563e9c455f870", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyYWJlY2QzYWI0MDZjZTQ0N2E4YjIzYzhhNzU2M2U5YzQ1NWY4NzA=", "commit": {"author": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2013-03-20T15:52:45Z"}, "committer": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2013-03-22T10:30:59Z"}, "message": "syntax: replace uses of old deriving attribute with new one", "tree": {"sha": "e1a2cd1af8878d1f4f37fb21e4c544d1131cd000", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1a2cd1af8878d1f4f37fb21e4c544d1131cd000"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2abecd3ab406ce447a8b23c8a7563e9c455f870", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2abecd3ab406ce447a8b23c8a7563e9c455f870", "html_url": "https://github.com/rust-lang/rust/commit/e2abecd3ab406ce447a8b23c8a7563e9c455f870", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2abecd3ab406ce447a8b23c8a7563e9c455f870/comments", "author": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e883c730e0d6b07a8a94df30c681a292a031b18", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e883c730e0d6b07a8a94df30c681a292a031b18", "html_url": "https://github.com/rust-lang/rust/commit/6e883c730e0d6b07a8a94df30c681a292a031b18"}], "stats": {"total": 200, "additions": 100, "deletions": 100}, "files": [{"sha": "cbdcef3eff65a558cbbbb118a0f1e795a4850295", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 85, "deletions": 85, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/e2abecd3ab406ce447a8b23c8a7563e9c455f870/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2abecd3ab406ce447a8b23c8a7563e9c455f870/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=e2abecd3ab406ce447a8b23c8a7563e9c455f870", "patch": "@@ -33,13 +33,13 @@ macro_rules! interner_key (\n // table and a SyntaxContext to track renaming and\n // macro expansion per Flatt et al., \"Macros\n // That Work Together\"\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct ident { repr: Name }\n \n // a SyntaxContext represents a chain of macro-expandings\n // and renamings. Each macro expansion corresponds to\n // a fresh uint\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum SyntaxContext {\n     MT,\n     Mark (Mrk,~SyntaxContext),\n@@ -98,7 +98,7 @@ pub type fn_ident = Option<ident>;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct Lifetime {\n     id: node_id,\n     span: span,\n@@ -111,7 +111,7 @@ pub struct Lifetime {\n // of supporting information.\n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct path {\n     span: span,\n     global: bool,\n@@ -126,7 +126,7 @@ pub type node_id = int;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct def_id {\n     crate: crate_num,\n     node: node_id,\n@@ -137,7 +137,7 @@ pub const crate_node_id: node_id = 0;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n // The AST represents all type param bounds as types.\n // typeck::collect::compute_bounds matches these against\n // the \"special\" built-in traits (see middle::lang_items) and\n@@ -149,7 +149,7 @@ pub enum TyParamBound {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct TyParam {\n     ident: ident,\n     id: node_id,\n@@ -158,7 +158,7 @@ pub struct TyParam {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct Generics {\n     lifetimes: OptVec<Lifetime>,\n     ty_params: OptVec<TyParam>\n@@ -178,7 +178,7 @@ pub impl Generics {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum def {\n     def_fn(def_id, purity),\n     def_static_method(/* method */ def_id,\n@@ -216,7 +216,7 @@ pub type crate = spanned<crate_>;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct crate_ {\n     module: _mod,\n     attrs: ~[attribute],\n@@ -227,7 +227,7 @@ pub type meta_item = spanned<meta_item_>;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum meta_item_ {\n     meta_word(@~str),\n     meta_list(@~str, ~[@meta_item]),\n@@ -238,7 +238,7 @@ pub type blk = spanned<blk_>;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct blk_ {\n     view_items: ~[@view_item],\n     stmts: ~[@stmt],\n@@ -249,7 +249,7 @@ pub struct blk_ {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct pat {\n     id: node_id,\n     node: pat_,\n@@ -258,15 +258,15 @@ pub struct pat {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct field_pat {\n     ident: ident,\n     pat: @pat,\n }\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum binding_mode {\n     bind_by_copy,\n     bind_by_ref(mutability),\n@@ -289,7 +289,7 @@ impl to_bytes::IterBytes for binding_mode {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum pat_ {\n     pat_wild,\n     // A pat_ident may either be a new bound variable,\n@@ -316,7 +316,7 @@ pub enum pat_ {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum mutability { m_mutbl, m_imm, m_const, }\n \n impl to_bytes::IterBytes for mutability {\n@@ -327,7 +327,7 @@ impl to_bytes::IterBytes for mutability {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum Abi {\n     RustAbi\n }\n@@ -348,7 +348,7 @@ impl ToStr for Abi {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum Sigil {\n     BorrowedSigil,\n     OwnedSigil,\n@@ -373,7 +373,7 @@ impl ToStr for Sigil {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum vstore {\n     // FIXME (#3469): Change uint to @expr (actually only constant exprs)\n     vstore_fixed(Option<uint>),     // [1,2,3,4]\n@@ -384,7 +384,7 @@ pub enum vstore {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum expr_vstore {\n     expr_vstore_fixed(Option<uint>),   // [1,2,3,4]\n     expr_vstore_uniq,                  // ~[1,2,3,4]\n@@ -396,7 +396,7 @@ pub enum expr_vstore {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum binop {\n     add,\n     subtract,\n@@ -420,7 +420,7 @@ pub enum binop {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum unop {\n     box(mutability),\n     uniq(mutability),\n@@ -433,7 +433,7 @@ pub enum unop {\n // using ty::resolved_T(...).\n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum inferable<T> {\n     expl(T),\n     infer(node_id)\n@@ -454,7 +454,7 @@ impl<T:to_bytes::IterBytes> to_bytes::IterBytes for inferable<T> {\n // \"resolved\" mode: the real modes.\n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum rmode { by_ref, by_copy }\n \n impl to_bytes::IterBytes for rmode {\n@@ -470,7 +470,7 @@ pub type stmt = spanned<stmt_>;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum stmt_ {\n     stmt_decl(@decl, node_id),\n \n@@ -488,7 +488,7 @@ pub enum stmt_ {\n // a refinement on pat.\n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct local_ {\n     is_mutbl: bool,\n     ty: @Ty,\n@@ -503,12 +503,12 @@ pub type decl = spanned<decl_>;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum decl_ { decl_local(~[@local]), decl_item(@item), }\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct arm {\n     pats: ~[@pat],\n     guard: Option<@expr>,\n@@ -517,7 +517,7 @@ pub struct arm {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct field_ {\n     mutbl: mutability,\n     ident: ident,\n@@ -528,12 +528,12 @@ pub type field = spanned<field_>;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum blk_check_mode { default_blk, unsafe_blk, }\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct expr {\n     id: node_id,\n     // Extra node ID is only used for index, assign_op, unary, binary, method\n@@ -545,13 +545,13 @@ pub struct expr {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum log_level { error, debug, log_other }\n // 0 = error, 1 = debug, 2 = log_other\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum CallSugar {\n     NoSugar,\n     DoSugar,\n@@ -560,7 +560,7 @@ pub enum CallSugar {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum expr_ {\n     expr_vstore(@expr, expr_vstore),\n     expr_vec(~[@expr], mutability),\n@@ -634,7 +634,7 @@ pub enum expr_ {\n //\n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n #[doc=\"For macro invocations; parsing is delegated to the macro\"]\n pub enum token_tree {\n     // a single token\n@@ -709,7 +709,7 @@ pub type matcher = spanned<matcher_>;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum matcher_ {\n     // match one token\n     match_tok(::parse::token::Token),\n@@ -724,7 +724,7 @@ pub type mac = spanned<mac_>;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum mac_ {\n     mac_invoc_tt(@path,~[token_tree]),   // new macro-invocation\n }\n@@ -733,7 +733,7 @@ pub type lit = spanned<lit_>;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum lit_ {\n     lit_str(@~str),\n     lit_int(i64, int_ty),\n@@ -749,15 +749,15 @@ pub enum lit_ {\n // type structure in middle/ty.rs as well.\n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct mt {\n     ty: @Ty,\n     mutbl: mutability,\n }\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct ty_field_ {\n     ident: ident,\n     mt: mt,\n@@ -767,7 +767,7 @@ pub type ty_field = spanned<ty_field_>;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct ty_method {\n     ident: ident,\n     attrs: ~[attribute],\n@@ -781,7 +781,7 @@ pub struct ty_method {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n // A trait method is either required (meaning it doesn't have an\n // implementation, just a signature) or provided (meaning it has a default\n // implementation).\n@@ -792,7 +792,7 @@ pub enum trait_method {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum int_ty { ty_i, ty_char, ty_i8, ty_i16, ty_i32, ty_i64, }\n \n impl ToStr for int_ty {\n@@ -809,7 +809,7 @@ impl to_bytes::IterBytes for int_ty {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum uint_ty { ty_u, ty_u8, ty_u16, ty_u32, ty_u64, }\n \n impl ToStr for uint_ty {\n@@ -826,7 +826,7 @@ impl to_bytes::IterBytes for uint_ty {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum float_ty { ty_f, ty_f32, ty_f64, }\n \n impl ToStr for float_ty {\n@@ -844,7 +844,7 @@ impl to_bytes::IterBytes for float_ty {\n // NB Eq method appears below.\n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct Ty {\n     id: node_id,\n     node: ty_,\n@@ -854,7 +854,7 @@ pub struct Ty {\n // Not represented directly in the AST, referred to by name through a ty_path.\n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum prim_ty {\n     ty_int(int_ty),\n     ty_uint(uint_ty),\n@@ -865,7 +865,7 @@ pub enum prim_ty {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum Onceness {\n     Once,\n     Many\n@@ -888,7 +888,7 @@ impl to_bytes::IterBytes for Onceness {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct TyClosure {\n     sigil: Sigil,\n     region: Option<@Lifetime>,\n@@ -899,7 +899,7 @@ pub struct TyClosure {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct TyBareFn {\n     purity: purity,\n     abi: Abi,\n@@ -908,7 +908,7 @@ pub struct TyBareFn {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum ty_ {\n     ty_nil,\n     ty_bot, /* bottom type */\n@@ -937,7 +937,7 @@ impl to_bytes::IterBytes for Ty {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct arg {\n     mode: mode,\n     is_mutbl: bool,\n@@ -948,7 +948,7 @@ pub struct arg {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct fn_decl {\n     inputs: ~[arg],\n     output: @Ty,\n@@ -957,7 +957,7 @@ pub struct fn_decl {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum purity {\n     pure_fn, // declared with \"pure fn\"\n     unsafe_fn, // declared with \"unsafe fn\"\n@@ -984,7 +984,7 @@ impl to_bytes::IterBytes for purity {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum ret_style {\n     noreturn, // functions with return type _|_ that always\n               // raise an error or exit (i.e. never return to the caller)\n@@ -999,7 +999,7 @@ impl to_bytes::IterBytes for ret_style {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum self_ty_ {\n     sty_static,                                // no self\n     sty_by_ref,                                // ``\n@@ -1022,7 +1022,7 @@ pub type self_ty = spanned<self_ty_>;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct method {\n     ident: ident,\n     attrs: ~[attribute],\n@@ -1039,15 +1039,15 @@ pub struct method {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct _mod {\n     view_items: ~[@view_item],\n     items: ~[@item],\n }\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum foreign_abi {\n     foreign_abi_rust_intrinsic,\n     foreign_abi_cdecl,\n@@ -1057,12 +1057,12 @@ pub enum foreign_abi {\n // Foreign mods can be named or anonymous\n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum foreign_mod_sort { named, anonymous }\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct foreign_mod {\n     sort: foreign_mod_sort,\n     abi: ident,\n@@ -1072,15 +1072,15 @@ pub struct foreign_mod {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct variant_arg {\n     ty: @Ty,\n     id: node_id,\n }\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum variant_kind {\n     tuple_variant_kind(~[variant_arg]),\n     struct_variant_kind(@struct_def),\n@@ -1089,15 +1089,15 @@ pub enum variant_kind {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct enum_def {\n     variants: ~[variant],\n     common: Option<@struct_def>,\n }\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct variant_ {\n     name: ident,\n     attrs: ~[attribute],\n@@ -1111,7 +1111,7 @@ pub type variant = spanned<variant_>;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct path_list_ident_ {\n     name: ident,\n     id: node_id,\n@@ -1121,14 +1121,14 @@ pub type path_list_ident = spanned<path_list_ident_>;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum namespace { module_ns, type_value_ns }\n \n pub type view_path = spanned<view_path_>;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum view_path_ {\n \n     // quux = foo::bar::baz\n@@ -1147,7 +1147,7 @@ pub enum view_path_ {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct view_item {\n     node: view_item_,\n     attrs: ~[attribute],\n@@ -1157,7 +1157,7 @@ pub struct view_item {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum view_item_ {\n     view_item_extern_mod(ident, ~[@meta_item], node_id),\n     view_item_use(~[@view_path]),\n@@ -1171,13 +1171,13 @@ pub type attribute = spanned<attribute_>;\n // distinguished for pretty-printing.\n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum attr_style { attr_outer, attr_inner, }\n \n // doc-comments are promoted to attributes that have is_sugared_doc = true\n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct attribute_ {\n     style: attr_style,\n     value: @meta_item,\n@@ -1193,20 +1193,20 @@ pub struct attribute_ {\n  */\n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct trait_ref {\n     path: @path,\n     ref_id: node_id,\n }\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum visibility { public, private, inherited }\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct struct_field_ {\n     kind: struct_field_kind,\n     id: node_id,\n@@ -1217,15 +1217,15 @@ pub type struct_field = spanned<struct_field_>;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum struct_field_kind {\n     named_field(ident, struct_mutability, visibility),\n     unnamed_field   // element of a tuple-like struct\n }\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct struct_def {\n     fields: ~[@struct_field], /* fields */\n     /* (not including ctor or dtor) */\n@@ -1242,7 +1242,7 @@ pub struct struct_def {\n  */\n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct item {\n     ident: ident,\n     attrs: ~[attribute],\n@@ -1254,7 +1254,7 @@ pub struct item {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum item_ {\n     item_const(@Ty, @expr),\n     item_fn(fn_decl, purity, Generics, blk),\n@@ -1274,7 +1274,7 @@ pub enum item_ {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum struct_mutability { struct_mutable, struct_immutable }\n \n impl to_bytes::IterBytes for struct_mutability {\n@@ -1287,7 +1287,7 @@ pub type struct_dtor = spanned<struct_dtor_>;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct struct_dtor_ {\n     id: node_id,\n     attrs: ~[attribute],\n@@ -1297,7 +1297,7 @@ pub struct struct_dtor_ {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct foreign_item {\n     ident: ident,\n     attrs: ~[attribute],\n@@ -1309,7 +1309,7 @@ pub struct foreign_item {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum foreign_item_ {\n     foreign_item_fn(fn_decl, purity, Generics),\n     foreign_item_const(@Ty)\n@@ -1320,7 +1320,7 @@ pub enum foreign_item_ {\n // that we trans.\n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum inlined_item {\n     ii_item(@item),\n     ii_method(def_id /* impl id */, @method),"}, {"sha": "1225e71cb8c1ff7e235215abc5e4e38d65e61b58", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2abecd3ab406ce447a8b23c8a7563e9c455f870/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2abecd3ab406ce447a8b23c8a7563e9c455f870/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=e2abecd3ab406ce447a8b23c8a7563e9c455f870", "patch": "@@ -582,7 +582,7 @@ pub fn variant_visibility_to_privacy(visibility: visibility,\n     }\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum Privacy {\n     Private,\n     Public"}, {"sha": "c84e3abf50bc92b4d0c8d47c693b49b619b29119", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2abecd3ab406ce447a8b23c8a7563e9c455f870/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2abecd3ab406ce447a8b23c8a7563e9c455f870/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=e2abecd3ab406ce447a8b23c8a7563e9c455f870", "patch": "@@ -128,7 +128,7 @@ pub struct span {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct spanned<T> { node: T, span: span }\n \n impl cmp::Eq for span {"}, {"sha": "eed36e16754f5855d4498d8fbf5af1181320d6a3", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2abecd3ab406ce447a8b23c8a7563e9c455f870/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2abecd3ab406ce447a8b23c8a7563e9c455f870/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=e2abecd3ab406ce447a8b23c8a7563e9c455f870", "patch": "@@ -160,7 +160,7 @@ pub fn mk_handler(emitter: Option<Emitter>) -> @handler {\n     @mut HandlerT { err_count: 0, emit: emit } as @handler\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum level {\n     fatal,\n     error,"}, {"sha": "e5f818eef5c234294c44b3bb979bf5e711be57f2", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2abecd3ab406ce447a8b23c8a7563e9c455f870/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2abecd3ab406ce447a8b23c8a7563e9c455f870/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=e2abecd3ab406ce447a8b23c8a7563e9c455f870", "patch": "@@ -1204,7 +1204,7 @@ mod test {\n     use std::serialize::Encoder;\n \n     // just adding the ones I want to test, for now:\n-    #[deriving_eq]\n+    #[deriving(Eq)]\n     pub enum call {\n         CallToEmitEnum(~str),\n         CallToEmitEnumVariant(~str, uint, uint),"}, {"sha": "57fddd623d4745f0695d1cc5f32cee6331cb78b7", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2abecd3ab406ce447a8b23c8a7563e9c455f870/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2abecd3ab406ce447a8b23c8a7563e9c455f870/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=e2abecd3ab406ce447a8b23c8a7563e9c455f870", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-/// The compiler code necessary to implement the #[deriving_eq] and\n-/// #[deriving_iter_bytes] extensions.\n+/// The compiler code necessary to implement the #[deriving(Eq)] and\n+/// #[deriving(IterBytes)] extensions.\n \n use core::prelude::*;\n "}, {"sha": "d72da6f2d350e88ca6a6ffd4dcc27bf6d09208af", "filename": "src/libsyntax/ext/pipes/proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2abecd3ab406ce447a8b23c8a7563e9c455f870/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2abecd3ab406ce447a8b23c8a7563e9c455f870/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs?ref=e2abecd3ab406ce447a8b23c8a7563e9c455f870", "patch": "@@ -17,7 +17,7 @@ use ext::pipes::ast_builder::{append_types, ext_ctxt_ast_builder, path};\n \n use core::to_str::ToStr;\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum direction { send, recv }\n \n impl ToStr for direction {"}, {"sha": "435bfbdad24bfb665329844d00338afaa45d2d47", "filename": "src/libsyntax/opt_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2abecd3ab406ce447a8b23c8a7563e9c455f870/src%2Flibsyntax%2Fopt_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2abecd3ab406ce447a8b23c8a7563e9c455f870/src%2Flibsyntax%2Fopt_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fopt_vec.rs?ref=e2abecd3ab406ce447a8b23c8a7563e9c455f870", "patch": "@@ -106,7 +106,7 @@ impl<T:Copy> OptVec<T> {\n \n impl<A:Eq> Eq for OptVec<A> {\n     pure fn eq(&self, other: &OptVec<A>) -> bool {\n-        // Note: cannot use #[deriving_eq] here because\n+        // Note: cannot use #[deriving(Eq)] here because\n         // (Empty, Vec(~[])) ought to be equal.\n         match (self, other) {\n             (&Empty, &Empty) => true,"}, {"sha": "f53ac2719019d0f46a80d0832f75b36acf0bfb11", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2abecd3ab406ce447a8b23c8a7563e9c455f870/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2abecd3ab406ce447a8b23c8a7563e9c455f870/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=e2abecd3ab406ce447a8b23c8a7563e9c455f870", "patch": "@@ -37,7 +37,7 @@ pub trait reader {\n     fn dup(@mut self) -> @reader;\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct TokenAndSpan {tok: token::Token, sp: span}\n \n pub struct StringReader {"}, {"sha": "5cc1ea756e4d7927d01b41250d14c1a30dbfeaf4", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2abecd3ab406ce447a8b23c8a7563e9c455f870/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2abecd3ab406ce447a8b23c8a7563e9c455f870/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=e2abecd3ab406ce447a8b23c8a7563e9c455f870", "patch": "@@ -30,7 +30,7 @@ use core::str;\n use core::to_bytes;\n \n /// The specific types of unsupported syntax\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum ObsoleteSyntax {\n     ObsoleteLowerCaseKindBounds,\n     ObsoleteLet,"}, {"sha": "e899c79a74cb77d0a17d1f3d685e3d485b9ab45a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2abecd3ab406ce447a8b23c8a7563e9c455f870/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2abecd3ab406ce447a8b23c8a7563e9c455f870/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e2abecd3ab406ce447a8b23c8a7563e9c455f870", "patch": "@@ -93,7 +93,7 @@ use core::either;\n use core::vec;\n use std::oldmap::HashMap;\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n enum restriction {\n     UNRESTRICTED,\n     RESTRICT_STMT_EXPR,"}, {"sha": "5a774718b7d09a22f4076ed476aca3aef297590a", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e2abecd3ab406ce447a8b23c8a7563e9c455f870/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2abecd3ab406ce447a8b23c8a7563e9c455f870/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=e2abecd3ab406ce447a8b23c8a7563e9c455f870", "patch": "@@ -24,7 +24,7 @@ use std::oldmap::HashMap;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum binop {\n     PLUS,\n     MINUS,\n@@ -40,7 +40,7 @@ pub enum binop {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum Token {\n     /* Expression-operator symbols. */\n     EQ,\n@@ -103,7 +103,7 @@ pub enum Token {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n /// For interpolation during macro expansion.\n pub enum nonterminal {\n     nt_item(@ast::item),"}, {"sha": "d002267547351aeb53d49df1b01c8ef196f7c1e3", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2abecd3ab406ce447a8b23c8a7563e9c455f870/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2abecd3ab406ce447a8b23c8a7563e9c455f870/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=e2abecd3ab406ce447a8b23c8a7563e9c455f870", "patch": "@@ -66,7 +66,7 @@ use core::vec;\n  * line (which it can't) and so naturally place the content on its own line to\n  * avoid combining it with other lines and making matters even worse.\n  */\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum breaks { consistent, inconsistent, }\n \n pub struct break_t {"}]}