{"sha": "5fb8e3d829e77643e9c153172fb3a67f85eebe81", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmYjhlM2Q4MjllNzc2NDNlOWMxNTMxNzJmYjNhNjdmODVlZWJlODE=", "commit": {"author": {"name": "Federico Mena Quintero", "email": "federico@gnome.org", "date": "2017-10-11T22:57:56Z"}, "committer": {"name": "Federico Mena Quintero", "email": "federico@gnome.org", "date": "2017-10-11T22:57:56Z"}, "message": "ffi/mod.rs: Use only one space after a period ending a sentence", "tree": {"sha": "021eb185ee3b9fa4de7b114dc1bc03baf20e517d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/021eb185ee3b9fa4de7b114dc1bc03baf20e517d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fb8e3d829e77643e9c153172fb3a67f85eebe81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fb8e3d829e77643e9c153172fb3a67f85eebe81", "html_url": "https://github.com/rust-lang/rust/commit/5fb8e3d829e77643e9c153172fb3a67f85eebe81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fb8e3d829e77643e9c153172fb3a67f85eebe81/comments", "author": {"login": "federicomenaquintero", "id": 7617, "node_id": "MDQ6VXNlcjc2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/7617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/federicomenaquintero", "html_url": "https://github.com/federicomenaquintero", "followers_url": "https://api.github.com/users/federicomenaquintero/followers", "following_url": "https://api.github.com/users/federicomenaquintero/following{/other_user}", "gists_url": "https://api.github.com/users/federicomenaquintero/gists{/gist_id}", "starred_url": "https://api.github.com/users/federicomenaquintero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/federicomenaquintero/subscriptions", "organizations_url": "https://api.github.com/users/federicomenaquintero/orgs", "repos_url": "https://api.github.com/users/federicomenaquintero/repos", "events_url": "https://api.github.com/users/federicomenaquintero/events{/privacy}", "received_events_url": "https://api.github.com/users/federicomenaquintero/received_events", "type": "User", "site_admin": false}, "committer": {"login": "federicomenaquintero", "id": 7617, "node_id": "MDQ6VXNlcjc2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/7617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/federicomenaquintero", "html_url": "https://github.com/federicomenaquintero", "followers_url": "https://api.github.com/users/federicomenaquintero/followers", "following_url": "https://api.github.com/users/federicomenaquintero/following{/other_user}", "gists_url": "https://api.github.com/users/federicomenaquintero/gists{/gist_id}", "starred_url": "https://api.github.com/users/federicomenaquintero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/federicomenaquintero/subscriptions", "organizations_url": "https://api.github.com/users/federicomenaquintero/orgs", "repos_url": "https://api.github.com/users/federicomenaquintero/repos", "events_url": "https://api.github.com/users/federicomenaquintero/events{/privacy}", "received_events_url": "https://api.github.com/users/federicomenaquintero/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8e232dfe83a95cf866c967752634db3ff7a98bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8e232dfe83a95cf866c967752634db3ff7a98bb", "html_url": "https://github.com/rust-lang/rust/commit/c8e232dfe83a95cf866c967752634db3ff7a98bb"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "a75596351e4cf3ec073fa809c29847b2e179969e", "filename": "src/libstd/ffi/mod.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5fb8e3d829e77643e9c153172fb3a67f85eebe81/src%2Flibstd%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb8e3d829e77643e9c153172fb3a67f85eebe81/src%2Flibstd%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fmod.rs?ref=5fb8e3d829e77643e9c153172fb3a67f85eebe81", "patch": "@@ -12,47 +12,47 @@\n //!\n //! This module provides utilities to handle data across non-Rust\n //! interfaces, like other programming languages and the underlying\n-//! operating system.  It is mainly of use for FFI (Foreign Function\n+//! operating system. It is mainly of use for FFI (Foreign Function\n //! Interface) bindings and code that needs to exchange C-like strings\n //! with other languages.\n //!\n //! # Overview\n //!\n //! Rust represents owned strings with the [`String`] type, and\n-//! borrowed slices of strings with the [`str`] primitive.  Both are\n+//! borrowed slices of strings with the [`str`] primitive. Both are\n //! always in UTF-8 encoding, and may contain nul bytes in the middle,\n //! i.e. if you look at the bytes that make up the string, there may\n-//! be a `\\0` among them.  Both `String` and `str` store their length\n+//! be a `\\0` among them. Both `String` and `str` store their length\n //! explicitly; there are no nul terminators at the end of strings\n //! like in C.\n //!\n //! C strings are different from Rust strings:\n //!\n //! * **Encodings** - Rust strings are UTF-8, but C strings may use\n-//! other encodings.  If you are using a string from C, you should\n+//! other encodings. If you are using a string from C, you should\n //! check its encoding explicitly, rather than just assuming that it\n //! is UTF-8 like you can do in Rust.\n //!\n //! * **Character size** - C strings may use `char` or `wchar_t`-sized\n //! characters; please **note** that C's `char` is different from Rust's.\n //! The C standard leaves the actual sizes of those types open to\n //! interpretation, but defines different APIs for strings made up of\n-//! each character type.  Rust strings are always UTF-8, so different\n+//! each character type. Rust strings are always UTF-8, so different\n //! Unicode characters will be encoded in a variable number of bytes\n-//! each.  The Rust type [`char`] represents a '[Unicode scalar\n+//! each. The Rust type [`char`] represents a '[Unicode scalar\n //! value]', which is similar to, but not the same as, a '[Unicode\n //! code point]'.\n //!\n //! * **Nul terminators and implicit string lengths** - Often, C\n //! strings are nul-terminated, i.e. they have a `\\0` character at the\n-//! end.  The length of a string buffer is not stored, but has to be\n+//! end. The length of a string buffer is not stored, but has to be\n //! calculated; to compute the length of a string, C code must\n //! manually call a function like `strlen()` for `char`-based strings,\n-//! or `wcslen()` for `wchar_t`-based ones.  Those functions return\n+//! or `wcslen()` for `wchar_t`-based ones. Those functions return\n //! the number of characters in the string excluding the nul\n //! terminator, so the buffer length is really `len+1` characters.\n //! Rust strings don't have a nul terminator; their length is always\n-//! stored and does not need to be calculated.  While in Rust\n+//! stored and does not need to be calculated. While in Rust\n //! accessing a string's length is a O(1) operation (becasue the\n //! length is stored); in C it is an O(length) operation because the\n //! length needs to be computed by scanning the string for the nul\n@@ -61,7 +61,7 @@\n //! * **Internal nul characters** - When C strings have a nul\n //! terminator character, this usually means that they cannot have nul\n //! characters in the middle \u2014 a nul character would essentially\n-//! truncate the string.  Rust strings *can* have nul characters in\n+//! truncate the string. Rust strings *can* have nul characters in\n //! the middle, because nul does not have to mark the end of the\n //! string in Rust.\n //!\n@@ -80,30 +80,30 @@\n //!\n //! * **From C to Rust:** [`CStr`] represents a borrowed C string; it\n //! is what you would use to wrap a raw `*const u8` that you got from\n-//! a C function.  A `CStr` is guaranteed to be a nul-terminated array\n-//! of bytes.  Once you have a `CStr`, you can convert it to a Rust\n+//! a C function. A `CStr` is guaranteed to be a nul-terminated array\n+//! of bytes. Once you have a `CStr`, you can convert it to a Rust\n //! `&str` if it's valid UTF-8, or lossily convert it by adding\n //! replacement characters.\n //!\n //! [`OsString`] and [`OsStr`] are useful when you need to transfer\n //! strings to and from the operating system itself, or when capturing\n-//! the output of external commands.  Conversions between `OsString`,\n+//! the output of external commands. Conversions between `OsString`,\n //! `OsStr` and Rust strings work similarly to those for [`CString`]\n //! and [`CStr`].\n //!\n //! * [`OsString`] represents an owned string in whatever\n-//! representation the operating system prefers.  In the Rust standard\n+//! representation the operating system prefers. In the Rust standard\n //! library, various APIs that transfer strings to/from the operating\n-//! system use `OsString` instead of plain strings.  For example,\n+//! system use `OsString` instead of plain strings. For example,\n //! [`env::var_os()`] is used to query environment variables; it\n-//! returns an `Option<OsString>`.  If the environment variable exists\n+//! returns an `Option<OsString>`. If the environment variable exists\n //! you will get a `Some(os_string)`, which you can *then* try to\n-//! convert to a Rust string.  This yields a [`Result<>`], so that\n+//! convert to a Rust string. This yields a [`Result<>`], so that\n //! your code can detect errors in case the environment variable did\n //! not in fact contain valid Unicode data.\n //!\n //! * [`OsStr`] represents a borrowed reference to a string in a\n-//! format that can be passed to the operating system.  It can be\n+//! format that can be passed to the operating system. It can be\n //! converted into an UTF-8 Rust string slice in a similar way to\n //! `OsString`.\n //!\n@@ -125,12 +125,12 @@\n //!\n //! On Windows, [`OsStr`] implements the\n //! `std::os::windows::ffi::`[`OsStrExt`][windows.OsStrExt] trait,\n-//! which provides an [`encode_wide`] method.  This provides an\n+//! which provides an [`encode_wide`] method. This provides an\n //! iterator that can be [`collect`]ed into a vector of [`u16`].\n //!\n //! Additionally, on Windows [`OsString`] implements the\n //! `std::os::windows:ffi::`[`OsStringExt`][windows.OsStringExt]\n-//! trait, which provides a [`from_wide`] method.  The result of this\n+//! trait, which provides a [`from_wide`] method. The result of this\n //! method is an `OsString` which can be round-tripped to a Windows\n //! string losslessly.\n //!"}]}