{"sha": "1575d55fc81c328eb7ae728d9e3aaba9d13d4a16", "node_id": "C_kwDOAAsO6NoAKDE1NzVkNTVmYzgxYzMyOGViN2FlNzI4ZDllM2FhYmE5ZDEzZDRhMTY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-23T16:19:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-23T16:19:42Z"}, "message": "Auto merge of #14009 - Veykril:ts-client, r=Veykril\n\n\ud83e\uddf9 lsp_ext.ts", "tree": {"sha": "69ee3cf3efec8cd19d92cabe516449f713adad34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69ee3cf3efec8cd19d92cabe516449f713adad34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1575d55fc81c328eb7ae728d9e3aaba9d13d4a16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1575d55fc81c328eb7ae728d9e3aaba9d13d4a16", "html_url": "https://github.com/rust-lang/rust/commit/1575d55fc81c328eb7ae728d9e3aaba9d13d4a16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1575d55fc81c328eb7ae728d9e3aaba9d13d4a16/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db0d598d53c75596b4538a114e43e77530de53fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/db0d598d53c75596b4538a114e43e77530de53fc", "html_url": "https://github.com/rust-lang/rust/commit/db0d598d53c75596b4538a114e43e77530de53fc"}, {"sha": "64110714f0b51c31c0c1a48717b725328f6730ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/64110714f0b51c31c0c1a48717b725328f6730ba", "html_url": "https://github.com/rust-lang/rust/commit/64110714f0b51c31c0c1a48717b725328f6730ba"}], "stats": {"total": 288, "additions": 130, "deletions": 158}, "files": [{"sha": "62980ca046450b31fdb578a2ff5bf52d33c1a32f", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/1575d55fc81c328eb7ae728d9e3aaba9d13d4a16/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1575d55fc81c328eb7ae728d9e3aaba9d13d4a16/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=1575d55fc81c328eb7ae728d9e3aaba9d13d4a16", "patch": "@@ -172,12 +172,10 @@ export async function createClient(\n                     )\n                     .then(\n                         (result) => {\n+                            if (!result) return null;\n                             const hover = client.protocol2CodeConverter.asHover(result);\n-                            if (hover) {\n-                                const actions = (<any>result).actions;\n-                                if (actions) {\n-                                    hover.contents.push(renderHoverActions(actions));\n-                                }\n+                            if (!!result.actions) {\n+                                hover.contents.push(renderHoverActions(result.actions));\n                             }\n                             return hover;\n                         },\n@@ -310,26 +308,27 @@ class ExperimentalFeatures implements lc.StaticFeature {\n         return { kind: \"static\" };\n     }\n     fillClientCapabilities(capabilities: lc.ClientCapabilities): void {\n-        const caps: any = capabilities.experimental ?? {};\n-        caps.snippetTextEdit = true;\n-        caps.codeActionGroup = true;\n-        caps.hoverActions = true;\n-        caps.serverStatusNotification = true;\n-        caps.colorDiagnosticOutput = true;\n-        caps.openServerLogs = true;\n-        caps.commands = {\n-            commands: [\n-                \"rust-analyzer.runSingle\",\n-                \"rust-analyzer.debugSingle\",\n-                \"rust-analyzer.showReferences\",\n-                \"rust-analyzer.gotoLocation\",\n-                \"editor.action.triggerParameterHints\",\n-            ],\n+        capabilities.experimental = {\n+            snippetTextEdit: true,\n+            codeActionGroup: true,\n+            hoverActions: true,\n+            serverStatusNotification: true,\n+            colorDiagnosticOutput: true,\n+            openServerLogs: true,\n+            commands: {\n+                commands: [\n+                    \"rust-analyzer.runSingle\",\n+                    \"rust-analyzer.debugSingle\",\n+                    \"rust-analyzer.showReferences\",\n+                    \"rust-analyzer.gotoLocation\",\n+                    \"editor.action.triggerParameterHints\",\n+                ],\n+            },\n+            ...capabilities.experimental,\n         };\n-        capabilities.experimental = caps;\n     }\n     initialize(\n-        _capabilities: lc.ServerCapabilities<any>,\n+        _capabilities: lc.ServerCapabilities,\n         _documentSelector: lc.DocumentSelector | undefined\n     ): void {}\n     dispose(): void {}"}, {"sha": "b5b64e33e077ebfcf121037a441980eca72b3d63", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1575d55fc81c328eb7ae728d9e3aaba9d13d4a16/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1575d55fc81c328eb7ae728d9e3aaba9d13d4a16/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=1575d55fc81c328eb7ae728d9e3aaba9d13d4a16", "patch": "@@ -130,11 +130,11 @@ export function joinLines(ctx: CtxInit): Cmd {\n }\n \n export function moveItemUp(ctx: CtxInit): Cmd {\n-    return moveItem(ctx, ra.Direction.Up);\n+    return moveItem(ctx, \"Up\");\n }\n \n export function moveItemDown(ctx: CtxInit): Cmd {\n-    return moveItem(ctx, ra.Direction.Down);\n+    return moveItem(ctx, \"Down\");\n }\n \n export function moveItem(ctx: CtxInit, direction: ra.Direction): Cmd {"}, {"sha": "f6f5124dc410c84fa1194c8a68b6768af9cba39f", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 107, "deletions": 134, "changes": 241, "blob_url": "https://github.com/rust-lang/rust/blob/1575d55fc81c328eb7ae728d9e3aaba9d13d4a16/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1575d55fc81c328eb7ae728d9e3aaba9d13d4a16/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=1575d55fc81c328eb7ae728d9e3aaba9d13d4a16", "patch": "@@ -4,131 +4,134 @@\n \n import * as lc from \"vscode-languageclient\";\n \n-export interface AnalyzerStatusParams {\n-    textDocument?: lc.TextDocumentIdentifier;\n-}\n+// rust-analyzer overrides\n+\n+export const hover = new lc.RequestType<\n+    HoverParams,\n+    (lc.Hover & { actions: CommandLinkGroup[] }) | null,\n+    void\n+>(\"textDocument/hover\");\n+export type HoverParams = { position: lc.Position | lc.Range } & Omit<\n+    lc.TextDocumentPositionParams,\n+    \"position\"\n+> &\n+    lc.WorkDoneProgressParams;\n+export type CommandLink = {\n+    /**\n+     * A tooltip for the command, when represented in the UI.\n+     */\n+    tooltip?: string;\n+} & lc.Command;\n+export type CommandLinkGroup = {\n+    title?: string;\n+    commands: CommandLink[];\n+};\n+\n+// rust-analyzer extensions\n+\n export const analyzerStatus = new lc.RequestType<AnalyzerStatusParams, string, void>(\n     \"rust-analyzer/analyzerStatus\"\n );\n-export const memoryUsage = new lc.RequestType0<string, void>(\"rust-analyzer/memoryUsage\");\n-export const shuffleCrateGraph = new lc.RequestType0<null, void>(\"rust-analyzer/shuffleCrateGraph\");\n-\n-export interface ServerStatusParams {\n-    health: \"ok\" | \"warning\" | \"error\";\n-    quiescent: boolean;\n-    message?: string;\n-}\n-export const serverStatus = new lc.NotificationType<ServerStatusParams>(\n-    \"experimental/serverStatus\"\n+export const cancelFlycheck = new lc.NotificationType0(\"rust-analyzer/cancelFlycheck\");\n+export const clearFlycheck = new lc.NotificationType0(\"rust-analyzer/clearFlycheck\");\n+export const expandMacro = new lc.RequestType<ExpandMacroParams, ExpandedMacro | null, void>(\n+    \"rust-analyzer/expandMacro\"\n );\n+export const memoryUsage = new lc.RequestType0<string, void>(\"rust-analyzer/memoryUsage\");\n export const openServerLogs = new lc.NotificationType0(\"rust-analyzer/openServerLogs\");\n-\n+export const relatedTests = new lc.RequestType<lc.TextDocumentPositionParams, TestInfo[], void>(\n+    \"rust-analyzer/relatedTests\"\n+);\n export const reloadWorkspace = new lc.RequestType0<null, void>(\"rust-analyzer/reloadWorkspace\");\n-\n-export const hover = new lc.RequestType<HoverParams, lc.Hover | null, void>(\"textDocument/hover\");\n-\n-export interface HoverParams extends lc.WorkDoneProgressParams {\n-    textDocument: lc.TextDocumentIdentifier;\n-    position: lc.Range | lc.Position;\n-}\n-\n-export interface SyntaxTreeParams {\n-    textDocument: lc.TextDocumentIdentifier;\n-    range: lc.Range | null;\n-}\n+export const runFlycheck = new lc.NotificationType<{\n+    textDocument: lc.TextDocumentIdentifier | null;\n+}>(\"rust-analyzer/runFlycheck\");\n+export const shuffleCrateGraph = new lc.RequestType0<null, void>(\"rust-analyzer/shuffleCrateGraph\");\n export const syntaxTree = new lc.RequestType<SyntaxTreeParams, string, void>(\n     \"rust-analyzer/syntaxTree\"\n );\n-\n-export const viewHir = new lc.RequestType<lc.TextDocumentPositionParams, string, void>(\n-    \"rust-analyzer/viewHir\"\n+export const viewCrateGraph = new lc.RequestType<ViewCrateGraphParams, string, void>(\n+    \"rust-analyzer/viewCrateGraph\"\n );\n-\n export const viewFileText = new lc.RequestType<lc.TextDocumentIdentifier, string, void>(\n     \"rust-analyzer/viewFileText\"\n );\n-\n-export interface ViewItemTreeParams {\n-    textDocument: lc.TextDocumentIdentifier;\n-}\n-\n+export const viewHir = new lc.RequestType<lc.TextDocumentPositionParams, string, void>(\n+    \"rust-analyzer/viewHir\"\n+);\n export const viewItemTree = new lc.RequestType<ViewItemTreeParams, string, void>(\n     \"rust-analyzer/viewItemTree\"\n );\n \n-export interface ViewCrateGraphParams {\n-    full: boolean;\n-}\n-\n-export const viewCrateGraph = new lc.RequestType<ViewCrateGraphParams, string, void>(\n-    \"rust-analyzer/viewCrateGraph\"\n-);\n+export type AnalyzerStatusParams = { textDocument?: lc.TextDocumentIdentifier };\n \n-export interface ExpandMacroParams {\n+export type ExpandMacroParams = {\n     textDocument: lc.TextDocumentIdentifier;\n     position: lc.Position;\n-}\n-export interface ExpandedMacro {\n+};\n+export type ExpandedMacro = {\n     name: string;\n     expansion: string;\n-}\n-export const expandMacro = new lc.RequestType<ExpandMacroParams, ExpandedMacro | null, void>(\n-    \"rust-analyzer/expandMacro\"\n-);\n-\n-export const relatedTests = new lc.RequestType<lc.TextDocumentPositionParams, TestInfo[], void>(\n-    \"rust-analyzer/relatedTests\"\n-);\n-\n-export const cancelFlycheck = new lc.NotificationType0(\"rust-analyzer/cancelFlycheck\");\n-export const clearFlycheck = new lc.NotificationType0(\"rust-analyzer/clearFlycheck\");\n-export const runFlycheck = new lc.NotificationType<{\n-    textDocument: lc.TextDocumentIdentifier | null;\n-}>(\"rust-analyzer/runFlycheck\");\n-\n-// Experimental extensions\n-\n-export interface SsrParams {\n-    query: string;\n-    parseOnly: boolean;\n+};\n+export type TestInfo = { runnable: Runnable };\n+export type SyntaxTreeParams = {\n     textDocument: lc.TextDocumentIdentifier;\n-    position: lc.Position;\n-    selections: readonly lc.Range[];\n-}\n-export const ssr = new lc.RequestType<SsrParams, lc.WorkspaceEdit, void>(\"experimental/ssr\");\n+    range: lc.Range | null;\n+};\n+export type ViewCrateGraphParams = { full: boolean };\n+export type ViewItemTreeParams = { textDocument: lc.TextDocumentIdentifier };\n \n-export interface MatchingBraceParams {\n-    textDocument: lc.TextDocumentIdentifier;\n-    positions: lc.Position[];\n-}\n+// experimental extensions\n+\n+export const joinLines = new lc.RequestType<JoinLinesParams, lc.TextEdit[], void>(\n+    \"experimental/joinLines\"\n+);\n export const matchingBrace = new lc.RequestType<MatchingBraceParams, lc.Position[], void>(\n     \"experimental/matchingBrace\"\n );\n-\n+export const moveItem = new lc.RequestType<MoveItemParams, lc.TextEdit[], void>(\n+    \"experimental/moveItem\"\n+);\n+export const onEnter = new lc.RequestType<lc.TextDocumentPositionParams, lc.TextEdit[], void>(\n+    \"experimental/onEnter\"\n+);\n+export const openCargoToml = new lc.RequestType<OpenCargoTomlParams, lc.Location, void>(\n+    \"experimental/openCargoToml\"\n+);\n+export const openDocs = new lc.RequestType<lc.TextDocumentPositionParams, string | void, void>(\n+    \"experimental/externalDocs\"\n+);\n export const parentModule = new lc.RequestType<\n     lc.TextDocumentPositionParams,\n     lc.LocationLink[] | null,\n     void\n >(\"experimental/parentModule\");\n-\n-export interface JoinLinesParams {\n-    textDocument: lc.TextDocumentIdentifier;\n-    ranges: lc.Range[];\n-}\n-export const joinLines = new lc.RequestType<JoinLinesParams, lc.TextEdit[], void>(\n-    \"experimental/joinLines\"\n+export const runnables = new lc.RequestType<RunnablesParams, Runnable[], void>(\n+    \"experimental/runnables\"\n );\n-\n-export const onEnter = new lc.RequestType<lc.TextDocumentPositionParams, lc.TextEdit[], void>(\n-    \"experimental/onEnter\"\n+export const serverStatus = new lc.NotificationType<ServerStatusParams>(\n+    \"experimental/serverStatus\"\n );\n+export const ssr = new lc.RequestType<SsrParams, lc.WorkspaceEdit, void>(\"experimental/ssr\");\n \n-export interface RunnablesParams {\n+export type JoinLinesParams = {\n     textDocument: lc.TextDocumentIdentifier;\n-    position: lc.Position | null;\n-}\n-\n-export interface Runnable {\n+    ranges: lc.Range[];\n+};\n+export type MatchingBraceParams = {\n+    textDocument: lc.TextDocumentIdentifier;\n+    positions: lc.Position[];\n+};\n+export type MoveItemParams = {\n+    textDocument: lc.TextDocumentIdentifier;\n+    range: lc.Range;\n+    direction: Direction;\n+};\n+export type Direction = \"Up\" | \"Down\";\n+export type OpenCargoTomlParams = {\n+    textDocument: lc.TextDocumentIdentifier;\n+};\n+export type Runnable = {\n     label: string;\n     location?: lc.LocationLink;\n     kind: \"cargo\";\n@@ -140,50 +143,20 @@ export interface Runnable {\n         expectTest?: boolean;\n         overrideCargo?: string;\n     };\n-}\n-export const runnables = new lc.RequestType<RunnablesParams, Runnable[], void>(\n-    \"experimental/runnables\"\n-);\n-\n-export interface TestInfo {\n-    runnable: Runnable;\n-}\n-\n-export interface CommandLink extends lc.Command {\n-    /**\n-     * A tooltip for the command, when represented in the UI.\n-     */\n-    tooltip?: string;\n-}\n-\n-export interface CommandLinkGroup {\n-    title?: string;\n-    commands: CommandLink[];\n-}\n-\n-export const openDocs = new lc.RequestType<lc.TextDocumentPositionParams, string | void, void>(\n-    \"experimental/externalDocs\"\n-);\n-\n-export const openCargoToml = new lc.RequestType<OpenCargoTomlParams, lc.Location, void>(\n-    \"experimental/openCargoToml\"\n-);\n-\n-export interface OpenCargoTomlParams {\n+};\n+export type RunnablesParams = {\n     textDocument: lc.TextDocumentIdentifier;\n-}\n-\n-export const moveItem = new lc.RequestType<MoveItemParams, lc.TextEdit[], void>(\n-    \"experimental/moveItem\"\n-);\n-\n-export interface MoveItemParams {\n+    position: lc.Position | null;\n+};\n+export type ServerStatusParams = {\n+    health: \"ok\" | \"warning\" | \"error\";\n+    quiescent: boolean;\n+    message?: string;\n+};\n+export type SsrParams = {\n+    query: string;\n+    parseOnly: boolean;\n     textDocument: lc.TextDocumentIdentifier;\n-    range: lc.Range;\n-    direction: Direction;\n-}\n-\n-export const enum Direction {\n-    Up = \"Up\",\n-    Down = \"Down\",\n-}\n+    position: lc.Position;\n+    selections: readonly lc.Range[];\n+};"}]}