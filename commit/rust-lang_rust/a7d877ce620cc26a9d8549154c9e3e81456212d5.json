{"sha": "a7d877ce620cc26a9d8549154c9e3e81456212d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3ZDg3N2NlNjIwY2MyNmE5ZDg1NDkxNTRjOWUzZTgxNDU2MjEyZDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-10T06:51:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-10T06:51:30Z"}, "message": "auto merge of #14056 : kballard/rust/vim_indent_fix, r=huonw\n\ncindent handles the following case incorrectly:\r\n\r\n    impl X {\r\n        b: int,\r\n        //\r\n        c: int,\r\n    }\r\n\r\nif you try and insert a new line after the `c` declaration.\r\n\r\nTo fix this, fix the get_line_trimmed() function to work properly, and\r\nthen extend GetRustIndent to keep searching backwards until it finds a\r\nnon-blank line after trimming. This lets it handle the trailing comma\r\ncase properly, as if the comment were never there.\r\n\r\nFixes #14041.", "tree": {"sha": "16799d13f66e7ed1baffa576bb044abe52a8d938", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16799d13f66e7ed1baffa576bb044abe52a8d938"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7d877ce620cc26a9d8549154c9e3e81456212d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7d877ce620cc26a9d8549154c9e3e81456212d5", "html_url": "https://github.com/rust-lang/rust/commit/a7d877ce620cc26a9d8549154c9e3e81456212d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7d877ce620cc26a9d8549154c9e3e81456212d5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b4774dafc6e1470fdd3c29c5ac365a5a1fa4a60", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b4774dafc6e1470fdd3c29c5ac365a5a1fa4a60", "html_url": "https://github.com/rust-lang/rust/commit/5b4774dafc6e1470fdd3c29c5ac365a5a1fa4a60"}, {"sha": "0381ad4fdf27c36a033dacd924fbf7c359298c87", "url": "https://api.github.com/repos/rust-lang/rust/commits/0381ad4fdf27c36a033dacd924fbf7c359298c87", "html_url": "https://github.com/rust-lang/rust/commit/0381ad4fdf27c36a033dacd924fbf7c359298c87"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "b9d6330c8bb7f01330640afd195c584ae088520f", "filename": "src/etc/vim/indent/rust.vim", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a7d877ce620cc26a9d8549154c9e3e81456212d5/src%2Fetc%2Fvim%2Findent%2Frust.vim", "raw_url": "https://github.com/rust-lang/rust/raw/a7d877ce620cc26a9d8549154c9e3e81456212d5/src%2Fetc%2Fvim%2Findent%2Frust.vim", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvim%2Findent%2Frust.vim?ref=a7d877ce620cc26a9d8549154c9e3e81456212d5", "patch": "@@ -13,7 +13,7 @@ setlocal cindent\n setlocal cinoptions=L0,(0,Ws,JN,j1\n setlocal cinkeys=0{,0},!^F,o,O,0[,0]\n \" Don't think cinwords will actually do anything at all... never mind\n-setlocal cinwords=do,for,if,else,while,loop,impl,mod,unsafe,trait,struct,enum,fn,extern\n+setlocal cinwords=for,if,else,while,loop,impl,mod,unsafe,trait,struct,enum,fn,extern\n \n \" Some preliminary settings\n setlocal nolisp\t\t\" Make sure lisp indenting doesn't supersede us\n@@ -40,12 +40,12 @@ function! s:get_line_trimmed(lnum)\n \t\t\" If the last character in the line is a comment, do a binary search for\n \t\t\" the start of the comment.  synID() is slow, a linear search would take\n \t\t\" too long on a long line.\n-\t\tif synIDattr(synID(a:lnum, line_len, 1), \"name\") =~ \"Comment\\|Todo\"\n+\t\tif synIDattr(synID(a:lnum, line_len, 1), \"name\") =~ 'Comment\\|Todo'\n \t\t\tlet min = 1\n \t\t\tlet max = line_len\n \t\t\twhile min < max\n \t\t\t\tlet col = (min + max) / 2\n-\t\t\t\tif synIDattr(synID(a:lnum, col, 1), \"name\") =~ \"Comment\\|Todo\"\n+\t\t\t\tif synIDattr(synID(a:lnum, col, 1), \"name\") =~ 'Comment\\|Todo'\n \t\t\t\t\tlet max = col\n \t\t\t\telse\n \t\t\t\t\tlet min = col + 1\n@@ -87,10 +87,10 @@ function GetRustIndent(lnum)\n \t\tif synname == \"rustString\"\n \t\t\t\" If the start of the line is in a string, don't change the indent\n \t\t\treturn -1\n-\t\telseif synname =~ \"\\\\(Comment\\\\|Todo\\\\)\"\n-\t\t\t\t\t\\ && line !~ \"^\\\\s*/\\\\*\"  \" not /* opening line\n+\t\telseif synname =~ '\\(Comment\\|Todo\\)'\n+\t\t\t\t\t\\ && line !~ '^\\s*/\\*'  \" not /* opening line\n \t\t\tif synname =~ \"CommentML\" \" multi-line\n-\t\t\t\tif line !~ \"^\\\\s*\\\\*\" && getline(a:lnum - 1) =~ \"^\\\\s*/\\\\*\"\n+\t\t\t\tif line !~ '^\\s*\\*' && getline(a:lnum - 1) =~ '^\\s*/\\*'\n \t\t\t\t\t\" This is (hopefully) the line after a /*, and it has no\n \t\t\t\t\t\" leader, so the correct indentation is that of the\n \t\t\t\t\t\" previous line.\n@@ -115,11 +115,16 @@ function GetRustIndent(lnum)\n \t\" };\n \n \t\" Search backwards for the previous non-empty line.\n-\tlet prevline = s:get_line_trimmed(prevnonblank(a:lnum - 1))\n+\tlet prevlinenum = prevnonblank(a:lnum - 1)\n+\tlet prevline = s:get_line_trimmed(prevlinenum)\n+\twhile prevlinenum > 1 && prevline !~ '[^[:blank:]]'\n+\t\tlet prevlinenum = prevnonblank(prevlinenum - 1)\n+\t\tlet prevline = s:get_line_trimmed(prevlinenum)\n+\tendwhile\n \tif prevline[len(prevline) - 1] == \",\"\n-\t\t\t\t\\ && s:get_line_trimmed(a:lnum) !~ \"^\\\\s*[\\\\[\\\\]{}]\"\n-\t\t\t\t\\ && prevline !~ \"^\\\\s*fn\\\\s\"\n-\t\t\t\t\\ && prevline !~ \"([^()]\\\\+,$\"\n+\t\t\t\t\\ && s:get_line_trimmed(a:lnum) !~ '^\\s*[\\[\\]{}]'\n+\t\t\t\t\\ && prevline !~ '^\\s*fn\\s'\n+\t\t\t\t\\ && prevline !~ '([^()]\\+,$'\n \t\t\" Oh ho! The previous line ended in a comma! I bet cindent will try to\n \t\t\" take this too far... For now, let's normally use the previous line's\n \t\t\" indent.\n@@ -166,7 +171,7 @@ function GetRustIndent(lnum)\n \t\" column zero)\n \n \tcall cursor(a:lnum, 1)\n-\tif searchpair('{\\|(', '', '}\\|)', 'nbW'\n+\tif searchpair('{\\|(', '', '}\\|)', 'nbW',\n \t\t\t\t\\ 's:is_string_comment(line(\".\"), col(\".\"))') == 0\n \t\tif searchpair('\\[', '', '\\]', 'nbW',\n \t\t\t\t\t\\ 's:is_string_comment(line(\".\"), col(\".\"))') == 0"}]}