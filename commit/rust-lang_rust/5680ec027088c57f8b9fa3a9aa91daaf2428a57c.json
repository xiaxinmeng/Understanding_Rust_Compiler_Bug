{"sha": "5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2ODBlYzAyNzA4OGM1N2Y4YjlmYTNhOWFhOTFkYWFmMjQyOGE1N2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-28T23:21:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-28T23:21:41Z"}, "message": "auto merge of #5113 : alexcrichton/rust/issue-4366, r=catamorphism\n\nThe first two commits are the actual fix going into place, and the last is just dealing with the fallout in the rest of the compiler.\r\n\r\nThe test added in the first two commits had 0 failures before this patch, and if the glob imports were changed to explicit imports then the errors showed up. Due to this behavior, I figured that the desired behavior was for glob imports to not accidentally leak a lot of non-public imports/functions/types into other modules.\r\n\r\nThere was quite a lot of fallout, and it all passes `make check` locally, but I doubt that it will pass on all platforms because there's probably some guarded off thing I missed.\r\n\r\nI plan on making another patch soon which changes the default level of `unused_imports` to `warn` which will hopefully reduce a lot of the `use` noise throughout. In conjunction with #5104, and a few minor fixes, I think that the default level of `warn` is actually really usable.", "tree": {"sha": "e66d0dc80f778fb399c83a36d6acd88ea001186b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e66d0dc80f778fb399c83a36d6acd88ea001186b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "html_url": "https://github.com/rust-lang/rust/commit/5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d30af1ebe4a803d86f47106c90ec0dc20a9d024", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d30af1ebe4a803d86f47106c90ec0dc20a9d024", "html_url": "https://github.com/rust-lang/rust/commit/0d30af1ebe4a803d86f47106c90ec0dc20a9d024"}, {"sha": "2df07ddc250b64151401e9b8569a6c7ad5c9b34f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2df07ddc250b64151401e9b8569a6c7ad5c9b34f", "html_url": "https://github.com/rust-lang/rust/commit/2df07ddc250b64151401e9b8569a6c7ad5c9b34f"}], "stats": {"total": 840, "additions": 547, "deletions": 293}, "files": [{"sha": "c2a39cfdcc3e6de8b50af3d6cd9225abdb008f44", "filename": "src/libcore/hashmap.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibcore%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibcore%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhashmap.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -10,14 +10,12 @@\n \n //! Sendable hash maps.\n \n-use container::{Container, Mutable, Map, Set};\n-use cmp::Eq;\n-use hash::Hash;\n-use to_bytes::IterBytes;\n-\n /// Open addressing with linear probing.\n pub mod linear {\n-    use super::*;\n+    use container::{Container, Mutable, Map, Set};\n+    use cmp::Eq;\n+    use hash::Hash;\n+    use to_bytes::IterBytes;\n     use iter::BaseIter;\n     use hash::Hash;\n     use iter;\n@@ -752,7 +750,8 @@ mod test_map {\n \n #[test]\n mod test_set {\n-    use super::*;\n+    use hashmap::linear;\n+    use container::{Container, Mutable, Map, Set};\n     use vec;\n \n     #[test]"}, {"sha": "8b6d27496d9097ca585d5d0da4573607efa8a486", "filename": "src/libcore/os.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -1021,10 +1021,10 @@ extern {\n pub mod consts {\n \n     #[cfg(unix)]\n-    use os::consts::unix::*;\n+    pub use os::consts::unix::*;\n \n     #[cfg(windows)]\n-    use os::consts::windows::*;\n+    pub use os::consts::windows::*;\n \n     pub mod unix {\n         pub const FAMILY: &str = \"unix\";\n@@ -1035,19 +1035,19 @@ pub mod consts {\n     }\n \n     #[cfg(target_os = \"macos\")]\n-    use os::consts::macos::*;\n+    pub use os::consts::macos::*;\n \n     #[cfg(target_os = \"freebsd\")]\n-    use os::consts::freebsd::*;\n+    pub use os::consts::freebsd::*;\n \n     #[cfg(target_os = \"linux\")]\n-    use os::consts::linux::*;\n+    pub use os::consts::linux::*;\n \n     #[cfg(target_os = \"android\")]\n-    use os::consts::android::*;\n+    pub use os::consts::android::*;\n \n     #[cfg(target_os = \"win32\")]\n-    use os::consts::win32::*;\n+    pub use os::consts::win32::*;\n \n     pub mod macos {\n         pub const SYSNAME: &str = \"macos\";\n@@ -1086,13 +1086,13 @@ pub mod consts {\n \n \n     #[cfg(target_arch = \"x86\")]\n-    use os::consts::x86::*;\n+    pub use os::consts::x86::*;\n \n     #[cfg(target_arch = \"x86_64\")]\n-    use os::consts::x86_64::*;\n+    pub use os::consts::x86_64::*;\n \n     #[cfg(target_arch = \"arm\")]\n-    use os::consts::arm::*;\n+    pub use os::consts::arm::*;\n \n     pub mod x86 {\n         pub const ARCH: &str = \"x86\";"}, {"sha": "6ee6d282841c73535ca37e5b111785b5fe3be83d", "filename": "src/libcore/str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -2375,6 +2375,7 @@ impl OwnedStr for ~str {\n #[cfg(test)]\n mod tests {\n     use char;\n+    use option::Some;\n     use debug;\n     use libc::c_char;\n     use libc;"}, {"sha": "4d28c769b184fb7a2d04c8fd2e0e8231a406975b", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -1444,7 +1444,7 @@ pub fn each2<U, T>(v1: &[U], v2: &[T], f: fn(u: &U, t: &T) -> bool) {\n  * The total number of permutations produced is `len(v)!`.  If `v` contains\n  * repeated elements, then some permutations are repeated.\n  */\n-pure fn each_permutation<T:Copy>(v: &[T], put: fn(ts: &[T]) -> bool) {\n+pub pure fn each_permutation<T:Copy>(v: &[T], put: fn(ts: &[T]) -> bool) {\n     let ln = len(v);\n     if ln <= 1 {\n         put(v);\n@@ -2427,6 +2427,7 @@ impl<A:Copy> iter::CopyableNonstrictIter<A> for @[A] {\n mod tests {\n     use option::{None, Option, Some};\n     use option;\n+    use sys;\n     use vec::*;\n \n     fn square(n: uint) -> uint { return n * n; }"}, {"sha": "9bdf69f4c88b0d0dc2025dcf7b86c8462f73c2b1", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -230,6 +230,7 @@ use middle::liveness;\n use middle::mem_categorization::*;\n use middle::region;\n use middle::ty;\n+use middle::typeck;\n use middle::moves;\n use util::common::{indenter, stmt_set};\n use util::ppaux::{expr_repr, note_and_explain_region};\n@@ -239,6 +240,7 @@ use core::cmp;\n use core::dvec::DVec;\n use core::io;\n use core::result::{Result, Ok, Err};\n+use core::to_bytes;\n use std::list::{List, Cons, Nil};\n use std::list;\n use std::oldmap::{HashMap, Set};"}, {"sha": "924886881efb61f04688ad66928473142d6ce005", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -622,6 +622,19 @@ pub impl NameBindings {\n         }\n     }\n \n+    fn defined_in_public_namespace(namespace: Namespace) -> bool {\n+        match namespace {\n+            TypeNS => match self.type_def {\n+                Some(def) => def.privacy != Private,\n+                None => false\n+            },\n+            ValueNS => match self.value_def {\n+                Some(def) => def.privacy != Private,\n+                None => false\n+            }\n+        }\n+    }\n+\n     fn def_for_namespace(namespace: Namespace) -> Option<def> {\n         match namespace {\n             TypeNS => {\n@@ -2480,7 +2493,7 @@ pub impl Resolver {\n \n             // Here we merge two import resolutions.\n             match module_.import_resolutions.find(&ident) {\n-                None => {\n+                None if target_import_resolution.privacy == Public => {\n                     // Simple: just copy the old import resolution.\n                     let new_import_resolution =\n                         @mut ImportResolution(privacy,\n@@ -2494,6 +2507,7 @@ pub impl Resolver {\n                     module_.import_resolutions.insert\n                         (ident, new_import_resolution);\n                 }\n+                None => { /* continue ... */ }\n                 Some(dest_import_resolution) => {\n                     // Merge the two import resolutions at a finer-grained\n                     // level.\n@@ -2537,7 +2551,6 @@ pub impl Resolver {\n                 }\n             }\n \n-\n             debug!(\"(resolving glob import) writing resolution `%s` in `%s` \\\n                     to `%s`, privacy=%?\",\n                    *self.session.str_of(ident),\n@@ -2546,12 +2559,12 @@ pub impl Resolver {\n                    dest_import_resolution.privacy);\n \n             // Merge the child item into the import resolution.\n-            if (*name_bindings).defined_in_namespace(ValueNS) {\n+            if (*name_bindings).defined_in_public_namespace(ValueNS) {\n                 debug!(\"(resolving glob import) ... for value target\");\n                 dest_import_resolution.value_target =\n                     Some(Target(containing_module, name_bindings));\n             }\n-            if (*name_bindings).defined_in_namespace(TypeNS) {\n+            if (*name_bindings).defined_in_public_namespace(TypeNS) {\n                 debug!(\"(resolving glob import) ... for type target\");\n                 dest_import_resolution.type_target =\n                     Some(Target(containing_module, name_bindings));\n@@ -2756,6 +2769,8 @@ pub impl Resolver {\n                                namespace);\n                     }\n                     Some(target) => {\n+                        debug!(\"(resolving item in lexical scope) using \\\n+                                import resolution\");\n                         import_resolution.state.used = true;\n                         return Success(copy target);\n                     }"}, {"sha": "2f920378087362841caa51cc22e2f8a36bfb32af", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -145,9 +145,10 @@\n use core::prelude::*;\n \n use back::abi;\n-use lib::llvm::llvm;\n-use lib::llvm::{ValueRef, BasicBlockRef};\n+use lib;\n+use lib::llvm::{llvm, ValueRef, BasicBlockRef};\n use middle::const_eval;\n+use middle::borrowck::root_map_key;\n use middle::pat_util::*;\n use middle::resolve::DefMap;\n use middle::trans::base::*;\n@@ -156,20 +157,26 @@ use middle::trans::callee;\n use middle::trans::common::*;\n use middle::trans::consts;\n use middle::trans::controlflow;\n+use middle::trans::datum;\n use middle::trans::datum::*;\n use middle::trans::expr::Dest;\n use middle::trans::expr;\n use middle::trans::glue;\n+use middle::trans::tvec;\n+use middle::trans::type_of;\n+use middle::ty;\n use util::common::indenter;\n \n use core::dvec::DVec;\n use core::dvec;\n+use core::libc::c_ulonglong;\n use std::oldmap::HashMap;\n use syntax::ast::def_id;\n use syntax::ast;\n-use syntax::ast_util::{dummy_sp, path_to_ident};\n+use syntax::ast::ident;\n+use syntax::ast_util::path_to_ident;\n use syntax::ast_util;\n-use syntax::codemap::span;\n+use syntax::codemap::{span, dummy_sp};\n use syntax::print::pprust::pat_to_str;\n \n // An option identifying a literal: either a unit-like struct or an"}, {"sha": "47c0021fd790147dc801c2fae9739458a8db5ae7", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -44,6 +44,7 @@ use middle::borrowck::RootInfo;\n use middle::pat_util::*;\n use middle::resolve;\n use middle::trans::_match;\n+use middle::trans::base;\n use middle::trans::build::*;\n use middle::trans::callee;\n use middle::trans::common::*;\n@@ -56,12 +57,15 @@ use middle::trans::foreign;\n use middle::trans::glue;\n use middle::trans::inline;\n use middle::trans::machine;\n+use middle::trans::machine::llsize_of;\n use middle::trans::meth;\n use middle::trans::monomorphize;\n use middle::trans::reachable;\n use middle::trans::shape::*;\n use middle::trans::tvec;\n+use middle::trans::type_of;\n use middle::trans::type_of::*;\n+use middle::ty;\n use middle::ty::arg;\n use util::common::indenter;\n use util::ppaux::{ty_to_str, ty_to_short_str};\n@@ -77,6 +81,7 @@ use core::option;\n use core::uint;\n use std::oldmap::HashMap;\n use std::{oldmap, time, list};\n+use syntax::ast::ident;\n use syntax::ast_map::{path, path_elt_to_str, path_mod, path_name};\n use syntax::ast_util::{def_id_of_def, local_def, path_to_ident};\n use syntax::attr;"}, {"sha": "7ac54518d3748bc277f1ae406376eb68adad8224", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -10,6 +10,7 @@\n \n \n use codemap::span;\n+use lib;\n use lib::llvm::llvm;\n use lib::llvm::{CallConv, TypeKind, AtomicBinOp, AtomicOrdering};\n use lib::llvm::{Opcode, IntPredicate, RealPredicate, True, False};\n@@ -18,9 +19,12 @@ use libc::{c_uint, c_int, c_ulonglong};\n use middle::trans::common::*;\n use middle::trans::machine::llsize_of_real;\n \n+use core::prelude::*;\n use core::cast::transmute;\n use core::cast;\n use core::libc;\n+use core::option::Some;\n+use core::ptr;\n use core::str;\n use core::vec;\n use std::oldmap::HashMap;"}, {"sha": "269fe344fea8c6de17805840d3345a08b5b4c823", "filename": "src/librustc/middle/trans/cabi.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -13,6 +13,10 @@ use middle::trans::base::*;\n use middle::trans::build::*;\n use middle::trans::common::*;\n \n+use core::libc::c_uint;\n+use core::option;\n+use core::vec;\n+\n pub trait ABIInfo {\n     fn compute_info(&self,\n                     atys: &[TypeRef],\n@@ -28,7 +32,7 @@ pub struct LLVMType {\n pub struct FnType {\n     arg_tys: ~[LLVMType],\n     ret_ty: LLVMType,\n-    attrs: ~[Option<Attribute>],\n+    attrs: ~[option::Option<Attribute>],\n     sret: bool\n }\n \n@@ -93,7 +97,7 @@ pub impl FnType {\n                       llargbundle: ValueRef, llretval: ValueRef) {\n         for vec::eachi(self.attrs) |i, a| {\n             match *a {\n-                Some(attr) => {\n+                option::Some(attr) => {\n                     unsafe {\n                         llvm::LLVMAddInstrAttribute(\n                             llretval, (i + 1u) as c_uint,"}, {"sha": "1dc7059699460fde3447782649728c599867ec2c", "filename": "src/librustc/middle/trans/cabi_x86_64.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -18,6 +18,14 @@ use lib::llvm::struct_tys;\n use middle::trans::common::*;\n use middle::trans::cabi::*;\n \n+use core::cmp;\n+use core::libc::c_uint;\n+use core::option;\n+use core::option::Option;\n+use core::ptr;\n+use core::uint;\n+use core::vec;\n+\n enum x86_64_reg_class {\n     no_class,\n     integer_class,"}, {"sha": "11f1eaba825ccc8c58ad184bb8867e7b70d8be04", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -18,21 +18,33 @@\n \n use core::prelude::*;\n \n-use lib::llvm::ValueRef;\n-use middle::trans::base::{get_item_val, trans_external_path};\n+use back::abi;\n+use driver::session;\n+use lib;\n+use lib::llvm::{ValueRef, TypeRef};\n+use lib::llvm::llvm;\n+use metadata::csearch;\n+use middle::trans::base;\n+use middle::trans::base::*;\n use middle::trans::build::*;\n use middle::trans::callee;\n use middle::trans::closure;\n-use middle::trans::common::{block, node_id_type_params};\n+use middle::trans::common;\n+use middle::trans::common::*;\n use middle::trans::datum::*;\n use middle::trans::datum::Datum;\n+use middle::trans::expr;\n+use middle::trans::glue;\n use middle::trans::inline;\n use middle::trans::meth;\n use middle::trans::monomorphize;\n+use middle::trans::type_of;\n+use middle::ty;\n use middle::typeck;\n use util::common::indenter;\n \n use syntax::ast;\n+use syntax::ast_map;\n use syntax::print::pprust::{expr_to_str, stmt_to_str, path_to_str};\n use syntax::visit;\n "}, {"sha": "949318d1723b48f8c2b7747a660470900a522b17", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -13,8 +13,7 @@ use core::prelude::*;\n use back::abi;\n use back::link::{mangle_internal_name_by_path_and_seq};\n use back::link::{mangle_internal_name_by_path};\n-use lib::llvm::llvm;\n-use lib::llvm::{ValueRef, TypeRef};\n+use lib::llvm::{llvm, ValueRef, TypeRef};\n use middle::moves;\n use middle::trans::base::*;\n use middle::trans::build::*;\n@@ -25,6 +24,7 @@ use middle::trans::expr;\n use middle::trans::glue;\n use middle::trans::machine;\n use middle::trans::type_of::*;\n+use middle::ty;\n use util::ppaux::ty_to_str;\n \n use core::libc::c_uint;\n@@ -33,6 +33,7 @@ use syntax::ast;\n use syntax::ast_map::{path, path_mod, path_name};\n use syntax::ast_util;\n use syntax::codemap::span;\n+use syntax::parse::token::special_idents;\n use syntax::print::pprust::expr_to_str;\n \n // ___Good to know (tm)__________________________________________________\n@@ -185,7 +186,7 @@ pub fn allocate_cbox(bcx: block, sigil: ast::Sigil, cdata_ty: ty::t)\n         }\n         ast::BorrowedSigil => {\n             let cbox_ty = tuplify_box_ty(tcx, cdata_ty);\n-            let llbox = base::alloc_ty(bcx, cbox_ty);\n+            let llbox = alloc_ty(bcx, cbox_ty);\n             nuke_ref_count(bcx, llbox);\n             rslt(bcx, llbox)\n         }\n@@ -342,7 +343,7 @@ pub fn load_environment(fcx: fn_ctxt,\n     let bcx = raw_block(fcx, false, llloadenv);\n \n     // Load a pointer to the closure data, skipping over the box header:\n-    let llcdata = base::opaque_box_body(bcx, cdata_ty, fcx.llenv);\n+    let llcdata = opaque_box_body(bcx, cdata_ty, fcx.llenv);\n \n     // Populate the upvars from the environment.\n     let mut i = 0u;"}, {"sha": "5ce20ac23bcf8ec668617f747c92a78060edc618", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -157,7 +157,7 @@ pub fn BuilderRef_res(B: BuilderRef) -> BuilderRef_res {\n     }\n }\n \n-type ExternMap = HashMap<@str, ValueRef>;\n+pub type ExternMap = HashMap<@str, ValueRef>;\n \n // Crate context.  Every crate we compile has one of these.\n pub struct CrateContext {"}, {"sha": "36cda3dfbe97780e7dd520e823229aaae3d9061d", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -10,14 +10,18 @@\n \n use core::prelude::*;\n \n+use lib::llvm::{llvm, ValueRef, True, TypeRef, False};\n use middle::const_eval;\n+use middle::trans::base;\n use middle::trans::base::get_insn_ctxt;\n use middle::trans::common::*;\n use middle::trans::consts;\n use middle::trans::expr;\n use middle::trans::machine;\n+use middle::trans::type_of;\n use middle::ty;\n \n+use core::libc::c_uint;\n use syntax::{ast, ast_util, codemap, ast_map};\n \n pub fn const_lit(cx: @CrateContext, e: @ast::expr, lit: ast::lit)"}, {"sha": "9b282e71b3e170f1bd42e45e99ac65d1ff125d33", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -10,13 +10,28 @@\n \n use core::prelude::*;\n \n-use lib::llvm::ValueRef;\n+use back::link;\n+use lib;\n+use lib::llvm::*;\n use middle::trans::base::*;\n+use middle::trans::build::*;\n use middle::trans::callee;\n use middle::trans::common::*;\n use middle::trans::datum::*;\n+use middle::trans::debuginfo;\n+use middle::trans::expr;\n+use middle::trans::type_of::*;\n+use middle::ty;\n+use util::common::indenter;\n+use util::ppaux;\n \n use core::str;\n+use syntax::ast;\n+use syntax::ast::ident;\n+use syntax::ast_map::path_mod;\n+use syntax::ast_util;\n+use syntax::codemap::span;\n+use syntax::print::pprust::expr_to_str;\n \n pub fn trans_block(bcx: block, b: &ast::blk, dest: expr::Dest) -> block {\n     let _icx = bcx.insn_ctxt(\"trans_block\");"}, {"sha": "94c90aaad6d866c15d585846aabcef1c4d8429d5", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -87,21 +87,29 @@\n \n use core::prelude::*;\n \n+use lib;\n use lib::llvm::ValueRef;\n use middle::borrowck::{RootInfo, root_map_key};\n use middle::trans::base::*;\n use middle::trans::build::*;\n+use middle::trans::callee;\n use middle::trans::common::*;\n use middle::trans::common;\n+use middle::trans::expr;\n+use middle::trans::glue;\n use middle::trans::tvec;\n+use middle::trans::type_of;\n+use middle::ty;\n use middle::typeck;\n use util::common::indenter;\n use util::ppaux::ty_to_str;\n \n use core::cmp;\n use core::option;\n+use core::to_bytes;\n use core::uint;\n use core::vec;\n+use syntax::ast;\n use syntax::parse::token::special_idents;\n \n #[deriving_eq]\n@@ -326,7 +334,7 @@ pub impl Datum {\n                 Store(bcx, self.val, dst);\n             }\n             ByRef => {\n-                base::memcpy_ty(bcx, dst, self.val, self.ty);\n+                memcpy_ty(bcx, dst, self.val, self.ty);\n             }\n         }\n \n@@ -354,7 +362,7 @@ pub impl Datum {\n \n         match self.mode {\n             ByRef => {\n-                base::memcpy_ty(bcx, dst, self.val, self.ty);\n+                memcpy_ty(bcx, dst, self.val, self.ty);\n             }\n             ByValue => {\n                 Store(bcx, self.val, dst);\n@@ -540,7 +548,7 @@ pub impl Datum {\n \n         let scratch = scratch_datum(bcx, self.ty, true);\n         self.copy_to_datum(bcx, INIT, scratch);\n-        base::add_root_cleanup(bcx, root_info, scratch.val, scratch.ty);\n+        add_root_cleanup(bcx, root_info, scratch.val, scratch.ty);\n \n         // If we need to freeze the box, do that now.\n         if root_info.freezes {"}, {"sha": "c6ed190c7c371d9e25530a1d8d4e52a837bc14a7", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -121,27 +121,37 @@ lvalues are *never* stored by value.\n \n use core::prelude::*;\n \n-use lib::llvm::ValueRef;\n+use back::abi;\n+use lib;\n+use lib::llvm::{ValueRef, TypeRef, llvm, True};\n use middle::borrowck::root_map_key;\n use middle::resolve;\n+use middle::trans::_match;\n+use middle::trans::base;\n use middle::trans::base::*;\n+use middle::trans::build::*;\n use middle::trans::callee::{AutorefArg, DoAutorefArg, DontAutorefArg};\n use middle::trans::callee;\n use middle::trans::closure;\n use middle::trans::common::*;\n use middle::trans::consts;\n use middle::trans::controlflow;\n use middle::trans::datum::*;\n+use middle::trans::debuginfo;\n use middle::trans::machine;\n use middle::trans::meth;\n use middle::trans::tvec;\n+use middle::trans::type_of;\n+use middle::ty;\n use middle::ty::struct_mutable_fields;\n use middle::ty::{AutoPtr, AutoBorrowVec, AutoBorrowVecRef, AutoBorrowFn};\n use util::common::indenter;\n use util::ppaux::ty_to_str;\n \n+use std::oldmap::HashMap;\n use syntax::print::pprust::{expr_to_str};\n use syntax::ast;\n+use syntax::codemap;\n use syntax::codemap::spanned;\n \n // Destinations\n@@ -1128,7 +1138,7 @@ fn trans_rec_or_struct(bcx: block,\n                     let fields = ty::struct_mutable_fields(\n                         tcx, variant_id, substs);\n                     let field_lltys = do fields.map |field| {\n-                        type_of(bcx.ccx(),\n+                        type_of::type_of(bcx.ccx(),\n                                 ty::subst_tps(\n                                     tcx, substs.tps, None, field.mt.ty))\n                     };"}, {"sha": "aa44e8b1fe9ebf31017f8b2c311aa19e3f8aeccb", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -11,6 +11,7 @@\n use core::prelude::*;\n \n use back::{link, abi};\n+use driver::session;\n use driver::session::arch_x86_64;\n use driver::session::arch_arm;\n use lib::llvm::{SequentiallyConsistent, Acquire, Release, Xchg};\n@@ -27,11 +28,13 @@ use middle::trans::callee::*;\n use middle::trans::common::*;\n use middle::trans::datum::*;\n use middle::trans::expr::{Dest, Ignore};\n+use middle::trans::machine::llsize_of;\n use middle::trans::glue;\n use middle::trans::machine;\n use middle::trans::shape;\n use middle::trans::type_of::*;\n use middle::trans::type_of;\n+use middle::ty;\n use middle::ty::{FnSig, arg};\n use util::ppaux::ty_to_str;\n "}, {"sha": "96deb2906eb7ce35be6f17440af73c6068d57cbf", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -14,19 +14,32 @@\n \n use core::prelude::*;\n \n-use lib::llvm::{ValueRef, TypeRef};\n+use back::abi;\n+use back::link::*;\n+use driver::session;\n+use lib;\n+use lib::llvm::{llvm, ValueRef, TypeRef, True};\n use middle::trans::base::*;\n use middle::trans::callee;\n use middle::trans::closure;\n use middle::trans::common::*;\n use middle::trans::build::*;\n+use middle::trans::expr;\n+use middle::trans::machine::*;\n use middle::trans::reflect;\n use middle::trans::tvec;\n-use middle::trans::type_of::type_of;\n+use middle::trans::type_of::{type_of, type_of_glue_fn};\n use middle::trans::uniq;\n+use middle::ty;\n+use util::ppaux;\n+use util::ppaux::ty_to_short_str;\n \n use core::io;\n+use core::libc::c_uint;\n use core::str;\n+use std::time;\n+use syntax::ast;\n+use syntax::parse::token::special_idents;\n \n pub fn trans_free(cx: block, v: ValueRef) -> block {\n     let _icx = cx.insn_ctxt(\"trans_free\");\n@@ -218,7 +231,7 @@ pub fn lazily_emit_simplified_tydesc_glue(ccx: @CrateContext,\n     let _icx = ccx.insn_ctxt(\"lazily_emit_simplified_tydesc_glue\");\n     let simpl = simplified_glue_type(ccx.tcx, field, ti.ty);\n     if simpl != ti.ty {\n-        let simpl_ti = base::get_tydesc(ccx, simpl);\n+        let simpl_ti = get_tydesc(ccx, simpl);\n         lazily_emit_tydesc_glue(ccx, field, simpl_ti);\n         if field == abi::tydesc_field_take_glue {\n             ti.take_glue =\n@@ -661,7 +674,7 @@ pub fn declare_tydesc(ccx: @CrateContext, t: ty::t) -> @mut tydesc_info {\n     if ccx.sess.count_type_sizes() {\n         io::println(fmt!(\"%u\\t%s\",\n                          llsize_of_real(ccx, llty),\n-                         ty_to_str(ccx.tcx, t)));\n+                         ppaux::ty_to_str(ccx.tcx, t)));\n     }\n \n     let llsize = llsize_of(ccx, llty);\n@@ -675,7 +688,7 @@ pub fn declare_tydesc(ccx: @CrateContext, t: ty::t) -> @mut tydesc_info {\n     };\n     // XXX: Bad copy.\n     note_unique_llvm_symbol(ccx, copy name);\n-    log(debug, fmt!(\"+++ declare_tydesc %s %s\", ty_to_str(ccx.tcx, t), name));\n+    debug!(\"+++ declare_tydesc %s %s\", ppaux::ty_to_str(ccx.tcx, t), name);\n     let gvar = str::as_c_str(name, |buf| {\n         unsafe {\n             llvm::LLVMAddGlobal(ccx.llmod, ccx.tydesc_type, buf)\n@@ -709,7 +722,7 @@ pub fn declare_generic_glue(ccx: @CrateContext, t: ty::t, llfnty: TypeRef,\n     } else {\n         fn_nm = mangle_internal_name_by_seq(ccx, (~\"glue_\" + name));\n     }\n-    debug!(\"%s is for type %s\", fn_nm, ty_to_str(ccx.tcx, t));\n+    debug!(\"%s is for type %s\", fn_nm, ppaux::ty_to_str(ccx.tcx, t));\n     // XXX: Bad copy.\n     note_unique_llvm_symbol(ccx, copy fn_nm);\n     let llfn = decl_cdecl_fn(ccx.llmod, fn_nm, llfnty);"}, {"sha": "7ce36c2b1e2e8f1ee0ff5ed90557dfae0ac6a0c6", "filename": "src/librustc/middle/trans/inline.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -10,6 +10,7 @@\n \n use core::prelude::*;\n \n+use metadata::csearch;\n use middle::astencode;\n use middle::trans::base::{get_insn_ctxt};\n use middle::trans::base::{impl_owned_self, impl_self, no_self};\n@@ -18,6 +19,8 @@ use middle::trans::common::*;\n use middle::trans::common;\n use middle::trans::inline;\n use middle::trans::monomorphize;\n+use middle::ty;\n+use util::ppaux::ty_to_str;\n \n use core::vec;\n use syntax::ast;"}, {"sha": "8d447f54c200d842e0266b183cd21113276617ca", "filename": "src/librustc/middle/trans/machine.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -11,6 +11,9 @@\n // Information concerning the machine representation of various types.\n \n \n+use lib::llvm::{ModuleRef, ValueRef, TypeRef, BasicBlockRef, BuilderRef};\n+use lib::llvm::{True, False, Bool};\n+use lib::llvm::llvm;\n use middle::trans::common::*;\n use middle::trans::type_of;\n use middle::ty;\n@@ -122,7 +125,7 @@ pub fn llalign_of_min(cx: @CrateContext, t: TypeRef) -> uint {\n pub fn llalign_of(cx: @CrateContext, t: TypeRef) -> ValueRef {\n     unsafe {\n         return llvm::LLVMConstIntCast(\n-            lib::llvm::llvm::LLVMAlignOf(t), cx.int_type, False);\n+            llvm::LLVMAlignOf(t), cx.int_type, False);\n     }\n }\n "}, {"sha": "5e7d13c3ad3f1f1128a8399d66664664400a0182", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -28,14 +28,16 @@ use middle::trans::glue;\n use middle::trans::inline;\n use middle::trans::monomorphize;\n use middle::trans::type_of::*;\n+use middle::ty;\n use middle::ty::arg;\n use middle::typeck;\n+use util::common::indenter;\n use util::ppaux::{ty_to_str, tys_to_str};\n \n use core::libc::c_uint;\n use std::oldmap::HashMap;\n use syntax::ast_map::{path, path_mod, path_name, node_id_to_str};\n-use syntax::ast_util::local_def;\n+use syntax::ast_util;\n use syntax::print::pprust::expr_to_str;\n use syntax::{ast, ast_map};\n \n@@ -351,7 +353,7 @@ pub fn trans_static_method_callee(bcx: block,\n \n pub fn method_from_methods(ms: ~[@ast::method], name: ast::ident)\n     -> Option<ast::def_id> {\n-    ms.find(|m| m.ident == name).map(|m| local_def(m.id))\n+    ms.find(|m| m.ident == name).map(|m| ast_util::local_def(m.id))\n }\n \n pub fn method_with_name(ccx: @CrateContext, impl_id: ast::def_id,\n@@ -725,7 +727,7 @@ pub fn trans_trait_callee_from_llval(bcx: block,\n \n     // Load the function from the vtable and cast it to the expected type.\n     debug!(\"(translating trait callee) loading method\");\n-    let llcallee_ty = type_of::type_of_fn_from_ty(ccx, callee_ty);\n+    let llcallee_ty = type_of_fn_from_ty(ccx, callee_ty);\n     let mptr = Load(bcx, GEPi(bcx, llvtable, [0u, n_method]));\n     let mptr = PointerCast(bcx, mptr, T_ptr(llcallee_ty));\n \n@@ -885,8 +887,7 @@ pub fn trans_trait_cast(bcx: block,\n                 // Just store the pointer into the pair.\n                 llboxdest = PointerCast(bcx,\n                                         llboxdest,\n-                                        T_ptr(type_of::type_of(bcx.ccx(),\n-                                                               v_ty)));\n+                                        T_ptr(type_of(bcx.ccx(), v_ty)));\n                 bcx = expr::trans_into(bcx, val, SaveIn(llboxdest));\n             }\n         }\n@@ -896,7 +897,7 @@ pub fn trans_trait_cast(bcx: block,\n             let mut llvaldest = GEPi(bcx, lldest, [0, 1]);\n             llvaldest = PointerCast(bcx,\n                                     llvaldest,\n-                                    T_ptr(type_of::type_of(bcx.ccx(), v_ty)));\n+                                    T_ptr(type_of(bcx.ccx(), v_ty)));\n             bcx = expr::trans_into(bcx, val, SaveIn(llvaldest));\n \n             // Get the type descriptor of the wrapped value and store it into"}, {"sha": "30a42210a13b919e8ffcbc7ec681a0522e8b88bd", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -11,6 +11,8 @@\n use core::prelude::*;\n \n use back::link::mangle_exported_name;\n+use driver::session;\n+use lib::llvm::ValueRef;\n use middle::trans::base::{get_insn_ctxt};\n use middle::trans::base::{set_inline_hint_if_appr, set_inline_hint};\n use middle::trans::base::{trans_enum_variant, trans_struct_dtor};\n@@ -26,12 +28,15 @@ use middle::trans::shape;\n use middle::trans::type_of::type_of_fn_from_ty;\n use middle::trans::type_of;\n use middle::trans::type_use;\n+use middle::ty;\n use middle::ty::{FnSig};\n use middle::typeck;\n+use util::ppaux::ty_to_str;\n \n use core::option;\n use core::vec;\n use syntax::ast;\n+use syntax::ast_map;\n use syntax::ast_map::{path, path_mod, path_name};\n use syntax::ast_util::local_def;\n use syntax::parse::token::special_idents;"}, {"sha": "a8fb909a5a0a1bdd40170355f1c8ad8163cde295", "filename": "src/librustc/middle/trans/reachable.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -21,11 +21,13 @@ use middle::resolve;\n use middle::ty;\n use middle::typeck;\n \n-use core::vec;\n+use core::prelude::*;\n use std::oldmap::HashMap;\n+use syntax::ast;\n use syntax::ast::*;\n use syntax::ast_util::def_id_of_def;\n use syntax::attr;\n+use syntax::codemap;\n use syntax::print::pprust::expr_to_str;\n use syntax::{visit, ast_util, ast_map};\n "}, {"sha": "dcfa897ab606a1a8e2e340ff3238b7fe9b63b13a", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -22,8 +22,11 @@ use middle::trans::glue;\n use middle::trans::machine;\n use middle::trans::meth;\n use middle::trans::type_of::*;\n+use middle::ty;\n use util::ppaux::ty_to_str;\n \n+use core::option::None;\n+use core::vec;\n use std::oldmap::HashMap;\n use syntax::ast::def_id;\n use syntax::ast;\n@@ -60,7 +63,7 @@ pub impl Reflector {\n     }\n \n     fn c_size_and_align(&mut self, t: ty::t) -> ~[ValueRef] {\n-        let tr = type_of::type_of(self.bcx.ccx(), t);\n+        let tr = type_of(self.bcx.ccx(), t);\n         let s = machine::llsize_of_real(self.bcx.ccx(), tr);\n         let a = machine::llalign_of_min(self.bcx.ccx(), tr);\n         return ~[self.c_uint(s),\n@@ -351,7 +354,7 @@ pub fn emit_calls_to_trait_visit_ty(bcx: block,\n     let final = sub_block(bcx, ~\"final\");\n     assert bcx.ccx().tcx.intrinsic_defs.contains_key(&tydesc);\n     let (_, tydesc_ty) = bcx.ccx().tcx.intrinsic_defs.get(&tydesc);\n-    let tydesc_ty = type_of::type_of(bcx.ccx(), tydesc_ty);\n+    let tydesc_ty = type_of(bcx.ccx(), tydesc_ty);\n     let mut r = Reflector {\n         visitor_val: visitor_val,\n         visitor_methods: ty::trait_methods(bcx.tcx(), visitor_trait_id),"}, {"sha": "72e4fa2f4ebed230d1a92175a6d8ccc8f30cc865", "filename": "src/librustc/middle/trans/shape.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -25,6 +25,7 @@ use util::ppaux::ty_to_str;\n \n use core::dvec::DVec;\n use core::option::is_some;\n+use core::str;\n use core::vec;\n use std::oldmap::HashMap;\n use syntax::ast;"}, {"sha": "4ce60daf60f826bce4fd1f1950a37e0524430dc7", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -10,20 +10,27 @@\n \n \n use back::abi;\n-use lib::llvm::{ValueRef, TypeRef};\n+use lib;\n+use lib::llvm::{llvm, ValueRef, TypeRef};\n+use middle::trans::base;\n+use middle::trans::base::*;\n use middle::trans::build::*;\n+use middle::trans::callee;\n use middle::trans::common::*;\n use middle::trans::datum::*;\n use middle::trans::expr::{Dest, Ignore, SaveIn};\n use middle::trans::expr;\n use middle::trans::glue;\n-use middle::trans::shape::{llsize_of, nonzero_llsize_of};\n+use middle::trans::machine::{llsize_of, nonzero_llsize_of};\n use middle::trans::type_of;\n use middle::ty;\n use util::common::indenter;\n use util::ppaux::ty_to_str;\n \n+use core::uint;\n+use core::vec;\n use syntax::ast;\n+use syntax::codemap;\n use syntax::codemap::span;\n use syntax::print::pprust::{expr_to_str};\n \n@@ -81,7 +88,7 @@ pub fn alloc_raw(bcx: block, unit_ty: ty::t,\n     let vecbodyty = ty::mk_mut_unboxed_vec(bcx.tcx(), unit_ty);\n     let vecsize = Add(bcx, alloc, llsize_of(ccx, ccx.opaque_vec_type));\n \n-    let MallocResult {bcx, box: bx, body} =\n+    let base::MallocResult {bcx, box: bx, body} =\n         base::malloc_general_dyn(bcx, vecbodyty, heap, vecsize);\n     Store(bcx, fill, GEPi(bcx, body, [0u, abi::vec_elt_fill]));\n     Store(bcx, alloc, GEPi(bcx, body, [0u, abi::vec_elt_alloc]));\n@@ -91,7 +98,7 @@ pub fn alloc_raw(bcx: block, unit_ty: ty::t,\n \n pub fn alloc_uniq_raw(bcx: block, unit_ty: ty::t,\n                       fill: ValueRef, alloc: ValueRef) -> Result {\n-    alloc_raw(bcx, unit_ty, fill, alloc, heap_for_unique(bcx, unit_ty))\n+    alloc_raw(bcx, unit_ty, fill, alloc, base::heap_for_unique(bcx, unit_ty))\n }\n \n pub fn alloc_vec(bcx: block,\n@@ -305,13 +312,13 @@ pub fn trans_uniq_or_managed_vstore(bcx: block,\n                     let llptrval = PointerCast(bcx, llptrval, T_ptr(T_i8()));\n                     let llsizeval = C_uint(bcx.ccx(), s.len());\n                     let typ = ty::mk_estr(bcx.tcx(), ty::vstore_uniq);\n-                    let lldestval = datum::scratch_datum(bcx, typ, false);\n+                    let lldestval = scratch_datum(bcx, typ, false);\n                     let bcx = callee::trans_lang_call(\n                         bcx,\n                         bcx.tcx().lang_items.strdup_uniq_fn(),\n                         ~[ llptrval, llsizeval ],\n                         expr::SaveIn(lldestval.to_ref_llval(bcx)));\n-                    return datum::DatumBlock {\n+                    return DatumBlock {\n                         bcx: bcx,\n                         datum: lldestval\n                     };\n@@ -508,8 +515,8 @@ pub fn get_base_and_len(bcx: block,\n             (base, len)\n         }\n         ty::vstore_uniq | ty::vstore_box => {\n-            let body = tvec::get_bodyptr(bcx, llval);\n-            (tvec::get_dataptr(bcx, body), tvec::get_fill(bcx, body))\n+            let body = get_bodyptr(bcx, llval);\n+            (get_dataptr(bcx, body), get_fill(bcx, body))\n         }\n     }\n }"}, {"sha": "7d3aa4c24f461a37b4d9e1f1a541f122edc3cb9e", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -11,12 +11,16 @@\n \n use lib::llvm::llvm;\n use lib::llvm::{TypeRef};\n+use middle::trans::base;\n use middle::trans::common::*;\n use middle::trans::common;\n use middle::trans::expr;\n use middle::trans::machine;\n+use middle::ty;\n use util::ppaux;\n \n+use core::option::None;\n+use core::vec;\n use std::oldmap::HashMap;\n use syntax::ast;\n \n@@ -387,7 +391,7 @@ pub fn type_of_dtor(ccx: @CrateContext, self_ty: ty::t) -> TypeRef {\n pub fn type_of_rooted(ccx: @CrateContext, t: ty::t) -> TypeRef {\n     let addrspace = base::get_tydesc(ccx, t).addrspace;\n     debug!(\"type_of_rooted %s in addrspace %u\",\n-           ty_to_str(ccx.tcx, t), addrspace as uint);\n+           ppaux::ty_to_str(ccx.tcx, t), addrspace as uint);\n     return T_root(type_of(ccx, t), addrspace);\n }\n "}, {"sha": "734b4ea53daa987b38262d23fe4f3d8c08ddf25e", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -32,13 +32,17 @@ use metadata::csearch;\n use middle::freevars;\n use middle::trans::common::*;\n use middle::trans::inline;\n+use middle::ty;\n+use middle::typeck;\n \n use core::option;\n+use core::option::{Some, None, Option};\n use core::uint;\n use core::vec;\n use std::list::{List, Cons, Nil};\n use std::list;\n use std::oldmap::HashMap;\n+use syntax::ast;\n use syntax::ast::*;\n use syntax::ast_map;\n use syntax::ast_util;"}, {"sha": "7db7625840461c29a07ce7680f14828230f291cf", "filename": "src/librustc/middle/trans/uniq.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Funiq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftrans%2Funiq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Funiq.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -17,6 +17,7 @@ use middle::trans::common::*;\n use middle::trans::datum::immediate_rvalue;\n use middle::trans::datum;\n use middle::trans::glue;\n+use middle::ty;\n \n use syntax::ast;\n "}, {"sha": "e140bcad11c52851a2612bfe5d10361dd306e5af", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -316,7 +316,7 @@ pub fn super_modes<C:Combine>(\n     ty::unify_mode(tcx, expected_found(self, a, b))\n }\n \n-fn super_args<C:Combine>(\n+pub fn super_args<C:Combine>(\n     self: &C, a: ty::arg, b: ty::arg)\n     -> cres<ty::arg> {\n "}, {"sha": "981d7be3d5f69020baab4de8b22f790a55bae4ec", "filename": "src/librustc/middle/typeck/infer/glb.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -18,9 +18,14 @@ use middle::typeck::infer::lattice::*;\n use middle::typeck::infer::lub::Lub;\n use middle::typeck::infer::sub::Sub;\n use middle::typeck::infer::to_str::InferStr;\n+use middle::typeck::infer::{cres, InferCtxt};\n use middle::typeck::isr_alist;\n+use syntax::ast;\n use syntax::ast::{Many, Once, extern_fn, impure_fn, m_const, m_imm, m_mutbl};\n use syntax::ast::{noreturn, pure_fn, ret_style, return_val, unsafe_fn};\n+use syntax::ast::{Onceness, purity};\n+use syntax::codemap::span;\n+use util::common::{indent, indenter};\n use util::ppaux::mt_to_str;\n \n use std::list;"}, {"sha": "fe12af52d26e1de1ac49f32a3f7e91bd83809c26", "filename": "src/librustc/middle/typeck/infer/lattice.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -34,7 +34,7 @@\n \n use core::prelude::*;\n \n-use middle::ty::{RegionVid, TyVar};\n+use middle::ty::{RegionVid, TyVar, Vid};\n use middle::ty;\n use middle::typeck::isr_alist;\n use middle::typeck::infer::*;\n@@ -46,6 +46,7 @@ use middle::typeck::infer::sub::Sub;\n use middle::typeck::infer::lub::Lub;\n use middle::typeck::infer::glb::Glb;\n use middle::typeck::infer::to_str::InferStr;\n+use util::common::indenter;\n \n use std::list;\n "}, {"sha": "83cbd4c745c0c5f51df41b879e055fb87b769b16", "filename": "src/librustc/middle/typeck/infer/lub.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -17,12 +17,17 @@ use middle::typeck::infer::glb::Glb;\n use middle::typeck::infer::lattice::*;\n use middle::typeck::infer::sub::Sub;\n use middle::typeck::infer::to_str::InferStr;\n+use middle::typeck::infer::{cres, InferCtxt};\n use middle::typeck::isr_alist;\n+use util::common::indent;\n use util::ppaux::mt_to_str;\n \n use std::list;\n+use syntax::ast;\n use syntax::ast::{Many, Once, extern_fn, m_const, impure_fn, noreturn};\n use syntax::ast::{pure_fn, ret_style, return_val, unsafe_fn};\n+use syntax::ast::{Onceness, purity};\n+use syntax::codemap::span;\n \n pub enum Lub = CombineFields;  // least-upper-bound: common supertype\n "}, {"sha": "aaaf3b425c227b928087cd282a3446d32552da84", "filename": "src/librustc/middle/typeck/infer/sub.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -11,6 +11,7 @@\n use core::prelude::*;\n \n use middle::ty;\n+use middle::ty::TyVar;\n use middle::typeck::check::regionmanip::replace_bound_regions_in_fn_sig;\n use middle::typeck::infer::combine::*;\n use middle::typeck::infer::cres;\n@@ -19,11 +20,14 @@ use middle::typeck::infer::InferCtxt;\n use middle::typeck::infer::lub::Lub;\n use middle::typeck::infer::to_str::InferStr;\n use middle::typeck::infer::unify::*;\n+use util::common::{indent, indenter};\n use util::ppaux::bound_region_to_str;\n \n use std::list::Nil;\n use std::list;\n-use syntax::ast::{m_const, purity, ret_style};\n+use syntax::ast;\n+use syntax::ast::{Onceness, m_const, purity, ret_style};\n+use syntax::codemap::span;\n \n \n pub enum Sub = CombineFields;  // \"subtype\", \"subregion\" etc"}, {"sha": "11eb388f9aa1f6b1133998110648986f44e9c184", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -497,6 +497,7 @@ mod tests {\n     use arc::*;\n     use arc;\n \n+    use core::cell::Cell;\n     use core::option::{Some, None};\n     use core::option;\n     use core::pipes;"}, {"sha": "f6fcf6c8d3b9a4217e5ac901ef9fac548452b703", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -116,6 +116,9 @@ fn get<T>(elts: &r/[Option<T>], i: uint) -> &r/T {\n #[cfg(test)]\n mod tests {\n     use super::*;\n+    use core::cmp::Eq;\n+    use core::kinds::{Durable, Copy};\n+    use core::prelude::debug;\n \n     #[test]\n     fn test_simple() {"}, {"sha": "73dbe4bea5742e374331e0d20dac1396fd3f1814", "filename": "src/libstd/flatpipes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibstd%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibstd%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fflatpipes.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -636,6 +636,7 @@ mod test {\n     use DefaultEncoder = json::Encoder;\n     use DefaultDecoder = json::Decoder;\n \n+    use flatpipes::{Flattener, Unflattener};\n     use flatpipes::flatteners::*;\n     use flatpipes::bytepipes::*;\n     use flatpipes::pod;\n@@ -647,7 +648,7 @@ mod test {\n \n     use core::dvec::DVec;\n     use core::int;\n-    use core::io::BytesReader;\n+    use core::io::{BytesReader, BytesWriter};\n     use core::io;\n     use core::prelude::*;\n     use core::result;"}, {"sha": "c577540612591cd59233f97d81aa0b6d06e1d994", "filename": "src/libstd/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -150,7 +150,7 @@ pub mod test {\n \n     use future::*;\n \n-    use core::comm::oneshot;\n+    use core::comm::{oneshot, send_one};\n     use core::task;\n \n     #[test]"}, {"sha": "dd20558325906b8e68273278a52c8bdf8a338cc3", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -445,7 +445,7 @@ pub fn opt_default(mm: &Matches, nm: &str, def: &str) -> Option<~str> {\n }\n \n #[deriving_eq]\n-enum FailType {\n+pub enum FailType {\n     ArgumentMissing_,\n     UnrecognizedOption_,\n     OptionMissing_,"}, {"sha": "d1a65517aad0f7de788df7d11408ddf504b8d3df", "filename": "src/libstd/json.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -1208,6 +1208,7 @@ mod tests {\n     use core::prelude::*;\n \n     use json::*;\n+    use serialize;\n \n     use core::result;\n     use core::hashmap::linear::LinearMap;"}, {"sha": "08b7b3d6ae506087dd6e53aef5136705b2b8fe44", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 86, "deletions": 82, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -730,98 +730,102 @@ impl to_bytes::IterBytes for Url {\n     }\n }\n \n+// Put a few tests outside of the 'test' module so they can test the internal\n+// functions and those functions don't need 'pub'\n+\n+#[test]\n+fn test_split_char_first() {\n+    let (u,v) = split_char_first(~\"hello, sweet world\", ',');\n+    assert u == ~\"hello\";\n+    assert v == ~\" sweet world\";\n+\n+    let (u,v) = split_char_first(~\"hello sweet world\", ',');\n+    assert u == ~\"hello sweet world\";\n+    assert v == ~\"\";\n+}\n+\n+#[test]\n+fn test_get_authority() {\n+    let (u, h, p, r) = get_authority(\n+        \"//user:pass@rust-lang.org/something\").unwrap();\n+    assert u == Some(UserInfo::new(~\"user\", Some(~\"pass\")));\n+    assert h == ~\"rust-lang.org\";\n+    assert p.is_none();\n+    assert r == ~\"/something\";\n+\n+    let (u, h, p, r) = get_authority(\n+        \"//rust-lang.org:8000?something\").unwrap();\n+    assert u.is_none();\n+    assert h == ~\"rust-lang.org\";\n+    assert p == Some(~\"8000\");\n+    assert r == ~\"?something\";\n+\n+    let (u, h, p, r) = get_authority(\n+        \"//rust-lang.org#blah\").unwrap();\n+    assert u.is_none();\n+    assert h == ~\"rust-lang.org\";\n+    assert p.is_none();\n+    assert r == ~\"#blah\";\n+\n+    // ipv6 tests\n+    let (_, h, _, _) = get_authority(\n+        \"//2001:0db8:85a3:0042:0000:8a2e:0370:7334#blah\").unwrap();\n+    assert h == ~\"2001:0db8:85a3:0042:0000:8a2e:0370:7334\";\n+\n+    let (_, h, p, _) = get_authority(\n+        \"//2001:0db8:85a3:0042:0000:8a2e:0370:7334:8000#blah\").unwrap();\n+    assert h == ~\"2001:0db8:85a3:0042:0000:8a2e:0370:7334\";\n+    assert p == Some(~\"8000\");\n+\n+    let (u, h, p, _) = get_authority(\n+        \"//us:p@2001:0db8:85a3:0042:0000:8a2e:0370:7334:8000#blah\"\n+    ).unwrap();\n+    assert u == Some(UserInfo::new(~\"us\", Some(~\"p\")));\n+    assert h == ~\"2001:0db8:85a3:0042:0000:8a2e:0370:7334\";\n+    assert p == Some(~\"8000\");\n+\n+    // invalid authorities;\n+    assert get_authority(\"//user:pass@rust-lang:something\").is_err();\n+    assert get_authority(\"//user@rust-lang:something:/path\").is_err();\n+    assert get_authority(\n+        \"//2001:0db8:85a3:0042:0000:8a2e:0370:7334:800a\").is_err();\n+    assert get_authority(\n+        \"//2001:0db8:85a3:0042:0000:8a2e:0370:7334:8000:00\").is_err();\n+\n+    // these parse as empty, because they don't start with '//'\n+    let (_, h, _, _) = get_authority(~\"user:pass@rust-lang\").unwrap();\n+    assert h == ~\"\";\n+    let (_, h, _, _) = get_authority(~\"rust-lang.org\").unwrap();\n+    assert h == ~\"\";\n+}\n+\n+#[test]\n+fn test_get_path() {\n+    let (p, r) = get_path(\"/something+%20orother\", true).unwrap();\n+    assert p == ~\"/something+ orother\";\n+    assert r == ~\"\";\n+    let (p, r) = get_path(\"test@email.com#fragment\", false).unwrap();\n+    assert p == ~\"test@email.com\";\n+    assert r == ~\"#fragment\";\n+    let (p, r) = get_path(~\"/gen/:addr=?q=v\", false).unwrap();\n+    assert p == ~\"/gen/:addr=\";\n+    assert r == ~\"?q=v\";\n+\n+    //failure cases\n+    assert get_path(~\"something?q\", true).is_err();\n+}\n+\n #[cfg(test)]\n mod tests {\n     use core::prelude::*;\n \n     use net_url::*;\n     use net_url::UserInfo;\n \n+    use core::hashmap::linear::LinearMap;\n     use core::result;\n     use core::str;\n \n-    #[test]\n-    pub fn test_split_char_first() {\n-        let (u,v) = split_char_first(~\"hello, sweet world\", ',');\n-        assert u == ~\"hello\";\n-        assert v == ~\" sweet world\";\n-\n-        let (u,v) = split_char_first(~\"hello sweet world\", ',');\n-        assert u == ~\"hello sweet world\";\n-        assert v == ~\"\";\n-    }\n-\n-    #[test]\n-    pub fn test_get_authority() {\n-        let (u, h, p, r) = get_authority(\n-            \"//user:pass@rust-lang.org/something\").unwrap();\n-        assert u == Some(UserInfo::new(~\"user\", Some(~\"pass\")));\n-        assert h == ~\"rust-lang.org\";\n-        assert p.is_none();\n-        assert r == ~\"/something\";\n-\n-        let (u, h, p, r) = get_authority(\n-            \"//rust-lang.org:8000?something\").unwrap();\n-        assert u.is_none();\n-        assert h == ~\"rust-lang.org\";\n-        assert p == Some(~\"8000\");\n-        assert r == ~\"?something\";\n-\n-        let (u, h, p, r) = get_authority(\n-            \"//rust-lang.org#blah\").unwrap();\n-        assert u.is_none();\n-        assert h == ~\"rust-lang.org\";\n-        assert p.is_none();\n-        assert r == ~\"#blah\";\n-\n-        // ipv6 tests\n-        let (_, h, _, _) = get_authority(\n-            \"//2001:0db8:85a3:0042:0000:8a2e:0370:7334#blah\").unwrap();\n-        assert h == ~\"2001:0db8:85a3:0042:0000:8a2e:0370:7334\";\n-\n-        let (_, h, p, _) = get_authority(\n-            \"//2001:0db8:85a3:0042:0000:8a2e:0370:7334:8000#blah\").unwrap();\n-        assert h == ~\"2001:0db8:85a3:0042:0000:8a2e:0370:7334\";\n-        assert p == Some(~\"8000\");\n-\n-        let (u, h, p, _) = get_authority(\n-            \"//us:p@2001:0db8:85a3:0042:0000:8a2e:0370:7334:8000#blah\"\n-        ).unwrap();\n-        assert u == Some(UserInfo::new(~\"us\", Some(~\"p\")));\n-        assert h == ~\"2001:0db8:85a3:0042:0000:8a2e:0370:7334\";\n-        assert p == Some(~\"8000\");\n-\n-        // invalid authorities;\n-        assert get_authority(\"//user:pass@rust-lang:something\").is_err();\n-        assert get_authority(\"//user@rust-lang:something:/path\").is_err();\n-        assert get_authority(\n-            \"//2001:0db8:85a3:0042:0000:8a2e:0370:7334:800a\").is_err();\n-        assert get_authority(\n-            \"//2001:0db8:85a3:0042:0000:8a2e:0370:7334:8000:00\").is_err();\n-\n-        // these parse as empty, because they don't start with '//'\n-        let (_, h, _, _) = get_authority(~\"user:pass@rust-lang\").unwrap();\n-        assert h == ~\"\";\n-        let (_, h, _, _) = get_authority(~\"rust-lang.org\").unwrap();\n-        assert h == ~\"\";\n-    }\n-\n-    #[test]\n-    pub fn test_get_path() {\n-        let (p, r) = get_path(\"/something+%20orother\", true).unwrap();\n-        assert p == ~\"/something+ orother\";\n-        assert r == ~\"\";\n-        let (p, r) = get_path(\"test@email.com#fragment\", false).unwrap();\n-        assert p == ~\"test@email.com\";\n-        assert r == ~\"#fragment\";\n-        let (p, r) = get_path(~\"/gen/:addr=?q=v\", false).unwrap();\n-        assert p == ~\"/gen/:addr=\";\n-        assert r == ~\"?q=v\";\n-\n-        //failure cases\n-        assert get_path(~\"something?q\", true).is_err();\n-    }\n-\n     #[test]\n     pub fn test_url_parse() {\n         let url = ~\"http://user:pass@rust-lang.org/doc?s=v#something\";"}, {"sha": "39d3fd569a6266aab5b9c4a9d9fbd6d26a0a2ea6", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -399,7 +399,7 @@ pub impl &Semaphore {\n  * A task which fails while holding a mutex will unlock the mutex as it\n  * unwinds.\n  */\n-struct Mutex { priv sem: Sem<~[Waitqueue]> }\n+pub struct Mutex { priv sem: Sem<~[Waitqueue]> }\n \n /// Create a new mutex, with one associated condvar.\n pub fn Mutex() -> Mutex { mutex_with_condvars(1) }\n@@ -447,7 +447,7 @@ struct RWlockInner {\n  * A task which fails while holding an rwlock will unlock the rwlock as it\n  * unwinds.\n  */\n-struct RWlock {\n+pub struct RWlock {\n     priv order_lock:  Semaphore,\n     priv access_lock: Sem<~[Waitqueue]>,\n     priv state:       Exclusive<RWlockInner>\n@@ -712,6 +712,7 @@ mod tests {\n     use sync::*;\n \n     use core::cast;\n+    use core::cell::Cell;\n     use core::option;\n     use core::pipes;\n     use core::ptr;"}, {"sha": "6e80665d80e13bb8937aa86b20d68d78599fb56c", "filename": "src/libstd/time.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -892,6 +892,7 @@ mod tests {\n     use core::float;\n     use core::os;\n     use core::result;\n+    use core::result::{Err, Ok};\n     use core::str;\n     use core::u64;\n     use core::uint;\n@@ -902,15 +903,13 @@ mod tests {\n         const some_future_date: i64 = 1577836800i64; // 2020-01-01T00:00:00Z\n \n         let tv1 = get_time();\n-        log(debug, ~\"tv1=\" + uint::to_str(tv1.sec as uint) + ~\" sec + \"\n-                   + uint::to_str(tv1.nsec as uint) + ~\" nsec\");\n+        debug!(\"tv1=%? sec + %? nsec\", tv1.sec as uint, tv1.nsec as uint);\n \n         assert tv1.sec > some_recent_date;\n         assert tv1.nsec < 1000000000i32;\n \n         let tv2 = get_time();\n-        log(debug, ~\"tv2=\" + uint::to_str(tv2.sec as uint) + ~\" sec + \"\n-                   + uint::to_str(tv2.nsec as uint) + ~\" nsec\");\n+        debug!(\"tv2=%? sec + %? nsec\", tv2.sec as uint, tv2.nsec as uint);\n \n         assert tv2.sec >= tv1.sec;\n         assert tv2.sec < some_future_date;\n@@ -924,16 +923,16 @@ mod tests {\n         let s0 = precise_time_s();\n         let ns1 = precise_time_ns();\n \n-        log(debug, ~\"s0=\" + float::to_str_digits(s0, 9u) + ~\" sec\");\n+        debug!(\"s0=%s sec\", float::to_str_digits(s0, 9u));\n         assert s0 > 0.;\n         let ns0 = (s0 * 1000000000.) as u64;\n-        log(debug, ~\"ns0=\" + u64::to_str(ns0) + ~\" ns\");\n+        debug!(\"ns0=%? ns\", ns0);\n \n-        log(debug, ~\"ns1=\" + u64::to_str(ns1) + ~\" ns\");\n+        debug!(\"ns1=%? ns\", ns0);\n         assert ns1 >= ns0;\n \n         let ns2 = precise_time_ns();\n-        log(debug, ~\"ns2=\" + u64::to_str(ns2) + ~\" ns\");\n+        debug!(\"ns2=%? ns\", ns0);\n         assert ns2 >= ns1;\n     }\n "}, {"sha": "88e4ade4b826e2a333f0e9f60f3a35c9d08a3053", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -207,8 +207,8 @@ pub struct TreeMapIterator<K, V> {\n /// Advance the iterator to the next node (in order) and return a\n /// tuple with a reference to the key and value. If there are no\n /// more nodes, return `None`.\n-fn map_next<K: Ord, V>(iter: &mut TreeMapIterator/&r<K, V>)\n-                    -> Option<(&r/K, &r/V)> {\n+pub fn map_next<K: Ord, V>(iter: &mut TreeMapIterator/&r<K, V>)\n+                        -> Option<(&r/K, &r/V)> {\n     while !iter.stack.is_empty() || iter.node.is_some() {\n         match *iter.node {\n           Some(ref x) => {\n@@ -226,7 +226,7 @@ fn map_next<K: Ord, V>(iter: &mut TreeMapIterator/&r<K, V>)\n }\n \n /// Advance the iterator through the map\n-fn map_advance<K: Ord, V>(iter: &mut TreeMapIterator/&r<K, V>,\n+pub fn map_advance<K: Ord, V>(iter: &mut TreeMapIterator/&r<K, V>,\n                           f: fn((&r/K, &r/V)) -> bool) {\n     loop {\n         match map_next(iter) {\n@@ -683,7 +683,11 @@ fn remove<K:Ord,V>(node: &mut Option<~TreeNode<K, V>>, key: &K) -> bool {\n #[cfg(test)]\n mod test_treemap {\n     use super::*;\n+    use core::cmp::{Ord, Eq};\n+    use core::option::{Some, Option, None};\n+    use core::rand;\n     use core::str;\n+    use core::vec;\n \n     #[test]\n     fn find_empty() {"}, {"sha": "37d9b3221b2d1f3c0c0ca6fe1ec40f40ea97517c", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -123,9 +123,11 @@ fn spawn_loop() -> IoTask {\n mod test {\n     use core::prelude::*;\n \n+    use get_gl = get;\n     use uv::iotask;\n     use uv::ll;\n     use uv_global_loop::*;\n+    use uv_iotask::IoTask;\n \n     use core::iter;\n     use core::libc;"}, {"sha": "14726a0854de198ffc2e48aed6ee59d06e5c2bea", "filename": "src/libstd/uv_iotask.rs", "status": "modified", "additions": 105, "deletions": 109, "changes": 214, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibstd%2Fuv_iotask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibstd%2Fuv_iotask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_iotask.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -202,124 +202,120 @@ extern fn tear_down_close_cb(handle: *ll::uv_async_t) {\n }\n \n #[cfg(test)]\n-mod test {\n-    use core::prelude::*;\n-\n-    use uv::ll;\n-    use uv_iotask::*;\n-\n-    use core::iter;\n-    use core::libc;\n-    use core::ptr;\n-    use core::task;\n-    use core::pipes::{stream, Chan, SharedChan, Port};\n-\n-    extern fn async_close_cb(handle: *ll::uv_async_t) {\n-        unsafe {\n-            log(debug, fmt!(\"async_close_cb handle %?\", handle));\n-            let exit_ch = &(*(ll::get_data_for_uv_handle(handle)\n-                            as *AhData)).exit_ch;\n-            let exit_ch = exit_ch.clone();\n-            exit_ch.send(());\n-        }\n-    }\n-    extern fn async_handle_cb(handle: *ll::uv_async_t, status: libc::c_int) {\n-        unsafe {\n-            log(debug,\n-                fmt!(\"async_handle_cb handle %? status %?\",handle,status));\n-            ll::close(handle, async_close_cb);\n-        }\n-    }\n-    struct AhData {\n-        iotask: IoTask,\n-        exit_ch: SharedChan<()>\n+extern fn async_close_cb(handle: *ll::uv_async_t) {\n+    unsafe {\n+        log(debug, fmt!(\"async_close_cb handle %?\", handle));\n+        let exit_ch = &(*(ll::get_data_for_uv_handle(handle)\n+                        as *AhData)).exit_ch;\n+        let exit_ch = exit_ch.clone();\n+        exit_ch.send(());\n     }\n-    fn impl_uv_iotask_async(iotask: &IoTask) {\n-        unsafe {\n-            let async_handle = ll::async_t();\n-            let ah_ptr = ptr::addr_of(&async_handle);\n-            let (exit_po, exit_ch) = stream::<()>();\n-            let ah_data = AhData {\n-                iotask: iotask.clone(),\n-                exit_ch: SharedChan(exit_ch)\n-            };\n-            let ah_data_ptr: *AhData = unsafe {\n-                ptr::to_unsafe_ptr(&ah_data)\n-            };\n-            debug!(\"about to interact\");\n-            do interact(iotask) |loop_ptr| {\n-                unsafe {\n-                    debug!(\"interacting\");\n-                    ll::async_init(loop_ptr, ah_ptr, async_handle_cb);\n-                    ll::set_data_for_uv_handle(\n-                        ah_ptr, ah_data_ptr as *libc::c_void);\n-                    ll::async_send(ah_ptr);\n-                }\n-            };\n-            debug!(\"waiting for async close\");\n-            exit_po.recv();\n-        }\n+}\n+\n+#[cfg(test)]\n+extern fn async_handle_cb(handle: *ll::uv_async_t, status: libc::c_int) {\n+    unsafe {\n+        log(debug,\n+            fmt!(\"async_handle_cb handle %? status %?\",handle,status));\n+        ll::close(handle, async_close_cb);\n     }\n+}\n+\n+#[cfg(test)]\n+struct AhData {\n+    iotask: IoTask,\n+    exit_ch: SharedChan<()>\n+}\n \n-    // this fn documents the bear minimum neccesary to roll your own\n-    // high_level_loop\n-    unsafe fn spawn_test_loop(exit_ch: ~Chan<()>) -> IoTask {\n-        let (iotask_port, iotask_ch) = stream::<IoTask>();\n-        do task::spawn_sched(task::ManualThreads(1u)) {\n-            debug!(\"about to run a test loop\");\n-            run_loop(&iotask_ch);\n-            exit_ch.send(());\n+#[cfg(test)]\n+fn impl_uv_iotask_async(iotask: &IoTask) {\n+    unsafe {\n+        let async_handle = ll::async_t();\n+        let ah_ptr = ptr::addr_of(&async_handle);\n+        let (exit_po, exit_ch) = stream::<()>();\n+        let ah_data = AhData {\n+            iotask: iotask.clone(),\n+            exit_ch: SharedChan(exit_ch)\n+        };\n+        let ah_data_ptr: *AhData = unsafe {\n+            ptr::to_unsafe_ptr(&ah_data)\n         };\n-        return iotask_port.recv();\n+        debug!(\"about to interact\");\n+        do interact(iotask) |loop_ptr| {\n+            unsafe {\n+                debug!(\"interacting\");\n+                ll::async_init(loop_ptr, ah_ptr, async_handle_cb);\n+                ll::set_data_for_uv_handle(\n+                    ah_ptr, ah_data_ptr as *libc::c_void);\n+                ll::async_send(ah_ptr);\n+            }\n+        };\n+        debug!(\"waiting for async close\");\n+        exit_po.recv();\n     }\n+}\n \n-    extern fn lifetime_handle_close(handle: *libc::c_void) {\n-        unsafe {\n-            log(debug, fmt!(\"lifetime_handle_close ptr %?\", handle));\n-        }\n-    }\n+// this fn documents the bear minimum neccesary to roll your own\n+// high_level_loop\n+#[cfg(test)]\n+unsafe fn spawn_test_loop(exit_ch: ~Chan<()>) -> IoTask {\n+    let (iotask_port, iotask_ch) = stream::<IoTask>();\n+    do task::spawn_sched(task::ManualThreads(1u)) {\n+        debug!(\"about to run a test loop\");\n+        run_loop(&iotask_ch);\n+        exit_ch.send(());\n+    };\n+    return iotask_port.recv();\n+}\n \n-    extern fn lifetime_async_callback(handle: *libc::c_void,\n-                                     status: libc::c_int) {\n-        log(debug, fmt!(\"lifetime_handle_close ptr %? status %?\",\n-                        handle, status));\n+#[cfg(test)]\n+extern fn lifetime_handle_close(handle: *libc::c_void) {\n+    unsafe {\n+        log(debug, fmt!(\"lifetime_handle_close ptr %?\", handle));\n     }\n+}\n \n-    #[test]\n-    fn test_uv_iotask_async() {\n-        unsafe {\n-            let (exit_po, exit_ch) = stream::<()>();\n-            let iotask = &spawn_test_loop(~exit_ch);\n-\n-            debug!(\"spawned iotask\");\n-\n-            // using this handle to manage the lifetime of the\n-            // high_level_loop, as it will exit the first time one of\n-            // the impl_uv_hl_async() is cleaned up with no one ref'd\n-            // handles on the loop (Which can happen under\n-            // race-condition type situations.. this ensures that the\n-            // loop lives until, at least, all of the\n-            // impl_uv_hl_async() runs have been called, at least.\n-            let (work_exit_po, work_exit_ch) = stream::<()>();\n-            let work_exit_ch = SharedChan(work_exit_ch);\n-            for iter::repeat(7u) {\n-                let iotask_clone = iotask.clone();\n-                let work_exit_ch_clone = work_exit_ch.clone();\n-                do task::spawn_sched(task::ManualThreads(1u)) {\n-                    debug!(\"async\");\n-                    impl_uv_iotask_async(&iotask_clone);\n-                    debug!(\"done async\");\n-                    work_exit_ch_clone.send(());\n-                };\n-            };\n-            for iter::repeat(7u) {\n-                debug!(\"waiting\");\n-                work_exit_po.recv();\n+#[cfg(test)]\n+extern fn lifetime_async_callback(handle: *libc::c_void,\n+                                 status: libc::c_int) {\n+    log(debug, fmt!(\"lifetime_handle_close ptr %? status %?\",\n+                    handle, status));\n+}\n+\n+#[test]\n+fn test_uv_iotask_async() {\n+    unsafe {\n+        let (exit_po, exit_ch) = stream::<()>();\n+        let iotask = &spawn_test_loop(~exit_ch);\n+\n+        debug!(\"spawned iotask\");\n+\n+        // using this handle to manage the lifetime of the\n+        // high_level_loop, as it will exit the first time one of\n+        // the impl_uv_hl_async() is cleaned up with no one ref'd\n+        // handles on the loop (Which can happen under\n+        // race-condition type situations.. this ensures that the\n+        // loop lives until, at least, all of the\n+        // impl_uv_hl_async() runs have been called, at least.\n+        let (work_exit_po, work_exit_ch) = stream::<()>();\n+        let work_exit_ch = SharedChan(work_exit_ch);\n+        for iter::repeat(7u) {\n+            let iotask_clone = iotask.clone();\n+            let work_exit_ch_clone = work_exit_ch.clone();\n+            do task::spawn_sched(task::ManualThreads(1u)) {\n+                debug!(\"async\");\n+                impl_uv_iotask_async(&iotask_clone);\n+                debug!(\"done async\");\n+                work_exit_ch_clone.send(());\n             };\n-            log(debug, ~\"sending teardown_loop msg..\");\n-            exit(iotask);\n-            exit_po.recv();\n-            log(debug, ~\"after recv on exit_po.. exiting..\");\n-        }\n+        };\n+        for iter::repeat(7u) {\n+            debug!(\"waiting\");\n+            work_exit_po.recv();\n+        };\n+        log(debug, ~\"sending teardown_loop msg..\");\n+        exit(iotask);\n+        exit_po.recv();\n+        log(debug, ~\"after recv on exit_po.. exiting..\");\n     }\n }"}, {"sha": "b7111bfb0231856aed72d38d539dfbd8cd6cd408", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -1199,6 +1199,7 @@ pub mod test {\n \n     use uv_ll::*;\n \n+    use core::comm::{SharedChan, stream};\n     use core::libc;\n     use core::ptr;\n     use core::str;\n@@ -1687,7 +1688,7 @@ pub mod test {\n \n     // this is the impl for a test that is (maybe) ran on a\n     // per-platform/arch basis below\n-    fn impl_uv_tcp_server_and_request() {\n+    pub fn impl_uv_tcp_server_and_request() {\n         unsafe {\n             let bind_ip = ~\"0.0.0.0\";\n             let request_ip = ~\"127.0.0.1\";"}, {"sha": "40315d175cc4dccb2ae83a6b4e031f6c2fc48a4e", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -16,6 +16,7 @@ use ast_util::{inlined_item_utils, path_to_ident, stmt_id};\n use ast_util;\n use attr;\n use codemap;\n+use codemap::spanned;\n use diagnostic::span_handler;\n use parse::token::ident_interner;\n use print::pprust;"}, {"sha": "ab14f6cc08621acdd38c8fa3ad8837385215c4b4", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -13,7 +13,7 @@ use core::prelude::*;\n use ast::*;\n use ast;\n use ast_util;\n-use codemap::{span, BytePos, dummy_sp};\n+use codemap::{span, BytePos, dummy_sp, spanned};\n use parse::token;\n use visit;\n use opt_vec;"}, {"sha": "43eaef95ee2a0f464189a5ab5c308c4879af8d24", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -93,6 +93,7 @@ use core::prelude::*;\n use ast;\n use ast_util;\n use attr;\n+use codemap;\n use codemap::span;\n use ext::base::*;\n use parse;"}, {"sha": "9525369d33415d3cd9484fba1a51048cd7f30cc9", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -82,7 +82,7 @@ pub enum SyntaxExtension {\n     IdentTT(SyntaxExpanderTTItem),\n }\n \n-type SyntaxEnv = @mut MapChain<Name, Transformer>;\n+pub type SyntaxEnv = @mut MapChain<Name, Transformer>;\n \n // Name : the domain of SyntaxEnvs\n // want to change these to uints....\n@@ -98,7 +98,7 @@ type Name = @~str;\n // toward a more uniform syntax syntax (sorry) where blocks are just\n // another kind of transformer.\n \n-enum Transformer {\n+pub enum Transformer {\n     // this identifier maps to a syntax extension or macro\n     SE(SyntaxExtension),\n     // should blocks occurring here limit macro scopes?\n@@ -495,6 +495,7 @@ mod test {\n     use super::*;\n     use super::MapChain;\n     use util::testing::check_equal;\n+    use core::hashmap::linear::LinearMap;\n \n     #[test] fn testenv () {\n         let mut a = LinearMap::new();"}, {"sha": "1dc5350c452ffaa2dd5a0a7fbccbf49c36f3c47c", "filename": "src/libsyntax/ext/concat_idents.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fconcat_idents.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -10,8 +10,11 @@\n \n use core::prelude::*;\n \n+use ast;\n+use codemap::span;\n use ext::base::*;\n use ext::base;\n+use parse::token;\n \n pub fn expand_syntax_ext(cx: ext_ctxt, sp: span, tts: ~[ast::token_tree])\n     -> base::MacResult {"}, {"sha": "ce87c2f1363d76a07c700c01cd83e495a26a7099", "filename": "src/libsyntax/ext/env.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fenv.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -15,6 +15,8 @@\n  * interface.\n  */\n \n+use ast;\n+use codemap::span;\n use ext::base::*;\n use ext::base;\n use ext::build::mk_uniq_str;"}, {"sha": "1a67a569845e651b1f9f872bd3adc14de206b74a", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -10,13 +10,16 @@\n \n use core::prelude::*;\n \n+use ast::{blk_, attribute_, attr_outer, meta_word};\n use ast::{crate, expr_, expr_mac, mac_invoc_tt};\n use ast::{tt_delim, tt_tok, item_mac, stmt_, stmt_mac, stmt_expr, stmt_semi};\n use ast;\n use attr;\n-use codemap::{span, CallInfo, ExpandedFrom, NameAndSpan};\n+use codemap;\n+use codemap::{span, CallInfo, ExpandedFrom, NameAndSpan, spanned};\n use ext::base::*;\n use fold::*;\n+use parse;\n use parse::{parser, parse_item_from_source_str, new_parser_from_tts};\n \n use core::option;\n@@ -175,7 +178,7 @@ pub fn expand_item(extsbox: @mut SyntaxEnv,\n }\n \n // does this attribute list contain \"macro_escape\" ?\n-fn contains_macro_escape (attrs: &[ast::attribute]) -> bool{\n+pub fn contains_macro_escape (attrs: &[ast::attribute]) -> bool{\n     let mut accum = false;\n     do attrs.each |attr| {\n         let mname = attr::get_attr_name(attr);\n@@ -473,7 +476,13 @@ pub fn expand_crate(parse_sess: @mut parse::ParseSess,\n #[cfg(test)]\n mod test {\n     use super::*;\n+    use ast;\n+    use ast::{attribute_, attr_outer, meta_word};\n+    use codemap;\n+    use codemap::spanned;\n+    use parse;\n     use util::testing::check_equal;\n+    use core::option::{None, Some};\n \n     // make sure that fail! is present\n     #[test] fn fail_exists_test () {"}, {"sha": "b8781130562baed59bba1649b410376bef0b5b74", "filename": "src/libsyntax/ext/fmt.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ffmt.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -22,6 +22,7 @@ use ast;\n use codemap::span;\n use ext::base::*;\n use ext::base;\n+use ext::build;\n use ext::build::*;\n use private::extfmt::ct::*;\n "}, {"sha": "15ddc44e85d4fc713ae9099d53d6cdbb40649802", "filename": "src/libsyntax/ext/log_syntax.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Flog_syntax.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -14,6 +14,7 @@ use ext::base::*;\n use ext::base;\n use print;\n \n+use core::io;\n use core::io::WriterUtil;\n use core::option;\n "}, {"sha": "3e6dedb3b31ffaa8f92052f83dc9a99514c385f8", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -20,7 +20,7 @@ use ast;\n use ast_util::{ident_to_path};\n use ast_util;\n use attr;\n-use codemap::{span, respan, dummy_sp};\n+use codemap::{span, respan, dummy_sp, spanned};\n use codemap;\n use ext::base::{ext_ctxt, mk_ctxt};\n use ext::quote::rt::*;"}, {"sha": "a6b820cf3f908c94d0829f99b3d31746280760bd", "filename": "src/libsyntax/ext/pipes/parse_proto.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -10,7 +10,9 @@\n \n // Parsing pipes protocols from token trees.\n \n+use ast_util;\n use ext::pipes::pipec::*;\n+use ext::pipes::proto::*;\n use parse::common::SeqSep;\n use parse::parser;\n use parse::token;"}, {"sha": "46f10cd52bbfcd3ed7f4d910159178b29a97071c", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -10,8 +10,9 @@\n \n // A protocol compiler for Rust.\n \n+use ast;\n use ast::ident;\n-use codemap::dummy_sp;\n+use codemap::{dummy_sp, spanned};\n use ext::base::ext_ctxt;\n use ext::pipes::ast_builder::{append_types, ext_ctxt_ast_builder, path};\n use ext::pipes::ast_builder::{path_global};"}, {"sha": "757302c78fc1ae8e9e82d2e9a003c362d107c885", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -34,10 +34,12 @@ use core::str;\n \n pub mod rt {\n     use ast;\n+    use codemap;\n     use ext::base::ext_ctxt;\n     use parse;\n     use print::pprust;\n \n+    use core::prelude::*;\n     use core::str;\n \n     pub use ast::*;\n@@ -49,7 +51,7 @@ pub mod rt {\n     use print::pprust;\n     use print::pprust::{item_to_str, ty_to_str};\n \n-    trait ToTokens {\n+    pub trait ToTokens {\n         pub fn to_tokens(&self, _cx: ext_ctxt) -> ~[token_tree];\n     }\n \n@@ -73,7 +75,7 @@ pub mod rt {\n \n     */\n \n-    trait ToSource {\n+    pub trait ToSource {\n         // Takes a thing and generates a string containing rust code for it.\n         pub fn to_source(&self, cx: ext_ctxt) -> ~str;\n     }\n@@ -164,7 +166,7 @@ pub mod rt {\n         }\n     }\n \n-    trait ExtParseUtils {\n+    pub trait ExtParseUtils {\n         fn parse_item(s: ~str) -> @ast::item;\n         fn parse_expr(s: ~str) -> @ast::expr;\n         fn parse_stmt(s: ~str) -> @ast::stmt;"}, {"sha": "5b870f07b60c487f75716b520ffc97ed3dc84bae", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -8,12 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use ast;\n use codemap;\n use codemap::{FileMap, Loc, Pos, ExpandedFrom, span};\n use codemap::{CallInfo, NameAndSpan};\n use ext::base::*;\n use ext::base;\n use ext::build::{mk_base_vec_e, mk_uint, mk_u8, mk_base_str};\n+use parse;\n use print::pprust;\n \n use core::io;"}, {"sha": "3fc580827e96f1443b3be1630924615d88769b26", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // Earley-like parser for macros.\n+use ast;\n use ast::{matcher, match_tok, match_seq, match_nonterminal, ident};\n use codemap::{BytePos, mk_sp};\n use codemap;\n@@ -23,6 +24,7 @@ use core::dvec::DVec;\n use core::dvec;\n use core::io;\n use core::option;\n+use core::option::{Option, Some, None};\n use core::str;\n use core::uint;\n use core::vec;"}, {"sha": "f55ba3adfaefd864f5f2eaa2321095477f3de743", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -12,7 +12,8 @@ use core::prelude::*;\n \n use ast::*;\n use ast;\n-use codemap::span;\n+use codemap::{span, spanned};\n+use opt_vec::OptVec;\n \n use core::option;\n use core::vec;"}, {"sha": "b5c4ff3ddd739ec63979716b5a8ca0fdb757d277", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -15,6 +15,7 @@ use codemap::spanned;\n use codemap::BytePos;\n use parse::common::*; //resolve bug?\n use parse::token;\n+use parse::parser::Parser;\n \n use core::either::{Either, Left, Right};\n "}, {"sha": "c928719c2081c96b6c7e6cb52be1981224f6ae77", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -764,10 +764,14 @@ fn consume_whitespace(rdr: @mut StringReader) {\n \n #[cfg(test)]\n pub mod test {\n-\n     use super::*;\n-    use util::interner;\n+\n+    use ast;\n+    use codemap::{BytePos, CodeMap, span};\n+    use core::option::None;\n     use diagnostic;\n+    use parse::token;\n+    use util::interner;\n     use util::testing::{check_equal, check_equal_ptr};\n \n     // represents a testing reader (incl. both reader and interner)"}, {"sha": "057412fcd7efec84902ba551d2cbb52e9e082633", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -234,6 +234,8 @@ mod test {\n     use super::*;\n     use std::serialize::Encodable;\n     use std;\n+    use core::io;\n+    use core::option::None;\n     use core::str;\n     use util::testing::*;\n "}, {"sha": "e2a89d2a28cc153e92d43050304c399e997121af", "filename": "src/libsyntax/parse/prec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fparse%2Fprec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fparse%2Fprec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fprec.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use ast;\n use ast::*;\n use parse::token::*;\n use parse::token::Token;"}, {"sha": "0f161a444bd2d36ac3468601fca0ff3c08b4c553", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -2299,11 +2299,14 @@ pub fn print_onceness(s: @ps, o: ast::Onceness) {\n \n #[cfg(test)]\n pub mod test {\n+    use super::*;\n+\n     use ast;\n     use ast_util;\n+    use codemap;\n+    use core::cmp::Eq;\n+    use core::option::None;\n     use parse;\n-    use super::*;\n-    //use util;\n     use util::testing::check_equal;\n \n     fn string_check<T:Eq> (given : &T, expected: &T) {"}, {"sha": "70dec6f3343cd21b14684981224bd98704854bc9", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -16,6 +16,7 @@ use ast_util;\n use codemap::span;\n use parse;\n use opt_vec;\n+use opt_vec::OptVec;\n \n use core::option;\n use core::vec;"}, {"sha": "d4d97c69354bc5f1447c6c772f8d37fc9abaa685", "filename": "src/test/compile-fail/issue-4366.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Ftest%2Fcompile-fail%2Fissue-4366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5680ec027088c57f8b9fa3a9aa91daaf2428a57c/src%2Ftest%2Fcompile-fail%2Fissue-4366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4366.rs?ref=5680ec027088c57f8b9fa3a9aa91daaf2428a57c", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// regression test for issue 4366\n+\n+// ensures that 'use foo:*' doesn't import non-public 'use' statements in the\n+// module 'foo'\n+\n+mod foo {\n+    pub fn foo() {}\n+}\n+mod a {\n+    pub mod b {\n+        use foo::foo;\n+        type bar = int;\n+    }\n+    pub mod sub {\n+        use a::b::*;\n+        fn sub() -> bar { foo(); 1 } //~ ERROR: unresolved name: `foo`\n+        //~^ ERROR: use of undeclared type name `bar`\n+    }\n+}\n+\n+mod m1 {\n+    fn foo() {}\n+}\n+use m1::*;\n+\n+fn main() {\n+    foo(); //~ ERROR: unresolved name: `foo`\n+}\n+"}]}