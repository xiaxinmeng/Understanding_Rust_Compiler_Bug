{"sha": "0aedecf96b08c41ea481eaaebd4e5d2e2325d9c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhZWRlY2Y5NmIwOGM0MWVhNDgxZWFhZWJkNGU1ZDJlMjMyNWQ5Yzk=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-07-02T23:24:58Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-07-08T07:41:21Z"}, "message": "add a temporary vector_exchange_malloc lang item", "tree": {"sha": "e8f72e06d1b1379001abbc9f365e877c538b3b72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8f72e06d1b1379001abbc9f365e877c538b3b72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0aedecf96b08c41ea481eaaebd4e5d2e2325d9c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0aedecf96b08c41ea481eaaebd4e5d2e2325d9c9", "html_url": "https://github.com/rust-lang/rust/commit/0aedecf96b08c41ea481eaaebd4e5d2e2325d9c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0aedecf96b08c41ea481eaaebd4e5d2e2325d9c9/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bf34c34377986d73376967c7ca967f3bc484c1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bf34c34377986d73376967c7ca967f3bc484c1f", "html_url": "https://github.com/rust-lang/rust/commit/7bf34c34377986d73376967c7ca967f3bc484c1f"}], "stats": {"total": 110, "additions": 68, "deletions": 42}, "files": [{"sha": "d4d1997a56f250d4db38314535a04a379017735f", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 42, "deletions": 36, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/0aedecf96b08c41ea481eaaebd4e5d2e2325d9c9/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aedecf96b08c41ea481eaaebd4e5d2e2325d9c9/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=0aedecf96b08c41ea481eaaebd4e5d2e2325d9c9", "patch": "@@ -63,33 +63,34 @@ pub enum LangItem {\n     FailFnLangItem,                    // 24\n     FailBoundsCheckFnLangItem,         // 25\n     ExchangeMallocFnLangItem,          // 26\n-    ClosureExchangeMallocFnLangItem,   // 27\n-    ExchangeFreeFnLangItem,            // 28\n-    MallocFnLangItem,                  // 29\n-    FreeFnLangItem,                    // 30\n-    BorrowAsImmFnLangItem,             // 31\n-    BorrowAsMutFnLangItem,             // 32\n-    ReturnToMutFnLangItem,             // 33\n-    CheckNotBorrowedFnLangItem,        // 34\n-    StrDupUniqFnLangItem,              // 35\n-    RecordBorrowFnLangItem,            // 36\n-    UnrecordBorrowFnLangItem,          // 37\n-\n-    StartFnLangItem,                   // 38\n-\n-    TyDescStructLangItem,              // 39\n-    TyVisitorTraitLangItem,            // 40\n-    OpaqueStructLangItem,              // 41\n+    VectorExchangeMallocFnLangItem,    // 27\n+    ClosureExchangeMallocFnLangItem,   // 28\n+    ExchangeFreeFnLangItem,            // 29\n+    MallocFnLangItem,                  // 30\n+    FreeFnLangItem,                    // 31\n+    BorrowAsImmFnLangItem,             // 32\n+    BorrowAsMutFnLangItem,             // 33\n+    ReturnToMutFnLangItem,             // 34\n+    CheckNotBorrowedFnLangItem,        // 35\n+    StrDupUniqFnLangItem,              // 36\n+    RecordBorrowFnLangItem,            // 37\n+    UnrecordBorrowFnLangItem,          // 38\n+\n+    StartFnLangItem,                   // 39\n+\n+    TyDescStructLangItem,              // 40\n+    TyVisitorTraitLangItem,            // 41\n+    OpaqueStructLangItem,              // 42\n }\n \n pub struct LanguageItems {\n-    items: [Option<def_id>, ..42]\n+    items: [Option<def_id>, ..43]\n }\n \n impl LanguageItems {\n     pub fn new() -> LanguageItems {\n         LanguageItems {\n-            items: [ None, ..42 ]\n+            items: [ None, ..43 ]\n         }\n     }\n \n@@ -129,23 +130,24 @@ impl LanguageItems {\n             24 => \"fail_\",\n             25 => \"fail_bounds_check\",\n             26 => \"exchange_malloc\",\n-            27 => \"closure_exchange_malloc\",\n-            28 => \"exchange_free\",\n-            29 => \"malloc\",\n-            30 => \"free\",\n-            31 => \"borrow_as_imm\",\n-            32 => \"borrow_as_mut\",\n-            33 => \"return_to_mut\",\n-            34 => \"check_not_borrowed\",\n-            35 => \"strdup_uniq\",\n-            36 => \"record_borrow\",\n-            37 => \"unrecord_borrow\",\n-\n-            38 => \"start\",\n-\n-            39 => \"ty_desc\",\n-            40 => \"ty_visitor\",\n-            41 => \"opaque\",\n+            27 => \"vector_exchange_malloc\",\n+            28 => \"closure_exchange_malloc\",\n+            29 => \"exchange_free\",\n+            30 => \"malloc\",\n+            31 => \"free\",\n+            32 => \"borrow_as_imm\",\n+            33 => \"borrow_as_mut\",\n+            34 => \"return_to_mut\",\n+            35 => \"check_not_borrowed\",\n+            36 => \"strdup_uniq\",\n+            37 => \"record_borrow\",\n+            38 => \"unrecord_borrow\",\n+\n+            39 => \"start\",\n+\n+            40 => \"ty_desc\",\n+            41 => \"ty_visitor\",\n+            42 => \"opaque\",\n \n             _ => \"???\"\n         }\n@@ -238,6 +240,9 @@ impl LanguageItems {\n     pub fn exchange_malloc_fn(&self) -> def_id {\n         self.items[ExchangeMallocFnLangItem as uint].get()\n     }\n+    pub fn vector_exchange_malloc_fn(&self) -> def_id {\n+        self.items[VectorExchangeMallocFnLangItem as uint].get()\n+    }\n     pub fn closure_exchange_malloc_fn(&self) -> def_id {\n         self.items[ClosureExchangeMallocFnLangItem as uint].get()\n     }\n@@ -331,6 +336,7 @@ impl<'self> LanguageItemCollector<'self> {\n         item_refs.insert(@\"fail_bounds_check\",\n                          FailBoundsCheckFnLangItem as uint);\n         item_refs.insert(@\"exchange_malloc\", ExchangeMallocFnLangItem as uint);\n+        item_refs.insert(@\"vector_exchange_malloc\", VectorExchangeMallocFnLangItem as uint);\n         item_refs.insert(@\"closure_exchange_malloc\", ClosureExchangeMallocFnLangItem as uint);\n         item_refs.insert(@\"exchange_free\", ExchangeFreeFnLangItem as uint);\n         item_refs.insert(@\"malloc\", MallocFnLangItem as uint);"}, {"sha": "f22bc2084ce127e5989e3dc16293ba6b8fdfab37", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0aedecf96b08c41ea481eaaebd4e5d2e2325d9c9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aedecf96b08c41ea481eaaebd4e5d2e2325d9c9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=0aedecf96b08c41ea481eaaebd4e5d2e2325d9c9", "patch": "@@ -296,12 +296,15 @@ pub fn malloc_raw_dyn(bcx: block,\n         heap_exchange => {\n             (ty::mk_imm_uniq, bcx.tcx().lang_items.exchange_malloc_fn())\n         }\n+        heap_exchange_vector => {\n+            (ty::mk_imm_uniq, bcx.tcx().lang_items.vector_exchange_malloc_fn())\n+        }\n         heap_exchange_closure => {\n             (ty::mk_imm_uniq, bcx.tcx().lang_items.closure_exchange_malloc_fn())\n         }\n     };\n \n-    if heap == heap_exchange {\n+    if heap == heap_exchange || heap == heap_exchange_vector {\n         // Grab the TypeRef type of box_ptr_ty.\n         let box_ptr_ty = mk_fn(bcx.tcx(), t);\n         let llty = type_of(ccx, box_ptr_ty);"}, {"sha": "fb8fa4d6baccb099fef8ed77036b19681800fe8e", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0aedecf96b08c41ea481eaaebd4e5d2e2325d9c9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aedecf96b08c41ea481eaaebd4e5d2e2325d9c9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=0aedecf96b08c41ea481eaaebd4e5d2e2325d9c9", "patch": "@@ -274,6 +274,7 @@ pub enum heap {\n     heap_managed,\n     heap_managed_unique,\n     heap_exchange,\n+    heap_exchange_vector,\n     heap_exchange_closure\n }\n \n@@ -395,7 +396,7 @@ pub fn add_clean_free(cx: block, ptr: ValueRef, heap: heap) {\n         let f: @fn(block) -> block = |a| glue::trans_free(a, ptr);\n         f\n       }\n-      heap_exchange | heap_exchange_closure => {\n+      heap_exchange | heap_exchange_vector | heap_exchange_closure => {\n         let f: @fn(block) -> block = |a| glue::trans_exchange_free(a, ptr);\n         f\n       }"}, {"sha": "a0d29d56effb2b8df44814c74a4086e45d9621d9", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aedecf96b08c41ea481eaaebd4e5d2e2325d9c9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aedecf96b08c41ea481eaaebd4e5d2e2325d9c9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=0aedecf96b08c41ea481eaaebd4e5d2e2325d9c9", "patch": "@@ -464,7 +464,7 @@ fn trans_rvalue_datum_unadjusted(bcx: block, expr: @ast::expr) -> DatumBlock {\n                                                       expr, contents);\n         }\n         ast::expr_vstore(contents, ast::expr_vstore_uniq) => {\n-            let heap = heap_for_unique(bcx, expr_ty(bcx, contents));\n+            let heap = tvec::heap_for_unique_vector(bcx, expr_ty(bcx, contents));\n             return tvec::trans_uniq_or_managed_vstore(bcx, heap,\n                                                       expr, contents);\n         }"}, {"sha": "8ff462fbdeec074f389b23ef934602305a795387", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0aedecf96b08c41ea481eaaebd4e5d2e2325d9c9/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aedecf96b08c41ea481eaaebd4e5d2e2325d9c9/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=0aedecf96b08c41ea481eaaebd4e5d2e2325d9c9", "patch": "@@ -95,9 +95,17 @@ pub fn alloc_raw(bcx: block, unit_ty: ty::t,\n     return rslt(bcx, bx);\n }\n \n+pub fn heap_for_unique_vector(bcx: block, t: ty::t) -> heap {\n+    if ty::type_contents(bcx.tcx(), t).contains_managed() {\n+        heap_managed_unique\n+    } else {\n+        heap_exchange_vector\n+    }\n+}\n+\n pub fn alloc_uniq_raw(bcx: block, unit_ty: ty::t,\n                       fill: ValueRef, alloc: ValueRef) -> Result {\n-    alloc_raw(bcx, unit_ty, fill, alloc, base::heap_for_unique(bcx, unit_ty))\n+    alloc_raw(bcx, unit_ty, fill, alloc, heap_for_unique_vector(bcx, unit_ty))\n }\n \n pub fn alloc_vec(bcx: block,\n@@ -298,7 +306,7 @@ pub fn trans_uniq_or_managed_vstore(bcx: block, heap: heap, vstore_expr: @ast::e\n \n     // Handle ~\"\".\n     match heap {\n-        heap_exchange => {\n+        heap_exchange_vector => {\n             match content_expr.node {\n                 ast::expr_lit(@codemap::spanned {\n                     node: ast::lit_str(s), _\n@@ -321,7 +329,7 @@ pub fn trans_uniq_or_managed_vstore(bcx: block, heap: heap, vstore_expr: @ast::e\n                 _ => {}\n             }\n         }\n-        heap_exchange_closure => fail!(\"vectors are not allocated with closure_exchange_alloc\"),\n+        heap_exchange | heap_exchange_closure => fail!(\"vectors use vector_exchange_alloc\"),\n         heap_managed | heap_managed_unique => {}\n     }\n "}, {"sha": "0e5b642735725fcc3a6e4f6fb4479f150e24e226", "filename": "src/libstd/rt/global_heap.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0aedecf96b08c41ea481eaaebd4e5d2e2325d9c9/src%2Flibstd%2Frt%2Fglobal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aedecf96b08c41ea481eaaebd4e5d2e2325d9c9/src%2Flibstd%2Frt%2Fglobal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fglobal_heap.rs?ref=0aedecf96b08c41ea481eaaebd4e5d2e2325d9c9", "patch": "@@ -85,6 +85,14 @@ pub unsafe fn exchange_malloc(align: u32, size: uintptr_t) -> *c_char {\n     malloc_raw(total_size as uint) as *c_char\n }\n \n+#[cfg(not(test))]\n+#[lang=\"vector_exchange_malloc\"]\n+#[inline]\n+pub unsafe fn vector_exchange_malloc(align: u32, size: uintptr_t) -> *c_char {\n+    let total_size = get_box_size(size as uint, align as uint);\n+    malloc_raw(total_size as uint) as *c_char\n+}\n+\n // FIXME: #7496\n #[cfg(not(test))]\n #[lang=\"closure_exchange_malloc\"]"}]}