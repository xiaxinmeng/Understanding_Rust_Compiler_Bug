{"sha": "19b272a94b6f311affc86d721c34519299144681", "node_id": "C_kwDOAAsO6NoAKDE5YjI3MmE5NGI2ZjMxMWFmZmM4NmQ3MjFjMzQ1MTkyOTkxNDQ2ODE", "commit": {"author": {"name": "Joshua Nelson", "email": "github@jyn.dev", "date": "2023-03-05T13:49:28Z"}, "committer": {"name": "Joshua Nelson", "email": "github@jyn.dev", "date": "2023-03-18T05:38:17Z"}, "message": "Use a single WalkBuilder for multiple paths", "tree": {"sha": "c40a431637c9545fed6f4bf91a20af3dbcd7b409", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c40a431637c9545fed6f4bf91a20af3dbcd7b409"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19b272a94b6f311affc86d721c34519299144681", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19b272a94b6f311affc86d721c34519299144681", "html_url": "https://github.com/rust-lang/rust/commit/19b272a94b6f311affc86d721c34519299144681", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19b272a94b6f311affc86d721c34519299144681/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d26a15563d34c3c77788e48d880d1c39d3770fb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d26a15563d34c3c77788e48d880d1c39d3770fb3", "html_url": "https://github.com/rust-lang/rust/commit/d26a15563d34c3c77788e48d880d1c39d3770fb3"}], "stats": {"total": 85, "additions": 43, "deletions": 42}, "files": [{"sha": "070ce93f97c174c16771dc8f52854bae457c0905", "filename": "src/tools/tidy/src/bins.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19b272a94b6f311affc86d721c34519299144681/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b272a94b6f311affc86d721c34519299144681/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs?ref=19b272a94b6f311affc86d721c34519299144681", "patch": "@@ -103,7 +103,7 @@ mod os_impl {\n \n         // FIXME: we don't need to look at all binaries, only files that have been modified in this branch\n         // (e.g. using `git ls-files`).\n-        walk_no_read(path, |path| filter_dirs(path) || path.ends_with(\"src/etc\"), &mut |entry| {\n+        walk_no_read(&[path], |path| filter_dirs(path) || path.ends_with(\"src/etc\"), &mut |entry| {\n             let file = entry.path();\n             let extension = file.extension();\n             let scripts = [\"py\", \"sh\", \"ps1\"];"}, {"sha": "66f5c932be2a0fca00b21dce473e605e2a45abaf", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/19b272a94b6f311affc86d721c34519299144681/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b272a94b6f311affc86d721c34519299144681/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=19b272a94b6f311affc86d721c34519299144681", "patch": "@@ -49,37 +49,37 @@ fn check_entries(tests_path: &Path, bad: &mut bool) {\n \n pub fn check(path: &Path, bad: &mut bool) {\n     check_entries(&path, bad);\n-    for path in &[&path.join(\"ui\"), &path.join(\"ui-fulldeps\")] {\n-        crate::walk::walk_no_read(path, |_| false, &mut |entry| {\n-            let file_path = entry.path();\n-            if let Some(ext) = file_path.extension() {\n-                if ext == \"stderr\" || ext == \"stdout\" {\n-                    // Test output filenames have one of the formats:\n-                    // ```\n-                    // $testname.stderr\n-                    // $testname.$mode.stderr\n-                    // $testname.$revision.stderr\n-                    // $testname.$revision.$mode.stderr\n-                    // ```\n-                    //\n-                    // For now, just make sure that there is a corresponding\n-                    // `$testname.rs` file.\n-                    //\n-                    // NB: We do not use file_stem() as some file names have multiple `.`s and we\n-                    // must strip all of them.\n-                    let testname =\n-                        file_path.file_name().unwrap().to_str().unwrap().split_once('.').unwrap().0;\n-                    if !file_path.with_file_name(testname).with_extension(\"rs\").exists() {\n-                        tidy_error!(bad, \"Stray file with UI testing output: {:?}\", file_path);\n-                    }\n+    let (ui, ui_fulldeps) = (path.join(\"ui\"), path.join(\"ui-fulldeps\"));\n+    let paths = [ui.as_path(), ui_fulldeps.as_path()];\n+    crate::walk::walk_no_read(&paths, |_| false, &mut |entry| {\n+        let file_path = entry.path();\n+        if let Some(ext) = file_path.extension() {\n+            if ext == \"stderr\" || ext == \"stdout\" {\n+                // Test output filenames have one of the formats:\n+                // ```\n+                // $testname.stderr\n+                // $testname.$mode.stderr\n+                // $testname.$revision.stderr\n+                // $testname.$revision.$mode.stderr\n+                // ```\n+                //\n+                // For now, just make sure that there is a corresponding\n+                // `$testname.rs` file.\n+                //\n+                // NB: We do not use file_stem() as some file names have multiple `.`s and we\n+                // must strip all of them.\n+                let testname =\n+                    file_path.file_name().unwrap().to_str().unwrap().split_once('.').unwrap().0;\n+                if !file_path.with_file_name(testname).with_extension(\"rs\").exists() {\n+                    tidy_error!(bad, \"Stray file with UI testing output: {:?}\", file_path);\n+                }\n \n-                    if let Ok(metadata) = fs::metadata(file_path) {\n-                        if metadata.len() == 0 {\n-                            tidy_error!(bad, \"Empty file with UI testing output: {:?}\", file_path);\n-                        }\n+                if let Ok(metadata) = fs::metadata(file_path) {\n+                    if metadata.len() == 0 {\n+                        tidy_error!(bad, \"Empty file with UI testing output: {:?}\", file_path);\n                     }\n                 }\n             }\n-        });\n-    }\n+        }\n+    });\n }"}, {"sha": "2ade22c209f5aa157e2e39ac88b8913f9d98b212", "filename": "src/tools/tidy/src/walk.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/19b272a94b6f311affc86d721c34519299144681/src%2Ftools%2Ftidy%2Fsrc%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b272a94b6f311affc86d721c34519299144681/src%2Ftools%2Ftidy%2Fsrc%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fwalk.rs?ref=19b272a94b6f311affc86d721c34519299144681", "patch": "@@ -35,26 +35,24 @@ pub fn filter_dirs(path: &Path) -> bool {\n \n /// Filter for only files that end in `.rs`.\n pub fn filter_not_rust(path: &Path) -> bool {\n-    !path.is_dir() && path.extension() != Some(OsStr::new(\"rs\"))\n+    path.extension() != Some(OsStr::new(\"rs\")) && !path.is_dir()\n }\n \n-pub fn walk_many(\n-    paths: &[&Path],\n+pub fn walk(\n+    path: &Path,\n     skip: impl Clone + Send + Sync + 'static + Fn(&Path) -> bool,\n     f: &mut dyn FnMut(&DirEntry, &str),\n ) {\n-    for path in paths {\n-        walk(path, skip.clone(), f);\n-    }\n+    walk_many(&[path], skip, f);\n }\n \n-pub fn walk(\n-    path: &Path,\n-    skip: impl Send + Sync + 'static + Fn(&Path) -> bool,\n+pub fn walk_many(\n+    paths: &[&Path],\n+    skip: impl Clone + Send + Sync + 'static + Fn(&Path) -> bool,\n     f: &mut dyn FnMut(&DirEntry, &str),\n ) {\n     let mut contents = Vec::new();\n-    walk_no_read(path, skip, &mut |entry| {\n+    walk_no_read(paths, skip, &mut |entry| {\n         contents.clear();\n         let mut file = t!(File::open(entry.path()), entry.path());\n         t!(file.read_to_end(&mut contents), entry.path());\n@@ -67,11 +65,14 @@ pub fn walk(\n }\n \n pub(crate) fn walk_no_read(\n-    path: &Path,\n+    paths: &[&Path],\n     skip: impl Send + Sync + 'static + Fn(&Path) -> bool,\n     f: &mut dyn FnMut(&DirEntry),\n ) {\n-    let mut walker = ignore::WalkBuilder::new(path);\n+    let mut walker = ignore::WalkBuilder::new(paths[0]);\n+    for path in &paths[1..] {\n+        walker.add(path);\n+    }\n     let walker = walker.filter_entry(move |e| !skip(e.path()));\n     for entry in walker.build() {\n         if let Ok(entry) = entry {"}]}