{"sha": "48859db151b839518bdd9d44a2387c0f6b65d141", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ODU5ZGIxNTFiODM5NTE4YmRkOWQ0NGEyMzg3YzBmNmI2NWQxNDE=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-12-26T19:12:56Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-12-27T00:24:45Z"}, "message": "Relax bounds on HashSet to match hashbrown\n\nNo functional changes are made, and all APIs are moved to strictly less\nrestrictive bounds.\n\nThese APIs changed from the old bound listed to the new bound:\n\nT: Hash + Eq -> T\n* new\n* with_capacity\n\nT: Eq + Hash, S: BuildHasher -> T\n* with_hasher\n* with_capacity_and_hasher\n* hasher\n\nT: Eq + Hash + Debug -> T: Debug\nS: BuildHasher -> S\n<HashSet as Debug>\n\nT: Eq + Hash -> T\nS: BuildHasher + Default -> S: Default\n<HashSet as Default>", "tree": {"sha": "b6baa53fb9e0d98b3b5362e6749364483ed98701", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6baa53fb9e0d98b3b5362e6749364483ed98701"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48859db151b839518bdd9d44a2387c0f6b65d141", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48859db151b839518bdd9d44a2387c0f6b65d141", "html_url": "https://github.com/rust-lang/rust/commit/48859db151b839518bdd9d44a2387c0f6b65d141", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48859db151b839518bdd9d44a2387c0f6b65d141/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b92689f3d0c3b90fa01d9873cdf01543d51c000", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b92689f3d0c3b90fa01d9873cdf01543d51c000", "html_url": "https://github.com/rust-lang/rust/commit/3b92689f3d0c3b90fa01d9873cdf01543d51c000"}], "stats": {"total": 40, "additions": 14, "deletions": 26}, "files": [{"sha": "f461f26572f01d84d8a229ab0a3d3d29dbca8ea4", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/48859db151b839518bdd9d44a2387c0f6b65d141/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48859db151b839518bdd9d44a2387c0f6b65d141/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=48859db151b839518bdd9d44a2387c0f6b65d141", "patch": "@@ -110,7 +110,7 @@ pub struct HashSet<T, S = RandomState> {\n     map: HashMap<T, (), S>,\n }\n \n-impl<T: Hash + Eq> HashSet<T, RandomState> {\n+impl<T> HashSet<T, RandomState> {\n     /// Creates an empty `HashSet`.\n     ///\n     /// The hash set is initially created with a capacity of 0, so it will not allocate until it\n@@ -261,13 +261,7 @@ impl<T, S> HashSet<T, S> {\n     pub fn clear(&mut self) {\n         self.map.clear()\n     }\n-}\n \n-impl<T, S> HashSet<T, S>\n-where\n-    T: Eq + Hash,\n-    S: BuildHasher,\n-{\n     /// Creates a new empty hash set which will use the given hasher to hash\n     /// keys.\n     ///\n@@ -340,7 +334,13 @@ where\n     pub fn hasher(&self) -> &S {\n         self.map.hasher()\n     }\n+}\n \n+impl<T, S> HashSet<T, S>\n+where\n+    T: Eq + Hash,\n+    S: BuildHasher,\n+{\n     /// Reserves capacity for at least `additional` more elements to be inserted\n     /// in the `HashSet`. The collection may reserve more space to avoid\n     /// frequent reallocations.\n@@ -896,8 +896,7 @@ where\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T, S> fmt::Debug for HashSet<T, S>\n where\n-    T: Eq + Hash + fmt::Debug,\n-    S: BuildHasher,\n+    T: fmt::Debug,\n {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_set().entries(self.iter()).finish()\n@@ -945,8 +944,7 @@ where\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T, S> Default for HashSet<T, S>\n where\n-    T: Eq + Hash,\n-    S: BuildHasher + Default,\n+    S: Default,\n {\n     /// Creates an empty `HashSet<T, S>` with the `Default` value for the hasher.\n     #[inline]"}, {"sha": "8397d204f35cf76e9239a904fd4d865da38607c2", "filename": "src/test/ui/const-generics/array-impls/core-traits-no-impls-length-33.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48859db151b839518bdd9d44a2387c0f6b65d141/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48859db151b839518bdd9d44a2387c0f6b65d141/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.rs?ref=48859db151b839518bdd9d44a2387c0f6b65d141", "patch": "@@ -6,7 +6,6 @@ pub fn no_debug() {\n pub fn no_hash() {\n     use std::collections::HashSet;\n     let mut set = HashSet::new();\n-    //~^ ERROR arrays only have std trait implementations for lengths 0..=32\n     set.insert([0_usize; 33]);\n     //~^ ERROR arrays only have std trait implementations for lengths 0..=32\n }"}, {"sha": "594a0d4b5d8443ff316a3bb828850ffc33bd528c", "filename": "src/test/ui/const-generics/array-impls/core-traits-no-impls-length-33.stderr", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/48859db151b839518bdd9d44a2387c0f6b65d141/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48859db151b839518bdd9d44a2387c0f6b65d141/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.stderr?ref=48859db151b839518bdd9d44a2387c0f6b65d141", "patch": "@@ -8,24 +8,15 @@ LL |     println!(\"{:?}\", [0_usize; 33]);\n    = note: required by `std::fmt::Debug::fmt`\n \n error[E0277]: arrays only have std trait implementations for lengths 0..=32\n-  --> $DIR/core-traits-no-impls-length-33.rs:10:16\n+  --> $DIR/core-traits-no-impls-length-33.rs:9:16\n    |\n LL |     set.insert([0_usize; 33]);\n    |                ^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[usize; 33]`\n    |\n    = note: required because of the requirements on the impl of `std::cmp::Eq` for `[usize; 33]`\n \n-error[E0277]: arrays only have std trait implementations for lengths 0..=32\n-  --> $DIR/core-traits-no-impls-length-33.rs:8:19\n-   |\n-LL |     let mut set = HashSet::new();\n-   |                   ^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[usize; 33]`\n-   |\n-   = note: required because of the requirements on the impl of `std::cmp::Eq` for `[usize; 33]`\n-   = note: required by `std::collections::HashSet::<T>::new`\n-\n error[E0369]: binary operation `==` cannot be applied to type `[usize; 33]`\n-  --> $DIR/core-traits-no-impls-length-33.rs:15:19\n+  --> $DIR/core-traits-no-impls-length-33.rs:14:19\n    |\n LL |     [0_usize; 33] == [1_usize; 33]\n    |     ------------- ^^ ------------- [usize; 33]\n@@ -35,7 +26,7 @@ LL |     [0_usize; 33] == [1_usize; 33]\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `[usize; 33]`\n \n error[E0369]: binary operation `<` cannot be applied to type `[usize; 33]`\n-  --> $DIR/core-traits-no-impls-length-33.rs:20:19\n+  --> $DIR/core-traits-no-impls-length-33.rs:19:19\n    |\n LL |     [0_usize; 33] < [1_usize; 33]\n    |     ------------- ^ ------------- [usize; 33]\n@@ -45,7 +36,7 @@ LL |     [0_usize; 33] < [1_usize; 33]\n    = note: an implementation of `std::cmp::PartialOrd` might be missing for `[usize; 33]`\n \n error[E0277]: the trait bound `&[usize; 33]: std::iter::IntoIterator` is not satisfied\n-  --> $DIR/core-traits-no-impls-length-33.rs:25:14\n+  --> $DIR/core-traits-no-impls-length-33.rs:24:14\n    |\n LL |     for _ in &[0_usize; 33] {\n    |              ^^^^^^^^^^^^^^ the trait `std::iter::IntoIterator` is not implemented for `&[usize; 33]`\n@@ -57,7 +48,7 @@ LL |     for _ in &[0_usize; 33] {\n              <&'a mut [T] as std::iter::IntoIterator>\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n \n Some errors have detailed explanations: E0277, E0369.\n For more information about an error, try `rustc --explain E0277`."}]}