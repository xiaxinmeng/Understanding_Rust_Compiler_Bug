{"sha": "b9f3bdf5ce37c50c71dd7cee969a14e15f14130a", "node_id": "C_kwDOAAsO6NoAKGI5ZjNiZGY1Y2UzN2M1MGM3MWRkN2NlZTk2OWExNGUxNWYxNDEzMGE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-10T22:50:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-10T22:50:17Z"}, "message": "Auto merge of #97968 - matthiaskrgr:rollup-qtd4i5h, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #93331 (refactor write_output_file to merge two invocation paths into one.)\n - #97928 (Removes debug settings from wasm32_unknown_emscripten default link args)\n - #97940 (Use relative links instead of linking to doc.rust-lang.org when possible)\n - #97941 (nit: Fixed several error_codes/Exxxx.md messages which used UpperCamelCase\u2026)\n - #97953 (Add regression test for #54378)\n - #97957 (Make `std::` prefix suggestion test `run-rustfix`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "f81239d56cc87f858ae19c9b3f3b485cf8fe0329", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f81239d56cc87f858ae19c9b3f3b485cf8fe0329"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9f3bdf5ce37c50c71dd7cee969a14e15f14130a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9f3bdf5ce37c50c71dd7cee969a14e15f14130a", "html_url": "https://github.com/rust-lang/rust/commit/b9f3bdf5ce37c50c71dd7cee969a14e15f14130a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9f3bdf5ce37c50c71dd7cee969a14e15f14130a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec55c61305eaf385fc1b93ac9a78284b4d887fe5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec55c61305eaf385fc1b93ac9a78284b4d887fe5", "html_url": "https://github.com/rust-lang/rust/commit/ec55c61305eaf385fc1b93ac9a78284b4d887fe5"}, {"sha": "5d04bc828e511d548f57656940ead49e3e897650", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d04bc828e511d548f57656940ead49e3e897650", "html_url": "https://github.com/rust-lang/rust/commit/5d04bc828e511d548f57656940ead49e3e897650"}], "stats": {"total": 153, "additions": 88, "deletions": 65}, "files": [{"sha": "50f8949c8974d73ada01f044bdee55ed47c7812d", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b9f3bdf5ce37c50c71dd7cee969a14e15f14130a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9f3bdf5ce37c50c71dd7cee969a14e15f14130a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=b9f3bdf5ce37c50c71dd7cee969a14e15f14130a", "patch": "@@ -56,28 +56,24 @@ pub fn write_output_file<'ll>(\n     file_type: llvm::FileType,\n     self_profiler_ref: &SelfProfilerRef,\n ) -> Result<(), FatalError> {\n+    debug!(\"write_output_file output={:?} dwo_output={:?}\", output, dwo_output);\n     unsafe {\n         let output_c = path_to_c_string(output);\n-        let result = if let Some(dwo_output) = dwo_output {\n-            let dwo_output_c = path_to_c_string(dwo_output);\n-            llvm::LLVMRustWriteOutputFile(\n-                target,\n-                pm,\n-                m,\n-                output_c.as_ptr(),\n-                dwo_output_c.as_ptr(),\n-                file_type,\n-            )\n+        let dwo_output_c;\n+        let dwo_output_ptr = if let Some(dwo_output) = dwo_output {\n+            dwo_output_c = path_to_c_string(dwo_output);\n+            dwo_output_c.as_ptr()\n         } else {\n-            llvm::LLVMRustWriteOutputFile(\n-                target,\n-                pm,\n-                m,\n-                output_c.as_ptr(),\n-                std::ptr::null(),\n-                file_type,\n-            )\n+            std::ptr::null()\n         };\n+        let result = llvm::LLVMRustWriteOutputFile(\n+            target,\n+            pm,\n+            m,\n+            output_c.as_ptr(),\n+            dwo_output_ptr,\n+            file_type,\n+        );\n \n         // Record artifact sizes for self-profiling\n         if result == llvm::LLVMRustResult::Success {"}, {"sha": "a12378a206de2252b21c51a56e240691b8687c09", "filename": "compiler/rustc_error_codes/src/error_codes/E0451.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b9f3bdf5ce37c50c71dd7cee969a14e15f14130a/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0451.md", "raw_url": "https://github.com/rust-lang/rust/raw/b9f3bdf5ce37c50c71dd7cee969a14e15f14130a/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0451.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0451.md?ref=b9f3bdf5ce37c50c71dd7cee969a14e15f14130a", "patch": "@@ -3,35 +3,35 @@ A struct constructor with private fields was invoked.\n Erroneous code example:\n \n ```compile_fail,E0451\n-mod Bar {\n+mod bar {\n     pub struct Foo {\n         pub a: isize,\n         b: isize,\n     }\n }\n \n-let f = Bar::Foo{ a: 0, b: 0 }; // error: field `b` of struct `Bar::Foo`\n+let f = bar::Foo{ a: 0, b: 0 }; // error: field `b` of struct `bar::Foo`\n                                 //        is private\n ```\n \n To fix this error, please ensure that all the fields of the struct are public,\n or implement a function for easy instantiation. Examples:\n \n ```\n-mod Bar {\n+mod bar {\n     pub struct Foo {\n         pub a: isize,\n         pub b: isize, // we set `b` field public\n     }\n }\n \n-let f = Bar::Foo{ a: 0, b: 0 }; // ok!\n+let f = bar::Foo{ a: 0, b: 0 }; // ok!\n ```\n \n Or:\n \n ```\n-mod Bar {\n+mod bar {\n     pub struct Foo {\n         pub a: isize,\n         b: isize, // still private\n@@ -44,5 +44,5 @@ mod Bar {\n     }\n }\n \n-let f = Bar::Foo::new(); // ok!\n+let f = bar::Foo::new(); // ok!\n ```"}, {"sha": "4881f61d0bc48301f7d41e2df5b721ee1783002b", "filename": "compiler/rustc_error_codes/src/error_codes/E0574.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b9f3bdf5ce37c50c71dd7cee969a14e15f14130a/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0574.md", "raw_url": "https://github.com/rust-lang/rust/raw/b9f3bdf5ce37c50c71dd7cee969a14e15f14130a/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0574.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0574.md?ref=b9f3bdf5ce37c50c71dd7cee969a14e15f14130a", "patch": "@@ -4,9 +4,9 @@ expected.\n Erroneous code example:\n \n ```compile_fail,E0574\n-mod Mordor {}\n+mod mordor {}\n \n-let sauron = Mordor { x: () }; // error!\n+let sauron = mordor { x: () }; // error!\n \n enum Jak {\n     Daxter { i: isize },\n@@ -19,17 +19,17 @@ match eco {\n ```\n \n In all these errors, a type was expected. For example, in the first error,\n-we tried to instantiate the `Mordor` module, which is impossible. If you want\n+we tried to instantiate the `mordor` module, which is impossible. If you want\n to instantiate a type inside a module, you can do it as follow:\n \n ```\n-mod Mordor {\n+mod mordor {\n     pub struct TheRing {\n         pub x: usize,\n     }\n }\n \n-let sauron = Mordor::TheRing { x: 1 }; // ok!\n+let sauron = mordor::TheRing { x: 1 }; // ok!\n ```\n \n In the second error, we tried to bind the `Jak` enum directly, which is not"}, {"sha": "eba2d3b14175b6825686e9ac18cfd3c36320b597", "filename": "compiler/rustc_error_codes/src/error_codes/E0577.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b9f3bdf5ce37c50c71dd7cee969a14e15f14130a/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0577.md", "raw_url": "https://github.com/rust-lang/rust/raw/b9f3bdf5ce37c50c71dd7cee969a14e15f14130a/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0577.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0577.md?ref=b9f3bdf5ce37c50c71dd7cee969a14e15f14130a", "patch": "@@ -11,13 +11,13 @@ fn main() {}\n ```\n \n `Sea` is not a module, therefore it is invalid to use it in a visibility path.\n-To fix this error we need to ensure `Sea` is a module.\n+To fix this error we need to ensure `sea` is a module.\n \n Please note that the visibility scope can only be applied on ancestors!\n \n ```edition2018\n-pub mod Sea {\n-    pub (in crate::Sea) struct Shark; // ok!\n+pub mod sea {\n+    pub (in crate::sea) struct Shark; // ok!\n }\n \n fn main() {}"}, {"sha": "eb293118acc869c85624fe7112692a067287b5ae", "filename": "compiler/rustc_error_codes/src/error_codes/E0603.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b9f3bdf5ce37c50c71dd7cee969a14e15f14130a/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0603.md", "raw_url": "https://github.com/rust-lang/rust/raw/b9f3bdf5ce37c50c71dd7cee969a14e15f14130a/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0603.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0603.md?ref=b9f3bdf5ce37c50c71dd7cee969a14e15f14130a", "patch": "@@ -3,24 +3,24 @@ A private item was used outside its scope.\n Erroneous code example:\n \n ```compile_fail,E0603\n-mod SomeModule {\n+mod foo {\n     const PRIVATE: u32 = 0x_a_bad_1dea_u32; // This const is private, so we\n                                             // can't use it outside of the\n-                                            // `SomeModule` module.\n+                                            // `foo` module.\n }\n \n-println!(\"const value: {}\", SomeModule::PRIVATE); // error: constant `PRIVATE`\n+println!(\"const value: {}\", foo::PRIVATE); // error: constant `PRIVATE`\n                                                   //        is private\n ```\n \n In order to fix this error, you need to make the item public by using the `pub`\n keyword. Example:\n \n ```\n-mod SomeModule {\n+mod foo {\n     pub const PRIVATE: u32 = 0x_a_bad_1dea_u32; // We set it public by using the\n                                                 // `pub` keyword.\n }\n \n-println!(\"const value: {}\", SomeModule::PRIVATE); // ok!\n+println!(\"const value: {}\", foo::PRIVATE); // ok!\n ```"}, {"sha": "e10c1639dd38a5690e410e61e79c299999f04a7c", "filename": "compiler/rustc_error_codes/src/error_codes/E0742.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b9f3bdf5ce37c50c71dd7cee969a14e15f14130a/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0742.md", "raw_url": "https://github.com/rust-lang/rust/raw/b9f3bdf5ce37c50c71dd7cee969a14e15f14130a/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0742.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0742.md?ref=b9f3bdf5ce37c50c71dd7cee969a14e15f14130a", "patch": "@@ -4,18 +4,18 @@ item.\n Erroneous code example:\n \n ```compile_fail,E0742,edition2018\n-pub mod Sea {}\n+pub mod sea {}\n \n-pub (in crate::Sea) struct Shark; // error!\n+pub (in crate::sea) struct Shark; // error!\n \n fn main() {}\n ```\n \n-To fix this error, we need to move the `Shark` struct inside the `Sea` module:\n+To fix this error, we need to move the `Shark` struct inside the `sea` module:\n \n ```edition2018\n-pub mod Sea {\n-    pub (in crate::Sea) struct Shark; // ok!\n+pub mod sea {\n+    pub (in crate::sea) struct Shark; // ok!\n }\n \n fn main() {}\n@@ -25,9 +25,9 @@ Of course, you can do it as long as the module you're referring to is an\n ancestor:\n \n ```edition2018\n-pub mod Earth {\n-    pub mod Sea {\n-        pub (in crate::Earth) struct Shark; // ok!\n+pub mod earth {\n+    pub mod sea {\n+        pub (in crate::earth) struct Shark; // ok!\n     }\n }\n "}, {"sha": "975051100b0397c6e1a05ebc0e3d50573dec6d0e", "filename": "compiler/rustc_target/src/spec/wasm32_unknown_emscripten.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b9f3bdf5ce37c50c71dd7cee969a14e15f14130a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9f3bdf5ce37c50c71dd7cee969a14e15f14130a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs?ref=b9f3bdf5ce37c50c71dd7cee969a14e15f14130a", "patch": "@@ -16,15 +16,7 @@ pub fn target() -> Target {\n     let mut post_link_args = LinkArgs::new();\n     post_link_args.insert(\n         LinkerFlavor::Em,\n-        vec![\n-            \"-s\".into(),\n-            \"ERROR_ON_UNDEFINED_SYMBOLS=1\".into(),\n-            \"-s\".into(),\n-            \"ASSERTIONS=1\".into(),\n-            \"-s\".into(),\n-            \"ABORTING_MALLOC=0\".into(),\n-            \"-Wl,--fatal-warnings\".into(),\n-        ],\n+        vec![\"-sABORTING_MALLOC=0\".into(), \"-Wl,--fatal-warnings\".into()],\n     );\n \n     let opts = TargetOptions {"}, {"sha": "81bf1dfdf451089e41985e9b578cfc8d87e0f868", "filename": "library/core/src/hash/sip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9f3bdf5ce37c50c71dd7cee969a14e15f14130a/library%2Fcore%2Fsrc%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9f3bdf5ce37c50c71dd7cee969a14e15f14130a/library%2Fcore%2Fsrc%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fsip.rs?ref=b9f3bdf5ce37c50c71dd7cee969a14e15f14130a", "patch": "@@ -38,7 +38,7 @@ struct SipHasher24 {\n /// SipHash is a general-purpose hashing function: it runs at a good\n /// speed (competitive with Spooky and City) and permits strong _keyed_\n /// hashing. This lets you key your hash tables from a strong RNG, such as\n-/// [`rand::os::OsRng`](https://doc.rust-lang.org/rand/rand/os/struct.OsRng.html).\n+/// [`rand::os::OsRng`](https://docs.rs/rand/latest/rand/rngs/struct.OsRng.html).\n ///\n /// Although the SipHash algorithm is considered to be generally strong,\n /// it is not intended for cryptographic purposes. As such, all"}, {"sha": "b4ea536083392b3ffd39615732f5d00a855a323c", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9f3bdf5ce37c50c71dd7cee969a14e15f14130a/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9f3bdf5ce37c50c71dd7cee969a14e15f14130a/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=b9f3bdf5ce37c50c71dd7cee969a14e15f14130a", "patch": "@@ -865,7 +865,7 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// For instance, you cannot [`Read`] into an uninitialized buffer:\n     ///\n-    /// [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html\n+    /// [`Read`]: ../../std/io/trait.Read.html\n     ///\n     /// ```rust,no_run\n     /// use std::{io, mem::MaybeUninit};"}, {"sha": "aa42d4a7c41f60fb429adeeaff6b014ed9903264", "filename": "src/test/ui/lifetimes/issue-54378.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b9f3bdf5ce37c50c71dd7cee969a14e15f14130a/src%2Ftest%2Fui%2Flifetimes%2Fissue-54378.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9f3bdf5ce37c50c71dd7cee969a14e15f14130a/src%2Ftest%2Fui%2Flifetimes%2Fissue-54378.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-54378.rs?ref=b9f3bdf5ce37c50c71dd7cee969a14e15f14130a", "patch": "@@ -0,0 +1,26 @@\n+// check-pass\n+\n+// Regression test for #54378.\n+\n+#![feature(never_type)]\n+\n+use std::marker::PhantomData;\n+\n+pub trait Machine<'a, 'mir, 'tcx>: Sized {\n+    type MemoryKinds: ::std::fmt::Debug + Copy + Eq;\n+    const MUT_STATIC_KIND: Option<Self::MemoryKinds>;\n+}\n+\n+pub struct CompileTimeEvaluator<'a, 'mir, 'tcx: 'a+'mir> {\n+    pub _data: PhantomData<(&'a (), &'mir (), &'tcx ())>,\n+}\n+\n+impl<'a, 'mir, 'tcx: 'a + 'mir> Machine<'a, 'mir, 'tcx>\n+    for CompileTimeEvaluator<'a, 'mir, 'tcx>\n+{\n+    type MemoryKinds = !;\n+\n+    const MUT_STATIC_KIND: Option<!> = None;\n+}\n+\n+fn main() {}"}, {"sha": "102c5c1868fbfea14ba2e5e485e04e45b48c35c8", "filename": "src/test/ui/suggestions/suggest-std-when-using-type.fixed", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b9f3bdf5ce37c50c71dd7cee969a14e15f14130a/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-std-when-using-type.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b9f3bdf5ce37c50c71dd7cee969a14e15f14130a/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-std-when-using-type.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-std-when-using-type.fixed?ref=b9f3bdf5ce37c50c71dd7cee969a14e15f14130a", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+fn main() {\n+    let pi = std::f32::consts::PI; //~ ERROR ambiguous associated type\n+    let bytes = \"hello world\".as_bytes();\n+    let string = std::str::from_utf8(bytes).unwrap();\n+    //~^ ERROR no function or associated item named `from_utf8` found\n+    println!(\"{pi} {bytes:?} {string}\");\n+}"}, {"sha": "5abc016deb076422736209c63f70889a87850f19", "filename": "src/test/ui/suggestions/suggest-std-when-using-type.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b9f3bdf5ce37c50c71dd7cee969a14e15f14130a/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-std-when-using-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9f3bdf5ce37c50c71dd7cee969a14e15f14130a/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-std-when-using-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-std-when-using-type.rs?ref=b9f3bdf5ce37c50c71dd7cee969a14e15f14130a", "patch": "@@ -1,7 +1,8 @@\n+// run-rustfix\n fn main() {\n     let pi = f32::consts::PI; //~ ERROR ambiguous associated type\n     let bytes = \"hello world\".as_bytes();\n-    let string = unsafe {\n-        str::from_utf8(bytes) //~ ERROR no function or associated item named `from_utf8` found\n-    };\n+    let string = str::from_utf8(bytes).unwrap();\n+    //~^ ERROR no function or associated item named `from_utf8` found\n+    println!(\"{pi} {bytes:?} {string}\");\n }"}, {"sha": "6f890b87b24bd207e5cc2b1944a956fb73e83785", "filename": "src/test/ui/suggestions/suggest-std-when-using-type.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b9f3bdf5ce37c50c71dd7cee969a14e15f14130a/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-std-when-using-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9f3bdf5ce37c50c71dd7cee969a14e15f14130a/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-std-when-using-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-std-when-using-type.stderr?ref=b9f3bdf5ce37c50c71dd7cee969a14e15f14130a", "patch": "@@ -1,5 +1,5 @@\n error[E0223]: ambiguous associated type\n-  --> $DIR/suggest-std-when-using-type.rs:2:14\n+  --> $DIR/suggest-std-when-using-type.rs:3:14\n    |\n LL |     let pi = f32::consts::PI;\n    |              ^^^^^^^^^^^\n@@ -10,15 +10,15 @@ LL |     let pi = std::f32::consts::PI;\n    |              +++++\n \n error[E0599]: no function or associated item named `from_utf8` found for type `str` in the current scope\n-  --> $DIR/suggest-std-when-using-type.rs:5:14\n+  --> $DIR/suggest-std-when-using-type.rs:5:23\n    |\n-LL |         str::from_utf8(bytes)\n-   |              ^^^^^^^^^ function or associated item not found in `str`\n+LL |     let string = str::from_utf8(bytes).unwrap();\n+   |                       ^^^^^^^^^ function or associated item not found in `str`\n    |\n help: you are looking for the module in `std`, not the primitive type\n    |\n-LL |         std::str::from_utf8(bytes)\n-   |         +++++\n+LL |     let string = std::str::from_utf8(bytes).unwrap();\n+   |                  +++++\n \n error: aborting due to 2 previous errors\n "}]}