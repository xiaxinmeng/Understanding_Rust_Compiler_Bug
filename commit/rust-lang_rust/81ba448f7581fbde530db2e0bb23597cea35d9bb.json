{"sha": "81ba448f7581fbde530db2e0bb23597cea35d9bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxYmE0NDhmNzU4MWZiZGU1MzBkYjJlMGJiMjM1OTdjZWEzNWQ5YmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-16T22:11:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-16T22:11:58Z"}, "message": "Auto merge of #53397 - varkor:feature-collector-expand-visitor, r=nikomatsakis\n\nVisit all attributes for feature collection\n\nPreviously feature attributes were just collected on item-like \"things\" as well as exported macros and crate attributes. This ignored some places feature attributes could be specified, such as on enum variants.\n\nFixes https://github.com/rust-lang/rust/issues/53391.", "tree": {"sha": "bde2e7fad6bc7ba0202ca4adf0cafb907cac8c37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bde2e7fad6bc7ba0202ca4adf0cafb907cac8c37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81ba448f7581fbde530db2e0bb23597cea35d9bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81ba448f7581fbde530db2e0bb23597cea35d9bb", "html_url": "https://github.com/rust-lang/rust/commit/81ba448f7581fbde530db2e0bb23597cea35d9bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81ba448f7581fbde530db2e0bb23597cea35d9bb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2028828db7e4870cb6a310f8ad8169ac9ea134d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2028828db7e4870cb6a310f8ad8169ac9ea134d", "html_url": "https://github.com/rust-lang/rust/commit/b2028828db7e4870cb6a310f8ad8169ac9ea134d"}, {"sha": "23d10ec4cc8dac244becdb57fd01d3f9d26cbc64", "url": "https://api.github.com/repos/rust-lang/rust/commits/23d10ec4cc8dac244becdb57fd01d3f9d26cbc64", "html_url": "https://github.com/rust-lang/rust/commit/23d10ec4cc8dac244becdb57fd01d3f9d26cbc64"}], "stats": {"total": 94, "additions": 39, "deletions": 55}, "files": [{"sha": "c21ac6218031df84f321d082e792494a93c559e3", "filename": "src/librustc/middle/lib_features.rs", "status": "modified", "additions": 39, "deletions": 55, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/81ba448f7581fbde530db2e0bb23597cea35d9bb/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ba448f7581fbde530db2e0bb23597cea35d9bb/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flib_features.rs?ref=81ba448f7581fbde530db2e0bb23597cea35d9bb", "patch": "@@ -18,8 +18,7 @@ use ty::TyCtxt;\n use syntax::symbol::Symbol;\n use syntax::ast::{Attribute, MetaItem, MetaItemKind};\n use syntax_pos::{Span, DUMMY_SP};\n-use hir;\n-use hir::itemlikevisit::ItemLikeVisitor;\n+use hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n use errors::DiagnosticId;\n \n@@ -59,47 +58,44 @@ impl<'a, 'tcx> LibFeatureCollector<'a, 'tcx> {\n         }\n     }\n \n-    fn extract(&self, attrs: &[Attribute]) -> Vec<(Symbol, Option<Symbol>, Span)> {\n+    fn extract(&self, attr: &Attribute) -> Option<(Symbol, Option<Symbol>, Span)> {\n         let stab_attrs = vec![\"stable\", \"unstable\", \"rustc_const_unstable\"];\n-        let mut features = vec![];\n-\n-        for attr in attrs {\n-            // Find a stability attribute (i.e. `#[stable (..)]`, `#[unstable (..)]`,\n-            // `#[rustc_const_unstable (..)]`).\n-            if let Some(stab_attr) = stab_attrs.iter().find(|stab_attr| {\n-                attr.check_name(stab_attr)\n-            }) {\n-                let meta_item = attr.meta();\n-                if let Some(MetaItem { node: MetaItemKind::List(ref metas), .. }) = meta_item {\n-                    let mut feature = None;\n-                    let mut since = None;\n-                    for meta in metas {\n-                        if let Some(mi) = meta.meta_item() {\n-                            // Find the `feature = \"..\"` meta-item.\n-                            match (&*mi.name().as_str(), mi.value_str()) {\n-                                (\"feature\", val) => feature = val,\n-                                (\"since\", val) => since = val,\n-                                _ => {}\n-                            }\n+\n+        // Find a stability attribute (i.e. `#[stable (..)]`, `#[unstable (..)]`,\n+        // `#[rustc_const_unstable (..)]`).\n+        if let Some(stab_attr) = stab_attrs.iter().find(|stab_attr| {\n+            attr.check_name(stab_attr)\n+        }) {\n+            let meta_item = attr.meta();\n+            if let Some(MetaItem { node: MetaItemKind::List(ref metas), .. }) = meta_item {\n+                let mut feature = None;\n+                let mut since = None;\n+                for meta in metas {\n+                    if let Some(mi) = meta.meta_item() {\n+                        // Find the `feature = \"..\"` meta-item.\n+                        match (&*mi.name().as_str(), mi.value_str()) {\n+                            (\"feature\", val) => feature = val,\n+                            (\"since\", val) => since = val,\n+                            _ => {}\n                         }\n                     }\n-                    if let Some(feature) = feature {\n-                        // This additional check for stability is to make sure we\n-                        // don't emit additional, irrelevant errors for malformed\n-                        // attributes.\n-                        if *stab_attr != \"stable\" || since.is_some() {\n-                            features.push((feature, since, attr.span));\n-                        }\n+                }\n+                if let Some(feature) = feature {\n+                    // This additional check for stability is to make sure we\n+                    // don't emit additional, irrelevant errors for malformed\n+                    // attributes.\n+                    if *stab_attr != \"stable\" || since.is_some() {\n+                        return Some((feature, since, attr.span));\n                     }\n-                    // We need to iterate over the other attributes, because\n-                    // `rustc_const_unstable` is not mutually exclusive with\n-                    // the other stability attributes, so we can't just `break`\n-                    // here.\n                 }\n+                // We need to iterate over the other attributes, because\n+                // `rustc_const_unstable` is not mutually exclusive with\n+                // the other stability attributes, so we can't just `break`\n+                // here.\n             }\n         }\n \n-        features\n+        None\n     }\n \n     fn collect_feature(&mut self, feature: Symbol, since: Option<Symbol>, span: Span) {\n@@ -140,25 +136,17 @@ impl<'a, 'tcx> LibFeatureCollector<'a, 'tcx> {\n             }\n         }\n     }\n-\n-    fn collect_from_attrs(&mut self, attrs: &[Attribute]) {\n-        for (feature, stable, span) in self.extract(attrs) {\n-            self.collect_feature(feature, stable, span);\n-        }\n-    }\n }\n \n-impl<'a, 'v, 'tcx> ItemLikeVisitor<'v> for LibFeatureCollector<'a, 'tcx> {\n-    fn visit_item(&mut self, item: &hir::Item) {\n-        self.collect_from_attrs(&item.attrs);\n-    }\n-\n-    fn visit_trait_item(&mut self, trait_item: &hir::TraitItem) {\n-        self.collect_from_attrs(&trait_item.attrs);\n+impl<'a, 'tcx> Visitor<'tcx> for LibFeatureCollector<'a, 'tcx> {\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::All(&self.tcx.hir)\n     }\n \n-    fn visit_impl_item(&mut self, impl_item: &hir::ImplItem) {\n-        self.collect_from_attrs(&impl_item.attrs);\n+    fn visit_attribute(&mut self, attr: &'tcx Attribute) {\n+        if let Some((feature, stable, span)) = self.extract(attr) {\n+            self.collect_feature(feature, stable, span);\n+        }\n     }\n }\n \n@@ -169,10 +157,6 @@ pub fn collect<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> LibFeatures {\n             collector.collect_feature(feature, since, DUMMY_SP);\n         }\n     }\n-    collector.collect_from_attrs(&tcx.hir.krate().attrs);\n-    tcx.hir.krate().visit_all_item_likes(&mut collector);\n-    for exported_macro in &tcx.hir.krate().exported_macros {\n-        collector.collect_from_attrs(&exported_macro.attrs);\n-    }\n+    intravisit::walk_crate(&mut collector, tcx.hir.krate());\n     collector.lib_features\n }"}]}