{"sha": "756431211d3960c40c974e40a82d206595cb41f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NjQzMTIxMWQzOTYwYzQwYzk3NGU0MGE4MmQyMDY1OTVjYjQxZjQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-06-04T21:13:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-04T21:13:29Z"}, "message": "Rollup merge of #83653 - jyn514:unused-sync-code, r=wesleywiser\n\nRemove unused code from `rustc_data_structures::sync`\n\nFound using https://github.com/est31/warnalyzer. Follow-up to https://github.com/rust-lang/rust/pull/83185.\n\nr? `@Zoxc` cc `@oli-obk`", "tree": {"sha": "79d1113ea92e59cef873908d97209fbd95895ce9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79d1113ea92e59cef873908d97209fbd95895ce9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/756431211d3960c40c974e40a82d206595cb41f4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgupd6CRBK7hj4Ov3rIwAAiegIADZPabzmsT9HeMF8BabuxZU9\n3uwsoxqzPj9J7u7eZoRBS0jS6T9bgSIRcZnMqeqWw67kZbT9+jE1abCVz0lkVBtH\nftwyPOE9pqGBl9bFKNy4MDbKxZfLSkddwbBlbRZTAV+igyHWKe5GBcdMrUYjbQp1\nLeIy/nKIbA9g5szICcqC9X/WMTfTc2pN7vf5u+ovNHIqZUGECbXoqUNsjZz+45VR\ntJLk8RQI9VLB+EMkBiuYu53zxXRRKWPjviIJwrKBnR1N1uViGOqFfks29hT2GHIB\nwgQdKIUtWkIGqK/lRGsBUBY55Es3l+y97bZ01YdDBuWukNwmgsqWIqxvrF2ftQo=\n=HtAI\n-----END PGP SIGNATURE-----\n", "payload": "tree 79d1113ea92e59cef873908d97209fbd95895ce9\nparent efc4e377bf5af45447d63a7e46e2976324df5a27\nparent 3412957e7f50a586f8ac2c12d0ffd0384d546534\nauthor Yuki Okushi <jtitor@2k36.org> 1622841209 +0900\ncommitter GitHub <noreply@github.com> 1622841209 +0900\n\nRollup merge of #83653 - jyn514:unused-sync-code, r=wesleywiser\n\nRemove unused code from `rustc_data_structures::sync`\n\nFound using https://github.com/est31/warnalyzer. Follow-up to https://github.com/rust-lang/rust/pull/83185.\n\nr? `@Zoxc` cc `@oli-obk`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/756431211d3960c40c974e40a82d206595cb41f4", "html_url": "https://github.com/rust-lang/rust/commit/756431211d3960c40c974e40a82d206595cb41f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/756431211d3960c40c974e40a82d206595cb41f4/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efc4e377bf5af45447d63a7e46e2976324df5a27", "url": "https://api.github.com/repos/rust-lang/rust/commits/efc4e377bf5af45447d63a7e46e2976324df5a27", "html_url": "https://github.com/rust-lang/rust/commit/efc4e377bf5af45447d63a7e46e2976324df5a27"}, {"sha": "3412957e7f50a586f8ac2c12d0ffd0384d546534", "url": "https://api.github.com/repos/rust-lang/rust/commits/3412957e7f50a586f8ac2c12d0ffd0384d546534", "html_url": "https://github.com/rust-lang/rust/commit/3412957e7f50a586f8ac2c12d0ffd0384d546534"}], "stats": {"total": 62, "additions": 2, "deletions": 60}, "files": [{"sha": "722ce6b6367266730667d510ffe4130bf44b8898", "filename": "compiler/rustc_data_structures/src/sync.rs", "status": "modified", "additions": 2, "deletions": 60, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/756431211d3960c40c974e40a82d206595cb41f4/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756431211d3960c40c974e40a82d206595cb41f4/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs?ref=756431211d3960c40c974e40a82d206595cb41f4", "patch": "@@ -43,49 +43,9 @@ cfg_if! {\n         use std::ops::Add;\n         use std::panic::{resume_unwind, catch_unwind, AssertUnwindSafe};\n \n-        /// This is a single threaded variant of AtomicCell provided by crossbeam.\n-        /// Unlike `Atomic` this is intended for all `Copy` types,\n-        /// but it lacks the explicit ordering arguments.\n-        #[derive(Debug)]\n-        pub struct AtomicCell<T: Copy>(Cell<T>);\n-\n-        impl<T: Copy> AtomicCell<T> {\n-            #[inline]\n-            pub fn new(v: T) -> Self {\n-                AtomicCell(Cell::new(v))\n-            }\n-\n-            #[inline]\n-            pub fn get_mut(&mut self) -> &mut T {\n-                self.0.get_mut()\n-            }\n-        }\n-\n-        impl<T: Copy> AtomicCell<T> {\n-            #[inline]\n-            pub fn into_inner(self) -> T {\n-                self.0.into_inner()\n-            }\n-\n-            #[inline]\n-            pub fn load(&self) -> T {\n-                self.0.get()\n-            }\n-\n-            #[inline]\n-            pub fn store(&self, val: T) {\n-                self.0.set(val)\n-            }\n-\n-            #[inline]\n-            pub fn swap(&self, val: T) -> T {\n-                self.0.replace(val)\n-            }\n-        }\n-\n         /// This is a single threaded variant of `AtomicU64`, `AtomicUsize`, etc.\n-        /// It differs from `AtomicCell` in that it has explicit ordering arguments\n-        /// and is only intended for use with the native atomic types.\n+        /// It has explicit ordering arguments and is only intended for use with\n+        /// the native atomic types.\n         /// You should use this type through the `AtomicU64`, `AtomicUsize`, etc, type aliases\n         /// as it's not intended to be used separately.\n         #[derive(Debug)]\n@@ -159,22 +119,6 @@ cfg_if! {\n             (oper_a(), oper_b())\n         }\n \n-        pub struct SerialScope;\n-\n-        impl SerialScope {\n-            pub fn spawn<F>(&self, f: F)\n-                where F: FnOnce(&SerialScope)\n-            {\n-                f(self)\n-            }\n-        }\n-\n-        pub fn scope<F, R>(f: F) -> R\n-            where F: FnOnce(&SerialScope) -> R\n-        {\n-            f(&SerialScope)\n-        }\n-\n         #[macro_export]\n         macro_rules! parallel {\n             ($($blocks:tt),*) => {\n@@ -318,8 +262,6 @@ cfg_if! {\n \n         pub use std::sync::atomic::{AtomicBool, AtomicUsize, AtomicU32, AtomicU64};\n \n-        pub use crossbeam_utils::atomic::AtomicCell;\n-\n         pub use std::sync::Arc as Lrc;\n         pub use std::sync::Weak as Weak;\n "}]}