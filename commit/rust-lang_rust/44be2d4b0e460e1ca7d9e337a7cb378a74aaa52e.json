{"sha": "44be2d4b0e460e1ca7d9e337a7cb378a74aaa52e", "node_id": "C_kwDOAAsO6NoAKDQ0YmUyZDRiMGU0NjBlMWNhN2Q5ZTMzN2E3Y2IzNzhhNzRhYWE1MmU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-13T14:27:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-13T14:27:44Z"}, "message": "Auto merge of #9169 - Alexendoo:message-convention-regex, r=flip1995\n\nUse `LazyLock` for `lint_message_convention` regexes\n\nThey were being recompiled for `Message::new` call, for me this shaves 7s off the time it takes to run the test. Also removes a redundant exception from the list and joins the various `message...` exceptions into one\n\nchangelog: none", "tree": {"sha": "1ee52cf931fdff4c43e2a5dc0372a964cd48b669", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ee52cf931fdff4c43e2a5dc0372a964cd48b669"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44be2d4b0e460e1ca7d9e337a7cb378a74aaa52e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44be2d4b0e460e1ca7d9e337a7cb378a74aaa52e", "html_url": "https://github.com/rust-lang/rust/commit/44be2d4b0e460e1ca7d9e337a7cb378a74aaa52e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44be2d4b0e460e1ca7d9e337a7cb378a74aaa52e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f78292a4ad8dc0aa625bfd87bf473fa5d744730d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f78292a4ad8dc0aa625bfd87bf473fa5d744730d", "html_url": "https://github.com/rust-lang/rust/commit/f78292a4ad8dc0aa625bfd87bf473fa5d744730d"}, {"sha": "018684dd9a224996ed2e2c8df238897372d43fd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/018684dd9a224996ed2e2c8df238897372d43fd0", "html_url": "https://github.com/rust-lang/rust/commit/018684dd9a224996ed2e2c8df238897372d43fd0"}], "stats": {"total": 60, "additions": 32, "deletions": 28}, "files": [{"sha": "c3aae1a9aa2d01992ee0c00b6c847bc869b033d0", "filename": "tests/lint_message_convention.rs", "status": "modified", "additions": 32, "deletions": 28, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/44be2d4b0e460e1ca7d9e337a7cb378a74aaa52e/tests%2Flint_message_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44be2d4b0e460e1ca7d9e337a7cb378a74aaa52e/tests%2Flint_message_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Flint_message_convention.rs?ref=44be2d4b0e460e1ca7d9e337a7cb378a74aaa52e", "patch": "@@ -1,8 +1,10 @@\n+#![feature(once_cell)]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n #![warn(rust_2018_idioms, unused_lifetimes)]\n \n use std::ffi::OsStr;\n use std::path::PathBuf;\n+use std::sync::LazyLock;\n \n use regex::RegexSet;\n \n@@ -14,43 +16,45 @@ struct Message {\n \n impl Message {\n     fn new(path: PathBuf) -> Self {\n-        let content: String = std::fs::read_to_string(&path).unwrap();\n         // we don't want the first letter after \"error: \", \"help: \" ... to be capitalized\n         // also no punctuation (except for \"?\" ?) at the end of a line\n-        let regex_set: RegexSet = RegexSet::new(&[\n-            r\"error: [A-Z]\",\n-            r\"help: [A-Z]\",\n-            r\"warning: [A-Z]\",\n-            r\"note: [A-Z]\",\n-            r\"try this: [A-Z]\",\n-            r\"error: .*[.!]$\",\n-            r\"help: .*[.!]$\",\n-            r\"warning: .*[.!]$\",\n-            r\"note: .*[.!]$\",\n-            r\"try this: .*[.!]$\",\n-        ])\n-        .unwrap();\n+        static REGEX_SET: LazyLock<RegexSet> = LazyLock::new(|| {\n+            RegexSet::new(&[\n+                r\"error: [A-Z]\",\n+                r\"help: [A-Z]\",\n+                r\"warning: [A-Z]\",\n+                r\"note: [A-Z]\",\n+                r\"try this: [A-Z]\",\n+                r\"error: .*[.!]$\",\n+                r\"help: .*[.!]$\",\n+                r\"warning: .*[.!]$\",\n+                r\"note: .*[.!]$\",\n+                r\"try this: .*[.!]$\",\n+            ])\n+            .unwrap()\n+        });\n \n         // sometimes the first character is capitalized and it is legal (like in \"C-like enum variants\") or\n         // we want to ask a question ending in \"?\"\n-        let exceptions_set: RegexSet = RegexSet::new(&[\n-            r\".*C-like enum variant discriminant is not portable to 32-bit targets\",\n-            r\".*did you mean `unix`?\",\n-            r\".*the arguments may be inverted...\",\n-            r\".*Intel x86 assembly syntax used\",\n-            r\".*AT&T x86 assembly syntax used\",\n-            r\".*remove .*the return type...\",\n-            r\"note: Clippy version: .*\",\n-            r\"the compiler unexpectedly panicked. this is a bug.\",\n-            r\"remove the `if let` statement in the for loop and then...\",\n-        ])\n-        .unwrap();\n+        static EXCEPTIONS_SET: LazyLock<RegexSet> = LazyLock::new(|| {\n+            RegexSet::new(&[\n+                r\"\\.\\.\\.$\",\n+                r\".*C-like enum variant discriminant is not portable to 32-bit targets\",\n+                r\".*Intel x86 assembly syntax used\",\n+                r\".*AT&T x86 assembly syntax used\",\n+                r\"note: Clippy version: .*\",\n+                r\"the compiler unexpectedly panicked. this is a bug.\",\n+            ])\n+            .unwrap()\n+        });\n+\n+        let content: String = std::fs::read_to_string(&path).unwrap();\n \n         let bad_lines = content\n             .lines()\n-            .filter(|line| regex_set.matches(line).matched_any())\n+            .filter(|line| REGEX_SET.matches(line).matched_any())\n             // ignore exceptions\n-            .filter(|line| !exceptions_set.matches(line).matched_any())\n+            .filter(|line| !EXCEPTIONS_SET.matches(line).matched_any())\n             .map(ToOwned::to_owned)\n             .collect::<Vec<String>>();\n "}]}