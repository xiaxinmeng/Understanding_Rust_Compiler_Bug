{"sha": "25cca07ea04d02a1a2d68cea63ee656b5194af03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1Y2NhMDdlYTA0ZDAyYTFhMmQ2OGNlYTYzZWU2NTZiNTE5NGFmMDM=", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-08-20T18:22:46Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-09-15T14:01:13Z"}, "message": "Consolidate wasi::process and unsupported::process", "tree": {"sha": "4408668a2d859785ac7296cbb37d3ec99001b0d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4408668a2d859785ac7296cbb37d3ec99001b0d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25cca07ea04d02a1a2d68cea63ee656b5194af03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25cca07ea04d02a1a2d68cea63ee656b5194af03", "html_url": "https://github.com/rust-lang/rust/commit/25cca07ea04d02a1a2d68cea63ee656b5194af03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25cca07ea04d02a1a2d68cea63ee656b5194af03/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfb955da6f67b4d11d266f0d2957c8ddab26b66f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfb955da6f67b4d11d266f0d2957c8ddab26b66f", "html_url": "https://github.com/rust-lang/rust/commit/cfb955da6f67b4d11d266f0d2957c8ddab26b66f"}], "stats": {"total": 160, "additions": 3, "deletions": 157}, "files": [{"sha": "faa53b6a74422ddff884dec7a850c37252798d58", "filename": "library/std/src/sys/unsupported/fs.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25cca07ea04d02a1a2d68cea63ee656b5194af03/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25cca07ea04d02a1a2d68cea63ee656b5194af03/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Ffs.rs?ref=25cca07ea04d02a1a2d68cea63ee656b5194af03", "patch": "@@ -233,10 +233,6 @@ impl File {\n     pub fn set_permissions(&self, _perm: FilePermissions) -> io::Result<()> {\n         match self.0 {}\n     }\n-\n-    pub fn diverge(&self) -> ! {\n-        match self.0 {}\n-    }\n }\n \n impl DirBuilder {"}, {"sha": "7156c9ab92f2b6af3da9699a3618f76275280af1", "filename": "library/std/src/sys/unsupported/process.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25cca07ea04d02a1a2d68cea63ee656b5194af03/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25cca07ea04d02a1a2d68cea63ee656b5194af03/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fprocess.rs?ref=25cca07ea04d02a1a2d68cea63ee656b5194af03", "patch": "@@ -65,8 +65,8 @@ impl From<AnonPipe> for Stdio {\n }\n \n impl From<File> for Stdio {\n-    fn from(file: File) -> Stdio {\n-        file.diverge()\n+    fn from(_file: File) -> Stdio {\n+        panic!(\"unsupported\")\n     }\n }\n "}, {"sha": "a7a4407ac38e281fb4ac716d2f8e75679c0d26af", "filename": "library/std/src/sys/wasi/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25cca07ea04d02a1a2d68cea63ee656b5194af03/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25cca07ea04d02a1a2d68cea63ee656b5194af03/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs?ref=25cca07ea04d02a1a2d68cea63ee656b5194af03", "patch": "@@ -38,6 +38,7 @@ pub mod ext;\n pub mod path;\n #[path = \"../unsupported/pipe.rs\"]\n pub mod pipe;\n+#[path = \"../unsupported/process.rs\"]\n pub mod process;\n #[path = \"../unsupported/rwlock.rs\"]\n pub mod rwlock;"}, {"sha": "c69d6376b0138d0a89b08143d47bcd1e0fe1f01b", "filename": "library/std/src/sys/wasi/process.rs", "status": "removed", "additions": 0, "deletions": 151, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/cfb955da6f67b4d11d266f0d2957c8ddab26b66f/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb955da6f67b4d11d266f0d2957c8ddab26b66f/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fprocess.rs?ref=cfb955da6f67b4d11d266f0d2957c8ddab26b66f", "patch": "@@ -1,151 +0,0 @@\n-#![deny(unsafe_op_in_unsafe_fn)]\n-\n-use crate::ffi::OsStr;\n-use crate::fmt;\n-use crate::io;\n-use crate::sys::fs::File;\n-use crate::sys::pipe::AnonPipe;\n-use crate::sys::{unsupported, Void};\n-use crate::sys_common::process::CommandEnv;\n-\n-pub use crate::ffi::OsString as EnvKey;\n-\n-////////////////////////////////////////////////////////////////////////////////\n-// Command\n-////////////////////////////////////////////////////////////////////////////////\n-\n-pub struct Command {\n-    env: CommandEnv,\n-}\n-\n-// passed back to std::process with the pipes connected to the child, if any\n-// were requested\n-pub struct StdioPipes {\n-    pub stdin: Option<AnonPipe>,\n-    pub stdout: Option<AnonPipe>,\n-    pub stderr: Option<AnonPipe>,\n-}\n-\n-pub enum Stdio {\n-    Inherit,\n-    Null,\n-    MakePipe,\n-}\n-\n-impl Command {\n-    pub fn new(_program: &OsStr) -> Command {\n-        Command { env: Default::default() }\n-    }\n-\n-    pub fn arg(&mut self, _arg: &OsStr) {}\n-\n-    pub fn env_mut(&mut self) -> &mut CommandEnv {\n-        &mut self.env\n-    }\n-\n-    pub fn cwd(&mut self, _dir: &OsStr) {}\n-\n-    pub fn stdin(&mut self, _stdin: Stdio) {}\n-\n-    pub fn stdout(&mut self, _stdout: Stdio) {}\n-\n-    pub fn stderr(&mut self, _stderr: Stdio) {}\n-\n-    pub fn spawn(\n-        &mut self,\n-        _default: Stdio,\n-        _needs_stdin: bool,\n-    ) -> io::Result<(Process, StdioPipes)> {\n-        unsupported()\n-    }\n-}\n-\n-impl From<AnonPipe> for Stdio {\n-    fn from(pipe: AnonPipe) -> Stdio {\n-        pipe.diverge()\n-    }\n-}\n-\n-impl From<File> for Stdio {\n-    fn from(_file: File) -> Stdio {\n-        panic!(\"unsupported\")\n-    }\n-}\n-\n-impl fmt::Debug for Command {\n-    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        Ok(())\n-    }\n-}\n-\n-pub struct ExitStatus(Void);\n-\n-impl ExitStatus {\n-    pub fn success(&self) -> bool {\n-        match self.0 {}\n-    }\n-\n-    pub fn code(&self) -> Option<i32> {\n-        match self.0 {}\n-    }\n-}\n-\n-impl Clone for ExitStatus {\n-    fn clone(&self) -> ExitStatus {\n-        match self.0 {}\n-    }\n-}\n-\n-impl Copy for ExitStatus {}\n-\n-impl PartialEq for ExitStatus {\n-    fn eq(&self, _other: &ExitStatus) -> bool {\n-        match self.0 {}\n-    }\n-}\n-\n-impl Eq for ExitStatus {}\n-\n-impl fmt::Debug for ExitStatus {\n-    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n-    }\n-}\n-\n-impl fmt::Display for ExitStatus {\n-    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n-    }\n-}\n-\n-#[derive(PartialEq, Eq, Clone, Copy, Debug)]\n-pub struct ExitCode(bool);\n-\n-impl ExitCode {\n-    pub const SUCCESS: ExitCode = ExitCode(false);\n-    pub const FAILURE: ExitCode = ExitCode(true);\n-\n-    pub fn as_i32(&self) -> i32 {\n-        self.0 as i32\n-    }\n-}\n-\n-pub struct Process(Void);\n-\n-impl Process {\n-    pub fn id(&self) -> u32 {\n-        match self.0 {}\n-    }\n-\n-    pub fn kill(&mut self) -> io::Result<()> {\n-        match self.0 {}\n-    }\n-\n-    pub fn wait(&mut self) -> io::Result<ExitStatus> {\n-        match self.0 {}\n-    }\n-\n-    pub fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {\n-        match self.0 {}\n-    }\n-}"}]}