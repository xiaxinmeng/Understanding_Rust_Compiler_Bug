{"sha": "0653694fdc46a2bca119b9790d1dfd62e1b4901e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2NTM2OTRmZGM0NmEyYmNhMTE5Yjk3OTBkMWRmZDYyZTFiNDkwMWU=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-10-21T07:08:05Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-10-21T07:08:05Z"}, "message": "Don't silently do nothing on mis_use of `check_union_fields`", "tree": {"sha": "cc44a50cd95d85967e2d2393380b3c9d18094703", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc44a50cd95d85967e2d2393380b3c9d18094703"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0653694fdc46a2bca119b9790d1dfd62e1b4901e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0653694fdc46a2bca119b9790d1dfd62e1b4901e", "html_url": "https://github.com/rust-lang/rust/commit/0653694fdc46a2bca119b9790d1dfd62e1b4901e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0653694fdc46a2bca119b9790d1dfd62e1b4901e/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb5a652361bb416e38fa4f41784dd5d08b232f59", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb5a652361bb416e38fa4f41784dd5d08b232f59", "html_url": "https://github.com/rust-lang/rust/commit/bb5a652361bb416e38fa4f41784dd5d08b232f59"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "d5182d69c3e701923234fffca768a137e9779133", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0653694fdc46a2bca119b9790d1dfd62e1b4901e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0653694fdc46a2bca119b9790d1dfd62e1b4901e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=0653694fdc46a2bca119b9790d1dfd62e1b4901e", "patch": "@@ -1393,31 +1393,32 @@ fn check_union(tcx: TyCtxt<'_>, id: hir::HirId, span: Span) {\n \n /// When the `#![feature(untagged_unions)]` gate is active,\n /// check that the fields of the `union` does not contain fields that need dropping.\n-fn check_union_fields(tcx: TyCtxt<'_>, _: Span, item_def_id: DefId) -> bool {\n+fn check_union_fields(tcx: TyCtxt<'_>, span: Span, item_def_id: DefId) -> bool {\n     // Without the feature we check that all fields are `Copy` in our stability checking\n     // infrastructure.\n     if !tcx.features().untagged_unions {\n         return true;\n     }\n     let item_type = tcx.type_of(item_def_id);\n     if let ty::Adt(def, substs) = item_type.kind {\n-        if def.is_union() {\n-            let fields = &def.non_enum_variant().fields;\n-            for field in fields {\n-                let field_ty = field.ty(tcx, substs);\n-                // We are currently checking the type this field came from, so it must be local.\n-                let field_span = tcx.hir().span_if_local(field.did).unwrap();\n-                let param_env = tcx.param_env(field.did);\n-                if field_ty.needs_drop(tcx, param_env) {\n-                    struct_span_err!(tcx.sess, field_span, E0740,\n-                                     \"unions may not contain fields that need dropping\")\n-                                .span_note(field_span,\n-                                           \"`std::mem::ManuallyDrop` can be used to wrap the type\")\n-                                .emit();\n-                    return false;\n-                }\n+        assert!(def.is_union());\n+        let fields = &def.non_enum_variant().fields;\n+        for field in fields {\n+            let field_ty = field.ty(tcx, substs);\n+            // We are currently checking the type this field came from, so it must be local.\n+            let field_span = tcx.hir().span_if_local(field.did).unwrap();\n+            let param_env = tcx.param_env(field.did);\n+            if field_ty.needs_drop(tcx, param_env) {\n+                struct_span_err!(tcx.sess, field_span, E0740,\n+                                    \"unions may not contain fields that need dropping\")\n+                            .span_note(field_span,\n+                                        \"`std::mem::ManuallyDrop` can be used to wrap the type\")\n+                            .emit();\n+                return false;\n             }\n         }\n+    } else {\n+        span_bug!(span, \"unions must be ty::Adt, but got {:?}\", item_type.kind);\n     }\n     return true;\n }"}]}