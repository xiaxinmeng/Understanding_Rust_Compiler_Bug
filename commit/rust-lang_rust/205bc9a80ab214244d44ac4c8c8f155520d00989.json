{"sha": "205bc9a80ab214244d44ac4c8c8f155520d00989", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwNWJjOWE4MGFiMjE0MjQ0ZDQ0YWM0YzhjOGYxNTU1MjBkMDA5ODk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-29T00:06:03Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-05T14:37:11Z"}, "message": "rustc: Migrate `CStore::native_libraries` to a query", "tree": {"sha": "dce7f3d777e254a81e71c3b00dd1fe268224fd79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dce7f3d777e254a81e71c3b00dd1fe268224fd79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/205bc9a80ab214244d44ac4c8c8f155520d00989", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/205bc9a80ab214244d44ac4c8c8f155520d00989", "html_url": "https://github.com/rust-lang/rust/commit/205bc9a80ab214244d44ac4c8c8f155520d00989", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/205bc9a80ab214244d44ac4c8c8f155520d00989/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98b74c580fabe1b29059462a288ffbd8d06de084", "url": "https://api.github.com/repos/rust-lang/rust/commits/98b74c580fabe1b29059462a288ffbd8d06de084", "html_url": "https://github.com/rust-lang/rust/commit/98b74c580fabe1b29059462a288ffbd8d06de084"}], "stats": {"total": 43, "additions": 27, "deletions": 16}, "files": [{"sha": "cb5680956bbda8dc6eea9e6f51a17373d2aa4e0d", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/205bc9a80ab214244d44ac4c8c8f155520d00989/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/205bc9a80ab214244d44ac4c8c8f155520d00989/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=205bc9a80ab214244d44ac4c8c8f155520d00989", "patch": "@@ -536,6 +536,7 @@ define_dep_nodes!( <'tcx>\n     [] IsNoBuiltins(CrateNum),\n     [] ImplDefaultness(DefId),\n     [] ExportedSymbols(CrateNum),\n+    [] NativeLibraries(CrateNum),\n );\n \n trait DepNodeParams<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> : fmt::Debug {"}, {"sha": "edc046a1225078da48ebdd6e219b08747e182eeb", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/205bc9a80ab214244d44ac4c8c8f155520d00989/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/205bc9a80ab214244d44ac4c8c8f155520d00989/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=205bc9a80ab214244d44ac4c8c8f155520d00989", "patch": "@@ -257,7 +257,6 @@ pub trait CrateStore {\n     fn crate_disambiguator(&self, cnum: CrateNum) -> Symbol;\n     fn plugin_registrar_fn(&self, cnum: CrateNum) -> Option<DefId>;\n     fn derive_registrar_fn(&self, cnum: CrateNum) -> Option<DefId>;\n-    fn native_libraries(&self, cnum: CrateNum) -> Vec<NativeLibrary>;\n \n     // resolve\n     fn def_key(&self, def: DefId) -> DefKey;\n@@ -364,8 +363,6 @@ impl CrateStore for DummyCrateStore {\n         { bug!(\"plugin_registrar_fn\") }\n     fn derive_registrar_fn(&self, cnum: CrateNum) -> Option<DefId>\n         { bug!(\"derive_registrar_fn\") }\n-    fn native_libraries(&self, cnum: CrateNum) -> Vec<NativeLibrary>\n-        { bug!(\"native_libraries\") }\n \n     // resolve\n     fn def_key(&self, def: DefId) -> DefKey { bug!(\"def_key\") }"}, {"sha": "c8ec111828e3a50aae545eb93b317716bbb85d30", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/205bc9a80ab214244d44ac4c8c8f155520d00989/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/205bc9a80ab214244d44ac4c8c8f155520d00989/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=205bc9a80ab214244d44ac4c8c8f155520d00989", "patch": "@@ -15,7 +15,7 @@ use hir::def::{Def, Export};\n use hir::{self, TraitCandidate, HirId};\n use lint;\n use middle::const_val;\n-use middle::cstore::{ExternCrate, LinkagePreference};\n+use middle::cstore::{ExternCrate, LinkagePreference, NativeLibrary};\n use middle::privacy::AccessLevels;\n use middle::region;\n use mir;\n@@ -593,6 +593,12 @@ impl<'tcx> QueryDescription for queries::exported_symbols<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::native_libraries<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+        format!(\"looking up the native libraries of a linked crate\")\n+    }\n+}\n+\n // If enabled, send a message to the profile-queries thread\n macro_rules! profq_msg {\n     ($tcx:expr, $msg:expr) => {\n@@ -1170,6 +1176,7 @@ define_maps! { <'tcx>\n \n     [] fn impl_defaultness: ImplDefaultness(DefId) -> hir::Defaultness,\n     [] fn exported_symbols: ExportedSymbols(CrateNum) -> Rc<Vec<DefId>>,\n+    [] fn native_libraries: NativeLibraries(CrateNum) -> Rc<Vec<NativeLibrary>>,\n }\n \n fn type_param_predicates<'tcx>((item_id, param_id): (DefId, DefId)) -> DepConstructor<'tcx> {"}, {"sha": "537154b4a4cac30354aa590767f3235d3d3577f1", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/205bc9a80ab214244d44ac4c8c8f155520d00989/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/205bc9a80ab214244d44ac4c8c8f155520d00989/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=205bc9a80ab214244d44ac4c8c8f155520d00989", "patch": "@@ -164,6 +164,7 @@ provide! { <'tcx> tcx, def_id, cdata,\n     is_no_builtins => { cdata.is_no_builtins(&tcx.dep_graph) }\n     impl_defaultness => { cdata.get_impl_defaultness(def_id.index) }\n     exported_symbols => { Rc::new(cdata.get_exported_symbols(&tcx.dep_graph)) }\n+    native_libraries => { Rc::new(cdata.get_native_libraries(&tcx.dep_graph)) }\n }\n \n pub fn provide_local<'tcx>(providers: &mut Providers<'tcx>) {\n@@ -298,11 +299,6 @@ impl CrateStore for cstore::CStore {\n         })\n     }\n \n-    fn native_libraries(&self, cnum: CrateNum) -> Vec<NativeLibrary>\n-    {\n-        self.get_crate_data(cnum).get_native_libraries(&self.dep_graph)\n-    }\n-\n     /// Returns the `DefKey` for a given `DefId`. This indicates the\n     /// parent `DefId` as well as some idea of what kind of data the\n     /// `DefId` refers to."}, {"sha": "20c5b082101f2fdc72c69549f3b5598ac7c0fe2e", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/205bc9a80ab214244d44ac4c8c8f155520d00989/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/205bc9a80ab214244d44ac4c8c8f155520d00989/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=205bc9a80ab214244d44ac4c8c8f155520d00989", "patch": "@@ -613,7 +613,7 @@ fn link_staticlib(sess: &Session,\n \n     let res = each_linked_rlib(sess, &mut |cnum, path| {\n         let name = sess.cstore.crate_name(cnum);\n-        let native_libs = sess.cstore.native_libraries(cnum);\n+        let native_libs = &trans.crate_info.native_libraries[&cnum];\n \n         // Here when we include the rlib into our staticlib we need to make a\n         // decision whether to include the extra object files along the way.\n@@ -637,7 +637,7 @@ fn link_staticlib(sess: &Session,\n                     sess.lto() && !ignored_for_lto(&trans.crate_info, cnum),\n                     skip_object_files).unwrap();\n \n-        all_native_libs.extend(sess.cstore.native_libraries(cnum));\n+        all_native_libs.extend(trans.crate_info.native_libraries[&cnum].iter().cloned());\n     });\n     if let Err(e) = res {\n         sess.fatal(&e);\n@@ -1002,7 +1002,7 @@ fn link_args(cmd: &mut Linker,\n     // on other dylibs (e.g. other native deps).\n     add_local_native_libraries(cmd, sess);\n     add_upstream_rust_crates(cmd, sess, trans, crate_type, tmpdir);\n-    add_upstream_native_libraries(cmd, sess, crate_type);\n+    add_upstream_native_libraries(cmd, sess, trans, crate_type);\n \n     // Tell the linker what we're doing.\n     if crate_type != config::CrateTypeExecutable {\n@@ -1239,7 +1239,7 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n         // See the comment above in `link_staticlib` and `link_rlib` for why if\n         // there's a static library that's not relevant we skip all object\n         // files.\n-        let native_libs = sess.cstore.native_libraries(cnum);\n+        let native_libs = &trans.crate_info.native_libraries[&cnum];\n         let skip_native = native_libs.iter().any(|lib| {\n             lib.kind == NativeLibraryKind::NativeStatic && !relevant_lib(sess, lib)\n         });\n@@ -1352,7 +1352,10 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n // generic function calls a native function, then the generic function must\n // be instantiated in the target crate, meaning that the native symbol must\n // also be resolved in the target crate.\n-fn add_upstream_native_libraries(cmd: &mut Linker, sess: &Session, crate_type: config::CrateType) {\n+fn add_upstream_native_libraries(cmd: &mut Linker,\n+                                 sess: &Session,\n+                                 trans: &CrateTranslation,\n+                                 crate_type: config::CrateType) {\n     // Be sure to use a topological sorting of crates because there may be\n     // interdependencies between native libraries. When passing -nodefaultlibs,\n     // for example, almost all native libraries depend on libc, so we have to\n@@ -1367,7 +1370,7 @@ fn add_upstream_native_libraries(cmd: &mut Linker, sess: &Session, crate_type: c\n \n     let crates = sess.cstore.used_crates(LinkagePreference::RequireStatic);\n     for (cnum, _) in crates {\n-        for lib in sess.cstore.native_libraries(cnum) {\n+        for lib in trans.crate_info.native_libraries[&cnum].iter() {\n             if !relevant_lib(sess, &lib) {\n                 continue\n             }"}, {"sha": "ccbd2a7550a2511ce888c276b44775173621005c", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/205bc9a80ab214244d44ac4c8c8f155520d00989/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/205bc9a80ab214244d44ac4c8c8f155520d00989/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=205bc9a80ab214244d44ac4c8c8f155520d00989", "patch": "@@ -1515,9 +1515,11 @@ impl CrateInfo {\n             profiler_runtime: None,\n             sanitizer_runtime: None,\n             is_no_builtins: FxHashSet(),\n+            native_libraries: FxHashMap(),\n         };\n \n         for cnum in tcx.sess.cstore.crates() {\n+            info.native_libraries.insert(cnum, tcx.native_libraries(cnum));\n             if tcx.is_panic_runtime(cnum) {\n                 info.panic_runtime = Some(cnum);\n             }"}, {"sha": "876870914be81b0e7d7a520b0e6e2151f724c825", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/205bc9a80ab214244d44ac4c8c8f155520d00989/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/205bc9a80ab214244d44ac4c8c8f155520d00989/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=205bc9a80ab214244d44ac4c8c8f155520d00989", "patch": "@@ -65,8 +65,12 @@ pub use back::symbol_names::provide;\n \n pub use metadata::LlvmMetadataLoader;\n pub use llvm_util::{init, target_features, print_version, print_passes, print, enable_llvm_debug};\n+\n+use std::rc::Rc;\n+\n use rustc::hir::def_id::CrateNum;\n-use rustc::util::nodemap::FxHashSet;\n+use rustc::util::nodemap::{FxHashSet, FxHashMap};\n+use rustc::middle::cstore::NativeLibrary;\n \n pub mod back {\n     mod archive;\n@@ -229,6 +233,7 @@ pub struct CrateInfo {\n     profiler_runtime: Option<CrateNum>,\n     sanitizer_runtime: Option<CrateNum>,\n     is_no_builtins: FxHashSet<CrateNum>,\n+    native_libraries: FxHashMap<CrateNum, Rc<Vec<NativeLibrary>>>,\n }\n \n __build_diagnostic_array! { librustc_trans, DIAGNOSTICS }"}]}