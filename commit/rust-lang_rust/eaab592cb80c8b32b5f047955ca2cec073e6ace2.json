{"sha": "eaab592cb80c8b32b5f047955ca2cec073e6ace2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhYWI1OTJjYjgwYzhiMzJiNWYwNDc5NTVjYTJjZWMwNzNlNmFjZTI=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-03-09T08:10:20Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-03-09T08:10:20Z"}, "message": "Avoid unindenting code block in comment with unformattable macro\n\n`format_code_block` formats the given `code_snippet` by enclosing it inside\n`fn main` block. Previously we did not add indentation to the `code_snippet`\nbefore formatting it. This works fine as long as we can format the given\n`code_snippet`, but when the code block has unformattable macro, they gets\nunindented. This commit fixes it by adding proper indentation before formatting\nthe `code_snippet`.\n\nFor example, when formatting the following code block,\n\n```rust\nsome_macro!(pub fn foo() {\n    println!(\"Don't unindent me!\");\n});\n```\n\npreviously we enclosed it like this:\n\n```rust\nfn main() {\nsome_macro!(pub fn foo() {\n    println!(\"Don't unindent me!\");\n});\n}\n```\n\nwith this PR, we will enclose it like this:\n\n```rust\nfn main() {\n    some_macro!(pub fn foo() {\n        println!(\"Don't unindent me!\");\n    });\n}\n```\n\nCloses #2523.", "tree": {"sha": "87ddf354996bb187749bb4db70d63e824abbaee8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87ddf354996bb187749bb4db70d63e824abbaee8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eaab592cb80c8b32b5f047955ca2cec073e6ace2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eaab592cb80c8b32b5f047955ca2cec073e6ace2", "html_url": "https://github.com/rust-lang/rust/commit/eaab592cb80c8b32b5f047955ca2cec073e6ace2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eaab592cb80c8b32b5f047955ca2cec073e6ace2/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3e76bc02cd131369029d082634a51b2d9893284", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3e76bc02cd131369029d082634a51b2d9893284", "html_url": "https://github.com/rust-lang/rust/commit/c3e76bc02cd131369029d082634a51b2d9893284"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "310cce4bbeca0bf7731a580c17811135aa358e62", "filename": "src/lib.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/eaab592cb80c8b32b5f047955ca2cec073e6ace2/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaab592cb80c8b32b5f047955ca2cec073e6ace2/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=eaab592cb80c8b32b5f047955ca2cec073e6ace2", "patch": "@@ -596,14 +596,23 @@ pub fn format_snippet(snippet: &str, config: &Config) -> Option<String> {\n     }\n }\n \n+const FN_MAIN_PREFIX: &str = \"fn main() {\\n\";\n+\n+fn enclose_in_main_block(s: &str, config: &Config) -> String {\n+    let indent = Indent::from_width(config, config.tab_spaces());\n+    FN_MAIN_PREFIX.to_owned() + &indent.to_string(config)\n+        + &s.lines()\n+            .collect::<Vec<_>>()\n+            .join(&indent.to_string_with_newline(config)) + \"\\n}\"\n+}\n+\n /// Format the given code block. Mainly targeted for code block in comment.\n /// The code block may be incomplete (i.e. parser may be unable to parse it).\n /// To avoid panic in parser, we wrap the code block with a dummy function.\n /// The returned code block does *not* end with newline.\n pub fn format_code_block(code_snippet: &str, config: &Config) -> Option<String> {\n     // Wrap the given code block with `fn main()` if it does not have one.\n-    let fn_main_prefix = \"fn main() {\\n\";\n-    let snippet = fn_main_prefix.to_owned() + code_snippet + \"\\n}\";\n+    let snippet = enclose_in_main_block(code_snippet, config);\n     let mut result = String::with_capacity(snippet.len());\n     let mut is_first = true;\n \n@@ -612,7 +621,7 @@ pub fn format_code_block(code_snippet: &str, config: &Config) -> Option<String>\n     let formatted = format_snippet(&snippet, config)?;\n     // 2 = \"}\\n\"\n     let block_len = formatted.len().checked_sub(2).unwrap_or(0);\n-    for line in formatted[fn_main_prefix.len()..block_len].lines() {\n+    for line in formatted[FN_MAIN_PREFIX.len()..block_len].lines() {\n         if !is_first {\n             result.push('\\n');\n         } else {"}]}