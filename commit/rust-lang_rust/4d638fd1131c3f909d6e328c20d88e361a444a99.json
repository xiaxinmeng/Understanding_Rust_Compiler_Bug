{"sha": "4d638fd1131c3f909d6e328c20d88e361a444a99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNjM4ZmQxMTMxYzNmOTA5ZDZlMzI4YzIwZDg4ZTM2MWE0NDRhOTk=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-26T12:48:46Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-12-18T23:26:29Z"}, "message": "Canonicalize lifetime names.", "tree": {"sha": "4eab68690a5136540e9dc0bee4dea093ce3fc1ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4eab68690a5136540e9dc0bee4dea093ce3fc1ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d638fd1131c3f909d6e328c20d88e361a444a99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d638fd1131c3f909d6e328c20d88e361a444a99", "html_url": "https://github.com/rust-lang/rust/commit/4d638fd1131c3f909d6e328c20d88e361a444a99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d638fd1131c3f909d6e328c20d88e361a444a99/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "532b013b28adcaa6710f4ba263990debff50d860", "url": "https://api.github.com/repos/rust-lang/rust/commits/532b013b28adcaa6710f4ba263990debff50d860", "html_url": "https://github.com/rust-lang/rust/commit/532b013b28adcaa6710f4ba263990debff50d860"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "02a4d8db0955aa73504887e07df4fbd3881db5e0", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4d638fd1131c3f909d6e328c20d88e361a444a99/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d638fd1131c3f909d6e328c20d88e361a444a99/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=4d638fd1131c3f909d6e328c20d88e361a444a99", "patch": "@@ -74,11 +74,11 @@ struct LegacyMacroImports {\n     reexports: Vec<(Name, Span)>,\n }\n \n-impl<'b> Resolver<'b> {\n+impl<'a> Resolver<'a> {\n     /// Defines `name` in namespace `ns` of module `parent` to be `def` if it is not yet defined;\n     /// otherwise, reports an error.\n-    fn define<T>(&mut self, parent: Module<'b>, ident: Ident, ns: Namespace, def: T)\n-        where T: ToNameBinding<'b>,\n+    fn define<T>(&mut self, parent: Module<'a>, ident: Ident, ns: Namespace, def: T)\n+        where T: ToNameBinding<'a>,\n     {\n         let binding = def.to_name_binding(self.arenas);\n         if let Err(old_binding) = self.try_define(parent, ident, ns, binding) {\n@@ -363,7 +363,7 @@ impl<'b> Resolver<'b> {\n     // type and value namespaces.\n     fn build_reduced_graph_for_variant(&mut self,\n                                        variant: &Variant,\n-                                       parent: Module<'b>,\n+                                       parent: Module<'a>,\n                                        vis: ty::Visibility,\n                                        expansion: Mark) {\n         let ident = variant.node.name;\n@@ -412,7 +412,7 @@ impl<'b> Resolver<'b> {\n     }\n \n     /// Builds the reduced graph for a single item in an external crate.\n-    fn build_reduced_graph_for_external_crate_def(&mut self, parent: Module<'b>, child: Export) {\n+    fn build_reduced_graph_for_external_crate_def(&mut self, parent: Module<'a>, child: Export) {\n         let ident = Ident::with_empty_ctxt(child.name);\n         let def = child.def;\n         let def_id = def.def_id();\n@@ -488,7 +488,7 @@ impl<'b> Resolver<'b> {\n         }\n     }\n \n-    fn get_extern_crate_root(&mut self, cnum: CrateNum) -> Module<'b> {\n+    fn get_extern_crate_root(&mut self, cnum: CrateNum) -> Module<'a> {\n         let def_id = DefId { krate: cnum, index: CRATE_DEF_INDEX };\n         let macros_only = self.session.cstore.dep_kind(cnum).macros_only();\n         let arenas = self.arenas;\n@@ -531,7 +531,7 @@ impl<'b> Resolver<'b> {\n \n     /// Ensures that the reduced graph rooted at the given external module\n     /// is built, building it if it is not.\n-    pub fn populate_module_if_necessary(&mut self, module: Module<'b>) {\n+    pub fn populate_module_if_necessary(&mut self, module: Module<'a>) {\n         if module.populated.get() { return }\n         for child in self.session.cstore.item_children(module.def_id().unwrap()) {\n             self.build_reduced_graph_for_external_crate_def(module, child);\n@@ -541,7 +541,7 @@ impl<'b> Resolver<'b> {\n \n     fn legacy_import_macro(&mut self,\n                            name: Name,\n-                           binding: &'b NameBinding<'b>,\n+                           binding: &'a NameBinding<'a>,\n                            span: Span,\n                            allow_shadowing: bool) {\n         self.used_crates.insert(binding.def().def_id().krate);\n@@ -554,7 +554,7 @@ impl<'b> Resolver<'b> {\n         }\n     }\n \n-    fn process_legacy_macro_imports(&mut self, item: &Item, module: Module<'b>, expansion: Mark) {\n+    fn process_legacy_macro_imports(&mut self, item: &Item, module: Module<'a>, expansion: Mark) {\n         let allow_shadowing = expansion == Mark::root();\n         let legacy_imports = self.legacy_macro_imports(&item.attrs);\n         let cnum = module.def_id().unwrap().krate;"}]}