{"sha": "1262df652f766782253fed51526ba60609859719", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyNjJkZjY1MmY3NjY3ODIyNTNmZWQ1MTUyNmJhNjA2MDk4NTk3MTk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-01T21:18:38Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-01T21:20:43Z"}, "message": "Reduce the amount of locking in the kernel's memory region\n\nThe only thing here that really needs locking on malloc and free is\naccess to the allocation list, which is only used for TRACK_ALLOCATIONS.\n\nImproves bench/task-perf-vector-party by 70%.", "tree": {"sha": "492b9cbcba655bacf982958efb73aed0f12097ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/492b9cbcba655bacf982958efb73aed0f12097ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1262df652f766782253fed51526ba60609859719", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1262df652f766782253fed51526ba60609859719", "html_url": "https://github.com/rust-lang/rust/commit/1262df652f766782253fed51526ba60609859719", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1262df652f766782253fed51526ba60609859719/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dabf1be2267439d61029b9b9353f4ae2008a3662", "url": "https://api.github.com/repos/rust-lang/rust/commits/dabf1be2267439d61029b9b9353f4ae2008a3662", "html_url": "https://github.com/rust-lang/rust/commit/dabf1be2267439d61029b9b9353f4ae2008a3662"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "1527addb0f645b94e6a2be45c3740365f1108821", "filename": "src/rt/memory_region.cpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1262df652f766782253fed51526ba60609859719/src%2Frt%2Fmemory_region.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1262df652f766782253fed51526ba60609859719/src%2Frt%2Fmemory_region.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fmemory_region.cpp?ref=1262df652f766782253fed51526ba60609859719", "patch": "@@ -37,15 +37,13 @@ void memory_region::dec_alloc() {\n void memory_region::free(void *mem) {\n     // printf(\"free: ptr 0x%\" PRIxPTR\" region=%p\\n\", (uintptr_t) mem, this);\n     if (!mem) { return; }\n-    if (_synchronized) { _lock.lock(); }\n     alloc_header *alloc = get_header(mem);\n     assert(alloc->magic == MAGIC);\n     if (_live_allocations < 1) {\n         _srv->fatal(\"live_allocs < 1\", __FILE__, __LINE__, \"\");\n     }\n     release_alloc(mem);\n     _srv->free(alloc);\n-    if (_synchronized) { _lock.unlock(); }\n }\n \n void *\n@@ -78,7 +76,6 @@ memory_region::realloc(void *mem, size_t size) {\n \n void *\n memory_region::malloc(size_t size, const char *tag, bool zero) {\n-    if (_synchronized) { _lock.lock(); }\n     size_t old_size = size;\n     size += sizeof(alloc_header);\n     alloc_header *mem = (alloc_header *)_srv->malloc(size);\n@@ -91,7 +88,6 @@ memory_region::malloc(size_t size, const char *tag, bool zero) {\n         memset(mem->data, 0, old_size);\n     }\n \n-    if (_synchronized) { _lock.unlock(); }\n     return mem->data;\n }\n \n@@ -145,6 +141,7 @@ memory_region::release_alloc(void *mem) {\n     assert(alloc->magic == MAGIC);\n \n #ifdef TRACK_ALLOCATIONS\n+    if (_synchronized) { _lock.lock(); }\n     if (_allocation_list[alloc->index] != alloc) {\n         printf(\"free: ptr 0x%\" PRIxPTR \" (%s) is not in allocation_list\\n\",\n                (uintptr_t) &alloc->data, alloc->tag);\n@@ -155,6 +152,7 @@ memory_region::release_alloc(void *mem) {\n         _allocation_list[alloc->index] = NULL;\n         alloc->index = -1;\n     }\n+    if (_synchronized) { _lock.unlock(); }\n #endif\n     dec_alloc();\n }\n@@ -164,7 +162,9 @@ memory_region::claim_alloc(void *mem) {\n     alloc_header *alloc = get_header(mem);\n     assert(alloc->magic == MAGIC);\n #ifdef TRACK_ALLOCATIONS\n+    if (_synchronized) { _lock.lock(); }\n     alloc->index = _allocation_list.append(alloc);\n+    if (_synchronized) { _lock.unlock(); }\n #endif\n     add_alloc();\n }"}]}