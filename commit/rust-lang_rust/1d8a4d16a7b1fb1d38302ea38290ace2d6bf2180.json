{"sha": "1d8a4d16a7b1fb1d38302ea38290ace2d6bf2180", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkOGE0ZDE2YTdiMWZiMWQzODMwMmVhMzgyOTBhY2UyZDZiZjIxODA=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-05-06T20:30:57Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-05-21T17:48:12Z"}, "message": "Remove rustc_serialize_exclude_null", "tree": {"sha": "3394ab0dfe78911513cedb9fe2f3bbbfffedeba2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3394ab0dfe78911513cedb9fe2f3bbbfffedeba2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d8a4d16a7b1fb1d38302ea38290ace2d6bf2180", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d8a4d16a7b1fb1d38302ea38290ace2d6bf2180", "html_url": "https://github.com/rust-lang/rust/commit/1d8a4d16a7b1fb1d38302ea38290ace2d6bf2180", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d8a4d16a7b1fb1d38302ea38290ace2d6bf2180/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30bd586bec5efb8317a6fdf6ce53b64fac567270", "url": "https://api.github.com/repos/rust-lang/rust/commits/30bd586bec5efb8317a6fdf6ce53b64fac567270", "html_url": "https://github.com/rust-lang/rust/commit/30bd586bec5efb8317a6fdf6ce53b64fac567270"}], "stats": {"total": 19, "additions": 2, "deletions": 17}, "files": [{"sha": "709c3653b02676fbf810f7e987c3039f559e52c9", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1d8a4d16a7b1fb1d38302ea38290ace2d6bf2180/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8a4d16a7b1fb1d38302ea38290ace2d6bf2180/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=1d8a4d16a7b1fb1d38302ea38290ace2d6bf2180", "patch": "@@ -846,11 +846,6 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                                        is just used for rustc unit tests \\\n                                                        and will never be stable\",\n                                                       cfg_fn!(rustc_attrs))),\n-    (\"rustc_serialize_exclude_null\", Normal, Gated(Stability::Unstable,\n-                                             \"rustc_attrs\",\n-                                             \"the `#[rustc_serialize_exclude_null]` attribute \\\n-                                              is an internal-only feature\",\n-                                             cfg_fn!(rustc_attrs))),\n     (\"rustc_synthetic\", Whitelisted, Gated(Stability::Unstable,\n                                                       \"rustc_attrs\",\n                                                       \"this attribute \\"}, {"sha": "8b409df1f09964616c0c941db37cf1b04d1110ea", "filename": "src/libsyntax_ext/deriving/encodable.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1d8a4d16a7b1fb1d38302ea38290ace2d6bf2180/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8a4d16a7b1fb1d38302ea38290ace2d6bf2180/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs?ref=1d8a4d16a7b1fb1d38302ea38290ace2d6bf2180", "patch": "@@ -190,7 +190,7 @@ fn encodable_substructure(cx: &mut ExtCtxt,\n         Struct(_, ref fields) => {\n             let emit_struct_field = cx.ident_of(\"emit_struct_field\");\n             let mut stmts = Vec::new();\n-            for (i, &FieldInfo { name, ref self_, span, attrs, .. }) in fields.iter().enumerate() {\n+            for (i, &FieldInfo { name, ref self_, span, .. }) in fields.iter().enumerate() {\n                 let name = match name {\n                     Some(id) => id.name,\n                     None => Symbol::intern(&format!(\"_field{}\", i)),\n@@ -213,17 +213,7 @@ fn encodable_substructure(cx: &mut ExtCtxt,\n                     cx.expr(span, ExprKind::Ret(Some(call)))\n                 };\n \n-                // This exists for https://github.com/rust-lang/rust/pull/47540\n-                //\n-                // If we decide to stabilize that flag this can be removed\n-                let expr = if attrs.iter().any(|a| a.check_name(\"rustc_serialize_exclude_null\")) {\n-                    let is_some = cx.ident_of(\"is_some\");\n-                    let condition = cx.expr_method_call(span, self_.clone(), is_some, vec![]);\n-                    cx.expr_if(span, condition, call, None)\n-                } else {\n-                    call\n-                };\n-                let stmt = cx.stmt_expr(expr);\n+                let stmt = cx.stmt_expr(call);\n                 stmts.push(stmt);\n             }\n "}]}