{"sha": "8e0007f829661e57d008d2e908c95f6e84b04b25", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlMDAwN2Y4Mjk2NjFlNTdkMDA4ZDJlOTA4Yzk1ZjZlODRiMDRiMjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-24T07:27:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-24T07:27:00Z"}, "message": "Auto merge of #65474 - Mark-Simulacrum:rustc-dev-split, r=pietroalbini\n\nSplit the rustc target libraries into separate rustc-dev component\n\nThis is re-applies a squashed version of #64823 as well as including #65337 to fix bugs noted after merging the first PR.\n\nThe second PR is confirmed as fixing windows-gnu, and presumably also fixes other platforms, such as musl (i.e. #65335 should be fixed); `RUSTUP_DIST_SERVER=https://dev-static.rust-lang.org rustup toolchain install nightly-2019-10-16` can be installed to confirm that this is indeed the case.", "tree": {"sha": "97d86d0e52fb9176b52b6ad83859490a76bd98a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97d86d0e52fb9176b52b6ad83859490a76bd98a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e0007f829661e57d008d2e908c95f6e84b04b25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e0007f829661e57d008d2e908c95f6e84b04b25", "html_url": "https://github.com/rust-lang/rust/commit/8e0007f829661e57d008d2e908c95f6e84b04b25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e0007f829661e57d008d2e908c95f6e84b04b25/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55e00631e5bc5b16d40232914e57deeea197a8e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/55e00631e5bc5b16d40232914e57deeea197a8e4", "html_url": "https://github.com/rust-lang/rust/commit/55e00631e5bc5b16d40232914e57deeea197a8e4"}, {"sha": "7ccf492ae616b4d06eab283ab604938fd234415a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ccf492ae616b4d06eab283ab604938fd234415a", "html_url": "https://github.com/rust-lang/rust/commit/7ccf492ae616b4d06eab283ab604938fd234415a"}], "stats": {"total": 228, "additions": 173, "deletions": 55}, "files": [{"sha": "2748903f2d4756b34b5623ae324f0319f6977345", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e0007f829661e57d008d2e908c95f6e84b04b25/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e0007f829661e57d008d2e908c95f6e84b04b25/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=8e0007f829661e57d008d2e908c95f6e84b04b25", "patch": "@@ -443,6 +443,7 @@ impl<'a> Builder<'a> {\n                 dist::Rustc,\n                 dist::DebuggerScripts,\n                 dist::Std,\n+                dist::RustcDev,\n                 dist::Analysis,\n                 dist::Src,\n                 dist::PlainSourceTarball,"}, {"sha": "df1c72575846b0a69e17944473805299af834649", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e0007f829661e57d008d2e908c95f6e84b04b25/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e0007f829661e57d008d2e908c95f6e84b04b25/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=8e0007f829661e57d008d2e908c95f6e84b04b25", "patch": "@@ -55,6 +55,7 @@ impl Step for Std {\n                   cargo,\n                   args(builder.kind),\n                   &libstd_stamp(builder, compiler, target),\n+                  vec![],\n                   true);\n \n         let libdir = builder.sysroot_libdir(compiler, target);\n@@ -103,6 +104,7 @@ impl Step for Rustc {\n                   cargo,\n                   args(builder.kind),\n                   &librustc_stamp(builder, compiler, target),\n+                  vec![],\n                   true);\n \n         let libdir = builder.sysroot_libdir(compiler, target);\n@@ -155,6 +157,7 @@ impl Step for CodegenBackend {\n                   cargo,\n                   args(builder.kind),\n                   &codegen_backend_stamp(builder, compiler, target, backend),\n+                  vec![],\n                   true);\n     }\n }\n@@ -199,6 +202,7 @@ impl Step for Rustdoc {\n                   cargo,\n                   args(builder.kind),\n                   &rustdoc_stamp(builder, compiler, target),\n+                  vec![],\n                   true);\n \n         let libdir = builder.sysroot_libdir(compiler, target);"}, {"sha": "da8d43ed49b7f34895523e3f7fc1d716ca35a08a", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 41, "deletions": 22, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/8e0007f829661e57d008d2e908c95f6e84b04b25/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e0007f829661e57d008d2e908c95f6e84b04b25/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=8e0007f829661e57d008d2e908c95f6e84b04b25", "patch": "@@ -69,7 +69,7 @@ impl Step for Std {\n             return;\n         }\n \n-        builder.ensure(StartupObjects { compiler, target });\n+        let mut target_deps = builder.ensure(StartupObjects { compiler, target });\n \n         let compiler_to_use = builder.compiler_for(compiler.stage, compiler.host, target);\n         if compiler_to_use != compiler {\n@@ -91,7 +91,7 @@ impl Step for Std {\n             return;\n         }\n \n-        copy_third_party_objects(builder, &compiler, target);\n+        target_deps.extend(copy_third_party_objects(builder, &compiler, target).into_iter());\n \n         let mut cargo = builder.cargo(compiler, Mode::Std, target, \"build\");\n         std_cargo(builder, &compiler, target, &mut cargo);\n@@ -102,6 +102,7 @@ impl Step for Std {\n                   cargo,\n                   vec![],\n                   &libstd_stamp(builder, compiler, target),\n+                  target_deps,\n                   false);\n \n         builder.ensure(StdLink {\n@@ -113,29 +114,36 @@ impl Step for Std {\n }\n \n /// Copies third pary objects needed by various targets.\n-fn copy_third_party_objects(builder: &Builder<'_>, compiler: &Compiler, target: Interned<String>) {\n+fn copy_third_party_objects(builder: &Builder<'_>, compiler: &Compiler, target: Interned<String>)\n+    -> Vec<PathBuf>\n+{\n     let libdir = builder.sysroot_libdir(*compiler, target);\n \n+    let mut target_deps = vec![];\n+\n+    let mut copy_and_stamp = |sourcedir: &Path, name: &str| {\n+        let target = libdir.join(name);\n+        builder.copy(\n+            &sourcedir.join(name),\n+            &target,\n+        );\n+        target_deps.push(target);\n+    };\n+\n     // Copies the crt(1,i,n).o startup objects\n     //\n     // Since musl supports fully static linking, we can cross link for it even\n     // with a glibc-targeting toolchain, given we have the appropriate startup\n     // files. As those shipped with glibc won't work, copy the ones provided by\n     // musl so we have them on linux-gnu hosts.\n     if target.contains(\"musl\") {\n+        let srcdir = builder.musl_root(target).unwrap().join(\"lib\");\n         for &obj in &[\"crt1.o\", \"crti.o\", \"crtn.o\"] {\n-            builder.copy(\n-                &builder.musl_root(target).unwrap().join(\"lib\").join(obj),\n-                &libdir.join(obj),\n-            );\n+            copy_and_stamp(&srcdir, obj);\n         }\n     } else if target.ends_with(\"-wasi\") {\n-        for &obj in &[\"crt1.o\"] {\n-            builder.copy(\n-                &builder.wasi_root(target).unwrap().join(\"lib/wasm32-wasi\").join(obj),\n-                &libdir.join(obj),\n-            );\n-        }\n+        let srcdir = builder.wasi_root(target).unwrap().join(\"lib/wasm32-wasi\");\n+        copy_and_stamp(&srcdir, \"crt1.o\");\n     }\n \n     // Copies libunwind.a compiled to be linked wit x86_64-fortanix-unknown-sgx.\n@@ -145,11 +153,11 @@ fn copy_third_party_objects(builder: &Builder<'_>, compiler: &Compiler, target:\n     // which is provided by std for this target.\n     if target == \"x86_64-fortanix-unknown-sgx\" {\n         let src_path_env = \"X86_FORTANIX_SGX_LIBS\";\n-        let obj = \"libunwind.a\";\n         let src = env::var(src_path_env).expect(&format!(\"{} not found in env\", src_path_env));\n-        let src = Path::new(&src).join(obj);\n-        builder.copy(&src, &libdir.join(obj));\n+        copy_and_stamp(Path::new(&src), \"libunwind.a\");\n     }\n+\n+    target_deps\n }\n \n /// Configure cargo to compile the standard library, adding appropriate env vars\n@@ -306,7 +314,7 @@ pub struct StartupObjects {\n }\n \n impl Step for StartupObjects {\n-    type Output = ();\n+    type Output = Vec<PathBuf>;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         run.path(\"src/rtstartup\")\n@@ -325,13 +333,15 @@ impl Step for StartupObjects {\n     /// They don't require any library support as they're just plain old object\n     /// files, so we just use the nightly snapshot compiler to always build them (as\n     /// no other compilers are guaranteed to be available).\n-    fn run(self, builder: &Builder<'_>) {\n+    fn run(self, builder: &Builder<'_>) -> Vec<PathBuf> {\n         let for_compiler = self.compiler;\n         let target = self.target;\n         if !target.contains(\"windows-gnu\") {\n-            return\n+            return vec![]\n         }\n \n+        let mut target_deps = vec![];\n+\n         let src_dir = &builder.src.join(\"src/rtstartup\");\n         let dst_dir = &builder.native_dir(target).join(\"rtstartup\");\n         let sysroot_dir = &builder.sysroot_libdir(for_compiler, target);\n@@ -350,16 +360,22 @@ impl Step for StartupObjects {\n                             .arg(src_file));\n             }\n \n-            builder.copy(dst_file, &sysroot_dir.join(file.to_string() + \".o\"));\n+            let target = sysroot_dir.join(file.to_string() + \".o\");\n+            builder.copy(dst_file, &target);\n+            target_deps.push(target);\n         }\n \n         for obj in [\"crt2.o\", \"dllcrt2.o\"].iter() {\n             let src = compiler_file(builder,\n                                     builder.cc(target),\n                                     target,\n                                     obj);\n-            builder.copy(&src, &sysroot_dir.join(obj));\n+            let target = sysroot_dir.join(obj);\n+            builder.copy(&src, &target);\n+            target_deps.push(target);\n         }\n+\n+        target_deps\n     }\n }\n \n@@ -437,6 +453,7 @@ impl Step for Rustc {\n                   cargo,\n                   vec![],\n                   &librustc_stamp(builder, compiler, target),\n+                  vec![],\n                   false);\n \n         builder.ensure(RustcLink {\n@@ -585,7 +602,7 @@ impl Step for CodegenBackend {\n \n         let tmp_stamp = out_dir.join(\".tmp.stamp\");\n \n-        let files = run_cargo(builder, cargo, vec![], &tmp_stamp, false);\n+        let files = run_cargo(builder, cargo, vec![], &tmp_stamp, vec![], false);\n         if builder.config.dry_run {\n             return;\n         }\n@@ -941,6 +958,7 @@ pub fn run_cargo(builder: &Builder<'_>,\n                  cargo: Cargo,\n                  tail_args: Vec<String>,\n                  stamp: &Path,\n+                 additional_target_deps: Vec<PathBuf>,\n                  is_check: bool)\n     -> Vec<PathBuf>\n {\n@@ -1057,6 +1075,7 @@ pub fn run_cargo(builder: &Builder<'_>,\n         deps.push((path_to_add.into(), false));\n     }\n \n+    deps.extend(additional_target_deps.into_iter().map(|d| (d, false)));\n     deps.sort();\n     let mut new_contents = Vec::new();\n     for (dep, proc_macro) in deps.iter() {"}, {"sha": "93143570b0fe173fa474d3a8f1a3e5e2c3ab6f55", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 96, "deletions": 33, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/8e0007f829661e57d008d2e908c95f6e84b04b25/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e0007f829661e57d008d2e908c95f6e84b04b25/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=8e0007f829661e57d008d2e908c95f6e84b04b25", "patch": "@@ -637,6 +637,28 @@ impl Step for DebuggerScripts {\n     }\n }\n \n+fn skip_host_target_lib(builder: &Builder<'_>, compiler: Compiler) -> bool {\n+    // The only true set of target libraries came from the build triple, so\n+    // let's reduce redundant work by only producing archives from that host.\n+    if compiler.host != builder.config.build {\n+        builder.info(\"\\tskipping, not a build host\");\n+        true\n+    } else {\n+        false\n+    }\n+}\n+\n+/// Copy stamped files into an image's `target/lib` directory.\n+fn copy_target_libs(builder: &Builder<'_>, target: &str, image: &Path, stamp: &Path) {\n+    let dst = image.join(\"lib/rustlib\").join(target).join(\"lib\");\n+    t!(fs::create_dir_all(&dst));\n+    for (path, host) in builder.read_stamp_file(stamp) {\n+        if !host || builder.config.build == target {\n+            builder.copy(&path, &dst.join(path.file_name().unwrap()));\n+        }\n+    }\n+}\n+\n #[derive(Debug, PartialOrd, Ord, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Std {\n     pub compiler: Compiler,\n@@ -667,44 +689,19 @@ impl Step for Std {\n         let target = self.target;\n \n         let name = pkgname(builder, \"rust-std\");\n-\n-        // The only true set of target libraries came from the build triple, so\n-        // let's reduce redundant work by only producing archives from that host.\n-        if compiler.host != builder.config.build {\n-            builder.info(\"\\tskipping, not a build host\");\n-            return distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target));\n+        let archive = distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target));\n+        if skip_host_target_lib(builder, compiler) {\n+            return archive;\n         }\n \n-        // We want to package up as many target libraries as possible\n-        // for the `rust-std` package, so if this is a host target we\n-        // depend on librustc and otherwise we just depend on libtest.\n-        if builder.hosts.iter().any(|t| t == target) {\n-            builder.ensure(compile::Rustc { compiler, target });\n-        } else {\n-            builder.ensure(compile::Std { compiler, target });\n-        }\n+        builder.ensure(compile::Std { compiler, target });\n \n         let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, target));\n         let _ = fs::remove_dir_all(&image);\n \n-        let dst = image.join(\"lib/rustlib\").join(target);\n-        t!(fs::create_dir_all(&dst));\n-        let mut src = builder.sysroot_libdir(compiler, target).to_path_buf();\n-        src.pop(); // Remove the trailing /lib folder from the sysroot_libdir\n-        builder.cp_filtered(&src, &dst, &|path| {\n-            if let Some(name) = path.file_name().and_then(|s| s.to_str()) {\n-                if name == builder.config.rust_codegen_backends_dir.as_str() {\n-                    return false\n-                }\n-                if name == \"bin\" {\n-                    return false\n-                }\n-                if name.contains(\"LLVM\") {\n-                    return false\n-                }\n-            }\n-            true\n-        });\n+        let compiler_to_use = builder.compiler_for(compiler.stage, compiler.host, target);\n+        let stamp = compile::libstd_stamp(builder, compiler_to_use, target);\n+        copy_target_libs(builder, &target, &image, &stamp);\n \n         let mut cmd = rust_installer(builder);\n         cmd.arg(\"generate\")\n@@ -723,7 +720,73 @@ impl Step for Std {\n         let _time = timeit(builder);\n         builder.run(&mut cmd);\n         builder.remove_dir(&image);\n-        distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target))\n+        archive\n+    }\n+}\n+\n+#[derive(Debug, PartialOrd, Ord, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct RustcDev {\n+    pub compiler: Compiler,\n+    pub target: Interned<String>,\n+}\n+\n+impl Step for RustcDev {\n+    type Output = PathBuf;\n+    const DEFAULT: bool = true;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.path(\"rustc-dev\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(RustcDev {\n+            compiler: run.builder.compiler_for(\n+                run.builder.top_stage,\n+                run.builder.config.build,\n+                run.target,\n+            ),\n+            target: run.target,\n+        });\n+    }\n+\n+    fn run(self, builder: &Builder<'_>) -> PathBuf {\n+        let compiler = self.compiler;\n+        let target = self.target;\n+\n+        let name = pkgname(builder, \"rustc-dev\");\n+        let archive = distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target));\n+        if skip_host_target_lib(builder, compiler) {\n+            return archive;\n+        }\n+\n+        builder.ensure(compile::Rustc { compiler, target });\n+\n+        let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, target));\n+        let _ = fs::remove_dir_all(&image);\n+\n+        let compiler_to_use = builder.compiler_for(compiler.stage, compiler.host, target);\n+        let stamp = compile::librustc_stamp(builder, compiler_to_use, target);\n+        copy_target_libs(builder, &target, &image, &stamp);\n+\n+        let mut cmd = rust_installer(builder);\n+        cmd.arg(\"generate\")\n+           .arg(\"--product-name=Rust\")\n+           .arg(\"--rel-manifest-dir=rustlib\")\n+           .arg(\"--success-message=Rust-is-ready-to-develop.\")\n+           .arg(\"--image-dir\").arg(&image)\n+           .arg(\"--work-dir\").arg(&tmpdir(builder))\n+           .arg(\"--output-dir\").arg(&distdir(builder))\n+           .arg(format!(\"--package-name={}-{}\", name, target))\n+           .arg(format!(\"--component-name=rustc-dev-{}\", target))\n+           .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n+\n+        builder.info(&format!(\"Dist rustc-dev stage{} ({} -> {})\",\n+            compiler.stage, &compiler.host, target));\n+        let _time = timeit(builder);\n+        builder.run(&mut cmd);\n+        builder.remove_dir(&image);\n+        archive\n     }\n }\n "}, {"sha": "d1cf1cbca784480ac83f61f1394f866470b2c354", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e0007f829661e57d008d2e908c95f6e84b04b25/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e0007f829661e57d008d2e908c95f6e84b04b25/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=8e0007f829661e57d008d2e908c95f6e84b04b25", "patch": "@@ -1137,6 +1137,7 @@ impl Build {\n     pub fn copy(&self, src: &Path, dst: &Path) {\n         if self.config.dry_run { return; }\n         self.verbose_than(1, &format!(\"Copy {:?} to {:?}\", src, dst));\n+        if src == dst { return; }\n         let _ = fs::remove_file(&dst);\n         let metadata = t!(src.symlink_metadata());\n         if metadata.file_type().is_symlink() {"}, {"sha": "c0d2deab2f8ba2a5ba86d9e15c596a9588bec3a2", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8e0007f829661e57d008d2e908c95f6e84b04b25/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e0007f829661e57d008d2e908c95f6e84b04b25/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=8e0007f829661e57d008d2e908c95f6e84b04b25", "patch": "@@ -399,6 +399,7 @@ impl Builder {\n     fn add_packages_to(&mut self, manifest: &mut Manifest) {\n         let mut package = |name, targets| self.package(name, &mut manifest.pkg, targets);\n         package(\"rustc\", HOSTS);\n+        package(\"rustc-dev\", HOSTS);\n         package(\"cargo\", HOSTS);\n         package(\"rust-mingw\", MINGW);\n         package(\"rust-std\", TARGETS);\n@@ -426,6 +427,13 @@ impl Builder {\n             \"rls-preview\", \"rust-src\", \"llvm-tools-preview\",\n             \"lldb-preview\", \"rust-analysis\", \"miri-preview\"\n         ]);\n+\n+        // The compiler libraries are not stable for end users, but `rustc-dev` was only recently\n+        // split out of `rust-std`. We'll include it by default as a transition for nightly users.\n+        if self.rust_release == \"nightly\" {\n+            self.extend_profile(\"default\", &mut manifest.profiles, &[\"rustc-dev\"]);\n+            self.extend_profile(\"complete\", &mut manifest.profiles, &[\"rustc-dev\"]);\n+        }\n     }\n \n     fn add_renames_to(&self, manifest: &mut Manifest) {\n@@ -481,6 +489,15 @@ impl Builder {\n             components.push(host_component(\"rust-mingw\"));\n         }\n \n+        // The compiler libraries are not stable for end users, but `rustc-dev` was only recently\n+        // split out of `rust-std`. We'll include it by default as a transition for nightly users,\n+        // but ship it as an optional component on the beta and stable channels.\n+        if self.rust_release == \"nightly\" {\n+            components.push(host_component(\"rustc-dev\"));\n+        } else {\n+            extensions.push(host_component(\"rustc-dev\"));\n+        }\n+\n         // Tools are always present in the manifest,\n         // but might be marked as unavailable if they weren't built.\n         extensions.extend(vec![\n@@ -498,6 +515,11 @@ impl Builder {\n                 .filter(|&&target| target != host)\n                 .map(|target| Component::from_str(\"rust-std\", target))\n         );\n+        extensions.extend(\n+            HOSTS.iter()\n+                .filter(|&&target| target != host)\n+                .map(|target| Component::from_str(\"rustc-dev\", target))\n+        );\n         extensions.push(Component::from_str(\"rust-src\", \"*\"));\n \n         // If the components/extensions don't actually exist for this\n@@ -534,6 +556,14 @@ impl Builder {\n         dst.insert(profile_name.to_owned(), pkgs.iter().map(|s| (*s).to_owned()).collect());\n     }\n \n+    fn extend_profile(&mut self,\n+               profile_name: &str,\n+               dst: &mut BTreeMap<String, Vec<String>>,\n+               pkgs: &[&str]) {\n+        dst.get_mut(profile_name).expect(\"existing profile\")\n+            .extend(pkgs.iter().map(|s| (*s).to_owned()));\n+    }\n+\n     fn package(&mut self,\n                pkgname: &str,\n                dst: &mut BTreeMap<String, Package>,"}]}