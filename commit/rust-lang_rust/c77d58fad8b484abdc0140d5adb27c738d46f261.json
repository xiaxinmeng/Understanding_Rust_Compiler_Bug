{"sha": "c77d58fad8b484abdc0140d5adb27c738d46f261", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3N2Q1OGZhZDhiNDg0YWJkYzAxNDBkNWFkYjI3YzczOGQ0NmYyNjE=", "commit": {"author": {"name": "Ben Striegel", "email": "ben.striegel@gmail.com", "date": "2013-05-31T22:11:38Z"}, "committer": {"name": "Ben Striegel", "email": "ben.striegel@gmail.com", "date": "2013-05-31T22:12:07Z"}, "message": "Add as_c_str method on strings", "tree": {"sha": "7baf7aef930276b714540b2ba06b10ffb9baf374", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7baf7aef930276b714540b2ba06b10ffb9baf374"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c77d58fad8b484abdc0140d5adb27c738d46f261", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c77d58fad8b484abdc0140d5adb27c738d46f261", "html_url": "https://github.com/rust-lang/rust/commit/c77d58fad8b484abdc0140d5adb27c738d46f261", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c77d58fad8b484abdc0140d5adb27c738d46f261/comments", "author": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91a707390045eb29e5392de1f7f5b9d5fdb64e65", "url": "https://api.github.com/repos/rust-lang/rust/commits/91a707390045eb29e5392de1f7f5b9d5fdb64e65", "html_url": "https://github.com/rust-lang/rust/commit/91a707390045eb29e5392de1f7f5b9d5fdb64e65"}], "stats": {"total": 63, "additions": 40, "deletions": 23}, "files": [{"sha": "5a5efa0781ae9abf7e858e850513ee3c6e732988", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c77d58fad8b484abdc0140d5adb27c738d46f261/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c77d58fad8b484abdc0140d5adb27c738d46f261/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=c77d58fad8b484abdc0140d5adb27c738d46f261", "patch": "@@ -45,7 +45,7 @@ pub use path::PosixPath;\n pub use path::WindowsPath;\n pub use ptr::Ptr;\n pub use ascii::{Ascii, AsciiCast, OwnedAsciiCast, AsciiStr};\n-pub use str::{StrSlice, OwnedStr};\n+pub use str::{StrSlice, OwnedStr, StrUtil};\n pub use from_str::{FromStr};\n pub use to_bytes::IterBytes;\n pub use to_str::{ToStr, ToStrConsume};"}, {"sha": "c9452ed543364418a41fe3b4dd65dca48fd48cc8", "filename": "src/libstd/str.rs", "status": "modified", "additions": 39, "deletions": 22, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/c77d58fad8b484abdc0140d5adb27c738d46f261/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c77d58fad8b484abdc0140d5adb27c738d46f261/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=c77d58fad8b484abdc0140d5adb27c738d46f261", "patch": "@@ -2165,33 +2165,50 @@ pub fn as_bytes_slice<'a>(s: &'a str) -> &'a [u8] {\n }\n \n /**\n- * Work with the byte buffer of a string as a null-terminated C string.\n- *\n- * Allows for unsafe manipulation of strings, which is useful for foreign\n- * interop. This is similar to `str::as_buf`, but guarantees null-termination.\n- * If the given slice is not already null-terminated, this function will\n- * allocate a temporary, copy the slice, null terminate it, and pass\n- * that instead.\n- *\n- * # Example\n- *\n- * ~~~ {.rust}\n- * let s = str::as_c_str(\"PATH\", { |path| libc::getenv(path) });\n- * ~~~\n+ * A dummy trait to hold all the utility methods that we implement on strings.\n  */\n-#[inline]\n-pub fn as_c_str<T>(s: &str, f: &fn(*libc::c_char) -> T) -> T {\n-    do as_buf(s) |buf, len| {\n-        // NB: len includes the trailing null.\n-        assert!(len > 0);\n-        if unsafe { *(ptr::offset(buf,len-1)) != 0 } {\n-            as_c_str(to_owned(s), f)\n-        } else {\n-            f(buf as *libc::c_char)\n+pub trait StrUtil {\n+    /**\n+     * Work with the byte buffer of a string as a null-terminated C string.\n+     *\n+     * Allows for unsafe manipulation of strings, which is useful for foreign\n+     * interop. This is similar to `str::as_buf`, but guarantees null-termination.\n+     * If the given slice is not already null-terminated, this function will\n+     * allocate a temporary, copy the slice, null terminate it, and pass\n+     * that instead.\n+     *\n+     * # Example\n+     *\n+     * ~~~ {.rust}\n+     * let s = \"PATH\".as_c_str(|path| libc::getenv(path));\n+     * ~~~\n+     */\n+    fn as_c_str<T>(self, f: &fn(*libc::c_char) -> T) -> T;\n+}\n+\n+impl<'self> StrUtil for &'self str {\n+    #[inline]\n+    fn as_c_str<T>(self, f: &fn(*libc::c_char) -> T) -> T {\n+        do as_buf(self) |buf, len| {\n+            // NB: len includes the trailing null.\n+            assert!(len > 0);\n+            if unsafe { *(ptr::offset(buf,len-1)) != 0 } {\n+                to_owned(self).as_c_str(f)\n+            } else {\n+                f(buf as *libc::c_char)\n+            }\n         }\n     }\n }\n \n+/**\n+ * Deprecated. Use the `as_c_str` method on strings instead.\n+ */\n+#[inline(always)]\n+pub fn as_c_str<T>(s: &str, f: &fn(*libc::c_char) -> T) -> T {\n+    s.as_c_str(f)\n+}\n+\n /**\n  * Work with the byte buffer and length of a slice.\n  *"}]}