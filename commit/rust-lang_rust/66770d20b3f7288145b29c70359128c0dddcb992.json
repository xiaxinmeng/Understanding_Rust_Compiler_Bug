{"sha": "66770d20b3f7288145b29c70359128c0dddcb992", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NzcwZDIwYjNmNzI4ODE0NWIyOWM3MDM1OTEyOGMwZGRkY2I5OTI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-22T23:07:55Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-23T05:24:36Z"}, "message": "test: Add lifetime binders and new-style lifetime parameters to the test suite", "tree": {"sha": "046377c7c61b8b9bf55de38a20da2164a65ad1d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/046377c7c61b8b9bf55de38a20da2164a65ad1d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66770d20b3f7288145b29c70359128c0dddcb992", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66770d20b3f7288145b29c70359128c0dddcb992", "html_url": "https://github.com/rust-lang/rust/commit/66770d20b3f7288145b29c70359128c0dddcb992", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66770d20b3f7288145b29c70359128c0dddcb992/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d81307a9b9f29e262164f9e358f50c186c76d76", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d81307a9b9f29e262164f9e358f50c186c76d76", "html_url": "https://github.com/rust-lang/rust/commit/6d81307a9b9f29e262164f9e358f50c186c76d76"}], "stats": {"total": 94, "additions": 47, "deletions": 47}, "files": [{"sha": "0b7477a30989e55915c57e46ceb1a885e832b298", "filename": "src/test/compile-fail/regions-infer-contravariance-due-to-immutability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66770d20b3f7288145b29c70359128c0dddcb992/src%2Ftest%2Fcompile-fail%2Fregions-infer-contravariance-due-to-immutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66770d20b3f7288145b29c70359128c0dddcb992/src%2Ftest%2Fcompile-fail%2Fregions-infer-contravariance-due-to-immutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-contravariance-due-to-immutability.rs?ref=66770d20b3f7288145b29c70359128c0dddcb992", "patch": "@@ -20,7 +20,7 @@ fn to_shorter_lifetime(bi: contravariant<'r>) {\n     let bj: contravariant<'blk> = bi;\n }\n \n-fn to_longer_lifetime(bi: contravariant<'r>) -> contravariant/&static {\n+fn to_longer_lifetime(bi: contravariant<'r>) -> contravariant<'static> {\n     bi //~ ERROR mismatched types\n }\n "}, {"sha": "15f40a9173582d68b9c3a0d5f5d85406b591f61e", "filename": "src/test/compile-fail/regions-infer-contravariance-due-to-ret.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/66770d20b3f7288145b29c70359128c0dddcb992/src%2Ftest%2Fcompile-fail%2Fregions-infer-contravariance-due-to-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66770d20b3f7288145b29c70359128c0dddcb992/src%2Ftest%2Fcompile-fail%2Fregions-infer-contravariance-due-to-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-contravariance-due-to-ret.rs?ref=66770d20b3f7288145b29c70359128c0dddcb992", "patch": "@@ -13,19 +13,19 @@\n // You can upcast to a *smaller region* but not a larger one.  This is\n // the normal case.\n \n-struct contravariant {\n+struct contravariant<'self> {\n     f: @fn() -> &'self int\n }\n \n-fn to_same_lifetime(bi: contravariant/&r) {\n-    let bj: contravariant/&r = bi;\n+fn to_same_lifetime<'r>(bi: contravariant<'r>) {\n+    let bj: contravariant<'r> = bi;\n }\n \n-fn to_shorter_lifetime(bi: contravariant/&r) {\n-    let bj: contravariant/&blk = bi;\n+fn to_shorter_lifetime<'r>(bi: contravariant<'r>) {\n+    let bj: contravariant<'blk> = bi;\n }\n \n-fn to_longer_lifetime(bi: contravariant/&r) -> contravariant/&static {\n+fn to_longer_lifetime<'r>(bi: contravariant<'r>) -> contravariant<'static> {\n     bi //~ ERROR mismatched types\n }\n "}, {"sha": "c92d770b1b6e49cdbd80fa1b7de9d2b5261016d3", "filename": "src/test/compile-fail/regions-infer-covariance-due-to-arg.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/66770d20b3f7288145b29c70359128c0dddcb992/src%2Ftest%2Fcompile-fail%2Fregions-infer-covariance-due-to-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66770d20b3f7288145b29c70359128c0dddcb992/src%2Ftest%2Fcompile-fail%2Fregions-infer-covariance-due-to-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-covariance-due-to-arg.rs?ref=66770d20b3f7288145b29c70359128c0dddcb992", "patch": "@@ -16,15 +16,15 @@ struct covariant {\n     f: @fn(x: &'self int) -> int\n }\n \n-fn to_same_lifetime(bi: covariant/&r) {\n-    let bj: covariant/&r = bi;\n+fn to_same_lifetime<'r>(bi: covariant<'r>) {\n+    let bj: covariant<'r> = bi;\n }\n \n-fn to_shorter_lifetime(bi: covariant/&r) {\n-    let bj: covariant/&blk = bi; //~ ERROR mismatched types\n+fn to_shorter_lifetime<'r>(bi: covariant<'r>) {\n+    let bj: covariant<'blk> = bi; //~ ERROR mismatched types\n }\n \n-fn to_longer_lifetime(bi: covariant/&r) -> covariant/&static {\n+fn to_longer_lifetime<'r>(bi: covariant<'r>) -> covariant<'static> {\n     bi\n }\n "}, {"sha": "0d4d4056a44011fb29fc7ab173710a529705c3e5", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-arg-and-ret.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/66770d20b3f7288145b29c70359128c0dddcb992/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-arg-and-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66770d20b3f7288145b29c70359128c0dddcb992/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-arg-and-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-arg-and-ret.rs?ref=66770d20b3f7288145b29c70359128c0dddcb992", "patch": "@@ -12,19 +12,19 @@\n //\n // You cannot convert between regions.\n \n-struct invariant {\n+struct invariant<'self> {\n     f: &'self fn(x: &'self int) -> &'self int\n }\n \n-fn to_same_lifetime(bi: invariant<'r>) {\n+fn to_same_lifetime<'r>(bi: invariant<'r>) {\n     let bj: invariant<'r> = bi;\n }\n \n-fn to_shorter_lifetime(bi: invariant<'r>) {\n+fn to_shorter_lifetime<'r>(bi: invariant<'r>) {\n     let bj: invariant<'blk> = bi; //~ ERROR mismatched types\n }\n \n-fn to_longer_lifetime(bi: invariant<'r>) -> invariant/&static {\n+fn to_longer_lifetime<'r>(bi: invariant<'r>) -> invariant<'static> {\n     bi //~ ERROR mismatched types\n }\n "}, {"sha": "4c9d397f971dae7be2931a7d6b1ba3fe0aeeb476", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability-3.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/66770d20b3f7288145b29c70359128c0dddcb992/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66770d20b3f7288145b29c70359128c0dddcb992/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-3.rs?ref=66770d20b3f7288145b29c70359128c0dddcb992", "patch": "@@ -8,19 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct invariant {\n+struct invariant<'self> {\n     f: @fn(x: @mut &'self int)\n }\n \n-fn to_same_lifetime(bi: invariant/&r) {\n-    let bj: invariant/&r = bi;\n+fn to_same_lifetime<'r>(bi: invariant<'r>) {\n+    let bj: invariant<'r> = bi;\n }\n \n-fn to_shorter_lifetime(bi: invariant/&r) {\n-    let bj: invariant/&blk = bi; //~ ERROR mismatched types\n+fn to_shorter_lifetime(bi: invariant<'r>) {\n+    let bj: invariant<'blk> = bi; //~ ERROR mismatched types\n }\n \n-fn to_longer_lifetime(bi: invariant/&r) -> invariant/&static {\n+fn to_longer_lifetime(bi: invariant<'r>) -> invariant<'static> {\n     bi //~ ERROR mismatched types\n }\n "}, {"sha": "6789476974b7a1209b8cf00e17bcd6377d965ee7", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability-4.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/66770d20b3f7288145b29c70359128c0dddcb992/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66770d20b3f7288145b29c70359128c0dddcb992/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs?ref=66770d20b3f7288145b29c70359128c0dddcb992", "patch": "@@ -8,19 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct invariant {\n+struct invariant<'self> {\n     f: @fn() -> @mut &'self int\n }\n \n-fn to_same_lifetime(bi: invariant/&r) {\n-    let bj: invariant/&r = bi;\n+fn to_same_lifetime(bi: invariant<'r>) {\n+    let bj: invariant<'r> = bi;\n }\n \n-fn to_shorter_lifetime(bi: invariant/&r) {\n-    let bj: invariant/&blk = bi; //~ ERROR mismatched types\n+fn to_shorter_lifetime(bi: invariant<'r>) {\n+    let bj: invariant<'blk> = bi; //~ ERROR mismatched types\n }\n \n-fn to_longer_lifetime(bi: invariant/&r) -> invariant/&static {\n+fn to_longer_lifetime(bi: invariant<'r>) -> invariant<'static> {\n     bi //~ ERROR mismatched types\n }\n "}, {"sha": "c2a7f29a8ab5be0f2a3dcf196f1e769cb3281ec6", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/66770d20b3f7288145b29c70359128c0dddcb992/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66770d20b3f7288145b29c70359128c0dddcb992/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability.rs?ref=66770d20b3f7288145b29c70359128c0dddcb992", "patch": "@@ -8,19 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct invariant {\n+struct invariant<'self> {\n     f: @mut &'self int\n }\n \n-fn to_same_lifetime(bi: invariant<'r>) {\n+fn to_same_lifetime<'r>(bi: invariant<'r>) {\n     let bj: invariant<'r> = bi;\n }\n \n-fn to_shorter_lifetime(bi: invariant<'r>) {\n+fn to_shorter_lifetime<'r>(bi: invariant<'r>) {\n     let bj: invariant<'blk> = bi; //~ ERROR mismatched types\n }\n \n-fn to_longer_lifetime(bi: invariant<'r>) -> invariant/&static {\n+fn to_longer_lifetime<'r>(bi: invariant<'r>) -> invariant<'static> {\n     bi //~ ERROR mismatched types\n }\n "}, {"sha": "072b0e83fdf582384d5512d16eab7b37309d4f87", "filename": "src/test/compile-fail/regions-trait-3.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66770d20b3f7288145b29c70359128c0dddcb992/src%2Ftest%2Fcompile-fail%2Fregions-trait-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66770d20b3f7288145b29c70359128c0dddcb992/src%2Ftest%2Fcompile-fail%2Fregions-trait-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-trait-3.rs?ref=66770d20b3f7288145b29c70359128c0dddcb992", "patch": "@@ -11,11 +11,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait get_ctxt {\n+trait get_ctxt<'self> {\n     fn get_ctxt(self) -> &'self uint;\n }\n \n-fn make_gc1(gc: @get_ctxt/&a) -> @get_ctxt/&b  {\n+fn make_gc1(gc: @get_ctxt<'a>) -> @get_ctxt<'b>  {\n     return gc; //~ ERROR mismatched types: expected `@get_ctxt/&b` but found `@get_ctxt/&a`\n }\n \n@@ -27,7 +27,7 @@ impl get_ctxt for Foo<'self> {\n     fn get_ctxt(&self) -> &'self uint { self.r }\n }\n \n-fn make_gc2(foo: Foo/&a) -> @get_ctxt/&b  {\n+fn make_gc2<'a,'b>(foo: Foo<'a>) -> @get_ctxt<'b>  {\n     return @foo as @get_ctxt; //~ ERROR cannot infer an appropriate lifetime\n }\n "}, {"sha": "b3667d4f81ebe3d3a09ec5ba7e9f9f33ec2c5f7f", "filename": "src/test/run-pass/const-fn-val.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66770d20b3f7288145b29c70359128c0dddcb992/src%2Ftest%2Frun-pass%2Fconst-fn-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66770d20b3f7288145b29c70359128c0dddcb992/src%2Ftest%2Frun-pass%2Fconst-fn-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fn-val.rs?ref=66770d20b3f7288145b29c70359128c0dddcb992", "patch": "@@ -14,7 +14,7 @@ fn foo() -> int {\n \n struct Bar { f: &'self fn() -> int }\n \n-static b : Bar/&static = Bar { f: foo };\n+static b : Bar<'static> = Bar { f: foo };\n \n pub fn main() {\n     fail_unless!((b.f)() == 0xca7f000d);"}, {"sha": "6dd8e3d83de87de0c3637467f2dbd0c147c9e0d5", "filename": "src/test/run-pass/issue-2502.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66770d20b3f7288145b29c70359128c0dddcb992/src%2Ftest%2Frun-pass%2Fissue-2502.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66770d20b3f7288145b29c70359128c0dddcb992/src%2Ftest%2Frun-pass%2Fissue-2502.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2502.rs?ref=66770d20b3f7288145b29c70359128c0dddcb992", "patch": "@@ -12,13 +12,13 @@ struct font {\n     fontbuf: &'self ~[u8],\n }\n \n-pub impl font/&self {\n+pub impl<'self> font<'self> {\n     fn buf(&self) -> &'self ~[u8] {\n         self.fontbuf\n     }\n }\n \n-fn font(fontbuf: &'r ~[u8]) -> font/&r {\n+fn font(fontbuf: &'r ~[u8]) -> font<'r> {\n     font {\n         fontbuf: fontbuf\n     }"}, {"sha": "3f13b9f9e67adcbe26791329acc0ad03a4362e55", "filename": "src/test/run-pass/issue-2735-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66770d20b3f7288145b29c70359128c0dddcb992/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66770d20b3f7288145b29c70359128c0dddcb992/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs?ref=66770d20b3f7288145b29c70359128c0dddcb992", "patch": "@@ -14,15 +14,15 @@ struct defer {\n }\n \n #[unsafe_destructor]\n-impl Drop for defer/&self {\n+impl<'self> Drop for defer<'self> {\n     fn finalize(&self) {\n         unsafe {\n             *(self.b) = true;\n         }\n     }\n }\n \n-fn defer(b: &'r mut bool) -> defer/&r {\n+fn defer<'r>(b: &'r mut bool) -> defer<'r> {\n     defer {\n         b: b\n     }"}, {"sha": "40c71eec4d38ae424bc3a6724a87594e2c144e6c", "filename": "src/test/run-pass/issue-2735-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66770d20b3f7288145b29c70359128c0dddcb992/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66770d20b3f7288145b29c70359128c0dddcb992/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs?ref=66770d20b3f7288145b29c70359128c0dddcb992", "patch": "@@ -14,15 +14,15 @@ struct defer {\n }\n \n #[unsafe_destructor]\n-impl Drop for defer/&self {\n+impl<'self> Drop for defer<'self> {\n     fn finalize(&self) {\n         unsafe {\n             *(self.b) = true;\n         }\n     }\n }\n \n-fn defer(b: &'r mut bool) -> defer/&r {\n+fn defer(b: &'r mut bool) -> defer<'r> {\n     defer {\n         b: b\n     }"}, {"sha": "8a0f64b32d4971d49b82ce526b4b09f0778a811e", "filename": "src/test/run-pass/issue-2748-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66770d20b3f7288145b29c70359128c0dddcb992/src%2Ftest%2Frun-pass%2Fissue-2748-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66770d20b3f7288145b29c70359128c0dddcb992/src%2Ftest%2Frun-pass%2Fissue-2748-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2748-a.rs?ref=66770d20b3f7288145b29c70359128c0dddcb992", "patch": "@@ -12,7 +12,7 @@ struct CMap {\n     buf: &'self [u8],\n }\n \n-fn CMap(buf: &'r [u8]) -> CMap/&r {\n+fn CMap<'r>(buf: &'r [u8]) -> CMap<'r> {\n     CMap {\n         buf: buf\n     }"}, {"sha": "0fc8cb49f07770a28b9d9bb513c84b3197160817", "filename": "src/test/run-pass/regions-copy-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66770d20b3f7288145b29c70359128c0dddcb992/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66770d20b3f7288145b29c70359128c0dddcb992/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs?ref=66770d20b3f7288145b29c70359128c0dddcb992", "patch": "@@ -12,7 +12,7 @@ struct closure_box {\n     cl: &'self fn(),\n }\n \n-fn box_it(+x: &'r fn()) -> closure_box/&r {\n+fn box_it<'r>(+x: &'r fn()) -> closure_box<'r> {\n     closure_box {cl: x}\n }\n "}, {"sha": "ef2be398b64d1231aceaaa936f0bf5900c4c26b4", "filename": "src/test/run-pass/regions-infer-contravariance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66770d20b3f7288145b29c70359128c0dddcb992/src%2Ftest%2Frun-pass%2Fregions-infer-contravariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66770d20b3f7288145b29c70359128c0dddcb992/src%2Ftest%2Frun-pass%2Fregions-infer-contravariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-contravariance.rs?ref=66770d20b3f7288145b29c70359128c0dddcb992", "patch": "@@ -20,7 +20,7 @@ fn with(bi: &'r boxed_int) {\n     // Here, the upcast is allowed because the `boxed_int` type is\n     // contravariant with respect to `&r`.  See also\n     // compile-fail/regions-infer-invariance-due-to-mutability.rs\n-    let bi: &'blk boxed_int/&blk = bi;\n+    let bi: &'blk boxed_int<'blk> = bi;\n     fail_unless!(*get(bi) == 22);\n }\n "}, {"sha": "717588ab4cb9dc7718d116328804001a1b9ed5c6", "filename": "src/test/run-pass/regions-mock-trans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66770d20b3f7288145b29c70359128c0dddcb992/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66770d20b3f7288145b29c70359128c0dddcb992/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs?ref=66770d20b3f7288145b29c70359128c0dddcb992", "patch": "@@ -26,7 +26,7 @@ struct Ccx {\n fn alloc(_bcx : &'a arena) -> &'a Bcx<'a> {\n     unsafe {\n         return cast::reinterpret_cast(\n-            &libc::malloc(sys::size_of::<Bcx/&blk>() as libc::size_t));\n+            &libc::malloc(sys::size_of::<Bcx<'blk>>() as libc::size_t));\n     }\n }\n "}, {"sha": "5673a1e50f0704a643da5ddaee08e3ba02bd24d6", "filename": "src/test/run-pass/regions-static-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66770d20b3f7288145b29c70359128c0dddcb992/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66770d20b3f7288145b29c70359128c0dddcb992/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs?ref=66770d20b3f7288145b29c70359128c0dddcb992", "patch": "@@ -16,7 +16,7 @@ fn box_it(+x: &'r fn()) -> closure_box<'r> {\n     closure_box {cl: x}\n }\n \n-fn call_static_closure(cl: closure_box/&static) {\n+fn call_static_closure(cl: closure_box<'static>) {\n     (cl.cl)();\n }\n "}]}