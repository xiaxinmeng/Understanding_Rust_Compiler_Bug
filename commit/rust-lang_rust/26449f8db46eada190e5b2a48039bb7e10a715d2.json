{"sha": "26449f8db46eada190e5b2a48039bb7e10a715d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NDQ5ZjhkYjQ2ZWFkYTE5MGU1YjJhNDgwMzliYjdlMTBhNzE1ZDI=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2019-11-05T13:36:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-05T13:36:57Z"}, "message": "Rollup merge of #65953 - keystone-enclave:llvm_abiname, r=alexcrichton\n\nAllow specifying LLVM's MCTargetOptions::ABIName in target specification files\n\nThis addresses #65024, as it allows RISC-V target specification files to set `\"llvm-abiname\": \"lp64d\"`.\n\nOther languages (read: C) usually expose this codegen parameter under a compiler argument like `-mabi=<XYZ>`.", "tree": {"sha": "1bcf4dfcbcd32f86314461df81f483316c509bc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bcf4dfcbcd32f86314461df81f483316c509bc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26449f8db46eada190e5b2a48039bb7e10a715d2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdwXr5CRBK7hj4Ov3rIwAAdHIIAK1nzUpFLgPiw/6exhS++5V9\n/3cAhex9IWPJkgloibjlVZ/JdCB/63LTrutNrfkDUuPQFBtL/dkV5b052AR95zkB\npPcp+39yS+KKXnEPm3i81Bl0IIYrmSzU40pDR7gX1Lp35ym/zM6FK7yeQv/TaiWI\n0nOm+wsQselEkfE8xqi/l9TWMgzo0E1lVCruMxoiNslUVIjyAHOCDqOWnJFyisWB\nGQ2ooKf5A6vtMpJCXyad/tz67HC9aullHcG3v2ToKmoF5VimYzXTd+ZzftVZZ/x7\nKq6NEZqunnnimmA9cCp2pQ/JTRJk/bDPp37KpgvNITqE4D4mtseOF7kJaL+4H9c=\n=A/zh\n-----END PGP SIGNATURE-----\n", "payload": "tree 1bcf4dfcbcd32f86314461df81f483316c509bc5\nparent 54c57a2f21193b8a3a6ec1ffd641931bd6da246c\nparent 539de439ad6f32e9a9a8a593299072a106786890\nauthor Pietro Albini <pietro@pietroalbini.org> 1572961017 +0100\ncommitter GitHub <noreply@github.com> 1572961017 +0100\n\nRollup merge of #65953 - keystone-enclave:llvm_abiname, r=alexcrichton\n\nAllow specifying LLVM's MCTargetOptions::ABIName in target specification files\n\nThis addresses #65024, as it allows RISC-V target specification files to set `\"llvm-abiname\": \"lp64d\"`.\n\nOther languages (read: C) usually expose this codegen parameter under a compiler argument like `-mabi=<XYZ>`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26449f8db46eada190e5b2a48039bb7e10a715d2", "html_url": "https://github.com/rust-lang/rust/commit/26449f8db46eada190e5b2a48039bb7e10a715d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26449f8db46eada190e5b2a48039bb7e10a715d2/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54c57a2f21193b8a3a6ec1ffd641931bd6da246c", "url": "https://api.github.com/repos/rust-lang/rust/commits/54c57a2f21193b8a3a6ec1ffd641931bd6da246c", "html_url": "https://github.com/rust-lang/rust/commit/54c57a2f21193b8a3a6ec1ffd641931bd6da246c"}, {"sha": "539de439ad6f32e9a9a8a593299072a106786890", "url": "https://api.github.com/repos/rust-lang/rust/commits/539de439ad6f32e9a9a8a593299072a106786890", "html_url": "https://github.com/rust-lang/rust/commit/539de439ad6f32e9a9a8a593299072a106786890"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "fa14ce7b03c8ca69a215187cceefe170609f3d9f", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/26449f8db46eada190e5b2a48039bb7e10a715d2/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26449f8db46eada190e5b2a48039bb7e10a715d2/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=26449f8db46eada190e5b2a48039bb7e10a715d2", "patch": "@@ -161,6 +161,7 @@ pub fn target_machine_factory(sess: &Session, optlvl: config::OptLevel, find_fea\n     let cpu = SmallCStr::new(llvm_util::target_cpu(sess));\n     let features = features.join(\",\");\n     let features = CString::new(features).unwrap();\n+    let abi = SmallCStr::new(&sess.target.target.options.llvm_abiname);\n     let is_pie_binary = !find_features && is_pie_binary(sess);\n     let trap_unreachable = sess.target.target.options.trap_unreachable;\n     let emit_stack_size_section = sess.opts.debugging_opts.emit_stack_sizes;\n@@ -170,7 +171,7 @@ pub fn target_machine_factory(sess: &Session, optlvl: config::OptLevel, find_fea\n     Arc::new(move || {\n         let tm = unsafe {\n             llvm::LLVMRustCreateTargetMachine(\n-                triple.as_ptr(), cpu.as_ptr(), features.as_ptr(),\n+                triple.as_ptr(), cpu.as_ptr(), features.as_ptr(), abi.as_ptr(),\n                 code_model,\n                 reloc_model,\n                 opt_level,"}, {"sha": "4dad6ff793c9e36f7d2cc916b4d481b2cdfb0d76", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26449f8db46eada190e5b2a48039bb7e10a715d2/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26449f8db46eada190e5b2a48039bb7e10a715d2/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=26449f8db46eada190e5b2a48039bb7e10a715d2", "patch": "@@ -1684,6 +1684,7 @@ extern \"C\" {\n     pub fn LLVMRustCreateTargetMachine(Triple: *const c_char,\n                                        CPU: *const c_char,\n                                        Features: *const c_char,\n+                                       Abi: *const c_char,\n                                        Model: CodeModel,\n                                        Reloc: RelocMode,\n                                        Level: CodeGenOptLevel,"}, {"sha": "e51772220b73f95953529dbde2ed646d09025ca8", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26449f8db46eada190e5b2a48039bb7e10a715d2/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26449f8db46eada190e5b2a48039bb7e10a715d2/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=26449f8db46eada190e5b2a48039bb7e10a715d2", "patch": "@@ -793,7 +793,10 @@ pub struct TargetOptions {\n     pub merge_functions: MergeFunctions,\n \n     /// Use platform dependent mcount function\n-    pub target_mcount: String\n+    pub target_mcount: String,\n+\n+    /// LLVM ABI name, corresponds to the '-mabi' parameter available in multilib C compilers\n+    pub llvm_abiname: String,\n }\n \n impl Default for TargetOptions {\n@@ -880,6 +883,7 @@ impl Default for TargetOptions {\n             override_export_symbols: None,\n             merge_functions: MergeFunctions::Aliases,\n             target_mcount: \"mcount\".to_string(),\n+            llvm_abiname: \"\".to_string(),\n         }\n     }\n }\n@@ -1196,6 +1200,7 @@ impl Target {\n         key!(override_export_symbols, opt_list);\n         key!(merge_functions, MergeFunctions)?;\n         key!(target_mcount);\n+        key!(llvm_abiname);\n \n         if let Some(array) = obj.find(\"abi-blacklist\").and_then(Json::as_array) {\n             for name in array.iter().filter_map(|abi| abi.as_string()) {\n@@ -1414,6 +1419,7 @@ impl ToJson for Target {\n         target_option_val!(override_export_symbols);\n         target_option_val!(merge_functions);\n         target_option_val!(target_mcount);\n+        target_option_val!(llvm_abiname);\n \n         if default.abi_blacklist != self.options.abi_blacklist {\n             d.insert(\"abi-blacklist\".to_string(), self.options.abi_blacklist.iter()"}, {"sha": "5b3900ab496114e85d726aba323789ef7a39da9c", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/26449f8db46eada190e5b2a48039bb7e10a715d2/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/26449f8db46eada190e5b2a48039bb7e10a715d2/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=26449f8db46eada190e5b2a48039bb7e10a715d2", "patch": "@@ -343,7 +343,7 @@ extern \"C\" const char* LLVMRustGetHostCPUName(size_t *len) {\n \n extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n     const char *TripleStr, const char *CPU, const char *Feature,\n-    LLVMRustCodeModel RustCM, LLVMRustRelocMode RustReloc,\n+    const char *ABIStr, LLVMRustCodeModel RustCM, LLVMRustRelocMode RustReloc,\n     LLVMRustCodeGenOptLevel RustOptLevel, bool UseSoftFloat,\n     bool PositionIndependentExecutable, bool FunctionSections,\n     bool DataSections,\n@@ -374,6 +374,7 @@ extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n   Options.FunctionSections = FunctionSections;\n   Options.MCOptions.AsmVerbose = AsmComments;\n   Options.MCOptions.PreserveAsmComments = AsmComments;\n+  Options.MCOptions.ABIName = ABIStr;\n \n   if (TrapUnreachable) {\n     // Tell LLVM to codegen `unreachable` into an explicit trap instruction."}]}