{"sha": "42cb2de1393b067f1078f0c8b55322620e6058ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyY2IyZGUxMzkzYjA2N2YxMDc4ZjBjOGI1NTMyMjYyMGU2MDU4ZWY=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-04-30T23:00:48Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-05-04T07:57:42Z"}, "message": "Avoid latent (harmless) overflow in core::slice.\n\nThis overflow does not cause any problems; it just causes errors to be\nsignalled when compiling with `-C debug-assertions`.\n\nFix #24997", "tree": {"sha": "c433cbbd5c25974de08815d6b37e8876651a3693", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c433cbbd5c25974de08815d6b37e8876651a3693"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42cb2de1393b067f1078f0c8b55322620e6058ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42cb2de1393b067f1078f0c8b55322620e6058ef", "html_url": "https://github.com/rust-lang/rust/commit/42cb2de1393b067f1078f0c8b55322620e6058ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42cb2de1393b067f1078f0c8b55322620e6058ef/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9ecc6e888c2ad5ad60971b3b4af387739099ae1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9ecc6e888c2ad5ad60971b3b4af387739099ae1", "html_url": "https://github.com/rust-lang/rust/commit/f9ecc6e888c2ad5ad60971b3b4af387739099ae1"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "d99ea607e5db3755530df747140964dba0cd12b0", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/42cb2de1393b067f1078f0c8b55322620e6058ef/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42cb2de1393b067f1078f0c8b55322620e6058ef/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=42cb2de1393b067f1078f0c8b55322620e6058ef", "patch": "@@ -631,8 +631,14 @@ fn size_from_ptr<T>(_: *const T) -> usize {\n }\n \n \n-// Use macro to be generic over const/mut\n-macro_rules! slice_offset {\n+// Use macros to be generic over const/mut\n+//\n+// They require non-negative `$by` because otherwise the expression\n+// `(ptr as usize + $by)` would interpret `-1` as `usize::MAX` (and\n+// thus trigger a panic when overflow checks are on).\n+\n+// Use this to do `$ptr + $by`, where `$by` is non-negative.\n+macro_rules! slice_add_offset {\n     ($ptr:expr, $by:expr) => {{\n         let ptr = $ptr;\n         if size_from_ptr(ptr) == 0 {\n@@ -643,6 +649,18 @@ macro_rules! slice_offset {\n     }};\n }\n \n+// Use this to do `$ptr - $by`, where `$by` is non-negative.\n+macro_rules! slice_sub_offset {\n+    ($ptr:expr, $by:expr) => {{\n+        let ptr = $ptr;\n+        if size_from_ptr(ptr) == 0 {\n+            transmute(ptr as usize - $by)\n+        } else {\n+            ptr.offset(-$by)\n+        }\n+    }};\n+}\n+\n macro_rules! slice_ref {\n     ($ptr:expr) => {{\n         let ptr = $ptr;\n@@ -672,7 +690,7 @@ macro_rules! iterator {\n                         None\n                     } else {\n                         let old = self.ptr;\n-                        self.ptr = slice_offset!(self.ptr, 1);\n+                        self.ptr = slice_add_offset!(self.ptr, 1);\n                         Some(slice_ref!(old))\n                     }\n                 }\n@@ -714,7 +732,7 @@ macro_rules! iterator {\n                     if self.end == self.ptr {\n                         None\n                     } else {\n-                        self.end = slice_offset!(self.end, -1);\n+                        self.end = slice_sub_offset!(self.end, 1);\n                         Some(slice_ref!(self.end))\n                     }\n                 }\n@@ -816,7 +834,7 @@ impl<'a, T> Iter<'a, T> {\n     fn iter_nth(&mut self, n: usize) -> Option<&'a T> {\n         match self.as_slice().get(n) {\n             Some(elem_ref) => unsafe {\n-                self.ptr = slice_offset!(elem_ref as *const _, 1);\n+                self.ptr = slice_add_offset!(elem_ref as *const _, 1);\n                 Some(slice_ref!(elem_ref))\n             },\n             None => {\n@@ -959,7 +977,7 @@ impl<'a, T> IterMut<'a, T> {\n     fn iter_nth(&mut self, n: usize) -> Option<&'a mut T> {\n         match make_mut_slice!(T => &'a mut [T]: self.ptr, self.end).get_mut(n) {\n             Some(elem_ref) => unsafe {\n-                self.ptr = slice_offset!(elem_ref as *mut _, 1);\n+                self.ptr = slice_add_offset!(elem_ref as *mut _, 1);\n                 Some(slice_ref!(elem_ref))\n             },\n             None => {"}]}