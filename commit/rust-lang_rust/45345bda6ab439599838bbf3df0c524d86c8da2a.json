{"sha": "45345bda6ab439599838bbf3df0c524d86c8da2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1MzQ1YmRhNmFiNDM5NTk5ODM4YmJmM2RmMGM1MjRkODZjOGRhMmE=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-05T23:17:10Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-05T23:57:37Z"}, "message": "Remove uses of mutable ref mode.\n\nIt's still in the compiler right now, but warned about", "tree": {"sha": "9d5da45478bac05949458685f221e4f24bad94a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d5da45478bac05949458685f221e4f24bad94a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45345bda6ab439599838bbf3df0c524d86c8da2a", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45345bda6ab439599838bbf3df0c524d86c8da2a", "html_url": "https://github.com/rust-lang/rust/commit/45345bda6ab439599838bbf3df0c524d86c8da2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45345bda6ab439599838bbf3df0c524d86c8da2a/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04497ea7b9b9598faa7456e7de1304e9118d2bb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/04497ea7b9b9598faa7456e7de1304e9118d2bb0", "html_url": "https://github.com/rust-lang/rust/commit/04497ea7b9b9598faa7456e7de1304e9118d2bb0"}], "stats": {"total": 117, "additions": 73, "deletions": 44}, "files": [{"sha": "b0aeb78afaa836e2fd8667da0522001d935300da", "filename": "src/libcore/cmath.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/45345bda6ab439599838bbf3df0c524d86c8da2a/src%2Flibcore%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45345bda6ab439599838bbf3df0c524d86c8da2a/src%2Flibcore%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmath.rs?ref=45345bda6ab439599838bbf3df0c524d86c8da2a", "patch": "@@ -40,15 +40,15 @@ pub extern mod c_double {\n     #[link_name=\"fmax\"] pure fn fmax(a: c_double, b: c_double) -> c_double;\n     #[link_name=\"fmin\"] pure fn fmin(a: c_double, b: c_double) -> c_double;\n     pure fn nextafter(x: c_double, y: c_double) -> c_double;\n-    pure fn frexp(n: c_double, &value: c_int) -> c_double;\n+    pure fn frexp(n: c_double, value: &mut c_int) -> c_double;\n     pure fn hypot(x: c_double, y: c_double) -> c_double;\n     pure fn ldexp(x: c_double, n: c_int) -> c_double;\n     #[cfg(unix)]\n     #[link_name=\"lgamma_r\"] pure fn lgamma(n: c_double,\n-                                           &sign: c_int) -> c_double;\n+                                           sign: &mut c_int) -> c_double;\n     #[cfg(windows)]\n     #[link_name=\"__lgamma_r\"] pure fn lgamma(n: c_double,\n-                                             &sign: c_int) -> c_double;\n+                                             sign: &mut c_int) -> c_double;\n     // renamed: log is a reserved keyword; ln seems more natural, too\n     #[link_name=\"log\"] pure fn ln(n: c_double) -> c_double;\n     // renamed: \"logb\" /often/ is confused for log2 by beginners\n@@ -58,7 +58,7 @@ pub extern mod c_double {\n     pure fn log10(n: c_double) -> c_double;\n     pure fn log2(n: c_double) -> c_double;\n     #[link_name=\"ilogb\"] pure fn ilog_radix(n: c_double) -> c_int;\n-    pure fn modf(n: c_double, &iptr: c_double) -> c_double;\n+    pure fn modf(n: c_double, iptr: &mut c_double) -> c_double;\n     pure fn pow(n: c_double, e: c_double) -> c_double;\n // FIXME (#1379): enable when rounding modes become available\n //    pure fn rint(n: c_double) -> c_double;\n@@ -110,7 +110,7 @@ pub extern mod c_float {\n     #[link_name=\"fdimf\"] pure fn abs_sub(a: c_float, b: c_float) -> c_float;\n     #[link_name=\"floorf\"] pure fn floor(n: c_float) -> c_float;\n     #[link_name=\"frexpf\"] pure fn frexp(n: c_float,\n-                                        &value: c_int) -> c_float;\n+                                        value: &mut c_int) -> c_float;\n     #[link_name=\"fmaf\"] pure fn mul_add(a: c_float,\n                                         b: c_float, c: c_float) -> c_float;\n     #[link_name=\"fmaxf\"] pure fn fmax(a: c_float, b: c_float) -> c_float;\n@@ -122,11 +122,11 @@ pub extern mod c_float {\n \n     #[cfg(unix)]\n     #[link_name=\"lgammaf_r\"] pure fn lgamma(n: c_float,\n-                                            &sign: c_int) -> c_float;\n+                                            sign: &mut c_int) -> c_float;\n \n     #[cfg(windows)]\n     #[link_name=\"__lgammaf_r\"] pure fn lgamma(n: c_float,\n-                                              &sign: c_int) -> c_float;\n+                                              sign: &mut c_int) -> c_float;\n \n     #[link_name=\"logf\"] pure fn ln(n: c_float) -> c_float;\n     #[link_name=\"logbf\"] pure fn log_radix(n: c_float) -> c_float;\n@@ -135,7 +135,7 @@ pub extern mod c_float {\n     #[link_name=\"log10f\"] pure fn log10(n: c_float) -> c_float;\n     #[link_name=\"ilogbf\"] pure fn ilog_radix(n: c_float) -> c_int;\n     #[link_name=\"modff\"] pure fn modf(n: c_float,\n-                                      &iptr: c_float) -> c_float;\n+                                      iptr: &mut c_float) -> c_float;\n     #[link_name=\"powf\"] pure fn pow(n: c_float, e: c_float) -> c_float;\n // FIXME (#1379): enable when rounding modes become available\n //    #[link_name=\"rintf\"] pure fn rint(n: c_float) -> c_float;"}, {"sha": "8fa1e0cf3f0a03f6307e9245868140746be4f427", "filename": "src/libstd/time.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/45345bda6ab439599838bbf3df0c524d86c8da2a/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45345bda6ab439599838bbf3df0c524d86c8da2a/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=45345bda6ab439599838bbf3df0c524d86c8da2a", "patch": "@@ -7,9 +7,18 @@ use result::{Result, Ok, Err};\n \n #[abi = \"cdecl\"]\n extern mod rustrt {\n-    #[legacy_exports];\n+    #[legacy_exports]\n+    #[cfg(stage0)]\n     fn get_time(&sec: i64, &nsec: i32);\n+    #[cfg(stage1)]\n+    #[cfg(stage2)]\n+    fn get_time(sec: &mut i64, nsec: &mut i32);\n+\n+    #[cfg(stage0)]\n     fn precise_time_ns(&ns: u64);\n+    #[cfg(stage1)]\n+    #[cfg(stage2)]\n+    fn precise_time_ns(ns: &mut u64);\n \n     fn rust_tzset();\n     // FIXME: The i64 values can be passed by-val when #2064 is fixed.\n@@ -33,22 +42,41 @@ impl Timespec : Eq {\n  * Returns the current time as a `timespec` containing the seconds and\n  * nanoseconds since 1970-01-01T00:00:00Z.\n  */\n+#[cfg(stage0)]\n pub fn get_time() -> Timespec {\n     let mut sec = 0i64;\n     let mut nsec = 0i32;\n     rustrt::get_time(sec, nsec);\n     return {sec: sec, nsec: nsec};\n }\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+pub fn get_time() -> Timespec {\n+    let mut sec = 0i64;\n+    let mut nsec = 0i32;\n+    rustrt::get_time(&mut sec, &mut nsec);\n+    return {sec: sec, nsec: nsec};\n+}\n+\n \n /**\n  * Returns the current value of a high-resolution performance counter\n  * in nanoseconds since an unspecified epoch.\n  */\n+#[cfg(stage0)]\n pub fn precise_time_ns() -> u64 {\n     let mut ns = 0u64;\n     rustrt::precise_time_ns(ns);\n     ns\n }\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+pub fn precise_time_ns() -> u64 {\n+    let mut ns = 0u64;\n+    rustrt::precise_time_ns(&mut ns);\n+    ns\n+}\n+\n \n /**\n  * Returns the current value of a high-resolution performance counter"}, {"sha": "4f265e1919c2eee2b34a9dc6b01fe51e9d863934", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/45345bda6ab439599838bbf3df0c524d86c8da2a/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45345bda6ab439599838bbf3df0c524d86c8da2a/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=45345bda6ab439599838bbf3df0c524d86c8da2a", "patch": "@@ -127,14 +127,14 @@ fn consume_non_eol_whitespace(rdr: string_reader) {\n     }\n }\n \n-fn push_blank_line_comment(rdr: string_reader, &comments: ~[cmnt]) {\n+fn push_blank_line_comment(rdr: string_reader, comments: &mut ~[cmnt]) {\n     debug!(\">>> blank-line comment\");\n     let v: ~[~str] = ~[];\n     comments.push({style: blank_line, lines: v, pos: rdr.chpos});\n }\n \n fn consume_whitespace_counting_blank_lines(rdr: string_reader,\n-                                           &comments: ~[cmnt]) {\n+                                           comments: &mut ~[cmnt]) {\n     while is_whitespace(rdr.curr) && !is_eof(rdr) {\n         if rdr.col == 0u && rdr.curr == '\\n' {\n             push_blank_line_comment(rdr, comments);\n@@ -145,7 +145,7 @@ fn consume_whitespace_counting_blank_lines(rdr: string_reader,\n \n \n fn read_shebang_comment(rdr: string_reader, code_to_the_left: bool,\n-                                                        &comments: ~[cmnt]) {\n+                                            comments: &mut ~[cmnt]) {\n     debug!(\">>> shebang comment\");\n     let p = rdr.chpos;\n     debug!(\"<<< shebang comment\");\n@@ -157,7 +157,7 @@ fn read_shebang_comment(rdr: string_reader, code_to_the_left: bool,\n }\n \n fn read_line_comments(rdr: string_reader, code_to_the_left: bool,\n-                                                        &comments: ~[cmnt]) {\n+                                          comments: &mut ~[cmnt]) {\n     debug!(\">>> line comments\");\n     let p = rdr.chpos;\n     let mut lines: ~[~str] = ~[];\n@@ -188,8 +188,8 @@ fn all_whitespace(s: ~str, begin: uint, end: uint) -> bool {\n     return true;\n }\n \n-fn trim_whitespace_prefix_and_push_line(&lines: ~[~str],\n-                                        s: ~str, col: uint) unsafe {\n+fn trim_whitespace_prefix_and_push_line(lines: &mut ~[~str],\n+                                        s: ~str, col: uint) {\n     let mut s1;\n     let len = str::len(s);\n     if all_whitespace(s, 0u, uint::min(len, col)) {\n@@ -202,7 +202,7 @@ fn trim_whitespace_prefix_and_push_line(&lines: ~[~str],\n }\n \n fn read_block_comment(rdr: string_reader, code_to_the_left: bool,\n-                                                        &comments: ~[cmnt]) {\n+                                          comments: &mut ~[cmnt]) {\n     debug!(\">>> block comment\");\n     let p = rdr.chpos;\n     let mut lines: ~[~str] = ~[];\n@@ -228,7 +228,7 @@ fn read_block_comment(rdr: string_reader, code_to_the_left: bool,\n         debug!(\"=== block comment level %d\", level);\n         if is_eof(rdr) {(rdr as reader).fatal(~\"unterminated block comment\");}\n         if rdr.curr == '\\n' {\n-            trim_whitespace_prefix_and_push_line(lines, curr_line, col);\n+            trim_whitespace_prefix_and_push_line(&mut lines, curr_line, col);\n             curr_line = ~\"\";\n             bump(rdr);\n         } else {\n@@ -248,8 +248,8 @@ fn read_block_comment(rdr: string_reader, code_to_the_left: bool,\n             }\n         }\n     }\n-    if str::len(curr_line) != 0u {\n-        trim_whitespace_prefix_and_push_line(lines, curr_line, col);\n+    if str::len(curr_line) != 0 {\n+        trim_whitespace_prefix_and_push_line(&mut lines, curr_line, col);\n     }\n     let mut style = if code_to_the_left { trailing } else { isolated };\n     consume_non_eol_whitespace(rdr);\n@@ -267,7 +267,7 @@ fn peeking_at_comment(rdr: string_reader) -> bool {\n }\n \n fn consume_comment(rdr: string_reader, code_to_the_left: bool,\n-                   &comments: ~[cmnt]) {\n+                   comments: &mut ~[cmnt]) {\n     debug!(\">>> consume comment\");\n     if rdr.curr == '/' && nextch(rdr) == '/' {\n         read_line_comments(rdr, code_to_the_left, comments);\n@@ -299,11 +299,11 @@ fn gather_comments_and_literals(span_diagnostic: diagnostic::span_handler,\n             consume_non_eol_whitespace(rdr);\n             if rdr.curr == '\\n' {\n                 code_to_the_left = false;\n-                consume_whitespace_counting_blank_lines(rdr, comments);\n+                consume_whitespace_counting_blank_lines(rdr, &mut comments);\n             }\n             while peeking_at_comment(rdr) {\n-                consume_comment(rdr, code_to_the_left, comments);\n-                consume_whitespace_counting_blank_lines(rdr, comments);\n+                consume_comment(rdr, code_to_the_left, &mut comments);\n+                consume_whitespace_counting_blank_lines(rdr, &mut comments);\n             }\n             break;\n         }"}, {"sha": "c91060284910fda1eaf66293271dbe6b7b0c18aa", "filename": "src/libsyntax/parse/eval.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/45345bda6ab439599838bbf3df0c524d86c8da2a/src%2Flibsyntax%2Fparse%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45345bda6ab439599838bbf3df0c524d86c8da2a/src%2Flibsyntax%2Fparse%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Feval.rs?ref=45345bda6ab439599838bbf3df0c524d86c8da2a", "patch": "@@ -10,8 +10,8 @@ type ctx =\n fn eval_crate_directives(cx: ctx,\n                          cdirs: ~[@ast::crate_directive],\n                          prefix: &Path,\n-                         &view_items: ~[@ast::view_item],\n-                         &items: ~[@ast::item]) {\n+                         view_items: &mut~[@ast::view_item],\n+                         items: &mut~[@ast::item]) {\n     for cdirs.each |sub_cdir| {\n         eval_crate_directive(cx, *sub_cdir, prefix, view_items, items);\n     }\n@@ -24,7 +24,7 @@ fn eval_crate_directives_to_mod(cx: ctx, cdirs: ~[@ast::crate_directive],\n         = parse_companion_mod(cx, prefix, suffix);\n     let mut view_items: ~[@ast::view_item] = ~[];\n     let mut items: ~[@ast::item] = ~[];\n-    eval_crate_directives(cx, cdirs, prefix, view_items, items);\n+    eval_crate_directives(cx, cdirs, prefix, &mut view_items, &mut items);\n     return ({view_items: vec::append(view_items, cview_items),\n           items: vec::append(items, citems)},\n          cattrs);\n@@ -82,8 +82,8 @@ fn cdir_path_opt(default: ~str, attrs: ~[ast::attribute]) -> ~str {\n }\n \n fn eval_crate_directive(cx: ctx, cdir: @ast::crate_directive, prefix: &Path,\n-                        &view_items: ~[@ast::view_item],\n-                        &items: ~[@ast::item]) {\n+                        view_items: &mut ~[@ast::view_item],\n+                        items: &mut ~[@ast::item]) {\n     match cdir.node {\n       ast::cdir_src_mod(vis, id, attrs) => {\n         let file_path = Path(cdir_path_opt("}, {"sha": "bc0beec5b36ec2b358c2164fdfffceec2687a1e3", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45345bda6ab439599838bbf3df0c524d86c8da2a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45345bda6ab439599838bbf3df0c524d86c8da2a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=45345bda6ab439599838bbf3df0c524d86c8da2a", "patch": "@@ -1276,7 +1276,8 @@ impl parser {\n \n         return match self.token {\n           token::LPAREN | token::LBRACE | token::LBRACKET => {\n-            let ket = token::flip_delimiter(self.token);\n+              // tjc: ??????\n+            let ket = token::flip_delimiter(copy self.token);\n             tt_delim(vec::append(\n                 ~[parse_tt_tok(self, true)],\n                 vec::append(\n@@ -1297,7 +1298,8 @@ impl parser {\n         return match self.token {\n           token::LBRACE | token::LPAREN | token::LBRACKET => {\n             self.parse_matcher_subseq(name_idx, copy self.token,\n-                                      token::flip_delimiter(self.token))\n+                                      // tjc: not sure why we need a copy\n+                                      token::flip_delimiter(copy self.token))\n           }\n           _ => self.fatal(~\"expected open delimiter\")\n         }"}, {"sha": "99b789cf63fc7bbe01d9612711a8cdcc77c6cf88", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45345bda6ab439599838bbf3df0c524d86c8da2a/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45345bda6ab439599838bbf3df0c524d86c8da2a/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=45345bda6ab439599838bbf3df0c524d86c8da2a", "patch": "@@ -230,7 +230,7 @@ pure fn can_begin_expr(t: token) -> bool {\n }\n \n /// what's the opposite delimiter?\n-fn flip_delimiter(&t: token::token) -> token::token {\n+fn flip_delimiter(t: token::token) -> token::token {\n     match t {\n       token::LPAREN => token::RPAREN,\n       token::LBRACE => token::RBRACE,"}, {"sha": "fe432edeec698419d75af31d71909b0ea3fa23b2", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45345bda6ab439599838bbf3df0c524d86c8da2a/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45345bda6ab439599838bbf3df0c524d86c8da2a/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=45345bda6ab439599838bbf3df0c524d86c8da2a", "patch": "@@ -117,7 +117,7 @@ fn encode_mutability(ebml_w: ebml::Writer, mt: class_mutability) {\n type entry<T> = {val: T, pos: uint};\n \n fn add_to_index(ecx: @encode_ctxt, ebml_w: ebml::Writer, path: &[ident],\n-                &index: ~[entry<~str>], name: ident) {\n+                index: &mut ~[entry<~str>], name: ident) {\n     let mut full_path = ~[];\n     full_path.push_all(path);\n     full_path.push(name);"}, {"sha": "e2f7ba20642aaf23563b83f7b06c257bf33fca49", "filename": "src/rustc/middle/borrowck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45345bda6ab439599838bbf3df0c524d86c8da2a/src%2Frustc%2Fmiddle%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45345bda6ab439599838bbf3df0c524d86c8da2a/src%2Frustc%2Fmiddle%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck.rs?ref=45345bda6ab439599838bbf3df0c524d86c8da2a", "patch": "@@ -396,10 +396,10 @@ type req_maps = {\n     pure_map: HashMap<ast::node_id, bckerr>\n };\n \n-fn save_and_restore<T:Copy,U>(&save_and_restore_t: T, f: fn() -> U) -> U {\n-    let old_save_and_restore_t = save_and_restore_t;\n+fn save_and_restore<T:Copy,U>(save_and_restore_t: &mut T, f: fn() -> U) -> U {\n+    let old_save_and_restore_t = *save_and_restore_t;\n     let u <- f();\n-    save_and_restore_t = old_save_and_restore_t;\n+    *save_and_restore_t = old_save_and_restore_t;\n     move u\n }\n "}, {"sha": "5ff2a8933a91dabcf8708a8bbe2ed812a3911676", "filename": "src/rustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45345bda6ab439599838bbf3df0c524d86c8da2a/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45345bda6ab439599838bbf3df0c524d86c8da2a/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=45345bda6ab439599838bbf3df0c524d86c8da2a", "patch": "@@ -542,9 +542,9 @@ fn check_loans_in_fn(fk: visit::fn_kind, decl: ast::fn_decl, body: ast::blk,\n                      visitor: visit::vt<check_loan_ctxt>) {\n \n     debug!(\"purity on entry=%?\", copy self.declared_purity);\n-    do save_and_restore(self.in_ctor) {\n-        do save_and_restore(self.declared_purity) {\n-            do save_and_restore(self.fn_args) {\n+    do save_and_restore(&mut(self.in_ctor)) {\n+        do save_and_restore(&mut(self.declared_purity)) {\n+            do save_and_restore(&mut(self.fn_args)) {\n                 let is_stack_closure = self.is_stack_closure(id);\n                 let fty = ty::node_id_to_type(self.tcx(), id);\n                 self.declared_purity = ty::determine_inherited_purity(\n@@ -667,7 +667,7 @@ fn check_loans_in_expr(expr: @ast::expr,\n fn check_loans_in_block(blk: ast::blk,\n                         &&self: check_loan_ctxt,\n                         vt: visit::vt<check_loan_ctxt>) {\n-    do save_and_restore(self.declared_purity) {\n+    do save_and_restore(&mut(self.declared_purity)) {\n         self.check_for_conflicting_loans(blk.node.id);\n \n         match blk.node.rules {"}, {"sha": "6b39a21a7ba57294b13a4b1a368f771ff6e71b01", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45345bda6ab439599838bbf3df0c524d86c8da2a/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45345bda6ab439599838bbf3df0c524d86c8da2a/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=45345bda6ab439599838bbf3df0c524d86c8da2a", "patch": "@@ -831,9 +831,9 @@ impl Liveness {\n         let mut changed = false;\n         do self.indices2(ln, succ_ln) |idx, succ_idx| {\n             changed |= copy_if_invalid(copy self.users[succ_idx].reader,\n-                                       self.users[idx].reader);\n+                                       &mut self.users[idx].reader);\n             changed |= copy_if_invalid(copy self.users[succ_idx].writer,\n-                                       self.users[idx].writer);\n+                                       &mut self.users[idx].writer);\n             if self.users[succ_idx].used && !self.users[idx].used {\n                 self.users[idx].used = true;\n                 changed = true;\n@@ -844,10 +844,10 @@ impl Liveness {\n                ln.to_str(), self.ln_str(succ_ln), first_merge, changed);\n         return changed;\n \n-        fn copy_if_invalid(src: LiveNode, &dst: LiveNode) -> bool {\n+        fn copy_if_invalid(src: LiveNode, dst: &mut LiveNode) -> bool {\n             if src.is_valid() {\n                 if !dst.is_valid() {\n-                    dst = src;\n+                    *dst = src;\n                     return true;\n                 }\n             }"}, {"sha": "50ea363ace2accb96b0e5907f0fa076bec977f15", "filename": "src/rustc/middle/trans/uniq.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45345bda6ab439599838bbf3df0c524d86c8da2a/src%2Frustc%2Fmiddle%2Ftrans%2Funiq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45345bda6ab439599838bbf3df0c524d86c8da2a/src%2Frustc%2Fmiddle%2Ftrans%2Funiq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Funiq.rs?ref=45345bda6ab439599838bbf3df0c524d86c8da2a", "patch": "@@ -3,7 +3,6 @@ use lib::llvm::ValueRef;\n use common::*;\n use build::*;\n use base::*;\n-use shape::llsize_of;\n use datum::immediate_rvalue;\n \n export make_free_glue, autoderef, duplicate;"}]}