{"sha": "8cf463fe935c9bf63c1eb4faae8fe2a081206cee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjZjQ2M2ZlOTM1YzliZjYzYzFlYjRmYWFlOGZlMmEwODEyMDZjZWU=", "commit": {"author": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-07-12T08:53:53Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-16T09:48:33Z"}, "message": "StmtKind", "tree": {"sha": "12c905d854b0cbe49d31bd221a452262826fab1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12c905d854b0cbe49d31bd221a452262826fab1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cf463fe935c9bf63c1eb4faae8fe2a081206cee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cf463fe935c9bf63c1eb4faae8fe2a081206cee", "html_url": "https://github.com/rust-lang/rust/commit/8cf463fe935c9bf63c1eb4faae8fe2a081206cee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12ded030b684ef7222ce1bc3b91ad456012bcdd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/12ded030b684ef7222ce1bc3b91ad456012bcdd0", "html_url": "https://github.com/rust-lang/rust/commit/12ded030b684ef7222ce1bc3b91ad456012bcdd0"}], "stats": {"total": 132, "additions": 66, "deletions": 66}, "files": [{"sha": "0523e4d468075d1a8aa28a73ed73d035a1a3ae89", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=8cf463fe935c9bf63c1eb4faae8fe2a081206cee", "patch": "@@ -234,8 +234,8 @@ fn is_relevant_trait(tcx: TyCtxt, item: &TraitItem) -> bool {\n fn is_relevant_block(tcx: TyCtxt, tables: &ty::TypeckTables, block: &Block) -> bool {\n     if let Some(stmt) = block.stmts.first() {\n         match stmt.node {\n-            StmtDecl(_, _) => true,\n-            StmtExpr(ref expr, _) | StmtSemi(ref expr, _) => is_relevant_expr(tcx, tables, expr),\n+            StmtKind::Decl(_, _) => true,\n+            StmtKind::Expr(ref expr, _) | StmtKind::Semi(ref expr, _) => is_relevant_expr(tcx, tables, expr),\n         }\n     } else {\n         block.expr.as_ref().map_or(false, |e| is_relevant_expr(tcx, tables, e))"}, {"sha": "0ca6808b12d7a92e6ce131a4b16902c1aa260bdb", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=8cf463fe935c9bf63c1eb4faae8fe2a081206cee", "patch": "@@ -110,7 +110,7 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n         if let Categorization::Rvalue(..) = cmt.cat {\n             let id = map.hir_to_node_id(cmt.hir_id);\n             if let Some(NodeStmt(st)) = map.find(map.get_parent_node(id)) {\n-                if let StmtDecl(ref decl, _) = st.node {\n+                if let StmtKind::Decl(ref decl, _) = st.node {\n                     if let DeclLocal(ref loc) = decl.node {\n                         if let Some(ref ex) = loc.init {\n                             if let ExprKind::Box(..) = ex.node {"}, {"sha": "d2ac597b6c58a65d0fc5c8729c547a1dbecbd989", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=8cf463fe935c9bf63c1eb4faae8fe2a081206cee", "patch": "@@ -82,8 +82,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EvalOrderDependence {\n     }\n     fn check_stmt(&mut self, cx: &LateContext<'a, 'tcx>, stmt: &'tcx Stmt) {\n         match stmt.node {\n-            StmtExpr(ref e, _) | StmtSemi(ref e, _) => DivergenceVisitor { cx }.maybe_walk_expr(e),\n-            StmtDecl(ref d, _) => if let DeclLocal(ref local) = d.node {\n+            StmtKind::Expr(ref e, _) | StmtKind::Semi(ref e, _) => DivergenceVisitor { cx }.maybe_walk_expr(e),\n+            StmtKind::Decl(ref d, _) => if let DeclLocal(ref local) = d.node {\n                 if let Local {\n                     init: Some(ref e), ..\n                 } = **local\n@@ -262,8 +262,8 @@ fn check_expr<'a, 'tcx>(vis: &mut ReadVisitor<'a, 'tcx>, expr: &'tcx Expr) -> St\n \n fn check_stmt<'a, 'tcx>(vis: &mut ReadVisitor<'a, 'tcx>, stmt: &'tcx Stmt) -> StopEarly {\n     match stmt.node {\n-        StmtExpr(ref expr, _) | StmtSemi(ref expr, _) => check_expr(vis, expr),\n-        StmtDecl(ref decl, _) => {\n+        StmtKind::Expr(ref expr, _) | StmtKind::Semi(ref expr, _) => check_expr(vis, expr),\n+        StmtKind::Decl(ref decl, _) => {\n             // If the declaration is of a local variable, check its initializer\n             // expression if it has one. Otherwise, keep going.\n             let local = match decl.node {"}, {"sha": "8661e9eec90d399db3dd5b65c2c771beec25e3c5", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=8cf463fe935c9bf63c1eb4faae8fe2a081206cee", "patch": "@@ -65,10 +65,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetIfSeq {\n         while let Some(stmt) = it.next() {\n             if_chain! {\n                 if let Some(expr) = it.peek();\n-                if let hir::StmtDecl(ref decl, _) = stmt.node;\n+                if let hir::StmtKind::Decl(ref decl, _) = stmt.node;\n                 if let hir::DeclLocal(ref decl) = decl.node;\n                 if let hir::PatKind::Binding(mode, canonical_id, ident, None) = decl.pat.node;\n-                if let hir::StmtExpr(ref if_, _) = expr.node;\n+                if let hir::StmtKind::Expr(ref if_, _) = expr.node;\n                 if let hir::ExprKind::If(ref cond, ref then, ref else_) = if_.node;\n                 if !used_in_expr(cx, canonical_id, cond);\n                 if let hir::ExprKind::Block(ref then, _) = then.node;\n@@ -163,7 +163,7 @@ fn check_assign<'a, 'tcx>(\n     if_chain! {\n         if block.expr.is_none();\n         if let Some(expr) = block.stmts.iter().last();\n-        if let hir::StmtSemi(ref expr, _) = expr.node;\n+        if let hir::StmtKind::Semi(ref expr, _) = expr.node;\n         if let hir::ExprKind::Assign(ref var, ref value) = expr.node;\n         if let hir::ExprKind::Path(ref qpath) = var.node;\n         if let Def::Local(local_id) = cx.tables.qpath_def(qpath, var.hir_id);"}, {"sha": "936d4f6f4cd51215e698d928d8733b504fd73526", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=8cf463fe935c9bf63c1eb4faae8fe2a081206cee", "patch": "@@ -511,7 +511,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     }\n \n     fn check_stmt(&mut self, cx: &LateContext<'a, 'tcx>, stmt: &'tcx Stmt) {\n-        if let StmtSemi(ref expr, _) = stmt.node {\n+        if let StmtKind::Semi(ref expr, _) = stmt.node {\n             if let ExprKind::MethodCall(ref method, _, ref args) = expr.node {\n                 if args.len() == 1 && method.ident.name == \"collect\" && match_trait_method(cx, expr, &paths::ITERATOR) {\n                     span_lint(\n@@ -584,8 +584,8 @@ fn never_loop_block(block: &Block, main_loop_id: NodeId) -> NeverLoopResult {\n \n fn stmt_to_expr(stmt: &Stmt) -> Option<&Expr> {\n     match stmt.node {\n-        StmtSemi(ref e, ..) | StmtExpr(ref e, ..) => Some(e),\n-        StmtDecl(ref d, ..) => decl_to_expr(d),\n+        StmtKind::Semi(ref e, ..) | StmtKind::Expr(ref e, ..) => Some(e),\n+        StmtKind::Decl(ref d, ..) => decl_to_expr(d),\n     }\n }\n \n@@ -859,8 +859,8 @@ fn get_indexed_assignments<'a, 'tcx>(\n         stmts\n             .iter()\n             .map(|stmt| match stmt.node {\n-                Stmt_::StmtDecl(..) => None,\n-                Stmt_::StmtExpr(ref e, _node_id) | Stmt_::StmtSemi(ref e, _node_id) => Some(get_assignment(cx, e, var)),\n+                StmtKind::Decl(..) => None,\n+                StmtKind::Expr(ref e, _node_id) | StmtKind::Semi(ref e, _node_id) => Some(get_assignment(cx, e, var)),\n             })\n             .chain(\n                 expr.as_ref()\n@@ -1809,7 +1809,7 @@ fn extract_expr_from_first_stmt(block: &Block) -> Option<&Expr> {\n     if block.stmts.is_empty() {\n         return None;\n     }\n-    if let StmtDecl(ref decl, _) = block.stmts[0].node {\n+    if let StmtKind::Decl(ref decl, _) = block.stmts[0].node {\n         if let DeclLocal(ref local) = decl.node {\n             if let Some(ref expr) = local.init {\n                 Some(expr)\n@@ -1829,8 +1829,8 @@ fn extract_first_expr(block: &Block) -> Option<&Expr> {\n     match block.expr {\n         Some(ref expr) if block.stmts.is_empty() => Some(expr),\n         None if !block.stmts.is_empty() => match block.stmts[0].node {\n-            StmtExpr(ref expr, _) | StmtSemi(ref expr, _) => Some(expr),\n-            StmtDecl(..) => None,\n+            StmtKind::Expr(ref expr, _) | StmtKind::Semi(ref expr, _) => Some(expr),\n+            StmtKind::Decl(..) => None,\n         },\n         _ => None,\n     }"}, {"sha": "8df573e4c725807aa65e0888ffe5548fdf5756d6", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=8cf463fe935c9bf63c1eb4faae8fe2a081206cee", "patch": "@@ -1,7 +1,7 @@\n use rustc::hir;\n use rustc::lint::*;\n use rustc::ty;\n-use rustc_errors::{Applicability};\n+use rustc_errors::Applicability;\n use syntax::codemap::Span;\n use crate::utils::{in_macro, iter_input_pats, match_type, method_chain_args, snippet, span_lint_and_then};\n use crate::utils::paths;\n@@ -131,9 +131,9 @@ fn reduce_unit_expression<'a>(cx: &LateContext, expr: &'a hir::Expr) -> Option<S\n                     // If block only contains statements,\n                     // reduce `{ X; }` to `X` or `X;`\n                     match inner_stmt.node {\n-                        hir::StmtDecl(ref d, _) => Some(d.span),\n-                        hir::StmtExpr(ref e, _) => Some(e.span),\n-                        hir::StmtSemi(_, _) => Some(inner_stmt.span),\n+                        hir::StmtKind::Decl(ref d, _) => Some(d.span),\n+                        hir::StmtKind::Expr(ref e, _) => Some(e.span),\n+                        hir::StmtKind::Semi(_, _) => Some(inner_stmt.span),\n                     }\n                 },\n                 _ => {\n@@ -247,7 +247,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             return;\n         }\n \n-        if let hir::StmtSemi(ref expr, _) = stmt.node {\n+        if let hir::StmtKind::Semi(ref expr, _) = stmt.node {\n             if let hir::ExprKind::MethodCall(_, _, _) = expr.node {\n                 if let Some(arglists) = method_chain_args(expr, &[\"map\"]) {\n                     lint_map_unit_fn(cx, stmt, expr, arglists[0]);"}, {"sha": "d341dc21779ff949e18e8bdeaa8cd3bf58ef540f", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=8cf463fe935c9bf63c1eb4faae8fe2a081206cee", "patch": "@@ -1139,7 +1139,7 @@ fn lint_clone_on_copy(cx: &LateContext, expr: &hir::Expr, arg: &hir::Expr, arg_t\n                         _ => {},\n                     }\n                     hir::map::NodeStmt(stmt) => {\n-                        if let hir::StmtDecl(ref decl, _) = stmt.node {\n+                        if let hir::StmtKind::Decl(ref decl, _) = stmt.node {\n                             if let hir::DeclLocal(ref loc) = decl.node {\n                                 if let hir::PatKind::Ref(..) = loc.pat.node {\n                                     // let ref y = *x borrows x, let ref y = x.clone() does not"}, {"sha": "c76ece55e2bcb6dc43cd51eaa338482fbd73b52b", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=8cf463fe935c9bf63c1eb4faae8fe2a081206cee", "patch": "@@ -269,7 +269,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n \n     fn check_stmt(&mut self, cx: &LateContext<'a, 'tcx>, s: &'tcx Stmt) {\n         if_chain! {\n-            if let StmtDecl(ref d, _) = s.node;\n+            if let StmtKind::Decl(ref d, _) = s.node;\n             if let DeclLocal(ref l) = d.node;\n             if let PatKind::Binding(an, _, i, None) = l.pat.node;\n             if let Some(ref init) = l.init;\n@@ -303,7 +303,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             }\n         };\n         if_chain! {\n-            if let StmtSemi(ref expr, _) = s.node;\n+            if let StmtKind::Semi(ref expr, _) = s.node;\n             if let ExprKind::Binary(ref binop, ref a, ref b) = expr.node;\n             if binop.node == BinOpKind::And || binop.node == BinOpKind::Or;\n             if let Some(sugg) = Sugg::hir_opt(cx, a);"}, {"sha": "2fd5ff9a246476b1cf59571ff226758968735271", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=8cf463fe935c9bf63c1eb4faae8fe2a081206cee", "patch": "@@ -184,7 +184,7 @@ enum Expression {\n fn fetch_bool_block(block: &Block) -> Expression {\n     match (&*block.stmts, block.expr.as_ref()) {\n         (&[], Some(e)) => fetch_bool_expr(&**e),\n-        (&[ref e], None) => if let StmtSemi(ref e, _) = e.node {\n+        (&[ref e], None) => if let StmtKind::Semi(ref e, _) = e.node {\n             if let ExprKind::Ret(_) = e.node {\n                 fetch_bool_expr(&**e)\n             } else {"}, {"sha": "5a44431e1a37de4d1cf25a3f22243ffa7e946d84", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=8cf463fe935c9bf63c1eb4faae8fe2a081206cee", "patch": "@@ -350,7 +350,7 @@ impl<'a, 'tcx> MovedVariablesCtxt<'a, 'tcx> {\n                         map::Node::NodeStmt(s) => {\n                             // `let <pat> = x;`\n                             if_chain! {\n-                                if let StmtDecl(ref decl, _) = s.node;\n+                                if let StmtKind::Decl(ref decl, _) = s.node;\n                                 if let DeclLocal(ref local) = decl.node;\n                                 then {\n                                     self.spans_need_deref"}, {"sha": "5180ff34877878f89249f9365a98a0441cf3acf9", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=8cf463fe935c9bf63c1eb4faae8fe2a081206cee", "patch": "@@ -97,7 +97,7 @@ impl LintPass for Pass {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     fn check_stmt(&mut self, cx: &LateContext<'a, 'tcx>, stmt: &'tcx Stmt) {\n-        if let StmtSemi(ref expr, _) = stmt.node {\n+        if let StmtKind::Semi(ref expr, _) = stmt.node {\n             if has_no_effect(cx, expr) {\n                 span_lint(cx, NO_EFFECT, stmt.span, \"statement with no effect\");\n             } else if let Some(reduced) = reduce_expression(cx, expr) {"}, {"sha": "b8e7a2646c489e178ddb0fe9bbc811f97f523733", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=8cf463fe935c9bf63c1eb4faae8fe2a081206cee", "patch": "@@ -113,7 +113,7 @@ impl QuestionMarkPass {\n         if_chain! {\n             if block.stmts.len() == 1;\n             if let Some(expr) = block.stmts.iter().last();\n-            if let StmtSemi(ref expr, _) = expr.node;\n+            if let StmtKind::Semi(ref expr, _) = expr.node;\n             if let ExprKind::Ret(ref ret_expr) = expr.node;\n             if let &Some(ref ret_expr) = ret_expr;\n "}, {"sha": "d400e5bf7a798742ecff44dd8de31cf8036a4d2b", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=8cf463fe935c9bf63c1eb4faae8fe2a081206cee", "patch": "@@ -110,8 +110,8 @@ fn check_block<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, block: &'tcx Block, binding\n     let len = bindings.len();\n     for stmt in &block.stmts {\n         match stmt.node {\n-            StmtDecl(ref decl, _) => check_decl(cx, decl, bindings),\n-            StmtExpr(ref e, _) | StmtSemi(ref e, _) => check_expr(cx, e, bindings),\n+            StmtKind::Decl(ref decl, _) => check_decl(cx, decl, bindings),\n+            StmtKind::Expr(ref e, _) | StmtKind::Semi(ref e, _) => check_expr(cx, e, bindings),\n         }\n     }\n     if let Some(ref o) = block.expr {"}, {"sha": "6ce7b4802508ed1a54c4759b389fd56bf4d1c671", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=8cf463fe935c9bf63c1eb4faae8fe2a081206cee", "patch": "@@ -61,17 +61,17 @@ fn check_manual_swap(cx: &LateContext, block: &Block) {\n     for w in block.stmts.windows(3) {\n         if_chain! {\n             // let t = foo();\n-            if let StmtDecl(ref tmp, _) = w[0].node;\n+            if let StmtKind::Decl(ref tmp, _) = w[0].node;\n             if let DeclLocal(ref tmp) = tmp.node;\n             if let Some(ref tmp_init) = tmp.init;\n             if let PatKind::Binding(_, _, ident, None) = tmp.pat.node;\n \n             // foo() = bar();\n-            if let StmtSemi(ref first, _) = w[1].node;\n+            if let StmtKind::Semi(ref first, _) = w[1].node;\n             if let ExprKind::Assign(ref lhs1, ref rhs1) = first.node;\n \n             // bar() = t;\n-            if let StmtSemi(ref second, _) = w[2].node;\n+            if let StmtKind::Semi(ref second, _) = w[2].node;\n             if let ExprKind::Assign(ref lhs2, ref rhs2) = second.node;\n             if let ExprKind::Path(QPath::Resolved(None, ref rhs2)) = rhs2.node;\n             if rhs2.segments.len() == 1;\n@@ -145,8 +145,8 @@ fn check_manual_swap(cx: &LateContext, block: &Block) {\n fn check_suspicious_swap(cx: &LateContext, block: &Block) {\n     for w in block.stmts.windows(2) {\n         if_chain! {\n-            if let StmtSemi(ref first, _) = w[0].node;\n-            if let StmtSemi(ref second, _) = w[1].node;\n+            if let StmtKind::Semi(ref first, _) = w[0].node;\n+            if let StmtKind::Semi(ref second, _) = w[1].node;\n             if !differing_macro_contexts(first.span, second.span);\n             if let ExprKind::Assign(ref lhs0, ref rhs0) = first.node;\n             if let ExprKind::Assign(ref lhs1, ref rhs1) = second.node;"}, {"sha": "649a1033371068fee178864f2e47561f2e8047fe", "filename": "clippy_lints/src/unused_io_amount.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/clippy_lints%2Fsrc%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/clippy_lints%2Fsrc%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_io_amount.rs?ref=8cf463fe935c9bf63c1eb4faae8fe2a081206cee", "patch": "@@ -40,7 +40,7 @@ impl LintPass for UnusedIoAmount {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedIoAmount {\n     fn check_stmt(&mut self, cx: &LateContext, s: &hir::Stmt) {\n         let expr = match s.node {\n-            hir::StmtSemi(ref expr, _) | hir::StmtExpr(ref expr, _) => &**expr,\n+            hir::StmtKind::Semi(ref expr, _) | hir::StmtKind::Expr(ref expr, _) => &**expr,\n             _ => return,\n         };\n "}, {"sha": "eccb8e53583d68fcf41efbc4aaf081f32943c8f5", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=8cf463fe935c9bf63c1eb4faae8fe2a081206cee", "patch": "@@ -592,9 +592,9 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n         let current = format!(\"{}.node\", self.current);\n         match s.node {\n             // Could be an item or a local (let) binding:\n-            StmtDecl(ref decl, _) => {\n+            StmtKind::Decl(ref decl, _) => {\n                 let decl_pat = self.next(\"decl\");\n-                println!(\"StmtDecl(ref {}, _) = {}\", decl_pat, current);\n+                println!(\"StmtKind::Decl(ref {}, _) = {}\", decl_pat, current);\n                 print!(\"    if let Decl_::\");\n                 let current = format!(\"{}.node\", decl_pat);\n                 match decl.node {\n@@ -619,17 +619,17 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n             }\n \n             // Expr without trailing semi-colon (must have unit type):\n-            StmtExpr(ref e, _) => {\n+            StmtKind::Expr(ref e, _) => {\n                 let e_pat = self.next(\"e\");\n-                println!(\"StmtExpr(ref {}, _) = {}\", e_pat, current);\n+                println!(\"StmtKind::Expr(ref {}, _) = {}\", e_pat, current);\n                 self.current = e_pat;\n                 self.visit_expr(e);\n             },\n \n             // Expr with trailing semi-colon (may have any type):\n-            StmtSemi(ref e, _) => {\n+            StmtKind::Semi(ref e, _) => {\n                 let e_pat = self.next(\"e\");\n-                println!(\"StmtSemi(ref {}, _) = {}\", e_pat, current);\n+                println!(\"StmtKind::Semi(ref {}, _) = {}\", e_pat, current);\n                 self.current = e_pat;\n                 self.visit_expr(e);\n             },"}, {"sha": "72b39000ce5fa2ab63b8b29cacf059b214d34054", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=8cf463fe935c9bf63c1eb4faae8fe2a081206cee", "patch": "@@ -191,9 +191,9 @@ pub fn for_loop(expr: &hir::Expr) -> Option<(&hir::Pat, &hir::Expr, &hir::Expr)>\n         if let hir::ExprKind::Loop(ref block, _, _) = arms[0].body.node;\n         if block.expr.is_none();\n         if let [ _, _, ref let_stmt, ref body ] = *block.stmts;\n-        if let hir::StmtDecl(ref decl, _) = let_stmt.node;\n+        if let hir::StmtKind::Decl(ref decl, _) = let_stmt.node;\n         if let hir::DeclLocal(ref decl) = decl.node;\n-        if let hir::StmtExpr(ref expr, _) = body.node;\n+        if let hir::StmtKind::Expr(ref expr, _) = body.node;\n         then {\n             return Some((&*decl.pat, &iterargs[0], expr));\n         }"}, {"sha": "2cec0b2da08235f764c607a3cd93d8df00658493", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=8cf463fe935c9bf63c1eb4faae8fe2a081206cee", "patch": "@@ -43,14 +43,14 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n     /// Check whether two statements are the same.\n     pub fn eq_stmt(&mut self, left: &Stmt, right: &Stmt) -> bool {\n         match (&left.node, &right.node) {\n-            (&StmtDecl(ref l, _), &StmtDecl(ref r, _)) => {\n+            (&StmtKind::Decl(ref l, _), &StmtKind::Decl(ref r, _)) => {\n                 if let (&DeclLocal(ref l), &DeclLocal(ref r)) = (&l.node, &r.node) {\n                     both(&l.ty, &r.ty, |l, r| self.eq_ty(l, r)) && both(&l.init, &r.init, |l, r| self.eq_expr(l, r))\n                 } else {\n                     false\n                 }\n             },\n-            (&StmtExpr(ref l, _), &StmtExpr(ref r, _)) | (&StmtSemi(ref l, _), &StmtSemi(ref r, _)) => {\n+            (&StmtKind::Expr(ref l, _), &StmtKind::Expr(ref r, _)) | (&StmtKind::Semi(ref l, _), &StmtKind::Semi(ref r, _)) => {\n                 self.eq_expr(l, r)\n             },\n             _ => false,\n@@ -613,8 +613,8 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n \n     pub fn hash_stmt(&mut self, b: &Stmt) {\n         match b.node {\n-            StmtDecl(ref decl, _) => {\n-                let c: fn(_, _) -> _ = StmtDecl;\n+            StmtKind::Decl(ref decl, _) => {\n+                let c: fn(_, _) -> _ = StmtKind::Decl;\n                 c.hash(&mut self.s);\n \n                 if let DeclLocal(ref local) = decl.node {\n@@ -623,13 +623,13 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n                     }\n                 }\n             },\n-            StmtExpr(ref expr, _) => {\n-                let c: fn(_, _) -> _ = StmtExpr;\n+            StmtKind::Expr(ref expr, _) => {\n+                let c: fn(_, _) -> _ = StmtKind::Expr;\n                 c.hash(&mut self.s);\n                 self.hash_expr(expr);\n             },\n-            StmtSemi(ref expr, _) => {\n-                let c: fn(_, _) -> _ = StmtSemi;\n+            StmtKind::Semi(ref expr, _) => {\n+                let c: fn(_, _) -> _ = StmtKind::Semi;\n                 c.hash(&mut self.s);\n                 self.hash_expr(expr);\n             },"}, {"sha": "1faab372028652d0de15821d66a8335dfc8ff771", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=8cf463fe935c9bf63c1eb4faae8fe2a081206cee", "patch": "@@ -122,8 +122,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             return;\n         }\n         match stmt.node {\n-            hir::StmtDecl(ref decl, _) => print_decl(cx, decl),\n-            hir::StmtExpr(ref e, _) | hir::StmtSemi(ref e, _) => print_expr(cx, e, 0),\n+            hir::StmtKind::Decl(ref decl, _) => print_decl(cx, decl),\n+            hir::StmtKind::Expr(ref e, _) | hir::StmtKind::Semi(ref e, _) => print_expr(cx, e, 0),\n         }\n     }\n     // fn check_foreign_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx"}, {"sha": "4b97e546ad33143ff78e7c831d00a0eb2923406c", "filename": "tests/ui/author.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/tests%2Fui%2Fauthor.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/tests%2Fui%2Fauthor.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor.stdout?ref=8cf463fe935c9bf63c1eb4faae8fe2a081206cee", "patch": "@@ -1,5 +1,5 @@\n if_chain! {\n-    if let Stmt_::StmtDecl(ref decl, _) = stmt.node\n+    if let StmtKind::Decl(ref decl, _) = stmt.node\n     if let Decl_::DeclLocal(ref local) = decl.node;\n     if let Some(ref init) = local.init\n     if let ExprKind::Cast(ref expr, ref cast_ty) = init.node;"}, {"sha": "c04909c78dd9335e408d3d87a8e8e54bf861db39", "filename": "tests/ui/author/call.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/tests%2Fui%2Fauthor%2Fcall.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/tests%2Fui%2Fauthor%2Fcall.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fcall.stdout?ref=8cf463fe935c9bf63c1eb4faae8fe2a081206cee", "patch": "@@ -1,5 +1,5 @@\n if_chain! {\n-    if let Stmt_::StmtDecl(ref decl, _) = stmt.node\n+    if let StmtKind::Decl(ref decl, _) = stmt.node\n     if let Decl_::DeclLocal(ref local) = decl.node;\n     if let Some(ref init) = local.init\n     if let ExprKind::Call(ref func, ref args) = init.node;"}, {"sha": "7c2213b9c49dd3a121dcc2858cab618f7a00e4a1", "filename": "tests/ui/author/for_loop.stdout", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/tests%2Fui%2Fauthor%2Ffor_loop.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/tests%2Fui%2Fauthor%2Ffor_loop.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Ffor_loop.stdout?ref=8cf463fe935c9bf63c1eb4faae8fe2a081206cee", "patch": "@@ -1,6 +1,6 @@\n if_chain! {\n     if let ExprKind::Block(ref block) = expr.node;\n-    if let Stmt_::StmtDecl(ref decl, _) = block.node\n+    if let StmtKind::Decl(ref decl, _) = block.node\n     if let Decl_::DeclLocal(ref local) = decl.node;\n     if let Some(ref init) = local.init\n     if let ExprKind::Match(ref expr, ref arms, MatchSource::ForLoopDesugar) = init.node;\n@@ -14,11 +14,11 @@ if_chain! {\n     // unimplemented: field checks\n     if arms.len() == 1;\n     if let ExprKind::Loop(ref body, ref label, LoopSource::ForLoop) = arms[0].body.node;\n-    if let Stmt_::StmtDecl(ref decl1, _) = body.node\n+    if let StmtKind::Decl(ref decl1, _) = body.node\n     if let Decl_::DeclLocal(ref local1) = decl1.node;\n     if let PatKind::Binding(BindingAnnotation::Mutable, _, name, None) = local1.pat.node;\n     if name.node.as_str() == \"__next\";\n-    if let Stmt_::StmtExpr(ref e, _) = local1.pat.node\n+    if let StmtKind::Expr(ref e, _) = local1.pat.node\n     if let ExprKind::Match(ref expr1, ref arms1, MatchSource::ForLoopDesugar) = e.node;\n     if let ExprKind::Call(ref func1, ref args1) = expr1.node;\n     if let ExprKind::Path(ref path2) = func1.node;\n@@ -42,16 +42,16 @@ if_chain! {\n     if arms1[1].pats.len() == 1;\n     if let PatKind::Path(ref path7) = arms1[1].pats[0].node;\n     if match_qpath(path7, &[\"{{root}}\", \"std\", \"option\", \"Option\", \"None\"]);\n-    if let Stmt_::StmtDecl(ref decl2, _) = path7.node\n+    if let StmtKind::Decl(ref decl2, _) = path7.node\n     if let Decl_::DeclLocal(ref local2) = decl2.node;\n     if let Some(ref init1) = local2.init\n     if let ExprKind::Path(ref path8) = init1.node;\n     if match_qpath(path8, &[\"__next\"]);\n     if let PatKind::Binding(BindingAnnotation::Unannotated, _, name1, None) = local2.pat.node;\n     if name1.node.as_str() == \"y\";\n-    if let Stmt_::StmtExpr(ref e1, _) = local2.pat.node\n+    if let StmtKind::Expr(ref e1, _) = local2.pat.node\n     if let ExprKind::Block(ref block1) = e1.node;\n-    if let Stmt_::StmtDecl(ref decl3, _) = block1.node\n+    if let StmtKind::Decl(ref decl3, _) = block1.node\n     if let Decl_::DeclLocal(ref local3) = decl3.node;\n     if let Some(ref init2) = local3.init\n     if let ExprKind::Path(ref path9) = init2.node;"}, {"sha": "63d669d4a7d41b0f8e0187554cff0578efcbdb0c", "filename": "tests/ui/author/matches.stout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/tests%2Fui%2Fauthor%2Fmatches.stout", "raw_url": "https://github.com/rust-lang/rust/raw/8cf463fe935c9bf63c1eb4faae8fe2a081206cee/tests%2Fui%2Fauthor%2Fmatches.stout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fmatches.stout?ref=8cf463fe935c9bf63c1eb4faae8fe2a081206cee", "patch": "@@ -1,5 +1,5 @@\n if_chain! {\n-    if let Stmt_::StmtDecl(ref decl, _) = stmt.node\n+    if let StmtKind::Decl(ref decl, _) = stmt.node\n     if let Decl_::DeclLocal(ref local) = decl.node;\n     if let Some(ref init) = local.init\n     if let ExprKind::Match(ref expr, ref arms, MatchSource::Normal) = init.node;\n@@ -13,7 +13,7 @@ if_chain! {\n     if let ExprKind::Lit(ref lit2) = lit_expr.node;\n     if let LitKind::Int(16, _) = lit2.node;\n     if let ExprKind::Block(ref block) = arms[1].body.node;\n-    if let Stmt_::StmtDecl(ref decl1, _) = block.node\n+    if let StmtKind::Decl(ref decl1, _) = block.node\n     if let Decl_::DeclLocal(ref local1) = decl1.node;\n     if let Some(ref init1) = local1.init\n     if let ExprKind::Lit(ref lit3) = init1.node;"}]}