{"sha": "431ede40dfd66c34656d3e58fabaa36e772e33c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMWVkZTQwZGZkNjZjMzQ2NTZkM2U1OGZhYmFhMzZlNzcyZTMzYzU=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-05-28T21:53:38Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-09-06T20:35:07Z"}, "message": "removed unneccessary SyntaxExpander structs", "tree": {"sha": "fa00e64824c73ccbfb4d466485f77828f4180ed1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa00e64824c73ccbfb4d466485f77828f4180ed1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/431ede40dfd66c34656d3e58fabaa36e772e33c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/431ede40dfd66c34656d3e58fabaa36e772e33c5", "html_url": "https://github.com/rust-lang/rust/commit/431ede40dfd66c34656d3e58fabaa36e772e33c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/431ede40dfd66c34656d3e58fabaa36e772e33c5/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8276e75f048955b496b1ef9ca1b3e11ca5bc306", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8276e75f048955b496b1ef9ca1b3e11ca5bc306", "html_url": "https://github.com/rust-lang/rust/commit/d8276e75f048955b496b1ef9ca1b3e11ca5bc306"}], "stats": {"total": 51, "additions": 18, "deletions": 33}, "files": [{"sha": "c71cff08ba8b2885cbc9e7c8915ad113141267d8", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/431ede40dfd66c34656d3e58fabaa36e772e33c5/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/431ede40dfd66c34656d3e58fabaa36e772e33c5/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=431ede40dfd66c34656d3e58fabaa36e772e33c5", "patch": "@@ -22,8 +22,7 @@ use std::hashmap::HashMap;\n \n // new-style macro! tt code:\n //\n-//    SyntaxExpanderTT, SyntaxExpanderTTItem, MacResult,\n-//    NormalTT, IdentTT\n+//    MacResult, NormalTT, IdentTT\n //\n // also note that ast::mac used to have a bunch of extraneous cases and\n // is now probably a redundant AST node, can be merged with\n@@ -40,21 +39,11 @@ pub type ItemDecorator = @fn(@ExtCtxt,\n                              ~[@ast::item])\n                           -> ~[@ast::item];\n \n-pub struct SyntaxExpanderTT {\n-    expander: SyntaxExpanderTTFun,\n-    span: Option<Span>\n-}\n-\n pub type SyntaxExpanderTTFun = @fn(@ExtCtxt,\n                                    Span,\n                                    &[ast::token_tree])\n                                 -> MacResult;\n \n-pub struct SyntaxExpanderTTItem {\n-    expander: SyntaxExpanderTTItemFun,\n-    span: Option<Span>\n-}\n-\n pub type SyntaxExpanderTTItemFun = @fn(@ExtCtxt,\n                                        Span,\n                                        ast::Ident,\n@@ -76,7 +65,7 @@ pub enum SyntaxExtension {\n     ItemDecorator(ItemDecorator),\n \n     // Token-tree expanders\n-    NormalTT(SyntaxExpanderTT),\n+    NormalTT(SyntaxExpanderTTFun, Option<Span>),\n \n     // An IdentTT is a macro that has an\n     // identifier in between the name of the\n@@ -86,7 +75,7 @@ pub enum SyntaxExtension {\n \n     // perhaps macro_rules! will lose its odd special identifier argument,\n     // and this can go away also\n-    IdentTT(SyntaxExpanderTTItem),\n+    IdentTT(SyntaxExpanderTTItemFun, Option<Span>),\n }\n \n // The SyntaxEnv is the environment that's threaded through the expansion\n@@ -121,11 +110,11 @@ type RenameList = ~[(ast::Ident,Name)];\n pub fn syntax_expander_table() -> SyntaxEnv {\n     // utility function to simplify creating NormalTT syntax extensions\n     fn builtin_normal_tt(f: SyntaxExpanderTTFun) -> @Transformer {\n-        @SE(NormalTT(SyntaxExpanderTT{expander: f, span: None}))\n+        @SE(NormalTT(f, None))\n     }\n     // utility function to simplify creating IdentTT syntax extensions\n     fn builtin_item_tt(f: SyntaxExpanderTTItemFun) -> @Transformer {\n-        @SE(IdentTT(SyntaxExpanderTTItem{expander: f, span: None}))\n+        @SE(IdentTT(f, None))\n     }\n     let mut syntax_expanders = HashMap::new();\n     // NB identifier starts with space, and can't conflict with legal idents"}, {"sha": "fbaeab03e8ab85926c39bab023ad9648421f8052", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/431ede40dfd66c34656d3e58fabaa36e772e33c5/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/431ede40dfd66c34656d3e58fabaa36e772e33c5/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=431ede40dfd66c34656d3e58fabaa36e772e33c5", "patch": "@@ -58,19 +58,16 @@ pub fn expand_expr(extsbox: @mut SyntaxEnv,\n                                 pth.span,\n                                 fmt!(\"macro undefined: '%s'\", extnamestr))\n                         }\n-                        Some(@SE(NormalTT(SyntaxExpanderTT{\n-                            expander: exp,\n-                            span: exp_sp\n-                        }))) => {\n+                        Some(@SE(NormalTT(expandfun, exp_span))) => {\n                             cx.bt_push(ExpnInfo {\n                                 call_site: s,\n                                 callee: NameAndSpan {\n                                     name: extnamestr,\n-                                    span: exp_sp,\n+                                    span: exp_span,\n                                 },\n                             });\n \n-                            let expanded = match exp(cx, mac.span, *tts) {\n+                            let expanded = match expandfun(cx, mac.span, *tts) {\n                                 MRExpr(e) => e,\n                                 MRAny(expr_maker,_,_) => expr_maker(),\n                                 _ => {\n@@ -379,7 +376,7 @@ pub fn expand_item_mac(extsbox: @mut SyntaxEnv,\n         None => cx.span_fatal(pth.span,\n                               fmt!(\"macro undefined: '%s!'\", extnamestr)),\n \n-        Some(@SE(NormalTT(ref expand))) => {\n+        Some(@SE(NormalTT(expander, span))) => {\n             if it.ident != parse::token::special_idents::invalid {\n                 cx.span_fatal(pth.span,\n                               fmt!(\"macro %s! expects no ident argument, \\\n@@ -390,12 +387,12 @@ pub fn expand_item_mac(extsbox: @mut SyntaxEnv,\n                 call_site: it.span,\n                 callee: NameAndSpan {\n                     name: extnamestr,\n-                    span: expand.span\n+                    span: span\n                 }\n             });\n-            ((*expand).expander)(cx, it.span, tts)\n+             expander(cx, it.span, tts)\n         }\n-        Some(@SE(IdentTT(ref expand))) => {\n+        Some(@SE(IdentTT(expander, span))) => {\n             if it.ident == parse::token::special_idents::invalid {\n                 cx.span_fatal(pth.span,\n                               fmt!(\"macro %s! expects an ident argument\",\n@@ -405,10 +402,10 @@ pub fn expand_item_mac(extsbox: @mut SyntaxEnv,\n                 call_site: it.span,\n                 callee: NameAndSpan {\n                     name: extnamestr,\n-                    span: expand.span\n+                    span: span\n                 }\n             });\n-            ((*expand).expander)(cx, it.span, it.ident, tts)\n+            expander(cx, it.span, it.ident, tts)\n         }\n         _ => cx.span_fatal(\n             it.span, fmt!(\"%s! is not legal in item position\", extnamestr))\n@@ -476,13 +473,12 @@ pub fn expand_stmt(extsbox: @mut SyntaxEnv,\n         None =>\n             cx.span_fatal(pth.span, fmt!(\"macro undefined: '%s'\", extnamestr)),\n \n-        Some(@SE(NormalTT(\n-            SyntaxExpanderTT{expander: exp, span: exp_sp}))) => {\n+        Some(@SE(NormalTT(expandfun, exp_span))) => {\n             cx.bt_push(ExpnInfo {\n                 call_site: sp,\n-                callee: NameAndSpan { name: extnamestr, span: exp_sp }\n+                callee: NameAndSpan { name: extnamestr, span: exp_span }\n             });\n-            let expanded = match exp(cx, mac.span, tts) {\n+            let expanded = match expandfun(cx, mac.span, tts) {\n                 MRExpr(e) =>\n                     @codemap::Spanned { node: StmtExpr(e, cx.next_id()),\n                                     span: e.span},"}, {"sha": "50eb03fc96e691b3d31fa0a1e00a643039a2d0d9", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/431ede40dfd66c34656d3e58fabaa36e772e33c5/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/431ede40dfd66c34656d3e58fabaa36e772e33c5/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=431ede40dfd66c34656d3e58fabaa36e772e33c5", "patch": "@@ -149,6 +149,6 @@ pub fn add_new_extension(cx: @ExtCtxt,\n \n     return MRDef(MacroDef{\n         name: ident_to_str(&name),\n-        ext: NormalTT(base::SyntaxExpanderTT{expander: exp, span: Some(sp)})\n+        ext: NormalTT(exp, Some(sp))\n     });\n }"}]}