{"sha": "86d51ec24b106a719673e244ead83ea8f095c23f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2ZDUxZWMyNGIxMDZhNzE5NjczZTI0NGVhZDgzZWE4ZjA5NWMyM2Y=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-05-23T20:46:39Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-05-23T21:25:55Z"}, "message": "Get test-pass/utf8.rs to run\n\nThis involved a small fix to the unicode-escape character lexing and\nto the pretty-printer.", "tree": {"sha": "795ea4c8476410953c91846ae2f6ba36aec1c3f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/795ea4c8476410953c91846ae2f6ba36aec1c3f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86d51ec24b106a719673e244ead83ea8f095c23f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86d51ec24b106a719673e244ead83ea8f095c23f", "html_url": "https://github.com/rust-lang/rust/commit/86d51ec24b106a719673e244ead83ea8f095c23f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86d51ec24b106a719673e244ead83ea8f095c23f/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc2cdbf4a13c6214449d55778216385caf669f83", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc2cdbf4a13c6214449d55778216385caf669f83", "html_url": "https://github.com/rust-lang/rust/commit/dc2cdbf4a13c6214449d55778216385caf669f83"}], "stats": {"total": 69, "additions": 25, "deletions": 44}, "files": [{"sha": "3e88c01a29282a835d55a9355ab25a15b93eed0d", "filename": "src/comp/front/lexer.rs", "status": "modified", "additions": 23, "deletions": 43, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/86d51ec24b106a719673e244ead83ea8f095c23f/src%2Fcomp%2Ffront%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d51ec24b106a719673e244ead83ea8f095c23f/src%2Fcomp%2Ffront%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Flexer.rs?ref=86d51ec24b106a719673e244ead83ea8f095c23f", "patch": "@@ -410,37 +410,18 @@ fn scan_number(char c, &reader rdr) -> token::token {\n     }\n }\n \n-fn scan_numeric_escape(&reader rdr) -> char {\n-\n-    auto n_hex_digits = 0;\n-\n-    assert (rdr.curr() == '\\\\');\n-\n-    alt (rdr.next()) {\n-        case ('x') { n_hex_digits = 2; }\n-        case ('u') { n_hex_digits = 4; }\n-        case ('U') { n_hex_digits = 8; }\n-        case (?c) {\n-            rdr.err(#fmt(\"unknown numeric character escape: %d\", c as int));\n-            fail;\n-        }\n-    }\n-\n-    rdr.bump(); // advance curr past \\\n-\n-    auto n = rdr.next();\n+fn scan_numeric_escape(&reader rdr, uint n_hex_digits) -> char {\n     auto accum_int = 0;\n-\n-    while (n_hex_digits != 0) {\n+    while (n_hex_digits != 0u) {\n+        auto n = rdr.curr();\n+        rdr.bump();\n         if (!is_hex_digit(n)) {\n             rdr.err(#fmt(\"illegal numeric character escape: %d\", n as int));\n             fail;\n         }\n         accum_int *= 16;\n         accum_int += hex_digit_val(n);\n-        rdr.bump();\n-        n = rdr.next();\n-        n_hex_digits -= 1;\n+        n_hex_digits -= 1u;\n     }\n     ret accum_int as char;\n }\n@@ -583,76 +564,76 @@ fn next_token(&reader rdr) -> token::token {\n         case ('\\'') {\n             rdr.bump();\n             auto c2 = rdr.curr();\n+            rdr.bump();\n             if (c2 == '\\\\') {\n-                alt (rdr.next()) {\n+                auto escaped = rdr.curr();\n+                rdr.bump();\n+                alt (escaped) {\n                     case ('n') { c2 = '\\n'; }\n                     case ('r') { c2 = '\\r'; }\n                     case ('t') { c2 = '\\t'; }\n                     case ('\\\\') { c2 = '\\\\'; }\n                     case ('\\'') { c2 = '\\''; }\n \n-                    case ('x') { c2 = scan_numeric_escape(rdr); }\n-                    case ('u') { c2 = scan_numeric_escape(rdr); }\n-                    case ('U') { c2 = scan_numeric_escape(rdr); }\n+                    case ('x') { c2 = scan_numeric_escape(rdr, 2u); }\n+                    case ('u') { c2 = scan_numeric_escape(rdr, 4u); }\n+                    case ('U') { c2 = scan_numeric_escape(rdr, 8u); }\n \n                     case (?c2) {\n                         rdr.err(#fmt(\"unknown character escape: %d\",\n                                      c2 as int));\n                         fail;\n                     }\n                 }\n-                rdr.bump();\n             }\n \n-            if (rdr.next() != '\\'') {\n+            if (rdr.curr() != '\\'') {\n                 rdr.err(\"unterminated character constant\");\n                 fail;\n             }\n-            rdr.bump(); // advance curr to closing '\n             rdr.bump(); // advance curr past token\n             ret token::LIT_CHAR(c2);\n         }\n \n         case ('\"') {\n             rdr.bump();\n             while (rdr.curr() != '\"') {\n-                alt (rdr.curr()) {\n+                auto ch = rdr.curr();\n+                rdr.bump();\n+                alt (ch) {\n                     case ('\\\\') {\n-                        alt (rdr.next()) {\n+                        auto escaped = rdr.curr();\n+                        rdr.bump();\n+                        alt (escaped) {\n                             case ('n') {\n-                                rdr.bump();\n                                 str::push_byte(accum_str, '\\n' as u8);\n                             }\n                             case ('r') {\n-                                rdr.bump();\n                                 str::push_byte(accum_str, '\\r' as u8);\n                             }\n                             case ('t') {\n-                                rdr.bump();\n                                 str::push_byte(accum_str, '\\t' as u8);\n                             }\n                             case ('\\\\') {\n-                                rdr.bump();\n                                 str::push_byte(accum_str, '\\\\' as u8);\n                             }\n                             case ('\"') {\n-                                rdr.bump();\n                                 str::push_byte(accum_str, '\"' as u8);\n                             }\n \n                             case ('x') {\n                                 str::push_char(accum_str,\n-                                               scan_numeric_escape(rdr));\n+                                               scan_numeric_escape(rdr, 2u));\n                             }\n \n                             case ('u') {\n                                 str::push_char(accum_str,\n-                                               scan_numeric_escape(rdr));\n+                                               scan_numeric_escape(rdr, 4u));\n                             }\n \n                             case ('U') {\n                                 str::push_char(accum_str,\n-                                               scan_numeric_escape(rdr));\n+                                               scan_numeric_escape(rdr, 8u));\n                             }\n \n                             case (?c2) {\n@@ -663,10 +644,9 @@ fn next_token(&reader rdr) -> token::token {\n                         }\n                     }\n                     case (_) {\n-                        str::push_char(accum_str, rdr.curr());\n+                        str::push_char(accum_str, ch);\n                     }\n                 }\n-                rdr.bump();\n             }\n             rdr.bump();\n             ret token::LIT_STR(interner::intern[str](*rdr.get_interner(),"}, {"sha": "0c2b21e0810ad42a28411b958ecb5b1d179f817f", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86d51ec24b106a719673e244ead83ea8f095c23f/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d51ec24b106a719673e244ead83ea8f095c23f/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=86d51ec24b106a719673e244ead83ea8f095c23f", "patch": "@@ -957,7 +957,8 @@ fn escape_str(str st, char to_escape) -> str {\n             case ('\\\\') {out += \"\\\\\\\\\";}\n             case (?cur) {\n                 if (cur == to_escape) {out += \"\\\\\";}\n-                str::push_byte(out, cur as u8);\n+                // FIXME some (or all?) non-ascii things should be escaped\n+                str::push_char(out, cur);\n             }\n         }\n         i += 1u;"}]}