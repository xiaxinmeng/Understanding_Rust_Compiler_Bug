{"sha": "732cc736c9450c7f0e7f6413bd04ed6d851b624b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczMmNjNzM2Yzk0NTBjN2YwZTdmNjQxM2JkMDRlZDZkODUxYjYyNGI=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2018-04-20T23:05:54Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2018-04-20T23:05:54Z"}, "message": "Clean up `IsolatedEncoder::encode_info_for_impl_item()` a bit", "tree": {"sha": "0e98ca7b9be54f3ff19560447bdd9527662cd4b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e98ca7b9be54f3ff19560447bdd9527662cd4b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/732cc736c9450c7f0e7f6413bd04ed6d851b624b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/732cc736c9450c7f0e7f6413bd04ed6d851b624b", "html_url": "https://github.com/rust-lang/rust/commit/732cc736c9450c7f0e7f6413bd04ed6d851b624b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/732cc736c9450c7f0e7f6413bd04ed6d851b624b/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4", "html_url": "https://github.com/rust-lang/rust/commit/05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "d7a06f7932fef396a8de850578e442efea6435a9", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/732cc736c9450c7f0e7f6413bd04ed6d851b624b/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/732cc736c9450c7f0e7f6413bd04ed6d851b624b/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=732cc736c9450c7f0e7f6413bd04ed6d851b624b", "patch": "@@ -925,18 +925,19 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n         };\n \n         let mir =\n-            if let hir::ImplItemKind::Const(..) = ast_item.node {\n-                true\n-            } else if let hir::ImplItemKind::Method(ref sig, _) = ast_item.node {\n-                let generics = self.tcx.generics_of(def_id);\n-                let types = generics.parent_types as usize + generics.types.len();\n-                let needs_inline = (types > 0 || tcx.trans_fn_attrs(def_id).requests_inline()) &&\n-                    !self.metadata_output_only();\n-                let is_const_fn = sig.constness == hir::Constness::Const;\n-                let always_encode_mir = self.tcx.sess.opts.debugging_opts.always_encode_mir;\n-                needs_inline || is_const_fn || always_encode_mir\n-            } else {\n-                false\n+            match ast_item.node {\n+                hir::ImplItemKind::Const(..) => true,\n+                hir::ImplItemKind::Method(ref sig, _) => {\n+                    let generics = self.tcx.generics_of(def_id);\n+                    let types = generics.parent_types as usize + generics.types.len();\n+                    let needs_inline =\n+                        (types > 0 || tcx.trans_fn_attrs(def_id).requests_inline())\n+                            && !self.metadata_output_only();\n+                    let is_const_fn = sig.constness == hir::Constness::Const;\n+                    let always_encode_mir = self.tcx.sess.opts.debugging_opts.always_encode_mir;\n+                    needs_inline || is_const_fn || always_encode_mir\n+                },\n+                hir::ImplItemKind::Type(..) => false,\n             };\n \n         Entry {"}]}