{"sha": "d82d7013600a9f0ce6ffb74aed0a0701bdeccd79", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4MmQ3MDEzNjAwYTlmMGNlNmZmYjc0YWVkMGEwNzAxYmRlY2NkNzk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-06T08:06:23Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-06T08:06:23Z"}, "message": "add option to track a particular AllocId (does nothing yet)", "tree": {"sha": "a71d54da32c3ae1d08bcbee11b6907ceb70c6b7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a71d54da32c3ae1d08bcbee11b6907ceb70c6b7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d82d7013600a9f0ce6ffb74aed0a0701bdeccd79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d82d7013600a9f0ce6ffb74aed0a0701bdeccd79", "html_url": "https://github.com/rust-lang/rust/commit/d82d7013600a9f0ce6ffb74aed0a0701bdeccd79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d82d7013600a9f0ce6ffb74aed0a0701bdeccd79/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63925169c1d713c01646e37ebbf32c03467a650a", "url": "https://api.github.com/repos/rust-lang/rust/commits/63925169c1d713c01646e37ebbf32c03467a650a", "html_url": "https://github.com/rust-lang/rust/commit/63925169c1d713c01646e37ebbf32c03467a650a"}], "stats": {"total": 74, "additions": 42, "deletions": 32}, "files": [{"sha": "b478a7d23eb982198935b4ae2c9c80882bd5a37f", "filename": "benches/helpers/miri_helper.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d82d7013600a9f0ce6ffb74aed0a0701bdeccd79/benches%2Fhelpers%2Fmiri_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82d7013600a9f0ce6ffb74aed0a0701bdeccd79/benches%2Fhelpers%2Fmiri_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fhelpers%2Fmiri_helper.rs?ref=d82d7013600a9f0ce6ffb74aed0a0701bdeccd79", "patch": "@@ -29,16 +29,7 @@ impl rustc_driver::Callbacks for MiriCompilerCalls<'_> {\n                 tcx.entry_fn(LOCAL_CRATE).expect(\"no main or start function found\");\n \n             self.bencher.iter(|| {\n-                let config = miri::MiriConfig {\n-                    validate: true,\n-                    stacked_borrows: true,\n-                    communicate: false,\n-                    ignore_leaks: false,\n-                    excluded_env_vars: vec![],\n-                    args: vec![],\n-                    seed: None,\n-                    tracked_pointer_tag: None,\n-                };\n+                let config = miri::MiriConfig::default();\n                 eval_main(tcx, entry_def_id, config);\n             });\n         });"}, {"sha": "509a1592152d045fadbe03e6a34693b6847b822e", "filename": "src/bin/miri-rustc-tests.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d82d7013600a9f0ce6ffb74aed0a0701bdeccd79/src%2Fbin%2Fmiri-rustc-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82d7013600a9f0ce6ffb74aed0a0701bdeccd79/src%2Fbin%2Fmiri-rustc-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri-rustc-tests.rs?ref=d82d7013600a9f0ce6ffb74aed0a0701bdeccd79", "patch": "@@ -46,16 +46,7 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n                                 .iter()\n                                 .any(|attr| attr.check_name(rustc_span::symbol::sym::test))\n                             {\n-                                let config = MiriConfig {\n-                                    validate: true,\n-                                    stacked_borrows: true,\n-                                    communicate: false,\n-                                    ignore_leaks: false,\n-                                    excluded_env_vars: vec![],\n-                                    args: vec![],\n-                                    seed: None,\n-                                    tracked_pointer_tag: None,\n-                                };\n+                                let config = MiriConfig::default();\n                                 let did = self.0.hir().body_owner_def_id(body_id);\n                                 println!(\"running test: {}\", self.0.def_path_debug_str(did));\n                                 miri::eval_main(self.0, did, config);\n@@ -68,16 +59,7 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n                 }\n                 tcx.hir().krate().visit_all_item_likes(&mut Visitor(tcx));\n             } else if let Some((entry_def_id, _)) = tcx.entry_fn(LOCAL_CRATE) {\n-                let config = MiriConfig {\n-                    validate: true,\n-                    stacked_borrows: true,\n-                    communicate: false,\n-                    ignore_leaks: false,\n-                    excluded_env_vars: vec![],\n-                    args: vec![],\n-                    seed: None,\n-                    tracked_pointer_tag: None,\n-                };\n+                let config = MiriConfig::default();\n                 miri::eval_main(tcx, entry_def_id, config);\n \n                 compiler.session().abort_if_errors();"}, {"sha": "d2709643237f168bb0b2ec7c722ac7778796058b", "filename": "src/bin/miri.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d82d7013600a9f0ce6ffb74aed0a0701bdeccd79/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82d7013600a9f0ce6ffb74aed0a0701bdeccd79/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=d82d7013600a9f0ce6ffb74aed0a0701bdeccd79", "patch": "@@ -135,6 +135,7 @@ fn main() {\n     let mut ignore_leaks = false;\n     let mut seed: Option<u64> = None;\n     let mut tracked_pointer_tag: Option<miri::PtrId> = None;\n+    let mut tracked_alloc_id: Option<miri::AllocId> = None;\n     let mut rustc_args = vec![];\n     let mut miri_args = vec![];\n     let mut after_dashdash = false;\n@@ -206,6 +207,17 @@ fn main() {\n                         panic!(\"-Zmiri-track-pointer-tag must be a nonzero id\");\n                     }\n                 }\n+                arg if arg.starts_with(\"-Zmiri-track-alloc-id=\") => {\n+                    let id: u64 = match arg.trim_start_matches(\"-Zmiri-track-alloc-id=\").parse()\n+                    {\n+                        Ok(id) => id,\n+                        Err(err) => panic!(\n+                            \"-Zmiri-track-alloc-id requires a valid `u64` as the argument: {}\",\n+                            err\n+                        ),\n+                    };\n+                    tracked_alloc_id = Some(miri::AllocId(id));\n+                }\n                 _ => {\n                     rustc_args.push(arg);\n                 }\n@@ -240,6 +252,7 @@ fn main() {\n         seed,\n         args: miri_args,\n         tracked_pointer_tag,\n+        tracked_alloc_id,\n     };\n     rustc_driver::install_ice_hook();\n     let result = rustc_driver::catch_fatal_errors(move || {"}, {"sha": "1981a8d1e03e919f848a005e7b3c7b0428a0900f", "filename": "src/eval.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d82d7013600a9f0ce6ffb74aed0a0701bdeccd79/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82d7013600a9f0ce6ffb74aed0a0701bdeccd79/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=d82d7013600a9f0ce6ffb74aed0a0701bdeccd79", "patch": "@@ -30,6 +30,24 @@ pub struct MiriConfig {\n     pub seed: Option<u64>,\n     /// The stacked borrow id to report about\n     pub tracked_pointer_tag: Option<PtrId>,\n+    /// The allocation id to report about.\n+    pub tracked_alloc_id: Option<AllocId>,\n+}\n+\n+impl Default for MiriConfig {\n+    fn default() -> MiriConfig {\n+        MiriConfig {\n+            validate: true,\n+            stacked_borrows: true,\n+            communicate: false,\n+            ignore_leaks: false,\n+            excluded_env_vars: vec![],\n+            args: vec![],\n+            seed: None,\n+            tracked_pointer_tag: None,\n+            tracked_alloc_id: None,\n+        }\n+    }\n }\n \n /// Details of premature program termination.\n@@ -55,6 +73,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n             StdRng::seed_from_u64(config.seed.unwrap_or(0)),\n             config.stacked_borrows,\n             config.tracked_pointer_tag,\n+            config.tracked_alloc_id,\n         ),\n     );\n     // Complete initialization."}, {"sha": "07885148e1fd966fc5ce1ea9a74ec5ffd34d6b23", "filename": "src/machine.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d82d7013600a9f0ce6ffb74aed0a0701bdeccd79/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82d7013600a9f0ce6ffb74aed0a0701bdeccd79/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=d82d7013600a9f0ce6ffb74aed0a0701bdeccd79", "patch": "@@ -75,15 +75,19 @@ pub struct MemoryExtra {\n     pub intptrcast: intptrcast::MemoryExtra,\n \n     /// Mapping extern static names to their canonical allocation.\n-    pub(crate) extern_statics: FxHashMap<Symbol, AllocId>,\n+    extern_statics: FxHashMap<Symbol, AllocId>,\n \n     /// The random number generator used for resolving non-determinism.\n     /// Needs to be queried by ptr_to_int, hence needs interior mutability.\n     pub(crate) rng: RefCell<StdRng>,\n+\n+    /// An allocation ID to report when it is being allocated\n+    /// (helps for debugging memory leaks).\n+    tracked_alloc_id: Option<AllocId>,\n }\n \n impl MemoryExtra {\n-    pub fn new(rng: StdRng, stacked_borrows: bool, tracked_pointer_tag: Option<PtrId>) -> Self {\n+    pub fn new(rng: StdRng, stacked_borrows: bool, tracked_pointer_tag: Option<PtrId>, tracked_alloc_id: Option<AllocId>) -> Self {\n         let stacked_borrows = if stacked_borrows {\n             Some(Rc::new(RefCell::new(stacked_borrows::GlobalState::new(tracked_pointer_tag))))\n         } else {\n@@ -94,6 +98,7 @@ impl MemoryExtra {\n             intptrcast: Default::default(),\n             extern_statics: FxHashMap::default(),\n             rng: RefCell::new(rng),\n+            tracked_alloc_id,\n         }\n     }\n "}]}