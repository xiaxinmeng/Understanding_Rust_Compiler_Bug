{"sha": "5aedabf1a3308925fc6087a93c58f1002ef4c0fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZWRhYmYxYTMzMDg5MjVmYzYwODdhOTNjNThmMTAwMmVmNGMwZmE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-03T23:44:54Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-03T23:46:15Z"}, "message": "rustc: Run all intrinsics through the monomorphiser\n\nIntrinsics always want to be inlined.", "tree": {"sha": "19601ac0d7628b56f1c85625872abad6bf0e69f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19601ac0d7628b56f1c85625872abad6bf0e69f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5aedabf1a3308925fc6087a93c58f1002ef4c0fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5aedabf1a3308925fc6087a93c58f1002ef4c0fa", "html_url": "https://github.com/rust-lang/rust/commit/5aedabf1a3308925fc6087a93c58f1002ef4c0fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5aedabf1a3308925fc6087a93c58f1002ef4c0fa/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb348ccab1cab5af5b57caef271ddae13f64be9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb348ccab1cab5af5b57caef271ddae13f64be9f", "html_url": "https://github.com/rust-lang/rust/commit/bb348ccab1cab5af5b57caef271ddae13f64be9f"}], "stats": {"total": 61, "additions": 22, "deletions": 39}, "files": [{"sha": "f3a60fd3a6d4dce9236349400b3e86eceb6b4e84", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5aedabf1a3308925fc6087a93c58f1002ef4c0fa/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aedabf1a3308925fc6087a93c58f1002ef4c0fa/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=5aedabf1a3308925fc6087a93c58f1002ef4c0fa", "patch": "@@ -2504,7 +2504,6 @@ fn lval_static_fn_inner(bcx: block, fn_id: ast::def_id, id: ast::node_id,\n \n     // Check whether this fn has an inlined copy and, if so, redirect fn_id to\n     // the local id of the inlined copy.\n-    let original_crate = fn_id.crate;\n     let fn_id = if fn_id.crate != ast::local_crate {\n         maybe_instantiate_inline(ccx, fn_id)\n     } else { fn_id };\n@@ -2513,27 +2512,27 @@ fn lval_static_fn_inner(bcx: block, fn_id: ast::def_id, id: ast::node_id,\n         let local_with_type_params =\n             fn_id.crate == ast::local_crate && tys.len() > 0u;\n \n-        // Rust intrinsic functions should always be monomorphised\n-        let inlined_rust_intrinsic = {\n-            if fn_id.crate == ast::local_crate\n-                && original_crate != ast::local_crate {\n+        // Intrinsic functions should always be monomorphised. In particular,\n+        // if we see an intrinsic that is inlined from a different crate, we\n+        // want to reemit the intrinsic instead of trying to call it in the\n+        // other crate.\n+        let rust_intrinsic = if fn_id.crate == ast::local_crate {\n \n-                let map_node = session::expect(\n-                    ccx.sess,\n-                    ccx.tcx.items.find(fn_id.node),\n-                    || fmt!(\"inlined item should be in ast map\"));\n+            let map_node = session::expect(\n+                ccx.sess,\n+                ccx.tcx.items.find(fn_id.node),\n+                || fmt!(\"local item should be in ast map\"));\n \n-                match map_node {\n-                  ast_map::node_foreign_item(\n-                      _, ast::foreign_abi_rust_intrinsic, _) => true,\n-                  _ => false\n-                }\n-            } else {\n-                false\n+            match map_node {\n+              ast_map::node_foreign_item(\n+                  _, ast::foreign_abi_rust_intrinsic, _) => true,\n+              _ => false\n             }\n+        } else {\n+            false\n         };\n \n-        local_with_type_params || inlined_rust_intrinsic\n+        local_with_type_params || rust_intrinsic\n     };\n \n     if must_monomorphise {"}, {"sha": "6452fee3d53727d6e09490d8f162b8fdcec2d0a4", "filename": "src/rustc/middle/trans/foreign.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5aedabf1a3308925fc6087a93c58f1002ef4c0fa/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aedabf1a3308925fc6087a93c58f1002ef4c0fa/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=5aedabf1a3308925fc6087a93c58f1002ef4c0fa", "patch": "@@ -759,7 +759,7 @@ fn trans_foreign_mod(ccx: @crate_ctxt,\n \n     for vec::each(foreign_mod.items) |foreign_item| {\n       match foreign_item.node {\n-        ast::foreign_item_fn(_, _, typarams) => {\n+        ast::foreign_item_fn(*) => {\n           let id = foreign_item.id;\n           if abi != ast::foreign_abi_rust_intrinsic {\n               let llwrapfn = get_item_val(ccx, id);\n@@ -772,25 +772,7 @@ fn trans_foreign_mod(ccx: @crate_ctxt,\n                   build_wrap_fn(ccx, tys, llshimfn, llwrapfn);\n               }\n           } else {\n-              // Intrinsics with type parameters are emitted by\n-              // monomorphic_fn, but ones without are emitted here\n-              if typarams.is_empty() {\n-                  let llwrapfn = get_item_val(ccx, id);\n-                  let path = match ccx.tcx.items.find(id) {\n-                      Some(ast_map::node_foreign_item(_, _, pt)) => pt,\n-                      _ => {\n-                          ccx.sess.span_bug(foreign_item.span,\n-                                            ~\"can't find intrinsic path\")\n-                      }\n-                  };\n-                  let psubsts = {\n-                      tys: ~[],\n-                      vtables: None,\n-                      bounds: @~[]\n-                  };\n-                  trans_intrinsic(ccx, llwrapfn, foreign_item,\n-                                  *path, psubsts, None);\n-              }\n+              // Intrinsics are emitted by monomorphic fn\n           }\n         }\n         ast::foreign_item_const(*) => {"}, {"sha": "f2d3f4d4718395d6f2aa41ec4f27addc085aa07a", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5aedabf1a3308925fc6087a93c58f1002ef4c0fa/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aedabf1a3308925fc6087a93c58f1002ef4c0fa/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=5aedabf1a3308925fc6087a93c58f1002ef4c0fa", "patch": "@@ -94,11 +94,13 @@ fn type_uses_for(ccx: @crate_ctxt, fn_id: def_id, n_tps: uint)\n               ~\"atomic_xchg_acq\" | ~\"atomic_xadd_acq\" | ~\"atomic_xsub_acq\" |\n               ~\"atomic_xchg_rel\" | ~\"atomic_xadd_rel\" | ~\"atomic_xsub_rel\" =>\n               { 0u }\n-              ~\"visit_tydesc\" | ~\"forget\" | ~\"addr_of\" => {\n+              ~\"visit_tydesc\" | ~\"forget\" | ~\"addr_of\" |\n+              ~\"frame_address\" | ~\"morestack_addr\" => {\n                 0u\n               }\n               // would be cool to make these an enum instead of strings!\n-              _ => fail ~\"unknown intrinsic in type_use\"\n+              _ => fail fmt!(\"unknown intrinsic in type_use %?\",\n+                             cx.ccx.sess.str_of(i.ident))\n             };\n             for uint::range(0u, n_tps) |n| { cx.uses[n] |= flags;}\n         }"}]}