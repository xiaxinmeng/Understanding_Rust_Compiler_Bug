{"sha": "8ed7face91d440d20f8503e320295c8194c3bd09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlZDdmYWNlOTFkNDQwZDIwZjg1MDNlMzIwMjk1YzgxOTRjM2JkMDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-07T17:44:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-07T17:44:57Z"}, "message": "Auto merge of #1577 - RalfJung:rlib, r=RalfJung\n\nfix for rlib/cdylib crates in dependency tree\n\nFixes https://github.com/rust-lang/miri/issues/1567\n\nUnfortunately, I found no nice way to test for this.", "tree": {"sha": "b4a4c6850e9113fcd8c50b1aaa5b3ee99bb77647", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4a4c6850e9113fcd8c50b1aaa5b3ee99bb77647"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ed7face91d440d20f8503e320295c8194c3bd09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ed7face91d440d20f8503e320295c8194c3bd09", "html_url": "https://github.com/rust-lang/rust/commit/8ed7face91d440d20f8503e320295c8194c3bd09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ed7face91d440d20f8503e320295c8194c3bd09/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7448e79dd20b6342d8084e8a2ee420900e53776e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7448e79dd20b6342d8084e8a2ee420900e53776e", "html_url": "https://github.com/rust-lang/rust/commit/7448e79dd20b6342d8084e8a2ee420900e53776e"}, {"sha": "5058ec18f161c075e2b754c8a6df131cfeaf6f6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5058ec18f161c075e2b754c8a6df131cfeaf6f6a", "html_url": "https://github.com/rust-lang/rust/commit/5058ec18f161c075e2b754c8a6df131cfeaf6f6a"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "72c873b229e9369e817360f3fdeb8b5667e8e27e", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8ed7face91d440d20f8503e320295c8194c3bd09/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ed7face91d440d20f8503e320295c8194c3bd09/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=8ed7face91d440d20f8503e320295c8194c3bd09", "patch": "@@ -532,8 +532,7 @@ fn phase_cargo_rustc(args: env::Args) {\n     fn is_runnable_crate() -> bool {\n         let is_bin = get_arg_flag_value(\"--crate-type\").as_deref().unwrap_or(\"bin\") == \"bin\";\n         let is_test = has_arg_flag(\"--test\");\n-        let print = get_arg_flag_value(\"--print\").is_some();\n-        (is_bin || is_test) && !print\n+        is_bin || is_test\n     }\n \n     fn out_filename(prefix: &str, suffix: &str) -> PathBuf {\n@@ -552,8 +551,21 @@ fn phase_cargo_rustc(args: env::Args) {\n \n     let verbose = std::env::var_os(\"MIRI_VERBOSE\").is_some();\n     let target_crate = is_target_crate();\n+    let print = get_arg_flag_value(\"--print\").is_some(); // whether this is cargo passing `--print` to get some infos\n+\n+    // rlib and cdylib are just skipped, we cannot interpret them and do not need them\n+    // for the rest of the build either.\n+    match get_arg_flag_value(\"--crate-type\").as_deref() {\n+        Some(\"rlib\") | Some(\"cdylib\") => {\n+            if verbose {\n+                eprint!(\"[cargo-miri rustc] (rlib/cdylib skipped)\");\n+            }\n+            return;\n+        }\n+        _ => {},\n+    }\n \n-    if target_crate && is_runnable_crate() {\n+    if !print && target_crate && is_runnable_crate() {\n         // This is the binary or test crate that we want to interpret under Miri.\n         // But we cannot run it here, as cargo invoked us as a compiler -- our stdin and stdout are not\n         // like we want them.\n@@ -577,7 +589,7 @@ fn phase_cargo_rustc(args: env::Args) {\n     let mut emit_link_hack = false;\n     // Arguments are treated very differently depending on whether this crate is\n     // for interpretation by Miri, or for use by a build script / proc macro.\n-    if target_crate {\n+    if !print && target_crate {\n         // Forward arguments, but remove \"link\" from \"--emit\" to make this a check-only build.\n         let emit_flag = \"--emit\";\n         for arg in args {\n@@ -607,7 +619,7 @@ fn phase_cargo_rustc(args: env::Args) {\n         cmd.arg(\"--sysroot\");\n         cmd.arg(sysroot);\n     } else {\n-        // For host crates, just forward everything.\n+        // For host crates or when we are printing, just forward everything.\n         cmd.args(args);\n     }\n "}]}