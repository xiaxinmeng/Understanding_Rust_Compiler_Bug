{"sha": "992dd205ddb4906e9445ba1746b877faad784437", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5MmRkMjA1ZGRiNDkwNmU5NDQ1YmExNzQ2Yjg3N2ZhYWQ3ODQ0Mzc=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-02-24T19:56:04Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-02-28T10:22:30Z"}, "message": "Add missing url in sync structs", "tree": {"sha": "bcff9243b2cb537df21cb324e0e04843289e7522", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcff9243b2cb537df21cb324e0e04843289e7522"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/992dd205ddb4906e9445ba1746b877faad784437", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/992dd205ddb4906e9445ba1746b877faad784437", "html_url": "https://github.com/rust-lang/rust/commit/992dd205ddb4906e9445ba1746b877faad784437", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/992dd205ddb4906e9445ba1746b877faad784437/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08230775a026c955873ba557e624b7f665661f37", "url": "https://api.github.com/repos/rust-lang/rust/commits/08230775a026c955873ba557e624b7f665661f37", "html_url": "https://github.com/rust-lang/rust/commit/08230775a026c955873ba557e624b7f665661f37"}], "stats": {"total": 29, "additions": 22, "deletions": 7}, "files": [{"sha": "d9d13240fcc3acc9a7ec9e4c27138182152cc215", "filename": "src/libstd/sys_common/poison.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/992dd205ddb4906e9445ba1746b877faad784437/src%2Flibstd%2Fsys_common%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992dd205ddb4906e9445ba1746b877faad784437/src%2Flibstd%2Fsys_common%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fpoison.rs?ref=992dd205ddb4906e9445ba1746b877faad784437", "patch": "@@ -60,10 +60,13 @@ pub struct Guard {\n \n /// A type of error which can be returned whenever a lock is acquired.\n ///\n-/// Both Mutexes and RwLocks are poisoned whenever a thread fails while the lock\n+/// Both [`Mutex`]es and [`RwLock`]s are poisoned whenever a thread fails while the lock\n /// is held. The precise semantics for when a lock is poisoned is documented on\n /// each lock, but once a lock is poisoned then all future acquisitions will\n /// return this error.\n+///\n+/// [`Mutex`]: ../../std/sync/struct.Mutex.html\n+/// [`RwLock`]: ../../std/sync/struct.RwLock.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct PoisonError<T> {\n     guard: T,\n@@ -85,19 +88,26 @@ pub enum TryLockError<T> {\n \n /// A type alias for the result of a lock method which can be poisoned.\n ///\n-/// The `Ok` variant of this result indicates that the primitive was not\n-/// poisoned, and the `Guard` is contained within. The `Err` variant indicates\n-/// that the primitive was poisoned. Note that the `Err` variant *also* carries\n-/// the associated guard, and it can be acquired through the `into_inner`\n+/// The [`Ok`] variant of this result indicates that the primitive was not\n+/// poisoned, and the `Guard` is contained within. The [`Err`] variant indicates\n+/// that the primitive was poisoned. Note that the [`Err`] variant *also* carries\n+/// the associated guard, and it can be acquired through the [`into_inner`]\n /// method.\n+///\n+/// [`Ok`]: ../../std/result/enum.Result.html#variant.Ok\n+/// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n+/// [`into_inner`]: ../../std/sync/struct.Mutex.html#method.into_inner\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub type LockResult<Guard> = Result<Guard, PoisonError<Guard>>;\n \n /// A type alias for the result of a nonblocking locking method.\n ///\n-/// For more information, see `LockResult`. A `TryLockResult` doesn't\n-/// necessarily hold the associated guard in the `Err` type as the lock may not\n+/// For more information, see [`LockResult`]. A `TryLockResult` doesn't\n+/// necessarily hold the associated guard in the [`Err`] type as the lock may not\n /// have been acquired for other reasons.\n+///\n+/// [`LockResult`]: ../../std/sync/type.LockResult.html\n+/// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub type TryLockResult<Guard> = Result<Guard, TryLockError<Guard>>;\n \n@@ -124,6 +134,11 @@ impl<T> Error for PoisonError<T> {\n \n impl<T> PoisonError<T> {\n     /// Creates a `PoisonError`.\n+    ///\n+    /// This is generally created by methods like [`Mutex::lock`] or [`RwLock::read`].\n+    ///\n+    /// [`Mutex::lock`]: ../../std/sync/struct.Mutex.html#method.lock\n+    /// [`RwLock::read`]: ../../std/sync/struct.RwLock.html#method.read\n     #[stable(feature = \"sync_poison\", since = \"1.2.0\")]\n     pub fn new(guard: T) -> PoisonError<T> {\n         PoisonError { guard: guard }"}]}