{"sha": "6d0d82ce10bfbdb44aab9a2f120b236ebc7e0175", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMGQ4MmNlMTBiZmJkYjQ0YWFiOWEyZjEyMGIyMzZlYmM3ZTAxNzU=", "commit": {"author": {"name": "Irina Popa", "email": "irinagpopa@gmail.com", "date": "2018-07-03T13:02:38Z"}, "committer": {"name": "Irina Popa", "email": "irinagpopa@gmail.com", "date": "2018-07-30T15:36:32Z"}, "message": "rustc_codegen_llvm: use safe references for DIBuilder.", "tree": {"sha": "003cb292c9b1235e439f44e3229f1bf3cdb1a799", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/003cb292c9b1235e439f44e3229f1bf3cdb1a799"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d0d82ce10bfbdb44aab9a2f120b236ebc7e0175", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d0d82ce10bfbdb44aab9a2f120b236ebc7e0175", "html_url": "https://github.com/rust-lang/rust/commit/6d0d82ce10bfbdb44aab9a2f120b236ebc7e0175", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d0d82ce10bfbdb44aab9a2f120b236ebc7e0175/comments", "author": {"login": "irinagpopa", "id": 32459019, "node_id": "MDQ6VXNlcjMyNDU5MDE5", "avatar_url": "https://avatars.githubusercontent.com/u/32459019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irinagpopa", "html_url": "https://github.com/irinagpopa", "followers_url": "https://api.github.com/users/irinagpopa/followers", "following_url": "https://api.github.com/users/irinagpopa/following{/other_user}", "gists_url": "https://api.github.com/users/irinagpopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/irinagpopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irinagpopa/subscriptions", "organizations_url": "https://api.github.com/users/irinagpopa/orgs", "repos_url": "https://api.github.com/users/irinagpopa/repos", "events_url": "https://api.github.com/users/irinagpopa/events{/privacy}", "received_events_url": "https://api.github.com/users/irinagpopa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "irinagpopa", "id": 32459019, "node_id": "MDQ6VXNlcjMyNDU5MDE5", "avatar_url": "https://avatars.githubusercontent.com/u/32459019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irinagpopa", "html_url": "https://github.com/irinagpopa", "followers_url": "https://api.github.com/users/irinagpopa/followers", "following_url": "https://api.github.com/users/irinagpopa/following{/other_user}", "gists_url": "https://api.github.com/users/irinagpopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/irinagpopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irinagpopa/subscriptions", "organizations_url": "https://api.github.com/users/irinagpopa/orgs", "repos_url": "https://api.github.com/users/irinagpopa/repos", "events_url": "https://api.github.com/users/irinagpopa/events{/privacy}", "received_events_url": "https://api.github.com/users/irinagpopa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dbde55395b3e868ff88af39fc4d25c70bfa31f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dbde55395b3e868ff88af39fc4d25c70bfa31f4", "html_url": "https://github.com/rust-lang/rust/commit/2dbde55395b3e868ff88af39fc4d25c70bfa31f4"}], "stats": {"total": 67, "additions": 33, "deletions": 34}, "files": [{"sha": "43534b8ec2e031d2b472901bda67aa9bbeacb2b9", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d0d82ce10bfbdb44aab9a2f120b236ebc7e0175/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0d82ce10bfbdb44aab9a2f120b236ebc7e0175/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=6d0d82ce10bfbdb44aab9a2f120b236ebc7e0175", "patch": "@@ -22,7 +22,7 @@ use self::source_loc::InternalDebugLocation::{self, UnknownLocation};\n \n use llvm;\n use llvm::ValueRef;\n-use llvm::debuginfo::{DIFile, DIType, DIScope, DIBuilderRef, DISubprogram, DIArray, DIFlags};\n+use llvm::debuginfo::{DIFile, DIType, DIScope, DIBuilder, DISubprogram, DIArray, DIFlags};\n use rustc::hir::CodegenFnAttrFlags;\n use rustc::hir::def_id::{DefId, CrateNum};\n use rustc::ty::subst::{Substs, UnpackedKind};\n@@ -70,7 +70,7 @@ const DW_TAG_arg_variable: c_uint = 0x101;\n pub struct CrateDebugContext<'a, 'tcx> {\n     llcontext: &'a llvm::Context,\n     llmod: &'a llvm::Module,\n-    builder: DIBuilderRef,\n+    builder: &'a DIBuilder,\n     created_files: RefCell<FxHashMap<(Symbol, Symbol), DIFile>>,\n     created_enum_disr_types: RefCell<FxHashMap<(DefId, layout::Primitive), DIType>>,\n "}, {"sha": "602a64ae3b33a72ed01d33c01bcc76ff08660693", "filename": "src/librustc_codegen_llvm/debuginfo/utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d0d82ce10bfbdb44aab9a2f120b236ebc7e0175/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0d82ce10bfbdb44aab9a2f120b236ebc7e0175/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Futils.rs?ref=6d0d82ce10bfbdb44aab9a2f120b236ebc7e0175", "patch": "@@ -17,7 +17,7 @@ use rustc::hir::def_id::DefId;\n use rustc::ty::DefIdTree;\n \n use llvm;\n-use llvm::debuginfo::{DIScope, DIBuilderRef, DIDescriptor_opaque, DIArray};\n+use llvm::debuginfo::{DIScope, DIBuilder, DIDescriptor_opaque, DIArray};\n use common::{CodegenCx};\n \n use std::ptr::NonNull;\n@@ -37,7 +37,7 @@ pub fn is_node_local_to_unit(cx: &CodegenCx, def_id: DefId) -> bool\n }\n \n #[allow(non_snake_case)]\n-pub fn create_DIArray(builder: DIBuilderRef, arr: &[Option<NonNull<DIDescriptor_opaque>>]) -> DIArray {\n+pub fn create_DIArray(builder: &DIBuilder, arr: &[Option<NonNull<DIDescriptor_opaque>>]) -> DIArray {\n     return unsafe {\n         llvm::LLVMRustDIBuilderGetOrCreateArray(builder, arr.as_ptr(), arr.len() as u32)\n     };\n@@ -55,7 +55,7 @@ pub fn debug_context(cx: &'a CodegenCx<'ll, 'tcx>) -> &'a CrateDebugContext<'a,\n \n #[inline]\n #[allow(non_snake_case)]\n-pub fn DIB(cx: &CodegenCx) -> DIBuilderRef {\n+pub fn DIB(cx: &CodegenCx<'ll, '_>) -> &'ll DIBuilder {\n     cx.dbg_cx.as_ref().unwrap().builder\n }\n "}, {"sha": "b202a1bf2f70e35ac2d14efcbfce8d4a1ae51b79", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 28, "deletions": 29, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/6d0d82ce10bfbdb44aab9a2f120b236ebc7e0175/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0d82ce10bfbdb44aab9a2f120b236ebc7e0175/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=6d0d82ce10bfbdb44aab9a2f120b236ebc7e0175", "patch": "@@ -15,7 +15,7 @@\n // https://reviews.llvm.org/D26769\n \n use super::debuginfo::{\n-    DIBuilderRef, DIDescriptor_opaque, DIDescriptor, DIFile, DILexicalBlock, DISubprogram, DIType_opaque,\n+    DIBuilder, DIDescriptor_opaque, DIDescriptor, DIFile, DILexicalBlock, DISubprogram, DIType_opaque,\n     DIType, DIBasicType, DIDerivedType, DICompositeType, DIScope_opaque, DIScope, DIVariable,\n     DIGlobalVariable, DIArray_opaque, DIArray, DISubrange, DITemplateTypeParameter, DIEnumerator,\n     DINameSpace, DIFlags,\n@@ -433,8 +433,7 @@ pub type InlineAsmDiagHandler = unsafe extern \"C\" fn(SMDiagnosticRef, *const c_v\n pub mod debuginfo {\n     use super::Metadata_opaque;\n \n-    extern { pub type DIBuilder_opaque; }\n-    pub type DIBuilderRef = *mut DIBuilder_opaque;\n+    extern { pub type DIBuilder; }\n \n     pub type DIDescriptor_opaque = Metadata_opaque;\n     pub type DIDescriptor = *mut DIDescriptor_opaque;\n@@ -1369,13 +1368,13 @@ extern \"C\" {\n \n     pub fn LLVMRustMetadataAsValue(C: &Context, MD: MetadataRef) -> ValueRef;\n \n-    pub fn LLVMRustDIBuilderCreate(M: &Module) -> DIBuilderRef;\n+    pub fn LLVMRustDIBuilderCreate(M: &Module) -> &DIBuilder;\n \n-    pub fn LLVMRustDIBuilderDispose(Builder: DIBuilderRef);\n+    pub fn LLVMRustDIBuilderDispose(Builder: &DIBuilder);\n \n-    pub fn LLVMRustDIBuilderFinalize(Builder: DIBuilderRef);\n+    pub fn LLVMRustDIBuilderFinalize(Builder: &DIBuilder);\n \n-    pub fn LLVMRustDIBuilderCreateCompileUnit(Builder: DIBuilderRef,\n+    pub fn LLVMRustDIBuilderCreateCompileUnit(Builder: &DIBuilder,\n                                               Lang: c_uint,\n                                               File: DIFile,\n                                               Producer: *const c_char,\n@@ -1385,17 +1384,17 @@ extern \"C\" {\n                                               SplitName: *const c_char)\n                                               -> DIDescriptor;\n \n-    pub fn LLVMRustDIBuilderCreateFile(Builder: DIBuilderRef,\n+    pub fn LLVMRustDIBuilderCreateFile(Builder: &DIBuilder,\n                                        Filename: *const c_char,\n                                        Directory: *const c_char)\n                                        -> DIFile;\n \n-    pub fn LLVMRustDIBuilderCreateSubroutineType(Builder: DIBuilderRef,\n+    pub fn LLVMRustDIBuilderCreateSubroutineType(Builder: &DIBuilder,\n                                                  File: DIFile,\n                                                  ParameterTypes: DIArray)\n                                                  -> DICompositeType;\n \n-    pub fn LLVMRustDIBuilderCreateFunction(Builder: DIBuilderRef,\n+    pub fn LLVMRustDIBuilderCreateFunction(Builder: &DIBuilder,\n                                            Scope: DIDescriptor,\n                                            Name: *const c_char,\n                                            LinkageName: *const c_char,\n@@ -1412,21 +1411,21 @@ extern \"C\" {\n                                            Decl: Option<NonNull<DIDescriptor_opaque>>)\n                                            -> DISubprogram;\n \n-    pub fn LLVMRustDIBuilderCreateBasicType(Builder: DIBuilderRef,\n+    pub fn LLVMRustDIBuilderCreateBasicType(Builder: &DIBuilder,\n                                             Name: *const c_char,\n                                             SizeInBits: u64,\n                                             AlignInBits: u32,\n                                             Encoding: c_uint)\n                                             -> DIBasicType;\n \n-    pub fn LLVMRustDIBuilderCreatePointerType(Builder: DIBuilderRef,\n+    pub fn LLVMRustDIBuilderCreatePointerType(Builder: &DIBuilder,\n                                               PointeeTy: DIType,\n                                               SizeInBits: u64,\n                                               AlignInBits: u32,\n                                               Name: *const c_char)\n                                               -> DIDerivedType;\n \n-    pub fn LLVMRustDIBuilderCreateStructType(Builder: DIBuilderRef,\n+    pub fn LLVMRustDIBuilderCreateStructType(Builder: &DIBuilder,\n                                              Scope: Option<NonNull<DIDescriptor_opaque>>,\n                                              Name: *const c_char,\n                                              File: DIFile,\n@@ -1441,7 +1440,7 @@ extern \"C\" {\n                                              UniqueId: *const c_char)\n                                              -> DICompositeType;\n \n-    pub fn LLVMRustDIBuilderCreateMemberType(Builder: DIBuilderRef,\n+    pub fn LLVMRustDIBuilderCreateMemberType(Builder: &DIBuilder,\n                                              Scope: DIDescriptor,\n                                              Name: *const c_char,\n                                              File: DIFile,\n@@ -1453,19 +1452,19 @@ extern \"C\" {\n                                              Ty: DIType)\n                                              -> DIDerivedType;\n \n-    pub fn LLVMRustDIBuilderCreateLexicalBlock(Builder: DIBuilderRef,\n+    pub fn LLVMRustDIBuilderCreateLexicalBlock(Builder: &DIBuilder,\n                                                Scope: DIScope,\n                                                File: DIFile,\n                                                Line: c_uint,\n                                                Col: c_uint)\n                                                -> DILexicalBlock;\n \n-    pub fn LLVMRustDIBuilderCreateLexicalBlockFile(Builder: DIBuilderRef,\n+    pub fn LLVMRustDIBuilderCreateLexicalBlockFile(Builder: &DIBuilder,\n                                                    Scope: DIScope,\n                                                    File: DIFile)\n                                                    -> DILexicalBlock;\n \n-    pub fn LLVMRustDIBuilderCreateStaticVariable(Builder: DIBuilderRef,\n+    pub fn LLVMRustDIBuilderCreateStaticVariable(Builder: &DIBuilder,\n                                                  Context: Option<NonNull<DIScope_opaque>>,\n                                                  Name: *const c_char,\n                                                  LinkageName: *const c_char,\n@@ -1478,7 +1477,7 @@ extern \"C\" {\n                                                  AlignInBits: u32)\n                                                  -> DIGlobalVariable;\n \n-    pub fn LLVMRustDIBuilderCreateVariable(Builder: DIBuilderRef,\n+    pub fn LLVMRustDIBuilderCreateVariable(Builder: &DIBuilder,\n                                            Tag: c_uint,\n                                            Scope: DIDescriptor,\n                                            Name: *const c_char,\n@@ -1491,31 +1490,31 @@ extern \"C\" {\n                                            AlignInBits: u32)\n                                            -> DIVariable;\n \n-    pub fn LLVMRustDIBuilderCreateArrayType(Builder: DIBuilderRef,\n+    pub fn LLVMRustDIBuilderCreateArrayType(Builder: &DIBuilder,\n                                             Size: u64,\n                                             AlignInBits: u32,\n                                             Ty: DIType,\n                                             Subscripts: DIArray)\n                                             -> DIType;\n \n-    pub fn LLVMRustDIBuilderCreateVectorType(Builder: DIBuilderRef,\n+    pub fn LLVMRustDIBuilderCreateVectorType(Builder: &DIBuilder,\n                                              Size: u64,\n                                              AlignInBits: u32,\n                                              Ty: DIType,\n                                              Subscripts: DIArray)\n                                              -> DIType;\n \n-    pub fn LLVMRustDIBuilderGetOrCreateSubrange(Builder: DIBuilderRef,\n+    pub fn LLVMRustDIBuilderGetOrCreateSubrange(Builder: &DIBuilder,\n                                                 Lo: i64,\n                                                 Count: i64)\n                                                 -> DISubrange;\n \n-    pub fn LLVMRustDIBuilderGetOrCreateArray(Builder: DIBuilderRef,\n+    pub fn LLVMRustDIBuilderGetOrCreateArray(Builder: &DIBuilder,\n                                              Ptr: *const Option<NonNull<DIDescriptor_opaque>>,\n                                              Count: c_uint)\n                                              -> DIArray;\n \n-    pub fn LLVMRustDIBuilderInsertDeclareAtEnd(Builder: DIBuilderRef,\n+    pub fn LLVMRustDIBuilderInsertDeclareAtEnd(Builder: &DIBuilder,\n                                                Val: ValueRef,\n                                                VarInfo: DIVariable,\n                                                AddrOps: *const i64,\n@@ -1524,12 +1523,12 @@ extern \"C\" {\n                                                InsertAtEnd: BasicBlockRef)\n                                                -> ValueRef;\n \n-    pub fn LLVMRustDIBuilderCreateEnumerator(Builder: DIBuilderRef,\n+    pub fn LLVMRustDIBuilderCreateEnumerator(Builder: &DIBuilder,\n                                              Name: *const c_char,\n                                              Val: u64)\n                                              -> DIEnumerator;\n \n-    pub fn LLVMRustDIBuilderCreateEnumerationType(Builder: DIBuilderRef,\n+    pub fn LLVMRustDIBuilderCreateEnumerationType(Builder: &DIBuilder,\n                                                   Scope: DIScope,\n                                                   Name: *const c_char,\n                                                   File: DIFile,\n@@ -1540,7 +1539,7 @@ extern \"C\" {\n                                                   ClassType: DIType)\n                                                   -> DIType;\n \n-    pub fn LLVMRustDIBuilderCreateUnionType(Builder: DIBuilderRef,\n+    pub fn LLVMRustDIBuilderCreateUnionType(Builder: &DIBuilder,\n                                             Scope: DIScope,\n                                             Name: *const c_char,\n                                             File: DIFile,\n@@ -1555,7 +1554,7 @@ extern \"C\" {\n \n     pub fn LLVMSetUnnamedAddr(GlobalVar: ValueRef, UnnamedAddr: Bool);\n \n-    pub fn LLVMRustDIBuilderCreateTemplateTypeParameter(Builder: DIBuilderRef,\n+    pub fn LLVMRustDIBuilderCreateTemplateTypeParameter(Builder: &DIBuilder,\n                                                         Scope: Option<NonNull<DIScope_opaque>>,\n                                                         Name: *const c_char,\n                                                         Ty: DIType,\n@@ -1565,13 +1564,13 @@ extern \"C\" {\n                                                         -> DITemplateTypeParameter;\n \n \n-    pub fn LLVMRustDIBuilderCreateNameSpace(Builder: DIBuilderRef,\n+    pub fn LLVMRustDIBuilderCreateNameSpace(Builder: &DIBuilder,\n                                             Scope: Option<NonNull<DIScope_opaque>>,\n                                             Name: *const c_char,\n                                             File: DIFile,\n                                             LineNo: c_uint)\n                                             -> DINameSpace;\n-    pub fn LLVMRustDICompositeTypeSetTypeArray(Builder: DIBuilderRef,\n+    pub fn LLVMRustDICompositeTypeSetTypeArray(Builder: &DIBuilder,\n                                                CompositeType: DIType,\n                                                TypeArray: DIArray);\n "}]}