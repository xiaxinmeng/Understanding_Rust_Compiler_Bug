{"sha": "08a01825364c429675d28b326e047ce4bc56ff7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4YTAxODI1MzY0YzQyOTY3NWQyOGIzMjZlMDQ3Y2U0YmM1NmZmN2Y=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2018-03-03T15:24:29Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2018-03-08T01:10:01Z"}, "message": "Run rustfmt on `src/librustc_data_structures/graph/mod.rs`.", "tree": {"sha": "99130865bd6f2147e8b3a51a86559ab8fa2fa56d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99130865bd6f2147e8b3a51a86559ab8fa2fa56d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08a01825364c429675d28b326e047ce4bc56ff7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08a01825364c429675d28b326e047ce4bc56ff7f", "html_url": "https://github.com/rust-lang/rust/commit/08a01825364c429675d28b326e047ce4bc56ff7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08a01825364c429675d28b326e047ce4bc56ff7f/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e60d996a00c6151b635994820edeb43ffd12e6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e60d996a00c6151b635994820edeb43ffd12e6c", "html_url": "https://github.com/rust-lang/rust/commit/3e60d996a00c6151b635994820edeb43ffd12e6c"}], "stats": {"total": 53, "additions": 29, "deletions": 24}, "files": [{"sha": "1945b82c03145218b9ac3c3730ff9ac0e4425182", "filename": "src/librustc_data_structures/graph/mod.rs", "status": "modified", "additions": 29, "deletions": 24, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/08a01825364c429675d28b326e047ce4bc56ff7f/src%2Flibrustc_data_structures%2Fgraph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a01825364c429675d28b326e047ce4bc56ff7f/src%2Flibrustc_data_structures%2Fgraph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fmod.rs?ref=08a01825364c429675d28b326e047ce4bc56ff7f", "patch": "@@ -210,16 +210,16 @@ impl<N: Debug, E: Debug> Graph<N, E> {\n             .map(|(idx, e)| (EdgeIndex(idx), e))\n     }\n \n-    pub fn each_node<'a>(&'a self, mut f: impl FnMut(NodeIndex, &'a Node<N>) -> bool) -> bool\n-    {\n+    pub fn each_node<'a>(&'a self, mut f: impl FnMut(NodeIndex, &'a Node<N>) -> bool) -> bool {\n         //! Iterates over all edges defined in the graph.\n-        self.enumerated_nodes().all(|(node_idx, node)| f(node_idx, node))\n+        self.enumerated_nodes()\n+            .all(|(node_idx, node)| f(node_idx, node))\n     }\n \n-    pub fn each_edge<'a>(&'a self, mut f: impl FnMut(EdgeIndex, &'a Edge<E>) -> bool) -> bool\n-    {\n+    pub fn each_edge<'a>(&'a self, mut f: impl FnMut(EdgeIndex, &'a Edge<E>) -> bool) -> bool {\n         //! Iterates over all edges defined in the graph\n-        self.enumerated_edges().all(|(edge_idx, edge)| f(edge_idx, edge))\n+        self.enumerated_edges()\n+            .all(|(edge_idx, edge)| f(edge_idx, edge))\n     }\n \n     pub fn outgoing_edges(&self, source: NodeIndex) -> AdjacentEdges<N, E> {\n@@ -253,18 +253,19 @@ impl<N: Debug, E: Debug> Graph<N, E> {\n         self.incoming_edges(target).sources()\n     }\n \n-    pub fn depth_traverse<'a>(&'a self,\n-                              start: NodeIndex,\n-                              direction: Direction)\n-                              -> DepthFirstTraversal<'a, N, E> {\n+    pub fn depth_traverse<'a>(\n+        &'a self,\n+        start: NodeIndex,\n+        direction: Direction,\n+    ) -> DepthFirstTraversal<'a, N, E> {\n         DepthFirstTraversal::with_start_node(self, start, direction)\n     }\n \n-    pub fn nodes_in_postorder<'a>(&'a self,\n-                                  direction: Direction,\n-                                  entry_node: NodeIndex)\n-                                  -> Vec<NodeIndex>\n-    {\n+    pub fn nodes_in_postorder<'a>(\n+        &'a self,\n+        direction: Direction,\n+        entry_node: NodeIndex,\n+    ) -> Vec<NodeIndex> {\n         let mut visited = BitVector::new(self.len_nodes());\n         let mut stack = vec![];\n         let mut result = Vec::with_capacity(self.len_nodes());\n@@ -274,7 +275,8 @@ impl<N: Debug, E: Debug> Graph<N, E> {\n             }\n         };\n \n-        for node in Some(entry_node).into_iter()\n+        for node in Some(entry_node)\n+            .into_iter()\n             .chain(self.enumerated_nodes().map(|(node, _)| node))\n         {\n             push_node(&mut stack, node);\n@@ -300,8 +302,9 @@ impl<N: Debug, E: Debug> Graph<N, E> {\n // # Iterators\n \n pub struct AdjacentEdges<'g, N, E>\n-    where N: 'g,\n-          E: 'g\n+where\n+    N: 'g,\n+    E: 'g,\n {\n     graph: &'g Graph<N, E>,\n     direction: Direction,\n@@ -334,8 +337,9 @@ impl<'g, N: Debug, E: Debug> Iterator for AdjacentEdges<'g, N, E> {\n }\n \n pub struct DepthFirstTraversal<'g, N, E>\n-    where N: 'g,\n-          E: 'g\n+where\n+    N: 'g,\n+    E: 'g,\n {\n     graph: &'g Graph<N, E>,\n     stack: Vec<NodeIndex>,\n@@ -344,10 +348,11 @@ pub struct DepthFirstTraversal<'g, N, E>\n }\n \n impl<'g, N: Debug, E: Debug> DepthFirstTraversal<'g, N, E> {\n-    pub fn with_start_node(graph: &'g Graph<N, E>,\n-                           start_node: NodeIndex,\n-                           direction: Direction)\n-                           -> Self {\n+    pub fn with_start_node(\n+        graph: &'g Graph<N, E>,\n+        start_node: NodeIndex,\n+        direction: Direction,\n+    ) -> Self {\n         let mut visited = BitVector::new(graph.len_nodes());\n         visited.insert(start_node.node_id());\n         DepthFirstTraversal {"}]}