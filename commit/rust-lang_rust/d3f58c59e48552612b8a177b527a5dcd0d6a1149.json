{"sha": "d3f58c59e48552612b8a177b527a5dcd0d6a1149", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzZjU4YzU5ZTQ4NTUyNjEyYjhhMTc3YjUyN2E1ZGNkMGQ2YTExNDk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-19T00:38:25Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:23Z"}, "message": "librustc: De-`@mut` the `monomorphizing` field in `CrateContext`", "tree": {"sha": "0bf0567b2d17b592dc690c1a513103016e3023dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bf0567b2d17b592dc690c1a513103016e3023dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3f58c59e48552612b8a177b527a5dcd0d6a1149", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3f58c59e48552612b8a177b527a5dcd0d6a1149", "html_url": "https://github.com/rust-lang/rust/commit/d3f58c59e48552612b8a177b527a5dcd0d6a1149", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3f58c59e48552612b8a177b527a5dcd0d6a1149/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5218ba6ad05f0c5a31575b2fe59949b3dc25129", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5218ba6ad05f0c5a31575b2fe59949b3dc25129", "html_url": "https://github.com/rust-lang/rust/commit/b5218ba6ad05f0c5a31575b2fe59949b3dc25129"}], "stats": {"total": 35, "additions": 22, "deletions": 13}, "files": [{"sha": "9a456e2f25f175d9ecfd6e74ff563e334a1eb892", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3f58c59e48552612b8a177b527a5dcd0d6a1149/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f58c59e48552612b8a177b527a5dcd0d6a1149/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=d3f58c59e48552612b8a177b527a5dcd0d6a1149", "patch": "@@ -70,7 +70,7 @@ pub struct CrateContext {\n      non_inlineable_statics: HashSet<ast::NodeId>,\n      // Cache instances of monomorphized functions\n      monomorphized: RefCell<HashMap<mono_id, ValueRef>>,\n-     monomorphizing: HashMap<ast::DefId, uint>,\n+     monomorphizing: RefCell<HashMap<ast::DefId, uint>>,\n      // Cache generated vtables\n      vtables: HashMap<(ty::t, mono_id), ValueRef>,\n      // Cache of constant strings,\n@@ -201,7 +201,7 @@ impl CrateContext {\n                   external_srcs: HashMap::new(),\n                   non_inlineable_statics: HashSet::new(),\n                   monomorphized: RefCell::new(HashMap::new()),\n-                  monomorphizing: HashMap::new(),\n+                  monomorphizing: RefCell::new(HashMap::new()),\n                   vtables: HashMap::new(),\n                   const_cstr_cache: HashMap::new(),\n                   const_globals: HashMap::new(),"}, {"sha": "75a9ee298a50b3b02cbe14a1b0ac101c5afeb3b2", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d3f58c59e48552612b8a177b527a5dcd0d6a1149/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f58c59e48552612b8a177b527a5dcd0d6a1149/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=d3f58c59e48552612b8a177b527a5dcd0d6a1149", "patch": "@@ -184,17 +184,22 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n \n     ccx.stats.n_monos += 1;\n \n-    let depth = match ccx.monomorphizing.find(&fn_id) {\n-        Some(&d) => d, None => 0\n-    };\n-    // Random cut-off -- code that needs to instantiate the same function\n-    // recursively more than thirty times can probably safely be assumed to be\n-    // causing an infinite expansion.\n-    if depth > 30 {\n-        ccx.sess.span_fatal(\n-            span, \"overly deep expansion of inlined function\");\n+    let depth;\n+    {\n+        let mut monomorphizing = ccx.monomorphizing.borrow_mut();\n+        depth = match monomorphizing.get().find(&fn_id) {\n+            Some(&d) => d, None => 0\n+        };\n+\n+        // Random cut-off -- code that needs to instantiate the same function\n+        // recursively more than thirty times can probably safely be assumed\n+        // to be causing an infinite expansion.\n+        if depth > 30 {\n+            ccx.sess.span_fatal(\n+                span, \"overly deep expansion of inlined function\");\n+        }\n+        monomorphizing.get().insert(fn_id, depth + 1);\n     }\n-    ccx.monomorphizing.insert(fn_id, depth + 1);\n \n     let (_, elt) = gensym_name(ccx.sess.str_of(name));\n     let mut pt = (*pt).clone();\n@@ -292,7 +297,11 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n         ccx.tcx.sess.bug(format!(\"Can't monomorphize a {:?}\", map_node))\n       }\n     };\n-    ccx.monomorphizing.insert(fn_id, depth);\n+\n+    {\n+        let mut monomorphizing = ccx.monomorphizing.borrow_mut();\n+        monomorphizing.get().insert(fn_id, depth);\n+    }\n \n     debug!(\"leaving monomorphic fn {}\", ty::item_path_str(ccx.tcx, fn_id));\n     (lldecl, must_cast)"}]}