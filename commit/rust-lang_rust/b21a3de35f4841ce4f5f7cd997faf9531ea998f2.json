{"sha": "b21a3de35f4841ce4f5f7cd997faf9531ea998f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMWEzZGUzNWY0ODQxY2U0ZjVmN2NkOTk3ZmFmOTUzMWVhOTk4ZjI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2020-08-09T01:09:40Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2020-08-09T01:09:40Z"}, "message": "Don't try to use wasm intrinsics on vectors\n\nThis commit fixes an issue with #74695 where the fptosi and fptoui\nspecializations on wasm were accidentally used on vector types by the\n`simd_cast` intrinsic. This issue showed up as broken CI for the stdsimd\ncrate. Here this commit simply skips the specialization on vector kinds\nflowing into `fpto{s,u}i`.", "tree": {"sha": "8b6ad83515f93895ee421d4636239aad5901c786", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b6ad83515f93895ee421d4636239aad5901c786"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b21a3de35f4841ce4f5f7cd997faf9531ea998f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b21a3de35f4841ce4f5f7cd997faf9531ea998f2", "html_url": "https://github.com/rust-lang/rust/commit/b21a3de35f4841ce4f5f7cd997faf9531ea998f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b21a3de35f4841ce4f5f7cd997faf9531ea998f2/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bac92bba14f3b260b337d2a51c77c0780456e65", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bac92bba14f3b260b337d2a51c77c0780456e65", "html_url": "https://github.com/rust-lang/rust/commit/2bac92bba14f3b260b337d2a51c77c0780456e65"}], "stats": {"total": 55, "additions": 31, "deletions": 24}, "files": [{"sha": "a0f4311b33a26c410289e08f32ec1e1cb63f230b", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 31, "deletions": 24, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/b21a3de35f4841ce4f5f7cd997faf9531ea998f2/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a3de35f4841ce4f5f7cd997faf9531ea998f2/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=b21a3de35f4841ce4f5f7cd997faf9531ea998f2", "patch": "@@ -728,20 +728,25 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         // codegen. Note that this has a semantic difference in that the\n         // intrinsic can trap whereas `fptoui` never traps. That difference,\n         // however, is handled by `fptosui_may_trap` above.\n+        //\n+        // Note that we skip the wasm intrinsics for vector types where `fptoui`\n+        // must be used instead.\n         if self.wasm_and_missing_nontrapping_fptoint() {\n             let src_ty = self.cx.val_ty(val);\n-            let float_width = self.cx.float_width(src_ty);\n-            let int_width = self.cx.int_width(dest_ty);\n-            let name = match (int_width, float_width) {\n-                (32, 32) => Some(\"llvm.wasm.trunc.unsigned.i32.f32\"),\n-                (32, 64) => Some(\"llvm.wasm.trunc.unsigned.i32.f64\"),\n-                (64, 32) => Some(\"llvm.wasm.trunc.unsigned.i64.f32\"),\n-                (64, 64) => Some(\"llvm.wasm.trunc.unsigned.i64.f64\"),\n-                _ => None,\n-            };\n-            if let Some(name) = name {\n-                let intrinsic = self.get_intrinsic(name);\n-                return self.call(intrinsic, &[val], None);\n+            if self.cx.type_kind(src_ty) != TypeKind::Vector {\n+                let float_width = self.cx.float_width(src_ty);\n+                let int_width = self.cx.int_width(dest_ty);\n+                let name = match (int_width, float_width) {\n+                    (32, 32) => Some(\"llvm.wasm.trunc.unsigned.i32.f32\"),\n+                    (32, 64) => Some(\"llvm.wasm.trunc.unsigned.i32.f64\"),\n+                    (64, 32) => Some(\"llvm.wasm.trunc.unsigned.i64.f32\"),\n+                    (64, 64) => Some(\"llvm.wasm.trunc.unsigned.i64.f64\"),\n+                    _ => None,\n+                };\n+                if let Some(name) = name {\n+                    let intrinsic = self.get_intrinsic(name);\n+                    return self.call(intrinsic, &[val], None);\n+                }\n             }\n         }\n         unsafe { llvm::LLVMBuildFPToUI(self.llbuilder, val, dest_ty, UNNAMED) }\n@@ -750,18 +755,20 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     fn fptosi(&mut self, val: &'ll Value, dest_ty: &'ll Type) -> &'ll Value {\n         if self.wasm_and_missing_nontrapping_fptoint() {\n             let src_ty = self.cx.val_ty(val);\n-            let float_width = self.cx.float_width(src_ty);\n-            let int_width = self.cx.int_width(dest_ty);\n-            let name = match (int_width, float_width) {\n-                (32, 32) => Some(\"llvm.wasm.trunc.signed.i32.f32\"),\n-                (32, 64) => Some(\"llvm.wasm.trunc.signed.i32.f64\"),\n-                (64, 32) => Some(\"llvm.wasm.trunc.signed.i64.f32\"),\n-                (64, 64) => Some(\"llvm.wasm.trunc.signed.i64.f64\"),\n-                _ => None,\n-            };\n-            if let Some(name) = name {\n-                let intrinsic = self.get_intrinsic(name);\n-                return self.call(intrinsic, &[val], None);\n+            if self.cx.type_kind(src_ty) != TypeKind::Vector {\n+                let float_width = self.cx.float_width(src_ty);\n+                let int_width = self.cx.int_width(dest_ty);\n+                let name = match (int_width, float_width) {\n+                    (32, 32) => Some(\"llvm.wasm.trunc.signed.i32.f32\"),\n+                    (32, 64) => Some(\"llvm.wasm.trunc.signed.i32.f64\"),\n+                    (64, 32) => Some(\"llvm.wasm.trunc.signed.i64.f32\"),\n+                    (64, 64) => Some(\"llvm.wasm.trunc.signed.i64.f64\"),\n+                    _ => None,\n+                };\n+                if let Some(name) = name {\n+                    let intrinsic = self.get_intrinsic(name);\n+                    return self.call(intrinsic, &[val], None);\n+                }\n             }\n         }\n         unsafe { llvm::LLVMBuildFPToSI(self.llbuilder, val, dest_ty, UNNAMED) }"}]}