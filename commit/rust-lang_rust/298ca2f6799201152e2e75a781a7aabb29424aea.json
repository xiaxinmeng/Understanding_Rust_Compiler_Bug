{"sha": "298ca2f6799201152e2e75a781a7aabb29424aea", "node_id": "C_kwDOAAsO6NoAKDI5OGNhMmY2Nzk5MjAxMTUyZTJlNzVhNzgxYTdhYWJiMjk0MjRhZWE", "commit": {"author": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2021-11-04T17:56:07Z"}, "committer": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-01-18T22:25:25Z"}, "message": "Basic loop support", "tree": {"sha": "572c426161585edda16d6f1486d843820d98122d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/572c426161585edda16d6f1486d843820d98122d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/298ca2f6799201152e2e75a781a7aabb29424aea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/298ca2f6799201152e2e75a781a7aabb29424aea", "html_url": "https://github.com/rust-lang/rust/commit/298ca2f6799201152e2e75a781a7aabb29424aea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/298ca2f6799201152e2e75a781a7aabb29424aea/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96117701f94a2c08235a87fce9d362ca26997017", "url": "https://api.github.com/repos/rust-lang/rust/commits/96117701f94a2c08235a87fce9d362ca26997017", "html_url": "https://github.com/rust-lang/rust/commit/96117701f94a2c08235a87fce9d362ca26997017"}], "stats": {"total": 38, "additions": 31, "deletions": 7}, "files": [{"sha": "d7ad84684d1f1fc286cc1763f8480995da52f867", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/298ca2f6799201152e2e75a781a7aabb29424aea/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298ca2f6799201152e2e75a781a7aabb29424aea/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=298ca2f6799201152e2e75a781a7aabb29424aea", "patch": "@@ -726,15 +726,19 @@ impl DropRangeVisitor<'tcx> {\n         })\n     }\n \n-    fn merge_drop_ranges(&mut self, drops: HirIdMap<DropRange>) {\n+    fn merge_drop_ranges_at(&mut self, drops: HirIdMap<DropRange>, join_point: usize) {\n         drops.into_iter().for_each(|(k, v)| {\n             if !self.drop_ranges.contains_key(&k) {\n                 self.drop_ranges.insert(k, DropRange { events: vec![] });\n             }\n-            self.drop_ranges.get_mut(&k).unwrap().merge_with(&v, self.expr_count);\n+            self.drop_ranges.get_mut(&k).unwrap().merge_with(&v, join_point);\n         });\n     }\n \n+    fn merge_drop_ranges(&mut self, drops: HirIdMap<DropRange>) {\n+        self.merge_drop_ranges_at(drops, self.expr_count);\n+    }\n+\n     /// ExprUseVisitor's consume callback doesn't go deep enough for our purposes in all\n     /// expressions. This method consumes a little deeper into the expression when needed.\n     fn consume_expr(&mut self, expr: &hir::Expr<'_>) {\n@@ -893,6 +897,17 @@ impl<'tcx> Visitor<'tcx> for DropRangeVisitor<'tcx> {\n \n                 reinit = Some(lhs);\n             }\n+            ExprKind::Loop(body, ..) => {\n+                let body_drop_ranges = self.fork_drop_ranges();\n+                let old_drop_ranges = self.swap_drop_ranges(body_drop_ranges);\n+\n+                let join_point = self.expr_count;\n+\n+                self.visit_block(body);\n+\n+                let body_drop_ranges = self.swap_drop_ranges(old_drop_ranges);\n+                self.merge_drop_ranges_at(body_drop_ranges, join_point);\n+            }\n             _ => intravisit::walk_expr(self, expr),\n         }\n \n@@ -1007,11 +1022,20 @@ impl DropRange {\n     ///\n     /// After merging, the value will be dead at the end of the range only if it was dead\n     /// at the end of both self and other.\n-    ///\n-    /// Assumes that all locations in each range are less than joinpoint\n     fn merge_with(&mut self, other: &DropRange, join_point: usize) {\n-        let mut events: Vec<_> =\n-            self.events.iter().merge(other.events.iter()).dedup().cloned().collect();\n+        let join_event = if self.is_dropped_at(join_point) && other.is_dropped_at(join_point) {\n+            Event::Drop(join_point)\n+        } else {\n+            Event::Reinit(join_point)\n+        };\n+        let mut events: Vec<_> = self\n+            .events\n+            .iter()\n+            .merge([join_event].iter())\n+            .merge(other.events.iter())\n+            .dedup()\n+            .cloned()\n+            .collect();\n \n         events.push(if self.is_dropped_at(join_point) && other.is_dropped_at(join_point) {\n             Event::Drop(join_point)"}, {"sha": "6587e54df60831b58c164c874da10ff02c54b819", "filename": "src/test/ui/generator/drop-control-flow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298ca2f6799201152e2e75a781a7aabb29424aea/src%2Ftest%2Fui%2Fgenerator%2Fdrop-control-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298ca2f6799201152e2e75a781a7aabb29424aea/src%2Ftest%2Fui%2Fgenerator%2Fdrop-control-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdrop-control-flow.rs?ref=298ca2f6799201152e2e75a781a7aabb29424aea", "patch": "@@ -77,5 +77,5 @@ fn main() {\n     one_armed_if(true);\n     if_let(Some(41));\n     reinit();\n-    // loop_uninit();\n+    loop_uninit();\n }"}]}