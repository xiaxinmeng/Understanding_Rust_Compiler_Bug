{"sha": "03f198fcee46b49a69845784c313433496f7cf0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzZjE5OGZjZWU0NmI0OWE2OTg0NTc4NGMzMTM0MzM0OTZmN2NmMGU=", "commit": {"author": {"name": "bobtwinkles", "email": "srkoser+github@gmail.com", "date": "2018-03-06T08:37:21Z"}, "committer": {"name": "bobtwinkles", "email": "srkoser+github@gmail.com", "date": "2018-03-09T18:54:26Z"}, "message": "Fix tests after two-phase borrow rewrite", "tree": {"sha": "4d9418f3d6d42c8a6475338dd155716b9cd0a2ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d9418f3d6d42c8a6475338dd155716b9cd0a2ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03f198fcee46b49a69845784c313433496f7cf0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03f198fcee46b49a69845784c313433496f7cf0e", "html_url": "https://github.com/rust-lang/rust/commit/03f198fcee46b49a69845784c313433496f7cf0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03f198fcee46b49a69845784c313433496f7cf0e/comments", "author": {"login": "bobtwinkles", "id": 1514748, "node_id": "MDQ6VXNlcjE1MTQ3NDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1514748?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobtwinkles", "html_url": "https://github.com/bobtwinkles", "followers_url": "https://api.github.com/users/bobtwinkles/followers", "following_url": "https://api.github.com/users/bobtwinkles/following{/other_user}", "gists_url": "https://api.github.com/users/bobtwinkles/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobtwinkles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobtwinkles/subscriptions", "organizations_url": "https://api.github.com/users/bobtwinkles/orgs", "repos_url": "https://api.github.com/users/bobtwinkles/repos", "events_url": "https://api.github.com/users/bobtwinkles/events{/privacy}", "received_events_url": "https://api.github.com/users/bobtwinkles/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bobtwinkles", "id": 1514748, "node_id": "MDQ6VXNlcjE1MTQ3NDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1514748?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobtwinkles", "html_url": "https://github.com/bobtwinkles", "followers_url": "https://api.github.com/users/bobtwinkles/followers", "following_url": "https://api.github.com/users/bobtwinkles/following{/other_user}", "gists_url": "https://api.github.com/users/bobtwinkles/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobtwinkles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobtwinkles/subscriptions", "organizations_url": "https://api.github.com/users/bobtwinkles/orgs", "repos_url": "https://api.github.com/users/bobtwinkles/repos", "events_url": "https://api.github.com/users/bobtwinkles/events{/privacy}", "received_events_url": "https://api.github.com/users/bobtwinkles/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4e377f6e8dfb59ecfba014543508fedb61a9f4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4e377f6e8dfb59ecfba014543508fedb61a9f4e", "html_url": "https://github.com/rust-lang/rust/commit/e4e377f6e8dfb59ecfba014543508fedb61a9f4e"}], "stats": {"total": 47, "additions": 14, "deletions": 33}, "files": [{"sha": "07585c08f6a295d068f36ca5b7127ac91821c8e3", "filename": "src/librustc_mir/dataflow/graphviz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03f198fcee46b49a69845784c313433496f7cf0e/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f198fcee46b49a69845784c313433496f7cf0e/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs?ref=03f198fcee46b49a69845784c313433496f7cf0e", "patch": "@@ -111,7 +111,7 @@ impl<'a, 'tcx, MWF, P> dot::Labeller<'a> for Graph<'a, 'tcx, MWF, P>\n         // |         |                                  |                  | bb11[0]: active  |\n         // +---------+----------------------------------+------------------+------------------+\n         // | [00-00] | _7 = const Foo::twiddle(move _8) | [0c-00]          | [f3-0f]          |\n-        // +---------+----------------------------------+------------------+------------------+ \n+        // +---------+----------------------------------+------------------+------------------+\n         let mut v = Vec::new();\n         self.node_label_internal(n, &mut v, *n, self.mbcx.mir()).unwrap();\n         dot::LabelText::html(String::from_utf8(v).unwrap())\n@@ -140,7 +140,7 @@ where MWF: MirWithFlowState<'tcx>,\n                                          block: BasicBlock,\n                                          mir: &Mir) -> io::Result<()> {\n         // Header rows\n-        const HDRS: [&'static str; 4] = [\"ENTRY\", \"MIR\", \"GEN\", \"KILL\"];\n+        const HDRS: [&'static str; 4] = [\"ENTRY\", \"MIR\", \"BLOCK GENS\", \"BLOCK KILLS\"];\n         const HDR_FMT: &'static str = \"bgcolor=\\\"grey\\\"\";\n         write!(w, \"<table><tr><td rowspan=\\\"{}\\\">\", HDRS.len())?;\n         write!(w, \"{:?}\", block.index())?;"}, {"sha": "b7c95da09be972b2f1ac652a0aa30f19e09b81d0", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/03f198fcee46b49a69845784c313433496f7cf0e/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f198fcee46b49a69845784c313433496f7cf0e/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=03f198fcee46b49a69845784c313433496f7cf0e", "patch": "@@ -272,17 +272,6 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n             }\n         }\n \n-        /// Represents what kind of usage we've seen.\n-        enum PlaceUsageType {\n-            /// No usage seen\n-            None,\n-            /// Has been seen as the argument to a StorageDead statement. This is required to\n-            /// gracefully handle cases where user code has an unneeded \n-            StorageKilled,\n-            /// Has been used in borrow-activating context\n-            BorrowActivateUsage\n-        }\n-\n         /// A MIR visitor that determines if a specific place is used in a two-phase activating\n         /// manner in a given chunk of MIR.\n         struct ContainsUseOfPlace<'b, 'tcx: 'b> {\n@@ -404,7 +393,8 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n                     let stmt = &block_data.statements[location.statement_index];\n                     if let mir::StatementKind::EndRegion(region_scope) = stmt.kind {\n                         if &ReScope(region_scope) == region {\n-                            // We encountered an EndRegion statement that terminates the provided region\n+                            // We encountered an EndRegion statement that terminates the provided\n+                            // region\n                             return true;\n                         }\n                     }\n@@ -430,7 +420,7 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n             /// See\n             ///   - https://github.com/rust-lang/rust/issues/48431\n             /// for detailed design notes.\n-            /// See the TODO in the body of the function for notes on extending support to more\n+            /// See the FIXME in the body of the function for notes on extending support to more\n             /// general two-phased borrows.\n             fn compute_activation_location(&self,\n                                            start_location: Location,\n@@ -473,7 +463,7 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n                     }\n \n                     if self.location_contains_use(curr_loc, assigned_place) {\n-                        // TODO: Handle this case a little more gracefully. Perhaps collect\n+                        // FIXME: Handle this case a little more gracefully. Perhaps collect\n                         // all uses in a vector, and find the point in the CFG that dominates\n                         // all of them?\n                         // Right now this is sufficient though since there should only be exactly\n@@ -596,7 +586,9 @@ impl<'a, 'gcx, 'tcx> BitDenotation for Borrows<'a, 'gcx, 'tcx> {\n         // `_sets`.\n     }\n \n-    fn before_statement_effect(&self, sets: &mut BlockSets<ReserveOrActivateIndex>, location: Location) {\n+    fn before_statement_effect(&self,\n+                               sets: &mut BlockSets<ReserveOrActivateIndex>,\n+                               location: Location) {\n         debug!(\"Borrows::before_statement_effect sets: {:?} location: {:?}\", sets, location);\n         self.kill_loans_out_of_scope_at_location(sets, location);\n     }\n@@ -662,7 +654,6 @@ impl<'a, 'gcx, 'tcx> BitDenotation for Borrows<'a, 'gcx, 'tcx> {\n \n                     // Issue #46746: Two-phase borrows handles\n                     // stmts of form `Tmp = &mut Borrow` ...\n-                    // XXX bob_twinkles experiment with removing this\n                     match lhs {\n                         Place::Local(..) | Place::Static(..) => {} // okay\n                         Place::Projection(..) => {\n@@ -704,7 +695,9 @@ impl<'a, 'gcx, 'tcx> BitDenotation for Borrows<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn before_terminator_effect(&self, sets: &mut BlockSets<ReserveOrActivateIndex>, location: Location) {\n+    fn before_terminator_effect(&self,\n+                                sets: &mut BlockSets<ReserveOrActivateIndex>,\n+                                location: Location) {\n         debug!(\"Borrows::before_terminator_effect sets: {:?} location: {:?}\", sets, location);\n         self.kill_loans_out_of_scope_at_location(sets, location);\n     }"}, {"sha": "da9187f43ae9c37f5c2129e9d32ae25264cc4a8b", "filename": "src/test/compile-fail/nll/region-ends-after-if-condition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03f198fcee46b49a69845784c313433496f7cf0e/src%2Ftest%2Fcompile-fail%2Fnll%2Fregion-ends-after-if-condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f198fcee46b49a69845784c313433496f7cf0e/src%2Ftest%2Fcompile-fail%2Fnll%2Fregion-ends-after-if-condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnll%2Fregion-ends-after-if-condition.rs?ref=03f198fcee46b49a69845784c313433496f7cf0e", "patch": "@@ -12,7 +12,7 @@\n // in the type of `p` includes the points after `&v[0]` up to (but not\n // including) the call to `use_x`. The `else` branch is not included.\n \n-// compile-flags:-Zborrowck=compare -Znll\n+// compile-flags:-Zborrowck=compare -Znll -Ztwo-phase-borrows\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "a906d193d995e3af7305a887524d7e43da7228b9", "filename": "src/test/ui/issue-45157.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03f198fcee46b49a69845784c313433496f7cf0e/src%2Ftest%2Fui%2Fissue-45157.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f198fcee46b49a69845784c313433496f7cf0e/src%2Ftest%2Fui%2Fissue-45157.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45157.rs?ref=03f198fcee46b49a69845784c313433496f7cf0e", "patch": "@@ -37,7 +37,6 @@ fn main() {\n         let nref = &u.z.c;\n         //~^ ERROR cannot borrow `u.z.c` as immutable because it is also borrowed as mutable [E0502]\n         println!(\"{} {}\", mref, nref)\n-        //~^ ERROR cannot borrow `u.s.a` as mutable because it is also borrowed as immutable [E0502]\n     }\n }\n "}, {"sha": "07102f68633cf44d26af0d256f6d9f753ce9b2b5", "filename": "src/test/ui/issue-45157.stderr", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/03f198fcee46b49a69845784c313433496f7cf0e/src%2Ftest%2Fui%2Fissue-45157.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03f198fcee46b49a69845784c313433496f7cf0e/src%2Ftest%2Fui%2Fissue-45157.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45157.stderr?ref=03f198fcee46b49a69845784c313433496f7cf0e", "patch": "@@ -10,17 +10,6 @@ LL |         //~^ ERROR cannot borrow `u.z.c` as immutable because it is also bo\n LL |         println!(\"{} {}\", mref, nref)\n    |                           ---- borrow later used here\n \n-error[E0502]: cannot borrow `u.s.a` as mutable because it is also borrowed as immutable\n-  --> $DIR/issue-45157.rs:39:27\n-   |\n-LL |         let nref = &u.z.c;\n-   |                    ------ immutable borrow occurs here\n-LL |         //~^ ERROR cannot borrow `u.z.c` as immutable because it is also borrowed as mutable [E0502]\n-LL |         println!(\"{} {}\", mref, nref)\n-   |                           ^^^^  ---- borrow later used here\n-   |                           |\n-   |                           mutable borrow occurs here\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n If you want more information on this error, try using \"rustc --explain E0502\""}]}