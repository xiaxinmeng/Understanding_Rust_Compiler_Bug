{"sha": "8a9df5aa38f63c9864dc560baadec95575188997", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhOWRmNWFhMzhmNjNjOTg2NGRjNTYwYmFhZGVjOTU1NzUxODg5OTc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-07T18:31:57Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-07T20:22:42Z"}, "message": "make it illegal to implicitly capture mutable variables\n\nthis is the final part of #1273", "tree": {"sha": "6161c200d9bd6a494d3a2827699e4e74439b5bf9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6161c200d9bd6a494d3a2827699e4e74439b5bf9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a9df5aa38f63c9864dc560baadec95575188997", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a9df5aa38f63c9864dc560baadec95575188997", "html_url": "https://github.com/rust-lang/rust/commit/8a9df5aa38f63c9864dc560baadec95575188997", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a9df5aa38f63c9864dc560baadec95575188997/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d709ed2542d25a9dfcda40492412bb99155c8dea", "url": "https://api.github.com/repos/rust-lang/rust/commits/d709ed2542d25a9dfcda40492412bb99155c8dea", "html_url": "https://github.com/rust-lang/rust/commit/d709ed2542d25a9dfcda40492412bb99155c8dea"}], "stats": {"total": 382, "additions": 259, "deletions": 123}, "files": [{"sha": "5c95a26f9a04351fc4bf565f5e0d9bb3116a4b01", "filename": "src/librustsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a9df5aa38f63c9864dc560baadec95575188997/src%2Flibrustsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9df5aa38f63c9864dc560baadec95575188997/src%2Flibrustsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fast.rs?ref=8a9df5aa38f63c9864dc560baadec95575188997", "patch": "@@ -362,7 +362,7 @@ type capture_item = {\n };\n \n #[auto_serialize]\n-type capture_clause = [capture_item];\n+type capture_clause = @[capture_item];\n \n /*\n // Says whether this is a block the user marked as"}, {"sha": "ec6dc73471190bbb2433bcf84e4e620eb4c0be1b", "filename": "src/librustsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8a9df5aa38f63c9864dc560baadec95575188997/src%2Flibrustsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9df5aa38f63c9864dc560baadec95575188997/src%2Flibrustsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Fparser.rs?ref=8a9df5aa38f63c9864dc560baadec95575188997", "patch": "@@ -1187,7 +1187,8 @@ fn parse_fn_expr(p: parser, proto: ast::proto) -> @ast::expr {\n \n     let body = parse_block(p);\n     ret mk_expr(p, lo, body.span.hi,\n-                ast::expr_fn(proto, decl, body, capture_clause + cc_old));\n+                ast::expr_fn(proto, decl, body,\n+                             @(*capture_clause + cc_old)));\n }\n \n fn parse_fn_block_expr(p: parser) -> @ast::expr {\n@@ -1679,7 +1680,7 @@ fn parse_ty_params(p: parser) -> [ast::ty_param] {\n }\n \n // FIXME Remove after snapshot\n-fn parse_old_skool_capture_clause(p: parser) -> ast::capture_clause {\n+fn parse_old_skool_capture_clause(p: parser) -> [ast::capture_item] {\n     fn expect_opt_trailing_semi(p: parser) {\n         if !eat(p, token::SEMI) {\n             if p.token != token::RBRACKET {\n@@ -1739,7 +1740,7 @@ fn parse_fn_decl(p: parser, purity: ast::purity,\n                   parse_arg_fn, p).node;\n \n     let inputs = either::lefts(args_or_capture_items);\n-    let capture_clause = either::rights(args_or_capture_items);\n+    let capture_clause = @either::rights(args_or_capture_items);\n \n     // Use the args list to translate each bound variable\n     // mentioned in a constraint to an arg index.\n@@ -1778,7 +1779,7 @@ fn parse_fn_block_decl(p: parser) -> (ast::fn_decl, ast::capture_clause) {\n           purity: ast::impure_fn,\n           cf: ast::return_val,\n           constraints: []},\n-         either::rights(inputs_captures));\n+         @either::rights(inputs_captures));\n }\n \n fn parse_fn_header(p: parser) -> {ident: ast::ident, tps: [ast::ty_param]} {"}, {"sha": "beb6c32bcbe77e139eb8ecfce8b44fef464926de", "filename": "src/librustsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a9df5aa38f63c9864dc560baadec95575188997/src%2Flibrustsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9df5aa38f63c9864dc560baadec95575188997/src%2Flibrustsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fprint%2Fpprust.rs?ref=8a9df5aa38f63c9864dc560baadec95575188997", "patch": "@@ -1018,7 +1018,7 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n         // head-box, will be closed by print-block at start\n         ibox(s, 0u);\n         word(s.s, proto_to_str(proto));\n-        print_fn_args_and_ret(s, decl, cap_clause);\n+        print_fn_args_and_ret(s, decl, *cap_clause);\n         space(s.s);\n         print_block(s, body);\n       }\n@@ -1028,7 +1028,7 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n         // head-box, will be closed by print-block at start\n         ibox(s, 0u);\n         word(s.s, \"{\");\n-        print_fn_block_args(s, decl, cap_clause);\n+        print_fn_block_args(s, decl, *cap_clause);\n         print_possibly_embedded_block(s, body, block_block_fn, indent_unit);\n       }\n       ast::expr_loop_body(body) {"}, {"sha": "2468ab68aa3593896dabc231942e3ffa7014a3ce", "filename": "src/librustsyntax/visit.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8a9df5aa38f63c9864dc560baadec95575188997/src%2Flibrustsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9df5aa38f63c9864dc560baadec95575188997/src%2Flibrustsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fvisit.rs?ref=8a9df5aa38f63c9864dc560baadec95575188997", "patch": "@@ -16,8 +16,8 @@ enum fn_kind {\n     fk_item_fn(ident, [ty_param]), //< an item declared with fn()\n     fk_method(ident, [ty_param], @method),\n     fk_res(ident, [ty_param], region_param),\n-    fk_anon(proto),  //< an anonymous function like fn@(...)\n-    fk_fn_block,     //< a block {||...}\n+    fk_anon(proto, capture_clause),  //< an anonymous function like fn@(...)\n+    fk_fn_block(capture_clause),     //< a block {||...}\n     fk_ctor(ident, [ty_param], node_id /* self id */,\n             def_id /* parent class id */) // class constructor\n }\n@@ -26,15 +26,15 @@ fn name_of_fn(fk: fn_kind) -> ident {\n     alt fk {\n       fk_item_fn(name, _) | fk_method(name, _, _) | fk_res(name, _, _)\n           | fk_ctor(name, _, _, _) { name }\n-      fk_anon(_) | fk_fn_block { \"anon\" }\n+      fk_anon(*) | fk_fn_block(*) { \"anon\" }\n     }\n }\n \n fn tps_of_fn(fk: fn_kind) -> [ty_param] {\n     alt fk {\n       fk_item_fn(_, tps) | fk_method(_, tps, _) | fk_res(_, tps, _)\n           | fk_ctor(_, tps, _, _) { tps }\n-      fk_anon(_) | fk_fn_block { [] }\n+      fk_anon(*) | fk_fn_block(*) { [] }\n     }\n }\n \n@@ -381,11 +381,13 @@ fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n         v.visit_expr(x, e, v);\n         for arms.each {|a| v.visit_arm(a, e, v); }\n       }\n-      expr_fn(proto, decl, body, _) {\n-        v.visit_fn(fk_anon(proto), decl, body, ex.span, ex.id, e, v);\n+      expr_fn(proto, decl, body, cap_clause) {\n+        v.visit_fn(fk_anon(proto, cap_clause), decl, body,\n+                   ex.span, ex.id, e, v);\n       }\n-      expr_fn_block(decl, body, _) {\n-        v.visit_fn(fk_fn_block, decl, body, ex.span, ex.id, e, v);\n+      expr_fn_block(decl, body, cap_clause) {\n+        v.visit_fn(fk_fn_block(cap_clause), decl, body,\n+                   ex.span, ex.id, e, v);\n       }\n       expr_block(b) { v.visit_block(b, e, v); }\n       expr_assign(a, b) { v.visit_expr(b, e, v); v.visit_expr(a, e, v); }"}, {"sha": "65910d3b87fe2d980705bb13d6cb2faaea9d0a88", "filename": "src/rustc/front/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a9df5aa38f63c9864dc560baadec95575188997/src%2Frustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9df5aa38f63c9864dc560baadec95575188997/src%2Frustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Ftest.rs?ref=8a9df5aa38f63c9864dc560baadec95575188997", "patch": "@@ -368,7 +368,7 @@ fn mk_test_wrapper(cx: test_ctxt,\n     let wrapper_expr: ast::expr = {\n         id: cx.sess.next_node_id(),\n         node: ast::expr_fn(ast::proto_bare, wrapper_decl,\n-                           wrapper_body, []),\n+                           wrapper_body, @[]),\n         span: span\n     };\n "}, {"sha": "9fd4689b91af853e78a843b8b61b2f64e62d555c", "filename": "src/rustc/metadata/astencode.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a9df5aa38f63c9864dc560baadec95575188997/src%2Frustc%2Fmetadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9df5aa38f63c9864dc560baadec95575188997/src%2Frustc%2Fmetadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fastencode.rs?ref=8a9df5aa38f63c9864dc560baadec95575188997", "patch": "@@ -223,8 +223,7 @@ fn visit_ids(item: ast::inlined_item, vfn: fn@(ast::node_id)) {\n                 vfn(m.self_id);\n                 vec::iter(tps) {|tp| vfn(tp.id)}\n               }\n-              visit::fk_anon(_) |\n-              visit::fk_fn_block {\n+              visit::fk_anon(*) | visit::fk_fn_block(*) {\n               }\n             }\n "}, {"sha": "84da4ee2136629a93e0cb150c10ff3c000140bff", "filename": "src/rustc/middle/capture.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8a9df5aa38f63c9864dc560baadec95575188997/src%2Frustc%2Fmiddle%2Fcapture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9df5aa38f63c9864dc560baadec95575188997/src%2Frustc%2Fmiddle%2Fcapture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcapture.rs?ref=8a9df5aa38f63c9864dc560baadec95575188997", "patch": "@@ -31,12 +31,11 @@ type capture_map = map::hashmap<ast::def_id, capture_var>;\n // errors for any irregularities which we identify.\n fn check_capture_clause(tcx: ty::ctxt,\n                         fn_expr_id: ast::node_id,\n-                        fn_proto: ast::proto,\n                         cap_clause: ast::capture_clause) {\n     let freevars = freevars::get_freevars(tcx, fn_expr_id);\n     let seen_defs = map::int_hash();\n \n-    let check_capture_item = fn@(cap_item: ast::capture_item) {\n+    for (*cap_clause).each { |cap_item|\n         let cap_def = tcx.def_map.get(cap_item.id);\n         if !vec::any(*freevars, {|fv| fv.def == cap_def}) {\n             tcx.sess.span_warn(\n@@ -52,22 +51,6 @@ fn check_capture_clause(tcx: ty::ctxt,\n                 #fmt(\"variable '%s' captured more than once\",\n                      cap_item.name));\n         }\n-    };\n-\n-    alt fn_proto {\n-      ast::proto_any | ast::proto_block {\n-        if vec::is_not_empty(cap_clause) {\n-            let cap_item0 = vec::head(cap_clause);\n-            tcx.sess.span_err(\n-                cap_item0.span,\n-                \"cannot capture values explicitly with a block closure\");\n-        }\n-      }\n-      ast::proto_bare | ast::proto_box | ast::proto_uniq {\n-        for cap_clause.each { |cap_item|\n-            check_capture_item(cap_item);\n-        }\n-      }\n     }\n }\n \n@@ -80,7 +63,7 @@ fn compute_capture_vars(tcx: ty::ctxt,\n \n     // first add entries for anything explicitly named in the cap clause\n \n-    for cap_clause.each { |cap_item|\n+    for (*cap_clause).each { |cap_item|\n         let cap_def = tcx.def_map.get(cap_item.id);\n         let cap_def_id = ast_util::def_id_of_def(cap_def).node;\n         if cap_item.is_move {"}, {"sha": "56dd30cc02e559a2f383456e4acf793fa2960395", "filename": "src/rustc/middle/kind.rs", "status": "modified", "additions": 115, "deletions": 53, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/8a9df5aa38f63c9864dc560baadec95575188997/src%2Frustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9df5aa38f63c9864dc560baadec95575188997/src%2Frustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fkind.rs?ref=8a9df5aa38f63c9864dc560baadec95575188997", "patch": "@@ -5,6 +5,7 @@ import ty::{kind, kind_copyable, kind_sendable, kind_noncopyable};\n import driver::session::session;\n import std::map::hashmap;\n import syntax::print::pprust::expr_to_str;\n+import freevars::freevar_entry;\n \n // Kind analysis pass. There are three kinds:\n //\n@@ -56,17 +57,61 @@ fn check_crate(tcx: ty::ctxt, method_map: typeck::method_map,\n     ret ctx.rval_map;\n }\n \n+type check_fn = fn@(ctx, option<@freevar_entry>, bool, ty::t, sp: span);\n+\n // Yields the appropriate function to check the kind of closed over\n // variables. `id` is the node_id for some expression that creates the\n // closure.\n-fn with_appropriate_checker(cx: ctx, id: node_id,\n-                            b: fn(fn@(ctx, ty::t, sp: span))) {\n+fn with_appropriate_checker(cx: ctx, id: node_id, b: fn(check_fn)) {\n+    fn check_for_uniq(cx: ctx, fv: option<@freevar_entry>, is_move: bool,\n+                      var_t: ty::t, sp: span) {\n+        // all captured data must be sendable, regardless of whether it is\n+        // moved in or copied in\n+        check_send(cx, var_t, sp);\n+\n+        // check that only immutable variables are implicitly copied in\n+        if !is_move {\n+            for fv.each { |fv|\n+                check_imm_free_var(cx, fv.def, fv.span);\n+            }\n+        }\n+    }\n+\n+    fn check_for_box(cx: ctx, fv: option<@freevar_entry>, is_move: bool,\n+                     var_t: ty::t, sp: span) {\n+        // copied in data must be copyable, but moved in data can be anything\n+        if !is_move { check_copy(cx, var_t, sp); }\n+\n+        // check that only immutable variables are implicitly copied in\n+        if !is_move {\n+            for fv.each { |fv|\n+                check_imm_free_var(cx, fv.def, fv.span);\n+            }\n+        }\n+    }\n+\n+    fn check_for_block(cx: ctx, fv: option<@freevar_entry>, _is_move: bool,\n+                       _var_t: ty::t, sp: span) {\n+        // only restriction: no capture clauses (we would have to take\n+        // ownership of the moved/copied in data).\n+        if fv.is_none() {\n+            cx.tcx.sess.span_err(\n+                sp,\n+                \"cannot capture values explicitly with a block closure\");\n+        }\n+    }\n+\n+    fn check_for_bare(cx: ctx, _fv: option<@freevar_entry>, _is_move: bool,\n+                      _var_t: ty::t, sp: span) {\n+        cx.tcx.sess.span_err(sp, \"attempted dynamic environment capture\");\n+    }\n+\n     let fty = ty::node_id_to_type(cx.tcx, id);\n     alt ty::ty_fn_proto(fty) {\n-      proto_uniq { b(check_send); }\n-      proto_box { b(check_copy); }\n-      proto_bare { b(check_none); }\n-      proto_any | proto_block { /* no check needed */ }\n+      proto_uniq { b(check_for_uniq) }\n+      proto_box { b(check_for_box) }\n+      proto_bare { b(check_for_bare) }\n+      proto_any | proto_block { b(check_for_block) }\n     }\n }\n \n@@ -75,59 +120,54 @@ fn with_appropriate_checker(cx: ctx, id: node_id,\n fn check_fn(fk: visit::fn_kind, decl: fn_decl, body: blk, sp: span,\n             fn_id: node_id, cx: ctx, v: visit::vt<ctx>) {\n \n-    // n.b.: This could be the body of either a fn decl or a fn expr.  In the\n-    // former case, the prototype will be proto_bare and no check occurs.  In\n-    // the latter case, we do not check the variables that in the capture\n-    // clause (as we don't have access to that here) but just those that\n-    // appear free.  The capture clauses are checked below, in check_expr().\n-    //\n-    // We could do this check also in check_expr(), but it seems more\n-    // \"future-proof\" to do it this way, as check_fn_body() is supposed to be\n-    // the common flow point for all functions that appear in the AST.\n-\n-    with_appropriate_checker(cx, fn_id) { |checker|\n+    // Find the check function that enforces the appropriate bounds for this\n+    // kind of function:\n+    with_appropriate_checker(cx, fn_id) { |chk|\n+\n+        // Begin by checking the variables in the capture clause, if any.\n+        // Here we slightly abuse the map function to both check and report\n+        // errors and produce a list of the def id's for all capture\n+        // variables.  This list is used below to avoid checking and reporting\n+        // on a given variable twice.\n+        let cap_clause = alt fk {\n+          visit::fk_anon(_, cc) | visit::fk_fn_block(cc) { cc }\n+          visit::fk_item_fn(*) | visit::fk_method(*) |\n+          visit::fk_res(*) | visit::fk_ctor(*) { @[] }\n+        };\n+        let captured_vars = (*cap_clause).map { |cap_item|\n+            let cap_def = cx.tcx.def_map.get(cap_item.id);\n+            let cap_def_id = ast_util::def_id_of_def(cap_def).node;\n+            let ty = ty::node_id_to_type(cx.tcx, cap_def_id);\n+            chk(cx, none, cap_item.is_move, ty, cap_item.span);\n+            cap_def_id\n+        };\n+\n+        // Iterate over any free variables that may not have appeared in the\n+        // capture list.  Ensure that they too are of the appropriate kind.\n         for vec::each(*freevars::get_freevars(cx.tcx, fn_id)) {|fv|\n             let id = ast_util::def_id_of_def(fv.def).node;\n-            if checker == check_copy {\n+\n+            // skip over free variables that appear in the cap clause\n+            if captured_vars.contains(id) { cont; }\n+\n+            // if this is the last use of the variable, then it will be\n+            // a move and not a copy\n+            let is_move = {\n                 let last_uses = alt check cx.last_uses.find(fn_id) {\n                   some(last_use::closes_over(vars)) { vars }\n                   none { [] }\n                 };\n-                if option::is_some(\n-                    vec::position_elem(last_uses, id)) { cont; }\n-            }\n+                last_uses.contains(id)\n+            };\n+\n             let ty = ty::node_id_to_type(cx.tcx, id);\n-            checker(cx, ty, fv.span);\n+            chk(cx, some(fv), is_move, ty, fv.span);\n         }\n     }\n \n     visit::visit_fn(fk, decl, body, sp, fn_id, cx, v);\n }\n \n-fn check_fn_cap_clause(cx: ctx,\n-                       id: node_id,\n-                       cap_clause: capture_clause) {\n-    // Check that the variables named in the clause which are not free vars\n-    // (if any) are also legal.  freevars are checked above in check_fn().\n-    // This is kind of a degenerate case, as captured variables will generally\n-    // appear free in the body.\n-    let freevars = freevars::get_freevars(cx.tcx, id);\n-    let freevar_ids = vec::map(*freevars, { |freevar|\n-        ast_util::def_id_of_def(freevar.def).node\n-    });\n-    //log(\"freevar_ids\", freevar_ids);\n-    with_appropriate_checker(cx, id) { |checker|\n-        for cap_clause.each { |cap_item|\n-            let cap_def = cx.tcx.def_map.get(cap_item.id);\n-            let cap_def_id = ast_util::def_id_of_def(cap_def).node;\n-            if !vec::contains(freevar_ids, cap_def_id) {\n-                let ty = ty::node_id_to_type(cx.tcx, cap_def_id);\n-                checker(cx, ty, cap_item.span);\n-            }\n-        }\n-    }\n-}\n-\n fn check_block(b: blk, cx: ctx, v: visit::vt<ctx>) {\n     alt b.node.expr {\n       some(ex) { maybe_copy(cx, ex); }\n@@ -225,9 +265,6 @@ fn check_expr(e: @expr, cx: ctx, v: visit::vt<ctx>) {\n             }\n         }\n       }\n-      expr_fn(_, _, _, cap_clause) | expr_fn_block(_, _, cap_clause) {\n-        check_fn_cap_clause(cx, e.id, cap_clause);\n-      }\n       _ { }\n     }\n     visit::visit_expr(e, cx, v);\n@@ -307,6 +344,35 @@ fn check_copy_ex(cx: ctx, ex: @expr, _warn: bool) {\n     }\n }\n \n+fn check_imm_free_var(cx: ctx, def: def, sp: span) {\n+    let msg = \"mutable variables cannot be implicitly captured; \\\n+               use a capture clause\";\n+    alt def {\n+      def_local(_, is_mutbl) {\n+        if is_mutbl {\n+            cx.tcx.sess.span_err(sp, msg);\n+        }\n+      }\n+      def_arg(_, mode) {\n+        alt ty::resolved_mode(cx.tcx, mode) {\n+          by_ref | by_val { /* ok */ }\n+          by_mutbl_ref | by_move | by_copy {\n+            cx.tcx.sess.span_err(sp, msg);\n+          }\n+        }\n+      }\n+      def_upvar(_, def1, _) {\n+        check_imm_free_var(cx, *def1, sp);\n+      }\n+      def_binding(*) | def_self(*) { /*ok*/ }\n+      _ {\n+        cx.tcx.sess.span_bug(\n+            sp,\n+            #fmt[\"unknown def for free variable: %?\", def]);\n+      }\n+    }\n+}\n+\n fn check_copy(cx: ctx, ty: ty::t, sp: span) {\n     if !ty::kind_can_be_copied(ty::type_kind(cx.tcx, ty)) {\n         cx.tcx.sess.span_err(sp, \"copying a noncopyable value\");\n@@ -319,10 +385,6 @@ fn check_send(cx: ctx, ty: ty::t, sp: span) {\n     }\n }\n \n-fn check_none(cx: ctx, _ty: ty::t, sp: span) {\n-    cx.tcx.sess.span_err(sp, \"attempted dynamic environment capture\");\n-}\n-\n //\n // Local Variables:\n // mode: rust"}, {"sha": "df24a98c9237a61d676bc90d6ae2a311a6090a21", "filename": "src/rustc/middle/last_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a9df5aa38f63c9864dc560baadec95575188997/src%2Frustc%2Fmiddle%2Flast_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9df5aa38f63c9864dc560baadec95575188997/src%2Frustc%2Fmiddle%2Flast_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flast_use.rs?ref=8a9df5aa38f63c9864dc560baadec95575188997", "patch": "@@ -159,7 +159,7 @@ fn visit_expr(ex: @expr, cx: ctx, v: visit::vt<ctx>) {\n         // n.b.: safe to ignore copies, as if they are unused\n         // then they are ignored, otherwise they will show up\n         // as freevars in the body.\n-        for cap_clause.each { |ci|\n+        for (*cap_clause).each { |ci|\n             if ci.is_move {\n                 clear_def_if_local(cx, cx.def_map.get(ci.id), false);\n             }"}, {"sha": "c74d1d01bfbf05d205671275b55099bdb652956b", "filename": "src/rustc/middle/mutbl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a9df5aa38f63c9864dc560baadec95575188997/src%2Frustc%2Fmiddle%2Fmutbl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9df5aa38f63c9864dc560baadec95575188997/src%2Frustc%2Fmiddle%2Fmutbl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fmutbl.rs?ref=8a9df5aa38f63c9864dc560baadec95575188997", "patch": "@@ -200,7 +200,7 @@ fn visit_expr(ex: @expr, &&cx: @ctx, v: visit::vt<@ctx>) {\n         check_lval(cx, dest, msg_assign);\n       }\n       expr_fn(_, _, _, cap_clause) | expr_fn_block(_, _, cap_clause) {\n-        for cap_clause.each { |cap_item|\n+        for (*cap_clause).each { |cap_item|\n             if cap_item.is_move {\n                 let def = cx.tcx.def_map.get(cap_item.id);\n                 alt is_illegal_to_modify_def(cx, def, msg_move_out) {"}, {"sha": "01d7d68f7cac23131d8e628528f7fb54122ad26c", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a9df5aa38f63c9864dc560baadec95575188997/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9df5aa38f63c9864dc560baadec95575188997/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=8a9df5aa38f63c9864dc560baadec95575188997", "patch": "@@ -455,7 +455,7 @@ fn resolve_names(e: @env, c: @ast::crate) {\n           }\n           ast::expr_fn(_, _, _, cap_clause) |\n           ast::expr_fn_block(_, _, cap_clause) {\n-            for cap_clause.each { |ci|\n+            for (*cap_clause).each { |ci|\n                 resolve_capture_item(e, sc, ci);\n             }\n           }\n@@ -615,10 +615,12 @@ fn visit_fn_with_scope(e: @env, fk: visit::fn_kind, decl: ast::fn_decl,\n     for decl.constraints.each {|c| resolve_constr(e, c, sc, v); }\n     let scope = alt fk {\n       visit::fk_item_fn(_, tps) | visit::fk_res(_, tps, _) |\n-      visit::fk_method(_, tps, _) | visit::fk_ctor(_, tps, _, _)\n-         { scope_bare_fn(decl, id, tps) }\n-      visit::fk_anon(ast::proto_bare) { scope_bare_fn(decl, id, []) }\n-      visit::fk_anon(_) | visit::fk_fn_block { scope_fn_expr(decl, id, []) }\n+      visit::fk_method(_, tps, _) | visit::fk_ctor(_, tps, _, _) {\n+        scope_bare_fn(decl, id, tps) }\n+      visit::fk_anon(ast::proto_bare, _) {\n+        scope_bare_fn(decl, id, []) }\n+      visit::fk_anon(_, _) | visit::fk_fn_block(_) {\n+        scope_fn_expr(decl, id, []) }\n     };\n \n     visit::visit_fn(fk, decl, body, sp, id, cons(scope, @sc), v);"}, {"sha": "415dda8992aee3c606b3988461bd5c2da88ace48", "filename": "src/rustc/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a9df5aa38f63c9864dc560baadec95575188997/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9df5aa38f63c9864dc560baadec95575188997/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=8a9df5aa38f63c9864dc560baadec95575188997", "patch": "@@ -343,12 +343,12 @@ fn find_pre_post_expr(fcx: fn_ctxt, e: @expr) {\n       expr_fn(_, _, _, cap_clause) | expr_fn_block(_, _, cap_clause) {\n         find_pre_post_expr_fn_upvars(fcx, e);\n \n-        for cap_clause.each { |cap_item|\n+        for (*cap_clause).each { |cap_item|\n             let d = local_node_id_to_local_def_id(fcx, cap_item.id);\n             option::iter(d, { |id| use_var(fcx, id) });\n         }\n \n-        for cap_clause.each { |cap_item|\n+        for (*cap_clause).each { |cap_item|\n             if cap_item.is_move {\n                 log(debug, (\"forget_in_postcond: \", cap_item));\n                 forget_in_postcond(fcx, e.id, cap_item.id);"}, {"sha": "58dd1031faaec49a079eee12562b3ca05067c018", "filename": "src/rustc/middle/tstate/states.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a9df5aa38f63c9864dc560baadec95575188997/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9df5aa38f63c9864dc560baadec95575188997/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs?ref=8a9df5aa38f63c9864dc560baadec95575188997", "patch": "@@ -363,7 +363,7 @@ fn find_pre_post_state_cap_clause(fcx: fn_ctxt, e_id: node_id,\n     let ccx = fcx.ccx;\n     let pres_changed = set_prestate_ann(ccx, e_id, pres);\n     let post = tritv_clone(pres);\n-    for cap_clause.each { |cap_item|\n+    for (*cap_clause).each { |cap_item|\n         if cap_item.is_move {\n             forget_in_poststate(fcx, post, cap_item.id);\n         }"}, {"sha": "c1ed3e5fa5c071c1650a3da7a0e0af027ac27bdb", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a9df5aa38f63c9864dc560baadec95575188997/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9df5aa38f63c9864dc560baadec95575188997/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=8a9df5aa38f63c9864dc560baadec95575188997", "patch": "@@ -3565,15 +3565,15 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n       }\n       ast::expr_fn(proto, decl, body, cap_clause) {\n         check_expr_fn(fcx, expr, proto, decl, body, false, expected);\n-        capture::check_capture_clause(tcx, expr.id, proto, cap_clause);\n+        capture::check_capture_clause(tcx, expr.id, cap_clause);\n       }\n       ast::expr_fn_block(decl, body, cap_clause) {\n         // Take the prototype from the expected type, but default to block:\n         let proto = unpack_expected(fcx, expected, {|sty|\n             alt sty { ty::ty_fn({proto, _}) { some(proto) } _ { none } }\n         }).get_default(ast::proto_box);\n         check_expr_fn(fcx, expr, proto, decl, body, false, expected);\n-        capture::check_capture_clause(tcx, expr.id, proto, cap_clause);\n+        capture::check_capture_clause(tcx, expr.id, cap_clause);\n       }\n       ast::expr_loop_body(b) {\n         // a loop body is the special argument to a `for` loop.  We know that\n@@ -3605,7 +3605,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n           ast::expr_fn_block(decl, body, cap_clause) {\n             check_expr_fn(fcx, b, proto, decl, body, true, some(inner_ty));\n             demand::suptype(fcx, b.span, inner_ty, fcx.expr_ty(b));\n-            capture::check_capture_clause(tcx, b.id, proto, cap_clause);\n+            capture::check_capture_clause(tcx, b.id, cap_clause);\n           }\n         }\n         let block_ty = structurally_resolved_type("}, {"sha": "cc3e58dd017783c0fb594fc878fa2fc87933a6c0", "filename": "src/test/compile-fail/cap-clause-both-copy-and-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a9df5aa38f63c9864dc560baadec95575188997/src%2Ftest%2Fcompile-fail%2Fcap-clause-both-copy-and-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9df5aa38f63c9864dc560baadec95575188997/src%2Ftest%2Fcompile-fail%2Fcap-clause-both-copy-and-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcap-clause-both-copy-and-move.rs?ref=8a9df5aa38f63c9864dc560baadec95575188997", "patch": "@@ -1,5 +1,5 @@\n // error-pattern:variable 'x' captured more than once\n fn main() {\n     let x = 5;\n-    let y = fn~[move x; copy x]() -> int { x };\n+    let y = fn~(move x, copy x) -> int { x };\n }"}, {"sha": "484fe9e184a30816118814ba2f3798e4b3932e23", "filename": "src/test/compile-fail/cap-clause-double-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a9df5aa38f63c9864dc560baadec95575188997/src%2Ftest%2Fcompile-fail%2Fcap-clause-double-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9df5aa38f63c9864dc560baadec95575188997/src%2Ftest%2Fcompile-fail%2Fcap-clause-double-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcap-clause-double-copy.rs?ref=8a9df5aa38f63c9864dc560baadec95575188997", "patch": "@@ -1,5 +1,5 @@\n // error-pattern:variable 'x' captured more than once\n fn main() {\n     let x = 5;\n-    let y = fn~[copy x, x]() -> int { x };\n+    let y = fn~(copy x, copy x) -> int { x };\n }"}, {"sha": "023da778d5492c6a6f799e3fa697ea0b9dbe9a9f", "filename": "src/test/compile-fail/cap-clause-double-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a9df5aa38f63c9864dc560baadec95575188997/src%2Ftest%2Fcompile-fail%2Fcap-clause-double-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9df5aa38f63c9864dc560baadec95575188997/src%2Ftest%2Fcompile-fail%2Fcap-clause-double-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcap-clause-double-move.rs?ref=8a9df5aa38f63c9864dc560baadec95575188997", "patch": "@@ -1,5 +1,5 @@\n // error-pattern:variable 'x' captured more than once\n fn main() {\n     let x = 5;\n-    let y = fn~[move x, x]() -> int { x };\n+    let y = fn~(move x, move x) -> int { x };\n }"}, {"sha": "89a19cb89db859036c14f94510d0ef3cb3eb3a76", "filename": "src/test/compile-fail/cap-clause-illegal-cap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a9df5aa38f63c9864dc560baadec95575188997/src%2Ftest%2Fcompile-fail%2Fcap-clause-illegal-cap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9df5aa38f63c9864dc560baadec95575188997/src%2Ftest%2Fcompile-fail%2Fcap-clause-illegal-cap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcap-clause-illegal-cap.rs?ref=8a9df5aa38f63c9864dc560baadec95575188997", "patch": "@@ -3,7 +3,7 @@\n fn to_lambda2(b: fn(uint) -> uint) -> fn@(uint) -> uint {\n     // test case where copy clause specifies a value that is not used\n     // in fn@ body, but value is illegal to copy:\n-    ret fn@[copy b](u: uint) -> uint { 22u };\n+    ret fn@(u: uint, copy b) -> uint { 22u };\n }\n \n fn main() {"}, {"sha": "97655cb3bd760ed19fd09a84b44f3fc285db84df", "filename": "src/test/compile-fail/cap-clause-unresolved-copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a9df5aa38f63c9864dc560baadec95575188997/src%2Ftest%2Fcompile-fail%2Fcap-clause-unresolved-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9df5aa38f63c9864dc560baadec95575188997/src%2Ftest%2Fcompile-fail%2Fcap-clause-unresolved-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcap-clause-unresolved-copy.rs?ref=8a9df5aa38f63c9864dc560baadec95575188997", "patch": "@@ -1,6 +1,6 @@\n // error-pattern:unresolved name: z\n fn main() {\n     let x = 5;\n-    let y = fn~[copy z, x]() {\n+    let y = fn~(copy z, copy x) {\n     };\n-}\n\\ No newline at end of file\n+}"}, {"sha": "292b0f430541ad86a112a3817b7b3c86fd7586b7", "filename": "src/test/compile-fail/cap-clause-unresolved-move.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a9df5aa38f63c9864dc560baadec95575188997/src%2Ftest%2Fcompile-fail%2Fcap-clause-unresolved-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9df5aa38f63c9864dc560baadec95575188997/src%2Ftest%2Fcompile-fail%2Fcap-clause-unresolved-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcap-clause-unresolved-move.rs?ref=8a9df5aa38f63c9864dc560baadec95575188997", "patch": "@@ -1,6 +1,6 @@\n // error-pattern:unresolved name: z\n fn main() {\n     let x = 5;\n-    let y = fn~[move z, x]() {\n+    let y = fn~(move z, move x) {\n     };\n-}\n\\ No newline at end of file\n+}"}, {"sha": "7fb06ba5a23a4ac33d79dff8edf5d4cabd31af7c", "filename": "src/test/compile-fail/cap-clause-use-after-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a9df5aa38f63c9864dc560baadec95575188997/src%2Ftest%2Fcompile-fail%2Fcap-clause-use-after-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9df5aa38f63c9864dc560baadec95575188997/src%2Ftest%2Fcompile-fail%2Fcap-clause-use-after-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcap-clause-use-after-move.rs?ref=8a9df5aa38f63c9864dc560baadec95575188997", "patch": "@@ -2,6 +2,6 @@\n \n fn main() {\n     let x = 5;\n-    let _y = fn~[move x]() { };\n+    let _y = fn~(move x) { };\n     let _z = x; //< error: Unsatisfied precondition constraint\n }"}, {"sha": "4d9a77fb3d63f41200e6bb30ba9cf4c3614b28e9", "filename": "src/test/compile-fail/cap-clause-with-stack-closure.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8a9df5aa38f63c9864dc560baadec95575188997/src%2Ftest%2Fcompile-fail%2Fcap-clause-with-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9df5aa38f63c9864dc560baadec95575188997/src%2Ftest%2Fcompile-fail%2Fcap-clause-with-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcap-clause-with-stack-closure.rs?ref=8a9df5aa38f63c9864dc560baadec95575188997", "patch": "@@ -0,0 +1,14 @@\n+fn foo(_f: fn()) {}\n+fn bar(_f: @int) {}\n+\n+fn main() {\n+    let x = @3;\n+    foo {|| bar(x); }\n+\n+    let x = @3;\n+    foo {|copy x| bar(x); } //! ERROR cannot capture values explicitly with a block closure\n+\n+    let x = @3;\n+    foo {|move x| bar(x); } //! ERROR cannot capture values explicitly with a block closure\n+}\n+"}, {"sha": "11cae9195e7a2126853d8b98fec2e9a0cc0ba113", "filename": "src/test/compile-fail/kindck-implicit-close-over-mut-var.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8a9df5aa38f63c9864dc560baadec95575188997/src%2Ftest%2Fcompile-fail%2Fkindck-implicit-close-over-mut-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9df5aa38f63c9864dc560baadec95575188997/src%2Ftest%2Fcompile-fail%2Fkindck-implicit-close-over-mut-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-implicit-close-over-mut-var.rs?ref=8a9df5aa38f63c9864dc560baadec95575188997", "patch": "@@ -0,0 +1,35 @@\n+fn use(_i: int) {}\n+\n+fn foo() {\n+    // Here, i is *moved* into the closure: OK\n+    let mut i = 0;\n+    task::spawn {||\n+        use(i);\n+    }\n+}\n+\n+fn bar() {\n+    // Here, i would be implicitly *copied* but it\n+    // is mutable: bad\n+    let mut i = 0;\n+    while i < 10 {\n+        task::spawn {||\n+            use(i); //! ERROR mutable variables cannot be implicitly captured\n+        }\n+        i += 1;\n+    }\n+}\n+\n+fn car() {\n+    // Here, i is mutable, but *explicitly* copied:\n+    let mut i = 0;\n+    while i < 10 {\n+        task::spawn {|copy i|\n+            use(i);\n+        }\n+        i += 1;\n+    }\n+}\n+\n+fn main() {\n+}\n\\ No newline at end of file"}, {"sha": "29f34c5a51e5238c8325d442ad372ddb4f5af4ca", "filename": "src/test/compile-fail/kindck-nonsendable-1.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a9df5aa38f63c9864dc560baadec95575188997/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9df5aa38f63c9864dc560baadec95575188997/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs?ref=8a9df5aa38f63c9864dc560baadec95575188997", "patch": "@@ -0,0 +1,8 @@\n+fn foo(_x: @uint) {}\n+\n+fn main() {\n+    let x = @3u;\n+    let _ = fn~() { foo(x); }; //! ERROR not a sendable value\n+    let _ = fn~(copy x) { foo(x); }; //! ERROR not a sendable value\n+    let _ = fn~(move x) { foo(x); }; //! ERROR not a sendable value\n+}\n\\ No newline at end of file"}, {"sha": "3e5a501e69130984ea3c3e4f61d4e7a6c93c84c1", "filename": "src/test/compile-fail/kindck-nonsendable-2.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8a9df5aa38f63c9864dc560baadec95575188997/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9df5aa38f63c9864dc560baadec95575188997/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-2.rs?ref=8a9df5aa38f63c9864dc560baadec95575188997", "patch": "@@ -0,0 +1,17 @@\n+fn foo(_x: r) {}\n+\n+resource r(_x: ()) {}\n+\n+fn main() {\n+    let x = r(());\n+    let _ = fn~() {\n+        // Error even though this is the last use:\n+        foo(x); //! ERROR not a sendable value\n+    };\n+\n+    let x = r(());\n+    let _ = fn@() {\n+        // OK in fn@ because this is the last use:\n+        foo(x);\n+    };\n+}\n\\ No newline at end of file"}, {"sha": "85674b92a1d8131fb52f6c9e654b258f3de956ce", "filename": "src/test/compile-fail/omitted-arg-in-item-fn.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a9df5aa38f63c9864dc560baadec95575188997/src%2Ftest%2Fcompile-fail%2Fomitted-arg-in-item-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9df5aa38f63c9864dc560baadec95575188997/src%2Ftest%2Fcompile-fail%2Fomitted-arg-in-item-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fomitted-arg-in-item-fn.rs?ref=8a9df5aa38f63c9864dc560baadec95575188997", "patch": "@@ -0,0 +1,4 @@\n+// xfail-test\n+\n+fn foo(x) { //! ERROR expecting ':' but found ')'\n+}\n\\ No newline at end of file"}, {"sha": "7f5fb30f63b1907c4705090a39466063769e6961", "filename": "src/test/compile-fail/omitted-arg-wrong-types.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a9df5aa38f63c9864dc560baadec95575188997/src%2Ftest%2Fcompile-fail%2Fomitted-arg-wrong-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9df5aa38f63c9864dc560baadec95575188997/src%2Ftest%2Fcompile-fail%2Fomitted-arg-wrong-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fomitted-arg-wrong-types.rs?ref=8a9df5aa38f63c9864dc560baadec95575188997", "patch": "@@ -0,0 +1,11 @@\n+// xfail-test\n+\n+fn let_in<T>(x: T, f: fn(T)) {}\n+\n+fn main() {\n+    let_in(3u, fn&(i) { assert i == 3; });\n+    //!^ ERROR expected `uint` but found `int`\n+\n+    let_in(3, fn&(i) { assert i == 3u; });\n+    //!^ ERROR expected `int` but found `uint`\n+}\n\\ No newline at end of file"}, {"sha": "fae7e3d9174092594613ac90c5d8b2b249eaac3f", "filename": "src/test/compile-fail/sendfn-captures-nonsendable-state.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d709ed2542d25a9dfcda40492412bb99155c8dea/src%2Ftest%2Fcompile-fail%2Fsendfn-captures-nonsendable-state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d709ed2542d25a9dfcda40492412bb99155c8dea/src%2Ftest%2Fcompile-fail%2Fsendfn-captures-nonsendable-state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsendfn-captures-nonsendable-state.rs?ref=d709ed2542d25a9dfcda40492412bb99155c8dea", "patch": "@@ -1,6 +0,0 @@\n-// error-pattern: not a sendable value\n-\n-fn main() {\n-    let x = @3u;\n-    let _f = fn~(y: uint) -> uint { ret *x+y; };\n-}\n\\ No newline at end of file"}, {"sha": "6efcd8e6eed99ca3f27150c4667b2ad4f77be9fa", "filename": "src/test/run-pass/task-comm-14.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a9df5aa38f63c9864dc560baadec95575188997/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9df5aa38f63c9864dc560baadec95575188997/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs?ref=8a9df5aa38f63c9864dc560baadec95575188997", "patch": "@@ -10,7 +10,7 @@ fn main() {\n     let mut i = 10;\n     while (i > 0) {\n         log(debug, i);\n-        task::spawn {|| child(i, ch); };\n+        task::spawn {|copy i| child(i, ch); };\n         i = i - 1;\n     }\n "}, {"sha": "8364c3a3fd04effb3cb617afcc0d18d389baeae3", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a9df5aa38f63c9864dc560baadec95575188997/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9df5aa38f63c9864dc560baadec95575188997/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=8a9df5aa38f63c9864dc560baadec95575188997", "patch": "@@ -34,7 +34,7 @@ fn test00() {\n     while i < number_of_tasks {\n         let builder = task::builder();\n         results += [task::future_result(builder)];\n-        task::run(builder) {||\n+        task::run(builder) {|copy i|\n             test00_start(ch, i, number_of_messages)\n         }\n         i = i + 1;"}, {"sha": "9118075c642bc1f4b6251ebf9b0b0b38cb2af06e", "filename": "src/test/run-pass/task-comm.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a9df5aa38f63c9864dc560baadec95575188997/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9df5aa38f63c9864dc560baadec95575188997/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm.rs?ref=8a9df5aa38f63c9864dc560baadec95575188997", "patch": "@@ -43,7 +43,9 @@ fn test00() {\n         i = i + 1;\n         let builder = task::builder();\n         results += [task::future_result(builder)];\n-        task::run(builder) {|| test00_start(ch, i, number_of_messages);}\n+        task::run(builder) {|copy i|\n+            test00_start(ch, i, number_of_messages);\n+        }\n     }\n     let mut sum: int = 0;\n     for results.each {|r|\n@@ -128,7 +130,9 @@ fn test06() {\n         i = i + 1;\n         let builder = task::builder();\n         results += [task::future_result(builder)];\n-        task::run(builder) {|| test06_start(i);};\n+        task::run(builder) {|copy i|\n+            test06_start(i);\n+        };\n     }\n \n "}, {"sha": "358074fecf897bd378b808e267d087a509d2d036", "filename": "src/test/run-pass/threads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a9df5aa38f63c9864dc560baadec95575188997/src%2Ftest%2Frun-pass%2Fthreads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9df5aa38f63c9864dc560baadec95575188997/src%2Ftest%2Frun-pass%2Fthreads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthreads.rs?ref=8a9df5aa38f63c9864dc560baadec95575188997", "patch": "@@ -5,7 +5,7 @@ import task;\n \n fn main() {\n     let mut i = 10;\n-    while i > 0 { task::spawn {|| child(i); }; i = i - 1; }\n+    while i > 0 { task::spawn {|copy i| child(i); }; i = i - 1; }\n     #debug(\"main thread exiting\");\n }\n "}]}