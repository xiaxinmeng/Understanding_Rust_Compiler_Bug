{"sha": "ecf87c3180898b7792e93fccccdf6a21f2d00508", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjZjg3YzMxODA4OThiNzc5MmU5M2ZjY2NjZGY2YTIxZjJkMDA1MDg=", "commit": {"author": {"name": "Tycho Sci", "email": "tychosci@gmail.com", "date": "2012-02-29T08:47:17Z"}, "committer": {"name": "Tycho Sci", "email": "tychosci@gmail.com", "date": "2012-02-29T08:47:17Z"}, "message": "libstd: Skip trailing whitespaces after JSON value", "tree": {"sha": "df96c8b9f907c17d8af7de1bfa92624761a427bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df96c8b9f907c17d8af7de1bfa92624761a427bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecf87c3180898b7792e93fccccdf6a21f2d00508", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecf87c3180898b7792e93fccccdf6a21f2d00508", "html_url": "https://github.com/rust-lang/rust/commit/ecf87c3180898b7792e93fccccdf6a21f2d00508", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecf87c3180898b7792e93fccccdf6a21f2d00508/comments", "author": {"login": "tychosci", "id": 1026254, "node_id": "MDQ6VXNlcjEwMjYyNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1026254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tychosci", "html_url": "https://github.com/tychosci", "followers_url": "https://api.github.com/users/tychosci/followers", "following_url": "https://api.github.com/users/tychosci/following{/other_user}", "gists_url": "https://api.github.com/users/tychosci/gists{/gist_id}", "starred_url": "https://api.github.com/users/tychosci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tychosci/subscriptions", "organizations_url": "https://api.github.com/users/tychosci/orgs", "repos_url": "https://api.github.com/users/tychosci/repos", "events_url": "https://api.github.com/users/tychosci/events{/privacy}", "received_events_url": "https://api.github.com/users/tychosci/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tychosci", "id": 1026254, "node_id": "MDQ6VXNlcjEwMjYyNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1026254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tychosci", "html_url": "https://github.com/tychosci", "followers_url": "https://api.github.com/users/tychosci/followers", "following_url": "https://api.github.com/users/tychosci/following{/other_user}", "gists_url": "https://api.github.com/users/tychosci/gists{/gist_id}", "starred_url": "https://api.github.com/users/tychosci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tychosci/subscriptions", "organizations_url": "https://api.github.com/users/tychosci/orgs", "repos_url": "https://api.github.com/users/tychosci/repos", "events_url": "https://api.github.com/users/tychosci/events{/privacy}", "received_events_url": "https://api.github.com/users/tychosci/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0465d5217d7268aed71d1cc99bf025ee1fe748b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0465d5217d7268aed71d1cc99bf025ee1fe748b5", "html_url": "https://github.com/rust-lang/rust/commit/0465d5217d7268aed71d1cc99bf025ee1fe748b5"}], "stats": {"total": 21, "additions": 9, "deletions": 12}, "files": [{"sha": "d069c36e866c179fe2e1694804ccc1db457d976b", "filename": "src/libstd/json.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ecf87c3180898b7792e93fccccdf6a21f2d00508/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf87c3180898b7792e93fccccdf6a21f2d00508/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=ecf87c3180898b7792e93fccccdf6a21f2d00508", "patch": "@@ -154,6 +154,8 @@ impl parser for parser {\n     fn parse() -> result::t<json, error> {\n         alt self.parse_value() {\n           ok(value) {\n+            // Skip trailing whitespaces.\n+            self.parse_whitespace();\n             // Make sure there is no trailing characters.\n             if self.eof() {\n                 ok(value)\n@@ -392,7 +394,6 @@ impl parser for parser {\n \n         if self.ch == ']' {\n             self.bump();\n-            self.parse_whitespace();\n             ret ok(list(values));\n         }\n \n@@ -407,11 +408,7 @@ impl parser for parser {\n \n             alt self.ch {\n               ',' { self.bump(); }\n-              ']' {\n-                  self.bump();\n-                  self.parse_whitespace();\n-                  ret ok(list(values));\n-              }\n+              ']' { self.bump(); ret ok(list(values)); }\n               _ { ret self.error(\"expecting ',' or ']'\"); }\n             }\n         }\n@@ -427,7 +424,6 @@ impl parser for parser {\n \n         if self.ch == '}' {\n           self.bump();\n-          self.parse_whitespace();\n           ret ok(dict(values));\n         }\n \n@@ -459,11 +455,7 @@ impl parser for parser {\n \n             alt self.ch {\n               ',' { self.bump(); }\n-              '}' {\n-                  self.bump();\n-                  self.parse_whitespace();\n-                  ret ok(dict(values));\n-              }\n+              '}' { self.bump(); ret ok(dict(values)); }\n               _ {\n                   if self.eof() { break; }\n                   ret self.error(\"expecting ',' or '}'\");\n@@ -637,6 +629,9 @@ mod tests {\n         assert from_str(\"null\") == ok(null);\n         assert from_str(\"true\") == ok(boolean(true));\n         assert from_str(\"false\") == ok(boolean(false));\n+        assert from_str(\" null \") == ok(null);\n+        assert from_str(\" true \") == ok(boolean(true));\n+        assert from_str(\" false \") == ok(boolean(false));\n     }\n \n     #[test]\n@@ -664,6 +659,7 @@ mod tests {\n         assert from_str(\"0.4e5\") == ok(num(0.4e5f));\n         assert from_str(\"0.4e+15\") == ok(num(0.4e15f));\n         assert from_str(\"0.4e-01\") == ok(num(0.4e-01f));\n+        assert from_str(\" 3 \") == ok(num(3f));\n     }\n \n     #[test]\n@@ -680,6 +676,7 @@ mod tests {\n         assert from_str(\"\\\"\\\\n\\\"\") == ok(string(\"\\n\"));\n         assert from_str(\"\\\"\\\\r\\\"\") == ok(string(\"\\r\"));\n         assert from_str(\"\\\"\\\\t\\\"\") == ok(string(\"\\t\"));\n+        assert from_str(\" \\\"foo\\\" \") == ok(string(\"foo\"));\n     }\n \n     #[test]"}]}