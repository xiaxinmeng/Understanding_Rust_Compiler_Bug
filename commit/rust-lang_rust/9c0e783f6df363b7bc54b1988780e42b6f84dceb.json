{"sha": "9c0e783f6df363b7bc54b1988780e42b6f84dceb", "node_id": "C_kwDOAAsO6NoAKDljMGU3ODNmNmRmMzYzYjdiYzU0YjE5ODg3ODBlNDJiNmY4NGRjZWI", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2022-11-10T15:47:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-10T15:47:37Z"}, "message": "Rollup merge of #103863 - compiler-errors:fulfillcx-less, r=wesleywiser\n\nUse `TraitEngine` in more places, restrict visibility of `FulfillmentCtxt` constructor\n\nMost places that are constructing a `FulfillmentContext` should be constructing a `TraitEngine` generically, so later on if/when we're transitioning it'll be easier.\n\nLogical extension of #99746", "tree": {"sha": "1c972c6bd54904dede997b0b335f8e84a475656d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c972c6bd54904dede997b0b335f8e84a475656d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c0e783f6df363b7bc54b1988780e42b6f84dceb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjbR0ZCRBK7hj4Ov3rIwAAfEUIAKyke2Oum6wDDPfNyYm5mPUo\njzi5CvQSxYDgOb7GDA2pF9XTHysFRB+5hvfEHzjXFs92SKpKB5xGmfSn7ywzblPZ\ncZwRuUjWp05H5ZO3+cI0VTuhyAn6HRiMsePM0rbFKu5eeSRSf/hWB77K4JhkLP1X\nGq0DRvDEfVzCnYPHGalXGarWEmyLFGLOyb/ldod4S2nb4ZF5HcO2BE1aXTmHZKqa\nkJ1uAOSpntQrJJiacqRPcC2p/GCtSinRwverWo1kMJIqYu3sD1FOg+7nZHFnf32y\nlAmI4r0wWn0ReSKwvyrsIvqr5bsfFjH4f0g5EI1V6g1cA4IOpKRj2u1vOwIArgQ=\n=WRR1\n-----END PGP SIGNATURE-----\n", "payload": "tree 1c972c6bd54904dede997b0b335f8e84a475656d\nparent a7cd4f2edf67a3c896f47333d68999f3d5a0cc1f\nparent 27fddcff8630fc61d1154fdd846901762be71ce0\nauthor Manish Goregaokar <manishsmail@gmail.com> 1668095257 -0500\ncommitter GitHub <noreply@github.com> 1668095257 -0500\n\nRollup merge of #103863 - compiler-errors:fulfillcx-less, r=wesleywiser\n\nUse `TraitEngine` in more places, restrict visibility of `FulfillmentCtxt` constructor\n\nMost places that are constructing a `FulfillmentContext` should be constructing a `TraitEngine` generically, so later on if/when we're transitioning it'll be easier.\n\nLogical extension of #99746\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c0e783f6df363b7bc54b1988780e42b6f84dceb", "html_url": "https://github.com/rust-lang/rust/commit/9c0e783f6df363b7bc54b1988780e42b6f84dceb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c0e783f6df363b7bc54b1988780e42b6f84dceb/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7cd4f2edf67a3c896f47333d68999f3d5a0cc1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7cd4f2edf67a3c896f47333d68999f3d5a0cc1f", "html_url": "https://github.com/rust-lang/rust/commit/a7cd4f2edf67a3c896f47333d68999f3d5a0cc1f"}, {"sha": "27fddcff8630fc61d1154fdd846901762be71ce0", "url": "https://api.github.com/repos/rust-lang/rust/commits/27fddcff8630fc61d1154fdd846901762be71ce0", "html_url": "https://github.com/rust-lang/rust/commit/27fddcff8630fc61d1154fdd846901762be71ce0"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "71949b4211819b79d08c09b5b32872504294a3a7", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9c0e783f6df363b7bc54b1988780e42b6f84dceb/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c0e783f6df363b7bc54b1988780e42b6f84dceb/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=9c0e783f6df363b7bc54b1988780e42b6f84dceb", "patch": "@@ -62,6 +62,7 @@ use rustc_span::{self, BytePos, DesugaringKind, Span};\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::infer::InferCtxtExt as _;\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt as _;\n+use rustc_trait_selection::traits::TraitEngineExt as _;\n use rustc_trait_selection::traits::{self, ObligationCause, ObligationCauseCode};\n \n use smallvec::{smallvec, SmallVec};\n@@ -1038,7 +1039,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let Ok(ok) = coerce.coerce(source, target) else {\n                 return false;\n             };\n-            let mut fcx = traits::FulfillmentContext::new_in_snapshot();\n+            let mut fcx = <dyn TraitEngine<'tcx>>::new_in_snapshot(self.tcx);\n             fcx.register_predicate_obligations(self, ok.obligations);\n             fcx.select_where_possible(&self).is_empty()\n         })"}, {"sha": "54c738d8389759859103ae149b82fe915934ca59", "filename": "compiler/rustc_trait_selection/src/autoderef.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c0e783f6df363b7bc54b1988780e42b6f84dceb/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c0e783f6df363b7bc54b1988780e42b6f84dceb/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs?ref=9c0e783f6df363b7bc54b1988780e42b6f84dceb", "patch": "@@ -1,6 +1,6 @@\n use crate::errors::AutoDerefReachedRecursionLimit;\n use crate::traits::query::evaluate_obligation::InferCtxtExt;\n-use crate::traits::{self, TraitEngine};\n+use crate::traits::{self, TraitEngine, TraitEngineExt};\n use rustc_hir as hir;\n use rustc_infer::infer::InferCtxt;\n use rustc_middle::ty::{self, TraitRef, Ty, TyCtxt};\n@@ -139,7 +139,7 @@ impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n             return None;\n         }\n \n-        let mut fulfillcx = traits::FulfillmentContext::new_in_snapshot();\n+        let mut fulfillcx = <dyn TraitEngine<'tcx>>::new_in_snapshot(tcx);\n         let normalized_ty = fulfillcx.normalize_projection_type(\n             &self.infcx,\n             self.param_env,"}, {"sha": "8f9d5eaac9d1d5ac9e35adb52ef62d7d9dfcc6b3", "filename": "compiler/rustc_trait_selection/src/traits/chalk_fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c0e783f6df363b7bc54b1988780e42b6f84dceb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c0e783f6df363b7bc54b1988780e42b6f84dceb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs?ref=9c0e783f6df363b7bc54b1988780e42b6f84dceb", "patch": "@@ -19,7 +19,7 @@ pub struct FulfillmentContext<'tcx> {\n }\n \n impl FulfillmentContext<'_> {\n-    pub(crate) fn new() -> Self {\n+    pub(super) fn new() -> Self {\n         FulfillmentContext {\n             obligations: FxIndexSet::default(),\n             relationships: FxHashMap::default(),"}, {"sha": "98c13ffdafb029f12aa273587a287cc7f9c8977d", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9c0e783f6df363b7bc54b1988780e42b6f84dceb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c0e783f6df363b7bc54b1988780e42b6f84dceb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=9c0e783f6df363b7bc54b1988780e42b6f84dceb", "patch": "@@ -3,13 +3,14 @@ pub mod on_unimplemented;\n pub mod suggestions;\n \n use super::{\n-    FulfillmentContext, FulfillmentError, FulfillmentErrorCode, MismatchedProjectionTypes,\n-    Obligation, ObligationCause, ObligationCauseCode, OutputTypeParameterMismatch, Overflow,\n-    PredicateObligation, SelectionContext, SelectionError, TraitNotObjectSafe,\n+    FulfillmentError, FulfillmentErrorCode, MismatchedProjectionTypes, Obligation, ObligationCause,\n+    ObligationCauseCode, OutputTypeParameterMismatch, Overflow, PredicateObligation,\n+    SelectionContext, SelectionError, TraitNotObjectSafe,\n };\n use crate::infer::error_reporting::{TyCategory, TypeAnnotationNeeded as ErrorCode};\n use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::infer::{self, InferCtxt, TyCtxtInferExt};\n+use crate::traits::engine::TraitEngineExt as _;\n use crate::traits::query::evaluate_obligation::InferCtxtExt as _;\n use crate::traits::query::normalize::AtExt as _;\n use crate::traits::specialize::to_pretty_impl_header;\n@@ -352,7 +353,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n                     })\n                     .to_predicate(self.tcx),\n                 );\n-                let mut fulfill_cx = FulfillmentContext::new_in_snapshot();\n+                let mut fulfill_cx = <dyn TraitEngine<'tcx>>::new_in_snapshot(self.tcx);\n                 fulfill_cx.register_predicate_obligation(self, obligation);\n                 if fulfill_cx.select_all_or_error(self).is_empty() {\n                     return Ok(("}, {"sha": "b486c07f354b93bbf26f57cf3e1f8ace88d89286", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c0e783f6df363b7bc54b1988780e42b6f84dceb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c0e783f6df363b7bc54b1988780e42b6f84dceb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=9c0e783f6df363b7bc54b1988780e42b6f84dceb", "patch": "@@ -85,15 +85,15 @@ static_assert_size!(PendingPredicateObligation<'_>, 72);\n \n impl<'a, 'tcx> FulfillmentContext<'tcx> {\n     /// Creates a new fulfillment context.\n-    pub fn new() -> FulfillmentContext<'tcx> {\n+    pub(super) fn new() -> FulfillmentContext<'tcx> {\n         FulfillmentContext {\n             predicates: ObligationForest::new(),\n             relationships: FxHashMap::default(),\n             usable_in_snapshot: false,\n         }\n     }\n \n-    pub fn new_in_snapshot() -> FulfillmentContext<'tcx> {\n+    pub(super) fn new_in_snapshot() -> FulfillmentContext<'tcx> {\n         FulfillmentContext {\n             predicates: ObligationForest::new(),\n             relationships: FxHashMap::default(),"}, {"sha": "422d39742eb552c3be5bb82da23b193fc778a877", "filename": "src/test/ui/chalkify/trait-objects.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c0e783f6df363b7bc54b1988780e42b6f84dceb/src%2Ftest%2Fui%2Fchalkify%2Ftrait-objects.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c0e783f6df363b7bc54b1988780e42b6f84dceb/src%2Ftest%2Fui%2Fchalkify%2Ftrait-objects.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftrait-objects.stderr?ref=9c0e783f6df363b7bc54b1988780e42b6f84dceb", "patch": "@@ -22,6 +22,10 @@ LL |     f(2);\n    |     ^^^^ expected an `Fn<(i32,)>` closure, found `dyn Fn(i32) -> i32`\n    |\n    = help: the trait `Fn<(i32,)>` is not implemented for `dyn Fn(i32) -> i32`\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n+   |\n+LL | fn main() where dyn Fn(i32) -> i32: Fn<(i32,)> {\n+   |           ++++++++++++++++++++++++++++++++++++\n \n error: aborting due to 3 previous errors\n "}]}