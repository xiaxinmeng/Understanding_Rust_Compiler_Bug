{"sha": "a7cef0bf0810d04da3101fe079a0625d2756744a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3Y2VmMGJmMDgxMGQwNGRhMzEwMWZlMDc5YTA2MjVkMjc1Njc0NGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-16T05:28:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-16T05:28:25Z"}, "message": "Auto merge of #60007 - Centril:rollup-gdh1er4, r=Centril\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #59717 (improve docs for std::hint::unreachable_unchecked())\n - #59903 (Continue evaluating after missing main)\n - #59973 (Fix rustdoc sidebar z-index)\n - #59992 (rustdoc: use --static-root-path for settings.js)\n - #59993 (include mode in unused binding suggestion span)\n - #60000 (Add repo-specific triagebot configuration)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "c4bc4ef5c616d0a34c269800d459b0e218884b6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4bc4ef5c616d0a34c269800d459b0e218884b6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7cef0bf0810d04da3101fe079a0625d2756744a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7cef0bf0810d04da3101fe079a0625d2756744a", "html_url": "https://github.com/rust-lang/rust/commit/a7cef0bf0810d04da3101fe079a0625d2756744a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7cef0bf0810d04da3101fe079a0625d2756744a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cb933a616b64303a022a97487c3d658ff4b17ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cb933a616b64303a022a97487c3d658ff4b17ed", "html_url": "https://github.com/rust-lang/rust/commit/7cb933a616b64303a022a97487c3d658ff4b17ed"}, {"sha": "67ff8cfde88ecc840a2b85091c5253391f5bea07", "url": "https://api.github.com/repos/rust-lang/rust/commits/67ff8cfde88ecc840a2b85091c5253391f5bea07", "html_url": "https://github.com/rust-lang/rust/commit/67ff8cfde88ecc840a2b85091c5253391f5bea07"}], "stats": {"total": 205, "additions": 191, "deletions": 14}, "files": [{"sha": "89bf3640968965573f0b850a4e4fc1e10b329e4d", "filename": "src/libcore/hint.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a7cef0bf0810d04da3101fe079a0625d2756744a/src%2Flibcore%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7cef0bf0810d04da3101fe079a0625d2756744a/src%2Flibcore%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhint.rs?ref=a7cef0bf0810d04da3101fe079a0625d2756744a", "patch": "@@ -21,11 +21,10 @@ use intrinsics;\n /// difficult-to-debug problems.\n ///\n /// Use this function only when you can prove that the code will never call it.\n+/// Otherwise, consider using the [`unreachable!`] macro, which does not allow\n+/// optimizations but will panic when executed.\n ///\n-/// The [`unreachable!()`] macro is the safe counterpart of this function, which\n-/// will panic instead when executed.\n-///\n-/// [`unreachable!()`]: ../macro.unreachable.html\n+/// [`unreachable!`]: ../macro.unreachable.html\n ///\n /// # Example\n ///"}, {"sha": "df77033ebef3b5999d489a8dcc3ee6368a95364a", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a7cef0bf0810d04da3101fe079a0625d2756744a/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7cef0bf0810d04da3101fe079a0625d2756744a/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=a7cef0bf0810d04da3101fe079a0625d2756744a", "patch": "@@ -163,7 +163,6 @@ fn configure_main(\n                 err.span_note(span, \"here is a function named 'main'\");\n             }\n             err.emit();\n-            tcx.sess.abort_if_errors();\n         } else {\n             if let Some(ref filename) = tcx.sess.local_crate_source_file {\n                 err.note(&format!(\"consider adding a `main` function to `{}`\", filename.display()));"}, {"sha": "b8cde936bded30c44ec1ea9b1443fbdedaa8fad4", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a7cef0bf0810d04da3101fe079a0625d2756744a/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7cef0bf0810d04da3101fe079a0625d2756744a/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=a7cef0bf0810d04da3101fe079a0625d2756744a", "patch": "@@ -1626,11 +1626,18 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                     );\n \n                     if self.ir.variable_is_shorthand(var) {\n-                        err.multipart_suggestion(\n-                            \"try ignoring the field\",\n-                            spans.iter().map(|span| (*span, format!(\"{}: _\", name))).collect(),\n-                            Applicability::MachineApplicable\n-                        );\n+                        if let Node::Binding(pat) = self.ir.tcx.hir().get_by_hir_id(hir_id) {\n+                            // Handle `ref` and `ref mut`.\n+                            let spans = spans.iter()\n+                                .map(|_span| (pat.span, format!(\"{}: _\", name)))\n+                                .collect();\n+\n+                            err.multipart_suggestion(\n+                                \"try ignoring the field\",\n+                                spans,\n+                                Applicability::MachineApplicable,\n+                            );\n+                        }\n                     } else {\n                         err.multipart_suggestion(\n                             \"consider prefixing with an underscore\","}, {"sha": "2f01254ed5f9b675004bdff9ec0cd9c2c37a5639", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a7cef0bf0810d04da3101fe079a0625d2756744a/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7cef0bf0810d04da3101fe079a0625d2756744a/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=a7cef0bf0810d04da3101fe079a0625d2756744a", "patch": "@@ -886,10 +886,11 @@ fn analysis<'tcx>(\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     let sess = tcx.sess;\n+    let mut entry_point = None;\n \n     time(sess, \"misc checking 1\", || {\n         parallel!({\n-            time(sess, \"looking for entry point\", || {\n+            entry_point = time(sess, \"looking for entry point\", || {\n                 middle::entry::find_entry_point(tcx)\n             });\n \n@@ -937,7 +938,10 @@ fn analysis<'tcx>(\n \n     // Abort so we don't try to construct MIR with liveness errors.\n     // We also won't want to continue with errors from rvalue promotion\n-    tcx.sess.abort_if_errors();\n+    // We only do so if the only error found so far *isn't* a missing `fn main()`\n+    if !(entry_point.is_none() && sess.err_count() == 1) {\n+        tcx.sess.abort_if_errors();\n+    }\n \n     time(sess, \"borrow checking\", || {\n         if tcx.use_ast_borrowck() {"}, {"sha": "d91b78c8416b81748e5c099551de19b832992a99", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a7cef0bf0810d04da3101fe079a0625d2756744a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7cef0bf0810d04da3101fe079a0625d2756744a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=a7cef0bf0810d04da3101fe079a0625d2756744a", "patch": "@@ -2113,7 +2113,8 @@ impl Context {\n                  &final_file);\n \n         // Generating settings page.\n-        let settings = Settings::new(\"./\", &self.shared.resource_suffix);\n+        let settings = Settings::new(self.shared.static_root_path.deref().unwrap_or(\"./\"),\n+                                     &self.shared.resource_suffix);\n         page.title = \"Rustdoc settings\";\n         page.description = \"Settings of Rustdoc\";\n         page.root_path = \"./\";"}, {"sha": "8cf70b9a99502b8bc694b47cf43103d303b7bc59", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a7cef0bf0810d04da3101fe079a0625d2756744a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/a7cef0bf0810d04da3101fe079a0625d2756744a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=a7cef0bf0810d04da3101fe079a0625d2756744a", "patch": "@@ -166,6 +166,7 @@ nav.sub {\n \ttop: 0;\n \theight: 100vh;\n \toverflow: auto;\n+\tz-index: 1;\n }\n \n .sidebar .block > ul > li {\n@@ -345,7 +346,7 @@ nav.sub {\n \tmargin: 0;\n }\n .docblock-short code {\n-\twhite-space: nowrap;\n+\twhite-space: pre-wrap;\n }\n \n .docblock h1, .docblock h2, .docblock h3, .docblock h4, .docblock h5 {"}, {"sha": "2f7c89c5f1e6b7376d277d22165b9131eb5189fc", "filename": "src/test/rustdoc/static-root-path.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7cef0bf0810d04da3101fe079a0625d2756744a/src%2Ftest%2Frustdoc%2Fstatic-root-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7cef0bf0810d04da3101fe079a0625d2756744a/src%2Ftest%2Frustdoc%2Fstatic-root-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fstatic-root-path.rs?ref=a7cef0bf0810d04da3101fe079a0625d2756744a", "patch": "@@ -12,3 +12,7 @@ pub struct SomeStruct;\n // @!matches - '\"\\.\\./\\.\\./source-script\\.js\"'\n // @matches - '\"\\.\\./\\.\\./source-files.js\"'\n // @!matches - '\"/cache/source-files\\.js\"'\n+\n+// @has settings.html\n+// @matches - '/cache/settings\\.js'\n+// @!matches - '\\./settings\\.js'"}, {"sha": "7455c2a431d6289fdb7c9bb8f2255d183afe8843", "filename": "src/test/ui/continue-after-missing-main.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a7cef0bf0810d04da3101fe079a0625d2756744a/src%2Ftest%2Fui%2Fcontinue-after-missing-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7cef0bf0810d04da3101fe079a0625d2756744a/src%2Ftest%2Fui%2Fcontinue-after-missing-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcontinue-after-missing-main.rs?ref=a7cef0bf0810d04da3101fe079a0625d2756744a", "patch": "@@ -0,0 +1,32 @@\n+#![allow(dead_code)]\n+\n+// error-pattern:`main` function not found in crate\n+\n+struct Tableau<'a, MP> {\n+    provider: &'a MP,\n+}\n+\n+impl<'adapted_matrix_provider, 'original_data, MP>\n+    Tableau<'adapted_matrix_provider, AdaptedMatrixProvider<'original_data, MP>>\n+{\n+    fn provider(&self) -> &'adapted_matrix_provider AdaptedMatrixProvider</*'original_data,*/ MP> {\n+        self.provider\n+    }\n+}\n+\n+struct AdaptedMatrixProvider<'a, T> {\n+    original_problem: &'a T,\n+}\n+\n+impl<'a, T> AdaptedMatrixProvider<'a, T> {\n+    fn clone_with_extra_bound(&self) -> Self {\n+        AdaptedMatrixProvider { original_problem: self.original_problem }\n+    }\n+}\n+\n+fn create_and_solve_subproblems<'data_provider, 'original_data, MP>(\n+    tableau: Tableau<'data_provider, AdaptedMatrixProvider<'original_data, MP>>,\n+) {\n+    let _: AdaptedMatrixProvider<'original_data, MP> = tableau.provider().clone_with_extra_bound();\n+    //~^ ERROR lifetime mismatch\n+}"}, {"sha": "8d64fee8bdaee81c49167aac1601115379b7b9bc", "filename": "src/test/ui/continue-after-missing-main.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a7cef0bf0810d04da3101fe079a0625d2756744a/src%2Ftest%2Fui%2Fcontinue-after-missing-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7cef0bf0810d04da3101fe079a0625d2756744a/src%2Ftest%2Fui%2Fcontinue-after-missing-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcontinue-after-missing-main.stderr?ref=a7cef0bf0810d04da3101fe079a0625d2756744a", "patch": "@@ -0,0 +1,17 @@\n+error[E0601]: `main` function not found in crate `continue_after_missing_main`\n+   |\n+   = note: consider adding a `main` function to `$DIR/continue-after-missing-main.rs`\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/continue-after-missing-main.rs:30:56\n+   |\n+LL |     tableau: Tableau<'data_provider, AdaptedMatrixProvider<'original_data, MP>>,\n+   |              ------------------------------------------------------------------ these two types are declared with different lifetimes...\n+LL | ) {\n+LL |     let _: AdaptedMatrixProvider<'original_data, MP> = tableau.provider().clone_with_extra_bound();\n+   |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...but data from `tableau` flows into `tableau` here\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors occurred: E0601, E0623.\n+For more information about an error, try `rustc --explain E0601`."}, {"sha": "1350b7ca6996cf25540de6906be07b14a801067e", "filename": "src/test/ui/lint/issue-54180-unused-ref-field.fixed", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a7cef0bf0810d04da3101fe079a0625d2756744a/src%2Ftest%2Fui%2Flint%2Fissue-54180-unused-ref-field.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a7cef0bf0810d04da3101fe079a0625d2756744a/src%2Ftest%2Fui%2Flint%2Fissue-54180-unused-ref-field.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-54180-unused-ref-field.fixed?ref=a7cef0bf0810d04da3101fe079a0625d2756744a", "patch": "@@ -0,0 +1,34 @@\n+// run-rustfix\n+\n+#![deny(unused)]\n+\n+pub struct S {\n+    pub f1: i32,\n+}\n+\n+pub struct Point {\n+    pub x: i32,\n+    pub y: i32,\n+}\n+\n+pub enum E {\n+    Variant { field: String }\n+}\n+\n+pub fn foo(arg: &E) {\n+    match arg {\n+        E::Variant { field: _ } => (), //~ ERROR unused variable\n+    }\n+}\n+\n+fn main() {\n+    let s = S { f1: 123 };\n+    let S { f1: _ } = s; //~ ERROR unused variable\n+\n+    let points = vec![Point { x: 1, y: 2 }];\n+    let _: i32 = points.iter().map(|Point { x: _, y }| y).sum(); //~ ERROR unused variable\n+\n+    match (Point { x: 1, y: 2 }) {\n+        Point { y, x: _ } => y, //~ ERROR unused variable\n+    };\n+}"}, {"sha": "7b3392b609a0aa4630e8bea070dbbb4198e41814", "filename": "src/test/ui/lint/issue-54180-unused-ref-field.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a7cef0bf0810d04da3101fe079a0625d2756744a/src%2Ftest%2Fui%2Flint%2Fissue-54180-unused-ref-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7cef0bf0810d04da3101fe079a0625d2756744a/src%2Ftest%2Fui%2Flint%2Fissue-54180-unused-ref-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-54180-unused-ref-field.rs?ref=a7cef0bf0810d04da3101fe079a0625d2756744a", "patch": "@@ -0,0 +1,34 @@\n+// run-rustfix\n+\n+#![deny(unused)]\n+\n+pub struct S {\n+    pub f1: i32,\n+}\n+\n+pub struct Point {\n+    pub x: i32,\n+    pub y: i32,\n+}\n+\n+pub enum E {\n+    Variant { field: String }\n+}\n+\n+pub fn foo(arg: &E) {\n+    match arg {\n+        E::Variant { ref field } => (), //~ ERROR unused variable\n+    }\n+}\n+\n+fn main() {\n+    let s = S { f1: 123 };\n+    let S { ref f1 } = s; //~ ERROR unused variable\n+\n+    let points = vec![Point { x: 1, y: 2 }];\n+    let _: i32 = points.iter().map(|Point { x, y }| y).sum(); //~ ERROR unused variable\n+\n+    match (Point { x: 1, y: 2 }) {\n+        Point { y, ref mut x } => y, //~ ERROR unused variable\n+    };\n+}"}, {"sha": "9f47554a1a65e310f8f29741f0df7499ca814c75", "filename": "src/test/ui/lint/issue-54180-unused-ref-field.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a7cef0bf0810d04da3101fe079a0625d2756744a/src%2Ftest%2Fui%2Flint%2Fissue-54180-unused-ref-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7cef0bf0810d04da3101fe079a0625d2756744a/src%2Ftest%2Fui%2Flint%2Fissue-54180-unused-ref-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-54180-unused-ref-field.stderr?ref=a7cef0bf0810d04da3101fe079a0625d2756744a", "patch": "@@ -0,0 +1,39 @@\n+error: unused variable: `field`\n+  --> $DIR/issue-54180-unused-ref-field.rs:20:26\n+   |\n+LL |         E::Variant { ref field } => (),\n+   |                      ----^^^^^\n+   |                      |\n+   |                      help: try ignoring the field: `field: _`\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-54180-unused-ref-field.rs:3:9\n+   |\n+LL | #![deny(unused)]\n+   |         ^^^^^^\n+   = note: #[deny(unused_variables)] implied by #[deny(unused)]\n+\n+error: unused variable: `x`\n+  --> $DIR/issue-54180-unused-ref-field.rs:29:45\n+   |\n+LL |     let _: i32 = points.iter().map(|Point { x, y }| y).sum();\n+   |                                             ^ help: try ignoring the field: `x: _`\n+\n+error: unused variable: `f1`\n+  --> $DIR/issue-54180-unused-ref-field.rs:26:17\n+   |\n+LL |     let S { ref f1 } = s;\n+   |             ----^^\n+   |             |\n+   |             help: try ignoring the field: `f1: _`\n+\n+error: unused variable: `x`\n+  --> $DIR/issue-54180-unused-ref-field.rs:32:28\n+   |\n+LL |         Point { y, ref mut x } => y,\n+   |                    --------^\n+   |                    |\n+   |                    help: try ignoring the field: `x: _`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "6f60481600c2ebe79d4d5c0903dc78b4883ec77b", "filename": "triagebot.toml", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7cef0bf0810d04da3101fe079a0625d2756744a/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a7cef0bf0810d04da3101fe079a0625d2756744a/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=a7cef0bf0810d04da3101fe079a0625d2756744a", "patch": "@@ -0,0 +1,6 @@\n+[relabel]\n+allow-unauthenticated = [\n+    \"C-*\", \"A-*\", \"E-*\", \"NLL-*\", \"O-*\", \"S-*\", \"T-*\", \"WG-*\",\n+    # I-* without I-nominated\n+    \"I-compilemem\", \"I-compiletime\", \"I-crash\", \"I-hang\", \"I-ICE\", \"I-slow\",\n+]"}]}