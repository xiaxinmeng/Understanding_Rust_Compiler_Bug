{"sha": "3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhYjk3MDYyY2ZkZGI2ZTVlNWUzMjM1MmRkMTVjYTIyNDNhYmEzZmY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-04-10T23:40:12Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-04-11T01:10:30Z"}, "message": "Tweak unstable diagnostic output", "tree": {"sha": "5b09387f24047ed0a7188be9e3858bdc8f12f2c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b09387f24047ed0a7188be9e3858bdc8f12f2c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "html_url": "https://github.com/rust-lang/rust/commit/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96d700f1b7bc9c53fa0d11567adb1ed2c1c27e79", "url": "https://api.github.com/repos/rust-lang/rust/commits/96d700f1b7bc9c53fa0d11567adb1ed2c1c27e79", "html_url": "https://github.com/rust-lang/rust/commit/96d700f1b7bc9c53fa0d11567adb1ed2c1c27e79"}], "stats": {"total": 1295, "additions": 842, "deletions": 453}, "files": [{"sha": "8579addfcbd0f9c28a132a9f88cb78d40ece0a9e", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 41, "deletions": 23, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -903,7 +903,7 @@ pub const BUILTIN_ATTRIBUTES: &[(&str, AttributeType, AttributeTemplate, Attribu\n     (\"thread_local\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                         \"thread_local\",\n                                         \"`#[thread_local]` is an experimental feature, and does \\\n-                                         not currently handle destructors.\",\n+                                         not currently handle destructors\",\n                                         cfg_fn!(thread_local))),\n \n     (\"rustc_on_unimplemented\", Whitelisted, template!(List:\n@@ -1438,42 +1438,58 @@ pub enum GateStrength {\n     Soft,\n }\n \n-pub fn emit_feature_err(sess: &ParseSess, feature: &str, span: Span, issue: GateIssue,\n-                        explain: &str) {\n+pub fn emit_feature_err(\n+    sess: &ParseSess,\n+    feature: &str,\n+    span: Span,\n+    issue: GateIssue,\n+    explain: &str,\n+) {\n     feature_err(sess, feature, span, issue, explain).emit();\n }\n \n-pub fn feature_err<'a>(sess: &'a ParseSess, feature: &str, span: Span, issue: GateIssue,\n-                       explain: &str) -> DiagnosticBuilder<'a> {\n+pub fn feature_err<'a>(\n+    sess: &'a ParseSess,\n+    feature: &str,\n+    span: Span,\n+    issue: GateIssue,\n+    explain: &str,\n+) -> DiagnosticBuilder<'a> {\n     leveled_feature_err(sess, feature, span, issue, explain, GateStrength::Hard)\n }\n \n-fn leveled_feature_err<'a>(sess: &'a ParseSess, feature: &str, span: Span, issue: GateIssue,\n-                           explain: &str, level: GateStrength) -> DiagnosticBuilder<'a> {\n+fn leveled_feature_err<'a>(\n+    sess: &'a ParseSess,\n+    feature: &str,\n+    span: Span,\n+    issue: GateIssue,\n+    explain: &str,\n+    level: GateStrength,\n+) -> DiagnosticBuilder<'a> {\n     let diag = &sess.span_diagnostic;\n \n     let issue = match issue {\n         GateIssue::Language => find_lang_feature_issue(feature),\n         GateIssue::Library(lib) => lib,\n     };\n \n-    let explanation = match issue {\n-        None | Some(0) => explain.to_owned(),\n-        Some(n) => format!(\"{} (see issue #{})\", explain, n)\n-    };\n-\n     let mut err = match level {\n         GateStrength::Hard => {\n-            diag.struct_span_err_with_code(span, &explanation, stringify_error_code!(E0658))\n+            diag.struct_span_err_with_code(span, explain, stringify_error_code!(E0658))\n         }\n-        GateStrength::Soft => diag.struct_span_warn(span, &explanation),\n+        GateStrength::Soft => diag.struct_span_warn(span, explain),\n     };\n \n+    match issue {\n+        None | Some(0) => {}\n+        Some(n) => {\n+            err.note(&format!(\"for more information, see tracking issue #{}\", n));\n+        }\n+    }\n+\n     // #23973: do not suggest `#![feature(...)]` if we are in beta/stable\n     if sess.unstable_features.is_nightly_build() {\n-        err.help(&format!(\"add #![feature({})] to the \\\n-                           crate attributes to enable\",\n-                          feature));\n+        err.help(&format!(\"add #![feature({})] to the crate attributes to enable\", feature));\n     }\n \n     // If we're on stable and only emitting a \"soft\" warning, add a note to\n@@ -1488,10 +1504,10 @@ fn leveled_feature_err<'a>(sess: &'a ParseSess, feature: &str, span: Span, issue\n }\n \n const EXPLAIN_BOX_SYNTAX: &str =\n-    \"box expression syntax is experimental; you can call `Box::new` instead.\";\n+    \"box expression syntax is experimental; you can call `Box::new` instead\";\n \n pub const EXPLAIN_STMT_ATTR_SYNTAX: &str =\n-    \"attributes on expressions are experimental.\";\n+    \"attributes on expressions are experimental\";\n \n pub const EXPLAIN_ASM: &str =\n     \"inline assembly is not stable enough for use and is subject to change\";\n@@ -1685,10 +1701,12 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n \n     fn visit_name(&mut self, sp: Span, name: ast::Name) {\n         if !name.as_str().is_ascii() {\n-            gate_feature_post!(&self,\n-                               non_ascii_idents,\n-                               self.context.parse_sess.source_map().def_span(sp),\n-                               \"non-ascii idents are not fully supported.\");\n+            gate_feature_post!(\n+                &self,\n+                non_ascii_idents,\n+                self.context.parse_sess.source_map().def_span(sp),\n+                \"non-ascii idents are not fully supported\"\n+            );\n         }\n     }\n "}, {"sha": "838dfc626468c3dd11533b55e32fcc8091f2c7bd", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -348,19 +348,17 @@ impl DiagnosticSpanLine {\n     /// `span` within the line.\n     fn from_span(span: Span, je: &JsonEmitter) -> Vec<DiagnosticSpanLine> {\n         je.sm.span_to_lines(span)\n-             .map(|lines| {\n-                 let fm = &*lines.file;\n-                 lines.lines\n-                      .iter()\n-                      .map(|line| {\n-                          DiagnosticSpanLine::line_from_source_file(fm,\n-                                                                line.line_index,\n-                                                                line.start_col.0 + 1,\n-                                                                line.end_col.0 + 1)\n-                      })\n-                     .collect()\n-             })\n-            .unwrap_or_else(|_| vec![])\n+            .map(|lines| {\n+                let fm = &*lines.file;\n+                lines.lines\n+                    .iter()\n+                    .map(|line| DiagnosticSpanLine::line_from_source_file(\n+                        fm,\n+                        line.line_index,\n+                        line.start_col.0 + 1,\n+                        line.end_col.0 + 1,\n+                    )).collect()\n+            }).unwrap_or_else(|_| vec![])\n     }\n }\n "}, {"sha": "27e9fea069ca032d2dc2c916f6172f8c774f4f65", "filename": "src/test/ui/cast/cast-ptr-to-int-const.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,17 +1,19 @@\n-error[E0658]: casting pointers to integers in constants is unstable (see issue #51910)\n+error[E0658]: casting pointers to integers in constants is unstable\n   --> $DIR/cast-ptr-to-int-const.rs:5:9\n    |\n LL |         main as u32\n    |         ^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #51910\n    = help: add #![feature(const_raw_ptr_to_usize_cast)] to the crate attributes to enable\n \n-error[E0658]: casting pointers to integers in constants is unstable (see issue #51910)\n+error[E0658]: casting pointers to integers in constants is unstable\n   --> $DIR/cast-ptr-to-int-const.rs:9:9\n    |\n LL |         &Y as *const u32 as u32\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #51910\n    = help: add #![feature(const_raw_ptr_to_usize_cast)] to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "a00c6dd37132f569d12d739240de19e6ae1a4492", "filename": "src/test/ui/conditional-compilation/cfg-attr-crate-2.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-crate-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-crate-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-crate-2.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: no_core is experimental (see issue #29639)\n+error[E0658]: no_core is experimental\n   --> $DIR/cfg-attr-crate-2.rs:6:21\n    |\n LL | #![cfg_attr(broken, no_core)]\n    |                     ^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29639\n    = help: add #![feature(no_core)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "c014e3942dedeb8d95a6bceb71c2624c0319d367", "filename": "src/test/ui/conditional-compilation/cfg-attr-multi-invalid-1.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-1.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: no_core is experimental (see issue #29639)\n+error[E0658]: no_core is experimental\n   --> $DIR/cfg-attr-multi-invalid-1.rs:4:21\n    |\n LL | #![cfg_attr(broken, no_core, no_std)]\n    |                     ^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29639\n    = help: add #![feature(no_core)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "5f8dad2bc8dddcadfaf97b8492b94f9442a4754e", "filename": "src/test/ui/conditional-compilation/cfg-attr-multi-invalid-2.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-2.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: no_core is experimental (see issue #29639)\n+error[E0658]: no_core is experimental\n   --> $DIR/cfg-attr-multi-invalid-2.rs:4:29\n    |\n LL | #![cfg_attr(broken, no_std, no_core)]\n    |                             ^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29639\n    = help: add #![feature(no_core)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "275ee0a7af3f3b2c3561af464edee8c0d4311931", "filename": "src/test/ui/conditional-compilation/cfg-attr-unknown-attribute-macro-expansion.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-unknown-attribute-macro-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-unknown-attribute-macro-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-unknown-attribute-macro-expansion.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: The attribute `unknown` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `unknown` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/cfg-attr-unknown-attribute-macro-expansion.rs:3:27\n    |\n LL |         #[cfg_attr(all(), unknown)]\n@@ -7,6 +7,7 @@ LL |         #[cfg_attr(all(), unknown)]\n LL | foo!();\n    | ------- in this macro invocation\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "d15b2fcb8de032fb13bfe75317347218778d7712", "filename": "src/test/ui/consts/const-deref-ptr.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fconsts%2Fconst-deref-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fconsts%2Fconst-deref-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-deref-ptr.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: dereferencing raw pointers in statics is unstable (see issue #51911)\n+error[E0658]: dereferencing raw pointers in statics is unstable\n   --> $DIR/const-deref-ptr.rs:4:29\n    |\n LL |     static C: u64 = unsafe {*(0xdeadbeef as *const u64)};\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #51911\n    = help: add #![feature(const_raw_ptr_deref)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "df1141a24abaa3ba66e21b5e741d851de6e6d1e9", "filename": "src/test/ui/consts/const-eval/feature-gate-const_fn_union.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_fn_union.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_fn_union.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_fn_union.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: unions in const fn are unstable (see issue #51909)\n+error[E0658]: unions in const fn are unstable\n   --> $DIR/feature-gate-const_fn_union.rs:11:5\n    |\n LL |     Foo { u }.i\n    |     ^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #51909\n    = help: add #![feature(const_fn_union)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "b7c29898c57e39731e62b922d3178ae66ee402d8", "filename": "src/test/ui/consts/const-eval/feature-gate-const_panic.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_panic.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,27 +1,30 @@\n-error[E0658]: panicking in constants is unstable (see issue #51999)\n+error[E0658]: panicking in constants is unstable\n   --> $DIR/feature-gate-const_panic.rs:3:15\n    |\n LL | const Z: () = panic!(\"cheese\");\n    |               ^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #51999\n    = help: add #![feature(const_panic)] to the crate attributes to enable\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error[E0658]: panicking in constants is unstable (see issue #51999)\n+error[E0658]: panicking in constants is unstable\n   --> $DIR/feature-gate-const_panic.rs:9:15\n    |\n LL | const X: () = unimplemented!();\n    |               ^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #51999\n    = help: add #![feature(const_panic)] to the crate attributes to enable\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error[E0658]: panicking in constants is unstable (see issue #51999)\n+error[E0658]: panicking in constants is unstable\n   --> $DIR/feature-gate-const_panic.rs:6:15\n    |\n LL | const Y: () = unreachable!();\n    |               ^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #51999\n    = help: add #![feature(const_panic)] to the crate attributes to enable\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n "}, {"sha": "d586ff07ad544279bb6f48aae8ead843332d352c", "filename": "src/test/ui/consts/const-eval/match-test-ptr-null.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.rs?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -3,7 +3,9 @@ fn main() {\n     // that pointer comparison is disallowed, not that parts of a pointer are accessed as raw\n     // bytes.\n     let _: [u8; 0] = [4; {\n-        match &1 as *const i32 as usize { //~ ERROR casting pointers to integers in constants\n+        match &1 as *const i32 as usize {\n+            //~^ ERROR casting pointers to integers in constants\n+            //~| NOTE for more information, see tracking issue #51910\n             0 => 42, //~ ERROR constant contains unimplemented expression type\n             //~^ NOTE \"pointer arithmetic or comparison\" needs an rfc before being allowed\n             //~| ERROR evaluation of constant value failed"}, {"sha": "85336faa177113bcd731ba2680e909a721cae1ee", "filename": "src/test/ui/consts/const-eval/match-test-ptr-null.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,19 +1,20 @@\n-error[E0658]: casting pointers to integers in constants is unstable (see issue #51910)\n+error[E0658]: casting pointers to integers in constants is unstable\n   --> $DIR/match-test-ptr-null.rs:6:15\n    |\n LL |         match &1 as *const i32 as usize {\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #51910\n    = help: add #![feature(const_raw_ptr_to_usize_cast)] to the crate attributes to enable\n \n error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/match-test-ptr-null.rs:7:13\n+  --> $DIR/match-test-ptr-null.rs:9:13\n    |\n LL |             0 => 42,\n    |             ^\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/match-test-ptr-null.rs:7:13\n+  --> $DIR/match-test-ptr-null.rs:9:13\n    |\n LL |             0 => 42,\n    |             ^ \"pointer arithmetic or comparison\" needs an rfc before being allowed inside constants"}, {"sha": "28080089f8afb35c1a0f4ef276794f02e58dd324", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,33 +1,37 @@\n-error[E0658]: dereferencing raw pointers in constant functions is unstable (see issue #51911)\n+error[E0658]: dereferencing raw pointers in constant functions is unstable\n   --> $DIR/min_const_fn_unsafe.rs:50:77\n    |\n LL | const fn bad_const_fn_deref_raw(x: *mut usize) -> &'static usize { unsafe { &*x } }\n    |                                                                             ^^^\n    |\n+   = note: for more information, see tracking issue #51911\n    = help: add #![feature(const_raw_ptr_deref)] to the crate attributes to enable\n \n-error[E0658]: dereferencing raw pointers in constant functions is unstable (see issue #51911)\n+error[E0658]: dereferencing raw pointers in constant functions is unstable\n   --> $DIR/min_const_fn_unsafe.rs:53:70\n    |\n LL | const unsafe fn bad_const_unsafe_deref_raw(x: *mut usize) -> usize { *x }\n    |                                                                      ^^\n    |\n+   = note: for more information, see tracking issue #51911\n    = help: add #![feature(const_raw_ptr_deref)] to the crate attributes to enable\n \n-error[E0658]: dereferencing raw pointers in constant functions is unstable (see issue #51911)\n+error[E0658]: dereferencing raw pointers in constant functions is unstable\n   --> $DIR/min_const_fn_unsafe.rs:56:83\n    |\n LL | const unsafe fn bad_const_unsafe_deref_raw_ref(x: *mut usize) -> &'static usize { &*x }\n    |                                                                                   ^^^\n    |\n+   = note: for more information, see tracking issue #51911\n    = help: add #![feature(const_raw_ptr_deref)] to the crate attributes to enable\n \n-error[E0658]: unions in const fn are unstable (see issue #51909)\n+error[E0658]: unions in const fn are unstable\n   --> $DIR/min_const_fn_unsafe.rs:63:5\n    |\n LL |     Foo { x: () }.y\n    |     ^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #51909\n    = help: add #![feature(const_fn_union)] to the crate attributes to enable\n \n error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block"}, {"sha": "869fc046cd5ddd1c7a0ec9588cebed4034f11619", "filename": "src/test/ui/consts/projection_qualif.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -10,12 +10,13 @@ error[E0019]: constant contains unimplemented expression type\n LL |         unsafe { *b = 5; }\n    |                  ^^^^^^\n \n-error[E0658]: dereferencing raw pointers in constants is unstable (see issue #51911)\n+error[E0658]: dereferencing raw pointers in constants is unstable\n   --> $DIR/projection_qualif.rs:7:18\n    |\n LL |         unsafe { *b = 5; }\n    |                  ^^^^^^\n    |\n+   = note: for more information, see tracking issue #51911\n    = help: add #![feature(const_raw_ptr_deref)] to the crate attributes to enable\n \n error: aborting due to 3 previous errors"}, {"sha": "3d1f8c23b1468d318bb96e29482a58730fbc83b3", "filename": "src/test/ui/custom_attribute.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fcustom_attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fcustom_attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcustom_attribute.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,25 +1,28 @@\n-error[E0658]: The attribute `foo` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `foo` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/custom_attribute.rs:3:3\n    |\n LL | #[foo]\n    |   ^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error[E0658]: The attribute `foo` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `foo` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/custom_attribute.rs:5:7\n    |\n LL |     #[foo]\n    |       ^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error[E0658]: The attribute `foo` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `foo` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/custom_attribute.rs:7:7\n    |\n LL |     #[foo]\n    |       ^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error: aborting due to 3 previous errors"}, {"sha": "bbefff27d7f683873ed1421c9b707cf02a1c7276", "filename": "src/test/ui/error-codes/E0395.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ferror-codes%2FE0395.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ferror-codes%2FE0395.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0395.rs?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -3,6 +3,8 @@\n static FOO: i32 = 42;\n static BAR: i32 = 42;\n \n-static BAZ: bool = unsafe { (&FOO as *const i32) == (&BAR as *const i32) }; //~ ERROR issue #53020\n+static BAZ: bool = unsafe { (&FOO as *const i32) == (&BAR as *const i32) };\n+//~^ ERROR comparing raw pointers inside static\n+\n fn main() {\n }"}, {"sha": "87976ba987260f46253c96f24b47be8bcd0e238f", "filename": "src/test/ui/error-codes/E0395.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ferror-codes%2FE0395.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ferror-codes%2FE0395.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0395.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: comparing raw pointers inside static (see issue #53020)\n+error[E0658]: comparing raw pointers inside static\n   --> $DIR/E0395.rs:6:29\n    |\n LL | static BAZ: bool = unsafe { (&FOO as *const i32) == (&BAR as *const i32) };\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #53020\n    = help: add #![feature(const_compare_raw_pointers)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "cd65f6d4c02f45c640966315b09d39949eeb30e6", "filename": "src/test/ui/error-codes/E0396.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ferror-codes%2FE0396.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ferror-codes%2FE0396.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0396.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: dereferencing raw pointers in constants is unstable (see issue #51911)\n+error[E0658]: dereferencing raw pointers in constants is unstable\n   --> $DIR/E0396.rs:5:28\n    |\n LL | const VALUE: u8 = unsafe { *REG_ADDR };\n    |                            ^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #51911\n    = help: add #![feature(const_raw_ptr_deref)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "47ec1548168a4b3271eef4b20aa29b441b677250", "filename": "src/test/ui/error-codes/E0658.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ferror-codes%2FE0658.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ferror-codes%2FE0658.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0658.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,11 +1,12 @@\n-error[E0658]: repr with 128-bit type is unstable (see issue #35118)\n+error[E0658]: repr with 128-bit type is unstable\n   --> $DIR/E0658.rs:2:1\n    |\n LL | / enum Foo {\n LL | |     Bar(u64),\n LL | | }\n    | |_^\n    |\n+   = note: for more information, see tracking issue #35118\n    = help: add #![feature(repr128)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "b94098dfc292dc7571b7089303b565d7e7c60dc5", "filename": "src/test/ui/explore-issue-38412.stderr", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fexplore-issue-38412.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fexplore-issue-38412.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplore-issue-38412.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,17 +1,19 @@\n-error[E0658]: use of unstable library feature 'unstable_undeclared' (see issue #38412)\n+error[E0658]: use of unstable library feature 'unstable_undeclared'\n   --> $DIR/explore-issue-38412.rs:21:63\n    |\n LL |     let Record { a_stable_pub: _, a_unstable_declared_pub: _, a_unstable_undeclared_pub: _, .. } =\n    |                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #38412\n    = help: add #![feature(unstable_undeclared)] to the crate attributes to enable\n \n-error[E0658]: use of unstable library feature 'unstable_undeclared' (see issue #38412)\n+error[E0658]: use of unstable library feature 'unstable_undeclared'\n   --> $DIR/explore-issue-38412.rs:30:5\n    |\n LL |     r.a_unstable_undeclared_pub;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #38412\n    = help: add #![feature(unstable_undeclared)] to the crate attributes to enable\n \n error[E0616]: field `b_crate` of struct `pub_and_stability::Record` is private\n@@ -32,12 +34,13 @@ error[E0616]: field `d_priv` of struct `pub_and_stability::Record` is private\n LL |     r.d_priv;\n    |     ^^^^^^^^\n \n-error[E0658]: use of unstable library feature 'unstable_undeclared' (see issue #38412)\n+error[E0658]: use of unstable library feature 'unstable_undeclared'\n   --> $DIR/explore-issue-38412.rs:37:5\n    |\n LL |     t.2;\n    |     ^^^\n    |\n+   = note: for more information, see tracking issue #38412\n    = help: add #![feature(unstable_undeclared)] to the crate attributes to enable\n \n error[E0616]: field `3` of struct `pub_and_stability::Tuple` is private\n@@ -58,20 +61,22 @@ error[E0616]: field `5` of struct `pub_and_stability::Tuple` is private\n LL |     t.5;\n    |     ^^^\n \n-error[E0658]: use of unstable library feature 'unstable_undeclared' (see issue #38412)\n+error[E0658]: use of unstable library feature 'unstable_undeclared'\n   --> $DIR/explore-issue-38412.rs:44:7\n    |\n LL |     r.unstable_undeclared_trait_method();\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #38412\n    = help: add #![feature(unstable_undeclared)] to the crate attributes to enable\n \n-error[E0658]: use of unstable library feature 'unstable_undeclared' (see issue #38412)\n+error[E0658]: use of unstable library feature 'unstable_undeclared'\n   --> $DIR/explore-issue-38412.rs:48:7\n    |\n LL |     r.unstable_undeclared();\n    |       ^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #38412\n    = help: add #![feature(unstable_undeclared)] to the crate attributes to enable\n \n error[E0624]: method `pub_crate` is private\n@@ -92,20 +97,22 @@ error[E0624]: method `private` is private\n LL |     r.private();\n    |       ^^^^^^^\n \n-error[E0658]: use of unstable library feature 'unstable_undeclared' (see issue #38412)\n+error[E0658]: use of unstable library feature 'unstable_undeclared'\n   --> $DIR/explore-issue-38412.rs:57:7\n    |\n LL |     t.unstable_undeclared_trait_method();\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #38412\n    = help: add #![feature(unstable_undeclared)] to the crate attributes to enable\n \n-error[E0658]: use of unstable library feature 'unstable_undeclared' (see issue #38412)\n+error[E0658]: use of unstable library feature 'unstable_undeclared'\n   --> $DIR/explore-issue-38412.rs:61:7\n    |\n LL |     t.unstable_undeclared();\n    |       ^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #38412\n    = help: add #![feature(unstable_undeclared)] to the crate attributes to enable\n \n error[E0624]: method `pub_crate` is private"}, {"sha": "f252a3c153d7fe7e03a10881d6fbad7cb07a07c4", "filename": "src/test/ui/feature-gate-optimize_attribute.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gate-optimize_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gate-optimize_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-optimize_attribute.rs?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,17 +1,17 @@\n #![crate_type=\"rlib\"]\n-#![optimize(speed)] //~ ERROR #54882\n+#![optimize(speed)] //~ ERROR #[optimize] attribute is an unstable feature\n \n-#[optimize(size)] //~ ERROR #54882\n+#[optimize(size)] //~ ERROR #[optimize] attribute is an unstable feature\n mod module {\n \n-#[optimize(size)] //~ ERROR #54882\n+#[optimize(size)] //~ ERROR #[optimize] attribute is an unstable feature\n fn size() {}\n \n-#[optimize(speed)] //~ ERROR #54882\n+#[optimize(speed)] //~ ERROR #[optimize] attribute is an unstable feature\n fn speed() {}\n \n #[optimize(banana)]\n-//~^ ERROR #54882\n+//~^ ERROR #[optimize] attribute is an unstable feature\n //~| ERROR E0722\n fn not_known() {}\n "}, {"sha": "e3682c5b6bdeef0c40f6f7e071659bab65ce86a3", "filename": "src/test/ui/feature-gate-optimize_attribute.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gate-optimize_attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gate-optimize_attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-optimize_attribute.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,41 +1,46 @@\n-error[E0658]: #[optimize] attribute is an unstable feature (see issue #54882)\n+error[E0658]: #[optimize] attribute is an unstable feature\n   --> $DIR/feature-gate-optimize_attribute.rs:7:1\n    |\n LL | #[optimize(size)]\n    | ^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #54882\n    = help: add #![feature(optimize_attribute)] to the crate attributes to enable\n \n-error[E0658]: #[optimize] attribute is an unstable feature (see issue #54882)\n+error[E0658]: #[optimize] attribute is an unstable feature\n   --> $DIR/feature-gate-optimize_attribute.rs:10:1\n    |\n LL | #[optimize(speed)]\n    | ^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #54882\n    = help: add #![feature(optimize_attribute)] to the crate attributes to enable\n \n-error[E0658]: #[optimize] attribute is an unstable feature (see issue #54882)\n+error[E0658]: #[optimize] attribute is an unstable feature\n   --> $DIR/feature-gate-optimize_attribute.rs:13:1\n    |\n LL | #[optimize(banana)]\n    | ^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #54882\n    = help: add #![feature(optimize_attribute)] to the crate attributes to enable\n \n-error[E0658]: #[optimize] attribute is an unstable feature (see issue #54882)\n+error[E0658]: #[optimize] attribute is an unstable feature\n   --> $DIR/feature-gate-optimize_attribute.rs:4:1\n    |\n LL | #[optimize(size)]\n    | ^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #54882\n    = help: add #![feature(optimize_attribute)] to the crate attributes to enable\n \n-error[E0658]: #[optimize] attribute is an unstable feature (see issue #54882)\n+error[E0658]: #[optimize] attribute is an unstable feature\n   --> $DIR/feature-gate-optimize_attribute.rs:2:1\n    |\n LL | #![optimize(speed)]\n    | ^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #54882\n    = help: add #![feature(optimize_attribute)] to the crate attributes to enable\n \n error[E0722]: invalid argument"}, {"sha": "d5dd424c4543a3565067470caeab26303f44a657", "filename": "src/test/ui/feature-gate/feature-gate-c_variadic.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-c_variadic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-c_variadic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-c_variadic.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: C-varaidic functions are unstable (see issue #44930)\n+error[E0658]: C-varaidic functions are unstable\n   --> $DIR/feature-gate-c_variadic.rs:3:1\n    |\n LL | pub unsafe extern \"C\" fn test(_: i32, ap: ...) { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #44930\n    = help: add #![feature(c_variadic)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "facd338bd22d2db6ef5703b046a973ce09705a92", "filename": "src/test/ui/feature-gate/feature-gate-static-nobundle-2.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-static-nobundle-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-static-nobundle-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-static-nobundle-2.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,5 +1,6 @@\n-error[E0658]: kind=\"static-nobundle\" is feature gated (see issue #37403)\n+error[E0658]: kind=\"static-nobundle\" is feature gated\n    |\n+   = note: for more information, see tracking issue #37403\n    = help: add #![feature(static_nobundle)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "27f9a851b13609ae3f3fd3606ca08c612a38ab90", "filename": "src/test/ui/feature-gates/feature-gate-abi-msp430-interrupt.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-msp430-interrupt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-msp430-interrupt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-msp430-interrupt.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: msp430-interrupt ABI is experimental and subject to change (see issue #38487)\n+error[E0658]: msp430-interrupt ABI is experimental and subject to change\n   --> $DIR/feature-gate-abi-msp430-interrupt.rs:4:1\n    |\n LL | extern \"msp430-interrupt\" fn foo() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #38487\n    = help: add #![feature(abi_msp430_interrupt)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "61be2fb187f8f55fb30743fa2cada8201b6c9221", "filename": "src/test/ui/feature-gates/feature-gate-abi.stderr", "status": "modified", "additions": 84, "deletions": 42, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -6,12 +6,13 @@ LL | extern \"rust-intrinsic\" fn f1() {}\n    |\n    = help: add #![feature(intrinsics)] to the crate attributes to enable\n \n-error[E0658]: platform intrinsics are experimental and possibly buggy (see issue #27731)\n+error[E0658]: platform intrinsics are experimental and possibly buggy\n   --> $DIR/feature-gate-abi.rs:13:1\n    |\n LL | extern \"platform-intrinsic\" fn f2() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #27731\n    = help: add #![feature(platform_intrinsics)] to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n@@ -22,36 +23,40 @@ LL | extern \"vectorcall\" fn f3() {}\n    |\n    = help: add #![feature(abi_vectorcall)] to the crate attributes to enable\n \n-error[E0658]: rust-call ABI is subject to change (see issue #29625)\n+error[E0658]: rust-call ABI is subject to change\n   --> $DIR/feature-gate-abi.rs:15:1\n    |\n LL | extern \"rust-call\" fn f4() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29625\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n-error[E0658]: msp430-interrupt ABI is experimental and subject to change (see issue #38487)\n+error[E0658]: msp430-interrupt ABI is experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:16:1\n    |\n LL | extern \"msp430-interrupt\" fn f5() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #38487\n    = help: add #![feature(abi_msp430_interrupt)] to the crate attributes to enable\n \n-error[E0658]: PTX ABIs are experimental and subject to change (see issue #38788)\n+error[E0658]: PTX ABIs are experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:17:1\n    |\n LL | extern \"ptx-kernel\" fn f6() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #38788\n    = help: add #![feature(abi_ptx)] to the crate attributes to enable\n \n-error[E0658]: x86-interrupt ABI is experimental and subject to change (see issue #40180)\n+error[E0658]: x86-interrupt ABI is experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:18:1\n    |\n LL | extern \"x86-interrupt\" fn f7() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #40180\n    = help: add #![feature(abi_x86_interrupt)] to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n@@ -62,12 +67,13 @@ LL | extern \"thiscall\" fn f8() {}\n    |\n    = help: add #![feature(abi_thiscall)] to the crate attributes to enable\n \n-error[E0658]: amdgpu-kernel ABI is experimental and subject to change (see issue #51575)\n+error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:20:1\n    |\n LL | extern \"amdgpu-kernel\" fn f9() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #51575\n    = help: add #![feature(abi_amdgpu_kernel)] to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n@@ -78,12 +84,13 @@ LL |     extern \"rust-intrinsic\" fn m1();\n    |\n    = help: add #![feature(intrinsics)] to the crate attributes to enable\n \n-error[E0658]: platform intrinsics are experimental and possibly buggy (see issue #27731)\n+error[E0658]: platform intrinsics are experimental and possibly buggy\n   --> $DIR/feature-gate-abi.rs:25:5\n    |\n LL |     extern \"platform-intrinsic\" fn m2();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #27731\n    = help: add #![feature(platform_intrinsics)] to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n@@ -94,36 +101,40 @@ LL |     extern \"vectorcall\" fn m3();\n    |\n    = help: add #![feature(abi_vectorcall)] to the crate attributes to enable\n \n-error[E0658]: rust-call ABI is subject to change (see issue #29625)\n+error[E0658]: rust-call ABI is subject to change\n   --> $DIR/feature-gate-abi.rs:27:5\n    |\n LL |     extern \"rust-call\" fn m4();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29625\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n-error[E0658]: msp430-interrupt ABI is experimental and subject to change (see issue #38487)\n+error[E0658]: msp430-interrupt ABI is experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:28:5\n    |\n LL |     extern \"msp430-interrupt\" fn m5();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #38487\n    = help: add #![feature(abi_msp430_interrupt)] to the crate attributes to enable\n \n-error[E0658]: PTX ABIs are experimental and subject to change (see issue #38788)\n+error[E0658]: PTX ABIs are experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:29:5\n    |\n LL |     extern \"ptx-kernel\" fn m6();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #38788\n    = help: add #![feature(abi_ptx)] to the crate attributes to enable\n \n-error[E0658]: x86-interrupt ABI is experimental and subject to change (see issue #40180)\n+error[E0658]: x86-interrupt ABI is experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:30:5\n    |\n LL |     extern \"x86-interrupt\" fn m7();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #40180\n    = help: add #![feature(abi_x86_interrupt)] to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n@@ -134,12 +145,13 @@ LL |     extern \"thiscall\" fn m8();\n    |\n    = help: add #![feature(abi_thiscall)] to the crate attributes to enable\n \n-error[E0658]: amdgpu-kernel ABI is experimental and subject to change (see issue #51575)\n+error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:32:5\n    |\n LL |     extern \"amdgpu-kernel\" fn m9();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #51575\n    = help: add #![feature(abi_amdgpu_kernel)] to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n@@ -150,12 +162,13 @@ LL |     extern \"rust-intrinsic\" fn dm1() {}\n    |\n    = help: add #![feature(intrinsics)] to the crate attributes to enable\n \n-error[E0658]: platform intrinsics are experimental and possibly buggy (see issue #27731)\n+error[E0658]: platform intrinsics are experimental and possibly buggy\n   --> $DIR/feature-gate-abi.rs:35:5\n    |\n LL |     extern \"platform-intrinsic\" fn dm2() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #27731\n    = help: add #![feature(platform_intrinsics)] to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n@@ -166,36 +179,40 @@ LL |     extern \"vectorcall\" fn dm3() {}\n    |\n    = help: add #![feature(abi_vectorcall)] to the crate attributes to enable\n \n-error[E0658]: rust-call ABI is subject to change (see issue #29625)\n+error[E0658]: rust-call ABI is subject to change\n   --> $DIR/feature-gate-abi.rs:37:5\n    |\n LL |     extern \"rust-call\" fn dm4() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29625\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n-error[E0658]: msp430-interrupt ABI is experimental and subject to change (see issue #38487)\n+error[E0658]: msp430-interrupt ABI is experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:38:5\n    |\n LL |     extern \"msp430-interrupt\" fn dm5() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #38487\n    = help: add #![feature(abi_msp430_interrupt)] to the crate attributes to enable\n \n-error[E0658]: PTX ABIs are experimental and subject to change (see issue #38788)\n+error[E0658]: PTX ABIs are experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:39:5\n    |\n LL |     extern \"ptx-kernel\" fn dm6() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #38788\n    = help: add #![feature(abi_ptx)] to the crate attributes to enable\n \n-error[E0658]: x86-interrupt ABI is experimental and subject to change (see issue #40180)\n+error[E0658]: x86-interrupt ABI is experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:40:5\n    |\n LL |     extern \"x86-interrupt\" fn dm7() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #40180\n    = help: add #![feature(abi_x86_interrupt)] to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n@@ -206,12 +223,13 @@ LL |     extern \"thiscall\" fn dm8() {}\n    |\n    = help: add #![feature(abi_thiscall)] to the crate attributes to enable\n \n-error[E0658]: amdgpu-kernel ABI is experimental and subject to change (see issue #51575)\n+error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:42:5\n    |\n LL |     extern \"amdgpu-kernel\" fn dm9() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #51575\n    = help: add #![feature(abi_amdgpu_kernel)] to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n@@ -222,12 +240,13 @@ LL |     extern \"rust-intrinsic\" fn m1() {}\n    |\n    = help: add #![feature(intrinsics)] to the crate attributes to enable\n \n-error[E0658]: platform intrinsics are experimental and possibly buggy (see issue #27731)\n+error[E0658]: platform intrinsics are experimental and possibly buggy\n   --> $DIR/feature-gate-abi.rs:50:5\n    |\n LL |     extern \"platform-intrinsic\" fn m2() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #27731\n    = help: add #![feature(platform_intrinsics)] to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n@@ -238,36 +257,40 @@ LL |     extern \"vectorcall\" fn m3() {}\n    |\n    = help: add #![feature(abi_vectorcall)] to the crate attributes to enable\n \n-error[E0658]: rust-call ABI is subject to change (see issue #29625)\n+error[E0658]: rust-call ABI is subject to change\n   --> $DIR/feature-gate-abi.rs:52:5\n    |\n LL |     extern \"rust-call\" fn m4() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29625\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n-error[E0658]: msp430-interrupt ABI is experimental and subject to change (see issue #38487)\n+error[E0658]: msp430-interrupt ABI is experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:53:5\n    |\n LL |     extern \"msp430-interrupt\" fn m5() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #38487\n    = help: add #![feature(abi_msp430_interrupt)] to the crate attributes to enable\n \n-error[E0658]: PTX ABIs are experimental and subject to change (see issue #38788)\n+error[E0658]: PTX ABIs are experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:54:5\n    |\n LL |     extern \"ptx-kernel\" fn m6() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #38788\n    = help: add #![feature(abi_ptx)] to the crate attributes to enable\n \n-error[E0658]: x86-interrupt ABI is experimental and subject to change (see issue #40180)\n+error[E0658]: x86-interrupt ABI is experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:55:5\n    |\n LL |     extern \"x86-interrupt\" fn m7() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #40180\n    = help: add #![feature(abi_x86_interrupt)] to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n@@ -278,12 +301,13 @@ LL |     extern \"thiscall\" fn m8() {}\n    |\n    = help: add #![feature(abi_thiscall)] to the crate attributes to enable\n \n-error[E0658]: amdgpu-kernel ABI is experimental and subject to change (see issue #51575)\n+error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:57:5\n    |\n LL |     extern \"amdgpu-kernel\" fn m9() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #51575\n    = help: add #![feature(abi_amdgpu_kernel)] to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n@@ -294,12 +318,13 @@ LL |     extern \"rust-intrinsic\" fn im1() {}\n    |\n    = help: add #![feature(intrinsics)] to the crate attributes to enable\n \n-error[E0658]: platform intrinsics are experimental and possibly buggy (see issue #27731)\n+error[E0658]: platform intrinsics are experimental and possibly buggy\n   --> $DIR/feature-gate-abi.rs:63:5\n    |\n LL |     extern \"platform-intrinsic\" fn im2() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #27731\n    = help: add #![feature(platform_intrinsics)] to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n@@ -310,36 +335,40 @@ LL |     extern \"vectorcall\" fn im3() {}\n    |\n    = help: add #![feature(abi_vectorcall)] to the crate attributes to enable\n \n-error[E0658]: rust-call ABI is subject to change (see issue #29625)\n+error[E0658]: rust-call ABI is subject to change\n   --> $DIR/feature-gate-abi.rs:65:5\n    |\n LL |     extern \"rust-call\" fn im4() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29625\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n-error[E0658]: msp430-interrupt ABI is experimental and subject to change (see issue #38487)\n+error[E0658]: msp430-interrupt ABI is experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:66:5\n    |\n LL |     extern \"msp430-interrupt\" fn im5() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #38487\n    = help: add #![feature(abi_msp430_interrupt)] to the crate attributes to enable\n \n-error[E0658]: PTX ABIs are experimental and subject to change (see issue #38788)\n+error[E0658]: PTX ABIs are experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:67:5\n    |\n LL |     extern \"ptx-kernel\" fn im6() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #38788\n    = help: add #![feature(abi_ptx)] to the crate attributes to enable\n \n-error[E0658]: x86-interrupt ABI is experimental and subject to change (see issue #40180)\n+error[E0658]: x86-interrupt ABI is experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:68:5\n    |\n LL |     extern \"x86-interrupt\" fn im7() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #40180\n    = help: add #![feature(abi_x86_interrupt)] to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n@@ -350,12 +379,13 @@ LL |     extern \"thiscall\" fn im8() {}\n    |\n    = help: add #![feature(abi_thiscall)] to the crate attributes to enable\n \n-error[E0658]: amdgpu-kernel ABI is experimental and subject to change (see issue #51575)\n+error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:70:5\n    |\n LL |     extern \"amdgpu-kernel\" fn im9() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #51575\n    = help: add #![feature(abi_amdgpu_kernel)] to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n@@ -366,12 +396,13 @@ LL | type A1 = extern \"rust-intrinsic\" fn();\n    |\n    = help: add #![feature(intrinsics)] to the crate attributes to enable\n \n-error[E0658]: platform intrinsics are experimental and possibly buggy (see issue #27731)\n+error[E0658]: platform intrinsics are experimental and possibly buggy\n   --> $DIR/feature-gate-abi.rs:75:11\n    |\n LL | type A2 = extern \"platform-intrinsic\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #27731\n    = help: add #![feature(platform_intrinsics)] to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n@@ -382,36 +413,40 @@ LL | type A3 = extern \"vectorcall\" fn();\n    |\n    = help: add #![feature(abi_vectorcall)] to the crate attributes to enable\n \n-error[E0658]: rust-call ABI is subject to change (see issue #29625)\n+error[E0658]: rust-call ABI is subject to change\n   --> $DIR/feature-gate-abi.rs:77:11\n    |\n LL | type A4 = extern \"rust-call\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29625\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n-error[E0658]: msp430-interrupt ABI is experimental and subject to change (see issue #38487)\n+error[E0658]: msp430-interrupt ABI is experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:78:11\n    |\n LL | type A5 = extern \"msp430-interrupt\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #38487\n    = help: add #![feature(abi_msp430_interrupt)] to the crate attributes to enable\n \n-error[E0658]: PTX ABIs are experimental and subject to change (see issue #38788)\n+error[E0658]: PTX ABIs are experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:79:11\n    |\n LL | type A6 = extern \"ptx-kernel\" fn ();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #38788\n    = help: add #![feature(abi_ptx)] to the crate attributes to enable\n \n-error[E0658]: x86-interrupt ABI is experimental and subject to change (see issue #40180)\n+error[E0658]: x86-interrupt ABI is experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:80:11\n    |\n LL | type A7 = extern \"x86-interrupt\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #40180\n    = help: add #![feature(abi_x86_interrupt)] to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n@@ -422,12 +457,13 @@ LL | type A8 = extern \"thiscall\" fn();\n    |\n    = help: add #![feature(abi_thiscall)] to the crate attributes to enable\n \n-error[E0658]: amdgpu-kernel ABI is experimental and subject to change (see issue #51575)\n+error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:82:11\n    |\n LL | type A9 = extern \"amdgpu-kernel\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #51575\n    = help: add #![feature(abi_amdgpu_kernel)] to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n@@ -438,12 +474,13 @@ LL | extern \"rust-intrinsic\" {}\n    |\n    = help: add #![feature(intrinsics)] to the crate attributes to enable\n \n-error[E0658]: platform intrinsics are experimental and possibly buggy (see issue #27731)\n+error[E0658]: platform intrinsics are experimental and possibly buggy\n   --> $DIR/feature-gate-abi.rs:86:1\n    |\n LL | extern \"platform-intrinsic\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #27731\n    = help: add #![feature(platform_intrinsics)] to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n@@ -454,36 +491,40 @@ LL | extern \"vectorcall\" {}\n    |\n    = help: add #![feature(abi_vectorcall)] to the crate attributes to enable\n \n-error[E0658]: rust-call ABI is subject to change (see issue #29625)\n+error[E0658]: rust-call ABI is subject to change\n   --> $DIR/feature-gate-abi.rs:88:1\n    |\n LL | extern \"rust-call\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29625\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n-error[E0658]: msp430-interrupt ABI is experimental and subject to change (see issue #38487)\n+error[E0658]: msp430-interrupt ABI is experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:89:1\n    |\n LL | extern \"msp430-interrupt\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #38487\n    = help: add #![feature(abi_msp430_interrupt)] to the crate attributes to enable\n \n-error[E0658]: PTX ABIs are experimental and subject to change (see issue #38788)\n+error[E0658]: PTX ABIs are experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:90:1\n    |\n LL | extern \"ptx-kernel\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #38788\n    = help: add #![feature(abi_ptx)] to the crate attributes to enable\n \n-error[E0658]: x86-interrupt ABI is experimental and subject to change (see issue #40180)\n+error[E0658]: x86-interrupt ABI is experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:91:1\n    |\n LL | extern \"x86-interrupt\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #40180\n    = help: add #![feature(abi_x86_interrupt)] to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n@@ -494,12 +535,13 @@ LL | extern \"thiscall\" {}\n    |\n    = help: add #![feature(abi_thiscall)] to the crate attributes to enable\n \n-error[E0658]: amdgpu-kernel ABI is experimental and subject to change (see issue #51575)\n+error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:93:1\n    |\n LL | extern \"amdgpu-kernel\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #51575\n    = help: add #![feature(abi_amdgpu_kernel)] to the crate attributes to enable\n \n error: aborting due to 63 previous errors"}, {"sha": "df7c3ad6b3dc0e2907f5af482421e6bb729a04c0", "filename": "src/test/ui/feature-gates/feature-gate-alloc-error-handler.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-alloc-error-handler.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-alloc-error-handler.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-alloc-error-handler.rs?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -5,7 +5,7 @@\n \n use core::alloc::Layout;\n \n-#[alloc_error_handler] //~ ERROR #[alloc_error_handler] is an unstable feature (see issue #51540)\n+#[alloc_error_handler] //~ ERROR #[alloc_error_handler] is an unstable feature\n fn oom(info: Layout) -> ! {\n     loop {}\n }"}, {"sha": "092fada7d7441976e0f6e5dc8b185dafb8173687", "filename": "src/test/ui/feature-gates/feature-gate-alloc-error-handler.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-alloc-error-handler.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-alloc-error-handler.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-alloc-error-handler.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: #[alloc_error_handler] is an unstable feature (see issue #51540)\n+error[E0658]: #[alloc_error_handler] is an unstable feature\n   --> $DIR/feature-gate-alloc-error-handler.rs:8:1\n    |\n LL | #[alloc_error_handler]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #51540\n    = help: add #![feature(alloc_error_handler)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "5ad379531dcc7319c72e9d6935a4c18424f022d7", "filename": "src/test/ui/feature-gates/feature-gate-allow_fail.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow_fail.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: allow_fail attribute is currently unstable (see issue #46488)\n+error[E0658]: allow_fail attribute is currently unstable\n   --> $DIR/feature-gate-allow_fail.rs:3:1\n    |\n LL | #[allow_fail]\n    | ^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #46488\n    = help: add #![feature(allow_fail)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "89f56869f649ed0075d383014b53d99809f636fe", "filename": "src/test/ui/feature-gates/feature-gate-arbitrary-self-types.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary-self-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary-self-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary-self-types.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,27 +1,30 @@\n-error[E0658]: `Ptr<Self>` cannot be used as the type of `self` without the `arbitrary_self_types` feature (see issue #44874)\n+error[E0658]: `Ptr<Self>` cannot be used as the type of `self` without the `arbitrary_self_types` feature\n   --> $DIR/feature-gate-arbitrary-self-types.rs:16:18\n    |\n LL |     fn foo(self: Ptr<Self>);\n    |                  ^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #44874\n    = help: add #![feature(arbitrary_self_types)] to the crate attributes to enable\n    = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n \n-error[E0658]: `Ptr<Bar>` cannot be used as the type of `self` without the `arbitrary_self_types` feature (see issue #44874)\n+error[E0658]: `Ptr<Bar>` cannot be used as the type of `self` without the `arbitrary_self_types` feature\n   --> $DIR/feature-gate-arbitrary-self-types.rs:22:18\n    |\n LL |     fn foo(self: Ptr<Self>) {}\n    |                  ^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #44874\n    = help: add #![feature(arbitrary_self_types)] to the crate attributes to enable\n    = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n \n-error[E0658]: `std::boxed::Box<Ptr<Bar>>` cannot be used as the type of `self` without the `arbitrary_self_types` feature (see issue #44874)\n+error[E0658]: `std::boxed::Box<Ptr<Bar>>` cannot be used as the type of `self` without the `arbitrary_self_types` feature\n   --> $DIR/feature-gate-arbitrary-self-types.rs:26:18\n    |\n LL |     fn bar(self: Box<Ptr<Self>>) {}\n    |                  ^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #44874\n    = help: add #![feature(arbitrary_self_types)] to the crate attributes to enable\n    = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n "}, {"sha": "a274926acc7da922e92a67fc55f0827779d8a417", "filename": "src/test/ui/feature-gates/feature-gate-arbitrary_self_types-raw-pointer.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary_self_types-raw-pointer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary_self_types-raw-pointer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary_self_types-raw-pointer.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,27 +1,30 @@\n-error[E0658]: `*const Self` cannot be used as the type of `self` without the `arbitrary_self_types` feature (see issue #44874)\n+error[E0658]: `*const Self` cannot be used as the type of `self` without the `arbitrary_self_types` feature\n   --> $DIR/feature-gate-arbitrary_self_types-raw-pointer.rs:9:18\n    |\n LL |     fn bar(self: *const Self);\n    |                  ^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #44874\n    = help: add #![feature(arbitrary_self_types)] to the crate attributes to enable\n    = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n \n-error[E0658]: `*const Foo` cannot be used as the type of `self` without the `arbitrary_self_types` feature (see issue #44874)\n+error[E0658]: `*const Foo` cannot be used as the type of `self` without the `arbitrary_self_types` feature\n   --> $DIR/feature-gate-arbitrary_self_types-raw-pointer.rs:4:18\n    |\n LL |     fn foo(self: *const Self) {}\n    |                  ^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #44874\n    = help: add #![feature(arbitrary_self_types)] to the crate attributes to enable\n    = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n \n-error[E0658]: `*const ()` cannot be used as the type of `self` without the `arbitrary_self_types` feature (see issue #44874)\n+error[E0658]: `*const ()` cannot be used as the type of `self` without the `arbitrary_self_types` feature\n   --> $DIR/feature-gate-arbitrary_self_types-raw-pointer.rs:14:18\n    |\n LL |     fn bar(self: *const Self) {}\n    |                  ^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #44874\n    = help: add #![feature(arbitrary_self_types)] to the crate attributes to enable\n    = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n "}, {"sha": "86f15482b27c131bbfaaf9c060143a91f64d438f", "filename": "src/test/ui/feature-gates/feature-gate-asm.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: inline assembly is not stable enough for use and is subject to change (see issue #29722)\n+error[E0658]: inline assembly is not stable enough for use and is subject to change\n   --> $DIR/feature-gate-asm.rs:3:9\n    |\n LL |         asm!(\"\");\n    |         ^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29722\n    = help: add #![feature(asm)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "bbd1def2260e226d946448ae30f9d226af97ff90", "filename": "src/test/ui/feature-gates/feature-gate-asm2.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: inline assembly is not stable enough for use and is subject to change (see issue #29722)\n+error[E0658]: inline assembly is not stable enough for use and is subject to change\n   --> $DIR/feature-gate-asm2.rs:5:26\n    |\n LL |         println!(\"{:?}\", asm!(\"\"));\n    |                          ^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29722\n    = help: add #![feature(asm)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "04d3b917675eb04845fff6223f534699b400db7e", "filename": "src/test/ui/feature-gates/feature-gate-assoc-type-defaults.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-assoc-type-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-assoc-type-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-assoc-type-defaults.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: associated type defaults are unstable (see issue #29661)\n+error[E0658]: associated type defaults are unstable\n   --> $DIR/feature-gate-assoc-type-defaults.rs:4:5\n    |\n LL |     type Bar = u8;\n    |     ^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29661\n    = help: add #![feature(associated_type_defaults)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "c2674e9cf7875d6f69e77215b3db67ab6f3b892d", "filename": "src/test/ui/feature-gates/feature-gate-async-await-2015-edition.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await-2015-edition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await-2015-edition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await-2015-edition.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -16,12 +16,13 @@ error[E0425]: cannot find value `async` in this scope\n LL |     let _ = async || { true };\n    |             ^^^^^ not found in this scope\n \n-error[E0658]: async fn is unstable (see issue #50547)\n+error[E0658]: async fn is unstable\n   --> $DIR/feature-gate-async-await-2015-edition.rs:5:1\n    |\n LL | async fn foo() {}\n    | ^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #50547\n    = help: add #![feature(async_await)] to the crate attributes to enable\n \n error: aborting due to 4 previous errors"}, {"sha": "5a6d65cad34d87f3575a708ff87fbda946ccb80a", "filename": "src/test/ui/feature-gates/feature-gate-async-await.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,25 +1,28 @@\n-error[E0658]: async fn is unstable (see issue #50547)\n+error[E0658]: async fn is unstable\n   --> $DIR/feature-gate-async-await.rs:5:1\n    |\n LL | async fn foo() {}\n    | ^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #50547\n    = help: add #![feature(async_await)] to the crate attributes to enable\n \n-error[E0658]: async blocks are unstable (see issue #50547)\n+error[E0658]: async blocks are unstable\n   --> $DIR/feature-gate-async-await.rs:8:13\n    |\n LL |     let _ = async {};\n    |             ^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #50547\n    = help: add #![feature(async_await)] to the crate attributes to enable\n \n-error[E0658]: async closures are unstable (see issue #50547)\n+error[E0658]: async closures are unstable\n   --> $DIR/feature-gate-async-await.rs:9:13\n    |\n LL |     let _ = async || {};\n    |             ^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #50547\n    = help: add #![feature(async_await)] to the crate attributes to enable\n \n error: aborting due to 3 previous errors"}, {"sha": "887cbb15724388aedf4b1bfcd8a1e344e68ed951", "filename": "src/test/ui/feature-gates/feature-gate-box-expr.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box-expr.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: box expression syntax is experimental; you can call `Box::new` instead. (see issue #49733)\n+error[E0658]: box expression syntax is experimental; you can call `Box::new` instead\n   --> $DIR/feature-gate-box-expr.rs:12:13\n    |\n LL |     let x = box 'c';\n    |             ^^^^^^^\n    |\n+   = note: for more information, see tracking issue #49733\n    = help: add #![feature(box_syntax)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "bdd0204d1bbb3e423c1dc72fc9735e3c68893f8a", "filename": "src/test/ui/feature-gates/feature-gate-box_patterns.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_patterns.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: box pattern syntax is experimental (see issue #29641)\n+error[E0658]: box pattern syntax is experimental\n   --> $DIR/feature-gate-box_patterns.rs:2:9\n    |\n LL |     let box x = Box::new('c');\n    |         ^^^^^\n    |\n+   = note: for more information, see tracking issue #29641\n    = help: add #![feature(box_patterns)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "778660cc0b54991d1b456e33f18095a108f091d3", "filename": "src/test/ui/feature-gates/feature-gate-box_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_syntax.rs?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -2,5 +2,5 @@\n \n fn main() {\n     let x = box 3;\n-    //~^ ERROR box expression syntax is experimental; you can call `Box::new` instead.\n+    //~^ ERROR box expression syntax is experimental; you can call `Box::new` instead\n }"}, {"sha": "41524617a9f3991c58bad29a3e0421a04b69e7ea", "filename": "src/test/ui/feature-gates/feature-gate-box_syntax.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_syntax.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: box expression syntax is experimental; you can call `Box::new` instead. (see issue #49733)\n+error[E0658]: box expression syntax is experimental; you can call `Box::new` instead\n   --> $DIR/feature-gate-box_syntax.rs:4:13\n    |\n LL |     let x = box 3;\n    |             ^^^^^\n    |\n+   = note: for more information, see tracking issue #49733\n    = help: add #![feature(box_syntax)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "827ac3af8f1fabb76cf30a5ab9a39f8105bf1aa5", "filename": "src/test/ui/feature-gates/feature-gate-cfg-target-has-atomic.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.rs?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -13,78 +13,78 @@ trait Sized {}\n trait Copy {}\n \n #[cfg(target_has_atomic = \"8\")]\n-//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n pub unsafe fn atomic_u8(x: *mut u8) {\n     atomic_xadd(x, 1);\n     atomic_xadd(x, 1);\n }\n #[cfg(target_has_atomic = \"8\")]\n-//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n pub unsafe fn atomic_i8(x: *mut i8) {\n     atomic_xadd(x, 1);\n }\n #[cfg(target_has_atomic = \"16\")]\n-//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n pub unsafe fn atomic_u16(x: *mut u16) {\n     atomic_xadd(x, 1);\n }\n #[cfg(target_has_atomic = \"16\")]\n-//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n pub unsafe fn atomic_i16(x: *mut i16) {\n     atomic_xadd(x, 1);\n }\n #[cfg(target_has_atomic = \"32\")]\n-//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n pub unsafe fn atomic_u32(x: *mut u32) {\n     atomic_xadd(x, 1);\n }\n #[cfg(target_has_atomic = \"32\")]\n-//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n pub unsafe fn atomic_i32(x: *mut i32) {\n     atomic_xadd(x, 1);\n }\n #[cfg(target_has_atomic = \"64\")]\n-//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n pub unsafe fn atomic_u64(x: *mut u64) {\n     atomic_xadd(x, 1);\n }\n #[cfg(target_has_atomic = \"64\")]\n-//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n pub unsafe fn atomic_i64(x: *mut i64) {\n     atomic_xadd(x, 1);\n }\n #[cfg(target_has_atomic = \"128\")]\n-//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n pub unsafe fn atomic_u128(x: *mut u128) {\n     atomic_xadd(x, 1);\n }\n #[cfg(target_has_atomic = \"128\")]\n-//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n pub unsafe fn atomic_i128(x: *mut i128) {\n     atomic_xadd(x, 1);\n }\n #[cfg(target_has_atomic = \"ptr\")]\n-//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n pub unsafe fn atomic_usize(x: *mut usize) {\n     atomic_xadd(x, 1);\n }\n #[cfg(target_has_atomic = \"ptr\")]\n-//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n pub unsafe fn atomic_isize(x: *mut isize) {\n     atomic_xadd(x, 1);\n }\n \n fn main() {\n     cfg!(target_has_atomic = \"8\");\n-    //~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+    //~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n     cfg!(target_has_atomic = \"16\");\n-    //~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+    //~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n     cfg!(target_has_atomic = \"32\");\n-    //~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+    //~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n     cfg!(target_has_atomic = \"64\");\n-    //~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+    //~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n     cfg!(target_has_atomic = \"128\");\n-    //~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+    //~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n     cfg!(target_has_atomic = \"ptr\");\n-    //~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+    //~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n }"}, {"sha": "a3666025f101ef013cad7db928ff50af986abf47", "filename": "src/test/ui/feature-gates/feature-gate-cfg-target-has-atomic.stderr", "status": "modified", "additions": 36, "deletions": 18, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,145 +1,163 @@\n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n   --> $DIR/feature-gate-cfg-target-has-atomic.rs:15:7\n    |\n LL | #[cfg(target_has_atomic = \"8\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #32976\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n   --> $DIR/feature-gate-cfg-target-has-atomic.rs:21:7\n    |\n LL | #[cfg(target_has_atomic = \"8\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #32976\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n   --> $DIR/feature-gate-cfg-target-has-atomic.rs:26:7\n    |\n LL | #[cfg(target_has_atomic = \"16\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #32976\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n   --> $DIR/feature-gate-cfg-target-has-atomic.rs:31:7\n    |\n LL | #[cfg(target_has_atomic = \"16\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #32976\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n   --> $DIR/feature-gate-cfg-target-has-atomic.rs:36:7\n    |\n LL | #[cfg(target_has_atomic = \"32\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #32976\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n   --> $DIR/feature-gate-cfg-target-has-atomic.rs:41:7\n    |\n LL | #[cfg(target_has_atomic = \"32\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #32976\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n   --> $DIR/feature-gate-cfg-target-has-atomic.rs:46:7\n    |\n LL | #[cfg(target_has_atomic = \"64\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #32976\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n   --> $DIR/feature-gate-cfg-target-has-atomic.rs:51:7\n    |\n LL | #[cfg(target_has_atomic = \"64\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #32976\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n   --> $DIR/feature-gate-cfg-target-has-atomic.rs:56:7\n    |\n LL | #[cfg(target_has_atomic = \"128\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #32976\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n   --> $DIR/feature-gate-cfg-target-has-atomic.rs:61:7\n    |\n LL | #[cfg(target_has_atomic = \"128\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #32976\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n   --> $DIR/feature-gate-cfg-target-has-atomic.rs:66:7\n    |\n LL | #[cfg(target_has_atomic = \"ptr\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #32976\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n   --> $DIR/feature-gate-cfg-target-has-atomic.rs:71:7\n    |\n LL | #[cfg(target_has_atomic = \"ptr\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #32976\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n   --> $DIR/feature-gate-cfg-target-has-atomic.rs:78:10\n    |\n LL |     cfg!(target_has_atomic = \"8\");\n    |          ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #32976\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n   --> $DIR/feature-gate-cfg-target-has-atomic.rs:80:10\n    |\n LL |     cfg!(target_has_atomic = \"16\");\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #32976\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n   --> $DIR/feature-gate-cfg-target-has-atomic.rs:82:10\n    |\n LL |     cfg!(target_has_atomic = \"32\");\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #32976\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n   --> $DIR/feature-gate-cfg-target-has-atomic.rs:84:10\n    |\n LL |     cfg!(target_has_atomic = \"64\");\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #32976\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n   --> $DIR/feature-gate-cfg-target-has-atomic.rs:86:10\n    |\n LL |     cfg!(target_has_atomic = \"128\");\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #32976\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n   --> $DIR/feature-gate-cfg-target-has-atomic.rs:88:10\n    |\n LL |     cfg!(target_has_atomic = \"ptr\");\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #32976\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n error: aborting due to 18 previous errors"}, {"sha": "d44f78d4fab27fb179fbf3307ff7a10b65c0a625", "filename": "src/test/ui/feature-gates/feature-gate-cfg-target-thread-local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-thread-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-thread-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-thread-local.rs?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -7,7 +7,7 @@ extern crate cfg_target_thread_local;\n \n extern {\n     #[cfg_attr(target_thread_local, thread_local)]\n-    //~^ `cfg(target_thread_local)` is experimental and subject to change (see issue #29594)\n+    //~^ `cfg(target_thread_local)` is experimental and subject to change\n \n     static FOO: u32;\n }"}, {"sha": "450980ea80611a4e8cb8e32483b3a58f50feece5", "filename": "src/test/ui/feature-gates/feature-gate-cfg-target-thread-local.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-thread-local.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-thread-local.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-thread-local.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: `cfg(target_thread_local)` is experimental and subject to change (see issue #29594)\n+error[E0658]: `cfg(target_thread_local)` is experimental and subject to change\n   --> $DIR/feature-gate-cfg-target-thread-local.rs:9:16\n    |\n LL |     #[cfg_attr(target_thread_local, thread_local)]\n    |                ^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29594\n    = help: add #![feature(cfg_target_thread_local)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "7368e1ed5204bb3239342d2f6143d19f7bbdaaf7", "filename": "src/test/ui/feature-gates/feature-gate-concat_idents.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,17 +1,19 @@\n-error[E0658]: `concat_idents` is not stable enough for use and is subject to change (see issue #29599)\n+error[E0658]: `concat_idents` is not stable enough for use and is subject to change\n   --> $DIR/feature-gate-concat_idents.rs:5:13\n    |\n LL |     let a = concat_idents!(X, Y_1);\n    |             ^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29599\n    = help: add #![feature(concat_idents)] to the crate attributes to enable\n \n-error[E0658]: `concat_idents` is not stable enough for use and is subject to change (see issue #29599)\n+error[E0658]: `concat_idents` is not stable enough for use and is subject to change\n   --> $DIR/feature-gate-concat_idents.rs:6:13\n    |\n LL |     let b = concat_idents!(X, Y_2);\n    |             ^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29599\n    = help: add #![feature(concat_idents)] to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "0be8713d7644f154fb291545c1d68c0b31c58456", "filename": "src/test/ui/feature-gates/feature-gate-concat_idents2.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents2.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: `concat_idents` is not stable enough for use and is subject to change (see issue #29599)\n+error[E0658]: `concat_idents` is not stable enough for use and is subject to change\n   --> $DIR/feature-gate-concat_idents2.rs:4:5\n    |\n LL |     concat_idents!(a, b);\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29599\n    = help: add #![feature(concat_idents)] to the crate attributes to enable\n \n error[E0425]: cannot find value `ab` in this scope"}, {"sha": "fbf97cb113c442a0a3b7c399530177654026d7f9", "filename": "src/test/ui/feature-gates/feature-gate-concat_idents3.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents3.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,17 +1,19 @@\n-error[E0658]: `concat_idents` is not stable enough for use and is subject to change (see issue #29599)\n+error[E0658]: `concat_idents` is not stable enough for use and is subject to change\n   --> $DIR/feature-gate-concat_idents3.rs:7:20\n    |\n LL |     assert_eq!(10, concat_idents!(X, Y_1));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29599\n    = help: add #![feature(concat_idents)] to the crate attributes to enable\n \n-error[E0658]: `concat_idents` is not stable enough for use and is subject to change (see issue #29599)\n+error[E0658]: `concat_idents` is not stable enough for use and is subject to change\n   --> $DIR/feature-gate-concat_idents3.rs:8:20\n    |\n LL |     assert_eq!(20, concat_idents!(X, Y_2));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29599\n    = help: add #![feature(concat_idents)] to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "7633206d565c4acf4092656ee27059119b657f3c", "filename": "src/test/ui/feature-gates/feature-gate-const_fn.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -16,20 +16,22 @@ error[E0379]: trait fns cannot be declared const\n LL |     const fn foo() -> u32 { 0 }\n    |     ^^^^^ trait fns cannot be const\n \n-error[E0658]: const fn is unstable (see issue #57563)\n+error[E0658]: const fn is unstable\n   --> $DIR/feature-gate-const_fn.rs:6:5\n    |\n LL |     const fn foo() -> u32;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0658]: const fn is unstable (see issue #57563)\n+error[E0658]: const fn is unstable\n   --> $DIR/feature-gate-const_fn.rs:8:5\n    |\n LL |     const fn bar() -> u32 { 0 }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n error: aborting due to 5 previous errors"}, {"sha": "0882d9294c3a786fc33a66315d1f206d9511c02f", "filename": "src/test/ui/feature-gates/feature-gate-const_generics.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,17 +1,19 @@\n-error[E0658]: const generics are unstable (see issue #44580)\n+error[E0658]: const generics are unstable\n   --> $DIR/feature-gate-const_generics.rs:1:14\n    |\n LL | fn foo<const X: ()>() {}\n    |              ^\n    |\n+   = note: for more information, see tracking issue #44580\n    = help: add #![feature(const_generics)] to the crate attributes to enable\n \n-error[E0658]: const generics are unstable (see issue #44580)\n+error[E0658]: const generics are unstable\n   --> $DIR/feature-gate-const_generics.rs:3:18\n    |\n LL | struct Foo<const X: usize>([(); X]);\n    |                  ^\n    |\n+   = note: for more information, see tracking issue #44580\n    = help: add #![feature(const_generics)] to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "6a5bbec77fdb9a3272c90d42c8c74aa2ed5f784a", "filename": "src/test/ui/feature-gates/feature-gate-const_transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_transmute.rs?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -4,6 +4,6 @@ use std::mem;\n struct Foo(u32);\n \n const TRANSMUTED_U32: u32 = unsafe { mem::transmute(Foo(3)) };\n-//~^ ERROR The use of std::mem::transmute() is gated in constants (see issue #53605)\n+//~^ ERROR The use of std::mem::transmute() is gated in constants\n \n fn main() {}"}, {"sha": "9a627690f9d4c7cac86fbbc72bcf6fcb0fba0970", "filename": "src/test/ui/feature-gates/feature-gate-const_transmute.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_transmute.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: The use of std::mem::transmute() is gated in constants (see issue #53605)\n+error[E0658]: The use of std::mem::transmute() is gated in constants\n   --> $DIR/feature-gate-const_transmute.rs:6:38\n    |\n LL | const TRANSMUTED_U32: u32 = unsafe { mem::transmute(Foo(3)) };\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #53605\n    = help: add #![feature(const_transmute)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "0ccc804fc9154bcd084d668ad1e23a5a6a9c8b93", "filename": "src/test/ui/feature-gates/feature-gate-crate_visibility_modifier.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_visibility_modifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_visibility_modifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_visibility_modifier.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: `crate` visibility modifier is experimental (see issue #53120)\n+error[E0658]: `crate` visibility modifier is experimental\n   --> $DIR/feature-gate-crate_visibility_modifier.rs:1:1\n    |\n LL | crate struct Bender {\n    | ^^^^^\n    |\n+   = note: for more information, see tracking issue #53120\n    = help: add #![feature(crate_visibility_modifier)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "bd7721e17340034dcc7d8145157353490f1420d6", "filename": "src/test/ui/feature-gates/feature-gate-custom_attribute.stderr", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,105 +1,118 @@\n-error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute.rs:7:3\n    |\n LL | #[fake_attr]\n    |   ^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute.rs:8:3\n    |\n LL | #[fake_attr(100)]\n    |   ^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute.rs:9:3\n    |\n LL | #[fake_attr(1, 2, 3)]\n    |   ^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute.rs:10:3\n    |\n LL | #[fake_attr(\"hello\")]\n    |   ^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute.rs:11:3\n    |\n LL | #[fake_attr(name = \"hello\")]\n    |   ^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute.rs:12:3\n    |\n LL | #[fake_attr(1, \"hi\", key = 12, true, false)]\n    |   ^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute.rs:13:3\n    |\n LL | #[fake_attr(key = \"hello\", val = 10)]\n    |   ^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute.rs:14:3\n    |\n LL | #[fake_attr(key(\"hello\"), val(10))]\n    |   ^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute.rs:15:3\n    |\n LL | #[fake_attr(enabled = true, disabled = false)]\n    |   ^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute.rs:16:3\n    |\n LL | #[fake_attr(true)]\n    |   ^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute.rs:17:3\n    |\n LL | #[fake_attr(pi = 3.14159)]\n    |   ^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute.rs:18:3\n    |\n LL | #[fake_attr(b\"hi\")]\n    |   ^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error[E0658]: The attribute `fake_doc` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `fake_doc` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute.rs:19:3\n    |\n LL | #[fake_doc(r\"doc\")]\n    |   ^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error: aborting due to 13 previous errors"}, {"sha": "159d042e6dbc0aab19efec858961748fef5eb840", "filename": "src/test/ui/feature-gates/feature-gate-custom_attribute2.stderr", "status": "modified", "additions": 34, "deletions": 17, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute2.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,137 +1,154 @@\n-error[E0658]: The attribute `lt_struct` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `lt_struct` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute2.rs:6:13\n    |\n LL | struct StLt<#[lt_struct] 'a>(&'a u32);\n    |             ^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error[E0658]: The attribute `ty_struct` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `ty_struct` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute2.rs:8:13\n    |\n LL | struct StTy<#[ty_struct] I>(I);\n    |             ^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error[E0658]: The attribute `lt_enum` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `lt_enum` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute2.rs:11:11\n    |\n LL | enum EnLt<#[lt_enum] 'b> { A(&'b u32), B }\n    |           ^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error[E0658]: The attribute `ty_enum` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `ty_enum` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute2.rs:13:11\n    |\n LL | enum EnTy<#[ty_enum] J> { A(J), B }\n    |           ^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error[E0658]: The attribute `lt_trait` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `lt_trait` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute2.rs:16:12\n    |\n LL | trait TrLt<#[lt_trait] 'c> { fn foo(&self, _: &'c [u32]) -> &'c u32; }\n    |            ^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error[E0658]: The attribute `ty_trait` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `ty_trait` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute2.rs:18:12\n    |\n LL | trait TrTy<#[ty_trait] K> { fn foo(&self, _: K); }\n    |            ^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error[E0658]: The attribute `lt_type` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `lt_type` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute2.rs:21:11\n    |\n LL | type TyLt<#[lt_type] 'd> = &'d u32;\n    |           ^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error[E0658]: The attribute `ty_type` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `ty_type` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute2.rs:23:11\n    |\n LL | type TyTy<#[ty_type] L> = (L, );\n    |           ^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error[E0658]: The attribute `lt_inherent` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `lt_inherent` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute2.rs:26:6\n    |\n LL | impl<#[lt_inherent] 'e> StLt<'e> { }\n    |      ^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error[E0658]: The attribute `ty_inherent` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `ty_inherent` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute2.rs:28:6\n    |\n LL | impl<#[ty_inherent] M> StTy<M> { }\n    |      ^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error[E0658]: The attribute `lt_impl_for` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `lt_impl_for` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute2.rs:31:6\n    |\n LL | impl<#[lt_impl_for] 'f> TrLt<'f> for StLt<'f> {\n    |      ^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error[E0658]: The attribute `ty_impl_for` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `ty_impl_for` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute2.rs:35:6\n    |\n LL | impl<#[ty_impl_for] N> TrTy<N> for StTy<N> {\n    |      ^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error[E0658]: The attribute `lt_fn` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `lt_fn` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute2.rs:40:9\n    |\n LL | fn f_lt<#[lt_fn] 'g>(_: &'g [u32]) -> &'g u32 { loop { } }\n    |         ^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error[E0658]: The attribute `ty_fn` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `ty_fn` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute2.rs:42:9\n    |\n LL | fn f_ty<#[ty_fn] O>(_: O) { }\n    |         ^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error[E0658]: The attribute `lt_meth` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `lt_meth` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute2.rs:46:13\n    |\n LL |     fn m_lt<#[lt_meth] 'h>(_: &'h [u32]) -> &'h u32 { loop { } }\n    |             ^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error[E0658]: The attribute `ty_meth` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `ty_meth` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute2.rs:48:13\n    |\n LL |     fn m_ty<#[ty_meth] P>(_: P) { }\n    |             ^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error[E0658]: The attribute `lt_hof` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `lt_hof` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute2.rs:53:19\n    |\n LL |     where Q: for <#[lt_hof] 'i> Fn(&'i [u32]) -> &'i u32\n    |                   ^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error: aborting due to 17 previous errors"}, {"sha": "21a9ba5eefd98627ad935fb1abe55ee191714637", "filename": "src/test/ui/feature-gates/feature-gate-custom_test_frameworks.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_test_frameworks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_test_frameworks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_test_frameworks.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: custom test frameworks are an unstable feature (see issue #50297)\n+error[E0658]: custom test frameworks are an unstable feature\n   --> $DIR/feature-gate-custom_test_frameworks.rs:1:1\n    |\n LL | #![test_runner(main)]\n    | ^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #50297\n    = help: add #![feature(custom_test_frameworks)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "d002c5dbbd2db60129306fde7cb8ef9e37f3a557", "filename": "src/test/ui/feature-gates/feature-gate-decl_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-decl_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-decl_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-decl_macro.rs?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,5 +1,5 @@\n #![allow(unused_macros)]\n \n-macro m() {} //~ ERROR `macro` is experimental (see issue #39412)\n+macro m() {} //~ ERROR `macro` is experimental\n \n fn main() {}"}, {"sha": "75811a8648c74a44d24f1baa8df6629e1d5e0ede", "filename": "src/test/ui/feature-gates/feature-gate-decl_macro.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-decl_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-decl_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-decl_macro.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: `macro` is experimental (see issue #39412)\n+error[E0658]: `macro` is experimental\n   --> $DIR/feature-gate-decl_macro.rs:3:1\n    |\n LL | macro m() {}\n    | ^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #39412\n    = help: add #![feature(decl_macro)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "ce7305a7d220e55bfce13c2bf0871397f09e0c7a", "filename": "src/test/ui/feature-gates/feature-gate-doc_alias.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_alias.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: #[doc(alias = \"...\")] is experimental (see issue #50146)\n+error[E0658]: #[doc(alias = \"...\")] is experimental\n   --> $DIR/feature-gate-doc_alias.rs:1:1\n    |\n LL | #[doc(alias = \"foo\")]\n    | ^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #50146\n    = help: add #![feature(doc_alias)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "9766bd7ec2f5e4d7f1068aec99ea9a7a1b96f19b", "filename": "src/test/ui/feature-gates/feature-gate-doc_cfg-cfg-rustdoc.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_cfg-cfg-rustdoc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_cfg-cfg-rustdoc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_cfg-cfg-rustdoc.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: `cfg(rustdoc)` is experimental and subject to change (see issue #43781)\n+error[E0658]: `cfg(rustdoc)` is experimental and subject to change\n   --> $DIR/feature-gate-doc_cfg-cfg-rustdoc.rs:1:7\n    |\n LL | #[cfg(rustdoc)]\n    |       ^^^^^^^\n    |\n+   = note: for more information, see tracking issue #43781\n    = help: add #![feature(doc_cfg)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "e2fde6ddf132121aa214d1c068f3a2d3a3d6446f", "filename": "src/test/ui/feature-gates/feature-gate-doc_cfg.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_cfg.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: #[doc(cfg(...))] is experimental (see issue #43781)\n+error[E0658]: #[doc(cfg(...))] is experimental\n   --> $DIR/feature-gate-doc_cfg.rs:1:1\n    |\n LL | #[doc(cfg(unix))]\n    | ^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #43781\n    = help: add #![feature(doc_cfg)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "1416b86f75b7adea70fec978d77d40460cf2e836", "filename": "src/test/ui/feature-gates/feature-gate-doc_keyword.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_keyword.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: #[doc(keyword = \"...\")] is experimental (see issue #51315)\n+error[E0658]: #[doc(keyword = \"...\")] is experimental\n   --> $DIR/feature-gate-doc_keyword.rs:1:1\n    |\n LL | #[doc(keyword = \"match\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #51315\n    = help: add #![feature(doc_keyword)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "c5063d3e94d224a6e6d5a018439a73fdea49c87e", "filename": "src/test/ui/feature-gates/feature-gate-doc_masked.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_masked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_masked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_masked.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: #[doc(masked)] is experimental (see issue #44027)\n+error[E0658]: #[doc(masked)] is experimental\n   --> $DIR/feature-gate-doc_masked.rs:1:1\n    |\n LL | #[doc(masked)]\n    | ^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #44027\n    = help: add #![feature(doc_masked)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "addc9685204a9f9a342987e158c23b15915f32a6", "filename": "src/test/ui/feature-gates/feature-gate-doc_spotlight.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_spotlight.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_spotlight.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_spotlight.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: #[doc(spotlight)] is experimental (see issue #45040)\n+error[E0658]: #[doc(spotlight)] is experimental\n   --> $DIR/feature-gate-doc_spotlight.rs:1:1\n    |\n LL | #[doc(spotlight)]\n    | ^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #45040\n    = help: add #![feature(doc_spotlight)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "a14520dbb5afdd95ab0bc02eec9f5ab20517a3f1", "filename": "src/test/ui/feature-gates/feature-gate-dropck-ugeh.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-dropck-ugeh.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-dropck-ugeh.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-dropck-ugeh.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: unsafe_destructor_blind_to_params has been replaced by may_dangle and will be removed in the future (see issue #28498)\n+error[E0658]: unsafe_destructor_blind_to_params has been replaced by may_dangle and will be removed in the future\n   --> $DIR/feature-gate-dropck-ugeh.rs:16:5\n    |\n LL |     #[unsafe_destructor_blind_to_params] // This is the UGEH attribute\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #28498\n    = help: add #![feature(dropck_parametricity)] to the crate attributes to enable\n \n warning: use of deprecated attribute `dropck_parametricity`: unsafe_destructor_blind_to_params has been replaced by may_dangle and will be removed in the future. See https://github.com/rust-lang/rust/issues/34761"}, {"sha": "f02ad439c813d2409546156042d4853b7815ac45", "filename": "src/test/ui/feature-gates/feature-gate-exclusive-range-pattern.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exclusive-range-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exclusive-range-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exclusive-range-pattern.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: exclusive range pattern syntax is experimental (see issue #37854)\n+error[E0658]: exclusive range pattern syntax is experimental\n   --> $DIR/feature-gate-exclusive-range-pattern.rs:3:9\n    |\n LL |         0 .. 3 => {}\n    |         ^^^^^^\n    |\n+   = note: for more information, see tracking issue #37854\n    = help: add #![feature(exclusive_range_pattern)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "8dc76b55e0f30ad1f82cace8332a74536e2cd24d", "filename": "src/test/ui/feature-gates/feature-gate-existential-type.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-existential-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-existential-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-existential-type.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,17 +1,19 @@\n-error[E0658]: existential types are unstable (see issue #34511)\n+error[E0658]: existential types are unstable\n   --> $DIR/feature-gate-existential-type.rs:3:1\n    |\n LL | existential type Foo: std::fmt::Debug;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #34511\n    = help: add #![feature(existential_type)] to the crate attributes to enable\n \n-error[E0658]: existential types are unstable (see issue #34511)\n+error[E0658]: existential types are unstable\n   --> $DIR/feature-gate-existential-type.rs:11:5\n    |\n LL |     existential type Baa: std::fmt::Debug;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #34511\n    = help: add #![feature(existential_type)] to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "8b4677560cc7bbc7da89107f0dbc2b77ceb1dc55", "filename": "src/test/ui/feature-gates/feature-gate-extern_types.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_types.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: extern types are experimental (see issue #43467)\n+error[E0658]: extern types are experimental\n   --> $DIR/feature-gate-extern_types.rs:2:5\n    |\n LL |     type T;\n    |     ^^^^^^^\n    |\n+   = note: for more information, see tracking issue #43467\n    = help: add #![feature(extern_types)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "a19966c215d90468de973c468fc33f6cebff4eff", "filename": "src/test/ui/feature-gates/feature-gate-external_doc.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-external_doc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-external_doc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-external_doc.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: #[doc(include = \"...\")] is experimental (see issue #44732)\n+error[E0658]: #[doc(include = \"...\")] is experimental\n   --> $DIR/feature-gate-external_doc.rs:1:1\n    |\n LL | #[doc(include=\"asdf.md\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #44732\n    = help: add #![feature(external_doc)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "2ea60029492afb456e39aa508efddb5753e0dccc", "filename": "src/test/ui/feature-gates/feature-gate-ffi_returns_twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_returns_twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_returns_twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_returns_twice.rs?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -2,6 +2,6 @@\n #![crate_type = \"lib\"]\n \n extern {\n-    #[ffi_returns_twice] //~ ERROR the `#[ffi_returns_twice]` attribute is an experimental feature (see issue #58314)\n+    #[ffi_returns_twice] //~ ERROR the `#[ffi_returns_twice]` attribute is an experimental feature\n     pub fn foo();\n }"}, {"sha": "28f75c9e8ac17eae00c88fac0a6e76d2782f0daf", "filename": "src/test/ui/feature-gates/feature-gate-ffi_returns_twice.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_returns_twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_returns_twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_returns_twice.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: the `#[ffi_returns_twice]` attribute is an experimental feature (see issue #58314)\n+error[E0658]: the `#[ffi_returns_twice]` attribute is an experimental feature\n   --> $DIR/feature-gate-ffi_returns_twice.rs:5:5\n    |\n LL |     #[ffi_returns_twice]\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #58314\n    = help: add #![feature(ffi_returns_twice)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "9f83957e1360732e77571449c2b18b7520a890d6", "filename": "src/test/ui/feature-gates/feature-gate-fundamental.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-fundamental.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-fundamental.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-fundamental.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: the `#[fundamental]` attribute is an experimental feature (see issue #29635)\n+error[E0658]: the `#[fundamental]` attribute is an experimental feature\n   --> $DIR/feature-gate-fundamental.rs:1:1\n    |\n LL | #[fundamental]\n    | ^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29635\n    = help: add #![feature(fundamental)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "f3ca62b5df720fc211139c4a49be1c1a25a46511", "filename": "src/test/ui/feature-gates/feature-gate-generators.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generators.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generators.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generators.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: yield syntax is experimental (see issue #43122)\n+error[E0658]: yield syntax is experimental\n   --> $DIR/feature-gate-generators.rs:2:5\n    |\n LL |     yield true;\n    |     ^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #43122\n    = help: add #![feature(generators)] to the crate attributes to enable\n \n error[E0627]: yield statement outside of generator literal"}, {"sha": "2818deca3cc5ebda8a5b3811e469a819d67b72a1", "filename": "src/test/ui/feature-gates/feature-gate-generic_associated_types.stderr", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,57 +1,64 @@\n-error[E0658]: generic associated types are unstable (see issue #44265)\n+error[E0658]: generic associated types are unstable\n   --> $DIR/feature-gate-generic_associated_types.rs:4:5\n    |\n LL |     type Pointer<T>: Deref<Target = T>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #44265\n    = help: add #![feature(generic_associated_types)] to the crate attributes to enable\n \n-error[E0658]: generic associated types are unstable (see issue #44265)\n+error[E0658]: generic associated types are unstable\n   --> $DIR/feature-gate-generic_associated_types.rs:6:5\n    |\n LL |     type Pointer2<T>: Deref<Target = T> where T: Clone, U: Clone;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #44265\n    = help: add #![feature(generic_associated_types)] to the crate attributes to enable\n \n-error[E0658]: where clauses on associated types are unstable (see issue #44265)\n+error[E0658]: where clauses on associated types are unstable\n   --> $DIR/feature-gate-generic_associated_types.rs:6:5\n    |\n LL |     type Pointer2<T>: Deref<Target = T> where T: Clone, U: Clone;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #44265\n    = help: add #![feature(generic_associated_types)] to the crate attributes to enable\n \n-error[E0658]: generic associated types are unstable (see issue #44265)\n+error[E0658]: generic associated types are unstable\n   --> $DIR/feature-gate-generic_associated_types.rs:14:5\n    |\n LL |     type Pointer<Usize> = Box<Usize>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #44265\n    = help: add #![feature(generic_associated_types)] to the crate attributes to enable\n \n-error[E0658]: generic associated types are unstable (see issue #44265)\n+error[E0658]: generic associated types are unstable\n   --> $DIR/feature-gate-generic_associated_types.rs:16:5\n    |\n LL |     type Pointer2<U32> = Box<U32>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #44265\n    = help: add #![feature(generic_associated_types)] to the crate attributes to enable\n \n-error[E0658]: where clauses on associated types are unstable (see issue #44265)\n+error[E0658]: where clauses on associated types are unstable\n   --> $DIR/feature-gate-generic_associated_types.rs:21:5\n    |\n LL |     type Assoc where Self: Sized;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #44265\n    = help: add #![feature(generic_associated_types)] to the crate attributes to enable\n \n-error[E0658]: where clauses on associated types are unstable (see issue #44265)\n+error[E0658]: where clauses on associated types are unstable\n   --> $DIR/feature-gate-generic_associated_types.rs:26:5\n    |\n LL |     type Assoc where Self: Sized = Foo;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #44265\n    = help: add #![feature(generic_associated_types)] to the crate attributes to enable\n \n error: aborting due to 7 previous errors"}, {"sha": "dc3ab0701c30e051c7224f281d3dcd5828907a20", "filename": "src/test/ui/feature-gates/feature-gate-global_asm.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-global_asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-global_asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-global_asm.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: `global_asm!` is not stable enough for use and is subject to change (see issue #35119)\n+error[E0658]: `global_asm!` is not stable enough for use and is subject to change\n   --> $DIR/feature-gate-global_asm.rs:1:1\n    |\n LL | global_asm!(\"\");\n    | ^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #35119\n    = help: add #![feature(global_asm)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "6d9d4ba1428995217295c8e7b12c90a13d8bae2a", "filename": "src/test/ui/feature-gates/feature-gate-is_sorted.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-is_sorted.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-is_sorted.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-is_sorted.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,33 +1,37 @@\n-error[E0658]: use of unstable library feature 'is_sorted': new API (see issue #53485)\n+error[E0658]: use of unstable library feature 'is_sorted': new API\n   --> $DIR/feature-gate-is_sorted.rs:3:33\n    |\n LL |     assert!([1, 2, 2, 9].iter().is_sorted());\n    |                                 ^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #53485\n    = help: add #![feature(is_sorted)] to the crate attributes to enable\n \n-error[E0658]: use of unstable library feature 'is_sorted': new API (see issue #53485)\n+error[E0658]: use of unstable library feature 'is_sorted': new API\n   --> $DIR/feature-gate-is_sorted.rs:5:39\n    |\n LL |     assert!(![-2i32, -1, 0, 3].iter().is_sorted_by_key(|n| n.abs()));\n    |                                       ^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #53485\n    = help: add #![feature(is_sorted)] to the crate attributes to enable\n \n-error[E0658]: use of unstable library feature 'is_sorted': new API (see issue #53485)\n+error[E0658]: use of unstable library feature 'is_sorted': new API\n   --> $DIR/feature-gate-is_sorted.rs:9:26\n    |\n LL |     assert!([1, 2, 2, 9].is_sorted());\n    |                          ^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #53485\n    = help: add #![feature(is_sorted)] to the crate attributes to enable\n \n-error[E0658]: use of unstable library feature 'is_sorted': new API (see issue #53485)\n+error[E0658]: use of unstable library feature 'is_sorted': new API\n   --> $DIR/feature-gate-is_sorted.rs:11:32\n    |\n LL |     assert!(![-2i32, -1, 0, 3].is_sorted_by_key(|n| n.abs()));\n    |                                ^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #53485\n    = help: add #![feature(is_sorted)] to the crate attributes to enable\n \n error: aborting due to 4 previous errors"}, {"sha": "3285f7ce83608562ebe7097eb080c680ac388192", "filename": "src/test/ui/feature-gates/feature-gate-label_break_value.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-label_break_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-label_break_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-label_break_value.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: labels on blocks are unstable (see issue #48594)\n+error[E0658]: labels on blocks are unstable\n   --> $DIR/feature-gate-label_break_value.rs:2:5\n    |\n LL |     'a: {\n    |     ^^\n    |\n+   = note: for more information, see tracking issue #48594\n    = help: add #![feature(label_break_value)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "b736b2754a61b475d7fe49cee2c039ad1dad344d", "filename": "src/test/ui/feature-gates/feature-gate-link_args.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_args.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,25 +1,28 @@\n-error[E0658]: the `link_args` attribute is experimental and not portable across platforms, it is recommended to use `#[link(name = \"foo\")] instead (see issue #29596)\n+error[E0658]: the `link_args` attribute is experimental and not portable across platforms, it is recommended to use `#[link(name = \"foo\")] instead\n   --> $DIR/feature-gate-link_args.rs:12:1\n    |\n LL | #[link_args = \"-l expected_use_case\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29596\n    = help: add #![feature(link_args)] to the crate attributes to enable\n \n-error[E0658]: the `link_args` attribute is experimental and not portable across platforms, it is recommended to use `#[link(name = \"foo\")] instead (see issue #29596)\n+error[E0658]: the `link_args` attribute is experimental and not portable across platforms, it is recommended to use `#[link(name = \"foo\")] instead\n   --> $DIR/feature-gate-link_args.rs:16:1\n    |\n LL | #[link_args = \"-l unexected_use_on_non_extern_item\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29596\n    = help: add #![feature(link_args)] to the crate attributes to enable\n \n-error[E0658]: the `link_args` attribute is experimental and not portable across platforms, it is recommended to use `#[link(name = \"foo\")] instead (see issue #29596)\n+error[E0658]: the `link_args` attribute is experimental and not portable across platforms, it is recommended to use `#[link(name = \"foo\")] instead\n   --> $DIR/feature-gate-link_args.rs:9:1\n    |\n LL | #![link_args = \"-l unexpected_use_as_inner_attr_on_mod\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29596\n    = help: add #![feature(link_args)] to the crate attributes to enable\n \n error: aborting due to 3 previous errors"}, {"sha": "d0f9209c2951373157a2ae3e4aadf51a745bb548", "filename": "src/test/ui/feature-gates/feature-gate-link_cfg.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_cfg.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: is feature gated (see issue #37406)\n+error[E0658]: is feature gated\n   --> $DIR/feature-gate-link_cfg.rs:1:1\n    |\n LL | #[link(name = \"foo\", cfg(foo))]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #37406\n    = help: add #![feature(link_cfg)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "fe240e72e2b7cf6e2621c3322778f8403786a06b", "filename": "src/test/ui/feature-gates/feature-gate-link_llvm_intrinsics.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_llvm_intrinsics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_llvm_intrinsics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_llvm_intrinsics.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: linking to LLVM intrinsics is experimental (see issue #29602)\n+error[E0658]: linking to LLVM intrinsics is experimental\n   --> $DIR/feature-gate-link_llvm_intrinsics.rs:3:5\n    |\n LL |     fn sqrt(x: f32) -> f32;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29602\n    = help: add #![feature(link_llvm_intrinsics)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "7796375e293d48ba20705dac5caacf98835de6e6", "filename": "src/test/ui/feature-gates/feature-gate-linkage.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-linkage.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-linkage.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-linkage.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: the `linkage` attribute is experimental and not portable across platforms (see issue #29603)\n+error[E0658]: the `linkage` attribute is experimental and not portable across platforms\n   --> $DIR/feature-gate-linkage.rs:2:5\n    |\n LL |     #[linkage = \"extern_weak\"] static foo: isize;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29603\n    = help: add #![feature(linkage)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "238dbcafcb9eec59b253344b6ca6e46cf34649c6", "filename": "src/test/ui/feature-gates/feature-gate-lint-reasons.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-lint-reasons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-lint-reasons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-lint-reasons.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: lint reasons are experimental (see issue #54503)\n+error[E0658]: lint reasons are experimental\n   --> $DIR/feature-gate-lint-reasons.rs:1:28\n    |\n LL | #![warn(nonstandard_style, reason = \"the standard should be respected\")]\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #54503\n    = help: add #![feature(lint_reasons)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "2ba926eafa82b904db68f2d1531ce3a5df319c69", "filename": "src/test/ui/feature-gates/feature-gate-log_syntax.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: `log_syntax!` is not stable enough for use and is subject to change (see issue #29598)\n+error[E0658]: `log_syntax!` is not stable enough for use and is subject to change\n   --> $DIR/feature-gate-log_syntax.rs:2:5\n    |\n LL |     log_syntax!()\n    |     ^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29598\n    = help: add #![feature(log_syntax)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "9595d76bab1311941692ef22a14fdecdf6269966", "filename": "src/test/ui/feature-gates/feature-gate-log_syntax2.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax2.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: `log_syntax!` is not stable enough for use and is subject to change (see issue #29598)\n+error[E0658]: `log_syntax!` is not stable enough for use and is subject to change\n   --> $DIR/feature-gate-log_syntax2.rs:4:22\n    |\n LL |     println!(\"{:?}\", log_syntax!());\n    |                      ^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29598\n    = help: add #![feature(log_syntax)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "16c269d91b303929308ba71a229339ce688afbc6", "filename": "src/test/ui/feature-gates/feature-gate-macros_in_extern.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-macros_in_extern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-macros_in_extern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-macros_in_extern.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,25 +1,28 @@\n-error[E0658]: macro invocations in `extern {}` blocks are experimental (see issue #49476)\n+error[E0658]: macro invocations in `extern {}` blocks are experimental\n   --> $DIR/feature-gate-macros_in_extern.rs:19:5\n    |\n LL |     returns_isize!(rust_get_test_int);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #49476\n    = help: add #![feature(macros_in_extern)] to the crate attributes to enable\n \n-error[E0658]: macro invocations in `extern {}` blocks are experimental (see issue #49476)\n+error[E0658]: macro invocations in `extern {}` blocks are experimental\n   --> $DIR/feature-gate-macros_in_extern.rs:21:5\n    |\n LL |     takes_u32_returns_u32!(rust_dbg_extern_identity_u32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #49476\n    = help: add #![feature(macros_in_extern)] to the crate attributes to enable\n \n-error[E0658]: macro invocations in `extern {}` blocks are experimental (see issue #49476)\n+error[E0658]: macro invocations in `extern {}` blocks are experimental\n   --> $DIR/feature-gate-macros_in_extern.rs:23:5\n    |\n LL |     emits_nothing!();\n    |     ^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #49476\n    = help: add #![feature(macros_in_extern)] to the crate attributes to enable\n \n error: aborting due to 3 previous errors"}, {"sha": "8b4270f14148859b52d4dacca710abb8031a92f3", "filename": "src/test/ui/feature-gates/feature-gate-main.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-main.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: declaration of a nonstandard #[main] function may change over time, for now a top-level `fn main()` is required (see issue #29634)\n+error[E0658]: declaration of a nonstandard #[main] function may change over time, for now a top-level `fn main()` is required\n   --> $DIR/feature-gate-main.rs:2:1\n    |\n LL | fn foo() {}\n    | ^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29634\n    = help: add #![feature(main)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "ea06c775b1a60a8dedbbfde08f79a681953aa4f5", "filename": "src/test/ui/feature-gates/feature-gate-marker_trait_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-marker_trait_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-marker_trait_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-marker_trait_attr.rs?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,7 +1,7 @@\n use std::fmt::{Debug, Display};\n \n #[marker] trait ExplicitMarker {}\n-//~^ ERROR marker traits is an experimental feature (see issue #29864)\n+//~^ ERROR marker traits is an experimental feature\n \n impl<T: Display> ExplicitMarker for T {}\n impl<T: Debug> ExplicitMarker for T {}"}, {"sha": "e9418c135a9a7e13efd96f8b722121698448a5ab", "filename": "src/test/ui/feature-gates/feature-gate-marker_trait_attr.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-marker_trait_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-marker_trait_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-marker_trait_attr.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: marker traits is an experimental feature (see issue #29864)\n+error[E0658]: marker traits is an experimental feature\n   --> $DIR/feature-gate-marker_trait_attr.rs:3:1\n    |\n LL | #[marker] trait ExplicitMarker {}\n    | ^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29864\n    = help: add #![feature(marker_trait_attr)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "38a3138615a5dac34d9be2c602b6383d5b06c0ab", "filename": "src/test/ui/feature-gates/feature-gate-may-dangle.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-may-dangle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-may-dangle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-may-dangle.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: may_dangle has unstable semantics and may be removed in the future (see issue #34761)\n+error[E0658]: may_dangle has unstable semantics and may be removed in the future\n   --> $DIR/feature-gate-may-dangle.rs:6:13\n    |\n LL | unsafe impl<#[may_dangle] A> Drop for Pt<A> {\n    |             ^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #34761\n    = help: add #![feature(dropck_eyepatch)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "ecf2e0217e8d0722c08c456d7b98b4ff705ad804", "filename": "src/test/ui/feature-gates/feature-gate-min_const_fn.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_const_fn.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -16,20 +16,22 @@ error[E0379]: trait fns cannot be declared const\n LL |     const fn foo() -> u32 { 0 }\n    |     ^^^^^ trait fns cannot be const\n \n-error[E0658]: const fn is unstable (see issue #57563)\n+error[E0658]: const fn is unstable\n   --> $DIR/feature-gate-min_const_fn.rs:6:5\n    |\n LL |     const fn foo() -> u32;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0658]: const fn is unstable (see issue #57563)\n+error[E0658]: const fn is unstable\n   --> $DIR/feature-gate-min_const_fn.rs:8:5\n    |\n LL |     const fn bar() -> u32 { 0 }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n error: aborting due to 5 previous errors"}, {"sha": "5159b456c3794b061a130193b9cf10723f8e2967", "filename": "src/test/ui/feature-gates/feature-gate-naked_functions.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-naked_functions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-naked_functions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-naked_functions.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,17 +1,19 @@\n-error[E0658]: the `#[naked]` attribute is an experimental feature (see issue #32408)\n+error[E0658]: the `#[naked]` attribute is an experimental feature\n   --> $DIR/feature-gate-naked_functions.rs:1:1\n    |\n LL | #[naked]\n    | ^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #32408\n    = help: add #![feature(naked_functions)] to the crate attributes to enable\n \n-error[E0658]: the `#[naked]` attribute is an experimental feature (see issue #32408)\n+error[E0658]: the `#[naked]` attribute is an experimental feature\n   --> $DIR/feature-gate-naked_functions.rs:5:1\n    |\n LL | #[naked]\n    | ^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #32408\n    = help: add #![feature(naked_functions)] to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "a6096e6f99e5abf88e8d1bd31a5928c5fb1b9a3f", "filename": "src/test/ui/feature-gates/feature-gate-never_type.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-never_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-never_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-never_type.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,41 +1,46 @@\n-error[E0658]: The `!` type is experimental (see issue #35121)\n+error[E0658]: The `!` type is experimental\n   --> $DIR/feature-gate-never_type.rs:7:17\n    |\n LL | type Ma = (u32, !, i32);\n    |                 ^\n    |\n+   = note: for more information, see tracking issue #35121\n    = help: add #![feature(never_type)] to the crate attributes to enable\n \n-error[E0658]: The `!` type is experimental (see issue #35121)\n+error[E0658]: The `!` type is experimental\n   --> $DIR/feature-gate-never_type.rs:8:20\n    |\n LL | type Meeshka = Vec<!>;\n    |                    ^\n    |\n+   = note: for more information, see tracking issue #35121\n    = help: add #![feature(never_type)] to the crate attributes to enable\n \n-error[E0658]: The `!` type is experimental (see issue #35121)\n+error[E0658]: The `!` type is experimental\n   --> $DIR/feature-gate-never_type.rs:9:24\n    |\n LL | type Mow = &'static fn(!) -> !;\n    |                        ^\n    |\n+   = note: for more information, see tracking issue #35121\n    = help: add #![feature(never_type)] to the crate attributes to enable\n \n-error[E0658]: The `!` type is experimental (see issue #35121)\n+error[E0658]: The `!` type is experimental\n   --> $DIR/feature-gate-never_type.rs:10:27\n    |\n LL | type Skwoz = &'static mut !;\n    |                           ^\n    |\n+   = note: for more information, see tracking issue #35121\n    = help: add #![feature(never_type)] to the crate attributes to enable\n \n-error[E0658]: The `!` type is experimental (see issue #35121)\n+error[E0658]: The `!` type is experimental\n   --> $DIR/feature-gate-never_type.rs:13:16\n    |\n LL |     type Wub = !;\n    |                ^\n    |\n+   = note: for more information, see tracking issue #35121\n    = help: add #![feature(never_type)] to the crate attributes to enable\n \n error: aborting due to 5 previous errors"}, {"sha": "a80e7d6acd6f2a2b41b172ed1866065c0e6b837b", "filename": "src/test/ui/feature-gates/feature-gate-no-debug.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no-debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no-debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no-debug.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: the `#[no_debug]` attribute was an experimental feature that has been deprecated due to lack of demand (see issue #29721)\n+error[E0658]: the `#[no_debug]` attribute was an experimental feature that has been deprecated due to lack of demand\n   --> $DIR/feature-gate-no-debug.rs:3:1\n    |\n LL | #[no_debug]\n    | ^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29721\n    = help: add #![feature(no_debug)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "362eb7d7d695559179e3ddaf218ff5653827691e", "filename": "src/test/ui/feature-gates/feature-gate-no_core.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_core.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_core.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_core.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: no_core is experimental (see issue #29639)\n+error[E0658]: no_core is experimental\n   --> $DIR/feature-gate-no_core.rs:3:1\n    |\n LL | #![no_core]\n    | ^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29639\n    = help: add #![feature(no_core)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "08fef68d1f822b92346ffbea6a7b82863b20f864", "filename": "src/test/ui/feature-gates/feature-gate-non_ascii_idents.stderr", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_ascii_idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_ascii_idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_ascii_idents.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,105 +1,118 @@\n-error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n+error[E0658]: non-ascii idents are not fully supported\n   --> $DIR/feature-gate-non_ascii_idents.rs:1:22\n    |\n LL | extern crate core as b\u00e4z;\n    |                      ^^^\n    |\n+   = note: for more information, see tracking issue #55467\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n+error[E0658]: non-ascii idents are not fully supported\n   --> $DIR/feature-gate-non_ascii_idents.rs:3:5\n    |\n LL | use f\u00f6\u00f6::bar;\n    |     ^^^\n    |\n+   = note: for more information, see tracking issue #55467\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n+error[E0658]: non-ascii idents are not fully supported\n   --> $DIR/feature-gate-non_ascii_idents.rs:5:5\n    |\n LL | mod f\u00f6\u00f6 {\n    |     ^^^\n    |\n+   = note: for more information, see tracking issue #55467\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n+error[E0658]: non-ascii idents are not fully supported\n   --> $DIR/feature-gate-non_ascii_idents.rs:9:4\n    |\n LL | fn b\u00e4r(\n    |    ^^^\n    |\n+   = note: for more information, see tracking issue #55467\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n+error[E0658]: non-ascii idents are not fully supported\n   --> $DIR/feature-gate-non_ascii_idents.rs:10:5\n    |\n LL |     b\u00e4z: isize\n    |     ^^^\n    |\n+   = note: for more information, see tracking issue #55467\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n+error[E0658]: non-ascii idents are not fully supported\n   --> $DIR/feature-gate-non_ascii_idents.rs:12:9\n    |\n LL |     let _\u00f6: isize;\n    |         ^^\n    |\n+   = note: for more information, see tracking issue #55467\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n+error[E0658]: non-ascii idents are not fully supported\n   --> $DIR/feature-gate-non_ascii_idents.rs:15:10\n    |\n LL |         (_\u00e4, _) => {}\n    |          ^^\n    |\n+   = note: for more information, see tracking issue #55467\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n+error[E0658]: non-ascii idents are not fully supported\n   --> $DIR/feature-gate-non_ascii_idents.rs:19:8\n    |\n LL | struct F\u00f6\u00f6 {\n    |        ^^^\n    |\n+   = note: for more information, see tracking issue #55467\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n+error[E0658]: non-ascii idents are not fully supported\n   --> $DIR/feature-gate-non_ascii_idents.rs:20:5\n    |\n LL |     f\u00f6\u00f6: isize\n    |     ^^^\n    |\n+   = note: for more information, see tracking issue #55467\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n+error[E0658]: non-ascii idents are not fully supported\n   --> $DIR/feature-gate-non_ascii_idents.rs:23:6\n    |\n LL | enum B\u00e4r {\n    |      ^^^\n    |\n+   = note: for more information, see tracking issue #55467\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n+error[E0658]: non-ascii idents are not fully supported\n   --> $DIR/feature-gate-non_ascii_idents.rs:24:5\n    |\n LL |     B\u00e4z {\n    |     ^^^\n    |\n+   = note: for more information, see tracking issue #55467\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n+error[E0658]: non-ascii idents are not fully supported\n   --> $DIR/feature-gate-non_ascii_idents.rs:25:9\n    |\n LL |         q\u00fcx: isize\n    |         ^^^\n    |\n+   = note: for more information, see tracking issue #55467\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n+error[E0658]: non-ascii idents are not fully supported\n   --> $DIR/feature-gate-non_ascii_idents.rs:30:8\n    |\n LL |     fn q\u00fcx();\n    |        ^^^\n    |\n+   = note: for more information, see tracking issue #55467\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n error: aborting due to 13 previous errors"}, {"sha": "aca214d1935e291701d1dc65a4be5c4705de02cc", "filename": "src/test/ui/feature-gates/feature-gate-non_exhaustive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive.rs?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,6 +1,6 @@\n //#![feature(non_exhaustive)]\n \n-#[non_exhaustive] //~ERROR non exhaustive is an experimental feature (see issue #44109)\n+#[non_exhaustive] //~ERROR non exhaustive is an experimental feature\n pub enum NonExhaustiveEnum {\n     Unit,\n     Tuple(u32),"}, {"sha": "c7b595503a9b053a638aa775cd198c89202d68b0", "filename": "src/test/ui/feature-gates/feature-gate-non_exhaustive.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: non exhaustive is an experimental feature (see issue #44109)\n+error[E0658]: non exhaustive is an experimental feature\n   --> $DIR/feature-gate-non_exhaustive.rs:3:1\n    |\n LL | #[non_exhaustive]\n    | ^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #44109\n    = help: add #![feature(non_exhaustive)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "f59a431ab73612f7db774f0ec80ba150f9d454b3", "filename": "src/test/ui/feature-gates/feature-gate-on-unimplemented.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-on-unimplemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-on-unimplemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-on-unimplemented.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: the `#[rustc_on_unimplemented]` attribute is an experimental feature (see issue #29628)\n+error[E0658]: the `#[rustc_on_unimplemented]` attribute is an experimental feature\n   --> $DIR/feature-gate-on-unimplemented.rs:4:1\n    |\n LL | #[rustc_on_unimplemented = \"test error `{Self}` with `{Bar}`\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29628\n    = help: add #![feature(on_unimplemented)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "5bb7bca65bd543ad63e6204928d440c7d6b0c3c4", "filename": "src/test/ui/feature-gates/feature-gate-optin-builtin-traits.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-optin-builtin-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-optin-builtin-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-optin-builtin-traits.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,17 +1,19 @@\n-error[E0658]: auto traits are experimental and possibly buggy (see issue #13231)\n+error[E0658]: auto traits are experimental and possibly buggy\n   --> $DIR/feature-gate-optin-builtin-traits.rs:6:1\n    |\n LL | auto trait AutoDummyTrait {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #13231\n    = help: add #![feature(optin_builtin_traits)] to the crate attributes to enable\n \n-error[E0658]: negative trait bounds are not yet fully implemented; use marker types for now (see issue #13231)\n+error[E0658]: negative trait bounds are not yet fully implemented; use marker types for now\n   --> $DIR/feature-gate-optin-builtin-traits.rs:9:1\n    |\n LL | impl !AutoDummyTrait for DummyStruct {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #13231\n    = help: add #![feature(optin_builtin_traits)] to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "25bbe5415d7fc93cdf61b3b64c2d16741e0d9b30", "filename": "src/test/ui/feature-gates/feature-gate-plugin.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-plugin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-plugin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-plugin.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: compiler plugins are experimental and possibly buggy (see issue #29597)\n+error[E0658]: compiler plugins are experimental and possibly buggy\n   --> $DIR/feature-gate-plugin.rs:3:1\n    |\n LL | #![plugin(foo)]\n    | ^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29597\n    = help: add #![feature(plugin)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "610de1e18ef7895962881c3ef97d2f60afda1173", "filename": "src/test/ui/feature-gates/feature-gate-plugin_registrar.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-plugin_registrar.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-plugin_registrar.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-plugin_registrar.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: compiler plugins are experimental and possibly buggy (see issue #29597)\n+error[E0658]: compiler plugins are experimental and possibly buggy\n   --> $DIR/feature-gate-plugin_registrar.rs:6:1\n    |\n LL | pub fn registrar() {}\n    | ^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29597\n    = help: add #![feature(plugin_registrar)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "5971d91ceaf09462f00b7f5205c823df30ab45a8", "filename": "src/test/ui/feature-gates/feature-gate-repr-simd.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr-simd.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr-simd.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr-simd.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,17 +1,19 @@\n-error[E0658]: SIMD types are experimental and possibly buggy (see issue #27731)\n+error[E0658]: SIMD types are experimental and possibly buggy\n   --> $DIR/feature-gate-repr-simd.rs:1:1\n    |\n LL | #[repr(simd)]\n    | ^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #27731\n    = help: add #![feature(repr_simd)] to the crate attributes to enable\n \n-error[E0658]: SIMD types are experimental and possibly buggy (see issue #27731)\n+error[E0658]: SIMD types are experimental and possibly buggy\n   --> $DIR/feature-gate-repr-simd.rs:5:1\n    |\n LL | #[repr(simd)]\n    | ^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #27731\n    = help: add #![feature(repr_simd)] to the crate attributes to enable\n \n warning[E0566]: conflicting representation hints"}, {"sha": "3ed3c7ae53cc2d08420010e89e1ecd08548e3a55", "filename": "src/test/ui/feature-gates/feature-gate-repr128.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr128.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr128.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr128.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,11 +1,12 @@\n-error[E0658]: repr with 128-bit type is unstable (see issue #35118)\n+error[E0658]: repr with 128-bit type is unstable\n   --> $DIR/feature-gate-repr128.rs:2:1\n    |\n LL | / enum A {\n LL | |     A(u64)\n LL | | }\n    | |_^\n    |\n+   = note: for more information, see tracking issue #35118\n    = help: add #![feature(repr128)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "8b68caa6f5b0ed498a8904c435bf65b7b13e88ef", "filename": "src/test/ui/feature-gates/feature-gate-repr_align_enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr_align_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr_align_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr_align_enum.rs?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,7 +1,7 @@\n #[repr(align(16))]\n struct Foo(u64);\n \n-#[repr(align(8))] //~ ERROR `#[repr(align(x))]` on enums is experimental (see issue #57996)\n+#[repr(align(8))] //~ ERROR `#[repr(align(x))]` on enums is experimental\n enum Bar {\n     Foo { foo: Foo },\n     Baz,"}, {"sha": "f8b1aa76a7cc9f823bdf52452c6d044d25523ad9", "filename": "src/test/ui/feature-gates/feature-gate-repr_align_enum.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr_align_enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr_align_enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr_align_enum.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: `#[repr(align(x))]` on enums is experimental (see issue #57996)\n+error[E0658]: `#[repr(align(x))]` on enums is experimental\n   --> $DIR/feature-gate-repr_align_enum.rs:4:1\n    |\n LL | #[repr(align(8))]\n    | ^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #57996\n    = help: add #![feature(repr_align_enum)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "b38fe6f345ed393e4d1cf7d8ec38093060169c8d", "filename": "src/test/ui/feature-gates/feature-gate-rustc-attrs-1.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs-1.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,17 +1,19 @@\n-error[E0658]: the `#[rustc_variance]` attribute is just used for rustc unit tests and will never be stable (see issue #29642)\n+error[E0658]: the `#[rustc_variance]` attribute is just used for rustc unit tests and will never be stable\n   --> $DIR/feature-gate-rustc-attrs-1.rs:5:1\n    |\n LL | #[rustc_variance]\n    | ^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(rustc_attrs)] to the crate attributes to enable\n \n-error[E0658]: the `#[rustc_error]` attribute is just used for rustc unit tests and will never be stable (see issue #29642)\n+error[E0658]: the `#[rustc_error]` attribute is just used for rustc unit tests and will never be stable\n   --> $DIR/feature-gate-rustc-attrs-1.rs:6:1\n    |\n LL | #[rustc_error]\n    | ^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(rustc_attrs)] to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "bda00dc38984d15928104d9a9995d6b9b29c7606", "filename": "src/test/ui/feature-gates/feature-gate-rustc-attrs.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: unless otherwise specified, attributes with the prefix `rustc_` are reserved for internal compiler diagnostics (see issue #29642)\n+error[E0658]: unless otherwise specified, attributes with the prefix `rustc_` are reserved for internal compiler diagnostics\n   --> $DIR/feature-gate-rustc-attrs.rs:3:3\n    |\n LL | #[rustc_foo]\n    |   ^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(rustc_attrs)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "5ec261a7d4daf0b1a437da27dcadecc7d5bd4878", "filename": "src/test/ui/feature-gates/feature-gate-simd.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-simd.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-simd.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-simd.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: SIMD types are experimental and possibly buggy (see issue #27731)\n+error[E0658]: SIMD types are experimental and possibly buggy\n   --> $DIR/feature-gate-simd.rs:3:1\n    |\n LL | #[repr(simd)]\n    | ^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #27731\n    = help: add #![feature(repr_simd)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "017b46e6341473f851698259c0fdb401e3799489", "filename": "src/test/ui/feature-gates/feature-gate-slice-patterns.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-slice-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-slice-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-slice-patterns.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,49 +1,55 @@\n-error[E0658]: syntax for subslices in slice patterns is not yet stabilized (see issue #23121)\n+error[E0658]: syntax for subslices in slice patterns is not yet stabilized\n   --> $DIR/feature-gate-slice-patterns.rs:6:16\n    |\n LL |         [1, 2, ..] => {}\n    |                ^^\n    |\n+   = note: for more information, see tracking issue #23121\n    = help: add #![feature(slice_patterns)] to the crate attributes to enable\n \n-error[E0658]: syntax for subslices in slice patterns is not yet stabilized (see issue #23121)\n+error[E0658]: syntax for subslices in slice patterns is not yet stabilized\n   --> $DIR/feature-gate-slice-patterns.rs:7:13\n    |\n LL |         [1, .., 5] => {}\n    |             ^^\n    |\n+   = note: for more information, see tracking issue #23121\n    = help: add #![feature(slice_patterns)] to the crate attributes to enable\n \n-error[E0658]: syntax for subslices in slice patterns is not yet stabilized (see issue #23121)\n+error[E0658]: syntax for subslices in slice patterns is not yet stabilized\n   --> $DIR/feature-gate-slice-patterns.rs:8:10\n    |\n LL |         [.., 4, 5] => {}\n    |          ^^\n    |\n+   = note: for more information, see tracking issue #23121\n    = help: add #![feature(slice_patterns)] to the crate attributes to enable\n \n-error[E0658]: syntax for subslices in slice patterns is not yet stabilized (see issue #23121)\n+error[E0658]: syntax for subslices in slice patterns is not yet stabilized\n   --> $DIR/feature-gate-slice-patterns.rs:13:11\n    |\n LL |         [ xs.., 4, 5 ] => {}\n    |           ^^\n    |\n+   = note: for more information, see tracking issue #23121\n    = help: add #![feature(slice_patterns)] to the crate attributes to enable\n \n-error[E0658]: syntax for subslices in slice patterns is not yet stabilized (see issue #23121)\n+error[E0658]: syntax for subslices in slice patterns is not yet stabilized\n   --> $DIR/feature-gate-slice-patterns.rs:14:14\n    |\n LL |         [ 1, xs.., 5 ] => {}\n    |              ^^\n    |\n+   = note: for more information, see tracking issue #23121\n    = help: add #![feature(slice_patterns)] to the crate attributes to enable\n \n-error[E0658]: syntax for subslices in slice patterns is not yet stabilized (see issue #23121)\n+error[E0658]: syntax for subslices in slice patterns is not yet stabilized\n   --> $DIR/feature-gate-slice-patterns.rs:15:17\n    |\n LL |         [ 1, 2, xs.. ] => {}\n    |                 ^^\n    |\n+   = note: for more information, see tracking issue #23121\n    = help: add #![feature(slice_patterns)] to the crate attributes to enable\n \n error: aborting due to 6 previous errors"}, {"sha": "4518880f29ec5d1c5545d93a1f03a445b8146b68", "filename": "src/test/ui/feature-gates/feature-gate-start.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-start.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-start.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-start.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: a #[start] function is an experimental feature whose signature may change over time (see issue #29633)\n+error[E0658]: a #[start] function is an experimental feature whose signature may change over time\n   --> $DIR/feature-gate-start.rs:2:1\n    |\n LL | fn foo(_: isize, _: *const *const u8) -> isize { 0 }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29633\n    = help: add #![feature(start)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "ffe49b3fb959af91f03386eb4de0cfa4c1c74dc7", "filename": "src/test/ui/feature-gates/feature-gate-static-nobundle.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-static-nobundle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-static-nobundle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-static-nobundle.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: kind=\"static-nobundle\" is feature gated (see issue #37403)\n+error[E0658]: kind=\"static-nobundle\" is feature gated\n   --> $DIR/feature-gate-static-nobundle.rs:1:1\n    |\n LL | #[link(name=\"foo\", kind=\"static-nobundle\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #37403\n    = help: add #![feature(static_nobundle)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "f213e8933bf577ea04c5197728f2e0482703b6b5", "filename": "src/test/ui/feature-gates/feature-gate-stmt_expr_attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-stmt_expr_attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-stmt_expr_attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-stmt_expr_attributes.rs?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,4 +1,4 @@\n const X: i32 = #[allow(dead_code)] 8;\n-//~^ ERROR attributes on expressions are experimental. (see issue #15701)\n+//~^ ERROR attributes on expressions are experimental\n \n fn main() {}"}, {"sha": "09ba845eb78ad063005aad1211e3302973472f3b", "filename": "src/test/ui/feature-gates/feature-gate-stmt_expr_attributes.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-stmt_expr_attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-stmt_expr_attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-stmt_expr_attributes.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: attributes on expressions are experimental. (see issue #15701)\n+error[E0658]: attributes on expressions are experimental\n   --> $DIR/feature-gate-stmt_expr_attributes.rs:1:16\n    |\n LL | const X: i32 = #[allow(dead_code)] 8;\n    |                ^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #15701\n    = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "249de9cd80872b24baefc292a3c2e1c43e7eade2", "filename": "src/test/ui/feature-gates/feature-gate-thread_local.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-thread_local.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-thread_local.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-thread_local.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: `#[thread_local]` is an experimental feature, and does not currently handle destructors. (see issue #29594)\n+error[E0658]: `#[thread_local]` is an experimental feature, and does not currently handle destructors\n   --> $DIR/feature-gate-thread_local.rs:8:1\n    |\n LL | #[thread_local]\n    | ^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29594\n    = help: add #![feature(thread_local)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "250a77d12e9c690ff0746063660a4c6282f0de5d", "filename": "src/test/ui/feature-gates/feature-gate-trace_macros.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trace_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trace_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trace_macros.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: `trace_macros` is not stable enough for use and is subject to change (see issue #29598)\n+error[E0658]: `trace_macros` is not stable enough for use and is subject to change\n   --> $DIR/feature-gate-trace_macros.rs:2:5\n    |\n LL |     trace_macros!(true);\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29598\n    = help: add #![feature(trace_macros)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "c4ed5034b2c5161ee71126677b9aa1f8f3e32329", "filename": "src/test/ui/feature-gates/feature-gate-trait-alias.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trait-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trait-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trait-alias.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: trait aliases are experimental (see issue #41517)\n+error[E0658]: trait aliases are experimental\n   --> $DIR/feature-gate-trait-alias.rs:1:1\n    |\n LL | trait Foo = Default;\n    | ^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #41517\n    = help: add #![feature(trait_alias)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "dc115f82c4308683d068e75888bc8c188165d23e", "filename": "src/test/ui/feature-gates/feature-gate-try_blocks.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_blocks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_blocks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_blocks.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: `try` expression is experimental (see issue #31436)\n+error[E0658]: `try` expression is experimental\n   --> $DIR/feature-gate-try_blocks.rs:4:33\n    |\n LL |       let try_result: Option<_> = try {\n@@ -8,6 +8,7 @@ LL | |         x\n LL | |     };\n    | |_____^\n    |\n+   = note: for more information, see tracking issue #31436\n    = help: add #![feature(try_blocks)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "618b1e76e5fca640293eb05f5367c1df74dfb91d", "filename": "src/test/ui/feature-gates/feature-gate-try_reserve.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_reserve.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_reserve.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_reserve.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: use of unstable library feature 'try_reserve': new API (see issue #48043)\n+error[E0658]: use of unstable library feature 'try_reserve': new API\n   --> $DIR/feature-gate-try_reserve.rs:3:7\n    |\n LL |     v.try_reserve(10);\n    |       ^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #48043\n    = help: add #![feature(try_reserve)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "6b4fc1d6d12f83bf85617098a626f5859b3abffa", "filename": "src/test/ui/feature-gates/feature-gate-type_ascription.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_ascription.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_ascription.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_ascription.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: type ascription is experimental (see issue #23416)\n+error[E0658]: type ascription is experimental\n   --> $DIR/feature-gate-type_ascription.rs:4:13\n    |\n LL |     let a = 10: u8;\n    |             ^^^^^^\n    |\n+   = note: for more information, see tracking issue #23416\n    = help: add #![feature(type_ascription)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "0bab5588e5adf39fe668850f47fedd9888da4399", "filename": "src/test/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.stderr", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,41 +1,46 @@\n-error[E0658]: rust-call ABI is subject to change (see issue #29625)\n+error[E0658]: rust-call ABI is subject to change\n   --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:11:5\n    |\n LL |     extern \"rust-call\" fn call(self, args: ()) -> () {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29625\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n-error[E0658]: rust-call ABI is subject to change (see issue #29625)\n+error[E0658]: rust-call ABI is subject to change\n   --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:17:5\n    |\n LL |     extern \"rust-call\" fn call_once(self, args: ()) -> () {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29625\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n-error[E0658]: rust-call ABI is subject to change (see issue #29625)\n+error[E0658]: rust-call ABI is subject to change\n   --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:23:5\n    |\n LL |     extern \"rust-call\" fn call_mut(&self, args: ()) -> () {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29625\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n-error[E0658]: rust-call ABI is subject to change (see issue #29625)\n+error[E0658]: rust-call ABI is subject to change\n   --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:29:5\n    |\n LL |     extern \"rust-call\" fn call_once(&self, args: ()) -> () {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29625\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n-error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change. Use parenthetical notation (Fn(Foo, Bar) -> Baz) instead (see issue #29625)\n+error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change. Use parenthetical notation (Fn(Foo, Bar) -> Baz) instead\n   --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:9:6\n    |\n LL | impl Fn<()> for Foo {\n    |      ^^^^^^\n    |\n+   = note: for more information, see tracking issue #29625\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n error[E0229]: associated type bindings are not allowed here\n@@ -44,20 +49,22 @@ error[E0229]: associated type bindings are not allowed here\n LL | impl FnOnce() for Foo1 {\n    |            ^^ associated type not allowed here\n \n-error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change. Use parenthetical notation (Fn(Foo, Bar) -> Baz) instead (see issue #29625)\n+error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change. Use parenthetical notation (Fn(Foo, Bar) -> Baz) instead\n   --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:21:6\n    |\n LL | impl FnMut<()> for Bar {\n    |      ^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29625\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n-error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change. Use parenthetical notation (Fn(Foo, Bar) -> Baz) instead (see issue #29625)\n+error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change. Use parenthetical notation (Fn(Foo, Bar) -> Baz) instead\n   --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:27:6\n    |\n LL | impl FnOnce<()> for Baz {\n    |      ^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29625\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n error: aborting due to 8 previous errors"}, {"sha": "b5d2e9374ce7a67258995a3e895b55e46f323d1f", "filename": "src/test/ui/feature-gates/feature-gate-unboxed-closures-method-calls.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-method-calls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-method-calls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-method-calls.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,25 +1,28 @@\n-error[E0658]: use of unstable library feature 'fn_traits' (see issue #29625)\n+error[E0658]: use of unstable library feature 'fn_traits'\n   --> $DIR/feature-gate-unboxed-closures-method-calls.rs:4:7\n    |\n LL |     f.call(());\n    |       ^^^^\n    |\n+   = note: for more information, see tracking issue #29625\n    = help: add #![feature(fn_traits)] to the crate attributes to enable\n \n-error[E0658]: use of unstable library feature 'fn_traits' (see issue #29625)\n+error[E0658]: use of unstable library feature 'fn_traits'\n   --> $DIR/feature-gate-unboxed-closures-method-calls.rs:5:7\n    |\n LL |     f.call_mut(());\n    |       ^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29625\n    = help: add #![feature(fn_traits)] to the crate attributes to enable\n \n-error[E0658]: use of unstable library feature 'fn_traits' (see issue #29625)\n+error[E0658]: use of unstable library feature 'fn_traits'\n   --> $DIR/feature-gate-unboxed-closures-method-calls.rs:6:7\n    |\n LL |     f.call_once(());\n    |       ^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29625\n    = help: add #![feature(fn_traits)] to the crate attributes to enable\n \n error: aborting due to 3 previous errors"}, {"sha": "0e7f0ccc7f67a1670453c9026bf1a69a74f463af", "filename": "src/test/ui/feature-gates/feature-gate-unboxed-closures-ufcs-calls.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-ufcs-calls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-ufcs-calls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-ufcs-calls.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,25 +1,28 @@\n-error[E0658]: use of unstable library feature 'fn_traits' (see issue #29625)\n+error[E0658]: use of unstable library feature 'fn_traits'\n   --> $DIR/feature-gate-unboxed-closures-ufcs-calls.rs:4:5\n    |\n LL |     Fn::call(&f, ());\n    |     ^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29625\n    = help: add #![feature(fn_traits)] to the crate attributes to enable\n \n-error[E0658]: use of unstable library feature 'fn_traits' (see issue #29625)\n+error[E0658]: use of unstable library feature 'fn_traits'\n   --> $DIR/feature-gate-unboxed-closures-ufcs-calls.rs:5:5\n    |\n LL |     FnMut::call_mut(&mut f, ());\n    |     ^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29625\n    = help: add #![feature(fn_traits)] to the crate attributes to enable\n \n-error[E0658]: use of unstable library feature 'fn_traits' (see issue #29625)\n+error[E0658]: use of unstable library feature 'fn_traits'\n   --> $DIR/feature-gate-unboxed-closures-ufcs-calls.rs:6:5\n    |\n LL |     FnOnce::call_once(f, ());\n    |     ^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29625\n    = help: add #![feature(fn_traits)] to the crate attributes to enable\n \n error: aborting due to 3 previous errors"}, {"sha": "b8d3aa4a141df95850d1b4122f474972cf880932", "filename": "src/test/ui/feature-gates/feature-gate-unboxed-closures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.rs?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -9,7 +9,7 @@ impl FnOnce<(u32, u32)> for Test {\n     extern \"rust-call\" fn call_once(self, (a, b): (u32, u32)) -> u32 {\n         a + b\n     }\n-    //~^^^ ERROR rust-call ABI is subject to change (see issue #29625)\n+    //~^^^ ERROR rust-call ABI is subject to change\n }\n \n fn main() {"}, {"sha": "1a4fe3386993a262beedc4244d4d9247fdd2fb76", "filename": "src/test/ui/feature-gates/feature-gate-unboxed-closures.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,19 +1,21 @@\n-error[E0658]: rust-call ABI is subject to change (see issue #29625)\n+error[E0658]: rust-call ABI is subject to change\n   --> $DIR/feature-gate-unboxed-closures.rs:9:5\n    |\n LL | /     extern \"rust-call\" fn call_once(self, (a, b): (u32, u32)) -> u32 {\n LL | |         a + b\n LL | |     }\n    | |_____^\n    |\n+   = note: for more information, see tracking issue #29625\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n-error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change. Use parenthetical notation (Fn(Foo, Bar) -> Baz) instead (see issue #29625)\n+error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change. Use parenthetical notation (Fn(Foo, Bar) -> Baz) instead\n   --> $DIR/feature-gate-unboxed-closures.rs:5:6\n    |\n LL | impl FnOnce<(u32, u32)> for Test {\n    |      ^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29625\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "b6dac636f50dc00d7aa1a36a71c1822e042efc2b", "filename": "src/test/ui/feature-gates/feature-gate-underscore_const_names.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-underscore_const_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-underscore_const_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-underscore_const_names.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: naming constants with `_` is unstable (see issue #54912)\n+error[E0658]: naming constants with `_` is unstable\n   --> $DIR/feature-gate-underscore_const_names.rs:6:1\n    |\n LL | / const _ : () = {\n@@ -10,6 +10,7 @@ LL | |     ()\n LL | | };\n    | |__^\n    |\n+   = note: for more information, see tracking issue #54912\n    = help: add #![feature(underscore_const_names)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "7bb2a7ddd1301c189b35ea1ddfde2eb0d1e721a5", "filename": "src/test/ui/feature-gates/feature-gate-unsized_tuple_coercion.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_tuple_coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_tuple_coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_tuple_coercion.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: unsized tuple coercion is not stable enough for use and is subject to change (see issue #42877)\n+error[E0658]: unsized tuple coercion is not stable enough for use and is subject to change\n   --> $DIR/feature-gate-unsized_tuple_coercion.rs:2:24\n    |\n LL |     let _ : &(Send,) = &((),);\n    |                        ^^^^^^\n    |\n+   = note: for more information, see tracking issue #42877\n    = help: add #![feature(unsized_tuple_coercion)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "72dcd80e59f50f1c6dcc22086f77e66df5eb0de7", "filename": "src/test/ui/feature-gates/feature-gate-untagged_unions.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,31 +1,34 @@\n-error[E0658]: unions with non-`Copy` fields are unstable (see issue #32836)\n+error[E0658]: unions with non-`Copy` fields are unstable\n   --> $DIR/feature-gate-untagged_unions.rs:9:1\n    |\n LL | / union U3 {\n LL | |     a: String,\n LL | | }\n    | |_^\n    |\n+   = note: for more information, see tracking issue #32836\n    = help: add #![feature(untagged_unions)] to the crate attributes to enable\n \n-error[E0658]: unions with non-`Copy` fields are unstable (see issue #32836)\n+error[E0658]: unions with non-`Copy` fields are unstable\n   --> $DIR/feature-gate-untagged_unions.rs:13:1\n    |\n LL | / union U4<T> {\n LL | |     a: T,\n LL | | }\n    | |_^\n    |\n+   = note: for more information, see tracking issue #32836\n    = help: add #![feature(untagged_unions)] to the crate attributes to enable\n \n-error[E0658]: unions with `Drop` implementations are unstable (see issue #32836)\n+error[E0658]: unions with `Drop` implementations are unstable\n   --> $DIR/feature-gate-untagged_unions.rs:17:1\n    |\n LL | / union U5 {\n LL | |     a: u8,\n LL | | }\n    | |_^\n    |\n+   = note: for more information, see tracking issue #32836\n    = help: add #![feature(untagged_unions)] to the crate attributes to enable\n \n error: aborting due to 3 previous errors"}, {"sha": "a5bc0cf0dd7c9d04eead637a002d0180af121090", "filename": "src/test/ui/feature-gates/feature-gate-unwind-attributes.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unwind-attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unwind-attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unwind-attributes.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: #[unwind] is experimental (see issue #58760)\n+error[E0658]: #[unwind] is experimental\n   --> $DIR/feature-gate-unwind-attributes.rs:11:5\n    |\n LL |     #[unwind(allowed)]\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #58760\n    = help: add #![feature(unwind_attributes)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "8219c09fbb83b274049ea593acd43ab08c0efbf7", "filename": "src/test/ui/feature-gates/underscore_const_names_feature_gate.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Funderscore_const_names_feature_gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ffeature-gates%2Funderscore_const_names_feature_gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Funderscore_const_names_feature_gate.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: naming constants with `_` is unstable (see issue #54912)\n+error[E0658]: naming constants with `_` is unstable\n   --> $DIR/underscore_const_names_feature_gate.rs:1:1\n    |\n LL | const _: () = ();\n    | ^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #54912\n    = help: add #![feature(underscore_const_names)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "d7870c029182a9223d1a5faf1fed17c47b7f943f", "filename": "src/test/ui/imports/local-modularized-tricky-fail-2.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-2.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n+error[E0658]: non-ascii idents are not fully supported\n   --> $DIR/local-modularized-tricky-fail-2.rs:20:32\n    |\n LL | exported!();\n@@ -7,9 +7,10 @@ LL | exported!();\n LL |                 () => ( struct \u0411; )\n    |                                ^\n    |\n+   = note: for more information, see tracking issue #55467\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n+error[E0658]: non-ascii idents are not fully supported\n   --> $DIR/local-modularized-tricky-fail-2.rs:36:24\n    |\n LL |     panic!();\n@@ -18,9 +19,10 @@ LL |     panic!();\n LL |         () => ( struct \u0413; )\n    |                        ^\n    |\n+   = note: for more information, see tracking issue #55467\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n+error[E0658]: non-ascii idents are not fully supported\n   --> $DIR/local-modularized-tricky-fail-2.rs:46:24\n    |\n LL | include!();\n@@ -29,6 +31,7 @@ LL | include!();\n LL |         () => ( struct \u0414; )\n    |                        ^\n    |\n+   = note: for more information, see tracking issue #55467\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n error: aborting due to 3 previous errors"}, {"sha": "ea4f67c279f75e1ca752cd06dd26de6f2a08a751", "filename": "src/test/ui/inference/inference_unstable_forced.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Finference%2Finference_unstable_forced.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Finference%2Finference_unstable_forced.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Finference_unstable_forced.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: use of unstable library feature 'ipu_flatten' (see issue #99999)\n+error[E0658]: use of unstable library feature 'ipu_flatten'\n   --> $DIR/inference_unstable_forced.rs:11:20\n    |\n LL |     assert_eq!('x'.ipu_flatten(), 0);\n    |                    ^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #99999\n    = help: add #![feature(ipu_flatten)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "938f6badddaf4f21c008f71f23106dc455500fa4", "filename": "src/test/ui/issues/issue-17458.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fissues%2Fissue-17458.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fissues%2Fissue-17458.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17458.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: casting pointers to integers in statics is unstable (see issue #51910)\n+error[E0658]: casting pointers to integers in statics is unstable\n   --> $DIR/issue-17458.rs:1:28\n    |\n LL | static X: usize = unsafe { 0 as *const usize as usize };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #51910\n    = help: add #![feature(const_raw_ptr_to_usize_cast)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "d7906ab52b06214b402faa9978f209215e1c7bfe", "filename": "src/test/ui/issues/issue-18294.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fissues%2Fissue-18294.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fissues%2Fissue-18294.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18294.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: casting pointers to integers in constants is unstable (see issue #51910)\n+error[E0658]: casting pointers to integers in constants is unstable\n   --> $DIR/issue-18294.rs:3:31\n    |\n LL |     const Y: usize = unsafe { &X as *const u32 as usize };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #51910\n    = help: add #![feature(const_raw_ptr_to_usize_cast)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "b4a75652a87641aa2861efe17b169a6e69fb1082", "filename": "src/test/ui/issues/issue-20313.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fissues%2Fissue-20313.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fissues%2Fissue-20313.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20313.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: linking to LLVM intrinsics is experimental (see issue #29602)\n+error[E0658]: linking to LLVM intrinsics is experimental\n   --> $DIR/issue-20313.rs:3:5\n    |\n LL |     fn sqrt(x: f32) -> f32;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29602\n    = help: add #![feature(link_llvm_intrinsics)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "6ff02c4b4bce03960bc6cd088da8cd5e7e870db8", "filename": "src/test/ui/issues/issue-23024.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fissues%2Fissue-23024.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fissues%2Fissue-23024.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23024.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change. Use parenthetical notation (Fn(Foo, Bar) -> Baz) instead (see issue #29625)\n+error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change. Use parenthetical notation (Fn(Foo, Bar) -> Baz) instead\n   --> $DIR/issue-23024.rs:9:35\n    |\n LL |     println!(\"{:?}\",(vfnfer[0] as Fn)(3));\n    |                                   ^^\n    |\n+   = note: for more information, see tracking issue #29625\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n error[E0107]: wrong number of type arguments: expected 1, found 0"}, {"sha": "62fdfdea85bfd7bbaee89648eea06bca067357e1", "filename": "src/test/ui/issues/issue-25826.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fissues%2Fissue-25826.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fissues%2Fissue-25826.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25826.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: comparing raw pointers inside constant (see issue #53020)\n+error[E0658]: comparing raw pointers inside constant\n   --> $DIR/issue-25826.rs:3:30\n    |\n LL |     const A: bool = unsafe { id::<u8> as *const () < id::<u16> as *const () };\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #53020\n    = help: add #![feature(const_compare_raw_pointers)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "3fea36224d01e6aa25cbc1192608a749eb3fc45a", "filename": "src/test/ui/issues/issue-32655.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fissues%2Fissue-32655.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fissues%2Fissue-32655.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32655.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: The attribute `derive_Clone` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `derive_Clone` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/issue-32655.rs:6:11\n    |\n LL |         #[derive_Clone]\n@@ -7,14 +7,16 @@ LL |         #[derive_Clone]\n LL | foo!();\n    | ------- in this macro invocation\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error[E0658]: The attribute `derive_Clone` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `derive_Clone` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/issue-32655.rs:18:7\n    |\n LL |     #[derive_Clone]\n    |       ^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "8cc90dce6f940d64dd7b8924b15c146e9f752bdf", "filename": "src/test/ui/issues/issue-32829.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fissues%2Fissue-32829.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fissues%2Fissue-32829.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32829.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: panicking in statics is unstable (see issue #51999)\n+error[E0658]: panicking in statics is unstable\n   --> $DIR/issue-32829.rs:1:22\n    |\n LL | static S : u64 = { { panic!(\"foo\"); 0 } };\n    |                      ^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #51999\n    = help: add #![feature(const_panic)] to the crate attributes to enable\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n "}, {"sha": "e308d20ea4611c6a84943b773ea6a0db32aecbb8", "filename": "src/test/ui/issues/issue-37887.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fissues%2Fissue-37887.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fissues%2Fissue-37887.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37887.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -4,12 +4,13 @@ error[E0432]: unresolved import `libc`\n LL |     use libc::*;\n    |         ^^^^ maybe a missing `extern crate libc;`?\n \n-error[E0658]: use of unstable library feature 'rustc_private': this crate is being loaded from the sysroot, an unstable location; did you mean to load this crate from crates.io via `Cargo.toml` instead? (see issue #27812)\n+error[E0658]: use of unstable library feature 'rustc_private': this crate is being loaded from the sysroot, an unstable location; did you mean to load this crate from crates.io via `Cargo.toml` instead?\n   --> $DIR/issue-37887.rs:2:5\n    |\n LL |     extern crate libc;\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #27812\n    = help: add #![feature(rustc_private)] to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "a1d52207ca2d5838045cb39f417152a63f43883f", "filename": "src/test/ui/issues/issue-49074.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fissues%2Fissue-49074.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fissues%2Fissue-49074.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49074.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: The attribute `marco_use` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `marco_use` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/issue-49074.rs:3:3\n    |\n LL | #[marco_use] // typo\n    |   ^^^^^^^^^ help: a built-in attribute with a similar name exists: `macro_use`\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error: cannot find macro `bar!` in this scope"}, {"sha": "7a81478c02c224f7555e77e4c55e4658193cff76", "filename": "src/test/ui/issues/issue-51279.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fissues%2Fissue-51279.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fissues%2Fissue-51279.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51279.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -46,12 +46,13 @@ error: #[cfg] cannot be applied on a generic parameter\n LL | type Z<#[ignored] 'a, #[cfg(none)] T> = X<'a, T>;\n    |                       ^^^^^^^^^^^^\n \n-error[E0658]: The attribute `ignored` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `ignored` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/issue-51279.rs:23:8\n    |\n LL | type Z<#[ignored] 'a, #[cfg(none)] T> = X<'a, T>;\n    |        ^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error: aborting due to 9 previous errors"}, {"sha": "06b51e0674463329b1d91890864e26caf938da78", "filename": "src/test/ui/issues/issue-52023-array-size-pointer-cast.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fissues%2Fissue-52023-array-size-pointer-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fissues%2Fissue-52023-array-size-pointer-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52023-array-size-pointer-cast.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: casting pointers to integers in constants is unstable (see issue #51910)\n+error[E0658]: casting pointers to integers in constants is unstable\n   --> $DIR/issue-52023-array-size-pointer-cast.rs:2:17\n    |\n LL |     let _ = [0; (&0 as *const i32) as usize];\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #51910\n    = help: add #![feature(const_raw_ptr_to_usize_cast)] to the crate attributes to enable\n \n error[E0080]: it is undefined behavior to use this value"}, {"sha": "96b76219ee23aa85a3e23d187b860dfed25cbcf8", "filename": "src/test/ui/linkage4.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Flinkage4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Flinkage4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage4.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: the `linkage` attribute is experimental and not portable across platforms (see issue #29603)\n+error[E0658]: the `linkage` attribute is experimental and not portable across platforms\n   --> $DIR/linkage4.rs:1:1\n    |\n LL | #[linkage = \"external\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29603\n    = help: add #![feature(linkage)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "31b1f69b9cb424843629c6419ff3c74b9af4b3f3", "filename": "src/test/ui/macros/macro-reexport-removed.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fmacros%2Fmacro-reexport-removed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fmacros%2Fmacro-reexport-removed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-reexport-removed.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -10,12 +10,13 @@ note: subsumed by `pub use`\n LL | #![feature(macro_reexport)]\n    |            ^^^^^^^^^^^^^^\n \n-error[E0658]: The attribute `macro_reexport` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `macro_reexport` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/macro-reexport-removed.rs:5:3\n    |\n LL | #[macro_reexport(macro_one)]\n    |   ^^^^^^^^^^^^^^ help: a built-in attribute with a similar name exists: `macro_export`\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "3abc4f2eb21819bb1813923519b3bd2166f88a3d", "filename": "src/test/ui/macros/macros-in-extern.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fmacros%2Fmacros-in-extern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fmacros%2Fmacros-in-extern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacros-in-extern.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,25 +1,28 @@\n-error[E0658]: macro invocations in `extern {}` blocks are experimental (see issue #49476)\n+error[E0658]: macro invocations in `extern {}` blocks are experimental\n   --> $DIR/macros-in-extern.rs:26:5\n    |\n LL |     returns_isize!(rust_get_test_int);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #49476\n    = help: add #![feature(macros_in_extern)] to the crate attributes to enable\n \n-error[E0658]: macro invocations in `extern {}` blocks are experimental (see issue #49476)\n+error[E0658]: macro invocations in `extern {}` blocks are experimental\n   --> $DIR/macros-in-extern.rs:28:5\n    |\n LL |     takes_u32_returns_u32!(rust_dbg_extern_identity_u32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #49476\n    = help: add #![feature(macros_in_extern)] to the crate attributes to enable\n \n-error[E0658]: macro invocations in `extern {}` blocks are experimental (see issue #49476)\n+error[E0658]: macro invocations in `extern {}` blocks are experimental\n   --> $DIR/macros-in-extern.rs:30:5\n    |\n LL |     emits_nothing!();\n    |     ^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #49476\n    = help: add #![feature(macros_in_extern)] to the crate attributes to enable\n \n error: aborting due to 3 previous errors"}, {"sha": "715c57c604cb0fd2660752caa2995a891ced38b5", "filename": "src/test/ui/panic-runtime/needs-gate.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fpanic-runtime%2Fneeds-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fpanic-runtime%2Fneeds-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fneeds-gate.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,17 +1,19 @@\n-error[E0658]: the `#[panic_runtime]` attribute is an experimental feature (see issue #32837)\n+error[E0658]: the `#[panic_runtime]` attribute is an experimental feature\n   --> $DIR/needs-gate.rs:4:1\n    |\n LL | #![panic_runtime]\n    | ^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #32837\n    = help: add #![feature(panic_runtime)] to the crate attributes to enable\n \n-error[E0658]: the `#[needs_panic_runtime]` attribute is an experimental feature (see issue #32837)\n+error[E0658]: the `#[needs_panic_runtime]` attribute is an experimental feature\n   --> $DIR/needs-gate.rs:5:1\n    |\n LL | #![needs_panic_runtime]\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #32837\n    = help: add #![feature(needs_panic_runtime)] to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "e7fea727200c4dac8714806fe52dc06afa6d9a1a", "filename": "src/test/ui/proc-macro/attr-stmt-expr.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,17 +1,19 @@\n-error[E0658]: attributes on expressions are experimental. (see issue #15701)\n+error[E0658]: attributes on expressions are experimental\n   --> $DIR/attr-stmt-expr.rs:10:5\n    |\n LL |     #[expect_print_expr]\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #15701\n    = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n \n-error[E0658]: attributes on expressions are experimental. (see issue #15701)\n+error[E0658]: attributes on expressions are experimental\n   --> $DIR/attr-stmt-expr.rs:23:5\n    |\n LL |     #[expect_expr]\n    |     ^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #15701\n    = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "d88e38c035dd603103ae9ec85b2491f27de5ff6a", "filename": "src/test/ui/proc-macro/derive-helper-shadowing.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: The attribute `my_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `my_attr` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/derive-helper-shadowing.rs:20:15\n    |\n LL |             #[my_attr]\n    |               ^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error[E0659]: `my_attr` is ambiguous (derive helper attribute vs any other name)"}, {"sha": "0612f6d6e2bd6d55afda6b4a171cdfef5ea73134", "filename": "src/test/ui/proc-macro/derive-still-gated.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fproc-macro%2Fderive-still-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fproc-macro%2Fderive-still-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fderive-still-gated.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: The attribute `derive_A` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `derive_A` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/derive-still-gated.rs:8:3\n    |\n LL | #[derive_A]\n    |   ^^^^^^^^ help: a built-in attribute with a similar name exists: `derive`\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "5c3191c38fa53268848297e7066fc3dc9e25b814", "filename": "src/test/ui/proc-macro/expand-to-unstable-2.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable-2.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: unless otherwise specified, attributes with the prefix `rustc_` are reserved for internal compiler diagnostics (see issue #29642)\n+error[E0658]: unless otherwise specified, attributes with the prefix `rustc_` are reserved for internal compiler diagnostics\n   --> $DIR/expand-to-unstable-2.rs:8:10\n    |\n LL | #[derive(Unstable)]\n    |          ^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(rustc_attrs)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "acf8ab02ba7caebc96f1d5f088ea5a0e94475420", "filename": "src/test/ui/proc-macro/issue-41211.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fproc-macro%2Fissue-41211.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fproc-macro%2Fissue-41211.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-41211.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: The attribute `emit_unchanged` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `emit_unchanged` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/issue-41211.rs:8:4\n    |\n LL | #![emit_unchanged]\n    |    ^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error: inconsistent resolution for a macro: first custom attribute, then attribute macro"}, {"sha": "d747f07a5fad450e85863c294054e42925020371", "filename": "src/test/ui/proc-macro/macros-in-extern.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fproc-macro%2Fmacros-in-extern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fproc-macro%2Fmacros-in-extern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacros-in-extern.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,25 +1,28 @@\n-error[E0658]: macro invocations in `extern {}` blocks are experimental (see issue #49476)\n+error[E0658]: macro invocations in `extern {}` blocks are experimental\n   --> $DIR/macros-in-extern.rs:15:5\n    |\n LL |     #[no_output]\n    |     ^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #49476\n    = help: add #![feature(macros_in_extern)] to the crate attributes to enable\n \n-error[E0658]: macro invocations in `extern {}` blocks are experimental (see issue #49476)\n+error[E0658]: macro invocations in `extern {}` blocks are experimental\n   --> $DIR/macros-in-extern.rs:19:5\n    |\n LL |     #[nop_attr]\n    |     ^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #49476\n    = help: add #![feature(macros_in_extern)] to the crate attributes to enable\n \n-error[E0658]: macro invocations in `extern {}` blocks are experimental (see issue #49476)\n+error[E0658]: macro invocations in `extern {}` blocks are experimental\n   --> $DIR/macros-in-extern.rs:23:5\n    |\n LL |     emit_input!(fn rust_dbg_extern_identity_u32(arg: u32) -> u32;);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #49476\n    = help: add #![feature(macros_in_extern)] to the crate attributes to enable\n \n error: aborting due to 3 previous errors"}, {"sha": "0dda6b3accc4d656bafbbbd82e10c6605e8160cb", "filename": "src/test/ui/proc-macro/more-gates.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fproc-macro%2Fmore-gates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fproc-macro%2Fmore-gates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmore-gates.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,41 +1,46 @@\n-error[E0658]: procedural macros cannot expand to macro definitions (see issue #54727)\n+error[E0658]: procedural macros cannot expand to macro definitions\n   --> $DIR/more-gates.rs:9:1\n    |\n LL | #[attr2mac1]\n    | ^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #54727\n    = help: add #![feature(proc_macro_hygiene)] to the crate attributes to enable\n \n-error[E0658]: procedural macros cannot expand to macro definitions (see issue #54727)\n+error[E0658]: procedural macros cannot expand to macro definitions\n   --> $DIR/more-gates.rs:12:1\n    |\n LL | #[attr2mac2]\n    | ^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #54727\n    = help: add #![feature(proc_macro_hygiene)] to the crate attributes to enable\n \n-error[E0658]: procedural macros cannot expand to macro definitions (see issue #54727)\n+error[E0658]: procedural macros cannot expand to macro definitions\n   --> $DIR/more-gates.rs:16:1\n    |\n LL | mac2mac1!();\n    | ^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #54727\n    = help: add #![feature(proc_macro_hygiene)] to the crate attributes to enable\n \n-error[E0658]: procedural macros cannot expand to macro definitions (see issue #54727)\n+error[E0658]: procedural macros cannot expand to macro definitions\n   --> $DIR/more-gates.rs:17:1\n    |\n LL | mac2mac2!();\n    | ^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #54727\n    = help: add #![feature(proc_macro_hygiene)] to the crate attributes to enable\n \n-error[E0658]: procedural macros cannot expand to macro definitions (see issue #54727)\n+error[E0658]: procedural macros cannot expand to macro definitions\n   --> $DIR/more-gates.rs:19:1\n    |\n LL | tricky!();\n    | ^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #54727\n    = help: add #![feature(proc_macro_hygiene)] to the crate attributes to enable\n \n error: aborting due to 5 previous errors"}, {"sha": "cf34380fc82e931e5bcd991ac5e571716c1e65fb", "filename": "src/test/ui/proc-macro/proc-macro-attributes.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-attributes.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: The attribute `C` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `C` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/proc-macro-attributes.rs:7:3\n    |\n LL | #[C]\n    |   ^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error[E0659]: `B` is ambiguous (derive helper attribute vs any other name)"}, {"sha": "4dac2a22a7b77d3911b94633a4ac61ab59431e67", "filename": "src/test/ui/proc-macro/proc-macro-gates.stderr", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,33 +1,37 @@\n-error[E0658]: non-builtin inner attributes are unstable (see issue #54726)\n+error[E0658]: non-builtin inner attributes are unstable\n   --> $DIR/proc-macro-gates.rs:11:5\n    |\n LL |     #![a]\n    |     ^^^^^\n    |\n+   = note: for more information, see tracking issue #54726\n    = help: add #![feature(custom_inner_attributes)] to the crate attributes to enable\n \n-error[E0658]: non-builtin inner attributes are unstable (see issue #54726)\n+error[E0658]: non-builtin inner attributes are unstable\n   --> $DIR/proc-macro-gates.rs:18:5\n    |\n LL |     #![a]\n    |     ^^^^^\n    |\n+   = note: for more information, see tracking issue #54726\n    = help: add #![feature(custom_inner_attributes)] to the crate attributes to enable\n \n-error[E0658]: custom attributes cannot be applied to modules (see issue #54727)\n+error[E0658]: custom attributes cannot be applied to modules\n   --> $DIR/proc-macro-gates.rs:14:1\n    |\n LL | #[a]\n    | ^^^^\n    |\n+   = note: for more information, see tracking issue #54727\n    = help: add #![feature(proc_macro_hygiene)] to the crate attributes to enable\n \n-error[E0658]: custom attributes cannot be applied to modules (see issue #54727)\n+error[E0658]: custom attributes cannot be applied to modules\n   --> $DIR/proc-macro-gates.rs:18:5\n    |\n LL |     #![a]\n    |     ^^^^^\n    |\n+   = note: for more information, see tracking issue #54727\n    = help: add #![feature(proc_macro_hygiene)] to the crate attributes to enable\n \n error: custom attribute invocations must be of the form #[foo] or #[foo(..)], the macro name must only be followed by a delimiter token\n@@ -36,100 +40,112 @@ error: custom attribute invocations must be of the form #[foo] or #[foo(..)], th\n LL | #[a = \"y\"]\n    | ^^^^^^^^^^\n \n-error[E0658]: custom attributes cannot be applied to statements (see issue #54727)\n+error[E0658]: custom attributes cannot be applied to statements\n   --> $DIR/proc-macro-gates.rs:31:5\n    |\n LL |     #[a]\n    |     ^^^^\n    |\n+   = note: for more information, see tracking issue #54727\n    = help: add #![feature(proc_macro_hygiene)] to the crate attributes to enable\n \n-error[E0658]: custom attributes cannot be applied to statements (see issue #54727)\n+error[E0658]: custom attributes cannot be applied to statements\n   --> $DIR/proc-macro-gates.rs:35:5\n    |\n LL |     #[a]\n    |     ^^^^\n    |\n+   = note: for more information, see tracking issue #54727\n    = help: add #![feature(proc_macro_hygiene)] to the crate attributes to enable\n \n-error[E0658]: custom attributes cannot be applied to statements (see issue #54727)\n+error[E0658]: custom attributes cannot be applied to statements\n   --> $DIR/proc-macro-gates.rs:39:5\n    |\n LL |     #[a]\n    |     ^^^^\n    |\n+   = note: for more information, see tracking issue #54727\n    = help: add #![feature(proc_macro_hygiene)] to the crate attributes to enable\n \n-error[E0658]: custom attributes cannot be applied to expressions (see issue #54727)\n+error[E0658]: custom attributes cannot be applied to expressions\n   --> $DIR/proc-macro-gates.rs:43:14\n    |\n LL |     let _x = #[a] 2;\n    |              ^^^^\n    |\n+   = note: for more information, see tracking issue #54727\n    = help: add #![feature(proc_macro_hygiene)] to the crate attributes to enable\n \n-error[E0658]: custom attributes cannot be applied to expressions (see issue #54727)\n+error[E0658]: custom attributes cannot be applied to expressions\n   --> $DIR/proc-macro-gates.rs:46:15\n    |\n LL |     let _x = [#[a] 2];\n    |               ^^^^\n    |\n+   = note: for more information, see tracking issue #54727\n    = help: add #![feature(proc_macro_hygiene)] to the crate attributes to enable\n \n-error[E0658]: custom attributes cannot be applied to expressions (see issue #54727)\n+error[E0658]: custom attributes cannot be applied to expressions\n   --> $DIR/proc-macro-gates.rs:49:14\n    |\n LL |     let _x = #[a] println!();\n    |              ^^^^\n    |\n+   = note: for more information, see tracking issue #54727\n    = help: add #![feature(proc_macro_hygiene)] to the crate attributes to enable\n \n-error[E0658]: procedural macros cannot be expanded to types (see issue #54727)\n+error[E0658]: procedural macros cannot be expanded to types\n   --> $DIR/proc-macro-gates.rs:53:13\n    |\n LL |     let _x: m!(u32) = 3;\n    |             ^^^^^^^\n    |\n+   = note: for more information, see tracking issue #54727\n    = help: add #![feature(proc_macro_hygiene)] to the crate attributes to enable\n \n-error[E0658]: procedural macros cannot be expanded to patterns (see issue #54727)\n+error[E0658]: procedural macros cannot be expanded to patterns\n   --> $DIR/proc-macro-gates.rs:54:12\n    |\n LL |     if let m!(Some(_x)) = Some(3) {}\n    |            ^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #54727\n    = help: add #![feature(proc_macro_hygiene)] to the crate attributes to enable\n \n-error[E0658]: procedural macros cannot be expanded to statements (see issue #54727)\n+error[E0658]: procedural macros cannot be expanded to statements\n   --> $DIR/proc-macro-gates.rs:56:5\n    |\n LL |     m!(struct S;);\n    |     ^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #54727\n    = help: add #![feature(proc_macro_hygiene)] to the crate attributes to enable\n \n-error[E0658]: procedural macros cannot be expanded to statements (see issue #54727)\n+error[E0658]: procedural macros cannot be expanded to statements\n   --> $DIR/proc-macro-gates.rs:57:5\n    |\n LL |     m!(let _x = 3;);\n    |     ^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #54727\n    = help: add #![feature(proc_macro_hygiene)] to the crate attributes to enable\n \n-error[E0658]: procedural macros cannot be expanded to expressions (see issue #54727)\n+error[E0658]: procedural macros cannot be expanded to expressions\n   --> $DIR/proc-macro-gates.rs:59:14\n    |\n LL |     let _x = m!(3);\n    |              ^^^^^\n    |\n+   = note: for more information, see tracking issue #54727\n    = help: add #![feature(proc_macro_hygiene)] to the crate attributes to enable\n \n-error[E0658]: procedural macros cannot be expanded to expressions (see issue #54727)\n+error[E0658]: procedural macros cannot be expanded to expressions\n   --> $DIR/proc-macro-gates.rs:60:15\n    |\n LL |     let _x = [m!(3)];\n    |               ^^^^^\n    |\n+   = note: for more information, see tracking issue #54727\n    = help: add #![feature(proc_macro_hygiene)] to the crate attributes to enable\n \n error: aborting due to 17 previous errors"}, {"sha": "5dc0524f9df2f1ef8506401c8240cb25f9817b41", "filename": "src/test/ui/proc-macro/proc-macro-gates2.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates2.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,17 +1,19 @@\n-error[E0658]: The attribute `a` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `a` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/proc-macro-gates2.rs:13:11\n    |\n LL | fn _test6<#[a] T>() {}\n    |           ^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error[E0658]: The attribute `a` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `a` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/proc-macro-gates2.rs:18:9\n    |\n LL |         #[a]\n    |         ^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "50948bf6ab8bf60ab092c21f04b2b6057bd6e7be", "filename": "src/test/ui/reserved/reserved-attr-on-macro.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Freserved%2Freserved-attr-on-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Freserved%2Freserved-attr-on-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freserved%2Freserved-attr-on-macro.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: unless otherwise specified, attributes with the prefix `rustc_` are reserved for internal compiler diagnostics (see issue #29642)\n+error[E0658]: unless otherwise specified, attributes with the prefix `rustc_` are reserved for internal compiler diagnostics\n   --> $DIR/reserved-attr-on-macro.rs:1:3\n    |\n LL | #[rustc_attribute_should_be_reserved]\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(rustc_attrs)] to the crate attributes to enable\n \n error: cannot determine resolution for the macro `foo`"}, {"sha": "9af5282c6ec2479a706acea2db9958eea689e75f", "filename": "src/test/ui/rfc1445/feature-gate.no_gate.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Frfc1445%2Ffeature-gate.no_gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Frfc1445%2Ffeature-gate.no_gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Ffeature-gate.no_gate.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: the semantics of constant patterns is not yet settled (see issue #31434)\n+error[E0658]: the semantics of constant patterns is not yet settled\n   --> $DIR/feature-gate.rs:13:1\n    |\n LL | #[structural_match]\n    | ^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #31434\n    = help: add #![feature(structural_match)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "ab3609834f5d2054ce9d0a4d42ceacdb1ad3b04c", "filename": "src/test/ui/span/gated-features-attr-spans.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fspan%2Fgated-features-attr-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fspan%2Fgated-features-attr-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fgated-features-attr-spans.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: SIMD types are experimental and possibly buggy (see issue #27731)\n+error[E0658]: SIMD types are experimental and possibly buggy\n   --> $DIR/gated-features-attr-spans.rs:1:1\n    |\n LL | #[repr(simd)]\n    | ^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #27731\n    = help: add #![feature(repr_simd)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "9da9ec1d9318af10345704c211dc4f48cf6c3c7c", "filename": "src/test/ui/span/issue-36530.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fspan%2Fissue-36530.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fspan%2Fissue-36530.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-36530.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,25 +1,28 @@\n-error[E0658]: The attribute `foo` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `foo` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/issue-36530.rs:3:3\n    |\n LL | #[foo]\n    |   ^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error[E0658]: non-builtin inner attributes are unstable (see issue #54726)\n+error[E0658]: non-builtin inner attributes are unstable\n   --> $DIR/issue-36530.rs:5:5\n    |\n LL |     #![foo]\n    |     ^^^^^^^\n    |\n+   = note: for more information, see tracking issue #54726\n    = help: add #![feature(custom_inner_attributes)] to the crate attributes to enable\n \n-error[E0658]: The attribute `foo` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `foo` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/issue-36530.rs:5:8\n    |\n LL |     #![foo]\n    |        ^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error: aborting due to 3 previous errors"}, {"sha": "94e0cc3655a3c9c13f6ba7aebc508e5c7fed5637", "filename": "src/test/ui/specialization/defaultimpl/specialization-feature-gate-default.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-feature-gate-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-feature-gate-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-feature-gate-default.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,11 +1,12 @@\n-error[E0658]: specialization is unstable (see issue #31844)\n+error[E0658]: specialization is unstable\n   --> $DIR/specialization-feature-gate-default.rs:7:1\n    |\n LL | / default impl<T> Foo for T {\n LL | |     fn foo(&self) {}\n LL | | }\n    | |_^\n    |\n+   = note: for more information, see tracking issue #31844\n    = help: add #![feature(specialization)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "c839680e7dbebc6e040b7617d5385875edce97f2", "filename": "src/test/ui/specialization/specialization-feature-gate-default.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-feature-gate-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-feature-gate-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-feature-gate-default.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: specialization is unstable (see issue #31844)\n+error[E0658]: specialization is unstable\n   --> $DIR/specialization-feature-gate-default.rs:10:5\n    |\n LL |     default fn foo(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #31844\n    = help: add #![feature(specialization)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "ca4d7cc6a6ccf32090879146b71e66ce37191694", "filename": "src/test/ui/stability-attribute/stability-attribute-issue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-issue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-issue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-issue.rs?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -8,7 +8,7 @@ use stability_attribute_issue::*;\n \n fn main() {\n     unstable();\n-    //~^ ERROR use of unstable library feature 'unstable_test_feature' (see issue #1)\n+    //~^ ERROR use of unstable library feature 'unstable_test_feature'\n     unstable_msg();\n-    //~^ ERROR use of unstable library feature 'unstable_test_feature': message (see issue #2)\n+    //~^ ERROR use of unstable library feature 'unstable_test_feature': message\n }"}, {"sha": "d7785c4841551bc6e65be48194efb8f5c4c2dd12", "filename": "src/test/ui/stability-attribute/stability-attribute-issue.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-issue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-issue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-issue.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,17 +1,19 @@\n-error[E0658]: use of unstable library feature 'unstable_test_feature' (see issue #1)\n+error[E0658]: use of unstable library feature 'unstable_test_feature'\n   --> $DIR/stability-attribute-issue.rs:10:5\n    |\n LL |     unstable();\n    |     ^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #1\n    = help: add #![feature(unstable_test_feature)] to the crate attributes to enable\n \n-error[E0658]: use of unstable library feature 'unstable_test_feature': message (see issue #2)\n+error[E0658]: use of unstable library feature 'unstable_test_feature': message\n   --> $DIR/stability-attribute-issue.rs:12:5\n    |\n LL |     unstable_msg();\n    |     ^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #2\n    = help: add #![feature(unstable_test_feature)] to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "8952175e4258a86db4c2f06e290da95a118b059c", "filename": "src/test/ui/stmt_expr_attrs_no_feature.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fstmt_expr_attrs_no_feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fstmt_expr_attrs_no_feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstmt_expr_attrs_no_feature.rs?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -91,50 +91,50 @@ item_mac!(e);\n extern {\n     #[cfg(unset)]\n     fn x(a: [u8; #[attr] 5]);\n-    fn y(a: [u8; #[attr] 5]); //~ ERROR 15701\n+    fn y(a: [u8; #[attr] 5]); //~ ERROR attributes on expressions are experimental\n }\n \n struct Foo;\n impl Foo {\n     #[cfg(unset)]\n     const X: u8 = #[attr] 5;\n-    const Y: u8 = #[attr] 5; //~ ERROR 15701\n+    const Y: u8 = #[attr] 5; //~ ERROR attributes on expressions are experimental\n }\n \n trait Bar {\n     #[cfg(unset)]\n     const X: [u8; #[attr] 5];\n-    const Y: [u8; #[attr] 5]; //~ ERROR 15701\n+    const Y: [u8; #[attr] 5]; //~ ERROR attributes on expressions are experimental\n }\n \n struct Joyce {\n     #[cfg(unset)]\n     field: [u8; #[attr] 5],\n-    field2: [u8; #[attr] 5] //~ ERROR 15701\n+    field2: [u8; #[attr] 5] //~ ERROR attributes on expressions are experimental\n }\n \n struct Walky(\n     #[cfg(unset)] [u8; #[attr] 5],\n-    [u8; #[attr] 5] //~ ERROR 15701\n+    [u8; #[attr] 5] //~ ERROR attributes on expressions are experimental\n );\n \n enum Mike {\n     Happy(\n         #[cfg(unset)] [u8; #[attr] 5],\n-        [u8; #[attr] 5] //~ ERROR 15701\n+        [u8; #[attr] 5] //~ ERROR attributes on expressions are experimental\n     ),\n     Angry {\n         #[cfg(unset)]\n         field: [u8; #[attr] 5],\n-        field2: [u8; #[attr] 5] //~ ERROR 15701\n+        field2: [u8; #[attr] 5] //~ ERROR attributes on expressions are experimental\n     }\n }\n \n fn pat() {\n     match 5 {\n         #[cfg(unset)]\n         5 => #[attr] (),\n-        6 => #[attr] (), //~ ERROR 15701\n+        6 => #[attr] (), //~ ERROR attributes on expressions are experimental\n         _ => (),\n     }\n }"}, {"sha": "88b90a7f94b9447f62d06ca76f321708eea8828d", "filename": "src/test/ui/stmt_expr_attrs_no_feature.stderr", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fstmt_expr_attrs_no_feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fstmt_expr_attrs_no_feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstmt_expr_attrs_no_feature.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,73 +1,82 @@\n-error[E0658]: attributes on expressions are experimental. (see issue #15701)\n+error[E0658]: attributes on expressions are experimental\n   --> $DIR/stmt_expr_attrs_no_feature.rs:13:5\n    |\n LL |     #[attr]\n    |     ^^^^^^^\n    |\n+   = note: for more information, see tracking issue #15701\n    = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n \n-error[E0658]: attributes on expressions are experimental. (see issue #15701)\n+error[E0658]: attributes on expressions are experimental\n   --> $DIR/stmt_expr_attrs_no_feature.rs:94:18\n    |\n LL |     fn y(a: [u8; #[attr] 5]);\n    |                  ^^^^^^^\n    |\n+   = note: for more information, see tracking issue #15701\n    = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n \n-error[E0658]: attributes on expressions are experimental. (see issue #15701)\n+error[E0658]: attributes on expressions are experimental\n   --> $DIR/stmt_expr_attrs_no_feature.rs:101:19\n    |\n LL |     const Y: u8 = #[attr] 5;\n    |                   ^^^^^^^\n    |\n+   = note: for more information, see tracking issue #15701\n    = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n \n-error[E0658]: attributes on expressions are experimental. (see issue #15701)\n+error[E0658]: attributes on expressions are experimental\n   --> $DIR/stmt_expr_attrs_no_feature.rs:107:19\n    |\n LL |     const Y: [u8; #[attr] 5];\n    |                   ^^^^^^^\n    |\n+   = note: for more information, see tracking issue #15701\n    = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n \n-error[E0658]: attributes on expressions are experimental. (see issue #15701)\n+error[E0658]: attributes on expressions are experimental\n   --> $DIR/stmt_expr_attrs_no_feature.rs:113:18\n    |\n LL |     field2: [u8; #[attr] 5]\n    |                  ^^^^^^^\n    |\n+   = note: for more information, see tracking issue #15701\n    = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n \n-error[E0658]: attributes on expressions are experimental. (see issue #15701)\n+error[E0658]: attributes on expressions are experimental\n   --> $DIR/stmt_expr_attrs_no_feature.rs:118:10\n    |\n LL |     [u8; #[attr] 5]\n    |          ^^^^^^^\n    |\n+   = note: for more information, see tracking issue #15701\n    = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n \n-error[E0658]: attributes on expressions are experimental. (see issue #15701)\n+error[E0658]: attributes on expressions are experimental\n   --> $DIR/stmt_expr_attrs_no_feature.rs:124:14\n    |\n LL |         [u8; #[attr] 5]\n    |              ^^^^^^^\n    |\n+   = note: for more information, see tracking issue #15701\n    = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n \n-error[E0658]: attributes on expressions are experimental. (see issue #15701)\n+error[E0658]: attributes on expressions are experimental\n   --> $DIR/stmt_expr_attrs_no_feature.rs:129:22\n    |\n LL |         field2: [u8; #[attr] 5]\n    |                      ^^^^^^^\n    |\n+   = note: for more information, see tracking issue #15701\n    = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n \n-error[E0658]: attributes on expressions are experimental. (see issue #15701)\n+error[E0658]: attributes on expressions are experimental\n   --> $DIR/stmt_expr_attrs_no_feature.rs:137:14\n    |\n LL |         6 => #[attr] (),\n    |              ^^^^^^^\n    |\n+   = note: for more information, see tracking issue #15701\n    = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n \n error: aborting due to 9 previous errors"}, {"sha": "1644b8bef3c0a9d7955749b6fa51bc30f94e976d", "filename": "src/test/ui/suggestions/attribute-typos.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fsuggestions%2Fattribute-typos.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fsuggestions%2Fattribute-typos.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fattribute-typos.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,25 +1,28 @@\n-error[E0658]: unless otherwise specified, attributes with the prefix `rustc_` are reserved for internal compiler diagnostics (see issue #29642)\n+error[E0658]: unless otherwise specified, attributes with the prefix `rustc_` are reserved for internal compiler diagnostics\n   --> $DIR/attribute-typos.rs:11:3\n    |\n LL | #[rustc_err]\n    |   ^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(rustc_attrs)] to the crate attributes to enable\n \n-error[E0658]: The attribute `tests` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `tests` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/attribute-typos.rs:6:3\n    |\n LL | #[tests]\n    |   ^^^^^ help: a built-in attribute with a similar name exists: `test`\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error[E0658]: The attribute `deprcated` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `deprcated` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/attribute-typos.rs:1:3\n    |\n LL | #[deprcated]\n    |   ^^^^^^^^^ help: a built-in attribute with a similar name exists: `deprecated`\n    |\n+   = note: for more information, see tracking issue #29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error: aborting due to 3 previous errors"}, {"sha": "b98c3c38aa7f6323e7fb47f93b365268605e06f5", "filename": "src/test/ui/syntax-trait-polarity-feature-gate.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fsyntax-trait-polarity-feature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Fsyntax-trait-polarity-feature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsyntax-trait-polarity-feature-gate.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: negative trait bounds are not yet fully implemented; use marker types for now (see issue #13231)\n+error[E0658]: negative trait bounds are not yet fully implemented; use marker types for now\n   --> $DIR/syntax-trait-polarity-feature-gate.rs:7:1\n    |\n LL | impl !Send for TestType {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #13231\n    = help: add #![feature(optin_builtin_traits)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "c34bcdcb2307974c2b4e2d50cdc357541345623f", "filename": "src/test/ui/target-feature-gate.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ftarget-feature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ftarget-feature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature-gate.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: the target feature `avx512bw` is currently unstable (see issue #44839)\n+error[E0658]: the target feature `avx512bw` is currently unstable\n   --> $DIR/target-feature-gate.rs:28:18\n    |\n LL | #[target_feature(enable = \"avx512bw\")]\n    |                  ^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #44839\n    = help: add #![feature(avx512_target_feature)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "81f719f962a13bf5c7773169a1c2b4b6d1aa2241", "filename": "src/test/ui/trace_macros-gate.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ftrace_macros-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Ftrace_macros-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrace_macros-gate.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: `trace_macros` is not stable enough for use and is subject to change (see issue #29598)\n+error[E0658]: `trace_macros` is not stable enough for use and is subject to change\n   --> $DIR/trace_macros-gate.rs:4:5\n    |\n LL |     trace_macros!();\n    |     ^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29598\n    = help: add #![feature(trace_macros)] to the crate attributes to enable\n \n error: trace_macros! accepts only `true` or `false`\n@@ -12,23 +13,25 @@ error: trace_macros! accepts only `true` or `false`\n LL |     trace_macros!();\n    |     ^^^^^^^^^^^^^^^^\n \n-error[E0658]: `trace_macros` is not stable enough for use and is subject to change (see issue #29598)\n+error[E0658]: `trace_macros` is not stable enough for use and is subject to change\n   --> $DIR/trace_macros-gate.rs:6:5\n    |\n LL |     trace_macros!(true);\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29598\n    = help: add #![feature(trace_macros)] to the crate attributes to enable\n \n-error[E0658]: `trace_macros` is not stable enough for use and is subject to change (see issue #29598)\n+error[E0658]: `trace_macros` is not stable enough for use and is subject to change\n   --> $DIR/trace_macros-gate.rs:7:5\n    |\n LL |     trace_macros!(false);\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29598\n    = help: add #![feature(trace_macros)] to the crate attributes to enable\n \n-error[E0658]: `trace_macros` is not stable enough for use and is subject to change (see issue #29598)\n+error[E0658]: `trace_macros` is not stable enough for use and is subject to change\n   --> $DIR/trace_macros-gate.rs:10:26\n    |\n LL |         ($x: ident) => { trace_macros!($x) }\n@@ -37,6 +40,7 @@ LL |         ($x: ident) => { trace_macros!($x) }\n LL |     expando!(true);\n    |     --------------- in this macro invocation\n    |\n+   = note: for more information, see tracking issue #29598\n    = help: add #![feature(trace_macros)] to the crate attributes to enable\n \n error: aborting due to 5 previous errors"}, {"sha": "4e2674c973fd13fe949c788006405d15de253be0", "filename": "src/test/ui/unboxed-closures/unboxed-closure-feature-gate.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-feature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-feature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-feature-gate.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,9 +1,10 @@\n-error[E0658]: parenthetical notation is only stable when used with `Fn`-family traits (see issue #29625)\n+error[E0658]: parenthetical notation is only stable when used with `Fn`-family traits\n   --> $DIR/unboxed-closure-feature-gate.rs:13:16\n    |\n LL |     let x: Box<Foo(isize)>;\n    |                ^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29625\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "c9e97cdb0fe4badb2bdd60f636a3629195270ee1", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-not-used-on-fn.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-not-used-on-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-not-used-on-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-not-used-on-fn.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,17 +1,19 @@\n-error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change. Use parenthetical notation (Fn(Foo, Bar) -> Baz) instead (see issue #29625)\n+error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change. Use parenthetical notation (Fn(Foo, Bar) -> Baz) instead\n   --> $DIR/unboxed-closure-sugar-not-used-on-fn.rs:3:13\n    |\n LL | fn bar1(x: &Fn<(), Output=()>) {\n    |             ^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see tracking issue #29625\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n-error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change. Use parenthetical notation (Fn(Foo, Bar) -> Baz) instead (see issue #29625)\n+error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change. Use parenthetical notation (Fn(Foo, Bar) -> Baz) instead\n   --> $DIR/unboxed-closure-sugar-not-used-on-fn.rs:7:28\n    |\n LL | fn bar2<T>(x: &T) where T: Fn<()> {\n    |                            ^^^^^^\n    |\n+   = note: for more information, see tracking issue #29625\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "d4a42fd32d54290242a75dd472a7edb5e931475b", "filename": "src/test/ui/utf8_idents.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Futf8_idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab97062cfddb6e5e5e32352dd15ca2243aba3ff/src%2Ftest%2Fui%2Futf8_idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Futf8_idents.stderr?ref=3ab97062cfddb6e5e5e32352dd15ca2243aba3ff", "patch": "@@ -1,33 +1,37 @@\n-error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n+error[E0658]: non-ascii idents are not fully supported\n   --> $DIR/utf8_idents.rs:2:5\n    |\n LL |     '\u03b2,\n    |     ^^\n    |\n+   = note: for more information, see tracking issue #55467\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n+error[E0658]: non-ascii idents are not fully supported\n   --> $DIR/utf8_idents.rs:3:5\n    |\n LL |     \u03b3\n    |     ^\n    |\n+   = note: for more information, see tracking issue #55467\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n+error[E0658]: non-ascii idents are not fully supported\n   --> $DIR/utf8_idents.rs:8:5\n    |\n LL |     \u03b4: usize\n    |     ^\n    |\n+   = note: for more information, see tracking issue #55467\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n+error[E0658]: non-ascii idents are not fully supported\n   --> $DIR/utf8_idents.rs:12:9\n    |\n LL |     let \u03b1 = 0.00001f64;\n    |         ^\n    |\n+   = note: for more information, see tracking issue #55467\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n warning: type parameter `\u03b3` should have an upper camel case name"}]}