{"sha": "d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5NmNjNmUyODY1ZmYyY2M3N2YwNjFhZTk3ZTU4YWFlNTBmNWExZTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-03T17:00:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-03T17:00:24Z"}, "message": "Auto merge of #47127 - EdSchouten:cloudabi-tests, r=kennytm\n\nFirst cut at getting some part of the test suite working for CloudABI\n\nI am currently working on creating a Docker container for automated CI for CloudABI. Here are some of the trivial changes that need to land to make tests pass.", "tree": {"sha": "7b82c1383f43ed10226029582841835212f24f22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b82c1383f43ed10226029582841835212f24f22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "html_url": "https://github.com/rust-lang/rust/commit/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d1a30289ea13c433a92e31627f8533350835328", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d1a30289ea13c433a92e31627f8533350835328", "html_url": "https://github.com/rust-lang/rust/commit/8d1a30289ea13c433a92e31627f8533350835328"}, {"sha": "3ca407e24bcc2b668de1f56e453903701849f79f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ca407e24bcc2b668de1f56e453903701849f79f", "html_url": "https://github.com/rust-lang/rust/commit/3ca407e24bcc2b668de1f56e453903701849f79f"}], "stats": {"total": 403, "additions": 253, "deletions": 150}, "files": [{"sha": "76557982a0276797c0623f61ee27c55b13e5f706", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -977,15 +977,13 @@ fn use_color(opts: &TestOpts) -> bool {\n     }\n }\n \n-#[cfg(target_os = \"redox\")]\n+#[cfg(any(target_os = \"cloudabi\",\n+          target_os = \"redox\",\n+          all(target_arch = \"wasm32\", not(target_os = \"emscripten\"))))]\n fn stdout_isatty() -> bool {\n     // FIXME: Implement isatty on Redox\n     false\n }\n-#[cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))]\n-fn stdout_isatty() -> bool {\n-    false\n-}\n #[cfg(unix)]\n fn stdout_isatty() -> bool {\n     unsafe { libc::isatty(libc::STDOUT_FILENO) != 0 }"}, {"sha": "d0fafbdd0447e853e657d89b64b05af6c3490175", "filename": "src/test/codegen/dllimports/main.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fcodegen%2Fdllimports%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fcodegen%2Fdllimports%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdllimports%2Fmain.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -9,19 +9,20 @@\n // except according to those terms.\n \n // This test is for *-windows-msvc only.\n-// ignore-gnu\n // ignore-android\n // ignore-bitrig\n-// ignore-macos\n+// ignore-cloudabi\n // ignore-dragonfly\n+// ignore-emscripten\n // ignore-freebsd\n+// ignore-gnu\n // ignore-haiku\n // ignore-ios\n // ignore-linux\n+// ignore-macos\n // ignore-netbsd\n // ignore-openbsd\n // ignore-solaris\n-// ignore-emscripten\n \n // aux-build:dummy.rs\n // aux-build:wrapper.rs"}, {"sha": "f1affcc12487fa42a988aa146133ef4b8a6f108a", "filename": "src/test/codegen/panic-abort-windows.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fcodegen%2Fpanic-abort-windows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fcodegen%2Fpanic-abort-windows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpanic-abort-windows.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -13,16 +13,17 @@\n // This test is for *-windows-msvc only.\n // ignore-android\n // ignore-bitrig\n-// ignore-macos\n+// ignore-cloudabi\n // ignore-dragonfly\n+// ignore-emscripten\n // ignore-freebsd\n // ignore-haiku\n // ignore-ios\n // ignore-linux\n+// ignore-macos\n // ignore-netbsd\n // ignore-openbsd\n // ignore-solaris\n-// ignore-emscripten\n \n // compile-flags: -C no-prepopulate-passes -C panic=abort -O\n "}, {"sha": "b29e435701507c931552e16e8145f3094e6bbcc4", "filename": "src/test/compile-fail/E0277.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fcompile-fail%2FE0277.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fcompile-fail%2FE0277.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0277.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi no std::path\n+\n use std::path::Path;\n \n trait Foo {"}, {"sha": "0a06e01cab01c33bf3c05f45152356dbc5cf3048", "filename": "src/test/compile-fail/cdylib-deps-must-be-static.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fcompile-fail%2Fcdylib-deps-must-be-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fcompile-fail%2Fcdylib-deps-must-be-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcdylib-deps-must-be-static.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -11,6 +11,7 @@\n // error-pattern: crate `cdylib_dep` required to be available in rlib format, but was not found\n // aux-build:cdylib-dep.rs\n // ignore-musl\n+// ignore-cloudabi\n // ignore-emscripten\n \n #![crate_type = \"cdylib\"]"}, {"sha": "e9d76c758cdb726f0cea282e12311bf211fe1071", "filename": "src/test/compile-fail/issue-13352.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fcompile-fail%2Fissue-13352.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fcompile-fail%2Fissue-13352.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13352.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi no std::process\n+\n fn foo(_: Box<FnMut()>) {}\n \n fn main() {"}, {"sha": "98e62965235e79b7fa17cd9ca3a37ae56ec61577", "filename": "src/test/compile-fail/issue-37665.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fcompile-fail%2Fissue-37665.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fcompile-fail%2Fissue-37665.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-37665.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // compile-flags: -Z unstable-options --unpretty=mir\n+// ignore-cloudabi no std::path\n \n use std::path::MAIN_SEPARATOR;\n "}, {"sha": "f392ccd767645ab24357abb5424cb50f5fb996ce", "filename": "src/test/compile-fail/panic-runtime/abort-link-to-unwind-dylib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fcompile-fail%2Fpanic-runtime%2Fabort-link-to-unwind-dylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fcompile-fail%2Fpanic-runtime%2Fabort-link-to-unwind-dylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpanic-runtime%2Fabort-link-to-unwind-dylib.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -10,6 +10,7 @@\n \n // compile-flags:-C panic=abort -C prefer-dynamic\n // ignore-musl - no dylibs here\n+// ignore-cloudabi\n // ignore-emscripten\n // error-pattern:`panic_unwind` is not compiled with this crate's panic strategy\n "}, {"sha": "5cf821749e945f243d04c1774edf69a7eddcbc2b", "filename": "src/test/parse-fail/mod_file_not_exist_windows.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fparse-fail%2Fmod_file_not_exist_windows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fparse-fail%2Fmod_file_not_exist_windows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fmod_file_not_exist_windows.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,19 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-gnu\n // ignore-android\n // ignore-bitrig\n-// ignore-macos\n+// ignore-cloudabi\n // ignore-dragonfly\n+// ignore-emscripten\n // ignore-freebsd\n+// ignore-gnu\n // ignore-haiku\n // ignore-ios\n // ignore-linux\n+// ignore-macos\n // ignore-netbsd\n // ignore-openbsd\n // ignore-solaris\n-// ignore-emscripten\n \n // compile-flags: -Z parse-only\n "}, {"sha": "856fc50a0f8e9410144f8f58ec4171769bc710e6", "filename": "src/test/run-fail/mir_dynamic_drops_1.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_1.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -7,9 +7,10 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+\n // error-pattern:drop 1\n // error-pattern:drop 2\n-\n+// ignore-cloudabi no std::process\n \n /// Structure which will not allow to be dropped twice.\n struct Droppable<'a>(&'a mut bool, u32);"}, {"sha": "964562322bd7c4a1acd0c39cdcc2f1e05a72d4e0", "filename": "src/test/run-fail/mir_dynamic_drops_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_2.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // error-pattern:drop 1\n-\n+// ignore-cloudabi no std::process\n \n /// Structure which will not allow to be dropped twice.\n struct Droppable<'a>(&'a mut bool, u32);"}, {"sha": "4c070314555cab97d3180dad278fb3e5e3d76111", "filename": "src/test/run-fail/mir_dynamic_drops_3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_3.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -12,7 +12,7 @@\n // error-pattern:drop 3\n // error-pattern:drop 2\n // error-pattern:drop 1\n-\n+// ignore-cloudabi no std::process\n \n /// Structure which will not allow to be dropped twice.\n struct Droppable<'a>(&'a mut bool, u32);"}, {"sha": "aded2739b10d1edcec569f91d35ce6a762d7df74", "filename": "src/test/run-fail/mir_trans_no_landing_pads.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-fail%2Fmir_trans_no_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-fail%2Fmir_trans_no_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_trans_no_landing_pads.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -10,6 +10,8 @@\n \n // compile-flags: -Z no-landing-pads -C codegen-units=1\n // error-pattern:converging_fn called\n+// ignore-cloudabi no std::process\n+\n use std::io::{self, Write};\n \n struct Droppable;"}, {"sha": "d3a8613bbc4bf033e4fe5f995a0561fe486289f6", "filename": "src/test/run-fail/mir_trans_no_landing_pads_diverging.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-fail%2Fmir_trans_no_landing_pads_diverging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-fail%2Fmir_trans_no_landing_pads_diverging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_trans_no_landing_pads_diverging.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -10,6 +10,8 @@\n \n // compile-flags: -Z no-landing-pads -C codegen-units=1\n // error-pattern:diverging_fn called\n+// ignore-cloudabi no std::process\n+\n use std::io::{self, Write};\n \n struct Droppable;"}, {"sha": "d9b81c5d4b690e810fb38b541fc5a3ac77b97673", "filename": "src/test/run-fail/tls-exit-status.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-fail%2Ftls-exit-status.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-fail%2Ftls-exit-status.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftls-exit-status.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -10,6 +10,7 @@\n \n // error-pattern:nonzero\n // exec-env:RUST_NEWRT=1\n+// ignore-cloudabi no std::env\n \n use std::env;\n "}, {"sha": "bb0d5644d389f68a189c3991a018fb3d006a3f8c", "filename": "src/test/run-pass-valgrind/exit-flushes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass-valgrind%2Fexit-flushes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass-valgrind%2Fexit-flushes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fexit-flushes.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -9,9 +9,10 @@\n // except according to those terms.\n \n // no-prefer-dynamic\n+// ignore-cloudabi\n+// ignore-emscripten\n // ignore-macos this needs valgrind 3.11 or higher; see\n // https://github.com/rust-lang/rust/pull/30365#issuecomment-165763679\n-// ignore-emscripten\n \n use std::env;\n use std::process::{exit, Command};"}, {"sha": "17661c0b1209707a36a8068d950429d966fdbf71", "filename": "src/test/run-pass/abort-on-c-abi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fabort-on-c-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fabort-on-c-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabort-on-c-abi.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -11,6 +11,7 @@\n // Since we mark some ABIs as \"nounwind\" to LLVM, we must make sure that\n // we never unwind through them.\n \n+// ignore-cloudabi no env and process\n // ignore-emscripten no processes\n \n use std::{env, panic};"}, {"sha": "914b89dfb4dc030ae81190b79d525f51eaed8b7e", "filename": "src/test/run-pass/atomic-print.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fatomic-print.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fatomic-print.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fatomic-print.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi no process support\n // ignore-emscripten no threads support\n \n use std::{env, fmt, process, sync, thread};"}, {"sha": "2f1c5c0574ad25b7b10bc26b820d5ad9ea1fc3fb", "filename": "src/test/run-pass/backtrace-debuginfo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -17,6 +17,7 @@\n \n // compile-flags:-g -Cllvm-args=-enable-tail-merge=0\n // ignore-pretty issue #37195\n+// ignore-cloudabi spawning processes is not supported\n // ignore-emscripten spawning processes is not supported\n \n use std::env;"}, {"sha": "3e1ae730e4af3bd1918af71223edfd8771764c41", "filename": "src/test/run-pass/backtrace.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // ignore-android FIXME #17520\n+// ignore-cloudabi spawning processes is not supported\n // ignore-emscripten spawning processes is not supported\n // ignore-openbsd no support for libbacktrace without filename\n // compile-flags:-g"}, {"sha": "e45e35b370d9fd4755d4b74c417d1f874f8fb8c4", "filename": "src/test/run-pass/cfg-family.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fcfg-family.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fcfg-family.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfg-family.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // pretty-expanded FIXME #23616\n+// ignore-cloudabi no target_family\n // ignore-wasm32-bare no target_family\n \n #[cfg(windows)]"}, {"sha": "7c279e43e0e63cababce8eef6cf9c707147f98b2", "filename": "src/test/run-pass/cfg-target-family.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fcfg-target-family.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fcfg-target-family.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfg-target-family.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi no target_family\n // ignore-wasm32-bare no target_family\n \n // pretty-expanded FIXME #23616"}, {"sha": "2460fa92925e4a481f8b7f90935432409be27c2d", "filename": "src/test/run-pass/cleanup-shortcircuit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fcleanup-shortcircuit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fcleanup-shortcircuit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-shortcircuit.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -11,6 +11,7 @@\n // Test that cleanups for the RHS of shortcircuiting operators work.\n \n // pretty-expanded FIXME #23616\n+// ignore-cloudabi no std::env support\n \n use std::env;\n "}, {"sha": "9599f65da4eca31de48824d5b0bc58d469234ede", "filename": "src/test/run-pass/command-before-exec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fcommand-before-exec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fcommand-before-exec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcommand-before-exec.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // ignore-windows - this is a unix-specific test\n+// ignore-cloudabi no processes\n // ignore-emscripten no processes\n \n #![feature(process_exec, libc)]"}, {"sha": "d6d0c2b36f647c888e5b16b3d40d8c4066fa0a4d", "filename": "src/test/run-pass/command-exec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fcommand-exec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fcommand-exec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcommand-exec.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -10,6 +10,7 @@\n \n // ignore-windows - this is a unix-specific test\n // ignore-pretty issue #37199\n+// ignore-cloudabi no processes\n // ignore-emscripten no processes\n \n #![feature(process_exec)]"}, {"sha": "13118c48d6e95fc10f4dc926fa79d69748de8e14", "filename": "src/test/run-pass/core-run-destroy.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // compile-flags:--test\n+// ignore-cloudabi no processes\n // ignore-emscripten no processes\n \n // NB: These tests kill child processes. Valgrind sees these children as leaking"}, {"sha": "0645c65d0d6664d587f3172c6589c2e58cc34481", "filename": "src/test/run-pass/env-args-reverse-iterator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fenv-args-reverse-iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fenv-args-reverse-iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenv-args-reverse-iterator.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi no processes\n // ignore-emscripten no processes\n \n use std::env::args;"}, {"sha": "12e1cbe97d83c8cc53ce5db149aa98059d71b5b3", "filename": "src/test/run-pass/env-funky-keys.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fenv-funky-keys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fenv-funky-keys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenv-funky-keys.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -12,6 +12,7 @@\n \n // ignore-android\n // ignore-windows\n+// ignore-cloudabi no execve\n // ignore-emscripten no execve\n // no-prefer-dynamic\n "}, {"sha": "22e440c6ffa51e08df652819779fada80ef54e96", "filename": "src/test/run-pass/env-home-dir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fenv-home-dir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fenv-home-dir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenv-home-dir.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi no environment variables present\n // ignore-emscripten env vars don't work?\n \n #![feature(path)]"}, {"sha": "d7b4c81fc7f2b21cb3f42050ff4a714f8c053655", "filename": "src/test/run-pass/env-vars.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fenv-vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fenv-vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenv-vars.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi no env vars\n // ignore-wasm32-bare no env vars\n \n use std::env::*;"}, {"sha": "b2d2e70f83ba585a17019cd48cfb214b75500549", "filename": "src/test/run-pass/exec-env.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fexec-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fexec-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexec-env.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // exec-env:TEST_EXEC_ENV=22\n+// ignore-cloudabi no env vars\n // ignore-emscripten FIXME: issue #31622\n \n use std::env;"}, {"sha": "a5ae0ae9f3155693b802efad6ac150e6d78a1b9c", "filename": "src/test/run-pass/fds-are-cloexec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Ffds-are-cloexec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Ffds-are-cloexec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffds-are-cloexec.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -10,6 +10,7 @@\n \n // ignore-windows\n // ignore-android\n+// ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-haiku\n "}, {"sha": "c7aa78e768f48c855d0fa5c6b19af54f391825ce", "filename": "src/test/run-pass/intrinsic-alignment.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -19,14 +19,15 @@ mod rusti {\n     }\n }\n \n-#[cfg(any(target_os = \"linux\",\n-          target_os = \"macos\",\n-          target_os = \"freebsd\",\n+#[cfg(any(target_os = \"cloudabi\",\n           target_os = \"dragonfly\",\n+          target_os = \"emscripten\",\n+          target_os = \"freebsd\",\n+          target_os = \"linux\",\n+          target_os = \"macos\",\n           target_os = \"netbsd\",\n           target_os = \"openbsd\",\n-          target_os = \"solaris\",\n-          target_os = \"emscripten\"))]\n+          target_os = \"solaris\"))]\n mod m {\n     #[main]\n     #[cfg(target_arch = \"x86\")]"}, {"sha": "9262fc342f751f8d9ff628976ac35d1b24df4c57", "filename": "src/test/run-pass/issue-10626.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-10626.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-10626.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10626.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi no processes\n // ignore-emscripten no processes\n \n // Make sure that if a process doesn't have its stdio/stderr descriptors set up"}, {"sha": "2b36c94d2e290cb6526ebf3d7596ebc0fcd6cac1", "filename": "src/test/run-pass/issue-12133-3.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-12133-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-12133-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12133-3.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -11,8 +11,9 @@\n // aux-build:issue-12133-rlib.rs\n // aux-build:issue-12133-dylib.rs\n // aux-build:issue-12133-dylib2.rs\n-// ignore-musl\n+// ignore-cloudabi no dylib support\n // ignore-emscripten no dylib support\n+// ignore-musl\n \n // pretty-expanded FIXME #23616\n "}, {"sha": "264db106491a44c28cbd9cff4570c701888a17b5", "filename": "src/test/run-pass/issue-13304.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-13304.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-13304.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13304.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi no processes\n // ignore-emscripten no processes\n \n #![feature(io, process_capture)]"}, {"sha": "c4745a6e1f1ff5d6b33bbc3a18a189f78139eef8", "filename": "src/test/run-pass/issue-14456.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-14456.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-14456.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14456.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi no processes\n // ignore-emscripten no processes\n \n #![feature(io, process_capture)]"}, {"sha": "c0741820119694ad1c011880dae6ad69dd3d9c42", "filename": "src/test/run-pass/issue-14940.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-14940.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-14940.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14940.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi no processes\n // ignore-emscripten no processes\n \n use std::env;"}, {"sha": "f8d6e43c73068b49f475314078c997744efd9a2e", "filename": "src/test/run-pass/issue-16272.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-16272.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-16272.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16272.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi no processes\n // ignore-emscripten no processes\n \n use std::process::Command;"}, {"sha": "6eb813025ec13952ac543bd3d28a1287dd59f574", "filename": "src/test/run-pass/issue-17121.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-17121.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-17121.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17121.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // pretty-expanded FIXME #23616\n+// ignore-cloudabi no std::fs\n \n use std::fs::File;\n use std::io::{self, BufReader, Read};"}, {"sha": "f84cfd232f2dff1b667a8ebb15abc02ecab3155a", "filename": "src/test/run-pass/issue-20091.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-20091.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-20091.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20091.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi no processes\n // ignore-emscripten no processes\n \n #![feature(std_misc, os)]"}, {"sha": "7cacc2e1146d7d42f69642359d7ad45d44a1499a", "filename": "src/test/run-pass/issue-20644.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-20644.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-20644.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20644.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -12,6 +12,7 @@\n // had to do with trans ignoring binders.\n \n // pretty-expanded FIXME #23616\n+// ignore-cloudabi no std::fs\n \n #![feature(os)]\n "}, {"sha": "3a4be580fc3e6e2c67931837d86d17b6644805d7", "filename": "src/test/run-pass/issue-20797.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-20797.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-20797.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20797.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi no std::fs\n+\n // Regression test for #20797.\n \n use std::default::Default;"}, {"sha": "a87af59ee798295b85c325a8a6c3a19eebd3559a", "filename": "src/test/run-pass/issue-2214.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-2214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-2214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2214.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -34,7 +34,7 @@ mod m {\n \n     #[link_name = \"m\"]\n     extern {\n-        #[cfg(unix)]\n+        #[cfg(any(unix, target_os = \"cloudabi\"))]\n         #[link_name=\"lgamma_r\"]\n         pub fn lgamma(n: c_double, sign: &mut c_int) -> c_double;\n         #[cfg(windows)]"}, {"sha": "ec4be812f9a23ed57d8030937ff12ed13cf8e53a", "filename": "src/test/run-pass/issue-22577.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-22577.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-22577.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-22577.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // pretty-expanded FIXME #23616\n+// ignore-cloudabi no std::fs\n \n #![feature(fs, net)]\n "}, {"sha": "c3c9ede5adaf3282608ae73511fce585cbeec1cb", "filename": "src/test/run-pass/issue-23036.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-23036.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-23036.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-23036.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi no std::path\n+\n use std::collections::HashMap;\n use std::path::Path;\n "}, {"sha": "c48ae414cc30f016c9e70ef0abede766e6ca33bf", "filename": "src/test/run-pass/issue-23649-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-23649-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-23649-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-23649-2.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi no std::path\n+\n use std::collections::HashMap;\n use std::path::{Path, PathBuf};\n "}, {"sha": "2e7d2e490b3c7cec6dc72ff6ba725d9b3187b4cd", "filename": "src/test/run-pass/issue-24313.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-24313.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-24313.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-24313.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi no processes\n // ignore-emscripten no threads\n \n use std::thread;"}, {"sha": "d184724cf6f7adf662a7cfc38ae9999c44a52e0b", "filename": "src/test/run-pass/issue-27859.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-27859.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-27859.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-27859.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi no std::env\n // ignore-wasm32 issue 42629\n \n #[inline(never)]"}, {"sha": "633bd53864d1311a978b3ebf9233d3fa670da80b", "filename": "src/test/run-pass/issue-30490.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-30490.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-30490.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-30490.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi no processes\n // ignore-emscripten no processes\n \n // Previously libstd would set stdio descriptors of a child process"}, {"sha": "7fad2b3e4a29c834c5f826774d578f56b64a9712", "filename": "src/test/run-pass/issue-33770.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-33770.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-33770.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-33770.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi no processes\n // ignore-emscripten no processes\n \n use std::process::{Command, Stdio};"}, {"sha": "68f6945cd9cb775a70f418beb6cce96d8fc3e5f6", "filename": "src/test/run-pass/issue-4541.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-4541.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-4541.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4541.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi no std::env\n+\n fn parse_args() -> String {\n     let args: Vec<_> = ::std::env::args().collect();\n     let mut n = 0;"}, {"sha": "59837e4bd53f663a64c449228b2fb1633c19cf1c", "filename": "src/test/run-pass/issue-4542.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-4542.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-4542.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4542.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // pretty-expanded FIXME #23616\n+// ignore-cloudabi no std::env\n \n use std::env;\n "}, {"sha": "e2c04c964d7733bfb8811669214c4ee589901a23", "filename": "src/test/run-pass/issue-45731.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-45731.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fissue-45731.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-45731.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -10,11 +10,11 @@\n \n // compile-flags:--test -g\n \n-use std::{env, panic, fs};\n-\n #[cfg(target_os = \"macos\")]\n #[test]\n fn simple_test() {\n+    use std::{env, panic, fs};\n+\n     // Find our dSYM and replace the DWARF binary with an empty file\n     let mut dsym_path = env::current_exe().unwrap();\n     let executable_name = dsym_path.file_name().unwrap().to_str().unwrap().to_string();"}, {"sha": "2e6e10935fa7a298f6a1d5b7ac038c760ac1ab2d", "filename": "src/test/run-pass/multi-panic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fmulti-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fmulti-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmulti-panic.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi no processes\n // ignore-emscripten no processes\n \n fn check_for_no_backtrace(test: std::process::Output) {"}, {"sha": "d34241769603b926f5e61dc3d6883061b20a24e6", "filename": "src/test/run-pass/no-stdio.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fno-stdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fno-stdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fno-stdio.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,8 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-emscripten no processes\n // ignore-android\n+// ignore-cloudabi no processes\n+// ignore-emscripten no processes\n \n #![feature(libc)]\n "}, {"sha": "6ed07fb2f7d25a884e2d67e88e07d00db09527e8", "filename": "src/test/run-pass/out-of-stack.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fout-of-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fout-of-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fout-of-stack.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -10,6 +10,7 @@\n \n // ignore-android: FIXME (#20004)\n // ignore-musl\n+// ignore-cloudabi no processes\n // ignore-emscripten no processes\n \n #![feature(asm)]"}, {"sha": "6917c2db3b47df5957752d4350752025a8a4dd31", "filename": "src/test/run-pass/panic-runtime/abort-link-to-unwinding-crates.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fpanic-runtime%2Fabort-link-to-unwinding-crates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fpanic-runtime%2Fabort-link-to-unwinding-crates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpanic-runtime%2Fabort-link-to-unwinding-crates.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -11,6 +11,7 @@\n // compile-flags:-C panic=abort\n // aux-build:exit-success-if-unwind.rs\n // no-prefer-dynamic\n+// ignore-cloudabi no processes\n // ignore-emscripten no processes\n \n extern crate exit_success_if_unwind;"}, {"sha": "3a3b86aec02a010e2f7125458d65a42c5b856515", "filename": "src/test/run-pass/panic-runtime/abort.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fpanic-runtime%2Fabort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fpanic-runtime%2Fabort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpanic-runtime%2Fabort.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -10,6 +10,7 @@\n \n // compile-flags:-C panic=abort\n // no-prefer-dynamic\n+// ignore-cloudabi no processes\n // ignore-emscripten no processes\n \n use std::process::Command;"}, {"sha": "54e02fb697579748740c58c2154ab1fbaf54bcab", "filename": "src/test/run-pass/panic-runtime/lto-abort.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fpanic-runtime%2Flto-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fpanic-runtime%2Flto-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpanic-runtime%2Flto-abort.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -10,6 +10,7 @@\n \n // compile-flags:-C lto -C panic=abort\n // no-prefer-dynamic\n+// ignore-cloudabi no processes\n // ignore-emscripten no processes\n \n use std::process::Command;"}, {"sha": "52f10688f14f582f559a0e1cde1805a487afc9fd", "filename": "src/test/run-pass/panic-runtime/lto-unwind.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fpanic-runtime%2Flto-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fpanic-runtime%2Flto-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpanic-runtime%2Flto-unwind.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -10,6 +10,7 @@\n \n // compile-flags:-C lto -C panic=unwind\n // no-prefer-dynamic\n+// ignore-cloudabi no processes\n // ignore-emscripten no processes\n \n use std::process::Command;"}, {"sha": "e0fe1ea72df16486312de38ba7c6f57dae96687b", "filename": "src/test/run-pass/paths-containing-nul.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fpaths-containing-nul.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fpaths-containing-nul.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpaths-containing-nul.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi no files or I/O\n // ignore-wasm32-bare no files or I/O\n \n use std::fs;"}, {"sha": "9e36089cc23df5df66639fc89d0de388d45d0478", "filename": "src/test/run-pass/print-stdout-eprint-stderr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fprint-stdout-eprint-stderr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fprint-stdout-eprint-stderr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprint-stdout-eprint-stderr.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi spawning processes is not supported\n // ignore-emscripten spawning processes is not supported\n \n use std::{env, process};"}, {"sha": "e399bc20d52ae8eab62c6777731915408c2be63c", "filename": "src/test/run-pass/process-envs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fprocess-envs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fprocess-envs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprocess-envs.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi no processes\n // ignore-emscripten no processes\n \n use std::process::Command;"}, {"sha": "44ef4a9df71afd19b91145ce2e167fd5937a1e5e", "filename": "src/test/run-pass/process-exit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fprocess-exit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fprocess-exit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprocess-exit.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi no processes\n // ignore-emscripten no processes\n \n use std::env;"}, {"sha": "9011ffcf45ad094ff4937dec0457b80be91058ea", "filename": "src/test/run-pass/process-remove-from-env.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fprocess-remove-from-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fprocess-remove-from-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprocess-remove-from-env.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi no processes\n // ignore-emscripten no processes\n \n use std::process::Command;"}, {"sha": "a436e48ea530e411c23d369872e915001e4b8280", "filename": "src/test/run-pass/process-sigpipe.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fprocess-sigpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fprocess-sigpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprocess-sigpipe.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -18,6 +18,7 @@\n // (instead of running forever), and that it does not print an error\n // message about a broken pipe.\n \n+// ignore-cloudabi no subprocesses support\n // ignore-emscripten no threads support\n \n use std::process;"}, {"sha": "1e22f17986c3568e4dafd11c16ad67e1961a1793", "filename": "src/test/run-pass/process-spawn-with-unicode-params.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fprocess-spawn-with-unicode-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fprocess-spawn-with-unicode-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprocess-spawn-with-unicode-params.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -16,6 +16,7 @@\n // non-ASCII characters.  The child process ensures all the strings are\n // intact.\n \n+// ignore-cloudabi no processes\n // ignore-emscripten no processes\n \n use std::io::prelude::*;"}, {"sha": "fdf5cf5ad92819c4df5eb62121715f175daca6f0", "filename": "src/test/run-pass/process-status-inherits-stdin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fprocess-status-inherits-stdin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fprocess-status-inherits-stdin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprocess-status-inherits-stdin.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi no processes\n // ignore-emscripten no processes\n \n use std::env;"}, {"sha": "3ff8961166d9612d184495611cee6c8e9ee214c5", "filename": "src/test/run-pass/rec-align-u64.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u64.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -38,14 +38,15 @@ struct Outer {\n }\n \n \n-#[cfg(any(target_os = \"linux\",\n-          target_os = \"macos\",\n-          target_os = \"freebsd\",\n+#[cfg(any(target_os = \"cloudabi\",\n           target_os = \"dragonfly\",\n+          target_os = \"emscripten\",\n+          target_os = \"freebsd\",\n+          target_os = \"linux\",\n+          target_os = \"macos\",\n           target_os = \"netbsd\",\n           target_os = \"openbsd\",\n-          target_os = \"solaris\",\n-          target_os = \"emscripten\"))]\n+          target_os = \"solaris\"))]\n mod m {\n     #[cfg(target_arch = \"x86\")]\n     pub mod m {"}, {"sha": "61487b6953dbe1cbf94558c40dd01e794d536889", "filename": "src/test/run-pass/rfc-1014.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Frfc-1014.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Frfc-1014.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-1014.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi stdout does not map to file descriptor 1 by default\n // ignore-wasm32-bare no libc\n \n #![feature(libc)]"}, {"sha": "a0b83ba4c24a5d95c328cc00dfcb2f9ddc70a79f", "filename": "src/test/run-pass/running-with-no-runtime.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Frunning-with-no-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Frunning-with-no-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frunning-with-no-runtime.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi spawning processes is not supported\n // ignore-emscripten spawning processes is not supported\n \n #![feature(start)]"}, {"sha": "307ead4b74f741cf6fd9188ec4d04765c610c345", "filename": "src/test/run-pass/segfault-no-out-of-stack.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fsegfault-no-out-of-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fsegfault-no-out-of-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsegfault-no-out-of-stack.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi can't run commands\n // ignore-emscripten can't run commands\n \n #![feature(libc)]"}, {"sha": "508fbe80ca4be11e141ce34ea3eaa1cf72deab00", "filename": "src/test/run-pass/signal-alternate-stack-cleanup.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fsignal-alternate-stack-cleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fsignal-alternate-stack-cleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsignal-alternate-stack-cleanup.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -12,8 +12,9 @@\n // main thread exit while still being in use by signal handlers. This test\n // triggers this situation by sending signal from atexit handler.\n //\n-// ignore-windows\n+// ignore-cloudabi no signal handling support\n // ignore-wasm32-bare no libc\n+// ignore-windows\n \n #![feature(libc)]\n extern crate libc;"}, {"sha": "76171a4cc4656e95df7784f62cd652f6df1dbce9", "filename": "src/test/run-pass/signal-exit-status.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fsignal-exit-status.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fsignal-exit-status.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsignal-exit-status.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,8 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-windows\n+// ignore-cloudabi no processes\n // ignore-emscripten no processes\n+// ignore-windows\n \n use std::env;\n use std::process::Command;"}, {"sha": "f5e2239538f65ada5d7a55c08c976b04a3412b87", "filename": "src/test/run-pass/sigpipe-should-be-ignored.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fsigpipe-should-be-ignored.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fsigpipe-should-be-ignored.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsigpipe-should-be-ignored.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -11,6 +11,7 @@\n // Be sure that when a SIGPIPE would have been received that the entire process\n // doesn't die in a ball of fire, but rather it's gracefully handled.\n \n+// ignore-cloudabi no processes\n // ignore-emscripten no processes\n \n use std::env;"}, {"sha": "c2414e5ff5d96c98cebb88c54fef144dfa36bcda", "filename": "src/test/run-pass/sse2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fsse2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fsse2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsse2.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -7,7 +7,9 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+\n // min-llvm-version 4.0\n+// ignore-cloudabi no std::env\n \n #![feature(cfg_target_feature)]\n "}, {"sha": "22555c8d6a779edbf75a49d3822f8dcb870748c1", "filename": "src/test/run-pass/stack-probes-lto.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fstack-probes-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fstack-probes-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstack-probes-lto.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -11,6 +11,7 @@\n // ignore-arm\n // ignore-aarch64\n // ignore-wasm\n+// ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-musl FIXME #31506\n // ignore-pretty"}, {"sha": "248ad7019261d1abdfa09e4e0f7c97215e5189a0", "filename": "src/test/run-pass/stack-probes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fstack-probes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fstack-probes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstack-probes.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -11,6 +11,7 @@\n // ignore-arm\n // ignore-aarch64\n // ignore-wasm\n+// ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-musl FIXME #31506\n // no-system-llvm"}, {"sha": "8d4ee146284081e4e4a5d70bb9e12e504f84e4bc", "filename": "src/test/run-pass/stdio-is-blocking.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fstdio-is-blocking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fstdio-is-blocking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstdio-is-blocking.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi no processes\n // ignore-emscripten no processes\n \n use std::env;"}, {"sha": "f03387957bcf486027e079f2cd718e10dc41fba1", "filename": "src/test/run-pass/sync-send-in-std.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fsync-send-in-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fsync-send-in-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsync-send-in-std.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi networking not available\n // ignore-wasm32-bare networking not available\n \n #![feature(lookup_host)]"}, {"sha": "30da1e523fc5204607a4091b34f4d5117303fca7", "filename": "src/test/run-pass/tcp-stress.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-stress.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -10,9 +10,10 @@\n \n // ignore-android needs extra network permissions\n // ignore-bitrig system ulimit (Too many open files)\n+// ignore-cloudabi no global network namespace access\n+// ignore-emscripten no threads or sockets support\n // ignore-netbsd system ulimit (Too many open files)\n // ignore-openbsd system ulimit (Too many open files)\n-// ignore-emscripten no threads or sockets support\n \n use std::io::prelude::*;\n use std::net::{TcpListener, TcpStream};"}, {"sha": "d615c5f1034dc8c27a21007a589d602e0858924a", "filename": "src/test/run-pass/try-operator.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Ftry-operator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Ftry-operator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftry-operator.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi no std::fs\n+\n use std::fs::File;\n use std::io::{Read, self};\n use std::num::ParseIntError;"}, {"sha": "b8c0d80c5a67cb627a562572c9807733fd8300c0", "filename": "src/test/run-pass/try-wait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Ftry-wait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Ftry-wait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftry-wait.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi no processes\n // ignore-emscripten no processes\n \n #![feature(process_try_wait)]"}, {"sha": "dc47108e183df1713ef7cf42f0e4624a071bf5ee", "filename": "src/test/run-pass/wait-forked-but-failed-child.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fwait-forked-but-failed-child.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fwait-forked-but-failed-child.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwait-forked-but-failed-child.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi no processes\n // ignore-emscripten no processes\n \n #![feature(libc)]"}, {"sha": "cdd6a9b5331deed979babb0e69d107133ba05289", "filename": "src/test/run-pass/weird-exit-code.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fweird-exit-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fweird-exit-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fweird-exit-code.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -17,13 +17,10 @@\n // Note that this is disabled on unix as processes exiting with 259 will have\n // their exit status truncated to 3 (only the lower 8 bits are used).\n \n-use std::process::{self, Command};\n-use std::env;\n-\n+#[cfg(windows)]\n fn main() {\n-    if !cfg!(windows) {\n-        return\n-    }\n+    use std::process::{self, Command};\n+    use std::env;\n \n     if env::args().len() == 1 {\n         let status = Command::new(env::current_exe().unwrap())\n@@ -35,3 +32,6 @@ fn main() {\n         process::exit(259);\n     }\n }\n+\n+#[cfg(not(windows))]\n+fn main() {}"}, {"sha": "69ac68d2583e3fc4c1840b6c79f8ad16087af8b3", "filename": "src/test/run-pass/x86stdcall.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fx86stdcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Frun-pass%2Fx86stdcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fx86stdcall.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -32,14 +32,15 @@ pub fn main() {\n     }\n }\n \n-#[cfg(any(target_os = \"macos\",\n-          target_os = \"linux\",\n-          target_os = \"freebsd\",\n-          target_os = \"dragonfly\",\n+#[cfg(any(target_os = \"android\",\n           target_os = \"bitrig\",\n+          target_os = \"cloudabi\",\n+          target_os = \"dragonfly\",\n+          target_os = \"emscripten\",\n+          target_os = \"freebsd\",\n+          target_os = \"linux\",\n+          target_os = \"macos\",\n           target_os = \"netbsd\",\n           target_os = \"openbsd\",\n-          target_os = \"android\",\n-          target_os = \"solaris\",\n-          target_os = \"emscripten\"))]\n+          target_os = \"solaris\"))]\n pub fn main() { }"}, {"sha": "636a1e9a0642841baf724c68fd138dc4a96c0a52", "filename": "src/test/ui/issue-46576.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fui%2Fissue-46576.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fui%2Fissue-46576.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46576.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi no std::fs support\n+\n #![allow(dead_code)]\n #![deny(unused_imports)]\n "}, {"sha": "e0be6b4fdc2ced323fa4749ae3e6af8e45fe7702", "filename": "src/test/ui/issue-46576.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fui%2Fissue-46576.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fui%2Fissue-46576.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46576.stderr?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -1,13 +1,13 @@\n error: unused import: `BufRead`\n-  --> $DIR/issue-46576.rs:15:15\n+  --> $DIR/issue-46576.rs:17:15\n    |\n-15 | use std::io::{BufRead, BufReader, Read};\n+17 | use std::io::{BufRead, BufReader, Read};\n    |               ^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/issue-46576.rs:12:9\n+  --> $DIR/issue-46576.rs:14:9\n    |\n-12 | #![deny(unused_imports)]\n+14 | #![deny(unused_imports)]\n    |         ^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "c097a8f13429e64b9d95fb87c0a263b59b96bd4c", "filename": "src/test/ui/lint/use_suggestion_json.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi\n // compile-flags: --error-format pretty-json -Zunstable-options\n \n // The output for humans should just highlight the whole span without showing"}, {"sha": "86c2ad4c0e7a4fabae55f6a97447fb4de39b0d56", "filename": "src/test/ui/lint/use_suggestion_json.stderr", "status": "modified", "additions": 58, "deletions": 58, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -73,10 +73,10 @@ mod foo {\n   \"spans\": [\n     {\n       \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-      \"byte_start\": 888,\n-      \"byte_end\": 892,\n-      \"line_start\": 20,\n-      \"line_end\": 20,\n+      \"byte_start\": 907,\n+      \"byte_end\": 911,\n+      \"line_start\": 21,\n+      \"line_end\": 21,\n       \"column_start\": 12,\n       \"column_end\": 16,\n       \"is_primary\": true,\n@@ -100,10 +100,10 @@ mod foo {\n       \"spans\": [\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 865,\n-          \"byte_end\": 865,\n-          \"line_start\": 19,\n-          \"line_end\": 19,\n+          \"byte_start\": 884,\n+          \"byte_end\": 884,\n+          \"line_start\": 20,\n+          \"line_end\": 20,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -122,10 +122,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 865,\n-          \"byte_end\": 865,\n-          \"line_start\": 19,\n-          \"line_end\": 19,\n+          \"byte_start\": 884,\n+          \"byte_end\": 884,\n+          \"line_start\": 20,\n+          \"line_end\": 20,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -144,10 +144,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 865,\n-          \"byte_end\": 865,\n-          \"line_start\": 19,\n-          \"line_end\": 19,\n+          \"byte_start\": 884,\n+          \"byte_end\": 884,\n+          \"line_start\": 20,\n+          \"line_end\": 20,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -166,10 +166,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 865,\n-          \"byte_end\": 865,\n-          \"line_start\": 19,\n-          \"line_end\": 19,\n+          \"byte_start\": 884,\n+          \"byte_end\": 884,\n+          \"line_start\": 20,\n+          \"line_end\": 20,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -188,10 +188,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 865,\n-          \"byte_end\": 865,\n-          \"line_start\": 19,\n-          \"line_end\": 19,\n+          \"byte_start\": 884,\n+          \"byte_end\": 884,\n+          \"line_start\": 20,\n+          \"line_end\": 20,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -210,10 +210,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 865,\n-          \"byte_end\": 865,\n-          \"line_start\": 19,\n-          \"line_end\": 19,\n+          \"byte_start\": 884,\n+          \"byte_end\": 884,\n+          \"line_start\": 20,\n+          \"line_end\": 20,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -232,10 +232,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 865,\n-          \"byte_end\": 865,\n-          \"line_start\": 19,\n-          \"line_end\": 19,\n+          \"byte_start\": 884,\n+          \"byte_end\": 884,\n+          \"line_start\": 20,\n+          \"line_end\": 20,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -254,10 +254,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 865,\n-          \"byte_end\": 865,\n-          \"line_start\": 19,\n-          \"line_end\": 19,\n+          \"byte_start\": 884,\n+          \"byte_end\": 884,\n+          \"line_start\": 20,\n+          \"line_end\": 20,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -276,10 +276,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 865,\n-          \"byte_end\": 865,\n-          \"line_start\": 19,\n-          \"line_end\": 19,\n+          \"byte_start\": 884,\n+          \"byte_end\": 884,\n+          \"line_start\": 20,\n+          \"line_end\": 20,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -298,10 +298,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 865,\n-          \"byte_end\": 865,\n-          \"line_start\": 19,\n-          \"line_end\": 19,\n+          \"byte_start\": 884,\n+          \"byte_end\": 884,\n+          \"line_start\": 20,\n+          \"line_end\": 20,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -320,10 +320,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 865,\n-          \"byte_end\": 865,\n-          \"line_start\": 19,\n-          \"line_end\": 19,\n+          \"byte_start\": 884,\n+          \"byte_end\": 884,\n+          \"line_start\": 20,\n+          \"line_end\": 20,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -342,10 +342,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 865,\n-          \"byte_end\": 865,\n-          \"line_start\": 19,\n-          \"line_end\": 19,\n+          \"byte_start\": 884,\n+          \"byte_end\": 884,\n+          \"line_start\": 20,\n+          \"line_end\": 20,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -368,19 +368,19 @@ mod foo {\n     }\n   ],\n   \"rendered\": \"error[E0412]: cannot find type `Iter` in this scope\n-  --> $DIR/use_suggestion_json.rs:20:12\n+  --> $DIR/use_suggestion_json.rs:21:12\n    |\n-20 |     let x: Iter;\n+21 |     let x: Iter;\n    |            ^^^^ not found in this scope\n help: possible candidates are found in other modules, you can import them into scope\n    |\n-19 | use std::collections::binary_heap::Iter;\n+20 | use std::collections::binary_heap::Iter;\n    |\n-19 | use std::collections::btree_map::Iter;\n+20 | use std::collections::btree_map::Iter;\n    |\n-19 | use std::collections::btree_set::Iter;\n+20 | use std::collections::btree_set::Iter;\n    |\n-19 | use std::collections::hash_map::Iter;\n+20 | use std::collections::hash_map::Iter;\n    |\n and 8 other candidates\n "}, {"sha": "8166254e8a68e65fc320c64e10590e0393eaae6e", "filename": "src/test/ui/mismatched_types/recovered-block.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fui%2Fmismatched_types%2Frecovered-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fui%2Fmismatched_types%2Frecovered-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Frecovered-block.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi no std::env support\n+\n use std::env;\n \n pub struct Foo {"}, {"sha": "23c1a5b8c2442cf5802d7c95a84a8a71548db8c1", "filename": "src/test/ui/mismatched_types/recovered-block.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fui%2Fmismatched_types%2Frecovered-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fui%2Fmismatched_types%2Frecovered-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Frecovered-block.stderr?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -1,17 +1,17 @@\n error: missing `struct` for struct definition\n-  --> $DIR/recovered-block.rs:21:8\n+  --> $DIR/recovered-block.rs:23:8\n    |\n-21 |     pub Foo { text }\n+23 |     pub Foo { text }\n    |        ^\n help: add `struct` here to parse `Foo` as a public struct\n    |\n-21 |     pub struct Foo { text }\n+23 |     pub struct Foo { text }\n    |         ^^^^^^\n \n error: expected one of `(` or `<`, found `{`\n-  --> $DIR/recovered-block.rs:27:9\n+  --> $DIR/recovered-block.rs:29:9\n    |\n-27 |     Foo { text: \"\".to_string() }\n+29 |     Foo { text: \"\".to_string() }\n    |         ^ expected one of `(` or `<` here\n \n error: aborting due to 2 previous errors"}, {"sha": "8881b965f9480207a2cc74b26e0f662b79c260b9", "filename": "src/test/ui/resolve/token-error-correct-3.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi no std::fs support\n+\n // Test that we do some basic error correcton in the tokeniser (and don't spew\n // too many bogus errors).\n "}, {"sha": "33cf1d87817f63f247803b007e4750b81b016722", "filename": "src/test/ui/resolve/token-error-correct-3.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -1,40 +1,40 @@\n error: incorrect close delimiter: `}`\n-  --> $DIR/token-error-correct-3.rs:28:9\n+  --> $DIR/token-error-correct-3.rs:30:9\n    |\n-28 |         } else { //~ ERROR: incorrect close delimiter: `}`\n+30 |         } else { //~ ERROR: incorrect close delimiter: `}`\n    |         ^\n    |\n note: unclosed delimiter\n-  --> $DIR/token-error-correct-3.rs:22:21\n+  --> $DIR/token-error-correct-3.rs:24:21\n    |\n-22 |             callback(path.as_ref(); //~ ERROR expected one of\n+24 |             callback(path.as_ref(); //~ ERROR expected one of\n    |                     ^\n \n error: expected one of `,`, `.`, `?`, or an operator, found `;`\n-  --> $DIR/token-error-correct-3.rs:22:35\n+  --> $DIR/token-error-correct-3.rs:24:35\n    |\n-22 |             callback(path.as_ref(); //~ ERROR expected one of\n+24 |             callback(path.as_ref(); //~ ERROR expected one of\n    |                                   ^ expected one of `,`, `.`, `?`, or an operator here\n \n error: expected one of `.`, `;`, `?`, `}`, or an operator, found `)`\n-  --> $DIR/token-error-correct-3.rs:28:9\n+  --> $DIR/token-error-correct-3.rs:30:9\n    |\n-23 |             fs::create_dir_all(path.as_ref()).map(|()| true) //~ ERROR: mismatched types\n+25 |             fs::create_dir_all(path.as_ref()).map(|()| true) //~ ERROR: mismatched types\n    |                                                             - expected one of `.`, `;`, `?`, `}`, or an operator here\n ...\n-28 |         } else { //~ ERROR: incorrect close delimiter: `}`\n+30 |         } else { //~ ERROR: incorrect close delimiter: `}`\n    |         ^ unexpected token\n \n error[E0425]: cannot find function `is_directory` in this scope\n-  --> $DIR/token-error-correct-3.rs:21:13\n+  --> $DIR/token-error-correct-3.rs:23:13\n    |\n-21 |         if !is_directory(path.as_ref()) { //~ ERROR: cannot find function `is_directory`\n+23 |         if !is_directory(path.as_ref()) { //~ ERROR: cannot find function `is_directory`\n    |             ^^^^^^^^^^^^ not found in this scope\n \n error[E0308]: mismatched types\n-  --> $DIR/token-error-correct-3.rs:23:13\n+  --> $DIR/token-error-correct-3.rs:25:13\n    |\n-23 |             fs::create_dir_all(path.as_ref()).map(|()| true) //~ ERROR: mismatched types\n+25 |             fs::create_dir_all(path.as_ref()).map(|()| true) //~ ERROR: mismatched types\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try adding a semicolon: `;`\n    |             |\n    |             expected (), found enum `std::result::Result`"}, {"sha": "835c42e45535ac7791314c0d84ea93867dd74a86", "filename": "src/test/ui/resolve/use_suggestion_placement.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi no std::path support\n+\n macro_rules! y {\n     () => {}\n }"}, {"sha": "3607aa5e9abd97e898adeca0ae15b93140860e1e", "filename": "src/test/ui/resolve/use_suggestion_placement.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.stderr?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -1,33 +1,33 @@\n error[E0412]: cannot find type `Path` in this scope\n-  --> $DIR/use_suggestion_placement.rs:25:16\n+  --> $DIR/use_suggestion_placement.rs:27:16\n    |\n-25 |     type Bar = Path; //~ ERROR cannot find\n+27 |     type Bar = Path; //~ ERROR cannot find\n    |                ^^^^ not found in this scope\n help: possible candidate is found in another module, you can import it into scope\n    |\n-21 |     use std::path::Path;\n+23 |     use std::path::Path;\n    |\n \n error[E0425]: cannot find value `A` in this scope\n-  --> $DIR/use_suggestion_placement.rs:30:13\n+  --> $DIR/use_suggestion_placement.rs:32:13\n    |\n-30 |     let _ = A; //~ ERROR cannot find\n+32 |     let _ = A; //~ ERROR cannot find\n    |             ^ not found in this scope\n help: possible candidate is found in another module, you can import it into scope\n    |\n-11 | use m::A;\n+13 | use m::A;\n    |\n \n error[E0412]: cannot find type `HashMap` in this scope\n-  --> $DIR/use_suggestion_placement.rs:35:23\n+  --> $DIR/use_suggestion_placement.rs:37:23\n    |\n-35 |     type Dict<K, V> = HashMap<K, V>; //~ ERROR cannot find\n+37 |     type Dict<K, V> = HashMap<K, V>; //~ ERROR cannot find\n    |                       ^^^^^^^ not found in this scope\n help: possible candidates are found in other modules, you can import them into scope\n    |\n-11 | use std::collections::HashMap;\n+13 | use std::collections::HashMap;\n    |\n-11 | use std::collections::hash_map::HashMap;\n+13 | use std::collections::hash_map::HashMap;\n    |\n \n error: aborting due to 3 previous errors"}, {"sha": "d0f23caa53837dfbc6537512518eb9a53403d4de", "filename": "src/test/ui/span/issue-33884.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fui%2Fspan%2Fissue-33884.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fui%2Fspan%2Fissue-33884.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-33884.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi no std::net support\n+\n use std::net::TcpListener;\n use std::net::TcpStream;\n use std::io::{self, Read, Write};"}, {"sha": "5a9c2051a715df510a7dbac0ab2be9ace1c8ba93", "filename": "src/test/ui/span/issue-33884.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fui%2Fspan%2Fissue-33884.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fui%2Fspan%2Fissue-33884.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-33884.stderr?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-33884.rs:16:22\n+  --> $DIR/issue-33884.rs:18:22\n    |\n-16 |     stream.write_fmt(format!(\"message received\"))\n+18 |     stream.write_fmt(format!(\"message received\"))\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `std::fmt::Arguments`, found struct `std::string::String`\n    |\n    = note: expected type `std::fmt::Arguments<'_>`"}, {"sha": "e52ef45c2ecf953e5a9ee6fe1b723fd3b250e29b", "filename": "src/test/ui/suggestions/try-operator-on-main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-cloudabi no std::fs support\n+\n #![feature(try_trait)]\n \n use std::ops::Try;"}, {"sha": "beb627bda6bd1225f610e2dfa8cb6fd49095c202", "filename": "src/test/ui/suggestions/try-operator-on-main.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.stderr?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: the `?` operator can only be used in a function that returns `Result` (or another type that implements `std::ops::Try`)\n-  --> $DIR/try-operator-on-main.rs:17:5\n+  --> $DIR/try-operator-on-main.rs:19:5\n    |\n-17 |     std::fs::File::open(\"foo\")?; //~ ERROR the `?` operator can only\n+19 |     std::fs::File::open(\"foo\")?; //~ ERROR the `?` operator can only\n    |     ---------------------------\n    |     |\n    |     cannot use the `?` operator in a function that returns `()`\n@@ -11,9 +11,9 @@ error[E0277]: the `?` operator can only be used in a function that returns `Resu\n    = note: required by `std::ops::Try::from_error`\n \n error[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\n-  --> $DIR/try-operator-on-main.rs:20:5\n+  --> $DIR/try-operator-on-main.rs:22:5\n    |\n-20 |     ()?; //~ ERROR the `?` operator can only\n+22 |     ()?; //~ ERROR the `?` operator can only\n    |     ---\n    |     |\n    |     the `?` operator cannot be applied to type `()`\n@@ -23,17 +23,17 @@ error[E0277]: the `?` operator can only be applied to values that implement `std\n    = note: required by `std::ops::Try::into_result`\n \n error[E0277]: the trait bound `(): std::ops::Try` is not satisfied\n-  --> $DIR/try-operator-on-main.rs:23:5\n+  --> $DIR/try-operator-on-main.rs:25:5\n    |\n-23 |     try_trait_generic::<()>(); //~ ERROR the trait bound\n+25 |     try_trait_generic::<()>(); //~ ERROR the trait bound\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::ops::Try` is not implemented for `()`\n    |\n    = note: required by `try_trait_generic`\n \n error[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\n-  --> $DIR/try-operator-on-main.rs:30:5\n+  --> $DIR/try-operator-on-main.rs:32:5\n    |\n-30 |     ()?; //~ ERROR the `?` operator can only\n+32 |     ()?; //~ ERROR the `?` operator can only\n    |     ---\n    |     |\n    |     the `?` operator cannot be applied to type `()`"}, {"sha": "1b87576ba0b0db7b4b8dbec661205c3232f1549b", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "patch": "@@ -1368,9 +1368,10 @@ impl<'test> TestCx<'test> {\n \n             let crate_type = if aux_props.no_prefer_dynamic {\n                 None\n-            } else if (self.config.target.contains(\"musl\") && !aux_props.force_host)\n-                || self.config.target.contains(\"wasm32\")\n+            } else if self.config.target.contains(\"cloudabi\")\n                 || self.config.target.contains(\"emscripten\")\n+                || (self.config.target.contains(\"musl\") && !aux_props.force_host)\n+                || self.config.target.contains(\"wasm32\")\n             {\n                 // We primarily compile all auxiliary libraries as dynamic libraries\n                 // to avoid code size bloat and large binaries as much as possible"}]}