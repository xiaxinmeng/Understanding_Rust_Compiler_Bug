{"sha": "73fd31129136f1ad204084a51dc6f84f645d3c62", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczZmQzMTEyOTEzNmYxYWQyMDQwODRhNTFkYzZmODRmNjQ1ZDNjNjI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-11-18T20:29:34Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-25T13:38:37Z"}, "message": "[WIP] Real simd support", "tree": {"sha": "588aaf6df3ef3409cee0d014512a20fb859a683d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/588aaf6df3ef3409cee0d014512a20fb859a683d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73fd31129136f1ad204084a51dc6f84f645d3c62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73fd31129136f1ad204084a51dc6f84f645d3c62", "html_url": "https://github.com/rust-lang/rust/commit/73fd31129136f1ad204084a51dc6f84f645d3c62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73fd31129136f1ad204084a51dc6f84f645d3c62/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3daf6d220e5751e2de592b94141cef9d1cca055", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3daf6d220e5751e2de592b94141cef9d1cca055", "html_url": "https://github.com/rust-lang/rust/commit/c3daf6d220e5751e2de592b94141cef9d1cca055"}], "stats": {"total": 87, "additions": 62, "deletions": 25}, "files": [{"sha": "41533d9b62069093498a4820c580e996b3682ca5", "filename": "src/common.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/73fd31129136f1ad204084a51dc6f84f645d3c62/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fd31129136f1ad204084a51dc6f84f645d3c62/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=73fd31129136f1ad204084a51dc6f84f645d3c62", "patch": "@@ -66,6 +66,19 @@ pub fn clif_type_from_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Option<types:\n             }\n         }\n         ty::Param(_) => bug!(\"ty param {:?}\", ty),\n+        _ if ty.is_simd() => {\n+            let (lane_type, lane_count) = crate::intrinsics::lane_type_and_count(\n+                tcx,\n+                tcx.layout_of(ParamEnv::reveal_all().and(ty)).unwrap(),\n+            );\n+            let lane_type = clif_type_from_ty(tcx, lane_type.ty)?;\n+            let simd_type = lane_type.by(u16::try_from(lane_count).unwrap());\n+            if simd_type.map(|t| t.bits()) == Some(128) {\n+                return simd_type;\n+            } else {\n+                return None; // Not yet implemented\n+            }\n+        }\n         _ => return None,\n     })\n }"}, {"sha": "3e7c99a9ab602153d642620c5c165b90acbdd841", "filename": "src/intrinsics/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73fd31129136f1ad204084a51dc6f84f645d3c62/src%2Fintrinsics%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fd31129136f1ad204084a51dc6f84f645d3c62/src%2Fintrinsics%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fllvm.rs?ref=73fd31129136f1ad204084a51dc6f84f645d3c62", "patch": "@@ -86,7 +86,7 @@ pub fn codegen_llvm_intrinsic_call<'tcx>(\n                 kind => unreachable!(\"kind {:?}\", kind),\n             };\n \n-            simd_for_each_lane(fx, intrinsic, x, y, ret, |fx, lane_layout, res_lane_layout, x_lane, y_lane| {\n+            simd_pair_for_each_lane(fx, intrinsic, x, y, ret, |fx, lane_layout, res_lane_layout, x_lane, y_lane| {\n                 let res_lane = match lane_layout.ty.kind {\n                     ty::Float(_) => fx.bcx.ins().fcmp(flt_cc, x_lane, y_lane),\n                     _ => unreachable!(\"{:?}\", lane_layout.ty),"}, {"sha": "89f5a39f0d6af4fba54d3f83ddb329b1f65d633d", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 35, "deletions": 7, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/73fd31129136f1ad204084a51dc6f84f645d3c62/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fd31129136f1ad204084a51dc6f84f645d3c62/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=73fd31129136f1ad204084a51dc6f84f645d3c62", "patch": "@@ -144,6 +144,34 @@ pub fn lane_type_and_count<'tcx>(\n }\n \n fn simd_for_each_lane<'tcx, B: Backend>(\n+    fx: &mut FunctionCx<'_, 'tcx, B>,\n+    intrinsic: &str,\n+    val: CValue<'tcx>,\n+    ret: CPlace<'tcx>,\n+    f: impl Fn(\n+        &mut FunctionCx<'_, 'tcx, B>,\n+        TyLayout<'tcx>,\n+        TyLayout<'tcx>,\n+        Value,\n+    ) -> CValue<'tcx>,\n+) {\n+    let layout = val.layout();\n+\n+    let (lane_layout, lane_count) = lane_type_and_count(fx.tcx, layout);\n+    let (ret_lane_layout, ret_lane_count) = lane_type_and_count(fx.tcx, ret.layout());\n+    assert_eq!(lane_count, ret_lane_count);\n+\n+    for lane_idx in 0..lane_count {\n+        let lane_idx = mir::Field::new(lane_idx.try_into().unwrap());\n+        let lane = val.value_field(fx, lane_idx).load_scalar(fx);\n+\n+        let res_lane = f(fx, lane_layout, ret_lane_layout, lane);\n+\n+        ret.place_field(fx, lane_idx).write_cvalue(fx, res_lane);\n+    }\n+}\n+\n+fn simd_pair_for_each_lane<'tcx, B: Backend>(\n     fx: &mut FunctionCx<'_, 'tcx, B>,\n     intrinsic: &str,\n     x: CValue<'tcx>,\n@@ -204,7 +232,7 @@ fn bool_to_zero_or_max_uint<'tcx>(\n \n macro simd_cmp {\n     ($fx:expr, $intrinsic:expr, $cc:ident($x:ident, $y:ident) -> $ret:ident) => {\n-        simd_for_each_lane(\n+        simd_pair_for_each_lane(\n             $fx,\n             $intrinsic,\n             $x,\n@@ -220,7 +248,7 @@ macro simd_cmp {\n         );\n     },\n     ($fx:expr, $intrinsic:expr, $cc_u:ident|$cc_s:ident($x:ident, $y:ident) -> $ret:ident) => {\n-        simd_for_each_lane(\n+        simd_pair_for_each_lane(\n             $fx,\n             $intrinsic,\n             $x,\n@@ -240,7 +268,7 @@ macro simd_cmp {\n \n macro simd_int_binop {\n     ($fx:expr, $intrinsic:expr, $op:ident($x:ident, $y:ident) -> $ret:ident) => {\n-        simd_for_each_lane(\n+        simd_pair_for_each_lane(\n             $fx,\n             $intrinsic,\n             $x,\n@@ -256,7 +284,7 @@ macro simd_int_binop {\n         );\n     },\n     ($fx:expr, $intrinsic:expr, $op_u:ident|$op_s:ident($x:ident, $y:ident) -> $ret:ident) => {\n-        simd_for_each_lane(\n+        simd_pair_for_each_lane(\n             $fx,\n             $intrinsic,\n             $x,\n@@ -276,7 +304,7 @@ macro simd_int_binop {\n \n macro simd_int_flt_binop {\n     ($fx:expr, $intrinsic:expr, $op:ident|$op_f:ident($x:ident, $y:ident) -> $ret:ident) => {\n-        simd_for_each_lane(\n+        simd_pair_for_each_lane(\n             $fx,\n             $intrinsic,\n             $x,\n@@ -293,7 +321,7 @@ macro simd_int_flt_binop {\n         );\n     },\n     ($fx:expr, $intrinsic:expr, $op_u:ident|$op_s:ident|$op_f:ident($x:ident, $y:ident) -> $ret:ident) => {\n-        simd_for_each_lane(\n+        simd_pair_for_each_lane(\n             $fx,\n             $intrinsic,\n             $x,\n@@ -313,7 +341,7 @@ macro simd_int_flt_binop {\n }\n \n macro simd_flt_binop($fx:expr, $intrinsic:expr, $op:ident($x:ident, $y:ident) -> $ret:ident) {\n-    simd_for_each_lane(\n+    simd_pair_for_each_lane(\n         $fx,\n         $intrinsic,\n         $x,"}, {"sha": "1dbe1f33c8630fe4a5f136f779e7c9c0a7ab918e", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/73fd31129136f1ad204084a51dc6f84f645d3c62/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fd31129136f1ad204084a51dc6f84f645d3c62/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=73fd31129136f1ad204084a51dc6f84f645d3c62", "patch": "@@ -21,22 +21,15 @@ pub fn codegen_simd_intrinsic_call<'tcx>(\n         };\n \n         simd_cast, (c a) {\n-            let (lane_layout, lane_count) = lane_type_and_count(fx.tcx, a.layout());\n-            let (ret_lane_layout, ret_lane_count) = lane_type_and_count(fx.tcx, ret.layout());\n-            assert_eq!(lane_count, ret_lane_count);\n+            simd_for_each_lane(fx, intrinsic, a, ret, |fx, lane_layout, ret_lane_layout, lane| {\n+                let ret_lane_ty = fx.clif_type(ret_lane_layout.ty).unwrap();\n \n-            let ret_lane_ty = fx.clif_type(ret_lane_layout.ty).unwrap();\n+                let from_signed = type_sign(lane_layout.ty);\n+                let to_signed = type_sign(ret_lane_layout.ty);\n \n-            let from_signed = type_sign(lane_layout.ty);\n-            let to_signed = type_sign(ret_lane_layout.ty);\n-\n-            for lane in 0..lane_count {\n-                let lane = mir::Field::new(lane.try_into().unwrap());\n-\n-                let a_lane = a.value_field(fx, lane).load_scalar(fx);\n-                let res = clif_int_or_float_cast(fx, a_lane, from_signed, ret_lane_ty, to_signed);\n-                ret.place_field(fx, lane).write_cvalue(fx, CValue::by_val(res, ret_lane_layout));\n-            }\n+                let ret_lane = clif_int_or_float_cast(fx, lane, from_signed, ret_lane_ty, to_signed);\n+                CValue::by_val(ret_lane, ret_lane_layout)\n+            });\n         };\n \n         simd_eq, (c x, c y) {"}, {"sha": "5ae1e9b06afba1f2fd6073088a0e22a90a753149", "filename": "src/value_and_place.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/73fd31129136f1ad204084a51dc6f84f645d3c62/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fd31129136f1ad204084a51dc6f84f645d3c62/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=73fd31129136f1ad204084a51dc6f84f645d3c62", "patch": "@@ -122,11 +122,14 @@ impl<'tcx> CValue<'tcx> {\n         let layout = self.1;\n         match self.0 {\n             CValueInner::ByRef(ptr) => {\n-                let scalar = match layout.abi {\n-                    layout::Abi::Scalar(ref scalar) => scalar.clone(),\n+                let clif_ty = match layout.abi {\n+                    layout::Abi::Scalar(ref scalar) => scalar_to_clif_type(fx.tcx, scalar.clone()),\n+                    layout::Abi::Vector { ref element, count } => {\n+                        scalar_to_clif_type(fx.tcx, element.clone())\n+                            .by(u16::try_from(count).unwrap()).unwrap()\n+                    }\n                     _ => unreachable!(),\n                 };\n-                let clif_ty = scalar_to_clif_type(fx.tcx, scalar);\n                 ptr.load(fx, clif_ty, MemFlags::new())\n             }\n             CValueInner::ByVal(value) => value,"}]}