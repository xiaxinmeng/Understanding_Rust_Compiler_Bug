{"sha": "a92c3fb3eda104685d012c3e99677b931f22ff9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5MmMzZmIzZWRhMTA0Njg1ZDAxMmMzZTk5Njc3YjkzMWYyMmZmOWE=", "commit": {"author": {"name": "Brian Koropoff", "email": "bkoropoff@gmail.com", "date": "2014-09-20T07:14:22Z"}, "committer": {"name": "Brian Koropoff", "email": "bkoropoff@gmail.com", "date": "2014-09-20T07:18:54Z"}, "message": "Disallow index of `!`\n\nThis avoids ICEs in later passes that cannot cope with this construct", "tree": {"sha": "1e55d044869d092bd216f44a1da4f1564731baf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e55d044869d092bd216f44a1da4f1564731baf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a92c3fb3eda104685d012c3e99677b931f22ff9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a92c3fb3eda104685d012c3e99677b931f22ff9a", "html_url": "https://github.com/rust-lang/rust/commit/a92c3fb3eda104685d012c3e99677b931f22ff9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a92c3fb3eda104685d012c3e99677b931f22ff9a/comments", "author": {"login": "bkoropoff", "id": 2101303, "node_id": "MDQ6VXNlcjIxMDEzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/2101303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkoropoff", "html_url": "https://github.com/bkoropoff", "followers_url": "https://api.github.com/users/bkoropoff/followers", "following_url": "https://api.github.com/users/bkoropoff/following{/other_user}", "gists_url": "https://api.github.com/users/bkoropoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkoropoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkoropoff/subscriptions", "organizations_url": "https://api.github.com/users/bkoropoff/orgs", "repos_url": "https://api.github.com/users/bkoropoff/repos", "events_url": "https://api.github.com/users/bkoropoff/events{/privacy}", "received_events_url": "https://api.github.com/users/bkoropoff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bkoropoff", "id": 2101303, "node_id": "MDQ6VXNlcjIxMDEzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/2101303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkoropoff", "html_url": "https://github.com/bkoropoff", "followers_url": "https://api.github.com/users/bkoropoff/followers", "following_url": "https://api.github.com/users/bkoropoff/following{/other_user}", "gists_url": "https://api.github.com/users/bkoropoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkoropoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkoropoff/subscriptions", "organizations_url": "https://api.github.com/users/bkoropoff/orgs", "repos_url": "https://api.github.com/users/bkoropoff/repos", "events_url": "https://api.github.com/users/bkoropoff/events{/privacy}", "received_events_url": "https://api.github.com/users/bkoropoff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c48faaff64fe5acce68e72cc77fc6e7599a784c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c48faaff64fe5acce68e72cc77fc6e7599a784c3", "html_url": "https://github.com/rust-lang/rust/commit/c48faaff64fe5acce68e72cc77fc6e7599a784c3"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "f26a1387bb64aa6a6606bc0bcdcf89db2a28bea6", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a92c3fb3eda104685d012c3e99677b931f22ff9a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a92c3fb3eda104685d012c3e99677b931f22ff9a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=a92c3fb3eda104685d012c3e99677b931f22ff9a", "patch": "@@ -4394,21 +4394,21 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n           check_expr(fcx, &**idx);\n           let raw_base_t = fcx.expr_ty(&**base);\n           let idx_t = fcx.expr_ty(&**idx);\n-          if ty::type_is_error(raw_base_t) || ty::type_is_bot(raw_base_t) {\n+          if ty::type_is_error(raw_base_t) {\n               fcx.write_ty(id, raw_base_t);\n-          } else if ty::type_is_error(idx_t) || ty::type_is_bot(idx_t) {\n+          } else if ty::type_is_error(idx_t) {\n               fcx.write_ty(id, idx_t);\n           } else {\n               let (_, autoderefs, field_ty) =\n                 autoderef(fcx, expr.span, raw_base_t, Some(base.id),\n                           lvalue_pref, |base_t, _| ty::index(base_t));\n               match field_ty {\n-                  Some(ty) => {\n+                  Some(ty) if !ty::type_is_bot(ty) => {\n                       check_expr_has_type(fcx, &**idx, ty::mk_uint());\n                       fcx.write_ty(id, ty);\n                       fcx.write_autoderef_adjustment(base.id, base.span, autoderefs);\n                   }\n-                  None => {\n+                  _ => {\n                       // This is an overloaded method.\n                       let base_t = structurally_resolved_type(fcx,\n                                                               expr.span,"}]}