{"sha": "9fcc8a2a9172802c30b7918c03b24ec556d5fd8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmY2M4YTJhOTE3MjgwMmMzMGI3OTE4YzAzYjI0ZWM1NTZkNWZkOGU=", "commit": {"author": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-02-25T01:16:41Z"}, "committer": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-02-25T01:16:41Z"}, "message": "Review comments", "tree": {"sha": "ada069146cadf20bb6588b910d56b8cc7a17f0fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ada069146cadf20bb6588b910d56b8cc7a17f0fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fcc8a2a9172802c30b7918c03b24ec556d5fd8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fcc8a2a9172802c30b7918c03b24ec556d5fd8e", "html_url": "https://github.com/rust-lang/rust/commit/9fcc8a2a9172802c30b7918c03b24ec556d5fd8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fcc8a2a9172802c30b7918c03b24ec556d5fd8e/comments", "author": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "committer": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd00e5830fb40bd3afe3e41910d280353dbe75d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd00e5830fb40bd3afe3e41910d280353dbe75d9", "html_url": "https://github.com/rust-lang/rust/commit/dd00e5830fb40bd3afe3e41910d280353dbe75d9"}], "stats": {"total": 48, "additions": 34, "deletions": 14}, "files": [{"sha": "8a1ce5594ae46050a0c22e2b9ba34e60144c9ba6", "filename": "src/shims/foreign_items/posix/linux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fcc8a2a9172802c30b7918c03b24ec556d5fd8e/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fcc8a2a9172802c30b7918c03b24ec556d5fd8e/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs?ref=9fcc8a2a9172802c30b7918c03b24ec556d5fd8e", "patch": "@@ -37,7 +37,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // The `macos` module has a parallel foreign item, `readdir_r`, which uses a different\n             // struct layout.\n             \"readdir64_r\" => {\n-                let result = this.readdir64_r(args[0], args[1], args[2])?;\n+                let result = this.linux_readdir64_r(args[0], args[1], args[2])?;\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n             }\n "}, {"sha": "cb6cd9ba44b40a8f89c90ec97e4b8163c683a901", "filename": "src/shims/foreign_items/posix/macos.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fcc8a2a9172802c30b7918c03b24ec556d5fd8e/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fcc8a2a9172802c30b7918c03b24ec556d5fd8e/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs?ref=9fcc8a2a9172802c30b7918c03b24ec556d5fd8e", "patch": "@@ -52,7 +52,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // The `linux` module has a parallel foreign item, `readdir64_r`, which uses a\n             // different struct layout.\n             \"readdir_r$INODE64\" => {\n-                let result = this.readdir_r(args[0], args[1], args[2])?;\n+                let result = this.macos_readdir_r(args[0], args[1], args[2])?;\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n             }\n "}, {"sha": "d999b8066cc8b6c12290e1650d5871718d55e99d", "filename": "src/shims/fs.rs", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9fcc8a2a9172802c30b7918c03b24ec556d5fd8e/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fcc8a2a9172802c30b7918c03b24ec556d5fd8e/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=9fcc8a2a9172802c30b7918c03b24ec556d5fd8e", "patch": "@@ -809,7 +809,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         this.check_no_isolation(\"mkdir\")?;\n \n-        let _mode = if this.tcx.sess.target.target.target_os.to_lowercase() == \"macos\" {\n+        let _mode = if this.tcx.sess.target.target.target_os.as_str() == \"macos\" {\n             this.read_scalar(mode_op)?.not_undef()?.to_u16()? as u32\n         } else {\n             this.read_scalar(mode_op)?.to_u32()?\n@@ -863,16 +863,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // The libc API for opendir says that this method returns a pointer to an opaque\n                 // structure, but we are returning an ID number. Thus, pass it as a scalar of\n                 // pointer width.\n-                Ok(Scalar::from_int(id, this.pointer_size()))\n+                Ok(Scalar::from_machine_usize(id, this))\n             }\n             Err(e) => {\n                 this.set_last_error_from_io_error(e)?;\n-                Ok(Scalar::from_int(0, this.memory.pointer_size()))\n+                Ok(Scalar::from_machine_usize(0, this))\n             }\n         }\n     }\n \n-    fn readdir64_r(\n+    fn linux_readdir64_r(\n         &mut self,\n         dirp_op: OpTy<'tcx, Tag>,\n         entry_op: OpTy<'tcx, Tag>,\n@@ -884,9 +884,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let dirp = this.read_scalar(dirp_op)?.to_machine_usize(this)?;\n \n-        let entry_ptr = this.force_ptr(this.read_scalar(entry_op)?.not_undef()?)?;\n-        let dirent64_layout = this.libc_ty_layout(\"dirent64\")?;\n-\n         let dir_iter = this.machine.dir_handler.streams.get_mut(&dirp).ok_or_else(|| {\n             err_unsup_format!(\"The DIR pointer passed to readdir64_r did not come from opendir\")\n         })?;\n@@ -896,13 +893,24 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // The name is written with write_os_str_to_c_str, while the rest of the\n                 // dirent64 struct is written using write_packed_immediates.\n \n+                // For reference:\n+                // pub struct dirent64 {\n+                //     pub d_ino: ino64_t,\n+                //     pub d_off: off64_t,\n+                //     pub d_reclen: c_ushort,\n+                //     pub d_type: c_uchar,\n+                //     pub d_name: [c_char; 256],\n+                // }\n+\n+                let entry_ptr = this.force_ptr(this.read_scalar(entry_op)?.not_undef()?)?;\n+                let dirent64_layout = this.libc_ty_layout(\"dirent64\")?;\n                 let name_offset = dirent64_layout.details.fields.offset(4);\n                 let name_ptr = entry_ptr.offset(name_offset, this)?;\n \n                 let file_name = dir_entry.file_name();\n                 let name_fits = this.write_os_str_to_c_str(&file_name, Scalar::Ptr(name_ptr), 256)?;\n                 if !name_fits {\n-                    panic!(\"A directory entry had a name too large to fit in libc::dirent64\");\n+                    throw_unsup_format!(\"A directory entry had a name too large to fit in libc::dirent64\");\n                 }\n \n                 let entry_place = this.deref_operand(entry_op)?;\n@@ -948,7 +956,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n     }\n \n-    fn readdir_r(\n+    fn macos_readdir_r(\n         &mut self,\n         dirp_op: OpTy<'tcx, Tag>,\n         entry_op: OpTy<'tcx, Tag>,\n@@ -960,8 +968,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let dirp = this.read_scalar(dirp_op)?.to_machine_usize(this)?;\n \n-        let entry_ptr = this.force_ptr(this.read_scalar(entry_op)?.not_undef()?)?;\n-        let dirent_layout = this.libc_ty_layout(\"dirent\")?;\n \n         let dir_iter = this.machine.dir_handler.streams.get_mut(&dirp).ok_or_else(|| {\n             err_unsup_format!(\"The DIR pointer passed to readdir_r did not come from opendir\")\n@@ -972,13 +978,25 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // The name is written with write_os_str_to_c_str, while the rest of the\n                 // dirent struct is written using write_packed_Immediates.\n \n+                // For reference:\n+                // pub struct dirent {\n+                //     pub d_ino: u64,\n+                //     pub d_seekoff: u64,\n+                //     pub d_reclen: u16,\n+                //     pub d_namlen: u16,\n+                //     pub d_type: u8,\n+                //     pub d_name: [c_char; 1024],\n+                // }\n+\n+                let entry_ptr = this.force_ptr(this.read_scalar(entry_op)?.not_undef()?)?;\n+                let dirent_layout = this.libc_ty_layout(\"dirent\")?;\n                 let name_offset = dirent_layout.details.fields.offset(5);\n                 let name_ptr = entry_ptr.offset(name_offset, this)?;\n \n                 let file_name = dir_entry.file_name();\n                 let name_fits = this.write_os_str_to_c_str(&file_name, Scalar::Ptr(name_ptr), 1024)?;\n                 if !name_fits {\n-                    panic!(\"A directory entry had a name too large to fit in libc::dirent\");\n+                    throw_unsup_format!(\"A directory entry had a name too large to fit in libc::dirent\");\n                 }\n \n                 let entry_place = this.deref_operand(entry_op)?;"}, {"sha": "f859f934bdd1c7995ff6b57cb35ccf17e89ba64a", "filename": "tests/run-pass/fs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fcc8a2a9172802c30b7918c03b24ec556d5fd8e/tests%2Frun-pass%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fcc8a2a9172802c30b7918c03b24ec556d5fd8e/tests%2Frun-pass%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffs.rs?ref=9fcc8a2a9172802c30b7918c03b24ec556d5fd8e", "patch": "@@ -199,6 +199,8 @@ fn test_directory() {\n     create_dir(&dir_path).unwrap();\n     // Test that the metadata of a directory is correct.\n     assert!(dir_path.metadata().unwrap().is_dir());\n+    // Creating a directory when it already exists should fail.\n+    assert_eq!(ErrorKind::AlreadyExists, create_dir(&dir_path).unwrap_err().kind());\n \n     // Create some files inside the directory\n     let path_1 = dir_path.join(\"test_file_1\");"}]}