{"sha": "b8aba11de3422b5b0ea7be727c2da2b856db3076", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4YWJhMTFkZTM0MjJiNWIwZWE3YmU3MjdjMmRhMmI4NTZkYjMwNzY=", "commit": {"author": {"name": "Pointerbender", "email": "pointerbender@gmail.com", "date": "2021-05-26T19:30:43Z"}, "committer": {"name": "Pointerbender", "email": "pointerbender@gmail.com", "date": "2021-06-02T13:36:18Z"}, "message": "regression tests for pointer invalidation in core library slice methods", "tree": {"sha": "7215938c8980786dc0e5b0bbfaaadf1c6e4fcedd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7215938c8980786dc0e5b0bbfaaadf1c6e4fcedd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8aba11de3422b5b0ea7be727c2da2b856db3076", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8aba11de3422b5b0ea7be727c2da2b856db3076", "html_url": "https://github.com/rust-lang/rust/commit/b8aba11de3422b5b0ea7be727c2da2b856db3076", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8aba11de3422b5b0ea7be727c2da2b856db3076/comments", "author": {"login": "Pointerbender", "id": 81013316, "node_id": "MDQ6VXNlcjgxMDEzMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/81013316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pointerbender", "html_url": "https://github.com/Pointerbender", "followers_url": "https://api.github.com/users/Pointerbender/followers", "following_url": "https://api.github.com/users/Pointerbender/following{/other_user}", "gists_url": "https://api.github.com/users/Pointerbender/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pointerbender/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pointerbender/subscriptions", "organizations_url": "https://api.github.com/users/Pointerbender/orgs", "repos_url": "https://api.github.com/users/Pointerbender/repos", "events_url": "https://api.github.com/users/Pointerbender/events{/privacy}", "received_events_url": "https://api.github.com/users/Pointerbender/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Pointerbender", "id": 81013316, "node_id": "MDQ6VXNlcjgxMDEzMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/81013316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pointerbender", "html_url": "https://github.com/Pointerbender", "followers_url": "https://api.github.com/users/Pointerbender/followers", "following_url": "https://api.github.com/users/Pointerbender/following{/other_user}", "gists_url": "https://api.github.com/users/Pointerbender/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pointerbender/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pointerbender/subscriptions", "organizations_url": "https://api.github.com/users/Pointerbender/orgs", "repos_url": "https://api.github.com/users/Pointerbender/repos", "events_url": "https://api.github.com/users/Pointerbender/events{/privacy}", "received_events_url": "https://api.github.com/users/Pointerbender/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "453affaaa1762a065d2857970b8333017211208c", "url": "https://api.github.com/repos/rust-lang/rust/commits/453affaaa1762a065d2857970b8333017211208c", "html_url": "https://github.com/rust-lang/rust/commit/453affaaa1762a065d2857970b8333017211208c"}], "stats": {"total": 56, "additions": 55, "deletions": 1}, "files": [{"sha": "7b2fc1f00d6747681c158bda1329d2805e56c078", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8aba11de3422b5b0ea7be727c2da2b856db3076/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/b8aba11de3422b5b0ea7be727c2da2b856db3076/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=b8aba11de3422b5b0ea7be727c2da2b856db3076", "patch": "@@ -1 +1 @@\n-d9feaaa548ce380159a1de68f4f6e605db9a9fc5\n+d9feaaa548ce380159a1de68f4f6e605db9a9fc5\n\\ No newline at end of file"}, {"sha": "113f3faa9ad2df2737061631e53766a593a466f2", "filename": "tests/run-pass/slices.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/b8aba11de3422b5b0ea7be727c2da2b856db3076/tests%2Frun-pass%2Fslices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8aba11de3422b5b0ea7be727c2da2b856db3076/tests%2Frun-pass%2Fslices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fslices.rs?ref=b8aba11de3422b5b0ea7be727c2da2b856db3076", "patch": "@@ -1,4 +1,6 @@\n #![feature(new_uninit)]\n+#![feature(slice_as_chunks)]\n+#![feature(slice_partition_dedup)]\n \n use std::slice;\n \n@@ -186,8 +188,60 @@ fn uninit_slice() {\n     assert_eq!(values.iter().map(|x| **x).collect::<Vec<_>>(), vec![1, 2, 3])\n }\n \n+/// Regression tests for slice methods in the Rust core library where raw pointers are obtained\n+/// from mutable references.\n+fn test_for_invalidated_pointers() {\n+    let mut buffer = [0usize; 64];\n+    let len = buffer.len();\n+\n+    // These regression tests (indirectly) call every slice method which contains a `buffer.as_mut_ptr()`.\n+    // `<[T]>::as_mut_ptr(&mut self)` takes a mutable reference (tagged Unique), which will invalidate all\n+    // the other pointers that were previously derived from it according to the Stacked Borrows model.\n+    // An example of where this could go wrong is a prior bug inside `<[T]>::copy_within`:\n+    //\n+    //      unsafe {\n+    //          core::ptr::copy(self.as_ptr().add(src_start), self.as_mut_ptr().add(dest), count);\n+    //      }\n+    //\n+    // The arguments to `core::ptr::copy` are evaluated from left to right. `self.as_ptr()` creates\n+    // an immutable reference (which is tagged as `SharedReadOnly` by Stacked Borrows) to the array\n+    // and derives a valid `*const` pointer from it. When jumping to the next argument,\n+    // `self.as_mut_ptr()` creates a mutable reference (tagged as `Unique`) to the array, which\n+    // invalidates the existing `SharedReadOnly` reference and any pointers derived from it.\n+    // The invalidated `*const` pointer (the first argument to `core::ptr::copy`) is then used\n+    // after the fact when `core::ptr::copy` is called, which triggers undefined behavior.\n+\n+    unsafe { assert_eq!(0, *buffer.as_mut_ptr_range().start ); }\n+    // Check that the pointer range is in-bounds, while we're at it\n+    let range = buffer.as_mut_ptr_range();\n+    unsafe { assert_eq!(*range.start, *range.end.sub(len)); }\n+\n+    buffer.reverse();\n+\n+    // Calls `fn as_chunks_unchecked_mut` internally (requires unstable `#![feature(slice_as_chunks)]`):\n+    assert_eq!(2, buffer.as_chunks_mut::<32>().0.len());\n+\n+    // Calls `fn split_at_mut_unchecked` internally:\n+    let split_mut = buffer.split_at_mut(32);\n+    assert_eq!(split_mut.0, split_mut.1);\n+\n+    // Calls `fn partition_dedup_by` internally (requires unstable `#![feature(slice_partition_dedup)]`):\n+    assert_eq!(1, buffer.partition_dedup().0.len());\n+\n+    buffer.rotate_left(8);\n+    buffer.rotate_right(16);\n+\n+    buffer.copy_from_slice(&[1usize; 64]);\n+    buffer.swap_with_slice(&mut [2usize; 64]);\n+\n+    assert_eq!(0, unsafe { buffer.align_to_mut::<u8>().1[1] });\n+\n+    buffer.copy_within(1.., 0);\n+}\n+\n fn main() {\n     slice_of_zst();\n     test_iter_ref_consistency();\n     uninit_slice();\n+    test_for_invalidated_pointers();\n }"}]}