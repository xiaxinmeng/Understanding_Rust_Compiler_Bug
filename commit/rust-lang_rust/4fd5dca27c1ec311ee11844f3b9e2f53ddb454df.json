{"sha": "4fd5dca27c1ec311ee11844f3b9e2f53ddb454df", "node_id": "C_kwDOAAsO6NoAKDRmZDVkY2EyN2MxZWMzMTFlZTExODQ0ZjNiOWUyZjUzZGRiNDU0ZGY", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-17T02:12:39Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-17T02:13:43Z"}, "message": "implement SIMD sqrt and fma", "tree": {"sha": "1c152712fd5bc6444de5d772e26f0ac85cc77da3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c152712fd5bc6444de5d772e26f0ac85cc77da3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fd5dca27c1ec311ee11844f3b9e2f53ddb454df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fd5dca27c1ec311ee11844f3b9e2f53ddb454df", "html_url": "https://github.com/rust-lang/rust/commit/4fd5dca27c1ec311ee11844f3b9e2f53ddb454df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fd5dca27c1ec311ee11844f3b9e2f53ddb454df/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9a0d0e5e7efe06557f37fdefdb68c7d4fd83bc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9a0d0e5e7efe06557f37fdefdb68c7d4fd83bc6", "html_url": "https://github.com/rust-lang/rust/commit/a9a0d0e5e7efe06557f37fdefdb68c7d4fd83bc6"}], "stats": {"total": 47, "additions": 46, "deletions": 1}, "files": [{"sha": "726e6b6b96193037c67f91ed74392fe48efe93d2", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4fd5dca27c1ec311ee11844f3b9e2f53ddb454df/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fd5dca27c1ec311ee11844f3b9e2f53ddb454df/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=4fd5dca27c1ec311ee11844f3b9e2f53ddb454df", "patch": "@@ -329,7 +329,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             | \"simd_ceil\"\n             | \"simd_floor\"\n             | \"simd_round\"\n-            | \"simd_trunc\" => {\n+            | \"simd_trunc\"\n+            | \"simd_fsqrt\" => {\n                 let &[ref op] = check_arg_count(args)?;\n                 let (op, op_len) = this.operand_to_simd(op)?;\n                 let (dest, dest_len) = this.place_to_simd(dest)?;\n@@ -342,6 +343,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     Floor,\n                     Round,\n                     Trunc,\n+                    Sqrt,\n                 }\n                 #[derive(Copy, Clone)]\n                 enum Op {\n@@ -356,6 +358,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     \"simd_floor\" => Op::HostOp(HostFloatOp::Floor),\n                     \"simd_round\" => Op::HostOp(HostFloatOp::Round),\n                     \"simd_trunc\" => Op::HostOp(HostFloatOp::Trunc),\n+                    \"simd_fsqrt\" => Op::HostOp(HostFloatOp::Sqrt),\n                     _ => unreachable!(),\n                 };\n \n@@ -388,6 +391,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                                         HostFloatOp::Floor => f.floor(),\n                                         HostFloatOp::Round => f.round(),\n                                         HostFloatOp::Trunc => f.trunc(),\n+                                        HostFloatOp::Sqrt => f.sqrt(),\n                                     };\n                                     Scalar::from_u32(res.to_bits())\n                                 }\n@@ -398,6 +402,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                                         HostFloatOp::Floor => f.floor(),\n                                         HostFloatOp::Round => f.round(),\n                                         HostFloatOp::Trunc => f.trunc(),\n+                                        HostFloatOp::Sqrt => f.sqrt(),\n                                     };\n                                     Scalar::from_u64(res.to_bits())\n                                 }\n@@ -508,6 +513,36 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     this.write_scalar(val, &dest.into())?;\n                 }\n             }\n+            \"simd_fma\" => {\n+                let &[ref a, ref b, ref c] = check_arg_count(args)?;\n+                let (a, a_len) = this.operand_to_simd(a)?;\n+                let (b, b_len) = this.operand_to_simd(b)?;\n+                let (c, c_len) = this.operand_to_simd(c)?;\n+                let (dest, dest_len) = this.place_to_simd(dest)?;\n+\n+                assert_eq!(dest_len, a_len);\n+                assert_eq!(dest_len, b_len);\n+                assert_eq!(dest_len, c_len);\n+\n+                for i in 0..dest_len {\n+                    let a = this.read_immediate(&this.mplace_index(&a, i)?.into())?.to_scalar()?;\n+                    let b = this.read_immediate(&this.mplace_index(&b, i)?.into())?.to_scalar()?;\n+                    let c = this.read_immediate(&this.mplace_index(&c, i)?.into())?.to_scalar()?;\n+                    let dest = this.mplace_index(&dest, i)?;\n+\n+                    // Works for f32 and f64.\n+                    let ty::Float(float_ty) = dest.layout.ty.kind() else {\n+                        bug!(\"{} operand is not a float\", intrinsic_name)\n+                    };\n+                    let val = match float_ty {\n+                        FloatTy::F32 =>\n+                            Scalar::from_f32(a.to_f32()?.mul_add(b.to_f32()?, c.to_f32()?).value),\n+                        FloatTy::F64 =>\n+                            Scalar::from_f64(a.to_f64()?.mul_add(b.to_f64()?, c.to_f64()?).value),\n+                    };\n+                    this.write_scalar(val, &dest.into())?;\n+                }\n+            }\n             #[rustfmt::skip]\n             | \"simd_reduce_and\"\n             | \"simd_reduce_or\""}, {"sha": "80b0b4556c6e7cb4cc721e737630e2678d9ff17f", "filename": "tests/run-pass/portable-simd.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4fd5dca27c1ec311ee11844f3b9e2f53ddb454df/tests%2Frun-pass%2Fportable-simd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fd5dca27c1ec311ee11844f3b9e2f53ddb454df/tests%2Frun-pass%2Fportable-simd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fportable-simd.rs?ref=4fd5dca27c1ec311ee11844f3b9e2f53ddb454df", "patch": "@@ -15,6 +15,11 @@ fn simd_ops_f32() {\n     assert_eq!(a.max(b * f32x4::splat(4.0)), f32x4::from_array([10.0, 10.0, 12.0, 10.0]));\n     assert_eq!(a.min(b * f32x4::splat(4.0)), f32x4::from_array([4.0, 8.0, 10.0, -16.0]));\n \n+    assert_eq!(a.mul_add(b, a), (a*b)+a);\n+    assert_eq!(b.mul_add(b, a), (b*b)+a);\n+    assert_eq!((a*a).sqrt(), a);\n+    assert_eq!((b*b).sqrt(), b.abs());\n+\n     assert_eq!(a.lanes_eq(f32x4::splat(5.0) * b), Mask::from_array([false, true, false, false]));\n     assert_eq!(a.lanes_ne(f32x4::splat(5.0) * b), Mask::from_array([true, false, true, true]));\n     assert_eq!(a.lanes_le(f32x4::splat(5.0) * b), Mask::from_array([false, true, true, false]));\n@@ -59,6 +64,11 @@ fn simd_ops_f64() {\n     assert_eq!(a.max(b * f64x4::splat(4.0)), f64x4::from_array([10.0, 10.0, 12.0, 10.0]));\n     assert_eq!(a.min(b * f64x4::splat(4.0)), f64x4::from_array([4.0, 8.0, 10.0, -16.0]));\n \n+    assert_eq!(a.mul_add(b, a), (a*b)+a);\n+    assert_eq!(b.mul_add(b, a), (b*b)+a);\n+    assert_eq!((a*a).sqrt(), a);\n+    assert_eq!((b*b).sqrt(), b.abs());\n+\n     assert_eq!(a.lanes_eq(f64x4::splat(5.0) * b), Mask::from_array([false, true, false, false]));\n     assert_eq!(a.lanes_ne(f64x4::splat(5.0) * b), Mask::from_array([true, false, true, true]));\n     assert_eq!(a.lanes_le(f64x4::splat(5.0) * b), Mask::from_array([false, true, true, false]));"}]}