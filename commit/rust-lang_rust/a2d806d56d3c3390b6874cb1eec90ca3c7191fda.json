{"sha": "a2d806d56d3c3390b6874cb1eec90ca3c7191fda", "node_id": "C_kwDOAAsO6NoAKGEyZDgwNmQ1NmQzYzMzOTBiNjg3NGNiMWVlYzkwY2EzYzcxOTFmZGE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-18T19:05:43Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-25T03:35:14Z"}, "message": "Pre-populate MIR with opaques, prefer subst-relate candidate", "tree": {"sha": "90f6d347477a413851203b9b667ab12631be1535", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90f6d347477a413851203b9b667ab12631be1535"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2d806d56d3c3390b6874cb1eec90ca3c7191fda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2d806d56d3c3390b6874cb1eec90ca3c7191fda", "html_url": "https://github.com/rust-lang/rust/commit/a2d806d56d3c3390b6874cb1eec90ca3c7191fda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2d806d56d3c3390b6874cb1eec90ca3c7191fda/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3f8beaed6d70d4b990f834fa617149e2bf40a2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3f8beaed6d70d4b990f834fa617149e2bf40a2d", "html_url": "https://github.com/rust-lang/rust/commit/e3f8beaed6d70d4b990f834fa617149e2bf40a2d"}], "stats": {"total": 115, "additions": 87, "deletions": 28}, "files": [{"sha": "b63f51138c326f008e75005375309c0df070d9a2", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/a2d806d56d3c3390b6874cb1eec90ca3c7191fda/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2d806d56d3c3390b6874cb1eec90ca3c7191fda/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=a2d806d56d3c3390b6874cb1eec90ca3c7191fda", "patch": "@@ -26,6 +26,7 @@ use rustc_middle::mir::tcx::PlaceTy;\n use rustc_middle::mir::visit::{NonMutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::AssertKind;\n use rustc_middle::mir::*;\n+use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::adjustment::PointerCast;\n use rustc_middle::ty::cast::CastTy;\n use rustc_middle::ty::subst::{SubstsRef, UserSubsts};\n@@ -48,6 +49,7 @@ use rustc_mir_dataflow::impls::MaybeInitializedPlaces;\n use rustc_mir_dataflow::move_paths::MoveData;\n use rustc_mir_dataflow::ResultsCursor;\n \n+use crate::renumber::RegionCtxt;\n use crate::session_diagnostics::MoveUnsized;\n use crate::{\n     borrow_set::BorrowSet,\n@@ -183,6 +185,15 @@ pub(crate) fn type_check<'mir, 'tcx>(\n         &mut borrowck_context,\n     );\n \n+    // FIXME(-Ztrait-solver=next): A bit dubious that we're only registering\n+    // predefined opaques in the typeck root.\n+    // FIXME(-Ztrait-solver=next): This is also totally wrong for TAITs, since\n+    // the HIR typeck map defining usages back to their definition params,\n+    // they won't actually match up with the usages in this body...\n+    if infcx.tcx.trait_solver_next() && !infcx.tcx.is_typeck_child(body.source.def_id()) {\n+        checker.register_predefined_opaques_in_new_solver();\n+    }\n+\n     let mut verifier = TypeVerifier::new(&mut checker, promoted);\n     verifier.visit_body(&body);\n \n@@ -1023,6 +1034,57 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         checker\n     }\n \n+    pub(super) fn register_predefined_opaques_in_new_solver(&mut self) {\n+        // OK to use the identity substitutions for each opaque type key, since\n+        // we remap opaques from HIR typeck back to their definition params.\n+        let opaques: Vec<_> = self\n+            .infcx\n+            .tcx\n+            .typeck(self.body.source.def_id().expect_local())\n+            .concrete_opaque_types\n+            .iter()\n+            .map(|(&def_id, &hidden_ty)| {\n+                let substs = ty::InternalSubsts::identity_for_item(self.infcx.tcx, def_id);\n+                (ty::OpaqueTypeKey { def_id, substs }, hidden_ty)\n+            })\n+            .collect();\n+\n+        let renumbered_opaques = self.infcx.tcx.fold_regions(opaques, |_, _| {\n+            self.infcx.next_nll_region_var(\n+                NllRegionVariableOrigin::Existential { from_forall: false },\n+                || RegionCtxt::Unknown,\n+            )\n+        });\n+\n+        let param_env = self.param_env;\n+        let result = self.fully_perform_op(\n+            Locations::All(self.body.span),\n+            ConstraintCategory::OpaqueType,\n+            CustomTypeOp::new(\n+                |ocx| {\n+                    for (key, hidden_ty) in renumbered_opaques {\n+                        ocx.register_infer_ok_obligations(\n+                            ocx.infcx.register_hidden_type_in_new_solver(\n+                                key,\n+                                param_env,\n+                                hidden_ty.ty,\n+                            )?,\n+                        );\n+                    }\n+                    Ok(())\n+                },\n+                \"register pre-defined opaques\",\n+            ),\n+        );\n+\n+        if result.is_err() {\n+            self.infcx.tcx.sess.delay_span_bug(\n+                self.body.span,\n+                \"failed re-defining predefined opaques in mir typeck\",\n+            );\n+        }\n+    }\n+\n     fn body(&self) -> &Body<'tcx> {\n         self.body\n     }"}, {"sha": "26ace28f5fd24ba744b10636967183e29389c519", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a2d806d56d3c3390b6874cb1eec90ca3c7191fda/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2d806d56d3c3390b6874cb1eec90ca3c7191fda/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=a2d806d56d3c3390b6874cb1eec90ca3c7191fda", "patch": "@@ -239,34 +239,34 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n                     evaluate_normalizes_to(self, alias_rhs, lhs, direction, Invert::Yes).ok(),\n                 );\n                 // Relate via substs\n-                candidates.extend(\n-                    self.probe(|ecx| {\n-                        let span = tracing::span!(\n-                            tracing::Level::DEBUG,\n-                            \"compute_alias_relate_goal(relate_via_substs)\",\n-                            ?alias_lhs,\n-                            ?alias_rhs,\n-                            ?direction\n-                        );\n-                        let _enter = span.enter();\n-\n-                        match direction {\n-                            ty::AliasRelationDirection::Equate => {\n-                                ecx.eq(goal.param_env, alias_lhs, alias_rhs)?;\n-                            }\n-                            ty::AliasRelationDirection::Subtype => {\n-                                ecx.sub(goal.param_env, alias_lhs, alias_rhs)?;\n-                            }\n+                let subst_relate_response = self.probe(|ecx| {\n+                    let span = tracing::span!(\n+                        tracing::Level::DEBUG,\n+                        \"compute_alias_relate_goal(relate_via_substs)\",\n+                        ?alias_lhs,\n+                        ?alias_rhs,\n+                        ?direction\n+                    );\n+                    let _enter = span.enter();\n+\n+                    match direction {\n+                        ty::AliasRelationDirection::Equate => {\n+                            ecx.eq(goal.param_env, alias_lhs, alias_rhs)?;\n+                        }\n+                        ty::AliasRelationDirection::Subtype => {\n+                            ecx.sub(goal.param_env, alias_lhs, alias_rhs)?;\n                         }\n+                    }\n \n-                        ecx.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n-                    })\n-                    .ok(),\n-                );\n+                    ecx.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n+                });\n+                candidates.extend(subst_relate_response);\n                 debug!(?candidates);\n \n                 if let Some(merged) = self.try_merge_responses(&candidates) {\n                     Ok(merged)\n+                } else if let Ok(subst_relate_response) = subst_relate_response {\n+                    Ok(subst_relate_response)\n                 } else {\n                     self.flounder(&candidates)\n                 }"}, {"sha": "f97f54e760e33828a25aabe4b345c84546fae637", "filename": "compiler/rustc_trait_selection/src/solve/opaques.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a2d806d56d3c3390b6874cb1eec90ca3c7191fda/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fopaques.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2d806d56d3c3390b6874cb1eec90ca3c7191fda/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fopaques.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fopaques.rs?ref=a2d806d56d3c3390b6874cb1eec90ca3c7191fda", "patch": "@@ -1,6 +1,6 @@\n use rustc_middle::traits::query::NoSolution;\n use rustc_middle::traits::solve::{Certainty, Goal, QueryResult};\n-use rustc_middle::traits::{ObligationCause, Reveal};\n+use rustc_middle::traits::Reveal;\n use rustc_middle::ty;\n use rustc_middle::ty::util::NotUniqueParam;\n \n@@ -37,11 +37,8 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n                         Ok(()) => {}\n                     }\n                     // Prefer opaques registered already.\n-                    let matches = self.unify_existing_opaque_tys(\n-                        goal.param_env,\n-                        opaque_ty,\n-                        expected\n-                    );\n+                    let matches =\n+                        self.unify_existing_opaque_tys(goal.param_env, opaque_ty, expected);\n                     if !matches.is_empty() {\n                         if let Some(response) = self.try_merge_responses(&matches) {\n                             return Ok(response);"}]}