{"sha": "910a97d7cecf7fb11444dd4c0b2ccad70a1ece8f", "node_id": "C_kwDOAAsO6NoAKDkxMGE5N2Q3Y2VjZjdmYjExNDQ0ZGQ0YzBiMmNjYWQ3MGExZWNlOGY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-18T16:01:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-18T16:01:29Z"}, "message": "Auto merge of #10020 - samueltardieu:more-into-iter-removal, r=xFrednet\n\nIdentify more cases of useless `into_iter()` calls\n\nchangelog: Sugg: [`useless_conversion`]: Now suggests removing calls to `into_iter()` on an expression implementing `Iterator`\n[#10020](https://github.com/rust-lang/rust-clippy/pull/10020)\n<!-- changelog_checked -->", "tree": {"sha": "8f0b7e9b8c2195c2e78ad317fa9a5c9f86c918a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f0b7e9b8c2195c2e78ad317fa9a5c9f86c918a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/910a97d7cecf7fb11444dd4c0b2ccad70a1ece8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/910a97d7cecf7fb11444dd4c0b2ccad70a1ece8f", "html_url": "https://github.com/rust-lang/rust/commit/910a97d7cecf7fb11444dd4c0b2ccad70a1ece8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/910a97d7cecf7fb11444dd4c0b2ccad70a1ece8f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bdfb0741dbcecd5279a2635c3280726db0604b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bdfb0741dbcecd5279a2635c3280726db0604b5", "html_url": "https://github.com/rust-lang/rust/commit/4bdfb0741dbcecd5279a2635c3280726db0604b5"}, {"sha": "af39a8a4a82001b38e2b6c0d391d1aa76740ec4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/af39a8a4a82001b38e2b6c0d391d1aa76740ec4b", "html_url": "https://github.com/rust-lang/rust/commit/af39a8a4a82001b38e2b6c0d391d1aa76740ec4b"}], "stats": {"total": 228, "additions": 200, "deletions": 28}, "files": [{"sha": "a95e7b613746dbfc33bb02f1df7a02bc13ef4179", "filename": "clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/910a97d7cecf7fb11444dd4c0b2ccad70a1ece8f/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910a97d7cecf7fb11444dd4c0b2ccad70a1ece8f/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=910a97d7cecf7fb11444dd4c0b2ccad70a1ece8f", "patch": "@@ -1,11 +1,11 @@\n use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg};\n use clippy_utils::source::{snippet, snippet_with_macro_callsite};\n use clippy_utils::sugg::Sugg;\n-use clippy_utils::ty::{is_type_diagnostic_item, same_type_and_consts};\n-use clippy_utils::{get_parent_expr, is_trait_method, match_def_path, paths};\n+use clippy_utils::ty::{is_copy, is_type_diagnostic_item, same_type_and_consts};\n+use clippy_utils::{get_parent_expr, is_trait_method, match_def_path, path_to_local, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind, HirId, MatchSource};\n+use rustc_hir::{BindingAnnotation, Expr, ExprKind, HirId, MatchSource, Node, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -81,16 +81,24 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                     }\n                 }\n                 if is_trait_method(cx, e, sym::IntoIterator) && name.ident.name == sym::into_iter {\n-                    if let Some(parent_expr) = get_parent_expr(cx, e) {\n-                        if let ExprKind::MethodCall(parent_name, ..) = parent_expr.kind {\n-                            if parent_name.ident.name != sym::into_iter {\n-                                return;\n-                            }\n-                        }\n+                    if get_parent_expr(cx, e).is_some() &&\n+                       let Some(id) = path_to_local(recv) &&\n+                       let Node::Pat(pat) = cx.tcx.hir().get(id) &&\n+                       let PatKind::Binding(ann, ..) = pat.kind &&\n+                       ann != BindingAnnotation::MUT\n+                    {\n+                        // Do not remove .into_iter() applied to a non-mutable local variable used in\n+                        // a larger expression context as it would differ in mutability.\n+                        return;\n                     }\n+\n                     let a = cx.typeck_results().expr_ty(e);\n                     let b = cx.typeck_results().expr_ty(recv);\n-                    if same_type_and_consts(a, b) {\n+\n+                    // If the types are identical then .into_iter() can be removed, unless the type\n+                    // implements Copy, in which case .into_iter() returns a copy of the receiver and\n+                    // cannot be safely omitted.\n+                    if same_type_and_consts(a, b) && !is_copy(cx, b) {\n                         let sugg = snippet(cx, recv.span, \"<expr>\").into_owned();\n                         span_lint_and_sugg(\n                             cx,"}, {"sha": "94b206d8e58f6b4e7c79b29399ae3b670d4cb58f", "filename": "tests/ui/useless_conversion.fixed", "status": "modified", "additions": 70, "deletions": 3, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/910a97d7cecf7fb11444dd4c0b2ccad70a1ece8f/tests%2Fui%2Fuseless_conversion.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/910a97d7cecf7fb11444dd4c0b2ccad70a1ece8f/tests%2Fui%2Fuseless_conversion.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion.fixed?ref=910a97d7cecf7fb11444dd4c0b2ccad70a1ece8f", "patch": "@@ -33,20 +33,87 @@ fn test_issue_3913() -> Result<(), std::io::Error> {\n     Ok(())\n }\n \n-fn test_issue_5833() -> Result<(), ()> {\n+fn dont_lint_into_iter_on_immutable_local_implementing_iterator_in_expr() {\n     let text = \"foo\\r\\nbar\\n\\nbaz\\n\";\n     let lines = text.lines();\n     if Some(\"ok\") == lines.into_iter().next() {}\n+}\n \n-    Ok(())\n+fn lint_into_iter_on_mutable_local_implementing_iterator_in_expr() {\n+    let text = \"foo\\r\\nbar\\n\\nbaz\\n\";\n+    let mut lines = text.lines();\n+    if Some(\"ok\") == lines.next() {}\n+}\n+\n+fn lint_into_iter_on_expr_implementing_iterator() {\n+    let text = \"foo\\r\\nbar\\n\\nbaz\\n\";\n+    let mut lines = text.lines();\n+    if Some(\"ok\") == lines.next() {}\n+}\n+\n+fn lint_into_iter_on_expr_implementing_iterator_2() {\n+    let text = \"foo\\r\\nbar\\n\\nbaz\\n\";\n+    if Some(\"ok\") == text.lines().next() {}\n+}\n+\n+#[allow(const_item_mutation)]\n+fn lint_into_iter_on_const_implementing_iterator() {\n+    const NUMBERS: std::ops::Range<i32> = 0..10;\n+    let _ = NUMBERS.next();\n+}\n+\n+fn lint_into_iter_on_const_implementing_iterator_2() {\n+    const NUMBERS: std::ops::Range<i32> = 0..10;\n+    let mut n = NUMBERS;\n+    n.next();\n+}\n+\n+#[derive(Clone, Copy)]\n+struct CopiableCounter {\n+    counter: u32,\n+}\n+\n+impl Iterator for CopiableCounter {\n+    type Item = u32;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        self.counter = self.counter.wrapping_add(1);\n+        Some(self.counter)\n+    }\n+}\n+\n+fn dont_lint_into_iter_on_copy_iter() {\n+    let mut c = CopiableCounter { counter: 0 };\n+    assert_eq!(c.into_iter().next(), Some(1));\n+    assert_eq!(c.into_iter().next(), Some(1));\n+    assert_eq!(c.next(), Some(1));\n+    assert_eq!(c.next(), Some(2));\n+}\n+\n+fn dont_lint_into_iter_on_static_copy_iter() {\n+    static mut C: CopiableCounter = CopiableCounter { counter: 0 };\n+    unsafe {\n+        assert_eq!(C.into_iter().next(), Some(1));\n+        assert_eq!(C.into_iter().next(), Some(1));\n+        assert_eq!(C.next(), Some(1));\n+        assert_eq!(C.next(), Some(2));\n+    }\n }\n \n fn main() {\n     test_generic(10i32);\n     test_generic2::<i32, i32>(10i32);\n     test_questionmark().unwrap();\n     test_issue_3913().unwrap();\n-    test_issue_5833().unwrap();\n+\n+    dont_lint_into_iter_on_immutable_local_implementing_iterator_in_expr();\n+    lint_into_iter_on_mutable_local_implementing_iterator_in_expr();\n+    lint_into_iter_on_expr_implementing_iterator();\n+    lint_into_iter_on_expr_implementing_iterator_2();\n+    lint_into_iter_on_const_implementing_iterator();\n+    lint_into_iter_on_const_implementing_iterator_2();\n+    dont_lint_into_iter_on_copy_iter();\n+    dont_lint_into_iter_on_static_copy_iter();\n \n     let _: String = \"foo\".into();\n     let _: String = From::from(\"foo\");"}, {"sha": "c7ae927941bf1cceb72313528ed4f8b539c84f22", "filename": "tests/ui/useless_conversion.rs", "status": "modified", "additions": 70, "deletions": 3, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/910a97d7cecf7fb11444dd4c0b2ccad70a1ece8f/tests%2Fui%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910a97d7cecf7fb11444dd4c0b2ccad70a1ece8f/tests%2Fui%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion.rs?ref=910a97d7cecf7fb11444dd4c0b2ccad70a1ece8f", "patch": "@@ -33,20 +33,87 @@ fn test_issue_3913() -> Result<(), std::io::Error> {\n     Ok(())\n }\n \n-fn test_issue_5833() -> Result<(), ()> {\n+fn dont_lint_into_iter_on_immutable_local_implementing_iterator_in_expr() {\n     let text = \"foo\\r\\nbar\\n\\nbaz\\n\";\n     let lines = text.lines();\n     if Some(\"ok\") == lines.into_iter().next() {}\n+}\n \n-    Ok(())\n+fn lint_into_iter_on_mutable_local_implementing_iterator_in_expr() {\n+    let text = \"foo\\r\\nbar\\n\\nbaz\\n\";\n+    let mut lines = text.lines();\n+    if Some(\"ok\") == lines.into_iter().next() {}\n+}\n+\n+fn lint_into_iter_on_expr_implementing_iterator() {\n+    let text = \"foo\\r\\nbar\\n\\nbaz\\n\";\n+    let mut lines = text.lines().into_iter();\n+    if Some(\"ok\") == lines.next() {}\n+}\n+\n+fn lint_into_iter_on_expr_implementing_iterator_2() {\n+    let text = \"foo\\r\\nbar\\n\\nbaz\\n\";\n+    if Some(\"ok\") == text.lines().into_iter().next() {}\n+}\n+\n+#[allow(const_item_mutation)]\n+fn lint_into_iter_on_const_implementing_iterator() {\n+    const NUMBERS: std::ops::Range<i32> = 0..10;\n+    let _ = NUMBERS.into_iter().next();\n+}\n+\n+fn lint_into_iter_on_const_implementing_iterator_2() {\n+    const NUMBERS: std::ops::Range<i32> = 0..10;\n+    let mut n = NUMBERS.into_iter();\n+    n.next();\n+}\n+\n+#[derive(Clone, Copy)]\n+struct CopiableCounter {\n+    counter: u32,\n+}\n+\n+impl Iterator for CopiableCounter {\n+    type Item = u32;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        self.counter = self.counter.wrapping_add(1);\n+        Some(self.counter)\n+    }\n+}\n+\n+fn dont_lint_into_iter_on_copy_iter() {\n+    let mut c = CopiableCounter { counter: 0 };\n+    assert_eq!(c.into_iter().next(), Some(1));\n+    assert_eq!(c.into_iter().next(), Some(1));\n+    assert_eq!(c.next(), Some(1));\n+    assert_eq!(c.next(), Some(2));\n+}\n+\n+fn dont_lint_into_iter_on_static_copy_iter() {\n+    static mut C: CopiableCounter = CopiableCounter { counter: 0 };\n+    unsafe {\n+        assert_eq!(C.into_iter().next(), Some(1));\n+        assert_eq!(C.into_iter().next(), Some(1));\n+        assert_eq!(C.next(), Some(1));\n+        assert_eq!(C.next(), Some(2));\n+    }\n }\n \n fn main() {\n     test_generic(10i32);\n     test_generic2::<i32, i32>(10i32);\n     test_questionmark().unwrap();\n     test_issue_3913().unwrap();\n-    test_issue_5833().unwrap();\n+\n+    dont_lint_into_iter_on_immutable_local_implementing_iterator_in_expr();\n+    lint_into_iter_on_mutable_local_implementing_iterator_in_expr();\n+    lint_into_iter_on_expr_implementing_iterator();\n+    lint_into_iter_on_expr_implementing_iterator_2();\n+    lint_into_iter_on_const_implementing_iterator();\n+    lint_into_iter_on_const_implementing_iterator_2();\n+    dont_lint_into_iter_on_copy_iter();\n+    dont_lint_into_iter_on_static_copy_iter();\n \n     let _: String = \"foo\".into();\n     let _: String = From::from(\"foo\");"}, {"sha": "be067c6843acea3d8c3fd3036346a25be30f571e", "filename": "tests/ui/useless_conversion.stderr", "status": "modified", "additions": 42, "deletions": 12, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/910a97d7cecf7fb11444dd4c0b2ccad70a1ece8f/tests%2Fui%2Fuseless_conversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/910a97d7cecf7fb11444dd4c0b2ccad70a1ece8f/tests%2Fui%2Fuseless_conversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion.stderr?ref=910a97d7cecf7fb11444dd4c0b2ccad70a1ece8f", "patch": "@@ -22,71 +22,101 @@ error: useless conversion to the same type: `i32`\n LL |         let _: i32 = 0i32.into();\n    |                      ^^^^^^^^^^^ help: consider removing `.into()`: `0i32`\n \n+error: useless conversion to the same type: `std::str::Lines<'_>`\n+  --> $DIR/useless_conversion.rs:45:22\n+   |\n+LL |     if Some(\"ok\") == lines.into_iter().next() {}\n+   |                      ^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `lines`\n+\n+error: useless conversion to the same type: `std::str::Lines<'_>`\n+  --> $DIR/useless_conversion.rs:50:21\n+   |\n+LL |     let mut lines = text.lines().into_iter();\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `text.lines()`\n+\n+error: useless conversion to the same type: `std::str::Lines<'_>`\n+  --> $DIR/useless_conversion.rs:56:22\n+   |\n+LL |     if Some(\"ok\") == text.lines().into_iter().next() {}\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `text.lines()`\n+\n+error: useless conversion to the same type: `std::ops::Range<i32>`\n+  --> $DIR/useless_conversion.rs:62:13\n+   |\n+LL |     let _ = NUMBERS.into_iter().next();\n+   |             ^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `NUMBERS`\n+\n+error: useless conversion to the same type: `std::ops::Range<i32>`\n+  --> $DIR/useless_conversion.rs:67:17\n+   |\n+LL |     let mut n = NUMBERS.into_iter();\n+   |                 ^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `NUMBERS`\n+\n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:61:21\n+  --> $DIR/useless_conversion.rs:128:21\n    |\n LL |     let _: String = \"foo\".to_string().into();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into()`: `\"foo\".to_string()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:62:21\n+  --> $DIR/useless_conversion.rs:129:21\n    |\n LL |     let _: String = From::from(\"foo\".to_string());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `From::from()`: `\"foo\".to_string()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:63:13\n+  --> $DIR/useless_conversion.rs:130:13\n    |\n LL |     let _ = String::from(\"foo\".to_string());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `String::from()`: `\"foo\".to_string()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:64:13\n+  --> $DIR/useless_conversion.rs:131:13\n    |\n LL |     let _ = String::from(format!(\"A: {:04}\", 123));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `String::from()`: `format!(\"A: {:04}\", 123)`\n \n error: useless conversion to the same type: `std::str::Lines<'_>`\n-  --> $DIR/useless_conversion.rs:65:13\n+  --> $DIR/useless_conversion.rs:132:13\n    |\n LL |     let _ = \"\".lines().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `\"\".lines()`\n \n error: useless conversion to the same type: `std::vec::IntoIter<i32>`\n-  --> $DIR/useless_conversion.rs:66:13\n+  --> $DIR/useless_conversion.rs:133:13\n    |\n LL |     let _ = vec![1, 2, 3].into_iter().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `vec![1, 2, 3].into_iter()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:67:21\n+  --> $DIR/useless_conversion.rs:134:21\n    |\n LL |     let _: String = format!(\"Hello {}\", \"world\").into();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into()`: `format!(\"Hello {}\", \"world\")`\n \n error: useless conversion to the same type: `i32`\n-  --> $DIR/useless_conversion.rs:72:13\n+  --> $DIR/useless_conversion.rs:139:13\n    |\n LL |     let _ = i32::from(a + b) * 3;\n    |             ^^^^^^^^^^^^^^^^ help: consider removing `i32::from()`: `(a + b)`\n \n error: useless conversion to the same type: `Foo<'a'>`\n-  --> $DIR/useless_conversion.rs:78:23\n+  --> $DIR/useless_conversion.rs:145:23\n    |\n LL |     let _: Foo<'a'> = s2.into();\n    |                       ^^^^^^^^^ help: consider removing `.into()`: `s2`\n \n error: useless conversion to the same type: `Foo<'a'>`\n-  --> $DIR/useless_conversion.rs:80:13\n+  --> $DIR/useless_conversion.rs:147:13\n    |\n LL |     let _ = Foo::<'a'>::from(s3);\n    |             ^^^^^^^^^^^^^^^^^^^^ help: consider removing `Foo::<'a'>::from()`: `s3`\n \n error: useless conversion to the same type: `std::vec::IntoIter<Foo<'a'>>`\n-  --> $DIR/useless_conversion.rs:82:13\n+  --> $DIR/useless_conversion.rs:149:13\n    |\n LL |     let _ = vec![s4, s4, s4].into_iter().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `vec![s4, s4, s4].into_iter()`\n \n-error: aborting due to 14 previous errors\n+error: aborting due to 19 previous errors\n "}]}