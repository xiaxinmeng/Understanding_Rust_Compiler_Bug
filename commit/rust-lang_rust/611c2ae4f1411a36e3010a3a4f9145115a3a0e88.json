{"sha": "611c2ae4f1411a36e3010a3a4f9145115a3a0e88", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxMWMyYWU0ZjE0MTFhMzZlMzAxMGEzYTRmOTE0NTExNWEzYTBlODg=", "commit": {"author": {"name": "Tom Lee", "email": "github@tomlee.co", "date": "2014-05-11T04:30:36Z"}, "committer": {"name": "Tom Lee", "email": "github@tomlee.co", "date": "2014-05-13T04:41:48Z"}, "message": "Try to parse TcpStream::connect 'host' parameter as an IP.\n\nFall back to get_host_addresses to try a DNS lookup if we can't\nparse it as an IP address.", "tree": {"sha": "305cc9a91a14ea77a4f6e91bf98187046ed9c317", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/305cc9a91a14ea77a4f6e91bf98187046ed9c317"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/611c2ae4f1411a36e3010a3a4f9145115a3a0e88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/611c2ae4f1411a36e3010a3a4f9145115a3a0e88", "html_url": "https://github.com/rust-lang/rust/commit/611c2ae4f1411a36e3010a3a4f9145115a3a0e88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/611c2ae4f1411a36e3010a3a4f9145115a3a0e88/comments", "author": {"login": "thomaslee", "id": 93216, "node_id": "MDQ6VXNlcjkzMjE2", "avatar_url": "https://avatars.githubusercontent.com/u/93216?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomaslee", "html_url": "https://github.com/thomaslee", "followers_url": "https://api.github.com/users/thomaslee/followers", "following_url": "https://api.github.com/users/thomaslee/following{/other_user}", "gists_url": "https://api.github.com/users/thomaslee/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomaslee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomaslee/subscriptions", "organizations_url": "https://api.github.com/users/thomaslee/orgs", "repos_url": "https://api.github.com/users/thomaslee/repos", "events_url": "https://api.github.com/users/thomaslee/events{/privacy}", "received_events_url": "https://api.github.com/users/thomaslee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomaslee", "id": 93216, "node_id": "MDQ6VXNlcjkzMjE2", "avatar_url": "https://avatars.githubusercontent.com/u/93216?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomaslee", "html_url": "https://github.com/thomaslee", "followers_url": "https://api.github.com/users/thomaslee/followers", "following_url": "https://api.github.com/users/thomaslee/following{/other_user}", "gists_url": "https://api.github.com/users/thomaslee/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomaslee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomaslee/subscriptions", "organizations_url": "https://api.github.com/users/thomaslee/orgs", "repos_url": "https://api.github.com/users/thomaslee/repos", "events_url": "https://api.github.com/users/thomaslee/events{/privacy}", "received_events_url": "https://api.github.com/users/thomaslee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a57889a58012a53146de7ba54e234a025a9b30c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a57889a58012a53146de7ba54e234a025a9b30c4", "html_url": "https://github.com/rust-lang/rust/commit/a57889a58012a53146de7ba54e234a025a9b30c4"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "42db3939e7d1672fb4417c83f2bd695783791060", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/611c2ae4f1411a36e3010a3a4f9145115a3a0e88/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/611c2ae4f1411a36e3010a3a4f9145115a3a0e88/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=611c2ae4f1411a36e3010a3a4f9145115a3a0e88", "patch": "@@ -63,7 +63,10 @@ impl TcpStream {\n     /// `host` can be a hostname or IP address string. If no error is\n     /// encountered, then `Ok(stream)` is returned.\n     pub fn connect(host: &str, port: u16) -> IoResult<TcpStream> {\n-        let addresses = try!(get_host_addresses(host));\n+        let addresses = match FromStr::from_str(host) {\n+            Some(addr) => vec!(addr),\n+            None => try!(get_host_addresses(host))\n+        };\n         let mut err = IoError{\n             kind: ConnectionFailed,\n             desc: \"no addresses found for hostname\","}, {"sha": "f1a609b258498351fe1f7b3a8accbcb4121af889", "filename": "src/test/run-pass/tcp-stress.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/611c2ae4f1411a36e3010a3a4f9145115a3a0e88/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/611c2ae4f1411a36e3010a3a4f9145115a3a0e88/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-stress.rs?ref=611c2ae4f1411a36e3010a3a4f9145115a3a0e88", "patch": "@@ -37,11 +37,9 @@ fn main() {\n         unsafe { libc::exit(1) }\n     });\n \n-    let host = \"127.0.0.1\";\n-    let port = 0;\n     let (tx, rx) = channel();\n     spawn(proc() {\n-        let mut listener = TcpListener::bind(host, port).unwrap();\n+        let mut listener = TcpListener::bind(\"127.0.0.1\", 0).unwrap();\n         tx.send(listener.socket_name().unwrap());\n         let mut acceptor = listener.listen();\n         loop {\n@@ -57,15 +55,15 @@ fn main() {\n         }\n     });\n     let addr = rx.recv();\n-    let host = addr.ip.to_str();\n-    let port = addr.port;\n \n     let (tx, rx) = channel();\n     for _ in range(0, 1000) {\n         let tx = tx.clone();\n         let mut builder = TaskBuilder::new();\n         builder.opts.stack_size = Some(32 * 1024);\n         builder.spawn(proc() {\n+            let host = addr.ip.to_str();\n+            let port = addr.port;\n             match TcpStream::connect(host, port) {\n                 Ok(stream) => {\n                     let mut stream = stream;"}]}