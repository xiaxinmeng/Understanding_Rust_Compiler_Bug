{"sha": "c717721c1b9e076739b4fbf44a83cc9c77008853", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MTc3MjFjMWI5ZTA3NjczOWI0ZmJmNDRhODNjYzljNzcwMDg4NTM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-08T10:51:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-08T10:51:14Z"}, "message": "Rollup merge of #69599 - Centril:typeck-tweak-wording, r=davidtwco\n\ncheck_binding_alt_eq_ty: improve precision wrt. `if let`\n\nFollow up to https://github.com/rust-lang/rust/pull/69452 -- this tweaks the `check_binding_alt_eq_ty` logic wrt. wording so that `if let` doesn't include \"in this arm\" (because there can only ever be one arm).\n\nr? @estebank", "tree": {"sha": "c51add7e83e5cb4590d76d36018ee8fbb87d571d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c51add7e83e5cb4590d76d36018ee8fbb87d571d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c717721c1b9e076739b4fbf44a83cc9c77008853", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeZM4iCRBK7hj4Ov3rIwAAdHIIAH2Ylv7BWjLvkAVW4Gajxq3c\niXGDaXMpTv7NIDclAfuvhX5h0ry1l88Nntz8mtEaJ3lnwYbGzPyhuV0D4eByUjK0\nulwzvn8E1tKYBSDBhVmJPeRIpgSHknSNDxjSb9/4Y6mEFg7/tkuk+p6W/sgZzFHW\nrn3H+yRajcdOJ/0ycMxsVrx5O1bdoppf2zRTmeN07ic6DkI9oQ+9z3Pu//HxEq9U\n2NIaURvNY5rdlSy0nL5xhncb9SJ5M0kV8k3v44Cp/+qkKuSsi6kRKCFYn55SMU6e\nDNKSMrQnX79g21LTB5agZkGWo1NTgT6Z7N4KLhrSsB8L6sVXJPrXXwLIrgzww60=\n=KpAP\n-----END PGP SIGNATURE-----\n", "payload": "tree c51add7e83e5cb4590d76d36018ee8fbb87d571d\nparent d4860fcff30b377fdfe8c7427cd904ad396d44a3\nparent 2746e12948ee4d152f8d8acfb5873f970effe501\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1583664674 +0100\ncommitter GitHub <noreply@github.com> 1583664674 +0100\n\nRollup merge of #69599 - Centril:typeck-tweak-wording, r=davidtwco\n\ncheck_binding_alt_eq_ty: improve precision wrt. `if let`\n\nFollow up to https://github.com/rust-lang/rust/pull/69452 -- this tweaks the `check_binding_alt_eq_ty` logic wrt. wording so that `if let` doesn't include \"in this arm\" (because there can only ever be one arm).\n\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c717721c1b9e076739b4fbf44a83cc9c77008853", "html_url": "https://github.com/rust-lang/rust/commit/c717721c1b9e076739b4fbf44a83cc9c77008853", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c717721c1b9e076739b4fbf44a83cc9c77008853/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4860fcff30b377fdfe8c7427cd904ad396d44a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4860fcff30b377fdfe8c7427cd904ad396d44a3", "html_url": "https://github.com/rust-lang/rust/commit/d4860fcff30b377fdfe8c7427cd904ad396d44a3"}, {"sha": "2746e12948ee4d152f8d8acfb5873f970effe501", "url": "https://api.github.com/repos/rust-lang/rust/commits/2746e12948ee4d152f8d8acfb5873f970effe501", "html_url": "https://github.com/rust-lang/rust/commit/2746e12948ee4d152f8d8acfb5873f970effe501"}], "stats": {"total": 28, "additions": 18, "deletions": 10}, "files": [{"sha": "84854dff85165b78a44597ee1b6f001cd5b716db", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c717721c1b9e076739b4fbf44a83cc9c77008853/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c717721c1b9e076739b4fbf44a83cc9c77008853/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=c717721c1b9e076739b4fbf44a83cc9c77008853", "patch": "@@ -577,8 +577,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let var_ty = self.resolve_vars_with_obligations(var_ty);\n             let msg = format!(\"first introduced with type `{}` here\", var_ty);\n             err.span_label(hir.span(var_id), msg);\n-            let in_arm = hir.parent_iter(var_id).any(|(_, n)| matches!(n, hir::Node::Arm(..)));\n-            let pre = if in_arm { \"in the same arm, \" } else { \"\" };\n+            let in_match = hir.parent_iter(var_id).any(|(_, n)| {\n+                matches!(\n+                    n,\n+                    hir::Node::Expr(hir::Expr {\n+                        kind: hir::ExprKind::Match(.., hir::MatchSource::Normal),\n+                        ..\n+                    })\n+                )\n+            });\n+            let pre = if in_match { \"in the same arm, \" } else { \"\" };\n             err.note(&format!(\"{}a binding must have the same type in all alternatives\", pre));\n             err.emit();\n         }"}, {"sha": "1dabb7c975430058b2ca0c5be09f9a2b743a82d7", "filename": "src/test/ui/or-patterns/or-patterns-binding-type-mismatch.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c717721c1b9e076739b4fbf44a83cc9c77008853/src%2Ftest%2Fui%2For-patterns%2For-patterns-binding-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c717721c1b9e076739b4fbf44a83cc9c77008853/src%2Ftest%2Fui%2For-patterns%2For-patterns-binding-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-binding-type-mismatch.stderr?ref=c717721c1b9e076739b4fbf44a83cc9c77008853", "patch": "@@ -101,7 +101,7 @@ LL |     if let Blah::A(_, x, y) | Blah::B(x, y) = Blah::A(1, 1, 2) {\n    |                          |               expected `usize`, found `isize`\n    |                          first introduced with type `usize` here\n    |\n-   = note: in the same arm, a binding must have the same type in all alternatives\n+   = note: a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/or-patterns-binding-type-mismatch.rs:38:47\n@@ -112,7 +112,7 @@ LL |     if let Some(Blah::A(_, x, y) | Blah::B(x, y)) = Some(Blah::A(1, 1, 2))\n    |                               |               expected `usize`, found `isize`\n    |                               first introduced with type `usize` here\n    |\n-   = note: in the same arm, a binding must have the same type in all alternatives\n+   = note: a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/or-patterns-binding-type-mismatch.rs:42:22\n@@ -123,7 +123,7 @@ LL |     if let (x, y) | (y, x) = (0u8, 1u16) {\n    |                |     expected `u16`, found `u8`\n    |                first introduced with type `u16` here\n    |\n-   = note: in the same arm, a binding must have the same type in all alternatives\n+   = note: a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/or-patterns-binding-type-mismatch.rs:42:25\n@@ -134,7 +134,7 @@ LL |     if let (x, y) | (y, x) = (0u8, 1u16) {\n    |             |           expected `u8`, found `u16`\n    |             first introduced with type `u8` here\n    |\n-   = note: in the same arm, a binding must have the same type in all alternatives\n+   = note: a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/or-patterns-binding-type-mismatch.rs:47:44\n@@ -147,7 +147,7 @@ LL |     if let Some((x, Some((y, z)))) | Some((y, Some((x, z) | (z, x))))\n LL |     = Some((0u8, Some((1u16, 2u32))))\n    |       ------------------------------- this expression has type `std::option::Option<(u8, std::option::Option<(u16, u32)>)>`\n    |\n-   = note: in the same arm, a binding must have the same type in all alternatives\n+   = note: a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/or-patterns-binding-type-mismatch.rs:47:53\n@@ -160,7 +160,7 @@ LL |     if let Some((x, Some((y, z)))) | Some((y, Some((x, z) | (z, x))))\n LL |     = Some((0u8, Some((1u16, 2u32))))\n    |       ------------------------------- this expression has type `std::option::Option<(u8, std::option::Option<(u16, u32)>)>`\n    |\n-   = note: in the same arm, a binding must have the same type in all alternatives\n+   = note: a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/or-patterns-binding-type-mismatch.rs:47:62\n@@ -173,7 +173,7 @@ LL |     if let Some((x, Some((y, z)))) | Some((y, Some((x, z) | (z, x))))\n LL |     = Some((0u8, Some((1u16, 2u32))))\n    |       ------------------------------- this expression has type `std::option::Option<(u8, std::option::Option<(u16, u32)>)>`\n    |\n-   = note: in the same arm, a binding must have the same type in all alternatives\n+   = note: a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/or-patterns-binding-type-mismatch.rs:47:65\n@@ -184,7 +184,7 @@ LL |     if let Some((x, Some((y, z)))) | Some((y, Some((x, z) | (z, x))))\n LL |     = Some((0u8, Some((1u16, 2u32))))\n    |       ------------------------------- this expression has type `std::option::Option<(u8, std::option::Option<(u16, u32)>)>`\n    |\n-   = note: in the same arm, a binding must have the same type in all alternatives\n+   = note: a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/or-patterns-binding-type-mismatch.rs:55:39"}]}