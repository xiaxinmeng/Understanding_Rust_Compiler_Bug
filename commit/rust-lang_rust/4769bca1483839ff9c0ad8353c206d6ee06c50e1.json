{"sha": "4769bca1483839ff9c0ad8353c206d6ee06c50e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3NjliY2ExNDgzODM5ZmY5YzBhZDgzNTNjMjA2ZDZlZTA2YzUwZTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-29T18:17:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-29T18:17:00Z"}, "message": "auto merge of #18282 : pczarn/rust/regex-parse, r=burntsushi\n\nFixes #18034\r\n\r\n3 bugs fixed.", "tree": {"sha": "434feb68c66c918723602aca1f7c3706faee9907", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/434feb68c66c918723602aca1f7c3706faee9907"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4769bca1483839ff9c0ad8353c206d6ee06c50e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4769bca1483839ff9c0ad8353c206d6ee06c50e1", "html_url": "https://github.com/rust-lang/rust/commit/4769bca1483839ff9c0ad8353c206d6ee06c50e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4769bca1483839ff9c0ad8353c206d6ee06c50e1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd7113609c17cc31fee4b54d954e71e01af3bcc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd7113609c17cc31fee4b54d954e71e01af3bcc9", "html_url": "https://github.com/rust-lang/rust/commit/dd7113609c17cc31fee4b54d954e71e01af3bcc9"}, {"sha": "f21977318112a1b7491bbf462dfefbd8ec14743e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f21977318112a1b7491bbf462dfefbd8ec14743e", "html_url": "https://github.com/rust-lang/rust/commit/f21977318112a1b7491bbf462dfefbd8ec14743e"}], "stats": {"total": 79, "additions": 55, "deletions": 24}, "files": [{"sha": "35583be372cb34f65ae86cb62b33f5a0d916114c", "filename": "src/libregex/parse.rs", "status": "modified", "additions": 27, "deletions": 24, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4769bca1483839ff9c0ad8353c206d6ee06c50e1/src%2Flibregex%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4769bca1483839ff9c0ad8353c206d6ee06c50e1/src%2Flibregex%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fparse.rs?ref=4769bca1483839ff9c0ad8353c206d6ee06c50e1", "patch": "@@ -374,16 +374,12 @@ impl<'a> Parser<'a> {\n         let mut ranges: Vec<(char, char)> = vec!();\n         let mut alts: Vec<Ast> = vec!();\n \n-        if self.peek_is(1, ']') {\n-            try!(self.expect(']'))\n-            ranges.push((']', ']'))\n-        }\n         while self.peek_is(1, '-') {\n-            try!(self.expect('-'))\n+            try!(self.expect('-'));\n             ranges.push(('-', '-'))\n         }\n         loop {\n-            try!(self.noteof(\"a closing ']' or a non-empty character class)\"))\n+            try!(self.noteof(\"a closing ']' or a non-empty character class)\"));\n             let mut c = self.cur();\n             match c {\n                 '[' =>\n@@ -411,10 +407,7 @@ impl<'a> Parser<'a> {\n                         ast => fail!(\"Unexpected AST item '{}'\", ast),\n                     }\n                 }\n-                _ => {},\n-            }\n-            match c {\n-                ']' => {\n+                ']' if ranges.len() > 0 || alts.len() > 0 => {\n                     if ranges.len() > 0 {\n                         let flags = negated | (self.flags & FLAG_NOCASE);\n                         let mut ast = AstClass(combine_ranges(ranges), flags);\n@@ -431,22 +424,32 @@ impl<'a> Parser<'a> {\n                     }\n                     return Ok(())\n                 }\n-                c => {\n-                    if self.peek_is(1, '-') && !self.peek_is(2, ']') {\n-                        try!(self.expect('-'))\n-                        try!(self.noteof(\"not a ']'\"))\n-                        let c2 = self.cur();\n-                        if c2 < c {\n-                            return self.err(format!(\"Invalid character class \\\n-                                                     range '{}-{}'\",\n-                                                    c,\n-                                                    c2).as_slice())\n-                        }\n-                        ranges.push((c, self.cur()))\n-                    } else {\n-                        ranges.push((c, c))\n+                _ => {}\n+            }\n+\n+            if self.peek_is(1, '-') && !self.peek_is(2, ']') {\n+                try!(self.expect('-'));\n+                // The regex can't end here.\n+                try!(self.noteof(\"not a ']'\"));\n+                // End the range with a single character or character escape.\n+                let mut c2 = self.cur();\n+                if c2 == '\\\\' {\n+                    match try!(self.parse_escape()) {\n+                        Literal(c3, _) => c2 = c3, // allow literal escapes below\n+                        ast =>\n+                            return self.err(format!(\"Expected a literal, but got {}.\",\n+                                                    ast).as_slice()),\n                     }\n                 }\n+                if c2 < c {\n+                    return self.err(format!(\"Invalid character class \\\n+                                             range '{}-{}'\",\n+                                            c,\n+                                            c2).as_slice())\n+                }\n+                ranges.push((c, self.cur()))\n+            } else {\n+                ranges.push((c, c))\n             }\n         }\n     }"}, {"sha": "06f7db274189d74680d0e4c559ad831b78c2b56c", "filename": "src/libregex/test/tests.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4769bca1483839ff9c0ad8353c206d6ee06c50e1/src%2Flibregex%2Ftest%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4769bca1483839ff9c0ad8353c206d6ee06c50e1/src%2Flibregex%2Ftest%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Ftest%2Ftests.rs?ref=4769bca1483839ff9c0ad8353c206d6ee06c50e1", "patch": "@@ -43,6 +43,30 @@ fn empty_regex_nonempty_match() {\n     assert_eq!(ms, vec![(0, 0), (1, 1), (2, 2), (3, 3)]);\n }\n \n+#[test]\n+fn quoted_bracket_set() {\n+    let re = regex!(r\"([\\x{5b}\\x{5d}])\");\n+    let ms = re.find_iter(\"[]\").collect::<Vec<(uint, uint)>>();\n+    assert_eq!(ms, vec![(0, 1), (1, 2)]);\n+    let re = regex!(r\"([\\[\\]])\");\n+    let ms = re.find_iter(\"[]\").collect::<Vec<(uint, uint)>>();\n+    assert_eq!(ms, vec![(0, 1), (1, 2)]);\n+}\n+\n+#[test]\n+fn first_range_starts_with_left_bracket() {\n+    let re = regex!(r\"([[-z])\");\n+    let ms = re.find_iter(\"[]\").collect::<Vec<(uint, uint)>>();\n+    assert_eq!(ms, vec![(0, 1), (1, 2)]);\n+}\n+\n+#[test]\n+fn range_ends_with_escape() {\n+    let re = regex!(r\"([\\[-\\x{5d}])\");\n+    let ms = re.find_iter(\"[]\").collect::<Vec<(uint, uint)>>();\n+    assert_eq!(ms, vec![(0, 1), (1, 2)]);\n+}\n+\n macro_rules! replace(\n     ($name:ident, $which:ident, $re:expr,\n      $search:expr, $replace:expr, $result:expr) => (\n@@ -114,6 +138,10 @@ noparse!(fail_double_neg, \"(?-i-i)\")\n noparse!(fail_neg_empty, \"(?i-)\")\n noparse!(fail_empty_group, \"()\")\n noparse!(fail_dupe_named, \"(?P<a>.)(?P<a>.)\")\n+noparse!(fail_range_end_no_class, \"[a-[:lower:]]\")\n+noparse!(fail_range_end_no_begin, r\"[a-\\A]\")\n+noparse!(fail_range_end_no_end, r\"[a-\\z]\")\n+noparse!(fail_range_end_no_boundary, r\"[a-\\b]\")\n \n macro_rules! mat(\n     ($name:ident, $re:expr, $text:expr, $($loc:tt)+) => ("}]}