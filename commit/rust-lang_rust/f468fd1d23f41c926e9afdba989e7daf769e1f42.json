{"sha": "f468fd1d23f41c926e9afdba989e7daf769e1f42", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0NjhmZDFkMjNmNDFjOTI2ZTlhZmRiYTk4OWU3ZGFmNzY5ZTFmNDI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-19T01:49:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-19T01:49:00Z"}, "message": "Rollup merge of #81496 - guswynn:expected_async_block, r=oli-obk\n\nname async generators something more human friendly in type error diagnostic\n\nfixes #81457\n\nSome details:\n\n1. I opted to load the generator kind from the hir in TyCategory. I also use 1 impl in the hir for the descr\n2. I named both the source of the future, in addition to the general type (`future`), not sure what is preferred\n3. I am not sure what is required to make sure \"generator\" is not referred to anywhere. A brief `rg \"\\\"generator\\\"\" showed me that most diagnostics correctly distinguish from generators and async generator, but the `descr` of `DefKind` is pretty general (not sure how thats used)\n4. should the descr impl of AsyncGeneratorKind use its display impl instead of copying the string?", "tree": {"sha": "169694732e40e764bb6c48fb866e9a189290acb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/169694732e40e764bb6c48fb866e9a189290acb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f468fd1d23f41c926e9afdba989e7daf769e1f42", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgLxkMCRBK7hj4Ov3rIwAAdHIIACFo3PwEb8mwmqq7bEWOtHtA\nWICfSEnMaxaeg7VJl42myA83RJhIt7QPXAC31KV7LNT4OX/lgtP/tn7Gn9tDx48i\nd6rggilPoJqndGrf9g7gfdJxd2rsHxJKYEySd0HoyKv9Ldq4kZGo0L78//bRN3Yk\nNC3Lo9mIje7xFv12BfHc2+gKTA4vnwe4O7guAkDnI0xU6hFHjhKX8ti5FRzKlsV8\nNWErlQFNm6r/xRU4fbxPWXCQvt23tv2ja7gXsPlDZu6tn0TOxd40YavHWgR4ilxQ\nVMtpk2dP7yItdtxZKJNQr9Xd/dngPAHNif3imOtvj8h3NAx7p0oHosotnc8dlMM=\n=Zdbs\n-----END PGP SIGNATURE-----\n", "payload": "tree 169694732e40e764bb6c48fb866e9a189290acb4\nparent 94ab4078da5190529dc1a22de742f01ef073204a\nparent 3e7ea401cd050320bf43f3bfcb1bfa97fc3a9b35\nauthor Dylan DPC <dylan.dpc@gmail.com> 1613699340 +0100\ncommitter GitHub <noreply@github.com> 1613699340 +0100\n\nRollup merge of #81496 - guswynn:expected_async_block, r=oli-obk\n\nname async generators something more human friendly in type error diagnostic\n\nfixes #81457\n\nSome details:\n\n1. I opted to load the generator kind from the hir in TyCategory. I also use 1 impl in the hir for the descr\n2. I named both the source of the future, in addition to the general type (`future`), not sure what is preferred\n3. I am not sure what is required to make sure \"generator\" is not referred to anywhere. A brief `rg \"\\\"generator\\\"\" showed me that most diagnostics correctly distinguish from generators and async generator, but the `descr` of `DefKind` is pretty general (not sure how thats used)\n4. should the descr impl of AsyncGeneratorKind use its display impl instead of copying the string?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f468fd1d23f41c926e9afdba989e7daf769e1f42", "html_url": "https://github.com/rust-lang/rust/commit/f468fd1d23f41c926e9afdba989e7daf769e1f42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f468fd1d23f41c926e9afdba989e7daf769e1f42/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94ab4078da5190529dc1a22de742f01ef073204a", "url": "https://api.github.com/repos/rust-lang/rust/commits/94ab4078da5190529dc1a22de742f01ef073204a", "html_url": "https://github.com/rust-lang/rust/commit/94ab4078da5190529dc1a22de742f01ef073204a"}, {"sha": "3e7ea401cd050320bf43f3bfcb1bfa97fc3a9b35", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e7ea401cd050320bf43f3bfcb1bfa97fc3a9b35", "html_url": "https://github.com/rust-lang/rust/commit/3e7ea401cd050320bf43f3bfcb1bfa97fc3a9b35"}], "stats": {"total": 121, "additions": 104, "deletions": 17}, "files": [{"sha": "59b7266ce4841ed0d62a4f60557d6b1940782b4b", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f468fd1d23f41c926e9afdba989e7daf769e1f42/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f468fd1d23f41c926e9afdba989e7daf769e1f42/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=f468fd1d23f41c926e9afdba989e7daf769e1f42", "patch": "@@ -1,3 +1,4 @@\n+// ignore-tidy-filelength\n use crate::def::{DefKind, Namespace, Res};\n use crate::def_id::DefId;\n crate use crate::hir_id::HirId;\n@@ -1280,7 +1281,7 @@ impl Body<'hir> {\n }\n \n /// The type of source expression that caused this generator to be created.\n-#[derive(Clone, PartialEq, Eq, HashStable_Generic, Encodable, Decodable, Debug, Copy)]\n+#[derive(Clone, PartialEq, Eq, Hash, HashStable_Generic, Encodable, Decodable, Debug, Copy)]\n pub enum GeneratorKind {\n     /// An explicit `async` block or the body of an async function.\n     Async(AsyncGeneratorKind),\n@@ -1298,12 +1299,21 @@ impl fmt::Display for GeneratorKind {\n     }\n }\n \n+impl GeneratorKind {\n+    pub fn descr(&self) -> &'static str {\n+        match self {\n+            GeneratorKind::Async(ask) => ask.descr(),\n+            GeneratorKind::Gen => \"generator\",\n+        }\n+    }\n+}\n+\n /// In the case of a generator created as part of an async construct,\n /// which kind of async construct caused it to be created?\n ///\n /// This helps error messages but is also used to drive coercions in\n /// type-checking (see #60424).\n-#[derive(Clone, PartialEq, Eq, HashStable_Generic, Encodable, Decodable, Debug, Copy)]\n+#[derive(Clone, PartialEq, Eq, Hash, HashStable_Generic, Encodable, Decodable, Debug, Copy)]\n pub enum AsyncGeneratorKind {\n     /// An explicit `async` block written by the user.\n     Block,\n@@ -1325,6 +1335,16 @@ impl fmt::Display for AsyncGeneratorKind {\n     }\n }\n \n+impl AsyncGeneratorKind {\n+    pub fn descr(&self) -> &'static str {\n+        match self {\n+            AsyncGeneratorKind::Block => \"`async` block\",\n+            AsyncGeneratorKind::Closure => \"`async` closure body\",\n+            AsyncGeneratorKind::Fn => \"`async fn` body\",\n+        }\n+    }\n+}\n+\n #[derive(Copy, Clone, Debug)]\n pub enum BodyOwnerKind {\n     /// Functions and methods."}, {"sha": "9e55f7e558999db7703079092bb32d78912683d9", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f468fd1d23f41c926e9afdba989e7daf769e1f42/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f468fd1d23f41c926e9afdba989e7daf769e1f42/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=f468fd1d23f41c926e9afdba989e7daf769e1f42", "patch": "@@ -1509,7 +1509,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n         impl<'tcx> ty::fold::TypeVisitor<'tcx> for OpaqueTypesVisitor<'tcx> {\n             fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-                if let Some((kind, def_id)) = TyCategory::from_ty(t) {\n+                if let Some((kind, def_id)) = TyCategory::from_ty(self.tcx, t) {\n                     let span = self.tcx.def_span(def_id);\n                     // Avoid cluttering the output when the \"found\" and error span overlap:\n                     //\n@@ -1582,11 +1582,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         };\n         if let Some((expected, found)) = expected_found {\n             let expected_label = match exp_found {\n-                Mismatch::Variable(ef) => ef.expected.prefix_string(),\n+                Mismatch::Variable(ef) => ef.expected.prefix_string(self.tcx),\n                 Mismatch::Fixed(s) => s.into(),\n             };\n             let found_label = match exp_found {\n-                Mismatch::Variable(ef) => ef.found.prefix_string(),\n+                Mismatch::Variable(ef) => ef.found.prefix_string(self.tcx),\n                 Mismatch::Fixed(s) => s.into(),\n             };\n             let exp_found = match exp_found {\n@@ -2489,7 +2489,7 @@ impl<'tcx> ObligationCauseExt<'tcx> for ObligationCause<'tcx> {\n pub enum TyCategory {\n     Closure,\n     Opaque,\n-    Generator,\n+    Generator(hir::GeneratorKind),\n     Foreign,\n }\n \n@@ -2498,16 +2498,18 @@ impl TyCategory {\n         match self {\n             Self::Closure => \"closure\",\n             Self::Opaque => \"opaque type\",\n-            Self::Generator => \"generator\",\n+            Self::Generator(gk) => gk.descr(),\n             Self::Foreign => \"foreign type\",\n         }\n     }\n \n-    pub fn from_ty(ty: Ty<'_>) -> Option<(Self, DefId)> {\n+    pub fn from_ty(tcx: TyCtxt<'_>, ty: Ty<'_>) -> Option<(Self, DefId)> {\n         match *ty.kind() {\n             ty::Closure(def_id, _) => Some((Self::Closure, def_id)),\n             ty::Opaque(def_id, _) => Some((Self::Opaque, def_id)),\n-            ty::Generator(def_id, ..) => Some((Self::Generator, def_id)),\n+            ty::Generator(def_id, ..) => {\n+                Some((Self::Generator(tcx.generator_kind(def_id).unwrap()), def_id))\n+            }\n             ty::Foreign(def_id) => Some((Self::Foreign, def_id)),\n             _ => None,\n         }"}, {"sha": "d533e267fd702856ad1ca3a3e467fd0cd0fc8274", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f468fd1d23f41c926e9afdba989e7daf769e1f42/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f468fd1d23f41c926e9afdba989e7daf769e1f42/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=f468fd1d23f41c926e9afdba989e7daf769e1f42", "patch": "@@ -383,7 +383,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 InferenceDiagnosticsData {\n                     name: s,\n                     span: None,\n-                    kind: UnderspecifiedArgKind::Type { prefix: ty.prefix_string() },\n+                    kind: UnderspecifiedArgKind::Type { prefix: ty.prefix_string(self.tcx) },\n                     parent: None,\n                 }\n             }"}, {"sha": "bf315c81588a902ceec75e7987964ba0af7ed0a6", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f468fd1d23f41c926e9afdba989e7daf769e1f42/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f468fd1d23f41c926e9afdba989e7daf769e1f42/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=f468fd1d23f41c926e9afdba989e7daf769e1f42", "patch": "@@ -270,7 +270,7 @@ impl<'tcx> ty::TyS<'tcx> {\n                 }\n             }\n             ty::Closure(..) => \"closure\".into(),\n-            ty::Generator(..) => \"generator\".into(),\n+            ty::Generator(def_id, ..) => tcx.generator_kind(def_id).unwrap().descr().into(),\n             ty::GeneratorWitness(..) => \"generator witness\".into(),\n             ty::Tuple(..) => \"tuple\".into(),\n             ty::Infer(ty::TyVar(_)) => \"inferred type\".into(),\n@@ -288,7 +288,7 @@ impl<'tcx> ty::TyS<'tcx> {\n         }\n     }\n \n-    pub fn prefix_string(&self) -> Cow<'static, str> {\n+    pub fn prefix_string(&self, tcx: TyCtxt<'_>) -> Cow<'static, str> {\n         match *self.kind() {\n             ty::Infer(_)\n             | ty::Error(_)\n@@ -314,7 +314,7 @@ impl<'tcx> ty::TyS<'tcx> {\n             ty::FnPtr(_) => \"fn pointer\".into(),\n             ty::Dynamic(..) => \"trait object\".into(),\n             ty::Closure(..) => \"closure\".into(),\n-            ty::Generator(..) => \"generator\".into(),\n+            ty::Generator(def_id, ..) => tcx.generator_kind(def_id).unwrap().descr().into(),\n             ty::GeneratorWitness(..) => \"generator witness\".into(),\n             ty::Tuple(..) => \"tuple\".into(),\n             ty::Placeholder(..) => \"higher-ranked type\".into(),"}, {"sha": "bfb5ebcea58b114bf58f11bf5c8d881e129c4422", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f468fd1d23f41c926e9afdba989e7daf769e1f42/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f468fd1d23f41c926e9afdba989e7daf769e1f42/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=f468fd1d23f41c926e9afdba989e7daf769e1f42", "patch": "@@ -1368,8 +1368,8 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     Some(t) => Some(t),\n                     None => {\n                         let ty = parent_trait_ref.skip_binder().self_ty();\n-                        let span =\n-                            TyCategory::from_ty(ty).map(|(_, def_id)| self.tcx.def_span(def_id));\n+                        let span = TyCategory::from_ty(self.tcx, ty)\n+                            .map(|(_, def_id)| self.tcx.def_span(def_id));\n                         Some((ty.to_string(), span))\n                     }\n                 }"}, {"sha": "721e8ec54f05f273ae53712951d84e97b97950a6", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f468fd1d23f41c926e9afdba989e7daf769e1f42/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f468fd1d23f41c926e9afdba989e7daf769e1f42/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=f468fd1d23f41c926e9afdba989e7daf769e1f42", "patch": "@@ -390,7 +390,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             \"no {} named `{}` found for {} `{}` in the current scope\",\n                             item_kind,\n                             item_name,\n-                            actual.prefix_string(),\n+                            actual.prefix_string(self.tcx),\n                             ty_str,\n                         );\n                         if let Mode::MethodCall = mode {\n@@ -732,7 +732,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             .map(|(_, path)| path)\n                             .collect::<Vec<_>>()\n                             .join(\"\\n\");\n-                        let actual_prefix = actual.prefix_string();\n+                        let actual_prefix = actual.prefix_string(self.tcx);\n                         err.set_primary_message(&format!(\n                             \"the {item_kind} `{item_name}` exists for {actual_prefix} `{ty_str}`, but its trait bounds were not satisfied\"\n                         ));"}, {"sha": "5008120166711006120736ef2cfb112304cc09d7", "filename": "src/test/ui/async-await/generator-desc.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f468fd1d23f41c926e9afdba989e7daf769e1f42/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f468fd1d23f41c926e9afdba989e7daf769e1f42/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.rs?ref=f468fd1d23f41c926e9afdba989e7daf769e1f42", "patch": "@@ -0,0 +1,16 @@\n+// edition:2018\n+#![feature(async_closure)]\n+use std::future::Future;\n+\n+async fn one() {}\n+async fn two() {}\n+\n+fn fun<F: Future<Output = ()>>(f1: F, f2: F) {}\n+fn main() {\n+    fun(async {}, async {});\n+    //~^ ERROR mismatched types\n+    fun(one(), two());\n+    //~^ ERROR mismatched types\n+    fun((async || {})(), (async || {})());\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "b85926c7a03c0012d030cc097b4d33dec85e414a", "filename": "src/test/ui/async-await/generator-desc.stderr", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/f468fd1d23f41c926e9afdba989e7daf769e1f42/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f468fd1d23f41c926e9afdba989e7daf769e1f42/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr?ref=f468fd1d23f41c926e9afdba989e7daf769e1f42", "patch": "@@ -0,0 +1,49 @@\n+error[E0308]: mismatched types\n+  --> $DIR/generator-desc.rs:10:25\n+   |\n+LL |     fun(async {}, async {});\n+   |               --        ^^ expected `async` block, found a different `async` block\n+   |               |\n+   |               the expected `async` block\n+   |\n+   = note: expected `async` block `[static generator@$DIR/generator-desc.rs:10:15: 10:17]`\n+              found `async` block `[static generator@$DIR/generator-desc.rs:10:25: 10:27]`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/generator-desc.rs:12:16\n+   |\n+LL | async fn one() {}\n+   |                - the `Output` of this `async fn`'s expected opaque type\n+LL | async fn two() {}\n+   |                - the `Output` of this `async fn`'s found opaque type\n+...\n+LL |     fun(one(), two());\n+   |                ^^^^^ expected opaque type, found a different opaque type\n+   |\n+   = note: expected opaque type `impl Future` (opaque type at <$DIR/generator-desc.rs:5:16>)\n+              found opaque type `impl Future` (opaque type at <$DIR/generator-desc.rs:6:16>)\n+   = help: consider `await`ing on both `Future`s\n+   = note: distinct uses of `impl Trait` result in different opaque types\n+\n+error[E0308]: mismatched types\n+  --> $DIR/generator-desc.rs:14:26\n+   |\n+LL |     fun((async || {})(), (async || {})());\n+   |                   --     ^^^^^^^^^^^^^^^ expected `async` closure body, found a different `async` closure body\n+   |                   |\n+   |                   the expected `async` closure body\n+   | \n+  ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n+   |\n+LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n+   |                                           -------------------------------\n+   |                                           |\n+   |                                           the expected opaque type\n+   |                                           the found opaque type\n+   |\n+   = note: expected opaque type `impl Future` (`async` closure body)\n+              found opaque type `impl Future` (`async` closure body)\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}