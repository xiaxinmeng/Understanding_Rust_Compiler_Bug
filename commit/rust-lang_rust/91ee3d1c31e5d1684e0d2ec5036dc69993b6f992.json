{"sha": "91ee3d1c31e5d1684e0d2ec5036dc69993b6f992", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxZWUzZDFjMzFlNWQxNjg0ZTBkMmVjNTAzNmRjNjk5OTNiNmY5OTI=", "commit": {"author": {"name": "Bryan Donlan", "email": "bdonlan@amazon.com", "date": "2019-10-24T20:09:35Z"}, "committer": {"name": "Bryan Donlan", "email": "bdonlan@amazon.com", "date": "2019-11-21T18:33:03Z"}, "message": "Stabilize `std::{rc,sync}::Weak::{weak_count, strong_count}`\n\nCloses: #57977", "tree": {"sha": "875dd2c18ad2daec88cb21d42f8ee74a549323db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/875dd2c18ad2daec88cb21d42f8ee74a549323db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91ee3d1c31e5d1684e0d2ec5036dc69993b6f992", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91ee3d1c31e5d1684e0d2ec5036dc69993b6f992", "html_url": "https://github.com/rust-lang/rust/commit/91ee3d1c31e5d1684e0d2ec5036dc69993b6f992", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91ee3d1c31e5d1684e0d2ec5036dc69993b6f992/comments", "author": null, "committer": null, "parents": [{"sha": "35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "html_url": "https://github.com/rust-lang/rust/commit/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "12f86bf880f13e05f72efbe0e0ff51220df6622f", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91ee3d1c31e5d1684e0d2ec5036dc69993b6f992/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91ee3d1c31e5d1684e0d2ec5036dc69993b6f992/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=91ee3d1c31e5d1684e0d2ec5036dc69993b6f992", "patch": "@@ -1803,7 +1803,7 @@ impl<T: ?Sized> Weak<T> {\n     /// If `self` was created using [`Weak::new`], this will return 0.\n     ///\n     /// [`Weak::new`]: #method.new\n-    #[unstable(feature = \"weak_counts\", issue = \"57977\")]\n+    #[stable(feature = \"weak_counts\", since = \"1.40.0\")]\n     pub fn strong_count(&self) -> usize {\n         if let Some(inner) = self.inner() {\n             inner.strong()\n@@ -1819,7 +1819,7 @@ impl<T: ?Sized> Weak<T> {\n     /// allocation.\n     ///\n     /// [`Weak::new`]: #method.new\n-    #[unstable(feature = \"weak_counts\", issue = \"57977\")]\n+    #[stable(feature = \"weak_counts\", since = \"1.40.0\")]\n     pub fn weak_count(&self) -> Option<usize> {\n         self.inner().map(|inner| {\n             if inner.strong() > 0 {"}, {"sha": "3f86dfb469eabd1ab5723f1f41121af2276193ef", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91ee3d1c31e5d1684e0d2ec5036dc69993b6f992/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91ee3d1c31e5d1684e0d2ec5036dc69993b6f992/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=91ee3d1c31e5d1684e0d2ec5036dc69993b6f992", "patch": "@@ -1496,7 +1496,7 @@ impl<T: ?Sized> Weak<T> {\n     /// If `self` was created using [`Weak::new`], this will return 0.\n     ///\n     /// [`Weak::new`]: #method.new\n-    #[unstable(feature = \"weak_counts\", issue = \"57977\")]\n+    #[stable(feature = \"weak_counts\", since = \"1.40.0\")]\n     pub fn strong_count(&self) -> usize {\n         if let Some(inner) = self.inner() {\n             inner.strong.load(SeqCst)\n@@ -1519,7 +1519,7 @@ impl<T: ?Sized> Weak<T> {\n     /// `Weak`s pointing to the same allocation.\n     ///\n     /// [`Weak::new`]: #method.new\n-    #[unstable(feature = \"weak_counts\", issue = \"57977\")]\n+    #[stable(feature = \"weak_counts\", since = \"1.40.0\")]\n     pub fn weak_count(&self) -> Option<usize> {\n         // Due to the implicit weak pointer added when any strong pointers are\n         // around, we cannot implement `weak_count` correctly since it"}]}