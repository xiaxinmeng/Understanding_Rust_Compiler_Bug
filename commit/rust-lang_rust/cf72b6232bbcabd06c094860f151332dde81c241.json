{"sha": "cf72b6232bbcabd06c094860f151332dde81c241", "node_id": "C_kwDOAAsO6NoAKGNmNzJiNjIzMmJiY2FiZDA2YzA5NDg2MGYxNTEzMzJkZGU4MWMyNDE", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-04-19T15:54:01Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-04-20T06:50:17Z"}, "message": "Resolve `$crate` in derive paths", "tree": {"sha": "0f597ec3aae908168e81a9d63fcd64cf03e98598", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f597ec3aae908168e81a9d63fcd64cf03e98598"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf72b6232bbcabd06c094860f151332dde81c241", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmRA4KoACgkQ4laYqTBY\nYXHF5hAAjQ7t+cWImcJgsJcIw2S2KUEFy624bi/kaVbgzBtB/4A29CKrtueDgdIs\nyIK0kEFo9iDONVXuYd9+Opd6pgh8cyl84VBgMQRQ1wGNA96fgwghRFg/q9nFODwn\n8eFFddclT4JwgsgBJtEg7lFz7O5d32xCADTLGjbGjq5R3QM2CSQ144Us71D24Vb1\n0u18GPTqDVEzav18NgXdOENwKqfq5QZ7L4EL70z35ccvrUWK2rf7vyK0E+aRPN+D\nDZ6p/jWXNCZ/wU1jeeZR7NcICZNKQ26k749dVih9s4fv61yDlKJGue9XzU3sk/HQ\njY2ml5Q0z+CM566pfd1uGIpfCZftBUXSE3t9VyrGFlkR4qudwLlZdv2um/PvYXLI\nwVONPbNVgKCJ+/pFonE6vy2OQ/1pqbeiUsN/Rm7kyiOUaPp4RO+aO/fZ7ezGUGLe\nK0VmxGE9UT2OOFRRA/LY/24g/ezDA8dZYG81zg3+QoS6lGZ3hjGWu6RHl0GmiJb2\nisfQ6VhFOLuIoh5lvf1LFMYkRe0UOedBVDJgxYh7CQiYEQJ9FUJ7ODqvdrF/jB0r\nMdPf92ZL1HcYcu9qpybhhzSgaWb7ZGGkoxd5EKlXDWwWuW6CEgkkM1YZIYl3H0Ww\nqNU8/H/sBjITfPTz6YquTg6ZUztLwSkecxpLMk2IK2NXZEiFEWI=\n=HV7f\n-----END PGP SIGNATURE-----", "payload": "tree 0f597ec3aae908168e81a9d63fcd64cf03e98598\nparent 2400b36a2ed40f68a26473f69ac208ba10d98af9\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1681919641 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1681973417 +0900\n\nResolve `$crate` in derive paths\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf72b6232bbcabd06c094860f151332dde81c241", "html_url": "https://github.com/rust-lang/rust/commit/cf72b6232bbcabd06c094860f151332dde81c241", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf72b6232bbcabd06c094860f151332dde81c241/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2400b36a2ed40f68a26473f69ac208ba10d98af9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2400b36a2ed40f68a26473f69ac208ba10d98af9", "html_url": "https://github.com/rust-lang/rust/commit/2400b36a2ed40f68a26473f69ac208ba10d98af9"}], "stats": {"total": 73, "additions": 56, "deletions": 17}, "files": [{"sha": "e845cde73a2b0b30d0e38c09d8378f6ad6a749bf", "filename": "crates/hir-def/src/nameres/collector.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cf72b6232bbcabd06c094860f151332dde81c241/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf72b6232bbcabd06c094860f151332dde81c241/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs?ref=cf72b6232bbcabd06c094860f151332dde81c241", "patch": "@@ -14,6 +14,7 @@ use hir_expand::{\n     builtin_attr_macro::find_builtin_attr,\n     builtin_derive_macro::find_builtin_derive,\n     builtin_fn_macro::find_builtin_macro,\n+    hygiene::Hygiene,\n     name::{name, AsName, Name},\n     proc_macro::ProcMacroExpander,\n     ExpandResult, ExpandTo, HirFileId, InFile, MacroCallId, MacroCallKind, MacroCallLoc,\n@@ -312,13 +313,14 @@ impl DefCollector<'_> {\n                 }\n \n                 if *attr_name == hir_expand::name![feature] {\n-                    let features =\n-                        attr.parse_path_comma_token_tree().into_iter().flatten().filter_map(\n-                            |feat| match feat.segments() {\n-                                [name] => Some(name.to_smol_str()),\n-                                _ => None,\n-                            },\n-                        );\n+                    let features = attr\n+                        .parse_path_comma_token_tree(self.db.upcast(), Hygiene::new_unhygienic())\n+                        .into_iter()\n+                        .flatten()\n+                        .filter_map(|feat| match feat.segments() {\n+                            [name] => Some(name.to_smol_str()),\n+                            _ => None,\n+                        });\n                     self.def_map.unstable_features.extend(features);\n                 }\n \n@@ -1223,8 +1225,9 @@ impl DefCollector<'_> {\n                             }\n                         };\n                         let ast_id = ast_id.with_value(ast_adt_id);\n+                        let hygiene = Hygiene::new(self.db.upcast(), file_id);\n \n-                        match attr.parse_path_comma_token_tree() {\n+                        match attr.parse_path_comma_token_tree(self.db.upcast(), hygiene) {\n                             Some(derive_macros) => {\n                                 let mut len = 0;\n                                 for (idx, path) in derive_macros.enumerate() {"}, {"sha": "6ee56c9368e4006783b60acf56623b0471e639ad", "filename": "crates/hir-def/src/nameres/tests/macros.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cf72b6232bbcabd06c094860f151332dde81c241/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf72b6232bbcabd06c094860f151332dde81c241/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs?ref=cf72b6232bbcabd06c094860f151332dde81c241", "patch": "@@ -664,6 +664,29 @@ pub struct bar;\n     );\n }\n \n+#[test]\n+fn macro_dollar_crate_is_correct_in_derive_meta() {\n+    let map = compute_crate_def_map(\n+        r#\"\n+//- minicore: derive, clone\n+//- /main.rs crate:main deps:lib\n+lib::foo!();\n+\n+//- /lib.rs crate:lib\n+#[macro_export]\n+macro_rules! foo {\n+    () => {\n+        #[derive($crate::Clone)]\n+        struct S;\n+    }\n+}\n+\n+pub use core::clone::Clone;\n+\"#,\n+    );\n+    assert_eq!(map.modules[map.root].scope.impls().len(), 1);\n+}\n+\n #[test]\n fn expand_derive() {\n     let map = compute_crate_def_map("}, {"sha": "fd0254248baecc4bd30cef43c4381de1b3454324", "filename": "crates/hir-expand/src/attrs.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/cf72b6232bbcabd06c094860f151332dde81c241/crates%2Fhir-expand%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf72b6232bbcabd06c094860f151332dde81c241/crates%2Fhir-expand%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fattrs.rs?ref=cf72b6232bbcabd06c094860f151332dde81c241", "patch": "@@ -12,8 +12,7 @@ use syntax::{ast, match_ast, AstNode, SmolStr, SyntaxNode};\n use crate::{\n     db::ExpandDatabase,\n     hygiene::Hygiene,\n-    mod_path::{ModPath, PathKind},\n-    name::AsName,\n+    mod_path::ModPath,\n     tt::{self, Subtree},\n     InFile,\n };\n@@ -267,7 +266,11 @@ impl Attr {\n     }\n \n     /// Parses this attribute as a token tree consisting of comma separated paths.\n-    pub fn parse_path_comma_token_tree(&self) -> Option<impl Iterator<Item = ModPath> + '_> {\n+    pub fn parse_path_comma_token_tree<'a>(\n+        &'a self,\n+        db: &'a dyn ExpandDatabase,\n+        hygiene: Hygiene,\n+    ) -> Option<impl Iterator<Item = ModPath> + 'a> {\n         let args = self.token_tree_value()?;\n \n         if args.delimiter.kind != DelimiterKind::Parenthesis {\n@@ -276,15 +279,25 @@ impl Attr {\n         let paths = args\n             .token_trees\n             .split(|tt| matches!(tt, tt::TokenTree::Leaf(tt::Leaf::Punct(Punct { char: ',', .. }))))\n-            .filter_map(|tts| {\n+            .filter_map(move |tts| {\n                 if tts.is_empty() {\n                     return None;\n                 }\n-                let segments = tts.iter().filter_map(|tt| match tt {\n-                    tt::TokenTree::Leaf(tt::Leaf::Ident(id)) => Some(id.as_name()),\n-                    _ => None,\n-                });\n-                Some(ModPath::from_segments(PathKind::Plain, segments))\n+                // FIXME: This is necessarily a hack. It'd be nice if we could avoid allocation here.\n+                let subtree = tt::Subtree {\n+                    delimiter: tt::Delimiter::unspecified(),\n+                    token_trees: tts.into_iter().cloned().collect(),\n+                };\n+                let (parse, _) =\n+                    mbe::token_tree_to_syntax_node(&subtree, mbe::TopEntryPoint::MetaItem);\n+                let meta = ast::Meta::cast(parse.syntax_node())?;\n+                // Only simple paths are allowed.\n+                if meta.eq_token().is_some() || meta.expr().is_some() || meta.token_tree().is_some()\n+                {\n+                    return None;\n+                }\n+                let path = meta.path()?;\n+                ModPath::from_src(db, path, &hygiene)\n             });\n \n         Some(paths)"}]}