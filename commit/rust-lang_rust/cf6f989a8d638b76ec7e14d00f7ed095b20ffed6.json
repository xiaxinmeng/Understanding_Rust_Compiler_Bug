{"sha": "cf6f989a8d638b76ec7e14d00f7ed095b20ffed6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmNmY5ODlhOGQ2MzhiNzZlYzdlMTRkMDBmN2VkMDk1YjIwZmZlZDY=", "commit": {"author": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-05-06T14:39:27Z"}, "committer": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-05-31T19:03:47Z"}, "message": "Lower bool literals", "tree": {"sha": "52c47f879dd977dae318c4719d5b3846639f4f1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52c47f879dd977dae318c4719d5b3846639f4f1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf6f989a8d638b76ec7e14d00f7ed095b20ffed6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf6f989a8d638b76ec7e14d00f7ed095b20ffed6", "html_url": "https://github.com/rust-lang/rust/commit/cf6f989a8d638b76ec7e14d00f7ed095b20ffed6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf6f989a8d638b76ec7e14d00f7ed095b20ffed6/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6d77e8a35cb2ac63b877f73bdf0ea6e6a1578e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6d77e8a35cb2ac63b877f73bdf0ea6e6a1578e4", "html_url": "https://github.com/rust-lang/rust/commit/d6d77e8a35cb2ac63b877f73bdf0ea6e6a1578e4"}], "stats": {"total": 42, "additions": 29, "deletions": 13}, "files": [{"sha": "14dd736a6cb31ac7cfe6cc83b5fbaf9683607afd", "filename": "crates/hir_ty/src/diagnostics/pattern.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cf6f989a8d638b76ec7e14d00f7ed095b20ffed6/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf6f989a8d638b76ec7e14d00f7ed095b20ffed6/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fpattern.rs?ref=cf6f989a8d638b76ec7e14d00f7ed095b20ffed6", "patch": "@@ -67,6 +67,11 @@ pub enum PatKind {\n         subpattern: Pat,\n     },\n \n+    // only bool for now\n+    LiteralBool {\n+        value: bool,\n+    },\n+\n     /// An or-pattern, e.g. `p | q`.\n     /// Invariant: `pats.len() >= 2`.\n     Or {\n@@ -99,6 +104,8 @@ impl<'a> PatCtxt<'a> {\n         let kind = match self.body[pat] {\n             hir_def::expr::Pat::Wild => PatKind::Wild,\n \n+            hir_def::expr::Pat::Lit(expr) => self.lower_lit(expr),\n+\n             hir_def::expr::Pat::Path(ref path) => {\n                 return self.lower_path(pat, path);\n             }\n@@ -211,6 +218,18 @@ impl<'a> PatCtxt<'a> {\n             }\n         }\n     }\n+\n+    fn lower_lit(&mut self, expr: hir_def::expr::ExprId) -> PatKind {\n+        use hir_def::expr::{Expr, Literal::Bool};\n+\n+        match self.body[expr] {\n+            Expr::Literal(Bool(value)) => PatKind::LiteralBool { value },\n+            _ => {\n+                self.errors.push(PatternError::Unimplemented);\n+                PatKind::Wild\n+            }\n+        }\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "91b9c7184d819c1cb8a75fa20b9e4a3521c5b2b1", "filename": "crates/hir_ty/src/diagnostics/pattern/deconstruct_pat.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cf6f989a8d638b76ec7e14d00f7ed095b20ffed6/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf6f989a8d638b76ec7e14d00f7ed095b20ffed6/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fpattern%2Fdeconstruct_pat.rs?ref=cf6f989a8d638b76ec7e14d00f7ed095b20ffed6", "patch": "@@ -275,14 +275,8 @@ impl Constructor {\n             PatKind::Binding { .. } | PatKind::Wild => Wildcard,\n             PatKind::Leaf { .. } | PatKind::Deref { .. } => Single,\n             &PatKind::Variant { enum_variant, .. } => Variant(enum_variant),\n-\n-            //Todo\n-            // &Pat::Lit(expr_id) => match cx.body[expr_id] {\n-            //     Expr::Literal(Literal::Bool(val)) => IntRange(IntRange::from_bool(val)),\n-            //     _ => todo!(),\n-            // },\n+            &PatKind::LiteralBool { value } => IntRange(IntRange::from_bool(value)),\n             PatKind::Or { .. } => panic!(\"bug: Or-pattern should have been expanded earlier on.\"),\n-            pat => todo!(\"Constructor::from_pat {:?}\", pat),\n         }\n     }\n \n@@ -690,7 +684,7 @@ impl Fields {\n         let mut subpatterns =\n             subpatterns_and_indices.iter().map(|&(_, p)| pcx.cx.pattern_arena.borrow()[p].clone());\n         // FIXME(iDawer) witnesses are not yet used\n-        const UNIMPLEMENTED: PatKind = PatKind::Wild;\n+        const UNHANDLED: PatKind = PatKind::Wild;\n \n         let pat = match ctor {\n             Single | Variant(_) => match pcx.ty.kind(&Interner) {\n@@ -728,10 +722,10 @@ impl Fields {\n                 }\n                 _ => PatKind::Wild,\n             },\n-            Constructor::Slice(slice) => UNIMPLEMENTED,\n-            Str(_) => UNIMPLEMENTED,\n-            FloatRange(..) => UNIMPLEMENTED,\n-            Constructor::IntRange(_) => UNIMPLEMENTED,\n+            Constructor::Slice(slice) => UNHANDLED,\n+            Str(_) => UNHANDLED,\n+            FloatRange(..) => UNHANDLED,\n+            Constructor::IntRange(_) => UNHANDLED,\n             NonExhaustive => PatKind::Wild,\n             Wildcard => return Pat::wildcard_from_ty(pcx.ty),\n             Opaque => panic!(\"bug: we should not try to apply an opaque constructor\"),\n@@ -855,7 +849,10 @@ impl Fields {\n                 self.replace_with_fieldpats(subpatterns)\n             }\n \n-            PatKind::Wild | PatKind::Binding { .. } | PatKind::Or { .. } => self.clone(),\n+            PatKind::Wild\n+            | PatKind::Binding { .. }\n+            | PatKind::LiteralBool { .. }\n+            | PatKind::Or { .. } => self.clone(),\n         }\n     }\n }"}]}