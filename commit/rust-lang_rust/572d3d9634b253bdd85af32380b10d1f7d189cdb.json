{"sha": "572d3d9634b253bdd85af32380b10d1f7d189cdb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3MmQzZDk2MzRiMjUzYmRkODVhZjMyMzgwYjEwZDFmN2QxODljZGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-15T00:10:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-15T00:10:08Z"}, "message": "Auto merge of #60584 - jonas-schievink:ice-panic-hook, r=oli-obk\n\nUse `panic::set_hook` to print the ICE message\n\nThis allows custom frontends and backends to override the hook with their own, for example to point people to a different issue tracker.\n\nICE messages are printed in a slightly different order now. Nightly prints:\n\n```\nthread 'rustc' panicked at 'called `Option::unwrap()` on a `None` value', src/libcore/option.rs:347:21\nnote: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0658.\nFor more information about an error, try `rustc --explain E0277`.\n\nerror: internal compiler error: unexpected panic\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\n\nnote: rustc 1.36.0-nightly (08bfe1612 2019-05-02) running on x86_64-unknown-linux-gnu\n```\n\nAfter this PR, rustc prints:\n\n```\nthread 'rustc' panicked at 'called `Option::unwrap()` on a `None` value', src/libcore/option.rs:347:21\nnote: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n\nerror: internal compiler error: unexpected panic\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\n\nnote: rustc 1.36.0-dev running on x86_64-unknown-linux-gnu\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0658.\nFor more information about an error, try `rustc --explain E0277`.\n```", "tree": {"sha": "210899281b5d8ed3f9d8b5ada124f523de652441", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/210899281b5d8ed3f9d8b5ada124f523de652441"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/572d3d9634b253bdd85af32380b10d1f7d189cdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/572d3d9634b253bdd85af32380b10d1f7d189cdb", "html_url": "https://github.com/rust-lang/rust/commit/572d3d9634b253bdd85af32380b10d1f7d189cdb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/572d3d9634b253bdd85af32380b10d1f7d189cdb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b35ebac96102cd12406d9d87827b0838d129c278", "url": "https://api.github.com/repos/rust-lang/rust/commits/b35ebac96102cd12406d9d87827b0838d129c278", "html_url": "https://github.com/rust-lang/rust/commit/b35ebac96102cd12406d9d87827b0838d129c278"}, {"sha": "dab68131d314e6608c547311dfca1655ac8da886", "url": "https://api.github.com/repos/rust-lang/rust/commits/dab68131d314e6608c547311dfca1655ac8da886", "html_url": "https://github.com/rust-lang/rust/commit/dab68131d314e6608c547311dfca1655ac8da886"}], "stats": {"total": 210, "additions": 116, "deletions": 94}, "files": [{"sha": "679a02441c4863859fc439ecc27ecedda286c65f", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/572d3d9634b253bdd85af32380b10d1f7d189cdb/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/572d3d9634b253bdd85af32380b10d1f7d189cdb/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=572d3d9634b253bdd85af32380b10d1f7d189cdb", "patch": "@@ -3014,7 +3014,6 @@ dependencies = [\n  \"fmt_macros\",\n  \"graphviz\",\n  \"jobserver\",\n- \"lazy_static 1.3.0\",\n  \"log\",\n  \"measureme\",\n  \"num_cpus\",\n@@ -3370,6 +3369,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"env_logger\",\n  \"graphviz\",\n+ \"lazy_static 1.3.0\",\n  \"log\",\n  \"rustc\",\n  \"rustc_ast_borrowck\","}, {"sha": "66071d6b6ce4d1626aaae3521273dbafb51e8dcc", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/572d3d9634b253bdd85af32380b10d1f7d189cdb/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/572d3d9634b253bdd85af32380b10d1f7d189cdb/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=572d3d9634b253bdd85af32380b10d1f7d189cdb", "patch": "@@ -15,7 +15,6 @@ bitflags = \"1.0\"\n fmt_macros = { path = \"../libfmt_macros\" }\n graphviz = { path = \"../libgraphviz\" }\n jobserver = \"0.1\"\n-lazy_static = \"1.0.0\"\n num_cpus = \"1.0\"\n scoped-tls = \"1.0\"\n log = { version = \"0.4\", features = [\"release_max_level_info\", \"std\"] }"}, {"sha": "7a01ae6b6d9ccb546b0f5b251ddfb65a7c4740b3", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/572d3d9634b253bdd85af32380b10d1f7d189cdb/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572d3d9634b253bdd85af32380b10d1f7d189cdb/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=572d3d9634b253bdd85af32380b10d1f7d189cdb", "patch": "@@ -67,7 +67,6 @@\n \n #[macro_use] extern crate bitflags;\n extern crate getopts;\n-#[macro_use] extern crate lazy_static;\n #[macro_use] extern crate scoped_tls;\n #[cfg(windows)]\n extern crate libc;"}, {"sha": "2475b93d95f32af84ee0ded0da2e2cc39f199347", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/572d3d9634b253bdd85af32380b10d1f7d189cdb/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572d3d9634b253bdd85af32380b10d1f7d189cdb/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=572d3d9634b253bdd85af32380b10d1f7d189cdb", "patch": "@@ -5,17 +5,13 @@ use rustc_data_structures::{fx::FxHashMap, sync::Lock};\n use std::cell::{RefCell, Cell};\n use std::fmt::Debug;\n use std::hash::Hash;\n-use std::panic;\n-use std::env;\n use std::time::{Duration, Instant};\n \n use std::sync::mpsc::{Sender};\n use syntax_pos::{SpanData};\n use syntax::symbol::{Symbol, sym};\n use rustc_macros::HashStable;\n-use crate::ty::TyCtxt;\n use crate::dep_graph::{DepNode};\n-use lazy_static;\n use crate::session::Session;\n \n #[cfg(test)]\n@@ -31,39 +27,6 @@ pub struct ErrorReported;\n \n thread_local!(static TIME_DEPTH: Cell<usize> = Cell::new(0));\n \n-lazy_static! {\n-    static ref DEFAULT_HOOK: Box<dyn Fn(&panic::PanicInfo<'_>) + Sync + Send + 'static> = {\n-        let hook = panic::take_hook();\n-        panic::set_hook(Box::new(panic_hook));\n-        hook\n-    };\n-}\n-\n-fn panic_hook(info: &panic::PanicInfo<'_>) {\n-    (*DEFAULT_HOOK)(info);\n-\n-    let backtrace = env::var_os(\"RUST_BACKTRACE\").map(|x| &x != \"0\").unwrap_or(false);\n-\n-    if backtrace {\n-        TyCtxt::try_print_query_stack();\n-    }\n-\n-    #[cfg(windows)]\n-    unsafe {\n-        if env::var(\"RUSTC_BREAK_ON_ICE\").is_ok() {\n-            extern \"system\" {\n-                fn DebugBreak();\n-            }\n-            // Trigger a debugger if we crashed during bootstrap.\n-            DebugBreak();\n-        }\n-    }\n-}\n-\n-pub fn install_panic_hook() {\n-    lazy_static::initialize(&DEFAULT_HOOK);\n-}\n-\n /// Parameters to the `Dump` variant of type `ProfileQueriesMsg`.\n #[derive(Clone,Debug)]\n pub struct ProfQDumpParams {"}, {"sha": "25f67b30468ccdbe1f6f03e461813baae44fc065", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/572d3d9634b253bdd85af32380b10d1f7d189cdb/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/572d3d9634b253bdd85af32380b10d1f7d189cdb/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=572d3d9634b253bdd85af32380b10d1f7d189cdb", "patch": "@@ -11,6 +11,7 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n graphviz = { path = \"../libgraphviz\" }\n+lazy_static = \"1.0\"\n log = \"0.4\"\n env_logger = { version = \"0.6\", default-features = false }\n rustc = { path = \"../librustc\" }"}, {"sha": "005cdcfaf682101d9dc3bcc150e38b8cf49d3ddc", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 94, "deletions": 49, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/572d3d9634b253bdd85af32380b10d1f7d189cdb/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572d3d9634b253bdd85af32380b10d1f7d189cdb/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=572d3d9634b253bdd85af32380b10d1f7d189cdb", "patch": "@@ -20,6 +20,8 @@ pub extern crate getopts;\n extern crate libc;\n #[macro_use]\n extern crate log;\n+#[macro_use]\n+extern crate lazy_static;\n \n pub extern crate rustc_plugin_impl as plugin;\n \n@@ -35,8 +37,8 @@ use rustc::session::{early_error, early_warn};\n use rustc::lint::Lint;\n use rustc::lint;\n use rustc::hir::def_id::LOCAL_CRATE;\n-use rustc::util::common::{ErrorReported, install_panic_hook, print_time_passes_entry};\n-use rustc::util::common::{set_time_depth, time};\n+use rustc::ty::TyCtxt;\n+use rustc::util::common::{set_time_depth, time, print_time_passes_entry, ErrorReported};\n use rustc_metadata::locator;\n use rustc_metadata::cstore::CStore;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n@@ -161,8 +163,6 @@ pub fn run_compiler(\n         None => return Ok(()),\n     };\n \n-    install_panic_hook();\n-\n     let (sopts, cfg) = config::build_session_options_and_crate_config(&matches);\n \n     let mut dummy_config = |sopts, cfg, diagnostic_output| {\n@@ -1151,61 +1151,105 @@ fn extra_compiler_flags() -> Option<(Vec<String>, bool)> {\n     }\n }\n \n-/// Runs a procedure which will detect panics in the compiler and print nicer\n-/// error messages rather than just failing the test.\n+/// Runs a closure and catches unwinds triggered by fatal errors.\n ///\n-/// The diagnostic emitter yielded to the procedure should be used for reporting\n-/// errors of the compiler.\n-pub fn report_ices_to_stderr_if_any<F: FnOnce() -> R, R>(f: F) -> Result<R, ErrorReported> {\n+/// The compiler currently unwinds with a special sentinel value to abort\n+/// compilation on fatal errors. This function catches that sentinel and turns\n+/// the panic into a `Result` instead.\n+pub fn catch_fatal_errors<F: FnOnce() -> R, R>(f: F) -> Result<R, ErrorReported> {\n     catch_unwind(panic::AssertUnwindSafe(f)).map_err(|value| {\n         if value.is::<errors::FatalErrorMarker>() {\n             ErrorReported\n         } else {\n-            // Thread panicked without emitting a fatal diagnostic\n-            eprintln!(\"\");\n-\n-            let emitter = Box::new(errors::emitter::EmitterWriter::stderr(\n-                errors::ColorConfig::Auto,\n-                None,\n-                false,\n-                false,\n-                None,\n-            ));\n-            let handler = errors::Handler::with_emitter(true, None, emitter);\n-\n-            // a .span_bug or .bug call has already printed what\n-            // it wants to print.\n-            if !value.is::<errors::ExplicitBug>() {\n-                handler.emit(&MultiSpan::new(),\n-                             \"unexpected panic\",\n-                             errors::Level::Bug);\n-            }\n+            panic::resume_unwind(value);\n+        }\n+    })\n+}\n \n-            let mut xs: Vec<Cow<'static, str>> = vec![\n-                \"the compiler unexpectedly panicked. this is a bug.\".into(),\n-                format!(\"we would appreciate a bug report: {}\", BUG_REPORT_URL).into(),\n-                format!(\"rustc {} running on {}\",\n-                        option_env!(\"CFG_VERSION\").unwrap_or(\"unknown_version\"),\n-                        config::host_triple()).into(),\n-            ];\n+lazy_static! {\n+    static ref DEFAULT_HOOK: Box<dyn Fn(&panic::PanicInfo<'_>) + Sync + Send + 'static> = {\n+        let hook = panic::take_hook();\n+        panic::set_hook(Box::new(|info| report_ice(info, BUG_REPORT_URL)));\n+        hook\n+    };\n+}\n \n-            if let Some((flags, excluded_cargo_defaults)) = extra_compiler_flags() {\n-                xs.push(format!(\"compiler flags: {}\", flags.join(\" \")).into());\n+/// Prints the ICE message, including backtrace and query stack.\n+///\n+/// The message will point the user at `bug_report_url` to report the ICE.\n+///\n+/// When `install_ice_hook` is called, this function will be called as the panic\n+/// hook.\n+pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n+    // Invoke the default handler, which prints the actual panic message and optionally a backtrace\n+    (*DEFAULT_HOOK)(info);\n+\n+    // Separate the output with an empty line\n+    eprintln!();\n+\n+    let emitter = Box::new(errors::emitter::EmitterWriter::stderr(\n+        errors::ColorConfig::Auto,\n+        None,\n+        false,\n+        false,\n+        None,\n+    ));\n+    let handler = errors::Handler::with_emitter(true, None, emitter);\n+\n+    // a .span_bug or .bug call has already printed what\n+    // it wants to print.\n+    if !info.payload().is::<errors::ExplicitBug>() {\n+        handler.emit(&MultiSpan::new(),\n+                     \"unexpected panic\",\n+                     errors::Level::Bug);\n+    }\n \n-                if excluded_cargo_defaults {\n-                    xs.push(\"some of the compiler flags provided by cargo are hidden\".into());\n-                }\n-            }\n+    let mut xs: Vec<Cow<'static, str>> = vec![\n+        \"the compiler unexpectedly panicked. this is a bug.\".into(),\n+        format!(\"we would appreciate a bug report: {}\", bug_report_url).into(),\n+        format!(\"rustc {} running on {}\",\n+                option_env!(\"CFG_VERSION\").unwrap_or(\"unknown_version\"),\n+                config::host_triple()).into(),\n+    ];\n \n-            for note in &xs {\n-                handler.emit(&MultiSpan::new(),\n-                             note,\n-                             errors::Level::Note);\n-            }\n+    if let Some((flags, excluded_cargo_defaults)) = extra_compiler_flags() {\n+        xs.push(format!(\"compiler flags: {}\", flags.join(\" \")).into());\n \n-            panic::resume_unwind(Box::new(errors::FatalErrorMarker));\n+        if excluded_cargo_defaults {\n+            xs.push(\"some of the compiler flags provided by cargo are hidden\".into());\n         }\n-    })\n+    }\n+\n+    for note in &xs {\n+        handler.emit(&MultiSpan::new(),\n+                     note,\n+                     errors::Level::Note);\n+    }\n+\n+    // If backtraces are enabled, also print the query stack\n+    let backtrace = env::var_os(\"RUST_BACKTRACE\").map(|x| &x != \"0\").unwrap_or(false);\n+\n+    if backtrace {\n+        TyCtxt::try_print_query_stack();\n+    }\n+\n+    #[cfg(windows)]\n+    unsafe {\n+        if env::var(\"RUSTC_BREAK_ON_ICE\").is_ok() {\n+            extern \"system\" {\n+                fn DebugBreak();\n+            }\n+            // Trigger a debugger if we crashed during bootstrap\n+            DebugBreak();\n+        }\n+    }\n+}\n+\n+/// Installs a panic hook that will print the ICE message on unexpected panics.\n+///\n+/// A custom rustc driver can skip calling this to set up a custom ICE hook.\n+pub fn install_ice_hook() {\n+    lazy_static::initialize(&DEFAULT_HOOK);\n }\n \n /// This allows tools to enable rust logging without having to magically match rustc's\n@@ -1218,7 +1262,8 @@ pub fn main() {\n     let start = Instant::now();\n     init_rustc_env_logger();\n     let mut callbacks = TimePassesCallbacks::default();\n-    let result = report_ices_to_stderr_if_any(|| {\n+    install_ice_hook();\n+    let result = catch_fatal_errors(|| {\n         let args = env::args_os().enumerate()\n             .map(|(i, arg)| arg.into_string().unwrap_or_else(|arg| {\n                     early_error(ErrorOutputType::default(),"}, {"sha": "0b9e717221f2dff880af6fb28da296073e234dc6", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/572d3d9634b253bdd85af32380b10d1f7d189cdb/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572d3d9634b253bdd85af32380b10d1f7d189cdb/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=572d3d9634b253bdd85af32380b10d1f7d189cdb", "patch": "@@ -473,7 +473,7 @@ where R: 'static + Send,\n     // First, parse the crate and extract all relevant information.\n     info!(\"starting to run rustc\");\n \n-    let result = rustc_driver::report_ices_to_stderr_if_any(move || {\n+    let result = rustc_driver::catch_fatal_errors(move || {\n         let crate_name = options.crate_name.clone();\n         let crate_version = options.crate_version.clone();\n         let (mut krate, renderinfo, renderopts) = core::run_core(options);"}, {"sha": "bd9113c7079eac19006297f9d0733dee9f194002", "filename": "src/test/ui-fulldeps/compiler-calls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/572d3d9634b253bdd85af32380b10d1f7d189cdb/src%2Ftest%2Fui-fulldeps%2Fcompiler-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572d3d9634b253bdd85af32380b10d1f7d189cdb/src%2Ftest%2Fui-fulldeps%2Fcompiler-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fcompiler-calls.rs?ref=572d3d9634b253bdd85af32380b10d1f7d189cdb", "patch": "@@ -24,7 +24,7 @@ impl rustc_driver::Callbacks for TestCalls<'_> {\n fn main() {\n     let mut count = 1;\n     let args = vec![\"compiler-calls\".to_string(), \"foo.rs\".to_string()];\n-    rustc_driver::report_ices_to_stderr_if_any(|| {\n+    rustc_driver::catch_fatal_errors(|| {\n         rustc_driver::run_compiler(&args, &mut TestCalls { count: &mut count }, None, None).ok();\n     }).ok();\n     assert_eq!(count, 2);"}, {"sha": "94a4b403d5a3f7cf1abeee7e7dab671e8c9515f4", "filename": "src/test/ui/proc-macro/invalid-punct-ident-1.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/572d3d9634b253bdd85af32380b10d1f7d189cdb/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572d3d9634b253bdd85af32380b10d1f7d189cdb/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-1.rs?ref=572d3d9634b253bdd85af32380b10d1f7d189cdb", "patch": "@@ -3,6 +3,11 @@\n // FIXME https://github.com/rust-lang/rust/issues/59998\n // normalize-stderr-test \"thread.*panicked.*proc_macro_server.rs.*\\n\" -> \"\"\n // normalize-stderr-test \"note:.*RUST_BACKTRACE=1.*\\n\" -> \"\"\n+// normalize-stderr-test \"\\nerror: internal compiler error.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note:.*unexpectedly panicked.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: we would appreciate a bug report.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: compiler flags.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: rustc.*running on.*\\n\\n\" -> \"\"\n \n #[macro_use]\n extern crate invalid_punct_ident;"}, {"sha": "107f5fb515b1cdd5852ac94ddb39f715a6c939d7", "filename": "src/test/ui/proc-macro/invalid-punct-ident-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/572d3d9634b253bdd85af32380b10d1f7d189cdb/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/572d3d9634b253bdd85af32380b10d1f7d189cdb/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-1.stderr?ref=572d3d9634b253bdd85af32380b10d1f7d189cdb", "patch": "@@ -1,5 +1,5 @@\n error: proc macro panicked\n-  --> $DIR/invalid-punct-ident-1.rs:10:1\n+  --> $DIR/invalid-punct-ident-1.rs:15:1\n    |\n LL | invalid_punct!();\n    | ^^^^^^^^^^^^^^^^^"}, {"sha": "778b7eeecd7a938cd17e8277f7c6ad0dbc0be58c", "filename": "src/test/ui/proc-macro/invalid-punct-ident-2.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/572d3d9634b253bdd85af32380b10d1f7d189cdb/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572d3d9634b253bdd85af32380b10d1f7d189cdb/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-2.rs?ref=572d3d9634b253bdd85af32380b10d1f7d189cdb", "patch": "@@ -3,6 +3,11 @@\n // FIXME https://github.com/rust-lang/rust/issues/59998\n // normalize-stderr-test \"thread.*panicked.*proc_macro_server.rs.*\\n\" -> \"\"\n // normalize-stderr-test \"note:.*RUST_BACKTRACE=1.*\\n\" -> \"\"\n+// normalize-stderr-test \"\\nerror: internal compiler error.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note:.*unexpectedly panicked.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: we would appreciate a bug report.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: compiler flags.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: rustc.*running on.*\\n\\n\" -> \"\"\n \n #[macro_use]\n extern crate invalid_punct_ident;"}, {"sha": "f1b9ecc6cbfe4552ef7e8ac198a5dc6a67076d48", "filename": "src/test/ui/proc-macro/invalid-punct-ident-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/572d3d9634b253bdd85af32380b10d1f7d189cdb/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/572d3d9634b253bdd85af32380b10d1f7d189cdb/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-2.stderr?ref=572d3d9634b253bdd85af32380b10d1f7d189cdb", "patch": "@@ -1,5 +1,5 @@\n error: proc macro panicked\n-  --> $DIR/invalid-punct-ident-2.rs:10:1\n+  --> $DIR/invalid-punct-ident-2.rs:15:1\n    |\n LL | invalid_ident!();\n    | ^^^^^^^^^^^^^^^^^"}, {"sha": "f68ee3de7f4567dad491c87be79f0d781c12e3f2", "filename": "src/test/ui/proc-macro/invalid-punct-ident-3.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/572d3d9634b253bdd85af32380b10d1f7d189cdb/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572d3d9634b253bdd85af32380b10d1f7d189cdb/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-3.rs?ref=572d3d9634b253bdd85af32380b10d1f7d189cdb", "patch": "@@ -3,6 +3,11 @@\n // FIXME https://github.com/rust-lang/rust/issues/59998\n // normalize-stderr-test \"thread.*panicked.*proc_macro_server.rs.*\\n\" -> \"\"\n // normalize-stderr-test \"note:.*RUST_BACKTRACE=1.*\\n\" -> \"\"\n+// normalize-stderr-test \"\\nerror: internal compiler error.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note:.*unexpectedly panicked.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: we would appreciate a bug report.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: compiler flags.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: rustc.*running on.*\\n\\n\" -> \"\"\n \n #[macro_use]\n extern crate invalid_punct_ident;"}, {"sha": "6044b9887401e1acd29160ef17749376091bc5d3", "filename": "src/test/ui/proc-macro/invalid-punct-ident-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/572d3d9634b253bdd85af32380b10d1f7d189cdb/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/572d3d9634b253bdd85af32380b10d1f7d189cdb/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-3.stderr?ref=572d3d9634b253bdd85af32380b10d1f7d189cdb", "patch": "@@ -1,5 +1,5 @@\n error: proc macro panicked\n-  --> $DIR/invalid-punct-ident-3.rs:10:1\n+  --> $DIR/invalid-punct-ident-3.rs:15:1\n    |\n LL | invalid_raw_ident!();\n    | ^^^^^^^^^^^^^^^^^^^^^"}]}