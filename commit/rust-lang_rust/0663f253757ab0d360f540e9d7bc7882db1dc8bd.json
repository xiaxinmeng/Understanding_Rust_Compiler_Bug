{"sha": "0663f253757ab0d360f540e9d7bc7882db1dc8bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2NjNmMjUzNzU3YWIwZDM2MGY1NDBlOWQ3YmM3ODgyZGIxZGM4YmQ=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-02-03T20:12:42Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-02-15T14:41:34Z"}, "message": "Always qualify literals by type", "tree": {"sha": "e7950176b6fb06016665c61f8826e99640a789cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7950176b6fb06016665c61f8826e99640a789cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0663f253757ab0d360f540e9d7bc7882db1dc8bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0663f253757ab0d360f540e9d7bc7882db1dc8bd", "html_url": "https://github.com/rust-lang/rust/commit/0663f253757ab0d360f540e9d7bc7882db1dc8bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0663f253757ab0d360f540e9d7bc7882db1dc8bd/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1912f2e89b77cfe2a0e64b96f444848fe4e2d49", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1912f2e89b77cfe2a0e64b96f444848fe4e2d49", "html_url": "https://github.com/rust-lang/rust/commit/a1912f2e89b77cfe2a0e64b96f444848fe4e2d49"}], "stats": {"total": 35, "additions": 14, "deletions": 21}, "files": [{"sha": "215496e4d03cb7b108d4a3502a0d426072d642c7", "filename": "src/librustc_mir/transform/check_consts/qualifs.rs", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0663f253757ab0d360f540e9d7bc7882db1dc8bd/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0663f253757ab0d360f540e9d7bc7882db1dc8bd/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=0663f253757ab0d360f540e9d7bc7882db1dc8bd", "patch": "@@ -94,32 +94,23 @@ pub trait Qualif {\n             }\n \n             Operand::Constant(ref constant) => {\n-                if constant.check_static_ptr(cx.tcx).is_some() {\n-                    // `mir_const_qualif` does return the qualifs in the final value of a `static`,\n-                    // so we could use value-based qualification here, but we shouldn't do this\n-                    // without a good reason.\n-                    //\n-                    // Note: this uses `constant.literal.ty` which is a reference or pointer to the\n-                    // type of the actual `static` item.\n-                    Self::in_any_value_of_ty(cx, constant.literal.ty)\n-                } else if let ty::ConstKind::Unevaluated(def_id, _, promoted) = constant.literal.val\n-                {\n+                // Check the qualifs of the value of `const` items.\n+                if let ty::ConstKind::Unevaluated(def_id, _, promoted) = constant.literal.val {\n                     assert!(promoted.is_none());\n                     // Don't peek inside trait associated constants.\n-                    if cx.tcx.trait_of_item(def_id).is_some() {\n-                        Self::in_any_value_of_ty(cx, constant.literal.ty)\n-                    } else {\n+                    if cx.tcx.trait_of_item(def_id).is_none() {\n                         let qualifs = cx.tcx.at(constant.span).mir_const_qualif(def_id);\n-                        let qualif = Self::in_qualifs(&qualifs);\n+                        if !Self::in_qualifs(&qualifs) {\n+                            return false;\n+                        }\n \n                         // Just in case the type is more specific than\n                         // the definition, e.g., impl associated const\n                         // with type parameters, take it into account.\n-                        qualif && Self::in_any_value_of_ty(cx, constant.literal.ty)\n                     }\n-                } else {\n-                    false\n                 }\n+                // Otherwise use the qualifs of the type.\n+                Self::in_any_value_of_ty(cx, constant.literal.ty)\n             }\n         }\n     }"}, {"sha": "d9851a2f7942248a26cbaae65e19b3af11472935", "filename": "src/test/run-make-fulldeps/min-global-align/min_global_align.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0663f253757ab0d360f540e9d7bc7882db1dc8bd/src%2Ftest%2Frun-make-fulldeps%2Fmin-global-align%2Fmin_global_align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0663f253757ab0d360f540e9d7bc7882db1dc8bd/src%2Ftest%2Frun-make-fulldeps%2Fmin-global-align%2Fmin_global_align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fmin-global-align%2Fmin_global_align.rs?ref=0663f253757ab0d360f540e9d7bc7882db1dc8bd", "patch": "@@ -1,5 +1,5 @@\n #![feature(no_core, lang_items)]\n-#![crate_type=\"rlib\"]\n+#![crate_type = \"rlib\"]\n #![no_core]\n \n pub static STATIC_BOOL: bool = true;\n@@ -9,7 +9,6 @@ pub static mut STATIC_MUT_BOOL: bool = true;\n const CONST_BOOL: bool = true;\n pub static CONST_BOOL_REF: &'static bool = &CONST_BOOL;\n \n-\n #[lang = \"sized\"]\n trait Sized {}\n \n@@ -19,10 +18,13 @@ trait Copy {}\n #[lang = \"freeze\"]\n trait Freeze {}\n \n+// No `UnsafeCell`, so everything is `Freeze`.\n+impl<T: ?Sized> Freeze for T {}\n+\n #[lang = \"sync\"]\n trait Sync {}\n impl Sync for bool {}\n impl Sync for &'static bool {}\n \n-#[lang=\"drop_in_place\"]\n-pub unsafe fn drop_in_place<T: ?Sized>(_: *mut T) { }\n+#[lang = \"drop_in_place\"]\n+pub unsafe fn drop_in_place<T: ?Sized>(_: *mut T) {}"}]}