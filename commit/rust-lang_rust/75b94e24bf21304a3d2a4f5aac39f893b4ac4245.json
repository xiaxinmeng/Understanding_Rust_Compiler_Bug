{"sha": "75b94e24bf21304a3d2a4f5aac39f893b4ac4245", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1Yjk0ZTI0YmYyMTMwNGEzZDJhNGY1YWFjMzlmODkzYjRhYzQyNDU=", "commit": {"author": {"name": "Remy Rakic", "email": "remy.rakic@gmail.com", "date": "2018-09-14T20:22:02Z"}, "committer": {"name": "Remy Rakic", "email": "remy.rakic@gmail.com", "date": "2018-09-18T12:36:37Z"}, "message": "Create a helper function to retrieve the FakeReadClause at a location", "tree": {"sha": "8261cefa3596d1d23e8092209e370191c0a061e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8261cefa3596d1d23e8092209e370191c0a061e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75b94e24bf21304a3d2a4f5aac39f893b4ac4245", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75b94e24bf21304a3d2a4f5aac39f893b4ac4245", "html_url": "https://github.com/rust-lang/rust/commit/75b94e24bf21304a3d2a4f5aac39f893b4ac4245", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75b94e24bf21304a3d2a4f5aac39f893b4ac4245/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae6479c13bd3fdb17ed055b88f4ca166dabb4e9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae6479c13bd3fdb17ed055b88f4ca166dabb4e9f", "html_url": "https://github.com/rust-lang/rust/commit/ae6479c13bd3fdb17ed055b88f4ca166dabb4e9f"}], "stats": {"total": 43, "additions": 20, "deletions": 23}, "files": [{"sha": "de2c2164a1f8f14495ccf4c4947f109a35768062", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/75b94e24bf21304a3d2a4f5aac39f893b4ac4245/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b94e24bf21304a3d2a4f5aac39f893b4ac4245/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=75b94e24bf21304a3d2a4f5aac39f893b4ac4245", "patch": "@@ -12,7 +12,7 @@ use borrow_check::WriteKind;\n use rustc::middle::region::ScopeTree;\n use rustc::mir::VarBindingForm;\n use rustc::mir::{BindingForm, BorrowKind, ClearCrossCrate, Field, Local};\n-use rustc::mir::{LocalDecl, LocalKind, Location, Operand, Place};\n+use rustc::mir::{FakeReadCause, LocalDecl, LocalKind, Location, Operand, Place};\n use rustc::mir::{ProjectionElem, Rvalue, Statement, StatementKind};\n use rustc::ty;\n use rustc_data_structures::fx::FxHashSet;\n@@ -989,6 +989,21 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             false\n         }\n     }\n+\n+    /// Returns the `FakeReadCause` at this location if it is a `FakeRead` statement.\n+    pub(super) fn retrieve_fake_read_cause_for_location(\n+        &self,\n+        location: &Location,\n+    ) -> Option<FakeReadCause> {\n+        let stmt = self.mir.basic_blocks()[location.block]\n+            .statements\n+            .get(location.statement_index)?;\n+        if let StatementKind::FakeRead(cause, _) = stmt.kind {\n+            Some(cause)\n+        } else {\n+            None\n+        }\n+    }\n }\n \n // The span(s) associated to a use of a place."}, {"sha": "c094350757e2fcb026e1b1f1325d8117aa0f0b55", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 4, "deletions": 22, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/75b94e24bf21304a3d2a4f5aac39f893b4ac4245/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b94e24bf21304a3d2a4f5aac39f893b4ac4245/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=75b94e24bf21304a3d2a4f5aac39f893b4ac4245", "patch": "@@ -11,7 +11,7 @@\n use borrow_check::borrow_set::BorrowData;\n use borrow_check::nll::region_infer::Cause;\n use borrow_check::{Context, MirBorrowckCtxt, WriteKind};\n-use rustc::mir::{FakeReadCause, Local, Location, Place, StatementKind, TerminatorKind};\n+use rustc::mir::{FakeReadCause, Local, Location, Place, TerminatorKind};\n use rustc_errors::DiagnosticBuilder;\n use rustc::ty::Region;\n \n@@ -145,27 +145,9 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                         // Check if the location represents a `FakeRead`, and adapt the error\n                         // message to the `FakeReadCause` it is from: in particular,\n                         // the ones inserted in optimized `let var = <expr>` patterns.\n-                        let is_fake_read_for_let = match self.mir.basic_blocks()[location.block]\n-                            .statements\n-                            .get(location.statement_index)\n-                        {\n-                            None => false,\n-                            Some(stmt) => {\n-                                if let StatementKind::FakeRead(ref cause, _) = stmt.kind {\n-                                    match cause {\n-                                        FakeReadCause::ForLet => true,\n-                                        _ => false,\n-                                    }\n-                                } else {\n-                                    false\n-                                }\n-                            }\n-                        };\n-\n-                        if is_fake_read_for_let {\n-                            \"borrow later stored here\"\n-                        } else {\n-                            \"borrow later used here\"\n+                        match self.retrieve_fake_read_cause_for_location(&location) {\n+                            Some(FakeReadCause::ForLet) => \"borrow later stored here\",\n+                            _ => \"borrow later used here\"\n                         }\n                     }\n                 };"}]}