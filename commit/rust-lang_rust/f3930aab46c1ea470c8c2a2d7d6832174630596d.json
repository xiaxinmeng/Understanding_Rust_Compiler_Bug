{"sha": "f3930aab46c1ea470c8c2a2d7d6832174630596d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzOTMwYWFiNDZjMWVhNDcwYzhjMmEyZDdkNjgzMjE3NDYzMDU5NmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-11-27T03:49:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-27T03:49:41Z"}, "message": "Auto merge of #38023 - arielb1:constant-evil-x2, r=eddyb\n\ndon't double-apply variant padding to const enums\n\n`build_const_struct` already returns the struct with padding - don't double-apply it in the `General` case.\n\nThis should hopefully be the last time we have this sort of bug.\n\nFixes #38002.\n\nBeta-nominating because regression.\n\nr? @eddyb", "tree": {"sha": "fb471e64d274b1a7c94a34313d68327433c4ca32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb471e64d274b1a7c94a34313d68327433c4ca32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3930aab46c1ea470c8c2a2d7d6832174630596d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3930aab46c1ea470c8c2a2d7d6832174630596d", "html_url": "https://github.com/rust-lang/rust/commit/f3930aab46c1ea470c8c2a2d7d6832174630596d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3930aab46c1ea470c8c2a2d7d6832174630596d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8614c397313db00e4b4626d1ba77ae00dbf7549", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8614c397313db00e4b4626d1ba77ae00dbf7549", "html_url": "https://github.com/rust-lang/rust/commit/f8614c397313db00e4b4626d1ba77ae00dbf7549"}, {"sha": "fcebf3beab25386f1fbf98ceef859b355ad70f15", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcebf3beab25386f1fbf98ceef859b355ad70f15", "html_url": "https://github.com/rust-lang/rust/commit/fcebf3beab25386f1fbf98ceef859b355ad70f15"}], "stats": {"total": 59, "additions": 50, "deletions": 9}, "files": [{"sha": "8ee362bae355123765a6f127d78f1ceb87222564", "filename": "src/librustc_trans/adt.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f3930aab46c1ea470c8c2a2d7d6832174630596d/src%2Flibrustc_trans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3930aab46c1ea470c8c2a2d7d6832174630596d/src%2Flibrustc_trans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fadt.rs?ref=f3930aab46c1ea470c8c2a2d7d6832174630596d", "patch": "@@ -688,9 +688,8 @@ pub fn trans_const<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>, discr: D\n             let lldiscr = C_integral(Type::from_integer(ccx, d), discr.0 as u64, true);\n             let mut vals_with_discr = vec![lldiscr];\n             vals_with_discr.extend_from_slice(vals);\n-            let mut contents = build_const_struct(ccx, &variant,\n-                &vals_with_discr[..]);\n-            let needed_padding = l.size(dl).bytes() - variant.min_size.bytes();\n+            let mut contents = build_const_struct(ccx, &variant, &vals_with_discr[..]);\n+            let needed_padding = l.size(dl).bytes() - variant.stride().bytes();\n             if needed_padding > 0 {\n                 contents.push(padding(ccx, needed_padding));\n             }\n@@ -703,8 +702,7 @@ pub fn trans_const<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>, discr: D\n         }\n         layout::Univariant { ref variant, .. } => {\n             assert_eq!(discr, Disr(0));\n-            let contents = build_const_struct(ccx,\n-                &variant, vals);\n+            let contents = build_const_struct(ccx, &variant, vals);\n             C_struct(ccx, &contents[..], variant.packed)\n         }\n         layout::Vector { .. } => {\n@@ -721,17 +719,15 @@ pub fn trans_const<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>, discr: D\n         }\n         layout::StructWrappedNullablePointer { ref nonnull, nndiscr, .. } => {\n             if discr.0 == nndiscr {\n-                C_struct(ccx, &build_const_struct(ccx, &nonnull, vals),\n-                         false)\n+                C_struct(ccx, &build_const_struct(ccx, &nonnull, vals), false)\n             } else {\n                 let fields = compute_fields(ccx, t, nndiscr as usize, false);\n                 let vals = fields.iter().map(|&ty| {\n                     // Always use null even if it's not the `discrfield`th\n                     // field; see #8506.\n                     C_null(type_of::sizing_type_of(ccx, ty))\n                 }).collect::<Vec<ValueRef>>();\n-                C_struct(ccx, &build_const_struct(ccx, &nonnull, &vals[..]),\n-                         false)\n+                C_struct(ccx, &build_const_struct(ccx, &nonnull, &vals[..]), false)\n             }\n         }\n         _ => bug!(\"trans_const: cannot handle type {} repreented as {:#?}\", t, l)"}, {"sha": "489d35e9147ad2a31b55fc2007247b1bfb9db02f", "filename": "src/test/run-pass/issue-38002.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/f3930aab46c1ea470c8c2a2d7d6832174630596d/src%2Ftest%2Frun-pass%2Fissue-38002.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3930aab46c1ea470c8c2a2d7d6832174630596d/src%2Ftest%2Frun-pass%2Fissue-38002.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-38002.rs?ref=f3930aab46c1ea470c8c2a2d7d6832174630596d", "patch": "@@ -0,0 +1,45 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that constant ADTs are translated OK, part k of N.\n+\n+#![feature(slice_patterns)]\n+\n+enum Bar {\n+    C\n+}\n+\n+enum Foo {\n+    A {},\n+    B {\n+        y: usize,\n+        z: Bar\n+    },\n+}\n+\n+const LIST: [(usize, Foo); 2] = [\n+    (51, Foo::B { y: 42, z: Bar::C }),\n+    (52, Foo::B { y: 45, z: Bar::C }),\n+];\n+\n+pub fn main() {\n+    match LIST {\n+        [\n+            (51, Foo::B { y: 42, z: Bar::C }),\n+            (52, Foo::B { y: 45, z: Bar::C })\n+        ] => {}\n+        _ => {\n+            // I would want to print the enum here, but if\n+            // the discriminant is garbage this causes an\n+            // `unreachable` and silent process exit.\n+            panic!(\"trivial match failed\")\n+        }\n+    }\n+}"}]}