{"sha": "cfce60ea3760acf8537d882fbae4fd1086e2b332", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmY2U2MGVhMzc2MGFjZjg1MzdkODgyZmJhZTRmZDEwODZlMmIzMzI=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-03-04T17:07:26Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-03-04T17:12:26Z"}, "message": "Allow for multiple patterns and a guard in assert_matches.", "tree": {"sha": "0549d53bcd104b141eaba4ff3f5a4e969e222e03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0549d53bcd104b141eaba4ff3f5a4e969e222e03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfce60ea3760acf8537d882fbae4fd1086e2b332", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfce60ea3760acf8537d882fbae4fd1086e2b332", "html_url": "https://github.com/rust-lang/rust/commit/cfce60ea3760acf8537d882fbae4fd1086e2b332", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfce60ea3760acf8537d882fbae4fd1086e2b332/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb18746bc6c6c5c710ad674873438cbad5894f06", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb18746bc6c6c5c710ad674873438cbad5894f06", "html_url": "https://github.com/rust-lang/rust/commit/eb18746bc6c6c5c710ad674873438cbad5894f06"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "9bde2207fe194c58f9108040ceb0df5a59be8015", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/cfce60ea3760acf8537d882fbae4fd1086e2b332/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfce60ea3760acf8537d882fbae4fd1086e2b332/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=cfce60ea3760acf8537d882fbae4fd1086e2b332", "patch": "@@ -110,7 +110,10 @@ macro_rules! assert_ne {\n     });\n }\n \n-/// Asserts that an expression matches a pattern.\n+/// Asserts that an expression matches any of the given patterns.\n+///\n+/// Like in a `match` expression, the pattern can be optionally followed by `if`\n+/// and a guard expression that has access to names bound by the pattern.\n ///\n /// On panic, this macro will print the value of the expression with its\n /// debug representation.\n@@ -125,38 +128,35 @@ macro_rules! assert_ne {\n /// let b = 1u32.checked_sub(2);\n /// assert_matches!(a, Some(_));\n /// assert_matches!(b, None);\n+///\n+/// let c = Ok(\"abc\".to_string());\n+/// assert_matches!(a, Ok(x) | Err(x) if x.len() < 100);\n /// ```\n #[macro_export]\n #[unstable(feature = \"assert_matches\", issue = \"none\")]\n #[allow_internal_unstable(core_panic)]\n macro_rules! assert_matches {\n-    ($left:expr, $right:pat $(,)?) => ({\n-        match &$left {\n+    ($left:expr, $( $pattern:pat )|+ $( if $guard: expr )? $(,)?) => ({\n+        match $left {\n+            $( $pattern )|+ $( if $guard )? => {}\n             left_val => {\n-                if let $right = left_val {\n-                    // OK\n-                } else {\n-                    $crate::panicking::assert_matches_failed(\n-                        &*left_val,\n-                        $crate::stringify!($right),\n-                        $crate::option::Option::None\n-                    );\n-                }\n+                $crate::panicking::assert_matches_failed(\n+                    &left_val,\n+                    $crate::stringify!($($pattern)|+ $(if $guard)?),\n+                    $crate::option::Option::None\n+                );\n             }\n         }\n     });\n-    ($left:expr, $right:expr, $($arg:tt)+) => ({\n-        match &$left {\n+    ($left:expr, $( $pattern:pat )|+ $( if $guard: expr )?, $($arg:tt)+) => ({\n+        match $left {\n+            $( $pattern )|+ $( if $guard )? => {}\n             left_val => {\n-                if let $right = left_val {\n-                    // OK\n-                } else {\n-                    $crate::panicking::assert_matches_failed(\n-                        &*left_val,\n-                        $crate::stringify!($right),\n-                        $crate::option::Option::Some($crate::format_args!($($arg)+))\n-                    );\n-                }\n+                $crate::panicking::assert_matches_failed(\n+                    &left_val,\n+                    $crate::stringify!($($pattern)|+ $(if $guard)?),\n+                    $crate::option::Option::Some($crate::format_args!($($arg)+))\n+                );\n             }\n         }\n     });"}]}