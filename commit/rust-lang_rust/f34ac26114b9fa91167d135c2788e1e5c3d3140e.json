{"sha": "f34ac26114b9fa91167d135c2788e1e5c3d3140e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzNGFjMjYxMTRiOWZhOTExNjdkMTM1YzI3ODhlMWU1YzNkMzE0MGU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-08-27T23:20:59Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-09-08T11:15:10Z"}, "message": "resolve: Model shadowing restriction for macro_rules after modern macros\n\nThis is a regression for legacy macros that will be fixed in the next commit", "tree": {"sha": "8d248f212bc386f1c5aa617a7336fabc3930b9a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d248f212bc386f1c5aa617a7336fabc3930b9a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f34ac26114b9fa91167d135c2788e1e5c3d3140e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f34ac26114b9fa91167d135c2788e1e5c3d3140e", "html_url": "https://github.com/rust-lang/rust/commit/f34ac26114b9fa91167d135c2788e1e5c3d3140e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f34ac26114b9fa91167d135c2788e1e5c3d3140e/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83a51deef5b92d9131b19e53b0fc5a1bcf98f565", "url": "https://api.github.com/repos/rust-lang/rust/commits/83a51deef5b92d9131b19e53b0fc5a1bcf98f565", "html_url": "https://github.com/rust-lang/rust/commit/83a51deef5b92d9131b19e53b0fc5a1bcf98f565"}], "stats": {"total": 73, "additions": 45, "deletions": 28}, "files": [{"sha": "7494e7e4ce5a3e0316390c25808c3fca3a5f3811", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 16, "deletions": 23, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f34ac26114b9fa91167d135c2788e1e5c3d3140e/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34ac26114b9fa91167d135c2788e1e5c3d3140e/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=f34ac26114b9fa91167d135c2788e1e5c3d3140e", "patch": "@@ -46,7 +46,6 @@ use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::small_vec::ExpectOne;\n \n crate struct FromPrelude(bool);\n-crate struct FromExpansion(bool);\n \n #[derive(Clone)]\n pub struct InvocationData<'a> {\n@@ -481,7 +480,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n         }\n \n         let legacy_resolution = self.resolve_legacy_scope(&invocation.legacy_scope, path[0], false);\n-        let result = if let Some((legacy_binding, _)) = legacy_resolution {\n+        let result = if let Some(legacy_binding) = legacy_resolution {\n             Ok(legacy_binding.def())\n         } else {\n             match self.resolve_lexical_macro_path_segment(path[0], MacroNS, false, force,\n@@ -788,7 +787,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                             scope: &'a Cell<LegacyScope<'a>>,\n                             ident: Ident,\n                             record_used: bool)\n-                            -> Option<(&'a NameBinding<'a>, FromExpansion)> {\n+                            -> Option<&'a NameBinding<'a>> {\n         let ident = ident.modern();\n \n         // Names from inner scope that can't shadow names from outer scopes, e.g.\n@@ -798,15 +797,14 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n         //                    // the outer `mac` and we have and ambiguity error\n         //     mac!();\n         // }\n-        let mut potentially_ambiguous_result: Option<(&NameBinding, FromExpansion)> = None;\n+        let mut potentially_ambiguous_result: Option<&NameBinding> = None;\n \n         // Go through all the scopes and try to resolve the name.\n         let mut where_to_resolve = scope;\n-        let mut relative_depth = 0u32;\n         loop {\n             let result = match where_to_resolve.get() {\n                 LegacyScope::Binding(legacy_binding) => if ident == legacy_binding.ident {\n-                    Some((legacy_binding.binding, FromExpansion(relative_depth > 0)))\n+                    Some(legacy_binding.binding)\n                 } else {\n                     None\n                 }\n@@ -816,16 +814,11 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n             macro_rules! continue_search { () => {\n                 where_to_resolve = match where_to_resolve.get() {\n                     LegacyScope::Binding(binding) => &binding.parent,\n-                    LegacyScope::Invocation(invocation) => {\n-                        relative_depth = relative_depth.saturating_sub(1);\n-                        &invocation.legacy_scope\n-                    }\n+                    LegacyScope::Invocation(invocation) => &invocation.legacy_scope,\n                     LegacyScope::Expansion(invocation) => match invocation.expansion.get() {\n                         LegacyScope::Empty => &invocation.legacy_scope,\n-                        LegacyScope::Binding(..) | LegacyScope::Expansion(..) => {\n-                            relative_depth += 1;\n-                            &invocation.expansion\n-                        }\n+                        LegacyScope::Binding(..) |\n+                        LegacyScope::Expansion(..) => &invocation.expansion,\n                         LegacyScope::Invocation(..) => {\n                             where_to_resolve.set(invocation.legacy_scope.get());\n                             where_to_resolve\n@@ -847,12 +840,12 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                     // Push an ambiguity error for later reporting and\n                     // return something for better recovery.\n                     if let Some(previous_result) = potentially_ambiguous_result {\n-                        if result.0.def() != previous_result.0.def() {\n+                        if result.def() != previous_result.def() {\n                             self.ambiguity_errors.push(AmbiguityError {\n                                 span: ident.span,\n                                 name: ident.name,\n-                                b1: previous_result.0,\n-                                b2: result.0,\n+                                b1: previous_result,\n+                                b2: result,\n                             });\n                             return Some(previous_result);\n                         }\n@@ -861,7 +854,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                     // Found a solution that's not an ambiguity yet, but is \"suspicious\" and\n                     // can participate in ambiguities later on.\n                     // Remember it and go search for other solutions in outer scopes.\n-                    if (result.1).0 {\n+                    if result.expansion != Mark::root() {\n                         potentially_ambiguous_result = Some(result);\n \n                         continue_search!();\n@@ -933,16 +926,16 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                     self.suggest_macro_name(&ident.as_str(), kind, &mut err, span);\n                     err.emit();\n                 },\n-                (Some((legacy_binding, FromExpansion(_))), Ok((binding, FromPrelude(false)))) |\n-                (Some((legacy_binding, FromExpansion(true))), Ok((binding, FromPrelude(true)))) => {\n+                (Some(legacy_binding), Ok((binding, FromPrelude(from_prelude))))\n+                        if !from_prelude || legacy_binding.expansion != Mark::root() => {\n                     if legacy_binding.def_ignoring_ambiguity() != binding.def_ignoring_ambiguity() {\n                         self.report_ambiguity_error(ident.name, span, legacy_binding, binding);\n                     }\n                 },\n-                // OK, non-macro-expanded legacy wins over macro prelude even if defs are different\n-                (Some((legacy_binding, FromExpansion(false))), Ok((_, FromPrelude(true)))) |\n+                // OK, non-macro-expanded legacy wins over prelude even if defs are different\n+                (Some(legacy_binding), Ok(_)) |\n                 // OK, unambiguous resolution\n-                (Some((legacy_binding, _)), Err(_)) => {\n+                (Some(legacy_binding), Err(_)) => {\n                     check_consistency(self, legacy_binding.def());\n                 }\n                 // OK, unambiguous resolution"}, {"sha": "d9c18408ac9ae30fb50b7ddb3fc1faf73c11e0ad", "filename": "src/libunwind/libunwind.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f34ac26114b9fa91167d135c2788e1e5c3d3140e/src%2Flibunwind%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34ac26114b9fa91167d135c2788e1e5c3d3140e/src%2Flibunwind%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flibunwind.rs?ref=f34ac26114b9fa91167d135c2788e1e5c3d3140e", "patch": "@@ -10,7 +10,7 @@\n \n #![allow(nonstandard_style)]\n \n-macro_rules! cfg_if {\n+macro_rules! cfg_if2 {\n     ( $( if #[cfg( $meta:meta )] { $($it1:item)* } else { $($it2:item)* } )* ) =>\n         ( $( $( #[cfg($meta)] $it1)* $( #[cfg(not($meta))] $it2)* )* )\n }\n@@ -92,7 +92,7 @@ extern \"C\" {\n     pub fn _Unwind_GetDataRelBase(ctx: *mut _Unwind_Context) -> _Unwind_Ptr;\n }\n \n-cfg_if! {\n+cfg_if2! {\n if #[cfg(all(any(target_os = \"ios\", target_os = \"netbsd\", not(target_arch = \"arm\"))))] {\n     // Not ARM EHABI\n     #[repr(C)]\n@@ -238,4 +238,4 @@ if #[cfg(not(all(target_os = \"ios\", target_arch = \"arm\")))] {\n         _Unwind_SjLj_RaiseException(exc)\n     }\n }\n-} // cfg_if!\n+} // cfg_if2!"}, {"sha": "85d8f29fe28b68bed81e812ff731b39e75389824", "filename": "src/test/ui/macros/macro-shadowing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34ac26114b9fa91167d135c2788e1e5c3d3140e/src%2Ftest%2Fui%2Fmacros%2Fmacro-shadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34ac26114b9fa91167d135c2788e1e5c3d3140e/src%2Ftest%2Fui%2Fmacros%2Fmacro-shadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-shadowing.rs?ref=f34ac26114b9fa91167d135c2788e1e5c3d3140e", "patch": "@@ -28,7 +28,7 @@ foo!(); //~ ERROR `foo` is ambiguous\n \n macro_rules! m2 { () => {\n     macro_rules! foo { () => {} }\n-    foo!();\n+    foo!(); //~ ERROR `foo` is ambiguous\n }}\n m2!();\n //^ Since `foo` is not used outside this expansion, it is not a shadowing error."}, {"sha": "0f28f123b43d90e2adb64843b3773b2c4310cf57", "filename": "src/test/ui/macros/macro-shadowing.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f34ac26114b9fa91167d135c2788e1e5c3d3140e/src%2Ftest%2Fui%2Fmacros%2Fmacro-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f34ac26114b9fa91167d135c2788e1e5c3d3140e/src%2Ftest%2Fui%2Fmacros%2Fmacro-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-shadowing.stderr?ref=f34ac26114b9fa91167d135c2788e1e5c3d3140e", "patch": "@@ -30,6 +30,30 @@ LL | macro_rules! foo { () => {} }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: macro-expanded macros do not shadow\n \n-error: aborting due to 2 previous errors\n+error[E0659]: `foo` is ambiguous\n+  --> $DIR/macro-shadowing.rs:31:5\n+   |\n+LL |     foo!(); //~ ERROR `foo` is ambiguous\n+   |     ^^^\n+   |\n+note: `foo` could refer to the name defined here\n+  --> $DIR/macro-shadowing.rs:30:5\n+   |\n+LL |     macro_rules! foo { () => {} }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | m2!();\n+   | ------ in this macro invocation\n+note: `foo` could also refer to the name defined here\n+  --> $DIR/macro-shadowing.rs:20:5\n+   |\n+LL |     macro_rules! foo { () => {} }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | m1!();\n+   | ------ in this macro invocation\n+   = note: macro-expanded macros do not shadow\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0659`."}]}