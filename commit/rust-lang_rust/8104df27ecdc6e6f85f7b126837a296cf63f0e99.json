{"sha": "8104df27ecdc6e6f85f7b126837a296cf63f0e99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMDRkZjI3ZWNkYzZlNmY4NWY3YjEyNjgzN2EyOTZjZjYzZjBlOTk=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-11T22:59:33Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-12T05:56:47Z"}, "message": "Add method `visit_with` to `MacroGenerable`", "tree": {"sha": "ba7f6abbec7457afab4a4d3bc6f0ae1b5e2dc61f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba7f6abbec7457afab4a4d3bc6f0ae1b5e2dc61f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8104df27ecdc6e6f85f7b126837a296cf63f0e99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8104df27ecdc6e6f85f7b126837a296cf63f0e99", "html_url": "https://github.com/rust-lang/rust/commit/8104df27ecdc6e6f85f7b126837a296cf63f0e99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8104df27ecdc6e6f85f7b126837a296cf63f0e99/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35841eea8b9eac8dcfc675cf7fb7902a4d2a57d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/35841eea8b9eac8dcfc675cf7fb7902a4d2a57d7", "html_url": "https://github.com/rust-lang/rust/commit/35841eea8b9eac8dcfc675cf7fb7902a4d2a57d7"}], "stats": {"total": 30, "additions": 21, "deletions": 9}, "files": [{"sha": "a65007cc8e10901ce3d4fe7c5443d9aaa9d0660f", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8104df27ecdc6e6f85f7b126837a296cf63f0e99/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8104df27ecdc6e6f85f7b126837a296cf63f0e99/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=8104df27ecdc6e6f85f7b126837a296cf63f0e99", "patch": "@@ -41,6 +41,7 @@ trait MacroGenerable: Sized {\n \n     // Fold this node or list of nodes using the given folder.\n     fn fold_with<F: Folder>(self, folder: &mut F) -> Self;\n+    fn visit_with<'v, V: Visitor<'v>>(&'v self, visitor: &mut V);\n \n     // Return a placeholder expansion to allow compilation to continue after an erroring expansion.\n     fn dummy(span: Span) -> Self;\n@@ -50,7 +51,9 @@ trait MacroGenerable: Sized {\n }\n \n macro_rules! impl_macro_generable {\n-    ($($ty:ty: $kind_name:expr, .$make:ident, $(.$fold:ident)* $(lift .$fold_elt:ident)*,\n+    ($($ty:ty: $kind_name:expr, .$make:ident,\n+               $(.$fold:ident)*  $(lift .$fold_elt:ident)*,\n+               $(.$visit:ident)* $(lift .$visit_elt:ident)*,\n                |$span:ident| $dummy:expr;)*) => { $(\n         impl MacroGenerable for $ty {\n             fn kind_name() -> &'static str { $kind_name }\n@@ -59,21 +62,27 @@ macro_rules! impl_macro_generable {\n                 $( folder.$fold(self) )*\n                 $( self.into_iter().flat_map(|item| folder. $fold_elt (item)).collect() )*\n             }\n+            fn visit_with<'v, V: Visitor<'v>>(&'v self, visitor: &mut V) {\n+                $( visitor.$visit(self) )*\n+                $( for item in self.as_slice() { visitor. $visit_elt (item) } )*\n+            }\n             fn dummy($span: Span) -> Self { $dummy }\n         }\n     )* }\n }\n \n impl_macro_generable! {\n-    P<ast::Expr>: \"expression\", .make_expr, .fold_expr, |span| DummyResult::raw_expr(span);\n-    P<ast::Pat>:  \"pattern\",    .make_pat,  .fold_pat,  |span| P(DummyResult::raw_pat(span));\n-    P<ast::Ty>:   \"type\",       .make_ty,   .fold_ty,   |span| DummyResult::raw_ty(span);\n-    SmallVector<ast::ImplItem>:\n-        \"impl item\", .make_impl_items, lift .fold_impl_item, |_span| SmallVector::zero();\n-    SmallVector<P<ast::Item>>:\n-        \"item\",      .make_items,      lift .fold_item,      |_span| SmallVector::zero();\n+    P<ast::Pat>: \"pattern\", .make_pat, .fold_pat, .visit_pat, |span| P(DummyResult::raw_pat(span));\n+    P<ast::Ty>:  \"type\",    .make_ty,  .fold_ty,  .visit_ty,  |span| DummyResult::raw_ty(span);\n+    P<ast::Expr>:\n+        \"expression\", .make_expr, .fold_expr, .visit_expr, |span| DummyResult::raw_expr(span);\n     SmallVector<ast::Stmt>:\n-        \"statement\", .make_stmts,      lift .fold_stmt,      |_span| SmallVector::zero();\n+        \"statement\",  .make_stmts, lift .fold_stmt, lift .visit_stmt, |_span| SmallVector::zero();\n+    SmallVector<P<ast::Item>>:\n+        \"item\",       .make_items, lift .fold_item, lift .visit_item, |_span| SmallVector::zero();\n+    SmallVector<ast::ImplItem>:\n+        \"impl item\",  .make_impl_items, lift .fold_impl_item, lift .visit_impl_item,\n+        |_span| SmallVector::zero();\n }\n \n impl MacroGenerable for Option<P<ast::Expr>> {\n@@ -85,6 +94,9 @@ impl MacroGenerable for Option<P<ast::Expr>> {\n     fn fold_with<F: Folder>(self, folder: &mut F) -> Self {\n         self.and_then(|expr| folder.fold_opt_expr(expr))\n     }\n+    fn visit_with<'v, V: Visitor<'v>>(&'v self, visitor: &mut V) {\n+        self.as_ref().map(|expr| visitor.visit_expr(expr));\n+    }\n }\n \n pub fn expand_expr(expr: ast::Expr, fld: &mut MacroExpander) -> P<ast::Expr> {"}]}