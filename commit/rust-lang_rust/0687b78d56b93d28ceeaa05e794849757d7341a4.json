{"sha": "0687b78d56b93d28ceeaa05e794849757d7341a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ODdiNzhkNTZiOTNkMjhjZWVhYTA1ZTc5NDg0OTc1N2Q3MzQxYTQ=", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-06-13T17:29:56Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-06-13T17:29:56Z"}, "message": "Speed up bootstrap a little.", "tree": {"sha": "abcb5945396ed154503058b279527afff54535c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abcb5945396ed154503058b279527afff54535c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0687b78d56b93d28ceeaa05e794849757d7341a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0687b78d56b93d28ceeaa05e794849757d7341a4", "html_url": "https://github.com/rust-lang/rust/commit/0687b78d56b93d28ceeaa05e794849757d7341a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0687b78d56b93d28ceeaa05e794849757d7341a4/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4fbb93113aa4f0a0cd08e74afb35381bbfbc7f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4fbb93113aa4f0a0cd08e74afb35381bbfbc7f0", "html_url": "https://github.com/rust-lang/rust/commit/f4fbb93113aa4f0a0cd08e74afb35381bbfbc7f0"}], "stats": {"total": 78, "additions": 33, "deletions": 45}, "files": [{"sha": "03b7028b2fa5526f8f0e40db3b5dfdf6ef3fb909", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0687b78d56b93d28ceeaa05e794849757d7341a4/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0687b78d56b93d28ceeaa05e794849757d7341a4/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=0687b78d56b93d28ceeaa05e794849757d7341a4", "patch": "@@ -10,12 +10,10 @@ use std::process;\n use getopts::Options;\n \n use crate::builder::Builder;\n+use crate::cache::{Interned, INTERNER};\n use crate::config::Config;\n-use crate::metadata;\n use crate::{Build, DocTests};\n \n-use crate::cache::{Interned, INTERNER};\n-\n /// Deserialized version of all flags for this compile.\n pub struct Flags {\n     pub verbose: usize, // number of -v args; each extra -v after the first is passed to Cargo\n@@ -444,8 +442,7 @@ Arguments:\n         // All subcommands except `clean` can have an optional \"Available paths\" section\n         if matches.opt_present(\"verbose\") {\n             let config = Config::parse(&[\"build\".to_string()]);\n-            let mut build = Build::new(config);\n-            metadata::build(&mut build);\n+            let build = Build::new(config);\n \n             let maybe_rules_help = Builder::get_help(&build, subcommand.as_str());\n             extra_help.push_str(maybe_rules_help.unwrap_or_default().as_str());"}, {"sha": "a125b49fc01e6fd6e5555223e71228bf1236bbde", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0687b78d56b93d28ceeaa05e794849757d7341a4/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0687b78d56b93d28ceeaa05e794849757d7341a4/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=0687b78d56b93d28ceeaa05e794849757d7341a4", "patch": "@@ -271,7 +271,7 @@ struct Crate {\n \n impl Crate {\n     fn is_local(&self, build: &Build) -> bool {\n-        self.path.starts_with(&build.config.src) && !self.path.to_string_lossy().ends_with(\"_shim\")\n+        self.path.starts_with(&build.config.src)\n     }\n \n     fn local_path(&self, build: &Build) -> PathBuf {"}, {"sha": "185f0ddb831e74d927c3c97b1bde629000ea3a04", "filename": "src/bootstrap/metadata.rs", "status": "modified", "additions": 29, "deletions": 36, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/0687b78d56b93d28ceeaa05e794849757d7341a4/src%2Fbootstrap%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0687b78d56b93d28ceeaa05e794849757d7341a4/src%2Fbootstrap%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmetadata.rs?ref=0687b78d56b93d28ceeaa05e794849757d7341a4", "patch": "@@ -35,49 +35,24 @@ struct ResolveNode {\n }\n \n pub fn build(build: &mut Build) {\n-    let mut resolves = Vec::new();\n-    build_krate(&build.std_features(), build, &mut resolves, \"src/libstd\");\n-    build_krate(\"\", build, &mut resolves, \"src/libtest\");\n-    build_krate(&build.rustc_features(), build, &mut resolves, \"src/rustc\");\n-\n-    let mut id2name = HashMap::with_capacity(build.crates.len());\n-    for (name, krate) in build.crates.iter() {\n-        id2name.insert(krate.id.clone(), name.clone());\n-    }\n-\n-    for node in resolves {\n-        let name = match id2name.get(&node.id) {\n-            Some(name) => name,\n-            None => continue,\n-        };\n-\n-        let krate = build.crates.get_mut(name).unwrap();\n-        for dep in node.dependencies.iter() {\n-            let dep = match id2name.get(dep) {\n-                Some(dep) => dep,\n-                None => continue,\n-            };\n-            krate.deps.insert(*dep);\n-        }\n-    }\n-}\n-\n-fn build_krate(features: &str, build: &mut Build, resolves: &mut Vec<ResolveNode>, krate: &str) {\n     // Run `cargo metadata` to figure out what crates we're testing.\n-    //\n-    // Down below we're going to call `cargo test`, but to test the right set\n-    // of packages we're going to have to know what `-p` arguments to pass it\n-    // to know what crates to test. Here we run `cargo metadata` to learn about\n-    // the dependency graph and what `-p` arguments there are.\n+    let features: Vec<_> = build\n+        .std_features()\n+        .split_whitespace()\n+        .map(|f| format!(\"test/{}\", f))\n+        .chain(build.rustc_features().split_whitespace().map(|f| format!(\"rustc-main/{}\", f)))\n+        .collect();\n     let mut cargo = Command::new(&build.initial_cargo);\n     cargo\n         .arg(\"metadata\")\n         .arg(\"--format-version\")\n         .arg(\"1\")\n         .arg(\"--features\")\n-        .arg(features)\n+        .arg(features.join(\",\"))\n+        .arg(\"-Zpackage-features\")\n         .arg(\"--manifest-path\")\n-        .arg(build.src.join(krate).join(\"Cargo.toml\"));\n+        .arg(build.src.join(\"Cargo.toml\"))\n+        .env(\"RUSTC_BOOTSTRAP\", \"1\");\n     let output = output(&mut cargo);\n     let output: Output = serde_json::from_str(&output).unwrap();\n     for package in output.packages {\n@@ -88,5 +63,23 @@ fn build_krate(features: &str, build: &mut Build, resolves: &mut Vec<ResolveNode\n             build.crates.insert(name, Crate { name, id: package.id, deps: HashSet::new(), path });\n         }\n     }\n-    resolves.extend(output.resolve.nodes);\n+\n+    let id2name: HashMap<_, _> =\n+        build.crates.iter().map(|(name, krate)| (krate.id.clone(), name.clone())).collect();\n+\n+    for node in output.resolve.nodes {\n+        let name = match id2name.get(&node.id) {\n+            Some(name) => name,\n+            None => continue,\n+        };\n+\n+        let krate = build.crates.get_mut(name).unwrap();\n+        for dep in node.dependencies.iter() {\n+            let dep = match id2name.get(dep) {\n+                Some(dep) => dep,\n+                None => continue,\n+            };\n+            krate.deps.insert(*dep);\n+        }\n+    }\n }"}, {"sha": "8659acf1cc5a5a2dd180db8a280242025000a721", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0687b78d56b93d28ceeaa05e794849757d7341a4/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0687b78d56b93d28ceeaa05e794849757d7341a4/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=0687b78d56b93d28ceeaa05e794849757d7341a4", "patch": "@@ -1654,9 +1654,7 @@ impl Step for Crate {\n     fn should_run(mut run: ShouldRun<'_>) -> ShouldRun<'_> {\n         let builder = run.builder;\n         for krate in run.builder.in_tree_crates(\"test\") {\n-            if !(krate.name.starts_with(\"rustc_\") && krate.name.ends_with(\"san\")) {\n-                run = run.path(krate.local_path(&builder).to_str().unwrap());\n-            }\n+            run = run.path(krate.local_path(&builder).to_str().unwrap());\n         }\n         run\n     }"}]}