{"sha": "04a691a511d0203b1f521960f845e623cc45d261", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0YTY5MWE1MTFkMDIwM2IxZjUyMTk2MGY4NDVlNjIzY2M0NWQyNjE=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-06-04T06:00:49Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-06-05T19:01:38Z"}, "message": "token_to_ident takes argument by reference", "tree": {"sha": "06693e51a145e83c36ab9dab9728946fa2c7634d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06693e51a145e83c36ab9dab9728946fa2c7634d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04a691a511d0203b1f521960f845e623cc45d261", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04a691a511d0203b1f521960f845e623cc45d261", "html_url": "https://github.com/rust-lang/rust/commit/04a691a511d0203b1f521960f845e623cc45d261", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04a691a511d0203b1f521960f845e623cc45d261/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "320359547126b1a317d49ed68102d1b6e8be5ca2", "url": "https://api.github.com/repos/rust-lang/rust/commits/320359547126b1a317d49ed68102d1b6e8be5ca2", "html_url": "https://github.com/rust-lang/rust/commit/320359547126b1a317d49ed68102d1b6e8be5ca2"}], "stats": {"total": 94, "additions": 48, "deletions": 46}, "files": [{"sha": "211665942a88dd06842a3feb1e4d9dd1530aa7e1", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=04a691a511d0203b1f521960f845e623cc45d261", "patch": "@@ -296,7 +296,7 @@ impl Session_ {\n \n     // pointless function, now...\n     pub fn str_of(@self, id: ast::ident) -> @~str {\n-        token::ident_to_str(id)\n+        token::ident_to_str(&id)\n     }\n \n     // pointless function, now..."}, {"sha": "546c516c287ca28583cc358b0a1c9b3fc3b420ed", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=04a691a511d0203b1f521960f845e623cc45d261", "patch": "@@ -177,7 +177,7 @@ fn visit_item(e: @mut Env, i: @ast::item) {\n                             }\n                             nn\n                         }\n-                        None => token::ident_to_str(i.ident)\n+                        None => token::ident_to_str(&i.ident)\n                     };\n                 if attr::find_attrs_by_name(i.attrs, \"nolink\").is_empty() {\n                     already_added =\n@@ -236,7 +236,7 @@ fn resolve_crate(e: @mut Env,\n                  hash: @~str,\n                  span: span)\n               -> ast::crate_num {\n-    let metas = metas_with_ident(token::ident_to_str(ident), metas);\n+    let metas = metas_with_ident(token::ident_to_str(&ident), metas);\n \n     match existing_match(e, metas, hash) {\n       None => {\n@@ -277,7 +277,7 @@ fn resolve_crate(e: @mut Env,\n             match attr::last_meta_item_value_str_by_name(load_ctxt.metas,\n                                                          \"name\") {\n                 Some(v) => v,\n-                None => token::ident_to_str(ident),\n+                None => token::ident_to_str(&ident),\n             };\n         let cmeta = @cstore::crate_metadata {\n             name: cname,\n@@ -306,7 +306,7 @@ fn resolve_crate_deps(e: @mut Env, cdata: @~[u8]) -> cstore::cnum_map {\n     for decoder::get_crate_deps(e.intr, cdata).each |dep| {\n         let extrn_cnum = dep.cnum;\n         let cname = dep.name;\n-        let cname_str = token::ident_to_str(dep.name);\n+        let cname_str = token::ident_to_str(&dep.name);\n         let cmetas = metas_with(dep.vers, @~\"vers\", ~[]);\n         debug!(\"resolving dep crate %s ver: %s hash: %s\",\n                *cname_str, *dep.vers, *dep.hash);"}, {"sha": "baf93416379a89d2268198c96b90bdb345714d4c", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=04a691a511d0203b1f521960f845e623cc45d261", "patch": "@@ -1110,7 +1110,7 @@ fn list_crate_deps(intr: @ident_interner, data: @~[u8], out: @io::Writer) {\n     for get_crate_deps(intr, data).each |dep| {\n         out.write_str(\n             fmt!(\"%d %s-%s-%s\\n\",\n-                 dep.cnum, *token::ident_to_str(dep.name), *dep.hash, *dep.vers));\n+                 dep.cnum, *token::ident_to_str(&dep.name), *dep.hash, *dep.vers));\n     }\n \n     out.write_str(\"\\n\");"}, {"sha": "a703f20e05c388b5c2825863d320c695681e9289", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=04a691a511d0203b1f521960f845e623cc45d261", "patch": "@@ -1055,7 +1055,7 @@ fn encode_info_for_item(ecx: @EncodeContext,\n                         tcx.sess.span_unimpl(\n                             item.span,\n                             fmt!(\"Method %s is both provided and static\",\n-                                 *token::ident_to_str(method_ty.ident)));\n+                                 *token::ident_to_str(&method_ty.ident)));\n                     }\n                     encode_type_param_bounds(ebml_w, ecx,\n                                              &m.generics.ty_params);"}, {"sha": "1ebf8f2e9f471574fba6782191b5a5baa383a861", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=04a691a511d0203b1f521960f845e623cc45d261", "patch": "@@ -60,7 +60,7 @@ pub fn load_library_crate(cx: &Context) -> (~str, @~[u8]) {\n       None => {\n         cx.diag.span_fatal(\n             cx.span, fmt!(\"can't find crate for `%s`\",\n-                          *token::ident_to_str(cx.ident)));\n+                          *token::ident_to_str(&cx.ident)));\n       }\n     }\n }"}, {"sha": "fa3bae3f5ac92600440da4e7c970c4995d7e0b65", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=04a691a511d0203b1f521960f845e623cc45d261", "patch": "@@ -711,7 +711,7 @@ impl BorrowckCtxt {\n         match *loan_path {\n             LpVar(id) => {\n                 match self.tcx.items.find(&id) {\n-                    Some(&ast_map::node_local(ident)) => {\n+                    Some(&ast_map::node_local(ref ident)) => {\n                         str::push_str(out, *token::ident_to_str(ident));\n                     }\n                     r => {\n@@ -725,7 +725,7 @@ impl BorrowckCtxt {\n             LpExtend(lp_base, _, LpInterior(mc::InteriorField(fname))) => {\n                 self.append_loan_path_to_str_from_interior(lp_base, out);\n                 match fname {\n-                    mc::NamedField(fname) => {\n+                    mc::NamedField(ref fname) => {\n                         str::push_char(out, '.');\n                         str::push_str(out, *token::ident_to_str(fname));\n                     }"}, {"sha": "fe30b9c4fd7213a538bab9698f94a59733dd8bf6", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=04a691a511d0203b1f521960f845e623cc45d261", "patch": "@@ -235,7 +235,7 @@ pub fn check_crate(tcx: ty::ctxt,\n             if field.ident != ident { loop; }\n             if field.vis == private {\n                 tcx.sess.span_err(span, fmt!(\"field `%s` is private\",\n-                                             *token::ident_to_str(ident)));\n+                                             *token::ident_to_str(&ident)));\n             }\n             break;\n         }\n@@ -244,7 +244,7 @@ pub fn check_crate(tcx: ty::ctxt,\n     // Given the ID of a method, checks to ensure it's in scope.\n     let check_method_common: @fn(span: span,\n                                  method_id: def_id,\n-                                 name: ident) =\n+                                 name: &ident) =\n             |span, method_id, name| {\n         if method_id.crate == local_crate {\n             let is_private = method_is_private(span, method_id.node);\n@@ -275,21 +275,21 @@ pub fn check_crate(tcx: ty::ctxt,\n         match def {\n             def_static_method(method_id, _, _) => {\n                 debug!(\"found static method def, checking it\");\n-                check_method_common(span, method_id, *path.idents.last())\n+                check_method_common(span, method_id, path.idents.last())\n             }\n             def_fn(def_id, _) => {\n                 if def_id.crate == local_crate {\n                     if local_item_is_private(span, def_id.node) &&\n                             !privileged_items.contains(&def_id.node) {\n                         tcx.sess.span_err(span,\n                                           fmt!(\"function `%s` is private\",\n-                                               *token::ident_to_str(*path.idents.last())));\n+                                               *token::ident_to_str(path.idents.last())));\n                     }\n                 } else if csearch::get_item_visibility(tcx.sess.cstore,\n                                                        def_id) != public {\n                     tcx.sess.span_err(span,\n                                       fmt!(\"function `%s` is private\",\n-                                           *token::ident_to_str(*path.idents.last())));\n+                                           *token::ident_to_str(path.idents.last())));\n                 }\n             }\n             _ => {}\n@@ -303,7 +303,7 @@ pub fn check_crate(tcx: ty::ctxt,\n             |span, origin, ident| {\n         match *origin {\n             method_static(method_id) => {\n-                check_method_common(span, method_id, ident)\n+                check_method_common(span, method_id, &ident)\n             }\n             method_param(method_param {\n                 trait_id: trait_id,\n@@ -328,7 +328,7 @@ pub fn check_crate(tcx: ty::ctxt,\n                                              .contains(&(trait_id.node)) => {\n                                             tcx.sess.span_err(span,\n                                                               fmt!(\"method `%s` is private\",\n-                                                                   *token::ident_to_str(method\n+                                                                   *token::ident_to_str(&method\n                                                                                         .ident)));\n                                         }\n                                         provided(_) | required(_) => {"}, {"sha": "c23932b14b51c1e02a067bde4fa71e5b049975a0", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=04a691a511d0203b1f521960f845e623cc45d261", "patch": "@@ -2948,11 +2948,11 @@ impl Resolver {\n         // top of the crate otherwise.\n         let mut containing_module;\n         let mut i;\n-        if *token::ident_to_str(module_path[0]) == ~\"self\" {\n+        if *token::ident_to_str(&module_path[0]) == ~\"self\" {\n             containing_module =\n                 self.get_nearest_normal_module_parent_or_self(module_);\n             i = 1;\n-        } else if *token::ident_to_str(module_path[0]) == ~\"super\" {\n+        } else if *token::ident_to_str(&module_path[0]) == ~\"super\" {\n             containing_module =\n                 self.get_nearest_normal_module_parent_or_self(module_);\n             i = 0;  // We'll handle `super` below.\n@@ -2962,7 +2962,7 @@ impl Resolver {\n \n         // Now loop through all the `super`s we find.\n         while i < module_path.len() &&\n-                *token::ident_to_str(module_path[i]) == ~\"super\" {\n+                *token::ident_to_str(&module_path[i]) == ~\"super\" {\n             debug!(\"(resolving module prefix) resolving `super` at %s\",\n                    self.module_to_str(containing_module));\n             match self.get_nearest_normal_module_parent(containing_module) {"}, {"sha": "ba88fe09e70abd758ec4e4ed7113efb4e4edf9cc", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=04a691a511d0203b1f521960f845e623cc45d261", "patch": "@@ -2505,7 +2505,7 @@ pub fn get_item_val(ccx: @CrateContext, id: ast::node_id) -> ValueRef {\n                 }\n                 ast::foreign_item_const(*) => {\n                     let typ = ty::node_id_to_type(tcx, ni.id);\n-                    let ident = token::ident_to_str(ni.ident);\n+                    let ident = token::ident_to_str(&ni.ident);\n                     let g = do str::as_c_str(*ident) |buf| {\n                         unsafe {\n                             llvm::LLVMAddGlobal(ccx.llmod,"}, {"sha": "dfcf364233be2aebac98f697f6b702a688280a08", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=04a691a511d0203b1f521960f845e623cc45d261", "patch": "@@ -344,7 +344,7 @@ pub fn trans_foreign_mod(ccx: @CrateContext,\n                 }\n             }\n             ast::foreign_item_const(*) => {\n-                let ident = token::ident_to_str(foreign_item.ident);\n+                let ident = token::ident_to_str(&foreign_item.ident);\n                 ccx.item_symbols.insert(foreign_item.id, copy *ident);\n             }\n         }"}, {"sha": "2ec4cc65528f3ba777354c7b5be644c04f93d74b", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=04a691a511d0203b1f521960f845e623cc45d261", "patch": "@@ -655,7 +655,7 @@ impl Repr for ty::Method {\n \n impl Repr for ast::ident {\n     fn repr(&self, tcx: ctxt) -> ~str {\n-        copy *token::ident_to_str(*self)\n+        copy *token::ident_to_str(self)\n     }\n }\n "}, {"sha": "bf0d5032b1f6ead257d21e540c3e9da1057da3a8", "filename": "src/librustdoc/extract.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibrustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibrustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fextract.rs?ref=04a691a511d0203b1f521960f845e623cc45d261", "patch": "@@ -24,10 +24,12 @@ use syntax::parse::token;\n \n // Hack; rather than thread an interner through everywhere, rely on\n // thread-local data\n+// Hack-Becomes-Feature: using thread-local-state everywhere...\n pub fn to_str(id: ast::ident) -> ~str {\n-    return copy *ident_to_str(id);\n+    return copy *ident_to_str(&id);\n }\n \n+// get rid of this pointless function:\n pub fn interner() -> @ident_interner {\n     return token::get_ident_interner();\n }"}, {"sha": "6906a64da1160e3bad28ccfe4a43f74992630d96", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=04a691a511d0203b1f521960f845e623cc45d261", "patch": "@@ -310,7 +310,7 @@ impl ExtCtxt {\n         *self.trace_mac = x\n     }\n     pub fn str_of(&self, id: ast::ident) -> ~str {\n-        copy *ident_to_str(id)\n+        copy *ident_to_str(&id)\n     }\n     pub fn ident_of(&self, st: &str) -> ast::ident {\n         str_to_ident(st)"}, {"sha": "8090bc613d64a0347599e2e9ccb85cc5e551c6ef", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=04a691a511d0203b1f521960f845e623cc45d261", "patch": "@@ -49,7 +49,7 @@ pub fn expand_expr(extsbox: @mut SyntaxEnv,\n                             fmt!(\"expected macro name without module \\\n                                   separators\"));\n                     }\n-                    let extname = pth.idents[0];\n+                    let extname = &pth.idents[0];\n                     let extnamestr = ident_to_str(extname);\n                     // leaving explicit deref here to highlight unbox op:\n                     match (*extsbox).find(&extname.name) {\n@@ -216,7 +216,7 @@ pub fn expand_item_mac(extsbox: @mut SyntaxEnv,\n         _ => cx.span_bug(it.span, \"invalid item macro invocation\")\n     };\n \n-    let extname = pth.idents[0];\n+    let extname = &pth.idents[0];\n     let interner = get_ident_interner();\n     let extnamestr = ident_to_str(extname);\n     let expanded = match (*extsbox).find(&extname.name) {\n@@ -228,7 +228,7 @@ pub fn expand_item_mac(extsbox: @mut SyntaxEnv,\n                 cx.span_fatal(pth.span,\n                               fmt!(\"macro %s! expects no ident argument, \\\n                                     given '%s'\", *extnamestr,\n-                                   *ident_to_str(it.ident)));\n+                                   *ident_to_str(&it.ident)));\n             }\n             cx.bt_push(ExpandedFrom(CallInfo {\n                 call_site: it.span,\n@@ -315,7 +315,7 @@ pub fn expand_stmt(extsbox: @mut SyntaxEnv,\n             fmt!(\"expected macro name without module \\\n                   separators\"));\n     }\n-    let extname = pth.idents[0];\n+    let extname = &pth.idents[0];\n     let extnamestr = ident_to_str(extname);\n     let (fully_expanded, sp) = match (*extsbox).find(&extname.name) {\n         None =>"}, {"sha": "04309ea21dc61acd05667b805b936012a247e333", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=04a691a511d0203b1f521960f845e623cc45d261", "patch": "@@ -80,7 +80,7 @@ pub mod rt {\n \n     impl ToSource for ast::ident {\n         fn to_source(&self, cx: @ExtCtxt) -> ~str {\n-            copy *interner_get(self.name)\n+            copy *ident_to_str(self)\n         }\n     }\n "}, {"sha": "9fb9def84e9cbee8f61dee925a6471498e8f88fa", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=04a691a511d0203b1f521960f845e623cc45d261", "patch": "@@ -205,7 +205,7 @@ pub fn nameize(p_s: @mut ParseSess, ms: &[matcher], res: &[@named_match])\n           } => {\n             if ret_val.contains_key(bind_name) {\n                 p_s.span_diagnostic.span_fatal(sp, ~\"Duplicated bind name: \"+\n-                                               *ident_to_str(*bind_name))\n+                                               *ident_to_str(bind_name))\n             }\n             ret_val.insert(*bind_name, res[idx]);\n           }\n@@ -373,8 +373,8 @@ pub fn parse(\n                 let nts = str::connect(vec::map(bb_eis, |ei| {\n                     match ei.elts[ei.idx].node {\n                       match_nonterminal(ref bind,ref name,_) => {\n-                        fmt!(\"%s ('%s')\", *ident_to_str(*name),\n-                             *ident_to_str(*bind))\n+                        fmt!(\"%s ('%s')\", *ident_to_str(name),\n+                             *ident_to_str(bind))\n                       }\n                       _ => fail!()\n                     } }), \" or \");\n@@ -398,7 +398,7 @@ pub fn parse(\n                 match ei.elts[ei.idx].node {\n                   match_nonterminal(_, ref name, idx) => {\n                     ei.matches[idx].push(@matched_nonterminal(\n-                        parse_nt(&rust_parser, *ident_to_str(*name))));\n+                        parse_nt(&rust_parser, *ident_to_str(name))));\n                     ei.idx += 1u;\n                   }\n                   _ => fail!()"}, {"sha": "140c89807f4ec1c05395ebd1f7d6c8821d7ed93c", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=04a691a511d0203b1f521960f845e623cc45d261", "patch": "@@ -151,7 +151,7 @@ pub fn add_new_extension(cx: @ExtCtxt,\n         |cx, sp, arg| generic_extension(cx, sp, name, arg, *lhses, *rhses);\n \n     return MRDef(MacroDef{\n-        name: copy *ident_to_str(name),\n+        name: copy *ident_to_str(&name),\n         ext: NormalTT(base::SyntaxExpanderTT{expander: exp, span: Some(sp)})\n     });\n }"}, {"sha": "fcd440420a18cb4e2273e8384606c3b48a64b135", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=04a691a511d0203b1f521960f845e623cc45d261", "patch": "@@ -145,8 +145,8 @@ fn lockstep_iter_size(t: &token_tree, r: &mut TtReader) -> lis {\n             lis_contradiction(_) => copy rhs,\n             lis_constraint(r_len, _) if l_len == r_len => copy lhs,\n             lis_constraint(r_len, ref r_id) => {\n-                let l_n = copy *ident_to_str(*l_id);\n-                let r_n = copy *ident_to_str(*r_id);\n+                let l_n = copy *ident_to_str(l_id);\n+                let r_n = copy *ident_to_str(r_id);\n                 lis_contradiction(fmt!(\"Inconsistent lockstep iteration: \\\n                                        '%s' has %u items, but '%s' has %u\",\n                                         l_n, l_len, r_n, r_len))\n@@ -296,7 +296,7 @@ pub fn tt_next_token(r: &mut TtReader) -> TokenAndSpan {\n                 r.sp_diag.span_fatal(\n                     copy r.cur_span, /* blame the macro writer */\n                     fmt!(\"variable '%s' is still repeating at this depth\",\n-                         *ident_to_str(ident)));\n+                         *ident_to_str(&ident)));\n               }\n             }\n           }"}, {"sha": "2fd0a7e33fff0f90b01644f46cf487f280172862", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=04a691a511d0203b1f521960f845e623cc45d261", "patch": "@@ -3980,7 +3980,7 @@ impl Parser {\n         match *self.token {\n             token::LIT_STR(s) => {\n                 self.bump();\n-                let the_string = ident_to_str(s);\n+                let the_string = ident_to_str(&s);\n                 let mut words = ~[];\n                 for str::each_word(*the_string) |s| { words.push(s) }\n                 let mut abis = AbiSet::empty();\n@@ -4542,7 +4542,7 @@ impl Parser {\n         match *self.token {\n             token::LIT_STR(s) => {\n                 self.bump();\n-                ident_to_str(s)\n+                ident_to_str(&s)\n             }\n             _ =>  self.fatal(\"expected string literal\")\n         }"}, {"sha": "ef889d5e4bcb24e56917c33156cc90ded346d5a8", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=04a691a511d0203b1f521960f845e623cc45d261", "patch": "@@ -178,28 +178,28 @@ pub fn to_str(in: @ident_interner, t: &Token) -> ~str {\n       }\n       LIT_INT_UNSUFFIXED(i) => { i.to_str() }\n       LIT_FLOAT(ref s, t) => {\n-        let mut body = copy *ident_to_str(*s);\n+        let mut body = copy *ident_to_str(s);\n         if body.ends_with(\".\") {\n             body += \"0\";  // `10.f` is not a float literal\n         }\n         body + ast_util::float_ty_to_str(t)\n       }\n       LIT_FLOAT_UNSUFFIXED(ref s) => {\n-        let mut body = copy *ident_to_str(*s);\n+        let mut body = copy *ident_to_str(s);\n         if body.ends_with(\".\") {\n             body += \"0\";  // `10.f` is not a float literal\n         }\n         body\n       }\n-      LIT_STR(ref s) => { ~\"\\\"\" + str::escape_default(*ident_to_str(*s)) + \"\\\"\" }\n+      LIT_STR(ref s) => { ~\"\\\"\" + str::escape_default(*ident_to_str(s)) + \"\\\"\" }\n \n       /* Name components */\n       IDENT(s, _) => copy *in.get(s.name),\n       LIFETIME(s) => fmt!(\"'%s\", *in.get(s.name)),\n       UNDERSCORE => ~\"_\",\n \n       /* Other */\n-      DOC_COMMENT(ref s) => copy *ident_to_str(*s),\n+      DOC_COMMENT(ref s) => copy *ident_to_str(s),\n       EOF => ~\"<eof>\",\n       INTERPOLATED(ref nt) => {\n         match nt {\n@@ -545,7 +545,7 @@ pub fn interner_get(name : Name) -> @~str {\n }\n \n // maps an identifier to the string that it corresponds to\n-pub fn ident_to_str(id : ast::ident) -> @~str {\n+pub fn ident_to_str(id : &ast::ident) -> @~str {\n     interner_get(id.name)\n }\n "}, {"sha": "58ab227a4ceeef5b03a2f200c867cad339329030", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a691a511d0203b1f521960f845e623cc45d261/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=04a691a511d0203b1f521960f845e623cc45d261", "patch": "@@ -1475,7 +1475,7 @@ pub fn print_decl(s: @ps, decl: @ast::decl) {\n }\n \n pub fn print_ident(s: @ps, ident: ast::ident) {\n-    word(s.s, *ident_to_str(ident));\n+    word(s.s, *ident_to_str(&ident));\n }\n \n pub fn print_for_decl(s: @ps, loc: @ast::local, coll: @ast::expr) {"}]}