{"sha": "4d6c2765e6904c3168b94012e83ae83b75251ab6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNmMyNzY1ZTY5MDRjMzE2OGI5NDAxMmU4M2FlODNiNzUyNTFhYjY=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-10-30T15:53:46Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-11-02T21:41:33Z"}, "message": "split off a separate RenderOptions struct", "tree": {"sha": "9a647a14ae141bbf7495b7ff224a3b2d0ff9307e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a647a14ae141bbf7495b7ff224a3b2d0ff9307e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d6c2765e6904c3168b94012e83ae83b75251ab6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d6c2765e6904c3168b94012e83ae83b75251ab6", "html_url": "https://github.com/rust-lang/rust/commit/4d6c2765e6904c3168b94012e83ae83b75251ab6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d6c2765e6904c3168b94012e83ae83b75251ab6/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "157833c588a9526783745c05db97aedaec0a1819", "url": "https://api.github.com/repos/rust-lang/rust/commits/157833c588a9526783745c05db97aedaec0a1819", "html_url": "https://github.com/rust-lang/rust/commit/157833c588a9526783745c05db97aedaec0a1819"}], "stats": {"total": 116, "additions": 67, "deletions": 49}, "files": [{"sha": "268b3741cceb3193e5b1a131346b94ed7463fe3d", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 32, "deletions": 22, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/4d6c2765e6904c3168b94012e83ae83b75251ab6/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6c2765e6904c3168b94012e83ae83b75251ab6/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=4d6c2765e6904c3168b94012e83ae83b75251ab6", "patch": "@@ -32,14 +32,13 @@ use opts;\n use passes::{self, DefaultPassOption};\n use theme;\n \n+/// Configuration options for rustdoc.\n #[derive(Clone)]\n pub struct Options {\n     // Basic options / Options passed directly to rustc\n \n     /// The crate root or Markdown file to load.\n     pub input: PathBuf,\n-    /// Output directory to generate docs into. Defaults to `doc`.\n-    pub output: PathBuf,\n     /// The name of the crate being documented.\n     pub crate_name: Option<String>,\n     /// How to format errors and warnings.\n@@ -91,20 +90,29 @@ pub struct Options {\n     /// Whether to display warnings during doc generation or while gathering doctests. By default,\n     /// all non-rustdoc-specific lints are allowed when generating docs.\n     pub display_warnings: bool,\n-    /// A pre-populated `IdMap` with the default headings and any headings added by Markdown files\n-    /// processed by `external_html`.\n-    pub id_map: IdMap,\n \n     // Options that alter generated documentation pages\n \n+    /// Crate version to note on the sidebar of generated docs.\n+    pub crate_version: Option<String>,\n+    /// Collected options specific to outputting final pages.\n+    pub render_options: RenderOptions,\n+}\n+\n+/// Configuration options for the HTML page-creation process.\n+#[derive(Clone)]\n+pub struct RenderOptions {\n+    /// Output directory to generate docs into. Defaults to `doc`.\n+    pub output: PathBuf,\n     /// External files to insert into generated pages.\n     pub external_html: ExternalHtml,\n+    /// A pre-populated `IdMap` with the default headings and any headings added by Markdown files\n+    /// processed by `external_html`.\n+    pub id_map: IdMap,\n     /// If present, playground URL to use in the \"Run\" button added to code samples.\n     ///\n     /// Be aware: This option can come both from the CLI and from crate attributes!\n     pub playground_url: Option<String>,\n-    /// Crate version to note on the sidebar of generated docs.\n-    pub crate_version: Option<String>,\n     /// Whether to sort modules alphabetically on a module page instead of using declaration order.\n     /// `true` by default.\n     ///\n@@ -390,7 +398,6 @@ impl Options {\n \n         Ok(Options {\n             input,\n-            output,\n             crate_name,\n             error_format,\n             libs,\n@@ -410,21 +417,24 @@ impl Options {\n             default_passes,\n             manual_passes,\n             display_warnings,\n-            id_map,\n-            external_html,\n-            playground_url,\n             crate_version,\n-            sort_modules_alphabetically,\n-            themes,\n-            extension_css,\n-            extern_html_root_urls,\n-            resource_suffix,\n-            enable_minification,\n-            enable_index_page,\n-            index_page,\n-            markdown_no_toc,\n-            markdown_css,\n-            markdown_playground_url,\n+            render_options: RenderOptions {\n+                output,\n+                external_html,\n+                id_map,\n+                playground_url,\n+                sort_modules_alphabetically,\n+                themes,\n+                extension_css,\n+                extern_html_root_urls,\n+                resource_suffix,\n+                enable_minification,\n+                enable_index_page,\n+                index_page,\n+                markdown_no_toc,\n+                markdown_css,\n+                markdown_playground_url,\n+            }\n         })\n     }\n "}, {"sha": "9b3c82b68dc94275dc3fb4ee547617e20c27934a", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d6c2765e6904c3168b94012e83ae83b75251ab6/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6c2765e6904c3168b94012e83ae83b75251ab6/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=4d6c2765e6904c3168b94012e83ae83b75251ab6", "patch": "@@ -509,7 +509,7 @@ pub fn run(mut krate: clean::Crate,\n            id_map: IdMap,\n            enable_index_page: bool,\n            index_page: Option<PathBuf>,\n-           options: config::Options,\n+           options: config::RenderOptions,\n            diag: &errors::Handler,\n ) -> Result<(), Error> {\n     let src_root = match krate.src {\n@@ -760,7 +760,7 @@ fn write_shared(\n     cache: &Cache,\n     search_index: String,\n     enable_minification: bool,\n-    options: &config::Options,\n+    options: &config::RenderOptions,\n     diag: &errors::Handler,\n ) -> Result<(), Error> {\n     // Write out the shared files. Note that these are shared among all rustdoc"}, {"sha": "76de26e0ceabddc7d9a6bdfa937a2fc588d095ec", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 33, "deletions": 25, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/4d6c2765e6904c3168b94012e83ae83b75251ab6/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6c2765e6904c3168b94012e83ae83b75251ab6/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=4d6c2765e6904c3168b94012e83ae83b75251ab6", "patch": "@@ -90,6 +90,7 @@ mod theme;\n struct Output {\n     krate: clean::Crate,\n     renderinfo: html::render::RenderInfo,\n+    renderopts: config::RenderOptions,\n     passes: Vec<String>,\n }\n \n@@ -381,36 +382,38 @@ fn main_args(args: &[String]) -> isize {\n                              options.display_warnings, options.linker, options.edition,\n                              options.codegen_options)\n         }\n-        (false, true) => return markdown::render(&options.input, options.output,\n-                                                 &options.markdown_css,\n-                                                 options.markdown_playground_url\n-                                                    .or(options.playground_url),\n-                                                 &options.external_html,\n-                                                 !options.markdown_no_toc, &diag),\n+        (false, true) => return markdown::render(&options.input, options.render_options.output,\n+                                                 &options.render_options.markdown_css,\n+                                                 options.render_options.markdown_playground_url\n+                                                    .or(options.render_options.playground_url),\n+                                                 &options.render_options.external_html,\n+                                                 !options.render_options.markdown_no_toc, &diag),\n         (false, false) => {}\n     }\n \n-    //TODO: split render-time options into their own struct so i don't have to clone here\n-    rust_input(options.clone(), move |out| {\n-        let Output { krate, passes, renderinfo } = out;\n+    // need to move these items separately because we lose them by the time the closure is called,\n+    // but we can't crates the Handler ahead of time because it's not Send\n+    let diag_opts = (options.error_format,\n+                     options.debugging_options.treat_err_as_bug,\n+                     options.debugging_options.ui_testing);\n+    rust_input(options, move |out| {\n+        let Output { krate, passes, renderinfo, renderopts } = out;\n         info!(\"going to format\");\n-        let diag = core::new_handler(options.error_format,\n-                                     None,\n-                                     options.debugging_options.treat_err_as_bug,\n-                                     options.debugging_options.ui_testing);\n-        let html_opts = options.clone();\n-        html::render::run(krate, options.extern_html_root_urls, &options.external_html, options.playground_url,\n-                          options.output,\n-                          options.resource_suffix,\n+        let (error_format, treat_err_as_bug, ui_testing) = diag_opts;\n+        let diag = core::new_handler(error_format, None, treat_err_as_bug, ui_testing);\n+        let html_opts = renderopts.clone();\n+        html::render::run(krate, renderopts.extern_html_root_urls, &renderopts.external_html,\n+                          renderopts.playground_url,\n+                          renderopts.output,\n+                          renderopts.resource_suffix,\n                           passes.into_iter().collect(),\n-                          options.extension_css,\n+                          renderopts.extension_css,\n                           renderinfo,\n-                          options.sort_modules_alphabetically,\n-                          options.themes,\n-                          options.enable_minification, options.id_map,\n-                          options.enable_index_page, options.index_page,\n-                          html_opts,\n-                          &diag)\n+                          renderopts.sort_modules_alphabetically,\n+                          renderopts.themes,\n+                          renderopts.enable_minification, renderopts.id_map,\n+                          renderopts.enable_index_page, renderopts.index_page,\n+                          html_opts, &diag)\n             .expect(\"failed to generate documentation\");\n         0\n     })\n@@ -482,7 +485,12 @@ where R: 'static + Send,\n             krate = pass(krate);\n         }\n \n-        tx.send(f(Output { krate: krate, renderinfo: renderinfo, passes: passes })).unwrap();\n+        tx.send(f(Output {\n+            krate: krate,\n+            renderinfo: renderinfo,\n+            renderopts: options.render_options,\n+            passes: passes\n+        })).unwrap();\n     }));\n \n     match result {"}]}