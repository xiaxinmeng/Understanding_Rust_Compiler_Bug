{"sha": "69ee5c9c5ef212f7911028c9ddf581559e6565c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ZWU1YzljNWVmMjEyZjc5MTEwMjhjOWRkZjU4MTU1OWU2NTY1YzM=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-20T08:47:04Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-20T08:47:04Z"}, "message": "Merge #999\n\n999: Fixed typo in `Interner`\u2019s name (`Intener`) r=matklad a=regexident\n\n\n\nCo-authored-by: Vincent Esche <regexident@gmail.com>", "tree": {"sha": "32ddffef8d2c21e9f5229f2608a1aaf8f60cc8b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32ddffef8d2c21e9f5229f2608a1aaf8f60cc8b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69ee5c9c5ef212f7911028c9ddf581559e6565c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69ee5c9c5ef212f7911028c9ddf581559e6565c3", "html_url": "https://github.com/rust-lang/rust/commit/69ee5c9c5ef212f7911028c9ddf581559e6565c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69ee5c9c5ef212f7911028c9ddf581559e6565c3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "d080c8f02105bc52f069785ae3e843a6606560e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d080c8f02105bc52f069785ae3e843a6606560e1", "html_url": "https://github.com/rust-lang/rust/commit/d080c8f02105bc52f069785ae3e843a6606560e1"}, {"sha": "21f20d5debe141e5c0d34ab56c4563a8be077aca", "url": "https://api.github.com/repos/rust-lang/rust/commits/21f20d5debe141e5c0d34ab56c4563a8be077aca", "html_url": "https://github.com/rust-lang/rust/commit/21f20d5debe141e5c0d34ab56c4563a8be077aca"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "f3389c91fdb195235c1827ef5e13f420ae9419a0", "filename": "crates/ra_db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ee5c9c5ef212f7911028c9ddf581559e6565c3/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ee5c9c5ef212f7911028c9ddf581559e6565c3/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=69ee5c9c5ef212f7911028c9ddf581559e6565c3", "patch": "@@ -16,7 +16,7 @@ pub use crate::{\n     input::{\n         FileId, CrateId, SourceRoot, SourceRootId, CrateGraph, Dependency, Edition,\n     },\n-    loc2id::LocationIntener,\n+    loc2id::LocationInterner,\n };\n \n pub trait CheckCanceled: panic::RefUnwindSafe {"}, {"sha": "eae64a4ebc664a8398b4cb445d0e9b5475bf10b4", "filename": "crates/ra_db/src/loc2id.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/69ee5c9c5ef212f7911028c9ddf581559e6565c3/crates%2Fra_db%2Fsrc%2Floc2id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ee5c9c5ef212f7911028c9ddf581559e6565c3/crates%2Fra_db%2Fsrc%2Floc2id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Floc2id.rs?ref=69ee5c9c5ef212f7911028c9ddf581559e6565c3", "patch": "@@ -59,15 +59,15 @@ where\n }\n \n #[derive(Debug)]\n-pub struct LocationIntener<LOC, ID>\n+pub struct LocationInterner<LOC, ID>\n where\n     ID: ArenaId + Clone,\n     LOC: Clone + Eq + Hash,\n {\n     map: Mutex<Loc2IdMap<LOC, ID>>,\n }\n \n-impl<LOC, ID> panic::RefUnwindSafe for LocationIntener<LOC, ID>\n+impl<LOC, ID> panic::RefUnwindSafe for LocationInterner<LOC, ID>\n where\n     ID: ArenaId + Clone,\n     LOC: Clone + Eq + Hash,\n@@ -76,17 +76,17 @@ where\n {\n }\n \n-impl<LOC, ID> Default for LocationIntener<LOC, ID>\n+impl<LOC, ID> Default for LocationInterner<LOC, ID>\n where\n     ID: ArenaId + Clone,\n     LOC: Clone + Eq + Hash,\n {\n     fn default() -> Self {\n-        LocationIntener { map: Default::default() }\n+        LocationInterner { map: Default::default() }\n     }\n }\n \n-impl<LOC, ID> LocationIntener<LOC, ID>\n+impl<LOC, ID> LocationInterner<LOC, ID>\n where\n     ID: ArenaId + Clone,\n     LOC: Clone + Eq + Hash,"}, {"sha": "3d0a881c2b7cdcc6e4e08e609fc28e8cfe2db872", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/69ee5c9c5ef212f7911028c9ddf581559e6565c3/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ee5c9c5ef212f7911028c9ddf581559e6565c3/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=69ee5c9c5ef212f7911028c9ddf581559e6565c3", "patch": "@@ -4,7 +4,7 @@ use std::{\n     sync::Arc,\n };\n \n-use ra_db::{LocationIntener, FileId};\n+use ra_db::{LocationInterner, FileId};\n use ra_syntax::{TreeArc, SyntaxNode, SourceFile, AstNode, SyntaxNodePtr, ast};\n use ra_arena::{Arena, RawId, ArenaId, impl_arena_id};\n \n@@ -15,14 +15,14 @@ use crate::{\n \n #[derive(Debug, Default)]\n pub struct HirInterner {\n-    macros: LocationIntener<MacroCallLoc, MacroCallId>,\n-    fns: LocationIntener<ItemLoc<ast::FnDef>, FunctionId>,\n-    structs: LocationIntener<ItemLoc<ast::StructDef>, StructId>,\n-    enums: LocationIntener<ItemLoc<ast::EnumDef>, EnumId>,\n-    consts: LocationIntener<ItemLoc<ast::ConstDef>, ConstId>,\n-    statics: LocationIntener<ItemLoc<ast::StaticDef>, StaticId>,\n-    traits: LocationIntener<ItemLoc<ast::TraitDef>, TraitId>,\n-    types: LocationIntener<ItemLoc<ast::TypeAliasDef>, TypeId>,\n+    macros: LocationInterner<MacroCallLoc, MacroCallId>,\n+    fns: LocationInterner<ItemLoc<ast::FnDef>, FunctionId>,\n+    structs: LocationInterner<ItemLoc<ast::StructDef>, StructId>,\n+    enums: LocationInterner<ItemLoc<ast::EnumDef>, EnumId>,\n+    consts: LocationInterner<ItemLoc<ast::ConstDef>, ConstId>,\n+    statics: LocationInterner<ItemLoc<ast::StaticDef>, StaticId>,\n+    traits: LocationInterner<ItemLoc<ast::TraitDef>, TraitId>,\n+    types: LocationInterner<ItemLoc<ast::TypeAliasDef>, TypeId>,\n }\n \n impl HirInterner {\n@@ -204,7 +204,7 @@ impl<'a, DB: PersistentHirDatabase> LocationCtx<&'a DB> {\n }\n \n pub(crate) trait AstItemDef<N: AstNode>: ArenaId + Clone {\n-    fn interner(interner: &HirInterner) -> &LocationIntener<ItemLoc<N>, Self>;\n+    fn interner(interner: &HirInterner) -> &LocationInterner<ItemLoc<N>, Self>;\n     fn from_ast(ctx: LocationCtx<&impl PersistentHirDatabase>, ast: &N) -> Self {\n         let items = ctx.db.file_items(ctx.file_id);\n         let item_id = items.id_of(ctx.file_id, ast.syntax());\n@@ -238,7 +238,7 @@ pub(crate) trait AstItemDef<N: AstNode>: ArenaId + Clone {\n pub struct FunctionId(RawId);\n impl_arena_id!(FunctionId);\n impl AstItemDef<ast::FnDef> for FunctionId {\n-    fn interner(interner: &HirInterner) -> &LocationIntener<ItemLoc<ast::FnDef>, Self> {\n+    fn interner(interner: &HirInterner) -> &LocationInterner<ItemLoc<ast::FnDef>, Self> {\n         &interner.fns\n     }\n }\n@@ -247,7 +247,7 @@ impl AstItemDef<ast::FnDef> for FunctionId {\n pub struct StructId(RawId);\n impl_arena_id!(StructId);\n impl AstItemDef<ast::StructDef> for StructId {\n-    fn interner(interner: &HirInterner) -> &LocationIntener<ItemLoc<ast::StructDef>, Self> {\n+    fn interner(interner: &HirInterner) -> &LocationInterner<ItemLoc<ast::StructDef>, Self> {\n         &interner.structs\n     }\n }\n@@ -256,7 +256,7 @@ impl AstItemDef<ast::StructDef> for StructId {\n pub struct EnumId(RawId);\n impl_arena_id!(EnumId);\n impl AstItemDef<ast::EnumDef> for EnumId {\n-    fn interner(interner: &HirInterner) -> &LocationIntener<ItemLoc<ast::EnumDef>, Self> {\n+    fn interner(interner: &HirInterner) -> &LocationInterner<ItemLoc<ast::EnumDef>, Self> {\n         &interner.enums\n     }\n }\n@@ -265,7 +265,7 @@ impl AstItemDef<ast::EnumDef> for EnumId {\n pub struct ConstId(RawId);\n impl_arena_id!(ConstId);\n impl AstItemDef<ast::ConstDef> for ConstId {\n-    fn interner(interner: &HirInterner) -> &LocationIntener<ItemLoc<ast::ConstDef>, Self> {\n+    fn interner(interner: &HirInterner) -> &LocationInterner<ItemLoc<ast::ConstDef>, Self> {\n         &interner.consts\n     }\n }\n@@ -274,7 +274,7 @@ impl AstItemDef<ast::ConstDef> for ConstId {\n pub struct StaticId(RawId);\n impl_arena_id!(StaticId);\n impl AstItemDef<ast::StaticDef> for StaticId {\n-    fn interner(interner: &HirInterner) -> &LocationIntener<ItemLoc<ast::StaticDef>, Self> {\n+    fn interner(interner: &HirInterner) -> &LocationInterner<ItemLoc<ast::StaticDef>, Self> {\n         &interner.statics\n     }\n }\n@@ -283,7 +283,7 @@ impl AstItemDef<ast::StaticDef> for StaticId {\n pub struct TraitId(RawId);\n impl_arena_id!(TraitId);\n impl AstItemDef<ast::TraitDef> for TraitId {\n-    fn interner(interner: &HirInterner) -> &LocationIntener<ItemLoc<ast::TraitDef>, Self> {\n+    fn interner(interner: &HirInterner) -> &LocationInterner<ItemLoc<ast::TraitDef>, Self> {\n         &interner.traits\n     }\n }\n@@ -292,7 +292,7 @@ impl AstItemDef<ast::TraitDef> for TraitId {\n pub struct TypeId(RawId);\n impl_arena_id!(TypeId);\n impl AstItemDef<ast::TypeAliasDef> for TypeId {\n-    fn interner(interner: &HirInterner) -> &LocationIntener<ItemLoc<ast::TypeAliasDef>, Self> {\n+    fn interner(interner: &HirInterner) -> &LocationInterner<ItemLoc<ast::TypeAliasDef>, Self> {\n         &interner.types\n     }\n }"}]}