{"sha": "c56b32899fd5144b4dcc4ca2185ed3721ac56c4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1NmIzMjg5OWZkNTE0NGI0ZGNjNGNhMjE4NWVkMzcyMWFjNTZjNGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-25T00:25:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-25T00:25:31Z"}, "message": "Auto merge of #6630 - xFrednet:0000-configuration-documentation, r=llogiq\n\nDocumentation for adding configuration to a lint and common abbreviations\n\nThis PR adds some commonly used abbreviations to the `basis.md` file and a guide on how to implement a configuration value for a lint.\n\n* [Rendered `/doc/basics.md` (Abbreviation list)](https://github.com/xFrednet/rust-clippy/blob/0000-configuration-documentation/doc/basics.md#common-abbreviations)\n* [Rendered `/doc/adding_lints.md` (Configuration value guide)](https://github.com/xFrednet/rust-clippy/blob/0000-configuration-documentation/doc/adding_lints.md#adding-configuration-to-a-lint)\n\nI'm not sure if the guide is written in the best way. Style suggestions are appreciated. :upside_down_face:\n\n ---\n\nAgain a big **thank you** for everyone who helped to collect the abbreviation list over on [zulip]. I had a lot of fun, and it was also very informative. Keep up the good work :upside_down_face:\n\n[zulip]: https://rust-lang.zulipchat.com/#narrow/stream/257328-clippy/topic/Common.20abbreviations.20in.20basics.2Emd/near/223548065\n---\n\nchangelog: none", "tree": {"sha": "095be0b7057188645d70f75d28722a5fe9e8dd38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/095be0b7057188645d70f75d28722a5fe9e8dd38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c56b32899fd5144b4dcc4ca2185ed3721ac56c4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c56b32899fd5144b4dcc4ca2185ed3721ac56c4b", "html_url": "https://github.com/rust-lang/rust/commit/c56b32899fd5144b4dcc4ca2185ed3721ac56c4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c56b32899fd5144b4dcc4ca2185ed3721ac56c4b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70386ff352cd08b29e1810c098a8e73ee20b7770", "url": "https://api.github.com/repos/rust-lang/rust/commits/70386ff352cd08b29e1810c098a8e73ee20b7770", "html_url": "https://github.com/rust-lang/rust/commit/70386ff352cd08b29e1810c098a8e73ee20b7770"}, {"sha": "0373dc3ade666c4fb06ab9cca5fa840d4988a9c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0373dc3ade666c4fb06ab9cca5fa840d4988a9c3", "html_url": "https://github.com/rust-lang/rust/commit/0373dc3ade666c4fb06ab9cca5fa840d4988a9c3"}], "stats": {"total": 96, "additions": 96, "deletions": 0}, "files": [{"sha": "fd2a7d171d020aff7b99eb2826f199a6bd591287", "filename": "doc/adding_lints.md", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/c56b32899fd5144b4dcc4ca2185ed3721ac56c4b/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/c56b32899fd5144b4dcc4ca2185ed3721ac56c4b/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=c56b32899fd5144b4dcc4ca2185ed3721ac56c4b", "patch": "@@ -23,6 +23,7 @@ because that's clearly a non-descriptive name.\n   - [Running rustfmt](#running-rustfmt)\n   - [Debugging](#debugging)\n   - [PR Checklist](#pr-checklist)\n+  - [Adding configuration to a lint](#adding-configuration-to-a-lint)\n   - [Cheatsheet](#cheatsheet)\n \n ## Setup\n@@ -526,6 +527,81 @@ Before submitting your PR make sure you followed all of the basic requirements:\n - \\[ ] Added lint documentation\n - \\[ ] Run `cargo dev fmt`\n \n+## Adding configuration to a lint\n+\n+Clippy supports the configuration of lints values using a `clippy.toml` file in the workspace \n+directory. Adding a configuration to a lint can be useful for thresholds or to constrain some\n+behavior that can be seen as a false positive for some users. Adding a configuration is done \n+in the following steps:\n+\n+1. Adding a new configuration entry to [clippy_lints::utils::conf](/clippy_lints/src/utils/conf.rs)\n+    like this:\n+    ```rust\n+    /// Lint: LINT_NAME. <The configuration field doc comment>\n+    (configuration_ident, \"configuration_value\": Type, DefaultValue),\n+    ```\n+    The configuration value and identifier should usually be the same. The doc comment will be \n+    automatically added to the lint documentation.\n+2. Adding the configuration value to the lint impl struct:\n+    1. This first requires the definition of a lint impl struct. Lint impl structs are usually \n+        generated with the `declare_lint_pass!` macro. This struct needs to be defined manually\n+        to add some kind of metadata to it:\n+        ```rust\n+        // Generated struct definition\n+        declare_lint_pass!(StructName => [\n+            LINT_NAME\n+        ]);\n+\n+        // New manual definition struct\n+        #[derive(Copy, Clone)]\n+        pub struct StructName {}\n+\n+        impl_lint_pass!(StructName => [\n+            LINT_NAME\n+        ]);\n+        ```\n+    \n+    2. Next add the configuration value and a corresponding creation method like this:\n+        ```rust\n+        #[derive(Copy, Clone)]\n+        pub struct StructName {\n+            configuration_ident: Type,\n+        }\n+\n+        // ...\n+\n+        impl StructName {\n+            pub fn new(configuration_ident: Type) -> Self {\n+                Self {\n+                    configuration_ident,\n+                }\n+            }\n+        }\n+        ```\n+3. Passing the configuration value to the lint impl struct:\n+\n+    First find the struct construction in the [clippy_lints lib file](/clippy_lints/src/lib.rs). \n+    Make sure that `clippy dev update_lints` added it beforehand. The configuration value is now \n+    cloned or copied into a local value that is then passed to the impl struct like this:\n+    ```rust\n+    // Default generated registration:\n+    store.register_late_pass(|| box module::StructName);\n+\n+    // New registration with configuration value\n+    let configuration_ident = conf.configuration_ident.clone();\n+    store.register_late_pass(move || box module::StructName::new(configuration_ident));\n+    ```\n+\n+    Congratulations the work is almost done. The configuration value can now be accessed\n+    in the linting code via `self.configuration_ident`.\n+\n+4. Adding tests:\n+    1. The default configured value can be tested like any normal lint in [`tests/ui`](/tests/ui).\n+    2. The configuration itself will be tested separately in [`tests/ui-toml`](/tests/ui-toml). \n+        Simply add a new subfolder with a fitting name. This folder contains a `clippy.toml` file \n+        with the configuration value and a rust file that should be linted by clippy. The test can \n+        otherwise be written as usual.\n+\n ## Cheatsheet\n \n Here are some pointers to things you are likely going to need for every lint:"}, {"sha": "57f83bdf32bc2bb748a72f6cacf7d7017d59e09d", "filename": "doc/basics.md", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c56b32899fd5144b4dcc4ca2185ed3721ac56c4b/doc%2Fbasics.md", "raw_url": "https://github.com/rust-lang/rust/raw/c56b32899fd5144b4dcc4ca2185ed3721ac56c4b/doc%2Fbasics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fbasics.md?ref=c56b32899fd5144b4dcc4ca2185ed3721ac56c4b", "patch": "@@ -11,6 +11,7 @@ the codebase take a look at [Adding Lints] or [Common Tools].\n   - [Get the Code](#get-the-code)\n   - [Building and Testing](#building-and-testing)\n   - [`cargo dev`](#cargo-dev)\n+  - [Common Abbreviations](#common-abbreviations)\n   - [PR](#pr)\n \n ## Get the Code\n@@ -94,3 +95,22 @@ cargo dev ra_setup\n \n We follow a rustc no merge-commit policy.\n See <https://rustc-dev-guide.rust-lang.org/contributing.html#opening-a-pr>.\n+\n+## Common Abbreviations\n+\n+| Abbreviation | Meaning                                |\n+| ------------ | -------------------------------------- |\n+| UB           | Undefined Behavior                     |\n+| FP           | False Positive                         |\n+| FN           | False Negative                         |\n+| ICE          | Internal Compiler Error                |\n+| AST          | Abstract Syntax Tree                   |\n+| MIR          | Mid-Level Intermediate Representation  |\n+| HIR          | High-Level Intermediate Representation |\n+| TCX          | Type context                           |\n+\n+This is a concise list of abbreviations that can come up during clippy development. An extensive\n+general list can be found in the [rustc-dev-guide glossary][glossary]. Always feel free to ask if\n+an abbreviation or meaning is unclear to you.\n+\n+[glossary]: https://rustc-dev-guide.rust-lang.org/appendix/glossary.html"}]}