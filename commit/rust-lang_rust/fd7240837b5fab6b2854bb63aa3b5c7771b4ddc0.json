{"sha": "fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkNzI0MDgzN2I1ZmFiNmIyODU0YmI2M2FhM2I1Yzc3NzFiNGRkYzA=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-02T14:09:46Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-02T14:09:46Z"}, "message": "Merge #915\n\n915: Bring BodySyntaxMapping in line with other source-map instances r=flodiebold a=matklad\n\n* rename to SourceMap\r\n* don't store the actual body inline, just return a pair\r\n\r\nr? @flodiebold \n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "88b876a78136413b8fbdf59a524e1bcf12d17f78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88b876a78136413b8fbdf59a524e1bcf12d17f78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0", "html_url": "https://github.com/rust-lang/rust/commit/fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "30b87eb88073e48b8cde416ca7ff4eb59e408e20", "url": "https://api.github.com/repos/rust-lang/rust/commits/30b87eb88073e48b8cde416ca7ff4eb59e408e20", "html_url": "https://github.com/rust-lang/rust/commit/30b87eb88073e48b8cde416ca7ff4eb59e408e20"}, {"sha": "f0a9d026fcd8bea1944287b1fe7c6573ca62ca9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0a9d026fcd8bea1944287b1fe7c6573ca62ca9d", "html_url": "https://github.com/rust-lang/rust/commit/f0a9d026fcd8bea1944287b1fe7c6573ca62ca9d"}], "stats": {"total": 241, "additions": 108, "deletions": 133}, "files": [{"sha": "6a22b0af54fcd29ec1be03238406f25044d73cea", "filename": "crates/ra_assists/src/fill_match_arms.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs?ref=fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0", "patch": "@@ -23,8 +23,8 @@ pub(crate) fn fill_match_arms(mut ctx: AssistCtx<impl HirDatabase>) -> Option<As\n     let function =\n         source_binder::function_from_child_node(ctx.db, ctx.frange.file_id, expr.syntax())?;\n     let infer_result = function.infer(ctx.db);\n-    let syntax_mapping = function.body_syntax_mapping(ctx.db);\n-    let node_expr = syntax_mapping.node_expr(expr)?;\n+    let source_map = function.body_source_map(ctx.db);\n+    let node_expr = source_map.node_expr(expr)?;\n     let match_expr_ty = infer_result[node_expr].clone();\n     let enum_def = match match_expr_ty {\n         Ty::Adt { def_id: AdtDef::Enum(e), .. } => e,"}, {"sha": "3ac14695095705b77505e7ec82fa19025faf7a78", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0", "patch": "@@ -5,11 +5,11 @@ use ra_db::{CrateId, SourceRootId, Edition};\n use ra_syntax::{ast::self, TreeArc, SyntaxNode};\n \n use crate::{\n-    Name, ScopesWithSyntaxMapping, Ty, HirFileId,\n+    Name, ScopesWithSourceMap, Ty, HirFileId,\n     HirDatabase, PersistentHirDatabase,\n     type_ref::TypeRef,\n     nameres::{ModuleScope, Namespace, lower::ImportId},\n-    expr::{Body, BodySyntaxMapping},\n+    expr::{Body, BodySourceMap},\n     ty::InferenceResult,\n     adt::{EnumVariantId, StructFieldId, VariantDef},\n     generics::GenericParams,\n@@ -191,7 +191,7 @@ impl Module {\n     }\n \n     pub fn declarations(self, db: &impl HirDatabase) -> Vec<ModuleDef> {\n-        let (lowered_module, _) = db.lower_module(self);\n+        let lowered_module = db.lower_module(self);\n         lowered_module\n             .declarations\n             .values()\n@@ -483,8 +483,8 @@ impl Function {\n         self.signature(db).name.clone()\n     }\n \n-    pub fn body_syntax_mapping(&self, db: &impl HirDatabase) -> Arc<BodySyntaxMapping> {\n-        db.body_syntax_mapping(*self)\n+    pub fn body_source_map(&self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n+        db.body_with_source_map(*self).1\n     }\n \n     pub fn body(&self, db: &impl HirDatabase) -> Arc<Body> {\n@@ -495,10 +495,10 @@ impl Function {\n         db.type_for_def((*self).into(), Namespace::Values)\n     }\n \n-    pub fn scopes(&self, db: &impl HirDatabase) -> ScopesWithSyntaxMapping {\n+    pub fn scopes(&self, db: &impl HirDatabase) -> ScopesWithSourceMap {\n         let scopes = db.expr_scopes(*self);\n-        let syntax_mapping = db.body_syntax_mapping(*self);\n-        ScopesWithSyntaxMapping { scopes, syntax_mapping }\n+        let source_map = db.body_with_source_map(*self).1;\n+        ScopesWithSourceMap { scopes, source_map }\n     }\n \n     pub fn signature(&self, db: &impl HirDatabase) -> Arc<FnSignature> {"}, {"sha": "437f96942d8a703b9f1d4ffac2a25990c22d064c", "filename": "crates/ra_hir/src/code_model_impl/module.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs?ref=fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0", "patch": "@@ -47,7 +47,7 @@ impl Module {\n         db: &impl HirDatabase,\n         import: ImportId,\n     ) -> TreeArc<ast::PathSegment> {\n-        let source_map = db.lower_module_source_map(*self);\n+        let (_, source_map) = db.lower_module_with_source_map(*self);\n         let (_, source) = self.definition_source(db);\n         source_map.get(&source, import)\n     }"}, {"sha": "21d22aa7fb8001b8d5d684029e49e881b4bd9bd3", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0", "patch": "@@ -48,14 +48,14 @@ pub trait PersistentHirDatabase: SourceDatabase + AsRef<HirInterner> {\n         delc_id: Option<SourceFileItemId>,\n     ) -> Arc<Vec<crate::module_tree::Submodule>>;\n \n-    #[salsa::invoke(crate::nameres::lower::LoweredModule::lower_module_query)]\n-    fn lower_module(&self, module: Module) -> (Arc<LoweredModule>, Arc<ImportSourceMap>);\n-\n-    #[salsa::invoke(crate::nameres::lower::LoweredModule::lower_module_module_query)]\n-    fn lower_module_module(&self, module: Module) -> Arc<LoweredModule>;\n+    #[salsa::invoke(crate::nameres::lower::LoweredModule::lower_module_with_source_map_query)]\n+    fn lower_module_with_source_map(\n+        &self,\n+        module: Module,\n+    ) -> (Arc<LoweredModule>, Arc<ImportSourceMap>);\n \n-    #[salsa::invoke(crate::nameres::lower::LoweredModule::lower_module_source_map_query)]\n-    fn lower_module_source_map(&self, module: Module) -> Arc<ImportSourceMap>;\n+    #[salsa::invoke(crate::nameres::lower::LoweredModule::lower_module_query)]\n+    fn lower_module(&self, module: Module) -> Arc<LoweredModule>;\n \n     #[salsa::invoke(crate::nameres::ItemMap::item_map_query)]\n     fn item_map(&self, krate: Crate) -> Arc<ItemMap>;\n@@ -105,11 +105,14 @@ pub trait HirDatabase: PersistentHirDatabase {\n     #[salsa::invoke(crate::ty::type_for_field)]\n     fn type_for_field(&self, field: StructField) -> Ty;\n \n-    #[salsa::invoke(crate::expr::body_hir)]\n-    fn body_hir(&self, func: Function) -> Arc<crate::expr::Body>;\n+    #[salsa::invoke(crate::expr::body_with_source_map_query)]\n+    fn body_with_source_map(\n+        &self,\n+        func: Function,\n+    ) -> (Arc<crate::expr::Body>, Arc<crate::expr::BodySourceMap>);\n \n-    #[salsa::invoke(crate::expr::body_syntax_mapping)]\n-    fn body_syntax_mapping(&self, func: Function) -> Arc<crate::expr::BodySyntaxMapping>;\n+    #[salsa::invoke(crate::expr::body_hir_query)]\n+    fn body_hir(&self, func: Function) -> Arc<crate::expr::Body>;\n \n     #[salsa::invoke(crate::ty::method_resolution::CrateImplBlocks::impls_in_crate_query)]\n     fn impls_in_crate(&self, krate: Crate) -> Arc<CrateImplBlocks>;"}, {"sha": "6c7489e63ba0bb8bc55e98e6758e85dba84b234b", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 39, "deletions": 54, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0", "patch": "@@ -16,7 +16,7 @@ use crate::{\n };\n use crate::{ path::GenericArgs, ty::primitive::{UintTy, UncertainIntTy, UncertainFloatTy}};\n \n-pub use self::scope::{ExprScopes, ScopesWithSyntaxMapping, ScopeEntryWithSyntax};\n+pub use self::scope::{ExprScopes, ScopesWithSourceMap, ScopeEntryWithSyntax};\n \n pub(crate) mod scope;\n \n@@ -48,13 +48,12 @@ pub struct Body {\n /// expression containing it; but for type inference etc., we want to operate on\n /// a structure that is agnostic to the actual positions of expressions in the\n /// file, so that we don't recompute types whenever some whitespace is typed.\n-#[derive(Debug, Eq, PartialEq)]\n-pub struct BodySyntaxMapping {\n-    body: Arc<Body>,\n-    expr_syntax_mapping: FxHashMap<SyntaxNodePtr, ExprId>,\n-    expr_syntax_mapping_back: ArenaMap<ExprId, SyntaxNodePtr>,\n-    pat_syntax_mapping: FxHashMap<SyntaxNodePtr, PatId>,\n-    pat_syntax_mapping_back: ArenaMap<PatId, SyntaxNodePtr>,\n+#[derive(Default, Debug, Eq, PartialEq)]\n+pub struct BodySourceMap {\n+    expr_map: FxHashMap<SyntaxNodePtr, ExprId>,\n+    expr_map_back: ArenaMap<ExprId, SyntaxNodePtr>,\n+    pat_map: FxHashMap<SyntaxNodePtr, PatId>,\n+    pat_map_back: ArenaMap<PatId, SyntaxNodePtr>,\n }\n \n impl Body {\n@@ -77,10 +76,6 @@ impl Body {\n     pub fn pats(&self) -> impl Iterator<Item = (PatId, &Pat)> {\n         self.pats.iter()\n     }\n-\n-    pub fn syntax_mapping(&self, db: &impl HirDatabase) -> Arc<BodySyntaxMapping> {\n-        db.body_syntax_mapping(self.owner)\n-    }\n }\n \n // needs arbitrary_self_types to be a method... or maybe move to the def?\n@@ -119,33 +114,29 @@ impl Index<PatId> for Body {\n     }\n }\n \n-impl BodySyntaxMapping {\n+impl BodySourceMap {\n     pub fn expr_syntax(&self, expr: ExprId) -> Option<SyntaxNodePtr> {\n-        self.expr_syntax_mapping_back.get(expr).cloned()\n+        self.expr_map_back.get(expr).cloned()\n     }\n \n     pub fn syntax_expr(&self, ptr: SyntaxNodePtr) -> Option<ExprId> {\n-        self.expr_syntax_mapping.get(&ptr).cloned()\n+        self.expr_map.get(&ptr).cloned()\n     }\n \n     pub fn node_expr(&self, node: &ast::Expr) -> Option<ExprId> {\n-        self.expr_syntax_mapping.get(&SyntaxNodePtr::new(node.syntax())).cloned()\n+        self.expr_map.get(&SyntaxNodePtr::new(node.syntax())).cloned()\n     }\n \n     pub fn pat_syntax(&self, pat: PatId) -> Option<SyntaxNodePtr> {\n-        self.pat_syntax_mapping_back.get(pat).cloned()\n+        self.pat_map_back.get(pat).cloned()\n     }\n \n     pub fn syntax_pat(&self, ptr: SyntaxNodePtr) -> Option<PatId> {\n-        self.pat_syntax_mapping.get(&ptr).cloned()\n+        self.pat_map.get(&ptr).cloned()\n     }\n \n     pub fn node_pat(&self, node: &ast::Pat) -> Option<PatId> {\n-        self.pat_syntax_mapping.get(&SyntaxNodePtr::new(node.syntax())).cloned()\n-    }\n-\n-    pub fn body(&self) -> &Arc<Body> {\n-        &self.body\n+        self.pat_map.get(&SyntaxNodePtr::new(node.syntax())).cloned()\n     }\n }\n \n@@ -467,18 +458,11 @@ impl Pat {\n \n // Queries\n \n-pub(crate) fn body_hir(db: &impl HirDatabase, func: Function) -> Arc<Body> {\n-    Arc::clone(&body_syntax_mapping(db, func).body)\n-}\n-\n struct ExprCollector {\n     owner: Function,\n     exprs: Arena<ExprId, Expr>,\n     pats: Arena<PatId, Pat>,\n-    expr_syntax_mapping: FxHashMap<SyntaxNodePtr, ExprId>,\n-    expr_syntax_mapping_back: ArenaMap<ExprId, SyntaxNodePtr>,\n-    pat_syntax_mapping: FxHashMap<SyntaxNodePtr, PatId>,\n-    pat_syntax_mapping_back: ArenaMap<PatId, SyntaxNodePtr>,\n+    source_map: BodySourceMap,\n     params: Vec<PatId>,\n     body_expr: Option<ExprId>,\n }\n@@ -489,26 +473,23 @@ impl ExprCollector {\n             owner,\n             exprs: Arena::default(),\n             pats: Arena::default(),\n-            expr_syntax_mapping: FxHashMap::default(),\n-            expr_syntax_mapping_back: ArenaMap::default(),\n-            pat_syntax_mapping: FxHashMap::default(),\n-            pat_syntax_mapping_back: ArenaMap::default(),\n+            source_map: BodySourceMap::default(),\n             params: Vec::new(),\n             body_expr: None,\n         }\n     }\n \n     fn alloc_expr(&mut self, expr: Expr, syntax_ptr: SyntaxNodePtr) -> ExprId {\n         let id = self.exprs.alloc(expr);\n-        self.expr_syntax_mapping.insert(syntax_ptr, id);\n-        self.expr_syntax_mapping_back.insert(id, syntax_ptr);\n+        self.source_map.expr_map.insert(syntax_ptr, id);\n+        self.source_map.expr_map_back.insert(id, syntax_ptr);\n         id\n     }\n \n     fn alloc_pat(&mut self, pat: Pat, syntax_ptr: SyntaxNodePtr) -> PatId {\n         let id = self.pats.alloc(pat);\n-        self.pat_syntax_mapping.insert(syntax_ptr, id);\n-        self.pat_syntax_mapping_back.insert(id, syntax_ptr);\n+        self.source_map.pat_map.insert(syntax_ptr, id);\n+        self.source_map.pat_map_back.insert(id, syntax_ptr);\n         id\n     }\n \n@@ -639,7 +620,7 @@ impl ExprCollector {\n             ast::ExprKind::ParenExpr(e) => {\n                 let inner = self.collect_expr_opt(e.expr());\n                 // make the paren expr point to the inner expression as well\n-                self.expr_syntax_mapping.insert(syntax_ptr, inner);\n+                self.source_map.expr_map.insert(syntax_ptr, inner);\n                 inner\n             }\n             ast::ExprKind::ReturnExpr(e) => {\n@@ -660,9 +641,11 @@ impl ExprCollector {\n                             } else if let Some(nr) = field.name_ref() {\n                                 // field shorthand\n                                 let id = self.exprs.alloc(Expr::Path(Path::from_name_ref(nr)));\n-                                self.expr_syntax_mapping\n+                                self.source_map\n+                                    .expr_map\n                                     .insert(SyntaxNodePtr::new(nr.syntax()), id);\n-                                self.expr_syntax_mapping_back\n+                                self.source_map\n+                                    .expr_map_back\n                                     .insert(id, SyntaxNodePtr::new(nr.syntax()));\n                                 id\n                             } else {\n@@ -910,36 +893,38 @@ impl ExprCollector {\n         self.body_expr = Some(body);\n     }\n \n-    fn into_body_syntax_mapping(self) -> BodySyntaxMapping {\n+    fn finish(self) -> (Body, BodySourceMap) {\n         let body = Body {\n             owner: self.owner,\n             exprs: self.exprs,\n             pats: self.pats,\n             params: self.params,\n             body_expr: self.body_expr.expect(\"A body should have been collected\"),\n         };\n-        BodySyntaxMapping {\n-            body: Arc::new(body),\n-            expr_syntax_mapping: self.expr_syntax_mapping,\n-            expr_syntax_mapping_back: self.expr_syntax_mapping_back,\n-            pat_syntax_mapping: self.pat_syntax_mapping,\n-            pat_syntax_mapping_back: self.pat_syntax_mapping_back,\n-        }\n+        (body, self.source_map)\n     }\n }\n \n-pub(crate) fn body_syntax_mapping(db: &impl HirDatabase, func: Function) -> Arc<BodySyntaxMapping> {\n+pub(crate) fn body_with_source_map_query(\n+    db: &impl HirDatabase,\n+    func: Function,\n+) -> (Arc<Body>, Arc<BodySourceMap>) {\n     let mut collector = ExprCollector::new(func);\n \n     // TODO: consts, etc.\n     collector.collect_fn_body(&func.source(db).1);\n \n-    Arc::new(collector.into_body_syntax_mapping())\n+    let (body, source_map) = collector.finish();\n+    (Arc::new(body), Arc::new(source_map))\n+}\n+\n+pub(crate) fn body_hir_query(db: &impl HirDatabase, func: Function) -> Arc<Body> {\n+    db.body_with_source_map(func).0\n }\n \n #[cfg(test)]\n-pub(crate) fn collect_fn_body_syntax(function: Function, node: &ast::FnDef) -> BodySyntaxMapping {\n+fn collect_fn_body_syntax(function: Function, node: &ast::FnDef) -> (Body, BodySourceMap) {\n     let mut collector = ExprCollector::new(function);\n     collector.collect_fn_body(node);\n-    collector.into_body_syntax_mapping()\n+    collector.finish()\n }"}, {"sha": "81fbc509eb53b6138aa779184ec4e2c49c8a115e", "filename": "crates/ra_hir/src/expr/scope.rs", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs?ref=fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0", "patch": "@@ -11,7 +11,7 @@ use ra_arena::{Arena, RawId, impl_arena_id};\n \n use crate::{\n     Name, AsName, Function,\n-    expr::{PatId, ExprId, Pat, Expr, Body, Statement, BodySyntaxMapping},\n+    expr::{PatId, ExprId, Pat, Expr, Body, Statement, BodySourceMap},\n     HirDatabase,\n };\n \n@@ -108,8 +108,8 @@ impl ExprScopes {\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n-pub struct ScopesWithSyntaxMapping {\n-    pub syntax_mapping: Arc<BodySyntaxMapping>,\n+pub struct ScopesWithSourceMap {\n+    pub source_map: Arc<BodySourceMap>,\n     pub scopes: Arc<ExprScopes>,\n }\n \n@@ -129,7 +129,7 @@ impl ScopeEntryWithSyntax {\n     }\n }\n \n-impl ScopesWithSyntaxMapping {\n+impl ScopesWithSourceMap {\n     fn scope_chain<'a>(&'a self, node: &SyntaxNode) -> impl Iterator<Item = ScopeId> + 'a {\n         generate(self.scope_for(node), move |&scope| self.scopes.scopes[scope].parent)\n     }\n@@ -138,7 +138,7 @@ impl ScopesWithSyntaxMapping {\n         self.scopes\n             .scope_for\n             .iter()\n-            .filter_map(|(id, scope)| Some((self.syntax_mapping.expr_syntax(*id)?, scope)))\n+            .filter_map(|(id, scope)| Some((self.source_map.expr_syntax(*id)?, scope)))\n             // find containing scope\n             .min_by_key(|(ptr, _scope)| {\n                 (!(ptr.range().start() <= offset && offset <= ptr.range().end()), ptr.range().len())\n@@ -155,7 +155,7 @@ impl ScopesWithSyntaxMapping {\n             .scopes\n             .scope_for\n             .iter()\n-            .filter_map(|(id, scope)| Some((self.syntax_mapping.expr_syntax(*id)?, scope)))\n+            .filter_map(|(id, scope)| Some((self.source_map.expr_syntax(*id)?, scope)))\n             .map(|(ptr, scope)| (ptr.range(), scope))\n             .filter(|(range, _)| range.start() <= offset && range.is_subrange(&r) && *range != r);\n \n@@ -185,7 +185,7 @@ impl ScopesWithSyntaxMapping {\n         ret.and_then(|entry| {\n             Some(ScopeEntryWithSyntax {\n                 name: entry.name().clone(),\n-                ptr: self.syntax_mapping.pat_syntax(entry.pat())?,\n+                ptr: self.source_map.pat_syntax(entry.pat())?,\n             })\n         })\n     }\n@@ -211,7 +211,7 @@ impl ScopesWithSyntaxMapping {\n     pub fn scope_for(&self, node: &SyntaxNode) -> Option<ScopeId> {\n         node.ancestors()\n             .map(SyntaxNodePtr::new)\n-            .filter_map(|ptr| self.syntax_mapping.syntax_expr(ptr))\n+            .filter_map(|ptr| self.source_map.syntax_expr(ptr))\n             .find_map(|it| self.scopes.scope_for(it))\n     }\n }\n@@ -316,12 +316,10 @@ mod tests {\n         let marker: &ast::PathExpr = find_node_at_offset(file.syntax(), off).unwrap();\n         let fn_def: &ast::FnDef = find_node_at_offset(file.syntax(), off).unwrap();\n         let irrelevant_function = Function { id: crate::ids::FunctionId::from_raw(0.into()) };\n-        let body_hir = expr::collect_fn_body_syntax(irrelevant_function, fn_def);\n-        let scopes = ExprScopes::new(Arc::clone(body_hir.body()));\n-        let scopes = ScopesWithSyntaxMapping {\n-            scopes: Arc::new(scopes),\n-            syntax_mapping: Arc::new(body_hir),\n-        };\n+        let (body, source_map) = expr::collect_fn_body_syntax(irrelevant_function, fn_def);\n+        let scopes = ExprScopes::new(Arc::new(body));\n+        let scopes =\n+            ScopesWithSourceMap { scopes: Arc::new(scopes), source_map: Arc::new(source_map) };\n         let actual = scopes\n             .scope_chain(marker.syntax())\n             .flat_map(|scope| scopes.scopes.entries(scope))\n@@ -417,12 +415,10 @@ mod tests {\n         let name_ref: &ast::NameRef = find_node_at_offset(file.syntax(), off).unwrap();\n \n         let irrelevant_function = Function { id: crate::ids::FunctionId::from_raw(0.into()) };\n-        let body_hir = expr::collect_fn_body_syntax(irrelevant_function, fn_def);\n-        let scopes = ExprScopes::new(Arc::clone(body_hir.body()));\n-        let scopes = ScopesWithSyntaxMapping {\n-            scopes: Arc::new(scopes),\n-            syntax_mapping: Arc::new(body_hir),\n-        };\n+        let (body, source_map) = expr::collect_fn_body_syntax(irrelevant_function, fn_def);\n+        let scopes = ExprScopes::new(Arc::new(body));\n+        let scopes =\n+            ScopesWithSourceMap { scopes: Arc::new(scopes), source_map: Arc::new(source_map) };\n         let local_name_entry = scopes.resolve_local_name(name_ref).unwrap();\n         let local_name = local_name_entry.ptr();\n         assert_eq!(local_name.range(), expected_name.syntax().range());"}, {"sha": "a6e744ea70e1d5b540f8f98253a86d092332c85c", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0", "patch": "@@ -60,7 +60,7 @@ pub use self::{\n     impl_block::{ImplBlock, ImplItem},\n     docs::{Docs, Documentation},\n     adt::AdtDef,\n-    expr::{ExprScopes, ScopesWithSyntaxMapping, ScopeEntryWithSyntax},\n+    expr::{ExprScopes, ScopesWithSourceMap, ScopeEntryWithSyntax},\n     resolve::{Resolver, Resolution},\n };\n "}, {"sha": "73919ee37a62d2f7521a4a7c5a2d520858d00c45", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0", "patch": "@@ -481,7 +481,7 @@ impl ItemMap {\n         let module_tree = db.module_tree(krate);\n         let input = module_tree\n             .modules()\n-            .map(|module_id| (module_id, db.lower_module_module(Module { krate, module_id })))\n+            .map(|module_id| (module_id, db.lower_module(Module { krate, module_id })))\n             .collect::<FxHashMap<_, _>>();\n \n         let resolver = Resolver::new(db, &input, krate);"}, {"sha": "56262ad6d70f041a4bdad4250ee5312462c4c18c", "filename": "crates/ra_hir/src/nameres/lower.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs?ref=fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0", "patch": "@@ -60,21 +60,14 @@ impl ImportSourceMap {\n }\n \n impl LoweredModule {\n-    pub(crate) fn lower_module_module_query(\n+    pub(crate) fn lower_module_query(\n         db: &impl PersistentHirDatabase,\n         module: Module,\n     ) -> Arc<LoweredModule> {\n-        db.lower_module(module).0\n-    }\n-\n-    pub(crate) fn lower_module_source_map_query(\n-        db: &impl PersistentHirDatabase,\n-        module: Module,\n-    ) -> Arc<ImportSourceMap> {\n-        db.lower_module(module).1\n+        db.lower_module_with_source_map(module).0\n     }\n \n-    pub(crate) fn lower_module_query(\n+    pub(crate) fn lower_module_with_source_map_query(\n         db: &impl PersistentHirDatabase,\n         module: Module,\n     ) -> (Arc<LoweredModule>, Arc<ImportSourceMap>) {"}, {"sha": "ea20cd15a24c50ddfe3102764905c4490c417b1a", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0", "patch": "@@ -157,7 +157,7 @@ pub fn macro_symbols(db: &impl HirDatabase, file_id: FileId) -> Vec<(SmolStr, Te\n         Some(it) => it,\n         None => return Vec::new(),\n     };\n-    let items = db.lower_module_module(module);\n+    let items = db.lower_module(module);\n     let mut res = Vec::new();\n \n     for macro_call_id in items"}, {"sha": "2fdfb54f44c9f3ac45abf3141017818a16291be3", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0", "patch": "@@ -1045,11 +1045,11 @@ fn test() {\n \n fn type_at_pos(db: &MockDatabase, pos: FilePosition) -> String {\n     let func = source_binder::function_from_position(db, pos).unwrap();\n-    let body_syntax_mapping = func.body_syntax_mapping(db);\n+    let body_source_map = func.body_source_map(db);\n     let inference_result = func.infer(db);\n     let (_, syntax) = func.source(db);\n     let node = algo::find_node_at_offset::<ast::Expr>(syntax.syntax(), pos.offset).unwrap();\n-    let expr = body_syntax_mapping.node_expr(node).unwrap();\n+    let expr = body_source_map.node_expr(node).unwrap();\n     let ty = &inference_result[expr];\n     ty.to_string()\n }\n@@ -1061,17 +1061,17 @@ fn infer(content: &str) -> String {\n     for fn_def in source_file.syntax().descendants().filter_map(ast::FnDef::cast) {\n         let func = source_binder::function_from_source(&db, file_id, fn_def).unwrap();\n         let inference_result = func.infer(&db);\n-        let body_syntax_mapping = func.body_syntax_mapping(&db);\n+        let body_source_map = func.body_source_map(&db);\n         let mut types = Vec::new();\n         for (pat, ty) in inference_result.type_of_pat.iter() {\n-            let syntax_ptr = match body_syntax_mapping.pat_syntax(pat) {\n+            let syntax_ptr = match body_source_map.pat_syntax(pat) {\n                 Some(sp) => sp,\n                 None => continue,\n             };\n             types.push((syntax_ptr, ty));\n         }\n         for (expr, ty) in inference_result.type_of_expr.iter() {\n-            let syntax_ptr = match body_syntax_mapping.expr_syntax(expr) {\n+            let syntax_ptr = match body_source_map.expr_syntax(expr) {\n                 Some(sp) => sp,\n                 None => continue,\n             };"}, {"sha": "0c90ed5b571d15ccff06c627c2904e47ee84a81d", "filename": "crates/ra_ide_api/src/change.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fchange.rs?ref=fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0", "patch": "@@ -223,8 +223,7 @@ impl RootDatabase {\n         self.query(hir::db::FileItemsQuery).sweep(sweep);\n         self.query(hir::db::FileItemQuery).sweep(sweep);\n \n-        self.query(hir::db::LowerModuleQuery).sweep(sweep);\n-        self.query(hir::db::LowerModuleSourceMapQuery).sweep(sweep);\n-        self.query(hir::db::BodySyntaxMappingQuery).sweep(sweep);\n+        self.query(hir::db::LowerModuleWithSourceMapQuery).sweep(sweep);\n+        self.query(hir::db::BodyWithSourceMapQuery).sweep(sweep);\n     }\n }"}, {"sha": "94c66be318fbbbdfb29eec8f36697bce7cd7cfb4", "filename": "crates/ra_ide_api/src/completion/complete_dot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0", "patch": "@@ -9,8 +9,8 @@ pub(super) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n         _ => return,\n     };\n     let infer_result = function.infer(ctx.db);\n-    let syntax_mapping = function.body_syntax_mapping(ctx.db);\n-    let expr = match syntax_mapping.node_expr(receiver) {\n+    let source_map = function.body_source_map(ctx.db);\n+    let expr = match source_map.node_expr(receiver) {\n         Some(expr) => expr,\n         None => return,\n     };"}, {"sha": "6bef9624ee03ea456a207635fbeb5f842e7c3095", "filename": "crates/ra_ide_api/src/completion/complete_struct_literal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_struct_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_struct_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_struct_literal.rs?ref=fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0", "patch": "@@ -9,8 +9,8 @@ pub(super) fn complete_struct_literal(acc: &mut Completions, ctx: &CompletionCon\n         _ => return,\n     };\n     let infer_result = function.infer(ctx.db);\n-    let syntax_mapping = function.body_syntax_mapping(ctx.db);\n-    let expr = match syntax_mapping.node_expr(struct_lit.into()) {\n+    let source_map = function.body_source_map(ctx.db);\n+    let expr = match source_map.node_expr(struct_lit.into()) {\n         Some(expr) => expr,\n         None => return,\n     };"}, {"sha": "9ec179593ae800e201e246bece95e29eda3fd513", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0", "patch": "@@ -54,10 +54,10 @@ pub(crate) fn reference_definition(\n         if let Some(method_call) = name_ref.syntax().parent().and_then(ast::MethodCallExpr::cast) {\n             tested_by!(goto_definition_works_for_methods);\n             let infer_result = function.infer(db);\n-            let syntax_mapping = function.body_syntax_mapping(db);\n+            let source_map = function.body_source_map(db);\n             let expr = ast::Expr::cast(method_call.syntax()).unwrap();\n             if let Some(func) =\n-                syntax_mapping.node_expr(expr).and_then(|it| infer_result.method_resolution(it))\n+                source_map.node_expr(expr).and_then(|it| infer_result.method_resolution(it))\n             {\n                 return Exact(NavigationTarget::from_function(db, func));\n             };\n@@ -66,10 +66,10 @@ pub(crate) fn reference_definition(\n         if let Some(field_expr) = name_ref.syntax().parent().and_then(ast::FieldExpr::cast) {\n             tested_by!(goto_definition_works_for_fields);\n             let infer_result = function.infer(db);\n-            let syntax_mapping = function.body_syntax_mapping(db);\n+            let source_map = function.body_source_map(db);\n             let expr = ast::Expr::cast(field_expr.syntax()).unwrap();\n             if let Some(field) =\n-                syntax_mapping.node_expr(expr).and_then(|it| infer_result.field_resolution(it))\n+                source_map.node_expr(expr).and_then(|it| infer_result.field_resolution(it))\n             {\n                 return Exact(NavigationTarget::from_field(db, field));\n             };\n@@ -80,11 +80,11 @@ pub(crate) fn reference_definition(\n             tested_by!(goto_definition_works_for_named_fields);\n \n             let infer_result = function.infer(db);\n-            let syntax_mapping = function.body_syntax_mapping(db);\n+            let source_map = function.body_source_map(db);\n \n             let struct_lit = field_expr.syntax().ancestors().find_map(ast::StructLit::cast);\n \n-            if let Some(expr) = struct_lit.and_then(|lit| syntax_mapping.node_expr(lit.into())) {\n+            if let Some(expr) = struct_lit.and_then(|lit| source_map.node_expr(lit.into())) {\n                 let ty = infer_result[expr].clone();\n                 if let hir::Ty::Adt { def_id, .. } = ty {\n                     if let hir::AdtDef::Struct(s) = def_id {\n@@ -109,9 +109,8 @@ pub(crate) fn reference_definition(\n             Some(Resolution::Def(def)) => return Exact(NavigationTarget::from_def(db, def)),\n             Some(Resolution::LocalBinding(pat)) => {\n                 let body = resolver.body().expect(\"no body for local binding\");\n-                let syntax_mapping = body.syntax_mapping(db);\n-                let ptr =\n-                    syntax_mapping.pat_syntax(pat).expect(\"pattern not found in syntax mapping\");\n+                let source_map = body.owner().body_source_map(db);\n+                let ptr = source_map.pat_syntax(pat).expect(\"pattern not found in syntax mapping\");\n                 let name =\n                     path.as_ident().cloned().expect(\"local binding from a multi-segment path\");\n                 let nav = NavigationTarget::from_scope_entry(file_id, name, ptr);"}, {"sha": "a2d203b4f92d6ce62dd123d8648b42c93a96d3c5", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=fd7240837b5fab6b2854bb63aa3b5c7771b4ddc0", "patch": "@@ -132,10 +132,10 @@ pub(crate) fn type_of(db: &RootDatabase, frange: FileRange) -> Option<String> {\n     let parent_fn = node.ancestors().find_map(ast::FnDef::cast)?;\n     let function = hir::source_binder::function_from_source(db, frange.file_id, parent_fn)?;\n     let infer = function.infer(db);\n-    let syntax_mapping = function.body_syntax_mapping(db);\n-    if let Some(expr) = ast::Expr::cast(node).and_then(|e| syntax_mapping.node_expr(e)) {\n+    let source_map = function.body_source_map(db);\n+    if let Some(expr) = ast::Expr::cast(node).and_then(|e| source_map.node_expr(e)) {\n         Some(infer[expr].to_string())\n-    } else if let Some(pat) = ast::Pat::cast(node).and_then(|p| syntax_mapping.node_pat(p)) {\n+    } else if let Some(pat) = ast::Pat::cast(node).and_then(|p| source_map.node_pat(p)) {\n         Some(infer[pat].to_string())\n     } else {\n         None"}]}