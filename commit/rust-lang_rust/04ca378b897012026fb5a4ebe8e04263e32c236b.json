{"sha": "04ca378b897012026fb5a4ebe8e04263e32c236b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0Y2EzNzhiODk3MDEyMDI2ZmI1YTRlYmU4ZTA0MjYzZTMyYzIzNmI=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-23T02:44:36Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-25T20:26:00Z"}, "message": "Support `use $crate;` with a future compatibility warning.", "tree": {"sha": "5ccf59588f95b9ea96fde1039c20fca137e15bed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ccf59588f95b9ea96fde1039c20fca137e15bed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04ca378b897012026fb5a4ebe8e04263e32c236b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04ca378b897012026fb5a4ebe8e04263e32c236b", "html_url": "https://github.com/rust-lang/rust/commit/04ca378b897012026fb5a4ebe8e04263e32c236b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04ca378b897012026fb5a4ebe8e04263e32c236b/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "199ed20aa6aa64ca58b4a924395bf9e1e71cf8a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/199ed20aa6aa64ca58b4a924395bf9e1e71cf8a8", "html_url": "https://github.com/rust-lang/rust/commit/199ed20aa6aa64ca58b4a924395bf9e1e71cf8a8"}], "stats": {"total": 68, "additions": 58, "deletions": 10}, "files": [{"sha": "1c9d1fb061ff8c7d51cb8b9ad319f6b5d93a8a9b", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/04ca378b897012026fb5a4ebe8e04263e32c236b/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04ca378b897012026fb5a4ebe8e04263e32c236b/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=04ca378b897012026fb5a4ebe8e04263e32c236b", "patch": "@@ -130,14 +130,27 @@ impl<'b> Resolver<'b> {\n \n                 match view_path.node {\n                     ViewPathSimple(binding, ref full_path) => {\n-                        let source_name = full_path.segments.last().unwrap().identifier.name;\n-                        if source_name.as_str() == \"mod\" || source_name.as_str() == \"self\" {\n+                        let mut source = full_path.segments.last().unwrap().identifier;\n+                        let source_name = source.name.as_str();\n+                        if source_name == \"mod\" || source_name == \"self\" {\n                             resolve_error(self,\n                                           view_path.span,\n                                           ResolutionError::SelfImportsOnlyAllowedWithin);\n+                        } else if source_name == \"$crate\" && full_path.segments.len() == 1 {\n+                            let crate_root = self.resolve_crate_var(source.ctxt);\n+                            let crate_name = match crate_root.kind {\n+                                ModuleKind::Def(_, name) => name,\n+                                ModuleKind::Block(..) => unreachable!(),\n+                            };\n+                            source.name = crate_name;\n+\n+                            self.session.struct_span_warn(item.span, \"`$crate` may not be imported\")\n+                                .note(\"`use $crate;` was erroneously allowed and \\\n+                                       will become a hard error in a future release\")\n+                                .emit();\n                         }\n \n-                        let subclass = ImportDirectiveSubclass::single(binding.name, source_name);\n+                        let subclass = ImportDirectiveSubclass::single(binding.name, source.name);\n                         let span = view_path.span;\n                         self.add_import_directive(module_path, subclass, span, item.id, vis);\n                     }"}, {"sha": "856eb348eaeec615cd44fff73d110046b6fd6a76", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/04ca378b897012026fb5a4ebe8e04263e32c236b/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04ca378b897012026fb5a4ebe8e04263e32c236b/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=04ca378b897012026fb5a4ebe8e04263e32c236b", "patch": "@@ -1584,13 +1584,7 @@ impl<'a> Resolver<'a> {\n     fn resolve_module_prefix(&mut self, module_path: &[Ident], span: Option<Span>)\n                              -> ResolveResult<ModulePrefixResult<'a>> {\n         if &*module_path[0].name.as_str() == \"$crate\" {\n-            let mut ctxt = module_path[0].ctxt;\n-            while ctxt.source().0 != SyntaxContext::empty() {\n-                ctxt = ctxt.source().0;\n-            }\n-            let module = self.invocations[&ctxt.source().1].module.get();\n-            let crate_root = if module.is_local() { self.graph_root } else { module };\n-            return Success(PrefixFound(crate_root, 1))\n+            return Success(PrefixFound(self.resolve_crate_var(module_path[0].ctxt), 1));\n         }\n \n         // Start at the current module if we see `self` or `super`, or at the\n@@ -1623,6 +1617,14 @@ impl<'a> Resolver<'a> {\n         return Success(PrefixFound(containing_module, i));\n     }\n \n+    fn resolve_crate_var(&mut self, mut crate_var_ctxt: SyntaxContext) -> Module<'a> {\n+        while crate_var_ctxt.source().0 != SyntaxContext::empty() {\n+            crate_var_ctxt = crate_var_ctxt.source().0;\n+        }\n+        let module = self.invocations[&crate_var_ctxt.source().1].module.get();\n+        if module.is_local() { self.graph_root } else { module }\n+    }\n+\n     // AST resolution\n     //\n     // We maintain a list of value ribs and type ribs."}, {"sha": "1dfc7a128aa1c14bfaaa7e7ed670361dc40519b4", "filename": "src/test/compile-fail/auxiliary/import_crate_var.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/04ca378b897012026fb5a4ebe8e04263e32c236b/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fimport_crate_var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04ca378b897012026fb5a4ebe8e04263e32c236b/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fimport_crate_var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fimport_crate_var.rs?ref=04ca378b897012026fb5a4ebe8e04263e32c236b", "patch": "@@ -0,0 +1,12 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[macro_export]\n+macro_rules! m { () => { use $crate; } }"}, {"sha": "9f573945483dec388267caa904499ff607ab34e7", "filename": "src/test/compile-fail/import-crate-var.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/04ca378b897012026fb5a4ebe8e04263e32c236b/src%2Ftest%2Fcompile-fail%2Fimport-crate-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04ca378b897012026fb5a4ebe8e04263e32c236b/src%2Ftest%2Fcompile-fail%2Fimport-crate-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-crate-var.rs?ref=04ca378b897012026fb5a4ebe8e04263e32c236b", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:import_crate_var.rs\n+// error-pattern: `$crate` may not be imported\n+// error-pattern: `use $crate;` was erroneously allowed and will become a hard error\n+\n+#![feature(rustc_attrs)]\n+\n+#[macro_use] extern crate import_crate_var;\n+m!();\n+\n+#[rustc_error]\n+fn main() {}"}]}