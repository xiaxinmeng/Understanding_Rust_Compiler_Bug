{"sha": "3ab3a9f50994b6e15de7fe92acf5a196ea6575c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhYjNhOWY1MDk5NGI2ZTE1ZGU3ZmU5MmFjZjVhMTk2ZWE2NTc1Yzk=", "commit": {"author": {"name": "Aravind Gollakota", "email": "aravindprasant@gmail.com", "date": "2018-03-09T00:30:37Z"}, "committer": {"name": "Aravind Gollakota", "email": "aravindprasant@gmail.com", "date": "2018-04-27T01:28:29Z"}, "message": "Create a canonical trait query for `evaluate_obligation`", "tree": {"sha": "d5b3d390d165febd87fccd556afd6389734586dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5b3d390d165febd87fccd556afd6389734586dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ab3a9f50994b6e15de7fe92acf5a196ea6575c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ab3a9f50994b6e15de7fe92acf5a196ea6575c9", "html_url": "https://github.com/rust-lang/rust/commit/3ab3a9f50994b6e15de7fe92acf5a196ea6575c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ab3a9f50994b6e15de7fe92acf5a196ea6575c9/comments", "author": {"login": "aravind-pg", "id": 6913107, "node_id": "MDQ6VXNlcjY5MTMxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/6913107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aravind-pg", "html_url": "https://github.com/aravind-pg", "followers_url": "https://api.github.com/users/aravind-pg/followers", "following_url": "https://api.github.com/users/aravind-pg/following{/other_user}", "gists_url": "https://api.github.com/users/aravind-pg/gists{/gist_id}", "starred_url": "https://api.github.com/users/aravind-pg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aravind-pg/subscriptions", "organizations_url": "https://api.github.com/users/aravind-pg/orgs", "repos_url": "https://api.github.com/users/aravind-pg/repos", "events_url": "https://api.github.com/users/aravind-pg/events{/privacy}", "received_events_url": "https://api.github.com/users/aravind-pg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aravind-pg", "id": 6913107, "node_id": "MDQ6VXNlcjY5MTMxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/6913107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aravind-pg", "html_url": "https://github.com/aravind-pg", "followers_url": "https://api.github.com/users/aravind-pg/followers", "following_url": "https://api.github.com/users/aravind-pg/following{/other_user}", "gists_url": "https://api.github.com/users/aravind-pg/gists{/gist_id}", "starred_url": "https://api.github.com/users/aravind-pg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aravind-pg/subscriptions", "organizations_url": "https://api.github.com/users/aravind-pg/orgs", "repos_url": "https://api.github.com/users/aravind-pg/repos", "events_url": "https://api.github.com/users/aravind-pg/events{/privacy}", "received_events_url": "https://api.github.com/users/aravind-pg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79f71f976a2c55794a120cb77cb8dfbf35bb0a25", "url": "https://api.github.com/repos/rust-lang/rust/commits/79f71f976a2c55794a120cb77cb8dfbf35bb0a25", "html_url": "https://github.com/rust-lang/rust/commit/79f71f976a2c55794a120cb77cb8dfbf35bb0a25"}], "stats": {"total": 170, "additions": 155, "deletions": 15}, "files": [{"sha": "e4f432e7caf494d789bd520299e6774db9cb22bd", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ab3a9f50994b6e15de7fe92acf5a196ea6575c9/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab3a9f50994b6e15de7fe92acf5a196ea6575c9/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=3ab3a9f50994b6e15de7fe92acf5a196ea6575c9", "patch": "@@ -70,7 +70,8 @@ use rustc_data_structures::stable_hasher::{StableHasher, HashStable};\n use std::fmt;\n use std::hash::Hash;\n use syntax_pos::symbol::InternedString;\n-use traits::query::{CanonicalProjectionGoal, CanonicalTyGoal};\n+use traits::query::{CanonicalProjectionGoal,\n+                    CanonicalTyGoal, CanonicalPredicateGoal};\n use ty::{TyCtxt, Instance, InstanceDef, ParamEnv, ParamEnvAnd, PolyTraitRef, Ty};\n use ty::subst::Substs;\n \n@@ -643,6 +644,7 @@ define_dep_nodes!( <'tcx>\n     [] NormalizeProjectionTy(CanonicalProjectionGoal<'tcx>),\n     [] NormalizeTyAfterErasingRegions(ParamEnvAnd<'tcx, Ty<'tcx>>),\n     [] DropckOutlives(CanonicalTyGoal<'tcx>),\n+    [] EvaluateObligation(CanonicalPredicateGoal<'tcx>),\n \n     [] SubstituteNormalizeAndTestPredicates { key: (DefId, &'tcx Substs<'tcx>) },\n "}, {"sha": "031a3677aa330c54d5976ee59fd3ff27cc62af04", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab3a9f50994b6e15de7fe92acf5a196ea6575c9/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab3a9f50994b6e15de7fe92acf5a196ea6575c9/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=3ab3a9f50994b6e15de7fe92acf5a196ea6575c9", "patch": "@@ -41,7 +41,7 @@ pub use self::object_safety::ObjectSafetyViolation;\n pub use self::object_safety::MethodViolationCode;\n pub use self::on_unimplemented::{OnUnimplementedDirective, OnUnimplementedNote};\n pub use self::select::{EvaluationCache, SelectionContext, SelectionCache};\n-pub use self::select::IntercrateAmbiguityCause;\n+pub use self::select::{EvaluationResult, IntercrateAmbiguityCause, OverflowError};\n pub use self::specialize::{OverlapError, specialization_graph, translate_substs};\n pub use self::specialize::{SpecializesCache, find_associated_item};\n pub use self::engine::TraitEngine;"}, {"sha": "88c51d006db06ee313aeff3042fdc8f2c9996ffc", "filename": "src/librustc/traits/query/evaluate_obligation.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/3ab3a9f50994b6e15de7fe92acf5a196ea6575c9/src%2Flibrustc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab3a9f50994b6e15de7fe92acf5a196ea6575c9/src%2Flibrustc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fevaluate_obligation.rs?ref=3ab3a9f50994b6e15de7fe92acf5a196ea6575c9", "patch": "@@ -0,0 +1,54 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use infer::InferCtxt;\n+use infer::canonical::{Canonical, Canonicalize};\n+use traits::{EvaluationResult, PredicateObligation};\n+use traits::query::CanonicalPredicateGoal;\n+use ty::{ParamEnvAnd, Predicate, TyCtxt};\n+\n+impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n+    /// Evaluates whether the predicate can be satisfied (by any means)\n+    /// in the given `ParamEnv`.\n+    pub fn predicate_may_hold(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+    ) -> bool {\n+        let (c_pred, _) =\n+            self.canonicalize_query(&obligation.param_env.and(obligation.predicate));\n+\n+        self.tcx.global_tcx().evaluate_obligation(c_pred).may_apply()\n+    }\n+\n+    /// Evaluates whether the predicate can be satisfied in the given\n+    /// `ParamEnv`, and returns `false` if not certain. However, this is\n+    /// not entirely accurate if inference variables are involved.\n+    pub fn predicate_must_hold(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+    ) -> bool {\n+        let (c_pred, _) =\n+            self.canonicalize_query(&obligation.param_env.and(obligation.predicate));\n+\n+        self.tcx.global_tcx().evaluate_obligation(c_pred) ==\n+            EvaluationResult::EvaluatedToOk\n+    }\n+}\n+\n+impl<'gcx: 'tcx, 'tcx> Canonicalize<'gcx, 'tcx> for ParamEnvAnd<'tcx, Predicate<'tcx>> {\n+    type Canonicalized = CanonicalPredicateGoal<'gcx>;\n+\n+    fn intern(\n+        _gcx: TyCtxt<'_, 'gcx, 'gcx>,\n+        value: Canonical<'gcx, Self::Lifted>,\n+    ) -> Self::Canonicalized {\n+        value\n+    }\n+}"}, {"sha": "096633ddab2f7893cb6961a27b4e357c0ae7bad3", "filename": "src/librustc/traits/query/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ab3a9f50994b6e15de7fe92acf5a196ea6575c9/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab3a9f50994b6e15de7fe92acf5a196ea6575c9/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs?ref=3ab3a9f50994b6e15de7fe92acf5a196ea6575c9", "patch": "@@ -19,6 +19,7 @@ use infer::canonical::Canonical;\n use ty::{self, Ty};\n \n pub mod dropck_outlives;\n+pub mod evaluate_obligation;\n pub mod normalize;\n pub mod normalize_erasing_regions;\n \n@@ -27,6 +28,9 @@ pub type CanonicalProjectionGoal<'tcx> =\n \n pub type CanonicalTyGoal<'tcx> = Canonical<'tcx, ty::ParamEnvAnd<'tcx, Ty<'tcx>>>;\n \n+pub type CanonicalPredicateGoal<'tcx> =\n+    Canonical<'tcx, ty::ParamEnvAnd<'tcx, ty::Predicate<'tcx>>>;\n+\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub struct NoSolution;\n "}, {"sha": "3dedfcd357eb6b6f9466873cb5971b2fc6f824db", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/3ab3a9f50994b6e15de7fe92acf5a196ea6575c9/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab3a9f50994b6e15de7fe92acf5a196ea6575c9/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=3ab3a9f50994b6e15de7fe92acf5a196ea6575c9", "patch": "@@ -319,7 +319,7 @@ enum BuiltinImplConditions<'tcx> {\n ///     all the \"potential success\" candidates can potentially succeed,\n ///     so they are no-ops when unioned with a definite error, and within\n ///     the categories it's easy to see that the unions are correct.\n-enum EvaluationResult {\n+pub enum EvaluationResult {\n     /// Evaluation successful\n     EvaluatedToOk,\n     /// Evaluation is known to be ambiguous - it *might* hold for some\n@@ -385,7 +385,7 @@ enum EvaluationResult {\n }\n \n impl EvaluationResult {\n-    fn may_apply(self) -> bool {\n+    pub fn may_apply(self) -> bool {\n         match self {\n             EvaluatedToOk |\n             EvaluatedToAmbig |\n@@ -408,10 +408,18 @@ impl EvaluationResult {\n     }\n }\n \n+impl_stable_hash_for!(enum self::EvaluationResult {\n+    EvaluatedToOk,\n+    EvaluatedToAmbig,\n+    EvaluatedToUnknown,\n+    EvaluatedToRecur,\n+    EvaluatedToErr\n+});\n+\n #[derive(Clone, Debug, PartialEq, Eq)]\n /// Indicates that trait evaluation caused overflow. Stores the obligation\n /// that hit the recursion limit.\n-pub struct OverflowError<'tcx>(TraitObligation<'tcx>);\n+pub struct OverflowError<'tcx>(pub TraitObligation<'tcx>);\n \n impl<'tcx> From<OverflowError<'tcx>> for SelectionError<'tcx> {\n     fn from(OverflowError(o): OverflowError<'tcx>) -> SelectionError<'tcx> {\n@@ -574,9 +582,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         debug!(\"evaluate_obligation({:?})\",\n                obligation);\n \n-        match self.probe(|this, _| {\n-            this.evaluate_predicate_recursively(TraitObligationStackList::empty(), obligation)\n-        }) {\n+        match self.evaluate_obligation_recursively(obligation) {\n             Ok(result) => result.may_apply(),\n             Err(OverflowError(o)) => self.infcx().report_overflow_error(&o, true)\n         }\n@@ -592,14 +598,23 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         debug!(\"evaluate_obligation_conservatively({:?})\",\n                obligation);\n \n-        match self.probe(|this, _| {\n-            this.evaluate_predicate_recursively(TraitObligationStackList::empty(), obligation)\n-        }) {\n+        match self.evaluate_obligation_recursively(obligation) {\n             Ok(result) => result == EvaluatedToOk,\n             Err(OverflowError(o)) => self.infcx().report_overflow_error(&o, true)\n         }\n     }\n \n+    /// Evaluates whether the obligation `obligation` can be satisfied and returns\n+    /// an `EvaluationResult`.\n+    pub fn evaluate_obligation_recursively(&mut self,\n+                                           obligation: &PredicateObligation<'tcx>)\n+                                           -> Result<EvaluationResult, OverflowError<'tcx>>\n+    {\n+        self.probe(|this, _| {\n+            this.evaluate_predicate_recursively(TraitObligationStackList::empty(), obligation)\n+        })\n+    }\n+\n     /// Evaluates the predicates in `predicates` recursively. Note that\n     /// this applies projections in the predicates, and therefore\n     /// is run within an inference probe."}, {"sha": "1fd0632580cfc018ff96ac478533a84ec6ba9f42", "filename": "src/librustc/ty/maps/config.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3ab3a9f50994b6e15de7fe92acf5a196ea6575c9/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab3a9f50994b6e15de7fe92acf5a196ea6575c9/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs?ref=3ab3a9f50994b6e15de7fe92acf5a196ea6575c9", "patch": "@@ -11,7 +11,7 @@\n use dep_graph::SerializedDepNodeIndex;\n use hir::def_id::{CrateNum, DefId, DefIndex};\n use mir::interpret::{GlobalId};\n-use traits::query::{CanonicalProjectionGoal, CanonicalTyGoal};\n+use traits::query::{CanonicalPredicateGoal, CanonicalProjectionGoal, CanonicalTyGoal};\n use ty::{self, ParamEnvAnd, Ty, TyCtxt};\n use ty::subst::Substs;\n use ty::maps::queries;\n@@ -73,6 +73,12 @@ impl<'tcx> QueryDescription<'tcx> for queries::normalize_ty_after_erasing_region\n     }\n }\n \n+impl<'tcx> QueryDescription<'tcx> for queries::evaluate_obligation<'tcx> {\n+    fn describe(_tcx: TyCtxt, goal: CanonicalPredicateGoal<'tcx>) -> String {\n+        format!(\"evaluating trait selection obligation `{}`\", goal.value.value)\n+    }\n+}\n+\n impl<'tcx> QueryDescription<'tcx> for queries::is_copy_raw<'tcx> {\n     fn describe(_tcx: TyCtxt, env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> String {\n         format!(\"computing whether `{}` is `Copy`\", env.value)"}, {"sha": "da29f23589e85e7a5f464cc5d325d1fbc8b49787", "filename": "src/librustc/ty/maps/keys.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3ab3a9f50994b6e15de7fe92acf5a196ea6575c9/src%2Flibrustc%2Fty%2Fmaps%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab3a9f50994b6e15de7fe92acf5a196ea6575c9/src%2Flibrustc%2Fty%2Fmaps%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fkeys.rs?ref=3ab3a9f50994b6e15de7fe92acf5a196ea6575c9", "patch": "@@ -11,7 +11,7 @@\n //! Defines the set of legal keys that can be used in queries.\n \n use hir::def_id::{CrateNum, DefId, LOCAL_CRATE, DefIndex};\n-use traits::query::{CanonicalProjectionGoal, CanonicalTyGoal};\n+use traits::query::{CanonicalPredicateGoal, CanonicalProjectionGoal, CanonicalTyGoal};\n use ty::{self, Ty, TyCtxt};\n use ty::subst::Substs;\n use ty::fast_reject::SimplifiedType;\n@@ -200,3 +200,13 @@ impl<'tcx> Key for CanonicalTyGoal<'tcx> {\n         DUMMY_SP\n     }\n }\n+\n+impl<'tcx> Key for CanonicalPredicateGoal<'tcx> {\n+    fn map_crate(&self) -> CrateNum {\n+        LOCAL_CRATE\n+    }\n+\n+    fn default_span(&self, _tcx: TyCtxt) -> Span {\n+        DUMMY_SP\n+    }\n+}"}, {"sha": "9343eccd38e9f059887df1903dd8d8ce61105516", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3ab3a9f50994b6e15de7fe92acf5a196ea6575c9/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab3a9f50994b6e15de7fe92acf5a196ea6575c9/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=3ab3a9f50994b6e15de7fe92acf5a196ea6575c9", "patch": "@@ -32,8 +32,9 @@ use mir;\n use mir::interpret::{GlobalId};\n use session::{CompileResult, CrateDisambiguator};\n use session::config::OutputFilenames;\n-use traits::Vtable;\n-use traits::query::{CanonicalProjectionGoal, CanonicalTyGoal, NoSolution};\n+use traits::{self, Vtable};\n+use traits::query::{CanonicalPredicateGoal, CanonicalProjectionGoal,\n+                    CanonicalTyGoal, NoSolution};\n use traits::query::dropck_outlives::{DtorckConstraint, DropckOutlivesResult};\n use traits::query::normalize::NormalizationResult;\n use traits::specialization_graph;\n@@ -433,6 +434,11 @@ define_maps! { <'tcx>\n         NoSolution,\n     >,\n \n+    /// Do not call this query directly: invoke `infcx.predicate_may_hold()` or\n+    /// `infcx.predicate_must_hold()` instead.\n+    [] fn evaluate_obligation:\n+        EvaluateObligation(CanonicalPredicateGoal<'tcx>) -> traits::EvaluationResult,\n+\n     [] fn substitute_normalize_and_test_predicates:\n         substitute_normalize_and_test_predicates_node((DefId, &'tcx Substs<'tcx>)) -> bool,\n "}, {"sha": "1cde745d4d87f4d19851a1a49270de7dca087ad8", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ab3a9f50994b6e15de7fe92acf5a196ea6575c9/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab3a9f50994b6e15de7fe92acf5a196ea6575c9/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=3ab3a9f50994b6e15de7fe92acf5a196ea6575c9", "patch": "@@ -977,6 +977,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::NormalizeProjectionTy |\n         DepKind::NormalizeTyAfterErasingRegions |\n         DepKind::DropckOutlives |\n+        DepKind::EvaluateObligation |\n         DepKind::SubstituteNormalizeAndTestPredicates |\n         DepKind::InstanceDefSizeEstimate |\n         DepKind::ProgramClausesForEnv |"}, {"sha": "f43733f46377e32d8d84c4dbc9eed497504d6a6c", "filename": "src/librustc_traits/evaluate_obligation.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3ab3a9f50994b6e15de7fe92acf5a196ea6575c9/src%2Flibrustc_traits%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab3a9f50994b6e15de7fe92acf5a196ea6575c9/src%2Flibrustc_traits%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fevaluate_obligation.rs?ref=3ab3a9f50994b6e15de7fe92acf5a196ea6575c9", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use rustc::traits::{EvaluationResult, Obligation, ObligationCause,\n+                    OverflowError, SelectionContext};\n+use rustc::traits::query::CanonicalPredicateGoal;\n+use rustc::ty::{ParamEnvAnd, TyCtxt};\n+use syntax::codemap::DUMMY_SP;\n+\n+crate fn evaluate_obligation<'tcx>(\n+    tcx: TyCtxt<'_, 'tcx, 'tcx>,\n+    goal: CanonicalPredicateGoal<'tcx>,\n+) -> EvaluationResult {\n+    tcx.infer_ctxt().enter(|ref infcx| {\n+        let (\n+            ParamEnvAnd {\n+                param_env,\n+                value: predicate,\n+            },\n+            _canonical_inference_vars,\n+        ) = infcx.instantiate_canonical_with_fresh_inference_vars(DUMMY_SP, &goal);\n+\n+        let mut selcx = SelectionContext::new(&infcx);\n+        let obligation = Obligation::new(ObligationCause::dummy(), param_env, predicate);\n+\n+        match selcx.evaluate_obligation_recursively(&obligation) {\n+            Ok(result) => result,\n+            Err(OverflowError(o)) => {\n+                infcx.report_overflow_error(&o, true)\n+            }\n+        }\n+    })\n+}"}, {"sha": "7f18fac2db5a3a5b8996c722c6959492ac4302c1", "filename": "src/librustc_traits/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab3a9f50994b6e15de7fe92acf5a196ea6575c9/src%2Flibrustc_traits%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab3a9f50994b6e15de7fe92acf5a196ea6575c9/src%2Flibrustc_traits%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flib.rs?ref=3ab3a9f50994b6e15de7fe92acf5a196ea6575c9", "patch": "@@ -22,6 +22,7 @@ extern crate syntax;\n extern crate syntax_pos;\n \n mod dropck_outlives;\n+mod evaluate_obligation;\n mod normalize_projection_ty;\n mod normalize_erasing_regions;\n mod util;\n@@ -38,6 +39,7 @@ pub fn provide(p: &mut Providers) {\n             normalize_erasing_regions::normalize_ty_after_erasing_regions,\n         program_clauses_for: lowering::program_clauses_for,\n         program_clauses_for_env: lowering::program_clauses_for_env,\n+        evaluate_obligation: evaluate_obligation::evaluate_obligation,\n         ..*p\n     };\n }"}]}