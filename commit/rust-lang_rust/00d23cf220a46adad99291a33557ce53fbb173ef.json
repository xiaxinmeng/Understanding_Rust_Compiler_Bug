{"sha": "00d23cf220a46adad99291a33557ce53fbb173ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwZDIzY2YyMjBhNDZhZGFkOTkyOTFhMzM1NTdjZTUzZmJiMTczZWY=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2020-10-20T17:36:44Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2020-10-20T17:36:44Z"}, "message": "Make {u,}int_range functions a bit nicer\n\n.into() guarantees safety of the conversion.\nFurthermore, the minimum value of all uints is known to be 0.", "tree": {"sha": "e7c4b79970453ca880d23c7f2b26fb879e55a169", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7c4b79970453ca880d23c7f2b26fb879e55a169"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00d23cf220a46adad99291a33557ce53fbb173ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00d23cf220a46adad99291a33557ce53fbb173ef", "html_url": "https://github.com/rust-lang/rust/commit/00d23cf220a46adad99291a33557ce53fbb173ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00d23cf220a46adad99291a33557ce53fbb173ef/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c647735f40c402f674917aff0361d4f3be7a24d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c647735f40c402f674917aff0361d4f3be7a24d8", "html_url": "https://github.com/rust-lang/rust/commit/c647735f40c402f674917aff0361d4f3be7a24d8"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "b502bd7f7a1bd07248f77fecb05b3786aede8ce3", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/00d23cf220a46adad99291a33557ce53fbb173ef/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d23cf220a46adad99291a33557ce53fbb173ef/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=00d23cf220a46adad99291a33557ce53fbb173ef", "patch": "@@ -170,24 +170,25 @@ fn lint_overflowing_range_endpoint<'tcx>(\n // warnings are consistent between 32- and 64-bit platforms.\n fn int_ty_range(int_ty: ast::IntTy) -> (i128, i128) {\n     match int_ty {\n-        ast::IntTy::Isize => (i64::MIN as i128, i64::MAX as i128),\n-        ast::IntTy::I8 => (i8::MIN as i64 as i128, i8::MAX as i128),\n-        ast::IntTy::I16 => (i16::MIN as i64 as i128, i16::MAX as i128),\n-        ast::IntTy::I32 => (i32::MIN as i64 as i128, i32::MAX as i128),\n-        ast::IntTy::I64 => (i64::MIN as i128, i64::MAX as i128),\n-        ast::IntTy::I128 => (i128::MIN as i128, i128::MAX),\n+        ast::IntTy::Isize => (i64::MIN.into(), i64::MAX.into()),\n+        ast::IntTy::I8 => (i8::MIN.into(), i8::MAX.into()),\n+        ast::IntTy::I16 => (i16::MIN.into(), i16::MAX.into()),\n+        ast::IntTy::I32 => (i32::MIN.into(), i32::MAX.into()),\n+        ast::IntTy::I64 => (i64::MIN.into(), i64::MAX.into()),\n+        ast::IntTy::I128 => (i128::MIN, i128::MAX),\n     }\n }\n \n fn uint_ty_range(uint_ty: ast::UintTy) -> (u128, u128) {\n-    match uint_ty {\n-        ast::UintTy::Usize => (u64::MIN as u128, u64::MAX as u128),\n-        ast::UintTy::U8 => (u8::MIN as u128, u8::MAX as u128),\n-        ast::UintTy::U16 => (u16::MIN as u128, u16::MAX as u128),\n-        ast::UintTy::U32 => (u32::MIN as u128, u32::MAX as u128),\n-        ast::UintTy::U64 => (u64::MIN as u128, u64::MAX as u128),\n-        ast::UintTy::U128 => (u128::MIN, u128::MAX),\n-    }\n+    let max = match uint_ty {\n+        ast::UintTy::Usize => u64::MAX.into(),\n+        ast::UintTy::U8 => u8::MAX.into(),\n+        ast::UintTy::U16 => u16::MAX.into(),\n+        ast::UintTy::U32 => u32::MAX.into(),\n+        ast::UintTy::U64 => u64::MAX.into(),\n+        ast::UintTy::U128 => u128::MAX,\n+    };\n+    (0, max)\n }\n \n fn get_bin_hex_repr(cx: &LateContext<'_>, lit: &hir::Lit) -> Option<String> {"}]}