{"sha": "4266807e44ecf1f4148078919de394a962b3793a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyNjY4MDdlNDRlY2YxZjQxNDgwNzg5MTlkZTM5NGE5NjJiMzc5M2E=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-03-09T23:17:46Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-03-14T13:09:48Z"}, "message": "Add a test for generator discriminants", "tree": {"sha": "3756223f231936165f417e6e5f5b708a2068f1e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3756223f231936165f417e6e5f5b708a2068f1e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4266807e44ecf1f4148078919de394a962b3793a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4266807e44ecf1f4148078919de394a962b3793a", "html_url": "https://github.com/rust-lang/rust/commit/4266807e44ecf1f4148078919de394a962b3793a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4266807e44ecf1f4148078919de394a962b3793a/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2779d85962b520bb8718b371e7264aa44827058", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2779d85962b520bb8718b371e7264aa44827058", "html_url": "https://github.com/rust-lang/rust/commit/b2779d85962b520bb8718b371e7264aa44827058"}], "stats": {"total": 134, "additions": 134, "deletions": 0}, "files": [{"sha": "8a0f8a380ab597e11627920386b7b84cbb17cea1", "filename": "src/test/ui/generator/discriminant.rs", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/4266807e44ecf1f4148078919de394a962b3793a/src%2Ftest%2Fui%2Fgenerator%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4266807e44ecf1f4148078919de394a962b3793a/src%2Ftest%2Fui%2Fgenerator%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdiscriminant.rs?ref=4266807e44ecf1f4148078919de394a962b3793a", "patch": "@@ -0,0 +1,134 @@\n+//! Tests that generator discriminant sizes and ranges are chosen optimally and that they are\n+//! reflected in the output of `mem::discriminant`.\n+\n+// run-pass\n+\n+#![feature(generators, generator_trait, core_intrinsics)]\n+\n+use std::intrinsics::discriminant_value;\n+use std::marker::Unpin;\n+use std::mem::size_of_val;\n+use std::{cmp, ops::*};\n+\n+macro_rules! yield25 {\n+    ($e:expr) => {\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+    };\n+}\n+\n+/// Yields 250 times.\n+macro_rules! yield250 {\n+    () => {\n+        yield250!(())\n+    };\n+\n+    ($e:expr) => {\n+        yield25!($e);\n+        yield25!($e);\n+        yield25!($e);\n+        yield25!($e);\n+        yield25!($e);\n+\n+        yield25!($e);\n+        yield25!($e);\n+        yield25!($e);\n+        yield25!($e);\n+        yield25!($e);\n+    };\n+}\n+\n+fn cycle(gen: impl Generator<()> + Unpin, expected_max_discr: u64) {\n+    let mut gen = Box::pin(gen);\n+    let mut max_discr = 0;\n+    loop {\n+        max_discr = cmp::max(max_discr, discriminant_value(gen.as_mut().get_mut()));\n+        match gen.as_mut().resume(()) {\n+            GeneratorState::Yielded(_) => {}\n+            GeneratorState::Complete(_) => {\n+                assert_eq!(max_discr, expected_max_discr);\n+                return;\n+            }\n+        }\n+    }\n+}\n+\n+fn main() {\n+    // Has only one invalid discr. value.\n+    let gen_u8_tiny_niche = || {\n+        || {\n+            // 3 reserved variants\n+\n+            yield250!(); // 253 variants\n+\n+            yield; // 254\n+            yield; // 255\n+        }\n+    };\n+\n+    // Uses all values in the u8 discriminant.\n+    let gen_u8_full = || {\n+        || {\n+            // 3 reserved variants\n+\n+            yield250!(); // 253 variants\n+\n+            yield; // 254\n+            yield; // 255\n+            yield; // 256\n+        }\n+    };\n+\n+    // Barely needs a u16 discriminant.\n+    let gen_u16 = || {\n+        || {\n+            // 3 reserved variants\n+\n+            yield250!(); // 253 variants\n+\n+            yield; // 254\n+            yield; // 255\n+            yield; // 256\n+            yield; // 257\n+        }\n+    };\n+\n+    assert_eq!(size_of_val(&gen_u8_tiny_niche()), 1);\n+    assert_eq!(size_of_val(&Some(gen_u8_tiny_niche())), 1); // uses niche\n+    assert_eq!(size_of_val(&Some(Some(gen_u8_tiny_niche()))), 2); // cannot use niche anymore\n+    assert_eq!(size_of_val(&gen_u8_full()), 1);\n+    assert_eq!(size_of_val(&Some(gen_u8_full())), 2); // cannot use niche\n+    assert_eq!(size_of_val(&gen_u16()), 2);\n+    assert_eq!(size_of_val(&Some(gen_u16())), 2); // uses niche\n+\n+    cycle(gen_u8_tiny_niche(), 254);\n+    cycle(gen_u8_full(), 255);\n+    cycle(gen_u16(), 256);\n+}"}]}