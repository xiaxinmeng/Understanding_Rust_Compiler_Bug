{"sha": "995425badba216e38c8eb1e4c6dd6989c50660b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5NTQyNWJhZGJhMjE2ZTM4YzhlYjFlNGM2ZGQ2OTg5YzUwNjYwYjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-27T20:27:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-27T20:27:58Z"}, "message": "auto merge of #5558 : nikomatsakis/rust/issue-4920-autoref-index-operator, r=nikomatsakis\n\nPer discussion on IRC.\r\n\r\nr? @pcwalton", "tree": {"sha": "8a9b88670b9775c34eaae843aeb6701019071392", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a9b88670b9775c34eaae843aeb6701019071392"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/995425badba216e38c8eb1e4c6dd6989c50660b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/995425badba216e38c8eb1e4c6dd6989c50660b3", "html_url": "https://github.com/rust-lang/rust/commit/995425badba216e38c8eb1e4c6dd6989c50660b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/995425badba216e38c8eb1e4c6dd6989c50660b3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a74fda316f5c4b31d3582fd1cf7b6c04c178557", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a74fda316f5c4b31d3582fd1cf7b6c04c178557", "html_url": "https://github.com/rust-lang/rust/commit/2a74fda316f5c4b31d3582fd1cf7b6c04c178557"}, {"sha": "069529bc5cc14f63035609cdfae5b21ca7999d4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/069529bc5cc14f63035609cdfae5b21ca7999d4b", "html_url": "https://github.com/rust-lang/rust/commit/069529bc5cc14f63035609cdfae5b21ca7999d4b"}], "stats": {"total": 284, "additions": 107, "deletions": 177}, "files": [{"sha": "d0623ef604076c6cd69cbfdaf42575842af87ddf", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=995425badba216e38c8eb1e4c6dd6989c50660b3", "patch": "@@ -77,5 +77,5 @@ pub trait Shr<RHS,Result> {\n \n #[lang=\"index\"]\n pub trait Index<Index,Result> {\n-    fn index(&self, index: Index) -> Result;\n+    fn index(&self, index: &Index) -> Result;\n }"}, {"sha": "010ba4d25229118c9c8dd52fad6880e865dd16e7", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=995425badba216e38c8eb1e4c6dd6989c50660b3", "patch": "@@ -630,7 +630,6 @@ fn get_self_ty(item: ebml::Doc) -> ast::self_ty_ {\n     let self_ty_kind = string[0];\n     match self_ty_kind as char {\n         's' => { return ast::sty_static; }\n-        'r' => { return ast::sty_by_ref; }\n         'v' => { return ast::sty_value; }\n         '@' => { return ast::sty_box(get_mutability(string[1])); }\n         '~' => { return ast::sty_uniq(get_mutability(string[1])); }"}, {"sha": "419fe98f3d524acfee1a49fb6e1442e81dbf502c", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=995425badba216e38c8eb1e4c6dd6989c50660b3", "patch": "@@ -410,9 +410,6 @@ fn encode_self_type(ebml_w: writer::Encoder, self_type: ast::self_ty_) {\n         sty_static => {\n             ebml_w.writer.write(&[ 's' as u8 ]);\n         }\n-        sty_by_ref => {\n-            ebml_w.writer.write(&[ 'r' as u8 ]);\n-        }\n         sty_value => {\n             ebml_w.writer.write(&[ 'v' as u8 ]);\n         }"}, {"sha": "2ec5b59b9c5517495b7402e9602a25406ea0c94f", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=995425badba216e38c8eb1e4c6dd6989c50660b3", "patch": "@@ -342,7 +342,7 @@ fn simplify_ast(ii: ast::inlined_item) -> ast::inlined_item {\n }\n \n fn decode_ast(par_doc: ebml::Doc) -> ast::inlined_item {\n-    let chi_doc = par_doc[c::tag_tree as uint];\n+    let chi_doc = par_doc.get(c::tag_tree as uint);\n     let d = &reader::Decoder(chi_doc);\n     Decodable::decode(d)\n }\n@@ -1089,9 +1089,9 @@ impl ebml_decoder_decoder_helpers for reader::Decoder {\n fn decode_side_tables(xcx: @ExtendedDecodeContext,\n                       ast_doc: ebml::Doc) {\n     let dcx = xcx.dcx;\n-    let tbl_doc = ast_doc[c::tag_table as uint];\n+    let tbl_doc = ast_doc.get(c::tag_table as uint);\n     for reader::docs(tbl_doc) |tag, entry_doc| {\n-        let id0 = entry_doc[c::tag_table_id as uint].as_int();\n+        let id0 = entry_doc.get(c::tag_table_id as uint).as_int();\n         let id = xcx.tr_id(id0);\n \n         debug!(\">> Side table document with tag 0x%x \\\n@@ -1103,7 +1103,7 @@ fn decode_side_tables(xcx: @ExtendedDecodeContext,\n         } else if tag == (c::tag_table_moves_map as uint) {\n             dcx.maps.moves_map.insert(id);\n         } else {\n-            let val_doc = entry_doc[c::tag_table_val as uint];\n+            let val_doc = entry_doc.get(c::tag_table_val as uint);\n             let val_dsr = &reader::Decoder(val_doc);\n             if tag == (c::tag_table_def as uint) {\n                 let def = decode_def(xcx, val_doc);\n@@ -1172,7 +1172,7 @@ fn encode_item_ast(ebml_w: writer::Encoder, item: @ast::item) {\n \n #[cfg(test)]\n fn decode_item_ast(par_doc: ebml::Doc) -> @ast::item {\n-    let chi_doc = par_doc[c::tag_tree as uint];\n+    let chi_doc = par_doc.get(c::tag_tree as uint);\n     let d = &reader::Decoder(chi_doc);\n     @Decodable::decode(d)\n }"}, {"sha": "d18aa1c12dfaeb68276265b3215cb632bdfba32d", "filename": "src/librustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=995425badba216e38c8eb1e4c6dd6989c50660b3", "patch": "@@ -180,21 +180,6 @@ fn req_loans_in_expr(ex: @ast::expr,\n             }\n         }\n \n-        match self.bccx.method_map.find(&ex.id) {\n-            Some(ref method_map_entry) => {\n-                match (*method_map_entry).explicit_self {\n-                    ast::sty_by_ref => {\n-                        let rcvr_cmt = self.bccx.cat_expr(rcvr);\n-                        self.guarantee_valid(rcvr_cmt, m_imm, scope_r);\n-                    }\n-                    _ => {} // Nothing to do.\n-                }\n-            }\n-            None => {\n-                self.tcx().sess.span_bug(ex.span, ~\"no method map entry\");\n-            }\n-        }\n-\n         visit::visit_expr(ex, self, vt);\n       }\n "}, {"sha": "15fc4317bf3a83ca2db32c547456df09eec1ae5c", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=995425badba216e38c8eb1e4c6dd6989c50660b3", "patch": "@@ -467,11 +467,6 @@ fn visit_fn(fk: &visit::fn_kind,\n     match *fk {\n         fk_method(_, _, method) => {\n             match method.self_ty.node {\n-                sty_by_ref => {\n-                    fn_maps.add_variable(Arg(method.self_id,\n-                                             special_idents::self_,\n-                                             by_ref));\n-                }\n                 sty_value | sty_region(*) | sty_box(_) | sty_uniq(_) => {\n                     fn_maps.add_variable(Arg(method.self_id,\n                                              special_idents::self_,"}, {"sha": "f5382d69174d0003f418b871cee3a22678e61ddd", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 9, "deletions": 34, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=995425badba216e38c8eb1e4c6dd6989c50660b3", "patch": "@@ -436,7 +436,7 @@ pub impl VisitContext {\n \n             expr_unary(deref, base) => {       // *base\n                 if !self.use_overloaded_operator(\n-                    expr, DontDerefArgs, base, [], visitor)\n+                    expr, base, [], visitor)\n                 {\n                     // Moving out of *base moves out of base.\n                     self.use_expr(base, comp_mode, visitor);\n@@ -450,7 +450,7 @@ pub impl VisitContext {\n \n             expr_index(lhs, rhs) => {          // lhs[rhs]\n                 if !self.use_overloaded_operator(\n-                    expr, DontDerefArgs, lhs, [rhs], visitor)\n+                    expr, lhs, [rhs], visitor)\n                 {\n                     self.use_expr(lhs, comp_mode, visitor);\n                     self.consume_expr(rhs, visitor);\n@@ -579,15 +579,15 @@ pub impl VisitContext {\n \n             expr_unary(_, lhs) => {\n                 if !self.use_overloaded_operator(\n-                    expr, DontDerefArgs, lhs, [], visitor)\n+                    expr, lhs, [], visitor)\n                 {\n                     self.consume_expr(lhs, visitor);\n                 }\n             }\n \n             expr_binary(_, lhs, rhs) => {\n                 if !self.use_overloaded_operator(\n-                    expr, DoDerefArgs, lhs, [rhs], visitor)\n+                    expr, lhs, [rhs], visitor)\n                 {\n                     self.consume_expr(lhs, visitor);\n                     self.consume_expr(rhs, visitor);\n@@ -659,7 +659,6 @@ pub impl VisitContext {\n \n     fn use_overloaded_operator(&self,\n                                expr: @expr,\n-                               deref_args: DerefArgs,\n                                receiver_expr: @expr,\n                                arg_exprs: &[@expr],\n                                visitor: vt<VisitContext>) -> bool\n@@ -670,21 +669,10 @@ pub impl VisitContext {\n \n         self.use_receiver(expr.id, expr.span, receiver_expr, visitor);\n \n-        // The deref_args stuff should eventually be converted into\n-        // adjustments.  Moreover, it should eventually be applied\n-        // consistently to all overloaded operators.  But that's not\n-        // how it is today.\n-        match deref_args {\n-            DoDerefArgs => {\n-                // we are always passing in a borrowed pointer,\n-                // so it's always read mode:\n-                for arg_exprs.each |arg_expr| {\n-                    self.use_expr(*arg_expr, Read, visitor);\n-                }\n-            }\n-            DontDerefArgs => {\n-                self.use_fn_args(expr.callee_id, arg_exprs, visitor);\n-            }\n+        // for overloaded operatrs, we are always passing in a\n+        // borrowed pointer, so it's always read mode:\n+        for arg_exprs.each |arg_expr| {\n+            self.use_expr(*arg_expr, Read, visitor);\n         }\n \n         return true;\n@@ -737,20 +725,7 @@ pub impl VisitContext {\n                     receiver_expr: @expr,\n                     visitor: vt<VisitContext>)\n     {\n-        let callee_mode = match self.method_map.find(&expr_id) {\n-            Some(ref method_map_entry) => {\n-                match method_map_entry.explicit_self {\n-                    sty_by_ref => by_ref,\n-                    _ => by_copy\n-                }\n-            }\n-            None => {\n-                self.tcx.sess.span_bug(\n-                    span,\n-                    ~\"no method map entry\");\n-            }\n-        };\n-        self.use_fn_arg(callee_mode, receiver_expr, visitor);\n+        self.use_fn_arg(by_copy, receiver_expr, visitor);\n     }\n \n     fn use_fn_args(&self,"}, {"sha": "66dc1a37e514ae3553cc3619a1e2c0f1f34d2699", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=995425badba216e38c8eb1e4c6dd6989c50660b3", "patch": "@@ -50,7 +50,7 @@ use syntax::ast::{named_field, ne, neg, node_id, pat, pat_enum, pat_ident};\n use syntax::ast::{path, pat_box, pat_lit, pat_range, pat_struct};\n use syntax::ast::{pat_tup, pat_uniq, pat_wild, prim_ty, private, provided};\n use syntax::ast::{public, required, rem, self_ty_, shl, shr, stmt_decl};\n-use syntax::ast::{struct_dtor, struct_field, struct_variant_kind, sty_by_ref};\n+use syntax::ast::{struct_dtor, struct_field, struct_variant_kind};\n use syntax::ast::{sty_static, subtract, trait_ref, tuple_variant_kind, Ty};\n use syntax::ast::{ty_bool, ty_char, ty_f, ty_f32, ty_f64, ty_float, ty_i};\n use syntax::ast::{ty_i16, ty_i32, ty_i64, ty_i8, ty_int, TyParam, ty_path};\n@@ -3792,7 +3792,6 @@ pub impl Resolver {\n         // we only have self ty if it is a non static method\n         let self_binding = match method.self_ty.node {\n           sty_static => { NoSelfBinding }\n-          sty_by_ref => { HasSelfBinding(method.self_id, true) }\n           _ => { HasSelfBinding(method.self_id, false) }\n         };\n "}, {"sha": "0da1a9acef21225856ae3b63f03fbcf0b9f20f5e", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=995425badba216e38c8eb1e4c6dd6989c50660b3", "patch": "@@ -766,18 +766,15 @@ fn trans_rvalue_dps_unadjusted(bcx: block, expr: @ast::expr,\n         }\n         ast::expr_binary(_, lhs, rhs) => {\n             // if not overloaded, would be RvalueDatumExpr\n-            return trans_overloaded_op(bcx, expr, lhs, ~[rhs], dest,\n-                                       DoAutorefArg);\n+            return trans_overloaded_op(bcx, expr, lhs, ~[rhs], dest);\n         }\n         ast::expr_unary(_, subexpr) => {\n             // if not overloaded, would be RvalueDatumExpr\n-            return trans_overloaded_op(bcx, expr, subexpr, ~[], dest,\n-                                       DontAutorefArg);\n+            return trans_overloaded_op(bcx, expr, subexpr, ~[], dest);\n         }\n         ast::expr_index(base, idx) => {\n             // if not overloaded, would be RvalueDatumExpr\n-            return trans_overloaded_op(bcx, expr, base, ~[idx], dest,\n-                                       DontAutorefArg);\n+            return trans_overloaded_op(bcx, expr, base, ~[idx], dest);\n         }\n         ast::expr_cast(val, _) => {\n             match ty::get(node_id_type(bcx, expr.id)).sty {\n@@ -1644,16 +1641,15 @@ fn trans_overloaded_op(bcx: block,\n                        expr: @ast::expr,\n                        rcvr: @ast::expr,\n                        +args: ~[@ast::expr],\n-                       dest: Dest,\n-                       +autoref_arg: AutorefArg) -> block\n+                       dest: Dest) -> block\n {\n     let origin = *bcx.ccx().maps.method_map.get(&expr.id);\n     let fty = node_id_type(bcx, expr.callee_id);\n     return callee::trans_call_inner(\n         bcx, expr.info(), fty,\n         expr_ty(bcx, expr),\n         |bcx| meth::trans_method_callee(bcx, expr.callee_id, rcvr, origin),\n-        callee::ArgExprs(args), dest, autoref_arg);\n+        callee::ArgExprs(args), dest, DoAutorefArg);\n }\n \n fn int_cast(bcx: block, lldsttype: TypeRef, llsrctype: TypeRef,\n@@ -1806,7 +1802,7 @@ fn trans_assign_op(bcx: block,\n         // FIXME(#2528) evaluates the receiver twice!!\n         let scratch = scratch_datum(bcx, dst_datum.ty, false);\n         let bcx = trans_overloaded_op(bcx, expr, dst, ~[src],\n-                                      SaveIn(scratch.val), DoAutorefArg);\n+                                      SaveIn(scratch.val));\n         return scratch.move_to_datum(bcx, DROP_EXISTING, dst_datum);\n     }\n "}, {"sha": "c37702e8d2b09584a5d025931db33aaa173a6251", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=995425badba216e38c8eb1e4c6dd6989c50660b3", "patch": "@@ -596,7 +596,7 @@ pub fn trans_trait_callee(bcx: block,\n \n     let llpair = match explicit_self {\n         ast::sty_region(*) => Load(bcx, llpair),\n-        ast::sty_static | ast::sty_by_ref | ast::sty_value |\n+        ast::sty_static | ast::sty_value |\n         ast::sty_box(_) | ast::sty_uniq(_) => llpair\n     };\n \n@@ -645,21 +645,6 @@ pub fn trans_trait_callee_from_llval(bcx: block,\n         ast::sty_static => {\n             bcx.tcx().sess.bug(~\"shouldn't see static method here\");\n         }\n-        ast::sty_by_ref => {\n-            // We need to pass a pointer to a pointer to the payload.\n-            match store {\n-                ty::BoxTraitStore |\n-                ty::BareTraitStore |\n-                ty::UniqTraitStore => {\n-                    llself = GEPi(bcx, llbox, [0u, abi::box_field_body]);\n-                }\n-                ty::RegionTraitStore(_) => {\n-                    llself = llbox;\n-                }\n-            }\n-\n-            self_mode = ast::by_ref;\n-        }\n         ast::sty_value => {\n             bcx.tcx().sess.bug(~\"methods with by-value self should not be \\\n                                called on objects\");"}, {"sha": "320f0206fb8714e92406b9e353e95b5114e1576c", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=995425badba216e38c8eb1e4c6dd6989c50660b3", "patch": "@@ -99,7 +99,7 @@ use core::hashmap::linear::LinearSet;\n use core::result;\n use core::uint;\n use core::vec;\n-use syntax::ast::{def_id, sty_by_ref, sty_value, sty_region, sty_box};\n+use syntax::ast::{def_id, sty_value, sty_region, sty_box};\n use syntax::ast::{sty_uniq, sty_static, node_id, by_copy, by_ref};\n use syntax::ast::{m_const, m_mutbl, m_imm};\n use syntax::ast;\n@@ -527,7 +527,7 @@ pub impl<'self> LookupContext<'self> {\n             ast::sty_region(_) => {\n                 return; // inapplicable\n             }\n-            ast::sty_by_ref | ast::sty_region(_) => vstore_slice(r)\n+            ast::sty_region(_) => vstore_slice(r)\n             ast::sty_box(_) => vstore_box, // XXX NDM mutability\n             ast::sty_uniq(_) => vstore_uniq\n         }\n@@ -741,7 +741,7 @@ pub impl<'self> LookupContext<'self> {\n         // shouldn't really have to be.\n         let rcvr_substs = {\n             match self_decl {\n-                sty_static | sty_value | sty_by_ref |\n+                sty_static | sty_value |\n                 sty_box(_) | sty_uniq(_) => {\n                     self_substs\n                 }\n@@ -1327,7 +1327,7 @@ pub fn transform_self_type_for_method(tcx: ty::ctxt,\n         tcx.sess.bug(~\"calling transform_self_type_for_method on \\\n                        static method\");\n       }\n-      sty_by_ref | sty_value => {\n+      sty_value => {\n         impl_ty\n       }\n       sty_region(_, mutability) => {"}, {"sha": "85efc9fa738e8d1475111320625557fc1367dd6f", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 40, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=995425badba216e38c8eb1e4c6dd6989c50660b3", "patch": "@@ -1064,44 +1064,7 @@ pub fn impl_self_ty(vcx: &VtableContext,\n                  -> ty_param_substs_and_ty {\n     let tcx = vcx.tcx();\n \n-    let (n_tps, region_param, raw_ty) = if did.crate == ast::local_crate {\n-        let region_param = tcx.region_paramd_items.find(&did.node).\n-                               map_consume(|x| *x);\n-        match tcx.items.find(&did.node) {\n-          Some(&ast_map::node_item(@ast::item {\n-                  node: ast::item_impl(ref ts, _, st, _),\n-                  _\n-              }, _)) => {\n-            let region_parameterization =\n-                RegionParameterization::from_variance_and_generics(\n-                    region_param,\n-                    ts);\n-            (ts.ty_params.len(),\n-             region_param,\n-             vcx.ccx.to_ty(&rscope::type_rscope(region_parameterization), st))\n-          }\n-          Some(&ast_map::node_item(@ast::item {\n-                  node: ast::item_struct(_, ref ts),\n-                  id: class_id,\n-                  _\n-              },_)) => {\n-              /* If the impl is a class, the self ty is just the class ty\n-                 (doing a no-op subst for the ty params; in the next step,\n-                 we substitute in fresh vars for them)\n-               */\n-              (ts.ty_params.len(),\n-               region_param,\n-               ty::mk_struct(tcx, local_def(class_id),\n-                      substs {\n-                        self_r: rscope::bound_self_region(region_param),\n-                        self_ty: None,\n-                        tps: ty::ty_params_to_tys(tcx, ts)\n-                      }))\n-          }\n-          _ => { tcx.sess.bug(~\"impl_self_ty: unbound item or item that \\\n-               doesn't have a self_ty\"); }\n-        }\n-    } else {\n+    let (n_tps, region_param, raw_ty) = {\n         let ity = ty::lookup_item_type(tcx, did);\n         (vec::len(*ity.bounds), ity.region_param, ity.ty)\n     };\n@@ -1586,7 +1549,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n        lookup_op_method(\n             fcx, ex, rhs_expr, rhs_t,\n             fcx.tcx().sess.ident_of(mname), ~[],\n-            DontDerefArgs, DontAutoderefReceiver,\n+            DoDerefArgs, DontAutoderefReceiver,\n             || {\n                 fcx.type_error_message(ex.span, |actual| {\n                     fmt!(\"cannot apply unary operator `%s` to type `%s`\",\n@@ -2795,7 +2758,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n                           expr.span, raw_base_t);\n                       let ret_ty = lookup_op_method(fcx, expr, base, resolved,\n                                              tcx.sess.ident_of(~\"index\"),\n-                                             ~[idx], DontDerefArgs, AutoderefReceiver,\n+                                             ~[idx], DoDerefArgs, AutoderefReceiver,\n                         || {\n                             fcx.type_error_message(expr.span, |actual|\n                                 fmt!(\"cannot index a value \\"}, {"sha": "8bac0fed3c925caf5920d5703b4c5cee9f741648", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=995425badba216e38c8eb1e4c6dd6989c50660b3", "patch": "@@ -437,7 +437,8 @@ pub impl Bitv {\n             if offset >= bitv.nbits {\n                 0\n             } else {\n-                bitv[offset] as u8 << (7 - bit)\n+                // NOTE cannot use bitv[offset] until snapshot\n+                bitv.index(&offset) as u8 << (7 - bit)\n             }\n         }\n \n@@ -459,7 +460,8 @@ pub impl Bitv {\n      * Transform self into a [bool] by turning each bit into a bool\n      */\n     fn to_bools(&self) -> ~[bool] {\n-        vec::from_fn(self.nbits, |i| self[i])\n+        // NOTE cannot use self[i] until snapshot\n+        vec::from_fn(self.nbits, |i| self.index(&i))\n     }\n \n     /**\n@@ -555,8 +557,8 @@ pub fn from_fn(len: uint, f: &fn(index: uint) -> bool) -> Bitv {\n }\n \n impl ops::Index<uint,bool> for Bitv {\n-    fn index(&self, i: uint) -> bool {\n-        self.get(i)\n+    fn index(&self, i: &uint) -> bool {\n+        self.get(*i)\n     }\n }\n "}, {"sha": "b82616d386af8e9bd588191ecb16215c864e347f", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=995425badba216e38c8eb1e4c6dd6989c50660b3", "patch": "@@ -68,11 +68,9 @@ pub mod reader {\n \n     // ebml reading\n \n-    impl ops::Index<uint,Doc> for Doc {\n-        fn index(&self, tag: uint) -> Doc {\n-            unsafe {\n-                get_doc(*self, tag)\n-            }\n+    pub impl Doc {\n+        fn get(&self, tag: uint) -> Doc {\n+            get_doc(*self, tag)\n         }\n     }\n "}, {"sha": "12d4e9d5e24472954d67498b911aa65ad1257492", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=995425badba216e38c8eb1e4c6dd6989c50660b3", "patch": "@@ -1004,7 +1004,6 @@ impl to_bytes::IterBytes for ret_style {\n #[deriving(Eq)]\n pub enum self_ty_ {\n     sty_static,                                // no self\n-    sty_by_ref,                                // ``\n     sty_value,                                 // `self`\n     sty_region(Option<@Lifetime>, mutability), // `&'lt self`\n     sty_box(mutability),                       // `@self`"}, {"sha": "df4dd2735fcd1d5e83232de2e3864fcbd44de7d0", "filename": "src/libsyntax/ext/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs?ref=995425badba216e38c8eb1e4c6dd6989c50660b3", "patch": "@@ -17,7 +17,7 @@ use ast::{item_enum, item_impl, item_struct, Generics};\n use ast::{m_imm, meta_item, method};\n use ast::{named_field, or, pat, pat_ident, pat_wild, public, pure_fn};\n use ast::{stmt, struct_def, struct_variant_kind};\n-use ast::{sty_by_ref, sty_region, tuple_variant_kind, ty_nil, TyParam};\n+use ast::{sty_region, tuple_variant_kind, ty_nil, TyParam};\n use ast::{TyParamBound, ty_path, ty_rptr, unnamed_field, variant};\n use ext::base::ext_ctxt;\n use ext::build;"}, {"sha": "531390035db814c50acde6e0f32b225e84f0caab", "filename": "src/libsyntax/ext/deriving/eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibsyntax%2Fext%2Fderiving%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibsyntax%2Fext%2Fderiving%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Feq.rs?ref=995425badba216e38c8eb1e4c6dd6989c50660b3", "patch": "@@ -17,7 +17,7 @@ use ast::{item_enum, item_impl, item_struct, Generics};\n use ast::{m_imm, meta_item, method};\n use ast::{named_field, or, pat, pat_ident, pat_wild, public, pure_fn};\n use ast::{stmt, struct_def, struct_variant_kind};\n-use ast::{sty_by_ref, sty_region, tuple_variant_kind, ty_nil, TyParam};\n+use ast::{sty_region, tuple_variant_kind, ty_nil, TyParam};\n use ast::{TyParamBound, ty_path, ty_rptr, unnamed_field, variant};\n use ext::base::ext_ctxt;\n use ext::build;"}, {"sha": "528db0d10721db6e68dc4b84f13c9436ff8ca7f1", "filename": "src/libsyntax/ext/deriving/iter_bytes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs?ref=995425badba216e38c8eb1e4c6dd6989c50660b3", "patch": "@@ -17,7 +17,7 @@ use ast::{item_enum, item_impl, item_struct, Generics};\n use ast::{m_imm, meta_item, method};\n use ast::{named_field, or, pat, pat_ident, pat_wild, public, pure_fn};\n use ast::{stmt, struct_def, struct_variant_kind};\n-use ast::{sty_by_ref, sty_region, tuple_variant_kind, ty_nil, TyParam};\n+use ast::{sty_region, tuple_variant_kind, ty_nil, TyParam};\n use ast::{TyParamBound, ty_path, ty_rptr, unnamed_field, variant};\n use ext::base::ext_ctxt;\n use ext::build;"}, {"sha": "21477d6e0675ed9b1a27266b9ba793cf2d2ee35c", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=995425badba216e38c8eb1e4c6dd6989c50660b3", "patch": "@@ -20,7 +20,7 @@ use ast::{item_enum, item_impl, item_struct, Generics};\n use ast::{m_imm, meta_item, method};\n use ast::{named_field, or, pat, pat_ident, pat_wild, public, pure_fn};\n use ast::{stmt, struct_def, struct_variant_kind};\n-use ast::{sty_by_ref, sty_region, tuple_variant_kind, ty_nil, TyParam};\n+use ast::{sty_region, tuple_variant_kind, ty_nil, TyParam};\n use ast::{TyParamBound, ty_path, ty_rptr, unnamed_field, variant};\n use ext::base::ext_ctxt;\n use ext::build;"}, {"sha": "c2e7ecacd20dbdfd45088bd4c0ee98b6d0b1f9e7", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=995425badba216e38c8eb1e4c6dd6989c50660b3", "patch": "@@ -46,7 +46,7 @@ use ast::{rem, required};\n use ast::{ret_style, return_val, self_ty, shl, shr, stmt, stmt_decl};\n use ast::{stmt_expr, stmt_semi, stmt_mac, struct_def, struct_field};\n use ast::{struct_immutable, struct_mutable, struct_variant_kind, subtract};\n-use ast::{sty_box, sty_by_ref, sty_region, sty_static, sty_uniq, sty_value};\n+use ast::{sty_box, sty_region, sty_static, sty_uniq, sty_value};\n use ast::{token_tree, trait_method, trait_ref, tt_delim, tt_seq, tt_tok};\n use ast::{tt_nonterminal, tuple_variant_kind, Ty, ty_, ty_bot, ty_box};\n use ast::{ty_field, ty_fixed_length_vec, ty_closure, ty_bare_fn};\n@@ -472,8 +472,6 @@ pub impl Parser {\n         ) |p| {\n             let attrs = p.parse_outer_attributes();\n             let lo = p.span.lo;\n-            let is_static = p.parse_staticness();\n-            let static_sty = spanned(lo, p.span.hi, sty_static);\n \n             let vis = p.parse_visibility();\n             let pur = p.parse_fn_purity();\n@@ -488,12 +486,6 @@ pub impl Parser {\n                 // names to be left off if there is a definition...\n                 either::Left(p.parse_arg_general(false))\n             };\n-            // XXX: Wrong. Shouldn't allow both static and self_ty\n-            let self_ty = if is_static || self_ty.node == sty_by_ref {\n-                static_sty\n-            } else {\n-                self_ty\n-            };\n \n             let hi = p.last_span.hi;\n             debug!(\"parse_trait_methods(): trait method signature ends in \\\n@@ -2878,7 +2870,7 @@ pub impl Parser {\n                 p.expect_self_ident();\n                 cnstr(mutability)\n             } else {\n-                sty_by_ref\n+                sty_static\n             }\n         }\n \n@@ -2927,7 +2919,7 @@ pub impl Parser {\n                 self.expect_self_ident();\n                 sty_region(Some(lifetime), mutability)\n             } else {\n-                sty_by_ref\n+                sty_static\n             }\n         }\n \n@@ -2951,13 +2943,13 @@ pub impl Parser {\n             sty_value\n           }\n           _ => {\n-            sty_by_ref\n+            sty_static\n           }\n         };\n \n         // If we parsed a self type, expect a comma before the argument list.\n         let args_or_capture_items;\n-        if self_ty != sty_by_ref {\n+        if self_ty != sty_static {\n             match *self.token {\n                 token::COMMA => {\n                     self.bump();\n@@ -3059,22 +3051,13 @@ pub impl Parser {\n         let attrs = self.parse_outer_attributes();\n         let lo = self.span.lo;\n \n-        let is_static = self.parse_staticness();\n-        let static_sty = spanned(lo, self.span.hi, sty_static);\n-\n         let visa = self.parse_visibility();\n         let pur = self.parse_fn_purity();\n         let ident = self.parse_ident();\n         let generics = self.parse_generics();\n         let (self_ty, decl) = do self.parse_fn_decl_with_self() |p| {\n             p.parse_arg()\n         };\n-        // XXX: interaction between staticness, self_ty is broken now\n-        let self_ty = if is_static || self_ty.node == sty_by_ref {\n-            static_sty\n-        } else {\n-            self_ty\n-        };\n \n         let (inner_attrs, body) = self.parse_inner_attrs_and_block(true);\n         let hi = body.span.hi;"}, {"sha": "9fffed7074b3d48cba412e92b0cf6407b1c02e33", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=995425badba216e38c8eb1e4c6dd6989c50660b3", "patch": "@@ -1648,7 +1648,7 @@ pub fn print_pat(s: @ps, &&pat: @ast::pat, refutable: bool) {\n // Returns whether it printed anything\n pub fn print_self_ty(s: @ps, self_ty: ast::self_ty_) -> bool {\n     match self_ty {\n-        ast::sty_static | ast::sty_by_ref => { return false; }\n+        ast::sty_static => { return false; }\n         ast::sty_value => { word(s.s, ~\"self\"); }\n         ast::sty_region(lt, m) => {\n             word(s.s, ~\"&\");\n@@ -1674,7 +1674,7 @@ pub fn print_fn(s: @ps,\n                 opt_self_ty: Option<ast::self_ty_>,\n                 vis: ast::visibility) {\n     head(s, ~\"\");\n-    print_fn_header_info(s, opt_self_ty, purity, ast::Many, None, vis);\n+    print_fn_header_info(s, purity, ast::Many, None, vis);\n     nbsp(s);\n     print_ident(s, name);\n     print_generics(s, generics);\n@@ -2181,7 +2181,6 @@ pub fn print_opt_sigil(s: @ps, opt_sigil: Option<ast::Sigil>) {\n }\n \n pub fn print_fn_header_info(s: @ps,\n-                            opt_sty: Option<ast::self_ty_>,\n                             purity: ast::purity,\n                             onceness: ast::Onceness,\n                             opt_sigil: Option<ast::Sigil>,"}, {"sha": "6f479140d73aec1cc89ef102ff8ceaacef9a3020", "filename": "src/test/run-pass/operator-overloading.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading.rs?ref=995425badba216e38c8eb1e4c6dd6989c50660b3", "patch": "@@ -40,8 +40,8 @@ impl ops::Not<Point> for Point {\n }\n \n impl ops::Index<bool,int> for Point {\n-    fn index(&self, +x: bool) -> int {\n-        if x { self.x } else { self.y }\n+    fn index(&self, +x: &bool) -> int {\n+        if *x { self.x } else { self.y }\n     }\n }\n "}, {"sha": "7d1d0c6be0e5e7fc3ea0d57538b858fc22495b8f", "filename": "src/test/run-pass/overload-index-operator.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Ftest%2Frun-pass%2Foverload-index-operator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995425badba216e38c8eb1e4c6dd6989c50660b3/src%2Ftest%2Frun-pass%2Foverload-index-operator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverload-index-operator.rs?ref=995425badba216e38c8eb1e4c6dd6989c50660b3", "patch": "@@ -0,0 +1,55 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test overloading of the `[]` operator.  In particular test that it\n+// takes its argument *by reference*.\n+\n+use core::ops::Index;\n+\n+struct AssociationList<K,V> {\n+    pairs: ~[AssociationPair<K,V>]\n+}\n+\n+struct AssociationPair<K,V> {\n+    key: K,\n+    value: V\n+}\n+\n+impl<K,V> AssociationList<K,V> {\n+    fn push(&mut self, key: K, value: V) {\n+        self.pairs.push(AssociationPair {key: key, value: value});\n+    }\n+}\n+\n+impl<K:Eq,V:Copy> Index<K,V> for AssociationList<K,V> {\n+    fn index(&self, index: &K) -> V {\n+        for self.pairs.each |pair| {\n+            if pair.key == *index {\n+                return copy pair.value;\n+            }\n+        }\n+        fail!(fmt!(\"No value found for key: %?\", index));\n+    }\n+}\n+\n+pub fn main() {\n+    let foo = ~\"foo\";\n+    let bar = ~\"bar\";\n+\n+    let mut list = AssociationList {pairs: ~[]};\n+    list.push(copy foo, 22);\n+    list.push(copy bar, 44);\n+\n+    fail_unless!(list[foo] == 22)\n+    fail_unless!(list[bar] == 44)\n+\n+    fail_unless!(list[foo] == 22)\n+    fail_unless!(list[bar] == 44)\n+}\n\\ No newline at end of file"}]}