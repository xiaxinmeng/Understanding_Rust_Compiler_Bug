{"sha": "91e021a59cecb995a8fdf492d55031d8cfca00f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxZTAyMWE1OWNlY2I5OTVhOGZkZjQ5MmQ1NTAzMWQ4Y2ZjYTAwZjU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-12-03T21:17:43Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-12-04T12:13:59Z"}, "message": "Make some private methods public", "tree": {"sha": "1d173306eb2da927833cff65053196cb99b88ed5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d173306eb2da927833cff65053196cb99b88ed5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91e021a59cecb995a8fdf492d55031d8cfca00f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91e021a59cecb995a8fdf492d55031d8cfca00f5", "html_url": "https://github.com/rust-lang/rust/commit/91e021a59cecb995a8fdf492d55031d8cfca00f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91e021a59cecb995a8fdf492d55031d8cfca00f5/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db0e6cd5628f021ea03d6ac7583f0be10637b8db", "url": "https://api.github.com/repos/rust-lang/rust/commits/db0e6cd5628f021ea03d6ac7583f0be10637b8db", "html_url": "https://github.com/rust-lang/rust/commit/db0e6cd5628f021ea03d6ac7583f0be10637b8db"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "907b96e964ac96b47187c55d1f2611f8d14f0af2", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/91e021a59cecb995a8fdf492d55031d8cfca00f5/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91e021a59cecb995a8fdf492d55031d8cfca00f5/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=91e021a59cecb995a8fdf492d55031d8cfca00f5", "patch": "@@ -431,7 +431,7 @@ pub struct Attributes {\n \n impl Attributes {\n     /// Extracts the content from an attribute `#[doc(cfg(content))]`.\n-    fn extract_cfg(mi: &ast::MetaItem) -> Option<&ast::MetaItem> {\n+    pub fn extract_cfg(mi: &ast::MetaItem) -> Option<&ast::MetaItem> {\n         use syntax::ast::NestedMetaItem::MetaItem;\n \n         if let ast::MetaItemKind::List(ref nmis) = mi.kind {\n@@ -456,7 +456,7 @@ impl Attributes {\n     /// Reads a `MetaItem` from within an attribute, looks for whether it is a\n     /// `#[doc(include=\"file\")]`, and returns the filename and contents of the file as loaded from\n     /// its expansion.\n-    fn extract_include(mi: &ast::MetaItem)\n+    pub fn extract_include(mi: &ast::MetaItem)\n         -> Option<(String, String)>\n     {\n         mi.meta_item_list().and_then(|list| {\n@@ -710,7 +710,7 @@ pub enum GenericBound {\n }\n \n impl GenericBound {\n-    fn maybe_sized(cx: &DocContext<'_>) -> GenericBound {\n+    pub fn maybe_sized(cx: &DocContext<'_>) -> GenericBound {\n         let did = cx.tcx.require_lang_item(lang_items::SizedTraitLangItem, None);\n         let empty = cx.tcx.intern_substs(&[]);\n         let path = external_path(cx, cx.tcx.item_name(did),\n@@ -727,7 +727,7 @@ impl GenericBound {\n         }, hir::TraitBoundModifier::Maybe)\n     }\n \n-    fn is_sized_bound(&self, cx: &DocContext<'_>) -> bool {\n+    pub fn is_sized_bound(&self, cx: &DocContext<'_>) -> bool {\n         use rustc::hir::TraitBoundModifier as TBM;\n         if let GenericBound::TraitBound(PolyTrait { ref trait_, .. }, TBM::None) = *self {\n             if trait_.def_id() == cx.tcx.lang_items().sized_trait() {\n@@ -737,14 +737,14 @@ impl GenericBound {\n         false\n     }\n \n-    fn get_poly_trait(&self) -> Option<PolyTrait> {\n+    pub fn get_poly_trait(&self) -> Option<PolyTrait> {\n         if let GenericBound::TraitBound(ref p, _) = *self {\n             return Some(p.clone())\n         }\n         None\n     }\n \n-    fn get_trait_type(&self) -> Option<Type> {\n+    pub fn get_trait_type(&self) -> Option<Type> {\n         if let GenericBound::TraitBound(PolyTrait { ref trait_, .. }, _) = *self {\n             Some(trait_.clone())\n         } else {\n@@ -1205,7 +1205,7 @@ impl GetDefId for Type {\n }\n \n impl PrimitiveType {\n-    fn from_str(s: &str) -> Option<PrimitiveType> {\n+    pub fn from_str(s: &str) -> Option<PrimitiveType> {\n         match s {\n             \"isize\" => Some(PrimitiveType::Isize),\n             \"i8\" => Some(PrimitiveType::I8),"}]}