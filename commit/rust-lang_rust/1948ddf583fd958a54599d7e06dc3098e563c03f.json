{"sha": "1948ddf583fd958a54599d7e06dc3098e563c03f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NDhkZGY1ODNmZDk1OGE1NDU5OWQ3ZTA2ZGMzMDk4ZTU2M2MwM2Y=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-28T23:25:57Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-28T23:26:18Z"}, "message": "De-mode std::unicode. Part of #3583.", "tree": {"sha": "10357a5aa5f27a336b24f28903b517ad77666b15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10357a5aa5f27a336b24f28903b517ad77666b15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1948ddf583fd958a54599d7e06dc3098e563c03f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1948ddf583fd958a54599d7e06dc3098e563c03f", "html_url": "https://github.com/rust-lang/rust/commit/1948ddf583fd958a54599d7e06dc3098e563c03f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1948ddf583fd958a54599d7e06dc3098e563c03f/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37ff152851ab22fd94d165b53d8604b43d37485f", "url": "https://api.github.com/repos/rust-lang/rust/commits/37ff152851ab22fd94d165b53d8604b43d37485f", "html_url": "https://github.com/rust-lang/rust/commit/37ff152851ab22fd94d165b53d8604b43d37485f"}], "stats": {"total": 290, "additions": 143, "deletions": 147}, "files": [{"sha": "faca45fa6f7de39657730086f68c56762cc23b7d", "filename": "src/libstd/std.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1948ddf583fd958a54599d7e06dc3098e563c03f/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/1948ddf583fd958a54599d7e06dc3098e563c03f/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=1948ddf583fd958a54599d7e06dc3098e563c03f", "patch": "@@ -124,7 +124,6 @@ mod cmp;\n mod base64;\n \n #[cfg(unicode)]\n-#[legacy_exports]\n mod unicode;\n \n "}, {"sha": "bafe385ed19da76de552cb0d90726aa870b5cb42", "filename": "src/libstd/unicode.rs", "status": "modified", "additions": 143, "deletions": 146, "changes": 289, "blob_url": "https://github.com/rust-lang/rust/blob/1948ddf583fd958a54599d7e06dc3098e563c03f/src%2Flibstd%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1948ddf583fd958a54599d7e06dc3098e563c03f/src%2Flibstd%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funicode.rs?ref=1948ddf583fd958a54599d7e06dc3098e563c03f", "patch": "@@ -1,157 +1,155 @@\n #[forbid(deprecated_mode)];\n \n-mod icu {\n-    #[legacy_exports];\n-    type UBool = u8;\n-    type UProperty = int;\n-    type UChar32 = char;\n-\n-    const TRUE : u8 = 1u8;\n-    const FALSE : u8 = 1u8;\n-\n-    const UCHAR_ALPHABETIC : UProperty = 0;\n-    const UCHAR_BINARY_START : UProperty = 0; // = UCHAR_ALPHABETIC\n-    const UCHAR_ASCII_HEX_DIGIT : UProperty = 1;\n-    const UCHAR_BIDI_CONTROL : UProperty = 2;\n-\n-    const UCHAR_BIDI_MIRRORED : UProperty = 3;\n-    const UCHAR_DASH : UProperty = 4;\n-    const UCHAR_DEFAULT_IGNORABLE_CODE_POINT : UProperty = 5;\n-    const UCHAR_DEPRECATED : UProperty = 6;\n-\n-    const UCHAR_DIACRITIC : UProperty = 7;\n-    const UCHAR_EXTENDER : UProperty = 8;\n-    const UCHAR_FULL_COMPOSITION_EXCLUSION : UProperty = 9;\n-    const UCHAR_GRAPHEME_BASE : UProperty = 10;\n-\n-    const UCHAR_GRAPHEME_EXTEND : UProperty = 11;\n-    const UCHAR_GRAPHEME_LINK : UProperty = 12;\n-    const UCHAR_HEX_DIGIT : UProperty = 13;\n-    const UCHAR_HYPHEN : UProperty = 14;\n-\n-    const UCHAR_ID_CONTINUE : UProperty = 15;\n-    const UCHAR_ID_START : UProperty = 16;\n-    const UCHAR_IDEOGRAPHIC : UProperty = 17;\n-    const UCHAR_IDS_BINARY_OPERATOR : UProperty = 18;\n-\n-    const UCHAR_IDS_TRINARY_OPERATOR : UProperty = 19;\n-    const UCHAR_JOIN_CONTROL : UProperty = 20;\n-    const UCHAR_LOGICAL_ORDER_EXCEPTION : UProperty = 21;\n-    const UCHAR_LOWERCASE : UProperty = 22;\n-\n-    const UCHAR_MATH : UProperty = 23;\n-    const UCHAR_NONCHARACTER_CODE_POINT : UProperty = 24;\n-    const UCHAR_QUOTATION_MARK : UProperty = 25;\n-    const UCHAR_RADICAL : UProperty = 26;\n-\n-    const UCHAR_SOFT_DOTTED : UProperty = 27;\n-    const UCHAR_TERMINAL_PUNCTUATION : UProperty = 28;\n-    const UCHAR_UNIFIED_IDEOGRAPH : UProperty = 29;\n-    const UCHAR_UPPERCASE : UProperty = 30;\n-\n-    const UCHAR_WHITE_SPACE : UProperty = 31;\n-    const UCHAR_XID_CONTINUE : UProperty = 32;\n-    const UCHAR_XID_START : UProperty = 33;\n-    const UCHAR_CASE_SENSITIVE : UProperty = 34;\n-\n-    const UCHAR_S_TERM : UProperty = 35;\n-    const UCHAR_VARIATION_SELECTOR : UProperty = 36;\n-    const UCHAR_NFD_INERT : UProperty = 37;\n-    const UCHAR_NFKD_INERT : UProperty = 38;\n-\n-    const UCHAR_NFC_INERT : UProperty = 39;\n-    const UCHAR_NFKC_INERT : UProperty = 40;\n-    const UCHAR_SEGMENT_STARTER : UProperty = 41;\n-    const UCHAR_PATTERN_SYNTAX : UProperty = 42;\n-\n-    const UCHAR_PATTERN_WHITE_SPACE : UProperty = 43;\n-    const UCHAR_POSIX_ALNUM : UProperty = 44;\n-    const UCHAR_POSIX_BLANK : UProperty = 45;\n-    const UCHAR_POSIX_GRAPH : UProperty = 46;\n-\n-    const UCHAR_POSIX_PRINT : UProperty = 47;\n-    const UCHAR_POSIX_XDIGIT : UProperty = 48;\n-    const UCHAR_CASED : UProperty = 49;\n-    const UCHAR_CASE_IGNORABLE : UProperty = 50;\n-\n-    const UCHAR_CHANGES_WHEN_LOWERCASED : UProperty = 51;\n-    const UCHAR_CHANGES_WHEN_UPPERCASED : UProperty = 52;\n-    const UCHAR_CHANGES_WHEN_TITLECASED : UProperty = 53;\n-    const UCHAR_CHANGES_WHEN_CASEFOLDED : UProperty = 54;\n-\n-    const UCHAR_CHANGES_WHEN_CASEMAPPED : UProperty = 55;\n-    const UCHAR_CHANGES_WHEN_NFKC_CASEFOLDED : UProperty = 56;\n-    const UCHAR_BINARY_LIMIT : UProperty = 57;\n-    const UCHAR_BIDI_CLASS : UProperty = 0x1000;\n-\n-    const UCHAR_INT_START : UProperty = 0x1000; // UCHAR_BIDI_CLASS\n-    const UCHAR_BLOCK : UProperty = 0x1001;\n-    const UCHAR_CANONICAL_COMBINING_CLASS : UProperty = 0x1002;\n-    const UCHAR_DECOMPOSITION_TYPE : UProperty = 0x1003;\n-\n-    const UCHAR_EAST_ASIAN_WIDTH : UProperty = 0x1004;\n-    const UCHAR_GENERAL_CATEGORY : UProperty = 0x1005;\n-    const UCHAR_JOINING_GROUP : UProperty = 0x1006;\n-    const UCHAR_JOINING_TYPE : UProperty = 0x1007;\n-\n-    const UCHAR_LINE_BREAK : UProperty = 0x1008;\n-    const UCHAR_NUMERIC_TYPE : UProperty = 0x1009;\n-    const UCHAR_SCRIPT : UProperty = 0x100A;\n-    const UCHAR_HANGUL_SYLLABLE_TYPE : UProperty = 0x100B;\n-\n-    const UCHAR_NFD_QUICK_CHECK : UProperty = 0x100C;\n-    const UCHAR_NFKD_QUICK_CHECK : UProperty = 0x100D;\n-    const UCHAR_NFC_QUICK_CHECK : UProperty = 0x100E;\n-    const UCHAR_NFKC_QUICK_CHECK : UProperty = 0x100F;\n-\n-    const UCHAR_LEAD_CANONICAL_COMBINING_CLASS : UProperty = 0x1010;\n-    const UCHAR_TRAIL_CANONICAL_COMBINING_CLASS : UProperty = 0x1011;\n-    const UCHAR_GRAPHEME_CLUSTER_BREAK : UProperty = 0x1012;\n-    const UCHAR_SENTENCE_BREAK : UProperty = 0x1013;\n-\n-    const UCHAR_WORD_BREAK : UProperty = 0x1014;\n-    const UCHAR_INT_LIMIT : UProperty = 0x1015;\n-\n-    const UCHAR_GENERAL_CATEGORY_MASK : UProperty = 0x2000;\n-    const UCHAR_MASK_START : UProperty = 0x2000;\n+pub mod icu {\n+    pub type UBool = u8;\n+    pub type UProperty = int;\n+    pub type UChar32 = char;\n+\n+    pub const TRUE : u8 = 1u8;\n+    pub const FALSE : u8 = 1u8;\n+\n+    pub const UCHAR_ALPHABETIC : UProperty = 0;\n+    pub const UCHAR_BINARY_START : UProperty = 0; // = UCHAR_ALPHABETIC\n+    pub const UCHAR_ASCII_HEX_DIGIT : UProperty = 1;\n+    pub const UCHAR_BIDI_CONTROL : UProperty = 2;\n+\n+    pub const UCHAR_BIDI_MIRRORED : UProperty = 3;\n+    pub const UCHAR_DASH : UProperty = 4;\n+    pub const UCHAR_DEFAULT_IGNORABLE_CODE_POINT : UProperty = 5;\n+    pub const UCHAR_DEPRECATED : UProperty = 6;\n+\n+    pub const UCHAR_DIACRITIC : UProperty = 7;\n+    pub const UCHAR_EXTENDER : UProperty = 8;\n+    pub const UCHAR_FULL_COMPOSITION_EXCLUSION : UProperty = 9;\n+    pub const UCHAR_GRAPHEME_BASE : UProperty = 10;\n+\n+    pub const UCHAR_GRAPHEME_EXTEND : UProperty = 11;\n+    pub const UCHAR_GRAPHEME_LINK : UProperty = 12;\n+    pub const UCHAR_HEX_DIGIT : UProperty = 13;\n+    pub const UCHAR_HYPHEN : UProperty = 14;\n+\n+    pub const UCHAR_ID_CONTINUE : UProperty = 15;\n+    pub const UCHAR_ID_START : UProperty = 16;\n+    pub const UCHAR_IDEOGRAPHIC : UProperty = 17;\n+    pub const UCHAR_IDS_BINARY_OPERATOR : UProperty = 18;\n+\n+    pub const UCHAR_IDS_TRINARY_OPERATOR : UProperty = 19;\n+    pub const UCHAR_JOIN_CONTROL : UProperty = 20;\n+    pub const UCHAR_LOGICAL_ORDER_EXCEPTION : UProperty = 21;\n+    pub const UCHAR_LOWERCASE : UProperty = 22;\n+\n+    pub const UCHAR_MATH : UProperty = 23;\n+    pub const UCHAR_NONCHARACTER_CODE_POINT : UProperty = 24;\n+    pub const UCHAR_QUOTATION_MARK : UProperty = 25;\n+    pub const UCHAR_RADICAL : UProperty = 26;\n+\n+    pub const UCHAR_SOFT_DOTTED : UProperty = 27;\n+    pub const UCHAR_TERMINAL_PUNCTUATION : UProperty = 28;\n+    pub const UCHAR_UNIFIED_IDEOGRAPH : UProperty = 29;\n+    pub const UCHAR_UPPERCASE : UProperty = 30;\n+\n+    pub const UCHAR_WHITE_SPACE : UProperty = 31;\n+    pub const UCHAR_XID_CONTINUE : UProperty = 32;\n+    pub const UCHAR_XID_START : UProperty = 33;\n+    pub const UCHAR_CASE_SENSITIVE : UProperty = 34;\n+\n+    pub const UCHAR_S_TERM : UProperty = 35;\n+    pub const UCHAR_VARIATION_SELECTOR : UProperty = 36;\n+    pub const UCHAR_NFD_INERT : UProperty = 37;\n+    pub const UCHAR_NFKD_INERT : UProperty = 38;\n+\n+    pub const UCHAR_NFC_INERT : UProperty = 39;\n+    pub const UCHAR_NFKC_INERT : UProperty = 40;\n+    pub const UCHAR_SEGMENT_STARTER : UProperty = 41;\n+    pub const UCHAR_PATTERN_SYNTAX : UProperty = 42;\n+\n+    pub const UCHAR_PATTERN_WHITE_SPACE : UProperty = 43;\n+    pub const UCHAR_POSIX_ALNUM : UProperty = 44;\n+    pub const UCHAR_POSIX_BLANK : UProperty = 45;\n+    pub const UCHAR_POSIX_GRAPH : UProperty = 46;\n+\n+    pub const UCHAR_POSIX_PRINT : UProperty = 47;\n+    pub const UCHAR_POSIX_XDIGIT : UProperty = 48;\n+    pub const UCHAR_CASED : UProperty = 49;\n+    pub const UCHAR_CASE_IGNORABLE : UProperty = 50;\n+\n+    pub const UCHAR_CHANGES_WHEN_LOWERCASED : UProperty = 51;\n+    pub const UCHAR_CHANGES_WHEN_UPPERCASED : UProperty = 52;\n+    pub const UCHAR_CHANGES_WHEN_TITLECASED : UProperty = 53;\n+    pub const UCHAR_CHANGES_WHEN_CASEFOLDED : UProperty = 54;\n+\n+    pub const UCHAR_CHANGES_WHEN_CASEMAPPED : UProperty = 55;\n+    pub const UCHAR_CHANGES_WHEN_NFKC_CASEFOLDED : UProperty = 56;\n+    pub const UCHAR_BINARY_LIMIT : UProperty = 57;\n+    pub const UCHAR_BIDI_CLASS : UProperty = 0x1000;\n+\n+    pub const UCHAR_INT_START : UProperty = 0x1000; // UCHAR_BIDI_CLASS\n+    pub const UCHAR_BLOCK : UProperty = 0x1001;\n+    pub const UCHAR_CANONICAL_COMBINING_CLASS : UProperty = 0x1002;\n+    pub const UCHAR_DECOMPOSITION_TYPE : UProperty = 0x1003;\n+\n+    pub const UCHAR_EAST_ASIAN_WIDTH : UProperty = 0x1004;\n+    pub const UCHAR_GENERAL_CATEGORY : UProperty = 0x1005;\n+    pub const UCHAR_JOINING_GROUP : UProperty = 0x1006;\n+    pub const UCHAR_JOINING_TYPE : UProperty = 0x1007;\n+\n+    pub const UCHAR_LINE_BREAK : UProperty = 0x1008;\n+    pub const UCHAR_NUMERIC_TYPE : UProperty = 0x1009;\n+    pub const UCHAR_SCRIPT : UProperty = 0x100A;\n+    pub const UCHAR_HANGUL_SYLLABLE_TYPE : UProperty = 0x100B;\n+\n+    pub const UCHAR_NFD_QUICK_CHECK : UProperty = 0x100C;\n+    pub const UCHAR_NFKD_QUICK_CHECK : UProperty = 0x100D;\n+    pub const UCHAR_NFC_QUICK_CHECK : UProperty = 0x100E;\n+    pub const UCHAR_NFKC_QUICK_CHECK : UProperty = 0x100F;\n+\n+    pub const UCHAR_LEAD_CANONICAL_COMBINING_CLASS : UProperty = 0x1010;\n+    pub const UCHAR_TRAIL_CANONICAL_COMBINING_CLASS : UProperty = 0x1011;\n+    pub const UCHAR_GRAPHEME_CLUSTER_BREAK : UProperty = 0x1012;\n+    pub const UCHAR_SENTENCE_BREAK : UProperty = 0x1013;\n+\n+    pub const UCHAR_WORD_BREAK : UProperty = 0x1014;\n+    pub const UCHAR_INT_LIMIT : UProperty = 0x1015;\n+\n+    pub const UCHAR_GENERAL_CATEGORY_MASK : UProperty = 0x2000;\n+    pub const UCHAR_MASK_START : UProperty = 0x2000;\n     // = UCHAR_GENERAL_CATEGORY_MASK\n-    const UCHAR_MASK_LIMIT : UProperty = 0x2001;\n+    pub const UCHAR_MASK_LIMIT : UProperty = 0x2001;\n \n-    const UCHAR_NUMERIC_VALUE : UProperty = 0x3000;\n-    const UCHAR_DOUBLE_START : UProperty = 0x3000;\n+    pub const UCHAR_NUMERIC_VALUE : UProperty = 0x3000;\n+    pub const UCHAR_DOUBLE_START : UProperty = 0x3000;\n     // = UCHAR_NUMERIC_VALUE\n-    const UCHAR_DOUBLE_LIMIT : UProperty = 0x3001;\n+    pub const UCHAR_DOUBLE_LIMIT : UProperty = 0x3001;\n \n-    const UCHAR_AGE : UProperty = 0x4000;\n-    const UCHAR_STRING_START : UProperty = 0x4000; // = UCHAR_AGE\n-    const UCHAR_BIDI_MIRRORING_GLYPH : UProperty = 0x4001;\n-    const UCHAR_CASE_FOLDING : UProperty = 0x4002;\n+    pub const UCHAR_AGE : UProperty = 0x4000;\n+    pub const UCHAR_STRING_START : UProperty = 0x4000; // = UCHAR_AGE\n+    pub const UCHAR_BIDI_MIRRORING_GLYPH : UProperty = 0x4001;\n+    pub const UCHAR_CASE_FOLDING : UProperty = 0x4002;\n \n-    const UCHAR_ISO_COMMENT : UProperty = 0x4003;\n-    const UCHAR_LOWERCASE_MAPPING : UProperty = 0x4004;\n-    const UCHAR_NAME : UProperty = 0x4005;\n-    const UCHAR_SIMPLE_CASE_FOLDING : UProperty = 0x4006;\n+    pub const UCHAR_ISO_COMMENT : UProperty = 0x4003;\n+    pub const UCHAR_LOWERCASE_MAPPING : UProperty = 0x4004;\n+    pub const UCHAR_NAME : UProperty = 0x4005;\n+    pub const UCHAR_SIMPLE_CASE_FOLDING : UProperty = 0x4006;\n \n-    const UCHAR_SIMPLE_LOWERCASE_MAPPING : UProperty = 0x4007;\n-    const UCHAR_SIMPLE_TITLECASE_MAPPING : UProperty = 0x4008;\n-    const UCHAR_SIMPLE_UPPERCASE_MAPPING : UProperty = 0x4009;\n-    const UCHAR_TITLECASE_MAPPING : UProperty = 0x400A;\n+    pub const UCHAR_SIMPLE_LOWERCASE_MAPPING : UProperty = 0x4007;\n+    pub const UCHAR_SIMPLE_TITLECASE_MAPPING : UProperty = 0x4008;\n+    pub const UCHAR_SIMPLE_UPPERCASE_MAPPING : UProperty = 0x4009;\n+    pub const UCHAR_TITLECASE_MAPPING : UProperty = 0x400A;\n \n-    const UCHAR_UNICODE_1_NAME : UProperty = 0x400B;\n-    const UCHAR_UPPERCASE_MAPPING : UProperty = 0x400C;\n-    const UCHAR_STRING_LIMIT : UProperty = 0x400D;\n+    pub const UCHAR_UNICODE_1_NAME : UProperty = 0x400B;\n+    pub const UCHAR_UPPERCASE_MAPPING : UProperty = 0x400C;\n+    pub const UCHAR_STRING_LIMIT : UProperty = 0x400D;\n \n-    const UCHAR_SCRIPT_EXTENSIONS : UProperty = 0x7000;\n-    const UCHAR_OTHER_PROPERTY_START : UProperty = 0x7000;\n+    pub const UCHAR_SCRIPT_EXTENSIONS : UProperty = 0x7000;\n+    pub const UCHAR_OTHER_PROPERTY_START : UProperty = 0x7000;\n     // = UCHAR_SCRIPT_EXTENSIONS;\n-    const UCHAR_OTHER_PROPERTY_LIMIT : UProperty = 0x7001;\n+    pub const UCHAR_OTHER_PROPERTY_LIMIT : UProperty = 0x7001;\n \n-    const UCHAR_INVALID_CODE : UProperty = -1;\n+    pub const UCHAR_INVALID_CODE : UProperty = -1;\n \n     #[link_name = \"icuuc\"]\n     #[abi = \"cdecl\"]\n-    extern mod libicu {\n-        #[legacy_exports];\n+    pub extern mod libicu {\n         pure fn u_hasBinaryProperty(c: UChar32, which: UProperty) -> UBool;\n         pure fn u_isdigit(c: UChar32) -> UBool;\n         pure fn u_islower(c: UChar32) -> UBool;\n@@ -162,12 +160,12 @@ mod icu {\n     }\n }\n \n-pure fn is_XID_start(c: char) -> bool {\n+pub pure fn is_XID_start(c: char) -> bool {\n     return icu::libicu::u_hasBinaryProperty(c, icu::UCHAR_XID_START)\n         == icu::TRUE;\n }\n \n-pure fn is_XID_continue(c: char) -> bool {\n+pub pure fn is_XID_continue(c: char) -> bool {\n     return icu::libicu::u_hasBinaryProperty(c, icu::UCHAR_XID_START)\n         == icu::TRUE;\n }\n@@ -177,7 +175,7 @@ Function: is_digit\n \n Returns true if a character is a digit.\n */\n-pure fn is_digit(c: char) -> bool {\n+pub pure fn is_digit(c: char) -> bool {\n     return icu::libicu::u_isdigit(c) == icu::TRUE;\n }\n \n@@ -186,7 +184,7 @@ Function: is_lower\n \n Returns true if a character is a lowercase letter.\n */\n-pure fn is_lower(c: char) -> bool {\n+pub pure fn is_lower(c: char) -> bool {\n     return icu::libicu::u_islower(c) == icu::TRUE;\n }\n \n@@ -195,7 +193,7 @@ Function: is_space\n \n Returns true if a character is space.\n */\n-pure fn is_space(c: char) -> bool {\n+pub pure fn is_space(c: char) -> bool {\n     return icu::libicu::u_isspace(c) == icu::TRUE;\n }\n \n@@ -204,13 +202,12 @@ Function: is_upper\n \n Returns true if a character is an uppercase letter.\n */\n-pure fn is_upper(c: char) -> bool {\n+pub pure fn is_upper(c: char) -> bool {\n     return icu::libicu::u_isupper(c) == icu::TRUE;\n }\n \n #[cfg(test)]\n mod tests {\n-    #[legacy_exports];\n \n     #[test]\n     fn test_is_digit() {"}]}