{"sha": "a35a3abcda67a729edbb7d649dbc663c6feabd4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzNWEzYWJjZGE2N2E3MjllZGJiN2Q2NDlkYmM2NjNjNmZlYWJkNGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-10T19:10:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-10T19:10:12Z"}, "message": "Auto merge of #45050 - petrochenkov:ambind, r=nikomatsakis\n\nresolve: Use same rules for disambiguating fresh bindings in `match` and `let`\n\nResolve `Unit` as a unit struct pattern in\n```rust\nstruct Unit;\n\nlet Unit = x;\n```\nconsistently with\n```rust\nmatch x {\n    Unit => {}\n}\n```\nIt was previously an error.\n(The change also applies to unit variants and constants.)\n\nFixes https://users.rust-lang.org/t/e0530-cannot-shadow-unit-structs-what-in-the-earthly-what/13054\n(This particular change doesn't depend on a fix for the issue mentioned in https://users.rust-lang.org/t/e0530-cannot-shadow-unit-structs-what-in-the-earthly-what/13054/4)\n\ncc @rust-lang/lang\nr? @nikomatsakis", "tree": {"sha": "57774687c76fadcb30a945409bcc3738d40901a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57774687c76fadcb30a945409bcc3738d40901a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a35a3abcda67a729edbb7d649dbc663c6feabd4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a35a3abcda67a729edbb7d649dbc663c6feabd4c", "html_url": "https://github.com/rust-lang/rust/commit/a35a3abcda67a729edbb7d649dbc663c6feabd4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a35a3abcda67a729edbb7d649dbc663c6feabd4c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75d25acd977085e6ae01d6a5c56cbbfc97463f89", "url": "https://api.github.com/repos/rust-lang/rust/commits/75d25acd977085e6ae01d6a5c56cbbfc97463f89", "html_url": "https://github.com/rust-lang/rust/commit/75d25acd977085e6ae01d6a5c56cbbfc97463f89"}, {"sha": "765076faabcceba7cc75ae78c4923f89bb34975b", "url": "https://api.github.com/repos/rust-lang/rust/commits/765076faabcceba7cc75ae78c4923f89bb34975b", "html_url": "https://github.com/rust-lang/rust/commit/765076faabcceba7cc75ae78c4923f89bb34975b"}], "stats": {"total": 157, "additions": 126, "deletions": 31}, "files": [{"sha": "98ed8d99fda70973fb5a00bfbc7de6d3ea5b2b8d", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a35a3abcda67a729edbb7d649dbc663c6feabd4c/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a35a3abcda67a729edbb7d649dbc663c6feabd4c/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=a35a3abcda67a729edbb7d649dbc663c6feabd4c", "patch": "@@ -260,7 +260,14 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n                 \"refutable pattern in {}: `{}` not covered\",\n                 origin, pattern_string\n             );\n-            diag.span_label(pat.span, format!(\"pattern `{}` not covered\", pattern_string));\n+            let label_msg = match pat.node {\n+                PatKind::Path(hir::QPath::Resolved(None, ref path))\n+                        if path.segments.len() == 1 && path.segments[0].parameters.is_none() => {\n+                    format!(\"interpreted as a {} pattern, not new variable\", path.def.kind_name())\n+                }\n+                _ => format!(\"pattern `{}` not covered\", pattern_string),\n+            };\n+            diag.span_label(pat.span, label_msg);\n             diag.emit();\n         });\n     }"}, {"sha": "8207057fd0aae2825c4dd979af5e36fec7aa6481", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a35a3abcda67a729edbb7d649dbc663c6feabd4c/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a35a3abcda67a729edbb7d649dbc663c6feabd4c/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=a35a3abcda67a729edbb7d649dbc663c6feabd4c", "patch": "@@ -377,12 +377,6 @@ enum PatternSource {\n }\n \n impl PatternSource {\n-    fn is_refutable(self) -> bool {\n-        match self {\n-            PatternSource::Match | PatternSource::IfLet | PatternSource::WhileLet => true,\n-            PatternSource::Let | PatternSource::For | PatternSource::FnParam  => false,\n-        }\n-    }\n     fn descr(self) -> &'static str {\n         match self {\n             PatternSource::Match => \"match binding\",\n@@ -2388,20 +2382,24 @@ impl<'a> Resolver<'a> {\n                                                                       false, pat.span)\n                                       .and_then(LexicalScopeBinding::item);\n                     let resolution = binding.map(NameBinding::def).and_then(|def| {\n-                        let ivmode = BindingMode::ByValue(Mutability::Immutable);\n-                        let always_binding = !pat_src.is_refutable() || opt_pat.is_some() ||\n-                                             bmode != ivmode;\n+                        let is_syntactic_ambiguity = opt_pat.is_none() &&\n+                            bmode == BindingMode::ByValue(Mutability::Immutable);\n                         match def {\n                             Def::StructCtor(_, CtorKind::Const) |\n                             Def::VariantCtor(_, CtorKind::Const) |\n-                            Def::Const(..) if !always_binding => {\n-                                // A unit struct/variant or constant pattern.\n+                            Def::Const(..) if is_syntactic_ambiguity => {\n+                                // Disambiguate in favor of a unit struct/variant\n+                                // or constant pattern.\n                                 self.record_use(ident.node, ValueNS, binding.unwrap(), ident.span);\n                                 Some(PathResolution::new(def))\n                             }\n                             Def::StructCtor(..) | Def::VariantCtor(..) |\n                             Def::Const(..) | Def::Static(..) => {\n-                                // A fresh binding that shadows something unacceptable.\n+                                // This is unambiguously a fresh binding, either syntactically\n+                                // (e.g. `IDENT @ PAT` or `ref IDENT`) or because `IDENT` resolves\n+                                // to something unusable as a pattern (e.g. constructor function),\n+                                // but we still conservatively report an error, see\n+                                // issues/33118#issuecomment-233962221 for one reason why.\n                                 resolve_error(\n                                     self,\n                                     ident.span,\n@@ -2410,7 +2408,7 @@ impl<'a> Resolver<'a> {\n                                 );\n                                 None\n                             }\n-                            Def::Local(..) | Def::Upvar(..) | Def::Fn(..) | Def::Err => {\n+                            Def::Fn(..) | Def::Err => {\n                                 // These entities are explicitly allowed\n                                 // to be shadowed by fresh bindings.\n                                 None"}, {"sha": "a501a5cd3ec4cc27197c58a54294d461301acd89", "filename": "src/test/compile-fail/blind-item-block-middle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a35a3abcda67a729edbb7d649dbc663c6feabd4c/src%2Ftest%2Fcompile-fail%2Fblind-item-block-middle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a35a3abcda67a729edbb7d649dbc663c6feabd4c/src%2Ftest%2Fcompile-fail%2Fblind-item-block-middle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblind-item-block-middle.rs?ref=a35a3abcda67a729edbb7d649dbc663c6feabd4c", "patch": "@@ -12,6 +12,6 @@ mod foo { pub struct bar; }\n \n fn main() {\n     let bar = 5;\n-    //~^ ERROR let bindings cannot shadow unit structs\n+    //~^ ERROR mismatched types\n     use foo::bar;\n }"}, {"sha": "1e1994357c77ad3fa29ce96988188b36d63ca809", "filename": "src/test/compile-fail/issue-33504.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a35a3abcda67a729edbb7d649dbc663c6feabd4c/src%2Ftest%2Fcompile-fail%2Fissue-33504.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a35a3abcda67a729edbb7d649dbc663c6feabd4c/src%2Ftest%2Fcompile-fail%2Fissue-33504.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-33504.rs?ref=a35a3abcda67a729edbb7d649dbc663c6feabd4c", "patch": "@@ -14,6 +14,6 @@ struct Test;\n \n fn main() {\n     || {\n-        let Test = 1; //~ ERROR let bindings cannot shadow unit structs\n+        let Test = 1; //~ ERROR mismatched types\n     };\n }"}, {"sha": "c740f6bb47c3fa236de3fbd2e9c083c59d5e6c2d", "filename": "src/test/compile-fail/pattern-binding-disambiguation.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/a35a3abcda67a729edbb7d649dbc663c6feabd4c/src%2Ftest%2Fcompile-fail%2Fpattern-binding-disambiguation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a35a3abcda67a729edbb7d649dbc663c6feabd4c/src%2Ftest%2Fcompile-fail%2Fpattern-binding-disambiguation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-binding-disambiguation.rs?ref=a35a3abcda67a729edbb7d649dbc663c6feabd4c", "patch": "@@ -0,0 +1,67 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct UnitStruct;\n+struct TupleStruct();\n+struct BracedStruct{}\n+\n+enum E {\n+    UnitVariant,\n+    TupleVariant(),\n+    BracedVariant{},\n+}\n+use E::*;\n+\n+const CONST: () = ();\n+static STATIC: () = ();\n+\n+fn function() {}\n+\n+fn main() {\n+    let doesnt_matter = 0;\n+\n+    match UnitStruct {\n+        UnitStruct => {} // OK, `UnitStruct` is a unit struct pattern\n+    }\n+    match doesnt_matter {\n+        TupleStruct => {} //~ ERROR match bindings cannot shadow tuple structs\n+    }\n+    match doesnt_matter {\n+        BracedStruct => {} // OK, `BracedStruct` is a fresh binding\n+    }\n+    match UnitVariant {\n+        UnitVariant => {} // OK, `UnitVariant` is a unit variant pattern\n+    }\n+    match doesnt_matter {\n+        TupleVariant => {} //~ ERROR match bindings cannot shadow tuple variants\n+    }\n+    match doesnt_matter {\n+        BracedVariant => {} //~ ERROR match bindings cannot shadow struct variants\n+    }\n+    match CONST {\n+        CONST => {} // OK, `CONST` is a const pattern\n+    }\n+    match doesnt_matter {\n+        STATIC => {} //~ ERROR match bindings cannot shadow statics\n+    }\n+    match doesnt_matter {\n+        function => {} // OK, `function` is a fresh binding\n+    }\n+\n+    let UnitStruct = UnitStruct; // OK, `UnitStruct` is a unit struct pattern\n+    let TupleStruct = doesnt_matter; //~ ERROR let bindings cannot shadow tuple structs\n+    let BracedStruct = doesnt_matter; // OK, `BracedStruct` is a fresh binding\n+    let UnitVariant = UnitVariant; // OK, `UnitVariant` is a unit variant pattern\n+    let TupleVariant = doesnt_matter; //~ ERROR let bindings cannot shadow tuple variants\n+    let BracedVariant = doesnt_matter; //~ ERROR let bindings cannot shadow struct variants\n+    let CONST = CONST; // OK, `CONST` is a const pattern\n+    let STATIC = doesnt_matter; //~ ERROR let bindings cannot shadow statics\n+    let function = doesnt_matter; // OK, `function` is a fresh binding\n+}"}, {"sha": "af0b95e002d84cdb98a76102334ddb0d2aebf464", "filename": "src/test/ui/const-pattern-irrefutable.rs", "status": "renamed", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a35a3abcda67a729edbb7d649dbc663c6feabd4c/src%2Ftest%2Fui%2Fconst-pattern-irrefutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a35a3abcda67a729edbb7d649dbc663c6feabd4c/src%2Ftest%2Fui%2Fconst-pattern-irrefutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-pattern-irrefutable.rs?ref=a35a3abcda67a729edbb7d649dbc663c6feabd4c", "patch": "@@ -13,17 +13,14 @@ mod foo {\n     pub const d: u8 = 2;\n }\n \n-use foo::b as c; //~ NOTE is imported here\n-use foo::d; //~ NOTE is imported here\n+use foo::b as c;\n+use foo::d;\n \n-const a: u8 = 2; //~ NOTE is defined here\n+const a: u8 = 2;\n \n fn main() {\n-    let a = 4; //~ ERROR let bindings cannot shadow constants\n-               //~^ NOTE cannot be named the same as a constant\n-    let c = 4; //~ ERROR let bindings cannot shadow constants\n-               //~^ NOTE cannot be named the same as a constant\n-    let d = 4; //~ ERROR let bindings cannot shadow constants\n-               //~^ NOTE cannot be named the same as a constant\n+    let a = 4; //~ ERROR refutable pattern in local binding: `_` not covered\n+    let c = 4; //~ ERROR refutable pattern in local binding: `_` not covered\n+    let d = 4; //~ ERROR refutable pattern in local binding: `_` not covered\n     fn f() {} // Check that the `NOTE`s still work with an item here (c.f. issue #35115).\n }", "previous_filename": "src/test/compile-fail/const-pattern-irrefutable.rs"}, {"sha": "af48b7736381ad61404903065712bb5416c85094", "filename": "src/test/ui/const-pattern-irrefutable.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a35a3abcda67a729edbb7d649dbc663c6feabd4c/src%2Ftest%2Fui%2Fconst-pattern-irrefutable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a35a3abcda67a729edbb7d649dbc663c6feabd4c/src%2Ftest%2Fui%2Fconst-pattern-irrefutable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-pattern-irrefutable.stderr?ref=a35a3abcda67a729edbb7d649dbc663c6feabd4c", "patch": "@@ -0,0 +1,20 @@\n+error[E0005]: refutable pattern in local binding: `_` not covered\n+  --> $DIR/const-pattern-irrefutable.rs:22:9\n+   |\n+22 |     let a = 4; //~ ERROR refutable pattern in local binding: `_` not covered\n+   |         ^ interpreted as a constant pattern, not new variable\n+\n+error[E0005]: refutable pattern in local binding: `_` not covered\n+  --> $DIR/const-pattern-irrefutable.rs:23:9\n+   |\n+23 |     let c = 4; //~ ERROR refutable pattern in local binding: `_` not covered\n+   |         ^ interpreted as a constant pattern, not new variable\n+\n+error[E0005]: refutable pattern in local binding: `_` not covered\n+  --> $DIR/const-pattern-irrefutable.rs:24:9\n+   |\n+24 |     let d = 4; //~ ERROR refutable pattern in local binding: `_` not covered\n+   |         ^ interpreted as a constant pattern, not new variable\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "adf52c6d8e64d8cee371ff82e3366c1a56fdaeaa", "filename": "src/test/ui/resolve/name-clash-nullary.rs", "status": "renamed", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a35a3abcda67a729edbb7d649dbc663c6feabd4c/src%2Ftest%2Fui%2Fresolve%2Fname-clash-nullary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a35a3abcda67a729edbb7d649dbc663c6feabd4c/src%2Ftest%2Fui%2Fresolve%2Fname-clash-nullary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fname-clash-nullary.rs?ref=a35a3abcda67a729edbb7d649dbc663c6feabd4c", "patch": "@@ -8,11 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::option::*;\n-\n fn main() {\n-  let None: isize = 42; //~ ERROR let bindings cannot shadow unit variants\n-  log(debug, None);\n-  //~^ ERROR cannot find function `log` in this scope\n-  //~| ERROR cannot find value `debug` in this scope\n+  let None: isize = 42; //~ ERROR mismatched types\n }", "previous_filename": "src/test/compile-fail/name-clash-nullary.rs"}, {"sha": "014b1fe1b5b07d1ba5cbacd4965a23b20fe6fbbb", "filename": "src/test/ui/resolve/name-clash-nullary.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a35a3abcda67a729edbb7d649dbc663c6feabd4c/src%2Ftest%2Fui%2Fresolve%2Fname-clash-nullary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a35a3abcda67a729edbb7d649dbc663c6feabd4c/src%2Ftest%2Fui%2Fresolve%2Fname-clash-nullary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fname-clash-nullary.stderr?ref=a35a3abcda67a729edbb7d649dbc663c6feabd4c", "patch": "@@ -0,0 +1,11 @@\n+error[E0308]: mismatched types\n+  --> $DIR/name-clash-nullary.rs:12:7\n+   |\n+12 |   let None: isize = 42; //~ ERROR mismatched types\n+   |       ^^^^ expected isize, found enum `std::option::Option`\n+   |\n+   = note: expected type `isize`\n+              found type `std::option::Option<_>`\n+\n+error: aborting due to previous error\n+"}]}