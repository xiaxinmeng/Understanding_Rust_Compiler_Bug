{"sha": "3ab8054ac182fc170099135304a0c1c6760da57a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhYjgwNTRhYzE4MmZjMTcwMDk5MTM1MzA0YTBjMWM2NzYwZGE1N2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-07-11T14:13:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-11T14:13:50Z"}, "message": "Auto merge of #34725 - GuillaumeGomez:doc_slice, r=steveklabnik\n\nImprove slice docs\n\nFixes  #29337.\n\nr? @steveklabnik", "tree": {"sha": "6eb18e993ae18f0fd4bc5338bd3befa358376b6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6eb18e993ae18f0fd4bc5338bd3befa358376b6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ab8054ac182fc170099135304a0c1c6760da57a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ab8054ac182fc170099135304a0c1c6760da57a", "html_url": "https://github.com/rust-lang/rust/commit/3ab8054ac182fc170099135304a0c1c6760da57a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ab8054ac182fc170099135304a0c1c6760da57a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47b3a983406f91489f781ae8cbd45590423fa701", "url": "https://api.github.com/repos/rust-lang/rust/commits/47b3a983406f91489f781ae8cbd45590423fa701", "html_url": "https://github.com/rust-lang/rust/commit/47b3a983406f91489f781ae8cbd45590423fa701"}, {"sha": "50483d5fa3cf67bf97f1823af0561344e51799ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/50483d5fa3cf67bf97f1823af0561344e51799ce", "html_url": "https://github.com/rust-lang/rust/commit/50483d5fa3cf67bf97f1823af0561344e51799ce"}], "stats": {"total": 245, "additions": 236, "deletions": 9}, "files": [{"sha": "2c54dc13c8d0b6440494bf927138dfec7a6b06fd", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 236, "deletions": 9, "changes": 245, "blob_url": "https://github.com/rust-lang/rust/blob/3ab8054ac182fc170099135304a0c1c6760da57a/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab8054ac182fc170099135304a0c1c6760da57a/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=3ab8054ac182fc170099135304a0c1c6760da57a", "patch": "@@ -199,28 +199,74 @@ impl<T> [T] {\n         core_slice::SliceExt::first(self)\n     }\n \n-    /// Returns a mutable pointer to the first element of a slice, or `None` if it is empty\n+    /// Returns a mutable pointer to the first element of a slice, or `None` if it is empty.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let x = &mut [0, 1, 2];\n+    ///\n+    /// if let Some(first) = x.first_mut() {\n+    ///     *first = 5;\n+    /// }\n+    /// assert_eq!(x, &[5, 1, 2]);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn first_mut(&mut self) -> Option<&mut T> {\n         core_slice::SliceExt::first_mut(self)\n     }\n \n     /// Returns the first and all the rest of the elements of a slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let x = &[0, 1, 2];\n+    ///\n+    /// if let Some((first, elements)) = x.split_first() {\n+    ///     assert_eq!(first, &0);\n+    ///     assert_eq!(elements, &[1, 2]);\n+    /// }\n+    /// ```\n     #[stable(feature = \"slice_splits\", since = \"1.5.0\")]\n     #[inline]\n     pub fn split_first(&self) -> Option<(&T, &[T])> {\n         core_slice::SliceExt::split_first(self)\n     }\n \n     /// Returns the first and all the rest of the elements of a slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let x = &mut [0, 1, 2];\n+    ///\n+    /// if let Some((first, elements)) = x.split_first_mut() {\n+    ///     *first = 3;\n+    ///     elements[0] = 4;\n+    ///     elements[1] = 5;\n+    /// }\n+    /// assert_eq!(x, &[3, 4, 5]);\n+    /// ```\n     #[stable(feature = \"slice_splits\", since = \"1.5.0\")]\n     #[inline]\n     pub fn split_first_mut(&mut self) -> Option<(&mut T, &mut [T])> {\n         core_slice::SliceExt::split_first_mut(self)\n     }\n \n     /// Returns the last and all the rest of the elements of a slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let x = &[0, 1, 2];\n+    ///\n+    /// if let Some((last, elements)) = x.split_last() {\n+    ///     assert_eq!(last, &2);\n+    ///     assert_eq!(elements, &[0, 1]);\n+    /// }\n+    /// ```\n     #[stable(feature = \"slice_splits\", since = \"1.5.0\")]\n     #[inline]\n     pub fn split_last(&self) -> Option<(&T, &[T])> {\n@@ -229,6 +275,19 @@ impl<T> [T] {\n     }\n \n     /// Returns the last and all the rest of the elements of a slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let x = &mut [0, 1, 2];\n+    ///\n+    /// if let Some((last, elements)) = x.split_last_mut() {\n+    ///     *last = 3;\n+    ///     elements[0] = 4;\n+    ///     elements[1] = 5;\n+    /// }\n+    /// assert_eq!(x, &[4, 5, 3]);\n+    /// ```\n     #[stable(feature = \"slice_splits\", since = \"1.5.0\")]\n     #[inline]\n     pub fn split_last_mut(&mut self) -> Option<(&mut T, &mut [T])> {\n@@ -253,6 +312,17 @@ impl<T> [T] {\n     }\n \n     /// Returns a mutable pointer to the last item in the slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let x = &mut [0, 1, 2];\n+    ///\n+    /// if let Some(last) = x.last_mut() {\n+    ///     *last = 10;\n+    /// }\n+    /// assert_eq!(x, &[0, 1, 10]);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn last_mut(&mut self) -> Option<&mut T> {\n@@ -275,7 +345,18 @@ impl<T> [T] {\n         core_slice::SliceExt::get(self, index)\n     }\n \n-    /// Returns a mutable reference to the element at the given index,\n+    /// Returns a mutable reference to the element at the given index.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let x = &mut [0, 1, 2];\n+    ///\n+    /// if let Some(elem) = x.get_mut(1) {\n+    ///     *elem = 42;\n+    /// }\n+    /// assert_eq!(x, &[0, 42, 2]);\n+    /// ```\n     /// or `None` if the index is out of bounds\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -284,14 +365,37 @@ impl<T> [T] {\n     }\n \n     /// Returns a pointer to the element at the given index, without doing\n-    /// bounds checking.\n+    /// bounds checking. So use it very carefully!\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let x = &[1, 2, 4];\n+    ///\n+    /// unsafe {\n+    ///     assert_eq!(x.get_unchecked(1), &2);\n+    /// }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub unsafe fn get_unchecked(&self, index: usize) -> &T {\n         core_slice::SliceExt::get_unchecked(self, index)\n     }\n \n-    /// Returns an unsafe mutable pointer to the element in index\n+    /// Returns an unsafe mutable pointer to the element in index. So use it\n+    /// very carefully!\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let x = &mut [1, 2, 4];\n+    ///\n+    /// unsafe {\n+    ///     let elem = x.get_unchecked_mut(1);\n+    ///     *elem = 13;\n+    /// }\n+    /// assert_eq!(x, &[1, 13, 4]);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub unsafe fn get_unchecked_mut(&mut self, index: usize) -> &mut T {\n@@ -305,6 +409,19 @@ impl<T> [T] {\n     ///\n     /// Modifying the slice may cause its buffer to be reallocated, which\n     /// would also make any pointers to it invalid.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let x = &[1, 2, 4];\n+    /// let x_ptr = x.as_ptr();\n+    ///\n+    /// unsafe {\n+    ///     for i in 0..x.len() {\n+    ///         assert_eq!(x.get_unchecked(i), &*x_ptr.offset(i as isize));\n+    ///     }\n+    /// }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn as_ptr(&self) -> *const T {\n@@ -318,6 +435,20 @@ impl<T> [T] {\n     ///\n     /// Modifying the slice may cause its buffer to be reallocated, which\n     /// would also make any pointers to it invalid.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let x = &mut [1, 2, 4];\n+    /// let x_ptr = x.as_mut_ptr();\n+    ///\n+    /// unsafe {\n+    ///     for i in 0..x.len() {\n+    ///         *x_ptr.offset(i as isize) += 2;\n+    ///     }\n+    /// }\n+    /// assert_eq!(x, &[3, 4, 6]);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn as_mut_ptr(&mut self) -> *mut T {\n@@ -335,7 +466,7 @@ impl<T> [T] {\n     ///\n     /// Panics if `a` or `b` are out of bounds.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// let mut v = [\"a\", \"b\", \"c\", \"d\"];\n@@ -364,13 +495,39 @@ impl<T> [T] {\n     }\n \n     /// Returns an iterator over the slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let x = &[1, 2, 4];\n+    /// let mut iterator = x.iter();\n+    ///\n+    /// assert_eq!(iterator.next(), Some(&1));\n+    /// assert_eq!(iterator.next(), Some(&2));\n+    /// assert_eq!(iterator.next(), Some(&4));\n+    /// assert_eq!(iterator.next(), None);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn iter(&self) -> Iter<T> {\n         core_slice::SliceExt::iter(self)\n     }\n \n-    /// Returns an iterator that allows modifying each value\n+    /// Returns an iterator that allows modifying each value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let x = &mut [1, 2, 4];\n+    /// {\n+    ///     let iterator = x.iter_mut();\n+    ///\n+    ///     for elem in iterator {\n+    ///         *elem += 2;\n+    ///     }\n+    /// }\n+    /// assert_eq!(x, &[3, 4, 6]);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn iter_mut(&mut self) -> IterMut<T> {\n@@ -418,6 +575,7 @@ impl<T> [T] {\n     ///\n     /// ```rust\n     /// let v = &[1, 2, 3, 4, 5];\n+    ///\n     /// for chunk in v.chunks(2) {\n     ///     println!(\"{:?}\", chunk);\n     /// }\n@@ -436,6 +594,21 @@ impl<T> [T] {\n     /// # Panics\n     ///\n     /// Panics if `chunk_size` is 0.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let v = &mut [0, 0, 0, 0, 0];\n+    /// let mut count = 1;\n+    ///\n+    /// for chunk in v.chunks_mut(2) {\n+    ///     for elem in chunk.iter_mut() {\n+    ///         *elem += count;\n+    ///     }\n+    ///     count += 1;\n+    /// }\n+    /// assert_eq!(v, &[1, 1, 2, 2, 3]);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn chunks_mut(&mut self, chunk_size: usize) -> ChunksMut<T> {\n@@ -476,7 +649,7 @@ impl<T> [T] {\n     ///\n     /// Panics if `mid > len`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// let mut v = [1, 2, 3, 4, 5, 6];\n@@ -507,7 +680,7 @@ impl<T> [T] {\n     }\n \n     /// Returns an iterator over subslices separated by elements that match\n-    /// `pred`.  The matched element is not contained in the subslices.\n+    /// `pred`. The matched element is not contained in the subslices.\n     ///\n     /// # Examples\n     ///\n@@ -516,6 +689,7 @@ impl<T> [T] {\n     ///\n     /// ```\n     /// let v = [10, 40, 30, 20, 60, 50];\n+    ///\n     /// for group in v.split(|num| *num % 3 == 0) {\n     ///     println!(\"{:?}\", group);\n     /// }\n@@ -529,7 +703,18 @@ impl<T> [T] {\n     }\n \n     /// Returns an iterator over mutable subslices separated by elements that\n-    /// match `pred`.  The matched element is not contained in the subslices.\n+    /// match `pred`. The matched element is not contained in the subslices.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let mut v = [10, 40, 30, 20, 60, 50];\n+    ///\n+    /// for group in v.split_mut(|num| *num % 3 == 0) {\n+    ///     group[0] = 1;\n+    /// }\n+    /// assert_eq!(v, [1, 40, 30, 1, 60, 1]);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn split_mut<F>(&mut self, pred: F) -> SplitMut<T, F>\n@@ -552,6 +737,7 @@ impl<T> [T] {\n     ///\n     /// ```\n     /// let v = [10, 40, 30, 20, 60, 50];\n+    ///\n     /// for group in v.splitn(2, |num| *num % 3 == 0) {\n     ///     println!(\"{:?}\", group);\n     /// }\n@@ -570,6 +756,17 @@ impl<T> [T] {\n     ///\n     /// The last element returned, if any, will contain the remainder of the\n     /// slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let mut v = [10, 40, 30, 20, 60, 50];\n+    ///\n+    /// for group in v.splitn_mut(2, |num| *num % 3 == 0) {\n+    ///     group[0] = 1;\n+    /// }\n+    /// assert_eq!(v, [1, 40, 30, 1, 60, 50]);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn splitn_mut<F>(&mut self, n: usize, pred: F) -> SplitNMut<T, F>\n@@ -593,6 +790,7 @@ impl<T> [T] {\n     ///\n     /// ```\n     /// let v = [10, 40, 30, 20, 60, 50];\n+    ///\n     /// for group in v.rsplitn(2, |num| *num % 3 == 0) {\n     ///     println!(\"{:?}\", group);\n     /// }\n@@ -612,6 +810,17 @@ impl<T> [T] {\n     ///\n     /// The last element returned, if any, will contain the remainder of the\n     /// slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let mut s = [10, 40, 30, 20, 60, 50];\n+    ///\n+    /// for group in s.rsplitn_mut(2, |num| *num % 3 == 0) {\n+    ///     group[0] = 1;\n+    /// }\n+    /// assert_eq!(s, [1, 40, 30, 20, 60, 1]);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn rsplitn_mut<F>(&mut self, n: usize, pred: F) -> RSplitNMut<T, F>\n@@ -891,6 +1100,14 @@ impl<T> [T] {\n \n \n     /// Copies `self` into a new `Vec`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let s = [10, 40, 30];\n+    /// let x = s.to_vec();\n+    /// // Here, `s` and `x` can be modified independently.\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn to_vec(&self) -> Vec<T>\n@@ -901,6 +1118,16 @@ impl<T> [T] {\n     }\n \n     /// Converts `self` into a vector without clones or allocation.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let s: Box<[i32]> = Box::new([10, 40, 30]);\n+    /// let x = s.into_vec();\n+    /// // `s` cannot be used anymore because it has been converted into `x`.\n+    ///\n+    /// assert_eq!(x, vec!(10, 40, 30));\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn into_vec(self: Box<Self>) -> Vec<T> {"}]}