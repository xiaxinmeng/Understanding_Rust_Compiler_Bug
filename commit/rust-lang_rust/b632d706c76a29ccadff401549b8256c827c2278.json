{"sha": "b632d706c76a29ccadff401549b8256c827c2278", "node_id": "C_kwDOAAsO6NoAKGI2MzJkNzA2Yzc2YTI5Y2NhZGZmNDAxNTQ5YjgyNTZjODI3YzIyNzg", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2022-03-20T23:05:52Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2022-03-21T15:46:01Z"}, "message": "Remove old diagnostics", "tree": {"sha": "1dd2413a1cfc1449fe74cd5b1c9405a8861f2fdf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1dd2413a1cfc1449fe74cd5b1c9405a8861f2fdf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b632d706c76a29ccadff401549b8256c827c2278", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b632d706c76a29ccadff401549b8256c827c2278", "html_url": "https://github.com/rust-lang/rust/commit/b632d706c76a29ccadff401549b8256c827c2278", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b632d706c76a29ccadff401549b8256c827c2278/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a49a0ab8831bcf3f7b99eb84332d8073c03a2105", "url": "https://api.github.com/repos/rust-lang/rust/commits/a49a0ab8831bcf3f7b99eb84332d8073c03a2105", "html_url": "https://github.com/rust-lang/rust/commit/a49a0ab8831bcf3f7b99eb84332d8073c03a2105"}], "stats": {"total": 95, "additions": 0, "deletions": 95}, "files": [{"sha": "307594d08ba1c4cfe585e6e443f97ffcb0e462f9", "filename": "crates/hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 0, "deletions": 95, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/b632d706c76a29ccadff401549b8256c827c2278/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b632d706c76a29ccadff401549b8256c827c2278/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=b632d706c76a29ccadff401549b8256c827c2278", "patch": "@@ -43,20 +43,9 @@ pub enum BodyValidationDiagnostic {\n         expected: usize,\n         found: usize,\n     },\n-    RemoveThisSemicolon {\n-        expr: ExprId,\n-    },\n-    MissingOkOrSomeInTailExpr {\n-        expr: ExprId,\n-        required: String,\n-    },\n     MissingMatchArms {\n         match_expr: ExprId,\n     },\n-    AddReferenceHere {\n-        arg_expr: ExprId,\n-        mutability: Mutability,\n-    },\n }\n \n impl BodyValidationDiagnostic {\n@@ -116,30 +105,6 @@ impl ExprValidator {\n                 });\n             }\n         }\n-        let body_expr = &body[body.body_expr];\n-        if let Expr::Block { statements, tail, .. } = body_expr {\n-            if let Some(t) = tail {\n-                self.validate_results_in_tail_expr(body.body_expr, *t, db);\n-            } else if let Some(Statement::Expr { expr: id, .. }) = statements.last() {\n-                self.validate_missing_tail_expr(body.body_expr, *id);\n-            }\n-        }\n-\n-        let infer = &self.infer;\n-        let diagnostics = &mut self.diagnostics;\n-\n-        infer\n-            .expr_type_mismatches()\n-            .filter_map(|(expr, mismatch)| {\n-                let (expr_without_ref, mutability) =\n-                    check_missing_refs(infer, expr, &mismatch.expected)?;\n-\n-                Some((expr_without_ref, mutability))\n-            })\n-            .for_each(|(arg_expr, mutability)| {\n-                diagnostics\n-                    .push(BodyValidationDiagnostic::AddReferenceHere { arg_expr, mutability });\n-            });\n     }\n \n     fn validate_call(\n@@ -330,66 +295,6 @@ impl ExprValidator {\n         }\n         pattern\n     }\n-\n-    fn validate_results_in_tail_expr(&mut self, body_id: ExprId, id: ExprId, db: &dyn HirDatabase) {\n-        // the mismatch will be on the whole block currently\n-        let mismatch = match self.infer.type_mismatch_for_expr(body_id) {\n-            Some(m) => m,\n-            None => return,\n-        };\n-\n-        let core_result_path = path![core::result::Result];\n-        let core_option_path = path![core::option::Option];\n-\n-        let resolver = self.owner.resolver(db.upcast());\n-        let core_result_enum = match resolver.resolve_known_enum(db.upcast(), &core_result_path) {\n-            Some(it) => it,\n-            _ => return,\n-        };\n-        let core_option_enum = match resolver.resolve_known_enum(db.upcast(), &core_option_path) {\n-            Some(it) => it,\n-            _ => return,\n-        };\n-\n-        let (params, required) = match mismatch.expected.kind(Interner) {\n-            TyKind::Adt(AdtId(hir_def::AdtId::EnumId(enum_id)), parameters)\n-                if *enum_id == core_result_enum =>\n-            {\n-                (parameters, \"Ok\".to_string())\n-            }\n-            TyKind::Adt(AdtId(hir_def::AdtId::EnumId(enum_id)), parameters)\n-                if *enum_id == core_option_enum =>\n-            {\n-                (parameters, \"Some\".to_string())\n-            }\n-            _ => return,\n-        };\n-\n-        if params.len(Interner) > 0 && params.at(Interner, 0).ty(Interner) == Some(&mismatch.actual)\n-        {\n-            self.diagnostics\n-                .push(BodyValidationDiagnostic::MissingOkOrSomeInTailExpr { expr: id, required });\n-        }\n-    }\n-\n-    fn validate_missing_tail_expr(&mut self, body_id: ExprId, possible_tail_id: ExprId) {\n-        let mismatch = match self.infer.type_mismatch_for_expr(body_id) {\n-            Some(m) => m,\n-            None => return,\n-        };\n-\n-        let possible_tail_ty = match self.infer.type_of_expr.get(possible_tail_id) {\n-            Some(ty) => ty,\n-            None => return,\n-        };\n-\n-        if !mismatch.actual.is_unit() || mismatch.expected != *possible_tail_ty {\n-            return;\n-        }\n-\n-        self.diagnostics\n-            .push(BodyValidationDiagnostic::RemoveThisSemicolon { expr: possible_tail_id });\n-    }\n }\n \n struct FilterMapNextChecker {"}]}