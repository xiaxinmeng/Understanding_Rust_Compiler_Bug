{"sha": "daa55acdb0bd174bb0bca1f88d5920289808a8f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhYTU1YWNkYjBiZDE3NGJiMGJjYTFmODhkNTkyMDI4OTgwOGE4ZjE=", "commit": {"author": {"name": "Giles Cope", "email": "gilescope@gmail.com", "date": "2021-02-12T13:42:42Z"}, "committer": {"name": "Giles Cope", "email": "gilescope@gmail.com", "date": "2021-02-12T13:42:42Z"}, "message": "Slightly more explicit", "tree": {"sha": "d81235c9d4950f2714d519609deb591c30007c9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d81235c9d4950f2714d519609deb591c30007c9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/daa55acdb0bd174bb0bca1f88d5920289808a8f1", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEElfpt1fswGixBWxap34UWHa4P82sFAmAmhdIACgkQ34UWHa4P\n82vWyw/+NQ9Gsp6oeuip8FSr4fzbKdvdoN4zZqnQ91FMFXK919720hQvt2QbtG4u\nda46CE0zAH6y2DmtL1bJIeAGPDDo4lPtQJEyoX173annAyqENv9TxjoBiQv3QCcW\nU0F+DW3zGI62mxHk+kMdudLzvwmTwfrC7XF/+PbCAKHJVeYMd4RKAvS9IXI3dPmr\nvhyZeh03xaNovDRcupr+OkilTHOw+DOCesGqPwf30z7m5m8BzzMA+lt1oT7TeXPJ\nAq15i1ZNKB1Ellwej6iA1EuBTqGwr31qPi8e+fWPi5CjN2CwYWzfzBpKi9QkC7wJ\n5OF2pd7dnoD/LMbh0aTqvr4BHuWaimg2Se5Q1znbzVD54AELQTZKrSRRYdaTdSdx\ndb40Wscol2LPR9IS6qhVCogz+a9F+vPY9sr3RyNBepfLsxN1kwpIxV7cBnivTUjS\nqmMj1CSKLBUAkqACB1lFl6zY67v2PIM5dxwldqBzwFfAKiUgHkgLA5IByYlMkJdl\nluucuupg26o1X7+5BRZkAajDEkN1/NKVqv23qo7GUVcSNPKuCwrl0ytCRHY2gjPn\nrh+CLIVyaHBHsUrD63C/xzAHQ0dZd+Q9olYCmmY2lhvtbiiYjVmQxvsSWRSkIh/R\n3tGIbb6c5UsVpD4hz4jeNhtSy2sxRZE6Lj6WSBZ9D2Sm/517EQE=\n=z6kd\n-----END PGP SIGNATURE-----", "payload": "tree d81235c9d4950f2714d519609deb591c30007c9b\nparent cadcf5ed990dc02ad86cbb9f31423959a5517f50\nauthor Giles Cope <gilescope@gmail.com> 1613137362 +0000\ncommitter Giles Cope <gilescope@gmail.com> 1613137362 +0000\n\nSlightly more explicit\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/daa55acdb0bd174bb0bca1f88d5920289808a8f1", "html_url": "https://github.com/rust-lang/rust/commit/daa55acdb0bd174bb0bca1f88d5920289808a8f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/daa55acdb0bd174bb0bca1f88d5920289808a8f1/comments", "author": {"login": "gilescope", "id": 803976, "node_id": "MDQ6VXNlcjgwMzk3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/803976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gilescope", "html_url": "https://github.com/gilescope", "followers_url": "https://api.github.com/users/gilescope/followers", "following_url": "https://api.github.com/users/gilescope/following{/other_user}", "gists_url": "https://api.github.com/users/gilescope/gists{/gist_id}", "starred_url": "https://api.github.com/users/gilescope/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gilescope/subscriptions", "organizations_url": "https://api.github.com/users/gilescope/orgs", "repos_url": "https://api.github.com/users/gilescope/repos", "events_url": "https://api.github.com/users/gilescope/events{/privacy}", "received_events_url": "https://api.github.com/users/gilescope/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gilescope", "id": 803976, "node_id": "MDQ6VXNlcjgwMzk3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/803976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gilescope", "html_url": "https://github.com/gilescope", "followers_url": "https://api.github.com/users/gilescope/followers", "following_url": "https://api.github.com/users/gilescope/following{/other_user}", "gists_url": "https://api.github.com/users/gilescope/gists{/gist_id}", "starred_url": "https://api.github.com/users/gilescope/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gilescope/subscriptions", "organizations_url": "https://api.github.com/users/gilescope/orgs", "repos_url": "https://api.github.com/users/gilescope/repos", "events_url": "https://api.github.com/users/gilescope/events{/privacy}", "received_events_url": "https://api.github.com/users/gilescope/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cadcf5ed990dc02ad86cbb9f31423959a5517f50", "url": "https://api.github.com/repos/rust-lang/rust/commits/cadcf5ed990dc02ad86cbb9f31423959a5517f50", "html_url": "https://github.com/rust-lang/rust/commit/cadcf5ed990dc02ad86cbb9f31423959a5517f50"}], "stats": {"total": 27, "additions": 20, "deletions": 7}, "files": [{"sha": "3ddf0e638946c6b4cb142ea68ada17256053e7c6", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/daa55acdb0bd174bb0bca1f88d5920289808a8f1/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa55acdb0bd174bb0bca1f88d5920289808a8f1/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=daa55acdb0bd174bb0bca1f88d5920289808a8f1", "patch": "@@ -3,7 +3,7 @@\n use crate::slice;\n use crate::str::from_utf8_unchecked_mut;\n use crate::unicode::printable::is_printable;\n-use crate::unicode::{self, conversions, ASCII_CASE_MASK};\n+use crate::unicode::{self, conversions};\n \n use super::*;\n \n@@ -1090,7 +1090,11 @@ impl char {\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_uppercase(&self) -> char {\n-        if self.is_ascii_lowercase() { ((*self as u8) & !ASCII_CASE_MASK) as char } else { *self }\n+        if self.is_ascii_lowercase() {\n+            (*self as u8).ascii_change_case_unchecked() as char\n+        } else {\n+            *self\n+        }\n     }\n \n     /// Makes a copy of the value in its ASCII lower case equivalent.\n@@ -1118,7 +1122,11 @@ impl char {\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_lowercase(&self) -> char {\n-        if self.is_ascii_uppercase() { ((*self as u8) | ASCII_CASE_MASK) as char } else { *self }\n+        if self.is_ascii_uppercase() {\n+            (*self as u8).ascii_change_case_unchecked() as char\n+        } else {\n+            *self\n+        }\n     }\n \n     /// Checks that two values are an ASCII case-insensitive match."}, {"sha": "42ccdd00bbd6aa7cabce44ce5cc87ac63d7d0eee", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/daa55acdb0bd174bb0bca1f88d5920289808a8f1/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa55acdb0bd174bb0bca1f88d5920289808a8f1/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=daa55acdb0bd174bb0bca1f88d5920289808a8f1", "patch": "@@ -5,7 +5,9 @@\n use crate::intrinsics;\n use crate::mem;\n use crate::str::FromStr;\n-use crate::unicode::ASCII_CASE_MASK;\n+\n+/// If 6th bit set ascii is upper case.\n+const ASCII_CASE_MASK: u8 = 0b0010_0000;\n \n // Used because the `?` operator is not allowed in a const context.\n macro_rules! try_opt {\n@@ -222,6 +224,12 @@ impl u8 {\n         *self | (self.is_ascii_uppercase() as u8 * ASCII_CASE_MASK)\n     }\n \n+    /// Assumes self is ascii\n+    #[inline]\n+    pub(crate) fn ascii_change_case_unchecked(&self) -> u8 {\n+        *self ^ ASCII_CASE_MASK\n+    }\n+\n     /// Checks that two values are an ASCII case-insensitive match.\n     ///\n     /// This is equivalent to `to_ascii_lowercase(a) == to_ascii_lowercase(b)`."}, {"sha": "37ca0a0779b178e7565a6b198ec691300a5a743d", "filename": "library/core/src/unicode/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/daa55acdb0bd174bb0bca1f88d5920289808a8f1/library%2Fcore%2Fsrc%2Funicode%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa55acdb0bd174bb0bca1f88d5920289808a8f1/library%2Fcore%2Fsrc%2Funicode%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Funicode%2Fmod.rs?ref=daa55acdb0bd174bb0bca1f88d5920289808a8f1", "patch": "@@ -17,9 +17,6 @@ mod unicode_data;\n #[stable(feature = \"unicode_version\", since = \"1.45.0\")]\n pub const UNICODE_VERSION: (u8, u8, u8) = unicode_data::UNICODE_VERSION;\n \n-/// If 6th bit set ascii is upper case.\n-pub(crate) const ASCII_CASE_MASK: u8 = 0b0010_0000;\n-\n // For use in liballoc, not re-exported in libstd.\n pub use unicode_data::{\n     case_ignorable::lookup as Case_Ignorable, cased::lookup as Cased, conversions,"}]}