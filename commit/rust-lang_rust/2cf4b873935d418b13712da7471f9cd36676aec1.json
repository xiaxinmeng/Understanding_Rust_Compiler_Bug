{"sha": "2cf4b873935d418b13712da7471f9cd36676aec1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjZjRiODczOTM1ZDQxOGIxMzcxMmRhNzQ3MWY5Y2QzNjY3NmFlYzE=", "commit": {"author": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2021-08-15T12:49:36Z"}, "committer": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2021-08-15T12:49:36Z"}, "message": "De-dupe NLL HRTB diagnostics' use of `type_op_prove_predicate`", "tree": {"sha": "da7b934ccbd5b2d0b00b45c6bc68da614a653f1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da7b934ccbd5b2d0b00b45c6bc68da614a653f1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cf4b873935d418b13712da7471f9cd36676aec1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cf4b873935d418b13712da7471f9cd36676aec1", "html_url": "https://github.com/rust-lang/rust/commit/2cf4b873935d418b13712da7471f9cd36676aec1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cf4b873935d418b13712da7471f9cd36676aec1/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a69c7cc0d57ee8c906689c3c9c0e48e2548eb500", "url": "https://api.github.com/repos/rust-lang/rust/commits/a69c7cc0d57ee8c906689c3c9c0e48e2548eb500", "html_url": "https://github.com/rust-lang/rust/commit/a69c7cc0d57ee8c906689c3c9c0e48e2548eb500"}], "stats": {"total": 45, "additions": 27, "deletions": 18}, "files": [{"sha": "2d2eaf741a4dd66ef5689b339edde905f2b65177", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2cf4b873935d418b13712da7471f9cd36676aec1/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/2cf4b873935d418b13712da7471f9cd36676aec1/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=2cf4b873935d418b13712da7471f9cd36676aec1", "patch": "@@ -4055,6 +4055,7 @@ dependencies = [\n  \"rustc_span\",\n  \"rustc_target\",\n  \"rustc_trait_selection\",\n+ \"rustc_traits\",\n  \"smallvec\",\n  \"tracing\",\n ]"}, {"sha": "72e3d5e564abea01e789adcad06ff8c7c25d8428", "filename": "compiler/rustc_mir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2cf4b873935d418b13712da7471f9cd36676aec1/compiler%2Frustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2cf4b873935d418b13712da7471f9cd36676aec1/compiler%2Frustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2FCargo.toml?ref=2cf4b873935d418b13712da7471f9cd36676aec1", "patch": "@@ -27,6 +27,7 @@ rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_target = { path = \"../rustc_target\" }\n rustc_trait_selection = { path = \"../rustc_trait_selection\" }\n+rustc_traits = { path = \"../rustc_traits\" }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_span = { path = \"../rustc_span\" }\n rustc_apfloat = { path = \"../rustc_apfloat\" }"}, {"sha": "f72a8e3a70b8288f80e0893dded6f8df536db247", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/bound_region_errors.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2cf4b873935d418b13712da7471f9cd36676aec1/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fbound_region_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cf4b873935d418b13712da7471f9cd36676aec1/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fbound_region_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fbound_region_errors.rs?ref=2cf4b873935d418b13712da7471f9cd36676aec1", "patch": "@@ -3,12 +3,13 @@ use rustc_infer::infer::canonical::Canonical;\n use rustc_infer::infer::error_reporting::nice_region_error::NiceRegionError;\n use rustc_infer::infer::region_constraints::Constraint;\n use rustc_infer::infer::{InferCtxt, RegionResolutionError, SubregionOrigin, TyCtxtInferExt as _};\n-use rustc_infer::traits::{Normalized, Obligation, ObligationCause, TraitEngine, TraitEngineExt};\n+use rustc_infer::traits::{Normalized, ObligationCause, TraitEngine, TraitEngineExt};\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc_span::Span;\n use rustc_trait_selection::traits::query::type_op;\n use rustc_trait_selection::traits::{SelectionContext, TraitEngineExt as _};\n+use rustc_traits::type_op_prove_predicate_with_span;\n \n use std::fmt;\n use std::rc::Rc;\n@@ -209,17 +210,7 @@ impl TypeOpInfo<'tcx> for PredicateQuery<'tcx> {\n     ) -> Option<DiagnosticBuilder<'tcx>> {\n         tcx.infer_ctxt().enter_with_canonical(span, &self.canonical_query, |ref infcx, key, _| {\n             let mut fulfill_cx = <dyn TraitEngine<'_>>::new(tcx);\n-\n-            let (param_env, prove_predicate) = key.into_parts();\n-            fulfill_cx.register_predicate_obligation(\n-                infcx,\n-                Obligation::new(\n-                    ObligationCause::dummy_with_span(span),\n-                    param_env,\n-                    prove_predicate.predicate,\n-                ),\n-            );\n-\n+            type_op_prove_predicate_with_span(infcx, &mut *fulfill_cx, key, Some(span));\n             try_extract_error_from_fulfill_cx(fulfill_cx, infcx, placeholder_region, error_region)\n         })\n     }"}, {"sha": "8dd7c5bdfaebc84183c92f19b35dd218f123ad5e", "filename": "compiler/rustc_traits/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cf4b873935d418b13712da7471f9cd36676aec1/compiler%2Frustc_traits%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cf4b873935d418b13712da7471f9cd36676aec1/compiler%2Frustc_traits%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Flib.rs?ref=2cf4b873935d418b13712da7471f9cd36676aec1", "patch": "@@ -19,6 +19,8 @@ mod normalize_erasing_regions;\n mod normalize_projection_ty;\n mod type_op;\n \n+pub use type_op::type_op_prove_predicate_with_span;\n+\n use rustc_middle::ty::query::Providers;\n \n pub fn provide(p: &mut Providers) {"}, {"sha": "fe1fec9c0ab669a287a10177e61fc8eb5ba7ae99", "filename": "compiler/rustc_traits/src/type_op.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2cf4b873935d418b13712da7471f9cd36676aec1/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cf4b873935d418b13712da7471f9cd36676aec1/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs?ref=2cf4b873935d418b13712da7471f9cd36676aec1", "patch": "@@ -10,7 +10,7 @@ use rustc_middle::ty::{\n     self, FnSig, Lift, PolyFnSig, PredicateKind, Ty, TyCtxt, TypeFoldable, Variance,\n };\n use rustc_middle::ty::{ParamEnv, ParamEnvAnd, Predicate, ToPredicate};\n-use rustc_span::DUMMY_SP;\n+use rustc_span::{Span, DUMMY_SP};\n use rustc_trait_selection::infer::InferCtxtBuilderExt;\n use rustc_trait_selection::infer::InferCtxtExt;\n use rustc_trait_selection::traits::query::normalize::AtExt;\n@@ -247,11 +247,25 @@ fn type_op_prove_predicate<'tcx>(\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, ProvePredicate<'tcx>>>,\n ) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, ()>>, NoSolution> {\n     tcx.infer_ctxt().enter_canonical_trait_query(&canonicalized, |infcx, fulfill_cx, key| {\n-        let (param_env, ProvePredicate { predicate }) = key.into_parts();\n-        fulfill_cx.register_predicate_obligation(\n-            infcx,\n-            Obligation::new(ObligationCause::dummy(), param_env, predicate),\n-        );\n+        type_op_prove_predicate_with_span(infcx, fulfill_cx, key, None);\n         Ok(())\n     })\n }\n+\n+/// The core of the `type_op_prove_predicate` query: for diagnostics purposes in NLL HRTB errors,\n+/// this query can be re-run to better track the span of the obligation cause, and improve the error\n+/// message. Do not call directly unless you're in that very specific context.\n+pub fn type_op_prove_predicate_with_span<'a, 'tcx: 'a>(\n+    infcx: &'a InferCtxt<'a, 'tcx>,\n+    fulfill_cx: &'a mut dyn TraitEngine<'tcx>,\n+    key: ParamEnvAnd<'tcx, ProvePredicate<'tcx>>,\n+    span: Option<Span>,\n+) {\n+    let cause = if let Some(span) = span {\n+        ObligationCause::dummy_with_span(span)\n+    } else {\n+        ObligationCause::dummy()\n+    };\n+    let (param_env, ProvePredicate { predicate }) = key.into_parts();\n+    fulfill_cx.register_predicate_obligation(infcx, Obligation::new(cause, param_env, predicate));\n+}"}]}