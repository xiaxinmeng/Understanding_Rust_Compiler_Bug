{"sha": "576229fea054105f1f3a49ca5f31f5f4983f5266", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3NjIyOWZlYTA1NDEwNWYxZjNhNDljYTVmMzFmNWY0OTgzZjUyNjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-15T21:51:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-15T21:51:16Z"}, "message": "Auto merge of #33005 - Manishearth:rollup, r=Manishearth\n\nRollup of 11 pull requests\n\n- Successful merges: #32923, #32926, #32929, #32931, #32935, #32945, #32946, #32964, #32970, #32973, #32997\n- Failed merges:", "tree": {"sha": "736d1a8f05d181f27e51d53ef49e4d77e05bb861", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/736d1a8f05d181f27e51d53ef49e4d77e05bb861"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/576229fea054105f1f3a49ca5f31f5f4983f5266", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/576229fea054105f1f3a49ca5f31f5f4983f5266", "html_url": "https://github.com/rust-lang/rust/commit/576229fea054105f1f3a49ca5f31f5f4983f5266", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/576229fea054105f1f3a49ca5f31f5f4983f5266/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9debf51f4b8a5d437df1abca57c5a58c45297b60", "url": "https://api.github.com/repos/rust-lang/rust/commits/9debf51f4b8a5d437df1abca57c5a58c45297b60", "html_url": "https://github.com/rust-lang/rust/commit/9debf51f4b8a5d437df1abca57c5a58c45297b60"}, {"sha": "e563359396928453db81141bf12dae04a567f2e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e563359396928453db81141bf12dae04a567f2e9", "html_url": "https://github.com/rust-lang/rust/commit/e563359396928453db81141bf12dae04a567f2e9"}], "stats": {"total": 327, "additions": 248, "deletions": 79}, "files": [{"sha": "84b8ad333c17a0aec301e718ba433830a6ebadd3", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 40, "deletions": 13, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/576229fea054105f1f3a49ca5f31f5f4983f5266/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/576229fea054105f1f3a49ca5f31f5f4983f5266/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=576229fea054105f1f3a49ca5f31f5f4983f5266", "patch": "@@ -10,6 +10,7 @@\n \n import argparse\n import contextlib\n+import hashlib\n import os\n import shutil\n import subprocess\n@@ -18,13 +19,29 @@\n \n def get(url, path, verbose=False):\n     print(\"downloading \" + url)\n-    # see http://serverfault.com/questions/301128/how-to-download\n-    if sys.platform == 'win32':\n-        run([\"PowerShell.exe\", \"/nologo\", \"-Command\",\n-             \"(New-Object System.Net.WebClient).DownloadFile('\" + url +\n-                \"', '\" + path + \"')\"], verbose=verbose)\n-    else:\n-        run([\"curl\", \"-o\", path, url], verbose=verbose)\n+    sha_url = url + \".sha256\"\n+    sha_path = path + \".sha256\"\n+    for _url, _path in ((url, path), (sha_url, sha_path)):\n+        # see http://serverfault.com/questions/301128/how-to-download\n+        if sys.platform == 'win32':\n+            run([\"PowerShell.exe\", \"/nologo\", \"-Command\",\n+                 \"(New-Object System.Net.WebClient)\"\n+                 \".DownloadFile('{}', '{}')\".format(_url, _path)],\n+                verbose=verbose)\n+        else:\n+            run([\"curl\", \"-o\", _path, _url], verbose=verbose)\n+    print(\"verifying \" + path)\n+    with open(path, \"rb\") as f:\n+        found = hashlib.sha256(f.read()).hexdigest()\n+    with open(sha_path, \"r\") as f:\n+        expected, _ = f.readline().split()\n+    if found != expected:\n+        err = (\"invalid checksum:\\n\"\n+               \"    found:    {}\\n\"\n+               \"    expected: {}\".format(found, expected))\n+        if verbose:\n+            raise RuntimeError(err)\n+        sys.exit(err)\n \n def unpack(tarball, dst, verbose=False, match=None):\n     print(\"extracting \" + tarball)\n@@ -57,9 +74,10 @@ def run(args, verbose=False):\n     ret = subprocess.Popen(args)\n     code = ret.wait()\n     if code != 0:\n-        if not verbose:\n-            print(\"failed to run: \" + ' '.join(args))\n-        raise RuntimeError(\"failed to run command\")\n+        err = \"failed to run: \" + ' '.join(args)\n+        if verbose:\n+            raise RuntimeError(err)\n+        sys.exit(err)\n \n class RustBuild:\n     def download_rust_nightly(self):\n@@ -210,7 +228,10 @@ def build_triple(self):\n             if sys.platform == 'win32':\n                 return 'x86_64-pc-windows-msvc'\n             else:\n-                raise\n+                err = \"uname not found\"\n+                if self.verbose:\n+                    raise Exception(err)\n+                sys.exit(err)\n \n         # Darwin's `uname -s` lies and always returns i386. We have to use\n         # sysctl instead.\n@@ -253,7 +274,10 @@ def build_triple(self):\n                 cputype = 'x86_64'\n             ostype = 'pc-windows-gnu'\n         else:\n-            raise ValueError(\"unknown OS type: \" + ostype)\n+            err = \"unknown OS type: \" + ostype\n+            if self.verbose:\n+                raise ValueError(err)\n+            sys.exit(err)\n \n         if cputype in {'i386', 'i486', 'i686', 'i786', 'x86'}:\n             cputype = 'i686'\n@@ -269,7 +293,10 @@ def build_triple(self):\n         elif cputype in {'amd64', 'x86_64', 'x86-64', 'x64'}:\n             cputype = 'x86_64'\n         else:\n-            raise ValueError(\"unknown cpu type: \" + cputype)\n+            err = \"unknown cpu type: \" + cputype\n+            if self.verbose:\n+                raise ValueError(err)\n+            sys.exit(err)\n \n         return cputype + '-' + ostype\n "}, {"sha": "d81619b647fd0997dd83ed7ef77327e76cecc2bd", "filename": "src/doc/book/closures.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/576229fea054105f1f3a49ca5f31f5f4983f5266/src%2Fdoc%2Fbook%2Fclosures.md", "raw_url": "https://github.com/rust-lang/rust/raw/576229fea054105f1f3a49ca5f31f5f4983f5266/src%2Fdoc%2Fbook%2Fclosures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fclosures.md?ref=576229fea054105f1f3a49ca5f31f5f4983f5266", "patch": "@@ -492,12 +492,12 @@ fn factory() -> Box<Fn(i32) -> i32> {\n \n     Box::new(move |x| x + num)\n }\n-# fn main() {\n+fn main() {\n let f = factory();\n \n let answer = f(1);\n assert_eq!(6, answer);\n-# }\n+}\n ```\n \n By making the inner closure a `move Fn`, we create a new stack frame for our"}, {"sha": "1fe3f6da0ebc74c82f6bdca3acf70fba243f5056", "filename": "src/doc/book/getting-started.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/576229fea054105f1f3a49ca5f31f5f4983f5266/src%2Fdoc%2Fbook%2Fgetting-started.md", "raw_url": "https://github.com/rust-lang/rust/raw/576229fea054105f1f3a49ca5f31f5f4983f5266/src%2Fdoc%2Fbook%2Fgetting-started.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fgetting-started.md?ref=576229fea054105f1f3a49ca5f31f5f4983f5266", "patch": "@@ -575,8 +575,12 @@ look something like this:\n name = \"hello_world\"\n version = \"0.1.0\"\n authors = [\"Your Name <you@example.com>\"]\n+\n+[dependencies]\n ```\n \n+Do not worry about the `[dependencies]` line, we will come back to it later.\n+\n Cargo has populated *Cargo.toml* with reasonable defaults based on the arguments\n you gave it and your `git` global configuration. You may notice that Cargo has\n also initialized the `hello_world` directory as a `git` repository."}, {"sha": "ca4c9bfd9544cbde5b57c512818b1df19b140f4e", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/576229fea054105f1f3a49ca5f31f5f4983f5266/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576229fea054105f1f3a49ca5f31f5f4983f5266/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=576229fea054105f1f3a49ca5f31f5f4983f5266", "patch": "@@ -96,8 +96,10 @@ mod imp {\n             libc::realloc(ptr as *mut libc::c_void, size as libc::size_t) as *mut u8\n         } else {\n             let new_ptr = allocate(size, align);\n-            ptr::copy(ptr, new_ptr, cmp::min(size, old_size));\n-            deallocate(ptr, old_size, align);\n+            if !new_ptr.is_null() {\n+                ptr::copy(ptr, new_ptr, cmp::min(size, old_size));\n+                deallocate(ptr, old_size, align);\n+            }\n             new_ptr\n         }\n     }"}, {"sha": "34b98a34677802e210e09c7ea2b176edbdd51cb3", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/576229fea054105f1f3a49ca5f31f5f4983f5266/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576229fea054105f1f3a49ca5f31f5f4983f5266/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=576229fea054105f1f3a49ca5f31f5f4983f5266", "patch": "@@ -292,7 +292,7 @@ E0072: r##\"\n When defining a recursive struct or enum, any use of the type being defined\n from inside the definition must occur behind a pointer (like `Box` or `&`).\n This is because structs and enums must have a well-defined size, and without\n-the pointer the size of the type would need to be unbounded.\n+the pointer, the size of the type would need to be unbounded.\n \n Consider the following erroneous definition of a type for a list of bytes:\n "}, {"sha": "83929c17ca3e4a783db68711e8871e505b88a30c", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/576229fea054105f1f3a49ca5f31f5f4983f5266/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576229fea054105f1f3a49ca5f31f5f4983f5266/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=576229fea054105f1f3a49ca5f31f5f4983f5266", "patch": "@@ -189,13 +189,19 @@ impl<'a, 'tcx> LanguageItemCollector<'a, 'tcx> {\n         match self.items.items[item_index] {\n             Some(original_def_id) if original_def_id != item_def_id => {\n                 let cstore = &self.session.cstore;\n-                let span = self.ast_map.span_if_local(item_def_id)\n-                                       .expect(\"we should have found local duplicate earlier\");\n-                let mut err = struct_span_err!(self.session,\n-                                               span,\n-                                               E0152,\n-                                               \"duplicate lang item found: `{}`.\",\n-                                               LanguageItems::item_name(item_index));\n+                let name = LanguageItems::item_name(item_index);\n+                let mut err = match self.ast_map.span_if_local(item_def_id) {\n+                    Some(span) => struct_span_err!(\n+                        self.session,\n+                        span,\n+                        E0152,\n+                        \"duplicate lang item found: `{}`.\",\n+                        name),\n+                    None => self.session.struct_err(&format!(\n+                            \"duplicate lang item in crate `{}`: `{}`.\",\n+                            cstore.crate_name(item_def_id.krate),\n+                            name)),\n+                };\n                 if let Some(span) = self.ast_map.span_if_local(original_def_id) {\n                     span_note!(&mut err, span,\n                                \"first defined here.\");"}, {"sha": "8c22ddbb462c025c5ce1dfa5c8fbec40cbe2094c", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/576229fea054105f1f3a49ca5f31f5f4983f5266/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576229fea054105f1f3a49ca5f31f5f4983f5266/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=576229fea054105f1f3a49ca5f31f5f4983f5266", "patch": "@@ -582,15 +582,19 @@ fn get_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         debug!(\"get_fn: not casting pointer!\");\n \n         attributes::from_fn_attrs(ccx, attrs, llfn);\n-        if let Some(id) = local_item {\n+        if local_item.is_some() {\n             // FIXME(eddyb) Doubt all extern fn should allow unwinding.\n             attributes::unwind(llfn, true);\n-            ccx.item_symbols().borrow_mut().insert(id, sym);\n         }\n \n         llfn\n     };\n \n+    // Always insert into item_symbols, in case this item is exported.\n+    if let Some(id) = local_item {\n+        ccx.item_symbols().borrow_mut().insert(id, sym);\n+    }\n+\n     ccx.instances().borrow_mut().insert(instance, llfn);\n \n     immediate_rvalue(llfn, fn_ptr_ty)"}, {"sha": "ba1fbc75c18a3b3343bac5c448eb4f853e9814e6", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/576229fea054105f1f3a49ca5f31f5f4983f5266/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576229fea054105f1f3a49ca5f31f5f4983f5266/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=576229fea054105f1f3a49ca5f31f5f4983f5266", "patch": "@@ -2489,7 +2489,7 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n     }\n \n     fn doctraititem(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item,\n-                    link: AssocItemLink, render_static: bool,\n+                    link: AssocItemLink, render_static: bool, is_default_item: bool,\n                     outer_version: Option<&str>) -> fmt::Result {\n         let shortty = shortty(item);\n         let name = item.name.as_ref().unwrap();\n@@ -2540,17 +2540,16 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n             _ => panic!(\"can't make docs for trait item with name {:?}\", item.name)\n         }\n \n-        match link {\n-            AssocItemLink::Anchor if !is_static || render_static => {\n-                document(w, cx, item)\n-            },\n-            _ => Ok(()),\n+        if !is_default_item && (!is_static || render_static) {\n+            document(w, cx, item)\n+        } else {\n+            Ok(())\n         }\n     }\n \n     write!(w, \"<div class='impl-items'>\")?;\n     for trait_item in &i.impl_.items {\n-        doctraititem(w, cx, trait_item, link, render_header, outer_version)?;\n+        doctraititem(w, cx, trait_item, link, render_header, false, outer_version)?;\n     }\n \n     fn render_default_items(w: &mut fmt::Formatter,\n@@ -2567,7 +2566,7 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n             let did = i.trait_.as_ref().unwrap().def_id().unwrap();\n             let assoc_link = AssocItemLink::GotoSource(did, &i.provided_trait_methods);\n \n-            doctraititem(w, cx, trait_item, assoc_link, render_static,\n+            doctraititem(w, cx, trait_item, assoc_link, render_static, true,\n                          outer_version)?;\n         }\n         Ok(())"}, {"sha": "cd7b0fcfb004450cb04df6642fdddea5eebdf22e", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/576229fea054105f1f3a49ca5f31f5f4983f5266/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576229fea054105f1f3a49ca5f31f5f4983f5266/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=576229fea054105f1f3a49ca5f31f5f4983f5266", "patch": "@@ -504,6 +504,13 @@ pub fn expand_item_mac(it: P<ast::Item>,\n \n /// Expand a stmt\n fn expand_stmt(stmt: Stmt, fld: &mut MacroExpander) -> SmallVector<Stmt> {\n+    // perform all pending renames\n+    let stmt = {\n+        let pending_renames = &mut fld.cx.syntax_env.info().pending_renames;\n+        let mut rename_fld = IdentRenamer{renames:pending_renames};\n+        rename_fld.fold_stmt(stmt).expect_one(\"rename_fold didn't return one value\")\n+    };\n+\n     let (mac, style, attrs) = match stmt.node {\n         StmtKind::Mac(mac, style, attrs) => (mac, style, attrs),\n         _ => return expand_non_macro_stmt(stmt, fld)\n@@ -717,14 +724,8 @@ pub fn expand_block(blk: P<Block>, fld: &mut MacroExpander) -> P<Block> {\n pub fn expand_block_elts(b: P<Block>, fld: &mut MacroExpander) -> P<Block> {\n     b.map(|Block {id, stmts, expr, rules, span}| {\n         let new_stmts = stmts.into_iter().flat_map(|x| {\n-            // perform all pending renames\n-            let renamed_stmt = {\n-                let pending_renames = &mut fld.cx.syntax_env.info().pending_renames;\n-                let mut rename_fld = IdentRenamer{renames:pending_renames};\n-                rename_fld.fold_stmt(x).expect_one(\"rename_fold didn't return one value\")\n-            };\n-            // expand macros in the statement\n-            fld.fold_stmt(renamed_stmt).into_iter()\n+            // perform pending renames and expand macros in the statement\n+            fld.fold_stmt(x).into_iter()\n         }).collect();\n         let new_expr = expr.map(|x| {\n             let expr = {"}, {"sha": "87ab3dad50c7082e6374c554f3d776e692a9c8e8", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/576229fea054105f1f3a49ca5f31f5f4983f5266/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576229fea054105f1f3a49ca5f31f5f4983f5266/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=576229fea054105f1f3a49ca5f31f5f4983f5266", "patch": "@@ -1014,6 +1014,7 @@ fn is_in_follow(_: &ExtCtxt, tok: &Token, frag: &str) -> Result<bool, String> {\n                 match *tok {\n                     OpenDelim(token::DelimToken::Brace) | OpenDelim(token::DelimToken::Bracket) |\n                     Comma | FatArrow | Colon | Eq | Gt | Semi | BinOp(token::Or) => Ok(true),\n+                    MatchNt(_, ref frag, _, _) if frag.name.as_str() == \"block\" => Ok(true),\n                     Ident(i, _) if (i.name.as_str() == \"as\" ||\n                                     i.name.as_str() == \"where\") => Ok(true),\n                     _ => Ok(false)"}, {"sha": "24a62a3dc2a85e238df9d91039f305a399dd9f0f", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/576229fea054105f1f3a49ca5f31f5f4983f5266/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576229fea054105f1f3a49ca5f31f5f4983f5266/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=576229fea054105f1f3a49ca5f31f5f4983f5266", "patch": "@@ -45,8 +45,8 @@ use std::cmp;\n // The version numbers here correspond to the version in which the current status\n // was set. This is most important for knowing when a particular feature became\n // stable (active).\n-// NB: The featureck.py script parses this information directly out of the source\n-// so take care when modifying it.\n+// NB: The tidy tool parses this information directly out of the source so take\n+// care when modifying it.\n const KNOWN_FEATURES: &'static [(&'static str, &'static str, Option<u32>, Status)] = &[\n     (\"globs\", \"1.0.0\", None, Accepted),\n     (\"macro_rules\", \"1.0.0\", None, Accepted),"}, {"sha": "460d0a0088ce2918813c5374d8558d63a99409fd", "filename": "src/test/auxiliary/foreign_lib.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/576229fea054105f1f3a49ca5f31f5f4983f5266/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576229fea054105f1f3a49ca5f31f5f4983f5266/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs?ref=576229fea054105f1f3a49ca5f31f5f4983f5266", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![crate_name=\"foreign_lib\"]\n+\n #![feature(libc)]\n \n pub mod rustrt {\n@@ -19,3 +20,29 @@ pub mod rustrt {\n         pub fn rust_get_test_int() -> libc::intptr_t;\n     }\n }\n+\n+pub mod rustrt2 {\n+    extern crate libc;\n+\n+    extern {\n+        pub fn rust_get_test_int() -> libc::intptr_t;\n+    }\n+}\n+\n+pub mod rustrt3 {\n+    // Different type, but same ABI (on all supported platforms).\n+    // Ensures that we don't ICE or trigger LLVM asserts when\n+    // importing the same symbol under different types.\n+    // See https://github.com/rust-lang/rust/issues/32740.\n+    extern {\n+        pub fn rust_get_test_int() -> *const u8;\n+    }\n+}\n+\n+pub fn local_uses() {\n+    unsafe {\n+        let x = rustrt::rust_get_test_int();\n+        assert_eq!(x, rustrt2::rust_get_test_int());\n+        assert_eq!(x as *const _, rustrt3::rust_get_test_int());\n+    }\n+}"}, {"sha": "491c087c101defeb6d093d8e19f358487a0ea17b", "filename": "src/test/compile-fail/issue-32922.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/576229fea054105f1f3a49ca5f31f5f4983f5266/src%2Ftest%2Fcompile-fail%2Fissue-32922.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576229fea054105f1f3a49ca5f31f5f4983f5266/src%2Ftest%2Fcompile-fail%2Fissue-32922.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-32922.rs?ref=576229fea054105f1f3a49ca5f31f5f4983f5266", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+#![allow(warnings)]\n+\n+macro_rules! foo { () => {\n+    let x = 1;\n+    macro_rules! bar { () => {x} }\n+    let _ = bar!();\n+}}\n+\n+macro_rules! bar { // test issue #31856\n+    ($n:ident) => (\n+        let a = 1;\n+        let $n = a;\n+    )\n+}\n+\n+macro_rules! baz {\n+    ($i:ident) => {\n+        let mut $i = 2;\n+        $i = $i + 1;\n+    }\n+}\n+\n+#[rustc_error]\n+fn main() { //~ ERROR compilation successful\n+    foo! {};\n+    bar! {};\n+\n+    let mut a = true;\n+    baz!(a);\n+}"}, {"sha": "f985340c524108a32c12526bb87b910a9c4d6a90", "filename": "src/test/compile-fail/macro-follow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/576229fea054105f1f3a49ca5f31f5f4983f5266/src%2Ftest%2Fcompile-fail%2Fmacro-follow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576229fea054105f1f3a49ca5f31f5f4983f5266/src%2Ftest%2Fcompile-fail%2Fmacro-follow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-follow.rs?ref=576229fea054105f1f3a49ca5f31f5f4983f5266", "patch": "@@ -55,7 +55,7 @@ macro_rules! follow_expr {\n     ($e:expr $m:meta) => {};  //~ERROR `$e:expr` is followed by `$m:meta`\n }\n // FOLLOW(ty) = {OpenDelim(Brace), Comma, FatArrow, Colon, Eq, Gt, Semi, Or,\n-//               Ident(as), Ident(where), OpenDelim(Bracket)}\n+//               Ident(as), Ident(where), OpenDelim(Bracket), Nonterminal(Block)}\n macro_rules! follow_ty {\n     ($t:ty ()) => {};       //~WARN  `$t:ty` is followed by `(`\n     ($t:ty []) => {};       // ok (RFC 1462)\n@@ -67,7 +67,7 @@ macro_rules! follow_ty {\n     ($t:ty $t:ty) => {};    //~ERROR `$t:ty` is followed by `$t:ty`\n     ($t:ty $s:stmt) => {};  //~ERROR `$t:ty` is followed by `$s:stmt`\n     ($t:ty $p:path) => {};  //~ERROR `$t:ty` is followed by `$p:path`\n-    ($t:ty $b:block) => {}; //~ERROR `$t:ty` is followed by `$b:block`\n+    ($t:ty $b:block) => {}; // ok (RFC 1494)\n     ($t:ty $i:ident) => {}; //~ERROR `$t:ty` is followed by `$i:ident`\n     ($t:ty $t:tt) => {};    //~ERROR `$t:ty` is followed by `$t:tt`\n     ($t:ty $i:item) => {};  //~ERROR `$t:ty` is followed by `$i:item`\n@@ -109,7 +109,7 @@ macro_rules! follow_path {\n     ($p:path $t:ty) => {};    //~ERROR `$p:path` is followed by `$t:ty`\n     ($p:path $s:stmt) => {};  //~ERROR `$p:path` is followed by `$s:stmt`\n     ($p:path $p:path) => {};  //~ERROR `$p:path` is followed by `$p:path`\n-    ($p:path $b:block) => {}; //~ERROR `$p:path` is followed by `$b:block`\n+    ($p:path $b:block) => {}; // ok (RFC 1494)\n     ($p:path $i:ident) => {}; //~ERROR `$p:path` is followed by `$i:ident`\n     ($p:path $t:tt) => {};    //~ERROR `$p:path` is followed by `$t:tt`\n     ($p:path $i:item) => {};  //~ERROR `$p:path` is followed by `$i:item`"}, {"sha": "fb162d8793356a35f625a49a5091b105ab56f312", "filename": "src/test/run-pass/foreign-dupe.rs", "status": "modified", "additions": 7, "deletions": 30, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/576229fea054105f1f3a49ca5f31f5f4983f5266/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576229fea054105f1f3a49ca5f31f5f4983f5266/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs?ref=576229fea054105f1f3a49ca5f31f5f4983f5266", "patch": "@@ -8,41 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// calling pin_thread and that's having weird side-effects.\n+// aux-build:foreign_lib.rs\n \n-#![feature(libc)]\n+// Check that we can still call duplicated extern (imported) functions\n+// which were declared in another crate. See issues #32740 and #32783.\n \n-mod rustrt1 {\n-    extern crate libc;\n \n-    #[link(name = \"rust_test_helpers\")]\n-    extern {\n-        pub fn rust_get_test_int() -> libc::intptr_t;\n-    }\n-}\n-\n-mod rustrt2 {\n-    extern crate libc;\n-\n-    extern {\n-        pub fn rust_get_test_int() -> libc::intptr_t;\n-    }\n-}\n-\n-mod rustrt3 {\n-    // Different type, but same ABI (on all supported platforms).\n-    // Ensures that we don't ICE or trigger LLVM asserts when\n-    // importing the same symbol under different types.\n-    // See https://github.com/rust-lang/rust/issues/32740.\n-    extern {\n-        pub fn rust_get_test_int() -> *const u8;\n-    }\n-}\n+extern crate foreign_lib;\n \n pub fn main() {\n     unsafe {\n-        let x = rustrt1::rust_get_test_int();\n-        assert_eq!(x, rustrt2::rust_get_test_int());\n-        assert_eq!(x as *const _, rustrt3::rust_get_test_int());\n+        let x = foreign_lib::rustrt::rust_get_test_int();\n+        assert_eq!(x, foreign_lib::rustrt2::rust_get_test_int());\n+        assert_eq!(x as *const _, foreign_lib::rustrt3::rust_get_test_int());\n     }\n }"}, {"sha": "dca676f8cf95fe71707d0d094b0ff44ee8856252", "filename": "src/test/run-pass/macro-follow.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/576229fea054105f1f3a49ca5f31f5f4983f5266/src%2Ftest%2Frun-pass%2Fmacro-follow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576229fea054105f1f3a49ca5f31f5f4983f5266/src%2Ftest%2Frun-pass%2Fmacro-follow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-follow.rs?ref=576229fea054105f1f3a49ca5f31f5f4983f5266", "patch": "@@ -26,7 +26,7 @@ macro_rules! follow_expr {\n     ($e:expr ;) => {};\n }\n // FOLLOW(ty) = {OpenDelim(Brace), Comma, FatArrow, Colon, Eq, Gt, Semi, Or,\n-//               Ident(as), Ident(where), OpenDelim(Bracket)}\n+//               Ident(as), Ident(where), OpenDelim(Bracket), Nonterminal(Block)}\n macro_rules! follow_ty {\n     ($t:ty {}) => {};\n     ($t:ty ,) => {};\n@@ -39,6 +39,7 @@ macro_rules! follow_ty {\n     ($t:ty as) => {};\n     ($t:ty where) => {};\n     ($t:ty []) => {};\n+    ($t:ty $b:block) => {};\n }\n // FOLLOW(stmt) = FOLLOW(expr)\n macro_rules! follow_stmt {\n@@ -59,6 +60,7 @@ macro_rules! follow_path {\n     ($p:path as) => {};\n     ($p:path where) => {};\n     ($p:path []) => {};\n+    ($p:path $b:block) => {};\n }\n // FOLLOW(block) = any token\n macro_rules! follow_block {"}, {"sha": "5eccf97bb5f6f25fda3d1d43ee6f040358221d2e", "filename": "src/test/rustdoc/manual_impl.rs", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/576229fea054105f1f3a49ca5f31f5f4983f5266/src%2Ftest%2Frustdoc%2Fmanual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576229fea054105f1f3a49ca5f31f5f4983f5266/src%2Ftest%2Frustdoc%2Fmanual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmanual_impl.rs?ref=576229fea054105f1f3a49ca5f31f5f4983f5266", "patch": "@@ -0,0 +1,78 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// @has manual_impl/trait.T.html\n+// @has  - '//*[@class=\"docblock\"]' 'Docs associated with the trait definition.'\n+// @has  - '//*[@class=\"docblock\"]' 'Docs associated with the trait a_method definition.'\n+// @has  - '//*[@class=\"docblock\"]' 'Docs associated with the trait b_method definition.'\n+/// Docs associated with the trait definition.\n+pub trait T {\n+    /// Docs associated with the trait a_method definition.\n+    fn a_method(&self) -> usize;\n+\n+    /// Docs associated with the trait b_method definition.\n+    fn b_method(&self) -> usize {\n+        self.a_method()\n+    }\n+}\n+\n+// @has manual_impl/struct.S1.html '//*[@class=\"trait\"]' 'T'\n+// @has  - '//*[@class=\"docblock\"]' 'Docs associated with the S1 trait implementation.'\n+// @has  - '//*[@class=\"docblock\"]' 'Docs associated with the S1 trait a_method implementation.'\n+// @!has - '//*[@class=\"docblock\"]' 'Docs associated with the trait a_method definition.'\n+// @!has - '//*[@class=\"docblock\"]' 'Docs associated with the trait b_method definition.'\n+pub struct S1(usize);\n+\n+/// Docs associated with the S1 trait implementation.\n+impl T for S1 {\n+    /// Docs associated with the S1 trait a_method implementation.\n+    fn a_method(&self) -> usize {\n+        self.0\n+    }\n+}\n+\n+// @has manual_impl/struct.S2.html '//*[@class=\"trait\"]' 'T'\n+// @has  - '//*[@class=\"docblock\"]' 'Docs associated with the S2 trait implementation.'\n+// @has  - '//*[@class=\"docblock\"]' 'Docs associated with the S2 trait a_method implementation.'\n+// @has  - '//*[@class=\"docblock\"]' 'Docs associated with the S2 trait b_method implementation.'\n+// @!has - '//*[@class=\"docblock\"]' 'Docs associated with the trait a_method definition.'\n+// @!has - '//*[@class=\"docblock\"]' 'Docs associated with the trait b_method definition.'\n+pub struct S2(usize);\n+\n+/// Docs associated with the S2 trait implementation.\n+impl T for S2 {\n+    /// Docs associated with the S2 trait a_method implementation.\n+    fn a_method(&self) -> usize {\n+        self.0\n+    }\n+\n+    /// Docs associated with the S2 trait b_method implementation.\n+    fn b_method(&self) -> usize {\n+        5\n+    }\n+}\n+\n+// @has manual_impl/struct.S3.html '//*[@class=\"trait\"]' 'T'\n+// @has  - '//*[@class=\"docblock\"]' 'Docs associated with the S3 trait implementation.'\n+// @has  - '//*[@class=\"docblock\"]' 'Docs associated with the S3 trait b_method implementation.'\n+// @!has - '//*[@class=\"docblock\"]' 'Docs associated with the trait a_method definition.'\n+pub struct S3(usize);\n+\n+/// Docs associated with the S3 trait implementation.\n+impl T for S3 {\n+    fn a_method(&self) -> usize {\n+        self.0\n+    }\n+\n+    /// Docs associated with the S3 trait b_method implementation.\n+    fn b_method(&self) -> usize {\n+        5\n+    }\n+}"}]}