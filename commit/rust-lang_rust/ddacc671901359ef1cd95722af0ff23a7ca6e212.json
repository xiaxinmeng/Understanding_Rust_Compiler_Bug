{"sha": "ddacc671901359ef1cd95722af0ff23a7ca6e212", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkYWNjNjcxOTAxMzU5ZWYxY2Q5NTcyMmFmMGZmMjNhN2NhNmUyMTI=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-06-11T00:27:48Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-06-11T04:34:43Z"}, "message": "Add a suggestion to use unused asm arguments in comments", "tree": {"sha": "9771981a3bb6951f2c0ba8def406124407b8fe5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9771981a3bb6951f2c0ba8def406124407b8fe5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddacc671901359ef1cd95722af0ff23a7ca6e212", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddacc671901359ef1cd95722af0ff23a7ca6e212", "html_url": "https://github.com/rust-lang/rust/commit/ddacc671901359ef1cd95722af0ff23a7ca6e212", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddacc671901359ef1cd95722af0ff23a7ca6e212/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34bb6d0448a896b3d260f0858e3bccab63931141", "url": "https://api.github.com/repos/rust-lang/rust/commits/34bb6d0448a896b3d260f0858e3bccab63931141", "html_url": "https://github.com/rust-lang/rust/commit/34bb6d0448a896b3d260f0858e3bccab63931141"}], "stats": {"total": 69, "additions": 50, "deletions": 19}, "files": [{"sha": "f5b6e736fae99e44ed05becda266f22ebd1be54c", "filename": "src/librustc_builtin_macros/asm.rs", "status": "modified", "additions": 29, "deletions": 18, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ddacc671901359ef1cd95722af0ff23a7ca6e212/src%2Flibrustc_builtin_macros%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddacc671901359ef1cd95722af0ff23a7ca6e212/src%2Flibrustc_builtin_macros%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fasm.rs?ref=ddacc671901359ef1cd95722af0ff23a7ca6e212", "patch": "@@ -391,7 +391,8 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, sp: Span, args: AsmArgs) -> P<ast\n         used[*pos] = true;\n     }\n \n-    let named_pos: FxHashSet<usize> = args.named_args.values().cloned().collect();\n+    let named_pos: FxHashMap<usize, Symbol> =\n+        args.named_args.iter().map(|(&sym, &idx)| (idx, sym)).collect();\n     let mut arg_spans = parser.arg_places.iter().map(|span| template_span.from_inner(*span));\n     let mut template = vec![];\n     for piece in unverified_pieces {\n@@ -405,7 +406,7 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, sp: Span, args: AsmArgs) -> P<ast\n                 let operand_idx = match arg.position {\n                     parse::ArgumentIs(idx) | parse::ArgumentImplicitlyIs(idx) => {\n                         if idx >= args.operands.len()\n-                            || named_pos.contains(&idx)\n+                            || named_pos.contains_key(&idx)\n                             || args.reg_args.contains(&idx)\n                         {\n                             let msg = format!(\"invalid reference to argument at index {}\", idx);\n@@ -426,7 +427,7 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, sp: Span, args: AsmArgs) -> P<ast\n                             };\n                             err.note(&msg);\n \n-                            if named_pos.contains(&idx) {\n+                            if named_pos.contains_key(&idx) {\n                                 err.span_label(args.operands[idx].1, \"named argument\");\n                                 err.span_note(\n                                     args.operands[idx].1,\n@@ -480,27 +481,31 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, sp: Span, args: AsmArgs) -> P<ast\n         }\n     }\n \n-    let operands = args.operands;\n-    let unused_operands: Vec<_> = used\n-        .into_iter()\n-        .enumerate()\n-        .filter(|&(_, used)| !used)\n-        .map(|(idx, _)| {\n-            if named_pos.contains(&idx) {\n-                // named argument\n-                (operands[idx].1, \"named argument never used\")\n+    let mut unused_operands = vec![];\n+    let mut help_str = String::new();\n+    for (idx, used) in used.into_iter().enumerate() {\n+        if !used {\n+            let msg = if let Some(sym) = named_pos.get(&idx) {\n+                help_str.push_str(&format!(\" {{{}}}\", sym));\n+                \"named argument never used\"\n             } else {\n-                // positional argument\n-                (operands[idx].1, \"argument never used\")\n-            }\n-        })\n-        .collect();\n+                help_str.push_str(&format!(\" {{{}}}\", idx));\n+                \"argument never used\"\n+            };\n+            unused_operands.push((args.operands[idx].1, msg));\n+        }\n+    }\n     match unused_operands.len() {\n         0 => {}\n         1 => {\n             let (sp, msg) = unused_operands.into_iter().next().unwrap();\n             let mut err = ecx.struct_span_err(sp, msg);\n             err.span_label(sp, msg);\n+            err.help(&format!(\n+                \"if this argument is intentionally unused, \\\n+                 consider using it in an asm comment: `\\\"/*{} */\\\"`\",\n+                help_str\n+            ));\n             err.emit();\n         }\n         _ => {\n@@ -511,6 +516,11 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, sp: Span, args: AsmArgs) -> P<ast\n             for (sp, msg) in unused_operands {\n                 err.span_label(sp, msg);\n             }\n+            err.help(&format!(\n+                \"if these arguments are intentionally unused, \\\n+                 consider using them in an asm comment: `\\\"/*{} */\\\"`\",\n+                help_str\n+            ));\n             err.emit();\n         }\n     }\n@@ -521,7 +531,8 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, sp: Span, args: AsmArgs) -> P<ast\n         parser.line_spans.iter().map(|span| template_span.from_inner(*span)).collect()\n     };\n \n-    let inline_asm = ast::InlineAsm { template, operands, options: args.options, line_spans };\n+    let inline_asm =\n+        ast::InlineAsm { template, operands: args.operands, options: args.options, line_spans };\n     P(ast::Expr {\n         id: ast::DUMMY_NODE_ID,\n         kind: ast::ExprKind::InlineAsm(P(inline_asm)),"}, {"sha": "21ce8c6236d062afbf5cf42c0a12f16c704b4355", "filename": "src/test/ui/asm/bad-template.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddacc671901359ef1cd95722af0ff23a7ca6e212/src%2Ftest%2Fui%2Fasm%2Fbad-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddacc671901359ef1cd95722af0ff23a7ca6e212/src%2Ftest%2Fui%2Fasm%2Fbad-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.rs?ref=ddacc671901359ef1cd95722af0ff23a7ca6e212", "patch": "@@ -22,5 +22,7 @@ fn main() {\n         //~^ ERROR invalid reference to argument at index 0\n         asm!(\"{:foo}\", in(reg) foo);\n         //~^ ERROR asm template modifier must be a single character\n+        asm!(\"\", in(reg) 0, in(reg) 1);\n+        //~^ ERROR multiple unused asm arguments\n     }\n }"}, {"sha": "1aea7467ed0a761d0abde005ee059de567d5ae2d", "filename": "src/test/ui/asm/bad-template.stderr", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ddacc671901359ef1cd95722af0ff23a7ca6e212/src%2Ftest%2Fui%2Fasm%2Fbad-template.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddacc671901359ef1cd95722af0ff23a7ca6e212/src%2Ftest%2Fui%2Fasm%2Fbad-template.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.stderr?ref=ddacc671901359ef1cd95722af0ff23a7ca6e212", "patch": "@@ -19,6 +19,8 @@ error: argument never used\n    |\n LL |         asm!(\"{1}\", in(reg) foo);\n    |                     ^^^^^^^^^^^ argument never used\n+   |\n+   = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {0} */\"`\n \n error: there is no argument named `a`\n   --> $DIR/bad-template.rs:13:15\n@@ -46,6 +48,8 @@ error: named argument never used\n    |\n LL |         asm!(\"{}\", a = in(reg) foo);\n    |                    ^^^^^^^^^^^^^^^ named argument never used\n+   |\n+   = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {a} */\"`\n \n error: invalid reference to argument at index 1\n   --> $DIR/bad-template.rs:18:15\n@@ -60,6 +64,8 @@ error: named argument never used\n    |\n LL |         asm!(\"{1}\", a = in(reg) foo);\n    |                     ^^^^^^^^^^^^^^^ named argument never used\n+   |\n+   = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {a} */\"`\n \n error: invalid reference to argument at index 0\n   --> $DIR/bad-template.rs:21:15\n@@ -82,5 +88,15 @@ error: asm template modifier must be a single character\n LL |         asm!(\"{:foo}\", in(reg) foo);\n    |                 ^^^\n \n-error: aborting due to 10 previous errors\n+error: multiple unused asm arguments\n+  --> $DIR/bad-template.rs:25:18\n+   |\n+LL |         asm!(\"\", in(reg) 0, in(reg) 1);\n+   |                  ^^^^^^^^^  ^^^^^^^^^ argument never used\n+   |                  |\n+   |                  argument never used\n+   |\n+   = help: if these arguments are intentionally unused, consider using them in an asm comment: `\"/* {0} {1} */\"`\n+\n+error: aborting due to 11 previous errors\n "}, {"sha": "583a10570360bf6d0af09b7e21e202db94a549b1", "filename": "src/test/ui/asm/parse-error.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddacc671901359ef1cd95722af0ff23a7ca6e212/src%2Ftest%2Fui%2Fasm%2Fparse-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddacc671901359ef1cd95722af0ff23a7ca6e212/src%2Ftest%2Fui%2Fasm%2Fparse-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fparse-error.stderr?ref=ddacc671901359ef1cd95722af0ff23a7ca6e212", "patch": "@@ -127,6 +127,8 @@ error: argument never used\n    |\n LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                                    ^^^^^^^^^^^^^ argument never used\n+   |\n+   = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {1} */\"`\n \n error: explicit register arguments cannot have names\n   --> $DIR/parse-error.rs:47:18"}]}