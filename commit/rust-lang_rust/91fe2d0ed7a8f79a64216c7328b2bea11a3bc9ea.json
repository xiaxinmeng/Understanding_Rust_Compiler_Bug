{"sha": "91fe2d0ed7a8f79a64216c7328b2bea11a3bc9ea", "node_id": "C_kwDOAAsO6NoAKDkxZmUyZDBlZDdhOGY3OWE2NDIxNmM3MzI4YjJiZWExMWEzYmM5ZWE", "commit": {"author": {"name": "Roc Yu", "email": "rocyu@protonmail.com", "date": "2021-12-22T20:37:49Z"}, "committer": {"name": "Roc Yu", "email": "rocyu@protonmail.com", "date": "2021-12-23T22:58:59Z"}, "message": "Clean up NestedAttributesExt trait/implementation", "tree": {"sha": "28f7d2458b5ffe3503c92034a2c0492381db357f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28f7d2458b5ffe3503c92034a2c0492381db357f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91fe2d0ed7a8f79a64216c7328b2bea11a3bc9ea", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyzuvo1e1RYSrfuC8UGjOUUp50n8FAmHE/zMACgkQUGjOUUp5\n0n8YrQ/9EIkMtu+Oo6qQfQxI56eBw69yYoflLSvpc/kjhHMGvoxt4E2DCerKClzV\nhUkvZiefYaRwJmB3rA0ySkAC/ickpdSQ30IP52uHpIY8jjXvZ3HxChtS0zhxrulg\nciPnaK+cEZlPrzbbNynnQEqU8w10dye22daSVY6Q60yd2HQkZF0UTMA4cI8joZG+\n6+7qMGAi/kLngpKlfWHv05YyQBmtL3ibfWLxYFPBLvZh3fAy9UN3J2oMc6//za3S\ngOueMG3c5MXfW9Uxet4LNEUgsNPSb35WzSKPSyqcC5kLdTs8Z814WSTG9phTfitZ\nZaocRS2rdBBw38qp/agPPl1Yr/IVTaAaLxy285Ji0qz7Fc85LGeomsA4VN/A1PGf\ndnRbeSx8JJofRn01fKipTJvpcw990cw7ynkTp4Eb1I19v0bU/baphOAIGIhnTx3a\nqQK0LVz/ZqRa/Gh+WMAWq4WyjEMoQ07+X+XupeQjS5JeH9hIQ7RQ/8crYjIXdluw\nXH8B+u9VPe7eIkj6fsEIIYjJsdG+S/kSjOdyFAr802t9pK3EFpyRJPFhbGwNbhu8\nMwf4JT2l/HrPMqwCz7VBq8G+cyUgn1yHd9I67zzhdvyfRHdcWoAk3ny0yuNyq92o\naknAIbC8E8zKq4Oh6IVTnwQ/9O2bvlKrKsSJZ7wkgRYp8ZBHRJo=\n=JPfx\n-----END PGP SIGNATURE-----", "payload": "tree 28f7d2458b5ffe3503c92034a2c0492381db357f\nparent c09a9529c51cde41c1101e56049d418edb07bf71\nauthor Roc Yu <rocyu@protonmail.com> 1640205469 -0500\ncommitter Roc Yu <rocyu@protonmail.com> 1640300339 -0500\n\nClean up NestedAttributesExt trait/implementation\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91fe2d0ed7a8f79a64216c7328b2bea11a3bc9ea", "html_url": "https://github.com/rust-lang/rust/commit/91fe2d0ed7a8f79a64216c7328b2bea11a3bc9ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91fe2d0ed7a8f79a64216c7328b2bea11a3bc9ea/comments", "author": {"login": "vacuus", "id": 61440569, "node_id": "MDQ6VXNlcjYxNDQwNTY5", "avatar_url": "https://avatars.githubusercontent.com/u/61440569?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vacuus", "html_url": "https://github.com/vacuus", "followers_url": "https://api.github.com/users/vacuus/followers", "following_url": "https://api.github.com/users/vacuus/following{/other_user}", "gists_url": "https://api.github.com/users/vacuus/gists{/gist_id}", "starred_url": "https://api.github.com/users/vacuus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vacuus/subscriptions", "organizations_url": "https://api.github.com/users/vacuus/orgs", "repos_url": "https://api.github.com/users/vacuus/repos", "events_url": "https://api.github.com/users/vacuus/events{/privacy}", "received_events_url": "https://api.github.com/users/vacuus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vacuus", "id": 61440569, "node_id": "MDQ6VXNlcjYxNDQwNTY5", "avatar_url": "https://avatars.githubusercontent.com/u/61440569?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vacuus", "html_url": "https://github.com/vacuus", "followers_url": "https://api.github.com/users/vacuus/followers", "following_url": "https://api.github.com/users/vacuus/following{/other_user}", "gists_url": "https://api.github.com/users/vacuus/gists{/gist_id}", "starred_url": "https://api.github.com/users/vacuus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vacuus/subscriptions", "organizations_url": "https://api.github.com/users/vacuus/orgs", "repos_url": "https://api.github.com/users/vacuus/repos", "events_url": "https://api.github.com/users/vacuus/events{/privacy}", "received_events_url": "https://api.github.com/users/vacuus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c09a9529c51cde41c1101e56049d418edb07bf71", "url": "https://api.github.com/repos/rust-lang/rust/commits/c09a9529c51cde41c1101e56049d418edb07bf71", "html_url": "https://github.com/rust-lang/rust/commit/c09a9529c51cde41c1101e56049d418edb07bf71"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "fc26b82c974f81ac7494bb2ad1e52275bc416800", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/91fe2d0ed7a8f79a64216c7328b2bea11a3bc9ea/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fe2d0ed7a8f79a64216c7328b2bea11a3bc9ea/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=91fe2d0ed7a8f79a64216c7328b2bea11a3bc9ea", "patch": "@@ -879,20 +879,25 @@ impl AttributesExt for [ast::Attribute] {\n }\n \n crate trait NestedAttributesExt {\n-    /// Returns `true` if the attribute list contains a specific `Word`\n-    fn has_word(self, word: Symbol) -> bool;\n+    /// Returns `true` if the attribute list contains a specific `word`\n+    fn has_word(self, word: Symbol) -> bool\n+    where\n+        Self: std::marker::Sized,\n+    {\n+        <Self as NestedAttributesExt>::get_word_attr(self, word).is_some()\n+    }\n+\n+    /// Returns `Some(attr)` if the attribute list contains 'attr'\n+    /// corresponding to a specific `word`\n     fn get_word_attr(self, word: Symbol) -> Option<ast::NestedMetaItem>;\n }\n \n-impl<I: Iterator<Item = ast::NestedMetaItem> + IntoIterator<Item = ast::NestedMetaItem>>\n-    NestedAttributesExt for I\n+impl<I> NestedAttributesExt for I\n+where\n+    I: IntoIterator<Item = ast::NestedMetaItem>,\n {\n-    fn has_word(self, word: Symbol) -> bool {\n-        self.into_iter().any(|attr| attr.is_word() && attr.has_name(word))\n-    }\n-\n-    fn get_word_attr(mut self, word: Symbol) -> Option<ast::NestedMetaItem> {\n-        self.find(|attr| attr.is_word() && attr.has_name(word))\n+    fn get_word_attr(self, word: Symbol) -> Option<ast::NestedMetaItem> {\n+        self.into_iter().find(|attr| attr.is_word() && attr.has_name(word))\n     }\n }\n "}]}