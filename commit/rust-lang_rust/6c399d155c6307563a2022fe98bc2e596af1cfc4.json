{"sha": "6c399d155c6307563a2022fe98bc2e596af1cfc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMzk5ZDE1NWM2MzA3NTYzYTIwMjJmZTk4YmMyZTU5NmFmMWNmYzQ=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-01-21T18:42:06Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-01-21T21:42:54Z"}, "message": "Add error for trailing angle brackets.\n\nThis commit adds a error (and accompanying machine applicable\nsuggestion) for trailing angle brackets on function calls with a\nturbofish.", "tree": {"sha": "541b3c4aff5a5414d4bdd32404f205c0ce81987b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/541b3c4aff5a5414d4bdd32404f205c0ce81987b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c399d155c6307563a2022fe98bc2e596af1cfc4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlxGPN4ACgkQAXYLT59T\n8VTjTA//VRkcPoC6mmwm6EgDcYpUyUIS3Qv1/ZMtYzdbc4Ur/KauNhsLpsk/Q4DG\nJs6Y9gimtMWeFRMbOWkDq7ExP22uvoc7pIFdD5zHG3jHam2jpVxNIEj77E60FQyk\nzyBLU57PvNHXIMYKyKasunLH29AcX56fcc9kMbc6eL8CK6cRP2bt8USyDLr2W+M0\nZVdTssPqUKEQzZ0RdXV3ph2OATG5YXDPRpdaN82su4TndmhJBkqPwhtBI+WrT4mG\n/1fcF/1lqIoESYYtJUdY35hsLoKcjEO8HP8svMAKVZsDTVPx5hUtzVz/XtBxHtWG\ncj38IdDUiq0M5Q1uuUIOP+3LW9qT0X1NhTGvyzxjCKxX8T4f+nhQP39DYDKXmPcS\nWgmJdJ5J0LKmHJJ6xs63N6remkPqTJuKI/72nUxxOcM66H59V0C2RrevZd3UgWUG\nrZlgwiwsz7q5HPUqYe3NOvcK6D4aWBmIfPnZuGJw2UVE/QyJDjouWYh1I5TibxFQ\nQh/6/XjrnBlv/U0mkbgU0rVvFX3dcUEVpRCbwEpsTmV/eJrsD0hWzs64oaVYipaY\n2s5DK4OPzSiFcqk0Mp+iG7znY+9hegFKGNgpGAoaKGZChT8HAl15dQxdSAIRBYxg\nCqaTuI3ohP8yJgdN9zQwOCWwRJo2ukiTdxE9CfOpVeIIKDYd2UM=\n=LcUk\n-----END PGP SIGNATURE-----", "payload": "tree 541b3c4aff5a5414d4bdd32404f205c0ce81987b\nparent 33b0b7148fa4eacf43c204b2505867a4cd8e4735\nauthor David Wood <david@davidtw.co> 1548096126 +0100\ncommitter David Wood <david@davidtw.co> 1548106974 +0100\n\nAdd error for trailing angle brackets.\n\nThis commit adds a error (and accompanying machine applicable\nsuggestion) for trailing angle brackets on function calls with a\nturbofish.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c399d155c6307563a2022fe98bc2e596af1cfc4", "html_url": "https://github.com/rust-lang/rust/commit/6c399d155c6307563a2022fe98bc2e596af1cfc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c399d155c6307563a2022fe98bc2e596af1cfc4/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33b0b7148fa4eacf43c204b2505867a4cd8e4735", "url": "https://api.github.com/repos/rust-lang/rust/commits/33b0b7148fa4eacf43c204b2505867a4cd8e4735", "html_url": "https://github.com/rust-lang/rust/commit/33b0b7148fa4eacf43c204b2505867a4cd8e4735"}], "stats": {"total": 197, "additions": 197, "deletions": 0}, "files": [{"sha": "e520ac3bdd499f0162e5b54cd0d3671cc1ed3f92", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6c399d155c6307563a2022fe98bc2e596af1cfc4/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c399d155c6307563a2022fe98bc2e596af1cfc4/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=6c399d155c6307563a2022fe98bc2e596af1cfc4", "patch": "@@ -140,6 +140,20 @@ pub enum GenericArgs {\n }\n \n impl GenericArgs {\n+    pub fn is_parenthesized(&self) -> bool {\n+        match *self {\n+            Parenthesized(..) => true,\n+            _ => false,\n+        }\n+    }\n+\n+    pub fn is_angle_bracketed(&self) -> bool {\n+        match *self {\n+            AngleBracketed(..) => true,\n+            _ => false,\n+        }\n+    }\n+\n     pub fn span(&self) -> Span {\n         match *self {\n             AngleBracketed(ref data) => data.span,"}, {"sha": "d7c209d12a8fc1735e971ab2d81887c33f3d404d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/6c399d155c6307563a2022fe98bc2e596af1cfc4/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c399d155c6307563a2022fe98bc2e596af1cfc4/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=6c399d155c6307563a2022fe98bc2e596af1cfc4", "patch": "@@ -2757,6 +2757,8 @@ impl<'a> Parser<'a> {\n     // Assuming we have just parsed `.`, continue parsing into an expression.\n     fn parse_dot_suffix(&mut self, self_arg: P<Expr>, lo: Span) -> PResult<'a, P<Expr>> {\n         let segment = self.parse_path_segment(PathStyle::Expr, true)?;\n+        self.check_trailing_angle_brackets(&segment);\n+\n         Ok(match self.token {\n             token::OpenDelim(token::Paren) => {\n                 // Method call `expr.f()`\n@@ -2784,6 +2786,101 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n+    /// This function checks if there are trailing angle brackets and produces\n+    /// a diagnostic to suggest removing them.\n+    ///\n+    /// ```ignore (diagnostic)\n+    /// let _ = vec![1, 2, 3].into_iter().collect::<Vec<usize>>>>();\n+    ///                                                        ^^ help: remove extra angle brackets\n+    /// ```\n+    fn check_trailing_angle_brackets(&mut self, segment: &PathSegment) {\n+        // This function is intended to be invoked from `parse_dot_suffix` where there are two\n+        // cases:\n+        //\n+        // - A field access (eg. `x.foo`)\n+        // - A method call (eg. `x.foo()`)\n+        //\n+        // This function is called after parsing `.foo` and before parsing any parenthesis (if\n+        // present). This includes any angle bracket arguments, such as `.foo::<u32>`.\n+\n+        // We only care about trailing angle brackets if we previously parsed angle bracket\n+        // arguments. This helps stop us incorrectly suggesting that extra angle brackets be\n+        // removed in this case:\n+        //\n+        // `x.foo >> (3)` (where `x.foo` is a `u32` for example)\n+        //\n+        // This case is particularly tricky as we won't notice it just looking at the tokens -\n+        // it will appear the same (in terms of upcoming tokens) as below (since the `::<u32>` will\n+        // have already been parsed):\n+        //\n+        // `x.foo::<u32>>>(3)`\n+        let parsed_angle_bracket_args = segment.args\n+            .as_ref()\n+            .map(|args| args.is_angle_bracketed())\n+            .unwrap_or(false);\n+\n+        debug!(\n+            \"check_trailing_angle_brackets: parsed_angle_bracket_args={:?}\",\n+            parsed_angle_bracket_args,\n+        );\n+        if !parsed_angle_bracket_args {\n+            return;\n+        }\n+\n+        // Keep the span at the start so we can highlight the sequence of `>` characters to be\n+        // removed.\n+        let lo = self.span;\n+\n+        // We need to look-ahead to see if we have `>` characters without moving the cursor forward\n+        // (since we might have the field access case and the characters we're eating are\n+        // actual operators and not trailing characters - ie `x.foo >> 3`).\n+        let mut position = 0;\n+\n+        // The first tokens we will encounter are shift right tokens (`>>`) since pairs of `>`\n+        // characters will have been grouped together by the tokenizer.\n+        let mut number_of_shr = 0;\n+        while self.look_ahead(position, |t| *t == token::BinOp(token::BinOpToken::Shr)) {\n+            number_of_shr += 1;\n+            position += 1;\n+        }\n+\n+        // Afterwards, there will be at most one `>` character remaining (more than one and it'd\n+        // have shown up as a `>>`).\n+        let encountered_gt = self.look_ahead(position, |t| *t == token::Gt);\n+        if encountered_gt {\n+            position += 1;\n+        }\n+\n+        // If we didn't find any trailing `>>` characters or a trailing `>`, then we have\n+        // nothing to error about.\n+        debug!(\n+            \"check_trailing_angle_brackets: encountered_gt={:?} number_of_shr={:?}\",\n+            encountered_gt, number_of_shr,\n+        );\n+        if !encountered_gt && number_of_shr < 1 {\n+            return;\n+        }\n+\n+        // Finally, double check that we have a left parenthesis next as otherwise this is the\n+        // field case.\n+        if self.look_ahead(position, |t| *t == token::OpenDelim(token::Paren)) {\n+            // Eat from where we started until the left parenthesis so that parsing can continue\n+            // as if we didn't have those extra angle brackets.\n+            self.eat_to_tokens(&[&token::OpenDelim(token::Paren)]);\n+            let span = lo.until(self.span);\n+\n+            self.diagnostic()\n+                .struct_span_err(span, \"unmatched angle bracket\")\n+                .span_suggestion_with_applicability(\n+                    span,\n+                    \"remove extra angle bracket\",\n+                    String::new(),\n+                    Applicability::MachineApplicable,\n+                )\n+                .emit();\n+        }\n+    }\n+\n     fn parse_dot_or_call_expr_with_(&mut self, e0: P<Expr>, lo: Span) -> PResult<'a, P<Expr>> {\n         let mut e = e0;\n         let mut hi;"}, {"sha": "d6a14a6e11f674de9723f7e40f37632ee84da761", "filename": "src/test/ui/issues/issue-54521-1.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6c399d155c6307563a2022fe98bc2e596af1cfc4/src%2Ftest%2Fui%2Fissues%2Fissue-54521-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c399d155c6307563a2022fe98bc2e596af1cfc4/src%2Ftest%2Fui%2Fissues%2Fissue-54521-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54521-1.rs?ref=6c399d155c6307563a2022fe98bc2e596af1cfc4", "patch": "@@ -0,0 +1,16 @@\n+// compile-pass\n+\n+// This test checks that the `remove extra angle brackets` error doesn't happen for some\n+// potential edge-cases..\n+\n+struct X {\n+    len: u32,\n+}\n+\n+fn main() {\n+    let x = X { len: 3 };\n+\n+    let _ = x.len > (3);\n+\n+    let _ = x.len >> (3);\n+}"}, {"sha": "84ab6866cf133e61f086e0184068d33cf7e53b44", "filename": "src/test/ui/issues/issue-54521.fixed", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6c399d155c6307563a2022fe98bc2e596af1cfc4/src%2Ftest%2Fui%2Fissues%2Fissue-54521.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6c399d155c6307563a2022fe98bc2e596af1cfc4/src%2Ftest%2Fui%2Fissues%2Fissue-54521.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54521.fixed?ref=6c399d155c6307563a2022fe98bc2e596af1cfc4", "patch": "@@ -0,0 +1,22 @@\n+// run-rustfix\n+\n+// This test checks that the following error is emitted and the suggestion works:\n+//\n+// ```\n+// let _ = vec![1, 2, 3].into_iter().collect::<Vec<usize>>>>();\n+//                                                        ^^ help: remove extra angle brackets\n+// ```\n+\n+fn main() {\n+    let _ = vec![1, 2, 3].into_iter().collect::<Vec<usize>>();\n+    //~^ ERROR unmatched angle bracket\n+\n+    let _ = vec![1, 2, 3].into_iter().collect::<Vec<usize>>();\n+    //~^ ERROR unmatched angle bracket\n+\n+    let _ = vec![1, 2, 3].into_iter().collect::<Vec<usize>>();\n+    //~^ ERROR unmatched angle bracket\n+\n+    let _ = vec![1, 2, 3].into_iter().collect::<Vec<usize>>();\n+    //~^ ERROR unmatched angle bracket\n+}"}, {"sha": "f1d68504178804baba3f333a4b102c1c9d3f83a2", "filename": "src/test/ui/issues/issue-54521.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6c399d155c6307563a2022fe98bc2e596af1cfc4/src%2Ftest%2Fui%2Fissues%2Fissue-54521.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c399d155c6307563a2022fe98bc2e596af1cfc4/src%2Ftest%2Fui%2Fissues%2Fissue-54521.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54521.rs?ref=6c399d155c6307563a2022fe98bc2e596af1cfc4", "patch": "@@ -0,0 +1,22 @@\n+// run-rustfix\n+\n+// This test checks that the following error is emitted and the suggestion works:\n+//\n+// ```\n+// let _ = vec![1, 2, 3].into_iter().collect::<Vec<usize>>>>();\n+//                                                        ^^ help: remove extra angle brackets\n+// ```\n+\n+fn main() {\n+    let _ = vec![1, 2, 3].into_iter().collect::<Vec<usize>>>>>>();\n+    //~^ ERROR unmatched angle bracket\n+\n+    let _ = vec![1, 2, 3].into_iter().collect::<Vec<usize>>>>>();\n+    //~^ ERROR unmatched angle bracket\n+\n+    let _ = vec![1, 2, 3].into_iter().collect::<Vec<usize>>>>();\n+    //~^ ERROR unmatched angle bracket\n+\n+    let _ = vec![1, 2, 3].into_iter().collect::<Vec<usize>>>();\n+    //~^ ERROR unmatched angle bracket\n+}"}, {"sha": "a67e9ca8daf4059cf3099aa6f30e72d426d53edf", "filename": "src/test/ui/issues/issue-54521.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6c399d155c6307563a2022fe98bc2e596af1cfc4/src%2Ftest%2Fui%2Fissues%2Fissue-54521.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c399d155c6307563a2022fe98bc2e596af1cfc4/src%2Ftest%2Fui%2Fissues%2Fissue-54521.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54521.stderr?ref=6c399d155c6307563a2022fe98bc2e596af1cfc4", "patch": "@@ -0,0 +1,26 @@\n+error: unmatched angle bracket\n+  --> $DIR/issue-54521.rs:11:60\n+   |\n+LL |     let _ = vec![1, 2, 3].into_iter().collect::<Vec<usize>>>>>>();\n+   |                                                            ^^^^ help: remove extra angle bracket\n+\n+error: unmatched angle bracket\n+  --> $DIR/issue-54521.rs:14:60\n+   |\n+LL |     let _ = vec![1, 2, 3].into_iter().collect::<Vec<usize>>>>>();\n+   |                                                            ^^^ help: remove extra angle bracket\n+\n+error: unmatched angle bracket\n+  --> $DIR/issue-54521.rs:17:60\n+   |\n+LL |     let _ = vec![1, 2, 3].into_iter().collect::<Vec<usize>>>>();\n+   |                                                            ^^ help: remove extra angle bracket\n+\n+error: unmatched angle bracket\n+  --> $DIR/issue-54521.rs:20:60\n+   |\n+LL |     let _ = vec![1, 2, 3].into_iter().collect::<Vec<usize>>>();\n+   |                                                            ^ help: remove extra angle bracket\n+\n+error: aborting due to 4 previous errors\n+"}]}