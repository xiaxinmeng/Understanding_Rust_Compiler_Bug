{"sha": "cb48435ff372d6b7970b16b53a1e5a6d446fe7b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNDg0MzVmZjM3MmQ2Yjc5NzBiMTZiNTNhMWU1YTZkNDQ2ZmU3YjU=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-07-05T09:31:37Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-07-05T09:31:37Z"}, "message": "Format source codes", "tree": {"sha": "5160d18a581af0375e018979a8bf10c4bc821388", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5160d18a581af0375e018979a8bf10c4bc821388"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb48435ff372d6b7970b16b53a1e5a6d446fe7b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb48435ff372d6b7970b16b53a1e5a6d446fe7b5", "html_url": "https://github.com/rust-lang/rust/commit/cb48435ff372d6b7970b16b53a1e5a6d446fe7b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb48435ff372d6b7970b16b53a1e5a6d446fe7b5/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0237347abcdcb8a173fe144d91673952530c785c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0237347abcdcb8a173fe144d91673952530c785c", "html_url": "https://github.com/rust-lang/rust/commit/0237347abcdcb8a173fe144d91673952530c785c"}], "stats": {"total": 87, "additions": 47, "deletions": 40}, "files": [{"sha": "e4ad0d82fd485b84edd9a8aa69a863dfbf4ee61c", "filename": "src/chains.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb48435ff372d6b7970b16b53a1e5a6d446fe7b5/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb48435ff372d6b7970b16b53a1e5a6d446fe7b5/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=cb48435ff372d6b7970b16b53a1e5a6d446fe7b5", "patch": "@@ -186,8 +186,8 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n     let almost_total = rewrites[..last_non_try_index]\n         .iter()\n         .fold(0, |a, b| a + first_line_width(b)) + parent_rewrite.len();\n-    let one_line_len = rewrites.iter().fold(0, |a, r| a + first_line_width(r)) +\n-        parent_rewrite.len();\n+    let one_line_len =\n+        rewrites.iter().fold(0, |a, r| a + first_line_width(r)) + parent_rewrite.len();\n \n     let one_line_budget = min(shape.width, context.config.chain_one_line_max());\n     let veto_single_line = if one_line_len > one_line_budget {"}, {"sha": "1647cf5e357138621b26488c046cb032cbaa4732", "filename": "src/expr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cb48435ff372d6b7970b16b53a1e5a6d446fe7b5/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb48435ff372d6b7970b16b53a1e5a6d446fe7b5/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=cb48435ff372d6b7970b16b53a1e5a6d446fe7b5", "patch": "@@ -954,8 +954,8 @@ fn rewrite_cond(context: &RewriteContext, expr: &ast::Expr, shape: Shape) -> Opt\n         }\n         _ => {\n             to_control_flow(expr, ExprType::SubExpression).and_then(|control_flow| {\n-                let alt_block_sep = String::from(\"\\n\") +\n-                    &shape.indent.block_only().to_string(context.config);\n+                let alt_block_sep =\n+                    String::from(\"\\n\") + &shape.indent.block_only().to_string(context.config);\n                 control_flow\n                     .rewrite_cond(context, shape, &alt_block_sep)\n                     .and_then(|rw| Some(rw.0))\n@@ -1299,8 +1299,8 @@ impl<'a> Rewrite for ControlFlow<'a> {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n         debug!(\"ControlFlow::rewrite {:?} {:?}\", self, shape);\n \n-        let alt_block_sep = String::from(\"\\n\") +\n-            &shape.indent.block_only().to_string(context.config);\n+        let alt_block_sep =\n+            String::from(\"\\n\") + &shape.indent.block_only().to_string(context.config);\n         let (cond_str, used_width) = try_opt!(self.rewrite_cond(context, shape, &alt_block_sep));\n         // If `used_width` is 0, it indicates that whole control flow is written in a single line.\n         if used_width == 0 {\n@@ -1723,8 +1723,8 @@ impl Rewrite for ast::Arm {\n         extend &= context.use_block_indent();\n \n         let comma = arm_comma(&context.config, body);\n-        let alt_block_sep = String::from(\"\\n\") +\n-            &shape.indent.block_only().to_string(context.config);\n+        let alt_block_sep =\n+            String::from(\"\\n\") + &shape.indent.block_only().to_string(context.config);\n \n         let pat_width = extra_offset(&pats_str, shape);\n         // Let's try and get the arm body on the same line as the condition."}, {"sha": "42526fc9b13514d995963b9dee0fa3f8b80d9e0e", "filename": "src/items.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb48435ff372d6b7970b16b53a1e5a6d446fe7b5/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb48435ff372d6b7970b16b53a1e5a6d446fe7b5/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=cb48435ff372d6b7970b16b53a1e5a6d446fe7b5", "patch": "@@ -1952,8 +1952,8 @@ fn rewrite_fn_base(\n         generics_str.contains('\\n'),\n     ));\n \n-    let multi_line_arg_str = arg_str.contains('\\n') ||\n-        arg_str.chars().last().map_or(false, |c| c == ',');\n+    let multi_line_arg_str =\n+        arg_str.contains('\\n') || arg_str.chars().last().map_or(false, |c| c == ',');\n \n     let put_args_in_block = match context.config.fn_args_layout() {\n         IndentStyle::Block => multi_line_arg_str || generics_str.contains('\\n'),\n@@ -2339,8 +2339,8 @@ fn compute_budgets_for_args(\n \n         if one_line_budget > 0 {\n             // 4 = \"() {\".len()\n-            let multi_line_overhead = indent.width() + result.len() +\n-                if newline_brace { 2 } else { 4 };\n+            let multi_line_overhead =\n+                indent.width() + result.len() + if newline_brace { 2 } else { 4 };\n             let multi_line_budget =\n                 try_opt!(context.config.max_width().checked_sub(multi_line_overhead));\n "}, {"sha": "63e9e360ade35ac611aa25ddf7776d4e8af8c55d", "filename": "src/lists.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb48435ff372d6b7970b16b53a1e5a6d446fe7b5/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb48435ff372d6b7970b16b53a1e5a6d446fe7b5/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=cb48435ff372d6b7970b16b53a1e5a6d446fe7b5", "patch": "@@ -353,8 +353,8 @@ where\n                 .span_to_snippet(mk_sp(self.prev_span_end, (self.get_lo)(&item)))\n                 .unwrap();\n             let trimmed_pre_snippet = pre_snippet.trim();\n-            let has_pre_comment = trimmed_pre_snippet.contains(\"//\") ||\n-                trimmed_pre_snippet.contains(\"/*\");\n+            let has_pre_comment =\n+                trimmed_pre_snippet.contains(\"//\") || trimmed_pre_snippet.contains(\"/*\");\n             let pre_comment = if has_pre_comment {\n                 Some(trimmed_pre_snippet.to_owned())\n             } else {"}, {"sha": "c8275520ca1a32a0d7588f685019b5b03ee6553c", "filename": "src/modules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb48435ff372d6b7970b16b53a1e5a6d446fe7b5/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb48435ff372d6b7970b16b53a1e5a6d446fe7b5/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=cb48435ff372d6b7970b16b53a1e5a6d446fe7b5", "patch": "@@ -47,8 +47,8 @@ fn list_submodules<'a>(\n     for item in &module.items {\n         if let ast::ItemKind::Mod(ref sub_mod) = item.node {\n             if !utils::contains_skip(&item.attrs) {\n-                let is_internal = codemap.span_to_filename(item.span) ==\n-                    codemap.span_to_filename(sub_mod.inner);\n+                let is_internal =\n+                    codemap.span_to_filename(item.span) == codemap.span_to_filename(sub_mod.inner);\n                 let dir_path = if is_internal {\n                     search_dir.join(&item.ident.to_string())\n                 } else {"}, {"sha": "b51c56d120507dce9bc3870909c7a2ab4d7ae3b3", "filename": "tests/source/static.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb48435ff372d6b7970b16b53a1e5a6d446fe7b5/tests%2Fsource%2Fstatic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb48435ff372d6b7970b16b53a1e5a6d446fe7b5/tests%2Fsource%2Fstatic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstatic.rs?ref=cb48435ff372d6b7970b16b53a1e5a6d446fe7b5", "patch": "@@ -16,3 +16,6 @@ pub const test: &Type = &val;\n impl Color {\n     pub const WHITE: u32 = 10;\n }\n+\n+// #1391\n+pub const XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX: NTSTATUS = 0 as usize;"}, {"sha": "b43bb0819213e5efb0a8ba65c90e9c069869f033", "filename": "tests/system.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cb48435ff372d6b7970b16b53a1e5a6d446fe7b5/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb48435ff372d6b7970b16b53a1e5a6d446fe7b5/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=cb48435ff372d6b7970b16b53a1e5a6d446fe7b5", "patch": "@@ -147,8 +147,8 @@ fn self_tests() {\n fn stdin_formatting_smoke_test() {\n     let input = Input::Text(\"fn main () {}\".to_owned());\n     let config = Config::default();\n-    let (error_summary, file_map, _report) = format_input::<io::Stdout>(input, &config, None)\n-        .unwrap();\n+    let (error_summary, file_map, _report) =\n+        format_input::<io::Stdout>(input, &config, None).unwrap();\n     assert!(error_summary.has_no_errors());\n     for &(ref file_name, ref text) in &file_map {\n         if file_name == \"stdin\" {\n@@ -164,8 +164,8 @@ fn format_lines_errors_are_reported() {\n     let long_identifier = String::from_utf8(vec![b'a'; 239]).unwrap();\n     let input = Input::Text(format!(\"fn {}() {{}}\", long_identifier));\n     let config = Config::default();\n-    let (error_summary, _file_map, _report) = format_input::<io::Stdout>(input, &config, None)\n-        .unwrap();\n+    let (error_summary, _file_map, _report) =\n+        format_input::<io::Stdout>(input, &config, None).unwrap();\n     assert!(error_summary.has_formatting_errors());\n }\n \n@@ -242,8 +242,8 @@ fn read_config(filename: &str) -> Config {\n \n fn format_file<P: Into<PathBuf>>(filename: P, config: &Config) -> (FileMap, FormatReport) {\n     let input = Input::File(filename.into());\n-    let (_error_summary, file_map, report) = format_input::<io::Stdout>(input, &config, None)\n-        .unwrap();\n+    let (_error_summary, file_map, report) =\n+        format_input::<io::Stdout>(input, &config, None).unwrap();\n     return (file_map, report);\n }\n "}, {"sha": "4d75239f357b272ee1e5539951d7e66dd00dc693", "filename": "tests/target/expr.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cb48435ff372d6b7970b16b53a1e5a6d446fe7b5/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb48435ff372d6b7970b16b53a1e5a6d446fe7b5/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=cb48435ff372d6b7970b16b53a1e5a6d446fe7b5", "patch": "@@ -7,11 +7,11 @@ fn foo() -> bool {\n     let referenced = &5;\n \n     let very_long_variable_name = (a + first + simple + test);\n-    let very_long_variable_name = (a + first + simple + test + AAAAAAAAAAAAA +\n-                                       BBBBBBBBBBBBBBBBB + b + c);\n+    let very_long_variable_name =\n+        (a + first + simple + test + AAAAAAAAAAAAA + BBBBBBBBBBBBBBBBB + b + c);\n \n-    let is_internalxxxx = self.codemap.span_to_filename(s) ==\n-        self.codemap.span_to_filename(m.inner);\n+    let is_internalxxxx =\n+        self.codemap.span_to_filename(s) == self.codemap.span_to_filename(m.inner);\n \n     let some_val = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa * bbbb /\n         (bbbbbb - function_call(x, *very_long_pointer, y)) + 1000;\n@@ -84,8 +84,8 @@ fn foo() -> bool {\n }\n \n fn bar() {\n-    let range = (111111111 + 333333333333333333 + 1111 + 400000000000000000)..\n-        (2222 + 2333333333333333);\n+    let range =\n+        (111111111 + 333333333333333333 + 1111 + 400000000000000000)..(2222 + 2333333333333333);\n \n     let another_range = 5..some_func(a, b /* comment */);\n \n@@ -274,8 +274,8 @@ fn casts() {\n     }\n \n     let some_trait_xxx = xxxxxxxxxxx + xxxxxxxxxxxxx as SomeTraitXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;\n-    let slightly_longer_trait = yyyyyyyyy +\n-        yyyyyyyyyyy as SomeTraitYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY;\n+    let slightly_longer_trait =\n+        yyyyyyyyy + yyyyyyyyyyy as SomeTraitYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY;\n }\n \n fn indices() {\n@@ -311,8 +311,8 @@ fn issue767() {\n \n fn ranges() {\n     let x = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa..bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb;\n-    let y = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa...\n-        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb;\n+    let y =\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa...bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb;\n     let z = ...x;\n \n     // #1766"}, {"sha": "349d2c2f639ba3d9dfed1e0fea17f635939924d8", "filename": "tests/target/long_field_access.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb48435ff372d6b7970b16b53a1e5a6d446fe7b5/tests%2Ftarget%2Flong_field_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb48435ff372d6b7970b16b53a1e5a6d446fe7b5/tests%2Ftarget%2Flong_field_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Flong_field_access.rs?ref=cb48435ff372d6b7970b16b53a1e5a6d446fe7b5", "patch": "@@ -1,4 +1,4 @@\n fn f() {\n-    block_flow.base.stacking_relative_position_of_display_port = self.base\n-        .stacking_relative_position_of_display_port;\n+    block_flow.base.stacking_relative_position_of_display_port =\n+        self.base.stacking_relative_position_of_display_port;\n }"}, {"sha": "30a549cc7321fd98a95e70d5f497eb2fea4ad314", "filename": "tests/target/static.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb48435ff372d6b7970b16b53a1e5a6d446fe7b5/tests%2Ftarget%2Fstatic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb48435ff372d6b7970b16b53a1e5a6d446fe7b5/tests%2Ftarget%2Fstatic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstatic.rs?ref=cb48435ff372d6b7970b16b53a1e5a6d446fe7b5", "patch": "@@ -1,5 +1,5 @@\n-const FILE_GENERIC_READ: DWORD = STANDARD_RIGHTS_READ | FILE_READ_DATA | FILE_READ_ATTRIBUTES |\n-    FILE_READ_EA | SYNCHRONIZE;\n+const FILE_GENERIC_READ: DWORD =\n+    STANDARD_RIGHTS_READ | FILE_READ_DATA | FILE_READ_ATTRIBUTES | FILE_READ_EA | SYNCHRONIZE;\n \n static boolnames: &'static [&'static str] = &[\n     \"bw\",\n@@ -58,3 +58,7 @@ pub const test: &Type = &val;\n impl Color {\n     pub const WHITE: u32 = 10;\n }\n+\n+// #1391\n+pub const XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX: NTSTATUS =\n+    0 as usize;"}, {"sha": "a2f082ba4b4975a71c5a4cd98d1b00596e003804", "filename": "tests/target/type-ascription.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb48435ff372d6b7970b16b53a1e5a6d446fe7b5/tests%2Ftarget%2Ftype-ascription.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb48435ff372d6b7970b16b53a1e5a6d446fe7b5/tests%2Ftarget%2Ftype-ascription.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftype-ascription.rs?ref=cb48435ff372d6b7970b16b53a1e5a6d446fe7b5", "patch": "@@ -1,9 +1,9 @@\n fn main() {\n-    let xxxxxxxxxxx = yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy:\n-        SomeTrait<AA, BB, CC>;\n+    let xxxxxxxxxxx =\n+        yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy: SomeTrait<AA, BB, CC>;\n \n-    let xxxxxxxxxxxxxxx = yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy:\n-        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;\n+    let xxxxxxxxxxxxxxx =\n+        yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;\n \n     let z = funk(yyyyyyyyyyyyyyy, zzzzzzzzzzzzzzzz, wwwwww):\n         AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;"}]}