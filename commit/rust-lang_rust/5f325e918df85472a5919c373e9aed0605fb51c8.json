{"sha": "5f325e918df85472a5919c373e9aed0605fb51c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMzI1ZTkxOGRmODU0NzJhNTkxOWMzNzNlOWFlZDA2MDVmYjUxYzg=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2017-02-20T22:25:33Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2017-02-22T02:12:55Z"}, "message": "fix some links", "tree": {"sha": "2be7453b45a4d502036a47947caf3925edeeec5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2be7453b45a4d502036a47947caf3925edeeec5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f325e918df85472a5919c373e9aed0605fb51c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f325e918df85472a5919c373e9aed0605fb51c8", "html_url": "https://github.com/rust-lang/rust/commit/5f325e918df85472a5919c373e9aed0605fb51c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f325e918df85472a5919c373e9aed0605fb51c8/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "html_url": "https://github.com/rust-lang/rust/commit/6fb2545f77b722a8cde5cb87b289cd8b87643a7a"}], "stats": {"total": 37, "additions": 10, "deletions": 27}, "files": [{"sha": "ade4d52c1eb318632af66c89c88fd8694513b0b1", "filename": "src/doc/book/src/README.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f325e918df85472a5919c373e9aed0605fb51c8/src%2Fdoc%2Fbook%2Fsrc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/5f325e918df85472a5919c373e9aed0605fb51c8/src%2Fdoc%2Fbook%2Fsrc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2FREADME.md?ref=5f325e918df85472a5919c373e9aed0605fb51c8", "patch": "@@ -21,15 +21,13 @@ is the first. After this:\n * [Tutorial: Guessing Game][gg] - Learn some Rust with a small project.\n * [Syntax and Semantics][ss] - Each bit of Rust, broken down into small chunks.\n * [Effective Rust][er] - Higher-level concepts for writing excellent Rust code.\n-* [Nightly Rust][nr] - Cutting-edge features that aren\u2019t in stable builds yet.\n * [Glossary][gl] - A reference of terms used in the book.\n * [Bibliography][bi] - Background on Rust's influences, papers about Rust.\n \n [gs]: getting-started.html\n [gg]: guessing-game.html\n [er]: effective-rust.html\n [ss]: syntax-and-semantics.html\n-[nr]: nightly-rust.html\n [gl]: glossary.html\n [bi]: bibliography.html\n "}, {"sha": "26cd718475eab896f06f97a57428b47568f8afc1", "filename": "src/doc/book/src/casting-between-types.md", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5f325e918df85472a5919c373e9aed0605fb51c8/src%2Fdoc%2Fbook%2Fsrc%2Fcasting-between-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/5f325e918df85472a5919c373e9aed0605fb51c8/src%2Fdoc%2Fbook%2Fsrc%2Fcasting-between-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fcasting-between-types.md?ref=5f325e918df85472a5919c373e9aed0605fb51c8", "patch": "@@ -151,12 +151,9 @@ elements of the array. These kinds of casts are very dangerous, because they\n make assumptions about the way that multiple underlying structures are\n implemented. For this, we need something more dangerous.\n \n-The `transmute` function is provided by a [compiler intrinsic][intrinsics], and\n-what it does is very simple, but very scary. It tells Rust to treat a value of\n-one type as though it were another type. It does this regardless of the\n-typechecking system, and completely trusts you.\n-\n-[intrinsics]: intrinsics.html\n+The `transmute` function is very simple, but very scary. It tells Rust to treat\n+a value of one type as though it were another type. It does this regardless of\n+the typechecking system, and completely trusts you.\n \n In our previous example, we know that an array of four `u8`s represents a `u32`\n properly, and so we want to do the cast. Using `transmute` instead of `as`,"}, {"sha": "0562e9fc430f68737a46c6d26ede8b9fbd01bd2f", "filename": "src/doc/book/src/conditional-compilation.md", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f325e918df85472a5919c373e9aed0605fb51c8/src%2Fdoc%2Fbook%2Fsrc%2Fconditional-compilation.md", "raw_url": "https://github.com/rust-lang/rust/raw/5f325e918df85472a5919c373e9aed0605fb51c8/src%2Fdoc%2Fbook%2Fsrc%2Fconditional-compilation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fconditional-compilation.md?ref=5f325e918df85472a5919c373e9aed0605fb51c8", "patch": "@@ -79,16 +79,13 @@ Will be the same as `#[b]` if `a` is set by `cfg` attribute, and nothing otherwi\n \n # cfg!\n \n-The `cfg!` [syntax extension][compilerplugins] lets you use these kinds of flags\n-elsewhere in your code, too:\n+The `cfg!` macro lets you use these kinds of flags elsewhere in your code, too:\n \n ```rust\n if cfg!(target_os = \"macos\") || cfg!(target_os = \"ios\") {\n     println!(\"Think Different!\");\n }\n ```\n \n-[compilerplugins]: compiler-plugins.html\n-\n These will be replaced by a `true` or `false` at compile-time, depending on the\n configuration settings."}, {"sha": "fa8e8975a5b01bf4c90507df3de6f7a0e597f6e4", "filename": "src/doc/book/src/macros.md", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5f325e918df85472a5919c373e9aed0605fb51c8/src%2Fdoc%2Fbook%2Fsrc%2Fmacros.md", "raw_url": "https://github.com/rust-lang/rust/raw/5f325e918df85472a5919c373e9aed0605fb51c8/src%2Fdoc%2Fbook%2Fsrc%2Fmacros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fmacros.md?ref=5f325e918df85472a5919c373e9aed0605fb51c8", "patch": "@@ -761,12 +761,3 @@ to typecheck, and don\u2019t want to worry about writing out the body of the\n function. One example of this situation is implementing a trait with multiple\n required methods, where you want to tackle one at a time. Define the others\n as `unimplemented!` until you\u2019re ready to write them.\n-\n-# Procedural macros\n-\n-If Rust\u2019s macro system can\u2019t do what you need, you may want to write a\n-[compiler plugin](compiler-plugins.html) instead. Compared to `macro_rules!`\n-macros, this is significantly more work, the interfaces are much less stable,\n-and bugs can be much harder to track down. In exchange you get the\n-flexibility of running arbitrary Rust code within the compiler. Syntax\n-extension plugins are sometimes called \u2018procedural macros\u2019 for this reason."}, {"sha": "9bf59fe2abdc37d22820d6331ba661755b009ec3", "filename": "src/doc/book/src/unsafe.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f325e918df85472a5919c373e9aed0605fb51c8/src%2Fdoc%2Fbook%2Fsrc%2Funsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/5f325e918df85472a5919c373e9aed0605fb51c8/src%2Fdoc%2Fbook%2Fsrc%2Funsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Funsafe.md?ref=5f325e918df85472a5919c373e9aed0605fb51c8", "patch": "@@ -139,4 +139,4 @@ I\u2019ll repeat again: even though you _can_ do arbitrary things in unsafe blocks\n and functions doesn\u2019t mean you should. The compiler will act as though you\u2019re\n upholding its invariants, so be careful!\n \n-[intrinsics]: intrinsics.html\n+[intrinsics]: ../unstable-book/intrinsics.html"}, {"sha": "709d10f4e47913dd63ad669e1a6e7484e5984d8e", "filename": "src/doc/book/src/using-rust-without-the-standard-library.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f325e918df85472a5919c373e9aed0605fb51c8/src%2Fdoc%2Fbook%2Fsrc%2Fusing-rust-without-the-standard-library.md", "raw_url": "https://github.com/rust-lang/rust/raw/5f325e918df85472a5919c373e9aed0605fb51c8/src%2Fdoc%2Fbook%2Fsrc%2Fusing-rust-without-the-standard-library.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fusing-rust-without-the-standard-library.md?ref=5f325e918df85472a5919c373e9aed0605fb51c8", "patch": "@@ -9,7 +9,7 @@ don\u2019t want to use the standard library via an attribute: `#![no_std]`.\n > Note: This feature is technically stable, but there are some caveats. For\n > one, you can build a `#![no_std]` _library_ on stable, but not a _binary_.\n > For details on binaries without the standard library, see [the nightly\n-> chapter on `#![no_std]`](no-stdlib.html)\n+> chapter on 'lang items'](../unstable-book/lang-items.html#using-libc)\n \n To use `#![no_std]`, add it to your crate root:\n "}, {"sha": "9bffa2ff99bf3d0db7fdcc0455d610fe9b187115", "filename": "src/doc/unstable-book/src/alloc-jemalloc.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f325e918df85472a5919c373e9aed0605fb51c8/src%2Fdoc%2Funstable-book%2Fsrc%2Falloc-jemalloc.md", "raw_url": "https://github.com/rust-lang/rust/raw/5f325e918df85472a5919c373e9aed0605fb51c8/src%2Fdoc%2Funstable-book%2Fsrc%2Falloc-jemalloc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Falloc-jemalloc.md?ref=5f325e918df85472a5919c373e9aed0605fb51c8", "patch": "@@ -4,7 +4,7 @@ The tracking issue for this feature is: [#33082]\n \n [#33082]: https://github.com/rust-lang/rust/issues/33082\n \n-See also [`alloc_system`](alloc-system.md).\n+See also [`alloc_system`](alloc-system.html).\n \n ------------------------\n "}, {"sha": "6fa89179d8e1150c54e4367b394ae3f60d1214f3", "filename": "src/doc/unstable-book/src/alloc-system.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f325e918df85472a5919c373e9aed0605fb51c8/src%2Fdoc%2Funstable-book%2Fsrc%2Falloc-system.md", "raw_url": "https://github.com/rust-lang/rust/raw/5f325e918df85472a5919c373e9aed0605fb51c8/src%2Fdoc%2Funstable-book%2Fsrc%2Falloc-system.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Falloc-system.md?ref=5f325e918df85472a5919c373e9aed0605fb51c8", "patch": "@@ -4,7 +4,7 @@ The tracking issue for this feature is: [#33082]\n \n [#33082]: https://github.com/rust-lang/rust/issues/33082\n \n-See also [`alloc_jemalloc`](alloc-jemalloc.md).\n+See also [`alloc_jemalloc`](alloc-jemalloc.html).\n \n ------------------------\n "}, {"sha": "313ef2ec91d6a8806072f1bcfb8314359ae00007", "filename": "src/doc/unstable-book/src/plugin.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f325e918df85472a5919c373e9aed0605fb51c8/src%2Fdoc%2Funstable-book%2Fsrc%2Fplugin.md", "raw_url": "https://github.com/rust-lang/rust/raw/5f325e918df85472a5919c373e9aed0605fb51c8/src%2Fdoc%2Funstable-book%2Fsrc%2Fplugin.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fplugin.md?ref=5f325e918df85472a5919c373e9aed0605fb51c8", "patch": "@@ -39,7 +39,7 @@ of a library.\n \n Plugins can extend Rust's syntax in various ways. One kind of syntax extension\n is the procedural macro. These are invoked the same way as [ordinary\n-macros](macros.html), but the expansion is performed by arbitrary Rust\n+macros](../book/macros.html), but the expansion is performed by arbitrary Rust\n code that manipulates syntax trees at\n compile time.\n \n@@ -137,7 +137,7 @@ enum.  For a more involved macro example, see\n \n ## Tips and tricks\n \n-Some of the [macro debugging tips](macros.html#Debugging%20macro%20code) are applicable.\n+Some of the [macro debugging tips](../book/macros.html#debugging-macro-code) are applicable.\n \n You can use `syntax::parse` to turn token trees into\n higher-level syntax elements like expressions:"}]}