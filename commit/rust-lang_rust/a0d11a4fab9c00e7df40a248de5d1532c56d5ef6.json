{"sha": "a0d11a4fab9c00e7df40a248de5d1532c56d5ef6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwZDExYTRmYWI5YzAwZTdkZjQwYTI0OGRlNWQxNTMyYzU2ZDVlZjY=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-06-15T12:27:31Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-06-15T12:30:13Z"}, "message": "Rename ErrorKind::Unknown to Uncategorized.", "tree": {"sha": "9f1508830cc01208b2900e3e75b8b0a300f9f477", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f1508830cc01208b2900e3e75b8b0a300f9f477"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6", "html_url": "https://github.com/rust-lang/rust/commit/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82d3ef199fa33524fa78c46868daa0d24277f8a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/82d3ef199fa33524fa78c46868daa0d24277f8a4", "html_url": "https://github.com/rust-lang/rust/commit/82d3ef199fa33524fa78c46868daa0d24277f8a4"}], "stats": {"total": 134, "additions": 72, "deletions": 62}, "files": [{"sha": "881ba2e079716587bf964a83c3491be434af889b", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=a0d11a4fab9c00e7df40a248de5d1532c56d5ef6", "patch": "@@ -2190,7 +2190,7 @@ impl DirBuilder {\n             Some(p) => self.create_dir_all(p)?,\n             None => {\n                 return Err(io::Error::new_const(\n-                    io::ErrorKind::Unknown,\n+                    io::ErrorKind::Uncategorized,\n                     &\"failed to create whole tree\",\n                 ));\n             }"}, {"sha": "127b7bf34a3dbe30a36ae40a839c5b7f7923de58", "filename": "library/std/src/fs/tests.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs?ref=a0d11a4fab9c00e7df40a248de5d1532c56d5ef6", "patch": "@@ -1329,7 +1329,8 @@ fn metadata_access_times() {\n         match (a.created(), b.created()) {\n             (Ok(t1), Ok(t2)) => assert!(t1 <= t2),\n             (Err(e1), Err(e2))\n-                if e1.kind() == ErrorKind::Unknown && e2.kind() == ErrorKind::Unknown\n+                if e1.kind() == ErrorKind::Uncategorized\n+                    && e2.kind() == ErrorKind::Uncategorized\n                     || e1.kind() == ErrorKind::Unsupported\n                         && e2.kind() == ErrorKind::Unsupported => {}\n             (a, b) => {"}, {"sha": "6ca8e0b506c0703bde3bd36825a7632b8d29ab67", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=a0d11a4fab9c00e7df40a248de5d1532c56d5ef6", "patch": "@@ -198,12 +198,12 @@ pub enum ErrorKind {\n \n     /// Any I/O error from the standard library that's not part of this list.\n     ///\n-    /// Errors that are `Unknown` now may move to a different or a new\n+    /// Errors that are `Uncategorized` now may move to a different or a new\n     /// [`ErrorKind`] variant in the future. It is not recommended to match\n-    /// an error against `Unknown`; use a wildcard match (`_`) instead.\n-    #[unstable(feature = \"io_error_unknown\", issue = \"none\")]\n+    /// an error against `Uncategorized`; use a wildcard match (`_`) instead.\n+    #[unstable(feature = \"io_error_uncategorized\", issue = \"none\")]\n     #[doc(hidden)]\n-    Unknown,\n+    Uncategorized,\n }\n \n impl ErrorKind {\n@@ -229,7 +229,7 @@ impl ErrorKind {\n             ErrorKind::Unsupported => \"unsupported\",\n             ErrorKind::OutOfMemory => \"out of memory\",\n             ErrorKind::Other => \"other error\",\n-            ErrorKind::Unknown => \"other os error\",\n+            ErrorKind::Uncategorized => \"uncategorized error\",\n         }\n     }\n }\n@@ -552,7 +552,7 @@ impl Error {\n     /// }\n     ///\n     /// fn main() {\n-    ///     // Will print \"Unknown\".\n+    ///     // Will print \"Uncategorized\".\n     ///     print_error(Error::last_os_error());\n     ///     // Will print \"AddrInUse\".\n     ///     print_error(Error::new(ErrorKind::AddrInUse, \"oh no!\"));"}, {"sha": "0566f86877f735ec432bc567480da66419dbc73a", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=a0d11a4fab9c00e7df40a248de5d1532c56d5ef6", "patch": "@@ -1592,7 +1592,7 @@ pub trait Write {\n                 if output.error.is_err() {\n                     output.error\n                 } else {\n-                    Err(Error::new_const(ErrorKind::Unknown, &\"formatter error\"))\n+                    Err(Error::new_const(ErrorKind::Uncategorized, &\"formatter error\"))\n                 }\n             }\n         }"}, {"sha": "387a3617e5e9a9de55bc567d5d8c74acef196e27", "filename": "library/std/src/net/tcp/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fnet%2Ftcp%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fnet%2Ftcp%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Ftcp%2Ftests.rs?ref=a0d11a4fab9c00e7df40a248de5d1532c56d5ef6", "patch": "@@ -342,7 +342,7 @@ fn double_bind() {\n             Err(e) => {\n                 assert!(\n                     e.kind() == ErrorKind::ConnectionRefused\n-                        || e.kind() == ErrorKind::Unknown\n+                        || e.kind() == ErrorKind::Uncategorized\n                         || e.kind() == ErrorKind::AddrInUse,\n                     \"unknown error: {} {:?}\",\n                     e,"}, {"sha": "7f26f419a4b7ba7d6d5de0daf2b5b52909b2b739", "filename": "library/std/src/os/wasi/fs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Ffs.rs?ref=a0d11a4fab9c00e7df40a248de5d1532c56d5ef6", "patch": "@@ -532,5 +532,6 @@ pub fn symlink_path<P: AsRef<Path>, U: AsRef<Path>>(old_path: P, new_path: U) ->\n }\n \n fn osstr2str(f: &OsStr) -> io::Result<&str> {\n-    f.to_str().ok_or_else(|| io::Error::new_const(io::ErrorKind::Unknown, &\"input must be utf-8\"))\n+    f.to_str()\n+        .ok_or_else(|| io::Error::new_const(io::ErrorKind::Uncategorized, &\"input must be utf-8\"))\n }"}, {"sha": "10c19424953d2af7b7d20db0ef4d183f33472aed", "filename": "library/std/src/sys/hermit/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs?ref=a0d11a4fab9c00e7df40a248de5d1532c56d5ef6", "patch": "@@ -149,7 +149,7 @@ pub fn decode_error_kind(errno: i32) -> ErrorKind {\n         x if x == 1 as i32 => ErrorKind::PermissionDenied,\n         x if x == 32 as i32 => ErrorKind::BrokenPipe,\n         x if x == 110 as i32 => ErrorKind::TimedOut,\n-        _ => ErrorKind::Unknown,\n+        _ => ErrorKind::Uncategorized,\n     }\n }\n "}, {"sha": "3f0c99cf74289c639a6934bff9ab194ca471ee38", "filename": "library/std/src/sys/hermit/net.rs", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs?ref=a0d11a4fab9c00e7df40a248de5d1532c56d5ef6", "patch": "@@ -15,7 +15,7 @@ use crate::time::Duration;\n pub fn init() -> io::Result<()> {\n     if abi::network_init() < 0 {\n         return Err(io::Error::new_const(\n-            ErrorKind::Unknown,\n+            ErrorKind::Uncategorized,\n             &\"Unable to initialize network interface\",\n         ));\n     }\n@@ -51,7 +51,7 @@ impl TcpStream {\n         match abi::tcpstream::connect(addr.ip().to_string().as_bytes(), addr.port(), None) {\n             Ok(handle) => Ok(TcpStream(Arc::new(Socket(handle)))),\n             _ => Err(io::Error::new_const(\n-                ErrorKind::Unknown,\n+                ErrorKind::Uncategorized,\n                 &\"Unable to initiate a connection on a socket\",\n             )),\n         }\n@@ -65,44 +65,46 @@ impl TcpStream {\n         ) {\n             Ok(handle) => Ok(TcpStream(Arc::new(Socket(handle)))),\n             _ => Err(io::Error::new_const(\n-                ErrorKind::Unknown,\n+                ErrorKind::Uncategorized,\n                 &\"Unable to initiate a connection on a socket\",\n             )),\n         }\n     }\n \n     pub fn set_read_timeout(&self, duration: Option<Duration>) -> io::Result<()> {\n         abi::tcpstream::set_read_timeout(*self.0.as_inner(), duration.map(|d| d.as_millis() as u64))\n-            .map_err(|_| io::Error::new_const(ErrorKind::Unknown, &\"Unable to set timeout value\"))\n+            .map_err(|_| {\n+                io::Error::new_const(ErrorKind::Uncategorized, &\"Unable to set timeout value\")\n+            })\n     }\n \n     pub fn set_write_timeout(&self, duration: Option<Duration>) -> io::Result<()> {\n         abi::tcpstream::set_write_timeout(\n             *self.0.as_inner(),\n             duration.map(|d| d.as_millis() as u64),\n         )\n-        .map_err(|_| io::Error::new_const(ErrorKind::Unknown, &\"Unable to set timeout value\"))\n+        .map_err(|_| io::Error::new_const(ErrorKind::Uncategorized, &\"Unable to set timeout value\"))\n     }\n \n     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {\n         let duration = abi::tcpstream::get_read_timeout(*self.0.as_inner()).map_err(|_| {\n-            io::Error::new_const(ErrorKind::Unknown, &\"Unable to determine timeout value\")\n+            io::Error::new_const(ErrorKind::Uncategorized, &\"Unable to determine timeout value\")\n         })?;\n \n         Ok(duration.map(|d| Duration::from_millis(d)))\n     }\n \n     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {\n         let duration = abi::tcpstream::get_write_timeout(*self.0.as_inner()).map_err(|_| {\n-            io::Error::new_const(ErrorKind::Unknown, &\"Unable to determine timeout value\")\n+            io::Error::new_const(ErrorKind::Uncategorized, &\"Unable to determine timeout value\")\n         })?;\n \n         Ok(duration.map(|d| Duration::from_millis(d)))\n     }\n \n     pub fn peek(&self, buf: &mut [u8]) -> io::Result<usize> {\n         abi::tcpstream::peek(*self.0.as_inner(), buf)\n-            .map_err(|_| io::Error::new_const(ErrorKind::Unknown, &\"peek failed\"))\n+            .map_err(|_| io::Error::new_const(ErrorKind::Uncategorized, &\"peek failed\"))\n     }\n \n     pub fn read(&self, buffer: &mut [u8]) -> io::Result<usize> {\n@@ -114,7 +116,7 @@ impl TcpStream {\n \n         for i in ioslice.iter_mut() {\n             let ret = abi::tcpstream::read(*self.0.as_inner(), &mut i[0..]).map_err(|_| {\n-                io::Error::new_const(ErrorKind::Unknown, &\"Unable to read on socket\")\n+                io::Error::new_const(ErrorKind::Uncategorized, &\"Unable to read on socket\")\n             })?;\n \n             if ret != 0 {\n@@ -139,7 +141,7 @@ impl TcpStream {\n \n         for i in ioslice.iter() {\n             size += abi::tcpstream::write(*self.0.as_inner(), i).map_err(|_| {\n-                io::Error::new_const(ErrorKind::Unknown, &\"Unable to write on socket\")\n+                io::Error::new_const(ErrorKind::Uncategorized, &\"Unable to write on socket\")\n             })?;\n         }\n \n@@ -153,13 +155,13 @@ impl TcpStream {\n \n     pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n         let (ipaddr, port) = abi::tcpstream::peer_addr(*self.0.as_inner())\n-            .map_err(|_| io::Error::new_const(ErrorKind::Unknown, &\"peer_addr failed\"))?;\n+            .map_err(|_| io::Error::new_const(ErrorKind::Uncategorized, &\"peer_addr failed\"))?;\n \n         let saddr = match ipaddr {\n             Ipv4(ref addr) => SocketAddr::new(IpAddr::V4(Ipv4Addr::from(addr.0)), port),\n             Ipv6(ref addr) => SocketAddr::new(IpAddr::V6(Ipv6Addr::from(addr.0)), port),\n             _ => {\n-                return Err(io::Error::new_const(ErrorKind::Unknown, &\"peer_addr failed\"));\n+                return Err(io::Error::new_const(ErrorKind::Uncategorized, &\"peer_addr failed\"));\n             }\n         };\n \n@@ -171,8 +173,9 @@ impl TcpStream {\n     }\n \n     pub fn shutdown(&self, how: Shutdown) -> io::Result<()> {\n-        abi::tcpstream::shutdown(*self.0.as_inner(), how as i32)\n-            .map_err(|_| io::Error::new_const(ErrorKind::Unknown, &\"unable to shutdown socket\"))\n+        abi::tcpstream::shutdown(*self.0.as_inner(), how as i32).map_err(|_| {\n+            io::Error::new_const(ErrorKind::Uncategorized, &\"unable to shutdown socket\")\n+        })\n     }\n \n     pub fn duplicate(&self) -> io::Result<TcpStream> {\n@@ -181,31 +184,32 @@ impl TcpStream {\n \n     pub fn set_nodelay(&self, mode: bool) -> io::Result<()> {\n         abi::tcpstream::set_nodelay(*self.0.as_inner(), mode)\n-            .map_err(|_| io::Error::new_const(ErrorKind::Unknown, &\"set_nodelay failed\"))\n+            .map_err(|_| io::Error::new_const(ErrorKind::Uncategorized, &\"set_nodelay failed\"))\n     }\n \n     pub fn nodelay(&self) -> io::Result<bool> {\n         abi::tcpstream::nodelay(*self.0.as_inner())\n-            .map_err(|_| io::Error::new_const(ErrorKind::Unknown, &\"nodelay failed\"))\n+            .map_err(|_| io::Error::new_const(ErrorKind::Uncategorized, &\"nodelay failed\"))\n     }\n \n     pub fn set_ttl(&self, tll: u32) -> io::Result<()> {\n         abi::tcpstream::set_tll(*self.0.as_inner(), tll)\n-            .map_err(|_| io::Error::new_const(ErrorKind::Unknown, &\"unable to set TTL\"))\n+            .map_err(|_| io::Error::new_const(ErrorKind::Uncategorized, &\"unable to set TTL\"))\n     }\n \n     pub fn ttl(&self) -> io::Result<u32> {\n         abi::tcpstream::get_tll(*self.0.as_inner())\n-            .map_err(|_| io::Error::new_const(ErrorKind::Unknown, &\"unable to get TTL\"))\n+            .map_err(|_| io::Error::new_const(ErrorKind::Uncategorized, &\"unable to get TTL\"))\n     }\n \n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n         unsupported()\n     }\n \n     pub fn set_nonblocking(&self, mode: bool) -> io::Result<()> {\n-        abi::tcpstream::set_nonblocking(*self.0.as_inner(), mode)\n-            .map_err(|_| io::Error::new_const(ErrorKind::Unknown, &\"unable to set blocking mode\"))\n+        abi::tcpstream::set_nonblocking(*self.0.as_inner(), mode).map_err(|_| {\n+            io::Error::new_const(ErrorKind::Uncategorized, &\"unable to set blocking mode\")\n+        })\n     }\n }\n \n@@ -231,12 +235,12 @@ impl TcpListener {\n \n     pub fn accept(&self) -> io::Result<(TcpStream, SocketAddr)> {\n         let (handle, ipaddr, port) = abi::tcplistener::accept(self.0.port())\n-            .map_err(|_| io::Error::new_const(ErrorKind::Unknown, &\"accept failed\"))?;\n+            .map_err(|_| io::Error::new_const(ErrorKind::Uncategorized, &\"accept failed\"))?;\n         let saddr = match ipaddr {\n             Ipv4(ref addr) => SocketAddr::new(IpAddr::V4(Ipv4Addr::from(addr.0)), port),\n             Ipv6(ref addr) => SocketAddr::new(IpAddr::V6(Ipv6Addr::from(addr.0)), port),\n             _ => {\n-                return Err(io::Error::new_const(ErrorKind::Unknown, &\"accept failed\"));\n+                return Err(io::Error::new_const(ErrorKind::Uncategorized, &\"accept failed\"));\n             }\n         };\n "}, {"sha": "33b8390431f6d5327fa57abf590016ca4713dc78", "filename": "library/std/src/sys/hermit/stdio.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fstdio.rs?ref=a0d11a4fab9c00e7df40a248de5d1532c56d5ef6", "patch": "@@ -40,7 +40,7 @@ impl io::Write for Stdout {\n         unsafe { len = abi::write(1, data.as_ptr() as *const u8, data.len()) }\n \n         if len < 0 {\n-            Err(io::Error::new_const(io::ErrorKind::Unknown, &\"Stdout is not able to print\"))\n+            Err(io::Error::new_const(io::ErrorKind::Uncategorized, &\"Stdout is not able to print\"))\n         } else {\n             Ok(len as usize)\n         }\n@@ -52,7 +52,7 @@ impl io::Write for Stdout {\n         unsafe { len = abi::write(1, data.as_ptr() as *const u8, data.len()) }\n \n         if len < 0 {\n-            Err(io::Error::new_const(io::ErrorKind::Unknown, &\"Stdout is not able to print\"))\n+            Err(io::Error::new_const(io::ErrorKind::Uncategorized, &\"Stdout is not able to print\"))\n         } else {\n             Ok(len as usize)\n         }\n@@ -81,7 +81,7 @@ impl io::Write for Stderr {\n         unsafe { len = abi::write(2, data.as_ptr() as *const u8, data.len()) }\n \n         if len < 0 {\n-            Err(io::Error::new_const(io::ErrorKind::Unknown, &\"Stderr is not able to print\"))\n+            Err(io::Error::new_const(io::ErrorKind::Uncategorized, &\"Stderr is not able to print\"))\n         } else {\n             Ok(len as usize)\n         }\n@@ -93,7 +93,7 @@ impl io::Write for Stderr {\n         unsafe { len = abi::write(2, data.as_ptr() as *const u8, data.len()) }\n \n         if len < 0 {\n-            Err(io::Error::new_const(io::ErrorKind::Unknown, &\"Stderr is not able to print\"))\n+            Err(io::Error::new_const(io::ErrorKind::Uncategorized, &\"Stderr is not able to print\"))\n         } else {\n             Ok(len as usize)\n         }"}, {"sha": "56f438b6af6764aa4662746d06f22d2c14ad935c", "filename": "library/std/src/sys/hermit/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fthread.rs?ref=a0d11a4fab9c00e7df40a248de5d1532c56d5ef6", "patch": "@@ -37,7 +37,7 @@ impl Thread {\n             // The thread failed to start and as a result p was not consumed. Therefore, it is\n             // safe to reconstruct the box so that it gets deallocated.\n             drop(Box::from_raw(p));\n-            Err(io::Error::new_const(io::ErrorKind::Unknown, &\"Unable to create thread!\"))\n+            Err(io::Error::new_const(io::ErrorKind::Uncategorized, &\"Unable to create thread!\"))\n         } else {\n             Ok(Thread { tid: tid })\n         };"}, {"sha": "fce6b4207328b7677901c4079fd6042b28e039c6", "filename": "library/std/src/sys/sgx/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs?ref=a0d11a4fab9c00e7df40a248de5d1532c56d5ef6", "patch": "@@ -70,7 +70,7 @@ pub fn sgx_ineffective<T>(v: T) -> crate::io::Result<T> {\n     static SGX_INEFFECTIVE_ERROR: AtomicBool = AtomicBool::new(false);\n     if SGX_INEFFECTIVE_ERROR.load(Ordering::Relaxed) {\n         Err(crate::io::Error::new_const(\n-            ErrorKind::Unknown,\n+            ErrorKind::Uncategorized,\n             &\"operation can't be trusted to have any effect on SGX\",\n         ))\n     } else {\n@@ -115,11 +115,11 @@ pub fn decode_error_kind(code: i32) -> ErrorKind {\n     } else if code == Error::Interrupted as _ {\n         ErrorKind::Interrupted\n     } else if code == Error::Other as _ {\n-        ErrorKind::Unknown\n+        ErrorKind::Uncategorized\n     } else if code == Error::UnexpectedEof as _ {\n         ErrorKind::UnexpectedEof\n     } else {\n-        ErrorKind::Unknown\n+        ErrorKind::Uncategorized\n     }\n }\n "}, {"sha": "3a69aa039ef2e703e087245eb37fe21dd8eafcbe", "filename": "library/std/src/sys/sgx/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fnet.rs?ref=a0d11a4fab9c00e7df40a248de5d1532c56d5ef6", "patch": "@@ -466,7 +466,7 @@ pub struct LookupHost(!);\n \n impl LookupHost {\n     fn new(host: String) -> io::Result<LookupHost> {\n-        Err(io::Error::new(io::ErrorKind::Unknown, NonIpSockAddr { host }))\n+        Err(io::Error::new(io::ErrorKind::Uncategorized, NonIpSockAddr { host }))\n     }\n \n     pub fn port(&self) -> u16 {"}, {"sha": "8ccf043b5b57f00cbb64df58a6ac85833e5e2230", "filename": "library/std/src/sys/sgx/stdio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fstdio.rs?ref=a0d11a4fab9c00e7df40a248de5d1532c56d5ef6", "patch": "@@ -65,7 +65,7 @@ impl io::Write for Stderr {\n pub const STDIN_BUF_SIZE: usize = crate::sys_common::io::DEFAULT_BUF_SIZE;\n \n pub fn is_ebadf(err: &io::Error) -> bool {\n-    // FIXME: Rust normally maps Unix EBADF to `Unknown`\n+    // FIXME: Rust normally maps Unix EBADF to `Uncategorized`\n     err.raw_os_error() == Some(abi::Error::BrokenPipe as _)\n }\n "}, {"sha": "a428ce94c8e8632ea00bbceab87abba334f471ee", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=a0d11a4fab9c00e7df40a248de5d1532c56d5ef6", "patch": "@@ -358,7 +358,7 @@ impl FileAttr {\n                     }))\n                 } else {\n                     Err(io::Error::new_const(\n-                        io::ErrorKind::Unknown,\n+                        io::ErrorKind::Uncategorized,\n                         &\"creation time is not available for the filesystem\",\n                     ))\n                 };"}, {"sha": "21c718825b889c6081a8934068460dc990ad01c8", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=a0d11a4fab9c00e7df40a248de5d1532c56d5ef6", "patch": "@@ -155,7 +155,7 @@ pub fn decode_error_kind(errno: i32) -> ErrorKind {\n         // clause\n         x if x == libc::EAGAIN || x == libc::EWOULDBLOCK => ErrorKind::WouldBlock,\n \n-        _ => ErrorKind::Unknown,\n+        _ => ErrorKind::Uncategorized,\n     }\n }\n "}, {"sha": "50c225ae2c1d91d0b8d294fb0a2f10d7e61b7daa", "filename": "library/std/src/sys/unix/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs?ref=a0d11a4fab9c00e7df40a248de5d1532c56d5ef6", "patch": "@@ -38,7 +38,7 @@ pub fn cvt_gai(err: c_int) -> io::Result<()> {\n         str::from_utf8(CStr::from_ptr(libc::gai_strerror(err)).to_bytes()).unwrap().to_owned()\n     };\n     Err(io::Error::new(\n-        io::ErrorKind::Unknown,\n+        io::ErrorKind::Uncategorized,\n         &format!(\"failed to lookup address information: {}\", detail)[..],\n     ))\n }\n@@ -178,7 +178,7 @@ impl Socket {\n                     if pollfd.revents & libc::POLLHUP != 0 {\n                         let e = self.take_error()?.unwrap_or_else(|| {\n                             io::Error::new_const(\n-                                io::ErrorKind::Unknown,\n+                                io::ErrorKind::Uncategorized,\n                                 &\"no error set after POLLHUP\",\n                             )\n                         });"}, {"sha": "c0befad2b9d76bc30af230ec4fa618a2ba1ba0e8", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=a0d11a4fab9c00e7df40a248de5d1532c56d5ef6", "patch": "@@ -280,7 +280,7 @@ pub fn current_exe() -> io::Result<PathBuf> {\n             ))?;\n             if path_len <= 1 {\n                 return Err(io::Error::new_const(\n-                    io::ErrorKind::Unknown,\n+                    io::ErrorKind::Uncategorized,\n                     &\"KERN_PROC_PATHNAME sysctl returned zero-length string\",\n                 ));\n             }\n@@ -303,7 +303,7 @@ pub fn current_exe() -> io::Result<PathBuf> {\n             return crate::fs::read_link(curproc_exe);\n         }\n         Err(io::Error::new_const(\n-            io::ErrorKind::Unknown,\n+            io::ErrorKind::Uncategorized,\n             &\"/proc/curproc/exe doesn't point to regular file.\",\n         ))\n     }\n@@ -321,7 +321,10 @@ pub fn current_exe() -> io::Result<PathBuf> {\n         cvt(libc::sysctl(mib, 4, argv.as_mut_ptr() as *mut _, &mut argv_len, ptr::null_mut(), 0))?;\n         argv.set_len(argv_len as usize);\n         if argv[0].is_null() {\n-            return Err(io::Error::new_const(io::ErrorKind::Unknown, &\"no current exe available\"));\n+            return Err(io::Error::new_const(\n+                io::ErrorKind::Uncategorized,\n+                &\"no current exe available\",\n+            ));\n         }\n         let argv0 = CStr::from_ptr(argv[0]).to_bytes();\n         if argv0[0] == b'.' || argv0.iter().any(|b| *b == b'/') {\n@@ -336,7 +339,7 @@ pub fn current_exe() -> io::Result<PathBuf> {\n pub fn current_exe() -> io::Result<PathBuf> {\n     match crate::fs::read_link(\"/proc/self/exe\") {\n         Err(ref e) if e.kind() == io::ErrorKind::NotFound => Err(io::Error::new_const(\n-            io::ErrorKind::Unknown,\n+            io::ErrorKind::Uncategorized,\n             &\"no /proc/self/exe available. Is /proc mounted?\",\n         )),\n         other => other,\n@@ -423,7 +426,7 @@ pub fn current_exe() -> io::Result<PathBuf> {\n             _get_next_image_info(0, &mut cookie, &mut info, mem::size_of::<image_info>() as i32);\n         if result != 0 {\n             use crate::io::ErrorKind;\n-            Err(io::Error::new_const(ErrorKind::Unknown, &\"Error getting executable path\"))\n+            Err(io::Error::new_const(ErrorKind::Uncategorized, &\"Error getting executable path\"))\n         } else {\n             let name = CStr::from_ptr(info.name.as_ptr()).to_bytes();\n             Ok(PathBuf::from(OsStr::from_bytes(name)))"}, {"sha": "4e6c301d29f5470fdc85d0492fe1ed06d094a083", "filename": "library/std/src/sys/unsupported/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fcommon.rs?ref=a0d11a4fab9c00e7df40a248de5d1532c56d5ef6", "patch": "@@ -30,7 +30,7 @@ pub fn unsupported_err() -> std_io::Error {\n }\n \n pub fn decode_error_kind(_code: i32) -> crate::io::ErrorKind {\n-    crate::io::ErrorKind::Unknown\n+    crate::io::ErrorKind::Uncategorized\n }\n \n pub fn abort_internal() -> ! {"}, {"sha": "8ffa1c88d88e75f89a1cd4c4ee18d86c36b6357b", "filename": "library/std/src/sys/wasi/fs.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs?ref=a0d11a4fab9c00e7df40a248de5d1532c56d5ef6", "patch": "@@ -648,7 +648,7 @@ fn open_parent(p: &Path) -> io::Result<(ManuallyDrop<WasiFd>, PathBuf)> {\n                      through which {:?} could be opened\",\n                     p\n                 );\n-                return Err(io::Error::new(io::ErrorKind::Unknown, msg));\n+                return Err(io::Error::new(io::ErrorKind::Uncategorized, msg));\n             }\n             let relative = CStr::from_ptr(relative_path).to_bytes().to_vec();\n \n@@ -670,7 +670,8 @@ fn open_parent(p: &Path) -> io::Result<(ManuallyDrop<WasiFd>, PathBuf)> {\n }\n \n pub fn osstr2str(f: &OsStr) -> io::Result<&str> {\n-    f.to_str().ok_or_else(|| io::Error::new_const(io::ErrorKind::Unknown, &\"input must be utf-8\"))\n+    f.to_str()\n+        .ok_or_else(|| io::Error::new_const(io::ErrorKind::Uncategorized, &\"input must be utf-8\"))\n }\n \n pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {"}, {"sha": "4af99bfa464781d59aa7fbe79e97ce90d87ea855", "filename": "library/std/src/sys/wasi/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs?ref=a0d11a4fab9c00e7df40a248de5d1532c56d5ef6", "patch": "@@ -58,7 +58,7 @@ pub use common::*;\n pub fn decode_error_kind(errno: i32) -> std_io::ErrorKind {\n     use std_io::ErrorKind::*;\n     if errno > u16::MAX as i32 || errno < 0 {\n-        return Unknown;\n+        return Uncategorized;\n     }\n     match errno as u16 {\n         wasi::ERRNO_CONNREFUSED => ConnectionRefused,\n@@ -77,7 +77,7 @@ pub fn decode_error_kind(errno: i32) -> std_io::ErrorKind {\n         wasi::ERRNO_AGAIN => WouldBlock,\n         wasi::ERRNO_NOSYS => Unsupported,\n         wasi::ERRNO_NOMEM => OutOfMemory,\n-        _ => Unknown,\n+        _ => Uncategorized,\n     }\n }\n "}, {"sha": "c677adae6888e0c30e24e182539584bef1873784", "filename": "library/std/src/sys/windows/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs?ref=a0d11a4fab9c00e7df40a248de5d1532c56d5ef6", "patch": "@@ -514,7 +514,7 @@ impl File {\n                 }\n                 _ => {\n                     return Err(io::Error::new_const(\n-                        io::ErrorKind::Unknown,\n+                        io::ErrorKind::Uncategorized,\n                         &\"Unsupported reparse point type\",\n                     ));\n                 }"}, {"sha": "ab455a8a3764293dd983e222e9850ea218f60fe4", "filename": "library/std/src/sys/windows/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs?ref=a0d11a4fab9c00e7df40a248de5d1532c56d5ef6", "patch": "@@ -103,7 +103,7 @@ pub fn decode_error_kind(errno: i32) -> ErrorKind {\n         c::WSAEWOULDBLOCK => ErrorKind::WouldBlock,\n         c::WSAETIMEDOUT => ErrorKind::TimedOut,\n \n-        _ => ErrorKind::Unknown,\n+        _ => ErrorKind::Uncategorized,\n     }\n }\n "}, {"sha": "3fcaefaa63ef1517c4ef0323805205a4a565dcdc", "filename": "src/test/ui/write-fmt-errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/src%2Ftest%2Fui%2Fwrite-fmt-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d11a4fab9c00e7df40a248de5d1532c56d5ef6/src%2Ftest%2Fui%2Fwrite-fmt-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrite-fmt-errors.rs?ref=a0d11a4fab9c00e7df40a248de5d1532c56d5ef6", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-#![feature(io_error_unknown)]\n+#![feature(io_error_uncategorized)]\n \n use std::fmt;\n use std::io::{self, Error, Write, sink};\n@@ -15,7 +15,7 @@ impl fmt::Display for ErrorDisplay {\n \n struct ErrorWriter;\n \n-const FORMAT_ERROR: io::ErrorKind = io::ErrorKind::Unknown;\n+const FORMAT_ERROR: io::ErrorKind = io::ErrorKind::Uncategorized;\n const WRITER_ERROR: io::ErrorKind = io::ErrorKind::NotConnected;\n \n impl Write for ErrorWriter {"}]}