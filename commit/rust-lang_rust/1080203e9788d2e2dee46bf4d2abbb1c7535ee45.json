{"sha": "1080203e9788d2e2dee46bf4d2abbb1c7535ee45", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwODAyMDNlOTc4OGQyZTJkZWU0NmJmNGQyYWJiYjFjNzUzNWVlNDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-19T08:50:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-19T08:50:41Z"}, "message": "Auto merge of #50383 - stevepentland:union-derive, r=oli-obk\n\nAdd ability to apply custom derive to union types.\n\nThe Union item type has been included in the allowed types for a custom derive.\nfyi @abonander\n\nCloses #50223", "tree": {"sha": "a8e84392259635629595c79ea5865f97b968214f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8e84392259635629595c79ea5865f97b968214f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1080203e9788d2e2dee46bf4d2abbb1c7535ee45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1080203e9788d2e2dee46bf4d2abbb1c7535ee45", "html_url": "https://github.com/rust-lang/rust/commit/1080203e9788d2e2dee46bf4d2abbb1c7535ee45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1080203e9788d2e2dee46bf4d2abbb1c7535ee45/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cfb628eade1fc41d2dc57aafe5ca637c777f3c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cfb628eade1fc41d2dc57aafe5ca637c777f3c2", "html_url": "https://github.com/rust-lang/rust/commit/1cfb628eade1fc41d2dc57aafe5ca637c777f3c2"}, {"sha": "14abb550bf676d221866e5ad5f588850d018acbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/14abb550bf676d221866e5ad5f588850d018acbf", "html_url": "https://github.com/rust-lang/rust/commit/14abb550bf676d221866e5ad5f588850d018acbf"}], "stats": {"total": 59, "additions": 56, "deletions": 3}, "files": [{"sha": "c3958bb58ddf6bf4c3ddd105c602e3ab09ffc396", "filename": "src/libsyntax_ext/deriving/custom.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1080203e9788d2e2dee46bf4d2abbb1c7535ee45/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1080203e9788d2e2dee46bf4d2abbb1c7535ee45/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs?ref=1080203e9788d2e2dee46bf4d2abbb1c7535ee45", "patch": "@@ -57,16 +57,17 @@ impl MultiItemModifier for ProcMacroDerive {\n             Annotatable::Stmt(_) |\n             Annotatable::Expr(_) => {\n                 ecx.span_err(span, \"proc-macro derives may only be \\\n-                                    applied to struct/enum items\");\n+                                    applied to a struct, enum, or union\");\n                 return Vec::new()\n             }\n         };\n         match item.node {\n             ItemKind::Struct(..) |\n-            ItemKind::Enum(..) => {},\n+            ItemKind::Enum(..) |\n+            ItemKind::Union(..) => {},\n             _ => {\n                 ecx.span_err(span, \"proc-macro derives may only be \\\n-                                    applied to struct/enum items\");\n+                                    applied to a struct, enum, or union\");\n                 return Vec::new()\n             }\n         }"}, {"sha": "41bb88a0a92c186772be491eb939381c662d68c4", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/derive-union.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1080203e9788d2e2dee46bf4d2abbb1c7535ee45/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-union.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1080203e9788d2e2dee46bf4d2abbb1c7535ee45/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-union.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-union.rs?ref=1080203e9788d2e2dee46bf4d2abbb1c7535ee45", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_derive(UnionTest)]\n+pub fn derive(input: TokenStream) -> TokenStream {\n+    let input = input.to_string();\n+    assert!(input.contains(\"#[repr(C)]\"));\n+    assert!(input.contains(\"union Test {\"));\n+    assert!(input.contains(\"a: u8,\"));\n+    assert!(input.contains(\"}\"));\n+    \"\".parse().unwrap()\n+}"}, {"sha": "71807e21d962e4dbe9bac59f09d8559115703940", "filename": "src/test/run-pass-fulldeps/proc-macro/derive-union.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1080203e9788d2e2dee46bf4d2abbb1c7535ee45/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fderive-union.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1080203e9788d2e2dee46bf4d2abbb1c7535ee45/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fderive-union.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fderive-union.rs?ref=1080203e9788d2e2dee46bf4d2abbb1c7535ee45", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:derive-union.rs\n+// ignore-stage1\n+\n+#[macro_use]\n+extern crate derive_union;\n+\n+#[repr(C)]\n+#[derive(UnionTest)]\n+union Test {\n+    a: u8,\n+}\n+\n+fn main() {\n+    let t = Test { a: 0 };\n+}"}]}