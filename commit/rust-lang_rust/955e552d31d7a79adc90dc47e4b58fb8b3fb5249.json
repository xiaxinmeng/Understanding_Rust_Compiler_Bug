{"sha": "955e552d31d7a79adc90dc47e4b58fb8b3fb5249", "node_id": "C_kwDOAAsO6NoAKDk1NWU1NTJkMzFkN2E3OWFkYzkwZGM0N2U0YjU4ZmI4YjNmYjUyNDk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-12T06:45:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-12T06:45:30Z"}, "message": "Rollup merge of #91814 - japm48:spelling-fix, r=RalfJung\n\ndoc: fix typo in comments\n\n`dereferencable -> dereferenceable`\n\nFixes #91802.", "tree": {"sha": "820cb6a9adc4235effdab4b081016d3319d75ed9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/820cb6a9adc4235effdab4b081016d3319d75ed9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/955e552d31d7a79adc90dc47e4b58fb8b3fb5249", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhtZqKCRBK7hj4Ov3rIwAAAmwIAFlK7px4R8ZcF7/KBW+vOhTT\nQJfG4RTgtsfoeVz9IYm2Ba5T+sexLoLUTPr+W7ZVgazx+wrm/vjR0Ia2mdUFrwVK\n3hi9MnMF8Opyk0E6l+KHgCbG664VnYgckspdJWSyiDfH9TmcEwz9IdLHd8CZcNHY\npKFbo6fZ4xZNFMdEBtrOIYTgWaKHLlxRlesuv9nwnmzvvIRyvZNh3QjFFdngA+cq\nqWGDMibknAk0IY/ojicQ4aG6flN2DlbHuhT/k8cAfn00bPIJpmWaLA+vzvwGnJrO\nqIPrxmylRg91eFrtmfVsTpgNHi7hs22Q8ZBkJ4u/pt5RMFTYtPns0r/6FYUIyiw=\n=E3vm\n-----END PGP SIGNATURE-----\n", "payload": "tree 820cb6a9adc4235effdab4b081016d3319d75ed9\nparent be20570a07067e0c5fad37581f1287835cffda65\nparent 0d7b830139a0d32bb835091fd702b2e256b1411b\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639291530 +0100\ncommitter GitHub <noreply@github.com> 1639291530 +0100\n\nRollup merge of #91814 - japm48:spelling-fix, r=RalfJung\n\ndoc: fix typo in comments\n\n`dereferencable -> dereferenceable`\n\nFixes #91802.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/955e552d31d7a79adc90dc47e4b58fb8b3fb5249", "html_url": "https://github.com/rust-lang/rust/commit/955e552d31d7a79adc90dc47e4b58fb8b3fb5249", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/955e552d31d7a79adc90dc47e4b58fb8b3fb5249/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be20570a07067e0c5fad37581f1287835cffda65", "url": "https://api.github.com/repos/rust-lang/rust/commits/be20570a07067e0c5fad37581f1287835cffda65", "html_url": "https://github.com/rust-lang/rust/commit/be20570a07067e0c5fad37581f1287835cffda65"}, {"sha": "0d7b830139a0d32bb835091fd702b2e256b1411b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d7b830139a0d32bb835091fd702b2e256b1411b", "html_url": "https://github.com/rust-lang/rust/commit/0d7b830139a0d32bb835091fd702b2e256b1411b"}], "stats": {"total": 64, "additions": 32, "deletions": 32}, "files": [{"sha": "d6f856a6f0a705b06a1a76cd0a412b70bb53440a", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/955e552d31d7a79adc90dc47e4b58fb8b3fb5249/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/955e552d31d7a79adc90dc47e4b58fb8b3fb5249/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=955e552d31d7a79adc90dc47e4b58fb8b3fb5249", "patch": "@@ -140,7 +140,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n             sym::min_align_of_val | sym::size_of_val => {\n                 // Avoid `deref_operand` -- this is not a deref, the ptr does not have to be\n-                // dereferencable!\n+                // dereferenceable!\n                 let place = self.ref_to_mplace(&self.read_immediate(&args[0])?)?;\n                 let (size, align) = self\n                     .size_and_align_of_mplace(&place)?"}, {"sha": "e526bfa2b52c7a489ff35c2789c695f1ca995d72", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/955e552d31d7a79adc90dc47e4b58fb8b3fb5249/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/955e552d31d7a79adc90dc47e4b58fb8b3fb5249/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=955e552d31d7a79adc90dc47e4b58fb8b3fb5249", "patch": "@@ -327,7 +327,7 @@ where\n         self.memory.get_mut(place.ptr, size, place.align)\n     }\n \n-    /// Check if this mplace is dereferencable and sufficiently aligned.\n+    /// Check if this mplace is dereferenceable and sufficiently aligned.\n     fn check_mplace_access(\n         &self,\n         mplace: MPlaceTy<'tcx, M::PointerTag>,"}, {"sha": "ee2df0d5160127a26676b89f5ea04c39ff736136", "filename": "library/alloc/src/collections/vec_deque/iter_mut.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/955e552d31d7a79adc90dc47e4b58fb8b3fb5249/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/955e552d31d7a79adc90dc47e4b58fb8b3fb5249/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter_mut.rs?ref=955e552d31d7a79adc90dc47e4b58fb8b3fb5249", "patch": "@@ -12,7 +12,7 @@ use super::{count, wrap_index, RingSlices};\n /// [`iter_mut`]: super::VecDeque::iter_mut\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IterMut<'a, T: 'a> {\n-    // Internal safety invariant: the entire slice is dereferencable.\n+    // Internal safety invariant: the entire slice is dereferenceable.\n     ring: *mut [T],\n     tail: usize,\n     head: usize,\n@@ -42,7 +42,7 @@ impl<T: fmt::Debug> fmt::Debug for IterMut<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let (front, back) = RingSlices::ring_slices(self.ring, self.head, self.tail);\n         // SAFETY: these are the elements we have not handed out yet, so aliasing is fine.\n-        // The `IterMut` invariant also ensures everything is dereferencable.\n+        // The `IterMut` invariant also ensures everything is dereferenceable.\n         let (front, back) = unsafe { (&*front, &*back) };\n         f.debug_tuple(\"IterMut\").field(&front).field(&back).finish()\n     }\n@@ -78,7 +78,7 @@ impl<'a, T> Iterator for IterMut<'a, T> {\n     {\n         let (front, back) = RingSlices::ring_slices(self.ring, self.head, self.tail);\n         // SAFETY: these are the elements we have not handed out yet, so aliasing is fine.\n-        // The `IterMut` invariant also ensures everything is dereferencable.\n+        // The `IterMut` invariant also ensures everything is dereferenceable.\n         let (front, back) = unsafe { (&mut *front, &mut *back) };\n         accum = front.iter_mut().fold(accum, &mut f);\n         back.iter_mut().fold(accum, &mut f)\n@@ -132,7 +132,7 @@ impl<'a, T> DoubleEndedIterator for IterMut<'a, T> {\n     {\n         let (front, back) = RingSlices::ring_slices(self.ring, self.head, self.tail);\n         // SAFETY: these are the elements we have not handed out yet, so aliasing is fine.\n-        // The `IterMut` invariant also ensures everything is dereferencable.\n+        // The `IterMut` invariant also ensures everything is dereferenceable.\n         let (front, back) = unsafe { (&mut *front, &mut *back) };\n         accum = back.iter_mut().rfold(accum, &mut f);\n         front.iter_mut().rfold(accum, &mut f)"}, {"sha": "075becfb7d11ab2934ef3a435558895df5d2b9d3", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/955e552d31d7a79adc90dc47e4b58fb8b3fb5249/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/955e552d31d7a79adc90dc47e4b58fb8b3fb5249/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=955e552d31d7a79adc90dc47e4b58fb8b3fb5249", "patch": "@@ -1020,7 +1020,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter_mut(&mut self) -> IterMut<'_, T> {\n         // SAFETY: The internal `IterMut` safety invariant is established because the\n-        // `ring` we create is a dereferencable slice for lifetime '_.\n+        // `ring` we create is a dereferenceable slice for lifetime '_.\n         let ring = ptr::slice_from_raw_parts_mut(self.ptr(), self.cap());\n \n         unsafe { IterMut::new(ring, self.tail, self.head, PhantomData) }\n@@ -1209,7 +1209,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         let (tail, head) = self.range_tail_head(range);\n \n         // SAFETY: The internal `IterMut` safety invariant is established because the\n-        // `ring` we create is a dereferencable slice for lifetime '_.\n+        // `ring` we create is a dereferenceable slice for lifetime '_.\n         let ring = ptr::slice_from_raw_parts_mut(self.ptr(), self.cap());\n \n         unsafe { IterMut::new(ring, tail, head, PhantomData) }"}, {"sha": "33bee4324fd385f06aab96258d23de91be942b5c", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/955e552d31d7a79adc90dc47e4b58fb8b3fb5249/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/955e552d31d7a79adc90dc47e4b58fb8b3fb5249/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=955e552d31d7a79adc90dc47e4b58fb8b3fb5249", "patch": "@@ -2121,7 +2121,7 @@ impl<T: ?Sized> Weak<T> {\n             // a valid payload address, as the payload is at least as aligned as RcBox (usize).\n             ptr as *const T\n         } else {\n-            // SAFETY: if is_dangling returns false, then the pointer is dereferencable.\n+            // SAFETY: if is_dangling returns false, then the pointer is dereferenceable.\n             // The payload may be dropped at this point, and we have to maintain provenance,\n             // so use raw pointer manipulation.\n             unsafe { ptr::addr_of_mut!((*ptr).value) }"}, {"sha": "7c065f37d1fa87764f8bc676305dd81695c5d2f0", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/955e552d31d7a79adc90dc47e4b58fb8b3fb5249/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/955e552d31d7a79adc90dc47e4b58fb8b3fb5249/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=955e552d31d7a79adc90dc47e4b58fb8b3fb5249", "patch": "@@ -1743,7 +1743,7 @@ impl<T: ?Sized> Weak<T> {\n             // a valid payload address, as the payload is at least as aligned as ArcInner (usize).\n             ptr as *const T\n         } else {\n-            // SAFETY: if is_dangling returns false, then the pointer is dereferencable.\n+            // SAFETY: if is_dangling returns false, then the pointer is dereferenceable.\n             // The payload may be dropped at this point, and we have to maintain provenance,\n             // so use raw pointer manipulation.\n             unsafe { ptr::addr_of_mut!((*ptr).data) }"}, {"sha": "332be06dd161704dbe5300da7b6b5de78e78ae78", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/955e552d31d7a79adc90dc47e4b58fb8b3fb5249/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/955e552d31d7a79adc90dc47e4b58fb8b3fb5249/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=955e552d31d7a79adc90dc47e4b58fb8b3fb5249", "patch": "@@ -119,7 +119,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// * The pointer must be properly aligned.\n     ///\n-    /// * It must be \"dereferencable\" in the sense defined in [the module documentation].\n+    /// * It must be \"dereferenceable\" in the sense defined in [the module documentation].\n     ///\n     /// * The pointer must point to an initialized instance of `T`.\n     ///\n@@ -183,7 +183,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// * The pointer must be properly aligned.\n     ///\n-    /// * It must be \"dereferencable\" in the sense defined in [the module documentation].\n+    /// * It must be \"dereferenceable\" in the sense defined in [the module documentation].\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n@@ -1003,7 +1003,7 @@ impl<T> *const [T] {\n     /// Returns a raw pointer to an element or subslice, without doing bounds\n     /// checking.\n     ///\n-    /// Calling this method with an out-of-bounds index or when `self` is not dereferencable\n+    /// Calling this method with an out-of-bounds index or when `self` is not dereferenceable\n     /// is *[undefined behavior]* even if the resulting pointer is not used.\n     ///\n     /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n@@ -1025,7 +1025,7 @@ impl<T> *const [T] {\n     where\n         I: SliceIndex<[T]>,\n     {\n-        // SAFETY: the caller ensures that `self` is dereferencable and `index` in-bounds.\n+        // SAFETY: the caller ensures that `self` is dereferenceable and `index` in-bounds.\n         unsafe { index.get_unchecked(self) }\n     }\n "}, {"sha": "15ef64bc73f8205d5e6866ff18a2059c4be81a80", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/955e552d31d7a79adc90dc47e4b58fb8b3fb5249/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/955e552d31d7a79adc90dc47e4b58fb8b3fb5249/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=955e552d31d7a79adc90dc47e4b58fb8b3fb5249", "patch": "@@ -122,7 +122,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// * The pointer must be properly aligned.\n     ///\n-    /// * It must be \"dereferencable\" in the sense defined in [the module documentation].\n+    /// * It must be \"dereferenceable\" in the sense defined in [the module documentation].\n     ///\n     /// * The pointer must point to an initialized instance of `T`.\n     ///\n@@ -189,7 +189,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// * The pointer must be properly aligned.\n     ///\n-    /// * It must be \"dereferencable\" in the sense defined in [the module documentation].\n+    /// * It must be \"dereferenceable\" in the sense defined in [the module documentation].\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n@@ -368,7 +368,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// * The pointer must be properly aligned.\n     ///\n-    /// * It must be \"dereferencable\" in the sense defined in [the module documentation].\n+    /// * It must be \"dereferenceable\" in the sense defined in [the module documentation].\n     ///\n     /// * The pointer must point to an initialized instance of `T`.\n     ///\n@@ -434,7 +434,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// * The pointer must be properly aligned.\n     ///\n-    /// * It must be \"dereferencable\" in the sense defined in [the module documentation].\n+    /// * It must be \"dereferenceable\" in the sense defined in [the module documentation].\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n@@ -1266,7 +1266,7 @@ impl<T> *mut [T] {\n     /// Returns a raw pointer to an element or subslice, without doing bounds\n     /// checking.\n     ///\n-    /// Calling this method with an out-of-bounds index or when `self` is not dereferencable\n+    /// Calling this method with an out-of-bounds index or when `self` is not dereferenceable\n     /// is *[undefined behavior]* even if the resulting pointer is not used.\n     ///\n     /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n@@ -1288,7 +1288,7 @@ impl<T> *mut [T] {\n     where\n         I: SliceIndex<[T]>,\n     {\n-        // SAFETY: the caller ensures that `self` is dereferencable and `index` in-bounds.\n+        // SAFETY: the caller ensures that `self` is dereferenceable and `index` in-bounds.\n         unsafe { index.get_unchecked_mut(self) }\n     }\n "}, {"sha": "4f4e7eca281804d478dcc79bf70566766c57e93b", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/955e552d31d7a79adc90dc47e4b58fb8b3fb5249/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/955e552d31d7a79adc90dc47e4b58fb8b3fb5249/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=955e552d31d7a79adc90dc47e4b58fb8b3fb5249", "patch": "@@ -109,7 +109,7 @@ impl<T: Sized> NonNull<T> {\n     ///\n     /// * The pointer must be properly aligned.\n     ///\n-    /// * It must be \"dereferencable\" in the sense defined in [the module documentation].\n+    /// * It must be \"dereferenceable\" in the sense defined in [the module documentation].\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n@@ -142,7 +142,7 @@ impl<T: Sized> NonNull<T> {\n     ///\n     /// * The pointer must be properly aligned.\n     ///\n-    /// * It must be \"dereferencable\" in the sense defined in [the module documentation].\n+    /// * It must be \"dereferenceable\" in the sense defined in [the module documentation].\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n@@ -289,7 +289,7 @@ impl<T: ?Sized> NonNull<T> {\n     ///\n     /// * The pointer must be properly aligned.\n     ///\n-    /// * It must be \"dereferencable\" in the sense defined in [the module documentation].\n+    /// * It must be \"dereferenceable\" in the sense defined in [the module documentation].\n     ///\n     /// * The pointer must point to an initialized instance of `T`.\n     ///\n@@ -338,7 +338,7 @@ impl<T: ?Sized> NonNull<T> {\n     ///\n     /// * The pointer must be properly aligned.\n     ///\n-    /// * It must be \"dereferencable\" in the sense defined in [the module documentation].\n+    /// * It must be \"dereferenceable\" in the sense defined in [the module documentation].\n     ///\n     /// * The pointer must point to an initialized instance of `T`.\n     ///\n@@ -604,7 +604,7 @@ impl<T> NonNull<[T]> {\n     /// Returns a raw pointer to an element or subslice, without doing bounds\n     /// checking.\n     ///\n-    /// Calling this method with an out-of-bounds index or when `self` is not dereferencable\n+    /// Calling this method with an out-of-bounds index or when `self` is not dereferenceable\n     /// is *[undefined behavior]* even if the resulting pointer is not used.\n     ///\n     /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n@@ -628,7 +628,7 @@ impl<T> NonNull<[T]> {\n     where\n         I: SliceIndex<[T]>,\n     {\n-        // SAFETY: the caller ensures that `self` is dereferencable and `index` in-bounds.\n+        // SAFETY: the caller ensures that `self` is dereferenceable and `index` in-bounds.\n         // As a consequence, the resulting pointer cannot be null.\n         unsafe { NonNull::new_unchecked(self.as_ptr().get_unchecked_mut(index)) }\n     }"}, {"sha": "7d5d70f17207c3c60e4ae6d3c44deb9e2f7ef9bd", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/955e552d31d7a79adc90dc47e4b58fb8b3fb5249/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/955e552d31d7a79adc90dc47e4b58fb8b3fb5249/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=955e552d31d7a79adc90dc47e4b58fb8b3fb5249", "patch": "@@ -380,7 +380,7 @@ impl<T> [T] {\n         I: SliceIndex<Self>,\n     {\n         // SAFETY: the caller must uphold most of the safety requirements for `get_unchecked`;\n-        // the slice is dereferencable because `self` is a safe reference.\n+        // the slice is dereferenceable because `self` is a safe reference.\n         // The returned pointer is safe because impls of `SliceIndex` have to guarantee that it is.\n         unsafe { &*index.get_unchecked(self) }\n     }\n@@ -416,7 +416,7 @@ impl<T> [T] {\n         I: SliceIndex<Self>,\n     {\n         // SAFETY: the caller must uphold the safety requirements for `get_unchecked_mut`;\n-        // the slice is dereferencable because `self` is a safe reference.\n+        // the slice is dereferenceable because `self` is a safe reference.\n         // The returned pointer is safe because impls of `SliceIndex` have to guarantee that it is.\n         unsafe { &mut *index.get_unchecked_mut(self) }\n     }"}, {"sha": "1d4600fa4a2d7e0917e8e26e8ae1b3a125a140b8", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/955e552d31d7a79adc90dc47e4b58fb8b3fb5249/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/955e552d31d7a79adc90dc47e4b58fb8b3fb5249/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=955e552d31d7a79adc90dc47e4b58fb8b3fb5249", "patch": "@@ -416,7 +416,7 @@ impl str {\n     #[inline]\n     pub unsafe fn get_unchecked<I: SliceIndex<str>>(&self, i: I) -> &I::Output {\n         // SAFETY: the caller must uphold the safety contract for `get_unchecked`;\n-        // the slice is dereferencable because `self` is a safe reference.\n+        // the slice is dereferenceable because `self` is a safe reference.\n         // The returned pointer is safe because impls of `SliceIndex` have to guarantee that it is.\n         unsafe { &*i.get_unchecked(self) }\n     }\n@@ -451,7 +451,7 @@ impl str {\n     #[inline]\n     pub unsafe fn get_unchecked_mut<I: SliceIndex<str>>(&mut self, i: I) -> &mut I::Output {\n         // SAFETY: the caller must uphold the safety contract for `get_unchecked_mut`;\n-        // the slice is dereferencable because `self` is a safe reference.\n+        // the slice is dereferenceable because `self` is a safe reference.\n         // The returned pointer is safe because impls of `SliceIndex` have to guarantee that it is.\n         unsafe { &mut *i.get_unchecked_mut(self) }\n     }\n@@ -504,7 +504,7 @@ impl str {\n     #[inline]\n     pub unsafe fn slice_unchecked(&self, begin: usize, end: usize) -> &str {\n         // SAFETY: the caller must uphold the safety contract for `get_unchecked`;\n-        // the slice is dereferencable because `self` is a safe reference.\n+        // the slice is dereferenceable because `self` is a safe reference.\n         // The returned pointer is safe because impls of `SliceIndex` have to guarantee that it is.\n         unsafe { &*(begin..end).get_unchecked(self) }\n     }\n@@ -537,7 +537,7 @@ impl str {\n     #[inline]\n     pub unsafe fn slice_mut_unchecked(&mut self, begin: usize, end: usize) -> &mut str {\n         // SAFETY: the caller must uphold the safety contract for `get_unchecked_mut`;\n-        // the slice is dereferencable because `self` is a safe reference.\n+        // the slice is dereferenceable because `self` is a safe reference.\n         // The returned pointer is safe because impls of `SliceIndex` have to guarantee that it is.\n         unsafe { &mut *(begin..end).get_unchecked_mut(self) }\n     }"}]}