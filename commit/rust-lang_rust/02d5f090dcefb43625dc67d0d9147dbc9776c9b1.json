{"sha": "02d5f090dcefb43625dc67d0d9147dbc9776c9b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyZDVmMDkwZGNlZmI0MzYyNWRjNjdkMGQ5MTQ3ZGJjOTc3NmM5YjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-26T03:16:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-26T03:16:01Z"}, "message": "auto merge of #5524 : luqmana/rust/repeat-loop, r=pcwalton\n\n`let v = [24, ..1000];` now more or less emits the same IR as:\r\n\r\n```Rust\r\nlet mut i = 0;\r\nwhile i < 1000 {\r\n    v[i] = 24;\r\n    i += 1;\r\n}\r\n```\r\n\r\nLLVM will still turn it into a memset if possible with optimization on.", "tree": {"sha": "5a0b8446923f3f9beaba3ae091ae6509b9914088", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a0b8446923f3f9beaba3ae091ae6509b9914088"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02d5f090dcefb43625dc67d0d9147dbc9776c9b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02d5f090dcefb43625dc67d0d9147dbc9776c9b1", "html_url": "https://github.com/rust-lang/rust/commit/02d5f090dcefb43625dc67d0d9147dbc9776c9b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02d5f090dcefb43625dc67d0d9147dbc9776c9b1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00605d58debc26829a1ed106f7a4be3c95860866", "url": "https://api.github.com/repos/rust-lang/rust/commits/00605d58debc26829a1ed106f7a4be3c95860866", "html_url": "https://github.com/rust-lang/rust/commit/00605d58debc26829a1ed106f7a4be3c95860866"}, {"sha": "e7f42f140b8d2271888f97ba62c5e0570032b6e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7f42f140b8d2271888f97ba62c5e0570032b6e5", "html_url": "https://github.com/rust-lang/rust/commit/e7f42f140b8d2271888f97ba62c5e0570032b6e5"}], "stats": {"total": 67, "additions": 51, "deletions": 16}, "files": [{"sha": "90f6bf8757865ce7c1d95076c2ac048d5664bd9c", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 44, "deletions": 16, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/02d5f090dcefb43625dc67d0d9147dbc9776c9b1/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02d5f090dcefb43625dc67d0d9147dbc9776c9b1/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=02d5f090dcefb43625dc67d0d9147dbc9776c9b1", "patch": "@@ -27,6 +27,7 @@ use middle::ty;\n use util::common::indenter;\n use util::ppaux::ty_to_str;\n \n+use core::option::None;\n use core::uint;\n use core::vec;\n use syntax::ast;\n@@ -413,30 +414,57 @@ pub fn write_content(bcx: block,\n                         return bcx;\n                     }\n \n-                    let tmpdatum = unpack_datum!(bcx, {\n+                    // Some cleanup would be required in the case in which failure happens\n+                    // during a copy. But given that copy constructors are not overridable,\n+                    // this can only happen as a result of OOM. So we just skip out on the\n+                    // cleanup since things would *probably* be broken at that point anyways.\n+\n+                    let elem = unpack_datum!(bcx, {\n                         expr::trans_to_datum(bcx, element)\n                     });\n \n-                    let mut temp_cleanups = ~[];\n+                    let next_bcx = sub_block(bcx, ~\"expr_repeat: while next\");\n+                    let loop_bcx = loop_scope_block(bcx, next_bcx, None, ~\"expr_repeat\", None);\n+                    let cond_bcx = scope_block(loop_bcx, None, ~\"expr_repeat: loop cond\");\n+                    let set_bcx = scope_block(loop_bcx, None, ~\"expr_repeat: body: set\");\n+                    let inc_bcx = scope_block(loop_bcx, None, ~\"expr_repeat: body: inc\");\n+                    Br(bcx, loop_bcx.llbb);\n \n-                    for uint::range(0, count) |i| {\n-                        let lleltptr = GEPi(bcx, lldest, [i]);\n-                        if i < count - 1 {\n-                            // Copy all but the last one in.\n-                            bcx = tmpdatum.copy_to(bcx, INIT, lleltptr);\n-                        } else {\n-                            // Move the last one in.\n-                            bcx = tmpdatum.move_to(bcx, INIT, lleltptr);\n-                        }\n-                        add_clean_temp_mem(bcx, lleltptr, vt.unit_ty);\n-                        temp_cleanups.push(lleltptr);\n+                    let loop_counter = {\n+                        // i = 0\n+                        let i = alloca(loop_bcx, bcx.ccx().int_type);\n+                        Store(loop_bcx, C_uint(bcx.ccx(), 0), i);\n+\n+                        Br(loop_bcx, cond_bcx.llbb);\n+                        i\n+                    };\n+\n+                    { // i < count\n+                        let lhs = Load(cond_bcx, loop_counter);\n+                        let rhs = C_uint(bcx.ccx(), count);\n+                        let cond_val = ICmp(cond_bcx, lib::llvm::IntULT, lhs, rhs);\n+\n+                        CondBr(cond_bcx, cond_val, set_bcx.llbb, next_bcx.llbb);\n                     }\n \n-                    for vec::each(temp_cleanups) |cleanup| {\n-                        revoke_clean(bcx, *cleanup);\n+                    { // v[i] = elem\n+                        let i = Load(set_bcx, loop_counter);\n+                        let lleltptr = InBoundsGEP(set_bcx, lldest, [i]);\n+                        let set_bcx = elem.copy_to(set_bcx, INIT, lleltptr);\n+\n+                        Br(set_bcx, inc_bcx.llbb);\n                     }\n \n-                    return bcx;\n+                    { // i += 1\n+                        let i = Load(inc_bcx, loop_counter);\n+                        let plusone = Add(inc_bcx, i, C_uint(bcx.ccx(), 1));\n+                        Store(inc_bcx, plusone, loop_counter);\n+\n+                        Br(inc_bcx, cond_bcx.llbb);\n+                    }\n+\n+                    return next_bcx;\n+\n                 }\n             }\n         }"}, {"sha": "a22384a6b53d010865f109524752fc2bcdbba1f8", "filename": "src/test/run-pass/repeated-vector-syntax.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/02d5f090dcefb43625dc67d0d9147dbc9776c9b1/src%2Ftest%2Frun-pass%2Frepeated-vector-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02d5f090dcefb43625dc67d0d9147dbc9776c9b1/src%2Ftest%2Frun-pass%2Frepeated-vector-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frepeated-vector-syntax.rs?ref=02d5f090dcefb43625dc67d0d9147dbc9776c9b1", "patch": "@@ -9,8 +9,15 @@\n // except according to those terms.\n \n pub fn main() {\n+    struct Foo { a: ~str }\n+\n+    let v = [ ~Foo { a: ~\"Hello!\" }, ..129 ];\n+    let w = [ ~\"Hello!\", ..129 ];\n     let x = [ @[true], ..512 ];\n     let y = [ 0, ..1 ];\n+\n+    error!(\"%?\", v);\n+    error!(\"%?\", w);\n     error!(\"%?\", x);\n     error!(\"%?\", y);\n }"}]}