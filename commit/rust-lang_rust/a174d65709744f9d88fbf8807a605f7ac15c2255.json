{"sha": "a174d65709744f9d88fbf8807a605f7ac15c2255", "node_id": "C_kwDOAAsO6NoAKGExNzRkNjU3MDk3NDRmOWQ4OGZiZjg4MDdhNjA1ZjdhYzE1YzIyNTU", "commit": {"author": {"name": "David Venhoek", "email": "david@venhoek.nl", "date": "2022-06-22T09:24:34Z"}, "committer": {"name": "David Venhoek", "email": "david@venhoek.nl", "date": "2022-06-22T09:47:22Z"}, "message": "Added llvm lifetime annotations to function call argument temporaries.\n\nThe goal of this change is to ensure that llvm will do stack slot\noptimization on these temporaries. This ensures that in code like:\n```rust\nconst A: [u8; 1024] = [0; 1024];\n\nfn copy_const() {\n    f(A);\n    f(A);\n}\n```\nwe only use 1024 bytes of stack space, instead of 2048 bytes.", "tree": {"sha": "4cd6ed2214190f72f42010f0b8816417e76cdfe9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cd6ed2214190f72f42010f0b8816417e76cdfe9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a174d65709744f9d88fbf8807a605f7ac15c2255", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a174d65709744f9d88fbf8807a605f7ac15c2255", "html_url": "https://github.com/rust-lang/rust/commit/a174d65709744f9d88fbf8807a605f7ac15c2255", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a174d65709744f9d88fbf8807a605f7ac15c2255/comments", "author": {"login": "davidv1992", "id": 518970, "node_id": "MDQ6VXNlcjUxODk3MA==", "avatar_url": "https://avatars.githubusercontent.com/u/518970?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidv1992", "html_url": "https://github.com/davidv1992", "followers_url": "https://api.github.com/users/davidv1992/followers", "following_url": "https://api.github.com/users/davidv1992/following{/other_user}", "gists_url": "https://api.github.com/users/davidv1992/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidv1992/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidv1992/subscriptions", "organizations_url": "https://api.github.com/users/davidv1992/orgs", "repos_url": "https://api.github.com/users/davidv1992/repos", "events_url": "https://api.github.com/users/davidv1992/events{/privacy}", "received_events_url": "https://api.github.com/users/davidv1992/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidv1992", "id": 518970, "node_id": "MDQ6VXNlcjUxODk3MA==", "avatar_url": "https://avatars.githubusercontent.com/u/518970?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidv1992", "html_url": "https://github.com/davidv1992", "followers_url": "https://api.github.com/users/davidv1992/followers", "following_url": "https://api.github.com/users/davidv1992/following{/other_user}", "gists_url": "https://api.github.com/users/davidv1992/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidv1992/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidv1992/subscriptions", "organizations_url": "https://api.github.com/users/davidv1992/orgs", "repos_url": "https://api.github.com/users/davidv1992/repos", "events_url": "https://api.github.com/users/davidv1992/events{/privacy}", "received_events_url": "https://api.github.com/users/davidv1992/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d829a0922d865d7a77fb284424fd8ba6afaea3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d829a0922d865d7a77fb284424fd8ba6afaea3b", "html_url": "https://github.com/rust-lang/rust/commit/3d829a0922d865d7a77fb284424fd8ba6afaea3b"}], "stats": {"total": 18, "additions": 16, "deletions": 2}, "files": [{"sha": "10d8de48f6640509864b0fd9de3c3f3971aa3967", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a174d65709744f9d88fbf8807a605f7ac15c2255/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a174d65709744f9d88fbf8807a605f7ac15c2255/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=a174d65709744f9d88fbf8807a605f7ac15c2255", "patch": "@@ -132,6 +132,7 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n         llargs: &[Bx::Value],\n         destination: Option<(ReturnDest<'tcx, Bx::Value>, mir::BasicBlock)>,\n         cleanup: Option<mir::BasicBlock>,\n+        argument_tmps: &[PlaceRef<'tcx, <Bx as BackendTypes>::Value>],\n     ) {\n         // If there is a cleanup block and the function we're calling can unwind, then\n         // do an invoke, otherwise do a call.\n@@ -172,6 +173,9 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n             if let Some((ret_dest, target)) = destination {\n                 bx.switch_to_block(fx.llbb(target));\n                 fx.set_debug_loc(bx, self.terminator.source_info);\n+                for tmp in argument_tmps {\n+                    bx.lifetime_end(tmp.llval, tmp.layout.size);\n+                }\n                 fx.store_return(bx, ret_dest, &fn_abi.ret, invokeret);\n             }\n         } else {\n@@ -186,6 +190,9 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n             }\n \n             if let Some((ret_dest, target)) = destination {\n+                for tmp in argument_tmps {\n+                    bx.lifetime_end(tmp.llval, tmp.layout.size);\n+                }\n                 fx.store_return(bx, ret_dest, &fn_abi.ret, llret);\n                 self.funclet_br(fx, bx, target);\n             } else {\n@@ -415,6 +422,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             args,\n             Some((ReturnDest::Nothing, target)),\n             unwind,\n+            &[],\n         );\n     }\n \n@@ -492,7 +500,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         let (fn_abi, llfn) = common::build_langcall(&bx, Some(span), lang_item);\n \n         // Codegen the actual panic invoke/call.\n-        helper.do_call(self, &mut bx, fn_abi, llfn, &args, None, cleanup);\n+        helper.do_call(self, &mut bx, fn_abi, llfn, &args, None, cleanup, &[]);\n     }\n \n     fn codegen_abort_terminator(\n@@ -508,7 +516,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         let (fn_abi, llfn) = common::build_langcall(&bx, Some(span), LangItem::PanicNoUnwind);\n \n         // Codegen the actual panic invoke/call.\n-        helper.do_call(self, &mut bx, fn_abi, llfn, &[], None, None);\n+        helper.do_call(self, &mut bx, fn_abi, llfn, &[], None, None, &[]);\n     }\n \n     /// Returns `true` if this is indeed a panic intrinsic and codegen is done.\n@@ -579,6 +587,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     &[msg.0, msg.1, location],\n                     target.as_ref().map(|bb| (ReturnDest::Nothing, *bb)),\n                     cleanup,\n+                    &[],\n                 );\n             } else {\n                 // a NOP\n@@ -786,6 +795,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             (args, None)\n         };\n \n+        let mut argument_tmps = vec![];\n         'make_args: for (i, arg) in first_args.iter().enumerate() {\n             let mut op = self.codegen_operand(&mut bx, arg);\n \n@@ -851,8 +861,10 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 (&mir::Operand::Copy(_), Ref(_, None, _))\n                 | (&mir::Operand::Constant(_), Ref(_, None, _)) => {\n                     let tmp = PlaceRef::alloca(&mut bx, op.layout);\n+                    bx.lifetime_start(tmp.llval, tmp.layout.size);\n                     op.val.store(&mut bx, tmp);\n                     op.val = Ref(tmp.llval, None, tmp.align);\n+                    argument_tmps.push(tmp);\n                 }\n                 _ => {}\n             }\n@@ -925,6 +937,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 &llargs,\n                 target.as_ref().map(|&target| (ret_dest, target)),\n                 cleanup,\n+                &argument_tmps,\n             );\n \n             bx.switch_to_block(bb_fail);\n@@ -942,6 +955,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             &llargs,\n             target.as_ref().map(|&target| (ret_dest, target)),\n             cleanup,\n+            &argument_tmps,\n         );\n     }\n "}]}