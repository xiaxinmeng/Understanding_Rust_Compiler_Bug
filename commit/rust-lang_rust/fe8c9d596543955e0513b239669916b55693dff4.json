{"sha": "fe8c9d596543955e0513b239669916b55693dff4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlOGM5ZDU5NjU0Mzk1NWUwNTEzYjIzOTY2OTkxNmI1NTY5M2RmZjQ=", "commit": {"author": {"name": "Donald Robertson", "email": "donaldarobertson89@gmail.com", "date": "2018-05-29T07:46:14Z"}, "committer": {"name": "Donald Robertson", "email": "donaldarobertson89@gmail.com", "date": "2018-06-04T18:43:03Z"}, "message": "Ensuring correct lint message is output for Option and Result type", "tree": {"sha": "f7ac6d156c95d5593cd7972a8164f51716d5b879", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7ac6d156c95d5593cd7972a8164f51716d5b879"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe8c9d596543955e0513b239669916b55693dff4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe8c9d596543955e0513b239669916b55693dff4", "html_url": "https://github.com/rust-lang/rust/commit/fe8c9d596543955e0513b239669916b55693dff4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe8c9d596543955e0513b239669916b55693dff4/comments", "author": null, "committer": null, "parents": [{"sha": "2b36017bada5f179d3b6d7b57df0559ba5eeb25b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b36017bada5f179d3b6d7b57df0559ba5eeb25b", "html_url": "https://github.com/rust-lang/rust/commit/2b36017bada5f179d3b6d7b57df0559ba5eeb25b"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "696bd02cf55b1f0dac4bdd2bdfb139a31ff28a1f", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fe8c9d596543955e0513b239669916b55693dff4/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe8c9d596543955e0513b239669916b55693dff4/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=fe8c9d596543955e0513b239669916b55693dff4", "patch": "@@ -998,13 +998,20 @@ fn lint_expect_fun_call(cx: &LateContext, expr: &hir::Expr, method_span: Span, n\n         cx: &LateContext,\n         name: &str,\n         method_span: Span,\n+        self_expr: &hir::Expr,\n         arg: &hir::Expr,\n         span: Span,\n     ) {\n         if name != \"expect\" {\n             return;\n         }\n \n+        let self_ty = cx.tables.expr_ty(self_expr);\n+        let closure = match match_type(cx, self_ty, &paths::OPTION) {\n+            true => \"||\",\n+            false => \"|_|\",\n+        };\n+\n         // don't lint for constant values\n         let owner_def = cx.tcx.hir.get_parent_did(arg.id);\n         let promotable = cx.tcx.rvalue_promotable_map(owner_def).contains(&arg.hir_id.local_id);\n@@ -1021,14 +1028,14 @@ fn lint_expect_fun_call(cx: &LateContext, expr: &hir::Expr, method_span: Span, n\n             span_replace_word,\n             &format!(\"use of `{}` followed by a function call\", name),\n             \"try this\",\n-            format!(\"unwrap_or_else(|_| panic!({}))\", sugg),\n+            format!(\"unwrap_or_else({} panic!({}))\", closure, sugg),\n         );\n     }\n \n     if args.len() == 2 {\n         match args[1].node {\n             hir::ExprLit(_) => {},\n-            _ => check_general_case(cx, name, method_span, &args[1], expr.span),\n+            _ => check_general_case(cx, name, method_span, &args[0], &args[1], expr.span),\n         }\n     }\n }"}, {"sha": "f3c608cb715699b19b486645836c8a72e3d9bc7b", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe8c9d596543955e0513b239669916b55693dff4/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe8c9d596543955e0513b239669916b55693dff4/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=fe8c9d596543955e0513b239669916b55693dff4", "patch": "@@ -427,15 +427,15 @@ error: use of `expect` followed by a function call\n    --> $DIR/methods.rs:355:26\n     |\n 355 |     with_none_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n-    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| panic!(&format!(\"Error {}: fake error\", error_code)))`\n+    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(&format!(\"Error {}: fake error\", error_code)))`\n     |\n     = note: `-D expect-fun-call` implied by `-D warnings`\n \n error: use of `expect` followed by a function call\n    --> $DIR/methods.rs:358:26\n     |\n 358 |     with_none_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n-    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| panic!(format!(\"Error {}: fake error\", error_code).as_str()))`\n+    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(format!(\"Error {}: fake error\", error_code).as_str()))`\n \n error: use of `expect` followed by a function call\n    --> $DIR/methods.rs:368:25"}]}