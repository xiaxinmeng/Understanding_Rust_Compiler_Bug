{"sha": "34d5b5450cf8728321a77f3e32393197fd66a325", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0ZDViNTQ1MGNmODcyODMyMWE3N2YzZTMyMzkzMTk3ZmQ2NmEzMjU=", "commit": {"author": {"name": "Markus Westerlind", "email": "marwes91@gmail.com", "date": "2015-06-14T16:24:52Z"}, "committer": {"name": "Markus", "email": "marwes91@gmail.com", "date": "2015-06-14T16:27:05Z"}, "message": "Replaced a comment mentioning a fixed issue\n\nReplaced it with a comment mentioning the rationale for checking the discriminants first.", "tree": {"sha": "e6b266612bc6f6d2f4b7f8dd1dd02d1c98df9e81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6b266612bc6f6d2f4b7f8dd1dd02d1c98df9e81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34d5b5450cf8728321a77f3e32393197fd66a325", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34d5b5450cf8728321a77f3e32393197fd66a325", "html_url": "https://github.com/rust-lang/rust/commit/34d5b5450cf8728321a77f3e32393197fd66a325", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34d5b5450cf8728321a77f3e32393197fd66a325/comments", "author": {"login": "Marwes", "id": 957312, "node_id": "MDQ6VXNlcjk1NzMxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/957312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Marwes", "html_url": "https://github.com/Marwes", "followers_url": "https://api.github.com/users/Marwes/followers", "following_url": "https://api.github.com/users/Marwes/following{/other_user}", "gists_url": "https://api.github.com/users/Marwes/gists{/gist_id}", "starred_url": "https://api.github.com/users/Marwes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Marwes/subscriptions", "organizations_url": "https://api.github.com/users/Marwes/orgs", "repos_url": "https://api.github.com/users/Marwes/repos", "events_url": "https://api.github.com/users/Marwes/events{/privacy}", "received_events_url": "https://api.github.com/users/Marwes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Marwes", "id": 957312, "node_id": "MDQ6VXNlcjk1NzMxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/957312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Marwes", "html_url": "https://github.com/Marwes", "followers_url": "https://api.github.com/users/Marwes/followers", "following_url": "https://api.github.com/users/Marwes/following{/other_user}", "gists_url": "https://api.github.com/users/Marwes/gists{/gist_id}", "starred_url": "https://api.github.com/users/Marwes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Marwes/subscriptions", "organizations_url": "https://api.github.com/users/Marwes/orgs", "repos_url": "https://api.github.com/users/Marwes/repos", "events_url": "https://api.github.com/users/Marwes/events{/privacy}", "received_events_url": "https://api.github.com/users/Marwes/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7721d46bd76967e73a04b7944651094d3d2f9274", "url": "https://api.github.com/repos/rust-lang/rust/commits/7721d46bd76967e73a04b7944651094d3d2f9274", "html_url": "https://github.com/rust-lang/rust/commit/7721d46bd76967e73a04b7944651094d3d2f9274"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "e7d242ab70364300b8a08f4b29ba1023d795d3c6", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34d5b5450cf8728321a77f3e32393197fd66a325/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34d5b5450cf8728321a77f3e32393197fd66a325/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=34d5b5450cf8728321a77f3e32393197fd66a325", "patch": "@@ -1042,10 +1042,12 @@ impl<'a> MethodDef<'a> {\n     /// variants where all of the variants match, and one catch-all for\n     /// when one does not match.\n \n+    /// As an optimization we generate code which checks whether all variants\n+    /// match first which makes llvm see that C-like enums can be compiled into\n+    /// a simple equality check (for PartialEq).\n+\n     /// The catch-all handler is provided access the variant index values\n-    /// for each of the self-args, carried in precomputed variables. (Nota\n-    /// bene: the variant index values are not necessarily the\n-    /// discriminant values.  See issue #15523.)\n+    /// for each of the self-args, carried in precomputed variables.\n \n     /// ```{.text}\n     /// let __self0_vi = unsafe {"}]}