{"sha": "d02fb3bcf42c05740a47fdfb0d9e5dd8ec24ff37", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwMmZiM2JjZjQyYzA1NzQwYTQ3ZmRmYjBkOWU1ZGQ4ZWMyNGZmMzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-26T18:27:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-26T18:27:19Z"}, "message": "Auto merge of #42059 - derekdreery:bugfix/fix_emscripten_tests, r=alexcrichton\n\nMake compiletest set cwd before running js tests\n\nProposed fix for #38800.\n\nNot all tests pass yet - I will mention failures here once the test suite has finished.", "tree": {"sha": "c8843a67bdb0f73fbfa3bab96f9dd8c3c160a2b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8843a67bdb0f73fbfa3bab96f9dd8c3c160a2b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d02fb3bcf42c05740a47fdfb0d9e5dd8ec24ff37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d02fb3bcf42c05740a47fdfb0d9e5dd8ec24ff37", "html_url": "https://github.com/rust-lang/rust/commit/d02fb3bcf42c05740a47fdfb0d9e5dd8ec24ff37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d02fb3bcf42c05740a47fdfb0d9e5dd8ec24ff37/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fc3aec4316a76429a5a0c8d2eccb19bf81982d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fc3aec4316a76429a5a0c8d2eccb19bf81982d6", "html_url": "https://github.com/rust-lang/rust/commit/2fc3aec4316a76429a5a0c8d2eccb19bf81982d6"}, {"sha": "874ecdc09faf94d6591a803f7d73f60fd629cd70", "url": "https://api.github.com/repos/rust-lang/rust/commits/874ecdc09faf94d6591a803f7d73f60fd629cd70", "html_url": "https://github.com/rust-lang/rust/commit/874ecdc09faf94d6591a803f7d73f60fd629cd70"}], "stats": {"total": 88, "additions": 58, "deletions": 30}, "files": [{"sha": "bf9bf77e649f377d10b020bbd36b7363368d1802", "filename": "src/ci/docker/disabled/wasm32/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d02fb3bcf42c05740a47fdfb0d9e5dd8ec24ff37/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d02fb3bcf42c05740a47fdfb0d9e5dd8ec24ff37/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32%2FDockerfile?ref=d02fb3bcf42c05740a47fdfb0d9e5dd8ec24ff37", "patch": "@@ -19,14 +19,14 @@ RUN sh /scripts/dumb-init.sh\n # emscripten\n COPY scripts/emscripten.sh /scripts/\n RUN bash /scripts/emscripten.sh\n-COPY disabled/wasm32/node.sh /usr/local/bin/node\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n ENV PATH=$PATH:/emsdk-portable\n ENV PATH=$PATH:/emsdk-portable/clang/e1.37.13_64bit/\n ENV PATH=$PATH:/emsdk-portable/emscripten/1.37.13/\n+ENV PATH=$PATH:/node-v8.0.0-linux-x64/bin/\n ENV EMSCRIPTEN=/emsdk-portable/emscripten/1.37.13/\n ENV BINARYEN_ROOT=/emsdk-portable/clang/e1.37.13_64bit/binaryen/\n ENV EM_CONFIG=/emsdk-portable/.emscripten"}, {"sha": "dfa7f221ffa2022ae0b235b2e4d0ba3c579688f6", "filename": "src/ci/docker/disabled/wasm32/node.sh", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2fc3aec4316a76429a5a0c8d2eccb19bf81982d6/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32%2Fnode.sh", "raw_url": "https://github.com/rust-lang/rust/raw/2fc3aec4316a76429a5a0c8d2eccb19bf81982d6/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32%2Fnode.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32%2Fnode.sh?ref=2fc3aec4316a76429a5a0c8d2eccb19bf81982d6", "patch": "@@ -1,18 +0,0 @@\n-#!/bin/bash\n-# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-path=\"$(dirname $1)\"\n-file=\"$(basename $1)\"\n-\n-shift\n-\n-cd \"$path\"\n-exec /node-v8.0.0-linux-x64/bin/node \"$file\" \"$@\""}, {"sha": "b6d89c1f51ae68183780faffece20318e8b5b206", "filename": "src/tools/compiletest/src/procsrv.rs", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d02fb3bcf42c05740a47fdfb0d9e5dd8ec24ff37/src%2Ftools%2Fcompiletest%2Fsrc%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d02fb3bcf42c05740a47fdfb0d9e5dd8ec24ff37/src%2Ftools%2Fcompiletest%2Fsrc%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fprocsrv.rs?ref=d02fb3bcf42c05740a47fdfb0d9e5dd8ec24ff37", "patch": "@@ -9,11 +9,14 @@\n // except according to those terms.\n \n use std::env;\n+use std::ffi::OsString;\n use std::io::prelude::*;\n use std::io;\n use std::path::PathBuf;\n use std::process::{Child, Command, ExitStatus, Output, Stdio};\n \n+/// Get the name of the environment variable that holds dynamic library\n+/// locations\n pub fn dylib_env_var() -> &'static str {\n     if cfg!(windows) {\n         \"PATH\"\n@@ -26,11 +29,13 @@ pub fn dylib_env_var() -> &'static str {\n     }\n }\n \n+/// Add `lib_path` and `aux_path` (if it is `Some`) to the dynamic library\n+/// env var\n fn add_target_env(cmd: &mut Command, lib_path: &str, aux_path: Option<&str>) {\n     // Need to be sure to put both the lib_path and the aux path in the dylib\n     // search path for the child.\n     let var = dylib_env_var();\n-    let mut path = env::split_paths(&env::var_os(var).unwrap_or_default())\n+    let mut path = env::split_paths(&env::var_os(var).unwrap_or(OsString::new()))\n         .collect::<Vec<_>>();\n     if let Some(p) = aux_path {\n         path.insert(0, PathBuf::from(p))\n@@ -42,18 +47,33 @@ fn add_target_env(cmd: &mut Command, lib_path: &str, aux_path: Option<&str>) {\n     cmd.env(var, newpath);\n }\n \n+/// Represents exit status, stdout and stderr of a completed process\n pub struct Result {\n     pub status: ExitStatus,\n     pub out: String,\n     pub err: String,\n }\n \n+/// Runs a test program\n+///\n+/// # Params\n+///  - `lib_path` Path to search for required library\n+///  - `prog` command to run\n+///  - `aux_path` Optional extra path to search for required\n+///    auxiliary libraries\n+///  - `args` List of arguments to pass to `prog`\n+///  - `env` List of environment variables to set, `.0` is variable name,\n+///    `.1` is value\n+///  - `input` String to be fed as stdin\n+///  - `current_dir` Optional working dir to run command in\n+///\n pub fn run(lib_path: &str,\n            prog: &str,\n            aux_path: Option<&str>,\n            args: &[String],\n            env: Vec<(String, String)>,\n-           input: Option<String>)\n+           input: Option<String>,\n+           current_dir: Option<String>)\n            -> io::Result<Result> {\n \n     let mut cmd = Command::new(prog);\n@@ -66,6 +86,9 @@ pub fn run(lib_path: &str,\n     for (key, val) in env {\n         cmd.env(&key, &val);\n     }\n+    if let Some(cwd) = current_dir {\n+        cmd.current_dir(cwd);\n+    }\n \n     let mut process = cmd.spawn()?;\n     if let Some(input) = input {\n@@ -80,12 +103,14 @@ pub fn run(lib_path: &str,\n     })\n }\n \n+/// Same as `run`, but return process rather than waiting on completion\n pub fn run_background(lib_path: &str,\n                       prog: &str,\n                       aux_path: Option<&str>,\n                       args: &[String],\n                       env: Vec<(String, String)>,\n-                      input: Option<String>)\n+                      input: Option<String>,\n+                      current_dir: Option<String>)\n                       -> io::Result<Child> {\n \n     let mut cmd = Command::new(prog);\n@@ -96,6 +121,9 @@ pub fn run_background(lib_path: &str,\n     for (key, val) in env {\n         cmd.env(&key, &val);\n     }\n+    if let Some(cwd) = current_dir {\n+        cmd.current_dir(cwd);\n+    }\n \n     let mut process = cmd.spawn()?;\n     if let Some(input) = input {"}, {"sha": "c6dc78ef5057d4e5cc98108c5be3c9b45ff42a16", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d02fb3bcf42c05740a47fdfb0d9e5dd8ec24ff37/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d02fb3bcf42c05740a47fdfb0d9e5dd8ec24ff37/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=d02fb3bcf42c05740a47fdfb0d9e5dd8ec24ff37", "patch": "@@ -334,7 +334,8 @@ impl<'test> TestCx<'test> {\n                              self.props.exec_env.clone(),\n                              self.config.compile_lib_path.to_str().unwrap(),\n                              Some(aux_dir.to_str().unwrap()),\n-                             Some(src))\n+                             Some(src),\n+                             None)\n     }\n \n     fn make_pp_args(&self,\n@@ -509,6 +510,7 @@ actual:\\n\\\n                                  self.config.adb_test_dir.clone()\n                              ],\n                              Vec::new(),\n+                             None,\n                              None)\n                     .expect(&format!(\"failed to exec `{:?}`\", self.config.adb_path));\n \n@@ -521,6 +523,7 @@ actual:\\n\\\n                                  \"tcp:5039\".to_owned()\n                              ],\n                              Vec::new(),\n+                             None,\n                              None)\n                     .expect(&format!(\"failed to exec `{:?}`\", self.config.adb_path));\n \n@@ -543,6 +546,7 @@ actual:\\n\\\n                                                               adb_arg.clone()\n                                                           ],\n                                                           Vec::new(),\n+                                                          None,\n                                                           None)\n                     .expect(&format!(\"failed to exec `{:?}`\", self.config.adb_path));\n \n@@ -579,6 +583,7 @@ actual:\\n\\\n                                  None,\n                                  &debugger_opts,\n                                  Vec::new(),\n+                                 None,\n                                  None)\n                     .expect(&format!(\"failed to exec `{:?}`\", gdb_path));\n                 let cmdline = {\n@@ -686,6 +691,7 @@ actual:\\n\\\n                                          environment,\n                                          self.config.run_lib_path.to_str().unwrap(),\n                                          None,\n+                                         None,\n                                          None);\n             }\n         }\n@@ -1231,15 +1237,21 @@ actual:\\n\\\n                                      env,\n                                      self.config.run_lib_path.to_str().unwrap(),\n                                      Some(aux_dir.to_str().unwrap()),\n+                                     None,\n                                      None)\n             }\n             _ => {\n                 let aux_dir = self.aux_output_dir_name();\n+                let working_dir =\n+                    Some(self.output_base_name()\n+                             .parent().unwrap()\n+                             .to_str().unwrap().to_owned());\n                 self.compose_and_run(self.make_run_args(),\n                                      env,\n                                      self.config.run_lib_path.to_str().unwrap(),\n                                      Some(aux_dir.to_str().unwrap()),\n-                                     None)\n+                                     None,\n+                                     working_dir)\n             }\n         }\n     }\n@@ -1317,6 +1329,7 @@ actual:\\n\\\n                                                 Vec::new(),\n                                                 aux_cx.config.compile_lib_path.to_str().unwrap(),\n                                                 Some(aux_dir.to_str().unwrap()),\n+                                                None,\n                                                 None);\n             if !auxres.status.success() {\n                 self.fatal_proc_rec(\n@@ -1330,16 +1343,18 @@ actual:\\n\\\n                              self.props.rustc_env.clone(),\n                              self.config.compile_lib_path.to_str().unwrap(),\n                              Some(aux_dir.to_str().unwrap()),\n-                             input)\n+                             input,\n+                             None)\n     }\n \n     fn compose_and_run(&self,\n                        ProcArgs{ args, prog }: ProcArgs,\n                        procenv: Vec<(String, String)> ,\n                        lib_path: &str,\n                        aux_path: Option<&str>,\n-                       input: Option<String>) -> ProcRes {\n-        self.program_output(lib_path, prog, aux_path, args, procenv, input)\n+                       input: Option<String>,\n+                       working_dir: Option<String>) -> ProcRes {\n+        self.program_output(lib_path, prog, aux_path, args, procenv, input, working_dir)\n     }\n \n     fn make_compile_args(&self,\n@@ -1532,7 +1547,8 @@ actual:\\n\\\n                       aux_path: Option<&str>,\n                       args: Vec<String>,\n                       env: Vec<(String, String)>,\n-                      input: Option<String>)\n+                      input: Option<String>,\n+                      working_dir: Option<String>)\n                       -> ProcRes {\n         let cmdline =\n         {\n@@ -1542,6 +1558,7 @@ actual:\\n\\\n             logv(self.config, format!(\"executing {}\", cmdline));\n             cmdline\n         };\n+\n         let procsrv::Result {\n             out,\n             err,\n@@ -1551,7 +1568,8 @@ actual:\\n\\\n                          aux_path,\n                          &args,\n                          env,\n-                         input).expect(&format!(\"failed to exec `{}`\", prog));\n+                         input,\n+                         working_dir).expect(&format!(\"failed to exec `{}`\", prog));\n         self.dump_output(&out, &err);\n         ProcRes {\n             status: status,\n@@ -1715,7 +1733,7 @@ actual:\\n\\\n             args: vec![format!(\"-input-file={}\", irfile.to_str().unwrap()),\n                        self.testpaths.file.to_str().unwrap().to_owned()]\n         };\n-        self.compose_and_run(proc_args, Vec::new(), \"\", None, None)\n+        self.compose_and_run(proc_args, Vec::new(), \"\", None, None, None)\n     }\n \n     fn run_codegen_test(&self) {"}]}