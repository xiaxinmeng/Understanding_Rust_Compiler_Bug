{"sha": "c0aeaa1bfd5b8b6ebf1b57623e48551a0fe25239", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwYWVhYTFiZmQ1YjhiNmViZjFiNTc2MjNlNDg1NTFhMGZlMjUyMzk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-12T19:14:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-12T19:14:10Z"}, "message": "Rollup merge of #60751 - Centril:general-cleanup, r=petrochenkov\n\nAssorted cleanup in parser & AST validation\n\nr? @petrochenkov\n\nExtracted out of a larger PR.", "tree": {"sha": "e4f1708f5398ad2da4a947fc42a7265c6a191bb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4f1708f5398ad2da4a947fc42a7265c6a191bb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0aeaa1bfd5b8b6ebf1b57623e48551a0fe25239", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc2HCCCRBK7hj4Ov3rIwAAdHIIAAFOiLRrHcD36wmnxQo5jati\nPNJE4Vcgt54cAolAmWt464k2fHvZLUcnQxxwtGkTRECqptwL2x4KPFvUwrYVJyhq\npurzA7ldLPz4hMv9iYOdo5iugpTZg6QAklvU3LSOywCdz2ITiVHL7GjaNJ2AMX+q\nACPRm5GEw1eNHd09TS0badgWsVf3IxU8SnnPt5dSLl7GLzDIc9VMy6T1oHk2tdBf\n+iIwQ8EZSSYjBcQjZqLmDmyEWAqMbJlWOxdDrnIGXBh4t3WyHTM7bUbeniSh6Gzp\nvk1lsMuxe9EQRy9aLIfbcDPxIZlMCp69v57rHJhoE60cn5R0bD6hnVkj4/s2Iuk=\n=+f4H\n-----END PGP SIGNATURE-----\n", "payload": "tree e4f1708f5398ad2da4a947fc42a7265c6a191bb3\nparent d11b6be6b90ac1bba3f3d5cf90773ba3a912db23\nparent 4aa4a8f776d9ab3f0110f74f85cc8313b9e4d604\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1557688450 +0200\ncommitter GitHub <noreply@github.com> 1557688450 +0200\n\nRollup merge of #60751 - Centril:general-cleanup, r=petrochenkov\n\nAssorted cleanup in parser & AST validation\n\nr? @petrochenkov\n\nExtracted out of a larger PR.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0aeaa1bfd5b8b6ebf1b57623e48551a0fe25239", "html_url": "https://github.com/rust-lang/rust/commit/c0aeaa1bfd5b8b6ebf1b57623e48551a0fe25239", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0aeaa1bfd5b8b6ebf1b57623e48551a0fe25239/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d11b6be6b90ac1bba3f3d5cf90773ba3a912db23", "url": "https://api.github.com/repos/rust-lang/rust/commits/d11b6be6b90ac1bba3f3d5cf90773ba3a912db23", "html_url": "https://github.com/rust-lang/rust/commit/d11b6be6b90ac1bba3f3d5cf90773ba3a912db23"}, {"sha": "4aa4a8f776d9ab3f0110f74f85cc8313b9e4d604", "url": "https://api.github.com/repos/rust-lang/rust/commits/4aa4a8f776d9ab3f0110f74f85cc8313b9e4d604", "html_url": "https://github.com/rust-lang/rust/commit/4aa4a8f776d9ab3f0110f74f85cc8313b9e4d604"}], "stats": {"total": 109, "additions": 49, "deletions": 60}, "files": [{"sha": "16935796d4ba71838b26c9b373d32d9e8908c6ac", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c0aeaa1bfd5b8b6ebf1b57623e48551a0fe25239/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0aeaa1bfd5b8b6ebf1b57623e48551a0fe25239/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=c0aeaa1bfd5b8b6ebf1b57623e48551a0fe25239", "patch": "@@ -54,21 +54,21 @@ struct AstValidator<'a> {\n     has_proc_macro_decls: bool,\n     has_global_allocator: bool,\n \n-    // Used to ban nested `impl Trait`, e.g., `impl Into<impl Debug>`.\n-    // Nested `impl Trait` _is_ allowed in associated type position,\n-    // e.g `impl Iterator<Item=impl Debug>`\n+    /// Used to ban nested `impl Trait`, e.g., `impl Into<impl Debug>`.\n+    /// Nested `impl Trait` _is_ allowed in associated type position,\n+    /// e.g `impl Iterator<Item=impl Debug>`\n     outer_impl_trait: Option<OuterImplTrait>,\n \n-    // Used to ban `impl Trait` in path projections like `<impl Iterator>::Item`\n-    // or `Foo::Bar<impl Trait>`\n+    /// Used to ban `impl Trait` in path projections like `<impl Iterator>::Item`\n+    /// or `Foo::Bar<impl Trait>`\n     is_impl_trait_banned: bool,\n \n-    // rust-lang/rust#57979: the ban of nested `impl Trait` was buggy\n-    // until PRs #57730 and #57981 landed: it would jump directly to\n-    // walk_ty rather than visit_ty (or skip recurring entirely for\n-    // impl trait in projections), and thus miss some cases. We track\n-    // whether we should downgrade to a warning for short-term via\n-    // these booleans.\n+    /// rust-lang/rust#57979: the ban of nested `impl Trait` was buggy\n+    /// until PRs #57730 and #57981 landed: it would jump directly to\n+    /// walk_ty rather than visit_ty (or skip recurring entirely for\n+    /// impl trait in projections), and thus miss some cases. We track\n+    /// whether we should downgrade to a warning for short-term via\n+    /// these booleans.\n     warning_period_57979_didnt_record_next_impl_trait: bool,\n     warning_period_57979_impl_trait_in_proj: bool,\n }"}, {"sha": "14af3f71e50f0246237675c14dc5a44a39847fa7", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 38, "deletions": 49, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/c0aeaa1bfd5b8b6ebf1b57623e48551a0fe25239/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0aeaa1bfd5b8b6ebf1b57623e48551a0fe25239/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c0aeaa1bfd5b8b6ebf1b57623e48551a0fe25239", "patch": "@@ -1877,7 +1877,7 @@ impl<'a> Parser<'a> {\n         Ok(MutTy { ty: t, mutbl: mutbl })\n     }\n \n-    fn is_named_argument(&mut self) -> bool {\n+    fn is_named_argument(&self) -> bool {\n         let offset = match self.token {\n             token::Interpolated(ref nt) => match **nt {\n                 token::NtPat(..) => return self.look_ahead(1, |t| t == &token::Colon),\n@@ -2469,27 +2469,27 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    fn mk_expr(&mut self, span: Span, node: ExprKind, attrs: ThinVec<Attribute>) -> P<Expr> {\n+    fn mk_expr(&self, span: Span, node: ExprKind, attrs: ThinVec<Attribute>) -> P<Expr> {\n         P(Expr { node, span, attrs, id: ast::DUMMY_NODE_ID })\n     }\n \n-    fn mk_unary(&mut self, unop: ast::UnOp, expr: P<Expr>) -> ast::ExprKind {\n+    fn mk_unary(&self, unop: ast::UnOp, expr: P<Expr>) -> ast::ExprKind {\n         ExprKind::Unary(unop, expr)\n     }\n \n-    fn mk_binary(&mut self, binop: ast::BinOp, lhs: P<Expr>, rhs: P<Expr>) -> ast::ExprKind {\n+    fn mk_binary(&self, binop: ast::BinOp, lhs: P<Expr>, rhs: P<Expr>) -> ast::ExprKind {\n         ExprKind::Binary(binop, lhs, rhs)\n     }\n \n-    fn mk_call(&mut self, f: P<Expr>, args: Vec<P<Expr>>) -> ast::ExprKind {\n+    fn mk_call(&self, f: P<Expr>, args: Vec<P<Expr>>) -> ast::ExprKind {\n         ExprKind::Call(f, args)\n     }\n \n-    fn mk_index(&mut self, expr: P<Expr>, idx: P<Expr>) -> ast::ExprKind {\n+    fn mk_index(&self, expr: P<Expr>, idx: P<Expr>) -> ast::ExprKind {\n         ExprKind::Index(expr, idx)\n     }\n \n-    fn mk_range(&mut self,\n+    fn mk_range(&self,\n                     start: Option<P<Expr>>,\n                     end: Option<P<Expr>>,\n                     limits: RangeLimits)\n@@ -2501,7 +2501,7 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    fn mk_assign_op(&mut self, binop: ast::BinOp,\n+    fn mk_assign_op(&self, binop: ast::BinOp,\n                         lhs: P<Expr>, rhs: P<Expr>) -> ast::ExprKind {\n         ExprKind::AssignOp(binop, lhs, rhs)\n     }\n@@ -2641,13 +2641,12 @@ impl<'a> Parser<'a> {\n                     hi = path.span;\n                     return Ok(self.mk_expr(lo.to(hi), ExprKind::Path(Some(qself), path), attrs));\n                 }\n-                if self.span.rust_2018() && self.check_keyword(keywords::Async)\n-                {\n-                    if self.is_async_block() { // check for `async {` and `async move {`\n-                        return self.parse_async_block(attrs);\n+                if self.span.rust_2018() && self.check_keyword(keywords::Async) {\n+                    return if self.is_async_block() { // check for `async {` and `async move {`\n+                        self.parse_async_block(attrs)\n                     } else {\n-                        return self.parse_lambda_expr(attrs);\n-                    }\n+                        self.parse_lambda_expr(attrs)\n+                    };\n                 }\n                 if self.check_keyword(keywords::Move) || self.check_keyword(keywords::Static) {\n                     return self.parse_lambda_expr(attrs);\n@@ -3572,7 +3571,8 @@ impl<'a> Parser<'a> {\n             } else {\n                 self.restrictions\n             };\n-            if op.precedence() < min_prec {\n+            let prec = op.precedence();\n+            if prec < min_prec {\n                 break;\n             }\n             // Check for deprecated `...` syntax\n@@ -3613,8 +3613,7 @@ impl<'a> Parser<'a> {\n                 // We have 2 alternatives here: `x..y`/`x..=y` and `x..`/`x..=` The other\n                 // two variants are handled with `parse_prefix_range_expr` call above.\n                 let rhs = if self.is_at_start_of_range_notation_rhs() {\n-                    Some(self.parse_assoc_expr_with(op.precedence() + 1,\n-                                                    LhsExpr::NotYetParsed)?)\n+                    Some(self.parse_assoc_expr_with(prec + 1, LhsExpr::NotYetParsed)?)\n                 } else {\n                     None\n                 };\n@@ -3634,28 +3633,18 @@ impl<'a> Parser<'a> {\n                 break\n             }\n \n-            let rhs = match op.fixity() {\n-                Fixity::Right => self.with_res(\n-                    restrictions - Restrictions::STMT_EXPR,\n-                    |this| {\n-                        this.parse_assoc_expr_with(op.precedence(),\n-                            LhsExpr::NotYetParsed)\n-                }),\n-                Fixity::Left => self.with_res(\n-                    restrictions - Restrictions::STMT_EXPR,\n-                    |this| {\n-                        this.parse_assoc_expr_with(op.precedence() + 1,\n-                            LhsExpr::NotYetParsed)\n-                }),\n+            let fixity = op.fixity();\n+            let prec_adjustment = match fixity {\n+                Fixity::Right => 0,\n+                Fixity::Left => 1,\n                 // We currently have no non-associative operators that are not handled above by\n                 // the special cases. The code is here only for future convenience.\n-                Fixity::None => self.with_res(\n-                    restrictions - Restrictions::STMT_EXPR,\n-                    |this| {\n-                        this.parse_assoc_expr_with(op.precedence() + 1,\n-                            LhsExpr::NotYetParsed)\n-                }),\n-            }?;\n+                Fixity::None => 1,\n+            };\n+            let rhs = self.with_res(\n+                restrictions - Restrictions::STMT_EXPR,\n+                |this| this.parse_assoc_expr_with(prec + prec_adjustment, LhsExpr::NotYetParsed)\n+            )?;\n \n             // Make sure that the span of the parent node is larger than the span of lhs and rhs,\n             // including the attributes.\n@@ -3701,7 +3690,7 @@ impl<'a> Parser<'a> {\n                 }\n             };\n \n-            if op.fixity() == Fixity::None { break }\n+            if let Fixity::None = fixity { break }\n         }\n         Ok(lhs)\n     }\n@@ -3838,7 +3827,7 @@ impl<'a> Parser<'a> {\n     /// Produce an error if comparison operators are chained (RFC #558).\n     /// We only need to check lhs, not rhs, because all comparison ops\n     /// have same precedence and are left-associative\n-    fn check_no_chained_comparison(&mut self, lhs: &Expr, outer_op: &AssocOp) {\n+    fn check_no_chained_comparison(&self, lhs: &Expr, outer_op: &AssocOp) {\n         debug_assert!(outer_op.is_comparison(),\n                       \"check_no_chained_comparison: {:?} is not comparison\",\n                       outer_op);\n@@ -5133,7 +5122,7 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    fn is_async_block(&mut self) -> bool {\n+    fn is_async_block(&self) -> bool {\n         self.token.is_keyword(keywords::Async) &&\n         (\n             ( // `async move {`\n@@ -5145,19 +5134,19 @@ impl<'a> Parser<'a> {\n         )\n     }\n \n-    fn is_async_fn(&mut self) -> bool {\n+    fn is_async_fn(&self) -> bool {\n         self.token.is_keyword(keywords::Async) &&\n             self.look_ahead(1, |t| t.is_keyword(keywords::Fn))\n     }\n \n-    fn is_do_catch_block(&mut self) -> bool {\n+    fn is_do_catch_block(&self) -> bool {\n         self.token.is_keyword(keywords::Do) &&\n         self.look_ahead(1, |t| t.is_keyword(keywords::Catch)) &&\n         self.look_ahead(2, |t| *t == token::OpenDelim(token::Brace)) &&\n         !self.restrictions.contains(Restrictions::NO_STRUCT_LITERAL)\n     }\n \n-    fn is_try_block(&mut self) -> bool {\n+    fn is_try_block(&self) -> bool {\n         self.token.is_keyword(keywords::Try) &&\n         self.look_ahead(1, |t| *t == token::OpenDelim(token::Brace)) &&\n         self.span.rust_2018() &&\n@@ -5179,7 +5168,7 @@ impl<'a> Parser<'a> {\n         self.look_ahead(1, |t| t.is_keyword(keywords::Type))\n     }\n \n-    fn is_auto_trait_item(&mut self) -> bool {\n+    fn is_auto_trait_item(&self) -> bool {\n         // auto trait\n         (self.token.is_keyword(keywords::Auto)\n             && self.look_ahead(1, |t| t.is_keyword(keywords::Trait)))\n@@ -5441,7 +5430,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Checks if this expression is a successfully parsed statement.\n-    fn expr_is_complete(&mut self, e: &Expr) -> bool {\n+    fn expr_is_complete(&self, e: &Expr) -> bool {\n         self.restrictions.contains(Restrictions::STMT_EXPR) &&\n             !classify::expr_requires_semi_to_be_stmt(e)\n     }\n@@ -6509,7 +6498,7 @@ impl<'a> Parser<'a> {\n         Ok((id, generics))\n     }\n \n-    fn mk_item(&mut self, span: Span, ident: Ident, node: ItemKind, vis: Visibility,\n+    fn mk_item(&self, span: Span, ident: Ident, node: ItemKind, vis: Visibility,\n                attrs: Vec<Attribute>) -> P<Item> {\n         P(Item {\n             ident,\n@@ -6541,7 +6530,7 @@ impl<'a> Parser<'a> {\n \n     /// Returns `true` if we are looking at `const ID`\n     /// (returns `false` for things like `const fn`, etc.).\n-    fn is_const_item(&mut self) -> bool {\n+    fn is_const_item(&self) -> bool {\n         self.token.is_keyword(keywords::Const) &&\n             !self.look_ahead(1, |t| t.is_keyword(keywords::Fn)) &&\n             !self.look_ahead(1, |t| t.is_keyword(keywords::Unsafe))\n@@ -6649,7 +6638,7 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    fn complain_if_pub_macro(&mut self, vis: &VisibilityKind, sp: Span) {\n+    fn complain_if_pub_macro(&self, vis: &VisibilityKind, sp: Span) {\n         match *vis {\n             VisibilityKind::Inherited => {}\n             _ => {\n@@ -6678,7 +6667,7 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    fn missing_assoc_item_kind_err(&mut self, item_type: &str, prev_span: Span)\n+    fn missing_assoc_item_kind_err(&self, item_type: &str, prev_span: Span)\n                                    -> DiagnosticBuilder<'a>\n     {\n         let expected_kinds = if item_type == \"extern\" {"}]}