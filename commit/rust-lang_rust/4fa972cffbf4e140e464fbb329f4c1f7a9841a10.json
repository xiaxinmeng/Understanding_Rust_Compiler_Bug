{"sha": "4fa972cffbf4e140e464fbb329f4c1f7a9841a10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmYTk3MmNmZmJmNGUxNDBlNDY0ZmJiMzI5ZjRjMWY3YTk4NDFhMTA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-08T15:44:18Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-08T15:44:18Z"}, "message": "simplify", "tree": {"sha": "f275d467605f7e08907973a64472de7abd2c171e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f275d467605f7e08907973a64472de7abd2c171e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fa972cffbf4e140e464fbb329f4c1f7a9841a10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fa972cffbf4e140e464fbb329f4c1f7a9841a10", "html_url": "https://github.com/rust-lang/rust/commit/4fa972cffbf4e140e464fbb329f4c1f7a9841a10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fa972cffbf4e140e464fbb329f4c1f7a9841a10/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f02f176c87ef2d9f22b27800ae56289c6423db4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f02f176c87ef2d9f22b27800ae56289c6423db4", "html_url": "https://github.com/rust-lang/rust/commit/6f02f176c87ef2d9f22b27800ae56289c6423db4"}], "stats": {"total": 66, "additions": 33, "deletions": 33}, "files": [{"sha": "1dac955843f6723885a0288493e706747e36ccff", "filename": "crates/ra_analysis/src/call_info.rs", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/4fa972cffbf4e140e464fbb329f4c1f7a9841a10/crates%2Fra_analysis%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa972cffbf4e140e464fbb329f4c1f7a9841a10/crates%2Fra_analysis%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcall_info.rs?ref=4fa972cffbf4e140e464fbb329f4c1f7a9841a10", "patch": "@@ -121,7 +121,7 @@ impl CallInfo {\n             node.syntax().text().to_string()\n         };\n \n-        if let Some((comment_range, docs)) = CallInfo::extract_doc_comments(node) {\n+        if let Some((comment_range, docs)) = extract_doc_comments(node) {\n             let comment_range = comment_range\n                 .checked_sub(node.syntax().range().start())\n                 .unwrap();\n@@ -154,51 +154,51 @@ impl CallInfo {\n         }\n \n         Some(CallInfo {\n-            parameters: CallInfo::param_list(node),\n+            parameters: param_list(node),\n             label: label.trim().to_owned(),\n             doc,\n             active_parameter: None,\n         })\n     }\n+}\n \n-    fn extract_doc_comments(node: &ast::FnDef) -> Option<(TextRange, String)> {\n-        if node.doc_comments().count() == 0 {\n-            return None;\n-        }\n-\n-        let comment_text = node.doc_comment_text();\n+fn extract_doc_comments(node: &ast::FnDef) -> Option<(TextRange, String)> {\n+    if node.doc_comments().count() == 0 {\n+        return None;\n+    }\n \n-        let (begin, end) = node\n-            .doc_comments()\n-            .map(|comment| comment.syntax().range())\n-            .map(|range| (range.start().to_usize(), range.end().to_usize()))\n-            .fold((std::usize::MAX, std::usize::MIN), |acc, range| {\n-                (min(acc.0, range.0), max(acc.1, range.1))\n-            });\n+    let comment_text = node.doc_comment_text();\n \n-        let range = TextRange::from_to(TextUnit::from_usize(begin), TextUnit::from_usize(end));\n+    let (begin, end) = node\n+        .doc_comments()\n+        .map(|comment| comment.syntax().range())\n+        .map(|range| (range.start().to_usize(), range.end().to_usize()))\n+        .fold((std::usize::MAX, std::usize::MIN), |acc, range| {\n+            (min(acc.0, range.0), max(acc.1, range.1))\n+        });\n \n-        Some((range, comment_text))\n-    }\n+    let range = TextRange::from_to(TextUnit::from_usize(begin), TextUnit::from_usize(end));\n \n-    fn param_list(node: &ast::FnDef) -> Vec<String> {\n-        let mut res = vec![];\n-        if let Some(param_list) = node.param_list() {\n-            if let Some(self_param) = param_list.self_param() {\n-                res.push(self_param.syntax().text().to_string())\n-            }\n+    Some((range, comment_text))\n+}\n \n-            // Maybe use param.pat here? See if we can just extract the name?\n-            //res.extend(param_list.params().map(|p| p.syntax().text().to_string()));\n-            res.extend(\n-                param_list\n-                    .params()\n-                    .filter_map(|p| p.pat())\n-                    .map(|pat| pat.syntax().text().to_string()),\n-            );\n+fn param_list(node: &ast::FnDef) -> Vec<String> {\n+    let mut res = vec![];\n+    if let Some(param_list) = node.param_list() {\n+        if let Some(self_param) = param_list.self_param() {\n+            res.push(self_param.syntax().text().to_string())\n         }\n-        res\n+\n+        // Maybe use param.pat here? See if we can just extract the name?\n+        //res.extend(param_list.params().map(|p| p.syntax().text().to_string()));\n+        res.extend(\n+            param_list\n+                .params()\n+                .filter_map(|p| p.pat())\n+                .map(|pat| pat.syntax().text().to_string()),\n+        );\n     }\n+    res\n }\n \n #[cfg(test)]"}]}