{"sha": "d14dba12279e3e203eeaaeb575149064358cc36f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxNGRiYTEyMjc5ZTNlMjAzZWVhYWViNTc1MTQ5MDY0MzU4Y2MzNmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-30T22:27:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-30T22:27:53Z"}, "message": "Auto merge of #28782 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #28753, #28760, #28764, #28770, #28771, #28772\n- Failed merges:", "tree": {"sha": "ac53e7c507aa20a1675b7499f6ea64cedb7e9247", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac53e7c507aa20a1675b7499f6ea64cedb7e9247"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d14dba12279e3e203eeaaeb575149064358cc36f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d14dba12279e3e203eeaaeb575149064358cc36f", "html_url": "https://github.com/rust-lang/rust/commit/d14dba12279e3e203eeaaeb575149064358cc36f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d14dba12279e3e203eeaaeb575149064358cc36f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c788d0a9a623221da12437b01a35ea899a03d9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c788d0a9a623221da12437b01a35ea899a03d9b", "html_url": "https://github.com/rust-lang/rust/commit/1c788d0a9a623221da12437b01a35ea899a03d9b"}, {"sha": "f8c8c8c07d9d8d0626faae2231ac09aeacb435f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8c8c8c07d9d8d0626faae2231ac09aeacb435f5", "html_url": "https://github.com/rust-lang/rust/commit/f8c8c8c07d9d8d0626faae2231ac09aeacb435f5"}], "stats": {"total": 59, "additions": 33, "deletions": 26}, "files": [{"sha": "db3f4b064b1fb86d0e1046d9a71c8cdd0f9f209c", "filename": "src/doc/reference.md", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d14dba12279e3e203eeaaeb575149064358cc36f/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/d14dba12279e3e203eeaaeb575149064358cc36f/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=d14dba12279e3e203eeaaeb575149064358cc36f", "patch": "@@ -76,8 +76,13 @@ An identifier is any nonempty Unicode[^non_ascii_idents] string of the following\n [^non_ascii_idents]: Non-ASCII characters in identifiers are currently feature\n   gated. This is expected to improve soon.\n \n-- The first character has property `XID_start`\n-- The remaining characters have property `XID_continue`\n+Either\n+   * The first character has property `XID_start`\n+   * The remaining characters have property `XID_continue`\n+Or\n+   * The first character is `_`\n+   * The identifier is more than one character, `_` alone is not an identifier\n+   * The remaining characters have property `XID_continue`\n \n that does _not_ occur in the set of [keywords][keywords].\n \n@@ -3937,11 +3942,11 @@ initialized; this is enforced by the compiler.\n The Rust compiler supports various methods to link crates together both\n statically and dynamically. This section will explore the various methods to\n link Rust crates together, and more information about native libraries can be\n-found in the [ffi section of the book][ffi].\n+found in the [FFI section of the book][ffi].\n \n In one session of compilation, the compiler can generate multiple artifacts\n through the usage of either command line flags or the `crate_type` attribute.\n-If one or more command line flag is specified, all `crate_type` attributes will\n+If one or more command line flags are specified, all `crate_type` attributes will\n be ignored in favor of only building the artifacts specified by command line.\n \n * `--crate-type=bin`, `#[crate_type = \"bin\"]` - A runnable executable will be\n@@ -3987,7 +3992,7 @@ Note that these outputs are stackable in the sense that if multiple are\n specified, then the compiler will produce each form of output at once without\n having to recompile. However, this only applies for outputs specified by the\n same method. If only `crate_type` attributes are specified, then they will all\n-be built, but if one or more `--crate-type` command line flag is specified,\n+be built, but if one or more `--crate-type` command line flags are specified,\n then only those outputs will be built.\n \n With all these different kinds of outputs, if crate A depends on crate B, then"}, {"sha": "5fca05d5340068b543c5f24cc33cf5f30b42bf0a", "filename": "src/doc/trpl/no-stdlib.md", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d14dba12279e3e203eeaaeb575149064358cc36f/src%2Fdoc%2Ftrpl%2Fno-stdlib.md", "raw_url": "https://github.com/rust-lang/rust/raw/d14dba12279e3e203eeaaeb575149064358cc36f/src%2Fdoc%2Ftrpl%2Fno-stdlib.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fno-stdlib.md?ref=d14dba12279e3e203eeaaeb575149064358cc36f", "patch": "@@ -4,14 +4,6 @@ By default, `std` is linked to every Rust crate. In some contexts,\n this is undesirable, and can be avoided with the `#![no_std]`\n attribute attached to the crate.\n \n-```ignore\n-// a minimal library\n-#![crate_type=\"lib\"]\n-#![feature(no_std)]\n-#![no_std]\n-# // fn main() {} tricked you, rustdoc!\n-```\n-\n Obviously there's more to life than just libraries: one can use\n `#[no_std]` with an executable, controlling the entry point is\n possible in two ways: the `#[start]` attribute, or overriding the\n@@ -21,7 +13,10 @@ The function marked `#[start]` is passed the command line parameters\n in the same format as C:\n \n ```rust\n-#![feature(lang_items, start, no_std, libc)]\n+# #![feature(libc)]\n+#![feature(lang_items)]\n+#![feature(start)]\n+#![feature(no_std)]\n #![no_std]\n \n // Pull in the system libc library for what crt0.o likely requires\n@@ -47,11 +42,13 @@ with `#![no_main]` and then create the appropriate symbol with the\n correct ABI and the correct name, which requires overriding the\n compiler's name mangling too:\n \n-```ignore\n+```rust\n+# #![feature(libc)]\n #![feature(no_std)]\n+#![feature(lang_items)]\n+#![feature(start)]\n #![no_std]\n #![no_main]\n-#![feature(lang_items, start)]\n \n extern crate libc;\n \n@@ -92,19 +89,24 @@ instead.\n \n The core library has very few dependencies and is much more portable than the\n standard library itself. Additionally, the core library has most of the\n-necessary functionality for writing idiomatic and effective Rust code.\n+necessary functionality for writing idiomatic and effective Rust code. When\n+using `#![no_std]`, Rust will automatically inject the `core` crate, just like\n+we do for `std` when we\u2019re using it.\n \n As an example, here is a program that will calculate the dot product of two\n vectors provided from C, using idiomatic Rust practices.\n \n-```ignore\n-#![feature(lang_items, start, no_std, core, libc)]\n+```rust\n+# #![feature(libc)]\n+#![feature(lang_items)]\n+#![feature(start)]\n+#![feature(no_std)]\n+#![feature(core)]\n+#![feature(core_slice_ext)]\n+#![feature(raw)]\n #![no_std]\n \n-# extern crate libc;\n-extern crate core;\n-\n-use core::prelude::*;\n+extern crate libc;\n \n use core::mem;\n "}, {"sha": "f2f9198d31221c11e4ffec1c9c12df16d28756d8", "filename": "src/doc/trpl/the-stack-and-the-heap.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d14dba12279e3e203eeaaeb575149064358cc36f/src%2Fdoc%2Ftrpl%2Fthe-stack-and-the-heap.md", "raw_url": "https://github.com/rust-lang/rust/raw/d14dba12279e3e203eeaaeb575149064358cc36f/src%2Fdoc%2Ftrpl%2Fthe-stack-and-the-heap.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fthe-stack-and-the-heap.md?ref=d14dba12279e3e203eeaaeb575149064358cc36f", "patch": "@@ -41,8 +41,8 @@ and just consider the local variables we\u2019re allocating. So in this case, when\n This is automatically handled for you, as you can see; we didn\u2019t have to write\n any special Rust code or anything.\n \n-When the function is over, its stack frame gets deallocated. This happens\n-automatically, we didn\u2019t have to do anything special here.\n+When the function exits, its stack frame gets deallocated. This happens\n+automatically as well.\n \n That\u2019s all there is for this simple program. The key thing to understand here\n is that stack allocation is very, very fast. Since we know all the local"}, {"sha": "fa1f4727bc0782f046b3429026411be93fa92fdb", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d14dba12279e3e203eeaaeb575149064358cc36f/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d14dba12279e3e203eeaaeb575149064358cc36f/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=d14dba12279e3e203eeaaeb575149064358cc36f", "patch": "@@ -218,7 +218,7 @@ impl PartialOrd for Ordering {\n ///\n /// The comparison must satisfy, for all `a`, `b` and `c`:\n ///\n-/// - antisymmetry: if `a < b` then `!(a > b)` and vice versa; and\n+/// - antisymmetry: if `a < b` then `!(a > b)`, as well as `a > b` implying `!(a < b)`; and\n /// - transitivity: `a < b` and `b < c` implies `a < c`. The same must hold for both `==` and `>`.\n ///\n /// Note that these requirements mean that the trait itself must be implemented symmetrically and"}]}