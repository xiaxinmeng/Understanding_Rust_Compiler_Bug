{"sha": "b60eced4057791f9a5c94ac5c9a1c26d015dd2b7", "node_id": "C_kwDOAAsO6NoAKGI2MGVjZWQ0MDU3NzkxZjlhNWM5NGFjNWM5YTFjMjZkMDE1ZGQyYjc", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-09T17:43:08Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-09T17:43:08Z"}, "message": "Return Value instead of CValue from the simd_for_each_lane closure", "tree": {"sha": "cc97d1d90a53b98127bd7e53b95749adc4abb897", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc97d1d90a53b98127bd7e53b95749adc4abb897"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b60eced4057791f9a5c94ac5c9a1c26d015dd2b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b60eced4057791f9a5c94ac5c9a1c26d015dd2b7", "html_url": "https://github.com/rust-lang/rust/commit/b60eced4057791f9a5c94ac5c9a1c26d015dd2b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b60eced4057791f9a5c94ac5c9a1c26d015dd2b7/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57d25ef60e7237e18092aea4081a11a4d5a28c1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/57d25ef60e7237e18092aea4081a11a4d5a28c1c", "html_url": "https://github.com/rust-lang/rust/commit/57d25ef60e7237e18092aea4081a11a4d5a28c1c"}], "stats": {"total": 98, "additions": 42, "deletions": 56}, "files": [{"sha": "13c7cf677edd781953f79064f31221835cc4e962", "filename": "src/intrinsics/llvm.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b60eced4057791f9a5c94ac5c9a1c26d015dd2b7/src%2Fintrinsics%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60eced4057791f9a5c94ac5c9a1c26d015dd2b7/src%2Fintrinsics%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fllvm.rs?ref=b60eced4057791f9a5c94ac5c9a1c26d015dd2b7", "patch": "@@ -83,22 +83,20 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n         };\n         \"llvm.x86.sse2.psrli.d\", (c a, o imm8) {\n             let imm8 = crate::constant::mir_operand_get_const_val(fx, imm8).expect(\"llvm.x86.sse2.psrli.d imm8 not const\");\n-            simd_for_each_lane(fx, a, ret, |fx, _lane_layout, res_lane_layout, lane| {\n-                let res_lane = match imm8.try_to_bits(Size::from_bytes(4)).unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8)) {\n+            simd_for_each_lane(fx, a, ret, |fx, _lane_layout, _res_lane_layout, lane| {\n+                match imm8.try_to_bits(Size::from_bytes(4)).unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8)) {\n                     imm8 if imm8 < 32 => fx.bcx.ins().ushr_imm(lane, i64::from(imm8 as u8)),\n                     _ => fx.bcx.ins().iconst(types::I32, 0),\n-                };\n-                CValue::by_val(res_lane, res_lane_layout)\n+                }\n             });\n         };\n         \"llvm.x86.sse2.pslli.d\", (c a, o imm8) {\n             let imm8 = crate::constant::mir_operand_get_const_val(fx, imm8).expect(\"llvm.x86.sse2.psrli.d imm8 not const\");\n-            simd_for_each_lane(fx, a, ret, |fx, _lane_layout, res_lane_layout, lane| {\n-                let res_lane = match imm8.try_to_bits(Size::from_bytes(4)).unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8)) {\n+            simd_for_each_lane(fx, a, ret, |fx, _lane_layout, _res_lane_layout, lane| {\n+                match imm8.try_to_bits(Size::from_bytes(4)).unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8)) {\n                     imm8 if imm8 < 32 => fx.bcx.ins().ishl_imm(lane, i64::from(imm8 as u8)),\n                     _ => fx.bcx.ins().iconst(types::I32, 0),\n-                };\n-                CValue::by_val(res_lane, res_lane_layout)\n+                }\n             });\n         };\n         \"llvm.x86.sse2.storeu.dq\", (v mem_addr, c a) {"}, {"sha": "dee192a69af329e4f596962ff0f7cba8963e13b5", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b60eced4057791f9a5c94ac5c9a1c26d015dd2b7/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60eced4057791f9a5c94ac5c9a1c26d015dd2b7/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=b60eced4057791f9a5c94ac5c9a1c26d015dd2b7", "patch": "@@ -113,7 +113,7 @@ fn simd_for_each_lane<'tcx>(\n         TyAndLayout<'tcx>,\n         TyAndLayout<'tcx>,\n         Value,\n-    ) -> CValue<'tcx>,\n+    ) -> Value,\n ) {\n     let layout = val.layout();\n \n@@ -127,6 +127,7 @@ fn simd_for_each_lane<'tcx>(\n         let lane = val.value_lane(fx, lane_idx).load_scalar(fx);\n \n         let res_lane = f(fx, lane_layout, ret_lane_layout, lane);\n+        let res_lane = CValue::by_val(res_lane, ret_lane_layout);\n \n         ret.place_lane(fx, lane_idx).write_cvalue(fx, res_lane);\n     }\n@@ -143,7 +144,7 @@ fn simd_pair_for_each_lane<'tcx>(\n         TyAndLayout<'tcx>,\n         Value,\n         Value,\n-    ) -> CValue<'tcx>,\n+    ) -> Value,\n ) {\n     assert_eq!(x.layout(), y.layout());\n     let layout = x.layout();\n@@ -159,6 +160,7 @@ fn simd_pair_for_each_lane<'tcx>(\n         let y_lane = y.value_lane(fx, lane_idx).load_scalar(fx);\n \n         let res_lane = f(fx, lane_layout, ret_lane_layout, x_lane, y_lane);\n+        let res_lane = CValue::by_val(res_lane, ret_lane_layout);\n \n         ret.place_lane(fx, lane_idx).write_cvalue(fx, res_lane);\n     }\n@@ -215,7 +217,7 @@ fn bool_to_zero_or_max_uint<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n     layout: TyAndLayout<'tcx>,\n     val: Value,\n-) -> CValue<'tcx> {\n+) -> Value {\n     let ty = fx.clif_type(layout.ty).unwrap();\n \n     let int_ty = match ty {\n@@ -231,7 +233,7 @@ fn bool_to_zero_or_max_uint<'tcx>(\n         res = fx.bcx.ins().bitcast(ty, res);\n     }\n \n-    CValue::by_val(res, layout)\n+    res\n }\n \n pub(crate) fn codegen_intrinsic_call<'tcx>("}, {"sha": "0ab48aaea1ad15060956bfcd145fcd19d863fc4f", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 30, "deletions": 44, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/b60eced4057791f9a5c94ac5c9a1c26d015dd2b7/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60eced4057791f9a5c94ac5c9a1c26d015dd2b7/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=b60eced4057791f9a5c94ac5c9a1c26d015dd2b7", "patch": "@@ -33,9 +33,7 @@ macro simd_cmp($fx:expr, $cc_u:ident|$cc_s:ident|$cc_f:ident($x:ident, $y:ident)\n             let ty = fx.clif_type(res_lane_layout.ty).unwrap();\n \n             let res_lane = fx.bcx.ins().bint(ty, res_lane);\n-            let res_lane = fx.bcx.ins().ineg(res_lane);\n-\n-            CValue::by_val(res_lane, res_lane_layout)\n+            fx.bcx.ins().ineg(res_lane)\n         },\n     );\n }\n@@ -47,13 +45,12 @@ macro simd_int_binop($fx:expr, $op_u:ident|$op_s:ident($x:ident, $y:ident) -> $r\n         $x,\n         $y,\n         $ret,\n-        |fx, lane_layout, ret_lane_layout, x_lane, y_lane| {\n-            let res_lane = match lane_layout.ty.kind() {\n+        |fx, lane_layout, _ret_lane_layout, x_lane, y_lane| {\n+            match lane_layout.ty.kind() {\n                 ty::Uint(_) => fx.bcx.ins().$op_u(x_lane, y_lane),\n                 ty::Int(_) => fx.bcx.ins().$op_s(x_lane, y_lane),\n                 _ => unreachable!(\"{:?}\", lane_layout.ty),\n-            };\n-            CValue::by_val(res_lane, ret_lane_layout)\n+            }\n         },\n     );\n }\n@@ -65,14 +62,13 @@ macro simd_int_flt_binop($fx:expr, $op_u:ident|$op_s:ident|$op_f:ident($x:ident,\n         $x,\n         $y,\n         $ret,\n-        |fx, lane_layout, ret_lane_layout, x_lane, y_lane| {\n-            let res_lane = match lane_layout.ty.kind() {\n+        |fx, lane_layout, _ret_lane_layout, x_lane, y_lane| {\n+            match lane_layout.ty.kind() {\n                 ty::Uint(_) => fx.bcx.ins().$op_u(x_lane, y_lane),\n                 ty::Int(_) => fx.bcx.ins().$op_s(x_lane, y_lane),\n                 ty::Float(_) => fx.bcx.ins().$op_f(x_lane, y_lane),\n                 _ => unreachable!(\"{:?}\", lane_layout.ty),\n-            };\n-            CValue::by_val(res_lane, ret_lane_layout)\n+            }\n         },\n     );\n }\n@@ -84,12 +80,11 @@ macro simd_flt_binop($fx:expr, $op:ident($x:ident, $y:ident) -> $ret:ident) {\n         $x,\n         $y,\n         $ret,\n-        |fx, lane_layout, ret_lane_layout, x_lane, y_lane| {\n-            let res_lane = match lane_layout.ty.kind() {\n+        |fx, lane_layout, _ret_lane_layout, x_lane, y_lane| {\n+            match lane_layout.ty.kind() {\n                 ty::Float(_) => fx.bcx.ins().$op(x_lane, y_lane),\n                 _ => unreachable!(\"{:?}\", lane_layout.ty),\n-            };\n-            CValue::by_val(res_lane, ret_lane_layout)\n+            }\n         },\n     );\n }\n@@ -116,8 +111,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 let from_signed = type_sign(lane_layout.ty);\n                 let to_signed = type_sign(ret_lane_layout.ty);\n \n-                let ret_lane = clif_int_or_float_cast(fx, lane, from_signed, ret_lane_ty, to_signed);\n-                CValue::by_val(ret_lane, ret_lane_layout)\n+                clif_int_or_float_cast(fx, lane, from_signed, ret_lane_ty, to_signed)\n             });\n         };\n \n@@ -283,29 +277,26 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n \n         simd_neg, (c a) {\n             validate_simd_type(fx, intrinsic, span, a.layout().ty);\n-            simd_for_each_lane(fx, a, ret, |fx, lane_layout, ret_lane_layout, lane| {\n-                let ret_lane = match lane_layout.ty.kind() {\n+            simd_for_each_lane(fx, a, ret, |fx, lane_layout, _ret_lane_layout, lane| {\n+                match lane_layout.ty.kind() {\n                     ty::Int(_) => fx.bcx.ins().ineg(lane),\n                     ty::Float(_) => fx.bcx.ins().fneg(lane),\n                     _ => unreachable!(),\n-                };\n-                CValue::by_val(ret_lane, ret_lane_layout)\n+                }\n             });\n         };\n \n         simd_fabs, (c a) {\n             validate_simd_type(fx, intrinsic, span, a.layout().ty);\n-            simd_for_each_lane(fx, a, ret, |fx, _lane_layout, ret_lane_layout, lane| {\n-                let ret_lane = fx.bcx.ins().fabs(lane);\n-                CValue::by_val(ret_lane, ret_lane_layout)\n+            simd_for_each_lane(fx, a, ret, |fx, _lane_layout, _ret_lane_layout, lane| {\n+                fx.bcx.ins().fabs(lane)\n             });\n         };\n \n         simd_fsqrt, (c a) {\n             validate_simd_type(fx, intrinsic, span, a.layout().ty);\n-            simd_for_each_lane(fx, a, ret, |fx, _lane_layout, ret_lane_layout, lane| {\n-                let ret_lane = fx.bcx.ins().sqrt(lane);\n-                CValue::by_val(ret_lane, ret_lane_layout)\n+            simd_for_each_lane(fx, a, ret, |fx, _lane_layout, _ret_lane_layout, lane| {\n+                fx.bcx.ins().sqrt(lane)\n             });\n         };\n \n@@ -327,8 +318,8 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n         };\n         simd_rem, (c x, c y) {\n             validate_simd_type(fx, intrinsic, span, x.layout().ty);\n-            simd_pair_for_each_lane(fx, x, y, ret, |fx, lane_layout, ret_lane_layout, x_lane, y_lane| {\n-                let res_lane = match lane_layout.ty.kind() {\n+            simd_pair_for_each_lane(fx, x, y, ret, |fx, lane_layout, _ret_lane_layout, x_lane, y_lane| {\n+                match lane_layout.ty.kind() {\n                     ty::Uint(_) => fx.bcx.ins().urem(x_lane, y_lane),\n                     ty::Int(_) => fx.bcx.ins().srem(x_lane, y_lane),\n                     ty::Float(FloatTy::F32) => fx.lib_call(\n@@ -344,8 +335,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                         &[x_lane, y_lane],\n                     )[0],\n                     _ => unreachable!(\"{:?}\", lane_layout.ty),\n-                };\n-                CValue::by_val(res_lane, ret_lane_layout)\n+                }\n             });\n         };\n         simd_shl, (c x, c y) {\n@@ -403,8 +393,8 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n \n         simd_round, (c a) {\n             validate_simd_type(fx, intrinsic, span, a.layout().ty);\n-            simd_for_each_lane(fx, a, ret, |fx, lane_layout, ret_lane_layout, lane| {\n-                let res_lane = match lane_layout.ty.kind() {\n+            simd_for_each_lane(fx, a, ret, |fx, lane_layout, _ret_lane_layout, lane| {\n+                match lane_layout.ty.kind() {\n                     ty::Float(FloatTy::F32) => fx.lib_call(\n                         \"roundf\",\n                         vec![AbiParam::new(types::F32)],\n@@ -418,29 +408,25 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                         &[lane],\n                     )[0],\n                     _ => unreachable!(\"{:?}\", lane_layout.ty),\n-                };\n-                CValue::by_val(res_lane, ret_lane_layout)\n+                }\n             });\n         };\n         simd_ceil, (c a) {\n             validate_simd_type(fx, intrinsic, span, a.layout().ty);\n-            simd_for_each_lane(fx, a, ret, |fx, _lane_layout, ret_lane_layout, lane| {\n-                let ret_lane = fx.bcx.ins().ceil(lane);\n-                CValue::by_val(ret_lane, ret_lane_layout)\n+            simd_for_each_lane(fx, a, ret, |fx, _lane_layout, _ret_lane_layout, lane| {\n+                fx.bcx.ins().ceil(lane)\n             });\n         };\n         simd_floor, (c a) {\n             validate_simd_type(fx, intrinsic, span, a.layout().ty);\n-            simd_for_each_lane(fx, a, ret, |fx, _lane_layout, ret_lane_layout, lane| {\n-                let ret_lane = fx.bcx.ins().floor(lane);\n-                CValue::by_val(ret_lane, ret_lane_layout)\n+            simd_for_each_lane(fx, a, ret, |fx, _lane_layout, _ret_lane_layout, lane| {\n+                fx.bcx.ins().floor(lane)\n             });\n         };\n         simd_trunc, (c a) {\n             validate_simd_type(fx, intrinsic, span, a.layout().ty);\n-            simd_for_each_lane(fx, a, ret, |fx, _lane_layout, ret_lane_layout, lane| {\n-                let ret_lane = fx.bcx.ins().trunc(lane);\n-                CValue::by_val(ret_lane, ret_lane_layout)\n+            simd_for_each_lane(fx, a, ret, |fx, _lane_layout, _ret_lane_layout, lane| {\n+                fx.bcx.ins().trunc(lane)\n             });\n         };\n "}]}