{"sha": "95960b7d54ecd05b03734cadea071cd5cc29fa35", "node_id": "C_kwDOAAsO6NoAKDk1OTYwYjdkNTRlY2QwNWIwMzczNGNhZGVhMDcxY2Q1Y2MyOWZhMzU", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-02-18T23:27:58Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-03-24T05:31:57Z"}, "message": "Make `standalone` an enum", "tree": {"sha": "5e084fabe1a14d4bfb90ec63e7f1d9bbbf2845a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e084fabe1a14d4bfb90ec63e7f1d9bbbf2845a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95960b7d54ecd05b03734cadea071cd5cc29fa35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95960b7d54ecd05b03734cadea071cd5cc29fa35", "html_url": "https://github.com/rust-lang/rust/commit/95960b7d54ecd05b03734cadea071cd5cc29fa35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95960b7d54ecd05b03734cadea071cd5cc29fa35/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4212835d993537158aa39406a489351a4efdda71", "url": "https://api.github.com/repos/rust-lang/rust/commits/4212835d993537158aa39406a489351a4efdda71", "html_url": "https://github.com/rust-lang/rust/commit/4212835d993537158aa39406a489351a4efdda71"}], "stats": {"total": 38, "additions": 25, "deletions": 13}, "files": [{"sha": "162982ebbe208b73a23f8c126cf575d07f7b96ac", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/95960b7d54ecd05b03734cadea071cd5cc29fa35/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95960b7d54ecd05b03734cadea071cd5cc29fa35/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=95960b7d54ecd05b03734cadea071cd5cc29fa35", "patch": "@@ -161,15 +161,24 @@ impl AttemptLocalParseRecovery {\n #[derive(Debug, Copy, Clone)]\n struct IncDecRecovery {\n     /// Is this increment/decrement its own statement?\n-    ///\n-    /// This is `None` when we are unsure.\n-    standalone: Option<bool>,\n+    standalone: IsStandalone,\n     /// Is this an increment or decrement?\n     op: IncOrDec,\n     /// Is this pre- or postfix?\n     fixity: UnaryFixity,\n }\n \n+/// Is an increment or decrement expression its own statement?\n+#[derive(Debug, Copy, Clone)]\n+enum IsStandalone {\n+    /// It's standalone, i.e., its own statement.\n+    Standalone,\n+    /// It's a subexpression, i.e., *not* standalone.\n+    Subexpr,\n+    /// It's maybe standalone; we're not sure.\n+    Maybe,\n+}\n+\n #[derive(Debug, Copy, Clone, PartialEq, Eq)]\n enum IncOrDec {\n     Inc,\n@@ -1226,11 +1235,9 @@ impl<'a> Parser<'a> {\n         op_span: Span,\n         prev_is_semi: bool,\n     ) -> PResult<'a, P<Expr>> {\n-        let kind = IncDecRecovery {\n-            standalone: Some(prev_is_semi),\n-            op: IncOrDec::Inc,\n-            fixity: UnaryFixity::Pre,\n-        };\n+        let standalone =\n+            if prev_is_semi { IsStandalone::Standalone } else { IsStandalone::Subexpr };\n+        let kind = IncDecRecovery { standalone, op: IncOrDec::Inc, fixity: UnaryFixity::Pre };\n \n         self.recover_from_inc_dec(operand_expr, kind, op_span)\n     }\n@@ -1240,8 +1247,11 @@ impl<'a> Parser<'a> {\n         operand_expr: P<Expr>,\n         op_span: Span,\n     ) -> PResult<'a, P<Expr>> {\n-        let kind =\n-            IncDecRecovery { standalone: None, op: IncOrDec::Inc, fixity: UnaryFixity::Post };\n+        let kind = IncDecRecovery {\n+            standalone: IsStandalone::Maybe,\n+            op: IncOrDec::Inc,\n+            fixity: UnaryFixity::Post,\n+        };\n \n         self.recover_from_inc_dec(operand_expr, kind, op_span)\n     }\n@@ -1271,8 +1281,10 @@ impl<'a> Parser<'a> {\n         };\n \n         match kind.standalone {\n-            Some(true) => self.inc_dec_standalone_recovery(&mut err, kind, spans, false),\n-            Some(false) => {\n+            IsStandalone::Standalone => {\n+                self.inc_dec_standalone_recovery(&mut err, kind, spans, false)\n+            }\n+            IsStandalone::Subexpr => {\n                 let Ok(base_src) = self.span_to_snippet(base.span)\n                     else { return help_base_case(err, base) };\n                 match kind.fixity {\n@@ -1284,7 +1296,7 @@ impl<'a> Parser<'a> {\n                     }\n                 }\n             }\n-            None => {\n+            IsStandalone::Maybe => {\n                 let Ok(base_src) = self.span_to_snippet(base.span)\n                     else { return help_base_case(err, base) };\n                 match kind.fixity {"}]}