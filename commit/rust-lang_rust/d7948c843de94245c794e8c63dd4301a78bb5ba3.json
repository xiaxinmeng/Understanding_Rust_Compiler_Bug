{"sha": "d7948c843de94245c794e8c63dd4301a78bb5ba3", "node_id": "C_kwDOAAsO6NoAKGQ3OTQ4Yzg0M2RlOTQyNDVjNzk0ZThjNjNkZDQzMDFhNzhiYjViYTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-26T20:32:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-26T20:32:28Z"}, "message": "Auto merge of #106812 - oli-obk:output_filenames, r=petrochenkov\n\nmake `output_filenames` a real query\n\npart of #105462\n\nThis may be a perf regression and is not obviously the right way forward. We may store this information in the resolver after freezing it for example.", "tree": {"sha": "998ce09bf56f8cee32091ba5cb909a04d7b49940", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/998ce09bf56f8cee32091ba5cb909a04d7b49940"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7948c843de94245c794e8c63dd4301a78bb5ba3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7948c843de94245c794e8c63dd4301a78bb5ba3", "html_url": "https://github.com/rust-lang/rust/commit/d7948c843de94245c794e8c63dd4301a78bb5ba3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7948c843de94245c794e8c63dd4301a78bb5ba3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c62665e09c11eb1c9d8ea02df5b723364a0b8ba4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c62665e09c11eb1c9d8ea02df5b723364a0b8ba4", "html_url": "https://github.com/rust-lang/rust/commit/c62665e09c11eb1c9d8ea02df5b723364a0b8ba4"}, {"sha": "d924a8ca59bb12b16923dbda594cb7048230f0ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/d924a8ca59bb12b16923dbda594cb7048230f0ff", "html_url": "https://github.com/rust-lang/rust/commit/d924a8ca59bb12b16923dbda594cb7048230f0ff"}], "stats": {"total": 166, "additions": 119, "deletions": 47}, "files": [{"sha": "35849a6b944e481591f8a451646bba6dfd7c0afe", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d7948c843de94245c794e8c63dd4301a78bb5ba3/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7948c843de94245c794e8c63dd4301a78bb5ba3/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=d7948c843de94245c794e8c63dd4301a78bb5ba3", "patch": "@@ -417,6 +417,7 @@ fn compute_hir_hash(\n \n pub fn lower_to_hir(tcx: TyCtxt<'_>, (): ()) -> hir::Crate<'_> {\n     let sess = tcx.sess;\n+    tcx.ensure().output_filenames(());\n     let (mut resolver, krate) = tcx.resolver_for_lowering(()).steal();\n \n     let ast_index = index_crate(&resolver.node_id_to_def_id, &krate);"}, {"sha": "ccefd6adaf14b6012a614e96368d46b83919a3ad", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d7948c843de94245c794e8c63dd4301a78bb5ba3/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7948c843de94245c794e8c63dd4301a78bb5ba3/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=d7948c843de94245c794e8c63dd4301a78bb5ba3", "patch": "@@ -296,9 +296,8 @@ fn run_compiler(\n \n             if let Some(ppm) = &sess.opts.pretty {\n                 if ppm.needs_ast_map() {\n-                    let expanded_crate = queries.expansion()?.borrow().0.clone();\n                     queries.global_ctxt()?.enter(|tcx| {\n-                        pretty::print_after_hir_lowering(tcx, &*expanded_crate, *ppm);\n+                        pretty::print_after_hir_lowering(tcx, *ppm);\n                         Ok(())\n                     })?;\n                 } else {\n@@ -328,11 +327,15 @@ fn run_compiler(\n                 }\n             }\n \n-            queries.global_ctxt()?;\n+            let mut gctxt = queries.global_ctxt()?;\n             if callbacks.after_expansion(compiler, queries) == Compilation::Stop {\n                 return early_exit();\n             }\n \n+            // Make sure the `output_filenames` query is run for its side\n+            // effects of writing the dep-info and reporting errors.\n+            gctxt.enter(|tcx| tcx.output_filenames(()));\n+\n             if sess.opts.output_types.contains_key(&OutputType::DepInfo)\n                 && sess.opts.output_types.len() == 1\n             {\n@@ -343,7 +346,7 @@ fn run_compiler(\n                 return early_exit();\n             }\n \n-            queries.global_ctxt()?.enter(|tcx| {\n+            gctxt.enter(|tcx| {\n                 let result = tcx.analysis(());\n                 if sess.opts.unstable_opts.save_analysis {\n                     let crate_name = tcx.crate_name(LOCAL_CRATE);\n@@ -360,6 +363,8 @@ fn run_compiler(\n                 result\n             })?;\n \n+            drop(gctxt);\n+\n             if callbacks.after_analysis(compiler, queries) == Compilation::Stop {\n                 return early_exit();\n             }"}, {"sha": "022051e008e32cfa192c60e88655f2c6f42670ae", "filename": "compiler/rustc_driver/src/pretty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7948c843de94245c794e8c63dd4301a78bb5ba3/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7948c843de94245c794e8c63dd4301a78bb5ba3/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs?ref=d7948c843de94245c794e8c63dd4301a78bb5ba3", "patch": "@@ -403,7 +403,7 @@ pub fn print_after_parsing(sess: &Session, krate: &ast::Crate, ppm: PpMode) {\n     write_or_print(&out, sess);\n }\n \n-pub fn print_after_hir_lowering<'tcx>(tcx: TyCtxt<'tcx>, krate: &ast::Crate, ppm: PpMode) {\n+pub fn print_after_hir_lowering<'tcx>(tcx: TyCtxt<'tcx>, ppm: PpMode) {\n     if ppm.needs_analysis() {\n         abort_on_err(print_with_analysis(tcx, ppm), tcx.sess);\n         return;\n@@ -420,7 +420,7 @@ pub fn print_after_hir_lowering<'tcx>(tcx: TyCtxt<'tcx>, krate: &ast::Crate, ppm\n                 let parse = &sess.parse_sess;\n                 pprust::print_crate(\n                     sess.source_map(),\n-                    krate,\n+                    &tcx.resolver_for_lowering(()).borrow().1,\n                     src_name,\n                     src,\n                     annotation.pp_ann(),\n@@ -433,7 +433,7 @@ pub fn print_after_hir_lowering<'tcx>(tcx: TyCtxt<'tcx>, krate: &ast::Crate, ppm\n \n         AstTree(PpAstTreeMode::Expanded) => {\n             debug!(\"pretty-printing expanded AST\");\n-            format!(\"{krate:#?}\")\n+            format!(\"{:#?}\", tcx.resolver_for_lowering(()).borrow().1)\n         }\n \n         Hir(s) => call_with_pp_support_hir(&s, tcx, move |annotation, hir_map| {"}, {"sha": "37b381c534ea065c3a41e6ef3c4b2dd8d43ee225", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 27, "deletions": 34, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/d7948c843de94245c794e8c63dd4301a78bb5ba3/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7948c843de94245c794e8c63dd4301a78bb5ba3/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=d7948c843de94245c794e8c63dd4301a78bb5ba3", "patch": "@@ -16,7 +16,7 @@ use rustc_data_structures::parallel;\n use rustc_data_structures::sync::{Lrc, OnceCell, WorkerLocal};\n use rustc_errors::{ErrorGuaranteed, PResult};\n use rustc_expand::base::{ExtCtxt, LintStoreExpand, ResolverExpand};\n-use rustc_hir::def_id::StableCrateId;\n+use rustc_hir::def_id::{StableCrateId, LOCAL_CRATE};\n use rustc_lint::{BufferedEarlyLint, EarlyCheckNode, LintStore};\n use rustc_metadata::creader::CStore;\n use rustc_middle::arena::Arena;\n@@ -30,7 +30,7 @@ use rustc_plugin_impl as plugin;\n use rustc_query_impl::{OnDiskCache, Queries as TcxQueries};\n use rustc_resolve::{Resolver, ResolverArenas};\n use rustc_session::config::{CrateType, Input, OutputFilenames, OutputType};\n-use rustc_session::cstore::{MetadataLoader, MetadataLoaderDyn, Untracked};\n+use rustc_session::cstore::{CrateStoreDyn, MetadataLoader, MetadataLoaderDyn, Untracked};\n use rustc_session::output::filename_for_input;\n use rustc_session::search_paths::PathKind;\n use rustc_session::{Limit, Session};\n@@ -47,7 +47,7 @@ use std::marker::PhantomPinned;\n use std::path::{Path, PathBuf};\n use std::pin::Pin;\n use std::rc::Rc;\n-use std::sync::LazyLock;\n+use std::sync::{Arc, LazyLock};\n use std::{env, fs, iter};\n \n pub fn parse<'a>(sess: &'a Session) -> PResult<'a, ast::Crate> {\n@@ -548,7 +548,7 @@ fn escape_dep_env(symbol: Symbol) -> String {\n \n fn write_out_deps(\n     sess: &Session,\n-    boxed_resolver: &RefCell<BoxedResolver>,\n+    cstore: &CrateStoreDyn,\n     outputs: &OutputFilenames,\n     out_filenames: &[PathBuf],\n ) {\n@@ -600,20 +600,19 @@ fn write_out_deps(\n                 }\n             }\n \n-            boxed_resolver.borrow_mut().access(|resolver| {\n-                for cnum in resolver.cstore().crates_untracked() {\n-                    let source = resolver.cstore().crate_source_untracked(cnum);\n-                    if let Some((path, _)) = &source.dylib {\n-                        files.push(escape_dep_filename(&path.display().to_string()));\n-                    }\n-                    if let Some((path, _)) = &source.rlib {\n-                        files.push(escape_dep_filename(&path.display().to_string()));\n-                    }\n-                    if let Some((path, _)) = &source.rmeta {\n-                        files.push(escape_dep_filename(&path.display().to_string()));\n-                    }\n+            let cstore = cstore.as_any().downcast_ref::<CStore>().unwrap();\n+            for cnum in cstore.crates_untracked() {\n+                let source = cstore.crate_source_untracked(cnum);\n+                if let Some((path, _)) = &source.dylib {\n+                    files.push(escape_dep_filename(&path.display().to_string()));\n                 }\n-            });\n+                if let Some((path, _)) = &source.rlib {\n+                    files.push(escape_dep_filename(&path.display().to_string()));\n+                }\n+                if let Some((path, _)) = &source.rmeta {\n+                    files.push(escape_dep_filename(&path.display().to_string()));\n+                }\n+            }\n         }\n \n         let mut file = BufWriter::new(fs::File::create(&deps_filename)?);\n@@ -661,13 +660,11 @@ fn write_out_deps(\n     }\n }\n \n-pub fn prepare_outputs(\n-    sess: &Session,\n-    krate: &ast::Crate,\n-    boxed_resolver: &RefCell<BoxedResolver>,\n-    crate_name: Symbol,\n-) -> Result<OutputFilenames> {\n+fn output_filenames(tcx: TyCtxt<'_>, (): ()) -> Arc<OutputFilenames> {\n+    let sess = tcx.sess;\n     let _timer = sess.timer(\"prepare_outputs\");\n+    let (_, krate) = &*tcx.resolver_for_lowering(()).borrow();\n+    let crate_name = tcx.crate_name(LOCAL_CRATE);\n \n     // FIXME: rustdoc passes &[] instead of &krate.attrs here\n     let outputs = util::build_output_filenames(&krate.attrs, sess);\n@@ -679,45 +676,41 @@ pub fn prepare_outputs(\n     if let Some(ref input_path) = sess.io.input.opt_path() {\n         if sess.opts.will_create_output_file() {\n             if output_contains_path(&output_paths, input_path) {\n-                let reported = sess.emit_err(InputFileWouldBeOverWritten { path: input_path });\n-                return Err(reported);\n+                sess.emit_fatal(InputFileWouldBeOverWritten { path: input_path });\n             }\n             if let Some(ref dir_path) = output_conflicts_with_dir(&output_paths) {\n-                let reported =\n-                    sess.emit_err(GeneratedFileConflictsWithDirectory { input_path, dir_path });\n-                return Err(reported);\n+                sess.emit_fatal(GeneratedFileConflictsWithDirectory { input_path, dir_path });\n             }\n         }\n     }\n \n     if let Some(ref dir) = sess.io.temps_dir {\n         if fs::create_dir_all(dir).is_err() {\n-            let reported = sess.emit_err(TempsDirError);\n-            return Err(reported);\n+            sess.emit_fatal(TempsDirError);\n         }\n     }\n \n-    write_out_deps(sess, boxed_resolver, &outputs, &output_paths);\n+    write_out_deps(sess, tcx.cstore_untracked(), &outputs, &output_paths);\n \n     let only_dep_info = sess.opts.output_types.contains_key(&OutputType::DepInfo)\n         && sess.opts.output_types.len() == 1;\n \n     if !only_dep_info {\n         if let Some(ref dir) = sess.io.output_dir {\n             if fs::create_dir_all(dir).is_err() {\n-                let reported = sess.emit_err(OutDirError);\n-                return Err(reported);\n+                sess.emit_fatal(OutDirError);\n             }\n         }\n     }\n \n-    Ok(outputs)\n+    outputs.into()\n }\n \n pub static DEFAULT_QUERY_PROVIDERS: LazyLock<Providers> = LazyLock::new(|| {\n     let providers = &mut Providers::default();\n     providers.analysis = analysis;\n     providers.hir_crate = rustc_ast_lowering::lower_to_hir;\n+    providers.output_filenames = output_filenames;\n     proc_macro_decls::provide(providers);\n     rustc_const_eval::provide(providers);\n     rustc_middle::hir::provide(providers);"}, {"sha": "4b0180741c19df0af11d84b6c6d388bc5b1ffc42", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7948c843de94245c794e8c63dd4301a78bb5ba3/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7948c843de94245c794e8c63dd4301a78bb5ba3/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=d7948c843de94245c794e8c63dd4301a78bb5ba3", "patch": "@@ -65,7 +65,7 @@ impl<'a, T> std::ops::DerefMut for QueryResult<'a, T> {\n }\n \n impl<'a, 'tcx> QueryResult<'a, QueryContext<'tcx>> {\n-    pub fn enter<T>(mut self, f: impl FnOnce(TyCtxt<'tcx>) -> T) -> T {\n+    pub fn enter<T>(&mut self, f: impl FnOnce(TyCtxt<'tcx>) -> T) -> T {\n         (*self.0).get_mut().enter(f)\n     }\n }\n@@ -212,8 +212,6 @@ impl<'tcx> Queries<'tcx> {\n             let crate_name = *self.crate_name()?.borrow();\n             let (krate, resolver, lint_store) = self.expansion()?.steal();\n \n-            let outputs = passes::prepare_outputs(self.session(), &krate, &resolver, crate_name)?;\n-\n             let ty::ResolverOutputs {\n                 untracked,\n                 global_ctxt: untracked_resolutions,\n@@ -237,7 +235,6 @@ impl<'tcx> Queries<'tcx> {\n                     tcx.arena.alloc(Steal::new((untracked_resolver_for_lowering, krate))),\n                 );\n                 feed.resolutions(tcx.arena.alloc(untracked_resolutions));\n-                feed.output_filenames(tcx.arena.alloc(std::sync::Arc::new(outputs)));\n                 feed.features_query(tcx.sess.features_untracked());\n                 let feed = tcx.feed_local_crate();\n                 feed.crate_name(crate_name);"}, {"sha": "2e5261331e8be1e782a58d88d78ef2a593a97279", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7948c843de94245c794e8c63dd4301a78bb5ba3/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7948c843de94245c794e8c63dd4301a78bb5ba3/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=d7948c843de94245c794e8c63dd4301a78bb5ba3", "patch": "@@ -1863,9 +1863,10 @@ rustc_queries! {\n     ///\n     /// This query returns an `&Arc` because codegen backends need the value even after the `TyCtxt`\n     /// has been destroyed.\n-    query output_filenames(_: ()) -> &'tcx Arc<OutputFilenames> {\n+    query output_filenames(_: ()) -> Arc<OutputFilenames> {\n         feedable\n         desc { \"getting output filenames\" }\n+        arena_cache\n     }\n \n     /// Do not call this query directly: invoke `normalize` instead."}, {"sha": "a689b502f0fccb1d3fe8fd81059c9dcecba64b90", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7948c843de94245c794e8c63dd4301a78bb5ba3/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7948c843de94245c794e8c63dd4301a78bb5ba3/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=d7948c843de94245c794e8c63dd4301a78bb5ba3", "patch": "@@ -815,7 +815,7 @@ fn main_args(at_args: &[String]) -> MainResult {\n                 sess.fatal(\"Compilation failed, aborting rustdoc\");\n             }\n \n-            let global_ctxt = abort_on_err(queries.global_ctxt(), sess);\n+            let mut global_ctxt = abort_on_err(queries.global_ctxt(), sess);\n \n             global_ctxt.enter(|tcx| {\n                 let (krate, render_opts, mut cache) = sess.time(\"run_global_ctxt\", || {"}, {"sha": "03b03eb147def024bb61991d7e82a82b6d7de7f0", "filename": "tests/run-make/overwrite-input/Makefile", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d7948c843de94245c794e8c63dd4301a78bb5ba3/tests%2Frun-make%2Foverwrite-input%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d7948c843de94245c794e8c63dd4301a78bb5ba3/tests%2Frun-make%2Foverwrite-input%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Foverwrite-input%2FMakefile?ref=d7948c843de94245c794e8c63dd4301a78bb5ba3", "patch": "@@ -0,0 +1,13 @@\n+include ../../run-make-fulldeps/tools.mk\n+\n+all:\n+\t$(RUSTC) main.rs -o main.rs 2> $(TMPDIR)/file.stderr || echo \"failed successfully\"\n+\t$(RUSTC) main.rs -o . 2> $(TMPDIR)/folder.stderr || echo \"failed successfully\"\n+\n+ifdef RUSTC_BLESS_TEST\n+\tcp \"$(TMPDIR)\"/file.stderr file.stderr\n+\tcp \"$(TMPDIR)\"/folder.stderr folder.stderr\n+else\n+\t$(DIFF) file.stderr \"$(TMPDIR)\"/file.stderr\n+\t$(DIFF) folder.stderr \"$(TMPDIR)\"/folder.stderr\n+endif"}, {"sha": "9936962b4ee37fd2c5551222e2fec8c0c37d449b", "filename": "tests/run-make/overwrite-input/file.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7948c843de94245c794e8c63dd4301a78bb5ba3/tests%2Frun-make%2Foverwrite-input%2Ffile.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7948c843de94245c794e8c63dd4301a78bb5ba3/tests%2Frun-make%2Foverwrite-input%2Ffile.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Foverwrite-input%2Ffile.stderr?ref=d7948c843de94245c794e8c63dd4301a78bb5ba3", "patch": "@@ -0,0 +1,6 @@\n+warning: ignoring --out-dir flag due to -o flag\n+\n+error: the input file \"main.rs\" would be overwritten by the generated executable\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "81b1e7367c75a3bd2373c40201fd9f52319cc8a6", "filename": "tests/run-make/overwrite-input/folder.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7948c843de94245c794e8c63dd4301a78bb5ba3/tests%2Frun-make%2Foverwrite-input%2Ffolder.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7948c843de94245c794e8c63dd4301a78bb5ba3/tests%2Frun-make%2Foverwrite-input%2Ffolder.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Foverwrite-input%2Ffolder.stderr?ref=d7948c843de94245c794e8c63dd4301a78bb5ba3", "patch": "@@ -0,0 +1,6 @@\n+warning: ignoring --out-dir flag due to -o flag\n+\n+error: the generated executable for the input file \"main.rs\" conflicts with the existing directory \".\"\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "f328e4d9d04c31d0d70d16d21a07d1613be9d577", "filename": "tests/run-make/overwrite-input/main.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d7948c843de94245c794e8c63dd4301a78bb5ba3/tests%2Frun-make%2Foverwrite-input%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7948c843de94245c794e8c63dd4301a78bb5ba3/tests%2Frun-make%2Foverwrite-input%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Foverwrite-input%2Fmain.rs?ref=d7948c843de94245c794e8c63dd4301a78bb5ba3", "patch": "@@ -0,0 +1 @@\n+fn main() {}"}, {"sha": "9936962b4ee37fd2c5551222e2fec8c0c37d449b", "filename": "tests/run-make/overwrite-input/main.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7948c843de94245c794e8c63dd4301a78bb5ba3/tests%2Frun-make%2Foverwrite-input%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7948c843de94245c794e8c63dd4301a78bb5ba3/tests%2Frun-make%2Foverwrite-input%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Foverwrite-input%2Fmain.stderr?ref=d7948c843de94245c794e8c63dd4301a78bb5ba3", "patch": "@@ -0,0 +1,6 @@\n+warning: ignoring --out-dir flag due to -o flag\n+\n+error: the input file \"main.rs\" would be overwritten by the generated executable\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "9c0aa01357217294e70c38958be09ae0b411920c", "filename": "tests/ui/io-checks/inaccessbile-temp-dir.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d7948c843de94245c794e8c63dd4301a78bb5ba3/tests%2Fui%2Fio-checks%2Finaccessbile-temp-dir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7948c843de94245c794e8c63dd4301a78bb5ba3/tests%2Fui%2Fio-checks%2Finaccessbile-temp-dir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fio-checks%2Finaccessbile-temp-dir.rs?ref=d7948c843de94245c794e8c63dd4301a78bb5ba3", "patch": "@@ -0,0 +1,39 @@\n+// Issue #66530: We would ICE if someone compiled with `-o /dev/null`,\n+// because we would try to generate auxiliary files in `/dev/` (which\n+// at least the OS X file system rejects).\n+//\n+// An attempt to `-o` into a directory we cannot write into should indeed\n+// be an error; but not an ICE.\n+//\n+// However, some folks run tests as root, which can write `/dev/` and end\n+// up clobbering `/dev/null`. Instead we'll use a non-existent path, which\n+// also used to ICE, but even root can't magically write there.\n+\n+// compile-flags: -Z temps-dir=/does-not-exist/output\n+\n+// The error-pattern check occurs *before* normalization, and the error patterns\n+// are wildly different between build environments. So this is a cop-out (and we\n+// rely on the checking of the normalized stderr output as our actual\n+// \"verification\" of the diagnostic).\n+\n+// error-pattern: error\n+\n+// On Mac OS X, we get an error like the below\n+// normalize-stderr-test \"failed to write bytecode to /does-not-exist/output.non_ice_error_on_worker_io_fail.*\" -> \"io error modifying /does-not-exist/\"\n+\n+// On Linux, we get an error like the below\n+// normalize-stderr-test \"couldn't create a temp dir.*\" -> \"io error modifying /does-not-exist/\"\n+\n+// ignore-windows - this is a unix-specific test\n+// ignore-emscripten - the file-system issues do not replicate here\n+// ignore-wasm - the file-system issues do not replicate here\n+// ignore-arm - the file-system issues do not replicate here, at least on armhf-gnu\n+\n+#![crate_type = \"lib\"]\n+#![cfg_attr(not(feature = \"std\"), no_std)]\n+pub mod task {\n+    pub mod __internal {\n+        use crate::task::Waker;\n+    }\n+    pub use core::task::Waker;\n+}"}, {"sha": "2fc5f93ef791a11ed06c38dfc7f3bbf7034de4ba", "filename": "tests/ui/io-checks/inaccessbile-temp-dir.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7948c843de94245c794e8c63dd4301a78bb5ba3/tests%2Fui%2Fio-checks%2Finaccessbile-temp-dir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7948c843de94245c794e8c63dd4301a78bb5ba3/tests%2Fui%2Fio-checks%2Finaccessbile-temp-dir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fio-checks%2Finaccessbile-temp-dir.stderr?ref=d7948c843de94245c794e8c63dd4301a78bb5ba3", "patch": "@@ -0,0 +1,4 @@\n+error: failed to find or create the directory specified by `--temps-dir`\n+\n+error: aborting due to previous error\n+"}, {"sha": "134e7d420e3eafbed771ce5976b37f8f98ed591e", "filename": "tests/ui/io-checks/non-ice-error-on-worker-io-fail.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7948c843de94245c794e8c63dd4301a78bb5ba3/tests%2Fui%2Fio-checks%2Fnon-ice-error-on-worker-io-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7948c843de94245c794e8c63dd4301a78bb5ba3/tests%2Fui%2Fio-checks%2Fnon-ice-error-on-worker-io-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fio-checks%2Fnon-ice-error-on-worker-io-fail.rs?ref=d7948c843de94245c794e8c63dd4301a78bb5ba3", "previous_filename": "tests/ui/non-ice-error-on-worker-io-fail.rs"}, {"sha": "edadecf273a7b20e3a5e55d7727910d2449a3907", "filename": "tests/ui/io-checks/non-ice-error-on-worker-io-fail.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7948c843de94245c794e8c63dd4301a78bb5ba3/tests%2Fui%2Fio-checks%2Fnon-ice-error-on-worker-io-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7948c843de94245c794e8c63dd4301a78bb5ba3/tests%2Fui%2Fio-checks%2Fnon-ice-error-on-worker-io-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fio-checks%2Fnon-ice-error-on-worker-io-fail.stderr?ref=d7948c843de94245c794e8c63dd4301a78bb5ba3", "previous_filename": "tests/ui/non-ice-error-on-worker-io-fail.stderr"}]}