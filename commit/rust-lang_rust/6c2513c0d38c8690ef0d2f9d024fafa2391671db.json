{"sha": "6c2513c0d38c8690ef0d2f9d024fafa2391671db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMjUxM2MwZDM4Yzg2OTBlZjBkMmY5ZDAyNGZhZmEyMzkxNjcxZGI=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-11-25T16:04:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-25T16:04:58Z"}, "message": "Rollup merge of #56045 - qnighy:additional-sizedness, r=cramertj\n\nCheck arg/ret sizedness at ExprKind::Path\n\nThis PR solves three problems:\n\n- #50940: ICE on casting unsized tuple struct constructors\n- Unsized tuple struct constructors were callable in presence of `unsized_locals`.\n- https://github.com/rust-lang/rust/issues/48055#issuecomment-437178966: we cannot relax `Sized` bounds on stable functions because of fn ptr casting\n\nThese are caused by lack of `Sized`ness checks for arguments/retvals at **reference sites of `FnDef` items** (not call sites of the functions). Therefore we can basically add more `Sized` obligations on typeck. However, adding `Sized` obligations arbitrarily breaks type inference; to prevent that I added a new method `require_type_is_sized_deferred` which doesn't interfere usual type inference.", "tree": {"sha": "aeaa819308ab9e8e89dc13360309c302c75ba67f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aeaa819308ab9e8e89dc13360309c302c75ba67f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c2513c0d38c8690ef0d2f9d024fafa2391671db", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb+sgqCRBK7hj4Ov3rIwAAdHIIAKkaVJbOxXCeyi13h3Z5h2Tl\nJ76teB6GDDjG4+foRrDfXwjuM+C6b3m7aAlr2PNNejjtdXyZ+3l16sP1mZjIGUzp\nOtORzyM+IAVx+ci3fanhMxc6Cz5W0ssi895ShicTM1lYV3wjKbM4DkJbCo0veFNs\nSSdcRd0PRRkjSh9uSQhGXCVOjNqj3VoNZBvbRyJHsRVZSTPfCOOQ/SNw0hd8DLdW\nLdXAeqskQyRIprHb3DEWmkw/QEFT744jLILXhBRSpj1Q5KPGtX7RLgyQ74vXQgNC\nQ1u1eFRb441PNgtcXlfv4KKtMDX+MivA/b2oisOE4Cm6N3NtrAhMm6A3xnEV6HE=\n=mErW\n-----END PGP SIGNATURE-----\n", "payload": "tree aeaa819308ab9e8e89dc13360309c302c75ba67f\nparent 1aa3ffaf9912e2ba60295a28a820c38a78346dc5\nparent c6a803a286faae901a6ebd35ec222901f691c7ec\nauthor Pietro Albini <pietro@pietroalbini.org> 1543161898 +0100\ncommitter GitHub <noreply@github.com> 1543161898 +0100\n\nRollup merge of #56045 - qnighy:additional-sizedness, r=cramertj\n\nCheck arg/ret sizedness at ExprKind::Path\n\nThis PR solves three problems:\n\n- #50940: ICE on casting unsized tuple struct constructors\n- Unsized tuple struct constructors were callable in presence of `unsized_locals`.\n- https://github.com/rust-lang/rust/issues/48055#issuecomment-437178966: we cannot relax `Sized` bounds on stable functions because of fn ptr casting\n\nThese are caused by lack of `Sized`ness checks for arguments/retvals at **reference sites of `FnDef` items** (not call sites of the functions). Therefore we can basically add more `Sized` obligations on typeck. However, adding `Sized` obligations arbitrarily breaks type inference; to prevent that I added a new method `require_type_is_sized_deferred` which doesn't interfere usual type inference.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c2513c0d38c8690ef0d2f9d024fafa2391671db", "html_url": "https://github.com/rust-lang/rust/commit/6c2513c0d38c8690ef0d2f9d024fafa2391671db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c2513c0d38c8690ef0d2f9d024fafa2391671db/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1aa3ffaf9912e2ba60295a28a820c38a78346dc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1aa3ffaf9912e2ba60295a28a820c38a78346dc5", "html_url": "https://github.com/rust-lang/rust/commit/1aa3ffaf9912e2ba60295a28a820c38a78346dc5"}, {"sha": "c6a803a286faae901a6ebd35ec222901f691c7ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6a803a286faae901a6ebd35ec222901f691c7ec", "html_url": "https://github.com/rust-lang/rust/commit/c6a803a286faae901a6ebd35ec222901f691c7ec"}], "stats": {"total": 179, "additions": 133, "deletions": 46}, "files": [{"sha": "1165ab93a146953da8d37096e9c226edb492ca5b", "filename": "src/doc/unstable-book/src/language-features/unsized-locals.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c2513c0d38c8690ef0d2f9d024fafa2391671db/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funsized-locals.md", "raw_url": "https://github.com/rust-lang/rust/raw/6c2513c0d38c8690ef0d2f9d024fafa2391671db/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funsized-locals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funsized-locals.md?ref=6c2513c0d38c8690ef0d2f9d024fafa2391671db", "patch": "@@ -80,8 +80,6 @@ fn main() {\n }\n ```\n \n-However, the current implementation allows `MyTupleStruct(..)` to be unsized. This will be fixed in the future.\n-\n ## By-value trait objects\n \n With this feature, you can have by-value `self` arguments without `Self: Sized` bounds."}, {"sha": "e30a79b25de7fdd78535fa0d51d13566e07ac32c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6c2513c0d38c8690ef0d2f9d024fafa2391671db/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c2513c0d38c8690ef0d2f9d024fafa2391671db/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=6c2513c0d38c8690ef0d2f9d024fafa2391671db", "patch": "@@ -208,6 +208,10 @@ pub struct Inherited<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n \n     fulfillment_cx: RefCell<Box<dyn TraitEngine<'tcx>>>,\n \n+    // Some additional `Sized` obligations badly affect type inference.\n+    // These obligations are added in a later stage of typeck.\n+    deferred_sized_obligations: RefCell<Vec<(Ty<'tcx>, Span, traits::ObligationCauseCode<'tcx>)>>,\n+\n     // When we process a call like `c()` where `c` is a closure type,\n     // we may not have decided yet whether `c` is a `Fn`, `FnMut`, or\n     // `FnOnce` closure. In that case, we defer full resolution of the\n@@ -644,6 +648,7 @@ impl<'a, 'gcx, 'tcx> Inherited<'a, 'gcx, 'tcx> {\n             infcx,\n             fulfillment_cx: RefCell::new(TraitEngine::new(tcx)),\n             locals: RefCell::new(Default::default()),\n+            deferred_sized_obligations: RefCell::new(Vec::new()),\n             deferred_call_resolutions: RefCell::new(Default::default()),\n             deferred_cast_checks: RefCell::new(Vec::new()),\n             deferred_generator_interiors: RefCell::new(Vec::new()),\n@@ -907,6 +912,10 @@ fn typeck_tables_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         fcx.closure_analyze(body);\n         assert!(fcx.deferred_call_resolutions.borrow().is_empty());\n         fcx.resolve_generator_interiors(def_id);\n+\n+        for (ty, span, code) in fcx.deferred_sized_obligations.borrow_mut().drain(..) {\n+            fcx.require_type_is_sized(ty, span, code);\n+        }\n         fcx.select_all_obligations_or_error();\n \n         if fn_decl.is_some() {\n@@ -2345,6 +2354,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         self.require_type_meets(ty, span, code, lang_item);\n     }\n \n+    pub fn require_type_is_sized_deferred(&self,\n+                                          ty: Ty<'tcx>,\n+                                          span: Span,\n+                                          code: traits::ObligationCauseCode<'tcx>)\n+    {\n+        self.deferred_sized_obligations.borrow_mut().push((ty, span, code));\n+    }\n+\n     pub fn register_bound(&self,\n                           ty: Ty<'tcx>,\n                           def_id: DefId,\n@@ -3939,6 +3956,31 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     tcx.types.err\n                 };\n \n+                if let ty::FnDef(..) = ty.sty {\n+                    let fn_sig = ty.fn_sig(tcx);\n+                    if !tcx.features().unsized_locals {\n+                        // We want to remove some Sized bounds from std functions,\n+                        // but don't want to expose the removal to stable Rust.\n+                        // i.e. we don't want to allow\n+                        //\n+                        // ```rust\n+                        // drop as fn(str);\n+                        // ```\n+                        //\n+                        // to work in stable even if the Sized bound on `drop` is relaxed.\n+                        for i in 0..fn_sig.inputs().skip_binder().len() {\n+                            let input = tcx.erase_late_bound_regions(&fn_sig.input(i));\n+                            self.require_type_is_sized_deferred(input, expr.span,\n+                                                                traits::SizedArgumentType);\n+                        }\n+                    }\n+                    // Here we want to prevent struct constructors from returning unsized types.\n+                    // There were two cases this happened: fn pointer coercion in stable\n+                    // and usual function call in presense of unsized_locals.\n+                    let output = tcx.erase_late_bound_regions(&fn_sig.output());\n+                    self.require_type_is_sized_deferred(output, expr.span, traits::SizedReturnType);\n+                }\n+\n                 // We always require that the type provided as the value for\n                 // a type parameter outlives the moment of instantiation.\n                 let substs = self.tables.borrow().node_substs(expr.hir_id);"}, {"sha": "bc64fcdec2e3934a68fa378f8b1c51a57cc2fde6", "filename": "src/test/run-pass/unsized-locals/unsized-exprs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c2513c0d38c8690ef0d2f9d024fafa2391671db/src%2Ftest%2Frun-pass%2Funsized-locals%2Funsized-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c2513c0d38c8690ef0d2f9d024fafa2391671db/src%2Ftest%2Frun-pass%2Funsized-locals%2Funsized-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized-locals%2Funsized-exprs.rs?ref=6c2513c0d38c8690ef0d2f9d024fafa2391671db", "patch": "@@ -34,4 +34,5 @@ fn main() {\n     udrop::<[u8]>((*foo()));\n     udrop::<[u8]>((*tfoo()).1);\n     *afoo() + 42;\n+    udrop as fn([u8]);\n }"}, {"sha": "fdf8157dcf833918233aacc1107973455570d2df", "filename": "src/test/ui/issues/issue-30355.nll.stderr", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1aa3ffaf9912e2ba60295a28a820c38a78346dc5/src%2Ftest%2Fui%2Fissues%2Fissue-30355.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1aa3ffaf9912e2ba60295a28a820c38a78346dc5/src%2Ftest%2Fui%2Fissues%2Fissue-30355.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30355.nll.stderr?ref=1aa3ffaf9912e2ba60295a28a820c38a78346dc5", "patch": "@@ -1,22 +0,0 @@\n-error[E0161]: cannot move a value of type X: the size of X cannot be statically determined\n-  --> $DIR/issue-30355.rs:15:6\n-   |\n-LL |     &X(*Y)\n-   |      ^^^^^\n-\n-error[E0161]: cannot move a value of type [u8]: the size of [u8] cannot be statically determined\n-  --> $DIR/issue-30355.rs:15:8\n-   |\n-LL |     &X(*Y)\n-   |        ^^\n-\n-error[E0508]: cannot move out of type `[u8]`, a non-copy slice\n-  --> $DIR/issue-30355.rs:15:8\n-   |\n-LL |     &X(*Y)\n-   |        ^^ cannot move out of here\n-\n-error: aborting due to 3 previous errors\n-\n-Some errors occurred: E0161, E0508.\n-For more information about an error, try `rustc --explain E0161`."}, {"sha": "8d5eac06c43795cc630bfcdb8d480eb074a6dc89", "filename": "src/test/ui/issues/issue-30355.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c2513c0d38c8690ef0d2f9d024fafa2391671db/src%2Ftest%2Fui%2Fissues%2Fissue-30355.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c2513c0d38c8690ef0d2f9d024fafa2391671db/src%2Ftest%2Fui%2Fissues%2Fissue-30355.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30355.rs?ref=6c2513c0d38c8690ef0d2f9d024fafa2391671db", "patch": "@@ -13,9 +13,7 @@ pub struct X([u8]);\n pub static Y: &'static X = {\n     const Y: &'static [u8] = b\"\";\n     &X(*Y)\n-    //~^ ERROR cannot move out\n-    //~^^ ERROR cannot move a\n-    //~^^^ ERROR cannot move a\n+    //~^ ERROR E0277\n };\n \n fn main() {}"}, {"sha": "1b55f20e6b431662ad619ac6c73202c72c734b52", "filename": "src/test/ui/issues/issue-30355.stderr", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6c2513c0d38c8690ef0d2f9d024fafa2391671db/src%2Ftest%2Fui%2Fissues%2Fissue-30355.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c2513c0d38c8690ef0d2f9d024fafa2391671db/src%2Ftest%2Fui%2Fissues%2Fissue-30355.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30355.stderr?ref=6c2513c0d38c8690ef0d2f9d024fafa2391671db", "patch": "@@ -1,22 +1,14 @@\n-error[E0161]: cannot move a value of type X: the size of X cannot be statically determined\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n   --> $DIR/issue-30355.rs:15:6\n    |\n LL |     &X(*Y)\n-   |      ^^^^^\n-\n-error[E0161]: cannot move a value of type [u8]: the size of [u8] cannot be statically determined\n-  --> $DIR/issue-30355.rs:15:8\n+   |      ^ doesn't have a size known at compile-time\n    |\n-LL |     &X(*Y)\n-   |        ^^\n-\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/issue-30355.rs:15:8\n-   |\n-LL |     &X(*Y)\n-   |        ^^ cannot move out of borrowed content\n+   = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: all function arguments must have a statically known size\n+   = help: unsized locals are gated as an unstable feature\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0161, E0507.\n-For more information about an error, try `rustc --explain E0161`.\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "065563d45a472a260283a4c9dc4c9ad5fbd8b94a", "filename": "src/test/ui/unsized-locals/auxiliary/ufuncs.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6c2513c0d38c8690ef0d2f9d024fafa2391671db/src%2Ftest%2Fui%2Funsized-locals%2Fauxiliary%2Fufuncs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c2513c0d38c8690ef0d2f9d024fafa2391671db/src%2Ftest%2Fui%2Funsized-locals%2Fauxiliary%2Fufuncs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fauxiliary%2Fufuncs.rs?ref=6c2513c0d38c8690ef0d2f9d024fafa2391671db", "patch": "@@ -0,0 +1,3 @@\n+#![feature(unsized_locals)]\n+\n+pub fn udrop<T: ?Sized>(_x: T) {}"}, {"sha": "3e5d39ab311509000c230009f630ad744c9f3f0f", "filename": "src/test/ui/unsized-locals/issue-50940-with-feature.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6c2513c0d38c8690ef0d2f9d024fafa2391671db/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940-with-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c2513c0d38c8690ef0d2f9d024fafa2391671db/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940-with-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940-with-feature.rs?ref=6c2513c0d38c8690ef0d2f9d024fafa2391671db", "patch": "@@ -0,0 +1,7 @@\n+#![feature(unsized_locals)]\n+\n+fn main() {\n+    struct A<X: ?Sized>(X);\n+    A as fn(str) -> A<str>;\n+    //~^ERROR the size for values of type `str` cannot be known at compilation time\n+}"}, {"sha": "f4f015fa1906580163766991d7440ce76d97e64c", "filename": "src/test/ui/unsized-locals/issue-50940-with-feature.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6c2513c0d38c8690ef0d2f9d024fafa2391671db/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940-with-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c2513c0d38c8690ef0d2f9d024fafa2391671db/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940-with-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940-with-feature.stderr?ref=6c2513c0d38c8690ef0d2f9d024fafa2391671db", "patch": "@@ -0,0 +1,14 @@\n+error[E0277]: the size for values of type `str` cannot be known at compilation time\n+  --> $DIR/issue-50940-with-feature.rs:5:5\n+   |\n+LL |     A as fn(str) -> A<str>;\n+   |     ^ doesn't have a size known at compile-time\n+   |\n+   = help: within `main::A<str>`, the trait `std::marker::Sized` is not implemented for `str`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: required because it appears within the type `main::A<str>`\n+   = note: the return type of a function must have a statically known size\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "7ba809b7e83e3a3117f3fca835330481fb1c30cf", "filename": "src/test/ui/unsized-locals/issue-50940.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6c2513c0d38c8690ef0d2f9d024fafa2391671db/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c2513c0d38c8690ef0d2f9d024fafa2391671db/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940.rs?ref=6c2513c0d38c8690ef0d2f9d024fafa2391671db", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    struct A<X: ?Sized>(X);\n+    A as fn(str) -> A<str>;\n+    //~^ERROR the size for values of type `str` cannot be known at compilation time\n+}"}, {"sha": "9f3669ccf1f15dbb662b54f37871da749d371fba", "filename": "src/test/ui/unsized-locals/issue-50940.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6c2513c0d38c8690ef0d2f9d024fafa2391671db/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c2513c0d38c8690ef0d2f9d024fafa2391671db/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940.stderr?ref=6c2513c0d38c8690ef0d2f9d024fafa2391671db", "patch": "@@ -0,0 +1,14 @@\n+error[E0277]: the size for values of type `str` cannot be known at compilation time\n+  --> $DIR/issue-50940.rs:3:5\n+   |\n+LL |     A as fn(str) -> A<str>;\n+   |     ^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `str`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: all function arguments must have a statically known size\n+   = help: unsized locals are gated as an unstable feature\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "8ca88edcb6add6da602ab0aa79b0d1f46e6db111", "filename": "src/test/ui/unsized-locals/unsized-exprs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c2513c0d38c8690ef0d2f9d024fafa2391671db/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c2513c0d38c8690ef0d2f9d024fafa2391671db/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.rs?ref=6c2513c0d38c8690ef0d2f9d024fafa2391671db", "patch": "@@ -23,4 +23,6 @@ fn main() {\n     //~^ERROR E0277\n     udrop::<A<[u8]>>(A { 0: *foo() });\n     //~^ERROR E0277\n+    udrop::<A<[u8]>>(A(*foo()));\n+    //~^ERROR E0277\n }"}, {"sha": "0ca60e8dea0d9a709b768e56e0056bb208217494", "filename": "src/test/ui/unsized-locals/unsized-exprs.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6c2513c0d38c8690ef0d2f9d024fafa2391671db/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c2513c0d38c8690ef0d2f9d024fafa2391671db/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr?ref=6c2513c0d38c8690ef0d2f9d024fafa2391671db", "patch": "@@ -20,6 +20,17 @@ LL |     udrop::<A<[u8]>>(A { 0: *foo() });\n    = note: required because it appears within the type `A<[u8]>`\n    = note: structs must have a statically known size to be initialized\n \n-error: aborting due to 2 previous errors\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/unsized-exprs.rs:26:22\n+   |\n+LL |     udrop::<A<[u8]>>(A(*foo()));\n+   |                      ^ doesn't have a size known at compile-time\n+   |\n+   = help: within `A<[u8]>`, the trait `std::marker::Sized` is not implemented for `[u8]`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: required because it appears within the type `A<[u8]>`\n+   = note: the return type of a function must have a statically known size\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "3fb5a002e0e3c4e6468f5f8afc1dc0415a16cf37", "filename": "src/test/ui/unsized-locals/unsized-exprs2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c2513c0d38c8690ef0d2f9d024fafa2391671db/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c2513c0d38c8690ef0d2f9d024fafa2391671db/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs2.rs?ref=6c2513c0d38c8690ef0d2f9d024fafa2391671db", "patch": "@@ -21,6 +21,4 @@ impl std::ops::Add<i32> for A<[u8]> {\n fn main() {\n     udrop::<[u8]>(foo()[..]);\n     //~^ERROR cannot move out of indexed content\n-    // FIXME: should be error\n-    udrop::<A<[u8]>>(A(*foo()));\n }"}, {"sha": "2133b01e0948012df9068ee0a69cf6e9ef309ff4", "filename": "src/test/ui/unsized-locals/unsized-exprs3.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c2513c0d38c8690ef0d2f9d024fafa2391671db/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c2513c0d38c8690ef0d2f9d024fafa2391671db/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs3.rs?ref=6c2513c0d38c8690ef0d2f9d024fafa2391671db", "patch": "@@ -0,0 +1,10 @@\n+// aux-build:ufuncs.rs\n+\n+extern crate ufuncs;\n+\n+use ufuncs::udrop;\n+\n+fn main() {\n+    udrop as fn([u8]);\n+    //~^ERROR E0277\n+}"}, {"sha": "42f91a946a851b475ba2bb9e41fa2ecec5cc467e", "filename": "src/test/ui/unsized-locals/unsized-exprs3.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6c2513c0d38c8690ef0d2f9d024fafa2391671db/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c2513c0d38c8690ef0d2f9d024fafa2391671db/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs3.stderr?ref=6c2513c0d38c8690ef0d2f9d024fafa2391671db", "patch": "@@ -0,0 +1,14 @@\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/unsized-exprs3.rs:8:5\n+   |\n+LL |     udrop as fn([u8]);\n+   |     ^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: all function arguments must have a statically known size\n+   = help: unsized locals are gated as an unstable feature\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}