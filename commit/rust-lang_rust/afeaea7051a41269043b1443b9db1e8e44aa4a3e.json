{"sha": "afeaea7051a41269043b1443b9db1e8e44aa4a3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmZWFlYTcwNTFhNDEyNjkwNDNiMTQ0M2I5ZGIxZThlNDRhYTRhM2U=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-28T13:34:23Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-28T13:34:23Z"}, "message": "drop error from SOurceFile constructor", "tree": {"sha": "c8641dd8c3f792d290f2a979d3743ad3b848c957", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8641dd8c3f792d290f2a979d3743ad3b848c957"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afeaea7051a41269043b1443b9db1e8e44aa4a3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afeaea7051a41269043b1443b9db1e8e44aa4a3e", "html_url": "https://github.com/rust-lang/rust/commit/afeaea7051a41269043b1443b9db1e8e44aa4a3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afeaea7051a41269043b1443b9db1e8e44aa4a3e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cece9f219016152b2e8bc6194fb7f44a441c6db", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cece9f219016152b2e8bc6194fb7f44a441c6db", "html_url": "https://github.com/rust-lang/rust/commit/1cece9f219016152b2e8bc6194fb7f44a441c6db"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "f765f621bf08183a5ff830e3db0891adb7bdd822", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/afeaea7051a41269043b1443b9db1e8e44aa4a3e/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afeaea7051a41269043b1443b9db1e8e44aa4a3e/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=afeaea7051a41269043b1443b9db1e8e44aa4a3e", "patch": "@@ -74,7 +74,7 @@ impl Parse {\n pub use crate::ast::SourceFile;\n \n impl SourceFile {\n-    fn new(green: GreenNode, _errors: Vec<SyntaxError>) -> TreeArc<SourceFile> {\n+    fn new(green: GreenNode) -> TreeArc<SourceFile> {\n         let root = SyntaxNode::new(green);\n         if cfg!(debug_assertions) {\n             validation::validate_block_structure(&root);\n@@ -84,8 +84,8 @@ impl SourceFile {\n     }\n \n     pub fn parse(text: &str) -> TreeArc<SourceFile> {\n-        let (green, errors) = parsing::parse_text(text);\n-        SourceFile::new(green, errors)\n+        let (green, _errors) = parsing::parse_text(text);\n+        SourceFile::new(green)\n     }\n \n     pub fn reparse(&self, edit: &AtomTextEdit) -> TreeArc<SourceFile> {\n@@ -94,7 +94,7 @@ impl SourceFile {\n \n     pub fn incremental_reparse(&self, edit: &AtomTextEdit) -> Option<TreeArc<SourceFile>> {\n         parsing::incremental_reparse(self.syntax(), edit, self.errors())\n-            .map(|(green_node, errors, _reparsed_range)| SourceFile::new(green_node, errors))\n+            .map(|(green_node, _errors, _reparsed_range)| SourceFile::new(green_node))\n     }\n \n     fn full_reparse(&self, edit: &AtomTextEdit) -> TreeArc<SourceFile> {"}, {"sha": "ef7a51686ee0ab52b6ae4024d105971fb51ff971", "filename": "crates/ra_syntax/src/syntax_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afeaea7051a41269043b1443b9db1e8e44aa4a3e/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afeaea7051a41269043b1443b9db1e8e44aa4a3e/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs?ref=afeaea7051a41269043b1443b9db1e8e44aa4a3e", "patch": "@@ -383,7 +383,7 @@ impl SyntaxNode {\n         let len = new_children.iter().map(|it| it.text_len()).sum::<TextUnit>();\n         let new_node = GreenNode::new(rowan::SyntaxKind(self.kind() as u16), new_children);\n         let new_file_node = self.replace_with(new_node);\n-        let file = SourceFile::new(new_file_node, Vec::new());\n+        let file = SourceFile::new(new_file_node);\n \n         // FIXME: use a more elegant way to re-fetch the node (#1185), make\n         // `range` private afterwards"}]}