{"sha": "13555593672b49b5306990d63d0e61a49e17d9f0", "node_id": "C_kwDOAAsO6NoAKDEzNTU1NTkzNjcyYjQ5YjUzMDY5OTBkNjNkMGU2MWE0OWUxN2Q5ZjA", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-01-16T14:27:33Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-01-16T14:46:44Z"}, "message": "Avoid an unnecessary allocation", "tree": {"sha": "9bad8c0892a3e86efeb0f1c6d010de2da23d028c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bad8c0892a3e86efeb0f1c6d010de2da23d028c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13555593672b49b5306990d63d0e61a49e17d9f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13555593672b49b5306990d63d0e61a49e17d9f0", "html_url": "https://github.com/rust-lang/rust/commit/13555593672b49b5306990d63d0e61a49e17d9f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13555593672b49b5306990d63d0e61a49e17d9f0/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44ef075aeb308422ac513ddc8f18978d9b92eea4", "url": "https://api.github.com/repos/rust-lang/rust/commits/44ef075aeb308422ac513ddc8f18978d9b92eea4", "html_url": "https://github.com/rust-lang/rust/commit/44ef075aeb308422ac513ddc8f18978d9b92eea4"}], "stats": {"total": 55, "additions": 28, "deletions": 27}, "files": [{"sha": "e65d57bb3db3e7737ffbc18b8670df244346be6f", "filename": "compiler/rustc_save_analysis/src/span_utils.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13555593672b49b5306990d63d0e61a49e17d9f0/compiler%2Frustc_save_analysis%2Fsrc%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13555593672b49b5306990d63d0e61a49e17d9f0/compiler%2Frustc_save_analysis%2Fsrc%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fspan_utils.rs?ref=13555593672b49b5306990d63d0e61a49e17d9f0", "patch": "@@ -18,13 +18,7 @@ impl<'a> SpanUtils<'a> {\n         match &file.name {\n             FileName::Real(RealFileName::LocalPath(path)) => {\n                 if path.is_absolute() {\n-                    self.sess\n-                        .source_map()\n-                        .path_mapping()\n-                        .map_prefix(path.into())\n-                        .0\n-                        .display()\n-                        .to_string()\n+                    self.sess.source_map().path_mapping().map_prefix(path).0.display().to_string()\n                 } else {\n                     self.sess\n                         .opts"}, {"sha": "df6b30bfee9e4efde02382b054e77c8006dfbfae", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/13555593672b49b5306990d63d0e61a49e17d9f0/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13555593672b49b5306990d63d0e61a49e17d9f0/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=13555593672b49b5306990d63d0e61a49e17d9f0", "patch": "@@ -592,19 +592,19 @@ impl Input {\n         }\n     }\n \n-    pub fn opt_path(&self) -> Option<PathBuf> {\n+    pub fn opt_path(&self) -> Option<&Path> {\n         match self {\n-            Input::File(file) => Some(file.clone()),\n+            Input::File(file) => Some(file),\n             Input::Str { name, .. } => match name {\n-                FileName::Real(real) => real.local_path().map(|p| p.to_owned()),\n+                FileName::Real(real) => real.local_path(),\n                 FileName::QuoteExpansion(_) => None,\n                 FileName::Anon(_) => None,\n                 FileName::MacroExpansion(_) => None,\n                 FileName::ProcMacroSourceCode(_) => None,\n                 FileName::CfgSpec(_) => None,\n                 FileName::CliCrateAttr(_) => None,\n                 FileName::Custom(_) => None,\n-                FileName::DocTest(path, _) => Some(path.to_owned()),\n+                FileName::DocTest(path, _) => Some(path),\n                 FileName::InlineAsm(_) => None,\n             },\n         }\n@@ -2509,12 +2509,12 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         early_error(error_format, &format!(\"Current directory is invalid: {e}\"));\n     });\n \n-    let (path, remapped) =\n-        FilePathMapping::new(remap_path_prefix.clone()).map_prefix(working_dir.clone());\n+    let remap = FilePathMapping::new(remap_path_prefix.clone());\n+    let (path, remapped) = remap.map_prefix(&working_dir);\n     let working_dir = if remapped {\n-        RealFileName::Remapped { local_path: Some(working_dir), virtual_name: path }\n+        RealFileName::Remapped { virtual_name: path.into_owned(), local_path: Some(working_dir) }\n     } else {\n-        RealFileName::LocalPath(path)\n+        RealFileName::LocalPath(path.into_owned())\n     };\n \n     Options {"}, {"sha": "d4a1e849b2a0949288af41600efa2251f94b4d9c", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13555593672b49b5306990d63d0e61a49e17d9f0/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13555593672b49b5306990d63d0e61a49e17d9f0/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=13555593672b49b5306990d63d0e61a49e17d9f0", "patch": "@@ -237,7 +237,7 @@ impl Session {\n \n     pub fn local_crate_source_file(&self) -> Option<PathBuf> {\n         let path = self.io.input.opt_path()?;\n-        Some(self.opts.file_path_mapping().map_prefix(path).0)\n+        Some(self.opts.file_path_mapping().map_prefix(path).0.into_owned())\n     }\n \n     fn check_miri_unleashed_features(&self) {"}, {"sha": "5bfe247c58d8d13d30b6cbdbda2e7a5d18107b82", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/13555593672b49b5306990d63d0e61a49e17d9f0/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13555593672b49b5306990d63d0e61a49e17d9f0/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=13555593672b49b5306990d63d0e61a49e17d9f0", "patch": "@@ -1138,7 +1138,8 @@ impl FilePathMapping {\n     /// Applies any path prefix substitution as defined by the mapping.\n     /// The return value is the remapped path and a boolean indicating whether\n     /// the path was affected by the mapping.\n-    pub fn map_prefix(&self, path: PathBuf) -> (PathBuf, bool) {\n+    pub fn map_prefix<'a>(&'a self, path: impl Into<Cow<'a, Path>>) -> (Cow<'a, Path>, bool) {\n+        let path = path.into();\n         if path.as_os_str().is_empty() {\n             // Exit early if the path is empty and therefore there's nothing to remap.\n             // This is mostly to reduce spam for `RUSTC_LOG=[remap_path_prefix]`.\n@@ -1148,7 +1149,10 @@ impl FilePathMapping {\n         return remap_path_prefix(&self.mapping, path);\n \n         #[instrument(level = \"debug\", skip(mapping), ret)]\n-        fn remap_path_prefix(mapping: &[(PathBuf, PathBuf)], path: PathBuf) -> (PathBuf, bool) {\n+        fn remap_path_prefix<'a>(\n+            mapping: &'a [(PathBuf, PathBuf)],\n+            path: Cow<'a, Path>,\n+        ) -> (Cow<'a, Path>, bool) {\n             // NOTE: We are iterating over the mapping entries from last to first\n             //       because entries specified later on the command line should\n             //       take precedence.\n@@ -1163,9 +1167,9 @@ impl FilePathMapping {\n                         // in remapped paths down the line.\n                         // So, if we have an exact match, we just return that without a call\n                         // to `Path::join()`.\n-                        to.clone()\n+                        to.into()\n                     } else {\n-                        to.join(rest)\n+                        to.join(rest).into()\n                     };\n                     debug!(\"Match - remapped\");\n \n@@ -1183,11 +1187,11 @@ impl FilePathMapping {\n     fn map_filename_prefix(&self, file: &FileName) -> (FileName, bool) {\n         match file {\n             FileName::Real(realfile) if let RealFileName::LocalPath(local_path) = realfile => {\n-                let (mapped_path, mapped) = self.map_prefix(local_path.to_path_buf());\n+                let (mapped_path, mapped) = self.map_prefix(local_path);\n                 let realfile = if mapped {\n                     RealFileName::Remapped {\n                         local_path: Some(local_path.clone()),\n-                        virtual_name: mapped_path,\n+                        virtual_name: mapped_path.into_owned(),\n                     }\n                 } else {\n                     realfile.clone()\n@@ -1228,14 +1232,17 @@ impl FilePathMapping {\n                 let (new_path, was_remapped) = self.map_prefix(unmapped_file_path);\n                 if was_remapped {\n                     // It was remapped, so don't modify further\n-                    return RealFileName::Remapped { local_path: None, virtual_name: new_path };\n+                    return RealFileName::Remapped {\n+                        local_path: None,\n+                        virtual_name: new_path.into_owned(),\n+                    };\n                 }\n \n                 if new_path.is_absolute() {\n                     // No remapping has applied to this path and it is absolute,\n                     // so the working directory cannot influence it either, so\n                     // we are done.\n-                    return RealFileName::LocalPath(new_path);\n+                    return RealFileName::LocalPath(new_path.into_owned());\n                 }\n \n                 debug_assert!(new_path.is_relative());\n@@ -1253,12 +1260,12 @@ impl FilePathMapping {\n                             RealFileName::Remapped {\n                                 // Erase the actual path\n                                 local_path: None,\n-                                virtual_name: file_path_abs,\n+                                virtual_name: file_path_abs.into_owned(),\n                             }\n                         } else {\n                             // No kind of remapping applied to this path, so\n                             // we leave it as it is.\n-                            RealFileName::LocalPath(file_path_abs)\n+                            RealFileName::LocalPath(file_path_abs.into_owned())\n                         }\n                     }\n                     RealFileName::Remapped {"}, {"sha": "8671267725230c15904163b171054d7be9e1fdd6", "filename": "compiler/rustc_span/src/source_map/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13555593672b49b5306990d63d0e61a49e17d9f0/compiler%2Frustc_span%2Fsrc%2Fsource_map%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13555593672b49b5306990d63d0e61a49e17d9f0/compiler%2Frustc_span%2Fsrc%2Fsource_map%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map%2Ftests.rs?ref=13555593672b49b5306990d63d0e61a49e17d9f0", "patch": "@@ -387,7 +387,7 @@ fn path_prefix_remapping_expand_to_absolute() {\n     let working_directory = path(\"/foo\");\n     let working_directory = RealFileName::Remapped {\n         local_path: Some(working_directory.clone()),\n-        virtual_name: mapping.map_prefix(working_directory).0,\n+        virtual_name: mapping.map_prefix(working_directory).0.into_owned(),\n     };\n \n     assert_eq!(working_directory.remapped_path_if_available(), path(\"FOO\"));"}]}