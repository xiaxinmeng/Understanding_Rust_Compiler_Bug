{"sha": "8d500572fa8f4110033fa3bc5e925831f6bbd18e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNTAwNTcyZmE4ZjQxMTAwMzNmYTNiYzVlOTI1ODMxZjZiYmQxOGU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-12-15T00:47:18Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-12-24T16:32:57Z"}, "message": "std: Use backtrace-sys from crates.io\n\nThis commit switches the standard library to using the `backtrace-sys`\ncrate from crates.io instead of duplicating the logic here in the Rust\nrepositor with the `backtrace-sys`'s crate's logic.\n\nEventually this will hopefully be a good step towards using the\n`backtrace` crate directly from crates.io itself, but we're not quite\nthere yet! Hopefully this is a small incremental first step we can take.", "tree": {"sha": "c21fb3a40f8f8a4f57879ed39a9ce5ddc1f66fbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c21fb3a40f8f8a4f57879ed39a9ce5ddc1f66fbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d500572fa8f4110033fa3bc5e925831f6bbd18e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d500572fa8f4110033fa3bc5e925831f6bbd18e", "html_url": "https://github.com/rust-lang/rust/commit/8d500572fa8f4110033fa3bc5e925831f6bbd18e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d500572fa8f4110033fa3bc5e925831f6bbd18e/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50f3d6eccb85a24a02b7c1daf5e242768dddf3b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/50f3d6eccb85a24a02b7c1daf5e242768dddf3b5", "html_url": "https://github.com/rust-lang/rust/commit/50f3d6eccb85a24a02b7c1daf5e242768dddf3b5"}], "stats": {"total": 178, "additions": 40, "deletions": 138}, "files": [{"sha": "c4763612dbf3cc85d8682775b79d3297e6ec8c69", "filename": ".gitmodules", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d500572fa8f4110033fa3bc5e925831f6bbd18e/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/8d500572fa8f4110033fa3bc5e925831f6bbd18e/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=8d500572fa8f4110033fa3bc5e925831f6bbd18e", "patch": "@@ -41,9 +41,6 @@\n [submodule \"src/tools/lld\"]\n \tpath = src/tools/lld\n \turl = https://github.com/rust-lang/lld.git\n-[submodule \"src/libbacktrace\"]\n-\tpath = src/libbacktrace\n-\turl = https://github.com/rust-lang-nursery/libbacktrace.git\n [submodule \"src/tools/lldb\"]\n \tpath = src/tools/lldb\n \turl = https://github.com/rust-lang-nursery/lldb.git"}, {"sha": "1337318bad74d885a6161687bb35d4e7f6c989a7", "filename": "Cargo.lock", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8d500572fa8f4110033fa3bc5e925831f6bbd18e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8d500572fa8f4110033fa3bc5e925831f6bbd18e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=8d500572fa8f4110033fa3bc5e925831f6bbd18e", "patch": "@@ -85,7 +85,7 @@ name = \"backtrace\"\n version = \"0.3.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"backtrace-sys 0.1.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"backtrace-sys 0.1.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cfg-if 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-demangle 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -94,11 +94,13 @@ dependencies = [\n \n [[package]]\n name = \"backtrace-sys\"\n-version = \"0.1.24\"\n+version = \"0.1.27\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cc 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-std-workspace-core 1.0.0\",\n ]\n \n [[package]]\n@@ -2887,7 +2889,7 @@ name = \"std\"\n version = \"0.0.0\"\n dependencies = [\n  \"alloc 0.0.0\",\n- \"build_helper 0.1.0\",\n+ \"backtrace-sys 0.1.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cc 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"compiler_builtins 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n@@ -3388,7 +3390,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum assert_cli 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"98589b0e465a6c510d95fceebd365bb79bedece7f6e18a480897f2015f85ec51\"\n \"checksum atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9a7d5b8723950951411ee34d271d99dddcc2035a16ab25310ea2c8cfd4369652\"\n \"checksum backtrace 0.3.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"18b65ea1161bfb2dd6da6fade5edd4dbd08fba85012123dd333d2fd1b90b2782\"\n-\"checksum backtrace-sys 0.1.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c66d56ac8dabd07f6aacdaf633f4b8262f5b3601a810a0dcddffd5c22c69daa0\"\n+\"checksum backtrace-sys 0.1.27 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6ea90dd7b012b3d1a2cb6bec16670a0db2c95d4e931e84f4047e0460c1b34c8d\"\n \"checksum bit-set 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6f1efcc46c18245a69c38fcc5cc650f16d3a59d034f3106e9ed63748f695730a\"\n \"checksum bit-vec 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4440d5cb623bb7390ae27fec0bb6c61111969860f8e3ae198bfa0663645e67cf\"\n \"checksum bitflags 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4efd02e230a02e18f92fc2735f44597385ed02ad8f831e7c1c1156ee5e1ab3a5\""}, {"sha": "e38a1d295453aafcd0db1bfa522eda4afa0f7448", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d500572fa8f4110033fa3bc5e925831f6bbd18e/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d500572fa8f4110033fa3bc5e925831f6bbd18e/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=8d500572fa8f4110033fa3bc5e925831f6bbd18e", "patch": "@@ -858,7 +858,6 @@ impl Step for Src {\n         let std_src_dirs = [\n             \"src/build_helper\",\n             \"src/liballoc\",\n-            \"src/libbacktrace\",\n             \"src/libcore\",\n             \"src/libpanic_abort\",\n             \"src/libpanic_unwind\","}, {"sha": "f4d02bbdbf8a2c5a31f0801dfef597a86caad9e3", "filename": "src/libbacktrace", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibbacktrace?ref=50f3d6eccb85a24a02b7c1daf5e242768dddf3b5", "patch": "@@ -1 +0,0 @@\n-Subproject commit f4d02bbdbf8a2c5a31f0801dfef597a86caad9e3"}, {"sha": "5214f365a64760f1ce6da362aa4000b33c1cb9d9", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d500572fa8f4110033fa3bc5e925831f6bbd18e/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8d500572fa8f4110033fa3bc5e925831f6bbd18e/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=8d500572fa8f4110033fa3bc5e925831f6bbd18e", "patch": "@@ -22,6 +22,7 @@ compiler_builtins = { version = \"0.1.1\" }\n profiler_builtins = { path = \"../libprofiler_builtins\", optional = true }\n unwind = { path = \"../libunwind\" }\n rustc-demangle = { version = \"0.1.10\", features = ['rustc-dep-of-std'] }\n+backtrace-sys = { version = \"0.1.24\", features = [\"rustc-dep-of-std\"], optional = true }\n \n [dev-dependencies]\n rand = \"0.6.1\"\n@@ -44,12 +45,11 @@ fortanix-sgx-abi = { version = \"0.3.2\", features = ['rustc-dep-of-std'] }\n \n [build-dependencies]\n cc = \"1.0\"\n-build_helper = { path = \"../build_helper\" }\n \n [features]\n default = [\"compiler_builtins_c\"]\n \n-backtrace = []\n+backtrace = [\"backtrace-sys\"]\n panic-unwind = [\"panic_unwind\"]\n profiler = [\"profiler_builtins\"]\n compiler_builtins_c = [\"compiler_builtins/c\"]"}, {"sha": "69bd0e41504fad12d1b2dcb0c2c39e95de6b2c9a", "filename": "src/libstd/build.rs", "status": "modified", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/8d500572fa8f4110033fa3bc5e925831f6bbd18e/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d500572fa8f4110033fa3bc5e925831f6bbd18e/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=8d500572fa8f4110033fa3bc5e925831f6bbd18e", "patch": "@@ -10,24 +10,12 @@\n \n #![deny(warnings)]\n \n-extern crate build_helper;\n extern crate cc;\n \n-use build_helper::native_lib_boilerplate;\n use std::env;\n-use std::fs::File;\n \n fn main() {\n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n-    if cfg!(feature = \"backtrace\") &&\n-        !target.contains(\"cloudabi\") &&\n-        !target.contains(\"emscripten\") &&\n-        !target.contains(\"msvc\") &&\n-        !target.contains(\"wasm32\")\n-    {\n-        let _ = build_libbacktrace(&target);\n-    }\n-\n     if target.contains(\"linux\") {\n         if target.contains(\"android\") {\n             println!(\"cargo:rustc-link-lib=dl\");\n@@ -79,67 +67,3 @@ fn main() {\n         println!(\"cargo:rustc-link-lib=compiler_rt\");\n     }\n }\n-\n-fn build_libbacktrace(target: &str) -> Result<(), ()> {\n-    let native = native_lib_boilerplate(\n-        \"../libbacktrace\".as_ref(),\n-        \"libbacktrace\",\n-        \"backtrace\",\n-        \"\",\n-    )?;\n-\n-    let mut build = cc::Build::new();\n-    build\n-        .flag(\"-fvisibility=hidden\")\n-        .include(\"../libbacktrace\")\n-        .include(&native.out_dir)\n-        .out_dir(&native.out_dir)\n-        .warnings(false)\n-        .file(\"../libbacktrace/alloc.c\")\n-        .file(\"../libbacktrace/backtrace.c\")\n-        .file(\"../libbacktrace/dwarf.c\")\n-        .file(\"../libbacktrace/fileline.c\")\n-        .file(\"../libbacktrace/posix.c\")\n-        .file(\"../libbacktrace/read.c\")\n-        .file(\"../libbacktrace/sort.c\")\n-        .file(\"../libbacktrace/state.c\");\n-\n-    let any_debug = env::var(\"RUSTC_DEBUGINFO\").unwrap_or_default() == \"true\" ||\n-        env::var(\"RUSTC_DEBUGINFO_LINES\").unwrap_or_default() == \"true\";\n-    build.debug(any_debug);\n-\n-    if target.contains(\"darwin\") {\n-        build.file(\"../libbacktrace/macho.c\");\n-    } else if target.contains(\"windows\") {\n-        build.file(\"../libbacktrace/pecoff.c\");\n-    } else {\n-        build.file(\"../libbacktrace/elf.c\");\n-\n-        let pointer_width = env::var(\"CARGO_CFG_TARGET_POINTER_WIDTH\").unwrap();\n-        if pointer_width == \"64\" {\n-            build.define(\"BACKTRACE_ELF_SIZE\", \"64\");\n-        } else {\n-            build.define(\"BACKTRACE_ELF_SIZE\", \"32\");\n-        }\n-    }\n-\n-    File::create(native.out_dir.join(\"backtrace-supported.h\")).unwrap();\n-    build.define(\"BACKTRACE_SUPPORTED\", \"1\");\n-    build.define(\"BACKTRACE_USES_MALLOC\", \"1\");\n-    build.define(\"BACKTRACE_SUPPORTS_THREADS\", \"0\");\n-    build.define(\"BACKTRACE_SUPPORTS_DATA\", \"0\");\n-\n-    File::create(native.out_dir.join(\"config.h\")).unwrap();\n-    if !target.contains(\"apple-ios\") &&\n-       !target.contains(\"solaris\") &&\n-       !target.contains(\"redox\") &&\n-       !target.contains(\"android\") &&\n-       !target.contains(\"haiku\") {\n-        build.define(\"HAVE_DL_ITERATE_PHDR\", \"1\");\n-    }\n-    build.define(\"_GNU_SOURCE\", \"1\");\n-    build.define(\"_LARGE_FILES\", \"1\");\n-\n-    build.compile(\"backtrace\");\n-    Ok(())\n-}"}, {"sha": "af5d511c035ee37ea385e238640dbb482d8fd007", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d500572fa8f4110033fa3bc5e925831f6bbd18e/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d500572fa8f4110033fa3bc5e925831f6bbd18e/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=8d500572fa8f4110033fa3bc5e925831f6bbd18e", "patch": "@@ -346,6 +346,9 @@ extern crate rustc_demangle;\n #[allow(unused_extern_crates)]\n extern crate unwind;\n \n+#[cfg(feature = \"backtrace\")]\n+extern crate backtrace_sys;\n+\n // During testing, this crate is not actually the \"real\" std library, but rather\n // it links to the real std library, which was compiled from this same source\n // code. So any lang items std defines are conditionally excluded (or else they"}, {"sha": "08cd7b05e07553e541a6c6d0014dfb62fc77d9c4", "filename": "src/libstd/sys_common/backtrace.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8d500572fa8f4110033fa3bc5e925831f6bbd18e/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d500572fa8f4110033fa3bc5e925831f6bbd18e/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fbacktrace.rs?ref=8d500572fa8f4110033fa3bc5e925831f6bbd18e", "patch": "@@ -53,6 +53,14 @@ const MAX_NB_FRAMES: usize = 100;\n pub fn print(w: &mut dyn Write, format: PrintFormat) -> io::Result<()> {\n     static LOCK: Mutex = Mutex::new();\n \n+    // There are issues currently linking libbacktrace into tests, and in\n+    // general during libstd's own unit tests we're not testing this path. In\n+    // test mode immediately return here to optimize away any references to the\n+    // libbacktrace symbols\n+    if cfg!(test) {\n+        return Ok(())\n+    }\n+\n     // Use a lock to prevent mixed output in multithreading context.\n     // Some platforms also requires it, like `SymFromAddr` on Windows.\n     unsafe {"}, {"sha": "9321242fec80ed6f8ed393cc0f050084656f7b13", "filename": "src/libstd/sys_common/gnu/libbacktrace.rs", "status": "modified", "additions": 21, "deletions": 51, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/8d500572fa8f4110033fa3bc5e925831f6bbd18e/src%2Flibstd%2Fsys_common%2Fgnu%2Flibbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d500572fa8f4110033fa3bc5e925831f6bbd18e/src%2Flibstd%2Fsys_common%2Fgnu%2Flibbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fgnu%2Flibbacktrace.rs?ref=8d500572fa8f4110033fa3bc5e925831f6bbd18e", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use libc;\n+use backtrace_sys::{self, backtrace_state};\n \n use ffi::CStr;\n use io;\n@@ -39,11 +40,13 @@ where F: FnMut(&[u8], u32) -> io::Result<()>\n         let mut fileline_win: &mut [FileLine] = &mut fileline_buf;\n         let fileline_addr = &mut fileline_win as *mut &mut [FileLine];\n         ret = unsafe {\n-            backtrace_pcinfo(state,\n-                             frame.exact_position as libc::uintptr_t,\n-                             pcinfo_cb,\n-                             error_cb,\n-                             fileline_addr as *mut libc::c_void)\n+            backtrace_sys::backtrace_pcinfo(\n+                state,\n+                frame.exact_position as libc::uintptr_t,\n+                pcinfo_cb,\n+                error_cb,\n+                fileline_addr as *mut libc::c_void,\n+            )\n         };\n         FILELINE_SIZE - fileline_win.len()\n     };\n@@ -76,11 +79,13 @@ pub fn resolve_symname<F>(frame: Frame,\n         let mut data: *const libc::c_char = ptr::null();\n         let data_addr = &mut data as *mut *const libc::c_char;\n         let ret = unsafe {\n-            backtrace_syminfo(state,\n-                              frame.symbol_addr as libc::uintptr_t,\n-                              syminfo_cb,\n-                              error_cb,\n-                              data_addr as *mut libc::c_void)\n+            backtrace_sys::backtrace_syminfo(\n+                state,\n+                frame.symbol_addr as libc::uintptr_t,\n+                syminfo_cb,\n+                error_cb,\n+                data_addr as *mut libc::c_void,\n+            )\n         };\n         if ret == 0 || data.is_null() {\n             None\n@@ -93,45 +98,6 @@ pub fn resolve_symname<F>(frame: Frame,\n     callback(symname)\n }\n \n-////////////////////////////////////////////////////////////////////////\n-// libbacktrace.h API\n-////////////////////////////////////////////////////////////////////////\n-type backtrace_syminfo_callback =\n-extern \"C\" fn(data: *mut libc::c_void,\n-              pc: libc::uintptr_t,\n-              symname: *const libc::c_char,\n-              symval: libc::uintptr_t,\n-              symsize: libc::uintptr_t);\n-type backtrace_full_callback =\n-extern \"C\" fn(data: *mut libc::c_void,\n-              pc: libc::uintptr_t,\n-              filename: *const libc::c_char,\n-              lineno: libc::c_int,\n-              function: *const libc::c_char) -> libc::c_int;\n-type backtrace_error_callback =\n-extern \"C\" fn(data: *mut libc::c_void,\n-              msg: *const libc::c_char,\n-              errnum: libc::c_int);\n-enum backtrace_state {}\n-\n-extern {\n-    fn backtrace_create_state(filename: *const libc::c_char,\n-                              threaded: libc::c_int,\n-                              error: backtrace_error_callback,\n-                              data: *mut libc::c_void)\n-        -> *mut backtrace_state;\n-    fn backtrace_syminfo(state: *mut backtrace_state,\n-                         addr: libc::uintptr_t,\n-                         cb: backtrace_syminfo_callback,\n-                         error: backtrace_error_callback,\n-                         data: *mut libc::c_void) -> libc::c_int;\n-    fn backtrace_pcinfo(state: *mut backtrace_state,\n-                        addr: libc::uintptr_t,\n-                        cb: backtrace_full_callback,\n-                        error: backtrace_error_callback,\n-                        data: *mut libc::c_void) -> libc::c_int;\n-}\n-\n ////////////////////////////////////////////////////////////////////////\n // helper callbacks\n ////////////////////////////////////////////////////////////////////////\n@@ -210,7 +176,11 @@ unsafe fn init_state() -> *mut backtrace_state {\n         Err(_) => ptr::null(),\n     };\n \n-    STATE = backtrace_create_state(filename, 0, error_cb,\n-                                   ptr::null_mut());\n+    STATE = backtrace_sys::backtrace_create_state(\n+        filename,\n+        0,\n+        error_cb,\n+        ptr::null_mut(),\n+    );\n     STATE\n }"}]}