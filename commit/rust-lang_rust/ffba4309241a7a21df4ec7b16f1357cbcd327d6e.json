{"sha": "ffba4309241a7a21df4ec7b16f1357cbcd327d6e", "node_id": "C_kwDOAAsO6NoAKGZmYmE0MzA5MjQxYTdhMjFkZjRlYzdiMTZmMTM1N2NiY2QzMjdkNmU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-25T21:33:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-25T21:33:13Z"}, "message": "Auto merge of #90282 - matthiaskrgr:rollup-c6trbff, r=matthiaskrgr\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #89581 (Add -Z no-unique-section-names to reduce ELF header bloat.)\n - #90196 (Fix and extent ControlFlow `traverse_inorder` example)\n - #90255 (:arrow_up: rust-analyzer)\n - #90266 (Prevent duplicate caller bounds candidates by exposing default substs in Unevaluated)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "362af1c0e72c6feb18d6e700f322b25c0bb32e09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/362af1c0e72c6feb18d6e700f322b25c0bb32e09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffba4309241a7a21df4ec7b16f1357cbcd327d6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffba4309241a7a21df4ec7b16f1357cbcd327d6e", "html_url": "https://github.com/rust-lang/rust/commit/ffba4309241a7a21df4ec7b16f1357cbcd327d6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffba4309241a7a21df4ec7b16f1357cbcd327d6e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29b1248025b19bd132c8047fc710ea9314b9b76b", "url": "https://api.github.com/repos/rust-lang/rust/commits/29b1248025b19bd132c8047fc710ea9314b9b76b", "html_url": "https://github.com/rust-lang/rust/commit/29b1248025b19bd132c8047fc710ea9314b9b76b"}, {"sha": "26e9a719f230815b2c535777c466030c696c9d89", "url": "https://api.github.com/repos/rust-lang/rust/commits/26e9a719f230815b2c535777c466030c696c9d89", "html_url": "https://github.com/rust-lang/rust/commit/26e9a719f230815b2c535777c466030c696c9d89"}], "stats": {"total": 89, "additions": 84, "deletions": 5}, "files": [{"sha": "82c3c2006eb148f8cb5bb72ac913cc47c8c77686", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffba4309241a7a21df4ec7b16f1357cbcd327d6e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba4309241a7a21df4ec7b16f1357cbcd327d6e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=ffba4309241a7a21df4ec7b16f1357cbcd327d6e", "patch": "@@ -161,6 +161,7 @@ pub fn target_machine_factory(\n     let ffunction_sections =\n         sess.opts.debugging_opts.function_sections.unwrap_or(sess.target.function_sections);\n     let fdata_sections = ffunction_sections;\n+    let funique_section_names = !sess.opts.debugging_opts.no_unique_section_names;\n \n     let code_model = to_llvm_code_model(sess.code_model());\n \n@@ -205,6 +206,7 @@ pub fn target_machine_factory(\n                 use_softfp,\n                 ffunction_sections,\n                 fdata_sections,\n+                funique_section_names,\n                 trap_unreachable,\n                 singlethread,\n                 asm_comments,"}, {"sha": "d57573558da55b395cf5f6ea93a962609d02286a", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffba4309241a7a21df4ec7b16f1357cbcd327d6e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba4309241a7a21df4ec7b16f1357cbcd327d6e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=ffba4309241a7a21df4ec7b16f1357cbcd327d6e", "patch": "@@ -2187,6 +2187,7 @@ extern \"C\" {\n         UseSoftFP: bool,\n         FunctionSections: bool,\n         DataSections: bool,\n+        UniqueSectionNames: bool,\n         TrapUnreachable: bool,\n         Singlethread: bool,\n         AsmComments: bool,"}, {"sha": "2d3cb52f5fd478fc6718f715765ce8375479f73d", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffba4309241a7a21df4ec7b16f1357cbcd327d6e/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba4309241a7a21df4ec7b16f1357cbcd327d6e/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=ffba4309241a7a21df4ec7b16f1357cbcd327d6e", "patch": "@@ -744,6 +744,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(new_llvm_pass_manager, Some(true));\n     tracked!(no_generate_arange_section, true);\n     tracked!(no_link, true);\n+    tracked!(no_unique_section_names, true);\n     tracked!(no_profiler_runtime, true);\n     tracked!(osx_rpath_install_name, true);\n     tracked!(panic_abort_tests, true);"}, {"sha": "32b866e81b131eca15e114368170038fa9d8e0e1", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffba4309241a7a21df4ec7b16f1357cbcd327d6e/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ffba4309241a7a21df4ec7b16f1357cbcd327d6e/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=ffba4309241a7a21df4ec7b16f1357cbcd327d6e", "patch": "@@ -462,6 +462,7 @@ extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n     LLVMRustCodeGenOptLevel RustOptLevel, bool UseSoftFloat,\n     bool FunctionSections,\n     bool DataSections,\n+    bool UniqueSectionNames,\n     bool TrapUnreachable,\n     bool Singlethread,\n     bool AsmComments,\n@@ -491,6 +492,7 @@ extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n   }\n   Options.DataSections = DataSections;\n   Options.FunctionSections = FunctionSections;\n+  Options.UniqueSectionNames = UniqueSectionNames;\n   Options.MCOptions.AsmVerbose = AsmComments;\n   Options.MCOptions.PreserveAsmComments = AsmComments;\n   Options.MCOptions.ABIName = ABIStr;"}, {"sha": "3ff91c0553afe8f22678714366d0058edad84038", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffba4309241a7a21df4ec7b16f1357cbcd327d6e/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba4309241a7a21df4ec7b16f1357cbcd327d6e/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=ffba4309241a7a21df4ec7b16f1357cbcd327d6e", "patch": "@@ -1214,6 +1214,8 @@ options! {\n         \"compile without linking\"),\n     no_parallel_llvm: bool = (false, parse_no_flag, [UNTRACKED],\n         \"run LLVM in non-parallel mode (while keeping codegen-units and ThinLTO)\"),\n+    no_unique_section_names: bool = (false, parse_bool, [TRACKED],\n+        \"do not use unique names for text and data sections when -Z function-sections is used\"),\n     no_profiler_runtime: bool = (false, parse_no_flag, [TRACKED],\n         \"prevent automatic injection of the profiler_builtins crate\"),\n     normalize_docs: bool = (false, parse_bool, [TRACKED],"}, {"sha": "af3706f886e9cbce53fb4e6be54c5ee1872432e4", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ffba4309241a7a21df4ec7b16f1357cbcd327d6e/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba4309241a7a21df4ec7b16f1357cbcd327d6e/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=ffba4309241a7a21df4ec7b16f1357cbcd327d6e", "patch": "@@ -247,6 +247,7 @@ fn trait_of_item(tcx: TyCtxt<'_>, def_id: DefId) -> Option<DefId> {\n }\n \n /// See `ParamEnv` struct definition for details.\n+#[instrument(level = \"debug\", skip(tcx))]\n fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n     // The param_env of an impl Trait type is its defining function's param_env\n     if let Some(parent) = ty::is_impl_trait_defn(tcx, def_id) {\n@@ -274,9 +275,20 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n         predicates.extend(environment);\n     }\n \n+    // It's important that we include the default substs in unevaluated\n+    // constants, since `Unevaluated` instances in predicates whose substs are None\n+    // can lead to \"duplicate\" caller bounds candidates during trait selection,\n+    // duplicate in the sense that both have their default substs, but the\n+    // candidate that resulted from a superpredicate still uses `None` in its\n+    // `substs_` field of `Unevaluated` to indicate that it has its default substs,\n+    // whereas the other candidate has `substs_: Some(default_substs)`, see\n+    // issue #89334\n+    predicates = tcx.expose_default_const_substs(predicates);\n+\n     let unnormalized_env =\n         ty::ParamEnv::new(tcx.intern_predicates(&predicates), traits::Reveal::UserFacing);\n \n+    debug!(\"unnormalized_env caller bounds: {:?}\", unnormalized_env.caller_bounds());\n     let body_id = def_id\n         .as_local()\n         .map(|def_id| tcx.hir().local_def_id_to_hir_id(def_id))"}, {"sha": "776cea2ef791fbb128566a06cce9f2a048dcc8a9", "filename": "library/core/src/ops/control_flow.rs", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ffba4309241a7a21df4ec7b16f1357cbcd327d6e/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba4309241a7a21df4ec7b16f1357cbcd327d6e/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs?ref=ffba4309241a7a21df4ec7b16f1357cbcd327d6e", "patch": "@@ -24,7 +24,7 @@ use crate::{convert, ops};\n /// ```\n ///\n /// A basic tree traversal:\n-/// ```no_run\n+/// ```\n /// use std::ops::ControlFlow;\n ///\n /// pub struct TreeNode<T> {\n@@ -34,17 +34,42 @@ use crate::{convert, ops};\n /// }\n ///\n /// impl<T> TreeNode<T> {\n-///     pub fn traverse_inorder<B>(&self, mut f: impl FnMut(&T) -> ControlFlow<B>) -> ControlFlow<B> {\n+///     pub fn traverse_inorder<B>(&self, f: &mut impl FnMut(&T) -> ControlFlow<B>) -> ControlFlow<B> {\n ///         if let Some(left) = &self.left {\n-///             left.traverse_inorder(&mut f)?;\n+///             left.traverse_inorder(f)?;\n ///         }\n ///         f(&self.value)?;\n ///         if let Some(right) = &self.right {\n-///             right.traverse_inorder(&mut f)?;\n+///             right.traverse_inorder(f)?;\n ///         }\n ///         ControlFlow::Continue(())\n ///     }\n+///     fn leaf(value: T) -> Option<Box<TreeNode<T>>> {\n+///         Some(Box::new(Self { value, left: None, right: None }))\n+///     }\n /// }\n+///\n+/// let node = TreeNode {\n+///     value: 0,\n+///     left: TreeNode::leaf(1),\n+///     right: Some(Box::new(TreeNode {\n+///         value: -1,\n+///         left: TreeNode::leaf(5),\n+///         right: TreeNode::leaf(2),\n+///     }))\n+/// };\n+/// let mut sum = 0;\n+///\n+/// let res = node.traverse_inorder(&mut |val| {\n+///     if *val < 0 {\n+///         ControlFlow::Break(*val)\n+///     } else {\n+///         sum += *val;\n+///         ControlFlow::Continue(())\n+///     }\n+/// });\n+/// assert_eq!(res, ControlFlow::Break(-1));\n+/// assert_eq!(sum, 6);\n /// ```\n #[stable(feature = \"control_flow_enum_type\", since = \"1.55.0\")]\n #[derive(Debug, Clone, Copy, PartialEq)]"}, {"sha": "5c1c7cda7013e9615259fa53bd090306435180f7", "filename": "src/doc/unstable-book/src/compiler-flags/no-unique-section-names.md", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ffba4309241a7a21df4ec7b16f1357cbcd327d6e/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fno-unique-section-names.md", "raw_url": "https://github.com/rust-lang/rust/raw/ffba4309241a7a21df4ec7b16f1357cbcd327d6e/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fno-unique-section-names.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fno-unique-section-names.md?ref=ffba4309241a7a21df4ec7b16f1357cbcd327d6e", "patch": "@@ -0,0 +1,9 @@\n+# `no-unique-section-names`\n+\n+------------------------\n+\n+This flag currently applies only to ELF-based targets using the LLVM codegen backend. It prevents the generation of unique ELF section names for each separate code and data item when `-Z function-sections` is also in use, which is the default for most targets. This option can reduce the size of object files, and depending on the linker, the final ELF binary as well.\n+\n+For example, a function `func` will by default generate a code section called `.text.func`. Normally this is fine because the linker will merge all those `.text.*` sections into a single one in the binary. However, starting with [LLVM 12](https://github.com/llvm/llvm-project/commit/ee5d1a04), the backend will also generate unique section names for exception handling, so you would see a section name of `.gcc_except_table.func` in the object file and potentially in the final ELF binary, which could add significant bloat to programs that contain many functions.\n+\n+This flag instructs LLVM to use the same `.text` and `.gcc_except_table` section name for each function, and it is analogous to Clang's `-fno-unique-section-names` option."}, {"sha": "e40c93116af4bb254c97c04250d758e6980bda55", "filename": "src/test/ui/const-generics/expose-default-substs-param-env.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ffba4309241a7a21df4ec7b16f1357cbcd327d6e/src%2Ftest%2Fui%2Fconst-generics%2Fexpose-default-substs-param-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba4309241a7a21df4ec7b16f1357cbcd327d6e/src%2Ftest%2Fui%2Fconst-generics%2Fexpose-default-substs-param-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fexpose-default-substs-param-env.rs?ref=ffba4309241a7a21df4ec7b16f1357cbcd327d6e", "patch": "@@ -0,0 +1,9 @@\n+// build-pass\n+\n+#![feature(generic_const_exprs)]\n+#![allow(unused_braces, incomplete_features)]\n+\n+pub trait Foo<const N: usize> {}\n+pub trait Bar: Foo<{ 1 }> { }\n+\n+fn main() {}"}, {"sha": "b15b7428cdd0c478df0fd32acfa84e7e36985334", "filename": "src/test/ui/const-generics/issues/issue-89334.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ffba4309241a7a21df4ec7b16f1357cbcd327d6e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-89334.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba4309241a7a21df4ec7b16f1357cbcd327d6e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-89334.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-89334.rs?ref=ffba4309241a7a21df4ec7b16f1357cbcd327d6e", "patch": "@@ -0,0 +1,16 @@\n+// build-pass\n+\n+#![feature(generic_const_exprs)]\n+#![allow(unused_braces, incomplete_features)]\n+\n+pub trait AnotherTrait{\n+    const ARRAY_SIZE: usize;\n+}\n+pub trait Shard<T: AnotherTrait>:\n+    AsMut<[[u8; T::ARRAY_SIZE]]>\n+where\n+    [(); T::ARRAY_SIZE]: Sized\n+{\n+}\n+\n+fn main() {}"}, {"sha": "1f47693e02809c97db61b51247ae4e4d46744c61", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=ffba4309241a7a21df4ec7b16f1357cbcd327d6e", "patch": "@@ -1 +1 @@\n-Subproject commit 91cbda43c2af82b9377eff70a21f59ade18cd23c\n+Subproject commit 1f47693e02809c97db61b51247ae4e4d46744c61"}]}