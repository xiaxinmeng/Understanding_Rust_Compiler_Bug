{"sha": "eed2d0e1f2f4c6743b33efa06d5028fcc33db3b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlZDJkMGUxZjJmNGM2NzQzYjMzZWZhMDZkNTAyOGZjYzMzZGIzYjE=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-07-15T13:48:57Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-07-19T05:57:39Z"}, "message": "debuginfo: Added support for Option<T>-like enums.", "tree": {"sha": "85a285872fb4fa63dc15b62f4f0af2ff6a1ad94d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85a285872fb4fa63dc15b62f4f0af2ff6a1ad94d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eed2d0e1f2f4c6743b33efa06d5028fcc33db3b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eed2d0e1f2f4c6743b33efa06d5028fcc33db3b1", "html_url": "https://github.com/rust-lang/rust/commit/eed2d0e1f2f4c6743b33efa06d5028fcc33db3b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eed2d0e1f2f4c6743b33efa06d5028fcc33db3b1/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7af2e6ee451ffa9baacfc3eb04d45f7b3cee295d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7af2e6ee451ffa9baacfc3eb04d45f7b3cee295d", "html_url": "https://github.com/rust-lang/rust/commit/7af2e6ee451ffa9baacfc3eb04d45f7b3cee295d"}], "stats": {"total": 73, "additions": 72, "deletions": 1}, "files": [{"sha": "2f9b9f19041ff85cff90b1785010f7c35e795154", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eed2d0e1f2f4c6743b33efa06d5028fcc33db3b1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed2d0e1f2f4c6743b33efa06d5028fcc33db3b1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=eed2d0e1f2f4c6743b33efa06d5028fcc33db3b1", "patch": "@@ -673,7 +673,9 @@ fn create_enum_metadata(cx: &mut CrateContext,\n                 0) // RuntimeLang\n             }};\n         }\n-        _ => { return ptr::null(); }\n+        adt::NullablePointer { nonnull: ref struct_def, nndiscr, _ } => {\n+            return create_adt_struct_metadata(cx, struct_def, variants[nndiscr], None, span);\n+        }\n     }\n \n     fn create_adt_struct_metadata(cx: &mut CrateContext,"}, {"sha": "c909d6f54eb8ea4af78489cc4488e77820e93874", "filename": "src/test/debug-info/option-like-enum.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/eed2d0e1f2f4c6743b33efa06d5028fcc33db3b1/src%2Ftest%2Fdebug-info%2Foption-like-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed2d0e1f2f4c6743b33efa06d5028fcc33db3b1/src%2Ftest%2Fdebug-info%2Foption-like-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Foption-like-enum.rs?ref=eed2d0e1f2f4c6743b33efa06d5028fcc33db3b1", "patch": "@@ -0,0 +1,69 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-Z extra-debug-info\n+// debugger:break zzz\n+// debugger:run\n+// debugger:finish\n+\n+// debugger:print some\n+// check:$1 = {0x12345678}\n+\n+// debugger:print none\n+// check:$2 = {0x0}\n+\n+// debugger:print full\n+// check:$3 = {454545, 0x87654321, 9988}\n+\n+// debugger:print empty\n+// check:$4 = {0, 0x0, 0}\n+\n+// debugger:print droid\n+// check:$5 = {id = 675675, range = 10000001, internals = 0x43218765}\n+\n+// debugger:print void_droid\n+// check:$6 = {id = 0, range = 0, internals = 0x0}\n+\n+\n+// If a struct has exactly two variants, one of them is empty, and the other one\n+// contains a non-nullable pointer, then this value is used as the discriminator.\n+// The test cases in this file make sure that something readable is generated for\n+// this kind of types.\n+\n+enum MoreFields<'self> {\n+    Full(u32, &'self int, i16),\n+    Empty\n+}\n+\n+enum NamedFields<'self> {\n+    Droid { id: i32, range: i64, internals: &'self int },\n+    Void\n+}\n+\n+fn main() {\n+\n+    let some : Option<&u32> = Some(unsafe { std::cast::transmute(0x12345678) });\n+    let none : Option<&u32> = None;\n+\n+    let full = Full(454545, unsafe { std::cast::transmute(0x87654321) }, 9988);\n+\n+    let int_val = 0;\n+    let mut empty = Full(0, &int_val, 0);\n+    empty = Empty;\n+\n+    let droid = Droid { id: 675675, range: 10000001, internals: unsafe { std::cast::transmute(0x43218765) } };\n+\n+    let mut void_droid = Droid { id: 0, range: 0, internals: &int_val };\n+    void_droid = Void;\n+\n+    zzz();\n+}\n+\n+fn zzz() {()}\n\\ No newline at end of file"}]}