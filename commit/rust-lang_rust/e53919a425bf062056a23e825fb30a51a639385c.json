{"sha": "e53919a425bf062056a23e825fb30a51a639385c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1MzkxOWE0MjViZjA2MjA1NmEyM2U4MjVmYjMwYTUxYTYzOTM4NWM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-16T15:47:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-16T15:47:43Z"}, "message": "Merge #8543\n\n8543: Assist fix: Fill match arms for a tuple of a single enum. r=Veykril a=iDawer\n\nThis is rather a small fix addressing an issue mentioned in https://github.com/rust-analyzer/rust-analyzer/issues/8493#issuecomment-818770670\r\n\n\nCo-authored-by: Dawer <7803845+iDawer@users.noreply.github.com>", "tree": {"sha": "6b3007c5fc560bed5b7b857d865e8c84d58c2fc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b3007c5fc560bed5b7b857d865e8c84d58c2fc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e53919a425bf062056a23e825fb30a51a639385c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgebGfCRBK7hj4Ov3rIwAAf/AIABMCkWEPg6MkYBO0zsAGouAP\nqFISvWU25/sdQGg+bNlJFuDrIWPxdy26A9beapgerERo45iXcgnpw+7pKV2UDWxh\nmOgmJOx4iPWqrO7DODLIex/SsClkaxocY7rWPFMrK1N38q9B08G1J/wIelGDcC2z\n2JEfYFKkncsX1s7koHNBQr+eT1KUE1gQ5B71MZJJibbMRXRbP0ZqPEpLarOHjn0B\n7jwV/oWcmLOLP6aRfq0TE/Evh/d6dRHpV+w6zm3cAMp5IOoNI+Kx7Zth6/btL7YK\nEPHcaWwO9myeSNRznCUTqM0coLZSwqVqYARoD0KfvqCtEjNWQvOhf7JjhVZps+E=\n=TmT1\n-----END PGP SIGNATURE-----\n", "payload": "tree 6b3007c5fc560bed5b7b857d865e8c84d58c2fc0\nparent 75371eb0fa015ba8834ae2b66cda68eba5d83874\nparent 8965be3d0e5162c8a39c5ba1fd074740ac732566\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1618588063 +0000\ncommitter GitHub <noreply@github.com> 1618588063 +0000\n\nMerge #8543\n\n8543: Assist fix: Fill match arms for a tuple of a single enum. r=Veykril a=iDawer\n\nThis is rather a small fix addressing an issue mentioned in https://github.com/rust-analyzer/rust-analyzer/issues/8493#issuecomment-818770670\r\n\n\nCo-authored-by: Dawer <7803845+iDawer@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e53919a425bf062056a23e825fb30a51a639385c", "html_url": "https://github.com/rust-lang/rust/commit/e53919a425bf062056a23e825fb30a51a639385c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e53919a425bf062056a23e825fb30a51a639385c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75371eb0fa015ba8834ae2b66cda68eba5d83874", "url": "https://api.github.com/repos/rust-lang/rust/commits/75371eb0fa015ba8834ae2b66cda68eba5d83874", "html_url": "https://github.com/rust-lang/rust/commit/75371eb0fa015ba8834ae2b66cda68eba5d83874"}, {"sha": "8965be3d0e5162c8a39c5ba1fd074740ac732566", "url": "https://api.github.com/repos/rust-lang/rust/commits/8965be3d0e5162c8a39c5ba1fd074740ac732566", "html_url": "https://github.com/rust-lang/rust/commit/8965be3d0e5162c8a39c5ba1fd074740ac732566"}], "stats": {"total": 40, "additions": 24, "deletions": 16}, "files": [{"sha": "80bd1b7e8a493eec4398e757daa3e358eea79816", "filename": "crates/ide_assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e53919a425bf062056a23e825fb30a51a639385c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e53919a425bf062056a23e825fb30a51a639385c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=e53919a425bf062056a23e825fb30a51a639385c", "patch": "@@ -71,12 +71,6 @@ pub(crate) fn fill_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option<\n             return None;\n         }\n \n-        // We do not currently support filling match arms for a tuple\n-        // containing a single enum.\n-        if enum_defs.len() < 2 {\n-            return None;\n-        }\n-\n         // When calculating the match arms for a tuple of enums, we want\n         // to create a match arm for each possible combination of enum\n         // values. The `multi_cartesian_product` method transforms\n@@ -514,10 +508,7 @@ fn main() {\n \n     #[test]\n     fn fill_match_arms_single_element_tuple_of_enum() {\n-        // For now we don't hande the case of a single element tuple, but\n-        // we could handle this in the future if `make::tuple_pat` allowed\n-        // creating a tuple with a single pattern.\n-        check_assist_not_applicable(\n+        check_assist(\n             fill_match_arms,\n             r#\"\n             enum A { One, Two }\n@@ -528,6 +519,17 @@ fn main() {\n                 }\n             }\n             \"#,\n+            r#\"\n+            enum A { One, Two }\n+\n+            fn main() {\n+                let a = A::One;\n+                match (a, ) {\n+                    $0(A::One,) => {}\n+                    (A::Two,) => {}\n+                }\n+            }\n+            \"#,\n         );\n     }\n "}, {"sha": "94d4f2cf0b986659f1cbfbea4212d87941fd38bf", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e53919a425bf062056a23e825fb30a51a639385c/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e53919a425bf062056a23e825fb30a51a639385c/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=e53919a425bf062056a23e825fb30a51a639385c", "patch": "@@ -29,9 +29,13 @@ pub fn ty(text: &str) -> ast::Type {\n pub fn ty_unit() -> ast::Type {\n     ty(\"()\")\n }\n-// FIXME: handle types of length == 1\n pub fn ty_tuple(types: impl IntoIterator<Item = ast::Type>) -> ast::Type {\n-    let contents = types.into_iter().join(\", \");\n+    let mut count: usize = 0;\n+    let mut contents = types.into_iter().inspect(|_| count += 1).join(\", \");\n+    if count == 1 {\n+        contents.push(',');\n+    }\n+\n     ty(&format!(\"({})\", contents))\n }\n // FIXME: handle path to type\n@@ -292,11 +296,13 @@ pub fn wildcard_pat() -> ast::WildcardPat {\n \n /// Creates a tuple of patterns from an iterator of patterns.\n ///\n-/// Invariant: `pats` must be length > 1\n-///\n-/// FIXME handle `pats` length == 1\n+/// Invariant: `pats` must be length > 0\n pub fn tuple_pat(pats: impl IntoIterator<Item = ast::Pat>) -> ast::TuplePat {\n-    let pats_str = pats.into_iter().map(|p| p.to_string()).join(\", \");\n+    let mut count: usize = 0;\n+    let mut pats_str = pats.into_iter().inspect(|_| count += 1).join(\", \");\n+    if count == 1 {\n+        pats_str.push(',');\n+    }\n     return from_text(&format!(\"({})\", pats_str));\n \n     fn from_text(text: &str) -> ast::TuplePat {"}]}