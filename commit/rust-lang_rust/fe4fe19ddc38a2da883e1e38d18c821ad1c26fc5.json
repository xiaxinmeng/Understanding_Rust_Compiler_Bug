{"sha": "fe4fe19ddc38a2da883e1e38d18c821ad1c26fc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlNGZlMTlkZGMzOGEyZGE4ODNlMWUzOGQxOGM4MjFhZDFjMjZmYzU=", "commit": {"author": {"name": "dylni", "email": "46035563+dylni@users.noreply.github.com", "date": "2021-02-13T03:03:39Z"}, "committer": {"name": "dylni", "email": "46035563+dylni@users.noreply.github.com", "date": "2021-02-13T03:03:39Z"}, "message": "Update new usage of `assert_len`", "tree": {"sha": "a878a89a7b20e0a20f666dafb1efe70df4e51398", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a878a89a7b20e0a20f666dafb1efe70df4e51398"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe4fe19ddc38a2da883e1e38d18c821ad1c26fc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe4fe19ddc38a2da883e1e38d18c821ad1c26fc5", "html_url": "https://github.com/rust-lang/rust/commit/fe4fe19ddc38a2da883e1e38d18c821ad1c26fc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe4fe19ddc38a2da883e1e38d18c821ad1c26fc5/comments", "author": {"login": "dylni", "id": 46035563, "node_id": "MDQ6VXNlcjQ2MDM1NTYz", "avatar_url": "https://avatars.githubusercontent.com/u/46035563?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dylni", "html_url": "https://github.com/dylni", "followers_url": "https://api.github.com/users/dylni/followers", "following_url": "https://api.github.com/users/dylni/following{/other_user}", "gists_url": "https://api.github.com/users/dylni/gists{/gist_id}", "starred_url": "https://api.github.com/users/dylni/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dylni/subscriptions", "organizations_url": "https://api.github.com/users/dylni/orgs", "repos_url": "https://api.github.com/users/dylni/repos", "events_url": "https://api.github.com/users/dylni/events{/privacy}", "received_events_url": "https://api.github.com/users/dylni/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dylni", "id": 46035563, "node_id": "MDQ6VXNlcjQ2MDM1NTYz", "avatar_url": "https://avatars.githubusercontent.com/u/46035563?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dylni", "html_url": "https://github.com/dylni", "followers_url": "https://api.github.com/users/dylni/followers", "following_url": "https://api.github.com/users/dylni/following{/other_user}", "gists_url": "https://api.github.com/users/dylni/gists{/gist_id}", "starred_url": "https://api.github.com/users/dylni/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dylni/subscriptions", "organizations_url": "https://api.github.com/users/dylni/orgs", "repos_url": "https://api.github.com/users/dylni/repos", "events_url": "https://api.github.com/users/dylni/events{/privacy}", "received_events_url": "https://api.github.com/users/dylni/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d519eaa6e9a583257b2f9e28a743ab85d1cabc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d519eaa6e9a583257b2f9e28a743ab85d1cabc5", "html_url": "https://github.com/rust-lang/rust/commit/5d519eaa6e9a583257b2f9e28a743ab85d1cabc5"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "77302d33bc187d5f88c1aa9355198379e55c1b50", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe4fe19ddc38a2da883e1e38d18c821ad1c26fc5/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe4fe19ddc38a2da883e1e38d18c821ad1c26fc5/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=fe4fe19ddc38a2da883e1e38d18c821ad1c26fc5", "patch": "@@ -2036,11 +2036,11 @@ impl<T: Clone, A: Allocator> Vec<T, A> {\n     where\n         R: RangeBounds<usize>,\n     {\n-        let range = src.assert_len(self.len());\n+        let range = slice::range(src, ..self.len());\n         self.reserve(range.len());\n \n         // SAFETY:\n-        // - `assert_len` guarantees  that the given range is valid for indexing self\n+        // - `slice::range` guarantees  that the given range is valid for indexing self\n         unsafe {\n             self.spec_extend_from_within(range);\n         }"}]}