{"sha": "6fa1f48237bc61cabcb63f75700ad7303f152c1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmYTFmNDgyMzdiYzYxY2FiY2I2M2Y3NTcwMGFkNzMwM2YxNTJjMWY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-04-24T03:29:38Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-04-24T09:58:54Z"}, "message": "rustdoc: fix de-@rooting fallout", "tree": {"sha": "7392754c0ddb770780e16736c200aa336bdc9122", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7392754c0ddb770780e16736c200aa336bdc9122"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fa1f48237bc61cabcb63f75700ad7303f152c1f", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fa1f48237bc61cabcb63f75700ad7303f152c1f", "html_url": "https://github.com/rust-lang/rust/commit/6fa1f48237bc61cabcb63f75700ad7303f152c1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fa1f48237bc61cabcb63f75700ad7303f152c1f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e358672f8aba3d844df4c744199ace4a309f707", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e358672f8aba3d844df4c744199ace4a309f707", "html_url": "https://github.com/rust-lang/rust/commit/2e358672f8aba3d844df4c744199ace4a309f707"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "fe0b6bcfd0f0afea41e730bcaa0fa77a739551c2", "filename": "src/libfourcc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fa1f48237bc61cabcb63f75700ad7303f152c1f/src%2Flibfourcc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa1f48237bc61cabcb63f75700ad7303f152c1f/src%2Flibfourcc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfourcc%2Flib.rs?ref=6fa1f48237bc61cabcb63f75700ad7303f152c1f", "patch": "@@ -91,7 +91,7 @@ pub fn expand_syntax_ext(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree]) ->\n \n     let s = match expr.node {\n         // expression is a literal\n-        ast::ExprLit(lit) => match lit.node {\n+        ast::ExprLit(ref lit) => match lit.node {\n             // string literal\n             ast::LitStr(ref s, _) => {\n                 if s.get().char_len() != 4 {"}, {"sha": "be05ccdfcb41209576d17ad5cc03afd6d22d20f7", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6fa1f48237bc61cabcb63f75700ad7303f152c1f/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa1f48237bc61cabcb63f75700ad7303f152c1f/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=6fa1f48237bc61cabcb63f75700ad7303f152c1f", "patch": "@@ -684,7 +684,8 @@ impl Clean<Type> for ast::Ty {\n     fn clean(&self) -> Type {\n         use syntax::ast::*;\n         debug!(\"cleaning type `{:?}`\", self);\n-        let codemap = local_data::get(super::ctxtkey, |x| *x.unwrap()).sess().codemap();\n+        let ctxt = local_data::get(super::ctxtkey, |x| *x.unwrap());\n+        let codemap = ctxt.sess().codemap();\n         debug!(\"span corresponds to `{}`\", codemap.span_to_str(self.span));\n         match self.node {\n             TyNil => Unit,\n@@ -866,7 +867,8 @@ pub struct Span {\n \n impl Clean<Span> for syntax::codemap::Span {\n     fn clean(&self) -> Span {\n-        let cm = local_data::get(super::ctxtkey, |x| *x.unwrap()).sess().codemap();\n+        let ctxt = local_data::get(super::ctxtkey, |x| *x.unwrap());\n+        let cm = ctxt.sess().codemap();\n         let filename = cm.span_to_filename(*self);\n         let lo = cm.lookup_char_pos(self.lo);\n         let hi = cm.lookup_char_pos(self.hi);\n@@ -1193,7 +1195,8 @@ trait ToSource {\n impl ToSource for syntax::codemap::Span {\n     fn to_src(&self) -> ~str {\n         debug!(\"converting span {:?} to snippet\", self.clean());\n-        let cm = local_data::get(super::ctxtkey, |x| x.unwrap().clone()).sess().codemap().clone();\n+        let ctxt = local_data::get(super::ctxtkey, |x| x.unwrap().clone());\n+        let cm = ctxt.sess().codemap().clone();\n         let sn = match cm.span_to_snippet(*self) {\n             Some(x) => x,\n             None    => \"\".to_owned()"}]}