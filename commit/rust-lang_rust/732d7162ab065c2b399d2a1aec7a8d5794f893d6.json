{"sha": "732d7162ab065c2b399d2a1aec7a8d5794f893d6", "node_id": "C_kwDOAAsO6NoAKDczMmQ3MTYyYWIwNjVjMmIzOTlkMmExYWVjN2E4ZDU3OTRmODkzZDY", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-01T02:48:17Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-28T16:51:29Z"}, "message": "Move `DurationSubsec` into `Operators` lint pass", "tree": {"sha": "3a8162d9758b7a0ca876906498fd956fa60763b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a8162d9758b7a0ca876906498fd956fa60763b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/732d7162ab065c2b399d2a1aec7a8d5794f893d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/732d7162ab065c2b399d2a1aec7a8d5794f893d6", "html_url": "https://github.com/rust-lang/rust/commit/732d7162ab065c2b399d2a1aec7a8d5794f893d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/732d7162ab065c2b399d2a1aec7a8d5794f893d6/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ac3626f2e3728e333f1dd0298e5e8c2d9a16c6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ac3626f2e3728e333f1dd0298e5e8c2d9a16c6b", "html_url": "https://github.com/rust-lang/rust/commit/4ac3626f2e3728e333f1dd0298e5e8c2d9a16c6b"}], "stats": {"total": 160, "additions": 80, "deletions": 80}, "files": [{"sha": "d85ace3a279b3b8e4b9d586301c06c75222f5246", "filename": "clippy_lints/src/duration_subsec.rs", "status": "removed", "additions": 0, "deletions": 75, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/4ac3626f2e3728e333f1dd0298e5e8c2d9a16c6b/clippy_lints%2Fsrc%2Fduration_subsec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac3626f2e3728e333f1dd0298e5e8c2d9a16c6b/clippy_lints%2Fsrc%2Fduration_subsec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fduration_subsec.rs?ref=4ac3626f2e3728e333f1dd0298e5e8c2d9a16c6b", "patch": "@@ -1,75 +0,0 @@\n-use clippy_utils::consts::{constant, Constant};\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::ty::is_type_diagnostic_item;\n-use if_chain::if_chain;\n-use rustc_errors::Applicability;\n-use rustc_hir::{BinOpKind, Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::source_map::Spanned;\n-use rustc_span::sym;\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for calculation of subsecond microseconds or milliseconds\n-    /// from other `Duration` methods.\n-    ///\n-    /// ### Why is this bad?\n-    /// It's more concise to call `Duration::subsec_micros()` or\n-    /// `Duration::subsec_millis()` than to calculate them.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// # use std::time::Duration;\n-    /// # let duration = Duration::new(5, 0);\n-    /// let micros = duration.subsec_nanos() / 1_000;\n-    /// let millis = duration.subsec_nanos() / 1_000_000;\n-    /// ```\n-    ///\n-    /// Use instead:\n-    /// ```rust\n-    /// # use std::time::Duration;\n-    /// # let duration = Duration::new(5, 0);\n-    /// let micros = duration.subsec_micros();\n-    /// let millis = duration.subsec_millis();\n-    /// ```\n-    #[clippy::version = \"pre 1.29.0\"]\n-    pub DURATION_SUBSEC,\n-    complexity,\n-    \"checks for calculation of subsecond microseconds or milliseconds\"\n-}\n-\n-declare_lint_pass!(DurationSubsec => [DURATION_SUBSEC]);\n-\n-impl<'tcx> LateLintPass<'tcx> for DurationSubsec {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if_chain! {\n-            if let ExprKind::Binary(Spanned { node: BinOpKind::Div, .. }, left, right) = expr.kind;\n-            if let ExprKind::MethodCall(method_path, args, _) = left.kind;\n-            if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(&args[0]).peel_refs(), sym::Duration);\n-            if let Some((Constant::Int(divisor), _)) = constant(cx, cx.typeck_results(), right);\n-            then {\n-                let suggested_fn = match (method_path.ident.as_str(), divisor) {\n-                    (\"subsec_micros\", 1_000) | (\"subsec_nanos\", 1_000_000) => \"subsec_millis\",\n-                    (\"subsec_nanos\", 1_000) => \"subsec_micros\",\n-                    _ => return,\n-                };\n-                let mut applicability = Applicability::MachineApplicable;\n-                span_lint_and_sugg(\n-                    cx,\n-                    DURATION_SUBSEC,\n-                    expr.span,\n-                    &format!(\"calling `{}()` is more concise than this calculation\", suggested_fn),\n-                    \"try\",\n-                    format!(\n-                        \"{}.{}()\",\n-                        snippet_with_applicability(cx, args[0].span, \"_\", &mut applicability),\n-                        suggested_fn\n-                    ),\n-                    applicability,\n-                );\n-            }\n-        }\n-    }\n-}"}, {"sha": "b64a5652586d01837b36460f9384732b78f3ca24", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/732d7162ab065c2b399d2a1aec7a8d5794f893d6/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/732d7162ab065c2b399d2a1aec7a8d5794f893d6/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=732d7162ab065c2b399d2a1aec7a8d5794f893d6", "patch": "@@ -57,7 +57,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(drop_forget_ref::FORGET_REF),\n     LintId::of(drop_forget_ref::UNDROPPED_MANUALLY_DROPS),\n     LintId::of(duplicate_mod::DUPLICATE_MOD),\n-    LintId::of(duration_subsec::DURATION_SUBSEC),\n     LintId::of(entry::MAP_ENTRY),\n     LintId::of(enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT),\n     LintId::of(enum_variants::ENUM_VARIANT_NAMES),\n@@ -258,6 +257,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(operators::ASSIGN_OP_PATTERN),\n     LintId::of(operators::BAD_BIT_MASK),\n     LintId::of(operators::DOUBLE_COMPARISONS),\n+    LintId::of(operators::DURATION_SUBSEC),\n     LintId::of(operators::INEFFECTIVE_BIT_MASK),\n     LintId::of(operators::MISREFACTORED_ASSIGN_OP),\n     LintId::of(option_env_unwrap::OPTION_ENV_UNWRAP),"}, {"sha": "3a8a00d4ef03d832bfd5cece1def992ef6c45855", "filename": "clippy_lints/src/lib.register_complexity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/732d7162ab065c2b399d2a1aec7a8d5794f893d6/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/732d7162ab065c2b399d2a1aec7a8d5794f893d6/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_complexity.rs?ref=732d7162ab065c2b399d2a1aec7a8d5794f893d6", "patch": "@@ -11,7 +11,6 @@ store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec!\n     LintId::of(casts::UNNECESSARY_CAST),\n     LintId::of(derivable_impls::DERIVABLE_IMPLS),\n     LintId::of(double_parens::DOUBLE_PARENS),\n-    LintId::of(duration_subsec::DURATION_SUBSEC),\n     LintId::of(explicit_write::EXPLICIT_WRITE),\n     LintId::of(format::USELESS_FORMAT),\n     LintId::of(functions::TOO_MANY_ARGUMENTS),\n@@ -71,6 +70,7 @@ store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec!\n     LintId::of(no_effect::NO_EFFECT),\n     LintId::of(no_effect::UNNECESSARY_OPERATION),\n     LintId::of(operators::DOUBLE_COMPARISONS),\n+    LintId::of(operators::DURATION_SUBSEC),\n     LintId::of(overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL),\n     LintId::of(partialeq_ne_impl::PARTIALEQ_NE_IMPL),\n     LintId::of(precedence::PRECEDENCE),"}, {"sha": "d0b38522f8818ad24c2610c447b51ea72f052b0b", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/732d7162ab065c2b399d2a1aec7a8d5794f893d6/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/732d7162ab065c2b399d2a1aec7a8d5794f893d6/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=732d7162ab065c2b399d2a1aec7a8d5794f893d6", "patch": "@@ -131,7 +131,6 @@ store.register_lints(&[\n     drop_forget_ref::FORGET_REF,\n     drop_forget_ref::UNDROPPED_MANUALLY_DROPS,\n     duplicate_mod::DUPLICATE_MOD,\n-    duration_subsec::DURATION_SUBSEC,\n     else_if_without_else::ELSE_IF_WITHOUT_ELSE,\n     empty_drop::EMPTY_DROP,\n     empty_enum::EMPTY_ENUM,\n@@ -432,6 +431,7 @@ store.register_lints(&[\n     operators::ASSIGN_OP_PATTERN,\n     operators::BAD_BIT_MASK,\n     operators::DOUBLE_COMPARISONS,\n+    operators::DURATION_SUBSEC,\n     operators::FLOAT_ARITHMETIC,\n     operators::INEFFECTIVE_BIT_MASK,\n     operators::INTEGER_ARITHMETIC,"}, {"sha": "9b1b3afa2bd704ffe2cb7fc9cde2689677eb45f0", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/732d7162ab065c2b399d2a1aec7a8d5794f893d6/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/732d7162ab065c2b399d2a1aec7a8d5794f893d6/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=732d7162ab065c2b399d2a1aec7a8d5794f893d6", "patch": "@@ -212,7 +212,6 @@ mod doc_link_with_quotes;\n mod double_parens;\n mod drop_forget_ref;\n mod duplicate_mod;\n-mod duration_subsec;\n mod else_if_without_else;\n mod empty_drop;\n mod empty_enum;\n@@ -732,7 +731,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(inherent_impl::MultipleInherentImpl));\n     store.register_late_pass(|| Box::new(neg_cmp_op_on_partial_ord::NoNegCompOpForPartialOrd));\n     store.register_late_pass(|| Box::new(unwrap::Unwrap));\n-    store.register_late_pass(|| Box::new(duration_subsec::DurationSubsec));\n     store.register_late_pass(|| Box::new(indexing_slicing::IndexingSlicing));\n     store.register_late_pass(|| Box::new(non_copy_const::NonCopyConst));\n     store.register_late_pass(|| Box::new(ptr_offset_with_cast::PtrOffsetWithCast));"}, {"sha": "0d067d1e1968c4ec2d729e932c08f6cabf6e7577", "filename": "clippy_lints/src/operators/duration_subsec.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/732d7162ab065c2b399d2a1aec7a8d5794f893d6/clippy_lints%2Fsrc%2Foperators%2Fduration_subsec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/732d7162ab065c2b399d2a1aec7a8d5794f893d6/clippy_lints%2Fsrc%2Foperators%2Fduration_subsec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fduration_subsec.rs?ref=732d7162ab065c2b399d2a1aec7a8d5794f893d6", "patch": "@@ -0,0 +1,44 @@\n+use clippy_utils::consts::{constant, Constant};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use rustc_errors::Applicability;\n+use rustc_hir::{BinOpKind, Expr, ExprKind};\n+use rustc_lint::LateContext;\n+use rustc_span::sym;\n+\n+use super::DURATION_SUBSEC;\n+\n+pub(crate) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx Expr<'_>,\n+    op: BinOpKind,\n+    left: &'tcx Expr<'_>,\n+    right: &'tcx Expr<'_>,\n+) {\n+    if op == BinOpKind::Div\n+        && let ExprKind::MethodCall(method_path, [self_arg], _) = left.kind\n+        && is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(self_arg).peel_refs(), sym::Duration)\n+        && let Some((Constant::Int(divisor), _)) = constant(cx, cx.typeck_results(), right)\n+    {\n+        let suggested_fn = match (method_path.ident.as_str(), divisor) {\n+            (\"subsec_micros\", 1_000) | (\"subsec_nanos\", 1_000_000) => \"subsec_millis\",\n+            (\"subsec_nanos\", 1_000) => \"subsec_micros\",\n+            _ => return,\n+        };\n+        let mut applicability = Applicability::MachineApplicable;\n+        span_lint_and_sugg(\n+            cx,\n+            DURATION_SUBSEC,\n+            expr.span,\n+            &format!(\"calling `{}()` is more concise than this calculation\", suggested_fn),\n+            \"try\",\n+            format!(\n+                \"{}.{}()\",\n+                snippet_with_applicability(cx, self_arg.span, \"_\", &mut applicability),\n+                suggested_fn\n+            ),\n+            applicability,\n+        );\n+    }\n+}"}, {"sha": "fb2c2bced9394a753503eee4ad3d7dcbdac5d685", "filename": "clippy_lints/src/operators/mod.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/732d7162ab065c2b399d2a1aec7a8d5794f893d6/clippy_lints%2Fsrc%2Foperators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/732d7162ab065c2b399d2a1aec7a8d5794f893d6/clippy_lints%2Fsrc%2Foperators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fmod.rs?ref=732d7162ab065c2b399d2a1aec7a8d5794f893d6", "patch": "@@ -6,6 +6,7 @@ mod absurd_extreme_comparisons;\n mod assign_op_pattern;\n mod bit_mask;\n mod double_comparison;\n+mod duration_subsec;\n mod misrefactored_assign_op;\n mod numeric_arithmetic;\n mod verbose_bit_mask;\n@@ -271,6 +272,36 @@ declare_clippy_lint! {\n     \"unnecessary double comparisons that can be simplified\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for calculation of subsecond microseconds or milliseconds\n+    /// from other `Duration` methods.\n+    ///\n+    /// ### Why is this bad?\n+    /// It's more concise to call `Duration::subsec_micros()` or\n+    /// `Duration::subsec_millis()` than to calculate them.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// # use std::time::Duration;\n+    /// # let duration = Duration::new(5, 0);\n+    /// let micros = duration.subsec_nanos() / 1_000;\n+    /// let millis = duration.subsec_nanos() / 1_000_000;\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    /// # use std::time::Duration;\n+    /// # let duration = Duration::new(5, 0);\n+    /// let micros = duration.subsec_micros();\n+    /// let millis = duration.subsec_millis();\n+    /// ```\n+    #[clippy::version = \"pre 1.29.0\"]\n+    pub DURATION_SUBSEC,\n+    complexity,\n+    \"checks for calculation of subsecond microseconds or milliseconds\"\n+}\n+\n pub struct Operators {\n     arithmetic_context: numeric_arithmetic::Context,\n     verbose_bit_mask_threshold: u64,\n@@ -285,6 +316,7 @@ impl_lint_pass!(Operators => [\n     INEFFECTIVE_BIT_MASK,\n     VERBOSE_BIT_MASK,\n     DOUBLE_COMPARISONS,\n+    DURATION_SUBSEC,\n ]);\n impl Operators {\n     pub fn new(verbose_bit_mask_threshold: u64) -> Self {\n@@ -305,6 +337,7 @@ impl<'tcx> LateLintPass<'tcx> for Operators {\n                 bit_mask::check(cx, e, op.node, lhs, rhs);\n                 verbose_bit_mask::check(cx, e, op.node, lhs, rhs, self.verbose_bit_mask_threshold);\n                 double_comparison::check(cx, op.node, lhs, rhs, e.span);\n+                duration_subsec::check(cx, e, op.node, lhs, rhs);\n             },\n             ExprKind::AssignOp(op, lhs, rhs) => {\n                 self.arithmetic_context.check_binary(cx, e, op.node, lhs, rhs);"}]}