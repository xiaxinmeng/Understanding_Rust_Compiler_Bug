{"sha": "abfd4d1e55ea3e9d823018422508a8d49e710517", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZmQ0ZDFlNTVlYTNlOWQ4MjMwMTg0MjI1MDhhOGQ0OWU3MTA1MTc=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-07-12T19:42:21Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-07-14T19:22:19Z"}, "message": "Move suggest_ref_mut into rustc_mir::borrow_check", "tree": {"sha": "bf16049e855c716aff8af521e11b7e63b7739ff0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf16049e855c716aff8af521e11b7e63b7739ff0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abfd4d1e55ea3e9d823018422508a8d49e710517", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abfd4d1e55ea3e9d823018422508a8d49e710517", "html_url": "https://github.com/rust-lang/rust/commit/abfd4d1e55ea3e9d823018422508a8d49e710517", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abfd4d1e55ea3e9d823018422508a8d49e710517/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2cc2b942cfb1c16be1d289f7b2feee13eee1d679", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cc2b942cfb1c16be1d289f7b2feee13eee1d679", "html_url": "https://github.com/rust-lang/rust/commit/2cc2b942cfb1c16be1d289f7b2feee13eee1d679"}], "stats": {"total": 32, "additions": 14, "deletions": 18}, "files": [{"sha": "59a3354f9c52f62d97ae45b8795a2ff877a86e76", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/abfd4d1e55ea3e9d823018422508a8d49e710517/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfd4d1e55ea3e9d823018422508a8d49e710517/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=abfd4d1e55ea3e9d823018422508a8d49e710517", "patch": "@@ -1,3 +1,4 @@\n+use core::unicode::property::Pattern_White_Space;\n use rustc::hir;\n use rustc::hir::Node;\n use rustc::mir::{self, BindingForm, ClearCrossCrate, Local, Location, Body};\n@@ -10,7 +11,6 @@ use syntax_pos::symbol::kw;\n use crate::borrow_check::MirBorrowckCtxt;\n use crate::borrow_check::error_reporting::BorrowedContentSource;\n use crate::util::collect_writes::FindAssignments;\n-use crate::util::suggest_ref_mut;\n use rustc_errors::Applicability;\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n@@ -628,3 +628,16 @@ fn annotate_struct_field(\n \n     None\n }\n+\n+/// If possible, suggest replacing `ref` with `ref mut`.\n+fn suggest_ref_mut(tcx: TyCtxt<'_>, binding_span: Span) -> Option<(String)> {\n+    let hi_src = tcx.sess.source_map().span_to_snippet(binding_span).unwrap();\n+    if hi_src.starts_with(\"ref\")\n+        && hi_src[\"ref\".len()..].starts_with(Pattern_White_Space)\n+    {\n+        let replacement = format!(\"ref mut{}\", &hi_src[\"ref\".len()..]);\n+        Some(replacement)\n+    } else {\n+        None\n+    }\n+}"}, {"sha": "c8a90a989142facb95943bdd6d21e1af1898e14f", "filename": "src/librustc_mir/util/mod.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/abfd4d1e55ea3e9d823018422508a8d49e710517/src%2Flibrustc_mir%2Futil%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfd4d1e55ea3e9d823018422508a8d49e710517/src%2Flibrustc_mir%2Futil%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fmod.rs?ref=abfd4d1e55ea3e9d823018422508a8d49e710517", "patch": "@@ -1,7 +1,3 @@\n-use core::unicode::property::Pattern_White_Space;\n-use rustc::ty::TyCtxt;\n-use syntax_pos::Span;\n-\n pub mod aggregate;\n pub mod borrowck_errors;\n pub mod elaborate_drops;\n@@ -19,16 +15,3 @@ pub use self::alignment::is_disaligned;\n pub use self::pretty::{dump_enabled, dump_mir, write_mir_pretty, PassWhere};\n pub use self::graphviz::{graphviz_safe_def_name, write_mir_graphviz};\n pub use self::graphviz::write_node_label as write_graphviz_node_label;\n-\n-/// If possible, suggest replacing `ref` with `ref mut`.\n-pub fn suggest_ref_mut(tcx: TyCtxt<'_>, binding_span: Span) -> Option<(String)> {\n-    let hi_src = tcx.sess.source_map().span_to_snippet(binding_span).unwrap();\n-    if hi_src.starts_with(\"ref\")\n-        && hi_src[\"ref\".len()..].starts_with(Pattern_White_Space)\n-    {\n-        let replacement = format!(\"ref mut{}\", &hi_src[\"ref\".len()..]);\n-        Some(replacement)\n-    } else {\n-        None\n-    }\n-}"}]}