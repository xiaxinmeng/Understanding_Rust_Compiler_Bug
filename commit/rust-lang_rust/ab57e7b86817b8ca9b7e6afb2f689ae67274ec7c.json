{"sha": "ab57e7b86817b8ca9b7e6afb2f689ae67274ec7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiNTdlN2I4NjgxN2I4Y2E5YjdlNmFmYjJmNjg5YWU2NzI3NGVjN2M=", "commit": {"author": {"name": "Amos Onn", "email": "amosonn@gmail.com", "date": "2017-02-16T01:16:41Z"}, "committer": {"name": "Amos Onn", "email": "amosonn@gmail.com", "date": "2017-02-16T01:16:41Z"}, "message": "std::io::cursor Added test for seeking beyond i64.", "tree": {"sha": "86ef955a3a898f351043d6c5cde0bb4bed8506e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86ef955a3a898f351043d6c5cde0bb4bed8506e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab57e7b86817b8ca9b7e6afb2f689ae67274ec7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab57e7b86817b8ca9b7e6afb2f689ae67274ec7c", "html_url": "https://github.com/rust-lang/rust/commit/ab57e7b86817b8ca9b7e6afb2f689ae67274ec7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab57e7b86817b8ca9b7e6afb2f689ae67274ec7c/comments", "author": {"login": "amosonn", "id": 3142573, "node_id": "MDQ6VXNlcjMxNDI1NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3142573?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amosonn", "html_url": "https://github.com/amosonn", "followers_url": "https://api.github.com/users/amosonn/followers", "following_url": "https://api.github.com/users/amosonn/following{/other_user}", "gists_url": "https://api.github.com/users/amosonn/gists{/gist_id}", "starred_url": "https://api.github.com/users/amosonn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amosonn/subscriptions", "organizations_url": "https://api.github.com/users/amosonn/orgs", "repos_url": "https://api.github.com/users/amosonn/repos", "events_url": "https://api.github.com/users/amosonn/events{/privacy}", "received_events_url": "https://api.github.com/users/amosonn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "amosonn", "id": 3142573, "node_id": "MDQ6VXNlcjMxNDI1NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3142573?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amosonn", "html_url": "https://github.com/amosonn", "followers_url": "https://api.github.com/users/amosonn/followers", "following_url": "https://api.github.com/users/amosonn/following{/other_user}", "gists_url": "https://api.github.com/users/amosonn/gists{/gist_id}", "starred_url": "https://api.github.com/users/amosonn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amosonn/subscriptions", "organizations_url": "https://api.github.com/users/amosonn/orgs", "repos_url": "https://api.github.com/users/amosonn/repos", "events_url": "https://api.github.com/users/amosonn/events{/privacy}", "received_events_url": "https://api.github.com/users/amosonn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a797b6e2feb1c6cd60868a2d3b59029a0ca5df64", "url": "https://api.github.com/repos/rust-lang/rust/commits/a797b6e2feb1c6cd60868a2d3b59029a0ca5df64", "html_url": "https://github.com/rust-lang/rust/commit/a797b6e2feb1c6cd60868a2d3b59029a0ca5df64"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "9427e4afa214270ab841f7eeaee8ab7e227b7781", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ab57e7b86817b8ca9b7e6afb2f689ae67274ec7c/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab57e7b86817b8ca9b7e6afb2f689ae67274ec7c/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=ab57e7b86817b8ca9b7e6afb2f689ae67274ec7c", "patch": "@@ -526,6 +526,43 @@ mod tests {\n         assert_eq!(r.write(&[3]).unwrap(), 0);\n     }\n \n+    #[test]\n+    fn seek_past_i64() {\n+        let buf = [0xff];\n+        let mut r = Cursor::new(&buf[..]);\n+        assert_eq!(r.seek(SeekFrom::Start(6)).unwrap(), 6);\n+        assert_eq!(r.seek(SeekFrom::Current(0x7ffffffffffffff0)).unwrap(), 0x7ffffffffffffff6);\n+        assert_eq!(r.seek(SeekFrom::Current(0x10)).unwrap(), 0x8000000000000006);\n+        assert_eq!(r.seek(SeekFrom::Current(0)).unwrap(), 0x8000000000000006);\n+        assert!(r.seek(SeekFrom::Current(0x7ffffffffffffffd)).is_err());\n+        assert_eq!(r.seek(SeekFrom::Current(-0x8000000000000000)).unwrap(), 6);\n+\n+        let mut r = Cursor::new(vec![10]);\n+        assert_eq!(r.seek(SeekFrom::Start(6)).unwrap(), 6);\n+        assert_eq!(r.seek(SeekFrom::Current(0x7ffffffffffffff0)).unwrap(), 0x7ffffffffffffff6);\n+        assert_eq!(r.seek(SeekFrom::Current(0x10)).unwrap(), 0x8000000000000006);\n+        assert_eq!(r.seek(SeekFrom::Current(0)).unwrap(), 0x8000000000000006);\n+        assert!(r.seek(SeekFrom::Current(0x7ffffffffffffffd)).is_err());\n+        assert_eq!(r.seek(SeekFrom::Current(-0x8000000000000000)).unwrap(), 6);\n+\n+        let mut buf = [0];\n+        let mut r = Cursor::new(&mut buf[..]);\n+        assert_eq!(r.seek(SeekFrom::Start(6)).unwrap(), 6);\n+        assert_eq!(r.seek(SeekFrom::Current(0x7ffffffffffffff0)).unwrap(), 0x7ffffffffffffff6);\n+        assert_eq!(r.seek(SeekFrom::Current(0x10)).unwrap(), 0x8000000000000006);\n+        assert_eq!(r.seek(SeekFrom::Current(0)).unwrap(), 0x8000000000000006);\n+        assert!(r.seek(SeekFrom::Current(0x7ffffffffffffffd)).is_err());\n+        assert_eq!(r.seek(SeekFrom::Current(-0x8000000000000000)).unwrap(), 6);\n+\n+        let mut r = Cursor::new(vec![10].into_boxed_slice());\n+        assert_eq!(r.seek(SeekFrom::Start(6)).unwrap(), 6);\n+        assert_eq!(r.seek(SeekFrom::Current(0x7ffffffffffffff0)).unwrap(), 0x7ffffffffffffff6);\n+        assert_eq!(r.seek(SeekFrom::Current(0x10)).unwrap(), 0x8000000000000006);\n+        assert_eq!(r.seek(SeekFrom::Current(0)).unwrap(), 0x8000000000000006);\n+        assert!(r.seek(SeekFrom::Current(0x7ffffffffffffffd)).is_err());\n+        assert_eq!(r.seek(SeekFrom::Current(-0x8000000000000000)).unwrap(), 6);\n+    }\n+\n     #[test]\n     fn seek_before_0() {\n         let buf = [0xff];"}]}