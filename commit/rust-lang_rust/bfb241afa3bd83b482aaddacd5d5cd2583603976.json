{"sha": "bfb241afa3bd83b482aaddacd5d5cd2583603976", "node_id": "C_kwDOAAsO6NoAKGJmYjI0MWFmYTNiZDgzYjQ4MmFhZGRhY2Q1ZDVjZDI1ODM2MDM5NzY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-07T14:16:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-07T14:16:00Z"}, "message": "Auto merge of #12188 - Veykril:auto-import, r=Veykril\n\nfix: Allow auto importing starting segments of use items", "tree": {"sha": "1de04a4d2245cfa5b3cb57ab6a873b404c289b9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1de04a4d2245cfa5b3cb57ab6a873b404c289b9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfb241afa3bd83b482aaddacd5d5cd2583603976", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfb241afa3bd83b482aaddacd5d5cd2583603976", "html_url": "https://github.com/rust-lang/rust/commit/bfb241afa3bd83b482aaddacd5d5cd2583603976", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfb241afa3bd83b482aaddacd5d5cd2583603976/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2216764c40527eecc846483da6b3ca0c030c0a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2216764c40527eecc846483da6b3ca0c030c0a7", "html_url": "https://github.com/rust-lang/rust/commit/f2216764c40527eecc846483da6b3ca0c030c0a7"}, {"sha": "61e074f016ca6df88b6f88c822a413c4f5022784", "url": "https://api.github.com/repos/rust-lang/rust/commits/61e074f016ca6df88b6f88c822a413c4f5022784", "html_url": "https://github.com/rust-lang/rust/commit/61e074f016ca6df88b6f88c822a413c4f5022784"}], "stats": {"total": 113, "additions": 84, "deletions": 29}, "files": [{"sha": "0a0dafb35edfc031ce1617979bff295476cddf92", "filename": "crates/ide-assists/src/handlers/auto_import.rs", "status": "modified", "additions": 39, "deletions": 13, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/bfb241afa3bd83b482aaddacd5d5cd2583603976/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb241afa3bd83b482aaddacd5d5cd2583603976/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=bfb241afa3bd83b482aaddacd5d5cd2583603976", "patch": "@@ -373,19 +373,6 @@ mod baz {\n         );\n     }\n \n-    #[test]\n-    fn not_applicable_in_import_statements() {\n-        check_assist_not_applicable(\n-            auto_import,\n-            r\"\n-            use PubStruct$0;\n-\n-            pub mod PubMod {\n-                pub struct PubStruct;\n-            }\",\n-        );\n-    }\n-\n     #[test]\n     fn function_import() {\n         check_assist(\n@@ -1121,4 +1108,43 @@ struct Foo;\n \"#,\n         );\n     }\n+\n+    #[test]\n+    fn works_in_use_start() {\n+        check_assist(\n+            auto_import,\n+            r#\"\n+mod bar {\n+    pub mod foo {\n+        pub struct Foo;\n+    }\n+}\n+use foo$0::Foo;\n+\"#,\n+            r#\"\n+mod bar {\n+    pub mod foo {\n+        pub struct Foo;\n+    }\n+}\n+use bar::foo;\n+use foo::Foo;\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn not_applicable_in_non_start_use() {\n+        check_assist_not_applicable(\n+            auto_import,\n+            r\"\n+mod bar {\n+    pub mod foo {\n+        pub struct Foo;\n+    }\n+}\n+use foo::Foo$0;\n+\",\n+        );\n+    }\n }"}, {"sha": "8d2293d22475efac972d3abfd886d00c48e0473f", "filename": "crates/ide-assists/src/handlers/qualify_path.rs", "status": "modified", "additions": 38, "deletions": 14, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/bfb241afa3bd83b482aaddacd5d5cd2583603976/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb241afa3bd83b482aaddacd5d5cd2583603976/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fqualify_path.rs?ref=bfb241afa3bd83b482aaddacd5d5cd2583603976", "patch": "@@ -381,20 +381,6 @@ pub mod PubMod {\n         check_assist_not_applicable(qualify_path, r#\"PubStruct$0\"#);\n     }\n \n-    #[test]\n-    fn not_applicable_in_import_statements() {\n-        check_assist_not_applicable(\n-            qualify_path,\n-            r#\"\n-use PubStruct$0;\n-\n-pub mod PubMod {\n-    pub struct PubStruct;\n-}\n-\"#,\n-        );\n-    }\n-\n     #[test]\n     fn qualify_function() {\n         check_assist(\n@@ -1270,4 +1256,42 @@ struct Foo;\n \"#,\n         );\n     }\n+\n+    #[test]\n+    fn works_in_use_start() {\n+        check_assist(\n+            qualify_path,\n+            r#\"\n+mod bar {\n+    pub mod foo {\n+        pub struct Foo;\n+    }\n+}\n+use foo$0::Foo;\n+\"#,\n+            r#\"\n+mod bar {\n+    pub mod foo {\n+        pub struct Foo;\n+    }\n+}\n+use bar::foo::Foo;\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn not_applicable_in_non_start_use() {\n+        check_assist_not_applicable(\n+            qualify_path,\n+            r\"\n+mod bar {\n+    pub mod foo {\n+        pub struct Foo;\n+    }\n+}\n+use foo::Foo$0;\n+\",\n+        );\n+    }\n }"}, {"sha": "81467ab07a2ff5f994562c75e1c426f359b15087", "filename": "crates/ide-db/src/imports/import_assets.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bfb241afa3bd83b482aaddacd5d5cd2583603976/crates%2Fide-db%2Fsrc%2Fimports%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb241afa3bd83b482aaddacd5d5cd2583603976/crates%2Fide-db%2Fsrc%2Fimports%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fimports%2Fimport_assets.rs?ref=bfb241afa3bd83b482aaddacd5d5cd2583603976", "patch": "@@ -114,8 +114,13 @@ impl ImportAssets {\n         sema: &Semantics<RootDatabase>,\n     ) -> Option<Self> {\n         let candidate_node = fully_qualified_path.syntax().clone();\n-        if candidate_node.ancestors().find_map(ast::Use::cast).is_some() {\n-            return None;\n+        if let Some(use_tree) = candidate_node.ancestors().find_map(ast::UseTree::cast) {\n+            // Path is inside a use tree, then only continue if it is the first segment of a use statement.\n+            if use_tree.syntax().parent().and_then(ast::Use::cast).is_none()\n+                || fully_qualified_path.qualifier().is_some()\n+            {\n+                return None;\n+            }\n         }\n         Some(Self {\n             import_candidate: ImportCandidate::for_regular_path(sema, fully_qualified_path)?,"}]}