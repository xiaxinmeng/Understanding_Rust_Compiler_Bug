{"sha": "aaa9bb9e7bb4b8b565f2e1570587d6c21b13ab2d", "node_id": "C_kwDOAAsO6NoAKGFhYTliYjllN2JiNGI4YjU2NWYyZTE1NzA1ODdkNmMyMWIxM2FiMmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-18T03:54:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-18T03:54:04Z"}, "message": "Auto merge of #106952 - petrochenkov:docglob, r=notriddle,GuillaumeGomez\n\nrustdoc: Fix glob import inlining\n\nFilter away names that are not actually imported by the glob, e.g. because they are shadowed by something else.\n\nFixes the issue found in https://github.com/rust-lang/rust/pull/94857#issuecomment-1382912356.", "tree": {"sha": "0d0ac7b2945e57841dd30450fe5caa38ef67aa5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d0ac7b2945e57841dd30450fe5caa38ef67aa5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aaa9bb9e7bb4b8b565f2e1570587d6c21b13ab2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aaa9bb9e7bb4b8b565f2e1570587d6c21b13ab2d", "html_url": "https://github.com/rust-lang/rust/commit/aaa9bb9e7bb4b8b565f2e1570587d6c21b13ab2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aaa9bb9e7bb4b8b565f2e1570587d6c21b13ab2d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e08b379d5d5840a2976d73d1754e8821a9973b66", "url": "https://api.github.com/repos/rust-lang/rust/commits/e08b379d5d5840a2976d73d1754e8821a9973b66", "html_url": "https://github.com/rust-lang/rust/commit/e08b379d5d5840a2976d73d1754e8821a9973b66"}, {"sha": "3b0d306b94f78f375931f624f53114c205aef066", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b0d306b94f78f375931f624f53114c205aef066", "html_url": "https://github.com/rust-lang/rust/commit/3b0d306b94f78f375931f624f53114c205aef066"}], "stats": {"total": 32, "additions": 28, "deletions": 4}, "files": [{"sha": "b3b0933123349ccdda6abee03a6a53ebeb1504f7", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/aaa9bb9e7bb4b8b565f2e1570587d6c21b13ab2d/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaa9bb9e7bb4b8b565f2e1570587d6c21b13ab2d/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=aaa9bb9e7bb4b8b565f2e1570587d6c21b13ab2d", "patch": "@@ -9,7 +9,7 @@ use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::Mutability;\n use rustc_metadata::creader::{CStore, LoadedMacro};\n use rustc_middle::ty::{self, TyCtxt};\n@@ -162,6 +162,7 @@ pub(crate) fn try_inline(\n pub(crate) fn try_inline_glob(\n     cx: &mut DocContext<'_>,\n     res: Res,\n+    current_mod: LocalDefId,\n     visited: &mut FxHashSet<DefId>,\n     inlined_names: &mut FxHashSet<(ItemType, Symbol)>,\n ) -> Option<Vec<clean::Item>> {\n@@ -172,7 +173,16 @@ pub(crate) fn try_inline_glob(\n \n     match res {\n         Res::Def(DefKind::Mod, did) => {\n-            let mut items = build_module_items(cx, did, visited, inlined_names);\n+            // Use the set of module reexports to filter away names that are not actually\n+            // reexported by the glob, e.g. because they are shadowed by something else.\n+            let reexports = cx\n+                .tcx\n+                .module_reexports(current_mod)\n+                .unwrap_or_default()\n+                .iter()\n+                .filter_map(|child| child.res.opt_def_id())\n+                .collect();\n+            let mut items = build_module_items(cx, did, visited, inlined_names, Some(&reexports));\n             items.drain_filter(|item| {\n                 if let Some(name) = item.name {\n                     // If an item with the same type and name already exists,\n@@ -563,7 +573,7 @@ fn build_module(\n     did: DefId,\n     visited: &mut FxHashSet<DefId>,\n ) -> clean::Module {\n-    let items = build_module_items(cx, did, visited, &mut FxHashSet::default());\n+    let items = build_module_items(cx, did, visited, &mut FxHashSet::default(), None);\n \n     let span = clean::Span::new(cx.tcx.def_span(did));\n     clean::Module { items, span }\n@@ -574,6 +584,7 @@ fn build_module_items(\n     did: DefId,\n     visited: &mut FxHashSet<DefId>,\n     inlined_names: &mut FxHashSet<(ItemType, Symbol)>,\n+    allowed_def_ids: Option<&FxHashSet<DefId>>,\n ) -> Vec<clean::Item> {\n     let mut items = Vec::new();\n \n@@ -583,6 +594,11 @@ fn build_module_items(\n     for &item in cx.tcx.module_children(did).iter() {\n         if item.vis.is_public() {\n             let res = item.res.expect_non_local();\n+            if let Some(def_id) = res.opt_def_id()\n+                && let Some(allowed_def_ids) = allowed_def_ids\n+                && !allowed_def_ids.contains(&def_id) {\n+                continue;\n+            }\n             if let Some(def_id) = res.mod_def_id() {\n                 // If we're inlining a glob import, it's possible to have\n                 // two distinct modules with the same name. We don't want to"}, {"sha": "20984696b6c015564ff6bda6922d80fd2b961f46", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aaa9bb9e7bb4b8b565f2e1570587d6c21b13ab2d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaa9bb9e7bb4b8b565f2e1570587d6c21b13ab2d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=aaa9bb9e7bb4b8b565f2e1570587d6c21b13ab2d", "patch": "@@ -2441,7 +2441,8 @@ fn clean_use_statement_inner<'tcx>(\n     let inner = if kind == hir::UseKind::Glob {\n         if !denied {\n             let mut visited = FxHashSet::default();\n-            if let Some(items) = inline::try_inline_glob(cx, path.res, &mut visited, inlined_names)\n+            if let Some(items) =\n+                inline::try_inline_glob(cx, path.res, current_mod, &mut visited, inlined_names)\n             {\n                 return items;\n             }"}, {"sha": "48672590a12dd969ea7e9daa274c0e86f8a7389c", "filename": "tests/rustdoc/inline_cross/auxiliary/cross-glob.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aaa9bb9e7bb4b8b565f2e1570587d6c21b13ab2d/tests%2Frustdoc%2Finline_cross%2Fauxiliary%2Fcross-glob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaa9bb9e7bb4b8b565f2e1570587d6c21b13ab2d/tests%2Frustdoc%2Finline_cross%2Fauxiliary%2Fcross-glob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Finline_cross%2Fauxiliary%2Fcross-glob.rs?ref=aaa9bb9e7bb4b8b565f2e1570587d6c21b13ab2d", "patch": "@@ -3,3 +3,5 @@\n pub struct SomeStruct;\n \n pub fn some_fn() {}\n+\n+pub enum Shadowed {}"}, {"sha": "7a519d2d2554792362e233f75cab42eae31c13b5", "filename": "tests/rustdoc/inline_cross/cross-glob.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aaa9bb9e7bb4b8b565f2e1570587d6c21b13ab2d/tests%2Frustdoc%2Finline_cross%2Fcross-glob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaa9bb9e7bb4b8b565f2e1570587d6c21b13ab2d/tests%2Frustdoc%2Finline_cross%2Fcross-glob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Finline_cross%2Fcross-glob.rs?ref=aaa9bb9e7bb4b8b565f2e1570587d6c21b13ab2d", "patch": "@@ -6,6 +6,11 @@ extern crate inner;\n \n // @has cross_glob/struct.SomeStruct.html\n // @has cross_glob/fn.some_fn.html\n+// @!has cross_glob/enum.Shadowed.html\n // @!has cross_glob/index.html '//code' 'pub use inner::*;'\n #[doc(inline)]\n pub use inner::*;\n+\n+// This type shadows the glob-imported enum `Shadowed`.\n+// @has cross_glob/type.Shadowed.html\n+pub type Shadowed = u8;"}]}