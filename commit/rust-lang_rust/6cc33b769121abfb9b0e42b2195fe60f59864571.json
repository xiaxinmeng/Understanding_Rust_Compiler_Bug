{"sha": "6cc33b769121abfb9b0e42b2195fe60f59864571", "node_id": "C_kwDOAAsO6NoAKDZjYzMzYjc2OTEyMWFiZmI5YjBlNDJiMjE5NWZlNjBmNTk4NjQ1NzE", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-02-18T12:23:57Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-03-23T10:20:55Z"}, "message": "expand: Pass `ast::Crate` by reference to AST transforming passes\n\nAlso some more attributes are passed by reference.", "tree": {"sha": "3c156a0736b6e6c5172aacda0623060c03c87169", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c156a0736b6e6c5172aacda0623060c03c87169"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cc33b769121abfb9b0e42b2195fe60f59864571", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cc33b769121abfb9b0e42b2195fe60f59864571", "html_url": "https://github.com/rust-lang/rust/commit/6cc33b769121abfb9b0e42b2195fe60f59864571", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cc33b769121abfb9b0e42b2195fe60f59864571/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84dd6dfd9d19176cc3c94bc1448a841e44d57890", "url": "https://api.github.com/repos/rust-lang/rust/commits/84dd6dfd9d19176cc3c94bc1448a841e44d57890", "html_url": "https://github.com/rust-lang/rust/commit/84dd6dfd9d19176cc3c94bc1448a841e44d57890"}], "stats": {"total": 141, "additions": 62, "deletions": 79}, "files": [{"sha": "2b6fcc169be067ee2a92555de44aaae52bf654bf", "filename": "compiler/rustc_builtin_macros/src/cmdline_attrs.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cc33b769121abfb9b0e42b2195fe60f59864571/compiler%2Frustc_builtin_macros%2Fsrc%2Fcmdline_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc33b769121abfb9b0e42b2195fe60f59864571/compiler%2Frustc_builtin_macros%2Fsrc%2Fcmdline_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fcmdline_attrs.rs?ref=6cc33b769121abfb9b0e42b2195fe60f59864571", "patch": "@@ -6,7 +6,7 @@ use rustc_ast::{self as ast, AttrItem, AttrStyle};\n use rustc_session::parse::ParseSess;\n use rustc_span::FileName;\n \n-pub fn inject(mut krate: ast::Crate, parse_sess: &ParseSess, attrs: &[String]) -> ast::Crate {\n+pub fn inject(krate: &mut ast::Crate, parse_sess: &ParseSess, attrs: &[String]) {\n     for raw_attr in attrs {\n         let mut parser = rustc_parse::new_parser_from_source_str(\n             parse_sess,\n@@ -36,6 +36,4 @@ pub fn inject(mut krate: ast::Crate, parse_sess: &ParseSess, attrs: &[String]) -\n             start_span.to(end_span),\n         ));\n     }\n-\n-    krate\n }"}, {"sha": "378d5f39f4ab2ecd32f266afdcc602b49be58d24", "filename": "compiler/rustc_builtin_macros/src/proc_macro_harness.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6cc33b769121abfb9b0e42b2195fe60f59864571/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc33b769121abfb9b0e42b2195fe60f59864571/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs?ref=6cc33b769121abfb9b0e42b2195fe60f59864571", "patch": "@@ -43,14 +43,14 @@ struct CollectProcMacros<'a> {\n }\n \n pub fn inject(\n+    krate: &mut ast::Crate,\n     sess: &Session,\n     resolver: &mut dyn ResolverExpand,\n-    mut krate: ast::Crate,\n     is_proc_macro_crate: bool,\n     has_proc_macro_decls: bool,\n     is_test_crate: bool,\n     handler: &rustc_errors::Handler,\n-) -> ast::Crate {\n+) {\n     let ecfg = ExpansionConfig::default(\"proc_macro\".to_string());\n     let mut cx = ExtCtxt::new(sess, ecfg, resolver, None);\n \n@@ -64,22 +64,20 @@ pub fn inject(\n     };\n \n     if has_proc_macro_decls || is_proc_macro_crate {\n-        visit::walk_crate(&mut collect, &krate);\n+        visit::walk_crate(&mut collect, krate);\n     }\n     let macros = collect.macros;\n \n     if !is_proc_macro_crate {\n-        return krate;\n+        return;\n     }\n \n     if is_test_crate {\n-        return krate;\n+        return;\n     }\n \n     let decls = mk_decls(&mut cx, &macros);\n     krate.items.push(decls);\n-\n-    krate\n }\n \n impl<'a> CollectProcMacros<'a> {"}, {"sha": "f87e454ef7fc81ea371b522df5f4c633ffa77b90", "filename": "compiler/rustc_builtin_macros/src/standard_library_imports.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6cc33b769121abfb9b0e42b2195fe60f59864571/compiler%2Frustc_builtin_macros%2Fsrc%2Fstandard_library_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc33b769121abfb9b0e42b2195fe60f59864571/compiler%2Frustc_builtin_macros%2Fsrc%2Fstandard_library_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fstandard_library_imports.rs?ref=6cc33b769121abfb9b0e42b2195fe60f59864571", "patch": "@@ -8,16 +8,12 @@ use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::DUMMY_SP;\n use thin_vec::thin_vec;\n \n-pub fn inject(\n-    mut krate: ast::Crate,\n-    resolver: &mut dyn ResolverExpand,\n-    sess: &Session,\n-) -> ast::Crate {\n+pub fn inject(krate: &mut ast::Crate, resolver: &mut dyn ResolverExpand, sess: &Session) {\n     let edition = sess.parse_sess.edition;\n \n     // the first name in this list is the crate name of the crate with the prelude\n     let names: &[Symbol] = if attr::contains_name(&krate.attrs, sym::no_core) {\n-        return krate;\n+        return;\n     } else if attr::contains_name(&krate.attrs, sym::no_std) {\n         if attr::contains_name(&krate.attrs, sym::compiler_builtins) {\n             &[sym::core]\n@@ -88,6 +84,4 @@ pub fn inject(\n     );\n \n     krate.items.insert(0, use_item);\n-\n-    krate\n }"}, {"sha": "43ab6c0442833d253b88ddc21be42d11051fcca6", "filename": "compiler/rustc_builtin_macros/src/test_harness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cc33b769121abfb9b0e42b2195fe60f59864571/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc33b769121abfb9b0e42b2195fe60f59864571/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs?ref=6cc33b769121abfb9b0e42b2195fe60f59864571", "patch": "@@ -37,7 +37,7 @@ struct TestCtxt<'a> {\n \n /// Traverse the crate, collecting all the test functions, eliding any\n /// existing main functions, and synthesizing a main test harness\n-pub fn inject(sess: &Session, resolver: &mut dyn ResolverExpand, krate: &mut ast::Crate) {\n+pub fn inject(krate: &mut ast::Crate, sess: &Session, resolver: &mut dyn ResolverExpand) {\n     let span_diagnostic = sess.diagnostic();\n     let panic_strategy = sess.panic_strategy();\n     let platform_panic_strategy = sess.target.panic_strategy;"}, {"sha": "9ef185e9497ceb3abb190bd9a4e65f31d475331d", "filename": "compiler/rustc_expand/src/config.rs", "status": "modified", "additions": 32, "deletions": 39, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/6cc33b769121abfb9b0e42b2195fe60f59864571/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc33b769121abfb9b0e42b2195fe60f59864571/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs?ref=6cc33b769121abfb9b0e42b2195fe60f59864571", "patch": "@@ -192,38 +192,32 @@ fn get_features(sess: &Session, krate_attrs: &[ast::Attribute]) -> Features {\n }\n \n /// `cfg_attr`-process the crate's attributes and compute the crate's features.\n-pub fn features(\n-    sess: &Session,\n-    mut krate: ast::Crate,\n-    lint_node_id: NodeId,\n-) -> (ast::Crate, Features) {\n+pub fn features(sess: &Session, krate: &mut ast::Crate, lint_node_id: NodeId) -> Features {\n     let mut strip_unconfigured =\n         StripUnconfigured { sess, features: None, config_tokens: false, lint_node_id };\n \n-    let unconfigured_attrs = krate.attrs.clone();\n+    let mut unconfigured_attrs = krate.attrs.clone();\n     let diag = &sess.parse_sess.span_diagnostic;\n     let err_count = diag.err_count();\n-    let features = match strip_unconfigured.configure_krate_attrs(krate.attrs) {\n-        None => {\n-            // The entire crate is unconfigured.\n-            krate.attrs = ast::AttrVec::new();\n-            krate.items = ThinVec::new();\n-            Features::default()\n-        }\n-        Some(attrs) => {\n-            krate.attrs = attrs;\n-            let features = get_features(sess, &krate.attrs);\n-            if err_count == diag.err_count() {\n-                // Avoid reconfiguring malformed `cfg_attr`s.\n-                strip_unconfigured.features = Some(&features);\n-                // Run configuration again, this time with features available\n-                // so that we can perform feature-gating.\n-                strip_unconfigured.configure_krate_attrs(unconfigured_attrs);\n-            }\n-            features\n+\n+    krate.attrs.flat_map_in_place(|attr| strip_unconfigured.process_cfg_attr(&attr));\n+    if !strip_unconfigured.in_cfg(&krate.attrs) {\n+        // The entire crate is unconfigured.\n+        krate.attrs = ast::AttrVec::new();\n+        krate.items = ThinVec::new();\n+        Features::default()\n+    } else {\n+        let features = get_features(sess, &krate.attrs);\n+        if err_count == diag.err_count() {\n+            // Avoid reconfiguring malformed `cfg_attr`s.\n+            strip_unconfigured.features = Some(&features);\n+            // Run configuration again, this time with features available\n+            // so that we can perform feature-gating.\n+            unconfigured_attrs.flat_map_in_place(|attr| strip_unconfigured.process_cfg_attr(&attr));\n+            strip_unconfigured.in_cfg(&unconfigured_attrs);\n         }\n-    };\n-    (krate, features)\n+        features\n+    }\n }\n \n #[macro_export]\n@@ -254,11 +248,6 @@ impl<'a> StripUnconfigured<'a> {\n         }\n     }\n \n-    fn configure_krate_attrs(&self, mut attrs: ast::AttrVec) -> Option<ast::AttrVec> {\n-        attrs.flat_map_in_place(|attr| self.process_cfg_attr(attr));\n-        self.in_cfg(&attrs).then_some(attrs)\n-    }\n-\n     /// Performs cfg-expansion on `stream`, producing a new `AttrTokenStream`.\n     /// This is only used during the invocation of `derive` proc-macros,\n     /// which require that we cfg-expand their entire input.\n@@ -281,7 +270,7 @@ impl<'a> StripUnconfigured<'a> {\n             .iter()\n             .flat_map(|tree| match tree.clone() {\n                 AttrTokenTree::Attributes(mut data) => {\n-                    data.attrs.flat_map_in_place(|attr| self.process_cfg_attr(attr));\n+                    data.attrs.flat_map_in_place(|attr| self.process_cfg_attr(&attr));\n \n                     if self.in_cfg(&data.attrs) {\n                         data.tokens = LazyAttrTokenStream::new(\n@@ -319,12 +308,16 @@ impl<'a> StripUnconfigured<'a> {\n     /// the syntax of any `cfg_attr` is incorrect.\n     fn process_cfg_attrs<T: HasAttrs>(&self, node: &mut T) {\n         node.visit_attrs(|attrs| {\n-            attrs.flat_map_in_place(|attr| self.process_cfg_attr(attr));\n+            attrs.flat_map_in_place(|attr| self.process_cfg_attr(&attr));\n         });\n     }\n \n-    fn process_cfg_attr(&self, attr: Attribute) -> Vec<Attribute> {\n-        if attr.has_name(sym::cfg_attr) { self.expand_cfg_attr(attr, true) } else { vec![attr] }\n+    fn process_cfg_attr(&self, attr: &Attribute) -> Vec<Attribute> {\n+        if attr.has_name(sym::cfg_attr) {\n+            self.expand_cfg_attr(attr, true)\n+        } else {\n+            vec![attr.clone()]\n+        }\n     }\n \n     /// Parse and expand a single `cfg_attr` attribute into a list of attributes\n@@ -334,9 +327,9 @@ impl<'a> StripUnconfigured<'a> {\n     /// Gives a compiler warning when the `cfg_attr` contains no attributes and\n     /// is in the original source file. Gives a compiler error if the syntax of\n     /// the attribute is incorrect.\n-    pub(crate) fn expand_cfg_attr(&self, attr: Attribute, recursive: bool) -> Vec<Attribute> {\n+    pub(crate) fn expand_cfg_attr(&self, attr: &Attribute, recursive: bool) -> Vec<Attribute> {\n         let Some((cfg_predicate, expanded_attrs)) =\n-            rustc_parse::parse_cfg_attr(&attr, &self.sess.parse_sess) else {\n+            rustc_parse::parse_cfg_attr(attr, &self.sess.parse_sess) else {\n                 return vec![];\n             };\n \n@@ -365,10 +358,10 @@ impl<'a> StripUnconfigured<'a> {\n             //  `#[cfg_attr(false, cfg_attr(true, some_attr))]`.\n             expanded_attrs\n                 .into_iter()\n-                .flat_map(|item| self.process_cfg_attr(self.expand_cfg_attr_item(&attr, item)))\n+                .flat_map(|item| self.process_cfg_attr(&self.expand_cfg_attr_item(attr, item)))\n                 .collect()\n         } else {\n-            expanded_attrs.into_iter().map(|item| self.expand_cfg_attr_item(&attr, item)).collect()\n+            expanded_attrs.into_iter().map(|item| self.expand_cfg_attr_item(attr, item)).collect()\n         }\n     }\n "}, {"sha": "6408ccf7c43246e9459ef19864a436af57db0e53", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cc33b769121abfb9b0e42b2195fe60f59864571/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc33b769121abfb9b0e42b2195fe60f59864571/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=6cc33b769121abfb9b0e42b2195fe60f59864571", "patch": "@@ -1688,7 +1688,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n         res\n     }\n \n-    fn expand_cfg_attr(&self, node: &mut impl HasAttrs, attr: ast::Attribute, pos: usize) {\n+    fn expand_cfg_attr(&self, node: &mut impl HasAttrs, attr: &ast::Attribute, pos: usize) {\n         node.visit_attrs(|attrs| {\n             // Repeated `insert` calls is inefficient, but the number of\n             // insertions is almost always 0 or 1 in practice.\n@@ -1712,7 +1712,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n                         Default::default()\n                     }\n                     sym::cfg_attr => {\n-                        self.expand_cfg_attr(&mut node, attr, pos);\n+                        self.expand_cfg_attr(&mut node, &attr, pos);\n                         continue;\n                     }\n                     _ => {\n@@ -1760,7 +1760,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n                         continue;\n                     }\n                     sym::cfg_attr => {\n-                        self.expand_cfg_attr(node, attr, pos);\n+                        self.expand_cfg_attr(node, &attr, pos);\n                         continue;\n                     }\n                     _ => visit_clobber(node, |node| {"}, {"sha": "7c1f6d8c9b872deacd77625ab496d9fae5214e69", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6cc33b769121abfb9b0e42b2195fe60f59864571/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc33b769121abfb9b0e42b2195fe60f59864571/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=6cc33b769121abfb9b0e42b2195fe60f59864571", "patch": "@@ -76,18 +76,18 @@ pub fn register_plugins<'a>(\n     sess: &'a Session,\n     metadata_loader: &'a dyn MetadataLoader,\n     register_lints: impl Fn(&Session, &mut LintStore),\n-    mut krate: ast::Crate,\n+    krate: &mut ast::Crate,\n     crate_name: Symbol,\n-) -> Result<(ast::Crate, LintStore)> {\n-    krate = sess.time(\"attributes_injection\", || {\n+) -> Result<LintStore> {\n+    sess.time(\"attributes_injection\", || {\n         rustc_builtin_macros::cmdline_attrs::inject(\n             krate,\n             &sess.parse_sess,\n             &sess.opts.unstable_opts.crate_attr,\n         )\n     });\n \n-    let (krate, features) = rustc_expand::config::features(sess, krate, CRATE_NODE_ID);\n+    let features = rustc_expand::config::features(sess, krate, CRATE_NODE_ID);\n     // these need to be set \"early\" so that expansion sees `quote` if enabled.\n     sess.init_features(features);\n \n@@ -117,16 +117,16 @@ pub fn register_plugins<'a>(\n     let mut lint_store = rustc_lint::new_lint_store(sess.enable_internal_lints());\n     register_lints(sess, &mut lint_store);\n \n-    let registrars =\n-        sess.time(\"plugin_loading\", || plugin::load::load_plugins(sess, metadata_loader, &krate));\n+    let registrars = sess\n+        .time(\"plugin_loading\", || plugin::load::load_plugins(sess, metadata_loader, &krate.attrs));\n     sess.time(\"plugin_registration\", || {\n         let mut registry = plugin::Registry { lint_store: &mut lint_store };\n         for registrar in registrars {\n             registrar(&mut registry);\n         }\n     });\n \n-    Ok((krate, lint_store))\n+    Ok(lint_store)\n }\n \n fn pre_expansion_lint<'a>(\n@@ -181,8 +181,8 @@ fn configure_and_expand(mut krate: ast::Crate, resolver: &mut Resolver<'_, '_>)\n     pre_expansion_lint(sess, lint_store, tcx.registered_tools(()), &krate, crate_name);\n     rustc_builtin_macros::register_builtin_macros(resolver);\n \n-    krate = sess.time(\"crate_injection\", || {\n-        rustc_builtin_macros::standard_library_imports::inject(krate, resolver, sess)\n+    sess.time(\"crate_injection\", || {\n+        rustc_builtin_macros::standard_library_imports::inject(&mut krate, resolver, sess)\n     });\n \n     util::check_attr_crate_type(sess, &krate.attrs, &mut resolver.lint_buffer());\n@@ -263,7 +263,7 @@ fn configure_and_expand(mut krate: ast::Crate, resolver: &mut Resolver<'_, '_>)\n     });\n \n     sess.time(\"maybe_building_test_harness\", || {\n-        rustc_builtin_macros::test_harness::inject(sess, resolver, &mut krate)\n+        rustc_builtin_macros::test_harness::inject(&mut krate, sess, resolver)\n     });\n \n     let has_proc_macro_decls = sess.time(\"AST_validation\", || {\n@@ -287,12 +287,12 @@ fn configure_and_expand(mut krate: ast::Crate, resolver: &mut Resolver<'_, '_>)\n         sess.emit_warning(errors::ProcMacroCratePanicAbort);\n     }\n \n-    krate = sess.time(\"maybe_create_a_macro_crate\", || {\n+    sess.time(\"maybe_create_a_macro_crate\", || {\n         let is_test_crate = sess.opts.test;\n         rustc_builtin_macros::proc_macro_harness::inject(\n+            &mut krate,\n             sess,\n             resolver,\n-            krate,\n             is_proc_macro_crate,\n             has_proc_macro_decls,\n             is_test_crate,"}, {"sha": "c618297bdc04d03a52d92e1266fbe42ce87edc9b", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cc33b769121abfb9b0e42b2195fe60f59864571/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc33b769121abfb9b0e42b2195fe60f59864571/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=6cc33b769121abfb9b0e42b2195fe60f59864571", "patch": "@@ -136,14 +136,14 @@ impl<'tcx> Queries<'tcx> {\n     pub fn register_plugins(&self) -> Result<QueryResult<'_, (ast::Crate, Lrc<LintStore>)>> {\n         self.register_plugins.compute(|| {\n             let crate_name = *self.crate_name()?.borrow();\n-            let krate = self.parse()?.steal();\n+            let mut krate = self.parse()?.steal();\n \n             let empty: &(dyn Fn(&Session, &mut LintStore) + Sync + Send) = &|_, _| {};\n-            let (krate, lint_store) = passes::register_plugins(\n+            let lint_store = passes::register_plugins(\n                 self.session(),\n                 &*self.codegen_backend().metadata_loader(),\n                 self.compiler.register_lints.as_deref().unwrap_or_else(|| empty),\n-                krate,\n+                &mut krate,\n                 crate_name,\n             )?;\n "}, {"sha": "27e5cb9f0d014fbb4b1146bb24d9e12f57262730", "filename": "compiler/rustc_plugin_impl/src/load.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cc33b769121abfb9b0e42b2195fe60f59864571/compiler%2Frustc_plugin_impl%2Fsrc%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc33b769121abfb9b0e42b2195fe60f59864571/compiler%2Frustc_plugin_impl%2Fsrc%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_plugin_impl%2Fsrc%2Fload.rs?ref=6cc33b769121abfb9b0e42b2195fe60f59864571", "patch": "@@ -3,7 +3,7 @@\n use crate::errors::{LoadPluginError, MalformedPluginAttribute};\n use crate::Registry;\n use libloading::Library;\n-use rustc_ast::Crate;\n+use rustc_ast::Attribute;\n use rustc_metadata::locator;\n use rustc_session::cstore::MetadataLoader;\n use rustc_session::Session;\n@@ -20,11 +20,11 @@ type PluginRegistrarFn = fn(&mut Registry<'_>);\n pub fn load_plugins(\n     sess: &Session,\n     metadata_loader: &dyn MetadataLoader,\n-    krate: &Crate,\n+    attrs: &[Attribute],\n ) -> Vec<PluginRegistrarFn> {\n     let mut plugins = Vec::new();\n \n-    for attr in &krate.attrs {\n+    for attr in attrs {\n         if !attr.has_name(sym::plugin) {\n             continue;\n         }"}]}