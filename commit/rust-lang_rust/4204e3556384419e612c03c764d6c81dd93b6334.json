{"sha": "4204e3556384419e612c03c764d6c81dd93b6334", "node_id": "C_kwDOAAsO6NoAKDQyMDRlMzU1NjM4NDQxOWU2MTJjMDNjNzY0ZDZjODFkZDkzYjYzMzQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-04-03T07:05:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-03T07:05:41Z"}, "message": "Merge #11879\n\n11879: Suggest infered type in auto complete r=HKalbasi a=HKalbasi\n\nfix #11855\r\n\r\nIt doesn't work for return types and consts (so their tests are failing) because I can't find their body node in the original file. (Are these original and fake file documented somewhere?)\r\n\r\nAlso it currently needs to type first character of the type (or manual ctrl+space) to open the auto complete panel, is it possible to open it automatically on typing `:` and `->`?\r\n\n\nCo-authored-by: hkalbasi <hamidrezakalbasi@protonmail.com>", "tree": {"sha": "9734b391f5ff7751a7bbca7075f3b920e68cc106", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9734b391f5ff7751a7bbca7075f3b920e68cc106"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4204e3556384419e612c03c764d6c81dd93b6334", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiSUdFCRBK7hj4Ov3rIwAA0sAIAEKFY1I+iXLkdC9Zhn/Ofy5t\nCSehAKyPeR94kYFqp2XQAxWN+OlDNjmqOHiRHJGBTCjL0ECnNAG1j3fBtvMoyRwd\n91Ap1zgji7lvmeCThukmge7NrMkHio5o06V8C05TCRDnF6mH0l8tsxlX0izXZPKn\nYLsEaTMjaZxdn7lngVAI0H0UymwmTddtaIf7fQw7NmK6pmIyDjoklxI5bBFtmoM4\ncYynnqh7I/09pMFsYhrMc8InSckkAhIb2fbj2RgEig9lAHUF37hqr3wvqrjhjspe\nBoF3Zu4JCeonZEseMsexW6ZkHjNL1zrHq0bF8YSfh/LeRPYqSJQuCG9pZnYUE8A=\n=2xW/\n-----END PGP SIGNATURE-----\n", "payload": "tree 9734b391f5ff7751a7bbca7075f3b920e68cc106\nparent ba9aed19c7e2fd95b337f27acddaae3c82bc8939\nparent 003a6b74e469713e99f23d8cff58af95c10b29e0\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1648969541 +0000\ncommitter GitHub <noreply@github.com> 1648969541 +0000\n\nMerge #11879\n\n11879: Suggest infered type in auto complete r=HKalbasi a=HKalbasi\n\nfix #11855\r\n\r\nIt doesn't work for return types and consts (so their tests are failing) because I can't find their body node in the original file. (Are these original and fake file documented somewhere?)\r\n\r\nAlso it currently needs to type first character of the type (or manual ctrl+space) to open the auto complete panel, is it possible to open it automatically on typing `:` and `->`?\r\n\n\nCo-authored-by: hkalbasi <hamidrezakalbasi@protonmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4204e3556384419e612c03c764d6c81dd93b6334", "html_url": "https://github.com/rust-lang/rust/commit/4204e3556384419e612c03c764d6c81dd93b6334", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4204e3556384419e612c03c764d6c81dd93b6334/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba9aed19c7e2fd95b337f27acddaae3c82bc8939", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba9aed19c7e2fd95b337f27acddaae3c82bc8939", "html_url": "https://github.com/rust-lang/rust/commit/ba9aed19c7e2fd95b337f27acddaae3c82bc8939"}, {"sha": "003a6b74e469713e99f23d8cff58af95c10b29e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/003a6b74e469713e99f23d8cff58af95c10b29e0", "html_url": "https://github.com/rust-lang/rust/commit/003a6b74e469713e99f23d8cff58af95c10b29e0"}], "stats": {"total": 326, "additions": 312, "deletions": 14}, "files": [{"sha": "b576815f877cb8b6cd8a2b198863f2a7ed667864", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4204e3556384419e612c03c764d6c81dd93b6334/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4204e3556384419e612c03c764d6c81dd93b6334/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=4204e3556384419e612c03c764d6c81dd93b6334", "patch": "@@ -302,9 +302,13 @@ impl<'a> Ctx<'a> {\n         let end_param = self.next_param_idx();\n         let params = IdxRange::new(start_param..end_param);\n \n-        let ret_type = match func.ret_type().and_then(|rt| rt.ty()) {\n-            Some(type_ref) => TypeRef::from_ast(&self.body_ctx, type_ref),\n-            _ => TypeRef::unit(),\n+        let ret_type = match func.ret_type() {\n+            Some(rt) => match rt.ty() {\n+                Some(type_ref) => TypeRef::from_ast(&self.body_ctx, type_ref),\n+                None if rt.thin_arrow_token().is_some() => TypeRef::Error,\n+                None => TypeRef::unit(),\n+            },\n+            None => TypeRef::unit(),\n         };\n \n         let (ret_type, async_ret_type) = if func.async_token().is_some() {"}, {"sha": "7dbc5113954e51bbec1222ac008a7ac6a7e30ffd", "filename": "crates/ide_completion/src/completions.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4204e3556384419e612c03c764d6c81dd93b6334/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4204e3556384419e612c03c764d6c81dd93b6334/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions.rs?ref=4204e3556384419e612c03c764d6c81dd93b6334", "patch": "@@ -21,19 +21,21 @@ pub(crate) mod vis;\n \n use std::iter;\n \n-use hir::{db::HirDatabase, known, ScopeDef};\n+use hir::{db::HirDatabase, known, HirDisplay, ScopeDef};\n use ide_db::SymbolKind;\n \n use crate::{\n     context::Visible,\n     item::Builder,\n+    patterns::{ImmediateLocation, TypeAnnotation},\n     render::{\n         const_::render_const,\n         function::{render_fn, render_method},\n         literal::{render_struct_literal, render_variant_lit},\n         macro_::render_macro,\n         pattern::{render_struct_pat, render_variant_pat},\n         render_field, render_resolution, render_resolution_simple, render_tuple_field,\n+        render_type_inference,\n         type_alias::{render_type_alias, render_type_alias_with_eq},\n         union_literal::render_union_literal,\n         RenderContext,\n@@ -374,3 +376,19 @@ fn enum_variants_with_paths(\n         }\n     }\n }\n+\n+pub(crate) fn inferred_type(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n+    use TypeAnnotation::*;\n+    let pat = match &ctx.completion_location {\n+        Some(ImmediateLocation::TypeAnnotation(t)) => t,\n+        _ => return None,\n+    };\n+    let x = match pat {\n+        Let(pat) | FnParam(pat) => ctx.sema.type_of_pat(pat.as_ref()?),\n+        Const(exp) | RetType(exp) => ctx.sema.type_of_expr(exp.as_ref()?),\n+    }?\n+    .adjusted();\n+    let ty_string = x.display_source_code(ctx.db, ctx.module.into()).ok()?;\n+    acc.add(render_type_inference(ty_string, ctx));\n+    None\n+}"}, {"sha": "8c73bcaab2d965b2639ffab2f3fdbdea16bba6d8", "filename": "crates/ide_completion/src/item.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4204e3556384419e612c03c764d6c81dd93b6334/crates%2Fide_completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4204e3556384419e612c03c764d6c81dd93b6334/crates%2Fide_completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fitem.rs?ref=4204e3556384419e612c03c764d6c81dd93b6334", "patch": "@@ -138,6 +138,8 @@ pub struct CompletionRelevance {\n     pub is_private_editable: bool,\n     /// Set for postfix snippet item completions\n     pub postfix_match: Option<CompletionRelevancePostfixMatch>,\n+    /// This is setted for type inference results\n+    pub is_definite: bool,\n }\n \n #[derive(Debug, Clone, Copy, Eq, PartialEq)]\n@@ -198,6 +200,7 @@ impl CompletionRelevance {\n             is_op_method,\n             is_private_editable,\n             postfix_match,\n+            is_definite,\n         } = self;\n \n         // lower rank private things\n@@ -225,7 +228,9 @@ impl CompletionRelevance {\n         if is_local {\n             score += 1;\n         }\n-\n+        if is_definite {\n+            score += 10;\n+        }\n         score\n     }\n \n@@ -243,6 +248,7 @@ pub enum CompletionItemKind {\n     SymbolKind(SymbolKind),\n     Binding,\n     BuiltinType,\n+    InferredType,\n     Keyword,\n     Method,\n     Snippet,\n@@ -284,6 +290,7 @@ impl CompletionItemKind {\n             },\n             CompletionItemKind::Binding => \"bn\",\n             CompletionItemKind::BuiltinType => \"bt\",\n+            CompletionItemKind::InferredType => \"it\",\n             CompletionItemKind::Keyword => \"kw\",\n             CompletionItemKind::Method => \"me\",\n             CompletionItemKind::Snippet => \"sn\","}, {"sha": "6924ba1db6d8351182e816fc78d5a6fc343787ab", "filename": "crates/ide_completion/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4204e3556384419e612c03c764d6c81dd93b6334/crates%2Fide_completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4204e3556384419e612c03c764d6c81dd93b6334/crates%2Fide_completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Flib.rs?ref=4204e3556384419e612c03c764d6c81dd93b6334", "patch": "@@ -155,6 +155,7 @@ pub fn completions(\n     completions::flyimport::import_on_the_fly(&mut acc, &ctx);\n     completions::fn_param::complete_fn_param(&mut acc, &ctx);\n     completions::format_string::format_string(&mut acc, &ctx);\n+    completions::inferred_type(&mut acc, &ctx);\n     completions::keyword::complete_expr_keyword(&mut acc, &ctx);\n     completions::lifetime::complete_label(&mut acc, &ctx);\n     completions::lifetime::complete_lifetime(&mut acc, &ctx);"}, {"sha": "5fd9602b46f0b19814e23053b3129aed6c9f8aa7", "filename": "crates/ide_completion/src/patterns.rs", "status": "modified", "additions": 66, "deletions": 9, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/4204e3556384419e612c03c764d6c81dd93b6334/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4204e3556384419e612c03c764d6c81dd93b6334/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fpatterns.rs?ref=4204e3556384419e612c03c764d6c81dd93b6334", "patch": "@@ -8,7 +8,7 @@ use hir::Semantics;\n use ide_db::RootDatabase;\n use syntax::{\n     algo::non_trivia_sibling,\n-    ast::{self, HasArgList, HasLoopBody},\n+    ast::{self, HasArgList, HasLoopBody, HasName},\n     match_ast, AstNode, Direction, SyntaxElement,\n     SyntaxKind::*,\n     SyntaxNode, SyntaxToken, TextRange, TextSize,\n@@ -27,6 +27,14 @@ pub(crate) enum ImmediatePrevSibling {\n     Attribute,\n }\n \n+#[derive(Clone, Debug, PartialEq, Eq)]\n+pub(crate) enum TypeAnnotation {\n+    Let(Option<ast::Pat>),\n+    FnParam(Option<ast::Pat>),\n+    RetType(Option<ast::Expr>),\n+    Const(Option<ast::Expr>),\n+}\n+\n /// Direct parent \"thing\" of what we are currently completing.\n ///\n /// This may contain nodes of the fake file as well as the original, comments on the variants specify\n@@ -44,6 +52,8 @@ pub(crate) enum ImmediateLocation {\n     ItemList,\n     TypeBound,\n     Variant,\n+    /// Original file ast node\n+    TypeAnnotation(TypeAnnotation),\n     /// Fake file ast node\n     ModDeclaration(ast::Module),\n     /// Original file ast node\n@@ -235,10 +245,7 @@ pub(crate) fn determine_location(\n                 }\n             },\n             ast::FieldExpr(it) => {\n-                let receiver = it\n-                    .expr()\n-                    .map(|e| e.syntax().text_range())\n-                    .and_then(|r| find_node_with_range(original_file, r));\n+                let receiver = find_in_original_file(it.expr(), original_file);\n                 let receiver_is_ambiguous_float_literal = if let Some(ast::Expr::Literal(l)) = &receiver {\n                     match l.kind() {\n                         ast::LiteralKind::FloatNumber { .. } => l.token().text().ends_with('.'),\n@@ -253,15 +260,65 @@ pub(crate) fn determine_location(\n                 }\n             },\n             ast::MethodCallExpr(it) => ImmediateLocation::MethodCall {\n-                receiver: it\n-                    .receiver()\n-                    .map(|e| e.syntax().text_range())\n-                    .and_then(|r| find_node_with_range(original_file, r)),\n+                receiver: find_in_original_file(it.receiver(), original_file),\n                 has_parens: it.arg_list().map_or(false, |it| it.l_paren_token().is_some())\n             },\n+            ast::Const(it) => {\n+                if !it.ty().map_or(false, |x| x.syntax().text_range().contains(offset)) {\n+                    return None;\n+                }\n+                let name = find_in_original_file(it.name(), original_file)?;\n+                let original = ast::Const::cast(name.syntax().parent()?)?;\n+                ImmediateLocation::TypeAnnotation(TypeAnnotation::Const(original.body()))\n+            },\n+            ast::RetType(it) => {\n+                if it.thin_arrow_token().is_none() {\n+                    return None;\n+                }\n+                if !it.ty().map_or(false, |x| x.syntax().text_range().contains(offset)) {\n+                    return None;\n+                }\n+                let parent = match ast::Fn::cast(parent.parent()?) {\n+                    Some(x) => x.param_list(),\n+                    None => ast::ClosureExpr::cast(parent.parent()?)?.param_list(),\n+                };\n+                let parent = find_in_original_file(parent, original_file)?.syntax().parent()?;\n+                ImmediateLocation::TypeAnnotation(TypeAnnotation::RetType(match_ast! {\n+                    match parent {\n+                        ast::ClosureExpr(it) => {\n+                            it.body()\n+                        },\n+                        ast::Fn(it) => {\n+                            it.body().map(ast::Expr::BlockExpr)\n+                        },\n+                        _ => return None,\n+                    }\n+                }))\n+            },\n+            ast::Param(it) => {\n+                if it.colon_token().is_none() {\n+                    return None;\n+                }\n+                if !it.ty().map_or(false, |x| x.syntax().text_range().contains(offset)) {\n+                    return None;\n+                }\n+                ImmediateLocation::TypeAnnotation(TypeAnnotation::FnParam(find_in_original_file(it.pat(), original_file)))\n+            },\n+            ast::LetStmt(it) => {\n+                if it.colon_token().is_none() {\n+                    return None;\n+                }\n+                if !it.ty().map_or(false, |x| x.syntax().text_range().contains(offset)) {\n+                    return None;\n+                }\n+                ImmediateLocation::TypeAnnotation(TypeAnnotation::Let(find_in_original_file(it.pat(), original_file)))\n+            },\n             _ => return None,\n         }\n     };\n+    fn find_in_original_file<N: AstNode>(x: Option<N>, original_file: &SyntaxNode) -> Option<N> {\n+        x.map(|e| e.syntax().text_range()).and_then(|r| find_node_with_range(original_file, r))\n+    }\n     Some(res)\n }\n "}, {"sha": "65375494569acd61f522d0786a952fb30377c4d1", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4204e3556384419e612c03c764d6c81dd93b6334/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4204e3556384419e612c03c764d6c81dd93b6334/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=4204e3556384419e612c03c764d6c81dd93b6334", "patch": "@@ -170,6 +170,13 @@ pub(crate) fn render_resolution_with_import(\n     Some(render_resolution_(ctx, local_name, Some(import_edit), resolution))\n }\n \n+pub(crate) fn render_type_inference(ty_string: String, ctx: &CompletionContext) -> CompletionItem {\n+    let mut builder =\n+        CompletionItem::new(CompletionItemKind::InferredType, ctx.source_range(), ty_string);\n+    builder.set_relevance(CompletionRelevance { is_definite: true, ..Default::default() });\n+    builder.build()\n+}\n+\n fn render_resolution_(\n     ctx: RenderContext<'_>,\n     local_name: hir::Name,\n@@ -620,6 +627,7 @@ fn main() { let _: m::Spam = S$0 }\n                             is_op_method: false,\n                             is_private_editable: false,\n                             postfix_match: None,\n+                            is_definite: false,\n                         },\n                     },\n                     CompletionItem {\n@@ -641,6 +649,7 @@ fn main() { let _: m::Spam = S$0 }\n                             is_op_method: false,\n                             is_private_editable: false,\n                             postfix_match: None,\n+                            is_definite: false,\n                         },\n                     },\n                 ]\n@@ -728,6 +737,7 @@ fn foo() { A { the$0 } }\n                             is_op_method: false,\n                             is_private_editable: false,\n                             postfix_match: None,\n+                            is_definite: false,\n                         },\n                     },\n                 ]"}, {"sha": "e3ffb92f786d75cc752bfdf2eac05447a77f9437", "filename": "crates/ide_completion/src/tests/type_pos.rs", "status": "modified", "additions": 200, "deletions": 0, "changes": 200, "blob_url": "https://github.com/rust-lang/rust/blob/4204e3556384419e612c03c764d6c81dd93b6334/crates%2Fide_completion%2Fsrc%2Ftests%2Ftype_pos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4204e3556384419e612c03c764d6c81dd93b6334/crates%2Fide_completion%2Fsrc%2Ftests%2Ftype_pos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Ftype_pos.rs?ref=4204e3556384419e612c03c764d6c81dd93b6334", "patch": "@@ -89,6 +89,206 @@ fn x<'lt, T, const C: usize>() -> $0\n     );\n }\n \n+#[test]\n+fn inferred_type_const() {\n+    check(\n+        r#\"\n+struct Foo<T>(T);\n+const FOO: $0 = Foo(2);\n+\"#,\n+        expect![[r#\"\n+            it Foo<i32>\n+            kw self\n+            kw super\n+            kw crate\n+            tt Trait\n+            en Enum\n+            st Record\n+            st Tuple\n+            md module\n+            st Foo<\u2026>\n+            st Unit\n+            ma makro!(\u2026) macro_rules! makro\n+            un Union\n+            bt u32\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn inferred_type_closure_param() {\n+    check(\n+        r#\"\n+fn f1(f: fn(i32) -> i32) {}\n+fn f2() {\n+    f1(|x: $0);\n+}\n+\"#,\n+        expect![[r#\"\n+            it i32\n+            kw self\n+            kw super\n+            kw crate\n+            tt Trait\n+            en Enum\n+            st Record\n+            st Tuple\n+            md module\n+            st Unit\n+            ma makro!(\u2026) macro_rules! makro\n+            un Union\n+            bt u32\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn inferred_type_closure_return() {\n+    check(\n+        r#\"\n+fn f1(f: fn(u64) -> u64) {}\n+fn f2() {\n+    f1(|x| -> $0 {\n+        x + 5\n+    });\n+}\n+\"#,\n+        expect![[r#\"\n+            it u64\n+            kw self\n+            kw super\n+            kw crate\n+            tt Trait\n+            en Enum\n+            st Record\n+            st Tuple\n+            md module\n+            st Unit\n+            ma makro!(\u2026) macro_rules! makro\n+            un Union\n+            bt u32\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn inferred_type_fn_return() {\n+    check(\n+        r#\"\n+fn f2(x: u64) -> $0 {\n+    x + 5\n+}\n+\"#,\n+        expect![[r#\"\n+            it u64\n+            kw self\n+            kw super\n+            kw crate\n+            tt Trait\n+            en Enum\n+            st Record\n+            st Tuple\n+            md module\n+            st Unit\n+            ma makro!(\u2026) macro_rules! makro\n+            un Union\n+            bt u32\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn inferred_type_fn_param() {\n+    check(\n+        r#\"\n+fn f1(x: i32) {}\n+fn f2(x: $0) {\n+    f1(x);\n+}\n+\"#,\n+        expect![[r#\"\n+            it i32\n+            kw self\n+            kw super\n+            kw crate\n+            tt Trait\n+            en Enum\n+            st Record\n+            st Tuple\n+            md module\n+            st Unit\n+            ma makro!(\u2026) macro_rules! makro\n+            un Union\n+            bt u32\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn inferred_type_not_in_the_scope() {\n+    check(\n+        r#\"\n+mod a {\n+    pub struct Foo<T>(T);\n+    pub fn x() -> Foo<Foo<i32>> {\n+        Foo(Foo(2))\n+    }\n+}\n+fn foo<'lt, T, const C: usize>() {\n+    let local = ();\n+    let foo: $0 = a::x();\n+}\n+\"#,\n+        expect![[r#\"\n+            it a::Foo<a::Foo<i32>>\n+            kw self\n+            kw super\n+            kw crate\n+            tp T\n+            tt Trait\n+            en Enum\n+            st Record\n+            st Tuple\n+            md module\n+            st Unit\n+            ma makro!(\u2026)           macro_rules! makro\n+            un Union\n+            md a\n+            bt u32\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn inferred_type_let() {\n+    check(\n+        r#\"\n+struct Foo<T>(T);\n+fn foo<'lt, T, const C: usize>() {\n+    let local = ();\n+    let foo: $0 = Foo(2);\n+}\n+\"#,\n+        expect![[r#\"\n+            it Foo<i32>\n+            kw self\n+            kw super\n+            kw crate\n+            tp T\n+            tt Trait\n+            en Enum\n+            st Record\n+            st Tuple\n+            md module\n+            st Foo<\u2026>\n+            st Unit\n+            ma makro!(\u2026) macro_rules! makro\n+            un Union\n+            bt u32\n+        \"#]],\n+    );\n+}\n+\n #[test]\n fn body_type_pos() {\n     check("}, {"sha": "e52505d8a176a3f88d37c14eed17235451540c74", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4204e3556384419e612c03c764d6c81dd93b6334/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4204e3556384419e612c03c764d6c81dd93b6334/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=4204e3556384419e612c03c764d6c81dd93b6334", "patch": "@@ -107,6 +107,7 @@ pub(crate) fn completion_item_kind(\n     match completion_item_kind {\n         CompletionItemKind::Binding => lsp_types::CompletionItemKind::VARIABLE,\n         CompletionItemKind::BuiltinType => lsp_types::CompletionItemKind::STRUCT,\n+        CompletionItemKind::InferredType => lsp_types::CompletionItemKind::SNIPPET,\n         CompletionItemKind::Keyword => lsp_types::CompletionItemKind::KEYWORD,\n         CompletionItemKind::Method => lsp_types::CompletionItemKind::METHOD,\n         CompletionItemKind::Snippet => lsp_types::CompletionItemKind::SNIPPET,"}]}