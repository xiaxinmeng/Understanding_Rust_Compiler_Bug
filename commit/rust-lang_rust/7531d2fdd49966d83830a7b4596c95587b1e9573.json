{"sha": "7531d2fdd49966d83830a7b4596c95587b1e9573", "node_id": "C_kwDOAAsO6NoAKDc1MzFkMmZkZDQ5OTY2ZDgzODMwYTdiNDU5NmM5NTU4N2IxZTk1NzM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-18T06:07:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-18T06:07:58Z"}, "message": "Auto merge of #93021 - matthiaskrgr:rollup-o7z8zoe, r=matthiaskrgr\n\nRollup of 14 pull requests\n\nSuccessful merges:\n\n - #92629 (Pick themes on settings page, not every page)\n - #92640 (Fix ICEs related to `Deref<Target=[T; N]>` on newtypes)\n - #92701 (Add some more attribute validation)\n - #92803 (Hide mobile sidebar on some clicks)\n - #92830 (Rustdoc style cleanups)\n - #92866 (\"Does exists\" typos fix)\n - #92870 (add `rustc_diagnostic_item` attribute to `AtomicBool` type)\n - #92914 (htmldocck: Add support for `/text()` in ``@snapshot`)`\n - #92923 (Abstract the pretty printer's ringbuffer to be infinitely sized)\n - #92946 (Exclude llvm-libunwind from the self-contained set on s390x-musl targets)\n - #92947 (rustdoc: Use `intersperse` in a `visit_path` function)\n - #92997 (Add `~const` bound test for negative impls)\n - #93004 (update codegen test for LLVM 14)\n - #93016 (Stabilize vec_spare_capacity)\n\nFailed merges:\n\n - #92924 (Delete pretty printer tracing)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "859ea97c2e99f373de0ccbef4395b69aaf442475", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/859ea97c2e99f373de0ccbef4395b69aaf442475"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7531d2fdd49966d83830a7b4596c95587b1e9573", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7531d2fdd49966d83830a7b4596c95587b1e9573", "html_url": "https://github.com/rust-lang/rust/commit/7531d2fdd49966d83830a7b4596c95587b1e9573", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7531d2fdd49966d83830a7b4596c95587b1e9573/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4ff9031acdb3579f61a67ded2cf0faa00bea3fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4ff9031acdb3579f61a67ded2cf0faa00bea3fc", "html_url": "https://github.com/rust-lang/rust/commit/e4ff9031acdb3579f61a67ded2cf0faa00bea3fc"}, {"sha": "83b1a9452ac01291ccc45b226e3e7ac37e31a0f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/83b1a9452ac01291ccc45b226e3e7ac37e31a0f8", "html_url": "https://github.com/rust-lang/rust/commit/83b1a9452ac01291ccc45b226e3e7ac37e31a0f8"}], "stats": {"total": 997, "additions": 687, "deletions": 310}, "files": [{"sha": "ad9d15f1ce345811735a8c6944b5bf0121db95cd", "filename": "compiler/rustc_ast_pretty/src/pp.rs", "status": "modified", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -132,6 +132,9 @@\n //! methods called `Printer::scan_*`, and the 'PRINT' process is the\n //! method called `Printer::print`.\n \n+mod ring;\n+\n+use ring::RingBuffer;\n use std::borrow::Cow;\n use std::collections::VecDeque;\n use std::fmt;\n@@ -190,8 +193,7 @@ impl fmt::Display for Token {\n     }\n }\n \n-fn buf_str(buf: &[BufEntry], left: usize, right: usize, lim: usize) -> String {\n-    let n = buf.len();\n+fn buf_str(buf: &RingBuffer<BufEntry>, left: usize, right: usize, lim: usize) -> String {\n     let mut i = left;\n     let mut l = lim;\n     let mut s = String::from(\"[\");\n@@ -202,7 +204,6 @@ fn buf_str(buf: &[BufEntry], left: usize, right: usize, lim: usize) -> String {\n         }\n         s.push_str(&format!(\"{}={}\", buf[i].size, &buf[i].token));\n         i += 1;\n-        i %= n;\n     }\n     s.push(']');\n     s\n@@ -224,7 +225,6 @@ const SIZE_INFINITY: isize = 0xffff;\n \n pub struct Printer {\n     out: String,\n-    buf_max_len: usize,\n     /// Width of lines we're constrained to\n     margin: isize,\n     /// Number of spaces left on line\n@@ -234,7 +234,7 @@ pub struct Printer {\n     /// Index of right side of input stream\n     right: usize,\n     /// Ring-buffer of tokens and calculated sizes\n-    buf: Vec<BufEntry>,\n+    buf: RingBuffer<BufEntry>,\n     /// Running size of stream \"...left\"\n     left_total: isize,\n     /// Running size of stream \"...right\"\n@@ -267,19 +267,16 @@ impl Default for BufEntry {\n impl Printer {\n     pub fn new() -> Self {\n         let linewidth = 78;\n-        // Yes 55, it makes the ring buffers big enough to never fall behind.\n-        let n: usize = 55 * linewidth;\n         debug!(\"Printer::new {}\", linewidth);\n+        let mut buf = RingBuffer::new();\n+        buf.advance_right();\n         Printer {\n             out: String::new(),\n-            buf_max_len: n,\n             margin: linewidth as isize,\n             space: linewidth as isize,\n             left: 0,\n             right: 0,\n-            // Initialize a single entry; advance_right() will extend it on demand\n-            // up to `buf_max_len` elements.\n-            buf: vec![BufEntry::default()],\n+            buf,\n             left_total: 0,\n             right_total: 0,\n             scan_stack: VecDeque::new(),\n@@ -308,8 +305,8 @@ impl Printer {\n         if self.scan_stack.is_empty() {\n             self.left_total = 1;\n             self.right_total = 1;\n-            self.left = 0;\n-            self.right = 0;\n+            self.right = self.left;\n+            self.buf.truncate(1);\n         } else {\n             self.advance_right();\n         }\n@@ -332,8 +329,8 @@ impl Printer {\n         if self.scan_stack.is_empty() {\n             self.left_total = 1;\n             self.right_total = 1;\n-            self.left = 0;\n-            self.right = 0;\n+            self.right = self.left;\n+            self.buf.truncate(1);\n         } else {\n             self.advance_right();\n         }\n@@ -400,12 +397,7 @@ impl Printer {\n \n     fn advance_right(&mut self) {\n         self.right += 1;\n-        self.right %= self.buf_max_len;\n-        // Extend the buf if necessary.\n-        if self.right == self.buf.len() {\n-            self.buf.push(BufEntry::default());\n-        }\n-        assert_ne!(self.right, self.left);\n+        self.buf.advance_right();\n     }\n \n     fn advance_left(&mut self) {\n@@ -437,8 +429,8 @@ impl Printer {\n                 break;\n             }\n \n+            self.buf.advance_left();\n             self.left += 1;\n-            self.left %= self.buf_max_len;\n \n             left_size = self.buf[self.left].size;\n         }"}, {"sha": "7e4e353ef1f8c1e3eb89ac5d3bf75deb70a7b761", "filename": "compiler/rustc_ast_pretty/src/pp/ring.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp%2Fring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp%2Fring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp%2Fring.rs?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -0,0 +1,53 @@\n+use std::collections::VecDeque;\n+use std::ops::{Index, IndexMut};\n+\n+/// A view onto a finite range of an infinitely long sequence of T.\n+///\n+/// The Ts are indexed 0..infinity. A RingBuffer begins as a view of elements\n+/// 0..0 (i.e. nothing). The user of the RingBuffer advances its left and right\n+/// position independently, although only in the positive direction, and only\n+/// with left <= right at all times.\n+///\n+/// Holding a RingBuffer whose view is elements left..right gives the ability to\n+/// use Index and IndexMut to access elements i in the infinitely long queue for\n+/// which left <= i < right.\n+pub struct RingBuffer<T> {\n+    data: VecDeque<T>,\n+    // Abstract index of data[0] in the infinitely sized queue.\n+    offset: usize,\n+}\n+\n+impl<T> RingBuffer<T> {\n+    pub fn new() -> Self {\n+        RingBuffer { data: VecDeque::new(), offset: 0 }\n+    }\n+\n+    pub fn advance_right(&mut self)\n+    where\n+        T: Default,\n+    {\n+        self.data.push_back(T::default());\n+    }\n+\n+    pub fn advance_left(&mut self) {\n+        self.data.pop_front().unwrap();\n+        self.offset += 1;\n+    }\n+\n+    pub fn truncate(&mut self, len: usize) {\n+        self.data.truncate(len);\n+    }\n+}\n+\n+impl<T> Index<usize> for RingBuffer<T> {\n+    type Output = T;\n+    fn index(&self, index: usize) -> &Self::Output {\n+        &self.data[index.checked_sub(self.offset).unwrap()]\n+    }\n+}\n+\n+impl<T> IndexMut<usize> for RingBuffer<T> {\n+    fn index_mut(&mut self, index: usize) -> &mut Self::Output {\n+        &mut self.data[index.checked_sub(self.offset).unwrap()]\n+    }\n+}"}, {"sha": "723cc06864a90fb4f8a210b7036b9694c92d29bb", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -352,15 +352,15 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n \n     // Runtime\n     ungated!(\n-        windows_subsystem, Normal,\n+        windows_subsystem, CrateLevel,\n         template!(NameValueStr: \"windows|console\"), FutureWarnFollowing\n     ),\n     ungated!(panic_handler, Normal, template!(Word), WarnFollowing), // RFC 2070\n \n     // Code generation:\n     ungated!(inline, Normal, template!(Word, List: \"always|never\"), FutureWarnFollowing),\n     ungated!(cold, Normal, template!(Word), WarnFollowing),\n-    ungated!(no_builtins, Normal, template!(Word), WarnFollowing),\n+    ungated!(no_builtins, CrateLevel, template!(Word), WarnFollowing),\n     ungated!(target_feature, Normal, template!(List: r#\"enable = \"name\"\"#), DuplicatesOk),\n     ungated!(track_caller, Normal, template!(Word), WarnFollowing),\n     gated!("}, {"sha": "9d40b3cba2952eb48d96b3cb4552bd0f8cb27824", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -425,7 +425,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n                         // FIXME: perf problem described in #55921.\n                         ui = ty::UniverseIndex::ROOT;\n                         return self.canonicalize_const_var(\n-                            CanonicalVarInfo { kind: CanonicalVarKind::Const(ui) },\n+                            CanonicalVarInfo { kind: CanonicalVarKind::Const(ui, ct.ty) },\n                             ct,\n                         );\n                     }"}, {"sha": "2d2edb07d9eda871bce69855d3ba3cf8b7446c0a", "filename": "compiler/rustc_infer/src/infer/canonical/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -137,12 +137,9 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n                 self.tcx.mk_region(ty::RePlaceholder(placeholder_mapped)).into()\n             }\n \n-            CanonicalVarKind::Const(ui) => self\n+            CanonicalVarKind::Const(ui, ty) => self\n                 .next_const_var_in_universe(\n-                    self.next_ty_var_in_universe(\n-                        TypeVariableOrigin { kind: TypeVariableOriginKind::MiscVariable, span },\n-                        universe_map(ui),\n-                    ),\n+                    ty,\n                     ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },\n                     universe_map(ui),\n                 )"}, {"sha": "28217aeab13ee51d91d752fcfc5802b5d167cc49", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -23,7 +23,7 @@\n \n use crate::infer::MemberConstraint;\n use crate::ty::subst::GenericArg;\n-use crate::ty::{self, BoundVar, List, Region, TyCtxt};\n+use crate::ty::{self, BoundVar, List, Region, Ty, TyCtxt};\n use rustc_index::vec::IndexVec;\n use rustc_macros::HashStable;\n use smallvec::SmallVec;\n@@ -104,7 +104,7 @@ impl<'tcx> CanonicalVarInfo<'tcx> {\n             CanonicalVarKind::PlaceholderTy(_) => false,\n             CanonicalVarKind::Region(_) => true,\n             CanonicalVarKind::PlaceholderRegion(..) => false,\n-            CanonicalVarKind::Const(_) => true,\n+            CanonicalVarKind::Const(..) => true,\n             CanonicalVarKind::PlaceholderConst(_) => false,\n         }\n     }\n@@ -130,7 +130,7 @@ pub enum CanonicalVarKind<'tcx> {\n     PlaceholderRegion(ty::PlaceholderRegion),\n \n     /// Some kind of const inference variable.\n-    Const(ty::UniverseIndex),\n+    Const(ty::UniverseIndex, Ty<'tcx>),\n \n     /// A \"placeholder\" that represents \"any const\".\n     PlaceholderConst(ty::PlaceholderConst<'tcx>),\n@@ -147,7 +147,7 @@ impl<'tcx> CanonicalVarKind<'tcx> {\n             CanonicalVarKind::PlaceholderTy(placeholder) => placeholder.universe,\n             CanonicalVarKind::Region(ui) => ui,\n             CanonicalVarKind::PlaceholderRegion(placeholder) => placeholder.universe,\n-            CanonicalVarKind::Const(ui) => ui,\n+            CanonicalVarKind::Const(ui, _) => ui,\n             CanonicalVarKind::PlaceholderConst(placeholder) => placeholder.universe,\n         }\n     }"}, {"sha": "c3d5bae32e6818a975ba3cdf758ec883fb58ba7f", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -126,6 +126,7 @@ impl CheckAttrVisitor<'_> {\n             // lint-only checks\n             match attr.name_or_empty() {\n                 sym::cold => self.check_cold(hir_id, attr, span, target),\n+                sym::link => self.check_link(hir_id, attr, span, target),\n                 sym::link_name => self.check_link_name(hir_id, attr, span, target),\n                 sym::link_section => self.check_link_section(hir_id, attr, span, target),\n                 sym::no_mangle => self.check_no_mangle(hir_id, attr, span, target),\n@@ -1157,6 +1158,26 @@ impl CheckAttrVisitor<'_> {\n         }\n     }\n \n+    /// Checks if `#[link]` is applied to an item other than a foreign module.\n+    fn check_link(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) {\n+        match target {\n+            Target::ForeignMod => {}\n+            _ => {\n+                self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {\n+                    let mut diag = lint.build(\"attribute should be applied to an `extern` block\");\n+                    diag.warn(\n+                        \"this was previously accepted by the compiler but is \\\n+                         being phased out; it will become a hard error in \\\n+                         a future release!\",\n+                    );\n+\n+                    diag.span_label(*span, \"not an `extern` block\");\n+                    diag.emit();\n+                });\n+            }\n+        }\n+    }\n+\n     /// Checks if `#[link_name]` is applied to an item other than a foreign function or static.\n     fn check_link_name(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) {\n         match target {"}, {"sha": "09bfdabf4737357871a7fad22d2bfdd7f6f8577b", "filename": "compiler/rustc_traits/src/chalk/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -85,7 +85,7 @@ crate fn evaluate_goal<'tcx>(\n                         chalk_ir::VariableKind::Lifetime,\n                         chalk_ir::UniverseIndex { counter: ui.index() },\n                     ),\n-                    CanonicalVarKind::Const(_ui) => unimplemented!(),\n+                    CanonicalVarKind::Const(_ui, _ty) => unimplemented!(),\n                     CanonicalVarKind::PlaceholderConst(_pc) => unimplemented!(),\n                 }),\n             ),\n@@ -127,9 +127,9 @@ crate fn evaluate_goal<'tcx>(\n                     chalk_ir::VariableKind::Lifetime => CanonicalVarKind::Region(\n                         ty::UniverseIndex::from_usize(var.skip_kind().counter),\n                     ),\n-                    chalk_ir::VariableKind::Const(_) => CanonicalVarKind::Const(\n-                        ty::UniverseIndex::from_usize(var.skip_kind().counter),\n-                    ),\n+                    // FIXME(compiler-errors): We don't currently have a way of turning\n+                    // a Chalk ty back into a rustc ty, right?\n+                    chalk_ir::VariableKind::Const(_) => todo!(),\n                 };\n                 CanonicalVarInfo { kind }\n             })"}, {"sha": "27c39934ba8e9f66448ff6a3e81adc075e149dff", "filename": "compiler/rustc_typeck/src/check/method/confirm.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -149,7 +149,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         // time writing the results into the various typeck results.\n         let mut autoderef =\n             self.autoderef_overloaded_span(self.span, unadjusted_self_ty, self.call_expr.span);\n-        let (_, n) = match autoderef.nth(pick.autoderefs) {\n+        let (ty, n) = match autoderef.nth(pick.autoderefs) {\n             Some(n) => n,\n             None => {\n                 return self.tcx.ty_error_with_message(\n@@ -161,14 +161,15 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         assert_eq!(n, pick.autoderefs);\n \n         let mut adjustments = self.adjust_steps(&autoderef);\n+        let mut target = self.structurally_resolved_type(autoderef.span(), ty);\n \n-        let mut target =\n-            self.structurally_resolved_type(autoderef.span(), autoderef.final_ty(false));\n-\n-        match &pick.autoref_or_ptr_adjustment {\n+        match pick.autoref_or_ptr_adjustment {\n             Some(probe::AutorefOrPtrAdjustment::Autoref { mutbl, unsize }) => {\n                 let region = self.next_region_var(infer::Autoref(self.span));\n-                target = self.tcx.mk_ref(region, ty::TypeAndMut { mutbl: *mutbl, ty: target });\n+                // Type we're wrapping in a reference, used later for unsizing\n+                let base_ty = target;\n+\n+                target = self.tcx.mk_ref(region, ty::TypeAndMut { mutbl, ty: target });\n                 let mutbl = match mutbl {\n                     hir::Mutability::Not => AutoBorrowMutability::Not,\n                     hir::Mutability::Mut => AutoBorrowMutability::Mut {\n@@ -182,10 +183,18 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n                     target,\n                 });\n \n-                if let Some(unsize_target) = unsize {\n+                if unsize {\n+                    let unsized_ty = if let ty::Array(elem_ty, _) = base_ty.kind() {\n+                        self.tcx.mk_slice(elem_ty)\n+                    } else {\n+                        bug!(\n+                            \"AutorefOrPtrAdjustment's unsize flag should only be set for array ty, found {}\",\n+                            base_ty\n+                        )\n+                    };\n                     target = self\n                         .tcx\n-                        .mk_ref(region, ty::TypeAndMut { mutbl: mutbl.into(), ty: unsize_target });\n+                        .mk_ref(region, ty::TypeAndMut { mutbl: mutbl.into(), ty: unsized_ty });\n                     adjustments\n                         .push(Adjustment { kind: Adjust::Pointer(PointerCast::Unsize), target });\n                 }"}, {"sha": "86f3568d2e37aed310c10dbd2fb2e512e491bfd3", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -167,26 +167,26 @@ enum ProbeResult {\n /// T`, we could convert it to `*const T`, then autoref to `&*const T`. However, currently we do\n /// (at most) one of these. Either the receiver has type `T` and we convert it to `&T` (or with\n /// `mut`), or it has type `*mut T` and we convert it to `*const T`.\n-#[derive(Debug, PartialEq, Clone)]\n-pub enum AutorefOrPtrAdjustment<'tcx> {\n+#[derive(Debug, PartialEq, Copy, Clone)]\n+pub enum AutorefOrPtrAdjustment {\n     /// Receiver has type `T`, add `&` or `&mut` (it `T` is `mut`), and maybe also \"unsize\" it.\n     /// Unsizing is used to convert a `[T; N]` to `[T]`, which only makes sense when autorefing.\n     Autoref {\n         mutbl: hir::Mutability,\n \n-        /// Indicates that the source expression should be \"unsized\" to a target type. This should\n-        /// probably eventually go away in favor of just coercing method receivers.\n-        unsize: Option<Ty<'tcx>>,\n+        /// Indicates that the source expression should be \"unsized\" to a target type.\n+        /// This is special-cased for just arrays unsizing to slices.\n+        unsize: bool,\n     },\n     /// Receiver has type `*mut T`, convert to `*const T`\n     ToConstPtr,\n }\n \n-impl<'tcx> AutorefOrPtrAdjustment<'tcx> {\n-    fn get_unsize(&self) -> Option<Ty<'tcx>> {\n+impl AutorefOrPtrAdjustment {\n+    fn get_unsize(&self) -> bool {\n         match self {\n             AutorefOrPtrAdjustment::Autoref { mutbl: _, unsize } => *unsize,\n-            AutorefOrPtrAdjustment::ToConstPtr => None,\n+            AutorefOrPtrAdjustment::ToConstPtr => false,\n         }\n     }\n }\n@@ -204,7 +204,7 @@ pub struct Pick<'tcx> {\n \n     /// Indicates that we want to add an autoref (and maybe also unsize it), or if the receiver is\n     /// `*mut T`, convert it to `*const T`.\n-    pub autoref_or_ptr_adjustment: Option<AutorefOrPtrAdjustment<'tcx>>,\n+    pub autoref_or_ptr_adjustment: Option<AutorefOrPtrAdjustment>,\n     pub self_ty: Ty<'tcx>,\n }\n \n@@ -1202,7 +1202,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                     pick.autoderefs += 1;\n                     pick.autoref_or_ptr_adjustment = Some(AutorefOrPtrAdjustment::Autoref {\n                         mutbl,\n-                        unsize: pick.autoref_or_ptr_adjustment.and_then(|a| a.get_unsize()),\n+                        unsize: pick.autoref_or_ptr_adjustment.map_or(false, |a| a.get_unsize()),\n                     })\n                 }\n \n@@ -1227,10 +1227,8 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         self.pick_method(autoref_ty, unstable_candidates).map(|r| {\n             r.map(|mut pick| {\n                 pick.autoderefs = step.autoderefs;\n-                pick.autoref_or_ptr_adjustment = Some(AutorefOrPtrAdjustment::Autoref {\n-                    mutbl,\n-                    unsize: step.unsize.then_some(self_ty),\n-                });\n+                pick.autoref_or_ptr_adjustment =\n+                    Some(AutorefOrPtrAdjustment::Autoref { mutbl, unsize: step.unsize });\n                 pick\n             })\n         })"}, {"sha": "bd3262b51d4807b1363a88b3b66d7519b050ea90", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -2051,8 +2051,6 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(vec_spare_capacity)]\n-    ///\n     /// // Allocate vector big enough for 10 elements.\n     /// let mut v = Vec::with_capacity(10);\n     ///\n@@ -2069,7 +2067,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     ///\n     /// assert_eq!(&v, &[0, 1, 2]);\n     /// ```\n-    #[unstable(feature = \"vec_spare_capacity\", issue = \"75017\")]\n+    #[stable(feature = \"vec_spare_capacity\", since = \"1.60.0\")]\n     #[inline]\n     pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {\n         // Note:"}, {"sha": "dcf51e3142a617924590b0f19b8739439c7fe10b", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -31,7 +31,6 @@\n #![feature(iter_advance_by)]\n #![feature(slice_group_by)]\n #![feature(slice_partition_dedup)]\n-#![feature(vec_spare_capacity)]\n #![feature(string_remove_matches)]\n #![feature(const_btree_new)]\n #![feature(const_default_impls)]"}, {"sha": "56bdc6beb902d82363cdf1c3f2aa114f7b8f7994", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -1038,7 +1038,7 @@ impl<T> MaybeUninit<T> {\n     /// ```\n     ///\n     /// ```\n-    /// #![feature(maybe_uninit_write_slice, vec_spare_capacity)]\n+    /// #![feature(maybe_uninit_write_slice)]\n     /// use std::mem::MaybeUninit;\n     ///\n     /// let mut vec = Vec::with_capacity(32);\n@@ -1098,7 +1098,7 @@ impl<T> MaybeUninit<T> {\n     /// ```\n     ///\n     /// ```\n-    /// #![feature(maybe_uninit_write_slice, vec_spare_capacity)]\n+    /// #![feature(maybe_uninit_write_slice)]\n     /// use std::mem::MaybeUninit;\n     ///\n     /// let mut vec = Vec::with_capacity(32);"}, {"sha": "792016902aebe925b42f2e11bd7682f9c59263c3", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -131,6 +131,7 @@ use crate::hint::spin_loop;\n /// loads and stores of `u8`.\n #[cfg(target_has_atomic_load_store = \"8\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_diagnostic_item = \"AtomicBool\"]\n #[repr(C, align(1))]\n pub struct AtomicBool {\n     v: UnsafeCell<u8>,"}, {"sha": "5537ec18d34a93afe5206397d1f8d54fd747691d", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -1050,7 +1050,7 @@ impl Metadata {\n     ///\n     /// fn main() -> std::io::Result<()> {\n     ///     let link_path = Path::new(\"link\");\n-    ///     symlink(\"/origin_does_not_exists/\", link_path)?;\n+    ///     symlink(\"/origin_does_not_exist/\", link_path)?;\n     ///\n     ///     let metadata = fs::symlink_metadata(link_path)?;\n     ///"}, {"sha": "17fe0011569b0a586741f51b716de90433ccd3ae", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -340,7 +340,6 @@\n #![feature(unboxed_closures)]\n #![feature(unwrap_infallible)]\n #![feature(vec_into_raw_parts)]\n-#![feature(vec_spare_capacity)]\n // NB: the above list is sorted to minimize merge conflicts.\n #![default_lib_allocator]\n "}, {"sha": "f509403fe2e43be99525793dd8cd2c93296b5d75", "filename": "library/std/src/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -2806,7 +2806,7 @@ impl Path {\n     /// use std::os::unix::fs::symlink;\n     ///\n     /// let link_path = Path::new(\"link\");\n-    /// symlink(\"/origin_does_not_exists/\", link_path).unwrap();\n+    /// symlink(\"/origin_does_not_exist/\", link_path).unwrap();\n     /// assert_eq!(link_path.is_symlink(), true);\n     /// assert_eq!(link_path.exists(), false);\n     /// ```"}, {"sha": "1d5d0e8b0e3134dc781adb98057e38ffdf200df2", "filename": "library/stdarch", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstdarch?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -1 +1 @@\n-Subproject commit 2adc17a5442614dbe34626fdd9b32de7c07b8086\n+Subproject commit 1d5d0e8b0e3134dc781adb98057e38ffdf200df2"}, {"sha": "6d7ab15326c5fc194fd94670d26c5e692cb27d7a", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -863,7 +863,7 @@ def get_toml(self, key, section=None):\n         >>> rb.get_toml(\"key2\")\n         'value2'\n \n-        If the key does not exists, the result is None:\n+        If the key does not exist, the result is None:\n \n         >>> rb.get_toml(\"key3\") is None\n         True"}, {"sha": "06ca3ce21b395a2990329a8273c20b8fa91b2058", "filename": "src/bootstrap/bootstrap_test.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Fbootstrap%2Fbootstrap_test.py", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Fbootstrap%2Fbootstrap_test.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap_test.py?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -55,8 +55,8 @@ def setUp(self):\n     def tearDown(self):\n         rmtree(self.container)\n \n-    def test_stamp_path_does_not_exists(self):\n-        \"\"\"Return True when the stamp file does not exists\"\"\"\n+    def test_stamp_path_does_not_exist(self):\n+        \"\"\"Return True when the stamp file does not exist\"\"\"\n         if os.path.exists(self.rustc_stamp_path):\n             os.unlink(self.rustc_stamp_path)\n         self.assertTrue(self.build.program_out_of_date(self.rustc_stamp_path, self.key))"}, {"sha": "e17de0ba49ebc464d949bc3ca2a8495647b4b525", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -227,8 +227,10 @@ fn copy_self_contained_objects(\n             target_deps.push((target, DependencyType::TargetSelfContained));\n         }\n \n-        let libunwind_path = copy_llvm_libunwind(builder, target, &libdir_self_contained);\n-        target_deps.push((libunwind_path, DependencyType::TargetSelfContained));\n+        if !target.starts_with(\"s390x\") {\n+            let libunwind_path = copy_llvm_libunwind(builder, target, &libdir_self_contained);\n+            target_deps.push((libunwind_path, DependencyType::TargetSelfContained));\n+        }\n     } else if target.ends_with(\"-wasi\") {\n         let srcdir = builder\n             .wasi_root(target)"}, {"sha": "6bb235b2c8347cddbd461e9d6316b92b8dfb7291", "filename": "src/etc/htmldocck.py", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Fetc%2Fhtmldocck.py", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Fetc%2Fhtmldocck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fhtmldocck.py?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -401,7 +401,7 @@ def get_tree_count(tree, path):\n     return len(tree.findall(path))\n \n \n-def check_snapshot(snapshot_name, tree):\n+def check_snapshot(snapshot_name, tree, normalize_to_text):\n     assert rust_test_path.endswith('.rs')\n     snapshot_path = '{}.{}.{}'.format(rust_test_path[:-3], snapshot_name, 'html')\n     try:\n@@ -413,7 +413,10 @@ def check_snapshot(snapshot_name, tree):\n         else:\n             raise FailedCheck('No saved snapshot value')\n \n-    actual_str = ET.tostring(tree).decode('utf-8')\n+    if not normalize_to_text:\n+        actual_str = ET.tostring(tree).decode('utf-8')\n+    else:\n+        actual_str = flatten(tree)\n \n     if expected_str != actual_str:\n         if bless:\n@@ -494,11 +497,16 @@ def check_command(c, cache):\n                 [snapshot_name, html_path, pattern] = c.args\n                 tree = cache.get_tree(html_path)\n                 xpath = normalize_xpath(pattern)\n+                normalize_to_text = False\n+                if xpath.endswith('/text()'):\n+                    xpath = xpath[:-7]\n+                    normalize_to_text = True\n+\n                 subtrees = tree.findall(xpath)\n                 if len(subtrees) == 1:\n                     [subtree] = subtrees\n                     try:\n-                        check_snapshot(snapshot_name, subtree)\n+                        check_snapshot(snapshot_name, subtree, normalize_to_text)\n                         ret = True\n                     except FailedCheck as err:\n                         cerr = str(err)"}, {"sha": "3b926e444034b3752022c8d3741284f54b151e54", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -492,9 +492,9 @@ impl<'tcx> Visitor<'tcx> for EmitIgnoredResolutionErrors<'tcx> {\n                 \"could not resolve path `{}`\",\n                 path.segments\n                     .iter()\n-                    .map(|segment| segment.ident.as_str().to_string())\n-                    .collect::<Vec<_>>()\n-                    .join(\"::\")\n+                    .map(|segment| segment.ident.as_str())\n+                    .intersperse(\"::\")\n+                    .collect::<String>()\n             );\n             let mut err = rustc_errors::struct_span_err!(\n                 self.tcx.sess,"}, {"sha": "a79b3e8ed084b68048ca2a63805d83ec06cef054", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -422,6 +422,12 @@ fn settings(root_path: &str, suffix: &str, theme_names: Vec<String>) -> Result<S\n             \"Theme preferences\",\n             vec![\n                 Setting::from((\"use-system-theme\", \"Use system theme\", true)),\n+                Setting::Select {\n+                    js_data_name: \"theme\",\n+                    description: \"Theme\",\n+                    default_value: \"light\",\n+                    options: theme_names.clone(),\n+                },\n                 Setting::Select {\n                     js_data_name: \"preferred-dark-theme\",\n                     description: \"Preferred dark theme\","}, {"sha": "bfdce74de67da6e6413312e8260eb9f7b1625ae0", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -944,11 +944,6 @@ h2.small-section-header > .anchor {\n \twidth: 100%;\n }\n \n-#crate-search + .search-input {\n-\tborder-radius: 0 1px 1px 0;\n-\twidth: calc(100% - 32px);\n-}\n-\n .search-input:focus {\n \tborder-radius: 2px;\n \tborder: 0;\n@@ -1766,6 +1761,12 @@ details.rustdoc-toggle[open] > summary.hideme::after {\n \t\tpadding-top: 0px;\n \t}\n \n+\t/* Space is at a premium on mobile, so remove the theme-picker icon. */\n+\t#theme-picker {\n+\t\tdisplay: none;\n+\t\twidth: 0;\n+\t}\n+\n \t.rustdoc {\n \t\tflex-direction: column;\n \t}\n@@ -1884,12 +1885,6 @@ details.rustdoc-toggle[open] > summary.hideme::after {\n \t\theight: 100%;\n \t}\n \n-\tnav.sub {\n-\t\twidth: calc(100% - 32px);\n-\t\tmargin-left: 32px;\n-\t\tmargin-bottom: 10px;\n-\t}\n-\n \t.source nav:not(.sidebar).sub {\n \t\tmargin-left: 32px;\n \t}\n@@ -2081,16 +2076,10 @@ details.rustdoc-toggle[open] > summary.hideme::after {\n \t}\n \n \t#crate-search {\n-\t\twidth: 100%;\n \t\tborder-radius: 4px;\n \t\tborder: 0;\n \t}\n \n-\t#crate-search + .search-input {\n-\t\twidth: calc(100% + 71px);\n-\t\tmargin-left: -36px;\n-\t}\n-\n \t#theme-picker, #settings-menu {\n \t\tpadding: 5px;\n \t\twidth: 31px;"}, {"sha": "885fe7c09a9732dbda3f3872c54e722101a45b75", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -299,7 +299,8 @@ details.undocumented > summary::before {\n \tborder-color: #5c6773;\n }\n \n-.since {\n+.rightside,\n+.out-of-band {\n \tcolor: grey;\n }\n "}, {"sha": "71af77978328f0a99ab0d3c6b737776e6c499390", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -256,7 +256,8 @@ details.undocumented > summary::before {\n \tbackground: rgba(0,0,0,0);\n }\n \n-.since {\n+.rightside,\n+.out-of-band {\n \tcolor: grey;\n }\n "}, {"sha": "e462fd16237f2b2d6388a94dbe0d28220dd2b8a2", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -243,6 +243,11 @@ details.undocumented > summary::before {\n \tborder-color: #bfbfbf;\n }\n \n+.rightside,\n+.out-of-band {\n+\tcolor: grey;\n+}\n+\n .result-name .primitive > i, .result-name .keyword > i {\n \tcolor: black;\n }"}, {"sha": "e7d1eedd35871a5763b3c539b908b76574079fa3", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 9, "deletions": 27, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -129,10 +129,15 @@ function hideThemeButtonState() {\n \n // Set up the theme picker list.\n (function () {\n+    if (!document.location.href.startsWith(\"file:///\")) {\n+        return;\n+    }\n     var themeChoices = getThemesElement();\n     var themePicker = getThemePickerElement();\n     var availableThemes = getVar(\"themes\").split(\",\");\n \n+    removeClass(themeChoices.parentElement, \"hidden\");\n+\n     function switchThemeButtonState() {\n         if (themeChoices.style.display === \"block\") {\n             hideThemeButtonState();\n@@ -283,9 +288,6 @@ function hideThemeButtonState() {\n                 loadSearch();\n             }\n \n-            // `crates{version}.js` should always be loaded before this script, so we can use it\n-            // safely.\n-            searchState.addCrateDropdown(window.ALL_CRATES);\n             var params = searchState.getQueryStringParams();\n             if (params.search !== undefined) {\n                 var search = searchState.outputElement();\n@@ -295,30 +297,6 @@ function hideThemeButtonState() {\n                 loadSearch();\n             }\n         },\n-        addCrateDropdown: function(crates) {\n-            var elem = document.getElementById(\"crate-search\");\n-\n-            if (!elem) {\n-                return;\n-            }\n-            var savedCrate = getSettingValue(\"saved-filter-crate\");\n-            for (var i = 0, len = crates.length; i < len; ++i) {\n-                var option = document.createElement(\"option\");\n-                option.value = crates[i];\n-                option.innerText = crates[i];\n-                elem.appendChild(option);\n-                // Set the crate filter from saved storage, if the current page has the saved crate\n-                // filter.\n-                //\n-                // If not, ignore the crate filter -- we want to support filtering for crates on\n-                // sites like doc.rust-lang.org where the crates may differ from page to page while\n-                // on the\n-                // same domain.\n-                if (crates[i] === savedCrate) {\n-                    elem.value = savedCrate;\n-                }\n-            }\n-        },\n     };\n \n     function getPageId() {\n@@ -897,6 +875,9 @@ function hideThemeButtonState() {\n     handleClick(\"help-button\", function(ev) {\n         displayHelp(true, ev);\n     });\n+    handleClick(MAIN_ID, function() {\n+        hideSidebar();\n+    });\n \n     onEachLazy(document.getElementsByTagName(\"a\"), function(el) {\n         // For clicks on internal links (<A> tags with a hash property), we expand the section we're\n@@ -905,6 +886,7 @@ function hideThemeButtonState() {\n         if (el.hash) {\n             el.addEventListener(\"click\", function() {\n                 expandSection(el.hash.slice(1));\n+                hideSidebar();\n             });\n         }\n     });"}, {"sha": "104464b3881147a476802deb439b6bcf6ac5e274", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -1126,15 +1126,18 @@ window.initSearch = function(rawSearchIndex) {\n             }\n         }\n \n-        let crates = `<select id=\"crate-search\"><option value=\"All crates\">All crates</option>`;\n-        for (let c of window.ALL_CRATES) {\n-            crates += `<option value=\"${c}\" ${c == filterCrates && \"selected\"}>${c}</option>`;\n+        let crates = \"\";\n+        if (window.ALL_CRATES.length > 1) {\n+            crates = ` in <select id=\"crate-search\"><option value=\"All crates\">All crates</option>`;\n+            for (let c of window.ALL_CRATES) {\n+                crates += `<option value=\"${c}\" ${c == filterCrates && \"selected\"}>${c}</option>`;\n+            }\n+            crates += `</select>`;\n         }\n-        crates += `</select>`;\n         var output = `<div id=\"search-settings\">\n             <h1 class=\"search-results-title\">Results for ${escape(query.query)} ` +\n             (query.type ? \" (type: \" + escape(query.type) + \")\" : \"\") + \"</h1>\" +\n-            ` in ${crates} ` +\n+            crates +\n             `</div><div id=\"titles\">` +\n             makeTabHeader(0, \"In Names\", ret_others[1]) +\n             makeTabHeader(1, \"In Parameters\", ret_in_args[1]) +\n@@ -1148,7 +1151,10 @@ window.initSearch = function(rawSearchIndex) {\n         resultsElem.appendChild(ret_returned[0]);\n \n         search.innerHTML = output;\n-        document.getElementById(\"crate-search\").addEventListener(\"input\", updateCrate);\n+        let crateSearch = document.getElementById(\"crate-search\");\n+        if (crateSearch) {\n+            crateSearch.addEventListener(\"input\", updateCrate);\n+        }\n         search.appendChild(resultsElem);\n         // Reset focused elements.\n         searchState.focusedByTab = [null, null, null];"}, {"sha": "e5c7e1ea1a03c36c57455d9106f979f07c079247", "filename": "src/librustdoc/html/static/js/settings.js", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -1,15 +1,18 @@\n // Local js definitions:\n /* global getSettingValue, getVirtualKey, onEachLazy, updateLocalStorage, updateSystemTheme */\n+/* global addClass, removeClass */\n \n (function () {\n     function changeSetting(settingName, value) {\n         updateLocalStorage(\"rustdoc-\" + settingName, value);\n \n         switch (settingName) {\n+            case \"theme\":\n             case \"preferred-dark-theme\":\n             case \"preferred-light-theme\":\n             case \"use-system-theme\":\n                 updateSystemTheme();\n+                updateLightAndDark();\n                 break;\n         }\n     }\n@@ -29,7 +32,32 @@\n         }\n     }\n \n+    function showLightAndDark() {\n+        addClass(document.getElementById(\"theme\").parentElement.parentElement, \"hidden\");\n+        removeClass(document.getElementById(\"preferred-light-theme\").parentElement.parentElement,\n+            \"hidden\");\n+        removeClass(document.getElementById(\"preferred-dark-theme\").parentElement.parentElement,\n+            \"hidden\");\n+    }\n+\n+    function hideLightAndDark() {\n+        addClass(document.getElementById(\"preferred-light-theme\").parentElement.parentElement,\n+            \"hidden\");\n+        addClass(document.getElementById(\"preferred-dark-theme\").parentElement.parentElement,\n+            \"hidden\");\n+        removeClass(document.getElementById(\"theme\").parentElement.parentElement, \"hidden\");\n+    }\n+\n+    function updateLightAndDark() {\n+        if (getSettingValue(\"use-system-theme\") !== \"false\") {\n+            showLightAndDark();\n+        } else {\n+            hideLightAndDark();\n+        }\n+    }\n+\n     function setEvents() {\n+        updateLightAndDark();\n         onEachLazy(document.getElementsByClassName(\"slider\"), function(elem) {\n             var toggle = elem.previousElementSibling;\n             var settingId = toggle.id;"}, {"sha": "2394df4c715d4fc5421c2e94a510ed76904e08df", "filename": "src/librustdoc/html/static/js/storage.js", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -187,22 +187,25 @@ var updateSystemTheme = (function() {\n     var mql = window.matchMedia(\"(prefers-color-scheme: dark)\");\n \n     function handlePreferenceChange(mql) {\n+        let use = function(theme) {\n+            switchTheme(window.currentTheme, window.mainTheme, theme, true);\n+        };\n         // maybe the user has disabled the setting in the meantime!\n         if (getSettingValue(\"use-system-theme\") !== \"false\") {\n             var lightTheme = getSettingValue(\"preferred-light-theme\") || \"light\";\n             var darkTheme = getSettingValue(\"preferred-dark-theme\") || \"dark\";\n \n             if (mql.matches) {\n-                // prefers a dark theme\n-                switchTheme(window.currentTheme, window.mainTheme, darkTheme, true);\n+                use(darkTheme);\n             } else {\n                 // prefers a light theme, or has no preference\n-                switchTheme(window.currentTheme, window.mainTheme, lightTheme, true);\n+                use(lightTheme);\n             }\n-\n             // note: we save the theme so that it doesn't suddenly change when\n             // the user disables \"use-system-theme\" and reloads the page or\n             // navigates to another page\n+        } else {\n+            use(getSettingValue(\"theme\"));\n         }\n     }\n "}, {"sha": "1ef001ec2b7196a4c062f44d3f78a4b0f7527ce8", "filename": "src/librustdoc/templates/page.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Flibrustdoc%2Ftemplates%2Fpage.html", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Flibrustdoc%2Ftemplates%2Fpage.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftemplates%2Fpage.html?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -96,7 +96,7 @@\n                     {%- endif -%}\n                 </a> {#- -#}\n                 <nav class=\"sub\"> {#- -#}\n-                    <div class=\"theme-picker\"> {#- -#}\n+                    <div class=\"theme-picker hidden\"> {#- -#}\n                         <button id=\"theme-picker\" aria-label=\"Pick another theme!\" aria-haspopup=\"menu\" title=\"themes\"> {#- -#}\n                             <img width=\"18\" height=\"18\" alt=\"Pick another theme!\" {# -#}\n                              src=\"{{static_root_path|safe}}brush{{page.resource_suffix}}.svg\"> {#- -#}"}, {"sha": "c59b088f7a6d66264bba29d7d7d0a37d63579a7c", "filename": "src/test/codegen/thread-local.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Ftest%2Fcodegen%2Fthread-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Ftest%2Fcodegen%2Fthread-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fthread-local.rs?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -19,15 +19,15 @@ thread_local!(static A: Cell<u32> = const { Cell::new(1) });\n // CHECK-LABEL: @get\n #[no_mangle]\n fn get() -> u32 {\n-    // CHECK: %0 = load i32, i32* bitcast ({{.*}} [[TLS]] to i32*)\n+    // CHECK: %0 = load i32, i32* {{.*}}[[TLS]]{{.*}}\n     // CHECK-NEXT: ret i32 %0\n     A.with(|a| a.get())\n }\n \n // CHECK-LABEL: @set\n #[no_mangle]\n fn set(v: u32) {\n-    // CHECK: store i32 %0, i32* bitcast ({{.*}} [[TLS]] to i32*)\n+    // CHECK: store i32 %0, i32* {{.*}}[[TLS]]{{.*}}\n     // CHECK-NEXT: ret void\n     A.with(|a| a.set(v))\n }"}, {"sha": "34fadd84ae834d3e70d74617e09e2d407da169ff", "filename": "src/test/rustdoc-gui/headings.goml", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Ftest%2Frustdoc-gui%2Fheadings.goml", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Ftest%2Frustdoc-gui%2Fheadings.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fheadings.goml?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -154,3 +154,16 @@ assert-css: (\"h2#top-doc-prose-title\", {\"font-size\": \"20.8px\"})\n assert-css: (\"h2#top-doc-prose-title\", {\"border-bottom-width\": \"1px\"})\n assert-css: (\"h3#top-doc-prose-sub-heading\", {\"font-size\": \"18.4px\"})\n assert-css: (\"h3#top-doc-prose-sub-heading\", {\"border-bottom-width\": \"1px\"})\n+\n+goto: file://|DOC_PATH|/staged_api/struct.Foo.html\n+show-text: true\n+local-storage: {\"rustdoc-theme\": \"light\", \"rustdoc-use-system-theme\": \"false\"}\n+assert-css: (\".since\", {\"color\": \"rgb(128, 128, 128)\"})\n+\n+local-storage: {\"rustdoc-theme\": \"dark\", \"rustdoc-use-system-theme\": \"false\"}\n+reload:\n+assert-css: (\".since\", {\"color\": \"rgb(128, 128, 128)\"})\n+\n+local-storage: {\"rustdoc-theme\": \"ayu\", \"rustdoc-use-system-theme\": \"false\"}\n+reload:\n+assert-css: (\".since\", {\"color\": \"rgb(128, 128, 128)\"})"}, {"sha": "eecd584bca9eccf5f573e0a2da32c31e010ff7f8", "filename": "src/test/rustdoc-gui/sidebar-mobile.goml", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile.goml", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile.goml?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -18,3 +18,11 @@ assert-css: (\".sidebar-elems\", {\"display\": \"block\", \"left\": \"0px\"})\n // When we tab out of the sidebar, close it.\n focus: \".search-input\"\n assert-css: (\".sidebar-elems\", {\"display\": \"block\", \"left\": \"-246px\"})\n+\n+// Open the sidebar menu.\n+click: \".sidebar-menu\"\n+assert-css: (\".sidebar-elems\", {\"left\": \"0px\"})\n+\n+// Click elsewhere.\n+click: \"body\"\n+assert-css: (\".sidebar-elems\", {\"left\": \"-246px\"})"}, {"sha": "6e8eba56c1eaae0ea880b74b80d446f92478c4d5", "filename": "src/test/rustdoc-gui/src/staged_api/Cargo.lock", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fstaged_api%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fstaged_api%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fstaged_api%2FCargo.lock?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -0,0 +1,7 @@\n+# This file is automatically @generated by Cargo.\n+# It is not intended for manual editing.\n+version = 3\n+\n+[[package]]\n+name = \"staged_api\"\n+version = \"0.1.0\""}, {"sha": "117c4134e34199a9942da1a3ede039768a99fecf", "filename": "src/test/rustdoc-gui/src/staged_api/Cargo.toml", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fstaged_api%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fstaged_api%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fstaged_api%2FCargo.toml?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -0,0 +1,11 @@\n+[package]\n+name = \"staged_api\"\n+version = \"0.1.0\"\n+edition = \"2021\"\n+\n+[lib]\n+path = \"lib.rs\"\n+\n+[features]\n+default = [\"some_feature\"]\n+some_feature = []"}, {"sha": "0cb460f03f701b25bd4463adbea5f10cde333ff2", "filename": "src/test/rustdoc-gui/src/staged_api/lib.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fstaged_api%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fstaged_api%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fstaged_api%2Flib.rs?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -0,0 +1,10 @@\n+#![feature(staged_api)]\n+#![stable(feature = \"some_feature\", since = \"1.3.5\")]\n+\n+#[stable(feature = \"some_feature\", since = \"1.3.5\")]\n+pub struct Foo {}\n+\n+impl Foo {\n+    #[stable(feature = \"some_feature\", since = \"1.3.5\")]\n+    pub fn bar() {}\n+}"}, {"sha": "67b9164cfec71ecadfbe8e36453f1d281a2eb07f", "filename": "src/test/rustdoc-gui/toggle-docs-mobile.goml", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Ftest%2Frustdoc-gui%2Ftoggle-docs-mobile.goml", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Ftest%2Frustdoc-gui%2Ftoggle-docs-mobile.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftoggle-docs-mobile.goml?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -1,12 +1,12 @@\n goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n size: (433, 600)\n assert-attribute: (\".top-doc\", {\"open\": \"\"})\n-click: (4, 240) // This is the position of the top doc comment toggle\n+click: (4, 260) // This is the position of the top doc comment toggle\n assert-attribute-false: (\".top-doc\", {\"open\": \"\"})\n-click: (4, 240)\n+click: (4, 260)\n assert-attribute: (\".top-doc\", {\"open\": \"\"})\n // To ensure that the toggle isn't over the text, we check that the toggle isn't clicked.\n-click: (3, 240)\n+click: (3, 260)\n assert-attribute: (\".top-doc\", {\"open\": \"\"})\n \n // Assert the position of the toggle on the top doc block.\n@@ -22,10 +22,10 @@ assert-position: (\n // Now we do the same but with a little bigger width\n size: (600, 600)\n assert-attribute: (\".top-doc\", {\"open\": \"\"})\n-click: (4, 240) // New Y position since all search elements are back on one line.\n+click: (4, 260) // New Y position since all search elements are back on one line.\n assert-attribute-false: (\".top-doc\", {\"open\": \"\"})\n-click: (4, 240)\n+click: (4, 260)\n assert-attribute: (\".top-doc\", {\"open\": \"\"})\n // To ensure that the toggle isn't over the text, we check that the toggle isn't clicked.\n-click: (3, 240)\n+click: (3, 260)\n assert-attribute: (\".top-doc\", {\"open\": \"\"})"}, {"sha": "855a82d2f9c8f503226e37a7db5d7fdee90249e5", "filename": "src/test/ui/autoref-autoderef/deref-into-array.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Ftest%2Fui%2Fautoref-autoderef%2Fderef-into-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Ftest%2Fui%2Fautoref-autoderef%2Fderef-into-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fautoref-autoderef%2Fderef-into-array.rs?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -0,0 +1,17 @@\n+// check-pass\n+\n+struct Test<T>([T; 1]);\n+\n+impl<T> std::ops::Deref for Test<T> {\n+    type Target = [T; 1];\n+\n+    fn deref(&self) -> &[T; 1] {\n+        &self.0\n+    }\n+}\n+\n+fn main() {\n+    let out = Test([(); 1]);\n+    let blah = out.len();\n+    println!(\"{}\", blah);\n+}"}, {"sha": "7d75af12bdfb5cb6195cb2f5cc6f5124882098a6", "filename": "src/test/ui/const-generics/deref-into-array-generic.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Ftest%2Fui%2Fconst-generics%2Fderef-into-array-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Ftest%2Fui%2Fconst-generics%2Fderef-into-array-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fderef-into-array-generic.rs?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -0,0 +1,27 @@\n+// check-pass\n+\n+struct Test<T, const N: usize>([T; N]);\n+\n+impl<T: Copy + Default, const N: usize> Default for Test<T, N> {\n+    fn default() -> Self {\n+        Self([T::default(); N])\n+    }\n+}\n+\n+impl<T, const N: usize> std::ops::Deref for Test<T, N> {\n+    type Target = [T; N];\n+\n+    fn deref(&self) -> &[T; N] {\n+        &self.0\n+    }\n+}\n+\n+fn test() -> Test<u64, 16> {\n+    let test = Test::default();\n+    println!(\"{}\", test.len());\n+    test\n+}\n+\n+fn main() {\n+    test();\n+}"}, {"sha": "3d7e171f18c05f76afae49d531887051f51eceb4", "filename": "src/test/ui/consts/const-block-const-bound.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Ftest%2Fui%2Fconsts%2Fconst-block-const-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Ftest%2Fui%2Fconsts%2Fconst-block-const-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-block-const-bound.rs?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -1,5 +1,5 @@\n #![allow(unused)]\n-#![feature(const_fn_trait_bound, const_trait_impl, inline_const)]\n+#![feature(const_fn_trait_bound, const_trait_impl, inline_const, negative_impls)]\n \n const fn f<T: ~const Drop>(x: T) {}\n \n@@ -9,9 +9,15 @@ impl Drop for UnconstDrop {\n     fn drop(&mut self) {}\n }\n \n+struct NonDrop;\n+\n+impl !Drop for NonDrop {}\n+\n fn main() {\n     const {\n         f(UnconstDrop);\n         //~^ ERROR the trait bound `UnconstDrop: Drop` is not satisfied\n+        f(NonDrop);\n+        //~^ ERROR the trait bound `NonDrop: Drop` is not satisfied\n     }\n }"}, {"sha": "5f912c66bb97c5ea6947261ce482fd21cc14b6de", "filename": "src/test/ui/consts/const-block-const-bound.stderr", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Ftest%2Fui%2Fconsts%2Fconst-block-const-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Ftest%2Fui%2Fconsts%2Fconst-block-const-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-block-const-bound.stderr?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `UnconstDrop: Drop` is not satisfied\n-  --> $DIR/const-block-const-bound.rs:14:11\n+  --> $DIR/const-block-const-bound.rs:18:11\n    |\n LL |         f(UnconstDrop);\n    |         - ^^^^^^^^^^^ the trait `Drop` is not implemented for `UnconstDrop`\n@@ -16,6 +16,20 @@ help: consider introducing a `where` bound, but there might be an alternative be\n LL | fn main() where UnconstDrop: Drop {\n    |           +++++++++++++++++++++++\n \n-error: aborting due to previous error\n+error[E0277]: the trait bound `NonDrop: Drop` is not satisfied\n+  --> $DIR/const-block-const-bound.rs:20:11\n+   |\n+LL |         f(NonDrop);\n+   |         - ^^^^^^^ the trait `Drop` is not implemented for `NonDrop`\n+   |         |\n+   |         required by a bound introduced by this call\n+   |\n+note: required by a bound in `f`\n+  --> $DIR/const-block-const-bound.rs:4:15\n+   |\n+LL | const fn f<T: ~const Drop>(x: T) {}\n+   |               ^^^^^^^^^^^ required by this bound in `f`\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "ed382406efacf7d8a9cbee69cc593760bca33275", "filename": "src/test/ui/feature-gates/issue-43106-gating-of-builtin-attrs.rs", "status": "modified", "additions": 38, "deletions": 9, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs.rs?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -1,6 +1,7 @@\n //~ NOTE not a function\n-//~^ NOTE not a foreign function or static\n-//~^^ NOTE not a function or static\n+//~| NOTE not a foreign function or static\n+//~| NOTE not a function or static\n+//~| NOTE not an `extern` block\n // This test enumerates as many compiler-builtin ungated attributes as\n // possible (that is, all the mutually compatible ones), and checks\n // that we get \"expected\" (*) warnings for each in the various weird\n@@ -59,9 +60,9 @@\n #![proc_macro_derive()] //~ WARN `#[proc_macro_derive]` only has an effect\n #![doc = \"2400\"]\n #![cold] //~ WARN attribute should be applied to a function\n-//~^ WARN\n-// see issue-43106-gating-of-builtin-attrs-error.rs\n-#![link()]\n+//~^ WARN this was previously accepted\n+#![link()] //~ WARN attribute should be applied to an `extern` block\n+//~^ WARN this was previously accepted\n #![link_name = \"1900\"]\n //~^ WARN attribute should be applied to a foreign function\n //~^^ WARN this was previously accepted by the compiler\n@@ -547,22 +548,38 @@ mod link_section {\n }\n \n \n-// Note that this is a `check-pass` test, so it\n-// will never invoke the linker. These are here nonetheless to point\n-// out that we allow them at non-crate-level (though I do not know\n-// whether they have the same effect here as at crate-level).\n+// Note that this is a `check-pass` test, so it will never invoke the linker.\n \n #[link()]\n+//~^ WARN attribute should be applied to an `extern` block\n+//~| WARN this was previously accepted\n mod link {\n+    //~^ NOTE not an `extern` block\n+\n     mod inner { #![link()] }\n+    //~^ WARN attribute should be applied to an `extern` block\n+    //~| WARN this was previously accepted\n+    //~| NOTE not an `extern` block\n \n     #[link()] fn f() { }\n+    //~^ WARN attribute should be applied to an `extern` block\n+    //~| WARN this was previously accepted\n+    //~| NOTE not an `extern` block\n \n     #[link()] struct S;\n+    //~^ WARN attribute should be applied to an `extern` block\n+    //~| WARN this was previously accepted\n+    //~| NOTE not an `extern` block\n \n     #[link()] type T = S;\n+    //~^ WARN attribute should be applied to an `extern` block\n+    //~| WARN this was previously accepted\n+    //~| NOTE not an `extern` block\n \n     #[link()] impl S { }\n+    //~^ WARN attribute should be applied to an `extern` block\n+    //~| WARN this was previously accepted\n+    //~| NOTE not an `extern` block\n }\n \n struct StructForDeprecated;\n@@ -594,16 +611,22 @@ mod must_use {\n }\n \n #[windows_subsystem = \"windows\"]\n+//~^ WARN crate-level attribute should be an inner attribute\n mod windows_subsystem {\n     mod inner { #![windows_subsystem=\"windows\"] }\n+    //~^ WARN crate-level attribute should be in the root module\n \n     #[windows_subsystem = \"windows\"] fn f() { }\n+    //~^ WARN crate-level attribute should be an inner attribute\n \n     #[windows_subsystem = \"windows\"] struct S;\n+    //~^ WARN crate-level attribute should be an inner attribute\n \n     #[windows_subsystem = \"windows\"] type T = S;\n+    //~^ WARN crate-level attribute should be an inner attribute\n \n     #[windows_subsystem = \"windows\"] impl S { }\n+    //~^ WARN crate-level attribute should be an inner attribute\n }\n \n // BROKEN USES OF CRATE-LEVEL BUILT-IN ATTRIBUTES\n@@ -686,16 +709,22 @@ mod no_main_1 {\n }\n \n #[no_builtins]\n+//~^ WARN crate-level attribute should be an inner attribute\n mod no_builtins {\n     mod inner { #![no_builtins] }\n+    //~^ WARN crate-level attribute should be in the root module\n \n     #[no_builtins] fn f() { }\n+    //~^ WARN crate-level attribute should be an inner attribute\n \n     #[no_builtins] struct S;\n+    //~^ WARN crate-level attribute should be an inner attribute\n \n     #[no_builtins] type T = S;\n+    //~^ WARN crate-level attribute should be an inner attribute\n \n     #[no_builtins] impl S { }\n+    //~^ WARN crate-level attribute should be an inner attribute\n }\n \n #[recursion_limit=\"0200\"]"}, {"sha": "bd3e33320c38452741e34239f31c6251da0f3b7f", "filename": "src/test/ui/feature-gates/issue-43106-gating-of-builtin-attrs.stderr", "status": "modified", "additions": 289, "deletions": 152, "changes": 441, "blob_url": "https://github.com/rust-lang/rust/blob/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7531d2fdd49966d83830a7b4596c95587b1e9573/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs.stderr?ref=7531d2fdd49966d83830a7b4596c95587b1e9573", "patch": "@@ -1,225 +1,225 @@\n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:45:9\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:46:9\n    |\n LL | #![warn(x5400)]\n    |         ^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:39:28\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:40:28\n    |\n LL | #![warn(unused_attributes, unknown_lints)]\n    |                            ^^^^^^^^^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:46:10\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:47:10\n    |\n LL | #![allow(x5300)]\n    |          ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:47:11\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:48:11\n    |\n LL | #![forbid(x5200)]\n    |           ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:48:9\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:49:9\n    |\n LL | #![deny(x5100)]\n    |         ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:104:8\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:105:8\n    |\n LL | #[warn(x5400)]\n    |        ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:107:25\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:108:25\n    |\n LL |     mod inner { #![warn(x5400)] }\n    |                         ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:110:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:111:12\n    |\n LL |     #[warn(x5400)] fn f() { }\n    |            ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:113:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:114:12\n    |\n LL |     #[warn(x5400)] struct S;\n    |            ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:116:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:117:12\n    |\n LL |     #[warn(x5400)] type T = S;\n    |            ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:119:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:120:12\n    |\n LL |     #[warn(x5400)] impl S { }\n    |            ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:123:9\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:124:9\n    |\n LL | #[allow(x5300)]\n    |         ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:126:26\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:127:26\n    |\n LL |     mod inner { #![allow(x5300)] }\n    |                          ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:129:13\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:130:13\n    |\n LL |     #[allow(x5300)] fn f() { }\n    |             ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:132:13\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:133:13\n    |\n LL |     #[allow(x5300)] struct S;\n    |             ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:135:13\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:136:13\n    |\n LL |     #[allow(x5300)] type T = S;\n    |             ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:138:13\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:139:13\n    |\n LL |     #[allow(x5300)] impl S { }\n    |             ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:142:10\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:143:10\n    |\n LL | #[forbid(x5200)]\n    |          ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:145:27\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:146:27\n    |\n LL |     mod inner { #![forbid(x5200)] }\n    |                           ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:148:14\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:149:14\n    |\n LL |     #[forbid(x5200)] fn f() { }\n    |              ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:151:14\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:152:14\n    |\n LL |     #[forbid(x5200)] struct S;\n    |              ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:154:14\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:155:14\n    |\n LL |     #[forbid(x5200)] type T = S;\n    |              ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:157:14\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:158:14\n    |\n LL |     #[forbid(x5200)] impl S { }\n    |              ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:161:8\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:162:8\n    |\n LL | #[deny(x5100)]\n    |        ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:164:25\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:165:25\n    |\n LL |     mod inner { #![deny(x5100)] }\n    |                         ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:167:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:168:12\n    |\n LL |     #[deny(x5100)] fn f() { }\n    |            ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:170:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:171:12\n    |\n LL |     #[deny(x5100)] struct S;\n    |            ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:173:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:174:12\n    |\n LL |     #[deny(x5100)] type T = S;\n    |            ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:176:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:177:12\n    |\n LL |     #[deny(x5100)] impl S { }\n    |            ^^^^^\n \n warning: `#[macro_escape]` is a deprecated synonym for `#[macro_use]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:399:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:400:17\n    |\n LL |     mod inner { #![macro_escape] }\n    |                 ^^^^^^^^^^^^^^^^\n    |\n    = help: try an outer attribute: `#[macro_use]`\n \n warning: `#[macro_escape]` is a deprecated synonym for `#[macro_use]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:396:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:397:1\n    |\n LL | #[macro_escape]\n    | ^^^^^^^^^^^^^^^\n \n warning: use of deprecated attribute `crate_id`: no longer used.\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:83:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:84:1\n    |\n LL | #![crate_id = \"10\"]\n    | ^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n    |\n    = note: `#[warn(deprecated)]` on by default\n \n warning: use of deprecated attribute `no_start`: no longer used.\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:93:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:94:1\n    |\n LL | #![no_start]\n    | ^^^^^^^^^^^^ help: remove this attribute\n \n warning: `#[macro_export]` only has an effect on macro definitions\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:197:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:198:1\n    |\n LL | #[macro_export]\n    | ^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:39:9\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:40:9\n    |\n LL | #![warn(unused_attributes, unknown_lints)]\n    |         ^^^^^^^^^^^^^^^^^\n \n warning: `#[automatically_derived]` only has an effect on items\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:265:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:266:1\n    |\n LL | #[automatically_derived]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: attribute should be applied to a free function, impl method or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:283:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:284:1\n    |\n LL |   #[no_mangle]\n    |   ^^^^^^^^^^^^\n@@ -236,31 +236,31 @@ LL | | }\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: `#[should_panic]` only has an effect on functions\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:323:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:324:1\n    |\n LL | #[should_panic]\n    | ^^^^^^^^^^^^^^^\n \n warning: `#[ignore]` only has an effect on functions\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:341:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:342:1\n    |\n LL | #[ignore]\n    | ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:376:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:377:1\n    |\n LL | #[reexport_test_harness_main = \"2900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:416:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:417:1\n    |\n LL | #[no_std]\n    | ^^^^^^^^^\n \n warning: attribute should be applied to a function\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:452:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:453:1\n    |\n LL |   #[cold]\n    |   ^^^^^^^\n@@ -277,7 +277,7 @@ LL | | }\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a foreign function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:481:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:482:1\n    |\n LL |   #[link_name = \"1900\"]\n    |   ^^^^^^^^^^^^^^^^^^^^^\n@@ -294,7 +294,7 @@ LL | | }\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:520:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:521:1\n    |\n LL |   #[link_section = \"1800\"]\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -310,424 +310,461 @@ LL | | }\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n+warning: attribute should be applied to an `extern` block\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:553:1\n+   |\n+LL |   #[link()]\n+   |   ^^^^^^^^^\n+...\n+LL | / mod link {\n+LL | |\n+LL | |\n+LL | |     mod inner { #![link()] }\n+...  |\n+LL | |\n+LL | | }\n+   | |_- not an `extern` block\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:611:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:613:1\n+   |\n+LL | #[windows_subsystem = \"windows\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:634:1\n    |\n LL | #[crate_name = \"0900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:630:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:653:1\n    |\n LL | #[crate_type = \"0800\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:649:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:672:1\n    |\n LL | #[feature(x0600)]\n    | ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:669:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:692:1\n    |\n LL | #[no_main]\n    | ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:701:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:711:1\n+   |\n+LL | #[no_builtins]\n+   | ^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:730:1\n    |\n LL | #[recursion_limit=\"0200\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:720:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:749:1\n    |\n LL | #[type_length_limit=\"0100\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: `#[should_panic]` only has an effect on functions\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:52:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:53:1\n    |\n LL | #![should_panic]\n    | ^^^^^^^^^^^^^^^^\n \n warning: `#[ignore]` only has an effect on functions\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:53:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:54:1\n    |\n LL | #![ignore]\n    | ^^^^^^^^^^\n \n warning: `#[proc_macro_derive]` only has an effect on functions\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:59:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:60:1\n    |\n LL | #![proc_macro_derive()]\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: attribute should be applied to a function\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:61:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:62:1\n    |\n LL | #![cold]\n    | ^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n+warning: attribute should be applied to an `extern` block\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:64:1\n+   |\n+LL | #![link()]\n+   | ^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n warning: attribute should be applied to a foreign function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:65:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:66:1\n    |\n LL | #![link_name = \"1900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:68:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:69:1\n    |\n LL | #![link_section = \"1800\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: `#[macro_use]` only has an effect on `extern crate` and modules\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:184:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:185:5\n    |\n LL |     #[macro_use] fn f() { }\n    |     ^^^^^^^^^^^^\n \n warning: `#[macro_use]` only has an effect on `extern crate` and modules\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:187:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:188:5\n    |\n LL |     #[macro_use] struct S;\n    |     ^^^^^^^^^^^^\n \n warning: `#[macro_use]` only has an effect on `extern crate` and modules\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:190:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:191:5\n    |\n LL |     #[macro_use] type T = S;\n    |     ^^^^^^^^^^^^\n \n warning: `#[macro_use]` only has an effect on `extern crate` and modules\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:193:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:194:5\n    |\n LL |     #[macro_use] impl S { }\n    |     ^^^^^^^^^^^^\n \n warning: `#[macro_export]` only has an effect on macro definitions\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:200:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:201:17\n    |\n LL |     mod inner { #![macro_export] }\n    |                 ^^^^^^^^^^^^^^^^\n \n warning: `#[macro_export]` only has an effect on macro definitions\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:203:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:204:5\n    |\n LL |     #[macro_export] fn f() { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: `#[macro_export]` only has an effect on macro definitions\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:206:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:207:5\n    |\n LL |     #[macro_export] struct S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: `#[macro_export]` only has an effect on macro definitions\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:209:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:210:5\n    |\n LL |     #[macro_export] type T = S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: `#[macro_export]` only has an effect on macro definitions\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:212:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:213:5\n    |\n LL |     #[macro_export] impl S { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: `#[path]` only has an effect on modules\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:252:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:253:5\n    |\n LL |     #[path = \"3800\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^\n \n warning: `#[path]` only has an effect on modules\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:255:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:256:5\n    |\n LL |     #[path = \"3800\"]  struct S;\n    |     ^^^^^^^^^^^^^^^^\n \n warning: `#[path]` only has an effect on modules\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:258:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:259:5\n    |\n LL |     #[path = \"3800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^\n \n warning: `#[path]` only has an effect on modules\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:261:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:262:5\n    |\n LL |     #[path = \"3800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^\n \n warning: `#[automatically_derived]` only has an effect on items\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:268:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:269:17\n    |\n LL |     mod inner { #![automatically_derived] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: `#[automatically_derived]` only has an effect on items\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:271:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:272:5\n    |\n LL |     #[automatically_derived] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: `#[automatically_derived]` only has an effect on items\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:274:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:275:5\n    |\n LL |     #[automatically_derived] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: `#[automatically_derived]` only has an effect on items\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:277:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:278:5\n    |\n LL |     #[automatically_derived] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: attribute should be applied to a free function, impl method or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:288:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:289:17\n    |\n LL |     mod inner { #![no_mangle] }\n    |     ------------^^^^^^^^^^^^^-- not a free function, impl method or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a free function, impl method or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:295:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:296:5\n    |\n LL |     #[no_mangle] struct S;\n    |     ^^^^^^^^^^^^ --------- not a free function, impl method or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a free function, impl method or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:300:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:301:5\n    |\n LL |     #[no_mangle] type T = S;\n    |     ^^^^^^^^^^^^ ----------- not a free function, impl method or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a free function, impl method or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:305:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:306:5\n    |\n LL |     #[no_mangle] impl S { }\n    |     ^^^^^^^^^^^^ ---------- not a free function, impl method or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a free function, impl method or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:311:9\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:312:9\n    |\n LL |         #[no_mangle] fn foo();\n    |         ^^^^^^^^^^^^ --------- not a free function, impl method or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a free function, impl method or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:316:9\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:317:9\n    |\n LL |         #[no_mangle] fn bar() {}\n    |         ^^^^^^^^^^^^ ----------- not a free function, impl method or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: `#[should_panic]` only has an effect on functions\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:326:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:327:17\n    |\n LL |     mod inner { #![should_panic] }\n    |                 ^^^^^^^^^^^^^^^^\n \n warning: `#[should_panic]` only has an effect on functions\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:331:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:332:5\n    |\n LL |     #[should_panic] struct S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: `#[should_panic]` only has an effect on functions\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:334:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:335:5\n    |\n LL |     #[should_panic] type T = S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: `#[should_panic]` only has an effect on functions\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:337:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:338:5\n    |\n LL |     #[should_panic] impl S { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: `#[ignore]` only has an effect on functions\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:344:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:345:17\n    |\n LL |     mod inner { #![ignore] }\n    |                 ^^^^^^^^^^\n \n warning: `#[ignore]` only has an effect on functions\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:349:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:350:5\n    |\n LL |     #[ignore] struct S;\n    |     ^^^^^^^^^\n \n warning: `#[ignore]` only has an effect on functions\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:352:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:353:5\n    |\n LL |     #[ignore] type T = S;\n    |     ^^^^^^^^^\n \n warning: `#[ignore]` only has an effect on functions\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:355:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:356:5\n    |\n LL |     #[ignore] impl S { }\n    |     ^^^^^^^^^\n \n warning: `#[no_implicit_prelude]` only has an effect on modules\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:363:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:364:5\n    |\n LL |     #[no_implicit_prelude] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: `#[no_implicit_prelude]` only has an effect on modules\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:366:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:367:5\n    |\n LL |     #[no_implicit_prelude] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: `#[no_implicit_prelude]` only has an effect on modules\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:369:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:370:5\n    |\n LL |     #[no_implicit_prelude] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: `#[no_implicit_prelude]` only has an effect on modules\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:372:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:373:5\n    |\n LL |     #[no_implicit_prelude] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:379:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:380:17\n    |\n LL |     mod inner { #![reexport_test_harness_main=\"2900\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:382:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:383:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:385:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:386:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:388:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:389:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:391:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:392:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: `#[macro_escape]` only has an effect on `extern crate` and modules\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:403:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:404:5\n    |\n LL |     #[macro_escape] fn f() { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: `#[macro_escape]` only has an effect on `extern crate` and modules\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:406:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:407:5\n    |\n LL |     #[macro_escape] struct S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: `#[macro_escape]` only has an effect on `extern crate` and modules\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:409:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:410:5\n    |\n LL |     #[macro_escape] type T = S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: `#[macro_escape]` only has an effect on `extern crate` and modules\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:412:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:413:5\n    |\n LL |     #[macro_escape] impl S { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:419:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:420:17\n    |\n LL |     mod inner { #![no_std] }\n    |                 ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:422:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:423:5\n    |\n LL |     #[no_std] fn f() { }\n    |     ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:425:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:426:5\n    |\n LL |     #[no_std] struct S;\n    |     ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:428:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:429:5\n    |\n LL |     #[no_std] type T = S;\n    |     ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:431:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:432:5\n    |\n LL |     #[no_std] impl S { }\n    |     ^^^^^^^^^\n \n warning: attribute should be applied to a function\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:458:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:459:17\n    |\n LL |     mod inner { #![cold] }\n    |     ------------^^^^^^^^-- not a function\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a function\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:465:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:466:5\n    |\n LL |     #[cold] struct S;\n    |     ^^^^^^^ --------- not a function\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a function\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:470:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:471:5\n    |\n LL |     #[cold] type T = S;\n    |     ^^^^^^^ ----------- not a function\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a function\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:475:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:476:5\n    |\n LL |     #[cold] impl S { }\n    |     ^^^^^^^ ---------- not a function\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a foreign function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:487:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:488:5\n    |\n LL |     #[link_name = \"1900\"]\n    |     ^^^^^^^^^^^^^^^^^^^^^\n@@ -737,270 +774,370 @@ LL |     extern \"C\" { }\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n help: try `#[link(name = \"1900\")]` instead\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:487:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:488:5\n    |\n LL |     #[link_name = \"1900\"]\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n warning: attribute should be applied to a foreign function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:494:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:495:17\n    |\n LL |     mod inner { #![link_name=\"1900\"] }\n    |     ------------^^^^^^^^^^^^^^^^^^^^-- not a foreign function or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a foreign function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:499:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:500:5\n    |\n LL |     #[link_name = \"1900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^ ---------- not a foreign function or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a foreign function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:504:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:505:5\n    |\n LL |     #[link_name = \"1900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^ --------- not a foreign function or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a foreign function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:509:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:510:5\n    |\n LL |     #[link_name = \"1900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^ ----------- not a foreign function or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a foreign function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:514:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:515:5\n    |\n LL |     #[link_name = \"1900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^ ---------- not a foreign function or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:526:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:527:17\n    |\n LL |     mod inner { #![link_section=\"1800\"] }\n    |     ------------^^^^^^^^^^^^^^^^^^^^^^^-- not a function or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:533:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:534:5\n    |\n LL |     #[link_section = \"1800\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ --------- not a function or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:538:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:539:5\n    |\n LL |     #[link_section = \"1800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ ----------- not a function or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:543:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:544:5\n    |\n LL |     #[link_section = \"1800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ ---------- not a function or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n+warning: attribute should be applied to an `extern` block\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:559:17\n+   |\n+LL |     mod inner { #![link()] }\n+   |     ------------^^^^^^^^^^-- not an `extern` block\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+warning: attribute should be applied to an `extern` block\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:564:5\n+   |\n+LL |     #[link()] fn f() { }\n+   |     ^^^^^^^^^ ---------- not an `extern` block\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+warning: attribute should be applied to an `extern` block\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:569:5\n+   |\n+LL |     #[link()] struct S;\n+   |     ^^^^^^^^^ --------- not an `extern` block\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+warning: attribute should be applied to an `extern` block\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:574:5\n+   |\n+LL |     #[link()] type T = S;\n+   |     ^^^^^^^^^ ----------- not an `extern` block\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+warning: attribute should be applied to an `extern` block\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:579:5\n+   |\n+LL |     #[link()] impl S { }\n+   |     ^^^^^^^^^ ---------- not an `extern` block\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:614:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:616:17\n+   |\n+LL |     mod inner { #![windows_subsystem=\"windows\"] }\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:619:5\n+   |\n+LL |     #[windows_subsystem = \"windows\"] fn f() { }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:622:5\n+   |\n+LL |     #[windows_subsystem = \"windows\"] struct S;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:625:5\n+   |\n+LL |     #[windows_subsystem = \"windows\"] type T = S;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:628:5\n+   |\n+LL |     #[windows_subsystem = \"windows\"] impl S { }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be in the root module\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:637:17\n    |\n LL |     mod inner { #![crate_name=\"0900\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:617:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:640:5\n    |\n LL |     #[crate_name = \"0900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:620:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:643:5\n    |\n LL |     #[crate_name = \"0900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:623:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:646:5\n    |\n LL |     #[crate_name = \"0900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:626:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:649:5\n    |\n LL |     #[crate_name = \"0900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:633:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:656:17\n    |\n LL |     mod inner { #![crate_type=\"0800\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:636:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:659:5\n    |\n LL |     #[crate_type = \"0800\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:639:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:662:5\n    |\n LL |     #[crate_type = \"0800\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:642:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:665:5\n    |\n LL |     #[crate_type = \"0800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:645:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:668:5\n    |\n LL |     #[crate_type = \"0800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:652:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:675:17\n    |\n LL |     mod inner { #![feature(x0600)] }\n    |                 ^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:655:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:678:5\n    |\n LL |     #[feature(x0600)] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:658:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:681:5\n    |\n LL |     #[feature(x0600)] struct S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:661:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:684:5\n    |\n LL |     #[feature(x0600)] type T = S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:664:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:687:5\n    |\n LL |     #[feature(x0600)] impl S { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:672:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:695:17\n    |\n LL |     mod inner { #![no_main] }\n    |                 ^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:675:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:698:5\n    |\n LL |     #[no_main] fn f() { }\n    |     ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:678:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:701:5\n    |\n LL |     #[no_main] struct S;\n    |     ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:681:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:704:5\n    |\n LL |     #[no_main] type T = S;\n    |     ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:684:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:707:5\n    |\n LL |     #[no_main] impl S { }\n    |     ^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:704:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:714:17\n+   |\n+LL |     mod inner { #![no_builtins] }\n+   |                 ^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:717:5\n+   |\n+LL |     #[no_builtins] fn f() { }\n+   |     ^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:720:5\n+   |\n+LL |     #[no_builtins] struct S;\n+   |     ^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:723:5\n+   |\n+LL |     #[no_builtins] type T = S;\n+   |     ^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:726:5\n+   |\n+LL |     #[no_builtins] impl S { }\n+   |     ^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be in the root module\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:733:17\n    |\n LL |     mod inner { #![recursion_limit=\"0200\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:707:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:736:5\n    |\n LL |     #[recursion_limit=\"0200\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:710:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:739:5\n    |\n LL |     #[recursion_limit=\"0200\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:713:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:742:5\n    |\n LL |     #[recursion_limit=\"0200\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:716:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:745:5\n    |\n LL |     #[recursion_limit=\"0200\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:723:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:752:17\n    |\n LL |     mod inner { #![type_length_limit=\"0100\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:726:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:755:5\n    |\n LL |     #[type_length_limit=\"0100\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:729:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:758:5\n    |\n LL |     #[type_length_limit=\"0100\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:732:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:761:5\n    |\n LL |     #[type_length_limit=\"0100\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:735:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:764:5\n    |\n LL |     #[type_length_limit=\"0100\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: the feature `rust1` has been stable since 1.0.0 and no longer requires an attribute to enable\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:89:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:90:12\n    |\n LL | #![feature(rust1)]\n    |            ^^^^^\n    |\n    = note: `#[warn(stable_features)]` on by default\n \n-warning: 148 warnings emitted\n+warning: 167 warnings emitted\n "}]}