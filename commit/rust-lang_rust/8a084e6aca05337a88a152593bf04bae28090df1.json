{"sha": "8a084e6aca05337a88a152593bf04bae28090df1", "node_id": "C_kwDOAAsO6NoAKDhhMDg0ZTZhY2EwNTMzN2E4OGExNTI1OTNiZjA0YmFlMjgwOTBkZjE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-12-05T10:52:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-05T10:52:54Z"}, "message": "Merge #10902\n\n10902: Handle multiple cargo check quick fix spans r=Veykril a=brandondong\n\nResolves https://github.com/rust-analyzer/rust-analyzer/issues/10705.\r\n\r\n**Cause:**\r\n- For a cargo check diagnostic with multiple spans, only a single quick fix action would be created at the location of `spans[0]`. Additionally, the hover window details would only show the location of `spans[0]` next to the message.\r\n\r\n**Fix:**\r\n- Allow cargo check quick fix actions to be triggerable from multiple selection ranges. Specifically, if the selection intersects with any of the replacement spans, the quick fix action is shown.\r\n- No change in behavior for the hover window details. It's pretty minor and I think showing multiple locations next to the message may be more confusing anyways.\n\nCo-authored-by: Brandon <brandondong604@hotmail.com>", "tree": {"sha": "1d811487a0de1b1c29bce70d04d6a83807adacaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d811487a0de1b1c29bce70d04d6a83807adacaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a084e6aca05337a88a152593bf04bae28090df1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhrJoGCRBK7hj4Ov3rIwAAJmsIAKdO8qZvqFfv/Mjgxp+Ex/YX\nEgQ+qEPEia6OzQU9N26K5UgIKOUKUyfSmzSs43rIb/oT06FDXcyEFwX4mJHfZxg6\nBW5LaHlvHX5xH6K1ztqp9mqwfmNmv2ABrz0bVUGqitR+Xd3N/gldAcUNjDKJYP+V\nwnmIX7BSjSn4axXLO2h8uvAxoA/Uj6j2XkZpjbqY7oLY/31+xtZe/ds+d0CgCO+F\n2b+EV7zFS5aW5BUaR3OMlxQo1utHGlI31UUYkKWzcaD8UjEw1heQwu8MGo3wQpZr\nOZr6bdDXYWc3gEGpaLx1aAf2cTOd9VHq3cOIRIhitpFqkSI9VoQWFEPSlYtwQbA=\n=gPRt\n-----END PGP SIGNATURE-----\n", "payload": "tree 1d811487a0de1b1c29bce70d04d6a83807adacaa\nparent 6434ada19e7cf2e96015fb2668d64a0fdfc08b23\nparent fa2818551efcfe9f5269b2649a5f269749259509\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1638701574 +0000\ncommitter GitHub <noreply@github.com> 1638701574 +0000\n\nMerge #10902\n\n10902: Handle multiple cargo check quick fix spans r=Veykril a=brandondong\n\nResolves https://github.com/rust-analyzer/rust-analyzer/issues/10705.\r\n\r\n**Cause:**\r\n- For a cargo check diagnostic with multiple spans, only a single quick fix action would be created at the location of `spans[0]`. Additionally, the hover window details would only show the location of `spans[0]` next to the message.\r\n\r\n**Fix:**\r\n- Allow cargo check quick fix actions to be triggerable from multiple selection ranges. Specifically, if the selection intersects with any of the replacement spans, the quick fix action is shown.\r\n- No change in behavior for the hover window details. It's pretty minor and I think showing multiple locations next to the message may be more confusing anyways.\n\nCo-authored-by: Brandon <brandondong604@hotmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a084e6aca05337a88a152593bf04bae28090df1", "html_url": "https://github.com/rust-lang/rust/commit/8a084e6aca05337a88a152593bf04bae28090df1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a084e6aca05337a88a152593bf04bae28090df1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6434ada19e7cf2e96015fb2668d64a0fdfc08b23", "url": "https://api.github.com/repos/rust-lang/rust/commits/6434ada19e7cf2e96015fb2668d64a0fdfc08b23", "html_url": "https://github.com/rust-lang/rust/commit/6434ada19e7cf2e96015fb2668d64a0fdfc08b23"}, {"sha": "fa2818551efcfe9f5269b2649a5f269749259509", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa2818551efcfe9f5269b2649a5f269749259509", "html_url": "https://github.com/rust-lang/rust/commit/fa2818551efcfe9f5269b2649a5f269749259509"}], "stats": {"total": 655, "additions": 372, "deletions": 283}, "files": [{"sha": "56b3afce98a33a3fc04b6301363f8ec6c2c1ea73", "filename": "crates/rust-analyzer/src/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a084e6aca05337a88a152593bf04bae28090df1/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a084e6aca05337a88a152593bf04bae28090df1/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs?ref=8a084e6aca05337a88a152593bf04bae28090df1", "patch": "@@ -29,7 +29,8 @@ pub(crate) struct DiagnosticCollection {\n \n #[derive(Debug, Clone)]\n pub(crate) struct Fix {\n-    pub(crate) range: lsp_types::Range,\n+    // Fixes may be triggerable from multiple ranges.\n+    pub(crate) ranges: Vec<lsp_types::Range>,\n     pub(crate) action: lsp_ext::CodeAction,\n }\n \n@@ -43,7 +44,7 @@ impl DiagnosticCollection {\n         &mut self,\n         file_id: FileId,\n         diagnostic: lsp_types::Diagnostic,\n-        fixes: Vec<lsp_ext::CodeAction>,\n+        fix: Option<Fix>,\n     ) {\n         let diagnostics = self.check.entry(file_id).or_default();\n         for existing_diagnostic in diagnostics.iter() {\n@@ -53,10 +54,7 @@ impl DiagnosticCollection {\n         }\n \n         let check_fixes = Arc::make_mut(&mut self.check_fixes);\n-        check_fixes\n-            .entry(file_id)\n-            .or_default()\n-            .extend(fixes.into_iter().map(|action| Fix { range: diagnostic.range, action }));\n+        check_fixes.entry(file_id).or_default().extend(fix);\n         diagnostics.push(diagnostic);\n         self.changes.insert(file_id);\n     }"}, {"sha": "4610984acb989028a79ac126def764ec1de4c81b", "filename": "crates/rust-analyzer/src/diagnostics/test_data/clippy_pass_by_ref.txt", "status": "modified", "additions": 62, "deletions": 48, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/8a084e6aca05337a88a152593bf04bae28090df1/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fclippy_pass_by_ref.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8a084e6aca05337a88a152593bf04bae28090df1/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fclippy_pass_by_ref.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fclippy_pass_by_ref.txt?ref=8a084e6aca05337a88a152593bf04bae28090df1", "patch": "@@ -114,7 +114,7 @@\n             tags: None,\n             data: None,\n         },\n-        fixes: [],\n+        fix: None,\n     },\n     MappedRustDiagnostic {\n         url: Url {\n@@ -205,7 +205,7 @@\n             tags: None,\n             data: None,\n         },\n-        fixes: [],\n+        fix: None,\n     },\n     MappedRustDiagnostic {\n         url: Url {\n@@ -296,55 +296,69 @@\n             tags: None,\n             data: None,\n         },\n-        fixes: [\n-            CodeAction {\n-                title: \"consider passing by value instead: `self`\",\n-                group: None,\n-                kind: Some(\n-                    CodeActionKind(\n-                        \"quickfix\",\n+        fix: Some(\n+            Fix {\n+                ranges: [\n+                    Range {\n+                        start: Position {\n+                            line: 41,\n+                            character: 23,\n+                        },\n+                        end: Position {\n+                            line: 41,\n+                            character: 28,\n+                        },\n+                    },\n+                ],\n+                action: CodeAction {\n+                    title: \"consider passing by value instead: `self`\",\n+                    group: None,\n+                    kind: Some(\n+                        CodeActionKind(\n+                            \"quickfix\",\n+                        ),\n                     ),\n-                ),\n-                edit: Some(\n-                    SnippetWorkspaceEdit {\n-                        changes: Some(\n-                            {\n-                                Url {\n-                                    scheme: \"file\",\n-                                    cannot_be_a_base: false,\n-                                    username: \"\",\n-                                    password: None,\n-                                    host: None,\n-                                    port: None,\n-                                    path: \"/test/compiler/mir/tagset.rs\",\n-                                    query: None,\n-                                    fragment: None,\n-                                }: [\n-                                    TextEdit {\n-                                        range: Range {\n-                                            start: Position {\n-                                                line: 41,\n-                                                character: 23,\n-                                            },\n-                                            end: Position {\n-                                                line: 41,\n-                                                character: 28,\n+                    edit: Some(\n+                        SnippetWorkspaceEdit {\n+                            changes: Some(\n+                                {\n+                                    Url {\n+                                        scheme: \"file\",\n+                                        cannot_be_a_base: false,\n+                                        username: \"\",\n+                                        password: None,\n+                                        host: None,\n+                                        port: None,\n+                                        path: \"/test/compiler/mir/tagset.rs\",\n+                                        query: None,\n+                                        fragment: None,\n+                                    }: [\n+                                        TextEdit {\n+                                            range: Range {\n+                                                start: Position {\n+                                                    line: 41,\n+                                                    character: 23,\n+                                                },\n+                                                end: Position {\n+                                                    line: 41,\n+                                                    character: 28,\n+                                                },\n                                             },\n+                                            new_text: \"self\",\n                                         },\n-                                        new_text: \"self\",\n-                                    },\n-                                ],\n-                            },\n-                        ),\n-                        document_changes: None,\n-                        change_annotations: None,\n-                    },\n-                ),\n-                is_preferred: Some(\n-                    true,\n-                ),\n-                data: None,\n+                                    ],\n+                                },\n+                            ),\n+                            document_changes: None,\n+                            change_annotations: None,\n+                        },\n+                    ),\n+                    is_preferred: Some(\n+                        true,\n+                    ),\n+                    data: None,\n+                },\n             },\n-        ],\n+        ),\n     },\n ]"}, {"sha": "989e5cf66d86af716cbba99bf2166e085e967d7a", "filename": "crates/rust-analyzer/src/diagnostics/test_data/handles_macro_location.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a084e6aca05337a88a152593bf04bae28090df1/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fhandles_macro_location.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8a084e6aca05337a88a152593bf04bae28090df1/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fhandles_macro_location.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fhandles_macro_location.txt?ref=8a084e6aca05337a88a152593bf04bae28090df1", "patch": "@@ -59,6 +59,6 @@\n             tags: None,\n             data: None,\n         },\n-        fixes: [],\n+        fix: None,\n     },\n ]"}, {"sha": "fe5cf9b3bea7b1685fa72eaff5b87964f160d5f4", "filename": "crates/rust-analyzer/src/diagnostics/test_data/macro_compiler_error.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a084e6aca05337a88a152593bf04bae28090df1/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fmacro_compiler_error.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8a084e6aca05337a88a152593bf04bae28090df1/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fmacro_compiler_error.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fmacro_compiler_error.txt?ref=8a084e6aca05337a88a152593bf04bae28090df1", "patch": "@@ -64,7 +64,7 @@\n             tags: None,\n             data: None,\n         },\n-        fixes: [],\n+        fix: None,\n     },\n     MappedRustDiagnostic {\n         url: Url {\n@@ -131,7 +131,7 @@\n             tags: None,\n             data: None,\n         },\n-        fixes: [],\n+        fix: None,\n     },\n     MappedRustDiagnostic {\n         url: Url {\n@@ -224,6 +224,6 @@\n             tags: None,\n             data: None,\n         },\n-        fixes: [],\n+        fix: None,\n     },\n ]"}, {"sha": "dc36aa761c0663124f2a2ea93dc655c7211a6b31", "filename": "crates/rust-analyzer/src/diagnostics/test_data/rustc_incompatible_type_for_trait.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a084e6aca05337a88a152593bf04bae28090df1/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_incompatible_type_for_trait.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8a084e6aca05337a88a152593bf04bae28090df1/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_incompatible_type_for_trait.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_incompatible_type_for_trait.txt?ref=8a084e6aca05337a88a152593bf04bae28090df1", "patch": "@@ -59,6 +59,6 @@\n             tags: None,\n             data: None,\n         },\n-        fixes: [],\n+        fix: None,\n     },\n ]"}, {"sha": "d557196c2bd2455b890be4363636e8e585f75c64", "filename": "crates/rust-analyzer/src/diagnostics/test_data/rustc_mismatched_type.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a084e6aca05337a88a152593bf04bae28090df1/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_mismatched_type.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8a084e6aca05337a88a152593bf04bae28090df1/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_mismatched_type.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_mismatched_type.txt?ref=8a084e6aca05337a88a152593bf04bae28090df1", "patch": "@@ -59,6 +59,6 @@\n             tags: None,\n             data: None,\n         },\n-        fixes: [],\n+        fix: None,\n     },\n ]"}, {"sha": "46d44192c5cd92b05869a5fcdc8e82e105e9e093", "filename": "crates/rust-analyzer/src/diagnostics/test_data/rustc_unused_variable.txt", "status": "modified", "additions": 61, "deletions": 47, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/8a084e6aca05337a88a152593bf04bae28090df1/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8a084e6aca05337a88a152593bf04bae28090df1/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable.txt?ref=8a084e6aca05337a88a152593bf04bae28090df1", "patch": "@@ -72,7 +72,7 @@\n             ),\n             data: None,\n         },\n-        fixes: [],\n+        fix: None,\n     },\n     MappedRustDiagnostic {\n         url: Url {\n@@ -143,55 +143,69 @@\n             tags: None,\n             data: None,\n         },\n-        fixes: [\n-            CodeAction {\n-                title: \"consider prefixing with an underscore: `_foo`\",\n-                group: None,\n-                kind: Some(\n-                    CodeActionKind(\n-                        \"quickfix\",\n+        fix: Some(\n+            Fix {\n+                ranges: [\n+                    Range {\n+                        start: Position {\n+                            line: 290,\n+                            character: 8,\n+                        },\n+                        end: Position {\n+                            line: 290,\n+                            character: 11,\n+                        },\n+                    },\n+                ],\n+                action: CodeAction {\n+                    title: \"consider prefixing with an underscore: `_foo`\",\n+                    group: None,\n+                    kind: Some(\n+                        CodeActionKind(\n+                            \"quickfix\",\n+                        ),\n                     ),\n-                ),\n-                edit: Some(\n-                    SnippetWorkspaceEdit {\n-                        changes: Some(\n-                            {\n-                                Url {\n-                                    scheme: \"file\",\n-                                    cannot_be_a_base: false,\n-                                    username: \"\",\n-                                    password: None,\n-                                    host: None,\n-                                    port: None,\n-                                    path: \"/test/driver/subcommand/repl.rs\",\n-                                    query: None,\n-                                    fragment: None,\n-                                }: [\n-                                    TextEdit {\n-                                        range: Range {\n-                                            start: Position {\n-                                                line: 290,\n-                                                character: 8,\n-                                            },\n-                                            end: Position {\n-                                                line: 290,\n-                                                character: 11,\n+                    edit: Some(\n+                        SnippetWorkspaceEdit {\n+                            changes: Some(\n+                                {\n+                                    Url {\n+                                        scheme: \"file\",\n+                                        cannot_be_a_base: false,\n+                                        username: \"\",\n+                                        password: None,\n+                                        host: None,\n+                                        port: None,\n+                                        path: \"/test/driver/subcommand/repl.rs\",\n+                                        query: None,\n+                                        fragment: None,\n+                                    }: [\n+                                        TextEdit {\n+                                            range: Range {\n+                                                start: Position {\n+                                                    line: 290,\n+                                                    character: 8,\n+                                                },\n+                                                end: Position {\n+                                                    line: 290,\n+                                                    character: 11,\n+                                                },\n                                             },\n+                                            new_text: \"_foo\",\n                                         },\n-                                        new_text: \"_foo\",\n-                                    },\n-                                ],\n-                            },\n-                        ),\n-                        document_changes: None,\n-                        change_annotations: None,\n-                    },\n-                ),\n-                is_preferred: Some(\n-                    true,\n-                ),\n-                data: None,\n+                                    ],\n+                                },\n+                            ),\n+                            document_changes: None,\n+                            change_annotations: None,\n+                        },\n+                    ),\n+                    is_preferred: Some(\n+                        true,\n+                    ),\n+                    data: None,\n+                },\n             },\n-        ],\n+        ),\n     },\n ]"}, {"sha": "b595487e8f3630e5cb9b48b4143c09758824949a", "filename": "crates/rust-analyzer/src/diagnostics/test_data/rustc_unused_variable_as_hint.txt", "status": "modified", "additions": 61, "deletions": 47, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/8a084e6aca05337a88a152593bf04bae28090df1/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable_as_hint.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8a084e6aca05337a88a152593bf04bae28090df1/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable_as_hint.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable_as_hint.txt?ref=8a084e6aca05337a88a152593bf04bae28090df1", "patch": "@@ -72,7 +72,7 @@\n             ),\n             data: None,\n         },\n-        fixes: [],\n+        fix: None,\n     },\n     MappedRustDiagnostic {\n         url: Url {\n@@ -143,55 +143,69 @@\n             tags: None,\n             data: None,\n         },\n-        fixes: [\n-            CodeAction {\n-                title: \"consider prefixing with an underscore: `_foo`\",\n-                group: None,\n-                kind: Some(\n-                    CodeActionKind(\n-                        \"quickfix\",\n+        fix: Some(\n+            Fix {\n+                ranges: [\n+                    Range {\n+                        start: Position {\n+                            line: 290,\n+                            character: 8,\n+                        },\n+                        end: Position {\n+                            line: 290,\n+                            character: 11,\n+                        },\n+                    },\n+                ],\n+                action: CodeAction {\n+                    title: \"consider prefixing with an underscore: `_foo`\",\n+                    group: None,\n+                    kind: Some(\n+                        CodeActionKind(\n+                            \"quickfix\",\n+                        ),\n                     ),\n-                ),\n-                edit: Some(\n-                    SnippetWorkspaceEdit {\n-                        changes: Some(\n-                            {\n-                                Url {\n-                                    scheme: \"file\",\n-                                    cannot_be_a_base: false,\n-                                    username: \"\",\n-                                    password: None,\n-                                    host: None,\n-                                    port: None,\n-                                    path: \"/test/driver/subcommand/repl.rs\",\n-                                    query: None,\n-                                    fragment: None,\n-                                }: [\n-                                    TextEdit {\n-                                        range: Range {\n-                                            start: Position {\n-                                                line: 290,\n-                                                character: 8,\n-                                            },\n-                                            end: Position {\n-                                                line: 290,\n-                                                character: 11,\n+                    edit: Some(\n+                        SnippetWorkspaceEdit {\n+                            changes: Some(\n+                                {\n+                                    Url {\n+                                        scheme: \"file\",\n+                                        cannot_be_a_base: false,\n+                                        username: \"\",\n+                                        password: None,\n+                                        host: None,\n+                                        port: None,\n+                                        path: \"/test/driver/subcommand/repl.rs\",\n+                                        query: None,\n+                                        fragment: None,\n+                                    }: [\n+                                        TextEdit {\n+                                            range: Range {\n+                                                start: Position {\n+                                                    line: 290,\n+                                                    character: 8,\n+                                                },\n+                                                end: Position {\n+                                                    line: 290,\n+                                                    character: 11,\n+                                                },\n                                             },\n+                                            new_text: \"_foo\",\n                                         },\n-                                        new_text: \"_foo\",\n-                                    },\n-                                ],\n-                            },\n-                        ),\n-                        document_changes: None,\n-                        change_annotations: None,\n-                    },\n-                ),\n-                is_preferred: Some(\n-                    true,\n-                ),\n-                data: None,\n+                                    ],\n+                                },\n+                            ),\n+                            document_changes: None,\n+                            change_annotations: None,\n+                        },\n+                    ),\n+                    is_preferred: Some(\n+                        true,\n+                    ),\n+                    data: None,\n+                },\n             },\n-        ],\n+        ),\n     },\n ]"}, {"sha": "3ee50392a7fce99418cf0453947ef08150a2deaf", "filename": "crates/rust-analyzer/src/diagnostics/test_data/rustc_unused_variable_as_info.txt", "status": "modified", "additions": 61, "deletions": 47, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/8a084e6aca05337a88a152593bf04bae28090df1/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable_as_info.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8a084e6aca05337a88a152593bf04bae28090df1/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable_as_info.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable_as_info.txt?ref=8a084e6aca05337a88a152593bf04bae28090df1", "patch": "@@ -72,7 +72,7 @@\n             ),\n             data: None,\n         },\n-        fixes: [],\n+        fix: None,\n     },\n     MappedRustDiagnostic {\n         url: Url {\n@@ -143,55 +143,69 @@\n             tags: None,\n             data: None,\n         },\n-        fixes: [\n-            CodeAction {\n-                title: \"consider prefixing with an underscore: `_foo`\",\n-                group: None,\n-                kind: Some(\n-                    CodeActionKind(\n-                        \"quickfix\",\n+        fix: Some(\n+            Fix {\n+                ranges: [\n+                    Range {\n+                        start: Position {\n+                            line: 290,\n+                            character: 8,\n+                        },\n+                        end: Position {\n+                            line: 290,\n+                            character: 11,\n+                        },\n+                    },\n+                ],\n+                action: CodeAction {\n+                    title: \"consider prefixing with an underscore: `_foo`\",\n+                    group: None,\n+                    kind: Some(\n+                        CodeActionKind(\n+                            \"quickfix\",\n+                        ),\n                     ),\n-                ),\n-                edit: Some(\n-                    SnippetWorkspaceEdit {\n-                        changes: Some(\n-                            {\n-                                Url {\n-                                    scheme: \"file\",\n-                                    cannot_be_a_base: false,\n-                                    username: \"\",\n-                                    password: None,\n-                                    host: None,\n-                                    port: None,\n-                                    path: \"/test/driver/subcommand/repl.rs\",\n-                                    query: None,\n-                                    fragment: None,\n-                                }: [\n-                                    TextEdit {\n-                                        range: Range {\n-                                            start: Position {\n-                                                line: 290,\n-                                                character: 8,\n-                                            },\n-                                            end: Position {\n-                                                line: 290,\n-                                                character: 11,\n+                    edit: Some(\n+                        SnippetWorkspaceEdit {\n+                            changes: Some(\n+                                {\n+                                    Url {\n+                                        scheme: \"file\",\n+                                        cannot_be_a_base: false,\n+                                        username: \"\",\n+                                        password: None,\n+                                        host: None,\n+                                        port: None,\n+                                        path: \"/test/driver/subcommand/repl.rs\",\n+                                        query: None,\n+                                        fragment: None,\n+                                    }: [\n+                                        TextEdit {\n+                                            range: Range {\n+                                                start: Position {\n+                                                    line: 290,\n+                                                    character: 8,\n+                                                },\n+                                                end: Position {\n+                                                    line: 290,\n+                                                    character: 11,\n+                                                },\n                                             },\n+                                            new_text: \"_foo\",\n                                         },\n-                                        new_text: \"_foo\",\n-                                    },\n-                                ],\n-                            },\n-                        ),\n-                        document_changes: None,\n-                        change_annotations: None,\n-                    },\n-                ),\n-                is_preferred: Some(\n-                    true,\n-                ),\n-                data: None,\n+                                    ],\n+                                },\n+                            ),\n+                            document_changes: None,\n+                            change_annotations: None,\n+                        },\n+                    ),\n+                    is_preferred: Some(\n+                        true,\n+                    ),\n+                    data: None,\n+                },\n             },\n-        ],\n+        ),\n     },\n ]"}, {"sha": "8ec92888ce1155c8cd66651e6767c0fd24369acd", "filename": "crates/rust-analyzer/src/diagnostics/test_data/rustc_wrong_number_of_parameters.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a084e6aca05337a88a152593bf04bae28090df1/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_wrong_number_of_parameters.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8a084e6aca05337a88a152593bf04bae28090df1/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_wrong_number_of_parameters.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_wrong_number_of_parameters.txt?ref=8a084e6aca05337a88a152593bf04bae28090df1", "patch": "@@ -88,7 +88,7 @@\n             tags: None,\n             data: None,\n         },\n-        fixes: [],\n+        fix: None,\n     },\n     MappedRustDiagnostic {\n         url: Url {\n@@ -179,6 +179,6 @@\n             tags: None,\n             data: None,\n         },\n-        fixes: [],\n+        fix: None,\n     },\n ]"}, {"sha": "d7987f65eda6b344d2503e748390fb1ef2dd25ab", "filename": "crates/rust-analyzer/src/diagnostics/test_data/snap_multi_line_fix.txt", "status": "modified", "additions": 83, "deletions": 59, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/8a084e6aca05337a88a152593bf04bae28090df1/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fsnap_multi_line_fix.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8a084e6aca05337a88a152593bf04bae28090df1/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fsnap_multi_line_fix.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fsnap_multi_line_fix.txt?ref=8a084e6aca05337a88a152593bf04bae28090df1", "patch": "@@ -114,7 +114,7 @@\n             tags: None,\n             data: None,\n         },\n-        fixes: [],\n+        fix: None,\n     },\n     MappedRustDiagnostic {\n         url: Url {\n@@ -205,7 +205,7 @@\n             tags: None,\n             data: None,\n         },\n-        fixes: [],\n+        fix: None,\n     },\n     MappedRustDiagnostic {\n         url: Url {\n@@ -296,68 +296,92 @@\n             tags: None,\n             data: None,\n         },\n-        fixes: [\n-            CodeAction {\n-                title: \"return the expression directly: `(0..10).collect()`\",\n-                group: None,\n-                kind: Some(\n-                    CodeActionKind(\n-                        \"quickfix\",\n+        fix: Some(\n+            Fix {\n+                ranges: [\n+                    Range {\n+                        start: Position {\n+                            line: 2,\n+                            character: 4,\n+                        },\n+                        end: Position {\n+                            line: 2,\n+                            character: 30,\n+                        },\n+                    },\n+                    Range {\n+                        start: Position {\n+                            line: 3,\n+                            character: 4,\n+                        },\n+                        end: Position {\n+                            line: 3,\n+                            character: 5,\n+                        },\n+                    },\n+                ],\n+                action: CodeAction {\n+                    title: \"return the expression directly: `(0..10).collect()`\",\n+                    group: None,\n+                    kind: Some(\n+                        CodeActionKind(\n+                            \"quickfix\",\n+                        ),\n                     ),\n-                ),\n-                edit: Some(\n-                    SnippetWorkspaceEdit {\n-                        changes: Some(\n-                            {\n-                                Url {\n-                                    scheme: \"file\",\n-                                    cannot_be_a_base: false,\n-                                    username: \"\",\n-                                    password: None,\n-                                    host: None,\n-                                    port: None,\n-                                    path: \"/test/src/main.rs\",\n-                                    query: None,\n-                                    fragment: None,\n-                                }: [\n-                                    TextEdit {\n-                                        range: Range {\n-                                            start: Position {\n-                                                line: 2,\n-                                                character: 4,\n-                                            },\n-                                            end: Position {\n-                                                line: 2,\n-                                                character: 30,\n+                    edit: Some(\n+                        SnippetWorkspaceEdit {\n+                            changes: Some(\n+                                {\n+                                    Url {\n+                                        scheme: \"file\",\n+                                        cannot_be_a_base: false,\n+                                        username: \"\",\n+                                        password: None,\n+                                        host: None,\n+                                        port: None,\n+                                        path: \"/test/src/main.rs\",\n+                                        query: None,\n+                                        fragment: None,\n+                                    }: [\n+                                        TextEdit {\n+                                            range: Range {\n+                                                start: Position {\n+                                                    line: 2,\n+                                                    character: 4,\n+                                                },\n+                                                end: Position {\n+                                                    line: 2,\n+                                                    character: 30,\n+                                                },\n                                             },\n+                                            new_text: \"\",\n                                         },\n-                                        new_text: \"\",\n-                                    },\n-                                    TextEdit {\n-                                        range: Range {\n-                                            start: Position {\n-                                                line: 3,\n-                                                character: 4,\n-                                            },\n-                                            end: Position {\n-                                                line: 3,\n-                                                character: 5,\n+                                        TextEdit {\n+                                            range: Range {\n+                                                start: Position {\n+                                                    line: 3,\n+                                                    character: 4,\n+                                                },\n+                                                end: Position {\n+                                                    line: 3,\n+                                                    character: 5,\n+                                                },\n                                             },\n+                                            new_text: \"(0..10).collect()\",\n                                         },\n-                                        new_text: \"(0..10).collect()\",\n-                                    },\n-                                ],\n-                            },\n-                        ),\n-                        document_changes: None,\n-                        change_annotations: None,\n-                    },\n-                ),\n-                is_preferred: Some(\n-                    true,\n-                ),\n-                data: None,\n+                                    ],\n+                                },\n+                            ),\n+                            document_changes: None,\n+                            change_annotations: None,\n+                        },\n+                    ),\n+                    is_preferred: Some(\n+                        true,\n+                    ),\n+                    data: None,\n+                },\n             },\n-        ],\n+        ),\n     },\n ]"}, {"sha": "5f936ee0865608731b895e65bd4984fe205c89d0", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8a084e6aca05337a88a152593bf04bae28090df1/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a084e6aca05337a88a152593bf04bae28090df1/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=8a084e6aca05337a88a152593bf04bae28090df1", "patch": "@@ -9,7 +9,7 @@ use vfs::{AbsPath, AbsPathBuf};\n \n use crate::{lsp_ext, to_proto::url_from_abs_path};\n \n-use super::DiagnosticsMapConfig;\n+use super::{DiagnosticsMapConfig, Fix};\n \n /// Determines the LSP severity from a diagnostic\n fn diagnostic_severity(\n@@ -124,7 +124,7 @@ fn resolve_path(\n \n struct SubDiagnostic {\n     related: lsp_types::DiagnosticRelatedInformation,\n-    suggested_fix: Option<lsp_ext::CodeAction>,\n+    suggested_fix: Option<Fix>,\n }\n \n enum MappedRustChildDiagnostic {\n@@ -181,18 +181,24 @@ fn map_rust_child_diagnostic(\n                 location: location(config, workspace_root, spans[0]),\n                 message: message.clone(),\n             },\n-            suggested_fix: Some(lsp_ext::CodeAction {\n-                title: message,\n-                group: None,\n-                kind: Some(lsp_types::CodeActionKind::QUICKFIX),\n-                edit: Some(lsp_ext::SnippetWorkspaceEdit {\n-                    // FIXME: there's no good reason to use edit_map here....\n-                    changes: Some(edit_map),\n-                    document_changes: None,\n-                    change_annotations: None,\n-                }),\n-                is_preferred: Some(true),\n-                data: None,\n+            suggested_fix: Some(Fix {\n+                ranges: spans\n+                    .iter()\n+                    .map(|&span| location(config, workspace_root, span).range)\n+                    .collect(),\n+                action: lsp_ext::CodeAction {\n+                    title: message,\n+                    group: None,\n+                    kind: Some(lsp_types::CodeActionKind::QUICKFIX),\n+                    edit: Some(lsp_ext::SnippetWorkspaceEdit {\n+                        // FIXME: there's no good reason to use edit_map here....\n+                        changes: Some(edit_map),\n+                        document_changes: None,\n+                        change_annotations: None,\n+                    }),\n+                    is_preferred: Some(true),\n+                    data: None,\n+                },\n             }),\n         })\n     }\n@@ -202,7 +208,7 @@ fn map_rust_child_diagnostic(\n pub(crate) struct MappedRustDiagnostic {\n     pub(crate) url: lsp_types::Url,\n     pub(crate) diagnostic: lsp_types::Diagnostic,\n-    pub(crate) fixes: Vec<lsp_ext::CodeAction>,\n+    pub(crate) fix: Option<Fix>,\n }\n \n /// Converts a Rust root diagnostic to LSP form\n@@ -359,7 +365,7 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n                 diagnostics.push(MappedRustDiagnostic {\n                     url: secondary_location.uri,\n                     diagnostic,\n-                    fixes: Vec::new(),\n+                    fix: None,\n                 });\n             }\n \n@@ -388,7 +394,7 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n                     tags: if tags.is_empty() { None } else { Some(tags.clone()) },\n                     data: None,\n                 },\n-                fixes: Vec::new(),\n+                fix: None,\n             });\n \n             // Emit hint-level diagnostics for all `related_information` entries such as \"help\"s.\n@@ -405,7 +411,7 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n                 }\n                 diagnostics.push(MappedRustDiagnostic {\n                     url: sub.related.location.uri.clone(),\n-                    fixes: sub.suggested_fix.iter().cloned().collect(),\n+                    fix: sub.suggested_fix.clone(),\n                     diagnostic: lsp_types::Diagnostic {\n                         range: sub.related.location.range,\n                         severity: Some(lsp_types::DiagnosticSeverity::HINT),"}, {"sha": "bf153012d94b0811b38b9ddabaeca7bffa2620da", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8a084e6aca05337a88a152593bf04bae28090df1/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a084e6aca05337a88a152593bf04bae28090df1/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=8a084e6aca05337a88a152593bf04bae28090df1", "patch": "@@ -1081,8 +1081,13 @@ pub(crate) fn handle_code_action(\n     for fix in snap.check_fixes.get(&frange.file_id).into_iter().flatten() {\n         // FIXME: this mapping is awkward and shouldn't exist. Refactor\n         // `snap.check_fixes` to not convert to LSP prematurely.\n-        let fix_range = from_proto::text_range(&line_index, fix.range);\n-        if fix_range.intersect(frange.range).is_some() {\n+        let intersect_fix_range = fix\n+            .ranges\n+            .iter()\n+            .copied()\n+            .map(|range| from_proto::text_range(&line_index, range))\n+            .any(|fix_range| fix_range.intersect(frange.range).is_some());\n+        if intersect_fix_range {\n             res.push(fix.action.clone());\n         }\n     }"}, {"sha": "2d83cbee669353f10a77f8bd22b6fc807557a63a", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a084e6aca05337a88a152593bf04bae28090df1/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a084e6aca05337a88a152593bf04bae28090df1/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=8a084e6aca05337a88a152593bf04bae28090df1", "patch": "@@ -370,7 +370,7 @@ impl GlobalState {\n                                     Ok(file_id) => self.diagnostics.add_check_diagnostic(\n                                         file_id,\n                                         diag.diagnostic,\n-                                        diag.fixes,\n+                                        diag.fix,\n                                     ),\n                                     Err(err) => {\n                                         tracing::error!("}]}