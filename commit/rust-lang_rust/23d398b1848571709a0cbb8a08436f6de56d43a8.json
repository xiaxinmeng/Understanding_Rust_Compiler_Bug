{"sha": "23d398b1848571709a0cbb8a08436f6de56d43a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzZDM5OGIxODQ4NTcxNzA5YTBjYmI4YTA4NDM2ZjZkZTU2ZDQzYTg=", "commit": {"author": {"name": "Jade", "email": "software@lfcode.ca", "date": "2021-08-06T02:46:26Z"}, "committer": {"name": "Jade", "email": "software@lfcode.ca", "date": "2021-08-10T21:40:26Z"}, "message": "tree-wide: Fix all the rustdoc warnings", "tree": {"sha": "fb1947d197f94ec8243ae0f7e6f9d6c10ef43b26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb1947d197f94ec8243ae0f7e6f9d6c10ef43b26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23d398b1848571709a0cbb8a08436f6de56d43a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23d398b1848571709a0cbb8a08436f6de56d43a8", "html_url": "https://github.com/rust-lang/rust/commit/23d398b1848571709a0cbb8a08436f6de56d43a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23d398b1848571709a0cbb8a08436f6de56d43a8/comments", "author": {"login": "lf-", "id": 6652840, "node_id": "MDQ6VXNlcjY2NTI4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6652840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lf-", "html_url": "https://github.com/lf-", "followers_url": "https://api.github.com/users/lf-/followers", "following_url": "https://api.github.com/users/lf-/following{/other_user}", "gists_url": "https://api.github.com/users/lf-/gists{/gist_id}", "starred_url": "https://api.github.com/users/lf-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lf-/subscriptions", "organizations_url": "https://api.github.com/users/lf-/orgs", "repos_url": "https://api.github.com/users/lf-/repos", "events_url": "https://api.github.com/users/lf-/events{/privacy}", "received_events_url": "https://api.github.com/users/lf-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lf-", "id": 6652840, "node_id": "MDQ6VXNlcjY2NTI4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6652840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lf-", "html_url": "https://github.com/lf-", "followers_url": "https://api.github.com/users/lf-/followers", "following_url": "https://api.github.com/users/lf-/following{/other_user}", "gists_url": "https://api.github.com/users/lf-/gists{/gist_id}", "starred_url": "https://api.github.com/users/lf-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lf-/subscriptions", "organizations_url": "https://api.github.com/users/lf-/orgs", "repos_url": "https://api.github.com/users/lf-/repos", "events_url": "https://api.github.com/users/lf-/events{/privacy}", "received_events_url": "https://api.github.com/users/lf-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c78cc7ac1f1e89cd2e12d29374e1c5e6110d9217", "url": "https://api.github.com/repos/rust-lang/rust/commits/c78cc7ac1f1e89cd2e12d29374e1c5e6110d9217", "html_url": "https://github.com/rust-lang/rust/commit/c78cc7ac1f1e89cd2e12d29374e1c5e6110d9217"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "5a50cc48d61bfce7e62f03719cdbc2028adb8a57", "filename": "clippy_lints/src/needless_continue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d398b1848571709a0cbb8a08436f6de56d43a8/clippy_lints%2Fsrc%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d398b1848571709a0cbb8a08436f6de56d43a8/clippy_lints%2Fsrc%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_continue.rs?ref=23d398b1848571709a0cbb8a08436f6de56d43a8", "patch": "@@ -422,7 +422,7 @@ fn check_and_warn<'a>(cx: &EarlyContext<'_>, expr: &'a ast::Expr) {\n ///\n /// is transformed to\n ///\n-/// ```ignore\n+/// ```text\n ///     {\n ///         let x = 5;\n /// ```"}, {"sha": "9a6ddc72ce56a04ca17199e8b1baa700763dafcf", "filename": "clippy_lints/src/needless_for_each.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d398b1848571709a0cbb8a08436f6de56d43a8/clippy_lints%2Fsrc%2Fneedless_for_each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d398b1848571709a0cbb8a08436f6de56d43a8/clippy_lints%2Fsrc%2Fneedless_for_each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_for_each.rs?ref=23d398b1848571709a0cbb8a08436f6de56d43a8", "patch": "@@ -122,7 +122,7 @@ impl LateLintPass<'_> for NeedlessForEach {\n /// 2. Detect use of `return` in `Loop` in the closure body.\n ///\n /// NOTE: The functionality of this type is similar to\n-/// [`crate::utilts::visitors::find_all_ret_expressions`], but we can't use\n+/// [`clippy_utils::visitors::find_all_ret_expressions`], but we can't use\n /// `find_all_ret_expressions` instead of this type. The reasons are:\n /// 1. `find_all_ret_expressions` passes the argument of `ExprKind::Ret` to a callback, but what we\n ///    need here is `ExprKind::Ret` itself."}, {"sha": "71cfa196fc335f93d7b62e5d0234e08a08f33780", "filename": "clippy_utils/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23d398b1848571709a0cbb8a08436f6de56d43a8/clippy_utils%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d398b1848571709a0cbb8a08436f6de56d43a8/clippy_utils%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fdiagnostics.rs?ref=23d398b1848571709a0cbb8a08436f6de56d43a8", "patch": "@@ -65,7 +65,7 @@ pub fn span_lint<T: LintContext>(cx: &T, lint: &'static Lint, sp: impl Into<Mult\n ///\n /// # Example\n ///\n-/// ```ignore\n+/// ```text\n /// error: constant division of 0.0 with 0.0 will always result in NaN\n ///   --> $DIR/zero_div_zero.rs:6:25\n ///    |\n@@ -103,7 +103,7 @@ pub fn span_lint_and_help<'a, T: LintContext>(\n ///\n /// # Example\n ///\n-/// ```ignore\n+/// ```text\n /// error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n ///   --> $DIR/drop_forget_ref.rs:10:5\n ///    |\n@@ -189,7 +189,7 @@ pub fn span_lint_hir_and_then(\n ///\n /// # Example\n ///\n-/// ```ignore\n+/// ```text\n /// error: This `.fold` can be more succinctly expressed as `.any`\n /// --> $DIR/methods.rs:390:13\n ///     |"}, {"sha": "884180f0586e38a237d4f7e8561115e6a8f6ea67", "filename": "clippy_utils/src/higher.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23d398b1848571709a0cbb8a08436f6de56d43a8/clippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d398b1848571709a0cbb8a08436f6de56d43a8/clippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhigher.rs?ref=23d398b1848571709a0cbb8a08436f6de56d43a8", "patch": "@@ -195,8 +195,8 @@ pub fn vec_macro<'e>(cx: &LateContext<'_>, expr: &'e hir::Expr<'_>) -> Option<Ve\n /// - `assert!`, `assert_eq!` and `assert_ne!`\n /// - `debug_assert!`, `debug_assert_eq!` and `debug_assert_ne!`\n /// For example:\n-/// `assert!(expr)` will return Some([expr])\n-/// `debug_assert_eq!(a, b)` will return Some([a, b])\n+/// `assert!(expr)` will return `Some([expr])`\n+/// `debug_assert_eq!(a, b)` will return `Some([a, b])`\n pub fn extract_assert_macro_args<'tcx>(e: &'tcx Expr<'tcx>) -> Option<Vec<&'tcx Expr<'tcx>>> {\n     /// Try to match the AST for a pattern that contains a match, for example when two args are\n     /// compared\n@@ -283,7 +283,7 @@ pub struct FormatArgsExpn<'tcx> {\n \n     /// String literal expressions which represent the format string split by \"{}\"\n     pub format_string_parts: &'tcx [Expr<'tcx>],\n-    /// Symbols corresponding to [`format_string_parts`]\n+    /// Symbols corresponding to [`Self::format_string_parts`]\n     pub format_string_symbols: Vec<Symbol>,\n     /// Expressions like `ArgumentV1::new(arg0, Debug::fmt)`\n     pub args: &'tcx [Expr<'tcx>],"}, {"sha": "4f9aaf396b806dbe0b7d56c8eab2298e9af18922", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d398b1848571709a0cbb8a08436f6de56d43a8/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d398b1848571709a0cbb8a08436f6de56d43a8/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=23d398b1848571709a0cbb8a08436f6de56d43a8", "patch": "@@ -114,7 +114,7 @@ pub fn has_iter_method(cx: &LateContext<'_>, probably_ref_ty: Ty<'_>) -> Option<\n \n /// Checks whether a type implements a trait.\n /// The function returns false in case the type contains an inference variable.\n-/// See also [`get_trait_def_id`].\n+/// See also [`get_trait_def_id`](super::get_trait_def_id).\n pub fn implements_trait<'tcx>(\n     cx: &LateContext<'tcx>,\n     ty: Ty<'tcx>,"}]}