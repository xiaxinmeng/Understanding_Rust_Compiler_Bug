{"sha": "1ce1aae28273ded3be991d1f29339ce08a5fc220", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjZTFhYWUyODI3M2RlZDNiZTk5MWQxZjI5MzM5Y2UwOGE1ZmMyMjA=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-09-25T09:01:09Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-09-25T09:01:09Z"}, "message": "Fold ErrorCheckVisitor into Liveness.  Removed some @allocation.", "tree": {"sha": "a2da0c40b2d6a6d92c991011e2a5414e0aa06b4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2da0c40b2d6a6d92c991011e2a5414e0aa06b4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ce1aae28273ded3be991d1f29339ce08a5fc220", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ce1aae28273ded3be991d1f29339ce08a5fc220", "html_url": "https://github.com/rust-lang/rust/commit/1ce1aae28273ded3be991d1f29339ce08a5fc220", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ce1aae28273ded3be991d1f29339ce08a5fc220/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffc92094710b8d7e75fa412c3a1f09ce71c979a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffc92094710b8d7e75fa412c3a1f09ce71c979a4", "html_url": "https://github.com/rust-lang/rust/commit/ffc92094710b8d7e75fa412c3a1f09ce71c979a4"}], "stats": {"total": 66, "additions": 31, "deletions": 35}, "files": [{"sha": "9e28bfcb964c401b1be1aabbe59b81d009cf925d", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 31, "deletions": 35, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/1ce1aae28273ded3be991d1f29339ce08a5fc220/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce1aae28273ded3be991d1f29339ce08a5fc220/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=1ce1aae28273ded3be991d1f29339ce08a5fc220", "patch": "@@ -345,20 +345,18 @@ impl IrMaps {\n     }\n }\n \n-struct ErrorCheckVisitor;\n-\n-impl Visitor<@Liveness> for ErrorCheckVisitor {\n-    fn visit_fn(&mut self, fk:&fn_kind, fd:&fn_decl, b:&Block, s:Span, n:NodeId, e:@Liveness) {\n-        check_fn(self, fk, fd, b, s, n, e);\n+impl Visitor<()> for Liveness {\n+    fn visit_fn(&mut self, fk:&fn_kind, fd:&fn_decl, b:&Block, s:Span, n:NodeId, _:()) {\n+        check_fn(self, fk, fd, b, s, n);\n     }\n-    fn visit_local(&mut self, l:@Local, e:@Liveness) {\n-        check_local(self, l, e);\n+    fn visit_local(&mut self, l:@Local, _:()) {\n+        check_local(self, l);\n     }\n-    fn visit_expr(&mut self, ex:@Expr, e:@Liveness) {\n-        check_expr(self, ex, e);\n+    fn visit_expr(&mut self, ex:@Expr, _:()) {\n+        check_expr(self, ex);\n     }\n-    fn visit_arm(&mut self, a:&Arm, e:@Liveness) {\n-        check_arm(self, a, e);\n+    fn visit_arm(&mut self, a:&Arm, _:()) {\n+        check_arm(self, a);\n     }\n }\n \n@@ -419,12 +417,11 @@ fn visit_fn(v: &mut LivenessVisitor,\n     };\n \n     // compute liveness\n-    let lsets = @Liveness(fn_maps, specials);\n-    let entry_ln = (*lsets).compute(decl, body);\n+    let mut lsets = Liveness(fn_maps, specials);\n+    let entry_ln = lsets.compute(decl, body);\n \n     // check for various error conditions\n-    let mut check_vt = ErrorCheckVisitor;\n-    check_vt.visit_block(body, lsets);\n+    lsets.visit_block(body, ());\n     lsets.check_ret(id, sp, fk, entry_ln);\n     lsets.warn_about_unused_args(decl, entry_ln);\n }\n@@ -1423,7 +1420,7 @@ impl Liveness {\n // _______________________________________________________________________\n // Checking for error conditions\n \n-fn check_local(vt: &mut ErrorCheckVisitor, local: @Local, this: @Liveness) {\n+fn check_local(this: &mut Liveness, local: @Local) {\n     match local.init {\n       Some(_) => {\n         this.warn_about_unused_or_dead_vars_in_pat(local.pat);\n@@ -1449,48 +1446,48 @@ fn check_local(vt: &mut ErrorCheckVisitor, local: @Local, this: @Liveness) {\n       }\n     }\n \n-    visit::walk_local(vt, local, this);\n+    visit::walk_local(this, local, ());\n }\n \n-fn check_arm(vt: &mut ErrorCheckVisitor, arm: &Arm, this: @Liveness) {\n+fn check_arm(this: &mut Liveness, arm: &Arm) {\n     do this.arm_pats_bindings(arm.pats) |ln, var, sp, id| {\n         this.warn_about_unused(sp, id, ln, var);\n     }\n-    visit::walk_arm(vt, arm, this);\n+    visit::walk_arm(this, arm, ());\n }\n \n-fn check_expr(vt: &mut ErrorCheckVisitor, expr: @Expr, this: @Liveness) {\n+fn check_expr(this: &mut Liveness, expr: @Expr) {\n     match expr.node {\n       ExprAssign(l, r) => {\n-        this.check_lvalue(l, vt);\n-        vt.visit_expr(r, this);\n+        this.check_lvalue(l);\n+        this.visit_expr(r, ());\n \n-        visit::walk_expr(vt, expr, this);\n+        visit::walk_expr(this, expr, ());\n       }\n \n       ExprAssignOp(_, _, l, _) => {\n-        this.check_lvalue(l, vt);\n+        this.check_lvalue(l);\n \n-        visit::walk_expr(vt, expr, this);\n+        visit::walk_expr(this, expr, ());\n       }\n \n       ExprInlineAsm(ref ia) => {\n         for &(_, input) in ia.inputs.iter() {\n-          vt.visit_expr(input, this);\n+          this.visit_expr(input, ());\n         }\n \n         // Output operands must be lvalues\n         for &(_, out) in ia.outputs.iter() {\n           match out.node {\n             ExprAddrOf(_, inner) => {\n-              this.check_lvalue(inner, vt);\n+              this.check_lvalue(inner);\n             }\n             _ => {}\n           }\n-          vt.visit_expr(out, this);\n+          this.visit_expr(out, ());\n         }\n \n-        visit::walk_expr(vt, expr, this);\n+        visit::walk_expr(this, expr, ());\n       }\n \n       // no correctness conditions related to liveness\n@@ -1502,19 +1499,18 @@ fn check_expr(vt: &mut ErrorCheckVisitor, expr: @Expr, this: @Liveness) {\n       ExprAgain(*) | ExprLit(_) | ExprBlock(*) |\n       ExprMac(*) | ExprAddrOf(*) | ExprStruct(*) | ExprRepeat(*) |\n       ExprParen(*) | ExprFnBlock(*) | ExprPath(*) | ExprSelf(*) => {\n-        visit::walk_expr(vt, expr, this);\n+        visit::walk_expr(this, expr, ());\n       }\n       ExprForLoop(*) => fail!(\"non-desugared expr_for_loop\")\n     }\n }\n \n-fn check_fn(_v: &mut ErrorCheckVisitor,\n+fn check_fn(_v: &Liveness,\n             _fk: &visit::fn_kind,\n             _decl: &fn_decl,\n             _body: &Block,\n             _sp: Span,\n-            _id: NodeId,\n-            _self: @Liveness) {\n+            _id: NodeId) {\n     // do not check contents of nested fns\n }\n \n@@ -1549,7 +1545,7 @@ impl Liveness {\n         }\n     }\n \n-    pub fn check_lvalue(@self, expr: @Expr, vt: &mut ErrorCheckVisitor) {\n+    pub fn check_lvalue(&mut self, expr: @Expr) {\n         match expr.node {\n           ExprPath(_) => {\n             match self.tcx.def_map.get_copy(&expr.id) {\n@@ -1578,7 +1574,7 @@ impl Liveness {\n           _ => {\n             // For other kinds of lvalues, no checks are required,\n             // and any embedded expressions are actually rvalues\n-            visit::walk_expr(vt, expr, self);\n+            visit::walk_expr(self, expr, ());\n           }\n        }\n     }"}]}