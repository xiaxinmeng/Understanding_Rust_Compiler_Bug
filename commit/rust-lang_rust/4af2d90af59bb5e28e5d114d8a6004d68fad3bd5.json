{"sha": "4af2d90af59bb5e28e5d114d8a6004d68fad3bd5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZjJkOTBhZjU5YmI1ZTI4ZTVkMTE0ZDhhNjAwNGQ2OGZhZDNiZDU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-05-01T14:29:47Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-05-01T14:30:54Z"}, "message": "add an option to debug borrows (RUST_DEBUG_BORROW) so you can\nfind out where the offending borrow occurred. This ... still needs\nsome work.", "tree": {"sha": "c5be284688af69a2843258f71511686827bc21d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5be284688af69a2843258f71511686827bc21d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4af2d90af59bb5e28e5d114d8a6004d68fad3bd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4af2d90af59bb5e28e5d114d8a6004d68fad3bd5", "html_url": "https://github.com/rust-lang/rust/commit/4af2d90af59bb5e28e5d114d8a6004d68fad3bd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4af2d90af59bb5e28e5d114d8a6004d68fad3bd5/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84861101eca12942b42f36f8adb18cfc74515431", "url": "https://api.github.com/repos/rust-lang/rust/commits/84861101eca12942b42f36f8adb18cfc74515431", "html_url": "https://github.com/rust-lang/rust/commit/84861101eca12942b42f36f8adb18cfc74515431"}], "stats": {"total": 135, "additions": 121, "deletions": 14}, "files": [{"sha": "1f52cf77868a2d1bfe287516c6c8c5595de6edee", "filename": "src/libcore/rt/env.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4af2d90af59bb5e28e5d114d8a6004d68fad3bd5/src%2Flibcore%2Frt%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af2d90af59bb5e28e5d114d8a6004d68fad3bd5/src%2Flibcore%2Frt%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fenv.rs?ref=4af2d90af59bb5e28e5d114d8a6004d68fad3bd5", "patch": "@@ -31,8 +31,10 @@ pub struct Environment {\n     argc: c_int,\n     /// The argv value passed to main\n     argv: **c_char,\n-    /// Print GC debugging info\n-    debug_mem: bool\n+    /// Print GC debugging info (true if env var RUST_DEBUG_MEM is set)\n+    debug_mem: bool,\n+    /// Track origin of `@mut` borrows (true if env var RUST_DEBUG_BORROWS is set)\n+    debug_borrows: bool\n }\n \n /// Get the global environment settings"}, {"sha": "0705be7cdefe54fef2c373a65efc164c3817a4a8", "filename": "src/libcore/unstable/lang.rs", "status": "modified", "additions": 71, "deletions": 7, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/4af2d90af59bb5e28e5d114d8a6004d68fad3bd5/src%2Flibcore%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af2d90af59bb5e28e5d114d8a6004d68fad3bd5/src%2Flibcore%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Flang.rs?ref=4af2d90af59bb5e28e5d114d8a6004d68fad3bd5", "patch": "@@ -17,6 +17,7 @@ use str;\n use sys;\n use unstable::exchange_alloc;\n use cast::transmute;\n+use task::rt::rust_get_task;\n \n #[allow(non_camel_case_types)]\n pub type rust_task = c_void;\n@@ -27,7 +28,8 @@ pub static FROZEN_BIT: uint = 0x80000000;\n pub static FROZEN_BIT: uint = 0x8000000000000000;\n \n pub mod rustrt {\n-    use libc::{c_char, uintptr_t};\n+    use unstable::lang::rust_task;\n+    use libc::{c_void, c_char, uintptr_t};\n \n     pub extern {\n         #[rust_stack]\n@@ -43,6 +45,12 @@ pub mod rustrt {\n \n         #[fast_ffi]\n         unsafe fn rust_upcall_free_noswitch(ptr: *c_char);\n+\n+        #[rust_stack]\n+        fn rust_take_task_borrow_list(task: *rust_task) -> *c_void;\n+\n+        #[rust_stack]\n+        fn rust_set_task_borrow_list(task: *rust_task, map: *c_void);\n     }\n }\n \n@@ -61,10 +69,50 @@ pub fn fail_bounds_check(file: *c_char, line: size_t,\n     }\n }\n \n-pub fn fail_borrowed(file: *c_char, line: size_t) {\n-    let msg = \"borrowed\";\n-    do str::as_buf(msg) |msg_p, _| {\n-        fail_(msg_p as *c_char, file, line);\n+struct BorrowRecord {\n+    box: *mut BoxRepr,\n+    file: *c_char,\n+    line: size_t\n+}\n+\n+fn swap_task_borrow_list(f: &fn(~[BorrowRecord]) -> ~[BorrowRecord]) {\n+    unsafe {\n+        let cur_task = rust_get_task();\n+        let mut borrow_list: ~[BorrowRecord] = {\n+            let ptr = rustrt::rust_take_task_borrow_list(cur_task);\n+            if ptr.is_null() { ~[] } else { transmute(ptr) }\n+        };\n+        borrow_list = f(borrow_list);\n+        rustrt::rust_set_task_borrow_list(cur_task, transmute(borrow_list));\n+    }\n+}\n+\n+pub fn fail_borrowed(box: *mut BoxRepr, file: *c_char, line: size_t) {\n+    if !::rt::env::get().debug_borrows {\n+        let msg = \"borrowed\";\n+        do str::as_buf(msg) |msg_p, _| {\n+            fail_(msg_p as *c_char, file, line);\n+        }\n+    } else {\n+        do swap_task_borrow_list |borrow_list| {\n+            let mut msg = ~\"borrowed\";\n+            let mut sep = \" at \";\n+            for borrow_list.each_reverse |entry| {\n+                if entry.box == box {\n+                    str::push_str(&mut msg, sep);\n+                    let filename = unsafe {\n+                        str::raw::from_c_str(entry.file)\n+                    };\n+                    str::push_str(&mut msg, filename);\n+                    str::push_str(&mut msg, fmt!(\":%u\", line as uint));\n+                    sep = \" and at \";\n+                }\n+            }\n+            do str::as_buf(msg) |msg_p, _| {\n+                fail_(msg_p as *c_char, file, line)\n+            }\n+            borrow_list\n+        }\n     }\n }\n \n@@ -140,13 +188,29 @@ pub unsafe fn local_free(ptr: *c_char) {\n     rustrt::rust_upcall_free_noswitch(ptr);\n }\n \n+#[cfg(stage0)]\n #[lang=\"borrow_as_imm\"]\n #[inline(always)]\n pub unsafe fn borrow_as_imm(a: *u8) {\n     let a: *mut BoxRepr = transmute(a);\n     (*a).header.ref_count |= FROZEN_BIT;\n }\n \n+#[cfg(not(stage0))]\n+#[lang=\"borrow_as_imm\"]\n+#[inline(always)]\n+pub unsafe fn borrow_as_imm(a: *u8, file: *c_char, line: size_t) {\n+    let a: *mut BoxRepr = transmute(a);\n+    (*a).header.ref_count |= FROZEN_BIT;\n+    if ::rt::env::get().debug_borrows {\n+        do swap_task_borrow_list |borrow_list| {\n+            let mut borrow_list = borrow_list;\n+            borrow_list.push(BorrowRecord {box: a, file: file, line: line});\n+            borrow_list\n+        }\n+    }\n+}\n+\n #[lang=\"return_to_mut\"]\n #[inline(always)]\n pub unsafe fn return_to_mut(a: *u8) {\n@@ -165,7 +229,7 @@ pub unsafe fn check_not_borrowed(a: *u8) {\n     let a: *mut BoxRepr = transmute(a);\n     if ((*a).header.ref_count & FROZEN_BIT) != 0 {\n         do str::as_buf(\"XXX\") |file_p, _| {\n-            fail_borrowed(file_p as *c_char, 0);\n+            fail_borrowed(a, file_p as *c_char, 0);\n         }\n     }\n }\n@@ -178,7 +242,7 @@ pub unsafe fn check_not_borrowed(a: *u8,\n                                  line: size_t) {\n     let a: *mut BoxRepr = transmute(a);\n     if ((*a).header.ref_count & FROZEN_BIT) != 0 {\n-        fail_borrowed(file, line);\n+        fail_borrowed(a, file, line);\n     }\n }\n "}, {"sha": "d7f9567c333d0945e7125ab2a24422896710dfa5", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4af2d90af59bb5e28e5d114d8a6004d68fad3bd5/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af2d90af59bb5e28e5d114d8a6004d68fad3bd5/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=4af2d90af59bb5e28e5d114d8a6004d68fad3bd5", "patch": "@@ -966,7 +966,7 @@ pub fn root_pats_as_necessary(bcx: block,\n \n                 let datum = Datum {val: val, ty: node_id_type(bcx, pat_id),\n                                    mode: ByRef, source: ZeroMem};\n-                bcx = datum.root(bcx, root_info);\n+                bcx = datum.root(bcx, br.pats[col].span, root_info);\n                 // If we kept going, we'd only re-root the same value, so\n                 // return now.\n                 return bcx;"}, {"sha": "ae71a3e6c22c0194aa0638918350cf41bc2d81fa", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4af2d90af59bb5e28e5d114d8a6004d68fad3bd5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af2d90af59bb5e28e5d114d8a6004d68fad3bd5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=4af2d90af59bb5e28e5d114d8a6004d68fad3bd5", "patch": "@@ -517,7 +517,7 @@ pub impl Datum {\n         }\n     }\n \n-    fn root(&self, bcx: block, root_info: RootInfo) -> block {\n+    fn root(&self, bcx: block, span: span, root_info: RootInfo) -> block {\n         /*!\n          *\n          * In some cases, borrowck will decide that an @T/@[]/@str\n@@ -542,14 +542,22 @@ pub impl Datum {\n         // If we need to freeze the box, do that now.\n         if root_info.freeze.is_some() {\n             // NOTE distinguish the two kinds of freezing here\n+\n+            let loc = bcx.sess().parse_sess.cm.lookup_char_pos(span.lo);\n+            let line = C_int(bcx.ccx(), loc.line as int);\n+            let filename_cstr = C_cstr(bcx.ccx(), @/*bad*/copy loc.file.name);\n+            let filename = PointerCast(bcx, filename_cstr, T_ptr(T_i8()));\n+\n             callee::trans_lang_call(\n                 bcx,\n                 bcx.tcx().lang_items.borrow_as_imm_fn(),\n                 ~[\n                     Load(bcx,\n                          PointerCast(bcx,\n                                      scratch.val,\n-                                     T_ptr(T_ptr(T_i8()))))\n+                                     T_ptr(T_ptr(T_i8())))),\n+                    filename,\n+                    line\n                 ],\n                 expr::Ignore)\n         } else {\n@@ -647,7 +655,7 @@ pub impl Datum {\n         let key = root_map_key { id: expr_id, derefs: derefs };\n         let bcx = match ccx.maps.root_map.find(&key) {\n             None => bcx,\n-            Some(&root_info) => self.root(bcx, root_info)\n+            Some(&root_info) => self.root(bcx, span, root_info)\n         };\n \n         // Perform the write guard, if necessary."}, {"sha": "166b8bc01f85649df90fc4030b1eb19c13c1cc70", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4af2d90af59bb5e28e5d114d8a6004d68fad3bd5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af2d90af59bb5e28e5d114d8a6004d68fad3bd5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=4af2d90af59bb5e28e5d114d8a6004d68fad3bd5", "patch": "@@ -828,7 +828,7 @@ fn trans_lvalue_unadjusted(bcx: block, expr: @ast::expr) -> DatumBlock {\n     // at the end of the scope with id `scope_id`:\n     let root_key = root_map_key { id: expr.id, derefs: 0u };\n     for bcx.ccx().maps.root_map.find(&root_key).each |&root_info| {\n-        bcx = unrooted_datum.root(bcx, *root_info);\n+        bcx = unrooted_datum.root(bcx, expr.span, *root_info);\n     }\n \n     return DatumBlock {bcx: bcx, datum: unrooted_datum};"}, {"sha": "197b8b36d2d4ff8a1f205d3476b759cbae8694bf", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4af2d90af59bb5e28e5d114d8a6004d68fad3bd5/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4af2d90af59bb5e28e5d114d8a6004d68fad3bd5/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=4af2d90af59bb5e28e5d114d8a6004d68fad3bd5", "patch": "@@ -683,6 +683,20 @@ rust_task_local_data_atexit(rust_task *task, void (*cleanup_fn)(void *data)) {\n     task->task_local_data_cleanup = cleanup_fn;\n }\n \n+// set/get/atexit task_borrow_list can run on the rust stack for speed.\n+extern \"C\" void *\n+rust_take_task_borrow_list(rust_task *task) {\n+    void *r = task->borrow_list;\n+    task->borrow_list = NULL;\n+    return r;\n+}\n+extern \"C\" void\n+rust_set_task_borrow_list(rust_task *task, void *data) {\n+    assert(task->borrow_list == NULL);\n+    assert(data != NULL);\n+    task->borrow_list = data;\n+}\n+\n extern \"C\" void\n task_clear_event_reject(rust_task *task) {\n     task->clear_event_reject();"}, {"sha": "e6fe35609ec934a4149b8e72947960ebc0960449", "filename": "src/rt/rust_env.cpp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4af2d90af59bb5e28e5d114d8a6004d68fad3bd5/src%2Frt%2Frust_env.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4af2d90af59bb5e28e5d114d8a6004d68fad3bd5/src%2Frt%2Frust_env.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_env.cpp?ref=4af2d90af59bb5e28e5d114d8a6004d68fad3bd5", "patch": "@@ -24,6 +24,7 @@\n #define RUST_SEED \"RUST_SEED\"\n #define RUST_POISON_ON_FREE \"RUST_POISON_ON_FREE\"\n #define RUST_DEBUG_MEM \"RUST_DEBUG_MEM\"\n+#define RUST_DEBUG_BORROWS \"RUST_DEBUG_BORROWS\"\n \n #if defined(__WIN32__)\n static int\n@@ -130,6 +131,7 @@ load_env(int argc, char **argv) {\n     env->argc = argc;\n     env->argv = argv;\n     env->debug_mem = getenv(RUST_DEBUG_MEM) != NULL;\n+    env->debug_borrows = getenv(RUST_DEBUG_BORROWS) != NULL;\n     return env;\n }\n "}, {"sha": "322198bb031ff2a21418e979e9f637570191badb", "filename": "src/rt/rust_env.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4af2d90af59bb5e28e5d114d8a6004d68fad3bd5/src%2Frt%2Frust_env.h", "raw_url": "https://github.com/rust-lang/rust/raw/4af2d90af59bb5e28e5d114d8a6004d68fad3bd5/src%2Frt%2Frust_env.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_env.h?ref=4af2d90af59bb5e28e5d114d8a6004d68fad3bd5", "patch": "@@ -28,6 +28,7 @@ struct rust_env {\n     int argc;\n     char **argv;\n     rust_bool debug_mem;\n+    rust_bool debug_borrows;\n };\n \n rust_env* load_env(int argc, char **argv);"}, {"sha": "ea42936f2e51ddebe17a190d273699b3255cb230", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4af2d90af59bb5e28e5d114d8a6004d68fad3bd5/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4af2d90af59bb5e28e5d114d8a6004d68fad3bd5/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=4af2d90af59bb5e28e5d114d8a6004d68fad3bd5", "patch": "@@ -42,6 +42,7 @@ rust_task::rust_task(rust_sched_loop *sched_loop, rust_task_state state,\n     total_stack_sz(0),\n     task_local_data(NULL),\n     task_local_data_cleanup(NULL),\n+    borrow_list(NULL),\n     state(state),\n     cond(NULL),\n     cond_name(\"none\"),\n@@ -75,6 +76,16 @@ rust_task::delete_this()\n     assert(ref_count == 0); // ||\n     //   (ref_count == 1 && this == sched->root_task));\n \n+    if (borrow_list) {\n+        // NOTE should free borrow_list from within rust code!\n+        // If there is a pointer in there, it is a ~[BorrowRecord] pointer,\n+        // which are currently allocated with LIBC malloc/free. But this is\n+        // not really the right way to do this, we should be freeing this\n+        // pointer from Rust code.\n+        free(borrow_list);\n+        borrow_list = NULL;\n+    }\n+\n     sched_loop->release_task(this);\n }\n "}, {"sha": "dc45c0439ea127c93e11dfd33eb571d2d463ad33", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4af2d90af59bb5e28e5d114d8a6004d68fad3bd5/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/4af2d90af59bb5e28e5d114d8a6004d68fad3bd5/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=4af2d90af59bb5e28e5d114d8a6004d68fad3bd5", "patch": "@@ -241,6 +241,11 @@ rust_task : public kernel_owned<rust_task>\n     void *task_local_data;\n     void (*task_local_data_cleanup)(void *data);\n \n+    // Contains a ~[BorrowRecord] pointer, or NULL.\n+    //\n+    // Used by borrow management code in libcore/unstable/lang.rs.\n+    void *borrow_list;\n+\n private:\n \n     // Protects state, cond, cond_name"}]}