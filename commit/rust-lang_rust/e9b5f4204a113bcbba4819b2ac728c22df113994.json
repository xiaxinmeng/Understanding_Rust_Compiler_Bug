{"sha": "e9b5f4204a113bcbba4819b2ac728c22df113994", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5YjVmNDIwNGExMTNiY2JiYTQ4MTliMmFjNzI4YzIyZGYxMTM5OTQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-06T21:04:28Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-06T21:05:03Z"}, "message": "core: Remove some explicit move capture clauses", "tree": {"sha": "d553c6cdadab14b8a54d3a17e4494775bbb1e892", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d553c6cdadab14b8a54d3a17e4494775bbb1e892"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9b5f4204a113bcbba4819b2ac728c22df113994", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9b5f4204a113bcbba4819b2ac728c22df113994", "html_url": "https://github.com/rust-lang/rust/commit/e9b5f4204a113bcbba4819b2ac728c22df113994", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9b5f4204a113bcbba4819b2ac728c22df113994/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c0e98444944a05585600e807956778477c546af", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c0e98444944a05585600e807956778477c546af", "html_url": "https://github.com/rust-lang/rust/commit/3c0e98444944a05585600e807956778477c546af"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "97821e3660aec3f87ac9044e5628d85c7e046c73", "filename": "src/libcore/task.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e9b5f4204a113bcbba4819b2ac728c22df113994/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b5f4204a113bcbba4819b2ac728c22df113994/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=e9b5f4204a113bcbba4819b2ac728c22df113994", "patch": "@@ -312,7 +312,7 @@ fn future_task(builder: task_builder) -> future::future<task> {\n     let po = comm::port();\n     let ch = comm::chan(po);\n     add_wrapper(builder) {|body|\n-        fn~[move body]() {\n+        fn~() {\n             comm::send(ch, get_task());\n             body();\n         }\n@@ -347,12 +347,12 @@ fn run_listener<A:send>(-builder: task_builder,\n     let setup_po = comm::port();\n     let setup_ch = comm::chan(setup_po);\n \n-    run(builder, fn~[move f]() {\n+    run(builder) {||\n         let po = comm::port();\n         let ch = comm::chan(po);\n         comm::send(setup_ch, ch);\n         f(po);\n-    });\n+    }\n \n     comm::recv(setup_po)\n }\n@@ -451,9 +451,9 @@ fn try<T:send>(+f: fn~() -> T) -> result::t<T,()> {\n     let builder = mk_task_builder();\n     unsupervise(builder);\n     let result = future_result(builder);\n-    run(builder, fn~[move f]() {\n+    run(builder) {||\n         comm::send(ch, f());\n-    });\n+    }\n     alt future::get(result) {\n       success { result::ok(comm::recv(po)) }\n       failure { result::err(()) }\n@@ -506,7 +506,7 @@ fn spawn_raw(opts: task_opts, +f: fn~()) unsafe {\n         // was designed to let the child unsupervise itself, when what\n         // we actually want is for parents to unsupervise new\n         // children.\n-        fn~[move f]() {\n+        fn~() {\n             rustrt::unsupervise();\n             f();\n         }\n@@ -852,10 +852,10 @@ fn avoid_copying_the_body(spawnfn: fn(+fn~())) {\n     let x = ~1;\n     let x_in_parent = ptr::addr_of(*x) as uint;\n \n-    spawnfn(fn~[move x]() {\n+    spawnfn {||\n         let x_in_child = ptr::addr_of(*x) as uint;\n         comm::send(ch, x_in_child);\n-    });\n+    }\n \n     let x_in_child = comm::recv(p);\n     assert x_in_parent == x_in_child;\n@@ -879,17 +879,17 @@ fn test_avoid_copying_the_body_spawn_listener() {\n fn test_avoid_copying_the_body_run() {\n     avoid_copying_the_body {|f|\n         let builder = mk_task_builder();\n-        run(builder, fn~[move f]() {\n+        run(builder) {||\n             f();\n-        });\n+        }\n     }\n }\n \n #[test]\n fn test_avoid_copying_the_body_run_listener() {\n     avoid_copying_the_body {|f|\n         let builder = mk_task_builder();\n-        run_listener(builder,fn~[move f](_po: comm::port<int>) {\n+        run_listener(builder, fn~[move f](_po: comm::port<int>) {\n             f();\n         });\n     }\n@@ -898,9 +898,9 @@ fn test_avoid_copying_the_body_run_listener() {\n #[test]\n fn test_avoid_copying_the_body_try() {\n     avoid_copying_the_body {|f|\n-        try(fn~[move f]() {\n-            f();\n-        });\n+        try {||\n+            f()\n+        };\n     }\n }\n \n@@ -909,9 +909,9 @@ fn test_avoid_copying_the_body_future_task() {\n     avoid_copying_the_body {|f|\n         let builder = mk_task_builder();\n         future_task(builder);\n-        run(builder, fn~[move f]() {\n+        run(builder) {||\n             f();\n-        });\n+        }\n     }\n }\n \n@@ -920,8 +920,8 @@ fn test_avoid_copying_the_body_unsupervise() {\n     avoid_copying_the_body {|f|\n         let builder = mk_task_builder();\n         unsupervise(builder);\n-        run(builder, fn~[move f]() {\n+        run(builder) {||\n             f();\n-        });\n+        }\n     }\n }\n\\ No newline at end of file"}]}