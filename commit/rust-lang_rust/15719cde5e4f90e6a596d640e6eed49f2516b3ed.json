{"sha": "15719cde5e4f90e6a596d640e6eed49f2516b3ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1NzE5Y2RlNWU0ZjkwZTZhNTk2ZDY0MGU2ZWVkNDlmMjUxNmIzZWQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-04-11T10:38:12Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-04-11T10:39:23Z"}, "message": "compiletest: support --pass=check and --pass=build for mir-opt tests.", "tree": {"sha": "e412d9b955033530effa2f87ac084cc10e52f018", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e412d9b955033530effa2f87ac084cc10e52f018"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15719cde5e4f90e6a596d640e6eed49f2516b3ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15719cde5e4f90e6a596d640e6eed49f2516b3ed", "html_url": "https://github.com/rust-lang/rust/commit/15719cde5e4f90e6a596d640e6eed49f2516b3ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15719cde5e4f90e6a596d640e6eed49f2516b3ed/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d58e6ba05b826fa436e41a1929eac4925b59d1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d58e6ba05b826fa436e41a1929eac4925b59d1a", "html_url": "https://github.com/rust-lang/rust/commit/1d58e6ba05b826fa436e41a1929eac4925b59d1a"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "389098be096a843bb3abbd30ec464d1fb927f1bc", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/15719cde5e4f90e6a596d640e6eed49f2516b3ed/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15719cde5e4f90e6a596d640e6eed49f2516b3ed/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=15719cde5e4f90e6a596d640e6eed49f2516b3ed", "patch": "@@ -357,14 +357,15 @@ impl<'test> TestCx<'test> {\n             Ui if pm == Some(PassMode::Run) || self.props.fail_mode == Some(FailMode::Run) => {\n                 WillExecute::Yes\n             }\n-            Ui => WillExecute::No,\n+            MirOpt if pm == Some(PassMode::Run) => WillExecute::Yes,\n+            Ui | MirOpt => WillExecute::No,\n             mode => panic!(\"unimplemented for mode {:?}\", mode),\n         }\n     }\n \n     fn should_run_successfully(&self, pm: Option<PassMode>) -> bool {\n         match self.config.mode {\n-            Ui => pm == Some(PassMode::Run),\n+            Ui | MirOpt => pm == Some(PassMode::Run),\n             mode => panic!(\"unimplemented for mode {:?}\", mode),\n         }\n     }\n@@ -3057,18 +3058,24 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn run_mir_opt_test(&self) {\n-        let proc_res = self.compile_test(WillExecute::Yes, EmitMetadata::No);\n+        let pm = self.pass_mode();\n+        let should_run = self.should_run(pm);\n+        let emit_metadata = self.should_emit_metadata(pm);\n+        let proc_res = self.compile_test(should_run, emit_metadata);\n \n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n         }\n \n-        let proc_res = self.exec_compiled_test();\n+        self.check_mir_dump();\n \n-        if !proc_res.status.success() {\n-            self.fatal_proc_rec(\"test run failed!\", &proc_res);\n+        if let WillExecute::Yes = should_run {\n+            let proc_res = self.exec_compiled_test();\n+\n+            if !proc_res.status.success() {\n+                self.fatal_proc_rec(\"test run failed!\", &proc_res);\n+            }\n         }\n-        self.check_mir_dump();\n     }\n \n     fn check_mir_dump(&self) {"}]}