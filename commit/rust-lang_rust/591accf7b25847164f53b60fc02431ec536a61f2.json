{"sha": "591accf7b25847164f53b60fc02431ec536a61f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5MWFjY2Y3YjI1ODQ3MTY0ZjUzYjYwZmMwMjQzMWVjNTM2YTYxZjI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-07-13T18:56:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-13T18:56:52Z"}, "message": "Rollup merge of #52316 - seanmonstar:waker-unsafety, r=cramertj\n\ntask: remove wrong comments about non-existent LocalWake trait\n\n~~A `LocalWaker` is specifically `!Send `, and the unsafety comment around\n`LocalWaker::new` only specifies that it be safe to call `wake_local`.\nOne could then accidentally promote a `LocalWaker` into a `Waker`, which\nis universally `Send`, simply via `Waker::from(local_waker)`. A\n`LocalWaker` the was built expecting to not be `Send`, such as using\n`Rc`, could be sent to other threads safely.~~\n\n~~Separately, though somewhat related, `Context` holds a `&LocalWaker`\ninternally, and exposes a `waker() -> &Waker` method. This simply\ntransmutes the `&LocalWaker` to `&Waker`, which would be unsound, except\nthat you can't \"send\" a `&Waker`, you'd need to clone it first. Since\n`UnsafeWake::clone_raw` requires that it return a `Waker`, the transmute\nis not unsound. The transmuted `LocalWaker` will be promoted to a\n`Waker` correctly.~~\n\n~~That would mean that if `UnsafeWake::clone_raw` were to be changed, such\nas returning `Self` instead of `Waker`, this would no longer be sound.\nThus, this also adds a comment to `clone_raw` to remember this.~~\n\nr? @cramertj", "tree": {"sha": "86d3519925a5e16d176d053b6bd534cf5a5d1307", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86d3519925a5e16d176d053b6bd534cf5a5d1307"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/591accf7b25847164f53b60fc02431ec536a61f2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbSPX0CRBK7hj4Ov3rIwAAdHIIACtCoy2zMlzm6JhJMpsMEZLE\nPFjtwDrVkO6L2ogbJpvZGpVzJ1dI2JYzkHDnHLx7YnZ6VbjdBubB7O7a4n307Iu/\n2WpIM75vURaWzV06TmNnwIF55gGHYn4HGk9jWMwQLDckEaFWZbpLpqAlxauIUJCr\nPqjKHY+S7djTD9XRccF7ebiQslL2TUJRGZrrdq/uHUMz2lOIwuVBIRz+gaCVN2zb\nujTZC2ERFgkfL45aCc/G3Jbk46yiNsdKWf08n8aPvjxvxbWZBBoTBxirsvADn7ZX\nrHKEmrIBmgUD0rd/bnf/m0t4XL5mv6JMdNgiTjbUrGU+Z8wcvzI/1LpXMbzzjoc=\n=Bj5j\n-----END PGP SIGNATURE-----\n", "payload": "tree 86d3519925a5e16d176d053b6bd534cf5a5d1307\nparent 2fa00da26f37a13398b03e51f1f98c778076a274\nparent 4f4e91a69d75b5de66d53399027cc1835387a423\nauthor kennytm <kennytm@gmail.com> 1531508212 +0800\ncommitter GitHub <noreply@github.com> 1531508212 +0800\n\nRollup merge of #52316 - seanmonstar:waker-unsafety, r=cramertj\n\ntask: remove wrong comments about non-existent LocalWake trait\n\n~~A `LocalWaker` is specifically `!Send `, and the unsafety comment around\n`LocalWaker::new` only specifies that it be safe to call `wake_local`.\nOne could then accidentally promote a `LocalWaker` into a `Waker`, which\nis universally `Send`, simply via `Waker::from(local_waker)`. A\n`LocalWaker` the was built expecting to not be `Send`, such as using\n`Rc`, could be sent to other threads safely.~~\n\n~~Separately, though somewhat related, `Context` holds a `&LocalWaker`\ninternally, and exposes a `waker() -> &Waker` method. This simply\ntransmutes the `&LocalWaker` to `&Waker`, which would be unsound, except\nthat you can't \"send\" a `&Waker`, you'd need to clone it first. Since\n`UnsafeWake::clone_raw` requires that it return a `Waker`, the transmute\nis not unsound. The transmuted `LocalWaker` will be promoted to a\n`Waker` correctly.~~\n\n~~That would mean that if `UnsafeWake::clone_raw` were to be changed, such\nas returning `Self` instead of `Waker`, this would no longer be sound.\nThus, this also adds a comment to `clone_raw` to remember this.~~\n\nr? @cramertj\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/591accf7b25847164f53b60fc02431ec536a61f2", "html_url": "https://github.com/rust-lang/rust/commit/591accf7b25847164f53b60fc02431ec536a61f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/591accf7b25847164f53b60fc02431ec536a61f2/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fa00da26f37a13398b03e51f1f98c778076a274", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fa00da26f37a13398b03e51f1f98c778076a274", "html_url": "https://github.com/rust-lang/rust/commit/2fa00da26f37a13398b03e51f1f98c778076a274"}, {"sha": "4f4e91a69d75b5de66d53399027cc1835387a423", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f4e91a69d75b5de66d53399027cc1835387a423", "html_url": "https://github.com/rust-lang/rust/commit/4f4e91a69d75b5de66d53399027cc1835387a423"}], "stats": {"total": 8, "additions": 3, "deletions": 5}, "files": [{"sha": "d3df8b50ee2ee5e4978b343179cd6663789357cb", "filename": "src/libcore/task/wake.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/591accf7b25847164f53b60fc02431ec536a61f2/src%2Flibcore%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/591accf7b25847164f53b60fc02431ec536a61f2/src%2Flibcore%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fwake.rs?ref=591accf7b25847164f53b60fc02431ec536a61f2", "patch": "@@ -113,8 +113,8 @@ impl LocalWaker {\n     /// but you otherwise shouldn't call it directly.\n     ///\n     /// If you're working with the standard library then it's recommended to\n-    /// use the `LocalWaker::from` function instead which works with the safe\n-    /// `Rc` type and the safe `LocalWake` trait.\n+    /// use the `local_waker_from_nonlocal` or `local_waker` to convert a `Waker`\n+    /// into a `LocalWaker`.\n     ///\n     /// For this function to be used safely, it must be sound to call `inner.wake_local()`\n     /// on the current thread.\n@@ -197,9 +197,7 @@ impl Drop for LocalWaker {\n /// customization.\n ///\n /// When using `std`, a default implementation of the `UnsafeWake` trait is provided for\n-/// `Arc<T>` where `T: Wake` and `Rc<T>` where `T: LocalWake`.\n-///\n-/// Although the methods on `UnsafeWake` take pointers rather than references,\n+/// `Arc<T>` where `T: Wake`.\n pub unsafe trait UnsafeWake: Send + Sync {\n     /// Creates a clone of this `UnsafeWake` and stores it behind a `Waker`.\n     ///"}]}