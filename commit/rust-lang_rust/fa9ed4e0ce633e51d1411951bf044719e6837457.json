{"sha": "fa9ed4e0ce633e51d1411951bf044719e6837457", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhOWVkNGUwY2U2MzNlNTFkMTQxMTk1MWJmMDQ0NzE5ZTY4Mzc0NTc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-13T14:06:36Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-13T14:08:54Z"}, "message": "internal: refactor unresolved macro call diagnostic", "tree": {"sha": "527881b07c885f01132c023426bc8592a4318fd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/527881b07c885f01132c023426bc8592a4318fd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa9ed4e0ce633e51d1411951bf044719e6837457", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa9ed4e0ce633e51d1411951bf044719e6837457", "html_url": "https://github.com/rust-lang/rust/commit/fa9ed4e0ce633e51d1411951bf044719e6837457", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa9ed4e0ce633e51d1411951bf044719e6837457/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d104de15aee6a24a442871c59528c39d410c161", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d104de15aee6a24a442871c59528c39d410c161", "html_url": "https://github.com/rust-lang/rust/commit/6d104de15aee6a24a442871c59528c39d410c161"}], "stats": {"total": 189, "additions": 94, "deletions": 95}, "files": [{"sha": "718c86b3a1e0330a1aea02445046c108e3ddf8cc", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 9, "deletions": 26, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/fa9ed4e0ce633e51d1411951bf044719e6837457/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa9ed4e0ce633e51d1411951bf044719e6837457/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=fa9ed4e0ce633e51d1411951bf044719e6837457", "patch": "@@ -17,7 +17,7 @@ pub use crate::diagnostics_sink::{\n };\n \n macro_rules! diagnostics {\n-    ($($diag:ident),*) => {\n+    ($($diag:ident,)*) => {\n         pub enum AnyDiagnostic {$(\n             $diag(Box<$diag>),\n         )*}\n@@ -32,7 +32,13 @@ macro_rules! diagnostics {\n     };\n }\n \n-diagnostics![UnresolvedModule, UnresolvedExternCrate, UnresolvedImport, MissingFields];\n+diagnostics![\n+    UnresolvedModule,\n+    UnresolvedExternCrate,\n+    UnresolvedImport,\n+    UnresolvedMacroCall,\n+    MissingFields,\n+];\n \n #[derive(Debug)]\n pub struct UnresolvedModule {\n@@ -50,35 +56,12 @@ pub struct UnresolvedImport {\n     pub decl: InFile<AstPtr<ast::UseTree>>,\n }\n \n-// Diagnostic: unresolved-macro-call\n-//\n-// This diagnostic is triggered if rust-analyzer is unable to resolve the path to a\n-// macro in a macro invocation.\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct UnresolvedMacroCall {\n-    pub file: HirFileId,\n-    pub node: AstPtr<ast::MacroCall>,\n+    pub macro_call: InFile<AstPtr<ast::MacroCall>>,\n     pub path: ModPath,\n }\n \n-impl Diagnostic for UnresolvedMacroCall {\n-    fn code(&self) -> DiagnosticCode {\n-        DiagnosticCode(\"unresolved-macro-call\")\n-    }\n-    fn message(&self) -> String {\n-        format!(\"unresolved macro `{}!`\", self.path)\n-    }\n-    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n-        InFile::new(self.file, self.node.clone().into())\n-    }\n-    fn as_any(&self) -> &(dyn Any + Send + 'static) {\n-        self\n-    }\n-    fn is_experimental(&self) -> bool {\n-        true\n-    }\n-}\n-\n // Diagnostic: inactive-code\n //\n // This diagnostic is shown for code with inactive `#[cfg]` attributes."}, {"sha": "0a94140133e2832ed7033e001333b952d6f8d446", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fa9ed4e0ce633e51d1411951bf044719e6837457/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa9ed4e0ce633e51d1411951bf044719e6837457/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=fa9ed4e0ce633e51d1411951bf044719e6837457", "patch": "@@ -580,11 +580,13 @@ impl Module {\n \n                 DefDiagnosticKind::UnresolvedMacroCall { ast, path } => {\n                     let node = ast.to_node(db.upcast());\n-                    sink.push(UnresolvedMacroCall {\n-                        file: ast.file_id,\n-                        node: AstPtr::new(&node),\n-                        path: path.clone(),\n-                    });\n+                    acc.push(\n+                        UnresolvedMacroCall {\n+                            macro_call: InFile::new(ast.file_id, AstPtr::new(&node)),\n+                            path: path.clone(),\n+                        }\n+                        .into(),\n+                    );\n                 }\n \n                 DefDiagnosticKind::MacroError { ast, message } => {\n@@ -1060,13 +1062,9 @@ impl Function {\n                     precise_location: None,\n                     macro_name: None,\n                 }),\n-                BodyDiagnostic::UnresolvedMacroCall { node, path } => {\n-                    sink.push(UnresolvedMacroCall {\n-                        file: node.file_id,\n-                        node: node.value.clone(),\n-                        path: path.clone(),\n-                    })\n-                }\n+                BodyDiagnostic::UnresolvedMacroCall { node, path } => acc.push(\n+                    UnresolvedMacroCall { macro_call: node.clone(), path: path.clone() }.into(),\n+                ),\n             }\n         }\n "}, {"sha": "5a088b6e582008a38ee9e07401b0942bb9ab0fd9", "filename": "crates/hir_def/src/nameres/tests/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/fa9ed4e0ce633e51d1411951bf044719e6837457/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa9ed4e0ce633e51d1411951bf044719e6837457/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fdiagnostics.rs?ref=fa9ed4e0ce633e51d1411951bf044719e6837457", "patch": "@@ -54,37 +54,6 @@ fn inactive_via_cfg_attr() {\n     );\n }\n \n-#[test]\n-fn unresolved_legacy_scope_macro() {\n-    check_diagnostics(\n-        r#\"\n-        //- /lib.rs\n-          macro_rules! m { () => {} }\n-\n-          m!();\n-          m2!();\n-        //^^^^^^ UnresolvedMacroCall\n-        \"#,\n-    );\n-}\n-\n-#[test]\n-fn unresolved_module_scope_macro() {\n-    check_diagnostics(\n-        r#\"\n-        //- /lib.rs\n-          mod mac {\n-            #[macro_export]\n-            macro_rules! m { () => {} }\n-          }\n-\n-          self::m!();\n-          self::m2!();\n-        //^^^^^^^^^^^^ UnresolvedMacroCall\n-        \"#,\n-    );\n-}\n-\n #[test]\n fn builtin_macro_fails_expansion() {\n     check_diagnostics("}, {"sha": "1a48008324cf390daaa35c35c3b9fb0e86de0d5e", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 26, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fa9ed4e0ce633e51d1411951bf044719e6837457/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa9ed4e0ce633e51d1411951bf044719e6837457/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=fa9ed4e0ce633e51d1411951bf044719e6837457", "patch": "@@ -7,6 +7,7 @@\n mod unresolved_module;\n mod unresolved_extern_crate;\n mod unresolved_import;\n+mod unresolved_macro_call;\n mod missing_fields;\n \n mod fixes;\n@@ -16,9 +17,8 @@ mod unlinked_file;\n use std::cell::RefCell;\n \n use hir::{\n-    db::AstDatabase,\n     diagnostics::{AnyDiagnostic, Diagnostic as _, DiagnosticCode, DiagnosticSinkBuilder},\n-    InFile, Semantics,\n+    Semantics,\n };\n use ide_assists::AssistResolveStrategy;\n use ide_db::{base_db::SourceDatabase, RootDatabase};\n@@ -203,20 +203,6 @@ pub(crate) fn diagnostics(\n             res.borrow_mut()\n                 .push(Diagnostic::hint(display_range, d.message()).with_code(Some(d.code())));\n         })\n-        .on::<hir::diagnostics::UnresolvedMacroCall, _>(|d| {\n-            let last_path_segment = sema.db.parse_or_expand(d.file).and_then(|root| {\n-                d.node\n-                    .to_node(&root)\n-                    .path()\n-                    .and_then(|it| it.segment())\n-                    .and_then(|it| it.name_ref())\n-                    .map(|it| InFile::new(d.file, SyntaxNodePtr::new(it.syntax())))\n-            });\n-            let diagnostics = last_path_segment.unwrap_or_else(|| d.display_source());\n-            let display_range = sema.diagnostics_display_range(diagnostics).range;\n-            res.borrow_mut()\n-                .push(Diagnostic::error(display_range, d.message()).with_code(Some(d.code())));\n-        })\n         .on::<hir::diagnostics::UnimplementedBuiltinMacro, _>(|d| {\n             let display_range = sema.diagnostics_display_range(d.display_source()).range;\n             res.borrow_mut()\n@@ -259,6 +245,7 @@ pub(crate) fn diagnostics(\n             AnyDiagnostic::UnresolvedModule(d) => unresolved_module::unresolved_module(&ctx, &d),\n             AnyDiagnostic::UnresolvedExternCrate(d) => unresolved_extern_crate::unresolved_extern_crate(&ctx, &d),\n             AnyDiagnostic::UnresolvedImport(d) => unresolved_import::unresolved_import(&ctx, &d),\n+            AnyDiagnostic::UnresolvedMacroCall(d) => unresolved_macro_call::unresolved_macro_call(&ctx, &d),\n             AnyDiagnostic::MissingFields(d) => missing_fields::missing_fields(&ctx, &d),\n         };\n         if let Some(code) = d.code {\n@@ -480,16 +467,6 @@ mod tests {\n         assert_eq!(expected, actual);\n     }\n \n-    #[test]\n-    fn test_unresolved_macro_range() {\n-        check_diagnostics(\n-            r#\"\n-foo::bar!(92);\n-   //^^^ unresolved macro `foo::bar!`\n-\"#,\n-        );\n-    }\n-\n     #[test]\n     fn range_mapping_out_of_macros() {\n         // FIXME: this is very wrong, but somewhat tricky to fix."}, {"sha": "a3af332a4637c452db2d02a77ad0e2569b5546b5", "filename": "crates/ide/src/diagnostics/unresolved_macro_call.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/fa9ed4e0ce633e51d1411951bf044719e6837457/crates%2Fide%2Fsrc%2Fdiagnostics%2Funresolved_macro_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa9ed4e0ce633e51d1411951bf044719e6837457/crates%2Fide%2Fsrc%2Fdiagnostics%2Funresolved_macro_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Funresolved_macro_call.rs?ref=fa9ed4e0ce633e51d1411951bf044719e6837457", "patch": "@@ -0,0 +1,72 @@\n+use hir::{db::AstDatabase, InFile};\n+use syntax::{AstNode, SyntaxNodePtr};\n+\n+use crate::diagnostics::{Diagnostic, DiagnosticsContext};\n+\n+// Diagnostic: unresolved-macro-call\n+//\n+// This diagnostic is triggered if rust-analyzer is unable to resolve the path\n+// to a macro in a macro invocation.\n+pub(super) fn unresolved_macro_call(\n+    ctx: &DiagnosticsContext<'_>,\n+    d: &hir::UnresolvedMacroCall,\n+) -> Diagnostic {\n+    let last_path_segment = ctx.sema.db.parse_or_expand(d.macro_call.file_id).and_then(|root| {\n+        d.macro_call\n+            .value\n+            .to_node(&root)\n+            .path()\n+            .and_then(|it| it.segment())\n+            .and_then(|it| it.name_ref())\n+            .map(|it| InFile::new(d.macro_call.file_id, SyntaxNodePtr::new(it.syntax())))\n+    });\n+    let diagnostics = last_path_segment.unwrap_or_else(|| d.macro_call.clone().map(|it| it.into()));\n+\n+    Diagnostic::new(\n+        \"unresolved-macro-call\",\n+        format!(\"unresolved macro `{}!`\", d.path),\n+        ctx.sema.diagnostics_display_range(diagnostics).range,\n+    )\n+    .experimental()\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::diagnostics::tests::check_diagnostics;\n+\n+    #[test]\n+    fn test_unresolved_macro_range() {\n+        check_diagnostics(\n+            r#\"\n+foo::bar!(92);\n+   //^^^ unresolved macro `foo::bar!`\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn unresolved_legacy_scope_macro() {\n+        check_diagnostics(\n+            r#\"\n+macro_rules! m { () => {} }\n+\n+m!(); m2!();\n+    //^^ unresolved macro `self::m2!`\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn unresolved_module_scope_macro() {\n+        check_diagnostics(\n+            r#\"\n+mod mac {\n+#[macro_export]\n+macro_rules! m { () => {} } }\n+\n+self::m!(); self::m2!();\n+                //^^ unresolved macro `self::m2!`\n+\"#,\n+        );\n+    }\n+}"}]}