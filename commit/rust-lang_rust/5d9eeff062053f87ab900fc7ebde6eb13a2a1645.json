{"sha": "5d9eeff062053f87ab900fc7ebde6eb13a2a1645", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkOWVlZmYwNjIwNTNmODdhYjkwMGZjN2ViZGU2ZWIxM2EyYTE2NDU=", "commit": {"author": {"name": "Mohsen Zohrevandi", "email": "mohsen.zohrevandi@fortanix.com", "date": "2021-04-21T20:45:57Z"}, "committer": {"name": "Mohsen Zohrevandi", "email": "mohsen.zohrevandi@fortanix.com", "date": "2021-04-21T21:45:45Z"}, "message": "Ensure TLS destructors run before thread joins in SGX", "tree": {"sha": "ed2ea8ae02841a34e82ac18f706bb1de8386e6de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed2ea8ae02841a34e82ac18f706bb1de8386e6de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d9eeff062053f87ab900fc7ebde6eb13a2a1645", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d9eeff062053f87ab900fc7ebde6eb13a2a1645", "html_url": "https://github.com/rust-lang/rust/commit/5d9eeff062053f87ab900fc7ebde6eb13a2a1645", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d9eeff062053f87ab900fc7ebde6eb13a2a1645/comments", "author": {"login": "mzohreva", "id": 1142455, "node_id": "MDQ6VXNlcjExNDI0NTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1142455?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mzohreva", "html_url": "https://github.com/mzohreva", "followers_url": "https://api.github.com/users/mzohreva/followers", "following_url": "https://api.github.com/users/mzohreva/following{/other_user}", "gists_url": "https://api.github.com/users/mzohreva/gists{/gist_id}", "starred_url": "https://api.github.com/users/mzohreva/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mzohreva/subscriptions", "organizations_url": "https://api.github.com/users/mzohreva/orgs", "repos_url": "https://api.github.com/users/mzohreva/repos", "events_url": "https://api.github.com/users/mzohreva/events{/privacy}", "received_events_url": "https://api.github.com/users/mzohreva/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mzohreva", "id": 1142455, "node_id": "MDQ6VXNlcjExNDI0NTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1142455?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mzohreva", "html_url": "https://github.com/mzohreva", "followers_url": "https://api.github.com/users/mzohreva/followers", "following_url": "https://api.github.com/users/mzohreva/following{/other_user}", "gists_url": "https://api.github.com/users/mzohreva/gists{/gist_id}", "starred_url": "https://api.github.com/users/mzohreva/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mzohreva/subscriptions", "organizations_url": "https://api.github.com/users/mzohreva/orgs", "repos_url": "https://api.github.com/users/mzohreva/repos", "events_url": "https://api.github.com/users/mzohreva/events{/privacy}", "received_events_url": "https://api.github.com/users/mzohreva/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6df26f897cffb2d86880544bb451c6b5f8509b2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6df26f897cffb2d86880544bb451c6b5f8509b2d", "html_url": "https://github.com/rust-lang/rust/commit/6df26f897cffb2d86880544bb451c6b5f8509b2d"}], "stats": {"total": 130, "additions": 119, "deletions": 11}, "files": [{"sha": "f9536c4203df2928c9e65c25cac6686e964c9e5d", "filename": "library/std/src/sys/sgx/abi/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d9eeff062053f87ab900fc7ebde6eb13a2a1645/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d9eeff062053f87ab900fc7ebde6eb13a2a1645/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fmod.rs?ref=5d9eeff062053f87ab900fc7ebde6eb13a2a1645", "patch": "@@ -62,10 +62,12 @@ unsafe extern \"C\" fn tcs_init(secondary: bool) {\n extern \"C\" fn entry(p1: u64, p2: u64, p3: u64, secondary: bool, p4: u64, p5: u64) -> EntryReturn {\n     // FIXME: how to support TLS in library mode?\n     let tls = Box::new(tls::Tls::new());\n-    let _tls_guard = unsafe { tls.activate() };\n+    let tls_guard = unsafe { tls.activate() };\n \n     if secondary {\n-        super::thread::Thread::entry();\n+        let join_notifier = super::thread::Thread::entry();\n+        drop(tls_guard);\n+        drop(join_notifier);\n \n         EntryReturn(0, 0)\n     } else {"}, {"sha": "67e2e8b59d397d8e14ce783c414fff0d39b8f07c", "filename": "library/std/src/sys/sgx/thread.rs", "status": "modified", "additions": 61, "deletions": 8, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/5d9eeff062053f87ab900fc7ebde6eb13a2a1645/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d9eeff062053f87ab900fc7ebde6eb13a2a1645/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fthread.rs?ref=5d9eeff062053f87ab900fc7ebde6eb13a2a1645", "patch": "@@ -9,26 +9,37 @@ pub struct Thread(task_queue::JoinHandle);\n \n pub const DEFAULT_MIN_STACK_SIZE: usize = 4096;\n \n+pub use self::task_queue::JoinNotifier;\n+\n mod task_queue {\n-    use crate::sync::mpsc;\n+    use super::wait_notify;\n     use crate::sync::{Mutex, MutexGuard, Once};\n \n-    pub type JoinHandle = mpsc::Receiver<()>;\n+    pub type JoinHandle = wait_notify::Waiter;\n+\n+    pub struct JoinNotifier(Option<wait_notify::Notifier>);\n+\n+    impl Drop for JoinNotifier {\n+        fn drop(&mut self) {\n+            self.0.take().unwrap().notify();\n+        }\n+    }\n \n     pub(super) struct Task {\n         p: Box<dyn FnOnce()>,\n-        done: mpsc::Sender<()>,\n+        done: JoinNotifier,\n     }\n \n     impl Task {\n         pub(super) fn new(p: Box<dyn FnOnce()>) -> (Task, JoinHandle) {\n-            let (done, recv) = mpsc::channel();\n+            let (done, recv) = wait_notify::new();\n+            let done = JoinNotifier(Some(done));\n             (Task { p, done }, recv)\n         }\n \n-        pub(super) fn run(self) {\n+        pub(super) fn run(self) -> JoinNotifier {\n             (self.p)();\n-            let _ = self.done.send(());\n+            self.done\n         }\n     }\n \n@@ -47,6 +58,48 @@ mod task_queue {\n     }\n }\n \n+/// This module provides a synchronization primitive that does not use thread\n+/// local variables. This is needed for signaling that a thread has finished\n+/// execution. The signal is sent once all TLS destructors have finished at\n+/// which point no new thread locals should be created.\n+pub mod wait_notify {\n+    use super::super::waitqueue::{SpinMutex, WaitQueue, WaitVariable};\n+    use crate::sync::Arc;\n+\n+    pub struct Notifier(Arc<SpinMutex<WaitVariable<bool>>>);\n+\n+    impl Notifier {\n+        /// Notify the waiter. The waiter is either notified right away (if\n+        /// currently blocked in `Waiter::wait()`) or later when it calls the\n+        /// `Waiter::wait()` method.\n+        pub fn notify(self) {\n+            let mut guard = self.0.lock();\n+            *guard.lock_var_mut() = true;\n+            let _ = WaitQueue::notify_one(guard);\n+        }\n+    }\n+\n+    pub struct Waiter(Arc<SpinMutex<WaitVariable<bool>>>);\n+\n+    impl Waiter {\n+        /// Wait for a notification. If `Notifier::notify()` has already been\n+        /// called, this will return immediately, otherwise the current thread\n+        /// is blocked until notified.\n+        pub fn wait(self) {\n+            let guard = self.0.lock();\n+            if *guard.lock_var() {\n+                return;\n+            }\n+            WaitQueue::wait(guard, || {});\n+        }\n+    }\n+\n+    pub fn new() -> (Notifier, Waiter) {\n+        let inner = Arc::new(SpinMutex::new(WaitVariable::new(false)));\n+        (Notifier(inner.clone()), Waiter(inner))\n+    }\n+}\n+\n impl Thread {\n     // unsafe: see thread::Builder::spawn_unchecked for safety requirements\n     pub unsafe fn new(_stack: usize, p: Box<dyn FnOnce()>) -> io::Result<Thread> {\n@@ -57,7 +110,7 @@ impl Thread {\n         Ok(Thread(handle))\n     }\n \n-    pub(super) fn entry() {\n+    pub(super) fn entry() -> JoinNotifier {\n         let mut pending_tasks = task_queue::lock();\n         let task = rtunwrap!(Some, pending_tasks.pop());\n         drop(pending_tasks); // make sure to not hold the task queue lock longer than necessary\n@@ -78,7 +131,7 @@ impl Thread {\n     }\n \n     pub fn join(self) {\n-        let _ = self.0.recv();\n+        self.0.wait();\n     }\n }\n "}, {"sha": "98f525eafb0f63246d9fbe17fa65ffd6af03cc98", "filename": "library/std/src/thread/local/tests.rs", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/5d9eeff062053f87ab900fc7ebde6eb13a2a1645/library%2Fstd%2Fsrc%2Fthread%2Flocal%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d9eeff062053f87ab900fc7ebde6eb13a2a1645/library%2Fstd%2Fsrc%2Fthread%2Flocal%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal%2Ftests.rs?ref=5d9eeff062053f87ab900fc7ebde6eb13a2a1645", "patch": "@@ -1,5 +1,6 @@\n use crate::cell::{Cell, UnsafeCell};\n-use crate::sync::mpsc::{channel, Sender};\n+use crate::sync::atomic::{AtomicBool, Ordering};\n+use crate::sync::mpsc::{self, channel, Sender};\n use crate::thread::{self, LocalKey};\n use crate::thread_local;\n \n@@ -207,3 +208,55 @@ fn dtors_in_dtors_in_dtors_const_init() {\n     });\n     rx.recv().unwrap();\n }\n+\n+// This test tests that TLS destructors have run before the thread joins. The\n+// test has no false positives (meaning: if the test fails, there's actually\n+// an ordering problem). It may have false negatives, where the test passes but\n+// join is not guaranteed to be after the TLS destructors. However, false\n+// negatives should be exceedingly rare due to judicious use of\n+// thread::yield_now and running the test several times.\n+#[test]\n+fn join_orders_after_tls_destructors() {\n+    static THREAD2_LAUNCHED: AtomicBool = AtomicBool::new(false);\n+\n+    for _ in 0..10 {\n+        let (tx, rx) = mpsc::sync_channel(0);\n+        THREAD2_LAUNCHED.store(false, Ordering::SeqCst);\n+\n+        let jh = thread::spawn(move || {\n+            struct RecvOnDrop(Cell<Option<mpsc::Receiver<()>>>);\n+\n+            impl Drop for RecvOnDrop {\n+                fn drop(&mut self) {\n+                    let rx = self.0.take().unwrap();\n+                    while !THREAD2_LAUNCHED.load(Ordering::SeqCst) {\n+                        thread::yield_now();\n+                    }\n+                    rx.recv().unwrap();\n+                }\n+            }\n+\n+            thread_local! {\n+                static TL_RX: RecvOnDrop = RecvOnDrop(Cell::new(None));\n+            }\n+\n+            TL_RX.with(|v| v.0.set(Some(rx)))\n+        });\n+\n+        let tx_clone = tx.clone();\n+        let jh2 = thread::spawn(move || {\n+            THREAD2_LAUNCHED.store(true, Ordering::SeqCst);\n+            jh.join().unwrap();\n+            tx_clone.send(()).expect_err(\n+                \"Expecting channel to be closed because thread 1 TLS destructors must've run\",\n+            );\n+        });\n+\n+        while !THREAD2_LAUNCHED.load(Ordering::SeqCst) {\n+            thread::yield_now();\n+        }\n+        thread::yield_now();\n+        tx.send(()).expect(\"Expecting channel to be live because thread 2 must block on join\");\n+        jh2.join().unwrap();\n+    }\n+}"}]}