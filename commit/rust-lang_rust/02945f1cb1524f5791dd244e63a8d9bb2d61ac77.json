{"sha": "02945f1cb1524f5791dd244e63a8d9bb2d61ac77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyOTQ1ZjFjYjE1MjRmNTc5MWRkMjQ0ZTYzYThkOWJiMmQ2MWFjNzc=", "commit": {"author": {"name": "gifnksm", "email": "makoto.nksm+github@gmail.com", "date": "2013-05-17T14:45:25Z"}, "committer": {"name": "gifnksm", "email": "makoto.nksm+github@gmail.com", "date": "2013-05-17T14:49:11Z"}, "message": "libcore: Add `IteratoUtil::nth`, `first`, `last` method", "tree": {"sha": "43410fc14234a351fa5bc76e13496a4d963d1b07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43410fc14234a351fa5bc76e13496a4d963d1b07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02945f1cb1524f5791dd244e63a8d9bb2d61ac77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02945f1cb1524f5791dd244e63a8d9bb2d61ac77", "html_url": "https://github.com/rust-lang/rust/commit/02945f1cb1524f5791dd244e63a8d9bb2d61ac77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02945f1cb1524f5791dd244e63a8d9bb2d61ac77/comments", "author": {"login": "gifnksm", "id": 164213, "node_id": "MDQ6VXNlcjE2NDIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/164213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gifnksm", "html_url": "https://github.com/gifnksm", "followers_url": "https://api.github.com/users/gifnksm/followers", "following_url": "https://api.github.com/users/gifnksm/following{/other_user}", "gists_url": "https://api.github.com/users/gifnksm/gists{/gist_id}", "starred_url": "https://api.github.com/users/gifnksm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gifnksm/subscriptions", "organizations_url": "https://api.github.com/users/gifnksm/orgs", "repos_url": "https://api.github.com/users/gifnksm/repos", "events_url": "https://api.github.com/users/gifnksm/events{/privacy}", "received_events_url": "https://api.github.com/users/gifnksm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gifnksm", "id": 164213, "node_id": "MDQ6VXNlcjE2NDIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/164213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gifnksm", "html_url": "https://github.com/gifnksm", "followers_url": "https://api.github.com/users/gifnksm/followers", "following_url": "https://api.github.com/users/gifnksm/following{/other_user}", "gists_url": "https://api.github.com/users/gifnksm/gists{/gist_id}", "starred_url": "https://api.github.com/users/gifnksm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gifnksm/subscriptions", "organizations_url": "https://api.github.com/users/gifnksm/orgs", "repos_url": "https://api.github.com/users/gifnksm/repos", "events_url": "https://api.github.com/users/gifnksm/events{/privacy}", "received_events_url": "https://api.github.com/users/gifnksm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ffbe69234317859ca910fe5c419cacf4089d60b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ffbe69234317859ca910fe5c419cacf4089d60b", "html_url": "https://github.com/rust-lang/rust/commit/9ffbe69234317859ca910fe5c419cacf4089d60b"}], "stats": {"total": 81, "additions": 81, "deletions": 0}, "files": [{"sha": "14d6083067a9d1faedd6a05089a4561a5578329a", "filename": "src/libcore/iterator.rs", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/02945f1cb1524f5791dd244e63a8d9bb2d61ac77/src%2Flibcore%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02945f1cb1524f5791dd244e63a8d9bb2d61ac77/src%2Flibcore%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiterator.rs?ref=02945f1cb1524f5791dd244e63a8d9bb2d61ac77", "patch": "@@ -47,6 +47,9 @@ pub trait IteratorUtil<A> {\n     #[cfg(not(stage0))]\n     fn advance(&mut self, f: &fn(A) -> bool) -> bool;\n     fn to_vec(self) -> ~[A];\n+    fn nth(&mut self, n: uint) -> A;\n+    fn first(&mut self) -> A;\n+    fn last(&mut self) -> A;\n }\n \n /// Iterator adaptors provided for every `Iterator` implementation. The adaptor objects are also\n@@ -146,6 +149,41 @@ impl<A, T: Iterator<A>> IteratorUtil<A> for T {\n         for it.advance() |x| { v.push(x); }\n         return v;\n     }\n+\n+    /// Get `n`th element of an iterator.\n+    #[inline(always)]\n+    fn nth(&mut self, n: uint) -> A {\n+        let mut i = n;\n+        loop {\n+            match self.next() {\n+                Some(x) => { if i == 0 { return x; }}\n+                None => { fail!(\"cannot get %uth element\", n) }\n+            }\n+            i -= 1;\n+        }\n+    }\n+\n+    // Get first elemet of an iterator.\n+    #[inline(always)]\n+    fn first(&mut self) -> A {\n+        match self.next() {\n+            Some(x) => x ,\n+            None => fail!(\"cannot get first element\")\n+        }\n+    }\n+\n+    // Get last element of an iterator.\n+    //\n+    // If the iterator have an infinite length, this method won't return.\n+    #[inline(always)]\n+    fn last(&mut self) -> A {\n+        let mut elm = match self.next() {\n+            Some(x) => x,\n+            None    => fail!(\"cannot get last element\")\n+        };\n+        for self.advance |e| { elm = e; }\n+        return elm;\n+    }\n }\n \n pub struct ChainIterator<T, U> {\n@@ -567,4 +605,47 @@ mod tests {\n         }\n         assert_eq!(i, 10);\n     }\n+\n+    #[test]\n+    fn test_iterator_nth() {\n+        let v = &[0, 1, 2, 3, 4];\n+        for uint::range(0, v.len()) |i| {\n+            assert_eq!(v.iter().nth(i), &v[i]);\n+        }\n+    }\n+\n+    #[test]\n+    #[should_fail]\n+    fn test_iterator_nth_fail() {\n+        let v = &[0, 1, 2, 3, 4];\n+        v.iter().nth(5);\n+    }\n+\n+    #[test]\n+    fn test_iterator_first() {\n+        let v = &[0, 1, 2, 3, 4];\n+        assert_eq!(v.iter().first(), &0);\n+        assert_eq!(v.slice(2, 5).iter().first(), &2);\n+    }\n+\n+    #[test]\n+    #[should_fail]\n+    fn test_iterator_first_fail() {\n+        let v: &[uint] = &[];\n+        v.iter().first();\n+    }\n+\n+    #[test]\n+    fn test_iterator_last() {\n+        let v = &[0, 1, 2, 3, 4];\n+        assert_eq!(v.iter().last(), &4);\n+        assert_eq!(v.slice(0, 1).iter().last(), &0);\n+    }\n+\n+    #[test]\n+    #[should_fail]\n+    fn test_iterator_last_fail() {\n+        let v: &[uint] = &[];\n+        v.iter().last();\n+    }\n }"}]}