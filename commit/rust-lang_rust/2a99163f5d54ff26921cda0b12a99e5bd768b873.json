{"sha": "2a99163f5d54ff26921cda0b12a99e5bd768b873", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhOTkxNjNmNWQ1NGZmMjY5MjFjZGEwYjEyYTk5ZTViZDc2OGI4NzM=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-02T18:13:52Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-20T09:08:55Z"}, "message": "Add UnsafeAtomicRcBox::try_unwrap()", "tree": {"sha": "78b754c29e1ad140c5bbacfa002287af5b65a1ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78b754c29e1ad140c5bbacfa002287af5b65a1ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a99163f5d54ff26921cda0b12a99e5bd768b873", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a99163f5d54ff26921cda0b12a99e5bd768b873", "html_url": "https://github.com/rust-lang/rust/commit/2a99163f5d54ff26921cda0b12a99e5bd768b873", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a99163f5d54ff26921cda0b12a99e5bd768b873/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10a400ffaa8b67add66a62bde0ef3c415d7aed5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/10a400ffaa8b67add66a62bde0ef3c415d7aed5f", "html_url": "https://github.com/rust-lang/rust/commit/10a400ffaa8b67add66a62bde0ef3c415d7aed5f"}], "stats": {"total": 69, "additions": 68, "deletions": 1}, "files": [{"sha": "2af914cf458dfe4ae234b71f2c1c1b1f5fbaa328", "filename": "src/libstd/unstable/sync.rs", "status": "modified", "additions": 68, "deletions": 1, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/2a99163f5d54ff26921cda0b12a99e5bd768b873/src%2Flibstd%2Funstable%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a99163f5d54ff26921cda0b12a99e5bd768b873/src%2Flibstd%2Funstable%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fsync.rs?ref=2a99163f5d54ff26921cda0b12a99e5bd768b873", "patch": "@@ -14,6 +14,7 @@ use comm;\n use libc;\n use ptr;\n use option::*;\n+use either::{Either, Left, Right};\n use task;\n use task::atomically;\n use unstable::atomics::{AtomicOption,AtomicUint,Acquire,Release,SeqCst};\n@@ -137,6 +138,31 @@ impl<T: Send> UnsafeAtomicRcBox<T> {\n             }\n         }\n     }\n+\n+    /// As unwrap above, but without blocking. Returns 'Left(self)' if this is\n+    /// not the last reference; 'Right(unwrapped_data)' if so.\n+    pub unsafe fn try_unwrap(self) -> Either<UnsafeAtomicRcBox<T>, T> {\n+        let mut this = self; // FIXME(#4330) mutable self\n+        let mut data: ~AtomicRcBoxData<T> = cast::transmute(this.data);\n+        // This can of course race with anybody else who has a handle, but in\n+        // such a case, the returned count will always be at least 2. If we\n+        // see 1, no race was possible. All that matters is 1 or not-1.\n+        let count = data.count.load(Acquire);\n+        assert!(count >= 1);\n+        // The more interesting race is one with an unwrapper. They may have\n+        // already dropped their count -- but if so, the unwrapper pointer\n+        // will have been set first, which the barriers ensure we will see.\n+        // (Note: using is_empty(), not take(), to not free the unwrapper.)\n+        if count == 1 && data.unwrapper.is_empty(Acquire) {\n+            // Tell this handle's destructor not to run (we are now it).\n+            this.data = ptr::mut_null();\n+            // FIXME(#3224) as above\n+            Right(data.data.take_unwrap())\n+        } else {\n+            cast::forget(data);\n+            Left(this)\n+        }\n+    }\n }\n \n impl<T: Send> Clone for UnsafeAtomicRcBox<T> {\n@@ -380,13 +406,54 @@ mod tests {\n     }\n \n     #[test]\n-    fn unsafe_unwrap_basic() {\n+    fn arclike_unwrap_basic() {\n         unsafe {\n             let x = UnsafeAtomicRcBox::new(~~\"hello\");\n             assert!(x.unwrap() == ~~\"hello\");\n         }\n     }\n \n+    #[test]\n+    fn arclike_try_unwrap() {\n+        unsafe {\n+            let x = UnsafeAtomicRcBox::new(~~\"hello\");\n+            assert!(x.try_unwrap().expect_right(\"try_unwrap failed\") == ~~\"hello\");\n+        }\n+    }\n+\n+    #[test]\n+    fn arclike_try_unwrap_fail() {\n+        unsafe {\n+            let x = UnsafeAtomicRcBox::new(~~\"hello\");\n+            let x2 = x.clone();\n+            let left_x = x.try_unwrap();\n+            assert!(left_x.is_left());\n+            util::ignore(left_x);\n+            assert!(x2.try_unwrap().expect_right(\"try_unwrap none\") == ~~\"hello\");\n+        }\n+    }\n+\n+    #[test]\n+    fn arclike_try_unwrap_unwrap_race() {\n+        // When an unwrap and a try_unwrap race, the unwrapper should always win.\n+        unsafe {\n+            let x = UnsafeAtomicRcBox::new(~~\"hello\");\n+            let x2 = Cell::new(x.clone());\n+            let (p,c) = comm::stream();\n+            do task::spawn {\n+                c.send(());\n+                assert!(x2.take().unwrap() == ~~\"hello\");\n+                c.send(());\n+            }\n+            p.recv();\n+            task::yield(); // Try to make the unwrapper get blocked first.\n+            let left_x = x.try_unwrap();\n+            assert!(left_x.is_left());\n+            util::ignore(left_x);\n+            p.recv();\n+        }\n+    }\n+\n     #[test]\n     fn exclusive_unwrap_basic() {\n         // Unlike the above, also tests no double-freeing of the LittleLock."}]}