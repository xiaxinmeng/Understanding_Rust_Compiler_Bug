{"sha": "ea29b1818f42075f49dac460867d77e0d9c080a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhMjliMTgxOGY0MjA3NWY0OWRhYzQ2MDg2N2Q3N2UwZDljMDgwYTU=", "commit": {"author": {"name": "CohenArthur", "email": "arthur.cohen@epita.fr", "date": "2020-08-22T14:40:58Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@epita.fr", "date": "2020-08-22T14:40:58Z"}, "message": "FunctionCx: Fix FunctionCx initialization in trans_fn()", "tree": {"sha": "b00e774a1f629ddd134502cdc2bd2bd8af329c17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b00e774a1f629ddd134502cdc2bd2bd8af329c17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea29b1818f42075f49dac460867d77e0d9c080a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea29b1818f42075f49dac460867d77e0d9c080a5", "html_url": "https://github.com/rust-lang/rust/commit/ea29b1818f42075f49dac460867d77e0d9c080a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea29b1818f42075f49dac460867d77e0d9c080a5/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b534d653d71c3be1b0c52d3eca7a0dbd0b2936c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b534d653d71c3be1b0c52d3eca7a0dbd0b2936c", "html_url": "https://github.com/rust-lang/rust/commit/7b534d653d71c3be1b0c52d3eca7a0dbd0b2936c"}], "stats": {"total": 32, "additions": 17, "deletions": 15}, "files": [{"sha": "f8046ed3a8e41880a00e3c2e9305854e0c01518b", "filename": "src/base.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ea29b1818f42075f49dac460867d77e0d9c080a5/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea29b1818f42075f49dac460867d77e0d9c080a5/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=ea29b1818f42075f49dac460867d77e0d9c080a5", "patch": "@@ -16,14 +16,9 @@ pub(crate) fn trans_fn<'tcx, B: Backend + 'static>(\n     let (name, sig) = get_function_name_and_sig(tcx, cx.module.isa().triple(), instance, false);\n     let func_id = cx.module.declare_function(&name, linkage, &sig).unwrap();\n \n-    // Make FunctionBuilder\n-    let context = &mut cx.cached_context;\n-    context.clear();\n-    context.func.name = ExternalName::user(0, func_id.as_u32());\n-    context.func.signature = sig;\n-    context.func.collect_debug_info();\n     let mut func_ctx = FunctionBuilderContext::new();\n-    let mut bcx = FunctionBuilder::new(&mut context.func, &mut func_ctx);\n+    let mut func = Function::new();\n+    let mut bcx = FunctionBuilder::new(&mut func, &mut func_ctx);\n \n     // Predefine blocks\n     let start_block = bcx.create_block();\n@@ -66,6 +61,13 @@ pub(crate) fn trans_fn<'tcx, B: Backend + 'static>(\n         });\n     }\n \n+    // Make FunctionBuilder\n+    let context = &mut fx.cx.cached_context;\n+    context.clear();\n+    context.func.name = ExternalName::user(0, func_id.as_u32());\n+    context.func.signature = sig;\n+    context.func.collect_debug_info();\n+\n     // Recover all necessary data from fx, before accessing func will prevent future access to it.\n     let instance = fx.instance;\n     let mut clif_comments = fx.clif_comments;\n@@ -74,7 +76,7 @@ pub(crate) fn trans_fn<'tcx, B: Backend + 'static>(\n     let cold_blocks = fx.cold_blocks;\n \n     crate::pretty_clif::write_clif_file(\n-        cx.tcx,\n+        fx.cx.tcx,\n         \"unopt\",\n         None,\n         instance,\n@@ -94,10 +96,10 @@ pub(crate) fn trans_fn<'tcx, B: Backend + 'static>(\n     // instruction, which doesn't have an encoding.\n     context.compute_cfg();\n     context.compute_domtree();\n-    context.eliminate_unreachable_code(cx.module.isa()).unwrap();\n+    context.eliminate_unreachable_code(fx.cx.module.isa()).unwrap();\n \n     // Define function\n-    let module = &mut cx.module;\n+    let module = &mut fx.cx.module;\n     tcx.sess.time(\n         \"define function\",\n         || module.define_function(\n@@ -109,18 +111,18 @@ pub(crate) fn trans_fn<'tcx, B: Backend + 'static>(\n \n     // Write optimized function to file for debugging\n     crate::pretty_clif::write_clif_file(\n-        cx.tcx,\n+        fx.cx.tcx,\n         \"opt\",\n-        Some(cx.module.isa()),\n+        Some(fx.cx.module.isa()),\n         instance,\n         &context,\n         &clif_comments,\n     );\n \n     // Define debuginfo for function\n-    let isa = cx.module.isa();\n-    let debug_context = &mut cx.debug_context;\n-    let unwind_context = &mut cx.unwind_context;\n+    let isa = fx.cx.module.isa();\n+    let debug_context = &mut fx.cx.debug_context;\n+    let unwind_context = &mut fx.cx.unwind_context;\n     tcx.sess.time(\"generate debug info\", || {\n         if let Some(debug_context) = debug_context {\n             debug_context.define_function(instance, func_id, &name, isa, context, &source_info_set, local_map);"}]}