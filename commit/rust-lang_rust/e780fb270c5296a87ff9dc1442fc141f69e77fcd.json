{"sha": "e780fb270c5296a87ff9dc1442fc141f69e77fcd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ODBmYjI3MGM1Mjk2YTg3ZmY5ZGMxNDQyZmMxNDFmNjllNzdmY2Q=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-04-30T18:40:38Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-05-12T14:53:50Z"}, "message": "TRPL: Borrow and AsRef\n\nThese two traits are commonly confused. As such, explain the difference.\n\nFixes #24163", "tree": {"sha": "f1868b9107a937a9dc01508d4d102acb57d276d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1868b9107a937a9dc01508d4d102acb57d276d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e780fb270c5296a87ff9dc1442fc141f69e77fcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e780fb270c5296a87ff9dc1442fc141f69e77fcd", "html_url": "https://github.com/rust-lang/rust/commit/e780fb270c5296a87ff9dc1442fc141f69e77fcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e780fb270c5296a87ff9dc1442fc141f69e77fcd/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ad202671fc031ee90133fa5849ef0ec31164e04", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ad202671fc031ee90133fa5849ef0ec31164e04", "html_url": "https://github.com/rust-lang/rust/commit/0ad202671fc031ee90133fa5849ef0ec31164e04"}], "stats": {"total": 104, "additions": 104, "deletions": 0}, "files": [{"sha": "3f97928a56e3f067af823d1939ea8d85cf779aef", "filename": "src/doc/trpl/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e780fb270c5296a87ff9dc1442fc141f69e77fcd/src%2Fdoc%2Ftrpl%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/e780fb270c5296a87ff9dc1442fc141f69e77fcd/src%2Fdoc%2Ftrpl%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2FSUMMARY.md?ref=e780fb270c5296a87ff9dc1442fc141f69e77fcd", "patch": "@@ -15,6 +15,7 @@\n     * [Concurrency](concurrency.md)\n     * [Error Handling](error-handling.md)\n     * [FFI](ffi.md)\n+    * [Borrow and AsRef](borrow-and-asref.md)\n * [Syntax and Semantics](syntax-and-semantics.md)\n     * [Variable Bindings](variable-bindings.md)\n     * [Functions](functions.md)"}, {"sha": "f5f314f1c21d6ee9d3bc719134a7ad013b23698f", "filename": "src/doc/trpl/borrow-and-asref.md", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/e780fb270c5296a87ff9dc1442fc141f69e77fcd/src%2Fdoc%2Ftrpl%2Fborrow-and-asref.md", "raw_url": "https://github.com/rust-lang/rust/raw/e780fb270c5296a87ff9dc1442fc141f69e77fcd/src%2Fdoc%2Ftrpl%2Fborrow-and-asref.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fborrow-and-asref.md?ref=e780fb270c5296a87ff9dc1442fc141f69e77fcd", "patch": "@@ -0,0 +1,93 @@\n+% Borrow and AsRef\n+\n+The [`Borrow`][borrow] and [`AsRef`][asref] traits are very similar, but\n+different. Here\u2019s a quick refresher on what these two traits mean.\n+\n+[borrow]: ../std/borrow/trait.Borrow.html\n+[asref]: ../std/convert/trait.AsRef.html\n+\n+# Borrow\n+\n+The `Borrow` trait is used when you\u2019re writing a datastructure, and you want to\n+use either an owned or borrowed type as synonymous for some purpose.\n+\n+For example, [`HashMap`][hashmap] has a [`get` method][get] which uses `Borrow`:\n+\n+```rust,ignore\n+fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>\n+    where K: Borrow<Q>,\n+          Q: Hash + Eq\n+```\n+\n+[hashmap]: ../std/collections/struct.HashMap.html\n+[get]: ../std/collections/struct.HashMap.html#method.get\n+\n+This signature is pretty complicated. The `K` parameter is what we\u2019re interested\n+in here. It refers to a parameter of the `HashMap` itself:\n+\n+```rust,ignore\n+struct HashMap<K, V, S = RandomState> {\n+```\n+\n+The `K` parameter is the type of _key_ the `HashMap` uses. So, looking at\n+the signature of `get()` again, we can use `get()` when the key implements\n+`Borrow<Q>`. That way, we can make a `HashMap` which uses `String` keys,\n+but use `&str`s when we\u2019re searching:\n+\n+```rust\n+use std::collections::HashMap;\n+\n+let mut map = HashMap::new();\n+map.insert(\"Foo\".to_string(), 42);\n+\n+assert_eq!(map.get(\"Foo\"), Some(&42));\n+```\n+\n+This is because the standard library has `impl Borrow<str> for String`.\n+\n+For most types, when you want to take an owned or borrowed type, a `&T` is\n+enough. But one area where `Borrow` is effective is when there\u2019s more than one\n+kind of borrowed value. Slices are an area where this is especially true: you\n+can have both an `&[T]` or a `&mut [T]`. If we wanted to accept both of these\n+types, `Borrow` is up for it:\n+\n+```\n+use std::borrow::Borrow;\n+use std::fmt::Display;\n+\n+fn foo<T: Borrow<i32> + Display>(a: T) {\n+    println!(\"a is borrowed: {}\", a);\n+}\n+\n+let mut i = 5;\n+\n+foo(&i);\n+foo(&mut i);\n+```\n+\n+This will print out `a is borrowed: 5` twice.\n+\n+# AsRef\n+\n+The `AsRef` trait is a conversion trait. It\u2019s used for converting some value to\n+a reference in generic code. Like this:\n+\n+```rust\n+let s = \"Hello\".to_string();\n+\n+fn foo<T: AsRef<str>>(s: T) {\n+    let slice = s.as_ref();\n+}\n+```\n+\n+# Which should I use?\n+\n+We can see how they\u2019re kind of the same: they both deal with owned and borrowed\n+versions of some type. However, they\u2019re a bit different.\n+\n+Choose `Borrow` when you want to abstract over different kinds of borrowing, or\n+when you\u2019re building a datastructure that treats owned and borrowed values in\n+equivalent ways, such as hashing and comparison.\n+\n+Choose `AsRef` when you want to convert something to a reference directly, and\n+you\u2019re writing generic code."}, {"sha": "a86a4b4215f23ff2b927b944fee0201a696a8f2d", "filename": "src/libcollections/borrow.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e780fb270c5296a87ff9dc1442fc141f69e77fcd/src%2Flibcollections%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e780fb270c5296a87ff9dc1442fc141f69e77fcd/src%2Flibcollections%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fborrow.rs?ref=e780fb270c5296a87ff9dc1442fc141f69e77fcd", "patch": "@@ -37,6 +37,11 @@ use self::Cow::*;\n /// trait: if `T: Borrow<U>`, then `&U` can be borrowed from `&T`.  A given\n /// type can be borrowed as multiple different types. In particular, `Vec<T>:\n /// Borrow<Vec<T>>` and `Vec<T>: Borrow<[T]>`.\n+///\n+/// `Borrow` is very similar to, but different than, `AsRef`. See\n+/// [the book][book] for more.\n+///\n+/// [book]: ../../book/borrow-and-asref.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Borrow<Borrowed: ?Sized> {\n     /// Immutably borrows from an owned value."}, {"sha": "f6987c1966493843c25c768fad1a9d5aaf8f1f7e", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e780fb270c5296a87ff9dc1442fc141f69e77fcd/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e780fb270c5296a87ff9dc1442fc141f69e77fcd/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=e780fb270c5296a87ff9dc1442fc141f69e77fcd", "patch": "@@ -24,6 +24,11 @@ use marker::Sized;\n \n /// A cheap, reference-to-reference conversion.\n ///\n+/// `AsRef` is very similar to, but different than, `Borrow`. See\n+/// [the book][book] for more.\n+///\n+/// [book]: ../../book/borrow-and-asref.html\n+///\n /// # Examples\n ///\n /// Both `String` and `&str` implement `AsRef<str>`:"}]}