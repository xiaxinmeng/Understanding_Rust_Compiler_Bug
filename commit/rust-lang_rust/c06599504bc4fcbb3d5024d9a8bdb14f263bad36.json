{"sha": "c06599504bc4fcbb3d5024d9a8bdb14f263bad36", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNjU5OTUwNGJjNGZjYmIzZDUwMjRkOWE4YmRiMTRmMjYzYmFkMzY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-23T20:15:54Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-23T20:15:54Z"}, "message": "remove duplicate tests", "tree": {"sha": "ed4b5acf93ff3cbbfd47a30954e9212ef00b9a1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed4b5acf93ff3cbbfd47a30954e9212ef00b9a1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c06599504bc4fcbb3d5024d9a8bdb14f263bad36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c06599504bc4fcbb3d5024d9a8bdb14f263bad36", "html_url": "https://github.com/rust-lang/rust/commit/c06599504bc4fcbb3d5024d9a8bdb14f263bad36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c06599504bc4fcbb3d5024d9a8bdb14f263bad36/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c8259e210bbb6c6c6e4781ce15d42a2f9c43f22", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c8259e210bbb6c6c6e4781ce15d42a2f9c43f22", "html_url": "https://github.com/rust-lang/rust/commit/4c8259e210bbb6c6c6e4781ce15d42a2f9c43f22"}], "stats": {"total": 129, "additions": 26, "deletions": 103}, "files": [{"sha": "fbd47d76111d4c7a96c42f0bbbeadf340e1ae40d", "filename": "crates/ide_assists/src/handlers/generate_getter.rs", "status": "modified", "additions": 26, "deletions": 103, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/c06599504bc4fcbb3d5024d9a8bdb14f263bad36/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06599504bc4fcbb3d5024d9a8bdb14f263bad36/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs?ref=c06599504bc4fcbb3d5024d9a8bdb14f263bad36", "patch": "@@ -130,10 +130,6 @@ mod tests {\n \n     use super::*;\n \n-    fn check_not_applicable(ra_fixture: &str) {\n-        check_assist_not_applicable(generate_getter, ra_fixture)\n-    }\n-\n     #[test]\n     fn test_generate_getter_from_field() {\n         check_assist(\n@@ -154,121 +150,48 @@ impl<T: Clone> Context<T> {\n     }\n }\"#,\n         );\n-    }\n-\n-    #[test]\n-    fn test_generate_getter_already_implemented() {\n-        check_not_applicable(\n-            r#\"\n-struct Context<T: Clone> {\n-    dat$0a: T,\n-}\n-\n-impl<T: Clone> Context<T> {\n-    fn data(&self) -> &T {\n-        &self.data\n-    }\n-}\"#,\n-        );\n-    }\n \n-    #[test]\n-    fn test_generate_getter_from_field_with_visibility_marker() {\n         check_assist(\n-            generate_getter,\n+            generate_getter_mut,\n             r#\"\n-pub(crate) struct Context<T: Clone> {\n+struct Context<T: Clone> {\n     dat$0a: T,\n }\"#,\n             r#\"\n-pub(crate) struct Context<T: Clone> {\n+struct Context<T: Clone> {\n     data: T,\n }\n \n impl<T: Clone> Context<T> {\n-    /// Get a reference to the context's data.\n-    pub(crate) fn data(&self) -> &T {\n-        &self.data\n+    /// Get a mutable reference to the context's data.\n+    fn data_mut(&mut self) -> &mut T {\n+        &mut self.data\n     }\n }\"#,\n         );\n     }\n \n     #[test]\n-    fn test_multiple_generate_getter() {\n-        check_assist(\n+    fn test_generate_getter_already_implemented() {\n+        check_assist_not_applicable(\n             generate_getter,\n             r#\"\n struct Context<T: Clone> {\n-    data: T,\n-    cou$0nt: usize,\n-}\n-\n-impl<T: Clone> Context<T> {\n-    /// Get a reference to the context's data.\n-    fn data(&self) -> &T {\n-        &self.data\n-    }\n-}\"#,\n-            r#\"\n-struct Context<T: Clone> {\n-    data: T,\n-    count: usize,\n+    dat$0a: T,\n }\n \n impl<T: Clone> Context<T> {\n-    /// Get a reference to the context's data.\n     fn data(&self) -> &T {\n         &self.data\n     }\n-\n-    /// Get a reference to the context's count.\n-    fn count(&self) -> &usize {\n-        &self.count\n-    }\n }\"#,\n         );\n-    }\n-}\n-\n-#[cfg(test)]\n-mod tests_mut {\n-    use crate::tests::{check_assist, check_assist_not_applicable};\n-\n-    use super::*;\n \n-    fn check_not_applicable(ra_fixture: &str) {\n-        check_assist_not_applicable(generate_getter_mut, ra_fixture)\n-    }\n-\n-    #[test]\n-    fn test_generate_getter_mut_from_field() {\n-        check_assist(\n+        check_assist_not_applicable(\n             generate_getter_mut,\n             r#\"\n struct Context<T: Clone> {\n     dat$0a: T,\n-}\"#,\n-            r#\"\n-struct Context<T: Clone> {\n-    data: T,\n-}\n-\n-impl<T: Clone> Context<T> {\n-    /// Get a mutable reference to the context's data.\n-    fn data_mut(&mut self) -> &mut T {\n-        &mut self.data\n-    }\n-}\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn test_generate_getter_mut_already_implemented() {\n-        check_not_applicable(\n-            r#\"\n-struct Context<T: Clone> {\n-    dat$0a: T,\n }\n \n impl<T: Clone> Context<T> {\n@@ -280,9 +203,9 @@ impl<T: Clone> Context<T> {\n     }\n \n     #[test]\n-    fn test_generate_getter_mut_from_field_with_visibility_marker() {\n+    fn test_generate_getter_from_field_with_visibility_marker() {\n         check_assist(\n-            generate_getter_mut,\n+            generate_getter,\n             r#\"\n pub(crate) struct Context<T: Clone> {\n     dat$0a: T,\n@@ -293,28 +216,28 @@ pub(crate) struct Context<T: Clone> {\n }\n \n impl<T: Clone> Context<T> {\n-    /// Get a mutable reference to the context's data.\n-    pub(crate) fn data_mut(&mut self) -> &mut T {\n-        &mut self.data\n+    /// Get a reference to the context's data.\n+    pub(crate) fn data(&self) -> &T {\n+        &self.data\n     }\n }\"#,\n         );\n     }\n \n     #[test]\n-    fn test_multiple_generate_getter_mut() {\n+    fn test_multiple_generate_getter() {\n         check_assist(\n-            generate_getter_mut,\n+            generate_getter,\n             r#\"\n struct Context<T: Clone> {\n     data: T,\n     cou$0nt: usize,\n }\n \n impl<T: Clone> Context<T> {\n-    /// Get a mutable reference to the context's data.\n-    fn data_mut(&mut self) -> &mut T {\n-        &mut self.data\n+    /// Get a reference to the context's data.\n+    fn data(&self) -> &T {\n+        &self.data\n     }\n }\"#,\n             r#\"\n@@ -324,14 +247,14 @@ struct Context<T: Clone> {\n }\n \n impl<T: Clone> Context<T> {\n-    /// Get a mutable reference to the context's data.\n-    fn data_mut(&mut self) -> &mut T {\n-        &mut self.data\n+    /// Get a reference to the context's data.\n+    fn data(&self) -> &T {\n+        &self.data\n     }\n \n-    /// Get a mutable reference to the context's count.\n-    fn count_mut(&mut self) -> &mut usize {\n-        &mut self.count\n+    /// Get a reference to the context's count.\n+    fn count(&self) -> &usize {\n+        &self.count\n     }\n }\"#,\n         );"}]}