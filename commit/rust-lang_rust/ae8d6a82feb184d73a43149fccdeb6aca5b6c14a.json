{"sha": "ae8d6a82feb184d73a43149fccdeb6aca5b6c14a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlOGQ2YTgyZmViMTg0ZDczYTQzMTQ5ZmNjZGViNmFjYTViNmMxNGE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-06-14T17:45:13Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-06-14T17:45:13Z"}, "message": "review comments: avoid string modification", "tree": {"sha": "3c6d16300ff182411b4bade3883bf309054ab9c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c6d16300ff182411b4bade3883bf309054ab9c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae8d6a82feb184d73a43149fccdeb6aca5b6c14a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae8d6a82feb184d73a43149fccdeb6aca5b6c14a", "html_url": "https://github.com/rust-lang/rust/commit/ae8d6a82feb184d73a43149fccdeb6aca5b6c14a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae8d6a82feb184d73a43149fccdeb6aca5b6c14a/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ce063a216768ed125eb4245a027fef431d7d78c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ce063a216768ed125eb4245a027fef431d7d78c", "html_url": "https://github.com/rust-lang/rust/commit/8ce063a216768ed125eb4245a027fef431d7d78c"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "30411225519c78d0c9b423b347218248309d54f8", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ae8d6a82feb184d73a43149fccdeb6aca5b6c14a/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8d6a82feb184d73a43149fccdeb6aca5b6c14a/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=ae8d6a82feb184d73a43149fccdeb6aca5b6c14a", "patch": "@@ -379,7 +379,19 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     }\n                 };\n                 if self.can_coerce(ref_ty, expected) {\n-                    if let Ok(src) = cm.span_to_snippet(sp) {\n+                    let mut sugg_sp = sp;\n+                    if let hir::ExprKind::MethodCall(_segment, _sp, args) = &expr.node {\n+                        let clone_path = \"std::clone::Clone::clone\";\n+                        if let ([arg], Some(true)) = (&args[..], self.tables.borrow()\n+                            .type_dependent_def_id(expr.hir_id)\n+                            .map(|did| self.tcx.def_path_str(did).as_str() == clone_path))\n+                        {\n+                            // If this expression had a clone call when suggesting borrowing\n+                            // we want to suggest removing it because it'd now be unecessary.\n+                            sugg_sp = arg.span;\n+                        }\n+                    }\n+                    if let Ok(src) = cm.span_to_snippet(sugg_sp) {\n                         let needs_parens = match expr.node {\n                             // parenthesize if needed (Issue #46756)\n                             hir::ExprKind::Cast(_, _) |\n@@ -426,28 +438,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             }\n                         }\n \n-                        let mut sugg = sugg_expr.as_str();\n-                        if let hir::ExprKind::MethodCall(_segment, _sp, _args) = &expr.node {\n-                            let clone_path = \"std::clone::Clone::clone\";\n-                            if let Some(true) = self.tables.borrow()\n-                                .type_dependent_def_id(expr.hir_id)\n-                                .map(|did| self.tcx.def_path_str(did).as_str() == clone_path)\n-                            {\n-                                // If this expression had a clone call when suggesting borrowing\n-                                // we want to suggest removing it because it'd now be unecessary.\n-                                sugg = sugg_expr.trim_end_matches(\".clone()\");\n-                            }\n-                        }\n                         return Some(match mutability {\n                             hir::Mutability::MutMutable => (\n                                 sp,\n                                 \"consider mutably borrowing here\",\n-                                format!(\"{}&mut {}\", field_name, sugg),\n+                                format!(\"{}&mut {}\", field_name, sugg_expr),\n                             ),\n                             hir::Mutability::MutImmutable => (\n                                 sp,\n                                 \"consider borrowing here\",\n-                                format!(\"{}&{}\", field_name, sugg),\n+                                format!(\"{}&{}\", field_name, sugg_expr),\n                             ),\n                         });\n                     }"}]}