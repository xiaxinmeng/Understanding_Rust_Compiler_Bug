{"sha": "64dc041511852441ebc071c6fdf1e110e80b7b97", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0ZGMwNDE1MTE4NTI0NDFlYmMwNzFjNmZkZjFlMTEwZTgwYjdiOTc=", "commit": {"author": {"name": "Marc", "email": "marc.gluyas@gmail.com", "date": "2019-04-15T01:19:38Z"}, "committer": {"name": "Marc", "email": "marc.gluyas@gmail.com", "date": "2019-04-15T08:30:52Z"}, "message": "Remove collection-specific `with_capacity` doc from `std::collections`\n\nFixes #59931", "tree": {"sha": "1a7664d7eb7558dec34b3fdfcaf6594cd515b0d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a7664d7eb7558dec34b3fdfcaf6594cd515b0d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64dc041511852441ebc071c6fdf1e110e80b7b97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64dc041511852441ebc071c6fdf1e110e80b7b97", "html_url": "https://github.com/rust-lang/rust/commit/64dc041511852441ebc071c6fdf1e110e80b7b97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64dc041511852441ebc071c6fdf1e110e80b7b97/comments", "author": {"login": "gluyas", "id": 18733113, "node_id": "MDQ6VXNlcjE4NzMzMTEz", "avatar_url": "https://avatars.githubusercontent.com/u/18733113?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gluyas", "html_url": "https://github.com/gluyas", "followers_url": "https://api.github.com/users/gluyas/followers", "following_url": "https://api.github.com/users/gluyas/following{/other_user}", "gists_url": "https://api.github.com/users/gluyas/gists{/gist_id}", "starred_url": "https://api.github.com/users/gluyas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gluyas/subscriptions", "organizations_url": "https://api.github.com/users/gluyas/orgs", "repos_url": "https://api.github.com/users/gluyas/repos", "events_url": "https://api.github.com/users/gluyas/events{/privacy}", "received_events_url": "https://api.github.com/users/gluyas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gluyas", "id": 18733113, "node_id": "MDQ6VXNlcjE4NzMzMTEz", "avatar_url": "https://avatars.githubusercontent.com/u/18733113?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gluyas", "html_url": "https://github.com/gluyas", "followers_url": "https://api.github.com/users/gluyas/followers", "following_url": "https://api.github.com/users/gluyas/following{/other_user}", "gists_url": "https://api.github.com/users/gluyas/gists{/gist_id}", "starred_url": "https://api.github.com/users/gluyas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gluyas/subscriptions", "organizations_url": "https://api.github.com/users/gluyas/orgs", "repos_url": "https://api.github.com/users/gluyas/repos", "events_url": "https://api.github.com/users/gluyas/events{/privacy}", "received_events_url": "https://api.github.com/users/gluyas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa99abeb262307d5e9aa11a792312fd620b7f89a", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa99abeb262307d5e9aa11a792312fd620b7f89a", "html_url": "https://github.com/rust-lang/rust/commit/aa99abeb262307d5e9aa11a792312fd620b7f89a"}], "stats": {"total": 7, "additions": 3, "deletions": 4}, "files": [{"sha": "15c2532f8b4e0b839645ca6885acc5cfbe7c306c", "filename": "src/libstd/collections/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/64dc041511852441ebc071c6fdf1e110e80b7b97/src%2Flibstd%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64dc041511852441ebc071c6fdf1e110e80b7b97/src%2Flibstd%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fmod.rs?ref=64dc041511852441ebc071c6fdf1e110e80b7b97", "patch": "@@ -150,10 +150,9 @@\n //! Any `with_capacity` constructor will instruct the collection to allocate\n //! enough space for the specified number of elements. Ideally this will be for\n //! exactly that many elements, but some implementation details may prevent\n-//! this. [`Vec`] and [`VecDeque`] can be relied on to allocate exactly the\n-//! requested amount, though. Use `with_capacity` when you know exactly how many\n-//! elements will be inserted, or at least have a reasonable upper-bound on that\n-//! number.\n+//! this. See collection-specific documentation for details. In general, use\n+//! `with_capacity` when you know exactly how many elements will be inserted, or\n+//! at least have a reasonable upper-bound on that number.\n //!\n //! When anticipating a large influx of elements, the `reserve` family of\n //! methods can be used to hint to the collection how much room it should make"}]}