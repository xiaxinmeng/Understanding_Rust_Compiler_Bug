{"sha": "a20013b129c10907aee0bfb5bf1cac387e48eb51", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMDAxM2IxMjljMTA5MDdhZWUwYmZiNWJmMWNhYzM4N2U0OGViNTE=", "commit": {"author": {"name": "Mikhail Zabaluev", "email": "mikhail.zabaluev@gmail.com", "date": "2019-11-02T18:13:32Z"}, "committer": {"name": "Mikhail Zabaluev", "email": "mikhail.zabaluev@gmail.com", "date": "2019-12-22T06:05:52Z"}, "message": "Add Result::unwrap_infallible\n\nImplementation of\nhttps://github.com/rust-lang/rfcs/pull/2799", "tree": {"sha": "655446323c18d65b617c454c5919c12459cbdb60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/655446323c18d65b617c454c5919c12459cbdb60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a20013b129c10907aee0bfb5bf1cac387e48eb51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a20013b129c10907aee0bfb5bf1cac387e48eb51", "html_url": "https://github.com/rust-lang/rust/commit/a20013b129c10907aee0bfb5bf1cac387e48eb51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a20013b129c10907aee0bfb5bf1cac387e48eb51/comments", "author": {"login": "mzabaluev", "id": 1198919, "node_id": "MDQ6VXNlcjExOTg5MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1198919?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mzabaluev", "html_url": "https://github.com/mzabaluev", "followers_url": "https://api.github.com/users/mzabaluev/followers", "following_url": "https://api.github.com/users/mzabaluev/following{/other_user}", "gists_url": "https://api.github.com/users/mzabaluev/gists{/gist_id}", "starred_url": "https://api.github.com/users/mzabaluev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mzabaluev/subscriptions", "organizations_url": "https://api.github.com/users/mzabaluev/orgs", "repos_url": "https://api.github.com/users/mzabaluev/repos", "events_url": "https://api.github.com/users/mzabaluev/events{/privacy}", "received_events_url": "https://api.github.com/users/mzabaluev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mzabaluev", "id": 1198919, "node_id": "MDQ6VXNlcjExOTg5MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1198919?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mzabaluev", "html_url": "https://github.com/mzabaluev", "followers_url": "https://api.github.com/users/mzabaluev/followers", "following_url": "https://api.github.com/users/mzabaluev/following{/other_user}", "gists_url": "https://api.github.com/users/mzabaluev/gists{/gist_id}", "starred_url": "https://api.github.com/users/mzabaluev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mzabaluev/subscriptions", "organizations_url": "https://api.github.com/users/mzabaluev/orgs", "repos_url": "https://api.github.com/users/mzabaluev/repos", "events_url": "https://api.github.com/users/mzabaluev/events{/privacy}", "received_events_url": "https://api.github.com/users/mzabaluev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e9172f633dabec3e084f1e3fd9ac3695f27fba0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e9172f633dabec3e084f1e3fd9ac3695f27fba0", "html_url": "https://github.com/rust-lang/rust/commit/6e9172f633dabec3e084f1e3fd9ac3695f27fba0"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "ed3b37ad2a57b71aa48baea3fab135ae567d29e6", "filename": "src/libcore/result.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a20013b129c10907aee0bfb5bf1cac387e48eb51/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a20013b129c10907aee0bfb5bf1cac387e48eb51/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=a20013b129c10907aee0bfb5bf1cac387e48eb51", "patch": "@@ -1083,6 +1083,44 @@ impl<T: Default, E> Result<T, E> {\n     }\n }\n \n+#[unstable(feature = \"unwrap_infallible\", reason = \"newly added\", issue = \"61695\")]\n+impl<T, E: Into<!>> Result<T, E> {\n+    /// Unwraps a result that can never be an [`Err`], yielding the content of the [`Ok`].\n+    ///\n+    /// Unlike [`unwrap`], this method is known to never panic on the\n+    /// result types it is implemented for. Therefore, it can be used\n+    /// instead of `unwrap` as a maintainability safeguard that will fail\n+    /// to compile if the error type of the `Result` is later changed\n+    /// to an error that can actually occur.\n+    ///\n+    /// [`Ok`]: enum.Result.html#variant.Ok\n+    /// [`Err`]: enum.Result.html#variant.Err\n+    /// [`unwrap`]: enum.Result.html#method.unwrap\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// # #![feature(never_type)]\n+    /// # #![feature(unwrap_infallible)]\n+    ///\n+    /// fn only_good_news() -> Result<String, !> {\n+    ///     Ok(\"this is fine\".into())\n+    /// }\n+    ///\n+    /// let s: String = only_good_news().unwrap_infallible();\n+    /// println!(\"{}\", s);\n+    /// ```\n+    #[inline]\n+    pub fn unwrap_infallible(self) -> T {\n+        match self {\n+            Ok(x) => x,\n+            Err(e) => e.into(),\n+        }\n+    }\n+}\n+\n #[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n impl<T: Deref, E> Result<T, E> {\n     /// Converts from `Result<T, E>` (or `&Result<T, E>`) to `Result<&T::Target, &E>`."}]}