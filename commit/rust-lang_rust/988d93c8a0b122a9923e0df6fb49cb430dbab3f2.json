{"sha": "988d93c8a0b122a9923e0df6fb49cb430dbab3f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4OGQ5M2M4YTBiMTIyYTk5MjNlMGRmNmZiNDljYjQzMGRiYWIzZjI=", "commit": {"author": {"name": "Julian Wollersberger", "email": "julian.wollersberger@gmx.at", "date": "2021-01-31T20:40:03Z"}, "committer": {"name": "Julian Wollersberger", "email": "julian.wollersberger@gmx.at", "date": "2021-01-31T20:40:03Z"}, "message": "Indent the code correctly again after removing the query categories.", "tree": {"sha": "6e0467e959d719bbceaf72326b0dd68c55f30b15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e0467e959d719bbceaf72326b0dd68c55f30b15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/988d93c8a0b122a9923e0df6fb49cb430dbab3f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/988d93c8a0b122a9923e0df6fb49cb430dbab3f2", "html_url": "https://github.com/rust-lang/rust/commit/988d93c8a0b122a9923e0df6fb49cb430dbab3f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/988d93c8a0b122a9923e0df6fb49cb430dbab3f2/comments", "author": null, "committer": null, "parents": [{"sha": "7bc09f78af16cbc95c5139496e6cfd4045edff3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bc09f78af16cbc95c5139496e6cfd4045edff3a", "html_url": "https://github.com/rust-lang/rust/commit/7bc09f78af16cbc95c5139496e6cfd4045edff3a"}], "stats": {"total": 2904, "additions": 1451, "deletions": 1453}, "files": [{"sha": "cff8e9833189bbf7535b208e2169ff5272323f1e", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 52, "deletions": 54, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/988d93c8a0b122a9923e0df6fb49cb430dbab3f2/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/988d93c8a0b122a9923e0df6fb49cb430dbab3f2/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=988d93c8a0b122a9923e0df6fb49cb430dbab3f2", "patch": "@@ -438,66 +438,64 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n     let mut dep_node_def_stream = quote! {};\n     let mut cached_queries = quote! {};\n \n-    //for group in groups.0 {\n-        for mut query in queries.0 {\n-            let modifiers = process_modifiers(&mut query);\n-            let name = &query.name;\n-            let arg = &query.arg;\n-            let result_full = &query.result;\n-            let result = match query.result {\n-                ReturnType::Default => quote! { -> () },\n-                _ => quote! { #result_full },\n-            };\n+    for mut query in queries.0 {\n+        let modifiers = process_modifiers(&mut query);\n+        let name = &query.name;\n+        let arg = &query.arg;\n+        let result_full = &query.result;\n+        let result = match query.result {\n+            ReturnType::Default => quote! { -> () },\n+            _ => quote! { #result_full },\n+        };\n \n-            if modifiers.cache.is_some() {\n-                cached_queries.extend(quote! {\n-                    #name,\n-                });\n-            }\n+        if modifiers.cache.is_some() {\n+            cached_queries.extend(quote! {\n+                #name,\n+            });\n+        }\n \n-            let mut attributes = Vec::new();\n+        let mut attributes = Vec::new();\n \n-            // Pass on the fatal_cycle modifier\n-            if modifiers.fatal_cycle {\n-                attributes.push(quote! { fatal_cycle });\n-            };\n-            // Pass on the storage modifier\n-            if let Some(ref ty) = modifiers.storage {\n-                attributes.push(quote! { storage(#ty) });\n-            };\n-            // Pass on the cycle_delay_bug modifier\n-            if modifiers.cycle_delay_bug {\n-                attributes.push(quote! { cycle_delay_bug });\n-            };\n-            // Pass on the no_hash modifier\n-            if modifiers.no_hash {\n-                attributes.push(quote! { no_hash });\n-            };\n-            // Pass on the anon modifier\n-            if modifiers.anon {\n-                attributes.push(quote! { anon });\n-            };\n-            // Pass on the eval_always modifier\n-            if modifiers.eval_always {\n-                attributes.push(quote! { eval_always });\n-            };\n+        // Pass on the fatal_cycle modifier\n+        if modifiers.fatal_cycle {\n+            attributes.push(quote! { fatal_cycle });\n+        };\n+        // Pass on the storage modifier\n+        if let Some(ref ty) = modifiers.storage {\n+            attributes.push(quote! { storage(#ty) });\n+        };\n+        // Pass on the cycle_delay_bug modifier\n+        if modifiers.cycle_delay_bug {\n+            attributes.push(quote! { cycle_delay_bug });\n+        };\n+        // Pass on the no_hash modifier\n+        if modifiers.no_hash {\n+            attributes.push(quote! { no_hash });\n+        };\n+        // Pass on the anon modifier\n+        if modifiers.anon {\n+            attributes.push(quote! { anon });\n+        };\n+        // Pass on the eval_always modifier\n+        if modifiers.eval_always {\n+            attributes.push(quote! { eval_always });\n+        };\n \n-            let attribute_stream = quote! {#(#attributes),*};\n-            let doc_comments = query.doc_comments.iter();\n-            // Add the query to the group\n-            query_stream.extend(quote! {\n-                #(#doc_comments)*\n-                [#attribute_stream] fn #name(#arg) #result,\n-            });\n+        let attribute_stream = quote! {#(#attributes),*};\n+        let doc_comments = query.doc_comments.iter();\n+        // Add the query to the group\n+        query_stream.extend(quote! {\n+            #(#doc_comments)*\n+            [#attribute_stream] fn #name(#arg) #result,\n+        });\n \n-            // Create a dep node for the query\n-            dep_node_def_stream.extend(quote! {\n-                [#attribute_stream] #name(#arg),\n-            });\n+        // Create a dep node for the query\n+        dep_node_def_stream.extend(quote! {\n+            [#attribute_stream] #name(#arg),\n+        });\n \n-            add_query_description_impl(&query, modifiers, &mut query_description_stream);\n-        }\n-    //}\n+        add_query_description_impl(&query, modifiers, &mut query_description_stream);\n+    }\n \n     TokenStream::from(quote! {\n         macro_rules! rustc_query_append {"}, {"sha": "ca528b2f0914bbff8df1fc6f912c1bf04bcbcbf2", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1399, "deletions": 1399, "changes": 2798, "blob_url": "https://github.com/rust-lang/rust/blob/988d93c8a0b122a9923e0df6fb49cb430dbab3f2/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/988d93c8a0b122a9923e0df6fb49cb430dbab3f2/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=988d93c8a0b122a9923e0df6fb49cb430dbab3f2"}]}