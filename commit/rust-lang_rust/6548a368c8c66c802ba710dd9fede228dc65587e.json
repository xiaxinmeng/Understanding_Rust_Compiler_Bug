{"sha": "6548a368c8c66c802ba710dd9fede228dc65587e", "node_id": "C_kwDOAAsO6NoAKDY1NDhhMzY4YzhjNjZjODAyYmE3MTBkZDlmZWRlMjI4ZGM2NTU4N2U", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-14T16:24:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-14T16:24:58Z"}, "message": "Rollup merge of #94670 - xFrednet:rfc-2383-expect-impl-after-party, r=flip1995,wesleywiser\n\nImprove `expect` impl and handle `#[expect(unfulfilled_lint_expectations)]` (RFC 2383)\n\nThis PR updates unstable `ExpectationIds` in stashed diagnostics and adds some asserts to ensure that the stored expectations are really empty in the end. Additionally, it handles the `#[expect(unfulfilled_lint_expectations)]` case.\n\nAccording to the [Errors and lints docs](https://rustc-dev-guide.rust-lang.org/diagnostics.html#diagnostic-levels) the `error` level should only be used _\"when the compiler detects a problem that makes it unable to compile the program\"_. As this isn't the case with `#[expect(unfulfilled_lint_expectations)]` I decided to only create a warning. To avoid adding a new lint only for this case, I simply emit a `unfulfilled_lint_expectations` diagnostic with an additional note.\n\n---\n\nr? `@wesleywiser` I'm requesting a review from you since you reviewed the previous PR https://github.com/rust-lang/rust/pull/87835. You are welcome to reassign it if you're busy :upside_down_face:\n\nrfc: [RFC-2383](https://rust-lang.github.io/rfcs/2383-lint-reasons.html)\n\ntracking issue: https://github.com/rust-lang/rust/issues/85549\n\ncc: `@flip1995` In case you're also interested in this :)", "tree": {"sha": "e16d7650112a4673530e53023d13536dd8450215", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e16d7650112a4673530e53023d13536dd8450215"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6548a368c8c66c802ba710dd9fede228dc65587e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiL2xbCRBK7hj4Ov3rIwAAhzQIAD2OIJMQkpyYm8Lty+diJcJh\nRrmQgGC9p9GaoFx+qPHiZ1jADmOKBcVnITNDjMMCcCxqdeYuLGatEmStBVBg8h8u\n5U5dHYPwdxH89pyza9LNwSLm+8nnCvZkzdOmBgptP77+itMFooPzxs+v8s0FXm5V\nLLYawTeRQS6A07I9PQOi8ur6NOjGpUv5459NF3mIAhM9eY9GkouxhybGZV7Aav1L\n8mZVpFfwLul3WG64uc0QDVPCYLt9SixHNNMsnkQoQOH8yll5fJ49mHxLpUZgNNzp\nTTUe/3PH4oFF/5ttPMZtammXKfWWtF9xYIjPfxdN1b2qyTfSacuszq25MpQXKQg=\n=mWn0\n-----END PGP SIGNATURE-----\n", "payload": "tree e16d7650112a4673530e53023d13536dd8450215\nparent 774655da5fabdef01f862c50d1796abbe59efb7d\nparent be84049570d5be6d6e76e471ef88a11ae46292ad\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1647275098 +0100\ncommitter GitHub <noreply@github.com> 1647275098 +0100\n\nRollup merge of #94670 - xFrednet:rfc-2383-expect-impl-after-party, r=flip1995,wesleywiser\n\nImprove `expect` impl and handle `#[expect(unfulfilled_lint_expectations)]` (RFC 2383)\n\nThis PR updates unstable `ExpectationIds` in stashed diagnostics and adds some asserts to ensure that the stored expectations are really empty in the end. Additionally, it handles the `#[expect(unfulfilled_lint_expectations)]` case.\n\nAccording to the [Errors and lints docs](https://rustc-dev-guide.rust-lang.org/diagnostics.html#diagnostic-levels) the `error` level should only be used _\"when the compiler detects a problem that makes it unable to compile the program\"_. As this isn't the case with `#[expect(unfulfilled_lint_expectations)]` I decided to only create a warning. To avoid adding a new lint only for this case, I simply emit a `unfulfilled_lint_expectations` diagnostic with an additional note.\n\n---\n\nr? `@wesleywiser` I'm requesting a review from you since you reviewed the previous PR https://github.com/rust-lang/rust/pull/87835. You are welcome to reassign it if you're busy :upside_down_face:\n\nrfc: [RFC-2383](https://rust-lang.github.io/rfcs/2383-lint-reasons.html)\n\ntracking issue: https://github.com/rust-lang/rust/issues/85549\n\ncc: `@flip1995` In case you're also interested in this :)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6548a368c8c66c802ba710dd9fede228dc65587e", "html_url": "https://github.com/rust-lang/rust/commit/6548a368c8c66c802ba710dd9fede228dc65587e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6548a368c8c66c802ba710dd9fede228dc65587e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "774655da5fabdef01f862c50d1796abbe59efb7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/774655da5fabdef01f862c50d1796abbe59efb7d", "html_url": "https://github.com/rust-lang/rust/commit/774655da5fabdef01f862c50d1796abbe59efb7d"}, {"sha": "be84049570d5be6d6e76e471ef88a11ae46292ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/be84049570d5be6d6e76e471ef88a11ae46292ad", "html_url": "https://github.com/rust-lang/rust/commit/be84049570d5be6d6e76e471ef88a11ae46292ad"}], "stats": {"total": 197, "additions": 167, "deletions": 30}, "files": [{"sha": "5c36c3c55b51e872d18761212751f4a6944b4105", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6548a368c8c66c802ba710dd9fede228dc65587e/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6548a368c8c66c802ba710dd9fede228dc65587e/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=6548a368c8c66c802ba710dd9fede228dc65587e", "patch": "@@ -5,7 +5,8 @@ use crate::Substitution;\n use crate::SubstitutionPart;\n use crate::SuggestionStyle;\n use crate::ToolMetadata;\n-use rustc_lint_defs::Applicability;\n+use rustc_data_structures::stable_map::FxHashMap;\n+use rustc_lint_defs::{Applicability, LintExpectationId};\n use rustc_serialize::json::Json;\n use rustc_span::edition::LATEST_STABLE_EDITION;\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n@@ -138,6 +139,28 @@ impl Diagnostic {\n         }\n     }\n \n+    pub fn update_unstable_expectation_id(\n+        &mut self,\n+        unstable_to_stable: &FxHashMap<LintExpectationId, LintExpectationId>,\n+    ) {\n+        if let Level::Expect(expectation_id) = &mut self.level {\n+            if expectation_id.is_stable() {\n+                return;\n+            }\n+\n+            // The unstable to stable map only maps the unstable `AttrId` to a stable `HirId` with an attribute index.\n+            // The lint index inside the attribute is manually transferred here.\n+            let lint_index = expectation_id.get_lint_index();\n+            expectation_id.set_lint_index(None);\n+            let mut stable_id = *unstable_to_stable\n+                .get(&expectation_id)\n+                .expect(\"each unstable `LintExpectationId` must have a matching stable id\");\n+\n+            stable_id.set_lint_index(lint_index);\n+            *expectation_id = stable_id;\n+        }\n+    }\n+\n     pub fn has_future_breakage(&self) -> bool {\n         match self.code {\n             Some(DiagnosticId::Lint { has_future_breakage, .. }) => has_future_breakage,"}, {"sha": "345247b07001b6cfe1d44a3c8da31a5a2c516209", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6548a368c8c66c802ba710dd9fede228dc65587e/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6548a368c8c66c802ba710dd9fede228dc65587e/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=6548a368c8c66c802ba710dd9fede228dc65587e", "patch": "@@ -522,6 +522,11 @@ impl Drop for HandlerInner {\n                 \"no warnings or errors encountered even though `delayed_good_path_bugs` issued\",\n             );\n         }\n+\n+        assert!(\n+            self.unstable_expect_diagnostics.is_empty(),\n+            \"all diagnostics with unstable expectations should have been converted\",\n+        );\n     }\n }\n \n@@ -942,29 +947,30 @@ impl Handler {\n \n         let mut inner = self.inner.borrow_mut();\n         for mut diag in diags.into_iter() {\n-            let mut unstable_id = diag\n+            diag.update_unstable_expectation_id(unstable_to_stable);\n+\n+            let stable_id = diag\n                 .level\n                 .get_expectation_id()\n                 .expect(\"all diagnostics inside `unstable_expect_diagnostics` must have a `LintExpectationId`\");\n-\n-            // The unstable to stable map only maps the unstable `AttrId` to a stable `HirId` with an attribute index.\n-            // The lint index inside the attribute is manually transferred here.\n-            let lint_index = unstable_id.get_lint_index();\n-            unstable_id.set_lint_index(None);\n-            let mut stable_id = *unstable_to_stable\n-                .get(&unstable_id)\n-                .expect(\"each unstable `LintExpectationId` must have a matching stable id\");\n-\n-            stable_id.set_lint_index(lint_index);\n-            diag.level = Level::Expect(stable_id);\n             inner.fulfilled_expectations.insert(stable_id);\n \n             (*TRACK_DIAGNOSTICS)(&diag);\n         }\n+\n+        inner\n+            .stashed_diagnostics\n+            .values_mut()\n+            .for_each(|diag| diag.update_unstable_expectation_id(unstable_to_stable));\n+        inner\n+            .future_breakage_diagnostics\n+            .iter_mut()\n+            .for_each(|diag| diag.update_unstable_expectation_id(unstable_to_stable));\n     }\n \n     /// This methods steals all [`LintExpectationId`]s that are stored inside\n     /// [`HandlerInner`] and indicate that the linked expectation has been fulfilled.\n+    #[must_use]\n     pub fn steal_fulfilled_expectation_ids(&self) -> FxHashSet<LintExpectationId> {\n         assert!(\n             self.inner.borrow().unstable_expect_diagnostics.is_empty(),"}, {"sha": "74fef0be9e98c4fe4e178ef8d2146ca9bbb2499a", "filename": "compiler/rustc_lint/src/expect.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6548a368c8c66c802ba710dd9fede228dc65587e/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6548a368c8c66c802ba710dd9fede228dc65587e/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs?ref=6548a368c8c66c802ba710dd9fede228dc65587e", "patch": "@@ -30,10 +30,6 @@ fn emit_unfulfilled_expectation_lint(\n     hir_id: HirId,\n     expectation: &LintExpectation,\n ) {\n-    // FIXME: The current implementation doesn't cover cases where the\n-    // `unfulfilled_lint_expectations` is actually expected by another lint\n-    // expectation. This can be added here by checking the lint level and\n-    // retrieving the `LintExpectationId` if it was expected.\n     tcx.struct_span_lint_hir(\n         builtin::UNFULFILLED_LINT_EXPECTATIONS,\n         hir_id,\n@@ -43,6 +39,11 @@ fn emit_unfulfilled_expectation_lint(\n             if let Some(rationale) = expectation.reason {\n                 diag.note(&rationale.as_str());\n             }\n+\n+            if expectation.is_unfulfilled_lint_expectations {\n+                diag.note(\"the `unfulfilled_lint_expectations` lint can't be expected and will always produce this message\");\n+            }\n+\n             diag.emit();\n         },\n     );"}, {"sha": "47899f8625d265315f2734b244610299f928395f", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6548a368c8c66c802ba710dd9fede228dc65587e/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6548a368c8c66c802ba710dd9fede228dc65587e/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=6548a368c8c66c802ba710dd9fede228dc65587e", "patch": "@@ -14,7 +14,7 @@ use rustc_middle::lint::{\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{RegisteredTools, TyCtxt};\n use rustc_session::lint::{\n-    builtin::{self, FORBIDDEN_LINT_GROUPS},\n+    builtin::{self, FORBIDDEN_LINT_GROUPS, UNFULFILLED_LINT_EXPECTATIONS},\n     Level, Lint, LintExpectationId, LintId,\n };\n use rustc_session::parse::{add_feature_diagnostics, feature_err};\n@@ -218,6 +218,14 @@ impl<'s> LintLevelsBuilder<'s> {\n                 }\n             }\n         }\n+\n+        // The lint `unfulfilled_lint_expectations` can't be expected, as it would suppress itself.\n+        // Handling expectations of this lint would add additional complexity with little to no\n+        // benefit. The expect level for this lint will therefore be ignored.\n+        if let Level::Expect(_) = level && id == LintId::of(UNFULFILLED_LINT_EXPECTATIONS) {\n+            return;\n+        }\n+\n         if let Level::ForceWarn = old_level {\n             self.current_specs_mut().insert(id, (old_level, old_src));\n         } else {\n@@ -350,6 +358,22 @@ impl<'s> LintLevelsBuilder<'s> {\n                     self.store.check_lint_name(&name, tool_name, self.registered_tools);\n                 match &lint_result {\n                     CheckLintNameResult::Ok(ids) => {\n+                        // This checks for instances where the user writes `#[expect(unfulfilled_lint_expectations)]`\n+                        // in that case we want to avoid overriding the lint level but instead add an expectation that\n+                        // can't be fulfilled. The lint message will include an explanation, that the\n+                        // `unfulfilled_lint_expectations` lint can't be expected.\n+                        if let Level::Expect(expect_id) = level {\n+                            // The `unfulfilled_lint_expectations` lint is not part of any lint groups. Therefore. we\n+                            // only need to check the slice if it contains a single lint.\n+                            let is_unfulfilled_lint_expectations = match ids {\n+                                [lint] => *lint == LintId::of(UNFULFILLED_LINT_EXPECTATIONS),\n+                                _ => false,\n+                            };\n+                            self.lint_expectations.push((\n+                                expect_id,\n+                                LintExpectation::new(reason, sp, is_unfulfilled_lint_expectations),\n+                            ));\n+                        }\n                         let src = LintLevelSource::Node(\n                             meta_item.path.segments.last().expect(\"empty lint name\").ident.name,\n                             sp,\n@@ -360,10 +384,6 @@ impl<'s> LintLevelsBuilder<'s> {\n                                 self.insert_spec(id, (level, src));\n                             }\n                         }\n-                        if let Level::Expect(expect_id) = level {\n-                            self.lint_expectations\n-                                .push((expect_id, LintExpectation::new(reason, sp)));\n-                        }\n                     }\n \n                     CheckLintNameResult::Tool(result) => {\n@@ -381,7 +401,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                                 }\n                                 if let Level::Expect(expect_id) = level {\n                                     self.lint_expectations\n-                                        .push((expect_id, LintExpectation::new(reason, sp)));\n+                                        .push((expect_id, LintExpectation::new(reason, sp, false)));\n                                 }\n                             }\n                             Err((Some(ids), ref new_lint_name)) => {\n@@ -425,7 +445,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                                 }\n                                 if let Level::Expect(expect_id) = level {\n                                     self.lint_expectations\n-                                        .push((expect_id, LintExpectation::new(reason, sp)));\n+                                        .push((expect_id, LintExpectation::new(reason, sp, false)));\n                                 }\n                             }\n                             Err((None, _)) => {\n@@ -531,7 +551,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                         }\n                         if let Level::Expect(expect_id) = level {\n                             self.lint_expectations\n-                                .push((expect_id, LintExpectation::new(reason, sp)));\n+                                .push((expect_id, LintExpectation::new(reason, sp, false)));\n                         }\n                     } else {\n                         panic!(\"renamed lint does not exist: {}\", new_name);"}, {"sha": "4842f7ef4b9a9727b4e782fd671e9d612682e1fe", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6548a368c8c66c802ba710dd9fede228dc65587e/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6548a368c8c66c802ba710dd9fede228dc65587e/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=6548a368c8c66c802ba710dd9fede228dc65587e", "patch": "@@ -54,7 +54,7 @@ pub enum Applicability {\n /// Expected `Diagnostic`s get the lint level `Expect` which stores the `LintExpectationId`\n /// to match it with the actual expectation later on.\n ///\n-/// The `LintExpectationId` has to be has stable between compilations, as diagnostic\n+/// The `LintExpectationId` has to be stable between compilations, as diagnostic\n /// instances might be loaded from cache. Lint messages can be emitted during an\n /// `EarlyLintPass` operating on the AST and during a `LateLintPass` traversing the\n /// HIR tree. The AST doesn't have enough information to create a stable id. The\n@@ -71,7 +71,7 @@ pub enum Applicability {\n #[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash, Encodable, Decodable)]\n pub enum LintExpectationId {\n     /// Used for lints emitted during the `EarlyLintPass`. This id is not\n-    /// has stable and should not be cached.\n+    /// hash stable and should not be cached.\n     Unstable { attr_id: AttrId, lint_index: Option<u16> },\n     /// The [`HirId`] that the lint expectation is attached to. This id is\n     /// stable and can be cached. The additional index ensures that nodes with\n@@ -113,7 +113,9 @@ impl<HCX: rustc_hir::HashStableContext> HashStable<HCX> for LintExpectationId {\n                 lint_index.hash_stable(hcx, hasher);\n             }\n             _ => {\n-                unreachable!(\"HashStable should only be called for a filled `LintExpectationId`\")\n+                unreachable!(\n+                    \"HashStable should only be called for filled and stable `LintExpectationId`\"\n+                )\n             }\n         }\n     }"}, {"sha": "1b301629b9c73ac37fb15fd7fe2c66cd003a45e4", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6548a368c8c66c802ba710dd9fede228dc65587e/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6548a368c8c66c802ba710dd9fede228dc65587e/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=6548a368c8c66c802ba710dd9fede228dc65587e", "patch": "@@ -204,11 +204,19 @@ pub struct LintExpectation {\n     pub reason: Option<Symbol>,\n     /// The [`Span`] of the attribute that this expectation originated from.\n     pub emission_span: Span,\n+    /// Lint messages for the `unfulfilled_lint_expectations` lint will be\n+    /// adjusted to include an additional note. Therefore, we have to track if\n+    /// the expectation is for the lint.\n+    pub is_unfulfilled_lint_expectations: bool,\n }\n \n impl LintExpectation {\n-    pub fn new(reason: Option<Symbol>, attr_span: Span) -> Self {\n-        Self { reason, emission_span: attr_span }\n+    pub fn new(\n+        reason: Option<Symbol>,\n+        emission_span: Span,\n+        is_unfulfilled_lint_expectations: bool,\n+    ) -> Self {\n+        Self { reason, emission_span, is_unfulfilled_lint_expectations }\n     }\n }\n "}, {"sha": "d38e65533869af5341da39fd369277e2cbd74453", "filename": "src/test/ui/lint/rfc-2383-lint-reason/expect_unfulfilled_expectation.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6548a368c8c66c802ba710dd9fede228dc65587e/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_unfulfilled_expectation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6548a368c8c66c802ba710dd9fede228dc65587e/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_unfulfilled_expectation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_unfulfilled_expectation.rs?ref=6548a368c8c66c802ba710dd9fede228dc65587e", "patch": "@@ -0,0 +1,39 @@\n+// check-pass\n+// ignore-tidy-linelength\n+\n+#![feature(lint_reasons)]\n+#![warn(unused_mut)]\n+\n+#![expect(unfulfilled_lint_expectations, reason = \"idk why you would expect this\")]\n+//~^ WARNING this lint expectation is unfulfilled\n+//~| NOTE `#[warn(unfulfilled_lint_expectations)]` on by default\n+//~| NOTE idk why you would expect this\n+//~| NOTE the `unfulfilled_lint_expectations` lint can't be expected and will always produce this message\n+\n+#[expect(unfulfilled_lint_expectations, reason = \"a local: idk why you would expect this\")]\n+//~^ WARNING this lint expectation is unfulfilled\n+//~| NOTE a local: idk why you would expect this\n+//~| NOTE the `unfulfilled_lint_expectations` lint can't be expected and will always produce this message\n+pub fn normal_test_fn() {\n+    #[expect(unused_mut, reason = \"this expectation will create a diagnostic with the default lint level\")]\n+    //~^ WARNING this lint expectation is unfulfilled\n+    //~| NOTE this expectation will create a diagnostic with the default lint level\n+    let mut v = vec![1, 1, 2, 3, 5];\n+    v.sort();\n+\n+    // Check that lint lists including `unfulfilled_lint_expectations` are also handled correctly\n+    #[expect(unused, unfulfilled_lint_expectations, reason = \"the expectation for `unused` should be fulfilled\")]\n+    //~^ WARNING this lint expectation is unfulfilled\n+    //~| NOTE the expectation for `unused` should be fulfilled\n+    //~| NOTE the `unfulfilled_lint_expectations` lint can't be expected and will always produce this message\n+    let value = \"I'm unused\";\n+}\n+\n+#[expect(warnings, reason = \"this suppresses all warnings and also suppresses itself. No warning will be issued\")]\n+pub fn expect_warnings() {\n+    // This lint trigger will be suppressed\n+    #[warn(unused_mut)]\n+    let mut v = vec![1, 1, 2, 3, 5];\n+}\n+\n+fn main() {}"}, {"sha": "9bfee79b03d7088cd0abe5a47df3dc63d433a197", "filename": "src/test/ui/lint/rfc-2383-lint-reason/expect_unfulfilled_expectation.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6548a368c8c66c802ba710dd9fede228dc65587e/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_unfulfilled_expectation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6548a368c8c66c802ba710dd9fede228dc65587e/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_unfulfilled_expectation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_unfulfilled_expectation.stderr?ref=6548a368c8c66c802ba710dd9fede228dc65587e", "patch": "@@ -0,0 +1,38 @@\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/expect_unfulfilled_expectation.rs:7:11\n+   |\n+LL | #![expect(unfulfilled_lint_expectations, reason = \"idk why you would expect this\")]\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(unfulfilled_lint_expectations)]` on by default\n+   = note: idk why you would expect this\n+   = note: the `unfulfilled_lint_expectations` lint can't be expected and will always produce this message\n+\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/expect_unfulfilled_expectation.rs:13:10\n+   |\n+LL | #[expect(unfulfilled_lint_expectations, reason = \"a local: idk why you would expect this\")]\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: a local: idk why you would expect this\n+   = note: the `unfulfilled_lint_expectations` lint can't be expected and will always produce this message\n+\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/expect_unfulfilled_expectation.rs:18:14\n+   |\n+LL |     #[expect(unused_mut, reason = \"this expectation will create a diagnostic with the default lint level\")]\n+   |              ^^^^^^^^^^\n+   |\n+   = note: this expectation will create a diagnostic with the default lint level\n+\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/expect_unfulfilled_expectation.rs:25:22\n+   |\n+LL |     #[expect(unused, unfulfilled_lint_expectations, reason = \"the expectation for `unused` should be fulfilled\")]\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the expectation for `unused` should be fulfilled\n+   = note: the `unfulfilled_lint_expectations` lint can't be expected and will always produce this message\n+\n+warning: 4 warnings emitted\n+"}]}