{"sha": "ccd956aca6d5b108a998fa13d4570f76dbff98a4", "node_id": "C_kwDOAAsO6NoAKGNjZDk1NmFjYTZkNWIxMDhhOTk4ZmExM2Q0NTcwZjc2ZGJmZjk4YTQ", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-19T23:14:18Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-19T23:19:10Z"}, "message": "Remove `Cursor::append`.\n\nIt's a weird function: it lets you modify the token stream in the middle\nof iteration. There is only one call site, and it is only used for the\nrare `ProceduralMasquerade` legacy case.", "tree": {"sha": "0e03e3752404aac9e85fcdab310f2738d3c09b62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e03e3752404aac9e85fcdab310f2738d3c09b62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccd956aca6d5b108a998fa13d4570f76dbff98a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccd956aca6d5b108a998fa13d4570f76dbff98a4", "html_url": "https://github.com/rust-lang/rust/commit/ccd956aca6d5b108a998fa13d4570f76dbff98a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccd956aca6d5b108a998fa13d4570f76dbff98a4/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b646bd533e8a20c06a71d0b7837e15eb4c79fa8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b646bd533e8a20c06a71d0b7837e15eb4c79fa8", "html_url": "https://github.com/rust-lang/rust/commit/2b646bd533e8a20c06a71d0b7837e15eb4c79fa8"}], "stats": {"total": 18, "additions": 4, "deletions": 14}, "files": [{"sha": "70d5e53d969d0ba2b4ad54d17df5a3e79e39f65d", "filename": "compiler/rustc_ast/src/tokenstream.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ccd956aca6d5b108a998fa13d4570f76dbff98a4/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd956aca6d5b108a998fa13d4570f76dbff98a4/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs?ref=ccd956aca6d5b108a998fa13d4570f76dbff98a4", "patch": "@@ -25,7 +25,7 @@ use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use rustc_span::{Span, DUMMY_SP};\n use smallvec::{smallvec, SmallVec};\n \n-use std::{fmt, iter, mem};\n+use std::{fmt, iter};\n \n /// When the main Rust parser encounters a syntax-extension invocation, it\n /// parses the arguments to the invocation as a token tree. This is a very\n@@ -683,16 +683,6 @@ impl Cursor {\n         self.index\n     }\n \n-    pub fn append(&mut self, new_stream: TokenStream) {\n-        if new_stream.is_empty() {\n-            return;\n-        }\n-        let index = self.index;\n-        let stream = mem::take(&mut self.stream);\n-        *self = TokenStream::from_streams(smallvec![stream, new_stream]).into_trees();\n-        self.index = index;\n-    }\n-\n     pub fn look_ahead(&self, n: usize) -> Option<&TokenTree> {\n         self.stream.0[self.index..].get(n).map(|(tree, _)| tree)\n     }"}, {"sha": "7cb587f6fc49e8b1b277bc7eef2f9b9b81cfe6e6", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ccd956aca6d5b108a998fa13d4570f76dbff98a4/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd956aca6d5b108a998fa13d4570f76dbff98a4/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=ccd956aca6d5b108a998fa13d4570f76dbff98a4", "patch": "@@ -522,10 +522,10 @@ impl server::TokenStream for Rustc<'_, '_> {\n                     // FIXME: It needs to be removed, but there are some\n                     // compatibility issues (see #73345).\n                     if group.flatten {\n-                        cursor.append(group.stream);\n-                        continue;\n+                        tts.append(&mut self.into_trees(group.stream));\n+                    } else {\n+                        tts.push(TokenTree::Group(group));\n                     }\n-                    tts.push(TokenTree::Group(group));\n                 }\n                 Some(tt) => tts.push(tt),\n                 None => return tts,"}]}