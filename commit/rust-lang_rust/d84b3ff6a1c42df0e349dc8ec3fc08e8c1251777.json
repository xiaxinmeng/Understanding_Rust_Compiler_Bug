{"sha": "d84b3ff6a1c42df0e349dc8ec3fc08e8c1251777", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4NGIzZmY2YTFjNDJkZjBlMzQ5ZGM4ZWMzZmMwOGU4YzEyNTE3Nzc=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-06-25T12:39:27Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-06-25T12:39:27Z"}, "message": "Collect field/variant attrs in ItemTree", "tree": {"sha": "c39b8534ceaaeb34ec99c973afa738f6f44dd6a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c39b8534ceaaeb34ec99c973afa738f6f44dd6a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d84b3ff6a1c42df0e349dc8ec3fc08e8c1251777", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d84b3ff6a1c42df0e349dc8ec3fc08e8c1251777", "html_url": "https://github.com/rust-lang/rust/commit/d84b3ff6a1c42df0e349dc8ec3fc08e8c1251777", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d84b3ff6a1c42df0e349dc8ec3fc08e8c1251777/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ba772657950cb8353f37bc2576b78c4f0c8996f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ba772657950cb8353f37bc2576b78c4f0c8996f", "html_url": "https://github.com/rust-lang/rust/commit/9ba772657950cb8353f37bc2576b78c4f0c8996f"}], "stats": {"total": 60, "additions": 40, "deletions": 20}, "files": [{"sha": "e228e2145be08ae547d304cedabfa24a1ba4a1a9", "filename": "crates/ra_hir_def/src/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d84b3ff6a1c42df0e349dc8ec3fc08e8c1251777/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84b3ff6a1c42df0e349dc8ec3fc08e8c1251777/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fattr.rs?ref=d84b3ff6a1c42df0e349dc8ec3fc08e8c1251777", "patch": "@@ -208,5 +208,5 @@ where\n fn attrs_from_item_tree<N: ItemTreeNode>(id: ItemTreeId<N>, db: &dyn DefDatabase) -> Attrs {\n     let tree = db.item_tree(id.file_id);\n     let mod_item = N::id_to_mod_item(id.value);\n-    tree.attrs(mod_item).clone()\n+    tree.attrs(mod_item.into()).clone()\n }"}, {"sha": "282ade2a3a63e4d28078a68dda024e0d5996e2f1", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d84b3ff6a1c42df0e349dc8ec3fc08e8c1251777/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84b3ff6a1c42df0e349dc8ec3fc08e8c1251777/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=d84b3ff6a1c42df0e349dc8ec3fc08e8c1251777", "patch": "@@ -40,7 +40,7 @@ impl FunctionData {\n             name: func.name.clone(),\n             params: func.params.to_vec(),\n             ret_type: func.ret_type.clone(),\n-            attrs: item_tree.attrs(loc.id.value.into()).clone(),\n+            attrs: item_tree.attrs(ModItem::from(loc.id.value).into()).clone(),\n             has_self_param: func.has_self_param,\n             is_unsafe: func.is_unsafe,\n             visibility: item_tree[func.visibility].clone(),\n@@ -224,7 +224,7 @@ fn collect_items(\n         match item {\n             AssocItem::Function(id) => {\n                 let item = &item_tree[id];\n-                let attrs = item_tree.attrs(id.into());\n+                let attrs = item_tree.attrs(ModItem::from(id).into());\n                 if !attrs.is_cfg_enabled(&cfg_options) {\n                     continue;\n                 }"}, {"sha": "fd874750ef163d7d1ffc4782337d3b14cd45859a", "filename": "crates/ra_hir_def/src/item_tree.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d84b3ff6a1c42df0e349dc8ec3fc08e8c1251777/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84b3ff6a1c42df0e349dc8ec3fc08e8c1251777/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs?ref=d84b3ff6a1c42df0e349dc8ec3fc08e8c1251777", "patch": "@@ -178,8 +178,8 @@ impl ItemTree {\n         self.attrs.get(&AttrOwner::TopLevel).unwrap_or(&Attrs::EMPTY)\n     }\n \n-    pub fn attrs(&self, of: ModItem) -> &Attrs {\n-        self.attrs.get(&AttrOwner::ModItem(of)).unwrap_or(&Attrs::EMPTY)\n+    pub fn attrs(&self, of: AttrOwner) -> &Attrs {\n+        self.attrs.get(&of).unwrap_or(&Attrs::EMPTY)\n     }\n \n     /// Returns the lowered inner items that `ast` corresponds to.\n@@ -282,15 +282,32 @@ struct ItemTreeData {\n }\n \n #[derive(Debug, Eq, PartialEq, Hash)]\n-enum AttrOwner {\n+pub enum AttrOwner {\n     /// Attributes on an item.\n     ModItem(ModItem),\n     /// Inner attributes of the source file.\n     TopLevel,\n+\n+    Variant(Idx<Variant>),\n+    Field(Idx<Field>),\n     // FIXME: Store variant and field attrs, and stop reparsing them in `attrs_query`.\n }\n \n-/// Trait implemented by all nodes in the item tree.\n+macro_rules! from_attrs {\n+    ( $( $var:ident($t:ty) ),+ ) => {\n+        $(\n+            impl From<$t> for AttrOwner {\n+                fn from(t: $t) -> AttrOwner {\n+                    AttrOwner::$var(t)\n+                }\n+            }\n+        )+\n+    };\n+}\n+\n+from_attrs!(ModItem(ModItem), Variant(Idx<Variant>), Field(Idx<Field>));\n+\n+/// Trait implemented by all item nodes in the item tree.\n pub trait ItemTreeNode: Clone {\n     type Source: AstNode + Into<ast::ModuleItem>;\n "}, {"sha": "230e1f7686a296b64d7ae5fffd70ed62d2df1e09", "filename": "crates/ra_hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d84b3ff6a1c42df0e349dc8ec3fc08e8c1251777/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84b3ff6a1c42df0e349dc8ec3fc08e8c1251777/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=d84b3ff6a1c42df0e349dc8ec3fc08e8c1251777", "patch": "@@ -126,15 +126,15 @@ impl Ctx {\n \n         if !attrs.is_empty() {\n             for item in items.iter().flat_map(|items| &items.0) {\n-                self.add_attrs(*item, attrs.clone());\n+                self.add_attrs((*item).into(), attrs.clone());\n             }\n         }\n \n         items\n     }\n \n-    fn add_attrs(&mut self, item: ModItem, attrs: Attrs) {\n-        match self.tree.attrs.entry(AttrOwner::ModItem(item)) {\n+    fn add_attrs(&mut self, item: AttrOwner, attrs: Attrs) {\n+        match self.tree.attrs.entry(item) {\n             Entry::Occupied(mut entry) => {\n                 *entry.get_mut() = entry.get().merge(attrs);\n             }\n@@ -200,7 +200,8 @@ impl Ctx {\n         let start = self.next_field_idx();\n         for field in fields.fields() {\n             if let Some(data) = self.lower_record_field(&field) {\n-                self.data().fields.alloc(data);\n+                let idx = self.data().fields.alloc(data);\n+                self.add_attrs(idx.into(), Attrs::new(&field, &self.hygiene));\n             }\n         }\n         let end = self.next_field_idx();\n@@ -219,7 +220,8 @@ impl Ctx {\n         let start = self.next_field_idx();\n         for (i, field) in fields.fields().enumerate() {\n             if let Some(data) = self.lower_tuple_field(i, &field) {\n-                self.data().fields.alloc(data);\n+                let idx = self.data().fields.alloc(data);\n+                self.add_attrs(idx.into(), Attrs::new(&field, &self.hygiene));\n             }\n         }\n         let end = self.next_field_idx();\n@@ -266,7 +268,8 @@ impl Ctx {\n         let start = self.next_variant_idx();\n         for variant in variants.variants() {\n             if let Some(data) = self.lower_variant(&variant) {\n-                self.data().variants.alloc(data);\n+                let idx = self.data().variants.alloc(data);\n+                self.add_attrs(idx.into(), Attrs::new(&variant, &self.hygiene));\n             }\n         }\n         let end = self.next_variant_idx();\n@@ -419,7 +422,7 @@ impl Ctx {\n                         let attrs = Attrs::new(&item, &this.hygiene);\n                         this.collect_inner_items(item.syntax());\n                         this.lower_assoc_item(&item).map(|item| {\n-                            this.add_attrs(item.into(), attrs);\n+                            this.add_attrs(ModItem::from(item).into(), attrs);\n                             item\n                         })\n                     })\n@@ -453,7 +456,7 @@ impl Ctx {\n                 self.collect_inner_items(item.syntax());\n                 let assoc = self.lower_assoc_item(&item)?;\n                 let attrs = Attrs::new(&item, &self.hygiene);\n-                self.add_attrs(assoc.into(), attrs);\n+                self.add_attrs(ModItem::from(assoc).into(), attrs);\n                 Some(assoc)\n             })\n             .collect();\n@@ -539,7 +542,7 @@ impl Ctx {\n                 .filter_map(|item| {\n                     self.collect_inner_items(item.syntax());\n                     let attrs = Attrs::new(&item, &self.hygiene);\n-                    let id = match item {\n+                    let id: ModItem = match item {\n                         ast::ExternItem::FnDef(ast) => {\n                             let func = self.lower_function(&ast)?;\n                             func.into()\n@@ -549,7 +552,7 @@ impl Ctx {\n                             statik.into()\n                         }\n                     };\n-                    self.add_attrs(id, attrs);\n+                    self.add_attrs(id.into(), attrs);\n                     Some(id)\n                 })\n                 .collect()"}, {"sha": "18df42050529dc19288e49604953c07de4d67b84", "filename": "crates/ra_hir_def/src/item_tree/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d84b3ff6a1c42df0e349dc8ec3fc08e8c1251777/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84b3ff6a1c42df0e349dc8ec3fc08e8c1251777/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs?ref=d84b3ff6a1c42df0e349dc8ec3fc08e8c1251777", "patch": "@@ -92,7 +92,7 @@ fn print_item_tree(ra_fixture: &str) -> String {\n }\n \n fn fmt_mod_item(out: &mut String, tree: &ItemTree, item: ModItem) {\n-    let attrs = tree.attrs(item);\n+    let attrs = tree.attrs(item.into());\n     if !attrs.is_empty() {\n         format_to!(out, \"#[{:?}]\\n\", attrs);\n     }"}, {"sha": "2ced4f66bbe15f37843d1578b709fc3621417b2d", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d84b3ff6a1c42df0e349dc8ec3fc08e8c1251777/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84b3ff6a1c42df0e349dc8ec3fc08e8c1251777/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=d84b3ff6a1c42df0e349dc8ec3fc08e8c1251777", "patch": "@@ -742,7 +742,7 @@ impl ModCollector<'_, '_> {\n         // `#[macro_use] extern crate` is hoisted to imports macros before collecting\n         // any other items.\n         for item in items {\n-            if self.is_cfg_enabled(self.item_tree.attrs(*item)) {\n+            if self.is_cfg_enabled(self.item_tree.attrs((*item).into())) {\n                 if let ModItem::ExternCrate(id) = item {\n                     let import = self.item_tree[*id].clone();\n                     if import.is_macro_use {\n@@ -753,7 +753,7 @@ impl ModCollector<'_, '_> {\n         }\n \n         for &item in items {\n-            let attrs = self.item_tree.attrs(item);\n+            let attrs = self.item_tree.attrs(item.into());\n             if self.is_cfg_enabled(attrs) {\n                 let module =\n                     ModuleId { krate: self.def_collector.def_map.krate, local_id: self.module_id };"}]}