{"sha": "23636e3f99ea8dba2d5e91637d818ebfbe6c1b96", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzNjM2ZTNmOTllYThkYmEyZDVlOTE2MzdkODE4ZWJmYmU2YzFiOTY=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-09-22T07:56:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-22T07:56:30Z"}, "message": "Rollup merge of #54350 - Munksgaard:support-edition-in-doc-test, r=steveklabnik\n\nSupport specifying edition in doc test\n\nFixes #52623\n\nr? @QuietMisdreavus", "tree": {"sha": "d25f86f367b740a63971e965a2e819106aba593a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d25f86f367b740a63971e965a2e819106aba593a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23636e3f99ea8dba2d5e91637d818ebfbe6c1b96", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbpfWvCRBK7hj4Ov3rIwAAdHIIAFk+3qoQHnwYrdLdbo6GwGaA\ninSNKY7NF5nfAltZG0iR+BP21NFn2z2JNPU06DAZ294ycG3zwn5WDqQRHSP71hzD\nDHDYFDMFRTrCbPPzT6+dU7dNmF8J/+QB0AjW5uwKFcLVHRC2X9FuZ5J1bhxEqgdi\nN6pVeIXwg4MnMPq7Ji333Pk+z03zQ/QNenEP2fz8+6eSQOSW9uIzh/ultjJvOOGF\nJDapxFOssnXpbFNhji///vuvXdWaXzV8uEAYt0QDiA+bs/ALDgWqijPc1ZlM8hyI\nkHPvjc6X5r9aCRqm9kSABW3N9RtTHfURYYr7LDwwbNiPrtph4NeMJqtgFkeVIQY=\n=hUCp\n-----END PGP SIGNATURE-----\n", "payload": "tree d25f86f367b740a63971e965a2e819106aba593a\nparent e59df621a85e40a1c99d134f3f0d1a7d17db4ff5\nparent 06b197582e1974e925925d28196b1ed867208ebf\nauthor Pietro Albini <pietro@pietroalbini.org> 1537602990 +0200\ncommitter GitHub <noreply@github.com> 1537602990 +0200\n\nRollup merge of #54350 - Munksgaard:support-edition-in-doc-test, r=steveklabnik\n\nSupport specifying edition in doc test\n\nFixes #52623\n\nr? @QuietMisdreavus\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23636e3f99ea8dba2d5e91637d818ebfbe6c1b96", "html_url": "https://github.com/rust-lang/rust/commit/23636e3f99ea8dba2d5e91637d818ebfbe6c1b96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23636e3f99ea8dba2d5e91637d818ebfbe6c1b96/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e59df621a85e40a1c99d134f3f0d1a7d17db4ff5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e59df621a85e40a1c99d134f3f0d1a7d17db4ff5", "html_url": "https://github.com/rust-lang/rust/commit/e59df621a85e40a1c99d134f3f0d1a7d17db4ff5"}, {"sha": "06b197582e1974e925925d28196b1ed867208ebf", "url": "https://api.github.com/repos/rust-lang/rust/commits/06b197582e1974e925925d28196b1ed867208ebf", "html_url": "https://github.com/rust-lang/rust/commit/06b197582e1974e925925d28196b1ed867208ebf"}], "stats": {"total": 185, "additions": 149, "deletions": 36}, "files": [{"sha": "dd8dcb7ff9bd23e886b3071c60b69af31cf3e17f", "filename": "src/doc/rustdoc/src/documentation-tests.md", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/23636e3f99ea8dba2d5e91637d818ebfbe6c1b96/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "raw_url": "https://github.com/rust-lang/rust/raw/23636e3f99ea8dba2d5e91637d818ebfbe6c1b96/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md?ref=23636e3f99ea8dba2d5e91637d818ebfbe6c1b96", "patch": "@@ -323,6 +323,22 @@ compiles, then the test will fail. However please note that code failing\n with the current Rust release may work in a future release, as new features\n are added.\n \n+```text\n+/// Only runs on the 2018 edition.\n+///\n+/// ```edition2018\n+/// let result: Result<i32, ParseIntError> = try {\n+///     \"1\".parse::<i32>()?\n+///         + \"2\".parse::<i32>()?\n+///         + \"3\".parse::<i32>()?\n+/// };\n+/// ```\n+```\n+\n+`edition2018` tells `rustdoc` that the code sample should be compiled the 2018\n+edition of Rust. Similarly, you can specify `edition2015` to compile the code\n+with the 2015 edition.\n+\n ## Syntax reference\n \n The *exact* syntax for code blocks, including the edge cases, can be found"}, {"sha": "e342c260a739bf405827de5d2b6b3c9f5ce82f19", "filename": "src/doc/unstable-book/src/language-features/try-blocks.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23636e3f99ea8dba2d5e91637d818ebfbe6c1b96/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftry-blocks.md", "raw_url": "https://github.com/rust-lang/rust/raw/23636e3f99ea8dba2d5e91637d818ebfbe6c1b96/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftry-blocks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftry-blocks.md?ref=23636e3f99ea8dba2d5e91637d818ebfbe6c1b96", "patch": "@@ -9,9 +9,7 @@ The tracking issue for this feature is: [#31436]\n The `try_blocks` feature adds support for `try` blocks. A `try`\n block creates a new scope one can use the `?` operator in.\n \n-```rust,ignore\n-// This code needs the 2018 edition\n-\n+```rust,edition2018\n #![feature(try_blocks)]\n \n use std::num::ParseIntError;"}, {"sha": "d14275aeb6bf5e52c50ecbecb0b7e81086cb37bd", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 76, "deletions": 31, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/23636e3f99ea8dba2d5e91637d818ebfbe6c1b96/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23636e3f99ea8dba2d5e91637d818ebfbe6c1b96/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=23636e3f99ea8dba2d5e91637d818ebfbe6c1b96", "patch": "@@ -37,6 +37,7 @@ use std::fmt::{self, Write};\n use std::borrow::Cow;\n use std::ops::Range;\n use std::str;\n+use syntax::edition::Edition;\n \n use html::toc::TocBuilder;\n use html::highlight;\n@@ -170,13 +171,15 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'a, I> {\n         let event = self.inner.next();\n         let compile_fail;\n         let ignore;\n+        let edition;\n         if let Some(Event::Start(Tag::CodeBlock(lang))) = event {\n             let parse_result = LangString::parse(&lang, self.check_error_codes);\n             if !parse_result.rust {\n                 return Some(Event::Start(Tag::CodeBlock(lang)));\n             }\n             compile_fail = parse_result.compile_fail;\n             ignore = parse_result.ignore;\n+            edition = parse_result.edition;\n         } else {\n             return event;\n         }\n@@ -212,6 +215,17 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'a, I> {\n                 } else {\n                     \"\"\n                 };\n+\n+                let edition_string = if let Some(e @ Edition::Edition2018) = edition {\n+                    format!(\"&amp;edition={}{}\", e,\n+                            if channel == \"&amp;version=nightly\" { \"\" }\n+                            else { \"&amp;version=nightly\" })\n+                } else if let Some(e) = edition {\n+                    format!(\"&amp;edition={}\", e)\n+                } else {\n+                    \"\".to_owned()\n+                };\n+\n                 // These characters don't need to be escaped in a URI.\n                 // FIXME: use a library function for percent encoding.\n                 fn dont_escape(c: u8) -> bool {\n@@ -231,26 +245,44 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'a, I> {\n                     }\n                 }\n                 Some(format!(\n-                    r#\"<a class=\"test-arrow\" target=\"_blank\" href=\"{}?code={}{}\">Run</a>\"#,\n-                    url, test_escaped, channel\n+                    r#\"<a class=\"test-arrow\" target=\"_blank\" href=\"{}?code={}{}{}\">Run</a>\"#,\n+                    url, test_escaped, channel, edition_string\n                 ))\n             });\n+\n             let tooltip = if ignore {\n-                Some((\"This example is not tested\", \"ignore\"))\n+                Some((\"This example is not tested\".to_owned(), \"ignore\"))\n             } else if compile_fail {\n-                Some((\"This example deliberately fails to compile\", \"compile_fail\"))\n+                Some((\"This example deliberately fails to compile\".to_owned(), \"compile_fail\"))\n+            } else if let Some(e) = edition {\n+                Some((format!(\"This code runs with edition {}\", e), \"edition\"))\n             } else {\n                 None\n             };\n-            s.push_str(&highlight::render_with_highlighting(\n-                        &text,\n-                        Some(&format!(\"rust-example-rendered{}\",\n-                                      if ignore { \" ignore\" }\n-                                      else if compile_fail { \" compile_fail\" }\n-                                      else { \"\" })),\n-                        playground_button.as_ref().map(String::as_str),\n-                        tooltip));\n-            Some(Event::Html(s.into()))\n+\n+            if let Some((s1, s2)) = tooltip {\n+                s.push_str(&highlight::render_with_highlighting(\n+                    &text,\n+                    Some(&format!(\"rust-example-rendered{}\",\n+                                  if ignore { \" ignore\" }\n+                                  else if compile_fail { \" compile_fail\" }\n+                                  else if edition.is_some() { \" edition \" }\n+                                  else { \"\" })),\n+                    playground_button.as_ref().map(String::as_str),\n+                    Some((s1.as_str(), s2))));\n+                Some(Event::Html(s.into()))\n+            } else {\n+                s.push_str(&highlight::render_with_highlighting(\n+                    &text,\n+                    Some(&format!(\"rust-example-rendered{}\",\n+                                  if ignore { \" ignore\" }\n+                                  else if compile_fail { \" compile_fail\" }\n+                                  else if edition.is_some() { \" edition \" }\n+                                  else { \"\" })),\n+                    playground_button.as_ref().map(String::as_str),\n+                    None));\n+                Some(Event::Html(s.into()))\n+            }\n         })\n     }\n }\n@@ -577,6 +609,7 @@ pub struct LangString {\n     pub compile_fail: bool,\n     pub error_codes: Vec<String>,\n     pub allow_fail: bool,\n+    pub edition: Option<Edition>\n }\n \n impl LangString {\n@@ -591,6 +624,7 @@ impl LangString {\n             compile_fail: false,\n             error_codes: Vec::new(),\n             allow_fail: false,\n+            edition: None,\n         }\n     }\n \n@@ -625,6 +659,11 @@ impl LangString {\n                     seen_rust_tags = !seen_other_tags || seen_rust_tags;\n                     data.no_run = true;\n                 }\n+                x if allow_error_code_check && x.starts_with(\"edition\") => {\n+                    // allow_error_code_check is true if we're on nightly, which\n+                    // is needed for edition support\n+                    data.edition = x[7..].parse::<Edition>().ok();\n+                }\n                 x if allow_error_code_check && x.starts_with(\"E\") && x.len() == 5 => {\n                     if x[1..].parse::<u32>().is_ok() {\n                         data.error_codes.push(x.to_owned());\n@@ -925,12 +964,14 @@ mod tests {\n     use super::{ErrorCodes, LangString, Markdown, MarkdownHtml, IdMap};\n     use super::plain_summary_line;\n     use std::cell::RefCell;\n+    use syntax::edition::Edition;\n \n     #[test]\n     fn test_lang_string_parse() {\n         fn t(s: &str,\n             should_panic: bool, no_run: bool, ignore: bool, rust: bool, test_harness: bool,\n-            compile_fail: bool, allow_fail: bool, error_codes: Vec<String>) {\n+            compile_fail: bool, allow_fail: bool, error_codes: Vec<String>,\n+             edition: Option<Edition>) {\n             assert_eq!(LangString::parse(s, ErrorCodes::Yes), LangString {\n                 should_panic,\n                 no_run,\n@@ -941,30 +982,34 @@ mod tests {\n                 error_codes,\n                 original: s.to_owned(),\n                 allow_fail,\n+                edition,\n             })\n         }\n \n         fn v() -> Vec<String> {\n             Vec::new()\n         }\n \n-        // marker                | should_panic| no_run| ignore| rust | test_harness| compile_fail\n-        //                       | allow_fail | error_codes\n-        t(\"\",                      false,        false,  false,  true,  false, false, false, v());\n-        t(\"rust\",                  false,        false,  false,  true,  false, false, false, v());\n-        t(\"sh\",                    false,        false,  false,  false, false, false, false, v());\n-        t(\"ignore\",                false,        false,  true,   true,  false, false, false, v());\n-        t(\"should_panic\",          true,         false,  false,  true,  false, false, false, v());\n-        t(\"no_run\",                false,        true,   false,  true,  false, false, false, v());\n-        t(\"test_harness\",          false,        false,  false,  true,  true,  false, false, v());\n-        t(\"compile_fail\",          false,        true,   false,  true,  false, true,  false, v());\n-        t(\"allow_fail\",            false,        false,  false,  true,  false, false, true,  v());\n-        t(\"{.no_run .example}\",    false,        true,   false,  true,  false, false, false, v());\n-        t(\"{.sh .should_panic}\",   true,         false,  false,  false, false, false, false, v());\n-        t(\"{.example .rust}\",      false,        false,  false,  true,  false, false, false, v());\n-        t(\"{.test_harness .rust}\", false,        false,  false,  true,  true,  false, false, v());\n-        t(\"text, no_run\",          false,        true,   false,  false, false, false, false, v());\n-        t(\"text,no_run\",           false,        true,   false,  false, false, false, false, v());\n+        // ignore-tidy-linelength\n+        // marker                | should_panic | no_run | ignore | rust | test_harness\n+        //                       | compile_fail | allow_fail | error_codes | edition\n+        t(\"\",                      false,         false,   false,   true,  false, false, false, v(), None);\n+        t(\"rust\",                  false,         false,   false,   true,  false, false, false, v(), None);\n+        t(\"sh\",                    false,         false,   false,   false, false, false, false, v(), None);\n+        t(\"ignore\",                false,         false,   true,    true,  false, false, false, v(), None);\n+        t(\"should_panic\",          true,          false,   false,   true,  false, false, false, v(), None);\n+        t(\"no_run\",                false,         true,    false,   true,  false, false, false, v(), None);\n+        t(\"test_harness\",          false,         false,   false,   true,  true,  false, false, v(), None);\n+        t(\"compile_fail\",          false,         true,    false,   true,  false, true,  false, v(), None);\n+        t(\"allow_fail\",            false,         false,   false,   true,  false, false, true,  v(), None);\n+        t(\"{.no_run .example}\",    false,         true,    false,   true,  false, false, false, v(), None);\n+        t(\"{.sh .should_panic}\",   true,          false,   false,   false, false, false, false, v(), None);\n+        t(\"{.example .rust}\",      false,         false,   false,   true,  false, false, false, v(), None);\n+        t(\"{.test_harness .rust}\", false,         false,   false,   true,  true,  false, false, v(), None);\n+        t(\"text, no_run\",          false,         true,    false,   false, false, false, false, v(), None);\n+        t(\"text,no_run\",           false,         true,    false,   false, false, false, false, v(), None);\n+        t(\"edition2015\",           false,         false,   false,   true,  false, false, false, v(), Some(Edition::Edition2015));\n+        t(\"edition2018\",           false,         false,   false,   true,  false, false, false, v(), Some(Edition::Edition2018));\n     }\n \n     #[test]"}, {"sha": "dbebc3ab393977a0e226e20dabeb03607e0d757a", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23636e3f99ea8dba2d5e91637d818ebfbe6c1b96/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23636e3f99ea8dba2d5e91637d818ebfbe6c1b96/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=23636e3f99ea8dba2d5e91637d818ebfbe6c1b96", "patch": "@@ -545,7 +545,7 @@ impl Collector {\n         let opts = self.opts.clone();\n         let maybe_sysroot = self.maybe_sysroot.clone();\n         let linker = self.linker.clone();\n-        let edition = self.edition;\n+        let edition = config.edition.unwrap_or(self.edition);\n         debug!(\"Creating test {}: {}\", name, test);\n         self.tests.push(testing::TestDescAndFn {\n             desc: testing::TestDesc {"}, {"sha": "5819cd7f480a039ded2eef959be9cac7845bfada", "filename": "src/libsyntax_pos/edition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23636e3f99ea8dba2d5e91637d818ebfbe6c1b96/src%2Flibsyntax_pos%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23636e3f99ea8dba2d5e91637d818ebfbe6c1b96/src%2Flibsyntax_pos%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fedition.rs?ref=23636e3f99ea8dba2d5e91637d818ebfbe6c1b96", "patch": "@@ -12,7 +12,7 @@ use std::fmt;\n use std::str::FromStr;\n \n /// The edition of the compiler (RFC 2052)\n-#[derive(Clone, Copy, Hash, PartialEq, PartialOrd, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Copy, Hash, PartialEq, PartialOrd, Debug, RustcEncodable, RustcDecodable, Eq)]\n #[non_exhaustive]\n pub enum Edition {\n     // editions must be kept in order, oldest to newest"}, {"sha": "322d461f854e9475fe033ad10269e3db6a8f2053", "filename": "src/test/rustdoc/edition-doctest.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/23636e3f99ea8dba2d5e91637d818ebfbe6c1b96/src%2Ftest%2Frustdoc%2Fedition-doctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23636e3f99ea8dba2d5e91637d818ebfbe6c1b96/src%2Ftest%2Frustdoc%2Fedition-doctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fedition-doctest.rs?ref=23636e3f99ea8dba2d5e91637d818ebfbe6c1b96", "patch": "@@ -0,0 +1,54 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:--test\n+\n+/// ```rust,edition2018\n+/// #![feature(try_blocks)]\n+///\n+/// use std::num::ParseIntError;\n+///\n+/// let result: Result<i32, ParseIntError> = try {\n+///     \"1\".parse::<i32>()?\n+///         + \"2\".parse::<i32>()?\n+///         + \"3\".parse::<i32>()?\n+/// };\n+/// assert_eq!(result, Ok(6));\n+///\n+/// let result: Result<i32, ParseIntError> = try {\n+///     \"1\".parse::<i32>()?\n+///         + \"foo\".parse::<i32>()?\n+///         + \"3\".parse::<i32>()?\n+/// };\n+/// assert!(result.is_err());\n+/// ```\n+\n+\n+/// ```rust,edition2015,compile_fail,E0574\n+/// #![feature(try_blocks)]\n+///\n+/// use std::num::ParseIntError;\n+///\n+/// let result: Result<i32, ParseIntError> = try {\n+///     \"1\".parse::<i32>()?\n+///         + \"2\".parse::<i32>()?\n+///         + \"3\".parse::<i32>()?\n+/// };\n+/// assert_eq!(result, Ok(6));\n+///\n+/// let result: Result<i32, ParseIntError> = try {\n+///     \"1\".parse::<i32>()?\n+///         + \"foo\".parse::<i32>()?\n+///         + \"3\".parse::<i32>()?\n+/// };\n+/// assert!(result.is_err());\n+/// ```\n+\n+pub fn foo() {}"}]}