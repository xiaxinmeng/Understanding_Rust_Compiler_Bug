{"sha": "c76f47832a5086a76ea5f5f7636bfd35fcaee1d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NmY0NzgzMmE1MDg2YTc2ZWE1ZjVmNzYzNmJmZDM1ZmNhZWUxZDQ=", "commit": {"author": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2021-01-17T09:13:51Z"}, "committer": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2021-01-17T09:13:51Z"}, "message": "Don't derive TyEncodable/TyDecodable for Binder", "tree": {"sha": "622f9ab83eb513c38b7334436a9ed8e2f0c66223", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/622f9ab83eb513c38b7334436a9ed8e2f0c66223"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c76f47832a5086a76ea5f5f7636bfd35fcaee1d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c76f47832a5086a76ea5f5f7636bfd35fcaee1d4", "html_url": "https://github.com/rust-lang/rust/commit/c76f47832a5086a76ea5f5f7636bfd35fcaee1d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c76f47832a5086a76ea5f5f7636bfd35fcaee1d4/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "674735b109cdfb815c02b9b60fb65e5495f7cfe1", "url": "https://api.github.com/repos/rust-lang/rust/commits/674735b109cdfb815c02b9b60fb65e5495f7cfe1", "html_url": "https://github.com/rust-lang/rust/commit/674735b109cdfb815c02b9b60fb65e5495f7cfe1"}], "stats": {"total": 45, "additions": 35, "deletions": 10}, "files": [{"sha": "a7b0ff45b976c5231f94fcbbdee2c854313b1075", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c76f47832a5086a76ea5f5f7636bfd35fcaee1d4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c76f47832a5086a76ea5f5f7636bfd35fcaee1d4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=c76f47832a5086a76ea5f5f7636bfd35fcaee1d4", "patch": "@@ -120,9 +120,9 @@ impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for Ty<'tcx> {\n     }\n }\n \n-impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for ty::PredicateKind<'tcx> {\n+impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for ty::Binder<ty::PredicateKind<'tcx>> {\n     fn encode(&self, e: &mut E) -> Result<(), E::Error> {\n-        encode_with_shorthand(e, self, TyEncoder::predicate_shorthands)\n+        encode_with_shorthand(e, &self.skip_binder(), TyEncoder::predicate_shorthands)\n     }\n }\n \n@@ -226,18 +226,18 @@ impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for Ty<'tcx> {\n     }\n }\n \n-impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for ty::PredicateKind<'tcx> {\n-    fn decode(decoder: &mut D) -> Result<ty::PredicateKind<'tcx>, D::Error> {\n+impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for ty::Binder<ty::PredicateKind<'tcx>> {\n+    fn decode(decoder: &mut D) -> Result<ty::Binder<ty::PredicateKind<'tcx>>, D::Error> {\n         // Handle shorthands first, if we have an usize > 0x80.\n-        if decoder.positioned_at_shorthand() {\n+        Ok(ty::Binder::bind(if decoder.positioned_at_shorthand() {\n             let pos = decoder.read_usize()?;\n             assert!(pos >= SHORTHAND_OFFSET);\n             let shorthand = pos - SHORTHAND_OFFSET;\n \n-            decoder.with_position(shorthand, ty::PredicateKind::decode)\n+            decoder.with_position(shorthand, ty::PredicateKind::decode)?\n         } else {\n-            Ok(ty::PredicateKind::decode(decoder)?)\n-        }\n+            ty::PredicateKind::decode(decoder)?\n+        }))\n     }\n }\n \n@@ -471,3 +471,28 @@ macro_rules! implement_ty_decoder {\n         }\n     }\n }\n+\n+macro_rules! impl_binder_encode_decode {\n+    ($($t:ty),+ $(,)?) => {\n+        $(\n+            impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for ty::Binder<$t> {\n+                fn encode(&self, e: &mut E) -> Result<(), E::Error> {\n+                    self.as_ref().skip_binder().encode(e)\n+                }\n+            }\n+            impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for ty::Binder<$t> {\n+                fn decode(decoder: &mut D) -> Result<Self, D::Error> {\n+                    Ok(ty::Binder::bind(Decodable::decode(decoder)?))\n+                }\n+            }\n+        )*\n+    }\n+}\n+\n+impl_binder_encode_decode! {\n+    &'tcx ty::List<Ty<'tcx>>,\n+    ty::FnSig<'tcx>,\n+    ty::ExistentialPredicate<'tcx>,\n+    ty::TraitRef<'tcx>,\n+    Vec<ty::GeneratorInteriorTypeCause<'tcx>>,\n+}"}, {"sha": "099c5aa84e5111e7a084f4a33c6b8a517caf2b36", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c76f47832a5086a76ea5f5f7636bfd35fcaee1d4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c76f47832a5086a76ea5f5f7636bfd35fcaee1d4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=c76f47832a5086a76ea5f5f7636bfd35fcaee1d4", "patch": "@@ -1081,7 +1081,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for Predicate<'tcx> {\n     }\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]\n #[derive(HashStable, TypeFoldable)]\n pub enum PredicateKind<'tcx> {\n     /// Corresponds to `where Foo: Bar<A, B, C>`. `Foo` here would be"}, {"sha": "cdf443975f428067dbabed56f67a4dce300707a3", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c76f47832a5086a76ea5f5f7636bfd35fcaee1d4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c76f47832a5086a76ea5f5f7636bfd35fcaee1d4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=c76f47832a5086a76ea5f5f7636bfd35fcaee1d4", "patch": "@@ -955,7 +955,7 @@ impl<'tcx> PolyExistentialTraitRef<'tcx> {\n /// erase, or otherwise \"discharge\" these bound vars, we change the\n /// type from `Binder<T>` to just `T` (see\n /// e.g., `liberate_late_bound_regions`).\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n pub struct Binder<T>(T);\n \n impl<T> Binder<T> {"}]}