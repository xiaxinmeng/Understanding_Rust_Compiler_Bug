{"sha": "8981dbbc36f1575b0a417b6849767bde29e7c6b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5ODFkYmJjMzZmMTU3NWIwYTQxN2I2ODQ5NzY3YmRlMjllN2M2YjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-06T20:44:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-06T20:44:16Z"}, "message": "Auto merge of #73978 - Mark-Simulacrum:shrink-paramenv, r=nnethercote\n\nShrink ParamEnv to 16 bytes\n\nr? @nnethercote\n\nx.py check passes but I haven't tried running perf or tests", "tree": {"sha": "fdbb360930dc941571b61dea4f7e245fdd2abd53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdbb360930dc941571b61dea4f7e245fdd2abd53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8981dbbc36f1575b0a417b6849767bde29e7c6b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8981dbbc36f1575b0a417b6849767bde29e7c6b4", "html_url": "https://github.com/rust-lang/rust/commit/8981dbbc36f1575b0a417b6849767bde29e7c6b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8981dbbc36f1575b0a417b6849767bde29e7c6b4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c03aee8b81185d65b5821518661c30ecdb42de5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c03aee8b81185d65b5821518661c30ecdb42de5", "html_url": "https://github.com/rust-lang/rust/commit/0c03aee8b81185d65b5821518661c30ecdb42de5"}, {"sha": "8512d2efdef2c41aa529f44941f4c1f0e5fdd7de", "url": "https://api.github.com/repos/rust-lang/rust/commits/8512d2efdef2c41aa529f44941f4c1f0e5fdd7de", "html_url": "https://github.com/rust-lang/rust/commit/8512d2efdef2c41aa529f44941f4c1f0e5fdd7de"}], "stats": {"total": 271, "additions": 188, "deletions": 83}, "files": [{"sha": "541a2f18045c4a5b9a24356f09c27b62f027be7e", "filename": "src/librustc_infer/infer/outlives/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fmod.rs?ref=8981dbbc36f1575b0a417b6849767bde29e7c6b4", "patch": "@@ -11,7 +11,7 @@ pub fn explicit_outlives_bounds<'tcx>(\n     param_env: ty::ParamEnv<'tcx>,\n ) -> impl Iterator<Item = OutlivesBound<'tcx>> + 'tcx {\n     debug!(\"explicit_outlives_bounds()\");\n-    param_env.caller_bounds.into_iter().filter_map(move |predicate| match predicate.kind() {\n+    param_env.caller_bounds().into_iter().filter_map(move |predicate| match predicate.kind() {\n         ty::PredicateKind::Projection(..)\n         | ty::PredicateKind::Trait(..)\n         | ty::PredicateKind::Subtype(..)"}, {"sha": "8f20b5743df4fd7f1927b633af652bd1ff197688", "filename": "src/librustc_infer/infer/outlives/verify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fverify.rs?ref=8981dbbc36f1575b0a417b6849767bde29e7c6b4", "patch": "@@ -221,7 +221,7 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n         // dubious for projections, but it will work for simple cases\n         // like `T` and `T::Item`. It may not work as well for things\n         // like `<T as Foo<'a>>::Item`.\n-        let c_b = self.param_env.caller_bounds;\n+        let c_b = self.param_env.caller_bounds();\n         let param_bounds = self.collect_outlives_from_predicate_list(&compare_ty, c_b.into_iter());\n \n         // Next, collect regions we scraped from the well-formedness"}, {"sha": "7e7c8588ffb40a6440bce2d38c4fdc69ad0d4fa8", "filename": "src/librustc_infer/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_infer%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_infer%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fmod.rs?ref=8981dbbc36f1575b0a417b6849767bde29e7c6b4", "patch": "@@ -57,7 +57,7 @@ pub type TraitObligation<'tcx> = Obligation<'tcx, ty::PolyTraitPredicate<'tcx>>;\n \n // `PredicateObligation` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert_size!(PredicateObligation<'_>, 48);\n+static_assert_size!(PredicateObligation<'_>, 40);\n \n pub type Obligations<'tcx, O> = Vec<Obligation<'tcx, O>>;\n pub type PredicateObligations<'tcx> = Vec<PredicateObligation<'tcx>>;"}, {"sha": "010370c6e413a27590f04c6cead682c0c23620a9", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=8981dbbc36f1575b0a417b6849767bde29e7c6b4", "patch": "@@ -1588,7 +1588,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n         // Ignore layouts that are done with non-empty environments or\n         // non-monomorphic layouts, as the user only wants to see the stuff\n         // resulting from the final codegen session.\n-        if layout.ty.has_param_types_or_consts() || !self.param_env.caller_bounds.is_empty() {\n+        if layout.ty.has_param_types_or_consts() || !self.param_env.caller_bounds().is_empty() {\n             return;\n         }\n "}, {"sha": "ffb41b094dcd5adeb3e149c823ff596d9ca96592", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 112, "deletions": 10, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=8981dbbc36f1575b0a417b6849767bde29e7c6b4", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-filelength\n+\n pub use self::fold::{TypeFoldable, TypeVisitor};\n pub use self::AssocItemContainer::*;\n pub use self::BorrowKind::*;\n@@ -45,6 +47,7 @@ use std::cell::RefCell;\n use std::cmp::Ordering;\n use std::fmt;\n use std::hash::{Hash, Hasher};\n+use std::marker::PhantomData;\n use std::ops::Range;\n use std::ptr;\n \n@@ -1571,24 +1574,93 @@ pub type PlaceholderConst = Placeholder<BoundVar>;\n /// When type checking, we use the `ParamEnv` to track\n /// details about the set of where-clauses that are in scope at this\n /// particular point.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable, TypeFoldable)]\n+#[derive(Copy, Clone)]\n pub struct ParamEnv<'tcx> {\n+    // We pack the caller_bounds List pointer and a Reveal enum into this usize.\n+    // Specifically, the low bit represents Reveal, with 0 meaning `UserFacing`\n+    // and 1 meaning `All`. The rest is the pointer.\n+    //\n+    // This relies on the List<ty::Predicate<'tcx>> type having at least 2-byte\n+    // alignment. Lists start with a usize and are repr(C) so this should be\n+    // fine; there is a debug_assert in the constructor as well.\n+    //\n+    // Note that the choice of 0 for UserFacing is intentional -- since it is the\n+    // first variant in Reveal this means that joining the pointer is a simple `or`.\n+    packed_data: usize,\n+\n     /// `Obligation`s that the caller must satisfy. This is basically\n     /// the set of bounds on the in-scope type parameters, translated\n     /// into `Obligation`s, and elaborated and normalized.\n-    pub caller_bounds: &'tcx List<ty::Predicate<'tcx>>,\n+    ///\n+    /// Note: This is packed into the `packed_data` usize above, use the\n+    /// `caller_bounds()` method to access it.\n+    caller_bounds: PhantomData<&'tcx List<ty::Predicate<'tcx>>>,\n \n     /// Typically, this is `Reveal::UserFacing`, but during codegen we\n-    /// want `Reveal::All` -- note that this is always paired with an\n-    /// empty environment. To get that, use `ParamEnv::reveal()`.\n-    pub reveal: traits::Reveal,\n+    /// want `Reveal::All`.\n+    ///\n+    /// Note: This is packed into the caller_bounds usize above, use the reveal()\n+    /// method to access it.\n+    reveal: PhantomData<traits::Reveal>,\n \n     /// If this `ParamEnv` comes from a call to `tcx.param_env(def_id)`,\n     /// register that `def_id` (useful for transitioning to the chalk trait\n     /// solver).\n     pub def_id: Option<DefId>,\n }\n \n+impl<'tcx> fmt::Debug for ParamEnv<'tcx> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_struct(\"ParamEnv\")\n+            .field(\"caller_bounds\", &self.caller_bounds())\n+            .field(\"reveal\", &self.reveal())\n+            .field(\"def_id\", &self.def_id)\n+            .finish()\n+    }\n+}\n+\n+impl<'tcx> Hash for ParamEnv<'tcx> {\n+    fn hash<H: Hasher>(&self, state: &mut H) {\n+        // List hashes as the raw pointer, so we can skip splitting into the\n+        // pointer and the enum.\n+        self.packed_data.hash(state);\n+        self.def_id.hash(state);\n+    }\n+}\n+\n+impl<'tcx> PartialEq for ParamEnv<'tcx> {\n+    fn eq(&self, other: &Self) -> bool {\n+        self.caller_bounds() == other.caller_bounds()\n+            && self.reveal() == other.reveal()\n+            && self.def_id == other.def_id\n+    }\n+}\n+impl<'tcx> Eq for ParamEnv<'tcx> {}\n+\n+impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for ParamEnv<'tcx> {\n+    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n+        self.caller_bounds().hash_stable(hcx, hasher);\n+        self.reveal().hash_stable(hcx, hasher);\n+        self.def_id.hash_stable(hcx, hasher);\n+    }\n+}\n+\n+impl<'tcx> TypeFoldable<'tcx> for ParamEnv<'tcx> {\n+    fn super_fold_with<F: ty::fold::TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+        ParamEnv::new(\n+            self.caller_bounds().fold_with(folder),\n+            self.reveal().fold_with(folder),\n+            self.def_id.fold_with(folder),\n+        )\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.caller_bounds().visit_with(visitor)\n+            || self.reveal().visit_with(visitor)\n+            || self.def_id.visit_with(visitor)\n+    }\n+}\n+\n impl<'tcx> ParamEnv<'tcx> {\n     /// Construct a trait environment suitable for contexts where\n     /// there are no where-clauses in scope. Hidden types (like `impl\n@@ -1599,6 +1671,17 @@ impl<'tcx> ParamEnv<'tcx> {\n         Self::new(List::empty(), Reveal::UserFacing, None)\n     }\n \n+    #[inline]\n+    pub fn caller_bounds(self) -> &'tcx List<ty::Predicate<'tcx>> {\n+        // mask out bottom bit\n+        unsafe { &*((self.packed_data & (!1)) as *const _) }\n+    }\n+\n+    #[inline]\n+    pub fn reveal(self) -> traits::Reveal {\n+        if self.packed_data & 1 == 0 { traits::Reveal::UserFacing } else { traits::Reveal::All }\n+    }\n+\n     /// Construct a trait environment with no where-clauses in scope\n     /// where the values of all `impl Trait` and other hidden types\n     /// are revealed. This is suitable for monomorphized, post-typeck\n@@ -1618,7 +1701,25 @@ impl<'tcx> ParamEnv<'tcx> {\n         reveal: Reveal,\n         def_id: Option<DefId>,\n     ) -> Self {\n-        ty::ParamEnv { caller_bounds, reveal, def_id }\n+        let packed_data = caller_bounds as *const _ as usize;\n+        // Check that we can pack the reveal data into the pointer.\n+        debug_assert!(packed_data & 1 == 0);\n+        ty::ParamEnv {\n+            packed_data: packed_data\n+                | match reveal {\n+                    Reveal::UserFacing => 0,\n+                    Reveal::All => 1,\n+                },\n+            caller_bounds: PhantomData,\n+            reveal: PhantomData,\n+            def_id,\n+        }\n+    }\n+\n+    pub fn with_user_facing(mut self) -> Self {\n+        // clear bottom bit\n+        self.packed_data &= !1;\n+        self\n     }\n \n     /// Returns a new parameter environment with the same clauses, but\n@@ -1627,13 +1728,14 @@ impl<'tcx> ParamEnv<'tcx> {\n     /// the desired behavior during codegen and certain other special\n     /// contexts; normally though we want to use `Reveal::UserFacing`,\n     /// which is the default.\n-    pub fn with_reveal_all(self) -> Self {\n-        ty::ParamEnv { reveal: Reveal::All, ..self }\n+    pub fn with_reveal_all(mut self) -> Self {\n+        self.packed_data |= 1;\n+        self\n     }\n \n     /// Returns this same environment but with no caller bounds.\n     pub fn without_caller_bounds(self) -> Self {\n-        ty::ParamEnv { caller_bounds: List::empty(), ..self }\n+        Self::new(List::empty(), self.reveal(), self.def_id)\n     }\n \n     /// Creates a suitable environment in which to perform trait\n@@ -1649,7 +1751,7 @@ impl<'tcx> ParamEnv<'tcx> {\n     /// satisfiable. We generally want to behave as if they were true,\n     /// although the surrounding function is never reachable.\n     pub fn and<T: TypeFoldable<'tcx>>(self, value: T) -> ParamEnvAnd<'tcx, T> {\n-        match self.reveal {\n+        match self.reveal() {\n             Reveal::UserFacing => ParamEnvAnd { param_env: self, value },\n \n             Reveal::All => {"}, {"sha": "159af277d240b56bbd3b31e8a714bee702f8dea0", "filename": "src/librustc_middle/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs?ref=8981dbbc36f1575b0a417b6849767bde29e7c6b4", "patch": "@@ -521,11 +521,8 @@ impl<'tcx, T: Lift<'tcx>> Lift<'tcx> for ty::Binder<T> {\n impl<'a, 'tcx> Lift<'tcx> for ty::ParamEnv<'a> {\n     type Lifted = ty::ParamEnv<'tcx>;\n     fn lift_to_tcx(&self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {\n-        tcx.lift(&self.caller_bounds).map(|caller_bounds| ty::ParamEnv {\n-            reveal: self.reveal,\n-            caller_bounds,\n-            def_id: self.def_id,\n-        })\n+        tcx.lift(&self.caller_bounds())\n+            .map(|caller_bounds| ty::ParamEnv::new(caller_bounds, self.reveal(), self.def_id))\n     }\n }\n "}, {"sha": "24a0107ab9689fb220b6a707e183eceaaca2bcba", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=8981dbbc36f1575b0a417b6849767bde29e7c6b4", "patch": "@@ -226,9 +226,9 @@ pub fn const_eval_validated_provider<'tcx>(\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n ) -> ::rustc_middle::mir::interpret::ConstEvalResult<'tcx> {\n     // see comment in const_eval_raw_provider for what we're doing here\n-    if key.param_env.reveal == Reveal::All {\n+    if key.param_env.reveal() == Reveal::All {\n         let mut key = key;\n-        key.param_env.reveal = Reveal::UserFacing;\n+        key.param_env = key.param_env.with_user_facing();\n         match tcx.const_eval_validated(key) {\n             // try again with reveal all as requested\n             Err(ErrorHandled::TooGeneric) => {}\n@@ -267,9 +267,9 @@ pub fn const_eval_raw_provider<'tcx>(\n     // information being available.\n \n     // In case we fail in the `UserFacing` variant, we just do the real computation.\n-    if key.param_env.reveal == Reveal::All {\n+    if key.param_env.reveal() == Reveal::All {\n         let mut key = key;\n-        key.param_env.reveal = Reveal::UserFacing;\n+        key.param_env = key.param_env.with_user_facing();\n         match tcx.const_eval_raw(key) {\n             // try again with reveal all as requested\n             Err(ErrorHandled::TooGeneric) => {}\n@@ -326,7 +326,7 @@ pub fn const_eval_raw_provider<'tcx>(\n                 // this is `Reveal::UserFacing`, then it's expected that we could get a\n                 // `TooGeneric` error. When we fall back to `Reveal::All`, then it will either\n                 // succeed or we'll report this error then.\n-                if key.param_env.reveal == Reveal::All {\n+                if key.param_env.reveal() == Reveal::All {\n                     tcx.sess.delay_span_bug(\n                         err.span,\n                         &format!(\"static eval failure did not emit an error: {:#?}\", v),"}, {"sha": "20c2f5688eb591ef64e840550b53d792a1be8047", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=8981dbbc36f1575b0a417b6849767bde29e7c6b4", "patch": "@@ -279,7 +279,7 @@ where\n                 let subpath = self.elaborator.field_subpath(variant_path, field);\n                 let tcx = self.tcx();\n \n-                assert_eq!(self.elaborator.param_env().reveal, Reveal::All);\n+                assert_eq!(self.elaborator.param_env().reveal(), Reveal::All);\n                 let field_ty =\n                     tcx.normalize_erasing_regions(self.elaborator.param_env(), f.ty(tcx, substs));\n                 (tcx.mk_place_field(base_place, field, field_ty), subpath)"}, {"sha": "8c8550d377a6eeb67f5fa8b657278ea1ccec8a3c", "filename": "src/librustc_trait_selection/traits/auto_trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs?ref=8981dbbc36f1575b0a417b6849767bde29e7c6b4", "patch": "@@ -281,8 +281,8 @@ impl AutoTraitFinder<'tcx> {\n             },\n         }));\n \n-        let computed_preds = param_env.caller_bounds.iter();\n-        let mut user_computed_preds: FxHashSet<_> = user_env.caller_bounds.iter().collect();\n+        let computed_preds = param_env.caller_bounds().iter();\n+        let mut user_computed_preds: FxHashSet<_> = user_env.caller_bounds().iter().collect();\n \n         let mut new_env = param_env;\n         let dummy_cause = ObligationCause::dummy();\n@@ -368,12 +368,12 @@ impl AutoTraitFinder<'tcx> {\n             )\n             .map(|o| o.predicate);\n             new_env =\n-                ty::ParamEnv::new(tcx.mk_predicates(normalized_preds), param_env.reveal, None);\n+                ty::ParamEnv::new(tcx.mk_predicates(normalized_preds), param_env.reveal(), None);\n         }\n \n         let final_user_env = ty::ParamEnv::new(\n             tcx.mk_predicates(user_computed_preds.into_iter()),\n-            user_env.reveal,\n+            user_env.reveal(),\n             None,\n         );\n         debug!("}, {"sha": "a75240042ad76cfc08a947c1c3dbd3d4d5becec0", "filename": "src/librustc_trait_selection/traits/chalk_fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_trait_selection%2Ftraits%2Fchalk_fulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_trait_selection%2Ftraits%2Fchalk_fulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fchalk_fulfill.rs?ref=8981dbbc36f1575b0a417b6849767bde29e7c6b4", "patch": "@@ -137,7 +137,7 @@ fn in_environment(\n \n     let environment = match obligation.param_env.def_id {\n         Some(def_id) => environment(infcx.tcx, def_id),\n-        None if obligation.param_env.caller_bounds.is_empty() => ty::List::empty(),\n+        None if obligation.param_env.caller_bounds().is_empty() => ty::List::empty(),\n         // FIXME(chalk): this is hit in ui/where-clauses/where-clause-constraints-are-local-for-trait-impl\n         // and ui/generics/generic-static-methods\n         //_ => bug!(\"non-empty `ParamEnv` with no def-id\"),"}, {"sha": "800aef7284f9e3220fc7b69164f59acea2ed82ec", "filename": "src/librustc_trait_selection/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs?ref=8981dbbc36f1575b0a417b6849767bde29e7c6b4", "patch": "@@ -84,7 +84,7 @@ pub struct PendingPredicateObligation<'tcx> {\n \n // `PendingPredicateObligation` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert_size!(PendingPredicateObligation<'_>, 72);\n+static_assert_size!(PendingPredicateObligation<'_>, 64);\n \n impl<'a, 'tcx> FulfillmentContext<'tcx> {\n     /// Creates a new fulfillment context."}, {"sha": "78c50a1176a3d464408c9d661ad3325ec0b64515", "filename": "src/librustc_trait_selection/traits/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs?ref=8981dbbc36f1575b0a417b6849767bde29e7c6b4", "patch": "@@ -297,15 +297,15 @@ pub fn normalize_param_env_or_error<'tcx>(\n     );\n \n     let mut predicates: Vec<_> =\n-        util::elaborate_predicates(tcx, unnormalized_env.caller_bounds.into_iter())\n+        util::elaborate_predicates(tcx, unnormalized_env.caller_bounds().into_iter())\n             .map(|obligation| obligation.predicate)\n             .collect();\n \n     debug!(\"normalize_param_env_or_error: elaborated-predicates={:?}\", predicates);\n \n     let elaborated_env = ty::ParamEnv::new(\n         tcx.intern_predicates(&predicates),\n-        unnormalized_env.reveal,\n+        unnormalized_env.reveal(),\n         unnormalized_env.def_id,\n     );\n \n@@ -361,7 +361,7 @@ pub fn normalize_param_env_or_error<'tcx>(\n     let outlives_env: Vec<_> =\n         non_outlives_predicates.iter().chain(&outlives_predicates).cloned().collect();\n     let outlives_env =\n-        ty::ParamEnv::new(tcx.intern_predicates(&outlives_env), unnormalized_env.reveal, None);\n+        ty::ParamEnv::new(tcx.intern_predicates(&outlives_env), unnormalized_env.reveal(), None);\n     let outlives_predicates = match do_normalize_predicates(\n         tcx,\n         region_context,\n@@ -383,7 +383,7 @@ pub fn normalize_param_env_or_error<'tcx>(\n     debug!(\"normalize_param_env_or_error: final predicates={:?}\", predicates);\n     ty::ParamEnv::new(\n         tcx.intern_predicates(&predicates),\n-        unnormalized_env.reveal,\n+        unnormalized_env.reveal(),\n         unnormalized_env.def_id,\n     )\n }"}, {"sha": "63714c2bae92b27b08f0b33d8e2ea71b096eb198", "filename": "src/librustc_trait_selection/traits/object_safety.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs?ref=8981dbbc36f1575b0a417b6849767bde29e7c6b4", "patch": "@@ -631,7 +631,7 @@ fn receiver_is_dispatchable<'tcx>(\n     // create a modified param env, with `Self: Unsize<U>` and `U: Trait` added to caller bounds\n     // `U: ?Sized` is already implied here\n     let param_env = {\n-        let mut param_env = tcx.param_env(method.def_id);\n+        let param_env = tcx.param_env(method.def_id);\n \n         // Self: Unsize<U>\n         let unsize_predicate = ty::TraitRef {\n@@ -656,15 +656,17 @@ fn receiver_is_dispatchable<'tcx>(\n         };\n \n         let caller_bounds: Vec<Predicate<'tcx>> = param_env\n-            .caller_bounds\n+            .caller_bounds()\n             .iter()\n             .chain(iter::once(unsize_predicate))\n             .chain(iter::once(trait_predicate))\n             .collect();\n \n-        param_env.caller_bounds = tcx.intern_predicates(&caller_bounds);\n-\n-        param_env\n+        ty::ParamEnv::new(\n+            tcx.intern_predicates(&caller_bounds),\n+            param_env.reveal(),\n+            param_env.def_id,\n+        )\n     };\n \n     // Receiver: DispatchFromDyn<Receiver[Self => U]>"}, {"sha": "bd86109e5a4910f39883d29a491e11b36bdde737", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=8981dbbc36f1575b0a417b6849767bde29e7c6b4", "patch": "@@ -326,7 +326,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n             ty::Opaque(def_id, substs) if !substs.has_escaping_bound_vars() => {\n                 // (*)\n                 // Only normalize `impl Trait` after type-checking, usually in codegen.\n-                match self.param_env.reveal {\n+                match self.param_env.reveal() {\n                     Reveal::UserFacing => ty,\n \n                     Reveal::All => {\n@@ -869,7 +869,7 @@ fn assemble_candidates_from_param_env<'cx, 'tcx>(\n         obligation_trait_ref,\n         candidate_set,\n         ProjectionTyCandidate::ParamEnv,\n-        obligation.param_env.caller_bounds.iter(),\n+        obligation.param_env.caller_bounds().iter(),\n     );\n }\n \n@@ -1028,7 +1028,7 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                     // and the obligation is monomorphic, otherwise passes such as\n                     // transmute checking and polymorphic MIR optimizations could\n                     // get a result which isn't correct for all monomorphizations.\n-                    if obligation.param_env.reveal == Reveal::All {\n+                    if obligation.param_env.reveal() == Reveal::All {\n                         // NOTE(eddyb) inference variables can resolve to parameters, so\n                         // assume `poly_trait_ref` isn't monomorphic, if it contains any.\n                         let poly_trait_ref ="}, {"sha": "59fa4c1598d4184bf4db52b1f0f3021f34ef0c1e", "filename": "src/librustc_trait_selection/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fnormalize.rs?ref=8981dbbc36f1575b0a417b6849767bde29e7c6b4", "patch": "@@ -104,7 +104,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n             ty::Opaque(def_id, substs) if !substs.has_escaping_bound_vars() => {\n                 // (*)\n                 // Only normalize `impl Trait` after type-checking, usually in codegen.\n-                match self.param_env.reveal {\n+                match self.param_env.reveal() {\n                     Reveal::UserFacing => ty,\n \n                     Reveal::All => {"}, {"sha": "1d5441b8eff85c76616db6e9897122ea7e00d605", "filename": "src/librustc_trait_selection/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=8981dbbc36f1575b0a417b6849767bde29e7c6b4", "patch": "@@ -186,7 +186,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let all_bounds = stack\n             .obligation\n             .param_env\n-            .caller_bounds\n+            .caller_bounds()\n             .iter()\n             .filter_map(|o| o.to_opt_poly_trait_ref());\n "}, {"sha": "ba5e60012da19616b0d4a9dfe9f5cd104a09f3c9", "filename": "src/librustc_trait_selection/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs?ref=8981dbbc36f1575b0a417b6849767bde29e7c6b4", "patch": "@@ -552,7 +552,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         if !self.intercrate\n             && obligation.is_global()\n-            && obligation.param_env.caller_bounds.iter().all(|bound| bound.needs_subst())\n+            && obligation.param_env.caller_bounds().iter().all(|bound| bound.needs_subst())\n         {\n             // If a param env has no global bounds, global obligations do not\n             // depend on its particular value in order to work, so we can clear"}, {"sha": "9b737d464174a44b77eb0b0c00712b832eb656b6", "filename": "src/librustc_trait_selection/traits/specialize/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_trait_selection%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_trait_selection%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fspecialize%2Fmod.rs?ref=8981dbbc36f1575b0a417b6849767bde29e7c6b4", "patch": "@@ -231,7 +231,10 @@ fn fulfill_implication<'a, 'tcx>(\n                 debug!(\n                     \"fulfill_implication: for impls on {:?} and {:?}, \\\n                      could not fulfill: {:?} given {:?}\",\n-                    source_trait_ref, target_trait_ref, errors, param_env.caller_bounds\n+                    source_trait_ref,\n+                    target_trait_ref,\n+                    errors,\n+                    param_env.caller_bounds()\n                 );\n                 Err(())\n             }"}, {"sha": "de4cdbb3b7916b09b5d2d5e6f7a7443850645264", "filename": "src/librustc_ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_ty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_ty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Finstance.rs?ref=8981dbbc36f1575b0a417b6849767bde29e7c6b4", "patch": "@@ -126,7 +126,7 @@ fn resolve_associated_item<'tcx>(\n                 // and the obligation is monomorphic, otherwise passes such as\n                 // transmute checking and polymorphic MIR optimizations could\n                 // get a result which isn't correct for all monomorphizations.\n-                if param_env.reveal == Reveal::All {\n+                if param_env.reveal() == Reveal::All {\n                     !trait_ref.still_further_specializable()\n                 } else {\n                     false"}, {"sha": "a90ed455d048b722f4ae533df8205254be2f9a05", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=8981dbbc36f1575b0a417b6849767bde29e7c6b4", "patch": "@@ -218,7 +218,7 @@ fn compare_predicate_entailment<'tcx>(\n         let inh = Inherited::new(infcx, impl_m.def_id.expect_local());\n         let infcx = &inh.infcx;\n \n-        debug!(\"compare_impl_method: caller_bounds={:?}\", param_env.caller_bounds);\n+        debug!(\"compare_impl_method: caller_bounds={:?}\", param_env.caller_bounds());\n \n         let mut selcx = traits::SelectionContext::new(&infcx);\n \n@@ -1141,7 +1141,7 @@ fn compare_type_predicate_entailment<'tcx>(\n         let inh = Inherited::new(infcx, impl_ty.def_id.expect_local());\n         let infcx = &inh.infcx;\n \n-        debug!(\"compare_type_predicate_entailment: caller_bounds={:?}\", param_env.caller_bounds);\n+        debug!(\"compare_type_predicate_entailment: caller_bounds={:?}\", param_env.caller_bounds());\n \n         let mut selcx = traits::SelectionContext::new(&infcx);\n "}, {"sha": "78bf973e9e3f843937896a80f3bdd70fa61900a0", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=8981dbbc36f1575b0a417b6849767bde29e7c6b4", "patch": "@@ -798,26 +798,25 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         // FIXME: do we want to commit to this behavior for param bounds?\n         debug!(\"assemble_inherent_candidates_from_param(param_ty={:?})\", param_ty);\n \n-        let bounds =\n-            self.param_env.caller_bounds.iter().filter_map(|predicate| match predicate.kind() {\n-                ty::PredicateKind::Trait(ref trait_predicate, _) => {\n-                    match trait_predicate.skip_binder().trait_ref.self_ty().kind {\n-                        ty::Param(ref p) if *p == param_ty => {\n-                            Some(trait_predicate.to_poly_trait_ref())\n-                        }\n-                        _ => None,\n-                    }\n+        let bounds = self.param_env.caller_bounds().iter().filter_map(|predicate| match predicate\n+            .kind()\n+        {\n+            ty::PredicateKind::Trait(ref trait_predicate, _) => {\n+                match trait_predicate.skip_binder().trait_ref.self_ty().kind {\n+                    ty::Param(ref p) if *p == param_ty => Some(trait_predicate.to_poly_trait_ref()),\n+                    _ => None,\n                 }\n-                ty::PredicateKind::Subtype(..)\n-                | ty::PredicateKind::Projection(..)\n-                | ty::PredicateKind::RegionOutlives(..)\n-                | ty::PredicateKind::WellFormed(..)\n-                | ty::PredicateKind::ObjectSafe(..)\n-                | ty::PredicateKind::ClosureKind(..)\n-                | ty::PredicateKind::TypeOutlives(..)\n-                | ty::PredicateKind::ConstEvaluatable(..)\n-                | ty::PredicateKind::ConstEquate(..) => None,\n-            });\n+            }\n+            ty::PredicateKind::Subtype(..)\n+            | ty::PredicateKind::Projection(..)\n+            | ty::PredicateKind::RegionOutlives(..)\n+            | ty::PredicateKind::WellFormed(..)\n+            | ty::PredicateKind::ObjectSafe(..)\n+            | ty::PredicateKind::ClosureKind(..)\n+            | ty::PredicateKind::TypeOutlives(..)\n+            | ty::PredicateKind::ConstEvaluatable(..)\n+            | ty::PredicateKind::ConstEquate(..) => None,\n+        });\n \n         self.elaborate_bounds(bounds, |this, poly_trait_ref, item| {\n             let trait_ref = this.erase_late_bound_regions(&poly_trait_ref);"}, {"sha": "f828ca47883f75866708eea6b8bc000e277ff508", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8981dbbc36f1575b0a417b6849767bde29e7c6b4", "patch": "@@ -2927,18 +2927,20 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n         let index = generics.param_def_id_to_index[&def_id];\n         ty::GenericPredicates {\n             parent: None,\n-            predicates: tcx.arena.alloc_from_iter(self.param_env.caller_bounds.iter().filter_map(\n-                |predicate| match predicate.kind() {\n-                    ty::PredicateKind::Trait(ref data, _)\n-                        if data.skip_binder().self_ty().is_param(index) =>\n-                    {\n-                        // HACK(eddyb) should get the original `Span`.\n-                        let span = tcx.def_span(def_id);\n-                        Some((predicate, span))\n+            predicates: tcx.arena.alloc_from_iter(\n+                self.param_env.caller_bounds().iter().filter_map(|predicate| {\n+                    match predicate.kind() {\n+                        ty::PredicateKind::Trait(ref data, _)\n+                            if data.skip_binder().self_ty().is_param(index) =>\n+                        {\n+                            // HACK(eddyb) should get the original `Span`.\n+                            let span = tcx.def_span(def_id);\n+                            Some((predicate, span))\n+                        }\n+                        _ => None,\n                     }\n-                    _ => None,\n-                },\n-            )),\n+                }),\n+            ),\n         }\n     }\n "}, {"sha": "3a798158c8bc6e121c5fe69ec660ed28d9badd6e", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=8981dbbc36f1575b0a417b6849767bde29e7c6b4", "patch": "@@ -459,9 +459,9 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         let mut replacer = RegionReplacer { vid_to_region: &vid_to_region, tcx };\n \n         let orig_bounds: FxHashSet<_> =\n-            self.cx.tcx.param_env(param_env_def_id).caller_bounds.iter().collect();\n+            self.cx.tcx.param_env(param_env_def_id).caller_bounds().iter().collect();\n         let clean_where_predicates = param_env\n-            .caller_bounds\n+            .caller_bounds()\n             .iter()\n             .filter(|p| {\n                 !orig_bounds.contains(p)"}, {"sha": "5d47f9425e3ef812f1ec33eac6401a3803fafc29", "filename": "src/tools/clippy/clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8981dbbc36f1575b0a417b6849767bde29e7c6b4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=8981dbbc36f1575b0a417b6849767bde29e7c6b4", "patch": "@@ -111,7 +111,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n \n         let fn_def_id = cx.tcx.hir().local_def_id(hir_id);\n \n-        let preds = traits::elaborate_predicates(cx.tcx, cx.param_env.caller_bounds.iter())\n+        let preds = traits::elaborate_predicates(cx.tcx, cx.param_env.caller_bounds().iter())\n             .filter(|p| !p.is_global())\n             .filter_map(|obligation| {\n                 if let ty::PredicateKind::Trait(poly_trait_ref, _) = obligation.predicate.kind() {"}]}