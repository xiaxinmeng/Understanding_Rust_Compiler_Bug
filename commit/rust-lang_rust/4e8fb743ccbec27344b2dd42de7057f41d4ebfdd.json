{"sha": "4e8fb743ccbec27344b2dd42de7057f41d4ebfdd", "node_id": "C_kwDOAAsO6NoAKDRlOGZiNzQzY2NiZWMyNzM0NGIyZGQ0MmRlNzA1N2Y0MWQ0ZWJmZGQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-03T15:49:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-03T15:49:30Z"}, "message": "Auto merge of #93621 - JohnTitor:rollup-1bcud0x, r=JohnTitor\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #92310 (rustdoc: Fix ICE report)\n - #92802 (Deduplicate lines in long const-eval stack trace)\n - #93515 (Factor convenience functions out of main printer implementation)\n - #93566 (Make rustc use `RUST_BACKTRACE=full` by default)\n - #93589 (Use Option::then in two places)\n - #93600 (fix: Remove extra newlines from junit output)\n - #93606 (Correct incorrect description of preorder traversals)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "eb5047ae3b85ccc425c189e70ed1395e51c662dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb5047ae3b85ccc425c189e70ed1395e51c662dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e8fb743ccbec27344b2dd42de7057f41d4ebfdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e8fb743ccbec27344b2dd42de7057f41d4ebfdd", "html_url": "https://github.com/rust-lang/rust/commit/4e8fb743ccbec27344b2dd42de7057f41d4ebfdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e8fb743ccbec27344b2dd42de7057f41d4ebfdd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b7853fe1f87a40ceaddf63aa404817bbfa69676", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b7853fe1f87a40ceaddf63aa404817bbfa69676", "html_url": "https://github.com/rust-lang/rust/commit/8b7853fe1f87a40ceaddf63aa404817bbfa69676"}, {"sha": "38adea96c53565f4c099375fd460a9cf3815bc65", "url": "https://api.github.com/repos/rust-lang/rust/commits/38adea96c53565f4c099375fd460a9cf3815bc65", "html_url": "https://github.com/rust-lang/rust/commit/38adea96c53565f4c099375fd460a9cf3815bc65"}], "stats": {"total": 320, "additions": 215, "deletions": 105}, "files": [{"sha": "d567c8dae43a4269d8fc22eb51c9d6dc1d0e0e69", "filename": "compiler/rustc_ast_pretty/src/pp.rs", "status": "modified", "additions": 1, "deletions": 75, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/4e8fb743ccbec27344b2dd42de7057f41d4ebfdd/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e8fb743ccbec27344b2dd42de7057f41d4ebfdd/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs?ref=4e8fb743ccbec27344b2dd42de7057f41d4ebfdd", "patch": "@@ -132,6 +132,7 @@\n //! methods called `Printer::scan_*`, and the 'PRINT' process is the\n //! method called `Printer::print`.\n \n+mod convenience;\n mod ring;\n \n use ring::RingBuffer;\n@@ -186,12 +187,6 @@ pub enum Token {\n     End,\n }\n \n-impl Token {\n-    pub fn is_hardbreak_tok(&self) -> bool {\n-        matches!(self, Token::Break(BreakToken { offset: 0, blank_space: SIZE_INFINITY }))\n-    }\n-}\n-\n #[derive(Copy, Clone)]\n enum PrintFrame {\n     Fits,\n@@ -441,73 +436,4 @@ impl Printer {\n         self.out.push_str(string);\n         self.space -= string.len() as isize;\n     }\n-\n-    // Convenience functions to talk to the printer.\n-\n-    /// \"raw box\"\n-    pub fn rbox(&mut self, indent: usize, breaks: Breaks) {\n-        self.scan_begin(BeginToken {\n-            indent: IndentStyle::Block { offset: indent as isize },\n-            breaks,\n-        })\n-    }\n-\n-    /// Inconsistent breaking box\n-    pub fn ibox(&mut self, indent: usize) {\n-        self.rbox(indent, Breaks::Inconsistent)\n-    }\n-\n-    /// Consistent breaking box\n-    pub fn cbox(&mut self, indent: usize) {\n-        self.rbox(indent, Breaks::Consistent)\n-    }\n-\n-    pub fn visual_align(&mut self) {\n-        self.scan_begin(BeginToken { indent: IndentStyle::Visual, breaks: Breaks::Consistent });\n-    }\n-\n-    pub fn break_offset(&mut self, n: usize, off: isize) {\n-        self.scan_break(BreakToken { offset: off, blank_space: n as isize })\n-    }\n-\n-    pub fn end(&mut self) {\n-        self.scan_end()\n-    }\n-\n-    pub fn eof(mut self) -> String {\n-        self.scan_eof();\n-        self.out\n-    }\n-\n-    pub fn word<S: Into<Cow<'static, str>>>(&mut self, wrd: S) {\n-        let string = wrd.into();\n-        self.scan_string(string)\n-    }\n-\n-    fn spaces(&mut self, n: usize) {\n-        self.break_offset(n, 0)\n-    }\n-\n-    pub fn zerobreak(&mut self) {\n-        self.spaces(0)\n-    }\n-\n-    pub fn space(&mut self) {\n-        self.spaces(1)\n-    }\n-\n-    pub fn hardbreak(&mut self) {\n-        self.spaces(SIZE_INFINITY as usize)\n-    }\n-\n-    pub fn is_beginning_of_line(&self) -> bool {\n-        match self.last_token() {\n-            Some(last_token) => last_token.is_hardbreak_tok(),\n-            None => true,\n-        }\n-    }\n-\n-    pub fn hardbreak_tok_offset(off: isize) -> Token {\n-        Token::Break(BreakToken { offset: off, blank_space: SIZE_INFINITY })\n-    }\n }"}, {"sha": "1b9ac705883afd571f5dbf5dcdf95a40c32c2828", "filename": "compiler/rustc_ast_pretty/src/pp/convenience.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/4e8fb743ccbec27344b2dd42de7057f41d4ebfdd/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp%2Fconvenience.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e8fb743ccbec27344b2dd42de7057f41d4ebfdd/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp%2Fconvenience.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp%2Fconvenience.rs?ref=4e8fb743ccbec27344b2dd42de7057f41d4ebfdd", "patch": "@@ -0,0 +1,77 @@\n+use crate::pp::{BeginToken, BreakToken, Breaks, IndentStyle, Printer, Token, SIZE_INFINITY};\n+use std::borrow::Cow;\n+\n+impl Printer {\n+    /// \"raw box\"\n+    pub fn rbox(&mut self, indent: usize, breaks: Breaks) {\n+        self.scan_begin(BeginToken {\n+            indent: IndentStyle::Block { offset: indent as isize },\n+            breaks,\n+        })\n+    }\n+\n+    /// Inconsistent breaking box\n+    pub fn ibox(&mut self, indent: usize) {\n+        self.rbox(indent, Breaks::Inconsistent)\n+    }\n+\n+    /// Consistent breaking box\n+    pub fn cbox(&mut self, indent: usize) {\n+        self.rbox(indent, Breaks::Consistent)\n+    }\n+\n+    pub fn visual_align(&mut self) {\n+        self.scan_begin(BeginToken { indent: IndentStyle::Visual, breaks: Breaks::Consistent });\n+    }\n+\n+    pub fn break_offset(&mut self, n: usize, off: isize) {\n+        self.scan_break(BreakToken { offset: off, blank_space: n as isize })\n+    }\n+\n+    pub fn end(&mut self) {\n+        self.scan_end()\n+    }\n+\n+    pub fn eof(mut self) -> String {\n+        self.scan_eof();\n+        self.out\n+    }\n+\n+    pub fn word<S: Into<Cow<'static, str>>>(&mut self, wrd: S) {\n+        let string = wrd.into();\n+        self.scan_string(string)\n+    }\n+\n+    fn spaces(&mut self, n: usize) {\n+        self.break_offset(n, 0)\n+    }\n+\n+    pub fn zerobreak(&mut self) {\n+        self.spaces(0)\n+    }\n+\n+    pub fn space(&mut self) {\n+        self.spaces(1)\n+    }\n+\n+    pub fn hardbreak(&mut self) {\n+        self.spaces(SIZE_INFINITY as usize)\n+    }\n+\n+    pub fn is_beginning_of_line(&self) -> bool {\n+        match self.last_token() {\n+            Some(last_token) => last_token.is_hardbreak_tok(),\n+            None => true,\n+        }\n+    }\n+\n+    pub fn hardbreak_tok_offset(off: isize) -> Token {\n+        Token::Break(BreakToken { offset: off, blank_space: SIZE_INFINITY })\n+    }\n+}\n+\n+impl Token {\n+    pub fn is_hardbreak_tok(&self) -> bool {\n+        matches!(self, Token::Break(BreakToken { offset: 0, blank_space: SIZE_INFINITY }))\n+    }\n+}"}, {"sha": "89a0f8245e5fb7e36b23433e5320f6d11b39ee25", "filename": "compiler/rustc_const_eval/src/const_eval/error.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4e8fb743ccbec27344b2dd42de7057f41d4ebfdd/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e8fb743ccbec27344b2dd42de7057f41d4ebfdd/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs?ref=4e8fb743ccbec27344b2dd42de7057f41d4ebfdd", "patch": "@@ -156,9 +156,37 @@ impl<'tcx> ConstEvalErr<'tcx> {\n             }\n             // Add spans for the stacktrace. Don't print a single-line backtrace though.\n             if self.stacktrace.len() > 1 {\n+                // Helper closure to print duplicated lines.\n+                let mut flush_last_line = |last_frame, times| {\n+                    if let Some((line, span)) = last_frame {\n+                        err.span_label(span, &line);\n+                        // Don't print [... additional calls ...] if the number of lines is small\n+                        if times < 3 {\n+                            for _ in 0..times {\n+                                err.span_label(span, &line);\n+                            }\n+                        } else {\n+                            err.span_label(\n+                                span,\n+                                format!(\"[... {} additional calls {} ...]\", times, &line),\n+                            );\n+                        }\n+                    }\n+                };\n+\n+                let mut last_frame = None;\n+                let mut times = 0;\n                 for frame_info in &self.stacktrace {\n-                    err.span_label(frame_info.span, frame_info.to_string());\n+                    let frame = (frame_info.to_string(), frame_info.span);\n+                    if last_frame.as_ref() == Some(&frame) {\n+                        times += 1;\n+                    } else {\n+                        flush_last_line(last_frame, times);\n+                        last_frame = Some(frame);\n+                        times = 0;\n+                    }\n                 }\n+                flush_last_line(last_frame, times);\n             }\n             // Let the caller finish the job.\n             emit(err)"}, {"sha": "acf221a08eeb26f138b334419a2bf48d82342a00", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 30, "deletions": 21, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4e8fb743ccbec27344b2dd42de7057f41d4ebfdd/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e8fb743ccbec27344b2dd42de7057f41d4ebfdd/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=4e8fb743ccbec27344b2dd42de7057f41d4ebfdd", "patch": "@@ -66,7 +66,7 @@ pub const EXIT_FAILURE: i32 = 1;\n const BUG_REPORT_URL: &str = \"https://github.com/rust-lang/rust/issues/new\\\n     ?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\";\n \n-const ICE_REPORT_COMPILER_FLAGS: &[&str] = &[\"Z\", \"C\", \"crate-type\"];\n+const ICE_REPORT_COMPILER_FLAGS: &[&str] = &[\"-Z\", \"-C\", \"--crate-type\"];\n \n const ICE_REPORT_COMPILER_FLAGS_EXCLUDE: &[&str] = &[\"metadata\", \"extra-filename\"];\n \n@@ -1100,31 +1100,31 @@ fn parse_crate_attrs<'a>(sess: &'a Session, input: &Input) -> PResult<'a, Vec<as\n /// debugging, since some ICEs only happens with non-default compiler flags\n /// (and the users don't always report them).\n fn extra_compiler_flags() -> Option<(Vec<String>, bool)> {\n-    let args = env::args_os().map(|arg| arg.to_string_lossy().to_string()).collect::<Vec<_>>();\n+    let mut args = env::args_os().map(|arg| arg.to_string_lossy().to_string()).peekable();\n \n-    // Avoid printing help because of empty args. This can suggest the compiler\n-    // itself is not the program root (consider RLS).\n-    if args.len() < 2 {\n-        return None;\n-    }\n-\n-    let matches = handle_options(&args)?;\n     let mut result = Vec::new();\n     let mut excluded_cargo_defaults = false;\n-    for flag in ICE_REPORT_COMPILER_FLAGS {\n-        let prefix = if flag.len() == 1 { \"-\" } else { \"--\" };\n-\n-        for content in &matches.opt_strs(flag) {\n-            // Split always returns the first element\n-            let name = if let Some(first) = content.split('=').next() { first } else { &content };\n-\n-            let content =\n-                if ICE_REPORT_COMPILER_FLAGS_STRIP_VALUE.contains(&name) { name } else { content };\n-\n-            if !ICE_REPORT_COMPILER_FLAGS_EXCLUDE.contains(&name) {\n-                result.push(format!(\"{}{} {}\", prefix, flag, content));\n+    while let Some(arg) = args.next() {\n+        if let Some(a) = ICE_REPORT_COMPILER_FLAGS.iter().find(|a| arg.starts_with(*a)) {\n+            let content = if arg.len() == a.len() {\n+                match args.next() {\n+                    Some(arg) => arg.to_string(),\n+                    None => continue,\n+                }\n+            } else if arg.get(a.len()..a.len() + 1) == Some(\"=\") {\n+                arg[a.len() + 1..].to_string()\n             } else {\n+                arg[a.len()..].to_string()\n+            };\n+            if ICE_REPORT_COMPILER_FLAGS_EXCLUDE.iter().any(|exc| content.starts_with(exc)) {\n                 excluded_cargo_defaults = true;\n+            } else {\n+                result.push(a.to_string());\n+                match ICE_REPORT_COMPILER_FLAGS_STRIP_VALUE.iter().find(|s| content.starts_with(*s))\n+                {\n+                    Some(s) => result.push(s.to_string()),\n+                    None => result.push(content),\n+                }\n             }\n         }\n     }\n@@ -1240,6 +1240,15 @@ pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n ///\n /// A custom rustc driver can skip calling this to set up a custom ICE hook.\n pub fn install_ice_hook() {\n+    // If the user has not explicitly overriden \"RUST_BACKTRACE\", then produce\n+    // full backtraces. When a compiler ICE happens, we want to gather\n+    // as much information as possible to present in the issue opened\n+    // by the user. Compiler developers and other rustc users can\n+    // opt in to less-verbose backtraces by manually setting \"RUST_BACKTRACE\"\n+    // (e.g. `RUST_BACKTRACE=1`)\n+    if std::env::var(\"RUST_BACKTRACE\").is_err() {\n+        std::env::set_var(\"RUST_BACKTRACE\", \"full\");\n+    }\n     SyncLazy::force(&DEFAULT_HOOK);\n }\n "}, {"sha": "480f28620dc8fb0402484e337646cf6f3782502e", "filename": "compiler/rustc_middle/src/mir/traversal.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4e8fb743ccbec27344b2dd42de7057f41d4ebfdd/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e8fb743ccbec27344b2dd42de7057f41d4ebfdd/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs?ref=4e8fb743ccbec27344b2dd42de7057f41d4ebfdd", "patch": "@@ -4,8 +4,9 @@ use super::*;\n \n /// Preorder traversal of a graph.\n ///\n-/// Preorder traversal is when each node is visited before any of its\n-/// successors\n+/// Preorder traversal is when each node is visited after at least one of its predecessors. If you\n+/// are familar with some basic graph theory, then this performs a depth first search and returns\n+/// nodes in order of discovery time.\n ///\n /// ```text\n ///\n@@ -82,8 +83,9 @@ impl<'a, 'tcx> Iterator for Preorder<'a, 'tcx> {\n \n /// Postorder traversal of a graph.\n ///\n-/// Postorder traversal is when each node is visited after all of its\n-/// successors, except when the successor is only reachable by a back-edge\n+/// Postorder traversal is when each node is visited after all of its successors, except when the\n+/// successor is only reachable by a back-edge. If you are familiar with some basic graph theory,\n+/// then this performs a depth first search and returns nodes in order of completion time.\n ///\n ///\n /// ```text"}, {"sha": "a4e100973b675762300cc15bf21a21b3a3aef789", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e8fb743ccbec27344b2dd42de7057f41d4ebfdd/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e8fb743ccbec27344b2dd42de7057f41d4ebfdd/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=4e8fb743ccbec27344b2dd42de7057f41d4ebfdd", "patch": "@@ -264,7 +264,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         // The set of places that we are creating fake borrows of. If there are\n         // no match guards then we don't need any fake borrows, so don't track\n         // them.\n-        let mut fake_borrows = if match_has_guard { Some(FxHashSet::default()) } else { None };\n+        let mut fake_borrows = match_has_guard.then(FxHashSet::default);\n \n         let mut otherwise = None;\n "}, {"sha": "c95dff13d6615ffe71097d8f480fad6097a7f9c6", "filename": "compiler/rustc_query_system/src/dep_graph/serialized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e8fb743ccbec27344b2dd42de7057f41d4ebfdd/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e8fb743ccbec27344b2dd42de7057f41d4ebfdd/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs?ref=4e8fb743ccbec27344b2dd42de7057f41d4ebfdd", "patch": "@@ -182,7 +182,7 @@ impl<K: DepKind> EncoderState<K> {\n             total_edge_count: 0,\n             total_node_count: 0,\n             result: Ok(()),\n-            stats: if record_stats { Some(FxHashMap::default()) } else { None },\n+            stats: record_stats.then(FxHashMap::default),\n         }\n     }\n "}, {"sha": "f940a9ff8f1d918f41547d0c42c59e47a951439f", "filename": "library/test/src/formatters/junit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e8fb743ccbec27344b2dd42de7057f41d4ebfdd/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e8fb743ccbec27344b2dd42de7057f41d4ebfdd/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs?ref=4e8fb743ccbec27344b2dd42de7057f41d4ebfdd", "patch": "@@ -33,7 +33,6 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n         _shuffle_seed: Option<u64>,\n     ) -> io::Result<()> {\n         // We write xml header on run start\n-        self.out.write_all(b\"\\n\")?;\n         self.write_message(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\")\n     }\n \n@@ -138,7 +137,7 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n         self.write_message(\"</testsuite>\")?;\n         self.write_message(\"</testsuites>\")?;\n \n-        self.out.write_all(b\"\\n\\n\")?;\n+        self.out.write_all(b\"\\n\")?;\n \n         Ok(state.failed == 0)\n     }"}, {"sha": "664940c52cfc5bf33bbda2c28886fae66e6033ba", "filename": "src/test/ui/consts/recursive.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4e8fb743ccbec27344b2dd42de7057f41d4ebfdd/src%2Ftest%2Fui%2Fconsts%2Frecursive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e8fb743ccbec27344b2dd42de7057f41d4ebfdd/src%2Ftest%2Fui%2Fconsts%2Frecursive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frecursive.rs?ref=4e8fb743ccbec27344b2dd42de7057f41d4ebfdd", "patch": "@@ -0,0 +1,11 @@\n+#![allow(unused)]\n+\n+const fn f<T>(x: T) { //~ WARN function cannot return without recursing\n+    f(x);\n+    //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler\n+}\n+\n+const X: () = f(1);\n+\n+fn main() {}"}, {"sha": "31ac1fff4e84e1506bfc618353fddee29025a6b8", "filename": "src/test/ui/consts/recursive.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4e8fb743ccbec27344b2dd42de7057f41d4ebfdd/src%2Ftest%2Fui%2Fconsts%2Frecursive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e8fb743ccbec27344b2dd42de7057f41d4ebfdd/src%2Ftest%2Fui%2Fconsts%2Frecursive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frecursive.stderr?ref=4e8fb743ccbec27344b2dd42de7057f41d4ebfdd", "patch": "@@ -0,0 +1,31 @@\n+warning: function cannot return without recursing\n+  --> $DIR/recursive.rs:3:1\n+   |\n+LL | const fn f<T>(x: T) {\n+   | ^^^^^^^^^^^^^^^^^^^ cannot return without recursing\n+LL |     f(x);\n+   |     ---- recursive call site\n+   |\n+   = note: `#[warn(unconditional_recursion)]` on by default\n+   = help: a `loop` may express intention better if this is on purpose\n+\n+error: any use of this value will cause an error\n+  --> $DIR/recursive.rs:4:5\n+   |\n+LL |     f(x);\n+   |     ^^^^\n+   |     |\n+   |     reached the configured maximum number of stack frames\n+   |     inside `f::<i32>` at $DIR/recursive.rs:4:5\n+   |     [... 126 additional calls inside `f::<i32>` at $DIR/recursive.rs:4:5 ...]\n+   |     inside `X` at $DIR/recursive.rs:9:15\n+...\n+LL | const X: () = f(1);\n+   | -------------------\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "fd86a3f9dfaff9c4e8fce6547870f2387e07238b", "filename": "src/test/ui/panics/default-backtrace-ice.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4e8fb743ccbec27344b2dd42de7057f41d4ebfdd/src%2Ftest%2Fui%2Fpanics%2Fdefault-backtrace-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e8fb743ccbec27344b2dd42de7057f41d4ebfdd/src%2Ftest%2Fui%2Fpanics%2Fdefault-backtrace-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fdefault-backtrace-ice.rs?ref=4e8fb743ccbec27344b2dd42de7057f41d4ebfdd", "patch": "@@ -0,0 +1,9 @@\n+// unset-rustc-env:RUST_BACKTRACE\n+// compile-flags:-Z treat-err-as-bug=1\n+// error-pattern:stack backtrace:\n+// failure-status:101\n+// normalize-stderr-test \"note: .*\" -> \"\"\n+// normalize-stderr-test \"thread 'rustc' .*\" -> \"\"\n+// normalize-stderr-test \"  .*\\n\" -> \"\"\n+\n+fn main() { missing_ident; }"}, {"sha": "a0025d7e221ae1f35b764f596f68b6449976be92", "filename": "src/test/ui/panics/default-backtrace-ice.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4e8fb743ccbec27344b2dd42de7057f41d4ebfdd/src%2Ftest%2Fui%2Fpanics%2Fdefault-backtrace-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e8fb743ccbec27344b2dd42de7057f41d4ebfdd/src%2Ftest%2Fui%2Fpanics%2Fdefault-backtrace-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fdefault-backtrace-ice.stderr?ref=4e8fb743ccbec27344b2dd42de7057f41d4ebfdd", "patch": "@@ -0,0 +1,18 @@\n+error[E0425]: cannot find value `missing_ident` in this scope\n+LL | fn main() { missing_ident; }\n+\n+\n+stack backtrace:\n+\n+error: internal compiler error: unexpected panic\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+query stack during panic:\n+end of query stack"}]}