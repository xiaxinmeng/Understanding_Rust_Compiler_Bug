{"sha": "deb3ca53a8d462d36283bdcb2ae796f25b3d2209", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlYjNjYTUzYThkNDYyZDM2MjgzYmRjYjJhZTc5NmYyNWIzZDIyMDk=", "commit": {"author": {"name": "Kiet Tran", "email": "ktt3ja@gmail.com", "date": "2014-01-11T08:21:53Z"}, "committer": {"name": "Kiet Tran", "email": "ktt3ja@gmail.com", "date": "2014-01-12T18:54:36Z"}, "message": "Mark allowed dead code and lang items as live\n\nDead code pass now explicitly checks for `#[allow(dead_code)]` and\n`#[lang=\"..\"]` attributes on items and marks them as live if they have\nthose attributes. The former is done so that if we want to suppress\nwarnings for a group of dead functions, we only have to annotate the\n\"root\" of the call chain.", "tree": {"sha": "784374731e0e2290f701b40285edfbd368c3164d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/784374731e0e2290f701b40285edfbd368c3164d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/deb3ca53a8d462d36283bdcb2ae796f25b3d2209", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/deb3ca53a8d462d36283bdcb2ae796f25b3d2209", "html_url": "https://github.com/rust-lang/rust/commit/deb3ca53a8d462d36283bdcb2ae796f25b3d2209", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/deb3ca53a8d462d36283bdcb2ae796f25b3d2209/comments", "author": {"login": "ktt3ja", "id": 1735399, "node_id": "MDQ6VXNlcjE3MzUzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1735399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktt3ja", "html_url": "https://github.com/ktt3ja", "followers_url": "https://api.github.com/users/ktt3ja/followers", "following_url": "https://api.github.com/users/ktt3ja/following{/other_user}", "gists_url": "https://api.github.com/users/ktt3ja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktt3ja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktt3ja/subscriptions", "organizations_url": "https://api.github.com/users/ktt3ja/orgs", "repos_url": "https://api.github.com/users/ktt3ja/repos", "events_url": "https://api.github.com/users/ktt3ja/events{/privacy}", "received_events_url": "https://api.github.com/users/ktt3ja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktt3ja", "id": 1735399, "node_id": "MDQ6VXNlcjE3MzUzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1735399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktt3ja", "html_url": "https://github.com/ktt3ja", "followers_url": "https://api.github.com/users/ktt3ja/followers", "following_url": "https://api.github.com/users/ktt3ja/following{/other_user}", "gists_url": "https://api.github.com/users/ktt3ja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktt3ja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktt3ja/subscriptions", "organizations_url": "https://api.github.com/users/ktt3ja/orgs", "repos_url": "https://api.github.com/users/ktt3ja/repos", "events_url": "https://api.github.com/users/ktt3ja/events{/privacy}", "received_events_url": "https://api.github.com/users/ktt3ja/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fda761e9cc5b5bf9d5f0897f1556958a7746bf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5", "html_url": "https://github.com/rust-lang/rust/commit/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5"}], "stats": {"total": 93, "additions": 80, "deletions": 13}, "files": [{"sha": "f6cb635d01e5862480d67bcab3d4cc348b3f36b7", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 46, "deletions": 12, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/deb3ca53a8d462d36283bdcb2ae796f25b3d2209/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deb3ca53a8d462d36283bdcb2ae796f25b3d2209/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=deb3ca53a8d462d36283bdcb2ae796f25b3d2209", "patch": "@@ -12,20 +12,23 @@\n // closely. The idea is that all reachable symbols are live, codes called\n // from live codes are live, and everything else is dead.\n \n+use middle::lint::{allow, contains_lint, DeadCode};\n+use middle::privacy;\n use middle::ty;\n use middle::typeck;\n-use middle::privacy;\n-use middle::lint::DeadCode;\n \n use std::hashmap::HashSet;\n use syntax::ast;\n use syntax::ast_map;\n use syntax::ast_util::{local_def, def_id_of_def, is_local};\n+use syntax::attr;\n use syntax::codemap;\n use syntax::parse::token;\n use syntax::visit::Visitor;\n use syntax::visit;\n \n+pub static DEAD_CODE_LINT_STR: &'static str = \"dead_code\";\n+\n // Any local node that may call something in its body block should be\n // explored. For example, if it's a live NodeItem that is a\n // function, then we should explore its block to check for codes that\n@@ -196,26 +199,57 @@ impl Visitor<()> for MarkSymbolVisitor {\n     }\n }\n \n-// This visitor is used to mark the implemented methods of a trait. Since we\n-// can not be sure if such methods are live or dead, we simply mark them\n-// as live.\n-struct TraitMethodSeeder {\n+fn has_allow_dead_code_or_lang_attr(attrs: &[ast::Attribute]) -> bool {\n+    contains_lint(attrs, allow, DEAD_CODE_LINT_STR)\n+    || attr::contains_name(attrs, \"lang\")\n+}\n+\n+// This visitor seeds items that\n+//   1) We want to explicitly consider as live:\n+//     * Item annotated with #[allow(dead_code)]\n+//         - This is done so that if we want to suppress warnings for a\n+//           group of dead functions, we only have to annotate the \"root\".\n+//           For example, if both `f` and `g` are dead and `f` calls `g`,\n+//           then annotating `f` with `#[allow(dead_code)]` will suppress\n+//           warning for both `f` and `g`.\n+//     * Item annotated with #[lang=\"..\"]\n+//         - This is because lang items are always callable from elsewhere.\n+//   or\n+//   2) We are not sure to be live or not\n+//     * Implementation of a trait method\n+struct LifeSeeder {\n     worklist: ~[ast::NodeId],\n }\n \n-impl Visitor<()> for TraitMethodSeeder {\n+impl Visitor<()> for LifeSeeder {\n     fn visit_item(&mut self, item: &ast::Item, _: ()) {\n+        if has_allow_dead_code_or_lang_attr(item.attrs) {\n+            self.worklist.push(item.id);\n+        }\n         match item.node {\n             ast::ItemImpl(_, Some(ref _trait_ref), _, ref methods) => {\n                 for method in methods.iter() {\n                     self.worklist.push(method.id);\n                 }\n             }\n-            ast::ItemMod(..) | ast::ItemFn(..) => {\n-                visit::walk_item(self, item, ());\n+            _ => ()\n+        }\n+        visit::walk_item(self, item, ());\n+    }\n+\n+    fn visit_fn(&mut self, fk: &visit::FnKind,\n+                _: &ast::FnDecl, block: &ast::Block,\n+                _: codemap::Span, id: ast::NodeId, _: ()) {\n+        // Check for method here because methods are not ast::Item\n+        match *fk {\n+            visit::FkMethod(_, _, method) => {\n+                if has_allow_dead_code_or_lang_attr(method.attrs) {\n+                    self.worklist.push(id);\n+                }\n             }\n             _ => ()\n         }\n+        visit::walk_block(self, block, ());\n     }\n }\n \n@@ -244,12 +278,12 @@ fn create_and_seed_worklist(tcx: ty::ctxt,\n     }\n \n     // Seed implemeneted trait methods\n-    let mut trait_method_seeder = TraitMethodSeeder {\n+    let mut life_seeder = LifeSeeder {\n         worklist: worklist\n     };\n-    visit::walk_crate(&mut trait_method_seeder, crate, ());\n+    visit::walk_crate(&mut life_seeder, crate, ());\n \n-    return trait_method_seeder.worklist;\n+    return life_seeder.worklist;\n }\n \n fn find_live(tcx: ty::ctxt,"}, {"sha": "046ec557a87965f546247e8d4c34bc4ca831ec2e", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/deb3ca53a8d462d36283bdcb2ae796f25b3d2209/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deb3ca53a8d462d36283bdcb2ae796f25b3d2209/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=deb3ca53a8d462d36283bdcb2ae796f25b3d2209", "patch": "@@ -34,6 +34,7 @@\n //! Context itself, span_lint should be used instead of add_lint.\n \n use driver::session;\n+use middle::dead::DEAD_CODE_LINT_STR;\n use middle::privacy;\n use middle::trans::adt; // for `adt::is_ffi_safe`\n use middle::ty;\n@@ -293,7 +294,7 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n         default: warn\n     }),\n \n-    (\"dead_code\",\n+    (DEAD_CODE_LINT_STR,\n      LintSpec {\n         lint: DeadCode,\n         desc: \"detect piece of code that will never be used\",\n@@ -531,6 +532,8 @@ impl<'a> Context<'a> {\n     }\n }\n \n+// Check that every lint from the list of attributes satisfies `f`.\n+// Return true if that's the case. Otherwise return false.\n pub fn each_lint(sess: session::Session,\n                  attrs: &[ast::Attribute],\n                  f: |@ast::MetaItem, level, @str| -> bool)\n@@ -564,6 +567,25 @@ pub fn each_lint(sess: session::Session,\n     true\n }\n \n+// Check from a list of attributes if it contains the appropriate\n+// `#[level(lintname)]` attribute (e.g. `#[allow(dead_code)]).\n+pub fn contains_lint(attrs: &[ast::Attribute],\n+                    level: level, lintname: &'static str) -> bool {\n+    let level_name = level_to_str(level);\n+    for attr in attrs.iter().filter(|m| level_name == m.name()) {\n+        if attr.meta_item_list().is_none() {\n+            continue\n+        }\n+        let list = attr.meta_item_list().unwrap();\n+        for meta_item in list.iter() {\n+            if lintname == meta_item.name() {\n+                return true;\n+            }\n+        }\n+    }\n+    false\n+}\n+\n fn check_while_true_expr(cx: &Context, e: &ast::Expr) {\n     match e.node {\n         ast::ExprWhile(cond, _) => {"}, {"sha": "8a9397b0227bc2ceeba784528df24ce7a5bbce31", "filename": "src/test/compile-fail/lint-dead-code-1.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/deb3ca53a8d462d36283bdcb2ae796f25b3d2209/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deb3ca53a8d462d36283bdcb2ae796f25b3d2209/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs?ref=deb3ca53a8d462d36283bdcb2ae796f25b3d2209", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[no_std];\n #[allow(unused_variable)];\n #[deny(dead_code)];\n \n@@ -85,3 +86,13 @@ fn foo() { //~ ERROR: code is never used\n fn bar() { //~ ERROR: code is never used\n     foo();\n }\n+\n+// Code with #[allow(dead_code)] should be marked live (and thus anything it\n+// calls is marked live)\n+#[allow(dead_code)]\n+fn g() { h(); }\n+fn h() {}\n+\n+// Similarly, lang items are live\n+#[lang=\"fail_\"]\n+fn fail(_: *u8, _: *u8, _: uint) -> ! { loop {} }"}]}