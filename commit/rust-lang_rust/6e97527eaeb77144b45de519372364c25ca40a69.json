{"sha": "6e97527eaeb77144b45de519372364c25ca40a69", "node_id": "C_kwDOAAsO6NoAKDZlOTc1MjdlYWViNzcxNDRiNDVkZTUxOTM3MjM2NGMyNWNhNDBhNjk", "commit": {"author": {"name": "XFFXFF", "email": "1247714429@qq.com", "date": "2023-03-07T00:24:05Z"}, "committer": {"name": "XFFXFF", "email": "1247714429@qq.com", "date": "2023-03-07T09:27:52Z"}, "message": "add is_blocklike func on BlockLike", "tree": {"sha": "78da23a472530180881fc889f094ac65b2d99921", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78da23a472530180881fc889f094ac65b2d99921"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e97527eaeb77144b45de519372364c25ca40a69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e97527eaeb77144b45de519372364c25ca40a69", "html_url": "https://github.com/rust-lang/rust/commit/6e97527eaeb77144b45de519372364c25ca40a69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e97527eaeb77144b45de519372364c25ca40a69/comments", "author": {"login": "xffxff", "id": 30254428, "node_id": "MDQ6VXNlcjMwMjU0NDI4", "avatar_url": "https://avatars.githubusercontent.com/u/30254428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xffxff", "html_url": "https://github.com/xffxff", "followers_url": "https://api.github.com/users/xffxff/followers", "following_url": "https://api.github.com/users/xffxff/following{/other_user}", "gists_url": "https://api.github.com/users/xffxff/gists{/gist_id}", "starred_url": "https://api.github.com/users/xffxff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xffxff/subscriptions", "organizations_url": "https://api.github.com/users/xffxff/orgs", "repos_url": "https://api.github.com/users/xffxff/repos", "events_url": "https://api.github.com/users/xffxff/events{/privacy}", "received_events_url": "https://api.github.com/users/xffxff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xffxff", "id": 30254428, "node_id": "MDQ6VXNlcjMwMjU0NDI4", "avatar_url": "https://avatars.githubusercontent.com/u/30254428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xffxff", "html_url": "https://github.com/xffxff", "followers_url": "https://api.github.com/users/xffxff/followers", "following_url": "https://api.github.com/users/xffxff/following{/other_user}", "gists_url": "https://api.github.com/users/xffxff/gists{/gist_id}", "starred_url": "https://api.github.com/users/xffxff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xffxff/subscriptions", "organizations_url": "https://api.github.com/users/xffxff/orgs", "repos_url": "https://api.github.com/users/xffxff/repos", "events_url": "https://api.github.com/users/xffxff/events{/privacy}", "received_events_url": "https://api.github.com/users/xffxff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98990affe546bc4371e0b6daee686bda0194e95d", "url": "https://api.github.com/repos/rust-lang/rust/commits/98990affe546bc4371e0b6daee686bda0194e95d", "html_url": "https://github.com/rust-lang/rust/commit/98990affe546bc4371e0b6daee686bda0194e95d"}], "stats": {"total": 31, "additions": 14, "deletions": 17}, "files": [{"sha": "15435a26cea98c0b02c03159c982b8c5a6bc7b8d", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e97527eaeb77144b45de519372364c25ca40a69/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e97527eaeb77144b45de519372364c25ca40a69/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=6e97527eaeb77144b45de519372364c25ca40a69", "patch": "@@ -198,6 +198,10 @@ impl BlockLike {\n     fn is_block(self) -> bool {\n         self == BlockLike::Block\n     }\n+\n+    fn is_blocklike(kind: SyntaxKind) -> bool {\n+        matches!(kind, BLOCK_EXPR | IF_EXPR | WHILE_EXPR | FOR_EXPR | LOOP_EXPR | MATCH_EXPR)\n+    }\n }\n \n const VISIBILITY_FIRST: TokenSet = TokenSet::new(&[T![pub], T![crate]]);"}, {"sha": "a884d8b6ec801e3e89fb9349e11db7216617c468", "filename": "crates/parser/src/grammar/expressions.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6e97527eaeb77144b45de519372364c25ca40a69/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e97527eaeb77144b45de519372364c25ca40a69/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=6e97527eaeb77144b45de519372364c25ca40a69", "patch": "@@ -121,27 +121,22 @@ pub(super) fn stmt(p: &mut Parser<'_>, semicolon: Semicolon) {\n             types::ascription(p);\n         }\n \n-        let mut is_block_like_expr_after_eq = false;\n+        let mut expr_after_eq: Option<CompletedMarker> = None;\n         if p.eat(T![=]) {\n             // test let_stmt_init\n             // fn f() { let x = 92; }\n-            let expr = expressions::expr(p);\n-\n-            if let Some(expr) = expr {\n-                is_block_like_expr_after_eq = match expr.kind() {\n-                    IF_EXPR | WHILE_EXPR | FOR_EXPR | LOOP_EXPR | MATCH_EXPR | BLOCK_EXPR => true,\n-                    _ => false,\n-                };\n-            }\n+            expr_after_eq = expressions::expr(p);\n         }\n \n         if p.at(T![else]) {\n             // test_err let_else_right_curly_brace\n             // fn func() { let Some(_) = {Some(1)} else { panic!(\"h\") };}\n-            if is_block_like_expr_after_eq {\n-                p.error(\n-                    \"right curly brace `}` before `else` in a `let...else` statement not allowed\",\n-                )\n+            if let Some(expr) = expr_after_eq {\n+                if BlockLike::is_blocklike(expr.kind()) {\n+                    p.error(\n+                        \"right curly brace `}` before `else` in a `let...else` statement not allowed\",\n+                    )\n+                }\n             }\n \n             // test let_else"}, {"sha": "d051dd2682f942c6318dcaaaa633ad2b13e10d93", "filename": "crates/parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e97527eaeb77144b45de519372364c25ca40a69/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e97527eaeb77144b45de519372364c25ca40a69/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=6e97527eaeb77144b45de519372364c25ca40a69", "patch": "@@ -163,10 +163,8 @@ pub(super) fn atom_expr(\n             return None;\n         }\n     };\n-    let blocklike = match done.kind() {\n-        IF_EXPR | WHILE_EXPR | FOR_EXPR | LOOP_EXPR | MATCH_EXPR | BLOCK_EXPR => BlockLike::Block,\n-        _ => BlockLike::NotBlock,\n-    };\n+    let blocklike =\n+        if BlockLike::is_blocklike(done.kind()) { BlockLike::Block } else { BlockLike::NotBlock };\n     Some((done, blocklike))\n }\n "}]}