{"sha": "2337bbb8a4131645e4a98ad81524703d76196f82", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzMzdiYmI4YTQxMzE2NDVlNGE5OGFkODE1MjQ3MDNkNzYxOTZmODI=", "commit": {"author": {"name": "Kevyn Grasso", "email": "kevgrasso@gmail.com", "date": "2019-10-21T01:30:43Z"}, "committer": {"name": "Kevyn Grasso", "email": "kevgrasso@gmail.com", "date": "2019-10-25T14:20:09Z"}, "message": "only relevant parts of type paths highlighted in E0308 type mismatch error message", "tree": {"sha": "37d75e1588c1c5e4cbd768638892d209278fa05d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37d75e1588c1c5e4cbd768638892d209278fa05d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2337bbb8a4131645e4a98ad81524703d76196f82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2337bbb8a4131645e4a98ad81524703d76196f82", "html_url": "https://github.com/rust-lang/rust/commit/2337bbb8a4131645e4a98ad81524703d76196f82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2337bbb8a4131645e4a98ad81524703d76196f82/comments", "author": {"login": "kevgrasso", "id": 480789, "node_id": "MDQ6VXNlcjQ4MDc4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/480789?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevgrasso", "html_url": "https://github.com/kevgrasso", "followers_url": "https://api.github.com/users/kevgrasso/followers", "following_url": "https://api.github.com/users/kevgrasso/following{/other_user}", "gists_url": "https://api.github.com/users/kevgrasso/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevgrasso/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevgrasso/subscriptions", "organizations_url": "https://api.github.com/users/kevgrasso/orgs", "repos_url": "https://api.github.com/users/kevgrasso/repos", "events_url": "https://api.github.com/users/kevgrasso/events{/privacy}", "received_events_url": "https://api.github.com/users/kevgrasso/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kevgrasso", "id": 480789, "node_id": "MDQ6VXNlcjQ4MDc4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/480789?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevgrasso", "html_url": "https://github.com/kevgrasso", "followers_url": "https://api.github.com/users/kevgrasso/followers", "following_url": "https://api.github.com/users/kevgrasso/following{/other_user}", "gists_url": "https://api.github.com/users/kevgrasso/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevgrasso/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevgrasso/subscriptions", "organizations_url": "https://api.github.com/users/kevgrasso/orgs", "repos_url": "https://api.github.com/users/kevgrasso/repos", "events_url": "https://api.github.com/users/kevgrasso/events{/privacy}", "received_events_url": "https://api.github.com/users/kevgrasso/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fedefeca6d2c521307799da72e567751e92493c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/fedefeca6d2c521307799da72e567751e92493c6", "html_url": "https://github.com/rust-lang/rust/commit/fedefeca6d2c521307799da72e567751e92493c6"}], "stats": {"total": 49, "additions": 42, "deletions": 7}, "files": [{"sha": "01be2e5d6a5810aa0d0ab19e773f575a8da2eb4b", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 42, "deletions": 7, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/2337bbb8a4131645e4a98ad81524703d76196f82/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2337bbb8a4131645e4a98ad81524703d76196f82/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=2337bbb8a4131645e4a98ad81524703d76196f82", "patch": "@@ -867,7 +867,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// Compares two given types, eliding parts that are the same between them and highlighting\n     /// relevant differences, and return two representation of those types for highlighted printing.\n     fn cmp(&self, t1: Ty<'tcx>, t2: Ty<'tcx>) -> (DiagnosticStyledString, DiagnosticStyledString) {\n-        debug!(\"cmp(t1={}, t2={})\", t1, t2);\n+        debug!(\"cmp(t1={}, t1.kind={:?}, t2={}, t2.kind={:?})\", t1, t1.kind, t2, t2.kind);\n \n         // helper functions\n         fn equals<'tcx>(a: Ty<'tcx>, b: Ty<'tcx>) -> bool {\n@@ -1056,12 +1056,47 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         return values;\n                     }\n \n-                    // We couldn't find anything in common, highlight everything.\n-                    //     let x: Bar<Qux> = y::<Foo<Zar>>();\n-                    (\n-                        DiagnosticStyledString::highlighted(t1.to_string()),\n-                        DiagnosticStyledString::highlighted(t2.to_string()),\n-                    )\n+                    // We can't find anything in common, highlight relevant part of type path.\n+                    //     let x: foo::bar::Baz<Qux> = y:<foo::bar::Bar<Zar>>();\n+                    //     foo::bar::Baz<Qux>\n+                    //     foo::bar::Bar<Zar>\n+                    //               -------- this part of the path is different\n+\n+                    let t1_str = t1.to_string();\n+                    let t2_str = t2.to_string();\n+                    let min_len = t1_str.len().min(t2_str.len());\n+\n+                    const SEPARATOR: &str = \"::\";\n+                    let separator_len = SEPARATOR.len();\n+                    let split_idx: usize =\n+                        t1_str.split(SEPARATOR)\n+                            .zip(t2_str.split(SEPARATOR))\n+                            .take_while(|(mod1_str, mod2_str)| mod1_str == mod2_str)\n+                            .map(|(mod_str, _)| mod_str.len() + separator_len)\n+                            .sum();\n+\n+                    debug!(\"cmp: separator_len={}, split_idx={}, min_len={}\",\n+                        separator_len, split_idx, min_len\n+                    );\n+\n+                    if split_idx >= min_len {\n+                        // paths are identical, highlight everything\n+                        (\n+                            DiagnosticStyledString::highlighted(t1_str),\n+                            DiagnosticStyledString::highlighted(t2_str)\n+                        )\n+                    } else {\n+                        let (common, uniq1) = t1_str.split_at(split_idx);\n+                        let (_, uniq2) = t2_str.split_at(split_idx);\n+                        debug!(\"cmp: common={}, uniq1={}, uniq2={}\", common, uniq1, uniq2);\n+\n+                        values.0.push_normal(common);\n+                        values.0.push_highlighted(uniq1);\n+                        values.1.push_normal(common);\n+                        values.1.push_highlighted(uniq2);\n+\n+                        values\n+                    }\n                 }\n             }\n "}]}