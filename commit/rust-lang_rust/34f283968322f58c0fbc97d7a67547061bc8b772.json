{"sha": "34f283968322f58c0fbc97d7a67547061bc8b772", "node_id": "C_kwDOAAsO6NoAKDM0ZjI4Mzk2ODMyMmY1OGMwZmJjOTdkN2E2NzU0NzA2MWJjOGI3NzI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-07T05:04:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-07T05:04:14Z"}, "message": "Auto merge of #95565 - jackh726:remove-borrowck-mode, r=nikomatsakis\n\nRemove migrate borrowck mode\n\nCloses #58781\nCloses #43234\n\n# Stabilization proposal\n\nThis PR proposes the stabilization of `#![feature(nll)]` and the removal of `-Z borrowck`. Current borrow checking behavior of item bodies is currently done by first infering regions *lexically* and reporting any errors during HIR type checking. If there *are* any errors, then MIR borrowck (NLL) never occurs. If there *aren't* any errors, then MIR borrowck happens and any errors there would be reported. This PR removes the lexical region check of item bodies entirely and only uses MIR borrowck. Because MIR borrowck could never *not* be run for a compiled program, this should not break any programs. It does, however, change diagnostics significantly and allows a slightly larger set of programs to compile.\n\nTracking issue: #43234\nRFC: https://github.com/rust-lang/rfcs/blob/master/text/2094-nll.md\nVersion: 1.63 (2022-06-30 => beta, 2022-08-11 => stable).\n\n## Motivation\n\nOver time, the Rust borrow checker has become \"smarter\" and thus allowed more programs to compile. There have been three different implementations: AST borrowck, MIR borrowck, and polonius (well, in progress). Additionally, there is the \"lexical region resolver\", which (roughly) solves the constraints generated through HIR typeck. It is not a full borrow checker, but does emit some errors.\n\nThe AST borrowck was the original implementation of the borrow checker and was part of the initially stabilized Rust 1.0. In mid 2017, work began to implement the current MIR borrow checker and that effort ompleted by the end of 2017, for the most part. During 2018, efforts were made to migrate away from the AST borrow checker to the MIR borrow checker - eventually culminating into \"migrate\" mode - where HIR typeck with lexical region resolving following by MIR borrow checking - being active by default in the 2018 edition.\n\nIn early 2019, migrate mode was turned on by default in the 2015 edition as well, but with MIR borrowck errors emitted as warnings. By late 2019, these warnings were upgraded to full errors. This was followed by the complete removal of the AST borrow checker.\n\nIn the period since, various errors emitted by the MIR borrow checker have been improved to the point that they are mostly the same or better than those emitted by the lexical region resolver.\n\nWhile there do remain some degradations in errors (tracked under the [NLL-diagnostics tag](https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3ANLL-diagnostics), those are sufficiently small and rare enough that increased flexibility of MIR borrow check-only is now a worthwhile tradeoff.\n\n## What is stabilized\n\nAs said previously, this does not fundamentally change the landscape of accepted programs. However, there are a [few](https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3ANLL-fixed-by-NLL) cases where programs can compile under `feature(nll)`, but not otherwise.\n\nThere are two notable patterns that are \"fixed\" by this stabilization. First, the `scoped_threads` feature, which is a continutation of a pre-1.0 API, can sometimes emit a [weird lifetime error](https://github.com/rust-lang/rust/issues/95527) without NLL. Second, actually seen in the standard library. In the `Extend` impl for `HashMap`, there is an implied bound of `K: 'a` that is available with NLL on but not without - this is utilized in the impl.\n\nAs mentioned before, there are a large number of diagnostic differences. Most of them are better, but some are worse. None are serious or happen often enough to need to block this PR. The biggest change is the loss of error code for a number of lifetime errors in favor of more general \"lifetime may not live long enough\" error. While this may *seem* bad, the former error codes were just attempts to somewhat-arbitrarily bin together lifetime errors of the same type; however, on paper, they end up being roughly the same with roughly the same kinds of solutions.\n\n## What isn't stabilized\n\nThis PR does not completely remove the lexical region resolver. In the future, it may be possible to remove that (while still keeping HIR typeck) or to remove it together with HIR typeck.\n\n## Tests\n\nMany test outputs get updated by this PR. However, there are number of tests specifically geared towards NLL under `src/test/ui/nll`\n\n## History\n\n* On 2017-07-14, [tracking issue opened](https://github.com/rust-lang/rust/issues/43234)\n* On 2017-07-20, [initial empty MIR pass added](https://github.com/rust-lang/rust/pull/43271)\n* On 2017-08-29, [RFC opened](https://github.com/rust-lang/rfcs/pull/2094)\n* On 2017-11-16, [Integrate MIR type-checker with NLL](https://github.com/rust-lang/rust/pull/45825)\n* On 2017-12-20, [NLL feature complete](https://github.com/rust-lang/rust/pull/46862)\n* On 2018-07-07, [Don't run AST borrowck on mir mode](https://github.com/rust-lang/rust/pull/52083)\n* On 2018-07-27, [Add migrate mode](https://github.com/rust-lang/rust/pull/52681)\n* On 2019-04-22, [Enable migrate mode on 2015 edition](https://github.com/rust-lang/rust/pull/59114)\n* On 2019-08-26, [Don't downgrade errors on 2015 edition](https://github.com/rust-lang/rust/pull/64221)\n* On 2019-08-27, [Remove AST borrowck](https://github.com/rust-lang/rust/pull/64790)", "tree": {"sha": "2cd6e6d808cfb5d73fdb6dabcc663053d03644a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cd6e6d808cfb5d73fdb6dabcc663053d03644a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34f283968322f58c0fbc97d7a67547061bc8b772", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34f283968322f58c0fbc97d7a67547061bc8b772", "html_url": "https://github.com/rust-lang/rust/commit/34f283968322f58c0fbc97d7a67547061bc8b772", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34f283968322f58c0fbc97d7a67547061bc8b772/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1dcfd175e77e3b906b5330c089be33c5ed15345", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1dcfd175e77e3b906b5330c089be33c5ed15345", "html_url": "https://github.com/rust-lang/rust/commit/c1dcfd175e77e3b906b5330c089be33c5ed15345"}, {"sha": "1fad95309bcac3d28f75afdd45ded51a890c1940", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fad95309bcac3d28f75afdd45ded51a890c1940", "html_url": "https://github.com/rust-lang/rust/commit/1fad95309bcac3d28f75afdd45ded51a890c1940"}], "stats": {"total": 22, "additions": 9, "deletions": 13}, "files": [{"sha": "9cfcccf1e3cd9ebd95814779f73d20367192d575", "filename": "tests/ui/crashes/ice-6256.stderr", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/34f283968322f58c0fbc97d7a67547061bc8b772/tests%2Fui%2Fcrashes%2Fice-6256.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f283968322f58c0fbc97d7a67547061bc8b772/tests%2Fui%2Fcrashes%2Fice-6256.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6256.stderr?ref=34f283968322f58c0fbc97d7a67547061bc8b772", "patch": "@@ -1,18 +1,14 @@\n-error[E0308]: mismatched types\n-  --> $DIR/ice-6256.rs:13:28\n+error[E0521]: borrowed data escapes outside of closure\n+  --> $DIR/ice-6256.rs:13:26\n    |\n LL |     let f = |x: &dyn TT| x.func(); //[default]~ ERROR: mismatched types\n-   |                            ^^^^ lifetime mismatch\n-   |\n-   = note: expected reference `&(dyn TT + 'static)`\n-              found reference `&dyn TT`\n-note: the anonymous lifetime #1 defined here...\n-  --> $DIR/ice-6256.rs:13:13\n-   |\n-LL |     let f = |x: &dyn TT| x.func(); //[default]~ ERROR: mismatched types\n-   |             ^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...does not necessarily outlive the static lifetime\n+   |              -  -        ^^^^^^^^\n+   |              |  |        |\n+   |              |  |        `x` escapes the closure body here\n+   |              |  |        argument requires that `'1` must outlive `'static`\n+   |              |  let's call the lifetime of this reference `'1`\n+   |              `x` is a reference that is only valid in the closure body\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0521`."}]}