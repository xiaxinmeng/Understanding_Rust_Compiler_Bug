{"sha": "459b0ec8339da2b7ba2f76c3fd110f5b3e971a73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1OWIwZWM4MzM5ZGEyYjdiYTJmNzZjM2ZkMTEwZjViM2U5NzFhNzM=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-04-24T23:40:01Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-05-01T20:57:36Z"}, "message": "Implement simple module export", "tree": {"sha": "e9e7365d9eb768d7ec236d3ca47af0158831b1bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9e7365d9eb768d7ec236d3ca47af0158831b1bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/459b0ec8339da2b7ba2f76c3fd110f5b3e971a73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/459b0ec8339da2b7ba2f76c3fd110f5b3e971a73", "html_url": "https://github.com/rust-lang/rust/commit/459b0ec8339da2b7ba2f76c3fd110f5b3e971a73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/459b0ec8339da2b7ba2f76c3fd110f5b3e971a73/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40624e35d74e5d200ae689c02753f0d60924e668", "url": "https://api.github.com/repos/rust-lang/rust/commits/40624e35d74e5d200ae689c02753f0d60924e668", "html_url": "https://github.com/rust-lang/rust/commit/40624e35d74e5d200ae689c02753f0d60924e668"}], "stats": {"total": 157, "additions": 143, "deletions": 14}, "files": [{"sha": "829751128164691c7bc6923d24de9c2d073cbb33", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 60, "deletions": 12, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/459b0ec8339da2b7ba2f76c3fd110f5b3e971a73/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459b0ec8339da2b7ba2f76c3fd110f5b3e971a73/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=459b0ec8339da2b7ba2f76c3fd110f5b3e971a73", "patch": "@@ -27,8 +27,17 @@ tag scope {\n     scope_arm(ast.arm);\n }\n \n+// This indicates whether we're searching up the scope chain\n+// or whether we've found a path component and started following\n+// it back down, which has an effect on export visibility\n+tag search_direction {\n+    up;\n+    down;\n+}\n+\n type env = rec(list[scope] scopes,\n-               session.session sess);\n+               session.session sess,\n+               search_direction direction);\n \n tag namespace {\n     ns_value;\n@@ -148,7 +157,8 @@ fn find_final_def(&env e, import_map index,\n             auto len = _vec.len[ident](idents);\n             auto rest_idents = _vec.slice[ident](idents, 1u, len);\n             auto empty_e = rec(scopes = nil[scope],\n-                               sess = e.sess);\n+                               sess = e.sess,\n+                               direction = down);\n             auto tmp_e = update_env_for_item(empty_e, i);\n             auto next_i = rest_idents.(0);\n             auto next_ = lookup_name_wrapped(tmp_e, next_i, ns);\n@@ -172,7 +182,9 @@ fn find_final_def(&env e, import_map index,\n                 -> def_wrap {\n             auto len = _vec.len[ident](idents);\n             auto rest_idents = _vec.slice[ident](idents, 1u, len);\n-            auto empty_e = rec(scopes = nil[scope], sess = e.sess);\n+            auto empty_e = rec(scopes = nil[scope],\n+                               sess = e.sess,\n+                               direction = down);\n             auto tmp_e = update_env_for_external_mod(empty_e, mod_id, idents);\n             auto next_i = rest_idents.(0);\n             auto next_ = lookup_name_wrapped(tmp_e, next_i, ns);\n@@ -347,16 +359,50 @@ fn lookup_name_wrapped(&env e, ast.ident i, namespace ns)\n         fail;\n     }\n \n-    fn check_mod(ast.ident i, ast._mod m, namespace ns)\n+    fn check_mod(&env e, ast.ident i, ast._mod m, namespace ns)\n             -> option.t[def_wrap] {\n+\n+        fn visible(&env e, ast.ident i, ast._mod m) -> bool {\n+\n+            alt (e.direction) {\n+                case (up) {\n+                    ret true;\n+                }\n+                case (down) {\n+                    // fall through\n+                }\n+            }\n+\n+            auto count = 0;\n+            for (@ast.view_item vi in m.view_items) {\n+                alt (vi.node) {\n+                    case (ast.view_item_export(?id)) {\n+                        if (_str.eq(i, id)) {\n+                            ret true;\n+                        }\n+                        count += 1;\n+                    }\n+                    case (_) { /* fall through */ }\n+                }\n+            }\n+            // If there are no declared exports then everything is exported\n+            if (count == 0) {\n+                ret true;\n+            } else {\n+                ret false;\n+            }\n+        }\n+\n         alt (m.index.find(i)) {\n             case (some[ast.mod_index_entry](?ent)) {\n                 alt (ent) {\n                     case (ast.mie_view_item(?view_item)) {\n                         ret some(found_def_view(view_item));\n                     }\n                     case (ast.mie_item(?item)) {\n-                        ret some(found_def_item(item, ns));\n+                        if (visible(e, i, m)) {\n+                            ret some(found_def_item(item, ns));\n+                        }\n                     }\n                     case (ast.mie_tag_variant(?item, ?variant_idx)) {\n                         alt (item.node) {\n@@ -453,12 +499,12 @@ fn lookup_name_wrapped(&env e, ast.ident i, namespace ns)\n         }\n     }\n \n-    fn in_scope(&session.session sess, ast.ident identifier, &scope s,\n+    fn in_scope(&env e, ast.ident identifier, &scope s,\n             namespace ns) -> option.t[def_wrap] {\n         alt (s) {\n \n             case (scope_crate(?c)) {\n-                ret check_mod(identifier, c.node.module, ns);\n+                ret check_mod(e, identifier, c.node.module, ns);\n             }\n \n             case (scope_item(?it)) {\n@@ -494,7 +540,7 @@ fn lookup_name_wrapped(&env e, ast.ident i, namespace ns)\n                         }\n                     }\n                     case (ast.item_mod(_, ?m, _)) {\n-                        ret check_mod(identifier, m, ns);\n+                        ret check_mod(e, identifier, m, ns);\n                     }\n                     case (ast.item_native_mod(_, ?m, _)) {\n                         ret check_native_mod(identifier, m);\n@@ -522,7 +568,7 @@ fn lookup_name_wrapped(&env e, ast.ident i, namespace ns)\n             }\n \n             case (scope_external_mod(?mod_id, ?path)) {\n-                ret lookup_external_def(sess, mod_id._0, path);\n+                ret lookup_external_def(e.sess, mod_id._0, path);\n             }\n \n             case (scope_loop(?d)) {\n@@ -558,7 +604,7 @@ fn lookup_name_wrapped(&env e, ast.ident i, namespace ns)\n             ret none[tup(@env, def_wrap)];\n         }\n         case (cons[scope](?hd, ?tl)) {\n-            auto x = in_scope(e.sess, i, hd, ns);\n+            auto x = in_scope(e, i, hd, ns);\n             alt (x) {\n                 case (some[def_wrap](?x)) {\n                     ret some(tup(@e, x));\n@@ -737,7 +783,8 @@ fn resolve_imports(session.session sess, @ast.crate crate) -> @ast.crate {\n                 with *fld );\n \n     auto e = rec(scopes = nil[scope],\n-                 sess = sess);\n+                 sess = sess,\n+                 direction = up);\n \n     ret fold.fold_crate[env](e, fld, crate);\n }\n@@ -761,7 +808,8 @@ fn resolve_crate(session.session sess, @ast.crate crate) -> @ast.crate {\n                 with *fld );\n \n     auto e = rec(scopes = nil[scope],\n-                 sess = sess);\n+                 sess = sess,\n+                 direction = up);\n \n     ret fold.fold_crate[env](e, fld, new_crate);\n }"}, {"sha": "7a9fc776fe982ece770eab762371713f297eb92c", "filename": "src/test/compile-fail/export-boot.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/459b0ec8339da2b7ba2f76c3fd110f5b3e971a73/src%2Ftest%2Fcompile-fail%2Fexport-boot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459b0ec8339da2b7ba2f76c3fd110f5b3e971a73/src%2Ftest%2Fcompile-fail%2Fexport-boot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexport-boot.rs?ref=459b0ec8339da2b7ba2f76c3fd110f5b3e971a73", "patch": "@@ -0,0 +1,19 @@\n+// xfail-stage0\n+// error-pattern: unknown module item\n+\n+// rustboot has a different error message than rustc\n+// this test can die with rustboot, or rustc's error can change\n+\n+mod foo {\n+  export x;\n+  fn x(int y) {\n+    log y;\n+  }\n+  fn z(int y) {\n+    log y;\n+  }\n+}\n+\n+fn main() {\n+  foo.z(10);\n+}"}, {"sha": "d54e515c6a5d2f0f0d3609bbf8e71a34beabf126", "filename": "src/test/compile-fail/export.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/459b0ec8339da2b7ba2f76c3fd110f5b3e971a73/src%2Ftest%2Fcompile-fail%2Fexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459b0ec8339da2b7ba2f76c3fd110f5b3e971a73/src%2Ftest%2Fcompile-fail%2Fexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexport.rs?ref=459b0ec8339da2b7ba2f76c3fd110f5b3e971a73", "patch": "@@ -1,5 +1,5 @@\n-// xfail-stage0\n-// error-pattern: unknown module item\n+// xfail-boot\n+// error-pattern: unresolved name\n mod foo {\n   export x;\n   fn x(int y) {"}, {"sha": "18e84ddc035e8223c6602dfd36cf4741bda16e67", "filename": "src/test/compile-fail/export2.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/459b0ec8339da2b7ba2f76c3fd110f5b3e971a73/src%2Ftest%2Fcompile-fail%2Fexport2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459b0ec8339da2b7ba2f76c3fd110f5b3e971a73/src%2Ftest%2Fcompile-fail%2Fexport2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexport2.rs?ref=459b0ec8339da2b7ba2f76c3fd110f5b3e971a73", "patch": "@@ -0,0 +1,25 @@\n+// xfail-boot\n+// error-pattern: unresolved name\n+\n+mod foo {\n+  export x;\n+\n+  fn x() {\n+    bar.x();\n+  }\n+}\n+\n+mod bar {\n+  export y;\n+\n+  fn x() {\n+    log \"x\";\n+  }\n+\n+  fn y() {\n+  }\n+}\n+\n+fn main() {\n+  foo.x();\n+}"}, {"sha": "e5b324e4aa7468b5b8d1a8fb0b6b70004a368175", "filename": "src/test/run-pass/export-non-interference2.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/459b0ec8339da2b7ba2f76c3fd110f5b3e971a73/src%2Ftest%2Frun-pass%2Fexport-non-interference2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459b0ec8339da2b7ba2f76c3fd110f5b3e971a73/src%2Ftest%2Frun-pass%2Fexport-non-interference2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-non-interference2.rs?ref=459b0ec8339da2b7ba2f76c3fd110f5b3e971a73", "patch": "@@ -0,0 +1,18 @@\n+mod foo {\n+\n+  export bar;\n+\n+  mod bar {\n+    fn y() {\n+      x();\n+    }\n+  }\n+\n+  fn x() {\n+    log \"x\";\n+  }\n+}\n+\n+fn main() {\n+  foo.bar.y();\n+}"}, {"sha": "c52b13f7ec7ae63e315a9ea8da17d0d8f2e5e438", "filename": "src/test/run-pass/export-non-interference3.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/459b0ec8339da2b7ba2f76c3fd110f5b3e971a73/src%2Ftest%2Frun-pass%2Fexport-non-interference3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459b0ec8339da2b7ba2f76c3fd110f5b3e971a73/src%2Ftest%2Frun-pass%2Fexport-non-interference3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-non-interference3.rs?ref=459b0ec8339da2b7ba2f76c3fd110f5b3e971a73", "patch": "@@ -0,0 +1,19 @@\n+mod foo {\n+  export x;\n+\n+  fn x() {\n+    bar.x();\n+  }\n+}\n+\n+mod bar {\n+  export x;\n+\n+  fn x() {\n+    log \"x\";\n+  }\n+}\n+\n+fn main() {\n+  foo.x();\n+}"}]}