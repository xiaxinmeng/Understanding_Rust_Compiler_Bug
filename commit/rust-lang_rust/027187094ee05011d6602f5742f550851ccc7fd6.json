{"sha": "027187094ee05011d6602f5742f550851ccc7fd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyNzE4NzA5NGVlMDUwMTFkNjYwMmY1NzQyZjU1MDg1MWNjYzdmZDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-22T18:41:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-22T18:41:27Z"}, "message": "Auto merge of #86212 - pnkfelix:mainline-targetted-revert-81473-warn-write-only-fields, r=simulacrum\n\nRevert PR 81473 to resolve (on mainline) issues 81626 and 81658.\n\nThis is a nightly-targetted variant of PR #83171\n\nThe intent is to just address issue #81658 on all release channels, rather that keep repeatedly reverting PR #83171 on beta.\n\nHowever, our intent is *also* to reland PR #83171 after we have addressed issue #81658 , most likely by coupling the re-landing of PR #83171 with an enhancement like PR #83004", "tree": {"sha": "a20cfb3ccd190058614782e470581383ccc68f13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a20cfb3ccd190058614782e470581383ccc68f13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/027187094ee05011d6602f5742f550851ccc7fd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/027187094ee05011d6602f5742f550851ccc7fd6", "html_url": "https://github.com/rust-lang/rust/commit/027187094ee05011d6602f5742f550851ccc7fd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/027187094ee05011d6602f5742f550851ccc7fd6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e742158ef5483b9cd756b193402329af3d4ba177", "url": "https://api.github.com/repos/rust-lang/rust/commits/e742158ef5483b9cd756b193402329af3d4ba177", "html_url": "https://github.com/rust-lang/rust/commit/e742158ef5483b9cd756b193402329af3d4ba177"}, {"sha": "ee2bb1f33868414f7cca441c6be3aec8d6a1d81a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee2bb1f33868414f7cca441c6be3aec8d6a1d81a", "html_url": "https://github.com/rust-lang/rust/commit/ee2bb1f33868414f7cca441c6be3aec8d6a1d81a"}], "stats": {"total": 124, "additions": 4, "deletions": 120}, "files": [{"sha": "b71ec700f81c80b77c38f38e7b9037d3838e8a6b", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/027187094ee05011d6602f5742f550851ccc7fd6/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/027187094ee05011d6602f5742f550851ccc7fd6/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=027187094ee05011d6602f5742f550851ccc7fd6", "patch": "@@ -134,6 +134,7 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n         }\n     }\n \n+    #[allow(dead_code)] // FIXME(81658): should be used + lint reinstated after #83171 relands.\n     fn handle_assign(&mut self, expr: &'tcx hir::Expr<'tcx>) {\n         if self\n             .typeck_results()\n@@ -150,6 +151,7 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n         }\n     }\n \n+    #[allow(dead_code)] // FIXME(81658): should be used + lint reinstated after #83171 relands.\n     fn check_for_self_assign(&mut self, assign: &'tcx hir::Expr<'tcx>) {\n         fn check_for_self_assign_helper(\n             tcx: TyCtxt<'tcx>,\n@@ -338,12 +340,6 @@ impl<'tcx> Visitor<'tcx> for MarkSymbolVisitor<'tcx> {\n             hir::ExprKind::MethodCall(..) => {\n                 self.lookup_and_handle_method(expr.hir_id);\n             }\n-            hir::ExprKind::Assign(ref left, ref right, ..) => {\n-                self.handle_assign(left);\n-                self.check_for_self_assign(expr);\n-                self.visit_expr(right);\n-                return;\n-            }\n             hir::ExprKind::Field(ref lhs, ..) => {\n                 self.handle_field_access(&lhs, expr.hir_id);\n             }"}, {"sha": "050d702b625ab4f4a49121ec609251f563d300cd", "filename": "src/test/ui/borrowck/borrowck-assign-to-subfield.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/027187094ee05011d6602f5742f550851ccc7fd6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-subfield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/027187094ee05011d6602f5742f550851ccc7fd6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-subfield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-subfield.rs?ref=027187094ee05011d6602f5742f550851ccc7fd6", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n // pretty-expanded FIXME #23616\n-#![allow(dead_code)]\n \n pub fn main() {\n     struct A {"}, {"sha": "ea7ce98d88413da8fccb5138ef622713c9b3f244", "filename": "src/test/ui/lint/dead-code/self-assign.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/027187094ee05011d6602f5742f550851ccc7fd6/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fself-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/027187094ee05011d6602f5742f550851ccc7fd6/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fself-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fself-assign.rs?ref=027187094ee05011d6602f5742f550851ccc7fd6", "patch": "@@ -1,6 +1,8 @@\n // Test that dead code warnings are issued for superfluous assignments of\n // fields or variables to themselves (issue #75356).\n \n+// ignore-test FIXME(81658, 83171)\n+\n // check-pass\n #![allow(unused_assignments)]\n #![warn(dead_code)]"}, {"sha": "7b3f1e9f5b6cb89e4f88042e1c43df9a48a3a7b9", "filename": "src/test/ui/lint/dead-code/write-only-field.rs", "status": "removed", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/e742158ef5483b9cd756b193402329af3d4ba177/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fwrite-only-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e742158ef5483b9cd756b193402329af3d4ba177/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fwrite-only-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fwrite-only-field.rs?ref=e742158ef5483b9cd756b193402329af3d4ba177", "patch": "@@ -1,69 +0,0 @@\n-#![deny(dead_code)]\n-\n-struct S {\n-    f: i32, //~ ERROR: field is never read\n-    sub: Sub, //~ ERROR: field is never read\n-}\n-\n-struct Sub {\n-    f: i32, //~ ERROR: field is never read\n-}\n-\n-fn field_write(s: &mut S) {\n-    s.f = 1;\n-    s.sub.f = 2;\n-}\n-\n-fn main() {\n-    let mut s = S { f: 0, sub: Sub { f: 0 } };\n-    field_write(&mut s);\n-\n-    auto_deref();\n-    nested_boxes();\n-}\n-\n-fn auto_deref() {\n-    struct E {\n-        x: bool,\n-        y: bool, //~ ERROR: field is never read\n-    }\n-\n-    struct P<'a> {\n-        e: &'a mut E\n-    }\n-\n-    impl P<'_> {\n-        fn f(&mut self) {\n-            self.e.x = true;\n-            self.e.y = true;\n-        }\n-    }\n-\n-    let mut e = E { x: false, y: false };\n-    let mut p = P { e: &mut e };\n-    p.f();\n-    assert!(e.x);\n-}\n-\n-fn nested_boxes() {\n-    struct A {\n-        b: Box<B>,\n-    }\n-\n-    struct B {\n-        c: Box<C>,\n-    }\n-\n-    struct C {\n-        u: u32, //~ ERROR: field is never read\n-        v: u32, //~ ERROR: field is never read\n-    }\n-\n-    let mut a = A {\n-        b: Box::new(B {\n-            c: Box::new(C { u: 0, v: 0 }),\n-        }),\n-    };\n-    a.b.c.v = 10;\n-    a.b.c = Box::new(C { u: 1, v: 2 });\n-}"}, {"sha": "a191d22c8b94cfe317507529ccb818d0080a0b9a", "filename": "src/test/ui/lint/dead-code/write-only-field.stderr", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e742158ef5483b9cd756b193402329af3d4ba177/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fwrite-only-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e742158ef5483b9cd756b193402329af3d4ba177/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fwrite-only-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fwrite-only-field.stderr?ref=e742158ef5483b9cd756b193402329af3d4ba177", "patch": "@@ -1,44 +0,0 @@\n-error: field is never read: `f`\n-  --> $DIR/write-only-field.rs:4:5\n-   |\n-LL |     f: i32,\n-   |     ^^^^^^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/write-only-field.rs:1:9\n-   |\n-LL | #![deny(dead_code)]\n-   |         ^^^^^^^^^\n-\n-error: field is never read: `sub`\n-  --> $DIR/write-only-field.rs:5:5\n-   |\n-LL |     sub: Sub,\n-   |     ^^^^^^^^\n-\n-error: field is never read: `f`\n-  --> $DIR/write-only-field.rs:9:5\n-   |\n-LL |     f: i32,\n-   |     ^^^^^^\n-\n-error: field is never read: `y`\n-  --> $DIR/write-only-field.rs:28:9\n-   |\n-LL |         y: bool,\n-   |         ^^^^^^^\n-\n-error: field is never read: `u`\n-  --> $DIR/write-only-field.rs:58:9\n-   |\n-LL |         u: u32,\n-   |         ^^^^^^\n-\n-error: field is never read: `v`\n-  --> $DIR/write-only-field.rs:59:9\n-   |\n-LL |         v: u32,\n-   |         ^^^^^^\n-\n-error: aborting due to 6 previous errors\n-"}]}