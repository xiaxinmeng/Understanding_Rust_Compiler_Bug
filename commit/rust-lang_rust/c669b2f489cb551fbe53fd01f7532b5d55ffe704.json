{"sha": "c669b2f489cb551fbe53fd01f7532b5d55ffe704", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NjliMmY0ODljYjU1MWZiZTUzZmQwMWY3NTMyYjVkNTVmZmU3MDQ=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-02-02T12:27:52Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-02-02T12:27:52Z"}, "message": "Code review fixes", "tree": {"sha": "3fcd9d5dd6cc88ce98162cdea548b3dbd853ead6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fcd9d5dd6cc88ce98162cdea548b3dbd853ead6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c669b2f489cb551fbe53fd01f7532b5d55ffe704", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c669b2f489cb551fbe53fd01f7532b5d55ffe704", "html_url": "https://github.com/rust-lang/rust/commit/c669b2f489cb551fbe53fd01f7532b5d55ffe704", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c669b2f489cb551fbe53fd01f7532b5d55ffe704/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dae5cbb1190cde6a20aa1758c7d87e84933378e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dae5cbb1190cde6a20aa1758c7d87e84933378e", "html_url": "https://github.com/rust-lang/rust/commit/6dae5cbb1190cde6a20aa1758c7d87e84933378e"}], "stats": {"total": 41, "additions": 19, "deletions": 22}, "files": [{"sha": "ea06a4a5862161133db5c830ed37c39b9e0b00bb", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c669b2f489cb551fbe53fd01f7532b5d55ffe704/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c669b2f489cb551fbe53fd01f7532b5d55ffe704/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=c669b2f489cb551fbe53fd01f7532b5d55ffe704", "patch": "@@ -59,7 +59,7 @@ pub use hir_def::{\n     ModuleDefId, // FIXME this is exposed and should be used for implementing the `TestImportsLocator` in `ra_assists` only, should be removed later along with the trait and the implementation.\n };\n pub use hir_expand::{\n-    name::{known, Name},\n+    name::{name, Name},\n     HirFileId, InFile, MacroCallId, MacroCallLoc, MacroDefId, MacroFile, Origin,\n };\n pub use hir_ty::{display::HirDisplay, CallableDef};"}, {"sha": "133805bdbb0cc08fcbd2b5834d308aafe70425c6", "filename": "crates/ra_hir_expand/src/name.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c669b2f489cb551fbe53fd01f7532b5d55ffe704/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c669b2f489cb551fbe53fd01f7532b5d55ffe704/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fname.rs?ref=c669b2f489cb551fbe53fd01f7532b5d55ffe704", "patch": "@@ -143,9 +143,6 @@ pub mod known {\n         std,\n         core,\n         alloc,\n-        hash,\n-        fmt,\n-        io,\n         iter,\n         ops,\n         future,\n@@ -170,9 +167,6 @@ pub mod known {\n         Neg,\n         Not,\n         Index,\n-        Display,\n-        Iterator,\n-        Hasher,\n         // Builtin macros\n         file,\n         column,\n@@ -193,6 +187,13 @@ pub mod known {\n         PartialOrd,\n         Eq,\n         PartialEq,\n+        // FIXME delete those after `ImportResolver` is removed.\n+        hash,\n+        fmt,\n+        io,\n+        Display,\n+        Iterator,\n+        Hasher,\n     );\n \n     // self/Self cannot be used as an identifier"}, {"sha": "64b04ec2b679cba3c487dae76b767c10e0d20eac", "filename": "crates/ra_ide/src/completion/complete_scope.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c669b2f489cb551fbe53fd01f7532b5d55ffe704/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c669b2f489cb551fbe53fd01f7532b5d55ffe704/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=c669b2f489cb551fbe53fd01f7532b5d55ffe704", "patch": "@@ -72,62 +72,58 @@ pub(crate) struct ImportResolver {\n \n impl ImportResolver {\n     pub(crate) fn new() -> Self {\n+        use hir::name;\n+\n         let dummy_names = vec![\n             (\n                 SmolStr::new(\"fmt\"),\n-                ModPath { kind: PathKind::Plain, segments: vec![hir::known::std, hir::known::fmt] },\n+                ModPath { kind: PathKind::Plain, segments: vec![name![std], name![fmt]] },\n             ),\n             (\n                 SmolStr::new(\"io\"),\n-                ModPath { kind: PathKind::Plain, segments: vec![hir::known::std, hir::known::io] },\n+                ModPath { kind: PathKind::Plain, segments: vec![name![std], name![io]] },\n             ),\n             (\n                 SmolStr::new(\"iter\"),\n-                ModPath {\n-                    kind: PathKind::Plain,\n-                    segments: vec![hir::known::std, hir::known::iter],\n-                },\n+                ModPath { kind: PathKind::Plain, segments: vec![name![std], name![iter]] },\n             ),\n             (\n                 SmolStr::new(\"hash\"),\n-                ModPath {\n-                    kind: PathKind::Plain,\n-                    segments: vec![hir::known::std, hir::known::hash],\n-                },\n+                ModPath { kind: PathKind::Plain, segments: vec![name![std], name![hash]] },\n             ),\n             (\n                 SmolStr::new(\"Debug\"),\n                 ModPath {\n                     kind: PathKind::Plain,\n-                    segments: vec![hir::known::std, hir::known::fmt, hir::known::Debug],\n+                    segments: vec![name![std], name![fmt], name![Debug]],\n                 },\n             ),\n             (\n                 SmolStr::new(\"Display\"),\n                 ModPath {\n                     kind: PathKind::Plain,\n-                    segments: vec![hir::known::std, hir::known::fmt, hir::known::Display],\n+                    segments: vec![name![std], name![fmt], name![Display]],\n                 },\n             ),\n             (\n                 SmolStr::new(\"Hash\"),\n                 ModPath {\n                     kind: PathKind::Plain,\n-                    segments: vec![hir::known::std, hir::known::hash, hir::known::Hash],\n+                    segments: vec![name![std], name![hash], name![Hash]],\n                 },\n             ),\n             (\n                 SmolStr::new(\"Hasher\"),\n                 ModPath {\n                     kind: PathKind::Plain,\n-                    segments: vec![hir::known::std, hir::known::hash, hir::known::Hasher],\n+                    segments: vec![name![std], name![hash], name![Hasher]],\n                 },\n             ),\n             (\n                 SmolStr::new(\"Iterator\"),\n                 ModPath {\n                     kind: PathKind::Plain,\n-                    segments: vec![hir::known::std, hir::known::iter, hir::known::Iterator],\n+                    segments: vec![name![std], name![iter], name![Iterator]],\n                 },\n             ),\n         ];"}]}