{"sha": "395183e0b7609dfb0d21f135879dc8f3d8e97e41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5NTE4M2UwYjc2MDlkZmIwZDIxZjEzNTg3OWRjOGYzZDhlOTdlNDE=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-22T16:11:33Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-23T12:03:55Z"}, "message": "Cleanup Definition::search_scope", "tree": {"sha": "41bafbd0806672f10882aa02d4558e44137beea7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41bafbd0806672f10882aa02d4558e44137beea7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/395183e0b7609dfb0d21f135879dc8f3d8e97e41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/395183e0b7609dfb0d21f135879dc8f3d8e97e41", "html_url": "https://github.com/rust-lang/rust/commit/395183e0b7609dfb0d21f135879dc8f3d8e97e41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/395183e0b7609dfb0d21f135879dc8f3d8e97e41/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c4eb66c1acf10216fa866e05d646bdaea229ded", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c4eb66c1acf10216fa866e05d646bdaea229ded", "html_url": "https://github.com/rust-lang/rust/commit/7c4eb66c1acf10216fa866e05d646bdaea229ded"}], "stats": {"total": 177, "additions": 94, "deletions": 83}, "files": [{"sha": "3634b2b2677fa2c6cdc594e3f577c31b4fbc25b3", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 94, "deletions": 83, "changes": 177, "blob_url": "https://github.com/rust-lang/rust/blob/395183e0b7609dfb0d21f135879dc8f3d8e97e41/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395183e0b7609dfb0d21f135879dc8f3d8e97e41/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=395183e0b7609dfb0d21f135879dc8f3d8e97e41", "patch": "@@ -7,7 +7,7 @@\n use std::{convert::TryInto, mem};\n \n use base_db::{FileId, FileRange, SourceDatabase, SourceDatabaseExt};\n-use hir::{DefWithBody, HasAttrs, HasSource, Module, ModuleSource, Semantics, Visibility};\n+use hir::{DefWithBody, HasAttrs, HasSource, InFile, ModuleSource, Semantics, Visibility};\n use once_cell::unsync::Lazy;\n use rustc_hash::FxHashMap;\n use syntax::{ast, match_ast, AstNode, TextRange, TextSize};\n@@ -78,6 +78,76 @@ impl SearchScope {\n         SearchScope { entries }\n     }\n \n+    fn crate_graph(db: &RootDatabase) -> SearchScope {\n+        let mut entries = FxHashMap::default();\n+\n+        let graph = db.crate_graph();\n+        for krate in graph.iter() {\n+            let root_file = graph[krate].root_file_id;\n+            let source_root_id = db.file_source_root(root_file);\n+            let source_root = db.source_root(source_root_id);\n+            entries.extend(source_root.iter().map(|id| (id, None)));\n+        }\n+        SearchScope { entries }\n+    }\n+\n+    fn reverse_dependencies(db: &RootDatabase, of: hir::Crate) -> SearchScope {\n+        let mut entries = FxHashMap::default();\n+        for rev_dep in of.transitive_reverse_dependencies(db) {\n+            let root_file = rev_dep.root_file(db);\n+            let source_root_id = db.file_source_root(root_file);\n+            let source_root = db.source_root(source_root_id);\n+            entries.extend(source_root.iter().map(|id| (id, None)));\n+        }\n+        SearchScope { entries }\n+    }\n+\n+    fn krate(db: &RootDatabase, of: hir::Crate) -> SearchScope {\n+        let root_file = of.root_file(db);\n+        let source_root_id = db.file_source_root(root_file);\n+        let source_root = db.source_root(source_root_id);\n+        SearchScope {\n+            entries: source_root.iter().map(|id| (id, None)).collect::<FxHashMap<_, _>>(),\n+        }\n+    }\n+\n+    fn module(db: &RootDatabase, module: hir::Module) -> SearchScope {\n+        let mut entries = FxHashMap::default();\n+\n+        let mut to_visit = vec![module];\n+        let mut is_first = true;\n+        while let Some(module) = to_visit.pop() {\n+            let src = module.definition_source(db);\n+            let file_id = src.file_id.original_file(db);\n+            match src.value {\n+                ModuleSource::Module(m) => {\n+                    if is_first {\n+                        let range = Some(m.syntax().text_range());\n+                        entries.insert(file_id, range);\n+                    } else {\n+                        // We have already added the enclosing file to the search scope,\n+                        // so do nothing.\n+                    }\n+                }\n+                ModuleSource::BlockExpr(b) => {\n+                    if is_first {\n+                        let range = Some(b.syntax().text_range());\n+                        entries.insert(file_id, range);\n+                    } else {\n+                        // We have already added the enclosing file to the search scope,\n+                        // so do nothing.\n+                    }\n+                }\n+                ModuleSource::SourceFile(_) => {\n+                    entries.insert(file_id, None);\n+                }\n+            };\n+            is_first = false;\n+            to_visit.extend(module.children(db));\n+        }\n+        SearchScope { entries }\n+    }\n+\n     pub fn empty() -> SearchScope {\n         SearchScope::new(FxHashMap::default())\n     }\n@@ -140,34 +210,26 @@ impl Definition {\n         let _p = profile::span(\"search_scope\");\n \n         if let Definition::ModuleDef(hir::ModuleDef::BuiltinType(_)) = self {\n-            let mut res = FxHashMap::default();\n-\n-            let graph = db.crate_graph();\n-            for krate in graph.iter() {\n-                let root_file = graph[krate].root_file_id;\n-                let source_root_id = db.file_source_root(root_file);\n-                let source_root = db.source_root(source_root_id);\n-                res.extend(source_root.iter().map(|id| (id, None)));\n-            }\n-            return SearchScope::new(res);\n+            return SearchScope::crate_graph(db);\n         }\n \n         let module = match self.module(db) {\n             Some(it) => it,\n             None => return SearchScope::empty(),\n         };\n-        let module_src = module.definition_source(db);\n-        let file_id = module_src.file_id.original_file(db);\n+        let InFile { file_id, value: module_source } = module.definition_source(db);\n+        let file_id = file_id.original_file(db);\n \n         if let Definition::Local(var) = self {\n             let range = match var.parent(db) {\n                 DefWithBody::Function(f) => f.source(db).map(|src| src.value.syntax().text_range()),\n                 DefWithBody::Const(c) => c.source(db).map(|src| src.value.syntax().text_range()),\n                 DefWithBody::Static(s) => s.source(db).map(|src| src.value.syntax().text_range()),\n             };\n-            let mut res = FxHashMap::default();\n-            res.insert(file_id, range);\n-            return SearchScope::new(res);\n+            return match range {\n+                Some(range) => SearchScope::file_range(FileRange { file_id, range }),\n+                None => SearchScope::single_file(file_id),\n+            };\n         }\n \n         if let Definition::GenericParam(hir::GenericParam::LifetimeParam(param)) = self {\n@@ -198,90 +260,39 @@ impl Definition {\n                     it.source(db).map(|src| src.value.syntax().text_range())\n                 }\n             };\n-            let mut res = FxHashMap::default();\n-            res.insert(file_id, range);\n-            return SearchScope::new(res);\n-        }\n-\n-        let vis = self.visibility(db);\n-\n-        if let Some(Visibility::Module(module)) = vis.and_then(|it| it.into()) {\n-            let module: Module = module.into();\n-            let mut res = FxHashMap::default();\n-\n-            let mut to_visit = vec![module];\n-            let mut is_first = true;\n-            while let Some(module) = to_visit.pop() {\n-                let src = module.definition_source(db);\n-                let file_id = src.file_id.original_file(db);\n-                match src.value {\n-                    ModuleSource::Module(m) => {\n-                        if is_first {\n-                            let range = Some(m.syntax().text_range());\n-                            res.insert(file_id, range);\n-                        } else {\n-                            // We have already added the enclosing file to the search scope,\n-                            // so do nothing.\n-                        }\n-                    }\n-                    ModuleSource::BlockExpr(b) => {\n-                        if is_first {\n-                            let range = Some(b.syntax().text_range());\n-                            res.insert(file_id, range);\n-                        } else {\n-                            // We have already added the enclosing file to the search scope,\n-                            // so do nothing.\n-                        }\n-                    }\n-                    ModuleSource::SourceFile(_) => {\n-                        res.insert(file_id, None);\n-                    }\n-                };\n-                is_first = false;\n-                to_visit.extend(module.children(db));\n-            }\n-\n-            return SearchScope::new(res);\n+            return match range {\n+                Some(range) => SearchScope::file_range(FileRange { file_id, range }),\n+                None => SearchScope::single_file(file_id),\n+            };\n         }\n \n-        let rev_dep_scope = || {\n-            let mut res = FxHashMap::default();\n-            let krate = module.krate();\n-            for rev_dep in krate.transitive_reverse_dependencies(db) {\n-                let root_file = rev_dep.root_file(db);\n-                let source_root_id = db.file_source_root(root_file);\n-                let source_root = db.source_root(source_root_id);\n-                res.extend(source_root.iter().map(|id| (id, None)));\n-            }\n-            SearchScope::new(res)\n-        };\n-\n         if let Definition::Macro(macro_def) = self {\n             if macro_def.kind() == hir::MacroKind::Declarative {\n                 return if macro_def.attrs(db).by_key(\"macro_export\").exists() {\n-                    rev_dep_scope()\n+                    SearchScope::reverse_dependencies(db, module.krate())\n                 } else {\n-                    let source_root_id = db.file_source_root(file_id);\n-                    let source_root = db.source_root(source_root_id);\n-                    SearchScope::new(\n-                        source_root.iter().map(|id| (id, None)).collect::<FxHashMap<_, _>>(),\n-                    )\n+                    SearchScope::krate(db, module.krate())\n                 };\n             }\n         }\n \n+        let vis = self.visibility(db);\n         if let Some(Visibility::Public) = vis {\n-            return rev_dep_scope();\n+            return SearchScope::reverse_dependencies(db, module.krate());\n+        }\n+        if let Some(Visibility::Module(module)) = vis {\n+            return SearchScope::module(db, module.into());\n         }\n \n-        let mut res = FxHashMap::default();\n-        let range = match module_src.value {\n+        let range = match module_source {\n             ModuleSource::Module(m) => Some(m.syntax().text_range()),\n             ModuleSource::BlockExpr(b) => Some(b.syntax().text_range()),\n             ModuleSource::SourceFile(_) => None,\n         };\n-        res.insert(file_id, range);\n-        SearchScope::new(res)\n+        match range {\n+            Some(range) => SearchScope::file_range(FileRange { file_id, range }),\n+            None => SearchScope::single_file(file_id),\n+        }\n     }\n \n     pub fn usages<'a>(&'a self, sema: &'a Semantics<RootDatabase>) -> FindUsages<'a> {"}]}