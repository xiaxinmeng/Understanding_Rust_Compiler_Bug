{"sha": "aa25f9ebd8ca5cb4751f796b8b9b4d9909d8d340", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhMjVmOWViZDhjYTVjYjQ3NTFmNzk2YjhiOWI0ZDk5MDlkOGQzNDA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-19T09:47:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-19T09:47:34Z"}, "message": "Rollup merge of #75099 - davidtwco:is-zst-abstraction-violation, r=eddyb\n\nlint/ty: move fns to avoid abstraction violation\n\nThis PR moves `transparent_newtype_field` and `is_zst` to `LateContext` where they are used, rather than being on the `VariantDef` and `TyS` types, hopefully addressing @eddyb's concern [from this comment](https://github.com/rust-lang/rust/pull/74340#discussion_r456534910).", "tree": {"sha": "2e55f794b602a6315ba305f90cac7934534bf69c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e55f794b602a6315ba305f90cac7934534bf69c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa25f9ebd8ca5cb4751f796b8b9b4d9909d8d340", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfZdO2CRBK7hj4Ov3rIwAAdHIIAI/BGyfVfPqI8vdGyFcKQfEY\n+SGI/bGkRGhLby/wyxdz6tSy04JC8ELOrn4jWqVSqECQF1yg/inJ81GbAuuWYUHk\nsnmlM8ydSX6gI2IuLDxYK300hbfq6SgQXtizvRYGWTEaHWA7gnsXGyYsY+qtcG1Y\ni1ltTgezdf7ZCUzIPRIdG/uAj5CHWXfp6eHCMpNy+46MB8oPFBzz6GzsWNUWvkne\neOe+ydCp+4c+BNlDnx7n73axn9Qqg7wpuedXmL7zRNYcJrcE3tDvTZ1jFANcXVD7\nfSpUP2bT92vq6Vgxmq80/mEJV0D1VN1jjpb3wyJxQRBzSNIlLYBa8631vD/Ae40=\n=oQrL\n-----END PGP SIGNATURE-----\n", "payload": "tree 2e55f794b602a6315ba305f90cac7934534bf69c\nparent 44be933ff7cd85f5b709d8c63ffef022e8918c8b\nparent 0f2bd56b29857453835e47abbe96a80b175632d1\nauthor Ralf Jung <post@ralfj.de> 1600508854 +0200\ncommitter GitHub <noreply@github.com> 1600508854 +0200\n\nRollup merge of #75099 - davidtwco:is-zst-abstraction-violation, r=eddyb\n\nlint/ty: move fns to avoid abstraction violation\n\nThis PR moves `transparent_newtype_field` and `is_zst` to `LateContext` where they are used, rather than being on the `VariantDef` and `TyS` types, hopefully addressing @eddyb's concern [from this comment](https://github.com/rust-lang/rust/pull/74340#discussion_r456534910).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa25f9ebd8ca5cb4751f796b8b9b4d9909d8d340", "html_url": "https://github.com/rust-lang/rust/commit/aa25f9ebd8ca5cb4751f796b8b9b4d9909d8d340", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa25f9ebd8ca5cb4751f796b8b9b4d9909d8d340/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44be933ff7cd85f5b709d8c63ffef022e8918c8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/44be933ff7cd85f5b709d8c63ffef022e8918c8b", "html_url": "https://github.com/rust-lang/rust/commit/44be933ff7cd85f5b709d8c63ffef022e8918c8b"}, {"sha": "0f2bd56b29857453835e47abbe96a80b175632d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f2bd56b29857453835e47abbe96a80b175632d1", "html_url": "https://github.com/rust-lang/rust/commit/0f2bd56b29857453835e47abbe96a80b175632d1"}], "stats": {"total": 52, "additions": 27, "deletions": 25}, "files": [{"sha": "8c8487dc8a17f327640cd426367017a4e7c9aae0", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aa25f9ebd8ca5cb4751f796b8b9b4d9909d8d340/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa25f9ebd8ca5cb4751f796b8b9b4d9909d8d340/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=aa25f9ebd8ca5cb4751f796b8b9b4d9909d8d340", "patch": "@@ -21,7 +21,8 @@\n //! `late_lint_methods!` invocation in `lib.rs`.\n \n use crate::{\n-    types::CItemKind, EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext,\n+    types::{transparent_newtype_field, CItemKind},\n+    EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext,\n };\n use rustc_ast::attr::{self, HasAttrs};\n use rustc_ast::tokenstream::{TokenStream, TokenTree};\n@@ -2688,8 +2689,7 @@ impl ClashingExternDeclarations {\n                         if is_transparent && !is_non_null {\n                             debug_assert!(def.variants.len() == 1);\n                             let v = &def.variants[VariantIdx::new(0)];\n-                            ty = v\n-                                .transparent_newtype_field(tcx)\n+                            ty = transparent_newtype_field(tcx, v)\n                                 .expect(\n                                     \"single-variant transparent structure with zero-sized field\",\n                                 )"}, {"sha": "ccbe9f80e25b73a3b086644c696727b2d76779b5", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/aa25f9ebd8ca5cb4751f796b8b9b4d9909d8d340/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa25f9ebd8ca5cb4751f796b8b9b4d9909d8d340/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=aa25f9ebd8ca5cb4751f796b8b9b4d9909d8d340", "patch": "@@ -639,6 +639,26 @@ crate fn nonnull_optimization_guaranteed<'tcx>(tcx: TyCtxt<'tcx>, def: &ty::AdtD\n         .any(|a| tcx.sess.check_name(a, sym::rustc_nonnull_optimization_guaranteed))\n }\n \n+/// `repr(transparent)` structs can have a single non-ZST field, this function returns that\n+/// field.\n+pub fn transparent_newtype_field<'a, 'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    variant: &'a ty::VariantDef,\n+) -> Option<&'a ty::FieldDef> {\n+    let param_env = tcx.param_env(variant.def_id);\n+    for field in &variant.fields {\n+        let field_ty = tcx.type_of(field.did);\n+        let is_zst =\n+            tcx.layout_of(param_env.and(field_ty)).map(|layout| layout.is_zst()).unwrap_or(false);\n+\n+        if !is_zst {\n+            return Some(field);\n+        }\n+    }\n+\n+    None\n+}\n+\n /// Is type known to be non-null?\n crate fn ty_is_known_nonnull<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, mode: CItemKind) -> bool {\n     let tcx = cx.tcx;\n@@ -654,7 +674,7 @@ crate fn ty_is_known_nonnull<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, mode: C\n             }\n \n             for variant in &def.variants {\n-                if let Some(field) = variant.transparent_newtype_field(tcx) {\n+                if let Some(field) = transparent_newtype_field(cx.tcx, variant) {\n                     if ty_is_known_nonnull(cx, field.ty(tcx, substs), mode) {\n                         return true;\n                     }\n@@ -675,7 +695,7 @@ fn get_nullable_type<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'t\n         ty::Adt(field_def, field_substs) => {\n             let inner_field_ty = {\n                 let first_non_zst_ty =\n-                    field_def.variants.iter().filter_map(|v| v.transparent_newtype_field(tcx));\n+                    field_def.variants.iter().filter_map(|v| transparent_newtype_field(cx.tcx, v));\n                 debug_assert_eq!(\n                     first_non_zst_ty.clone().count(),\n                     1,\n@@ -816,7 +836,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         if def.repr.transparent() {\n             // Can assume that only one field is not a ZST, so only check\n             // that field's type for FFI-safety.\n-            if let Some(field) = variant.transparent_newtype_field(self.cx.tcx) {\n+            if let Some(field) = transparent_newtype_field(self.cx.tcx, variant) {\n                 self.check_field_type_for_ffi(cache, field, substs)\n             } else {\n                 bug!(\"malformed transparent type\");"}, {"sha": "f23d666cfcfdd4f63c0aa2e138224385499f8639", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/aa25f9ebd8ca5cb4751f796b8b9b4d9909d8d340/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa25f9ebd8ca5cb4751f796b8b9b4d9909d8d340/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=aa25f9ebd8ca5cb4751f796b8b9b4d9909d8d340", "patch": "@@ -1999,7 +1999,7 @@ pub struct VariantDef {\n     flags: VariantFlags,\n }\n \n-impl<'tcx> VariantDef {\n+impl VariantDef {\n     /// Creates a new `VariantDef`.\n     ///\n     /// `variant_did` is the `DefId` that identifies the enum variant (if this `VariantDef`\n@@ -2065,19 +2065,6 @@ impl<'tcx> VariantDef {\n     pub fn is_recovered(&self) -> bool {\n         self.flags.intersects(VariantFlags::IS_RECOVERED)\n     }\n-\n-    /// `repr(transparent)` structs can have a single non-ZST field, this function returns that\n-    /// field.\n-    pub fn transparent_newtype_field(&self, tcx: TyCtxt<'tcx>) -> Option<&FieldDef> {\n-        for field in &self.fields {\n-            let field_ty = field.ty(tcx, InternalSubsts::identity_for_item(tcx, self.def_id));\n-            if !field_ty.is_zst(tcx, self.def_id) {\n-                return Some(field);\n-            }\n-        }\n-\n-        None\n-    }\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, HashStable)]"}, {"sha": "724ec101b23b71a388f914dcdf9f7bdb0da1dd43", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aa25f9ebd8ca5cb4751f796b8b9b4d9909d8d340/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa25f9ebd8ca5cb4751f796b8b9b4d9909d8d340/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=aa25f9ebd8ca5cb4751f796b8b9b4d9909d8d340", "patch": "@@ -2322,9 +2322,4 @@ impl<'tcx> TyS<'tcx> {\n             }\n         }\n     }\n-\n-    /// Is this a zero-sized type?\n-    pub fn is_zst(&'tcx self, tcx: TyCtxt<'tcx>, did: DefId) -> bool {\n-        tcx.layout_of(tcx.param_env(did).and(self)).map(|layout| layout.is_zst()).unwrap_or(false)\n-    }\n }"}]}