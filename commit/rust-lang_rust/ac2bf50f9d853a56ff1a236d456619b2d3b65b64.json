{"sha": "ac2bf50f9d853a56ff1a236d456619b2d3b65b64", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMmJmNTBmOWQ4NTNhNTZmZjFhMjM2ZDQ1NjYxOWIyZDNiNjViNjQ=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2017-01-17T02:45:30Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2017-01-17T02:45:30Z"}, "message": "Use the new field init shorthand.", "tree": {"sha": "5def6692946181a242660e073b9b1b106bf007c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5def6692946181a242660e073b9b1b106bf007c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac2bf50f9d853a56ff1a236d456619b2d3b65b64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac2bf50f9d853a56ff1a236d456619b2d3b65b64", "html_url": "https://github.com/rust-lang/rust/commit/ac2bf50f9d853a56ff1a236d456619b2d3b65b64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac2bf50f9d853a56ff1a236d456619b2d3b65b64/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "267f4a124dfa5f3a0a585590591ec4f3d45cad75", "url": "https://api.github.com/repos/rust-lang/rust/commits/267f4a124dfa5f3a0a585590591ec4f3d45cad75", "html_url": "https://github.com/rust-lang/rust/commit/267f4a124dfa5f3a0a585590591ec4f3d45cad75"}], "stats": {"total": 111, "additions": 35, "deletions": 76}, "files": [{"sha": "d75f3fa7a685126588f979d922d21d235ec26485", "filename": "src/eval_context.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ac2bf50f9d853a56ff1a236d456619b2d3b65b64/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac2bf50f9d853a56ff1a236d456619b2d3b65b64/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=ac2bf50f9d853a56ff1a236d456619b2d3b65b64", "patch": "@@ -129,7 +129,7 @@ impl Default for ResourceLimits {\n impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>, limits: ResourceLimits) -> Self {\n         EvalContext {\n-            tcx: tcx,\n+            tcx,\n             memory: Memory::new(&tcx.data_layout, limits.memory_size),\n             globals: HashMap::new(),\n             stack: Vec::new(),\n@@ -283,15 +283,15 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         let locals = vec![Value::ByVal(PrimVal::Undef); num_locals];\n \n         self.stack.push(Frame {\n-            mir: mir,\n+            mir,\n             block: mir::START_BLOCK,\n-            return_to_block: return_to_block,\n-            return_lvalue: return_lvalue,\n-            locals: locals,\n+            return_to_block,\n+            return_lvalue,\n+            locals,\n             interpreter_temporaries: temporaries,\n-            span: span,\n-            def_id: def_id,\n-            substs: substs,\n+            span,\n+            def_id,\n+            substs,\n             stmt: 0,\n         });\n \n@@ -764,11 +764,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                             // function items are zero sized\n                             Value::ByRef(self.memory.allocate(0, 0)?)\n                         } else {\n-                            let cid = GlobalId {\n-                                def_id: def_id,\n-                                substs: substs,\n-                                promoted: None,\n-                            };\n+                            let cid = GlobalId { def_id, substs, promoted: None };\n                             self.read_lvalue(Lvalue::Global(cid))\n                         }\n                     }"}, {"sha": "32925dffd7408b098750ad36d666b5c7eb893f6f", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ac2bf50f9d853a56ff1a236d456619b2d3b65b64/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac2bf50f9d853a56ff1a236d456619b2d3b65b64/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=ac2bf50f9d853a56ff1a236d456619b2d3b65b64", "patch": "@@ -2,9 +2,10 @@\n     btree_range,\n     collections,\n     collections_bound,\n+    field_init_shorthand,\n+    i128_type,\n     pub_restricted,\n     rustc_private,\n-    i128_type,\n )]\n \n // From rustc."}, {"sha": "7bd6cc3d989e15c966c7f39af7b3c1df27b843bc", "filename": "src/lvalue.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ac2bf50f9d853a56ff1a236d456619b2d3b65b64/src%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac2bf50f9d853a56ff1a236d456619b2d3b65b64/src%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flvalue.rs?ref=ac2bf50f9d853a56ff1a236d456619b2d3b65b64", "patch": "@@ -63,7 +63,7 @@ pub struct Global<'tcx> {\n \n impl<'tcx> Lvalue<'tcx> {\n     pub fn from_ptr(ptr: Pointer) -> Self {\n-        Lvalue::Ptr { ptr: ptr, extra: LvalueExtra::None }\n+        Lvalue::Ptr { ptr, extra: LvalueExtra::None }\n     }\n \n     pub(super) fn to_ptr_and_extra(self) -> (Pointer, LvalueExtra) {\n@@ -101,7 +101,7 @@ impl<'tcx> Global<'tcx> {\n         Global {\n             value: Value::ByVal(PrimVal::Undef),\n             mutable: true,\n-            ty: ty,\n+            ty,\n         }\n     }\n }\n@@ -137,22 +137,11 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         use rustc::mir::Lvalue::*;\n         let lvalue = match *mir_lvalue {\n             Local(mir::RETURN_POINTER) => self.frame().return_lvalue,\n-\n-            Local(local) => {\n-                Lvalue::Local {\n-                    frame: self.stack.len() - 1,\n-                    local: local,\n-                }\n-            }\n+            Local(local) => Lvalue::Local { frame: self.stack.len() - 1, local },\n \n             Static(def_id) => {\n                 let substs = self.tcx.intern_substs(&[]);\n-                let cid = GlobalId {\n-                    def_id: def_id,\n-                    substs: substs,\n-                    promoted: None,\n-                };\n-                Lvalue::Global(cid)\n+                Lvalue::Global(GlobalId { def_id, substs, promoted: None })\n             }\n \n             Projection(ref proj) => return self.eval_lvalue_projection(proj),\n@@ -321,7 +310,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n         };\n \n-        Ok(Lvalue::Ptr { ptr: ptr, extra: extra })\n+        Ok(Lvalue::Ptr { ptr, extra })\n     }\n \n     pub(super) fn lvalue_ty(&self, lvalue: &mir::Lvalue<'tcx>) -> Ty<'tcx> {"}, {"sha": "f3e0703f4c36dde498c6a197a9ddb7bb710ed486", "filename": "src/memory.rs", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ac2bf50f9d853a56ff1a236d456619b2d3b65b64/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac2bf50f9d853a56ff1a236d456619b2d3b65b64/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=ac2bf50f9d853a56ff1a236d456619b2d3b65b64", "patch": "@@ -52,7 +52,7 @@ pub struct Pointer {\n \n impl Pointer {\n     pub fn new(alloc_id: AllocId, offset: u64) -> Self {\n-        Pointer { alloc_id: alloc_id, offset: offset }\n+        Pointer { alloc_id, offset }\n     }\n \n     pub fn signed_offset(self, i: i64) -> Self {\n@@ -133,7 +133,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n             functions: HashMap::new(),\n             function_alloc_cache: HashMap::new(),\n             next_id: AllocId(2),\n-            layout: layout,\n+            layout,\n             memory_size: max_memory,\n             memory_usage: 0,\n         }\n@@ -151,7 +151,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n             sig: fn_ty.sig,\n         });\n         self.create_fn_alloc(FunctionDefinition {\n-            def_id: def_id,\n+            def_id,\n             substs: substs.substs,\n             abi: fn_ty.abi,\n             // FIXME: why doesn't this compile?\n@@ -162,8 +162,8 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n \n     pub fn create_fn_ptr(&mut self, _tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId, substs: &'tcx Substs<'tcx>, fn_ty: &'tcx BareFnTy<'tcx>) -> Pointer {\n         self.create_fn_alloc(FunctionDefinition {\n-            def_id: def_id,\n-            substs: substs,\n+            def_id,\n+            substs,\n             abi: fn_ty.abi,\n             // FIXME: why doesn't this compile?\n             //sig: tcx.erase_late_bound_regions(&fn_ty.sig),\n@@ -202,7 +202,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n             bytes: vec![0; size as usize],\n             relocations: BTreeMap::new(),\n             undef_mask: UndefMask::new(size),\n-            align: align,\n+            align,\n             immutable: false,\n         };\n         let id = self.next_id;\n@@ -423,12 +423,9 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n             return Ok(&[]);\n         }\n         let alloc = self.get(ptr.alloc_id)?;\n-        if ptr.offset + size > alloc.bytes.len() as u64 {\n-            return Err(EvalError::PointerOutOfBounds {\n-                ptr: ptr,\n-                size: size,\n-                allocation_size: alloc.bytes.len() as u64,\n-            });\n+        let allocation_size = alloc.bytes.len() as u64;\n+        if ptr.offset + size > allocation_size {\n+            return Err(EvalError::PointerOutOfBounds { ptr, size, allocation_size });\n         }\n         assert_eq!(ptr.offset as usize as u64, ptr.offset);\n         assert_eq!(size as usize as u64, size);\n@@ -441,12 +438,9 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n             return Ok(&mut []);\n         }\n         let alloc = self.get_mut(ptr.alloc_id)?;\n-        if ptr.offset + size > alloc.bytes.len() as u64 {\n-            return Err(EvalError::PointerOutOfBounds {\n-                ptr: ptr,\n-                size: size,\n-                allocation_size: alloc.bytes.len() as u64,\n-            });\n+        let allocation_size = alloc.bytes.len() as u64;\n+        if ptr.offset + size > allocation_size {\n+            return Err(EvalError::PointerOutOfBounds { ptr, size, allocation_size });\n         }\n         assert_eq!(ptr.offset as usize as u64, ptr.offset);\n         assert_eq!(size as usize as u64, size);"}, {"sha": "9b4914f6831b10a66e78471ea76fc573bf05216a", "filename": "src/step.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ac2bf50f9d853a56ff1a236d456619b2d3b65b64/src%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac2bf50f9d853a56ff1a236d456619b2d3b65b64/src%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstep.rs?ref=ac2bf50f9d853a56ff1a236d456619b2d3b65b64", "patch": "@@ -47,10 +47,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 ecx: self,\n                 mir: Ref::clone(&mir),\n                 new_constants: &mut new,\n-            }.visit_statement(block, stmt, mir::Location {\n-                block: block,\n-                statement_index: stmt_id,\n-            });\n+            }.visit_statement(block, stmt, mir::Location { block, statement_index: stmt_id });\n             if new? == 0 {\n                 self.statement(stmt)?;\n             }\n@@ -68,10 +65,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             ecx: self,\n             mir: Ref::clone(&mir),\n             new_constants: &mut new,\n-        }.visit_terminator(block, terminator, mir::Location {\n-            block: block,\n-            statement_index: stmt_id,\n-        });\n+        }.visit_terminator(block, terminator, mir::Location { block, statement_index: stmt_id });\n         if new? == 0 {\n             self.terminator(terminator)?;\n         }\n@@ -153,11 +147,7 @@ struct ConstantExtractor<'a, 'b: 'a, 'tcx: 'b> {\n \n impl<'a, 'b, 'tcx> ConstantExtractor<'a, 'b, 'tcx> {\n     fn global_item(&mut self, def_id: DefId, substs: &'tcx subst::Substs<'tcx>, span: Span, immutable: bool) {\n-        let cid = GlobalId {\n-            def_id: def_id,\n-            substs: substs,\n-            promoted: None,\n-        };\n+        let cid = GlobalId { def_id, substs, promoted: None };\n         if self.ecx.globals.contains_key(&cid) {\n             return;\n         }"}, {"sha": "d824c16a72f54e360c577afd91941868146f99c7", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ac2bf50f9d853a56ff1a236d456619b2d3b65b64/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac2bf50f9d853a56ff1a236d456619b2d3b65b64/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=ac2bf50f9d853a56ff1a236d456619b2d3b65b64", "patch": "@@ -646,14 +646,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                             ty::TyStr | ty::TySlice(_) => LvalueExtra::Length(extra.to_u64()?),\n                             _ => bug!(\"invalid fat pointer type: {}\", ty),\n                         };\n-                        self.drop(\n-                            Lvalue::Ptr {\n-                                ptr: ptr,\n-                                extra: extra,\n-                            },\n-                            contents_ty,\n-                            drop,\n-                        )?;\n+                        self.drop(Lvalue::Ptr { ptr, extra }, contents_ty, drop)?;\n                     },\n                 }\n                 let box_free_fn = self.tcx.lang_items.box_free_fn().expect(\"no box_free lang item\");\n@@ -771,7 +764,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 // FIXME: this creates a lot of stack frames if the element type has\n                 // a drop impl\n                 for i in 0..(len as u64) {\n-                    self.drop(Lvalue::Ptr { ptr: ptr.offset(i * size), extra: extra }, elem_ty, drop)?;\n+                    self.drop(Lvalue::Ptr { ptr: ptr.offset(i * size), extra }, elem_ty, drop)?;\n                 }\n             },\n             // FIXME: what about TyClosure and TyAnon?\n@@ -798,11 +791,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             if self.type_is_sized(field_ty) {\n                 self.drop(Lvalue::from_ptr(ptr), field_ty, drop)?;\n             } else {\n-                let lvalue = Lvalue::Ptr {\n-                    ptr: ptr,\n-                    extra: extra,\n-                };\n-                self.drop(lvalue, field_ty, drop)?;\n+                self.drop(Lvalue::Ptr { ptr, extra }, field_ty, drop)?;\n                 break; // if it is not sized, then this is the last field anyway\n             }\n         }\n@@ -845,7 +834,7 @@ pub(super) fn get_impl_method<'a, 'tcx>(\n             });\n             ImplMethod {\n                 method: node_item.item,\n-                substs: substs,\n+                substs,\n                 is_provided: node_item.node.is_from_trait(),\n             }\n         }"}]}