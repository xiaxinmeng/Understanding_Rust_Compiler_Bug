{"sha": "be8b32392953c7b5185afab809fa22191d442e10", "node_id": "C_kwDOAAsO6NoAKGJlOGIzMjM5Mjk1M2M3YjUxODVhZmFiODA5ZmEyMjE5MWQ0NDJlMTA", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-18T13:46:17Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-18T13:46:17Z"}, "message": "Ignore `Inlined` spans when computing caller location.", "tree": {"sha": "af94bcdf56b0e6e53505687602fa922a69b512c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af94bcdf56b0e6e53505687602fa922a69b512c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be8b32392953c7b5185afab809fa22191d442e10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be8b32392953c7b5185afab809fa22191d442e10", "html_url": "https://github.com/rust-lang/rust/commit/be8b32392953c7b5185afab809fa22191d442e10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be8b32392953c7b5185afab809fa22191d442e10/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df61fcaec1fdd3b949a7721abfaf37a8ca6e144c", "url": "https://api.github.com/repos/rust-lang/rust/commits/df61fcaec1fdd3b949a7721abfaf37a8ca6e144c", "html_url": "https://github.com/rust-lang/rust/commit/df61fcaec1fdd3b949a7721abfaf37a8ca6e144c"}], "stats": {"total": 42, "additions": 37, "deletions": 5}, "files": [{"sha": "40a06098c5a0c56ce3a308f69c3581c1b24405ce", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be8b32392953c7b5185afab809fa22191d442e10/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be8b32392953c7b5185afab809fa22191d442e10/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=be8b32392953c7b5185afab809fa22191d442e10", "patch": "@@ -1482,7 +1482,11 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     ) -> OperandRef<'tcx, Bx::Value> {\n         let tcx = bx.tcx();\n \n-        let mut span_to_caller_location = |span: Span| {\n+        let mut span_to_caller_location = |mut span: Span| {\n+            // Remove `Inlined` marks as they pollute `expansion_cause`.\n+            while span.is_inlined() {\n+                span.remove_mark();\n+            }\n             let topmost = span.ctxt().outer_expn().expansion_cause().unwrap_or(span);\n             let caller = tcx.sess.source_map().lookup_char_pos(topmost.lo());\n             let const_loc = tcx.const_caller_location(("}, {"sha": "76c8d0a975ac0b882812f5345e2fff60d2ce9ae9", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be8b32392953c7b5185afab809fa22191d442e10/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be8b32392953c7b5185afab809fa22191d442e10/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=be8b32392953c7b5185afab809fa22191d442e10", "patch": "@@ -111,7 +111,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         location\n     }\n \n-    pub(crate) fn location_triple_for_span(&self, span: Span) -> (Symbol, u32, u32) {\n+    pub(crate) fn location_triple_for_span(&self, mut span: Span) -> (Symbol, u32, u32) {\n+        // Remove `Inlined` marks as they pollute `expansion_cause`.\n+        while span.is_inlined() {\n+            span.remove_mark();\n+        }\n         let topmost = span.ctxt().outer_expn().expansion_cause().unwrap_or(span);\n         let caller = self.tcx.sess.source_map().lookup_char_pos(topmost.lo());\n         ("}, {"sha": "d727aba6de5f91fb4cf65a49a54debd006e4f8e7", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be8b32392953c7b5185afab809fa22191d442e10/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be8b32392953c7b5185afab809fa22191d442e10/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=be8b32392953c7b5185afab809fa22191d442e10", "patch": "@@ -880,7 +880,7 @@ impl Span {\n     pub fn fresh_expansion(self, expn_id: LocalExpnId) -> Span {\n         HygieneData::with(|data| {\n             self.with_ctxt(data.apply_mark(\n-                SyntaxContext::root(),\n+                self.ctxt(),\n                 expn_id.to_expn_id(),\n                 Transparency::Transparent,\n             ))"}, {"sha": "23d2a4b0a99c642103b2587668bbad5fca5e858d", "filename": "tests/ui/rfc-2091-track-caller/intrinsic-wrapper.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/be8b32392953c7b5185afab809fa22191d442e10/tests%2Fui%2Frfc-2091-track-caller%2Fintrinsic-wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be8b32392953c7b5185afab809fa22191d442e10/tests%2Fui%2Frfc-2091-track-caller%2Fintrinsic-wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2091-track-caller%2Fintrinsic-wrapper.rs?ref=be8b32392953c7b5185afab809fa22191d442e10", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n // revisions: default mir-opt\n+//[default] compile-flags: -Zinline-mir=no\n //[mir-opt] compile-flags: -Zmir-opt-level=4\n \n macro_rules! caller_location_from_macro {\n@@ -9,13 +10,13 @@ macro_rules! caller_location_from_macro {\n fn main() {\n     let loc = core::panic::Location::caller();\n     assert_eq!(loc.file(), file!());\n-    assert_eq!(loc.line(), 10);\n+    assert_eq!(loc.line(), 11);\n     assert_eq!(loc.column(), 15);\n \n     // `Location::caller()` in a macro should behave similarly to `file!` and `line!`,\n     // i.e. point to where the macro was invoked, instead of the macro itself.\n     let loc2 = caller_location_from_macro!();\n     assert_eq!(loc2.file(), file!());\n-    assert_eq!(loc2.line(), 17);\n+    assert_eq!(loc2.line(), 18);\n     assert_eq!(loc2.column(), 16);\n }"}, {"sha": "a2e8eb27edeacbf58e967b8fc3efa0cd649ffd1b", "filename": "tests/ui/rfc-2091-track-caller/mir-inlined-macro.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/be8b32392953c7b5185afab809fa22191d442e10/tests%2Fui%2Frfc-2091-track-caller%2Fmir-inlined-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be8b32392953c7b5185afab809fa22191d442e10/tests%2Fui%2Frfc-2091-track-caller%2Fmir-inlined-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2091-track-caller%2Fmir-inlined-macro.rs?ref=be8b32392953c7b5185afab809fa22191d442e10", "patch": "@@ -0,0 +1,23 @@\n+// run-pass\n+// revisions: default mir-opt\n+//[default] compile-flags: -Zinline-mir=no\n+//[mir-opt] compile-flags: -Zmir-opt-level=4\n+\n+use std::panic::Location;\n+\n+macro_rules! f {\n+    () => {\n+        Location::caller()\n+    };\n+}\n+\n+#[inline(always)]\n+fn g() -> &'static Location<'static> {\n+    f!()\n+}\n+\n+fn main() {\n+    let loc = g();\n+    assert_eq!(loc.line(), 16);\n+    assert_eq!(loc.column(), 5);\n+}"}]}