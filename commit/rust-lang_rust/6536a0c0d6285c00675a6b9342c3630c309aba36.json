{"sha": "6536a0c0d6285c00675a6b9342c3630c309aba36", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1MzZhMGMwZDYyODVjMDA2NzVhNmI5MzQyYzM2MzBjMzA5YWJhMzY=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-09-14T21:40:45Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-09-18T11:36:36Z"}, "message": "rustc: add a closure depth to DefUpvar.", "tree": {"sha": "38a4f32f63ed7e94a203140592080ffc345b79c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38a4f32f63ed7e94a203140592080ffc345b79c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6536a0c0d6285c00675a6b9342c3630c309aba36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6536a0c0d6285c00675a6b9342c3630c309aba36", "html_url": "https://github.com/rust-lang/rust/commit/6536a0c0d6285c00675a6b9342c3630c309aba36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6536a0c0d6285c00675a6b9342c3630c309aba36/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6543c5b9a42144eb7036dccbef6e447a41f95485", "url": "https://api.github.com/repos/rust-lang/rust/commits/6543c5b9a42144eb7036dccbef6e447a41f95485", "html_url": "https://github.com/rust-lang/rust/commit/6543c5b9a42144eb7036dccbef6e447a41f95485"}], "stats": {"total": 179, "additions": 89, "deletions": 90}, "files": [{"sha": "8960e99023121c8ebc26884350f2d65c65d03596", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6536a0c0d6285c00675a6b9342c3630c309aba36/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6536a0c0d6285c00675a6b9342c3630c309aba36/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=6536a0c0d6285c00675a6b9342c3630c309aba36", "patch": "@@ -472,9 +472,10 @@ impl tr for def::Def {\n           def::DefPrimTy(p) => def::DefPrimTy(p),\n           def::DefTyParam(s, did, v) => def::DefTyParam(s, did.tr(dcx), v),\n           def::DefUse(did) => def::DefUse(did.tr(dcx)),\n-          def::DefUpvar(nid1, def, nid2, nid3) => {\n+          def::DefUpvar(nid1, def, depth, nid2, nid3) => {\n             def::DefUpvar(dcx.tr_id(nid1),\n                            box(GC) (*def).tr(dcx),\n+                           depth,\n                            dcx.tr_id(nid2),\n                            dcx.tr_id(nid3))\n           }"}, {"sha": "a17432d8bfa48f63b83340727c73cc8d4872710d", "filename": "src/librustc/middle/def.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6536a0c0d6285c00675a6b9342c3630c309aba36/src%2Flibrustc%2Fmiddle%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6536a0c0d6285c00675a6b9342c3630c309aba36/src%2Flibrustc%2Fmiddle%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdef.rs?ref=6536a0c0d6285c00675a6b9342c3630c309aba36", "patch": "@@ -30,10 +30,12 @@ pub enum Def {\n     DefPrimTy(ast::PrimTy),\n     DefTyParam(ParamSpace, ast::DefId, uint),\n     DefUse(ast::DefId),\n-    DefUpvar(ast::NodeId,  // id of closed over var\n-             Gc<Def>,     // closed over def\n+    DefUpvar(ast::NodeId,  // id of closed over local\n+             Gc<Def>,      // closed over def\n+             u32,          // number of closures implicitely capturing this local\n              ast::NodeId,  // expr node that creates the closure\n-             ast::NodeId), // id for the block/body of the closure expr\n+             ast::NodeId), // block node for the closest enclosing proc\n+                           // or unboxed closure, DUMMY_NODE_ID otherwise\n \n     /// Note that if it's a tuple struct's definition, the node id of the ast::DefId\n     /// may either refer to the item definition's id or the StructDef.ctor_id.\n@@ -68,7 +70,7 @@ impl Def {\n             }\n             DefLocal(id) |\n             DefSelfTy(id) |\n-            DefUpvar(id, _, _, _) |\n+            DefUpvar(id, _, _, _,  _) |\n             DefRegion(id) |\n             DefTyParamBinder(id) |\n             DefLabel(id) => {"}, {"sha": "c2f7e5e235f56c342f877c7dc8c7d58d769442e0", "filename": "src/librustc/middle/freevars.rs", "status": "modified", "additions": 42, "deletions": 62, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/6536a0c0d6285c00675a6b9342c3630c309aba36/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6536a0c0d6285c00675a6b9342c3630c309aba36/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffreevars.rs?ref=6536a0c0d6285c00675a6b9342c3630c309aba36", "patch": "@@ -26,7 +26,7 @@ use syntax::visit;\n \n #[deriving(Clone, Decodable, Encodable, Show)]\n pub enum CaptureMode {\n-    /// Copy/move the value from this llvm ValueRef into the environment.\n+    /// Copy/move the value into the environment.\n     CaptureByValue,\n \n     /// Access by reference (used for stack closures).\n@@ -45,23 +45,22 @@ pub type freevar_map = NodeMap<Vec<freevar_entry>>;\n \n pub type CaptureModeMap = NodeMap<CaptureMode>;\n \n-struct CollectFreevarsVisitor<'a> {\n+struct CollectFreevarsVisitor<'a, 'b:'a> {\n+    node_id: ast::NodeId,\n     seen: NodeSet,\n-    refs: Vec<freevar_entry>,\n-    def_map: &'a resolve::DefMap,\n-    capture_mode_map: &'a mut CaptureModeMap,\n-    depth: uint\n+    cx: &'a mut AnnotateFreevarsVisitor<'b>,\n+    depth: u32\n }\n \n-impl<'a, 'v> Visitor<'v> for CollectFreevarsVisitor<'a> {\n+impl<'a, 'b, 'v> Visitor<'v> for CollectFreevarsVisitor<'a, 'b> {\n     fn visit_item(&mut self, _: &ast::Item) {\n         // ignore_item\n     }\n \n     fn visit_expr(&mut self, expr: &ast::Expr) {\n         match expr.node {\n             ast::ExprProc(..) => {\n-                self.capture_mode_map.insert(expr.id, CaptureByValue);\n+                self.cx.capture_mode_map.insert(expr.id, CaptureByValue);\n                 self.depth += 1;\n                 visit::walk_expr(self, expr);\n                 self.depth -= 1;\n@@ -74,7 +73,7 @@ impl<'a, 'v> Visitor<'v> for CollectFreevarsVisitor<'a> {\n                 //    ast::CaptureByRef => CaptureByRef,\n                 //};\n                 let capture_mode = CaptureByRef;\n-                self.capture_mode_map.insert(expr.id, capture_mode);\n+                self.cx.capture_mode_map.insert(expr.id, capture_mode);\n                 self.depth += 1;\n                 visit::walk_expr(self, expr);\n                 self.depth -= 1;\n@@ -84,60 +83,45 @@ impl<'a, 'v> Visitor<'v> for CollectFreevarsVisitor<'a> {\n                     ast::CaptureByValue => CaptureByValue,\n                     ast::CaptureByRef => CaptureByRef,\n                 };\n-                self.capture_mode_map.insert(expr.id, capture_mode);\n+                self.cx.capture_mode_map.insert(expr.id, capture_mode);\n                 self.depth += 1;\n                 visit::walk_expr(self, expr);\n                 self.depth -= 1;\n             }\n             ast::ExprPath(..) => {\n-                let mut def = *self.def_map.borrow().find(&expr.id)\n-                                                    .expect(\"path not found\");\n-                let mut i = 0;\n-                while i < self.depth {\n-                    match def {\n-                        def::DefUpvar(_, inner, _, _) => { def = *inner; }\n-                        _ => break\n-                    }\n-                    i += 1;\n-                }\n-                if i == self.depth { // Made it to end of loop\n-                    let dnum = def.def_id().node;\n-                    if !self.seen.contains(&dnum) {\n-                        self.refs.push(freevar_entry {\n-                            def: def,\n-                            span: expr.span,\n-                        });\n-                        self.seen.insert(dnum);\n-                    }\n+                let def = *self.cx.def_map.borrow().find(&expr.id)\n+                                                   .expect(\"path not found\");\n+                let dnum = def.def_id().node;\n+                if self.seen.contains(&dnum) {\n+                    return;\n                 }\n+                let def = match def {\n+                    def::DefUpvar(_, _, depth, _, _) => {\n+                        if depth < self.depth {\n+                            return;\n+                        }\n+                        let mut def = def;\n+                        for _ in range(0, depth - self.depth) {\n+                            match def {\n+                                def::DefUpvar(_, inner, _, _, _) => { def = *inner; }\n+                                _ => unreachable!()\n+                            }\n+                        }\n+                        def\n+                    },\n+                    _ => return\n+                };\n+                self.cx.freevars.find_or_insert(self.node_id, vec![]).push(freevar_entry {\n+                    def: def,\n+                    span: expr.span,\n+                });\n+                self.seen.insert(dnum);\n             }\n             _ => visit::walk_expr(self, expr)\n         }\n     }\n }\n \n-// Searches through part of the AST for all references to locals or\n-// upvars in this frame and returns the list of definition IDs thus found.\n-// Since we want to be able to collect upvars in some arbitrary piece\n-// of the AST, we take a walker function that we invoke with a visitor\n-// in order to start the search.\n-fn collect_freevars(def_map: &resolve::DefMap,\n-                    blk: &ast::Block,\n-                    capture_mode_map: &mut CaptureModeMap)\n-                    -> Vec<freevar_entry> {\n-    let mut v = CollectFreevarsVisitor {\n-        seen: NodeSet::new(),\n-        refs: Vec::new(),\n-        def_map: def_map,\n-        capture_mode_map: &mut *capture_mode_map,\n-        depth: 1\n-    };\n-\n-    v.visit_block(blk);\n-\n-    v.refs\n-}\n-\n struct AnnotateFreevarsVisitor<'a> {\n     def_map: &'a resolve::DefMap,\n     freevars: freevar_map,\n@@ -147,10 +131,12 @@ struct AnnotateFreevarsVisitor<'a> {\n impl<'a, 'v> Visitor<'v> for AnnotateFreevarsVisitor<'a> {\n     fn visit_fn(&mut self, fk: visit::FnKind<'v>, fd: &'v ast::FnDecl,\n                 blk: &'v ast::Block, s: Span, nid: ast::NodeId) {\n-        let vars = collect_freevars(self.def_map,\n-                                    blk,\n-                                    &mut self.capture_mode_map);\n-        self.freevars.insert(nid, vars);\n+        CollectFreevarsVisitor {\n+            node_id: nid,\n+            seen: NodeSet::new(),\n+            cx: self,\n+            depth: 0\n+        }.visit_block(blk);\n         visit::walk_fn(self, fk, fd, blk, s);\n     }\n }\n@@ -168,13 +154,7 @@ pub fn annotate_freevars(def_map: &resolve::DefMap, krate: &ast::Crate)\n         capture_mode_map: NodeMap::new(),\n     };\n     visit::walk_crate(&mut visitor, krate);\n-\n-    let AnnotateFreevarsVisitor {\n-        freevars,\n-        capture_mode_map,\n-        ..\n-    } = visitor;\n-    (freevars, capture_mode_map)\n+    (visitor.freevars, visitor.capture_mode_map)\n }\n \n pub fn with_freevars<T>(tcx: &ty::ctxt, fid: ast::NodeId, f: |&[freevar_entry]| -> T) -> T {"}, {"sha": "c2abe13c9ae56703e8d9e8dc6d5873659a977a8f", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6536a0c0d6285c00675a6b9342c3630c309aba36/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6536a0c0d6285c00675a6b9342c3630c309aba36/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=6536a0c0d6285c00675a6b9342c3630c309aba36", "patch": "@@ -547,7 +547,7 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n               }))\n           }\n \n-          def::DefUpvar(var_id, _, fn_node_id, _) => {\n+          def::DefUpvar(var_id, _, _, fn_node_id, _) => {\n               let ty = if_ok!(self.node_ty(fn_node_id));\n               match ty::get(ty).sty {\n                   ty::ty_closure(ref closure_ty) => {"}, {"sha": "1f75dc019a0af99be4f4ebe583190b6e7a787202", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6536a0c0d6285c00675a6b9342c3630c309aba36/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6536a0c0d6285c00675a6b9342c3630c309aba36/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=6536a0c0d6285c00675a6b9342c3630c309aba36", "patch": "@@ -277,9 +277,13 @@ enum RibKind {\n     // No translation needs to be applied.\n     NormalRibKind,\n \n-    // We passed through a function scope at the given node ID. Translate\n-    // upvars as appropriate.\n-    FunctionRibKind(NodeId /* func id */, NodeId /* body id */),\n+    // We passed through a closure scope at the given node ID.\n+    // Translate upvars as appropriate.\n+    ClosureRibKind(NodeId /* func id */),\n+\n+    // We passed through a proc or unboxed closure scope at the given node ID.\n+    // Translate upvars as appropriate.\n+    ProcRibKind(NodeId /* func id */, NodeId /* body id */),\n \n     // We passed through an impl or trait and are now in one of its\n     // methods. Allow references to ty params that impl or trait\n@@ -3859,12 +3863,22 @@ impl<'a> Resolver<'a> {\n                 NormalRibKind => {\n                     // Nothing to do. Continue.\n                 }\n-                FunctionRibKind(function_id, body_id) => {\n+                ClosureRibKind(function_id) => {\n                     if !is_ty_param {\n-                        def = DefUpvar(def.def_id().node,\n-                                       box(GC) def,\n-                                       function_id,\n-                                       body_id);\n+                        let (depth, block_id) = match def {\n+                            DefUpvar(_, _, depth, _, block_id) => (depth + 1, block_id),\n+                            _ => (0, ast::DUMMY_NODE_ID)\n+                        };\n+                        def = DefUpvar(def.def_id().node, box(GC) def, depth, function_id, block_id);\n+                    }\n+                }\n+                ProcRibKind(function_id, block_id) => {\n+                    if !is_ty_param {\n+                        let depth = match def {\n+                            DefUpvar(_, _, depth, _, _) => depth + 1,\n+                            _ => 0\n+                        };\n+                        def = DefUpvar(def.def_id().node, box(GC) def, depth, function_id, block_id);\n                     }\n                 }\n                 MethodRibKind(item_id, _) => {\n@@ -5758,10 +5772,14 @@ impl<'a> Resolver<'a> {\n                 visit::walk_expr(self, expr);\n             }\n \n-            ExprFnBlock(_, ref fn_decl, ref block) |\n+            ExprFnBlock(_, ref fn_decl, ref block) => {\n+                self.resolve_function(ClosureRibKind(expr.id),\n+                                      Some(&**fn_decl), NoTypeParameters,\n+                                      &**block);\n+            }\n             ExprProc(ref fn_decl, ref block) |\n             ExprUnboxedFn(_, _, ref fn_decl, ref block) => {\n-                self.resolve_function(FunctionRibKind(expr.id, block.id),\n+                self.resolve_function(ProcRibKind(expr.id, block.id),\n                                       Some(&**fn_decl), NoTypeParameters,\n                                       &**block);\n             }"}, {"sha": "a2debe61e5f60f2240918dbabc229a166ca25d9d", "filename": "src/librustc/middle/save/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6536a0c0d6285c00675a6b9342c3630c309aba36/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6536a0c0d6285c00675a6b9342c3630c309aba36/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs?ref=6536a0c0d6285c00675a6b9342c3630c309aba36", "patch": "@@ -232,7 +232,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n             def::DefStatic(_, _) |\n             def::DefLocal(_) |\n             def::DefVariant(_, _, _) |\n-            def::DefUpvar(_, _, _, _) => Some(recorder::VarRef),\n+            def::DefUpvar(..) => Some(recorder::VarRef),\n \n             def::DefFn(_, _) => Some(recorder::FnRef),\n "}, {"sha": "9406bc185658b8b74d1558f9a2f53526ddf4c3cb", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6536a0c0d6285c00675a6b9342c3630c309aba36/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6536a0c0d6285c00675a6b9342c3630c309aba36/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=6536a0c0d6285c00675a6b9342c3630c309aba36", "patch": "@@ -1226,7 +1226,7 @@ pub fn trans_match<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n fn is_discr_reassigned(bcx: Block, discr: &ast::Expr, body: &ast::Expr) -> bool {\n     match discr.node {\n         ast::ExprPath(..) => match bcx.def(discr.id) {\n-            def::DefLocal(vid) | def::DefUpvar(vid, _, _, _) => {\n+            def::DefLocal(vid) | def::DefUpvar(vid, _, _, _, _) => {\n                 let mut rc = ReassignmentChecker {\n                     node: vid,\n                     reassigned: false"}, {"sha": "54ed187b503ec0eb6f8559579d9440abcd22a661", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6536a0c0d6285c00675a6b9342c3630c309aba36/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6536a0c0d6285c00675a6b9342c3630c309aba36/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=6536a0c0d6285c00675a6b9342c3630c309aba36", "patch": "@@ -1176,7 +1176,7 @@ pub fn trans_local_var<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let _icx = push_ctxt(\"trans_local_var\");\n \n     match def {\n-        def::DefUpvar(nid, _, _, _) => {\n+        def::DefUpvar(nid, _, _, _, _) => {\n             // Can't move upvars, so this is never a ZeroMemLastUse.\n             let local_ty = node_id_type(bcx, nid);\n             match bcx.fcx.llupvars.borrow().find(&nid) {"}, {"sha": "ffbff55eaebb81717e6f2ddf01b22d527d601be1", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6536a0c0d6285c00675a6b9342c3630c309aba36/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6536a0c0d6285c00675a6b9342c3630c309aba36/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=6536a0c0d6285c00675a6b9342c3630c309aba36", "patch": "@@ -5027,7 +5027,7 @@ pub fn polytype_for_def(fcx: &FnCtxt,\n                         defn: def::Def)\n                         -> Polytype {\n     match defn {\n-      def::DefLocal(nid) => {\n+      def::DefLocal(nid) | def::DefUpvar(nid, _, _, _, _) => {\n           let typ = fcx.local_ty(sp, nid);\n           return no_params(typ);\n       }\n@@ -5036,9 +5036,6 @@ pub fn polytype_for_def(fcx: &FnCtxt,\n       def::DefStruct(id) => {\n         return ty::lookup_item_type(fcx.ccx.tcx, id);\n       }\n-      def::DefUpvar(_, inner, _, _) => {\n-        return polytype_for_def(fcx, sp, *inner);\n-      }\n       def::DefTrait(_) |\n       def::DefTy(..) |\n       def::DefAssociatedTy(..) |"}, {"sha": "fc4171cbc2463d18bedc37d8955bf28745121f84", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6536a0c0d6285c00675a6b9342c3630c309aba36/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6536a0c0d6285c00675a6b9342c3630c309aba36/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=6536a0c0d6285c00675a6b9342c3630c309aba36", "patch": "@@ -245,10 +245,11 @@ fn region_of_def(fcx: &FnCtxt, def: def::Def) -> ty::Region {\n         def::DefLocal(node_id) => {\n             tcx.region_maps.var_region(node_id)\n         }\n-        def::DefUpvar(_, subdef, closure_id, body_id) => {\n-            match ty::ty_closure_store(fcx.node_ty(closure_id)) {\n-                ty::RegionTraitStore(..) => region_of_def(fcx, *subdef),\n-                ty::UniqTraitStore => ReScope(body_id)\n+        def::DefUpvar(node_id, _, _, _, body_id) => {\n+            if body_id == ast::DUMMY_NODE_ID {\n+                tcx.region_maps.var_region(node_id)\n+            } else {\n+                ReScope(body_id)\n             }\n         }\n         _ => {\n@@ -1029,7 +1030,7 @@ fn check_expr_fn_block(rcx: &mut Rcx,\n             // determining the final borrow_kind) and propagate that as\n             // a constraint on the outer closure.\n             match freevar.def {\n-                def::DefUpvar(var_id, _, outer_closure_id, _) => {\n+                def::DefUpvar(var_id, _, _, outer_closure_id, _) => {\n                     // thing being captured is itself an upvar:\n                     let outer_upvar_id = ty::UpvarId {\n                         var_id: var_id,"}]}