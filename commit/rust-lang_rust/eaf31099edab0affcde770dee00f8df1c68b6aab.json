{"sha": "eaf31099edab0affcde770dee00f8df1c68b6aab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhZjMxMDk5ZWRhYjBhZmZjZGU3NzBkZWUwMGY4ZGYxYzY4YjZhYWI=", "commit": {"author": {"name": "Will Crichton", "email": "wcrichto@stanford.edu", "date": "2016-07-01T08:54:37Z"}, "committer": {"name": "Will Crichton", "email": "wcrichto@stanford.edu", "date": "2016-07-04T06:47:19Z"}, "message": "Added new compilation phase and test", "tree": {"sha": "2bd5c337ab327a1f65e7965c2d42a815eb7f26fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bd5c337ab327a1f65e7965c2d42a815eb7f26fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eaf31099edab0affcde770dee00f8df1c68b6aab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eaf31099edab0affcde770dee00f8df1c68b6aab", "html_url": "https://github.com/rust-lang/rust/commit/eaf31099edab0affcde770dee00f8df1c68b6aab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eaf31099edab0affcde770dee00f8df1c68b6aab/comments", "author": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce1146ac5f4dee7eee135e2ea2a6d3d317b2d36a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce1146ac5f4dee7eee135e2ea2a6d3d317b2d36a", "html_url": "https://github.com/rust-lang/rust/commit/ce1146ac5f4dee7eee135e2ea2a6d3d317b2d36a"}], "stats": {"total": 105, "additions": 105, "deletions": 0}, "files": [{"sha": "ce34e2556382917759225fda52d744034c8e4276", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eaf31099edab0affcde770dee00f8df1c68b6aab/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf31099edab0affcde770dee00f8df1c68b6aab/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=eaf31099edab0affcde770dee00f8df1c68b6aab", "patch": "@@ -229,6 +229,11 @@ pub fn compile_input(sess: &Session,\n \n     phase_6_link_output(sess, &trans, &outputs);\n \n+    controller_entry_point!(after_compilation_done,\n+                            sess,\n+                            CompileState::state_after_compilation_done(input, sess, outdir, output),\n+                            Ok(()));\n+\n     Ok(())\n }\n \n@@ -276,6 +281,7 @@ pub struct CompileController<'a> {\n     pub after_hir_lowering: PhaseController<'a>,\n     pub after_analysis: PhaseController<'a>,\n     pub after_llvm: PhaseController<'a>,\n+    pub after_compilation_done: PhaseController<'a>,\n \n     pub make_glob_map: MakeGlobMap,\n }\n@@ -288,6 +294,7 @@ impl<'a> CompileController<'a> {\n             after_hir_lowering: PhaseController::basic(),\n             after_analysis: PhaseController::basic(),\n             after_llvm: PhaseController::basic(),\n+            after_compilation_done: PhaseController::basic(),\n             make_glob_map: MakeGlobMap::No,\n         }\n     }\n@@ -455,6 +462,17 @@ impl<'a, 'b, 'ast, 'tcx> CompileState<'a, 'b, 'ast, 'tcx> {\n             ..CompileState::empty(input, session, out_dir)\n         }\n     }\n+\n+    fn state_after_compilation_done(input: &'a Input,\n+                                    session: &'ast Session,\n+                                    out_dir: &'a Option<PathBuf>,\n+                                    out_file: &'a Option<PathBuf>)\n+                                    -> CompileState<'a, 'b, 'ast, 'tcx> {\n+        CompileState {\n+            out_file: out_file.as_ref().map(|s| &**s),\n+            ..CompileState::empty(input, session, out_dir)\n+        }\n+    }\n }\n \n pub fn phase_1_parse_input<'a>(sess: &'a Session,"}, {"sha": "6a8e1728b20a83773edaac0598ce0e119455cdd0", "filename": "src/test/run-make/llvm-phase/Makefile", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eaf31099edab0affcde770dee00f8df1c68b6aab/src%2Ftest%2Frun-make%2Fllvm-phase%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/eaf31099edab0affcde770dee00f8df1c68b6aab/src%2Ftest%2Frun-make%2Fllvm-phase%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fllvm-phase%2FMakefile?ref=eaf31099edab0affcde770dee00f8df1c68b6aab", "patch": "@@ -0,0 +1,5 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) test.rs\n+\t$(call RUN,test $(RUSTC))"}, {"sha": "402b5ed83556cd5f5326168269e67c157c554de5", "filename": "src/test/run-make/llvm-phase/test.rs", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/eaf31099edab0affcde770dee00f8df1c68b6aab/src%2Ftest%2Frun-make%2Fllvm-phase%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf31099edab0affcde770dee00f8df1c68b6aab/src%2Ftest%2Frun-make%2Fllvm-phase%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fllvm-phase%2Ftest.rs?ref=eaf31099edab0affcde770dee00f8df1c68b6aab", "patch": "@@ -0,0 +1,82 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(plugin, rustc_private, box_syntax)]\n+\n+extern crate rustc;\n+extern crate rustc_driver;\n+extern crate rustc_llvm;\n+#[macro_use] extern crate syntax;\n+extern crate getopts;\n+\n+use rustc_driver::{CompilerCalls, Compilation};\n+use rustc_driver::driver::CompileController;\n+use rustc::session::Session;\n+use syntax::codemap::FileLoader;\n+use std::io;\n+use std::path::{PathBuf, Path};\n+\n+struct JitLoader;\n+\n+impl FileLoader for JitLoader {\n+    fn file_exists(&self, _: &Path) -> bool { true }\n+    fn abs_path(&self, _: &Path) -> Option<PathBuf> { None }\n+    fn read_file(&self, _: &Path) -> io::Result<String> {\n+        Ok(r#\"\n+#[no_mangle]\n+pub fn test_add(a: i32, b: i32) -> i32 { a + b }\n+\"#.to_string())\n+    }\n+}\n+\n+#[derive(Copy, Clone)]\n+struct JitCalls;\n+\n+impl<'a> CompilerCalls<'a> for JitCalls {\n+    fn build_controller(&mut self,\n+                        _: &Session,\n+                        _: &getopts::Matches)\n+                        -> CompileController<'a> {\n+        let mut cc = CompileController::basic();\n+        cc.after_llvm.stop = Compilation::Stop;\n+        cc.after_llvm.run_callback_on_error = true;\n+        cc.after_llvm.callback = Box::new(|state| {\n+            state.session.abort_if_errors();\n+            let trans = state.trans.unwrap();\n+            assert_eq!(trans.modules.len(), 1);\n+            let rs_llmod = trans.modules[0].llmod;\n+            unsafe { rustc_llvm::LLVMDumpModule(rs_llmod) };\n+        });\n+        cc\n+    }\n+}\n+\n+fn main() {\n+    use rustc_driver;\n+\n+    let mut path = match std::env::args().nth(2) {\n+        Some(path) => PathBuf::from(&path),\n+        None => panic!(\"missing rustc path\")\n+    };\n+\n+    // Remove two segments from rustc path to get sysroot.\n+    path.pop();\n+    path.pop();\n+\n+    let args: Vec<String> =\n+        format!(\"_ _ --sysroot {} --crate-type dylib\", path.to_str().unwrap())\n+        .split(' ').map(|s| s.to_string()).collect();\n+\n+    let (result, _) = rustc_driver::run_compiler_with_file_loader(\n+        &args, &mut JitCalls, box JitLoader);\n+    if let Err(n) = result {\n+        panic!(\"Error {}\", n);\n+    }\n+}"}]}