{"sha": "4f5fdc581014ecb17a9aa14ada2a2f186c9a46a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNWZkYzU4MTAxNGVjYjE3YTlhYTE0YWRhMmEyZjE4NmM5YTQ2YTg=", "commit": {"author": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2020-03-04T18:24:01Z"}, "committer": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2020-03-06T13:21:52Z"}, "message": "update the environ shim when environment changes", "tree": {"sha": "0c536ec49a98365eb3ae7f790bb6979f2c609540", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c536ec49a98365eb3ae7f790bb6979f2c609540"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f5fdc581014ecb17a9aa14ada2a2f186c9a46a8", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQRsB8A/3NrzTlMMjT0nUl7150IKUAUCXmJOcQAKCRAnUl7150IK\nULjlAQCIaXhRkvZzqJCYSVVUs3JGWLm15Yy7IFraY3JE7poSGQEA2sHMXsFX0R2u\nr4wtd2AciTh17m1qLUmHCu1fVcvQIgM=\n=u//0\n-----END PGP SIGNATURE-----", "payload": "tree 0c536ec49a98365eb3ae7f790bb6979f2c609540\nparent d13fe01f824f9a58f94058948e57f4d8c6365866\nauthor Christian Poveda <git@christianpoveda.xyz> 1583346241 -0500\ncommitter Christian Poveda <git@christianpoveda.xyz> 1583500912 -0500\n\nupdate the environ shim when environment changes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f5fdc581014ecb17a9aa14ada2a2f186c9a46a8", "html_url": "https://github.com/rust-lang/rust/commit/4f5fdc581014ecb17a9aa14ada2a2f186c9a46a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f5fdc581014ecb17a9aa14ada2a2f186c9a46a8/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d13fe01f824f9a58f94058948e57f4d8c6365866", "url": "https://api.github.com/repos/rust-lang/rust/commits/d13fe01f824f9a58f94058948e57f4d8c6365866", "html_url": "https://github.com/rust-lang/rust/commit/d13fe01f824f9a58f94058948e57f4d8c6365866"}], "stats": {"total": 62, "additions": 38, "deletions": 24}, "files": [{"sha": "1981a8d1e03e919f848a005e7b3c7b0428a0900f", "filename": "src/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5fdc581014ecb17a9aa14ada2a2f186c9a46a8/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5fdc581014ecb17a9aa14ada2a2f186c9a46a8/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=4f5fdc581014ecb17a9aa14ada2a2f186c9a46a8", "patch": "@@ -77,8 +77,8 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n         ),\n     );\n     // Complete initialization.\n-    EnvVars::init(&mut ecx, config.excluded_env_vars);\n     MemoryExtra::init_extern_statics(&mut ecx)?;\n+    EnvVars::init(&mut ecx, config.excluded_env_vars);\n \n     // Setup first stack-frame\n     let main_instance = ty::Instance::mono(tcx, main_id);"}, {"sha": "ece4b62d3af185cdcdb4ca7d47d7dd1c590b04df", "filename": "src/machine.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4f5fdc581014ecb17a9aa14ada2a2f186c9a46a8/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5fdc581014ecb17a9aa14ada2a2f186c9a46a8/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=4f5fdc581014ecb17a9aa14ada2a2f186c9a46a8", "patch": "@@ -70,7 +70,7 @@ pub struct AllocExtra {\n \n /// Extra global memory data\n #[derive(Clone, Debug)]\n-pub struct MemoryExtra {\n+pub struct MemoryExtra<'tcx> {\n     pub stacked_borrows: Option<stacked_borrows::MemoryExtra>,\n     pub intptrcast: intptrcast::MemoryExtra,\n \n@@ -85,11 +85,11 @@ pub struct MemoryExtra {\n     /// (helps for debugging memory leaks).\n     tracked_alloc_id: Option<AllocId>,\n \n-    /// The `AllocId` for the `environ` static.\n-    pub(crate) environ: Option<Scalar<Tag>>,\n+    /// Place where the `environ` static is stored.\n+    pub(crate) environ: Option<MPlaceTy<'tcx, Tag>>,\n }\n \n-impl MemoryExtra {\n+impl<'tcx> MemoryExtra<'tcx> {\n     pub fn new(rng: StdRng, stacked_borrows: bool, tracked_pointer_tag: Option<PtrId>, tracked_alloc_id: Option<AllocId>) -> Self {\n         let stacked_borrows = if stacked_borrows {\n             Some(Rc::new(RefCell::new(stacked_borrows::GlobalState::new(tracked_pointer_tag))))\n@@ -107,7 +107,7 @@ impl MemoryExtra {\n     }\n \n     /// Sets up the \"extern statics\" for this machine.\n-    pub fn init_extern_statics<'mir, 'tcx>(\n+    pub fn init_extern_statics<'mir>(\n         this: &mut MiriEvalContext<'mir, 'tcx>,\n     ) -> InterpResult<'tcx> {\n         match this.tcx.sess.target.target.target_os.as_str() {\n@@ -126,12 +126,13 @@ impl MemoryExtra {\n                 // \"environ\"\n                 let layout = this.layout_of(this.tcx.types.usize)?;\n                 let place = this.allocate(layout, MiriMemoryKind::Machine.into());\n-                this.write_scalar(this.memory.extra.environ.unwrap(), place.into())?;\n+                this.write_scalar(Scalar::from_machine_usize(0, &*this.tcx), place.into())?;\n                 this.memory\n                     .extra\n                     .extern_statics\n                     .insert(Symbol::intern(\"environ\"), place.ptr.assert_ptr().alloc_id)\n                     .unwrap_none();\n+                this.memory.extra.environ = Some(place);\n             }\n             _ => {} // No \"extern statics\" supported on this platform\n         }\n@@ -217,7 +218,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     type MemoryKinds = MiriMemoryKind;\n \n     type FrameExtra = FrameData<'tcx>;\n-    type MemoryExtra = MemoryExtra;\n+    type MemoryExtra = MemoryExtra<'tcx>;\n     type AllocExtra = AllocExtra;\n     type PointerTag = Tag;\n     type ExtraFnVal = Dlsym;\n@@ -343,7 +344,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     }\n \n     fn init_allocation_extra<'b>(\n-        memory_extra: &MemoryExtra,\n+        memory_extra: &MemoryExtra<'tcx>,\n         id: AllocId,\n         alloc: Cow<'b, Allocation>,\n         kind: Option<MemoryKind<Self::MemoryKinds>>,\n@@ -380,7 +381,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     }\n \n     #[inline(always)]\n-    fn tag_static_base_pointer(memory_extra: &MemoryExtra, id: AllocId) -> Self::PointerTag {\n+    fn tag_static_base_pointer(memory_extra: &MemoryExtra<'tcx>, id: AllocId) -> Self::PointerTag {\n         if let Some(stacked_borrows) = memory_extra.stacked_borrows.as_ref() {\n             stacked_borrows.borrow_mut().static_base_ptr(id)\n         } else {"}, {"sha": "05c098bc4e72eb139863d90956a8ad2d5b983d99", "filename": "src/shims/env.rs", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4f5fdc581014ecb17a9aa14ada2a2f186c9a46a8/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5fdc581014ecb17a9aa14ada2a2f186c9a46a8/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=4f5fdc581014ecb17a9aa14ada2a2f186c9a46a8", "patch": "@@ -21,29 +21,16 @@ impl EnvVars {\n         ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n         excluded_env_vars: Vec<String>,\n     ) {\n-        let mut vars = Vec::new();\n         if ecx.machine.communicate {\n             for (name, value) in env::vars() {\n                 if !excluded_env_vars.contains(&name) {\n                     let var_ptr =\n                         alloc_env_var_as_c_str(name.as_ref(), value.as_ref(), ecx);\n                     ecx.machine.env_vars.map.insert(OsString::from(name), var_ptr);\n-                    vars.push(var_ptr.into());\n                 }\n             }\n         }\n-        // Add the trailing null pointer\n-        vars.push(Scalar::from_int(0, ecx.pointer_size()));\n-        // Make an array with all these pointers inside Miri.\n-        let tcx = ecx.tcx;\n-        let environ_layout =\n-            ecx.layout_of(tcx.mk_array(tcx.mk_imm_ptr(tcx.types.u8), vars.len() as u64)).unwrap();\n-        let environ_place = ecx.allocate(environ_layout, MiriMemoryKind::Machine.into());\n-        for (idx, var) in vars.into_iter().enumerate() {\n-            let place = ecx.mplace_field(environ_place, idx as u64).unwrap();\n-            ecx.write_scalar(var, place.into()).unwrap();\n-        }\n-        ecx.memory.extra.environ = Some(environ_place.ptr.into());\n+        ecx.update_environ().unwrap();\n     }\n }\n \n@@ -94,6 +81,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         if let Some((name, value)) = new {\n             let var_ptr = alloc_env_var_as_c_str(&name, &value, &mut this);\n             if let Some(var) = this.machine.env_vars.map.insert(name.to_owned(), var_ptr) {\n+                this.update_environ()?;\n                 this.memory\n                     .deallocate(var, None, MiriMemoryKind::Machine.into())?;\n             }\n@@ -112,6 +100,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             let name = this.read_os_str_from_c_str(name_ptr)?.to_owned();\n             if !name.is_empty() && !name.to_string_lossy().contains('=') {\n                 success = Some(this.machine.env_vars.map.remove(&name));\n+                this.update_environ()?;\n             }\n         }\n         if let Some(old) = success {\n@@ -165,4 +154,28 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n         }\n     }\n+\n+    fn update_environ(&mut self) -> InterpResult<'tcx> {\n+        let this = self.eval_context_mut();\n+        // Collect all the pointers to each variable in a vector.\n+        let mut vars: Vec<Scalar<Tag>> = this.machine.env_vars.map.values().map(|&ptr| ptr.into()).collect();\n+        // Add the trailing null pointer.\n+        vars.push(Scalar::from_int(0, this.pointer_size()));\n+        // Make an array with all these pointers inside Miri.\n+        let tcx = this.tcx;\n+        let vars_layout =\n+            this.layout_of(tcx.mk_array(tcx.types.usize, vars.len() as u64))?;\n+        let vars_place = this.allocate(vars_layout, MiriMemoryKind::Machine.into());\n+        for (idx, var) in vars.into_iter().enumerate() {\n+            let place = this.mplace_field(vars_place, idx as u64)?;\n+            this.write_scalar(var, place.into())?;\n+        }\n+\n+        this.write_scalar(\n+            vars_place.ptr,\n+            this.memory.extra.environ.unwrap().into(),\n+        )?;\n+\n+        Ok(())\n+    }\n }"}]}