{"sha": "522823f610391932e2f4162a8c929af2dacaefc4", "node_id": "C_kwDOAAsO6NoAKDUyMjgyM2Y2MTAzOTE5MzJlMmY0MTYyYThjOTI5YWYyZGFjYWVmYzQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-03T10:13:06Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-03T10:13:06Z"}, "message": "Fix text fixtures of missing_match_arms diagnostics", "tree": {"sha": "98488def8ae5a5985916bd3960837cf548b74c07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98488def8ae5a5985916bd3960837cf548b74c07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/522823f610391932e2f4162a8c929af2dacaefc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/522823f610391932e2f4162a8c929af2dacaefc4", "html_url": "https://github.com/rust-lang/rust/commit/522823f610391932e2f4162a8c929af2dacaefc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/522823f610391932e2f4162a8c929af2dacaefc4/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44e2c6ea9207264a86d05344b67999d77687edb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/44e2c6ea9207264a86d05344b67999d77687edb6", "html_url": "https://github.com/rust-lang/rust/commit/44e2c6ea9207264a86d05344b67999d77687edb6"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "6f20f0dc893ec4dbda4826ff24216b5a54743b0d", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/522823f610391932e2f4162a8c929af2dacaefc4/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/522823f610391932e2f4162a8c929af2dacaefc4/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=522823f610391932e2f4162a8c929af2dacaefc4", "patch": "@@ -398,7 +398,7 @@ impl<'a> InferenceContext<'a> {\n                 for arm in arms.iter() {\n                     self.diverges = Diverges::Maybe;\n                     let input_ty = self.resolve_ty_shallow(&input_ty);\n-                    let _pat_ty = self.infer_top_pat(arm.pat, &input_ty);\n+                    self.infer_top_pat(arm.pat, &input_ty);\n                     if let Some(guard_expr) = arm.guard {\n                         self.infer_expr(\n                             guard_expr,"}, {"sha": "3d03c2a527cbd7606d8de9957a8ba7ca4256033c", "filename": "crates/hir-ty/src/infer/pat.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/522823f610391932e2f4162a8c929af2dacaefc4/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/522823f610391932e2f4162a8c929af2dacaefc4/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs?ref=522823f610391932e2f4162a8c929af2dacaefc4", "patch": "@@ -293,7 +293,8 @@ impl<'a> InferenceContext<'a> {\n         };\n         // use a new type variable if we got error type here\n         let ty = self.insert_type_vars_shallow(ty);\n-        if !self.unify(&ty, &expected) {\n+        // FIXME: This never check is odd, but required with out we do inference right now\n+        if !expected.is_never() && !self.unify(&ty, &expected) {\n             self.result\n                 .type_mismatches\n                 .insert(pat.into(), TypeMismatch { expected, actual: ty.clone() });"}, {"sha": "6594eed26d1712bce003245b2795120836406512", "filename": "crates/ide-diagnostics/src/handlers/missing_match_arms.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/522823f610391932e2f4162a8c929af2dacaefc4/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/522823f610391932e2f4162a8c929af2dacaefc4/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_match_arms.rs?ref=522823f610391932e2f4162a8c929af2dacaefc4", "patch": "@@ -273,15 +273,20 @@ enum Either2 { C, D }\n fn main() {\n     match Either::A {\n         Either2::C => (),\n+     // ^^^^^^^^^^  error: expected Either, found Either2\n         Either2::D => (),\n+     // ^^^^^^^^^^  error: expected Either, found Either2\n     }\n     match (true, false) {\n         (true, false, true) => (),\n+     // ^^^^^^^^^^^^^^^^^^^  error: expected (bool, bool), found (bool, bool, bool)\n         (true) => (),\n       // ^^^^  error: expected (bool, bool), found bool\n     }\n     match (true, false) { (true,) => {} }\n+                       // ^^^^^^^  error: expected (bool, bool), found (bool,)\n     match (0) { () => () }\n+             // ^^  error: expected i32, found ()\n     match Unresolved::Bar { Unresolved::Baz => () }\n }\n         \"#,\n@@ -295,7 +300,9 @@ fn main() {\n             r#\"\n fn main() {\n     match false { true | () => {} }\n+                      // ^^  error: expected bool, found ()\n     match (false,) { (true | (),) => {} }\n+                          // ^^  error: expected bool, found ()\n }\n \"#,\n         );\n@@ -1038,12 +1045,12 @@ fn main() {\n         #[test]\n         fn reference_patterns_in_fields() {\n             cov_mark::check_count!(validate_match_bailed_out, 2);\n-\n             check_diagnostics(\n                 r#\"\n fn main() {\n     match (&false,) {\n         (true,) => {}\n+     // ^^^^^^^  error: expected (&bool,), found (bool,)\n     }\n     match (&false,) {\n         (&true,) => {}"}]}