{"sha": "a22a9bf2d03ef1fbb3a115d98849fd0bcd2fa5c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMmE5YmYyZDAzZWYxZmJiM2ExMTVkOTg4NDlmZDBiY2QyZmE1YzY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-09T14:42:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-09T14:42:39Z"}, "message": "Merge #9541\n\n9541: Adding async keyword when await is present in generate_function assist r=feniljain a=feniljain\n\nSolves #9394 \n\nCo-authored-by: vi_mi <fenil.jain2018@vitstudent.ac.in>", "tree": {"sha": "acc3c00c5eda2d98c68fbe10e236157554336a2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acc3c00c5eda2d98c68fbe10e236157554336a2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a22a9bf2d03ef1fbb3a115d98849fd0bcd2fa5c6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg6GBfCRBK7hj4Ov3rIwAAmRkIAHe3cDjCUjQOyMw+RIYDWAk2\nB7jcfcJB1etWreLW5fdvSCn5HQHSVBsW0d2yedmBLCfioQvgc1eFXmyGiqTw5o0D\n+eiBMvfz/winQHjiwoxh6HMVVKMgnnRfnYKE3bGKbpBTBli2YHN+7CcqyaVv3EEk\n2ef6ZJB/qjAnZUODMkwJLWpKgx0UmigjeWYj0+FDpQNvIvwFmlTWG4yrLOcyCLHV\nY5Tb35MoYojx2fkQurHGRoJaDBuEUDLw+xSJdG+SI/VzbvbFc3xiTqNUdmWDGRXH\nMu9S6E3xQ634vsh/b+B6tmoYiSzkElTI5jwY8BTlHHM9+sBnFDkONM5Hm144lcA=\n=9M21\n-----END PGP SIGNATURE-----\n", "payload": "tree acc3c00c5eda2d98c68fbe10e236157554336a2a\nparent eab5d985ec6ff8b8f39f39af949829410d79db4a\nparent 57f119b5fa65032d6f387f9e3391d71acd647845\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1625841759 +0000\ncommitter GitHub <noreply@github.com> 1625841759 +0000\n\nMerge #9541\n\n9541: Adding async keyword when await is present in generate_function assist r=feniljain a=feniljain\n\nSolves #9394 \n\nCo-authored-by: vi_mi <fenil.jain2018@vitstudent.ac.in>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a22a9bf2d03ef1fbb3a115d98849fd0bcd2fa5c6", "html_url": "https://github.com/rust-lang/rust/commit/a22a9bf2d03ef1fbb3a115d98849fd0bcd2fa5c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a22a9bf2d03ef1fbb3a115d98849fd0bcd2fa5c6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eab5d985ec6ff8b8f39f39af949829410d79db4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/eab5d985ec6ff8b8f39f39af949829410d79db4a", "html_url": "https://github.com/rust-lang/rust/commit/eab5d985ec6ff8b8f39f39af949829410d79db4a"}, {"sha": "57f119b5fa65032d6f387f9e3391d71acd647845", "url": "https://api.github.com/repos/rust-lang/rust/commits/57f119b5fa65032d6f387f9e3391d71acd647845", "html_url": "https://github.com/rust-lang/rust/commit/57f119b5fa65032d6f387f9e3391d71acd647845"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "c620cfac486b7b18a109ddc0e79d7c926c9be76c", "filename": "crates/ide_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a22a9bf2d03ef1fbb3a115d98849fd0bcd2fa5c6/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a22a9bf2d03ef1fbb3a115d98849fd0bcd2fa5c6/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=a22a9bf2d03ef1fbb3a115d98849fd0bcd2fa5c6", "patch": "@@ -44,8 +44,8 @@ use crate::{\n pub(crate) fn generate_function(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let path_expr: ast::PathExpr = ctx.find_node_at_offset()?;\n     let call = path_expr.syntax().parent().and_then(ast::CallExpr::cast)?;\n-    let path = path_expr.path()?;\n \n+    let path = path_expr.path()?;\n     if ctx.sema.resolve_path(&path).is_some() {\n         // The function call already resolves, no need to add a function\n         return None;\n@@ -60,8 +60,8 @@ pub(crate) fn generate_function(acc: &mut Assists, ctx: &AssistContext) -> Optio\n     };\n \n     let function_builder = FunctionBuilder::from_call(ctx, &call, &path, target_module)?;\n-\n     let target = call.syntax().text_range();\n+\n     acc.add(\n         AssistId(\"generate_function\", AssistKind::Generate),\n         format!(\"Generate `{}` function\", function_builder.fn_name),\n@@ -109,6 +109,7 @@ struct FunctionBuilder {\n     should_render_snippet: bool,\n     file: FileId,\n     needs_pub: bool,\n+    is_async: bool,\n }\n \n impl FunctionBuilder {\n@@ -135,6 +136,9 @@ impl FunctionBuilder {\n         let fn_name = fn_name(path)?;\n         let (type_params, params) = fn_args(ctx, target_module, call)?;\n \n+        let await_expr = call.syntax().parent().and_then(ast::AwaitExpr::cast);\n+        let is_async = await_expr.is_some();\n+\n         // should_render_snippet intends to express a rough level of confidence about\n         // the correctness of the return type.\n         //\n@@ -171,6 +175,7 @@ impl FunctionBuilder {\n             should_render_snippet,\n             file,\n             needs_pub,\n+            is_async,\n         })\n     }\n \n@@ -185,6 +190,7 @@ impl FunctionBuilder {\n             self.params,\n             fn_body,\n             Some(self.ret_type),\n+            self.is_async,\n         );\n         let leading_ws;\n         let trailing_ws;\n@@ -1159,4 +1165,25 @@ impl Foo {\n         \"#,\n         )\n     }\n+\n+    #[test]\n+    fn create_function_with_async() {\n+        check_assist(\n+            generate_function,\n+            r\"\n+fn foo() {\n+    $0bar(42).await();\n+}\n+\",\n+            r\"\n+fn foo() {\n+    bar(42).await();\n+}\n+\n+async fn bar(arg: i32) ${0:-> ()} {\n+    todo!()\n+}\n+\",\n+        )\n+    }\n }"}, {"sha": "1eaf40f4cbe98ef6ca657d1d74f16653714f433c", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a22a9bf2d03ef1fbb3a115d98849fd0bcd2fa5c6/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a22a9bf2d03ef1fbb3a115d98849fd0bcd2fa5c6/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=a22a9bf2d03ef1fbb3a115d98849fd0bcd2fa5c6", "patch": "@@ -587,6 +587,7 @@ pub fn fn_(\n     params: ast::ParamList,\n     body: ast::BlockExpr,\n     ret_type: Option<ast::RetType>,\n+    is_async: bool,\n ) -> ast::Fn {\n     let type_params =\n         if let Some(type_params) = type_params { format!(\"<{}>\", type_params) } else { \"\".into() };\n@@ -596,9 +597,11 @@ pub fn fn_(\n         Some(it) => format!(\"{} \", it),\n     };\n \n+    let async_literal = if is_async { \"async \" } else { \"\" };\n+\n     ast_from_text(&format!(\n-        \"{}fn {}{}{} {}{}\",\n-        visibility, fn_name, type_params, params, ret_type, body\n+        \"{}{}fn {}{}{} {}{}\",\n+        visibility, async_literal, fn_name, type_params, params, ret_type, body\n     ))\n }\n "}]}