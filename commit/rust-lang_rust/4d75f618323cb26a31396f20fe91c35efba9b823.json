{"sha": "4d75f618323cb26a31396f20fe91c35efba9b823", "node_id": "C_kwDOAAsO6NoAKDRkNzVmNjE4MzIzY2IyNmEzMTM5NmYyMGZlOTFjMzVlZmJhOWI4MjM", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-01-30T12:00:11Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-01-30T12:26:26Z"}, "message": "Use `Mutability::{is_mut, is_not}`", "tree": {"sha": "5199029df546a317a16c8e1477bf118b4d9f05d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5199029df546a317a16c8e1477bf118b4d9f05d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d75f618323cb26a31396f20fe91c35efba9b823", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d75f618323cb26a31396f20fe91c35efba9b823", "html_url": "https://github.com/rust-lang/rust/commit/4d75f618323cb26a31396f20fe91c35efba9b823", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d75f618323cb26a31396f20fe91c35efba9b823/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd649a3cc5e9f17c8aee070227e8c71f094560b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd649a3cc5e9f17c8aee070227e8c71f094560b7", "html_url": "https://github.com/rust-lang/rust/commit/fd649a3cc5e9f17c8aee070227e8c71f094560b7"}], "stats": {"total": 34, "additions": 13, "deletions": 21}, "files": [{"sha": "40f518b33cfb66dbcf4b485a2d32ab3a71b2aa1a", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d75f618323cb26a31396f20fe91c35efba9b823/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d75f618323cb26a31396f20fe91c35efba9b823/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=4d75f618323cb26a31396f20fe91c35efba9b823", "patch": "@@ -344,7 +344,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     } else {\n                         err.span_help(source_info.span, \"try removing `&mut` here\");\n                     }\n-                } else if decl.mutability == Mutability::Not {\n+                } else if decl.mutability.is_not() {\n                     if matches!(\n                         decl.local_info,\n                         Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::ImplicitSelf("}, {"sha": "2605a1491fb35427609d13dd00475820eb2fdfc1", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d75f618323cb26a31396f20fe91c35efba9b823/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d75f618323cb26a31396f20fe91c35efba9b823/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=4d75f618323cb26a31396f20fe91c35efba9b823", "patch": "@@ -2028,7 +2028,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                             }\n                         };\n \n-                        if ty_to_mut == Mutability::Mut && ty_mut == Mutability::Not {\n+                        if ty_to_mut.is_mut() && ty_mut.is_not() {\n                             span_mirbug!(\n                                 self,\n                                 rvalue,"}, {"sha": "a87ce0053e8a038932d7f71b711ce741094de771", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d75f618323cb26a31396f20fe91c35efba9b823/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d75f618323cb26a31396f20fe91c35efba9b823/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=4d75f618323cb26a31396f20fe91c35efba9b823", "patch": "@@ -304,7 +304,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             .into());\n         };\n \n-        if alloc.mutability == Mutability::Not {\n+        if alloc.mutability.is_not() {\n             throw_ub_format!(\"deallocating immutable allocation {alloc_id:?}\");\n         }\n         if alloc_kind != kind {\n@@ -631,7 +631,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n \n         let (_kind, alloc) = self.memory.alloc_map.get_mut(id).unwrap();\n-        if alloc.mutability == Mutability::Not {\n+        if alloc.mutability.is_not() {\n             throw_ub!(WriteToReadOnly(id))\n         }\n         Ok((alloc, &mut self.machine))"}, {"sha": "7dcf9d8299f142d85315a9be60dc996bc6f32e05", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d75f618323cb26a31396f20fe91c35efba9b823/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d75f618323cb26a31396f20fe91c35efba9b823/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=4d75f618323cb26a31396f20fe91c35efba9b823", "patch": "@@ -9,9 +9,7 @@ use rustc_ast_pretty::pp::{self, Breaks};\n use rustc_ast_pretty::pprust::{Comments, PrintState};\n use rustc_hir as hir;\n use rustc_hir::LifetimeParamKind;\n-use rustc_hir::{\n-    BindingAnnotation, ByRef, GenericArg, GenericParam, GenericParamKind, Mutability, Node, Term,\n-};\n+use rustc_hir::{BindingAnnotation, ByRef, GenericArg, GenericParam, GenericParamKind, Node, Term};\n use rustc_hir::{GenericBound, PatKind, RangeEnd, TraitBoundModifier};\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, Ident, IdentPrinter, Symbol};\n@@ -1746,7 +1744,7 @@ impl<'a> State<'a> {\n                 if by_ref == ByRef::Yes {\n                     self.word_nbsp(\"ref\");\n                 }\n-                if mutbl == Mutability::Mut {\n+                if mutbl.is_mut() {\n                     self.word_nbsp(\"mut\");\n                 }\n                 self.print_ident(ident);"}, {"sha": "cf6d46e1e2c8acfd07b8263ab43329c6196a1833", "filename": "compiler/rustc_middle/src/mir/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d75f618323cb26a31396f20fe91c35efba9b823/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d75f618323cb26a31396f20fe91c35efba9b823/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgraphviz.rs?ref=4d75f618323cb26a31396f20fe91c35efba9b823", "patch": "@@ -110,7 +110,7 @@ fn write_graph_label<'tcx, W: std::fmt::Write>(\n         let decl = &body.local_decls[local];\n \n         write!(w, \"let \")?;\n-        if decl.mutability == Mutability::Mut {\n+        if decl.mutability.is_mut() {\n             write!(w, \"mut \")?;\n         }\n "}, {"sha": "872d3d2808be5e56d680bc05084772f4371af8bc", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d75f618323cb26a31396f20fe91c35efba9b823/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d75f618323cb26a31396f20fe91c35efba9b823/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=4d75f618323cb26a31396f20fe91c35efba9b823", "patch": "@@ -416,11 +416,7 @@ impl<'tcx> Body<'tcx> {\n         (self.arg_count + 1..self.local_decls.len()).filter_map(move |index| {\n             let local = Local::new(index);\n             let decl = &self.local_decls[local];\n-            if decl.is_user_variable() && decl.mutability == Mutability::Mut {\n-                Some(local)\n-            } else {\n-                None\n-            }\n+            if decl.is_user_variable() && decl.mutability.is_mut() { Some(local) } else { None }\n         })\n     }\n "}, {"sha": "27141fd8eff2e08ae8f71d849a0a63b2b7970afb", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d75f618323cb26a31396f20fe91c35efba9b823/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d75f618323cb26a31396f20fe91c35efba9b823/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=4d75f618323cb26a31396f20fe91c35efba9b823", "patch": "@@ -580,7 +580,7 @@ fn write_scope_tree(\n             continue;\n         }\n \n-        let mut_str = if local_decl.mutability == Mutability::Mut { \"mut \" } else { \"\" };\n+        let mut_str = if local_decl.mutability.is_mut() { \"mut \" } else { \"\" };\n \n         let mut indented_decl =\n             format!(\"{0:1$}let {2}{3:?}: {4:?}\", INDENT, indent, mut_str, local, local_decl.ty);"}, {"sha": "3d3cf75559e303089ccbaa320f9dff9a7e3fe964", "filename": "compiler/rustc_mir_build/src/build/expr/as_temp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d75f618323cb26a31396f20fe91c35efba9b823/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d75f618323cb26a31396f20fe91c35efba9b823/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_temp.rs?ref=4d75f618323cb26a31396f20fe91c35efba9b823", "patch": "@@ -44,7 +44,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let expr_ty = expr.ty;\n         let temp = {\n             let mut local_decl = LocalDecl::new(expr_ty, expr_span);\n-            if mutability == Mutability::Not {\n+            if mutability.is_not() {\n                 local_decl = local_decl.immutable();\n             }\n "}, {"sha": "9699611e9b0a013dd024fa896f90db8ed6b7666a", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d75f618323cb26a31396f20fe91c35efba9b823/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d75f618323cb26a31396f20fe91c35efba9b823/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=4d75f618323cb26a31396f20fe91c35efba9b823", "patch": "@@ -5,7 +5,6 @@ use std::cell::Cell;\n \n use either::Right;\n \n-use rustc_ast::Mutability;\n use rustc_const_eval::const_eval::CheckAlignment;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def::DefKind;\n@@ -289,7 +288,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n         }\n         // If the static allocation is mutable, then we can't const prop it as its content\n         // might be different at runtime.\n-        if alloc.inner().mutability == Mutability::Mut {\n+        if alloc.inner().mutability.is_mut() {\n             throw_machine_stop_str!(\"can't access mutable globals in ConstProp\");\n         }\n "}, {"sha": "e9ca6f7c93c446b569f72aa608087182c874b734", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d75f618323cb26a31396f20fe91c35efba9b823/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d75f618323cb26a31396f20fe91c35efba9b823/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=4d75f618323cb26a31396f20fe91c35efba9b823", "patch": "@@ -427,7 +427,7 @@ impl<'tcx> CloneShimBuilder<'tcx> {\n     fn make_place(&mut self, mutability: Mutability, ty: Ty<'tcx>) -> Place<'tcx> {\n         let span = self.span;\n         let mut local = LocalDecl::new(ty, span);\n-        if mutability == Mutability::Not {\n+        if mutability.is_not() {\n             local = local.immutable();\n         }\n         Place::from(self.local_decls.push(local))"}, {"sha": "6d8a2b7c3eb377eff9f6abc3cd720c1b4d4a794a", "filename": "compiler/rustc_save_analysis/src/sig.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d75f618323cb26a31396f20fe91c35efba9b823/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d75f618323cb26a31396f20fe91c35efba9b823/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs?ref=4d75f618323cb26a31396f20fe91c35efba9b823", "patch": "@@ -29,7 +29,6 @@ use crate::{id_from_def_id, SaveContext};\n \n use rls_data::{SigElement, Signature};\n \n-use rustc_ast::Mutability;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir_pretty::id_to_string;\n@@ -769,7 +768,7 @@ impl<'hir> Sig for hir::ForeignItem<'hir> {\n             }\n             hir::ForeignItemKind::Static(ref ty, m) => {\n                 let mut text = \"static \".to_owned();\n-                if m == Mutability::Mut {\n+                if m.is_mut() {\n                     text.push_str(\"mut \");\n                 }\n                 let name = self.ident.to_string();"}]}