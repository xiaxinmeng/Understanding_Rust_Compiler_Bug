{"sha": "64bc3c266cf97e2050bcf3a8565c48a60ca1a762", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0YmMzYzI2NmNmOTdlMjA1MGJjZjNhODU2NWM0OGE2MGNhMWE3NjI=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-05-10T21:24:44Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-05-11T18:30:33Z"}, "message": "trans: Make collector handle the drop_in_place() intrinsic.", "tree": {"sha": "ac95f45aa2bfd7fbe9d7a13fdde89c3c57febd58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac95f45aa2bfd7fbe9d7a13fdde89c3c57febd58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64bc3c266cf97e2050bcf3a8565c48a60ca1a762", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64bc3c266cf97e2050bcf3a8565c48a60ca1a762", "html_url": "https://github.com/rust-lang/rust/commit/64bc3c266cf97e2050bcf3a8565c48a60ca1a762", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64bc3c266cf97e2050bcf3a8565c48a60ca1a762/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4dd4be86a9d8310608ee1ae84d33854cce52825", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4dd4be86a9d8310608ee1ae84d33854cce52825", "html_url": "https://github.com/rust-lang/rust/commit/f4dd4be86a9d8310608ee1ae84d33854cce52825"}], "stats": {"total": 92, "additions": 89, "deletions": 3}, "files": [{"sha": "7a04e45895c2c3bb1d83b0a8b9deceba6cafa77f", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 48, "deletions": 3, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/64bc3c266cf97e2050bcf3a8565c48a60ca1a762/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64bc3c266cf97e2050bcf3a8565c48a60ca1a762/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=64bc3c266cf97e2050bcf3a8565c48a60ca1a762", "patch": "@@ -202,9 +202,9 @@ use rustc::mir::repr as mir;\n use rustc::mir::visit as mir_visit;\n use rustc::mir::visit::Visitor as MirVisitor;\n \n+use syntax::abi::Abi;\n use syntax::codemap::DUMMY_SP;\n use syntax::errors;\n-\n use base::custom_coerce_unsize_info;\n use context::SharedCrateContext;\n use common::{fulfill_obligation, normalize_and_test_predicates, type_is_sized};\n@@ -602,6 +602,49 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n             can_have_local_instance(tcx, def_id)\n         }\n     }\n+\n+    // This takes care of the \"drop_in_place\" intrinsic for which we otherwise\n+    // we would not register drop-glues.\n+    fn visit_terminator_kind(&mut self,\n+                             block: mir::BasicBlock,\n+                             kind: &mir::TerminatorKind<'tcx>) {\n+        let tcx = self.scx.tcx();\n+        match *kind {\n+            mir::TerminatorKind::Call {\n+                func: mir::Operand::Constant(ref constant),\n+                ref args,\n+                ..\n+            } => {\n+                match constant.ty.sty {\n+                    ty::TyFnDef(def_id, _, bare_fn_ty)\n+                        if is_drop_in_place_intrinsic(tcx, def_id, bare_fn_ty) => {\n+                        let operand_ty = self.mir.operand_ty(tcx, &args[0]);\n+                        if let ty::TyRawPtr(mt) = operand_ty.sty {\n+                            let operand_ty = monomorphize::apply_param_substs(tcx,\n+                                                                              self.param_substs,\n+                                                                              &mt.ty);\n+                            self.output.push(TransItem::DropGlue(DropGlueKind::Ty(operand_ty)));\n+                        } else {\n+                            bug!(\"Has the drop_in_place() intrinsic's signature changed?\")\n+                        }\n+                    }\n+                    _ => { /* Nothing to do. */ }\n+                }\n+            }\n+            _ => { /* Nothing to do. */ }\n+        }\n+\n+        self.super_terminator_kind(block, kind);\n+\n+        fn is_drop_in_place_intrinsic<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                                def_id: DefId,\n+                                                bare_fn_ty: &ty::BareFnTy<'tcx>)\n+                                                -> bool {\n+            (bare_fn_ty.abi == Abi::RustIntrinsic ||\n+             bare_fn_ty.abi == Abi::PlatformIntrinsic) &&\n+            tcx.item_name(def_id).as_str() == \"drop_in_place\"\n+        }\n+    }\n }\n \n fn can_have_local_instance<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -699,7 +742,6 @@ fn find_drop_glue_neighbors<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n         ty::TyRef(..)   |\n         ty::TyFnDef(..) |\n         ty::TyFnPtr(_)  |\n-        ty::TySlice(_)  |\n         ty::TyTrait(_)  => {\n             /* nothing to do */\n         }\n@@ -725,6 +767,7 @@ fn find_drop_glue_neighbors<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n             }\n         }\n         ty::TyBox(inner_type)      |\n+        ty::TySlice(inner_type)    |\n         ty::TyArray(inner_type, _) => {\n             let inner_type = glue::get_drop_glue_type(scx.tcx(), inner_type);\n             if glue::type_needs_drop(scx.tcx(), inner_type) {\n@@ -746,6 +789,8 @@ fn find_drop_glue_neighbors<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n             bug!(\"encountered unexpected type\");\n         }\n     }\n+\n+\n }\n \n fn do_static_dispatch<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n@@ -1187,7 +1232,7 @@ pub enum TransItemState {\n }\n \n pub fn collecting_debug_information(scx: &SharedCrateContext) -> bool {\n-    return cfg!(debug_assertions) &&\n+    return scx.sess().opts.cg.debug_assertions == Some(true) &&\n            scx.sess().opts.debugging_opts.print_trans_items.is_some();\n }\n "}, {"sha": "db940b680473a46606685c898f2c1f3d8d953343", "filename": "src/test/codegen-units/item-collection/drop_in_place_intrinsic.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/64bc3c266cf97e2050bcf3a8565c48a60ca1a762/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fdrop_in_place_intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64bc3c266cf97e2050bcf3a8565c48a60ca1a762/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fdrop_in_place_intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fdrop_in_place_intrinsic.rs?ref=64bc3c266cf97e2050bcf3a8565c48a60ca1a762", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+// compile-flags:-Zprint-trans-items=eager\n+\n+//~ TRANS_ITEM drop-glue drop_in_place_intrinsic::StructWithDtor[0]\n+//~ TRANS_ITEM drop-glue-contents drop_in_place_intrinsic::StructWithDtor[0]\n+struct StructWithDtor(u32);\n+\n+impl Drop for StructWithDtor {\n+    //~ TRANS_ITEM fn drop_in_place_intrinsic::{{impl}}[0]::drop[0]\n+    fn drop(&mut self) {}\n+}\n+\n+//~ TRANS_ITEM fn drop_in_place_intrinsic::main[0]\n+fn main() {\n+\n+    //~ TRANS_ITEM drop-glue [drop_in_place_intrinsic::StructWithDtor[0]; 2]\n+    let x = [StructWithDtor(0), StructWithDtor(1)];\n+\n+    drop_slice_in_place(&x);\n+}\n+\n+//~ TRANS_ITEM fn drop_in_place_intrinsic::drop_slice_in_place[0]\n+fn drop_slice_in_place(x: &[StructWithDtor]) {\n+    unsafe {\n+        // This is the interesting thing in this test case: Normally we would\n+        // not have drop-glue for the unsized [StructWithDtor]. This has to be\n+        // generated though when the drop_in_place() intrinsic is used.\n+        //~ TRANS_ITEM drop-glue [drop_in_place_intrinsic::StructWithDtor[0]]\n+        ::std::ptr::drop_in_place(x as *const _ as *mut [StructWithDtor]);\n+    }\n+}"}]}