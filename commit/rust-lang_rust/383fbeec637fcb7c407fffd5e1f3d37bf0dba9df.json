{"sha": "383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "node_id": "C_kwDOAAsO6NoAKDM4M2ZiZWVjNjM3ZmNiN2M0MDdmZmZkNWUxZjNkMzdiZjBkYmE5ZGY", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-22T06:05:15Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-22T19:21:27Z"}, "message": "Use revisions for NLL in lifetimes", "tree": {"sha": "52e92efdf3da385618f23f940cf93fa9fd6d5d7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52e92efdf3da385618f23f940cf93fa9fd6d5d7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "html_url": "https://github.com/rust-lang/rust/commit/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe91cfd684340f45dabd15568b7dae2f8118ee44", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe91cfd684340f45dabd15568b7dae2f8118ee44", "html_url": "https://github.com/rust-lang/rust/commit/fe91cfd684340f45dabd15568b7dae2f8118ee44"}], "stats": {"total": 543, "additions": 398, "deletions": 145}, "files": [{"sha": "95591412f7eab7df8512b48aa61ef007b710586d", "filename": "src/test/ui/lifetimes/issue-79187-2.base.stderr", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.base.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,56 +1,56 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-79187-2.rs:8:5\n+  --> $DIR/issue-79187-2.rs:12:5\n    |\n LL |     take_foo(|a| a);\n    |     ^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `for<'r> Fn<(&'r i32,)>`\n               found type `Fn<(&i32,)>`\n note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-79187-2.rs:8:14\n+  --> $DIR/issue-79187-2.rs:12:14\n    |\n LL |     take_foo(|a| a);\n    |              ^^^^^\n note: the lifetime requirement is introduced here\n-  --> $DIR/issue-79187-2.rs:5:21\n+  --> $DIR/issue-79187-2.rs:9:21\n    |\n LL | fn take_foo(_: impl Foo) {}\n    |                     ^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-79187-2.rs:9:5\n+  --> $DIR/issue-79187-2.rs:16:5\n    |\n LL |     take_foo(|a: &i32| a);\n    |     ^^^^^^^^ lifetime mismatch\n    |\n    = note: expected reference `&i32`\n               found reference `&i32`\n note: the anonymous lifetime #1 defined here doesn't meet the lifetime requirements\n-  --> $DIR/issue-79187-2.rs:9:14\n+  --> $DIR/issue-79187-2.rs:16:14\n    |\n LL |     take_foo(|a: &i32| a);\n    |              ^^^^^^^^^^^\n note: the lifetime requirement is introduced here\n-  --> $DIR/issue-79187-2.rs:5:21\n+  --> $DIR/issue-79187-2.rs:9:21\n    |\n LL | fn take_foo(_: impl Foo) {}\n    |                     ^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-79187-2.rs:10:5\n+  --> $DIR/issue-79187-2.rs:20:5\n    |\n LL |     take_foo(|a: &i32| -> &i32 { a });\n    |     ^^^^^^^^ lifetime mismatch\n    |\n    = note: expected reference `&i32`\n               found reference `&i32`\n note: the anonymous lifetime #1 defined here doesn't meet the lifetime requirements\n-  --> $DIR/issue-79187-2.rs:10:14\n+  --> $DIR/issue-79187-2.rs:20:14\n    |\n LL |     take_foo(|a: &i32| -> &i32 { a });\n    |              ^^^^^^^^^^^^^^^^^^^^^^^\n note: the lifetime requirement is introduced here\n-  --> $DIR/issue-79187-2.rs:5:21\n+  --> $DIR/issue-79187-2.rs:9:21\n    |\n LL | fn take_foo(_: impl Foo) {}\n    |                     ^^^", "previous_filename": "src/test/ui/lifetimes/issue-79187-2.stderr"}, {"sha": "3cbce7600f9563ea12ad06fc35078df1c746c866", "filename": "src/test/ui/lifetimes/issue-79187-2.nll.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.nll.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-79187-2.rs:9:24\n+  --> $DIR/issue-79187-2.rs:16:24\n    |\n LL |     take_foo(|a: &i32| a);\n    |                  -   - ^ returning this value requires that `'1` must outlive `'2`\n@@ -8,7 +8,7 @@ LL |     take_foo(|a: &i32| a);\n    |                  let's call the lifetime of this reference `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/issue-79187-2.rs:10:34\n+  --> $DIR/issue-79187-2.rs:20:34\n    |\n LL |     take_foo(|a: &i32| -> &i32 { a });\n    |                  -        -      ^ returning this value requires that `'1` must outlive `'2`\n@@ -17,7 +17,7 @@ LL |     take_foo(|a: &i32| -> &i32 { a });\n    |                  let's call the lifetime of this reference `'1`\n \n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-79187-2.rs:8:5\n+  --> $DIR/issue-79187-2.rs:12:5\n    |\n LL |     take_foo(|a| a);\n    |     ^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n@@ -26,48 +26,48 @@ LL |     take_foo(|a| a);\n    = note: ...but it actually implements `FnOnce<(&'2 i32,)>`, for some specific lifetime `'2`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-79187-2.rs:8:5\n+  --> $DIR/issue-79187-2.rs:12:5\n    |\n LL |     take_foo(|a| a);\n    |     ^^^^^^^^^^^^^^^ one type is more general than the other\n    |\n    = note: expected type `for<'r> Fn<(&'r i32,)>`\n               found type `Fn<(&i32,)>`\n note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-79187-2.rs:8:14\n+  --> $DIR/issue-79187-2.rs:12:14\n    |\n LL |     take_foo(|a| a);\n    |              ^^^^^\n note: the lifetime requirement is introduced here\n-  --> $DIR/issue-79187-2.rs:5:21\n+  --> $DIR/issue-79187-2.rs:9:21\n    |\n LL | fn take_foo(_: impl Foo) {}\n    |                     ^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-79187-2.rs:9:5\n+  --> $DIR/issue-79187-2.rs:16:5\n    |\n LL |     take_foo(|a: &i32| a);\n    |     ^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n    |\n    = note: expected reference `&i32`\n               found reference `&i32`\n note: the lifetime requirement is introduced here\n-  --> $DIR/issue-79187-2.rs:5:21\n+  --> $DIR/issue-79187-2.rs:9:21\n    |\n LL | fn take_foo(_: impl Foo) {}\n    |                     ^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-79187-2.rs:10:5\n+  --> $DIR/issue-79187-2.rs:20:5\n    |\n LL |     take_foo(|a: &i32| -> &i32 { a });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n    |\n    = note: expected reference `&i32`\n               found reference `&i32`\n note: the lifetime requirement is introduced here\n-  --> $DIR/issue-79187-2.rs:5:21\n+  --> $DIR/issue-79187-2.rs:9:21\n    |\n LL | fn take_foo(_: impl Foo) {}\n    |                     ^^^"}, {"sha": "d122b92f74b236acd0cf2e3b2bfd9ae0884062af", "filename": "src/test/ui/lifetimes/issue-79187-2.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.rs?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,13 +1,26 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Foo {}\n \n impl<F> Foo for F where F: Fn(&i32) -> &i32 {}\n \n fn take_foo(_: impl Foo) {}\n \n fn main() {\n-    take_foo(|a| a); //~ ERROR mismatched types\n-    take_foo(|a: &i32| a); //~ ERROR mismatched types\n-    take_foo(|a: &i32| -> &i32 { a }); //~ ERROR mismatched types\n+    take_foo(|a| a);\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR implementation of `FnOnce` is not general enough\n+    //[nll]~| ERROR mismatched types\n+    take_foo(|a: &i32| a);\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n+    //[nll]~| ERROR mismatched types\n+    take_foo(|a: &i32| -> &i32 { a });\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n+    //[nll]~| ERROR mismatched types\n \n     // OK\n     take_foo(identity(|a| a));"}, {"sha": "c4654ca1517ed0d27b63860e519e4c790fa850f5", "filename": "src/test/ui/lifetimes/issue-79187.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.base.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-79187.rs:5:5\n+  --> $DIR/issue-79187.rs:9:5\n    |\n LL |     thing(f);\n    |     ^^^^^ implementation of `FnOnce` is not general enough", "previous_filename": "src/test/ui/lifetimes/issue-79187.stderr"}, {"sha": "54dce9b4bacf067bb97ce47c5ef1a13820d47479", "filename": "src/test/ui/lifetimes/issue-79187.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.nll.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,24 +1,24 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-79187.rs:5:5\n+  --> $DIR/issue-79187.rs:9:5\n    |\n LL |     thing(f);\n    |     ^^^^^^^^ one type is more general than the other\n    |\n    = note: expected type `for<'r> FnOnce<(&'r u32,)>`\n               found type `FnOnce<(&u32,)>`\n note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-79187.rs:4:13\n+  --> $DIR/issue-79187.rs:8:13\n    |\n LL |     let f = |_| ();\n    |             ^^^^^^\n note: the lifetime requirement is introduced here\n-  --> $DIR/issue-79187.rs:1:18\n+  --> $DIR/issue-79187.rs:5:18\n    |\n LL | fn thing(x: impl FnOnce(&u32)) {}\n    |                  ^^^^^^^^^^^^\n \n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-79187.rs:5:5\n+  --> $DIR/issue-79187.rs:9:5\n    |\n LL |     thing(f);\n    |     ^^^^^^^^ implementation of `FnOnce` is not general enough"}, {"sha": "b97890d94e97a75721862b9bfbf710c3c606783c", "filename": "src/test/ui/lifetimes/issue-79187.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.rs?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,6 +1,12 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn thing(x: impl FnOnce(&u32)) {}\n \n fn main() {\n     let f = |_| ();\n-    thing(f); //~ERROR implementation of `FnOnce` is not general enough\n+    thing(f);\n+    //[nll]~^ ERROR mismatched types\n+    //~^^ ERROR implementation of `FnOnce` is not general enough\n }"}, {"sha": "4b417afb038368f26dfcfafe109e3d8f4f42848d", "filename": "src/test/ui/lifetimes/issue-90170-elision-mismatch-nll.fixed", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch-nll.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch-nll.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch-nll.fixed?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -0,0 +1,15 @@\n+// FIXME(nll): On NLL stabilization, this should be replace\n+// `issue-90170-elision-mismatch.rs`. Compiletest has\n+// problems with rustfix and revisions.\n+// ignore-compare-mode-nll\n+// compile-flags: -Zborrowck=mir\n+\n+// run-rustfix\n+\n+pub fn foo<'a>(x: &mut Vec<&'a u8>, y: &'a u8) { x.push(y); } //~ ERROR lifetime may not live long enough\n+\n+pub fn foo2<'a>(x: &mut Vec<&'a u8>, y: &'a u8) { x.push(y); } //~ ERROR lifetime may not live long enough\n+\n+pub fn foo3<'a>(_other: &'a [u8], x: &mut Vec<&'a u8>, y: &'a u8) { x.push(y); } //~ ERROR lifetime may not live long enough\n+\n+fn main() {}"}, {"sha": "ec50e8e1d9ac5d46fcf27f9b3142db2f2889cf5b", "filename": "src/test/ui/lifetimes/issue-90170-elision-mismatch-nll.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch-nll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch-nll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch-nll.rs?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -0,0 +1,15 @@\n+// FIXME(nll): On NLL stabilization, this should be replace\n+// `issue-90170-elision-mismatch.rs`. Compiletest has\n+// problems with rustfix and revisions.\n+// ignore-compare-mode-nll\n+// compile-flags: -Zborrowck=mir\n+\n+// run-rustfix\n+\n+pub fn foo(x: &mut Vec<&u8>, y: &u8) { x.push(y); } //~ ERROR lifetime may not live long enough\n+\n+pub fn foo2(x: &mut Vec<&'_ u8>, y: &u8) { x.push(y); } //~ ERROR lifetime may not live long enough\n+\n+pub fn foo3<'a>(_other: &'a [u8], x: &mut Vec<&u8>, y: &u8) { x.push(y); } //~ ERROR lifetime may not live long enough\n+\n+fn main() {}"}, {"sha": "144fe3bf9dabf4f3e863df08f6e8c6ea1f0978ac", "filename": "src/test/ui/lifetimes/issue-90170-elision-mismatch-nll.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch-nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch-nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch-nll.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-90170-elision-mismatch.rs:3:40\n+  --> $DIR/issue-90170-elision-mismatch-nll.rs:9:40\n    |\n LL | pub fn foo(x: &mut Vec<&u8>, y: &u8) { x.push(y); }\n    |                        -        -      ^^^^^^^^^ argument requires that `'1` must outlive `'2`\n@@ -13,7 +13,7 @@ LL | pub fn foo<'a>(x: &mut Vec<&'a u8>, y: &'a u8) { x.push(y); }\n    |           ++++              ++          ++\n \n error: lifetime may not live long enough\n-  --> $DIR/issue-90170-elision-mismatch.rs:5:44\n+  --> $DIR/issue-90170-elision-mismatch-nll.rs:11:44\n    |\n LL | pub fn foo2(x: &mut Vec<&'_ u8>, y: &u8) { x.push(y); }\n    |                         -           -      ^^^^^^^^^ argument requires that `'1` must outlive `'2`\n@@ -27,7 +27,7 @@ LL | pub fn foo2<'a>(x: &mut Vec<&'a u8>, y: &'a u8) { x.push(y); }\n    |            ++++              ~~          ++\n \n error: lifetime may not live long enough\n-  --> $DIR/issue-90170-elision-mismatch.rs:7:63\n+  --> $DIR/issue-90170-elision-mismatch-nll.rs:13:63\n    |\n LL | pub fn foo3<'a>(_other: &'a [u8], x: &mut Vec<&u8>, y: &u8) { x.push(y); }\n    |                                               -        -      ^^^^^^^^^ argument requires that `'1` must outlive `'2`", "previous_filename": "src/test/ui/lifetimes/issue-90170-elision-mismatch.nll.stderr"}, {"sha": "f05943284f7c83633092ebbcff15140b9f5b177a", "filename": "src/test/ui/lifetimes/issue-90170-elision-mismatch.fixed", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch.fixed?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,3 +1,8 @@\n+// FIXME(nll): On NLL stabilization, this should be replaced by\n+// `issue-90170-elision-mismatch-nll.rs`. Compiletest has\n+// problems with rustfix and revisions.\n+// ignore-compare-mode-nll\n+\n // run-rustfix\n \n pub fn foo<'a>(x: &mut Vec<&'a u8>, y: &'a u8) { x.push(y); } //~ ERROR lifetime mismatch"}, {"sha": "fee2b461ef9aa52442065c4e7b0e9e2e8f68f428", "filename": "src/test/ui/lifetimes/issue-90170-elision-mismatch.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch.rs?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,3 +1,8 @@\n+// FIXME(nll): On NLL stabilization, this should be replaced by\n+// `issue-90170-elision-mismatch-nll.rs`. Compiletest has\n+// problems with rustfix and revisions.\n+// ignore-compare-mode-nll\n+\n // run-rustfix\n \n pub fn foo(x: &mut Vec<&u8>, y: &u8) { x.push(y); } //~ ERROR lifetime mismatch"}, {"sha": "28f3957041c1ec4270717b29426bbabe4a97eb6b", "filename": "src/test/ui/lifetimes/issue-90170-elision-mismatch.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/issue-90170-elision-mismatch.rs:3:47\n+  --> $DIR/issue-90170-elision-mismatch.rs:8:47\n    |\n LL | pub fn foo(x: &mut Vec<&u8>, y: &u8) { x.push(y); }\n    |                        ---      ---           ^ ...but data from `y` flows into `x` here\n@@ -13,7 +13,7 @@ LL | pub fn foo<'a>(x: &mut Vec<&'a u8>, y: &'a u8) { x.push(y); }\n    |           ++++              ++          ++\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/issue-90170-elision-mismatch.rs:5:51\n+  --> $DIR/issue-90170-elision-mismatch.rs:10:51\n    |\n LL | pub fn foo2(x: &mut Vec<&'_ u8>, y: &u8) { x.push(y); }\n    |                         ------      ---           ^ ...but data from `y` flows into `x` here\n@@ -27,7 +27,7 @@ LL | pub fn foo2<'a>(x: &mut Vec<&'a u8>, y: &'a u8) { x.push(y); }\n    |            ++++              ~~          ++\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/issue-90170-elision-mismatch.rs:7:70\n+  --> $DIR/issue-90170-elision-mismatch.rs:12:70\n    |\n LL | pub fn foo3<'a>(_other: &'a [u8], x: &mut Vec<&u8>, y: &u8) { x.push(y); }\n    |                                               ---      ---           ^ ...but data from `y` flows into `x` here"}, {"sha": "b20ce7b07ff327bcf81c761df1e962a2527876ee", "filename": "src/test/ui/lifetimes/issue-90600-expected-return-static-indirect.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.base.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error[E0759]: `foo` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/issue-90600-expected-return-static-indirect.rs:7:32\n+  --> $DIR/issue-90600-expected-return-static-indirect.rs:11:32\n    |\n LL | fn inner(mut foo: &[u8]) {\n    |                   ----- this data with an anonymous lifetime `'_`...", "previous_filename": "src/test/ui/lifetimes/issue-90600-expected-return-static-indirect.stderr"}, {"sha": "b35505ac8c54fa12f3fbef93d42e0cbcf7fd9003", "filename": "src/test/ui/lifetimes/issue-90600-expected-return-static-indirect.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.nll.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,17 +1,17 @@\n error[E0597]: `foo` does not live long enough\n-  --> $DIR/issue-90600-expected-return-static-indirect.rs:7:32\n+  --> $DIR/issue-90600-expected-return-static-indirect.rs:11:32\n    |\n LL |     let refcell = RefCell::new(&mut foo);\n    |                                ^^^^^^^^ borrowed value does not live long enough\n-LL |\n+...\n LL |     let read = &refcell as &RefCell<dyn Read>;\n    |                -------- cast requires that `foo` is borrowed for `'static`\n ...\n LL | }\n    | - `foo` dropped here while still borrowed\n \n error: lifetime may not live long enough\n-  --> $DIR/issue-90600-expected-return-static-indirect.rs:9:16\n+  --> $DIR/issue-90600-expected-return-static-indirect.rs:14:16\n    |\n LL | fn inner(mut foo: &[u8]) {\n    |                   - let's call the lifetime of this reference `'1`"}, {"sha": "fa44be9a912ad4797d77086a164c14f71e734d68", "filename": "src/test/ui/lifetimes/issue-90600-expected-return-static-indirect.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.rs?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,12 +1,18 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n use std::cell::RefCell;\n use std::io::Read;\n \n fn main() {}\n \n fn inner(mut foo: &[u8]) {\n     let refcell = RefCell::new(&mut foo);\n-    //~^ ERROR `foo` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n+    //[base]~^ ERROR `foo` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n+    //[nll]~^^ ERROR `foo` does not live long enough\n     let read = &refcell as &RefCell<dyn Read>;\n+    //[nll]~^ ERROR lifetime may not live long enough\n \n     read_thing(read);\n }"}, {"sha": "54fa49b47f680824d2739565734272f4a6e064a8", "filename": "src/test/ui/lifetimes/lifetime-bound-will-change-warning.base.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.base.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,28 +1,28 @@\n error[E0308]: mismatched types\n-  --> $DIR/lifetime-bound-will-change-warning.rs:34:13\n+  --> $DIR/lifetime-bound-will-change-warning.rs:38:13\n    |\n LL |     ref_obj(x)\n    |             ^ lifetime mismatch\n    |\n    = note: expected reference `&Box<(dyn Fn() + 'static)>`\n               found reference `&Box<(dyn Fn() + 'a)>`\n note: the lifetime `'a` as defined here...\n-  --> $DIR/lifetime-bound-will-change-warning.rs:32:10\n+  --> $DIR/lifetime-bound-will-change-warning.rs:36:10\n    |\n LL | fn test2<'a>(x: &'a Box<dyn Fn() + 'a>) {\n    |          ^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/lifetime-bound-will-change-warning.rs:39:18\n+  --> $DIR/lifetime-bound-will-change-warning.rs:45:18\n    |\n LL |     lib::ref_obj(x)\n    |                  ^ lifetime mismatch\n    |\n    = note: expected reference `&Box<(dyn Fn() + 'static)>`\n               found reference `&Box<(dyn Fn() + 'a)>`\n note: the lifetime `'a` as defined here...\n-  --> $DIR/lifetime-bound-will-change-warning.rs:37:12\n+  --> $DIR/lifetime-bound-will-change-warning.rs:43:12\n    |\n LL | fn test2cc<'a>(x: &'a Box<dyn Fn() + 'a>) {\n    |            ^^", "previous_filename": "src/test/ui/lifetimes/lifetime-bound-will-change-warning.stderr"}, {"sha": "10105c5ccecbb6b50742c200ffa72024a498e988", "filename": "src/test/ui/lifetimes/lifetime-bound-will-change-warning.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.nll.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error[E0521]: borrowed data escapes outside of function\n-  --> $DIR/lifetime-bound-will-change-warning.rs:34:5\n+  --> $DIR/lifetime-bound-will-change-warning.rs:38:5\n    |\n LL | fn test2<'a>(x: &'a Box<dyn Fn() + 'a>) {\n    |          --  - `x` is a reference that is only valid in the function body\n@@ -13,7 +13,7 @@ LL |     ref_obj(x)\n    |     argument requires that `'a` must outlive `'static`\n \n error[E0521]: borrowed data escapes outside of function\n-  --> $DIR/lifetime-bound-will-change-warning.rs:39:5\n+  --> $DIR/lifetime-bound-will-change-warning.rs:45:5\n    |\n LL | fn test2cc<'a>(x: &'a Box<dyn Fn() + 'a>) {\n    |            --  - `x` is a reference that is only valid in the function body"}, {"sha": "0a082e1bae8bf705143816b4f2c336082188ab7e", "filename": "src/test/ui/lifetimes/lifetime-bound-will-change-warning.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.rs?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n // aux-build:lifetime_bound_will_change_warning_lib.rs\n \n // Test that various corner cases cause an error. These are tests\n@@ -31,12 +35,16 @@ fn test1cc<'a>(x: &'a Box<dyn Fn() + 'a>) {\n \n fn test2<'a>(x: &'a Box<dyn Fn() + 'a>) {\n     // but ref_obj will not, so warn.\n-    ref_obj(x) //~ ERROR mismatched types\n+    ref_obj(x)\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR borrowed data escapes\n }\n \n fn test2cc<'a>(x: &'a Box<dyn Fn() + 'a>) {\n     // same as test2, but cross crate\n-    lib::ref_obj(x) //~ ERROR mismatched types\n+    lib::ref_obj(x)\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR borrowed data escapes\n }\n \n fn test3<'a>(x: &'a Box<dyn Fn() + 'static>) {"}, {"sha": "60cd34938750a3a552a6dd3f1296c1705ed862b2", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.base.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex1-return-one-existing-name-if-else-using-impl.rs:11:20\n+  --> $DIR/ex1-return-one-existing-name-if-else-using-impl.rs:15:20\n    |\n LL |     fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n    |                   ----                 -------", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl.stderr"}, {"sha": "f8e275e9b14c86c41958fe7f9a775cf20b2998da", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.nll.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex1-return-one-existing-name-if-else-using-impl.rs:11:20\n+  --> $DIR/ex1-return-one-existing-name-if-else-using-impl.rs:15:20\n    |\n LL |     fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n    |            --     - let's call the lifetime of this reference `'1`"}, {"sha": "fbb523daa1f51d8225829e8af5f98e9767c5bd81", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.rs?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Foo {\n \n     fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32;\n@@ -8,7 +12,9 @@ impl Foo for () {\n \n     fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n \n-        if x > y { x } else { y } //~ ERROR lifetime mismatch\n+        if x > y { x } else { y }\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n \n     }\n "}, {"sha": "697950a00fb249daa06883761c8fa08bf36841ec", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-return-type-is-anon.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.base.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex1-return-one-existing-name-return-type-is-anon.rs:8:5\n+  --> $DIR/ex1-return-one-existing-name-return-type-is-anon.rs:12:5\n    |\n LL |   fn foo<'a>(&self, x: &'a i32) -> &i32 {\n    |                        -------     ----", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-return-type-is-anon.stderr"}, {"sha": "97af4b58cbf651721753d82a85585c0661e922ad", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-return-type-is-anon.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.nll.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex1-return-one-existing-name-return-type-is-anon.rs:8:5\n+  --> $DIR/ex1-return-one-existing-name-return-type-is-anon.rs:12:5\n    |\n LL |   fn foo<'a>(&self, x: &'a i32) -> &i32 {\n    |          --  - let's call the lifetime of this reference `'1`"}, {"sha": "704db7dc8b4054cd3d48cc1cfa087d8bdfd69d14", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-return-type-is-anon.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.rs?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,11 +1,17 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Foo {\n   field: i32\n }\n \n impl Foo {\n   fn foo<'a>(&self, x: &'a i32) -> &i32 {\n \n-    x //~ ERROR lifetime mismatch\n+    x\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ ERROR lifetime may not live long enough\n \n   }\n "}, {"sha": "65644d03cdc1bda37d743f479a41f6f28aa9cc16", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-self-is-anon.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.base.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex1-return-one-existing-name-self-is-anon.rs:8:30\n+  --> $DIR/ex1-return-one-existing-name-self-is-anon.rs:12:30\n    |\n LL |     fn foo<'a>(&self, x: &'a Foo) -> &'a Foo {\n    |                -----                 -------", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-self-is-anon.stderr"}, {"sha": "00a348de4bc30146fddab3f3b0b190f4c2437e7b", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-self-is-anon.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.nll.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex1-return-one-existing-name-self-is-anon.rs:8:30\n+  --> $DIR/ex1-return-one-existing-name-self-is-anon.rs:12:30\n    |\n LL |     fn foo<'a>(&self, x: &'a Foo) -> &'a Foo {\n    |            --  - let's call the lifetime of this reference `'1`"}, {"sha": "a846c115c063844736a1774f968a17fcdf1606ac", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-self-is-anon.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.rs?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,11 +1,17 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Foo {\n     field: i32,\n }\n \n impl Foo {\n     fn foo<'a>(&self, x: &'a Foo) -> &'a Foo {\n \n-        if true { x } else { self } //~ ERROR lifetime mismatch\n+        if true { x } else { self }\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n \n     }\n }"}, {"sha": "9203d6603bd7ae2682ac9256af3de1ba2fc51743", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2a-push-one-existing-name-2.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-2.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-2.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-2.base.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/ex2a-push-one-existing-name-2.rs:6:12\n+  --> $DIR/ex2a-push-one-existing-name-2.rs:10:12\n    |\n LL | fn foo<'a>(x: Ref<i32>, y: &mut Vec<Ref<'a, i32>>) {\n    |               -------- help: add explicit lifetime `'a` to the type of `x`: `Ref<'a, i32>`", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex2a-push-one-existing-name-2.stderr"}, {"sha": "5ab8b449816cc1e082e88125222a786a8df96bc0", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2a-push-one-existing-name-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-2.nll.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/ex2a-push-one-existing-name-2.rs:6:5\n+  --> $DIR/ex2a-push-one-existing-name-2.rs:10:5\n    |\n LL | fn foo<'a>(x: Ref<i32>, y: &mut Vec<Ref<'a, i32>>) {\n    |               -------- help: add explicit lifetime `'a` to the type of `x`: `Ref<'a, i32>`"}, {"sha": "7e776baa6a91db77aedbd724a1e373f0843ae14e", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2a-push-one-existing-name-2.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-2.rs?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Ref<'a, T: 'a> {\n     data: &'a T\n }"}, {"sha": "ec1ab19d5a43c5ebe77a7c239110d3d6009e6b51", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2a-push-one-existing-name-early-bound.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.base.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error[E0621]: explicit lifetime required in the type of `y`\n-  --> $DIR/ex2a-push-one-existing-name-early-bound.rs:8:12\n+  --> $DIR/ex2a-push-one-existing-name-early-bound.rs:12:12\n    |\n LL | fn baz<'a, 'b, T>(x: &mut Vec<&'a T>, y: &T)\n    |                                          -- help: add explicit lifetime `'a` to the type of `y`: `&'a T`", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex2a-push-one-existing-name-early-bound.stderr"}, {"sha": "bd5864bae3202564d5a86e5e9159950b24087db9", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2a-push-one-existing-name-early-bound.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.nll.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error[E0621]: explicit lifetime required in the type of `y`\n-  --> $DIR/ex2a-push-one-existing-name-early-bound.rs:8:5\n+  --> $DIR/ex2a-push-one-existing-name-early-bound.rs:12:5\n    |\n LL | fn baz<'a, 'b, T>(x: &mut Vec<&'a T>, y: &T)\n    |                                          -- help: add explicit lifetime `'a` to the type of `y`: `&'a T`"}, {"sha": "73613a9bf35072a5c2de0def1a073b3bb7506a24", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2a-push-one-existing-name-early-bound.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.rs?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Foo<'a> {}\n impl<'a, T> Foo<'a> for T {}\n "}, {"sha": "ab0e202a32eff7b8b9d72375d8e5ea168616b31e", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2a-push-one-existing-name.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name.base.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error[E0621]: explicit lifetime required in the type of `y`\n-  --> $DIR/ex2a-push-one-existing-name.rs:6:12\n+  --> $DIR/ex2a-push-one-existing-name.rs:10:12\n    |\n LL | fn foo<'a>(x: &mut Vec<Ref<'a, i32>>, y: Ref<i32>) {\n    |                                          -------- help: add explicit lifetime `'a` to the type of `y`: `Ref<'a, i32>`", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex2a-push-one-existing-name.stderr"}, {"sha": "01b7f45d81b58b682eccef4c76d7996428f46e4f", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2a-push-one-existing-name.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name.nll.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error[E0621]: explicit lifetime required in the type of `y`\n-  --> $DIR/ex2a-push-one-existing-name.rs:6:5\n+  --> $DIR/ex2a-push-one-existing-name.rs:10:5\n    |\n LL | fn foo<'a>(x: &mut Vec<Ref<'a, i32>>, y: Ref<i32>) {\n    |                                          -------- help: add explicit lifetime `'a` to the type of `y`: `Ref<'a, i32>`"}, {"sha": "5773e13304c15217293319991935dbc10ebbf586", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2a-push-one-existing-name.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name.rs?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Ref<'a, T: 'a> {\n     data: &'a T\n }"}, {"sha": "58a2088df5e7715a1c2bd58dc6e65dee9317c8ed", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2b-push-no-existing-names.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2b-push-no-existing-names.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2b-push-no-existing-names.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2b-push-no-existing-names.base.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex2b-push-no-existing-names.rs:6:12\n+  --> $DIR/ex2b-push-no-existing-names.rs:10:12\n    |\n LL | fn foo(x: &mut Vec<Ref<i32>>, y: Ref<i32>) {\n    |                    --------      -------- these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex2b-push-no-existing-names.stderr"}, {"sha": "afe413bcca5cce28c38fdf9446aa83b679d1cb23", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2b-push-no-existing-names.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2b-push-no-existing-names.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2b-push-no-existing-names.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2b-push-no-existing-names.nll.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex2b-push-no-existing-names.rs:6:5\n+  --> $DIR/ex2b-push-no-existing-names.rs:10:5\n    |\n LL | fn foo(x: &mut Vec<Ref<i32>>, y: Ref<i32>) {\n    |        -                      - has type `Ref<'1, i32>`"}, {"sha": "8d830343b08bef1ab01788f46737922ba2ed3f9c", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2b-push-no-existing-names.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2b-push-no-existing-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2b-push-no-existing-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2b-push-no-existing-names.rs?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,9 +1,15 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Ref<'a, T: 'a> {\n     data: &'a T\n }\n \n fn foo(x: &mut Vec<Ref<i32>>, y: Ref<i32>) {\n-    x.push(y); //~ ERROR lifetime mismatch\n+    x.push(y);\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "63033b8d16e8b027484de673b59cee762e03efd5", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2c-push-inference-variable.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2c-push-inference-variable.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2c-push-inference-variable.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2c-push-inference-variable.base.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex2c-push-inference-variable.rs:7:12\n+  --> $DIR/ex2c-push-inference-variable.rs:11:12\n    |\n LL | fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n    |                                   ------------      ------------ these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex2c-push-inference-variable.stderr"}, {"sha": "63a0f2409d9b4af647c649c8e371e51269d3d803", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2c-push-inference-variable.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2c-push-inference-variable.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2c-push-inference-variable.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2c-push-inference-variable.nll.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex2c-push-inference-variable.rs:7:5\n+  --> $DIR/ex2c-push-inference-variable.rs:11:5\n    |\n LL | fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n    |            --  -- lifetime `'c` defined here"}, {"sha": "f676eb403a8aae3d15e12b5761863ef48c7f8e19", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2c-push-inference-variable.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2c-push-inference-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2c-push-inference-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2c-push-inference-variable.rs?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,10 +1,16 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Ref<'a, T: 'a> {\n     data: &'a T\n }\n \n fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n     let z = Ref { data: y.data };\n-    x.push(z); //~ ERROR lifetime mismatch\n+    x.push(z);\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "a50985ca704c7d461a503c753c9114ac39fdd7bf", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2d-push-inference-variable-2.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2d-push-inference-variable-2.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2d-push-inference-variable-2.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2d-push-inference-variable-2.base.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex2d-push-inference-variable-2.rs:6:33\n+  --> $DIR/ex2d-push-inference-variable-2.rs:10:33\n    |\n LL | fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n    |                                   ------------      ------------ these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex2d-push-inference-variable-2.stderr"}, {"sha": "0d7461fa68262f9cee4b8f84faa4c6a90422dfa9", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2d-push-inference-variable-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2d-push-inference-variable-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2d-push-inference-variable-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2d-push-inference-variable-2.nll.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex2d-push-inference-variable-2.rs:8:5\n+  --> $DIR/ex2d-push-inference-variable-2.rs:13:5\n    |\n LL | fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n    |            --  -- lifetime `'c` defined here"}, {"sha": "e65638fb0df13e7d32c77eb2b20a683732840500", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2d-push-inference-variable-2.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2d-push-inference-variable-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2d-push-inference-variable-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2d-push-inference-variable-2.rs?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,11 +1,17 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Ref<'a, T: 'a> {\n     data: &'a T\n }\n \n fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n-    let a: &mut Vec<Ref<i32>> = x; //~ ERROR lifetime mismatch\n+    let a: &mut Vec<Ref<i32>> = x;\n+    //[base]~^ ERROR lifetime mismatch\n     let b = Ref { data: y.data };\n     a.push(b);\n+    //[nll]~^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "dbe965a340c40c6dcfd171698dcd97b3104538b1", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2e-push-inference-variable-3.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2e-push-inference-variable-3.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2e-push-inference-variable-3.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2e-push-inference-variable-3.base.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex2e-push-inference-variable-3.rs:6:33\n+  --> $DIR/ex2e-push-inference-variable-3.rs:10:33\n    |\n LL | fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n    |                                   ------------      ------------ these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex2e-push-inference-variable-3.stderr"}, {"sha": "74b2739b2c3fb3f11571dac8f0792fe68b3c5e5c", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2e-push-inference-variable-3.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2e-push-inference-variable-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2e-push-inference-variable-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2e-push-inference-variable-3.nll.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex2e-push-inference-variable-3.rs:8:5\n+  --> $DIR/ex2e-push-inference-variable-3.rs:13:5\n    |\n LL | fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n    |            --  -- lifetime `'c` defined here"}, {"sha": "036afe09be6ef2e171ea55e2758b9badde6de5fe", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2e-push-inference-variable-3.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2e-push-inference-variable-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2e-push-inference-variable-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2e-push-inference-variable-3.rs?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,11 +1,17 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Ref<'a, T: 'a> {\n     data: &'a T\n }\n \n fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n-    let a: &mut Vec<Ref<i32>> = x; //~ ERROR lifetime mismatch\n+    let a: &mut Vec<Ref<i32>> = x;\n+    //[base]~^ ERROR lifetime mismatch\n     let b = Ref { data: y.data };\n     Vec::push(a, b);\n+    //[nll]~^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "459f18dcc3d77c6a2978a81884676aaa2814fa35", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-2.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-2.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-2.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-2.base.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-2.rs:2:10\n+  --> $DIR/ex3-both-anon-regions-2.rs:6:10\n    |\n LL | fn foo(&mut (ref mut v, w): &mut (&u8, &u8), x: &u8) {\n    |                                   ---           --- these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-2.stderr"}, {"sha": "b072c12ea3bcb9e4e4e0b778081d276da6c64f29", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-2.nll.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex3-both-anon-regions-2.rs:2:5\n+  --> $DIR/ex3-both-anon-regions-2.rs:6:5\n    |\n LL | fn foo(&mut (ref mut v, w): &mut (&u8, &u8), x: &u8) {\n    |                                   -             - let's call the lifetime of this reference `'1`"}, {"sha": "668cadd614b59368a83865a00a32d7668beda5bb", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-2.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-2.rs?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,11 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn foo(&mut (ref mut v, w): &mut (&u8, &u8), x: &u8) {\n-    *v = x; //~ ERROR lifetime mismatch\n+    *v = x;\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "28df5f18369551f065e62e6029b253096212a329", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-3.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-3.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-3.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-3.base.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-3.rs:2:13\n+  --> $DIR/ex3-both-anon-regions-3.rs:6:13\n    |\n LL | fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n    |                     ---                 --- these two types are declared with different lifetimes...\n@@ -13,7 +13,7 @@ LL | fn foo<'a>(z: &mut Vec<(&'a u8,&u8)>, (x, y): (&'a u8, &u8)) {\n    |       ++++               ++                     ++\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-3.rs:2:15\n+  --> $DIR/ex3-both-anon-regions-3.rs:6:15\n    |\n LL | fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n    |                         ---                  --- these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-3.stderr"}, {"sha": "c1d809abad5b96db10001ac7dc561de94c62dc50", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-3.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-3.nll.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex3-both-anon-regions-3.rs:2:5\n+  --> $DIR/ex3-both-anon-regions-3.rs:6:5\n    |\n LL | fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n    |                     -                   - let's call the lifetime of this reference `'1`\n@@ -14,7 +14,7 @@ LL | fn foo<'a>(z: &mut Vec<(&'a u8,&u8)>, (x, y): (&'a u8, &u8)) {\n    |       ++++               ++                     ++\n \n error: lifetime may not live long enough\n-  --> $DIR/ex3-both-anon-regions-3.rs:2:5\n+  --> $DIR/ex3-both-anon-regions-3.rs:6:5\n    |\n LL | fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n    |                         -                    - let's call the lifetime of this reference `'3`"}, {"sha": "4d7fd63e5b9322e291cc025112fd5c002a5b9b55", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-3.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-3.rs?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,6 +1,13 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n-    z.push((x,y)); //~ ERROR lifetime mismatch\n-    //~^ ERROR lifetime mismatch\n+    z.push((x,y));\n+    //[base]~^ ERROR lifetime mismatch\n+    //[base]~| ERROR lifetime mismatch\n+    //[nll]~^^^ ERROR lifetime may not live long enough\n+    //[nll]~| ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "32263cd56ee7262f18c4c912169041d8c7d84f4b", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-2.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.base.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-both-are-structs-2.rs:7:11\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-2.rs:11:11\n    |\n LL | fn foo(mut x: Ref, y: Ref) {\n    |               ---     --- these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-2.stderr"}, {"sha": "bfde4025194ae3833cd88420930c461918d77f08", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.nll.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex3-both-anon-regions-both-are-structs-2.rs:7:5\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-2.rs:11:5\n    |\n LL | fn foo(mut x: Ref, y: Ref) {\n    |        -----       - has type `Ref<'_, '1>`"}, {"sha": "30764e2ad17c0cea6fe787a6eb371bf48dc6be33", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-2.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.rs?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,10 +1,16 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Ref<'a, 'b> {\n     a: &'a u32,\n     b: &'b u32,\n }\n \n fn foo(mut x: Ref, y: Ref) {\n-    x.b = y.b; //~ ERROR lifetime mismatch\n+    x.b = y.b;\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "fb4a2f8f6fe5d331e542b4fcef22d81e47b002a5", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-3.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.base.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-both-are-structs-3.rs:7:11\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-3.rs:11:11\n    |\n LL | fn foo(mut x: Ref) {\n    |               --- this type is declared with multiple lifetimes...", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-3.stderr"}, {"sha": "9ba2c38d6fecea50064ead263ce00372fdff9ca4", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-3.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.nll.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex3-both-anon-regions-both-are-structs-3.rs:7:5\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-3.rs:11:5\n    |\n LL | fn foo(mut x: Ref) {\n    |        -----"}, {"sha": "665be2aa2c8d6d3bafda0f4139d89693aa6ade1b", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-3.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.rs?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,10 +1,16 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Ref<'a, 'b> {\n     a: &'a u32,\n     b: &'b u32,\n }\n \n fn foo(mut x: Ref) {\n-    x.a = x.b; //~ ERROR lifetime mismatch\n+    x.a = x.b;\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "66a993e0340445945f98fcd467dae499c66aeea9", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-earlybound-regions.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.base.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-both-are-structs-earlybound-regions.rs:9:12\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-earlybound-regions.rs:13:12\n    |\n LL | fn foo<'a, 'b>(mut x: Vec<Ref<'a>>, y: Ref<'b>)\n    |                           -------      ------- these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-earlybound-regions.stderr"}, {"sha": "ddf878ba9f914a75192370171ff6796362752c6c", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-earlybound-regions.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.nll.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex3-both-anon-regions-both-are-structs-earlybound-regions.rs:9:5\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-earlybound-regions.rs:13:5\n    |\n LL | fn foo<'a, 'b>(mut x: Vec<Ref<'a>>, y: Ref<'b>)\n    |        --  -- lifetime `'b` defined here"}, {"sha": "6e151879f4df13fe9330b9c70843a310c493713e", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-earlybound-regions.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.rs?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Ref<'a> {\n     x: &'a u32,\n }\n@@ -6,7 +10,9 @@ fn foo<'a, 'b>(mut x: Vec<Ref<'a>>, y: Ref<'b>)\n     where &'a (): Sized,\n           &'b u32: Sized\n {\n-    x.push(y); //~ ERROR lifetime mismatch\n+    x.push(y);\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "5453dbb08f181d2460cd1ce557a4d0218af2136c", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-latebound-regions.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.base.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-both-are-structs-latebound-regions.rs:6:12\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-latebound-regions.rs:10:12\n    |\n LL | fn foo<'a, 'b>(mut x: Vec<Ref<'a>>, y: Ref<'b>) {\n    |                           -------      ------- these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-latebound-regions.stderr"}, {"sha": "cfd3186c80982d71516314eace8bb44180c4fab8", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-latebound-regions.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.nll.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex3-both-anon-regions-both-are-structs-latebound-regions.rs:6:5\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-latebound-regions.rs:10:5\n    |\n LL | fn foo<'a, 'b>(mut x: Vec<Ref<'a>>, y: Ref<'b>) {\n    |        --  -- lifetime `'b` defined here"}, {"sha": "ecc04fbc8adc1001f35e8a00a5190fc370762e4f", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-latebound-regions.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.rs?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,9 +1,15 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Ref<'a> {\n     x: &'a u32,\n }\n \n fn foo<'a, 'b>(mut x: Vec<Ref<'a>>, y: Ref<'b>) {\n-    x.push(y); //~ ERROR lifetime mismatch\n+    x.push(y);\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "23e752e4a0e9d5765ff78b7ebc42eca46da51f07", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.base.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-both-are-structs.rs:6:12\n+  --> $DIR/ex3-both-anon-regions-both-are-structs.rs:10:12\n    |\n LL | fn foo(mut x: Vec<Ref>, y: Ref) {\n    |                   ---      --- these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs.stderr"}, {"sha": "fa906a90ccc6fc35e63b11de94a6b54f09f65078", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.nll.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex3-both-anon-regions-both-are-structs.rs:6:5\n+  --> $DIR/ex3-both-anon-regions-both-are-structs.rs:10:5\n    |\n LL | fn foo(mut x: Vec<Ref>, y: Ref) {\n    |        -----            - has type `Ref<'1>`"}, {"sha": "f002dfc208f111b15db3bf4760f5a1387cc3c22d", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.rs?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,9 +1,15 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Ref<'a> {\n     x: &'a u32,\n }\n \n fn foo(mut x: Vec<Ref>, y: Ref) {\n-    x.push(y); //~ ERROR lifetime mismatch\n+    x.push(y);\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "b5fbc091ebc51fb026b8ab87cf6d6973ca4c158e", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-latebound-regions.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.base.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-latebound-regions.rs:2:12\n+  --> $DIR/ex3-both-anon-regions-latebound-regions.rs:6:12\n    |\n LL | fn foo<'a,'b>(x: &mut Vec<&'a u8>, y: &'b u8) {\n    |                           ------      ------ these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-latebound-regions.stderr"}, {"sha": "d59bee087489d024752f3643ee06eab9e6919a13", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-latebound-regions.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.nll.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex3-both-anon-regions-latebound-regions.rs:2:5\n+  --> $DIR/ex3-both-anon-regions-latebound-regions.rs:6:5\n    |\n LL | fn foo<'a,'b>(x: &mut Vec<&'a u8>, y: &'b u8) {\n    |        -- -- lifetime `'b` defined here"}, {"sha": "f0a81eba4123971ef00edbea253d35d29be04903", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-latebound-regions.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.rs?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,11 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn foo<'a,'b>(x: &mut Vec<&'a u8>, y: &'b u8) {\n-    x.push(y); //~ ERROR lifetime mismatch\n+    x.push(y);\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "3d9138f02c67be6f9e9cd9f874bb6b8d38b38077", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-2.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.base.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-one-is-struct-2.rs:4:9\n+  --> $DIR/ex3-both-anon-regions-one-is-struct-2.rs:8:9\n    |\n LL | fn foo(mut x: Ref, y: &u32) {\n    |               ---     ----", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-2.stderr"}, {"sha": "cac2a9470a8be6f914b063cf861a1c2073e77c5b", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-2.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.nll.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex3-both-anon-regions-one-is-struct-2.rs:4:5\n+  --> $DIR/ex3-both-anon-regions-one-is-struct-2.rs:8:5\n    |\n LL | fn foo(mut x: Ref, y: &u32) {\n    |        -----          - let's call the lifetime of this reference `'2`\n@@ -9,7 +9,7 @@ LL |     y = x.b;\n    |     ^^^^^^^ assignment requires that `'1` must outlive `'2`\n \n error[E0384]: cannot assign to immutable argument `y`\n-  --> $DIR/ex3-both-anon-regions-one-is-struct-2.rs:4:5\n+  --> $DIR/ex3-both-anon-regions-one-is-struct-2.rs:8:5\n    |\n LL | fn foo(mut x: Ref, y: &u32) {\n    |                    - help: consider making this binding mutable: `mut y`"}, {"sha": "31ef28e726d2c7124ba9de5d40e36219a3d3f072", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-2.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.rs?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,7 +1,14 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Ref<'a, 'b> { a: &'a u32, b: &'b u32 }\n \n fn foo(mut x: Ref, y: &u32) {\n-    y = x.b; //~ ERROR lifetime mismatch\n+    y = x.b;\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ ERROR lifetime may not live long enough\n+    //[nll]~| ERROR cannot assign to immutable argument\n }\n \n fn main() { }"}, {"sha": "77e035562a809ee1a35d01f5019756e6c9d39244", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-3.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.base.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-one-is-struct-3.rs:4:11\n+  --> $DIR/ex3-both-anon-regions-one-is-struct-3.rs:8:11\n    |\n LL | fn foo(mut y: Ref, x: &u32) {\n    |               ---     ---- these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-3.stderr"}, {"sha": "ba41cc3e908c524ac3320357445db61b2bcd50b5", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-3.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.nll.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex3-both-anon-regions-one-is-struct-3.rs:4:5\n+  --> $DIR/ex3-both-anon-regions-one-is-struct-3.rs:8:5\n    |\n LL | fn foo(mut y: Ref, x: &u32) {\n    |        -----          - let's call the lifetime of this reference `'1`"}, {"sha": "9a5ac0a97694644543e656dd85ac684c6fe204d9", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-3.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.rs?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,7 +1,13 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Ref<'a, 'b> { a: &'a u32, b: &'b u32 }\n \n fn foo(mut y: Ref, x: &u32) {\n-    y.b = x; //~ ERROR lifetime mismatch\n+    y.b = x;\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "6cbbabb150a645d5976b3204b9dfd9e228766402", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-4.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.base.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-one-is-struct-4.rs:4:11\n+  --> $DIR/ex3-both-anon-regions-one-is-struct-4.rs:8:11\n    |\n LL | fn foo(mut y: Ref, x: &u32) {\n    |               ---     ---- these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-4.stderr"}, {"sha": "c9570aa720620b07dddd4c2a39346a9a4adc819b", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-4.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.nll.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex3-both-anon-regions-one-is-struct-4.rs:4:5\n+  --> $DIR/ex3-both-anon-regions-one-is-struct-4.rs:8:5\n    |\n LL | fn foo(mut y: Ref, x: &u32) {\n    |        -----          - let's call the lifetime of this reference `'1`"}, {"sha": "9a5ac0a97694644543e656dd85ac684c6fe204d9", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-4.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.rs?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,7 +1,13 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Ref<'a, 'b> { a: &'a u32, b: &'b u32 }\n \n fn foo(mut y: Ref, x: &u32) {\n-    y.b = x; //~ ERROR lifetime mismatch\n+    y.b = x;\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "7caf19e89357c6991bc8bbc80b9ec0041d6b7e59", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.base.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-one-is-struct.rs:7:11\n+  --> $DIR/ex3-both-anon-regions-one-is-struct.rs:11:11\n    |\n LL | fn foo(mut x: Ref, y: &u32) {\n    |               ---     ---- these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct.stderr"}, {"sha": "9b295248fc99e6f446c44f10f63516dc60a308a1", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.nll.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex3-both-anon-regions-one-is-struct.rs:7:5\n+  --> $DIR/ex3-both-anon-regions-one-is-struct.rs:11:5\n    |\n LL | fn foo(mut x: Ref, y: &u32) {\n    |        -----          - let's call the lifetime of this reference `'1`"}, {"sha": "0b4ee5adacc074f95d25a16fd5402b419f621d90", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.rs?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,10 +1,16 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Ref<'a, 'b> {\n     a: &'a u32,\n     b: &'b u32,\n }\n \n fn foo(mut x: Ref, y: &u32) {\n-    x.b = y; //~ ERROR lifetime mismatch\n+    x.b = y;\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "add05a11193a3757d0f934b0af6b4c7ea2107e8a", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-return-type-is-anon.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.base.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-return-type-is-anon.rs:7:5\n+  --> $DIR/ex3-both-anon-regions-return-type-is-anon.rs:11:5\n    |\n LL |   fn foo<'a>(&self, x: &i32) -> &i32 {\n    |                        ----     ----", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-return-type-is-anon.stderr"}, {"sha": "188ff4d77e025be1590bd19484ca7f354f2c4da5", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-return-type-is-anon.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.nll.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex3-both-anon-regions-return-type-is-anon.rs:7:5\n+  --> $DIR/ex3-both-anon-regions-return-type-is-anon.rs:11:5\n    |\n LL |   fn foo<'a>(&self, x: &i32) -> &i32 {\n    |              -         - let's call the lifetime of this reference `'1`"}, {"sha": "a4f838c0747490a4b0d199d14fff65dfd8add3bf", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-return-type-is-anon.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.rs?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,10 +1,16 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Foo {\n   field: i32\n }\n \n impl Foo {\n   fn foo<'a>(&self, x: &i32) -> &i32 {\n-    x //~ ERROR lifetime mismatch\n+    x\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ ERROR lifetime may not live long enough\n   }\n }\n "}, {"sha": "365a0ab3b102767f93902e5662d804d4c406bada", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-self-is-anon.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.base.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-self-is-anon.rs:7:19\n+  --> $DIR/ex3-both-anon-regions-self-is-anon.rs:11:19\n    |\n LL |     fn foo<'a>(&self, x: &Foo) -> &Foo {\n    |                          ----     ----", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-self-is-anon.stderr"}, {"sha": "ed9b81f7d019947c68cc5ac51e3990d0c8097d09", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-self-is-anon.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.nll.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex3-both-anon-regions-self-is-anon.rs:7:19\n+  --> $DIR/ex3-both-anon-regions-self-is-anon.rs:11:19\n    |\n LL |     fn foo<'a>(&self, x: &Foo) -> &Foo {\n    |                -         - let's call the lifetime of this reference `'1`"}, {"sha": "c5854537a5ff46526599b87a1d6d8960e0b70476", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-self-is-anon.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.rs?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,10 +1,16 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Foo {\n     field: i32,\n }\n \n impl Foo {\n     fn foo<'a>(&self, x: &Foo) -> &Foo {\n-        if true { x } else { self } //~ ERROR lifetime mismatch\n+        if true { x } else { self }\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n }\n "}, {"sha": "755e9798170cc602e721ba5c05ef39773c2eb9b9", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-fn-items.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.base.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-using-fn-items.rs:2:10\n+  --> $DIR/ex3-both-anon-regions-using-fn-items.rs:6:10\n    |\n LL | fn foo(x:fn(&u8, &u8), y: Vec<&u8>, z: &u8) {\n    |                               ---      --- these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-fn-items.stderr"}, {"sha": "904a09610fceca30589c8f39fce42527b3caf637", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-fn-items.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.nll.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex3-both-anon-regions-using-fn-items.rs:2:3\n+  --> $DIR/ex3-both-anon-regions-using-fn-items.rs:6:3\n    |\n LL | fn foo(x:fn(&u8, &u8), y: Vec<&u8>, z: &u8) {\n    |                               -        - let's call the lifetime of this reference `'1`\n@@ -14,7 +14,7 @@ LL | fn foo<'a>(x:fn(&u8, &u8), y: Vec<&'a u8>, z: &'a u8) {\n    |       ++++                         ++          ++\n \n error[E0596]: cannot borrow `y` as mutable, as it is not declared as mutable\n-  --> $DIR/ex3-both-anon-regions-using-fn-items.rs:2:3\n+  --> $DIR/ex3-both-anon-regions-using-fn-items.rs:6:3\n    |\n LL | fn foo(x:fn(&u8, &u8), y: Vec<&u8>, z: &u8) {\n    |                        - help: consider changing this to be mutable: `mut y`"}, {"sha": "4b2280b66f2882814417689b2b0ce3c7f373caf7", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-fn-items.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.rs?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,12 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn foo(x:fn(&u8, &u8), y: Vec<&u8>, z: &u8) {\n-  y.push(z); //~ ERROR lifetime mismatch\n+  y.push(z);\n+  //[base]~^ ERROR lifetime mismatch\n+  //[nll]~^^ ERROR lifetime may not live long enough\n+  //[nll]~| ERROR cannot borrow\n }\n \n fn main() { }"}, {"sha": "6a8b07dbec87388ad8b2a909ebf9450e59c9c310", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-impl-items.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.base.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-using-impl-items.rs:6:16\n+  --> $DIR/ex3-both-anon-regions-using-impl-items.rs:10:16\n    |\n LL |     fn foo(x: &mut Vec<&u8>, y: &u8) {\n    |                        ---      --- these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-impl-items.stderr"}, {"sha": "46b9e98907d155884f8d3b6f25a660d0a00d1ab8", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-impl-items.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.nll.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex3-both-anon-regions-using-impl-items.rs:6:9\n+  --> $DIR/ex3-both-anon-regions-using-impl-items.rs:10:9\n    |\n LL |     fn foo(x: &mut Vec<&u8>, y: &u8) {\n    |                        -        - let's call the lifetime of this reference `'1`"}, {"sha": "242a2d6fd4f69bb3300074320cb09912e8f66b36", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-impl-items.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.rs?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,9 +1,15 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Foo {\n     fn foo<'a>(x: &mut Vec<&u8>, y: &u8);\n }\n impl Foo for () {\n     fn foo(x: &mut Vec<&u8>, y: &u8) {\n-        x.push(y); //~ ERROR lifetime mismatch\n+        x.push(y);\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n }\n fn main() {}"}, {"sha": "e38dd0fc6eefc3d0317b39e3e87fed337a05b8f4", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-trait-objects.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.base.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-using-trait-objects.rs:2:10\n+  --> $DIR/ex3-both-anon-regions-using-trait-objects.rs:6:10\n    |\n LL | fn foo(x:Box<dyn Fn(&u8, &u8)> , y: Vec<&u8>, z: &u8) {\n    |                     ---  --- these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-trait-objects.stderr"}, {"sha": "54172a845d77eb2400a008410a968ec9ee714f85", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-trait-objects.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.nll.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex3-both-anon-regions-using-trait-objects.rs:2:3\n+  --> $DIR/ex3-both-anon-regions-using-trait-objects.rs:6:3\n    |\n LL | fn foo(x:Box<dyn Fn(&u8, &u8)> , y: Vec<&u8>, z: &u8) {\n    |                                         -        - let's call the lifetime of this reference `'1`\n@@ -14,7 +14,7 @@ LL | fn foo<'a>(x:Box<dyn Fn(&'a u8, &'a u8)> , y: Vec<&u8>, z: &u8) {\n    |       ++++               ++      ++\n \n error[E0596]: cannot borrow `y` as mutable, as it is not declared as mutable\n-  --> $DIR/ex3-both-anon-regions-using-trait-objects.rs:2:3\n+  --> $DIR/ex3-both-anon-regions-using-trait-objects.rs:6:3\n    |\n LL | fn foo(x:Box<dyn Fn(&u8, &u8)> , y: Vec<&u8>, z: &u8) {\n    |                                  - help: consider changing this to be mutable: `mut y`"}, {"sha": "b93d75b156d5a803cf13f5b079a2c7c9a1c42831", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-trait-objects.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.rs?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,12 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn foo(x:Box<dyn Fn(&u8, &u8)> , y: Vec<&u8>, z: &u8) {\n-  y.push(z); //~ ERROR lifetime mismatch\n+  y.push(z);\n+  //[base]~^ ERROR lifetime mismatch\n+  //[nll]~^^ ERROR lifetime may not live long enough\n+  //[nll]~| ERROR cannot borrow\n }\n \n fn main() { }"}, {"sha": "dd96c6eef68e71d9c548c92858806ab0160ca89a", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions.base.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions.rs:2:12\n+  --> $DIR/ex3-both-anon-regions.rs:6:12\n    |\n LL | fn foo(x: &mut Vec<&u8>, y: &u8) {\n    |                    ---      --- these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions.stderr"}, {"sha": "48e09e37241dab0205f9a8b20c0f86ea293cbb51", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions.nll.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ex3-both-anon-regions.rs:2:5\n+  --> $DIR/ex3-both-anon-regions.rs:6:5\n    |\n LL | fn foo(x: &mut Vec<&u8>, y: &u8) {\n    |                    -        - let's call the lifetime of this reference `'1`"}, {"sha": "b1d30e83b6213cc64aadf227cd083e60935624a8", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions.rs?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,11 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn foo(x: &mut Vec<&u8>, y: &u8) {\n-    x.push(y); //~ ERROR lifetime mismatch\n+    x.push(y);\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "ba672f2971820251ce4c1b51c0e26bcdf4459ec9", "filename": "src/test/ui/lifetimes/lifetime-errors/issue_74400.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fissue_74400.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fissue_74400.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fissue_74400.base.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue_74400.rs:12:5\n+  --> $DIR/issue_74400.rs:16:5\n    |\n LL |     f(data, identity)\n    |     ^ implementation of `FnOnce` is not general enough", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/issue_74400.stderr"}, {"sha": "645d14cd54b89af3fab70f55be07649d7cd9964b", "filename": "src/test/ui/lifetimes/lifetime-errors/issue_74400.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fissue_74400.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fissue_74400.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fissue_74400.nll.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/issue_74400.rs:12:5\n+  --> $DIR/issue_74400.rs:16:5\n    |\n LL |     f(data, identity)\n    |     ^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n@@ -10,21 +10,21 @@ LL | fn g<T: 'static>(data: &[T]) {\n    |       +++++++++\n \n error[E0308]: mismatched types\n-  --> $DIR/issue_74400.rs:12:5\n+  --> $DIR/issue_74400.rs:16:5\n    |\n LL |     f(data, identity)\n    |     ^^^^^^^^^^^^^^^^^ one type is more general than the other\n    |\n    = note: expected type `for<'r> Fn<(&'r T,)>`\n               found type `Fn<(&T,)>`\n note: the lifetime requirement is introduced here\n-  --> $DIR/issue_74400.rs:8:34\n+  --> $DIR/issue_74400.rs:12:34\n    |\n LL | fn f<T, S>(data: &[T], key: impl Fn(&T) -> S) {\n    |                                  ^^^^^^^^^^^\n \n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue_74400.rs:12:5\n+  --> $DIR/issue_74400.rs:16:5\n    |\n LL |     f(data, identity)\n    |     ^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough"}, {"sha": "fdaf2f8a591c9053950f79abb472095bbcd880f5", "filename": "src/test/ui/lifetimes/lifetime-errors/issue_74400.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fissue_74400.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fissue_74400.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fissue_74400.rs?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,6 +1,10 @@\n //! Regression test for #74400: Type mismatch in function arguments E0631, E0271 are falsely\n //! recognized as E0308 mismatched types.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n use std::convert::identity;\n \n fn main() {}\n@@ -9,5 +13,9 @@ fn f<T, S>(data: &[T], key: impl Fn(&T) -> S) {\n }\n \n fn g<T>(data: &[T]) {\n-    f(data, identity) //~ ERROR implementation of `FnOnce` is not general\n+    f(data, identity)\n+    //[base]~^ ERROR implementation of `FnOnce` is not general\n+    //[nll]~^^ ERROR the parameter type\n+    //[nll]~| ERROR mismatched types\n+    //[nll]~| ERROR implementation of `FnOnce` is not general\n }"}, {"sha": "7dfe23f4f01ccf2cdc0d1611615fbd85fbd79757", "filename": "src/test/ui/lifetimes/re-empty-in-error.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Fre-empty-in-error.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Fre-empty-in-error.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fre-empty-in-error.base.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,11 +1,11 @@\n error[E0477]: the type `&'b ()` does not fulfill the required lifetime\n-  --> $DIR/re-empty-in-error.rs:8:5\n+  --> $DIR/re-empty-in-error.rs:12:5\n    |\n LL |     foo(&10);\n    |     ^^^\n    |\n note: type must outlive the empty lifetime as required by this binding\n-  --> $DIR/re-empty-in-error.rs:3:47\n+  --> $DIR/re-empty-in-error.rs:7:47\n    |\n LL | fn foo<'a>(_a: &'a u32) where for<'b> &'b (): 'a {\n    |                                               ^^", "previous_filename": "src/test/ui/lifetimes/re-empty-in-error.stderr"}, {"sha": "cddb5732f986889eda925fcdfdb1899ee749d186", "filename": "src/test/ui/lifetimes/re-empty-in-error.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Fre-empty-in-error.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Fre-empty-in-error.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fre-empty-in-error.nll.stderr?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,5 +1,5 @@\n error: higher-ranked lifetime error\n-  --> $DIR/re-empty-in-error.rs:8:5\n+  --> $DIR/re-empty-in-error.rs:12:5\n    |\n LL |     foo(&10);\n    |     ^^^^^^^^"}, {"sha": "fdb0a3002c4d9ffaf379633d245dbd1fe731def7", "filename": "src/test/ui/lifetimes/re-empty-in-error.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Fre-empty-in-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383fbeec637fcb7c407fffd5e1f3d37bf0dba9df/src%2Ftest%2Fui%2Flifetimes%2Fre-empty-in-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fre-empty-in-error.rs?ref=383fbeec637fcb7c407fffd5e1f3d37bf0dba9df", "patch": "@@ -1,10 +1,16 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n // We didn't have a single test mentioning\n // `ReEmpty` and this test changes that.\n fn foo<'a>(_a: &'a u32) where for<'b> &'b (): 'a {\n-    //~^ NOTE type must outlive the empty lifetime as required by this binding\n+    //[base]~^ NOTE type must outlive the empty lifetime as required by this binding\n }\n \n fn main() {\n     foo(&10);\n-    //~^ ERROR the type `&'b ()` does not fulfill the required lifetime\n+    //[base]~^ ERROR the type `&'b ()` does not fulfill the required lifetime\n+    //[nll]~^^ ERROR higher-ranked lifetime error\n+    //[nll]~| NOTE could not prove\n }"}]}