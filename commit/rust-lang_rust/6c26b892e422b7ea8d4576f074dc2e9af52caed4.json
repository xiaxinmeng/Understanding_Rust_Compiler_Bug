{"sha": "6c26b892e422b7ea8d4576f074dc2e9af52caed4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMjZiODkyZTQyMmI3ZWE4ZDQ1NzZmMDc0ZGMyZTlhZjUyY2FlZDQ=", "commit": {"author": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2011-12-06T05:05:22Z"}, "committer": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2011-12-19T04:44:21Z"}, "message": "Add argument metadata and aborted return value code.", "tree": {"sha": "759a76ffe609ffa06deb4a5e6509b24d1098100c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/759a76ffe609ffa06deb4a5e6509b24d1098100c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c26b892e422b7ea8d4576f074dc2e9af52caed4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c26b892e422b7ea8d4576f074dc2e9af52caed4", "html_url": "https://github.com/rust-lang/rust/commit/6c26b892e422b7ea8d4576f074dc2e9af52caed4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c26b892e422b7ea8d4576f074dc2e9af52caed4/comments", "author": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0752252737d530db5b81ebd3127c622f6ec92712", "url": "https://api.github.com/repos/rust-lang/rust/commits/0752252737d530db5b81ebd3127c622f6ec92712", "html_url": "https://github.com/rust-lang/rust/commit/0752252737d530db5b81ebd3127c622f6ec92712"}], "stats": {"total": 139, "additions": 130, "deletions": 9}, "files": [{"sha": "be70c1b3f3da4c57ad07e71c010edf1870aa96a1", "filename": "src/comp/middle/debuginfo.rs", "status": "modified", "additions": 110, "deletions": 7, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/6c26b892e422b7ea8d4576f074dc2e9af52caed4/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c26b892e422b7ea8d4576f074dc2e9af52caed4/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs?ref=6c26b892e422b7ea8d4576f074dc2e9af52caed4", "patch": "@@ -4,10 +4,10 @@ import lib::llvm::llvm;\n import lib::llvm::llvm::ValueRef;\n import middle::trans_common::*;\n import middle::ty;\n-import ast::ty;\n import syntax::{ast, codemap};\n+import ast::ty;\n \n-const LLVMDebugVersion: int = (9 << 16); //& 0xffff0000; // 0x80000 ?\n+const LLVMDebugVersion: int = (9 << 16);\n \n const DW_LANG_RUST: int = 0x9000;\n const DW_VIRTUALITY_none: int = 0;\n@@ -78,6 +78,8 @@ type subprogram_md = {name: str, file: str};\n type local_var_md = {id: ast::node_id};\n type tydesc_md = {hash: uint};\n type block_md = {start: codemap::loc, end: codemap::loc};\n+type argument_md = {id: ast::node_id};\n+type retval_md = {id: ast::node_id};\n \n type metadata_cache = hashmap<int, [debug_metadata]>;\n \n@@ -88,9 +90,11 @@ tag debug_metadata {\n     local_var_metadata(@metadata<local_var_md>);\n     tydesc_metadata(@metadata<tydesc_md>);\n     block_metadata(@metadata<block_md>);\n+    argument_metadata(@metadata<argument_md>);\n+    retval_metadata(@metadata<retval_md>);\n }\n \n-fn cast_safely<T, U>(val: T) -> U unsafe {\n+fn cast_safely<copy T, U>(val: T) -> U unsafe {\n     let val2 = val;\n     let val3 = unsafe::reinterpret_cast(val2);\n     unsafe::leak(val2);\n@@ -105,11 +109,13 @@ fn md_from_metadata<T>(val: debug_metadata) -> T unsafe {\n       local_var_metadata(md) { cast_safely(md) }\n       tydesc_metadata(md) { cast_safely(md) }\n       block_metadata(md) { cast_safely(md) }\n+      argument_metadata(md) { cast_safely(md) }\n+      retval_metadata(md) { cast_safely(md) }\n     }\n }\n \n-fn cached_metadata<T>(cache: metadata_cache, mdtag: int,\n-                      eq: block(md: T) -> bool) -> option::t<T> unsafe {\n+fn cached_metadata<copy T>(cache: metadata_cache, mdtag: int,\n+                           eq: block(md: T) -> bool) -> option::t<T> unsafe {\n     if cache.contains_key(mdtag) {\n         let items = cache.get(mdtag);\n         for item in items {\n@@ -270,7 +276,7 @@ fn function_metadata_from_block(bcx: @block_ctxt) -> @metadata<subprogram_md> {\n     let fcx = bcx_fcx(bcx);\n     let fn_node = cx.ast_map.get(fcx.id);\n     let fn_item = alt fn_node { ast_map::node_item(item) { item } };\n-    get_function_metadata(cx, fn_item, fcx.llfn)\n+    get_function_metadata(fcx, fn_item, fcx.llfn)\n }\n \n fn filename_from_span(cx: @crate_ctxt, sp: codemap::span) -> str {\n@@ -323,6 +329,98 @@ fn get_local_var_metadata(bcx: @block_ctxt, local: @ast::local)\n     ret mdval;\n }\n \n+//FIXME: consolidate with get_local_var_metadata\n+/*fn get_retval_metadata(bcx: @block_ctxt)\n+    -> @metadata<retval_md> unsafe {\n+    let fcx = bcx_fcx(bcx);\n+    let cx = fcx_ccx(fcx);\n+    let cache = cx.llmetadata;\n+    alt cached_metadata::<@metadata<retval_md>>(\n+        cache, ReturnVariableTag, {|md| md.data.id == fcx.id}) {\n+      option::some(md) { ret md; }\n+      option::none. {}\n+    }\n+    let item = alt option::get(cx.ast_map.find(fcx.id)) {\n+      ast_map::node_item(item) { item }\n+    };\n+    let loc = codemap::lookup_char_pos(cx.sess.get_codemap(),\n+                                       fcx.sp.lo);\n+    let ret_ty = alt item.node {\n+      ast::item_fn(f, _) { f.decl.output }\n+    };\n+    let ty_node = alt ret_ty.node {\n+      ast::ty_nil. { llnull() }\n+      _ { get_ty_metadata(cx, ty::node_id_to_type(ccx_tcx(cx), item.id),\n+                          ret_ty).node }\n+    };\n+    /*let ty_node = get_ty_metadata(cx, ty::node_id_to_type(ccx_tcx(cx), fcx.id),\n+                                  ty).node;*/\n+    //let ty = trans::node_id_type(cx, arg.id);\n+    //let tymd = get_ty_metadata(cx, ty, arg.ty);\n+    let filemd = get_file_metadata(cx, loc.filename);\n+    let fn_node = cx.ast_map.get(fcx.id);\n+    let fn_item = alt fn_node { ast_map::node_item(item) { item } };\n+    let context = get_function_metadata(fcx, fn_item, fcx.llfn);\n+    let lldata = [lltag(ReturnVariableTag),\n+                  context.node, // context\n+                  llstr(\"%0\"), // name\n+                  filemd.node,\n+                  lli32(loc.line as int), // line\n+                  ty_node,\n+                  lli32(0) //XXX flags\n+                 ];\n+    let mdnode = llmdnode(lldata);\n+    let mdval = @{node: mdnode, data: {id: fcx.id}};\n+    update_cache(cache, ReturnVariableTag, retval_metadata(mdval));\n+    let llptr = fcx.llretptr;\n+    let declargs = [llmdnode([llptr]), mdnode];\n+    trans_build::Call(bcx, cx.intrinsics.get(\"llvm.dbg.declare\"),\n+                      declargs);\n+    ret mdval;\n+}*/\n+\n+//FIXME: consolidate with get_local_var_metadata\n+fn get_arg_metadata(bcx: @block_ctxt, arg: ast::arg)\n+    -> @metadata<argument_md> unsafe {\n+    let fcx = bcx_fcx(bcx);\n+    let cx = fcx_ccx(fcx);\n+    let cache = cx.llmetadata;\n+    alt cached_metadata::<@metadata<argument_md>>(\n+        cache, ArgVariableTag, {|md| md.data.id == arg.id}) {\n+      option::some(md) { ret md; }\n+      option::none. {}\n+    }\n+    let arg_n = alt cx.ast_map.get(arg.id) {\n+      ast_map::node_arg(_, n) { n - 2u }\n+    };\n+    let loc = codemap::lookup_char_pos(cx.sess.get_codemap(),\n+                                       fcx.sp.lo);\n+    let ty = trans::node_id_type(cx, arg.id);\n+    let tymd = get_ty_metadata(cx, ty, arg.ty);\n+    let filemd = get_file_metadata(cx, loc.filename);\n+    let fn_node = cx.ast_map.get(fcx.id);\n+    let fn_item = alt fn_node { ast_map::node_item(item) { item } };\n+    let context = get_function_metadata(fcx, fn_item, fcx.llfn);\n+    let lldata = [lltag(ArgVariableTag),\n+                  context.node, // context\n+                  llstr(arg.ident), // name\n+                  filemd.node,\n+                  lli32(loc.line as int), // line\n+                  tymd.node,\n+                  lli32(0) //XXX flags\n+                 ];\n+    let mdnode = llmdnode(lldata);\n+    let mdval = @{node: mdnode, data: {id: arg.id}};\n+    update_cache(cache, ArgVariableTag, argument_metadata(mdval));\n+    let llptr = alt fcx.llargs.get(arg.id) {\n+      local_mem(v) | local_imm(v) { v }\n+    };\n+    let declargs = [llmdnode([llptr]), mdnode];\n+    trans_build::Call(bcx, cx.intrinsics.get(\"llvm.dbg.declare\"),\n+                      declargs);\n+    ret mdval;\n+}\n+\n fn update_source_pos(cx: @block_ctxt, s: codemap::span) -> @debug_source_pos {\n     let dsp = @debug_source_pos(cx);\n     if !bcx_ccx(cx).sess.get_opts().debuginfo {\n@@ -384,8 +482,9 @@ fn add_line_info(cx: @block_ctxt, llinstr: ValueRef) {\n     llvm::LLVMSetMetadata(llinstr, kind_id, dbgscope);\n }\n \n-fn get_function_metadata(cx: @crate_ctxt, item: @ast::item,\n+fn get_function_metadata(fcx: @fn_ctxt, item: @ast::item,\n                          llfndecl: ValueRef) -> @metadata<subprogram_md> {\n+    let cx = fcx_ccx(fcx);\n     let cache = cx.llmetadata;\n     alt cached_metadata::<@metadata<subprogram_md>>(\n         cache, SubprogramTag, {|md| md.data.name == item.ident &&\n@@ -448,5 +547,9 @@ fn get_function_metadata(cx: @crate_ctxt, item: @ast::item,\n     let mdval = @{node: val, data: {name: item.ident,\n                                     file: loc.filename}};\n     update_cache(cache, SubprogramTag, subprogram_metadata(mdval));\n+    /*alt ret_ty.node {\n+      ast::ty_nil. {}\n+      _ { let _ = get_retval_metadata(fcx, ret_ty); }\n+    }*/\n     ret mdval;\n }\n\\ No newline at end of file"}, {"sha": "81f15d6b4de10b31de377d4ae0b119f30ed2941f", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6c26b892e422b7ea8d4576f074dc2e9af52caed4/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c26b892e422b7ea8d4576f074dc2e9af52caed4/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=6c26b892e422b7ea8d4576f074dc2e9af52caed4", "patch": "@@ -4422,6 +4422,12 @@ fn create_llargs_for_fn_args(cx: @fn_ctxt, ty_self: self_arg,\n \n fn copy_args_to_allocas(fcx: @fn_ctxt, bcx: @block_ctxt, args: [ast::arg],\n                         arg_tys: [ty::arg]) -> @block_ctxt {\n+    if fcx_ccx(fcx).sess.get_opts().debuginfo {\n+        llvm::LLVMAddAttribute(llvm::LLVMGetFirstParam(fcx.llfn),\n+                               lib::llvm::LLVMStructRetAttribute as\n+                                   lib::llvm::llvm::Attribute);\n+        //let _ = debuginfo::get_retval_metadata(bcx);\n+    }\n     let arg_n: uint = 0u, bcx = bcx;\n     for arg in arg_tys {\n         let id = args[arg_n].id;\n@@ -4441,6 +4447,9 @@ fn copy_args_to_allocas(fcx: @fn_ctxt, bcx: @block_ctxt, args: [ast::arg],\n           }\n           ast::by_ref. {}\n         }\n+        if fcx_ccx(fcx).sess.get_opts().debuginfo {\n+            let _ = debuginfo::get_arg_metadata(bcx, args[arg_n]);\n+        }\n         arg_n += 1u;\n     }\n     ret bcx;\n@@ -4574,12 +4583,13 @@ fn trans_fn(cx: @local_ctxt, sp: span, f: ast::_fn, llfndecl: ValueRef,\n             id: ast::node_id) {\n     let do_time = cx.ccx.sess.get_opts().stats;\n     let start = do_time ? time::get_time() : {sec: 0u32, usec: 0u32};\n-    trans_closure(cx, sp, f, llfndecl, ty_self, ty_params, id, {|_fcx|});\n+    let fcx = option::none;\n+    trans_closure(cx, sp, f, llfndecl, ty_self, ty_params, id, {|new_fcx| fcx = option::some(new_fcx);});\n     if cx.ccx.sess.get_opts().debuginfo {\n         let item = alt option::get(cx.ccx.ast_map.find(id)) {\n             ast_map::node_item(item) { item }\n         };\n-        debuginfo::get_function_metadata(cx.ccx, item, llfndecl);\n+        debuginfo::get_function_metadata(option::get(fcx), item, llfndecl);\n     }\n     if do_time {\n         let end = time::get_time();"}, {"sha": "2b45285a4ef06ee0b380ac1ce5e70cfab63794ec", "filename": "src/comp/middle/trans_build.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6c26b892e422b7ea8d4576f074dc2e9af52caed4/src%2Fcomp%2Fmiddle%2Ftrans_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c26b892e422b7ea8d4576f074dc2e9af52caed4/src%2Fcomp%2Fmiddle%2Ftrans_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_build.rs?ref=6c26b892e422b7ea8d4576f074dc2e9af52caed4", "patch": "@@ -104,6 +104,14 @@ fn Invoke(cx: @block_ctxt, Fn: ValueRef, Args: [ValueRef],\n         let instr = llvm::LLVMBuildInvoke(B(cx), Fn, vec::to_ptr(Args),\n                                           vec::len(Args), Then, Catch,\n                                           noname());\n+        if bcx_ccx(cx).sess.get_opts().debuginfo {\n+            /*llvm::LLVMAddAttribute(option::get(vec::last(llargs)),\n+            lib::llvm::LLVMStructRetAttribute as\n+            lib::llvm::llvm::Attribute);*/\n+            llvm::LLVMAddInstrAttribute(instr, 1u,\n+                                        lib::llvm::LLVMStructRetAttribute as\n+                                            lib::llvm::llvm::Attribute);\n+        }\n         debuginfo::add_line_info(cx, instr);\n     }\n }"}]}