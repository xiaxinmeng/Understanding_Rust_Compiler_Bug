{"sha": "d5d300c0349c350db13009a4889dbcee3e1a509b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1ZDMwMGMwMzQ5YzM1MGRiMTMwMDlhNDg4OWRiY2VlM2UxYTUwOWI=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-09-16T05:50:30Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-09-16T05:50:30Z"}, "message": "Update tests", "tree": {"sha": "b20c8f7bc4a3a6843d2957315e6ad053d850bd55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b20c8f7bc4a3a6843d2957315e6ad053d850bd55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5d300c0349c350db13009a4889dbcee3e1a509b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5d300c0349c350db13009a4889dbcee3e1a509b", "html_url": "https://github.com/rust-lang/rust/commit/d5d300c0349c350db13009a4889dbcee3e1a509b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5d300c0349c350db13009a4889dbcee3e1a509b/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81f5c691310b3960b4ee59e8a7415050ce284506", "url": "https://api.github.com/repos/rust-lang/rust/commits/81f5c691310b3960b4ee59e8a7415050ce284506", "html_url": "https://github.com/rust-lang/rust/commit/81f5c691310b3960b4ee59e8a7415050ce284506"}], "stats": {"total": 130, "additions": 129, "deletions": 1}, "files": [{"sha": "48132cc662cc5905a58632513dc8588c4dcd0af3", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d5d300c0349c350db13009a4889dbcee3e1a509b/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5d300c0349c350db13009a4889dbcee3e1a509b/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=d5d300c0349c350db13009a4889dbcee3e1a509b", "patch": "@@ -547,3 +547,33 @@ fn iter_clone_collect() {\n     let v3 : HashSet<isize> = v.iter().cloned().collect();\n     let v4 : VecDeque<isize> = v.iter().cloned().collect();\n }\n+\n+fn chars_cmp_with_unwrap() {\n+    let s = String::from(\"foo\");\n+    if s.chars().next().unwrap() == 'f' { // s.starts_with('f')\n+        // Nothing here\n+    }\n+    if s.chars().next_back().unwrap() == 'o' { // s.ends_with('o')\n+        // Nothing here\n+    }\n+    if s.chars().last().unwrap() == 'o' { // s.ends_with('o')\n+        // Nothing here\n+    }\n+    if s.chars().next().unwrap() != 'f' { // !s.starts_with('f')\n+        // Nothing here\n+    }\n+    if s.chars().next_back().unwrap() != 'o' { // !s.ends_with('o')\n+        // Nothing here\n+    }\n+    if s.chars().last().unwrap() != 'o' { // !s.ends_with('o')\n+        // Nothing here\n+    }\n+}\n+\n+#[allow(unnecessary_operation)]\n+fn ends_with() {\n+    \"\".chars().last() == Some(' ');\n+    Some(' ') != \"\".chars().last();\n+    \"\".chars().next_back() == Some(' ');\n+    Some(' ') != \"\".chars().next_back();\n+}"}, {"sha": "7f3d505a3cd22d6fe64d60b432d858face2804c8", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 99, "deletions": 1, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/d5d300c0349c350db13009a4889dbcee3e1a509b/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5d300c0349c350db13009a4889dbcee3e1a509b/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=d5d300c0349c350db13009a4889dbcee3e1a509b", "patch": "@@ -738,5 +738,103 @@ error: called `cloned().collect()` on a slice to create a `Vec`. Calling `to_vec\n     |\n     = note: `-D iter-cloned-collect` implied by `-D warnings`\n \n-error: aborting due to 107 previous errors\n+error: you should use the `starts_with` method\n+   --> $DIR/methods.rs:553:8\n+    |\n+553 |     if s.chars().next().unwrap() == 'f' { // s.starts_with('f')\n+    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `s.starts_with('f')`\n+\n+error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n+   --> $DIR/methods.rs:553:8\n+    |\n+553 |     if s.chars().next().unwrap() == 'f' { // s.starts_with('f')\n+    |        ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: you should use the `ends_with` method\n+   --> $DIR/methods.rs:556:8\n+    |\n+556 |     if s.chars().next_back().unwrap() == 'o' { // s.ends_with('o')\n+    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `s.ends_with('o')`\n+    |\n+    = note: `-D chars-last-cmp` implied by `-D warnings`\n+\n+error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n+   --> $DIR/methods.rs:556:8\n+    |\n+556 |     if s.chars().next_back().unwrap() == 'o' { // s.ends_with('o')\n+    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: you should use the `ends_with` method\n+   --> $DIR/methods.rs:559:8\n+    |\n+559 |     if s.chars().last().unwrap() == 'o' { // s.ends_with('o')\n+    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `s.ends_with('o')`\n+\n+error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n+   --> $DIR/methods.rs:559:8\n+    |\n+559 |     if s.chars().last().unwrap() == 'o' { // s.ends_with('o')\n+    |        ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: you should use the `starts_with` method\n+   --> $DIR/methods.rs:562:8\n+    |\n+562 |     if s.chars().next().unwrap() != 'f' { // !s.starts_with('f')\n+    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `!s.starts_with('f')`\n+\n+error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n+   --> $DIR/methods.rs:562:8\n+    |\n+562 |     if s.chars().next().unwrap() != 'f' { // !s.starts_with('f')\n+    |        ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: you should use the `ends_with` method\n+   --> $DIR/methods.rs:565:8\n+    |\n+565 |     if s.chars().next_back().unwrap() != 'o' { // !s.ends_with('o')\n+    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `!s.ends_with('o')`\n+\n+error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n+   --> $DIR/methods.rs:565:8\n+    |\n+565 |     if s.chars().next_back().unwrap() != 'o' { // !s.ends_with('o')\n+    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: you should use the `ends_with` method\n+   --> $DIR/methods.rs:568:8\n+    |\n+568 |     if s.chars().last().unwrap() != 'o' { // !s.ends_with('o')\n+    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `!s.ends_with('o')`\n+\n+error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n+   --> $DIR/methods.rs:568:8\n+    |\n+568 |     if s.chars().last().unwrap() != 'o' { // !s.ends_with('o')\n+    |        ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: you should use the `ends_with` method\n+   --> $DIR/methods.rs:575:5\n+    |\n+575 |     \"\".chars().last() == Some(' ');\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `\"\".ends_with(' ')`\n+\n+error: you should use the `ends_with` method\n+   --> $DIR/methods.rs:576:5\n+    |\n+576 |     Some(' ') != \"\".chars().last();\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `!\"\".ends_with(' ')`\n+\n+error: you should use the `ends_with` method\n+   --> $DIR/methods.rs:577:5\n+    |\n+577 |     \"\".chars().next_back() == Some(' ');\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `\"\".ends_with(' ')`\n+\n+error: you should use the `ends_with` method\n+   --> $DIR/methods.rs:578:5\n+    |\n+578 |     Some(' ') != \"\".chars().next_back();\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `!\"\".ends_with(' ')`\n+\n+error: aborting due to 123 previous errors\n "}]}