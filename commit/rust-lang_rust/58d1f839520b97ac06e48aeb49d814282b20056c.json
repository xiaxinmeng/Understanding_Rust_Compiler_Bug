{"sha": "58d1f839520b97ac06e48aeb49d814282b20056c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ZDFmODM5NTIwYjk3YWMwNmU0OGFlYjQ5ZDgxNDI4MmIyMDA1NmM=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2018-02-23T18:00:26Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2018-02-23T18:00:26Z"}, "message": "remove redundant info", "tree": {"sha": "d6bee96ed191982cc53d7e7b1d668ec1920c7c32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6bee96ed191982cc53d7e7b1d668ec1920c7c32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58d1f839520b97ac06e48aeb49d814282b20056c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58d1f839520b97ac06e48aeb49d814282b20056c", "html_url": "https://github.com/rust-lang/rust/commit/58d1f839520b97ac06e48aeb49d814282b20056c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58d1f839520b97ac06e48aeb49d814282b20056c/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9e049afc544e70dc595df67d878b52c098aaa9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9e049afc544e70dc595df67d878b52c098aaa9a", "html_url": "https://github.com/rust-lang/rust/commit/f9e049afc544e70dc595df67d878b52c098aaa9a"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "b3a7d20c4aa5f420fcbabb9ef371d5c006295e9c", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/58d1f839520b97ac06e48aeb49d814282b20056c/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d1f839520b97ac06e48aeb49d814282b20056c/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=58d1f839520b97ac06e48aeb49d814282b20056c", "patch": "@@ -17,19 +17,19 @@\n //! - Having one mutable reference (`&mut T`) to the object (also know as Mutability).\n //!\n //! This is enforced by the Rust compiler. However, there are situations where this rule is not\n-//! flexible enough. Sometimes is required to have multiple references to an object and yet \n+//! flexible enough. Sometimes is required to have multiple references to an object and yet\n //! mutate it.\n //!\n //! Shareable mutable containers exist to permit mutability in presence of aliasing in a \n //! controlled manner. Both `Cell<T>` and `RefCell<T>` allows to do this in a single threaded\n-//! way, you can mutate them using an inmutable reference. However, neither `Cell<T>` nor \n-//! `RefCell<T>` are thread safe (they do not implement `Sync`), if you need to do Aliasing and \n-//! Mutation between multiple threads is possible to use `Mutex`, `RwLock` or `AtomicXXX`.\n+//! way. However, neither `Cell<T>` nor `RefCell<T>` are thread safe (they do not implement \n+//! `Sync`), if you need to do Aliasing and Mutation between multiple threads is possible to use\n+//! `Mutex`, `RwLock` or `AtomicXXX`.\n //!\n //! Values of the `Cell<T>` and `RefCell<T>` types may be mutated through shared references (i.e.\n //! the common `&T` type), whereas most Rust types can only be mutated through unique (`&mut T`)\n //! references. We say that `Cell<T>` and `RefCell<T>` provide 'interior mutability', in contrast\n-//! with typical Rust types that exhibit 'inherited mutability'. \n+//! with typical Rust types that exhibit 'inherited mutability'.\n //!\n //! Cell types come in two flavors: `Cell<T>` and `RefCell<T>`. `Cell<T>` implements interior\n //! mutability by moving values in and out of the `Cell<T>`. To use references instead of values,"}]}