{"sha": "10c2316a6bf7cf9255f991e06e82ce692e6f84d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwYzIzMTZhNmJmN2NmOTI1NWY5OTFlMDZlODJjZTY5MmU2Zjg0ZDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-02T04:10:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-02T04:10:49Z"}, "message": "Auto merge of #72905 - JohnTitor:rollup-phtyo5i, r=JohnTitor\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #72775 (Return early to avoid ICE)\n - #72795 (Add a test for `$:ident` in proc macro input)\n - #72822 (remove trivial calls to mk_const)\n - #72825 (Clarify errors and warnings about the transition to the new asm!)\n - #72827 (changed *nix to Unix-like)\n - #72880 (Clean up E0637 explanation)\n - #72886 (Remove allow missing_debug_implementations for MaybeUninit)\n - #72889 (rustc: Remove the `--passive-segments` LLD flag on wasm)\n - #72891 (Add associated consts MIN/MAX for Wrapping<Int>)\n - #72893 (test miri-unleash TLS accesses)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "be3cc1f5d71eef69295c572f6b66c9eb3def256a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be3cc1f5d71eef69295c572f6b66c9eb3def256a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10c2316a6bf7cf9255f991e06e82ce692e6f84d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10c2316a6bf7cf9255f991e06e82ce692e6f84d5", "html_url": "https://github.com/rust-lang/rust/commit/10c2316a6bf7cf9255f991e06e82ce692e6f84d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad4bc3323b9299d867697e9653dcea1b5e1ad283", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad4bc3323b9299d867697e9653dcea1b5e1ad283", "html_url": "https://github.com/rust-lang/rust/commit/ad4bc3323b9299d867697e9653dcea1b5e1ad283"}, {"sha": "b7ec7bd5b78ca950fa343aa1bbaa3d3dd86df9b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7ec7bd5b78ca950fa343aa1bbaa3d3dd86df9b1", "html_url": "https://github.com/rust-lang/rust/commit/b7ec7bd5b78ca950fa343aa1bbaa3d3dd86df9b1"}], "stats": {"total": 325, "additions": 238, "deletions": 87}, "files": [{"sha": "b48ee8a914ec49d34d0d5898e6ca3ad7dccf78a0", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=10c2316a6bf7cf9255f991e06e82ce692e6f84d5", "patch": "@@ -23,7 +23,7 @@ or reading the [rustc dev guide][rustcguidebuild].\n \n [rustcguidebuild]: https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html\n \n-### Building on *nix\n+### Building on Unix-like system\n 1. Make sure you have installed the dependencies:\n \n    * `g++` 5.1 or later or `clang++` 3.5 or later"}, {"sha": "3cfdde60135b77d905939f54d0b52d301fca673b", "filename": "src/libcore/macros/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Flibcore%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Flibcore%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros%2Fmod.rs?ref=10c2316a6bf7cf9255f991e06e82ce692e6f84d5", "patch": "@@ -1315,7 +1315,7 @@ pub(crate) mod builtin {\n     #[unstable(\n         feature = \"llvm_asm\",\n         issue = \"70173\",\n-        reason = \"LLVM-style inline assembly will never be stabilized, prefer using asm! instead\"\n+        reason = \"prefer using the new asm! syntax instead\"\n     )]\n     #[rustc_builtin_macro]\n     #[macro_export]"}, {"sha": "499016545e967c769231a14ced30b1c06f5edd50", "filename": "src/libcore/mem/maybe_uninit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs?ref=10c2316a6bf7cf9255f991e06e82ce692e6f84d5", "patch": "@@ -214,7 +214,6 @@ use crate::mem::ManuallyDrop;\n /// remain `#[repr(transparent)]`. That said, `MaybeUninit<T>` will *always* guarantee that it has\n /// the same size, alignment, and ABI as `T`; it's just that the way `MaybeUninit` implements that\n /// guarantee may evolve.\n-#[allow(missing_debug_implementations)]\n #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n // Lang item so we can wrap other types in it. This is useful for generators.\n #[lang = \"maybe_uninit\"]"}, {"sha": "bb648ba8c25de69e6eee3b8f9e34a214b973f355", "filename": "src/libcore/num/wrapping.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Flibcore%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Flibcore%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fwrapping.rs?ref=10c2316a6bf7cf9255f991e06e82ce692e6f84d5", "patch": "@@ -337,14 +337,10 @@ Basic usage:\n #![feature(wrapping_int_impl)]\n use std::num::Wrapping;\n \n-assert_eq!(<Wrapping<\", stringify!($t), \">>::min_value(), \",\n-\"Wrapping(\", stringify!($t), \"::min_value()));\n+assert_eq!(<Wrapping<\", stringify!($t), \">>::MIN, Wrapping(\", stringify!($t), \"::MIN));\n ```\"),\n                 #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n-                #[inline]\n-                pub const fn min_value() -> Self {\n-                    Wrapping(<$t>::min_value())\n-                }\n+                pub const MIN: Self = Self(<$t>::MIN);\n             }\n \n             doc_comment! {\n@@ -358,14 +354,10 @@ Basic usage:\n #![feature(wrapping_int_impl)]\n use std::num::Wrapping;\n \n-assert_eq!(<Wrapping<\", stringify!($t), \">>::max_value(), \",\n-\"Wrapping(\", stringify!($t), \"::max_value()));\n+assert_eq!(<Wrapping<\", stringify!($t), \">>::MAX, Wrapping(\", stringify!($t), \"::MAX));\n ```\"),\n                 #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n-                #[inline]\n-                pub const fn max_value() -> Self {\n-                    Wrapping(<$t>::max_value())\n-                }\n+                pub const MAX: Self = Self(<$t>::MAX);\n             }\n \n             doc_comment! {"}, {"sha": "fad638f6f2819a6bbaca3a240e1e337a8d28736f", "filename": "src/librustc_builtin_macros/asm.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Flibrustc_builtin_macros%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Flibrustc_builtin_macros%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fasm.rs?ref=10c2316a6bf7cf9255f991e06e82ce692e6f84d5", "patch": "@@ -33,7 +33,10 @@ fn parse_args<'a>(\n \n     // Detect use of the legacy llvm_asm! syntax (which used to be called asm!)\n     if p.look_ahead(1, |t| *t == token::Colon || *t == token::ModSep) {\n-        let mut err = ecx.struct_span_err(sp, \"legacy asm! syntax is no longer supported\");\n+        let mut err =\n+            ecx.struct_span_err(sp, \"the legacy LLVM-style asm! syntax is no longer supported\");\n+        err.note(\"consider migrating to the new asm! syntax specified in RFC 2873\");\n+        err.note(\"alternatively, switch to llvm_asm! to keep your code working as it is\");\n \n         // Find the span of the \"asm!\" so that we can offer an automatic suggestion\n         let asm_span = sp.from_inner(InnerSpan::new(0, 4));"}, {"sha": "77cb31bf3d2780e40dfc0445149e95c760f9fd5f", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=10c2316a6bf7cf9255f991e06e82ce692e6f84d5", "patch": "@@ -1010,9 +1010,6 @@ impl<'a> WasmLd<'a> {\n         //   sharing memory and instantiating the module multiple times. As a\n         //   result if it were exported then we'd just have no sharing.\n         //\n-        // * `--passive-segments` - all memory segments should be passive to\n-        //   prevent each module instantiation from reinitializing memory.\n-        //\n         // * `--export=__wasm_init_memory` - when using `--passive-segments` the\n         //   linker will synthesize this function, and so we need to make sure\n         //   that our usage of `--export` below won't accidentally cause this\n@@ -1026,7 +1023,6 @@ impl<'a> WasmLd<'a> {\n             cmd.arg(\"--shared-memory\");\n             cmd.arg(\"--max-memory=1073741824\");\n             cmd.arg(\"--import-memory\");\n-            cmd.arg(\"--passive-segments\");\n             cmd.arg(\"--export=__wasm_init_memory\");\n             cmd.arg(\"--export=__wasm_init_tls\");\n             cmd.arg(\"--export=__tls_size\");"}, {"sha": "d9068950bdfee67361ed6702156762c564ea663e", "filename": "src/librustc_error_codes/error_codes/E0637.md", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Flibrustc_error_codes%2Ferror_codes%2FE0637.md", "raw_url": "https://github.com/rust-lang/rust/raw/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Flibrustc_error_codes%2Ferror_codes%2FE0637.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0637.md?ref=10c2316a6bf7cf9255f991e06e82ce692e6f84d5", "patch": "@@ -1,6 +1,7 @@\n An underscore `_` character has been used as the identifier for a lifetime.\n \n-Erroneous example:\n+Erroneous code example:\n+\n ```compile_fail,E0106,E0637\n fn longest<'_>(str1: &'_ str, str2: &'_ str) -> &'_ str {\n          //^^ `'_` is a reserved lifetime name\n@@ -11,13 +12,15 @@ fn longest<'_>(str1: &'_ str, str2: &'_ str) -> &'_ str {\n     }\n }\n ```\n+\n `'_`, cannot be used as a lifetime identifier because it is a reserved for the\n anonymous lifetime. To fix this, use a lowercase letter such as 'a, or a series\n of lowercase letters such as `'foo`.  For more information, see [the\n book][bk-no].  For more information on using the anonymous lifetime in rust\n nightly, see [the nightly book][bk-al].\n \n Corrected example:\n+\n ```\n fn longest<'a>(str1: &'a str, str2: &'a str) -> &'a str {\n     if str1.len() > str2.len() {"}, {"sha": "1b3ede40f023a002b98182f4f07364035c1fecc0", "filename": "src/librustc_middle/mir/interpret/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs?ref=10c2316a6bf7cf9255f991e06e82ce692e6f84d5", "patch": "@@ -523,12 +523,12 @@ impl fmt::Display for UnsupportedOpInfo {\n         match self {\n             Unsupported(ref msg) => write!(f, \"{}\", msg),\n             ReadForeignStatic(did) => {\n-                write!(f, \"cannot read from foreign (extern) static {:?}\", did)\n+                write!(f, \"cannot read from foreign (extern) static ({:?})\", did)\n             }\n             NoMirFor(did) => write!(f, \"no MIR body is available for {:?}\", did),\n             ReadPointerAsBytes => write!(f, \"unable to turn pointer into raw bytes\",),\n             ReadBytesAsPointer => write!(f, \"unable to turn bytes into a pointer\"),\n-            ThreadLocalStatic(did) => write!(f, \"accessing thread local static {:?}\", did),\n+            ThreadLocalStatic(did) => write!(f, \"cannot access thread local static ({:?})\", did),\n         }\n     }\n }"}, {"sha": "aa47c6b70a21ae18d24c5bea4f71939aee6b9e56", "filename": "src/librustc_middle/ty/structural_impls.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs?ref=10c2316a6bf7cf9255f991e06e82ce692e6f84d5", "patch": "@@ -1019,7 +1019,11 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::Const<'tcx> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         let ty = self.ty.fold_with(folder);\n         let val = self.val.fold_with(folder);\n-        folder.tcx().mk_const(ty::Const { ty, val })\n+        if ty != self.ty || val != self.val {\n+            folder.tcx().mk_const(ty::Const { ty, val })\n+        } else {\n+            *self\n+        }\n     }\n \n     fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {"}, {"sha": "92bd740e27aa61dc839259d14ba0041e55ad3004", "filename": "src/librustc_mir/transform/check_consts/ops.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs?ref=10c2316a6bf7cf9255f991e06e82ce692e6f84d5", "patch": "@@ -12,9 +12,6 @@ use super::ConstCx;\n \n /// An operation that is not *always* allowed in a const context.\n pub trait NonConstOp: std::fmt::Debug {\n-    /// Whether this operation can be evaluated by miri.\n-    const IS_SUPPORTED_IN_MIRI: bool = true;\n-\n     /// Returns the `Symbol` corresponding to the feature gate that would enable this operation,\n     /// or `None` if such a feature gate does not exist.\n     fn feature_gate() -> Option<Symbol> {\n@@ -356,8 +353,6 @@ impl NonConstOp for StaticAccess {\n #[derive(Debug)]\n pub struct ThreadLocalAccess;\n impl NonConstOp for ThreadLocalAccess {\n-    const IS_SUPPORTED_IN_MIRI: bool = false;\n-\n     fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n         struct_span_err!(\n             ccx.tcx.sess,"}, {"sha": "1137c813470be3412d6b2c339d5e5a7f6b1435af", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=10c2316a6bf7cf9255f991e06e82ce692e6f84d5", "patch": "@@ -244,11 +244,7 @@ impl Validator<'mir, 'tcx> {\n             return;\n         }\n \n-        // If an operation is supported in miri it can be turned on with\n-        // `-Zunleash-the-miri-inside-of-you`.\n-        let is_unleashable = O::IS_SUPPORTED_IN_MIRI;\n-\n-        if is_unleashable && self.tcx.sess.opts.debugging_opts.unleash_the_miri_inside_of_you {\n+        if self.tcx.sess.opts.debugging_opts.unleash_the_miri_inside_of_you {\n             self.tcx.sess.miri_unleashed_feature(span, O::feature_gate());\n             return;\n         }"}, {"sha": "e3846d8d73d60d11eb3bef5205aeab911a0cc4cb", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=10c2316a6bf7cf9255f991e06e82ce692e6f84d5", "patch": "@@ -1909,6 +1909,12 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n                 let self_ty = self.resolve_vars_if_possible(&trait_ref.self_ty());\n \n+                // Do not check on infer_types to avoid panic in evaluate_obligation.\n+                if self_ty.has_infer_types() {\n+                    return;\n+                }\n+                let self_ty = self.tcx.erase_regions(&self_ty);\n+\n                 let impls_future = self.tcx.type_implements_trait((\n                     future_trait,\n                     self_ty,"}, {"sha": "958ba69a8262c4b448eb87336769379e0a9de06b", "filename": "src/librustc_trait_selection/traits/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs?ref=10c2316a6bf7cf9255f991e06e82ce692e6f84d5", "patch": "@@ -540,13 +540,6 @@ fn type_implements_trait<'tcx>(\n         trait_def_id, ty, params, param_env\n     );\n \n-    // Do not check on infer_types to avoid panic in evaluate_obligation.\n-    if ty.has_infer_types() {\n-        return false;\n-    }\n-\n-    let ty = tcx.erase_regions(&ty);\n-\n     let trait_ref = ty::TraitRef { def_id: trait_def_id, substs: tcx.mk_substs_trait(ty, params) };\n \n     let obligation = Obligation {"}, {"sha": "01d8fd34b68a824513cb0d912f0b9a375e29e75b", "filename": "src/test/ui/asm/rustfix-asm.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Ftest%2Fui%2Fasm%2Frustfix-asm.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Ftest%2Fui%2Fasm%2Frustfix-asm.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Frustfix-asm.fixed?ref=10c2316a6bf7cf9255f991e06e82ce692e6f84d5", "patch": "@@ -8,9 +8,9 @@ fn main() {\n         let x = 1;\n         let y: i32;\n         llvm_asm!(\"\" :: \"r\" (x));\n-        //~^ ERROR legacy asm! syntax is no longer supported\n+        //~^ ERROR the legacy LLVM-style asm! syntax is no longer supported\n         llvm_asm!(\"\" : \"=r\" (y));\n-        //~^ ERROR legacy asm! syntax is no longer supported\n+        //~^ ERROR the legacy LLVM-style asm! syntax is no longer supported\n         let _ = y;\n     }\n }"}, {"sha": "e25895b7230498ec9d70efe3b3526dbabc8bfe3c", "filename": "src/test/ui/asm/rustfix-asm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Ftest%2Fui%2Fasm%2Frustfix-asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Ftest%2Fui%2Fasm%2Frustfix-asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Frustfix-asm.rs?ref=10c2316a6bf7cf9255f991e06e82ce692e6f84d5", "patch": "@@ -8,9 +8,9 @@ fn main() {\n         let x = 1;\n         let y: i32;\n         asm!(\"\" :: \"r\" (x));\n-        //~^ ERROR legacy asm! syntax is no longer supported\n+        //~^ ERROR the legacy LLVM-style asm! syntax is no longer supported\n         asm!(\"\" : \"=r\" (y));\n-        //~^ ERROR legacy asm! syntax is no longer supported\n+        //~^ ERROR the legacy LLVM-style asm! syntax is no longer supported\n         let _ = y;\n     }\n }"}, {"sha": "334499c6fd8974b6f3100c7fc59603d92482997f", "filename": "src/test/ui/asm/rustfix-asm.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Ftest%2Fui%2Fasm%2Frustfix-asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Ftest%2Fui%2Fasm%2Frustfix-asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Frustfix-asm.stderr?ref=10c2316a6bf7cf9255f991e06e82ce692e6f84d5", "patch": "@@ -1,18 +1,24 @@\n-error: legacy asm! syntax is no longer supported\n+error: the legacy LLVM-style asm! syntax is no longer supported\n   --> $DIR/rustfix-asm.rs:10:9\n    |\n LL |         asm!(\"\" :: \"r\" (x));\n    |         ----^^^^^^^^^^^^^^^^\n    |         |\n    |         help: replace with: `llvm_asm!`\n+   |\n+   = note: consider migrating to the new asm! syntax specified in RFC 2873\n+   = note: alternatively, switch to llvm_asm! to keep your code working as it is\n \n-error: legacy asm! syntax is no longer supported\n+error: the legacy LLVM-style asm! syntax is no longer supported\n   --> $DIR/rustfix-asm.rs:12:9\n    |\n LL |         asm!(\"\" : \"=r\" (y));\n    |         ----^^^^^^^^^^^^^^^^\n    |         |\n    |         help: replace with: `llvm_asm!`\n+   |\n+   = note: consider migrating to the new asm! syntax specified in RFC 2873\n+   = note: alternatively, switch to llvm_asm! to keep your code working as it is\n \n error: aborting due to 2 previous errors\n "}, {"sha": "aa9b3144f401befa15cd15fb4b7e4d274087385d", "filename": "src/test/ui/consts/miri_unleashed/inline_asm.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.rs?ref=10c2316a6bf7cf9255f991e06e82ce692e6f84d5", "patch": "@@ -1,15 +1,22 @@\n // compile-flags: -Zunleash-the-miri-inside-of-you\n // only-x86_64\n-#![feature(llvm_asm)]\n+#![feature(asm,llvm_asm)]\n #![allow(const_err)]\n \n fn main() {}\n \n // Make sure we catch executing inline assembly.\n-static TEST_BAD: () = {\n+static TEST_BAD1: () = {\n     unsafe { llvm_asm!(\"xor %eax, %eax\" ::: \"eax\"); }\n     //~^ ERROR could not evaluate static initializer\n     //~| NOTE inline assembly is not supported\n     //~| NOTE in this expansion of llvm_asm!\n     //~| NOTE in this expansion of llvm_asm!\n };\n+\n+// Make sure we catch executing inline assembly.\n+static TEST_BAD2: () = {\n+    unsafe { asm!(\"nop\"); }\n+    //~^ ERROR could not evaluate static initializer\n+    //~| NOTE inline assembly is not supported\n+};"}, {"sha": "d372b4a5d25c0a199804ab744bbff0aeedcc455d", "filename": "src/test/ui/consts/miri_unleashed/inline_asm.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.stderr?ref=10c2316a6bf7cf9255f991e06e82ce692e6f84d5", "patch": "@@ -6,15 +6,26 @@ LL |     unsafe { llvm_asm!(\"xor %eax, %eax\" ::: \"eax\"); }\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n+error[E0080]: could not evaluate static initializer\n+  --> $DIR/inline_asm.rs:19:14\n+   |\n+LL |     unsafe { asm!(\"nop\"); }\n+   |              ^^^^^^^^^^^^ inline assembly is not supported\n+\n warning: skipping const checks\n    |\n help: skipping check that does not even have a feature gate\n   --> $DIR/inline_asm.rs:10:14\n    |\n LL |     unsafe { llvm_asm!(\"xor %eax, %eax\" ::: \"eax\"); }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/inline_asm.rs:19:14\n+   |\n+LL |     unsafe { asm!(\"nop\"); }\n+   |              ^^^^^^^^^^^^\n    = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to 2 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "ba86a554bbb68615043c8a9b5be888f9cdf0c3bb", "filename": "src/test/ui/consts/miri_unleashed/tls.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.rs?ref=10c2316a6bf7cf9255f991e06e82ce692e6f84d5", "patch": "@@ -0,0 +1,17 @@\n+// compile-flags: -Zunleash-the-miri-inside-of-you\n+#![feature(thread_local)]\n+#![allow(const_err)]\n+\n+use std::thread;\n+\n+#[thread_local]\n+static A: u8 = 0;\n+\n+// Make sure we catch accessing thread-local storage.\n+static TEST_BAD: () = {\n+    unsafe { let _val = A; }\n+    //~^ ERROR could not evaluate static initializer\n+    //~| NOTE cannot access thread local static\n+};\n+\n+fn main() {}"}, {"sha": "d3e87f319acdeecbff43f5255950bd57b6f5a6b9", "filename": "src/test/ui/consts/miri_unleashed/tls.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.stderr?ref=10c2316a6bf7cf9255f991e06e82ce692e6f84d5", "patch": "@@ -0,0 +1,17 @@\n+error[E0080]: could not evaluate static initializer\n+  --> $DIR/tls.rs:12:25\n+   |\n+LL |     unsafe { let _val = A; }\n+   |                         ^ cannot access thread local static (DefId(0:4 ~ tls[317d]::A[0]))\n+\n+warning: skipping const checks\n+   |\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/tls.rs:12:25\n+   |\n+LL |     unsafe { let _val = A; }\n+   |                         ^\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "753e924f00495216de46d9094a7effa8a8552089", "filename": "src/test/ui/feature-gates/feature-gate-asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.rs?ref=10c2316a6bf7cf9255f991e06e82ce692e6f84d5", "patch": "@@ -5,6 +5,6 @@ fn main() {\n         asm!(\"\");\n         //~^ ERROR inline assembly is not stable enough\n         llvm_asm!(\"\");\n-        //~^ ERROR LLVM-style inline assembly will never be stabilized\n+        //~^ ERROR prefer using the new asm! syntax instead\n     }\n }"}, {"sha": "d770565b0991c2471f886dc1e3e851942984f0a3", "filename": "src/test/ui/feature-gates/feature-gate-asm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr?ref=10c2316a6bf7cf9255f991e06e82ce692e6f84d5", "patch": "@@ -7,7 +7,7 @@ LL |         asm!(\"\");\n    = note: see issue #72016 <https://github.com/rust-lang/rust/issues/72016> for more information\n    = help: add `#![feature(asm)]` to the crate attributes to enable\n \n-error[E0658]: use of unstable library feature 'llvm_asm': LLVM-style inline assembly will never be stabilized, prefer using asm! instead\n+error[E0658]: use of unstable library feature 'llvm_asm': prefer using the new asm! syntax instead\n   --> $DIR/feature-gate-asm.rs:7:9\n    |\n LL |         llvm_asm!(\"\");"}, {"sha": "e9349acb64394e149b9682c9647e5405026ba4f4", "filename": "src/test/ui/feature-gates/feature-gate-asm2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.rs?ref=10c2316a6bf7cf9255f991e06e82ce692e6f84d5", "patch": "@@ -5,6 +5,6 @@ fn main() {\n         println!(\"{:?}\", asm!(\"\"));\n         //~^ ERROR inline assembly is not stable enough\n         println!(\"{:?}\", llvm_asm!(\"\"));\n-        //~^ ERROR LLVM-style inline assembly will never be stabilized\n+        //~^ ERROR prefer using the new asm! syntax instead\n     }\n }"}, {"sha": "85278c98d77e988e3074f9f85c908428c28d6594", "filename": "src/test/ui/feature-gates/feature-gate-asm2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr?ref=10c2316a6bf7cf9255f991e06e82ce692e6f84d5", "patch": "@@ -7,7 +7,7 @@ LL |         println!(\"{:?}\", asm!(\"\"));\n    = note: see issue #72016 <https://github.com/rust-lang/rust/issues/72016> for more information\n    = help: add `#![feature(asm)]` to the crate attributes to enable\n \n-error[E0658]: use of unstable library feature 'llvm_asm': LLVM-style inline assembly will never be stabilized, prefer using asm! instead\n+error[E0658]: use of unstable library feature 'llvm_asm': prefer using the new asm! syntax instead\n   --> $DIR/feature-gate-asm2.rs:7:26\n    |\n LL |         println!(\"{:?}\", llvm_asm!(\"\"));"}, {"sha": "fb8016cd43896029c08f6c4b2a0737f8f3e98c6a", "filename": "src/test/ui/proc-macro/auxiliary/test-macros.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs?ref=10c2316a6bf7cf9255f991e06e82ce692e6f84d5", "patch": "@@ -108,5 +108,6 @@ pub fn print_attr(_: TokenStream, input: TokenStream) -> TokenStream {\n \n #[proc_macro_derive(Print, attributes(print_helper))]\n pub fn print_derive(input: TokenStream) -> TokenStream {\n-    print_helper(input, \"DERIVE\")\n+    print_helper(input, \"DERIVE\");\n+    TokenStream::new()\n }"}, {"sha": "5f2549376d1ba25ea0e88fd193cc7db07ef0fdb8", "filename": "src/test/ui/proc-macro/dollar-crate.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.rs?ref=10c2316a6bf7cf9255f991e06e82ce692e6f84d5", "patch": "@@ -1,3 +1,4 @@\n+// check-pass\n // edition:2018\n // aux-build:test-macros.rs\n // aux-build:dollar-crate-external.rs\n@@ -23,7 +24,7 @@ mod local {\n             struct A($crate::S);\n \n             #[derive(Print)]\n-            struct D($crate::S); //~ ERROR the name `D` is defined multiple times\n+            struct D($crate::S);\n         };\n     }\n \n@@ -33,7 +34,7 @@ mod local {\n mod external {\n     use crate::dollar_crate_external;\n \n-    dollar_crate_external::external!(); //~ ERROR the name `D` is defined multiple times\n+    dollar_crate_external::external!();\n }\n \n fn main() {}"}, {"sha": "465f242580dfbe551a48ff04b45c11c9a7ad4077", "filename": "src/test/ui/proc-macro/dollar-crate.stderr", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ad4bc3323b9299d867697e9653dcea1b5e1ad283/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad4bc3323b9299d867697e9653dcea1b5e1ad283/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stderr?ref=ad4bc3323b9299d867697e9653dcea1b5e1ad283", "patch": "@@ -1,30 +0,0 @@\n-error[E0428]: the name `D` is defined multiple times\n-  --> $DIR/dollar-crate.rs:26:13\n-   |\n-LL |             struct D($crate::S);\n-   |             ^^^^^^^^^^^^^^^^^^^^\n-   |             |\n-   |             `D` redefined here\n-   |             previous definition of the type `D` here\n-...\n-LL |     local!();\n-   |     --------- in this macro invocation\n-   |\n-   = note: `D` must be defined only once in the type namespace of this module\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0428]: the name `D` is defined multiple times\n-  --> $DIR/dollar-crate.rs:36:5\n-   |\n-LL |     dollar_crate_external::external!();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |     |\n-   |     `D` redefined here\n-   |     previous definition of the type `D` here\n-   |\n-   = note: `D` must be defined only once in the type namespace of this module\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0428`."}, {"sha": "b57ce99b13841a41379ec11fa2527234cb948754", "filename": "src/test/ui/proc-macro/input-interpolated.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Ftest%2Fui%2Fproc-macro%2Finput-interpolated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Ftest%2Fui%2Fproc-macro%2Finput-interpolated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finput-interpolated.rs?ref=10c2316a6bf7cf9255f991e06e82ce692e6f84d5", "patch": "@@ -0,0 +1,25 @@\n+// Check what token streams proc macros see when interpolated tokens are passed to them as input.\n+\n+// check-pass\n+// aux-build:test-macros.rs\n+\n+#[macro_use]\n+extern crate test_macros;\n+\n+macro_rules! pass_ident {\n+    ($i:ident) => {\n+        fn f() {\n+            print_bang!($i);\n+        }\n+\n+        #[print_attr]\n+        const $i: u8 = 0;\n+\n+        #[derive(Print)]\n+        struct $i {}\n+    };\n+}\n+\n+pass_ident!(A);\n+\n+fn main() {}"}, {"sha": "7529db3bd06f8dde1784962976e128bc4e47514b", "filename": "src/test/ui/proc-macro/input-interpolated.stdout", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Ftest%2Fui%2Fproc-macro%2Finput-interpolated.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Ftest%2Fui%2Fproc-macro%2Finput-interpolated.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finput-interpolated.stdout?ref=10c2316a6bf7cf9255f991e06e82ce692e6f84d5", "patch": "@@ -0,0 +1,69 @@\n+PRINT-BANG INPUT (DISPLAY): A\n+PRINT-BANG RE-COLLECTED (DISPLAY):  A \n+PRINT-BANG INPUT (DEBUG): TokenStream [\n+    Group {\n+        delimiter: None,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"A\",\n+                span: #0 bytes(402..403),\n+            },\n+        ],\n+        span: #3 bytes(269..271),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): const A: u8 = 0;\n+PRINT-ATTR RE-COLLECTED (DISPLAY): const A : u8 = 0 ;\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"const\",\n+        span: #0 bytes(0..0),\n+    },\n+    Ident {\n+        ident: \"A\",\n+        span: #0 bytes(0..0),\n+    },\n+    Punct {\n+        ch: ':',\n+        spacing: Alone,\n+        span: #0 bytes(0..0),\n+    },\n+    Ident {\n+        ident: \"u8\",\n+        span: #0 bytes(0..0),\n+    },\n+    Punct {\n+        ch: '=',\n+        spacing: Alone,\n+        span: #0 bytes(0..0),\n+    },\n+    Literal {\n+        kind: Integer,\n+        symbol: \"0\",\n+        suffix: None,\n+        span: #0 bytes(0..0),\n+    },\n+    Punct {\n+        ch: ';',\n+        spacing: Alone,\n+        span: #0 bytes(0..0),\n+    },\n+]\n+PRINT-DERIVE INPUT (DISPLAY): struct A {\n+}\n+PRINT-DERIVE RE-COLLECTED (DISPLAY): struct A { }\n+PRINT-DERIVE INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"struct\",\n+        span: #0 bytes(0..0),\n+    },\n+    Ident {\n+        ident: \"A\",\n+        span: #0 bytes(0..0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [],\n+        span: #0 bytes(0..0),\n+    },\n+]"}, {"sha": "0448f0719589dceeceac3c3b383d90cf9eee1bf5", "filename": "src/test/ui/suggestions/issue-72766.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Ftest%2Fui%2Fsuggestions%2Fissue-72766.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Ftest%2Fui%2Fsuggestions%2Fissue-72766.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-72766.rs?ref=10c2316a6bf7cf9255f991e06e82ce692e6f84d5", "patch": "@@ -0,0 +1,20 @@\n+// edition:2018\n+// compile-flags: -Cincremental=tmp/issue-72766\n+\n+pub struct SadGirl;\n+\n+impl SadGirl {\n+    pub async fn call(&self) -> Result<(), ()> {\n+        Ok(())\n+    }\n+}\n+\n+async fn async_main() -> Result<(), ()> {\n+    // should be `.call().await?`\n+    SadGirl {}.call()?; //~ ERROR: the `?` operator can only be applied to values\n+    Ok(())\n+}\n+\n+fn main() {\n+    let _ = async_main();\n+}"}, {"sha": "4290f3b4bf1aa752003770eda395a8aba7832e60", "filename": "src/test/ui/suggestions/issue-72766.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Ftest%2Fui%2Fsuggestions%2Fissue-72766.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Ftest%2Fui%2Fsuggestions%2Fissue-72766.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-72766.stderr?ref=10c2316a6bf7cf9255f991e06e82ce692e6f84d5", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\n+  --> $DIR/issue-72766.rs:14:5\n+   |\n+LL |     SadGirl {}.call()?;\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     the `?` operator cannot be applied to type `impl std::future::Future`\n+   |     help: consider using `.await` here: `SadGirl {}.call().await?`\n+   |\n+   = help: the trait `std::ops::Try` is not implemented for `impl std::future::Future`\n+   = note: required by `std::ops::Try::into_result`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "6dd8fef7e82da31954eb51c7d53195c288a26842", "filename": "src/tools/clippy/clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c2316a6bf7cf9255f991e06e82ce692e6f84d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=10c2316a6bf7cf9255f991e06e82ce692e6f84d5", "patch": "@@ -323,6 +323,11 @@ pub fn implements_trait<'a, 'tcx>(\n     trait_id: DefId,\n     ty_params: &[GenericArg<'tcx>],\n ) -> bool {\n+    // Do not check on infer_types to avoid panic in evaluate_obligation.\n+    if ty.has_infer_types() {\n+        return false;\n+    }\n+    let ty = cx.tcx.erase_regions(&ty);\n     let ty_params = cx.tcx.mk_substs(ty_params.iter());\n     cx.tcx.type_implements_trait((trait_id, ty, ty_params, cx.param_env))\n }"}]}