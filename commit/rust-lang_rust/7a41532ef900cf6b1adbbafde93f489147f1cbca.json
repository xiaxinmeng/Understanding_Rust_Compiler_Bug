{"sha": "7a41532ef900cf6b1adbbafde93f489147f1cbca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhNDE1MzJlZjkwMGNmNmIxYWRiYmFmZGU5M2Y0ODkxNDdmMWNiY2E=", "commit": {"author": {"name": "LingMan", "email": "LingMan@users.noreply.github.com", "date": "2020-12-29T00:20:06Z"}, "committer": {"name": "LingMan", "email": "LingMan@users.noreply.github.com", "date": "2020-12-29T16:18:52Z"}, "message": "More uses of the matches! macro", "tree": {"sha": "5859583b5a4a2f6f3ce04c7cedff16cb68436ab7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5859583b5a4a2f6f3ce04c7cedff16cb68436ab7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a41532ef900cf6b1adbbafde93f489147f1cbca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a41532ef900cf6b1adbbafde93f489147f1cbca", "html_url": "https://github.com/rust-lang/rust/commit/7a41532ef900cf6b1adbbafde93f489147f1cbca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a41532ef900cf6b1adbbafde93f489147f1cbca/comments", "author": {"login": "LingMan", "id": 18645382, "node_id": "MDQ6VXNlcjE4NjQ1Mzgy", "avatar_url": "https://avatars.githubusercontent.com/u/18645382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LingMan", "html_url": "https://github.com/LingMan", "followers_url": "https://api.github.com/users/LingMan/followers", "following_url": "https://api.github.com/users/LingMan/following{/other_user}", "gists_url": "https://api.github.com/users/LingMan/gists{/gist_id}", "starred_url": "https://api.github.com/users/LingMan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LingMan/subscriptions", "organizations_url": "https://api.github.com/users/LingMan/orgs", "repos_url": "https://api.github.com/users/LingMan/repos", "events_url": "https://api.github.com/users/LingMan/events{/privacy}", "received_events_url": "https://api.github.com/users/LingMan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LingMan", "id": 18645382, "node_id": "MDQ6VXNlcjE4NjQ1Mzgy", "avatar_url": "https://avatars.githubusercontent.com/u/18645382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LingMan", "html_url": "https://github.com/LingMan", "followers_url": "https://api.github.com/users/LingMan/followers", "following_url": "https://api.github.com/users/LingMan/following{/other_user}", "gists_url": "https://api.github.com/users/LingMan/gists{/gist_id}", "starred_url": "https://api.github.com/users/LingMan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LingMan/subscriptions", "organizations_url": "https://api.github.com/users/LingMan/orgs", "repos_url": "https://api.github.com/users/LingMan/repos", "events_url": "https://api.github.com/users/LingMan/events{/privacy}", "received_events_url": "https://api.github.com/users/LingMan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2987785df3d46d5ff144a5c67fbb8f5cca798d78", "url": "https://api.github.com/repos/rust-lang/rust/commits/2987785df3d46d5ff144a5c67fbb8f5cca798d78", "html_url": "https://github.com/rust-lang/rust/commit/2987785df3d46d5ff144a5c67fbb8f5cca798d78"}], "stats": {"total": 25, "additions": 9, "deletions": 16}, "files": [{"sha": "fa0ef165cb4f3cf22f07b4cb88fca188a23ca57a", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7a41532ef900cf6b1adbbafde93f489147f1cbca/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a41532ef900cf6b1adbbafde93f489147f1cbca/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=7a41532ef900cf6b1adbbafde93f489147f1cbca", "patch": "@@ -1092,15 +1092,9 @@ impl Expr {\n         if let ExprKind::Block(ref block, _) = self.kind {\n             match block.stmts.last().map(|last_stmt| &last_stmt.kind) {\n                 // Implicit return\n-                Some(&StmtKind::Expr(_)) => true,\n-                Some(&StmtKind::Semi(ref expr)) => {\n-                    if let ExprKind::Ret(_) = expr.kind {\n-                        // Last statement is explicit return.\n-                        true\n-                    } else {\n-                        false\n-                    }\n-                }\n+                Some(StmtKind::Expr(_)) => true,\n+                // Last statement is an explicit return?\n+                Some(StmtKind::Semi(expr)) => matches!(expr.kind, ExprKind::Ret(_)),\n                 // This is a block that doesn't end in either an implicit or explicit return.\n                 _ => false,\n             }\n@@ -1950,7 +1944,7 @@ impl TyKind {\n     }\n \n     pub fn is_unit(&self) -> bool {\n-        if let TyKind::Tup(ref tys) = *self { tys.is_empty() } else { false }\n+        matches!(self, TyKind::Tup(tys) if tys.is_empty())\n     }\n }\n "}, {"sha": "5bcfe2fedee217d2389f16f6c4874808b7958f40", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7a41532ef900cf6b1adbbafde93f489147f1cbca/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a41532ef900cf6b1adbbafde93f489147f1cbca/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=7a41532ef900cf6b1adbbafde93f489147f1cbca", "patch": "@@ -1806,12 +1806,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             output,\n             c_variadic,\n             implicit_self: decl.inputs.get(0).map_or(hir::ImplicitSelfKind::None, |arg| {\n-                let is_mutable_pat = match arg.pat.kind {\n-                    PatKind::Ident(BindingMode::ByValue(mt) | BindingMode::ByRef(mt), _, _) => {\n-                        mt == Mutability::Mut\n-                    }\n-                    _ => false,\n-                };\n+                use BindingMode::{ByRef, ByValue};\n+                let is_mutable_pat = matches!(\n+                    arg.pat.kind,\n+                    PatKind::Ident(ByValue(Mutability::Mut) | ByRef(Mutability::Mut), ..)\n+                );\n \n                 match arg.ty.kind {\n                     TyKind::ImplicitSelf if is_mutable_pat => hir::ImplicitSelfKind::Mut,"}]}