{"sha": "57da3df99a52ccedd7a684d2053db766e5681a61", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3ZGEzZGY5OWE1MmNjZWRkN2E2ODRkMjA1M2RiNzY2ZTU2ODFhNjE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-06T14:17:48Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-06T14:17:48Z"}, "message": "Explicitly remember desugard pats", "tree": {"sha": "9221e6742315cc0faa8cdec5d44852afcf7d28e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9221e6742315cc0faa8cdec5d44852afcf7d28e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57da3df99a52ccedd7a684d2053db766e5681a61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57da3df99a52ccedd7a684d2053db766e5681a61", "html_url": "https://github.com/rust-lang/rust/commit/57da3df99a52ccedd7a684d2053db766e5681a61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57da3df99a52ccedd7a684d2053db766e5681a61/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ffddc4b921685ebd5f9525f7e33913a1d08c04e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ffddc4b921685ebd5f9525f7e33913a1d08c04e", "html_url": "https://github.com/rust-lang/rust/commit/5ffddc4b921685ebd5f9525f7e33913a1d08c04e"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "57ba45b455cd6e6d5e18ac6dd6325096a0c9339f", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57da3df99a52ccedd7a684d2053db766e5681a61/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57da3df99a52ccedd7a684d2053db766e5681a61/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=57da3df99a52ccedd7a684d2053db766e5681a61", "patch": "@@ -151,7 +151,7 @@ pub struct BodySourceMap {\n     expr_map: FxHashMap<ExprSource, ExprId>,\n     expr_map_back: ArenaMap<ExprId, Result<ExprSource, SyntheticSyntax>>,\n     pat_map: FxHashMap<PatSource, PatId>,\n-    pat_map_back: ArenaMap<PatId, PatSource>,\n+    pat_map_back: ArenaMap<PatId, Result<PatSource, SyntheticSyntax>>,\n     field_map: FxHashMap<(ExprId, usize), AstPtr<ast::RecordField>>,\n     expansions: FxHashMap<InFile<AstPtr<ast::MacroCall>>, HirFileId>,\n }\n@@ -242,7 +242,7 @@ impl BodySourceMap {\n     }\n \n     pub fn pat_syntax(&self, pat: PatId) -> Result<PatSource, SyntheticSyntax> {\n-        self.pat_map_back.get(pat).copied().ok_or(SyntheticSyntax)\n+        self.pat_map_back[pat]\n     }\n \n     pub fn node_pat(&self, node: InFile<&ast::Pat>) -> Option<PatId> {"}, {"sha": "ec1b0c2e704b2e23bba6d91ba2fd66aaf6cd2090", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/57da3df99a52ccedd7a684d2053db766e5681a61/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57da3df99a52ccedd7a684d2053db766e5681a61/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=57da3df99a52ccedd7a684d2053db766e5681a61", "patch": "@@ -14,7 +14,7 @@ use ra_syntax::{\n };\n use test_utils::tested_by;\n \n-use super::ExprSource;\n+use super::{ExprSource, PatSource};\n use crate::{\n     adt::StructKind,\n     body::{Body, BodySourceMap, Expander, PatPtr, SyntheticSyntax},\n@@ -133,14 +133,18 @@ where\n     }\n \n     fn alloc_pat(&mut self, pat: Pat, ptr: PatPtr) -> PatId {\n-        let id = self.body.pats.alloc(pat);\n         let src = self.expander.to_source(ptr);\n+        let id = self.make_pat(pat, Ok(src));\n         self.source_map.pat_map.insert(src, id);\n-        self.source_map.pat_map_back.insert(id, src);\n         id\n     }\n     fn missing_pat(&mut self) -> PatId {\n-        self.body.pats.alloc(Pat::Missing)\n+        self.make_pat(Pat::Missing, Err(SyntheticSyntax))\n+    }\n+    fn make_pat(&mut self, pat: Pat, src: Result<PatSource, SyntheticSyntax>) -> PatId {\n+        let id = self.body.pats.alloc(pat);\n+        self.source_map.pat_map_back.insert(id, src);\n+        id\n     }\n \n     fn collect_expr(&mut self, expr: ast::Expr) -> ExprId {"}]}