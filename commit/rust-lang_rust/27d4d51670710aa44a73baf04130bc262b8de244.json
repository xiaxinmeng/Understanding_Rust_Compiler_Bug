{"sha": "27d4d51670710aa44a73baf04130bc262b8de244", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3ZDRkNTE2NzA3MTBhYTQ0YTczYmFmMDQxMzBiYzI2MmI4ZGUyNDQ=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-02-07T19:11:54Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-02-07T19:11:54Z"}, "message": "Simplify RangeInclusive::next[_back]\n\n`match`ing on an `Option<Ordering>` seems cause some confusion for LLVM; switching to just using comparison operators removes a few jumps from the simple `for` loops I was trying.", "tree": {"sha": "ce275ba2bd606e77c189c918ebfcffbaa2f7dfae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce275ba2bd606e77c189c918ebfcffbaa2f7dfae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27d4d51670710aa44a73baf04130bc262b8de244", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27d4d51670710aa44a73baf04130bc262b8de244", "html_url": "https://github.com/rust-lang/rust/commit/27d4d51670710aa44a73baf04130bc262b8de244", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27d4d51670710aa44a73baf04130bc262b8de244/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f93357d3b8938dfe439329c43c1e4f919a70869", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f93357d3b8938dfe439329c43c1e4f919a70869", "html_url": "https://github.com/rust-lang/rust/commit/4f93357d3b8938dfe439329c43c1e4f919a70869"}], "stats": {"total": 47, "additions": 31, "deletions": 16}, "files": [{"sha": "6d582b9a721fe81af2e03d64e2ce6e7f0672bc91", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/27d4d51670710aa44a73baf04130bc262b8de244/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27d4d51670710aa44a73baf04130bc262b8de244/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=27d4d51670710aa44a73baf04130bc262b8de244", "patch": "@@ -331,19 +331,17 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n \n     #[inline]\n     fn next(&mut self) -> Option<A> {\n-        use cmp::Ordering::*;\n-\n-        match self.start.partial_cmp(&self.end) {\n-            Some(Less) => {\n+        if self.start <= self.end {\n+            if self.start < self.end {\n                 let n = self.start.add_one();\n                 Some(mem::replace(&mut self.start, n))\n-            },\n-            Some(Equal) => {\n+            } else {\n                 let last = self.start.replace_one();\n                 self.end.replace_zero();\n                 Some(last)\n-            },\n-            _ => None,\n+            }\n+        } else {\n+            None\n         }\n     }\n \n@@ -425,19 +423,17 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n impl<A: Step> DoubleEndedIterator for ops::RangeInclusive<A> {\n     #[inline]\n     fn next_back(&mut self) -> Option<A> {\n-        use cmp::Ordering::*;\n-\n-        match self.start.partial_cmp(&self.end) {\n-            Some(Less) => {\n+        if self.start <= self.end {\n+            if self.start < self.end {\n                 let n = self.end.sub_one();\n                 Some(mem::replace(&mut self.end, n))\n-            },\n-            Some(Equal) => {\n+            } else {\n                 let last = self.end.replace_zero();\n                 self.start.replace_one();\n                 Some(last)\n-            },\n-            _ => None,\n+            }\n+        } else {\n+            None\n         }\n     }\n "}, {"sha": "c742a1d8048fc99fea3eeed60eb3a8ce99c884c1", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/27d4d51670710aa44a73baf04130bc262b8de244/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27d4d51670710aa44a73baf04130bc262b8de244/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=27d4d51670710aa44a73baf04130bc262b8de244", "patch": "@@ -1332,6 +1332,18 @@ fn test_range_inclusive_exhaustion() {\n     assert_eq!(r.next_back(), Some(10));\n     assert_eq!(r, 1..=0);\n \n+    let mut r = 10..=12;\n+    assert_eq!(r.next(), Some(10));\n+    assert_eq!(r.next(), Some(11));\n+    assert_eq!(r.next(), Some(12));\n+    assert_eq!(r, 1..=0);\n+\n+    let mut r = 10..=12;\n+    assert_eq!(r.next_back(), Some(12));\n+    assert_eq!(r.next_back(), Some(11));\n+    assert_eq!(r.next_back(), Some(10));\n+    assert_eq!(r, 1..=0);\n+\n     let mut r = 10..=12;\n     assert_eq!(r.nth(2), Some(12));\n     assert_eq!(r, 1..=0);\n@@ -1340,6 +1352,13 @@ fn test_range_inclusive_exhaustion() {\n     assert_eq!(r.nth(5), None);\n     assert_eq!(r, 1..=0);\n \n+    let mut r = 100..=10;\n+    assert_eq!(r.next(), None);\n+    assert_eq!(r, 100..=10);\n+\n+    let mut r = 100..=10;\n+    assert_eq!(r.next_back(), None);\n+    assert_eq!(r, 100..=10);\n }\n \n #[test]"}]}