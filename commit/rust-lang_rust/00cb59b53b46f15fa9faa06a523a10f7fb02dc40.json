{"sha": "00cb59b53b46f15fa9faa06a523a10f7fb02dc40", "node_id": "C_kwDOAAsO6NoAKDAwY2I1OWI1M2I0NmYxNWZhOWZhYTA2YTUyM2ExMGY3ZmIwMmRjNDA", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2023-05-05T06:45:48Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2023-05-05T06:56:04Z"}, "message": "btree_map: `Cursor{,Mut}::peek_prev` must agree\n\nOur `Cursor::peek_prev` and `CursorMut::peek_prev` must agree\non how to behave when they are called on the \"null element\".", "tree": {"sha": "3d2afd5288b369c3844bafebc9dcc3e4e713690e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d2afd5288b369c3844bafebc9dcc3e4e713690e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00cb59b53b46f15fa9faa06a523a10f7fb02dc40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00cb59b53b46f15fa9faa06a523a10f7fb02dc40", "html_url": "https://github.com/rust-lang/rust/commit/00cb59b53b46f15fa9faa06a523a10f7fb02dc40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00cb59b53b46f15fa9faa06a523a10f7fb02dc40/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74c4821045c68d42bb8b8a7c998bdb5c2a72bd0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/74c4821045c68d42bb8b8a7c998bdb5c2a72bd0d", "html_url": "https://github.com/rust-lang/rust/commit/74c4821045c68d42bb8b8a7c998bdb5c2a72bd0d"}], "stats": {"total": 23, "additions": 21, "deletions": 2}, "files": [{"sha": "2daef82d6f1ddcd77194dd4ebba92fe6a3cd432c", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00cb59b53b46f15fa9faa06a523a10f7fb02dc40/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00cb59b53b46f15fa9faa06a523a10f7fb02dc40/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=00cb59b53b46f15fa9faa06a523a10f7fb02dc40", "patch": "@@ -3079,8 +3079,8 @@ impl<'a, K, V, A> CursorMut<'a, K, V, A> {\n                 unsafe { self.root.reborrow() }\n                     .as_mut()?\n                     .borrow_mut()\n-                    .first_leaf_edge()\n-                    .next_kv()\n+                    .last_leaf_edge()\n+                    .next_back_kv()\n                     .ok()?\n                     .into_kv_valmut()\n             }"}, {"sha": "7ecffe3eef2d5ac05032713132825dcd0d1f0579", "filename": "library/alloc/src/collections/btree/map/tests.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/00cb59b53b46f15fa9faa06a523a10f7fb02dc40/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00cb59b53b46f15fa9faa06a523a10f7fb02dc40/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs?ref=00cb59b53b46f15fa9faa06a523a10f7fb02dc40", "patch": "@@ -8,6 +8,7 @@ use crate::testing::crash_test::{CrashTestDummy, Panic};\n use crate::testing::ord_chaos::{Cyclic3, Governed, Governor};\n use crate::testing::rng::DeterministicRng;\n use crate::vec::Vec;\n+use core::assert_matches::assert_matches;\n use std::cmp::Ordering;\n use std::iter;\n use std::mem;\n@@ -2448,3 +2449,21 @@ fn test_cursor_mut_insert_after_4() {\n     let mut cur = map.upper_bound_mut(Bound::Included(&2));\n     cur.insert_after(4, 'd');\n }\n+\n+#[test]\n+fn cursor_peek_prev_agrees_with_cursor_mut() {\n+    let mut map = BTreeMap::from([(1, 1), (2, 2), (3, 3)]);\n+\n+    let cursor = map.lower_bound(Bound::Excluded(&3));\n+    assert!(cursor.key().is_none());\n+\n+    let prev = cursor.peek_prev();\n+    assert_matches!(prev, Some((&3, _)));\n+\n+    // Shadow names so the two parts of this test match.\n+    let mut cursor = map.lower_bound_mut(Bound::Excluded(&3));\n+    assert!(cursor.key().is_none());\n+\n+    let prev = cursor.peek_prev();\n+    assert_matches!(prev, Some((&3, _)));\n+}"}]}