{"sha": "975ba58f42b34ff07cd7c2bd73350daed2057186", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NWJhNThmNDJiMzRmZjA3Y2Q3YzJiZDczMzUwZGFlZDIwNTcxODY=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-03-30T16:45:26Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-03-30T16:45:26Z"}, "message": "Use the existing LLVM GitInfo for checking rebuilds", "tree": {"sha": "46906e4d421e4c759afd6ce7165167e4faf0b6e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46906e4d421e4c759afd6ce7165167e4faf0b6e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/975ba58f42b34ff07cd7c2bd73350daed2057186", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/975ba58f42b34ff07cd7c2bd73350daed2057186", "html_url": "https://github.com/rust-lang/rust/commit/975ba58f42b34ff07cd7c2bd73350daed2057186", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/975ba58f42b34ff07cd7c2bd73350daed2057186/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c49da45441d29aadd5935dabbaa8dc09ebad33a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c49da45441d29aadd5935dabbaa8dc09ebad33a", "html_url": "https://github.com/rust-lang/rust/commit/6c49da45441d29aadd5935dabbaa8dc09ebad33a"}], "stats": {"total": 29, "additions": 11, "deletions": 18}, "files": [{"sha": "498bf74bad456e93bb5c9deb607835e6a9bc8e66", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/975ba58f42b34ff07cd7c2bd73350daed2057186/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/975ba58f42b34ff07cd7c2bd73350daed2057186/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=975ba58f42b34ff07cd7c2bd73350daed2057186", "patch": "@@ -67,45 +67,38 @@ impl Step for Llvm {\n             }\n         }\n \n-        let (submodule, root, out_dir, llvm_config_ret_dir) = if emscripten {\n+        let (llvm_commit, root, out_dir, llvm_config_ret_dir) = if emscripten {\n+            let sha = builder.build.emscripten_llvm_info.sha();\n             let dir = builder.emscripten_llvm_out(target);\n             let config_dir = dir.join(\"bin\");\n-            (\"src/llvm-emscripten\", \"src/llvm-emscripten\", dir, config_dir)\n+            (sha, \"src/llvm-emscripten\", dir, config_dir)\n         } else {\n+            let sha = builder.build.in_tree_llvm_info.sha();\n             let mut dir = builder.llvm_out(builder.config.build);\n             if !builder.config.build.contains(\"msvc\") || builder.config.ninja {\n                 dir.push(\"build\");\n             }\n-            (\"src/llvm-project\", \"src/llvm-project/llvm\", builder.llvm_out(target), dir.join(\"bin\"))\n+            (sha, \"src/llvm-project/llvm\", builder.llvm_out(target), dir.join(\"bin\"))\n         };\n \n-        let git_output = t!(Command::new(\"git\")\n-            .args(&[\"rev-parse\", \"--verify\", &format!(\"@:./{}\", submodule)])\n-            .current_dir(&builder.src)\n-            .output());\n-\n-        let llvm_commit = if git_output.status.success() {\n-            Some(git_output.stdout)\n-        } else {\n+        if llvm_commit.is_none() {\n             println!(\n-                \"git could not determine the LLVM submodule commit hash ({}). \\\n+                \"git could not determine the LLVM submodule commit hash. \\\n                 Assuming that an LLVM build is necessary.\",\n-                String::from_utf8_lossy(&git_output.stderr),\n             );\n-            None\n-        };\n+        }\n \n         let build_llvm_config = llvm_config_ret_dir\n             .join(exe(\"llvm-config\", &*builder.config.build));\n         let done_stamp = out_dir.join(\"llvm-finished-building\");\n \n-        if let Some(llvm_commit) = &llvm_commit {\n+        if let Some(llvm_commit) = llvm_commit {\n             if done_stamp.exists() {\n                 let done_contents = t!(fs::read(&done_stamp));\n \n                 // If LLVM was already built previously and the submodule's commit didn't change\n                 // from the previous build, then no action is required.\n-                if done_contents == llvm_commit.as_slice() {\n+                if done_contents == llvm_commit.as_bytes() {\n                     return build_llvm_config\n                 }\n             }\n@@ -296,7 +289,7 @@ impl Step for Llvm {\n         cfg.build();\n \n         if let Some(llvm_commit) = llvm_commit {\n-            t!(fs::write(&done_stamp, &llvm_commit));\n+            t!(fs::write(&done_stamp, llvm_commit));\n         }\n \n         build_llvm_config"}]}