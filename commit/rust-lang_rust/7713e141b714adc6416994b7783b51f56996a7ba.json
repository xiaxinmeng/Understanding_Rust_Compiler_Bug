{"sha": "7713e141b714adc6416994b7783b51f56996a7ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3MTNlMTQxYjcxNGFkYzY0MTY5OTRiNzc4M2I1MWY1Njk5NmE3YmE=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-06-28T01:37:33Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-07-01T21:36:32Z"}, "message": "Report memory use in time-passes\n\nReports the resident set size after each pass (linux-only).", "tree": {"sha": "7b4c14912dd50b9374092db610fa62a80a944f52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b4c14912dd50b9374092db610fa62a80a944f52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7713e141b714adc6416994b7783b51f56996a7ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7713e141b714adc6416994b7783b51f56996a7ba", "html_url": "https://github.com/rust-lang/rust/commit/7713e141b714adc6416994b7783b51f56996a7ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7713e141b714adc6416994b7783b51f56996a7ba/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdf219dd42ad6a1627dd949d3f92193d0c482226", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdf219dd42ad6a1627dd949d3f92193d0c482226", "html_url": "https://github.com/rust-lang/rust/commit/fdf219dd42ad6a1627dd949d3f92193d0c482226"}], "stats": {"total": 41, "additions": 39, "deletions": 2}, "files": [{"sha": "e4e7459f8c60581557b7285f14a241acba3684a7", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7713e141b714adc6416994b7783b51f56996a7ba/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7713e141b714adc6416994b7783b51f56996a7ba/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=7713e141b714adc6416994b7783b51f56996a7ba", "patch": "@@ -62,6 +62,7 @@\n #![feature(vec_push_all)]\n #![feature(wrapping)]\n #![feature(cell_extras)]\n+#![feature(page_size)]\n #![cfg_attr(test, feature(test))]\n \n #![allow(trivial_casts)]"}, {"sha": "162bf6ed9a97f5dbfb6c8393fb51b299e812249c", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7713e141b714adc6416994b7783b51f56996a7ba/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7713e141b714adc6416994b7783b51f56996a7ba/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=7713e141b714adc6416994b7783b51f56996a7ba", "patch": "@@ -59,14 +59,50 @@ pub fn time<T, U, F>(do_it: bool, what: &str, u: U, f: F) -> T where\n     const NANOS_PER_SEC: f64 = 1_000_000_000.0;\n     let secs = dur.secs() as f64;\n     let secs = secs + dur.extra_nanos() as f64 / NANOS_PER_SEC;\n-    println!(\"{}time: {:.3} \\t{}\", repeat(\"  \").take(old).collect::<String>(),\n-             secs, what);\n+\n+    let mem_string = match get_resident() {\n+        Some(n) => {\n+            let mb = n as f64 / 1_000_000.0;\n+            format!(\"; rss: {}MB\", mb.round() as usize)\n+        }\n+        None => \"\".to_owned(),\n+    };\n+    println!(\"{}time: {:.3}{}\\t{}\", repeat(\"  \").take(old).collect::<String>(),\n+             secs, mem_string, what);\n \n     DEPTH.with(|slot| slot.set(old));\n \n     rv\n }\n \n+// Memory reporting\n+fn get_resident() -> Option<usize> {\n+    if cfg!(unix) {\n+        get_proc_self_statm_field(1)\n+    } else {\n+        None\n+    }\n+}\n+\n+// Like std::macros::try!, but for Option<>.\n+macro_rules! option_try(\n+    ($e:expr) => (match $e { Some(e) => e, None => return None })\n+);\n+\n+fn get_proc_self_statm_field(field: usize) -> Option<usize> {\n+    use std::fs::File;\n+    use std::io::Read;\n+\n+    assert!(cfg!(unix));\n+\n+    let mut f = option_try!(File::open(\"/proc/self/statm\").ok());\n+    let mut contents = String::new();\n+    option_try!(f.read_to_string(&mut contents).ok());\n+    let s = option_try!(contents.split_whitespace().nth(field));\n+    let npages = option_try!(s.parse::<usize>().ok());\n+    Some(npages * ::std::env::page_size())\n+}\n+\n pub fn indent<R, F>(op: F) -> R where\n     R: Debug,\n     F: FnOnce() -> R,"}]}