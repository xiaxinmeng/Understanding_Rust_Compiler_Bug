{"sha": "1cb9ccb28442342c7450d516c7a168abbca3e327", "node_id": "C_kwDOAAsO6NoAKDFjYjljY2IyODQ0MjM0MmM3NDUwZDUxNmM3YTE2OGFiYmNhM2UzMjc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-22T11:55:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-22T11:55:00Z"}, "message": "Auto merge of #2384 - RalfJung:vtables, r=RalfJung\n\nadjust for symbolic vtables\n\nThe Miri side of https://github.com/rust-lang/rust/pull/99420", "tree": {"sha": "aac0ca960fe805cc483d49d14f82387778cbb195", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aac0ca960fe805cc483d49d14f82387778cbb195"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cb9ccb28442342c7450d516c7a168abbca3e327", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cb9ccb28442342c7450d516c7a168abbca3e327", "html_url": "https://github.com/rust-lang/rust/commit/1cb9ccb28442342c7450d516c7a168abbca3e327", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cb9ccb28442342c7450d516c7a168abbca3e327/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cab7979f8de065ec000a944fdf245cea2103af8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cab7979f8de065ec000a944fdf245cea2103af8", "html_url": "https://github.com/rust-lang/rust/commit/9cab7979f8de065ec000a944fdf245cea2103af8"}, {"sha": "16b15ec9c9fe92d71824182d766c837012b20028", "url": "https://api.github.com/repos/rust-lang/rust/commits/16b15ec9c9fe92d71824182d766c837012b20028", "html_url": "https://github.com/rust-lang/rust/commit/16b15ec9c9fe92d71824182d766c837012b20028"}], "stats": {"total": 208, "additions": 155, "deletions": 53}, "files": [{"sha": "22b5b1a34a65aecde6df3537207d23807a675c4a", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cb9ccb28442342c7450d516c7a168abbca3e327/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/1cb9ccb28442342c7450d516c7a168abbca3e327/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=1cb9ccb28442342c7450d516c7a168abbca3e327", "patch": "@@ -1 +1 @@\n-a7468c60f8dbf5feb23ad840b174d7e57113a846\n+e7a9c1141698bc4557b9da3d3fce2bf75339427f"}, {"sha": "aa7111cb81fc68f9395ff53a170425bb65c897f0", "filename": "src/intptrcast.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1cb9ccb28442342c7450d516c7a168abbca3e327/src%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb9ccb28442342c7450d516c7a168abbca3e327/src%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintptrcast.rs?ref=1cb9ccb28442342c7450d516c7a168abbca3e327", "patch": "@@ -86,7 +86,9 @@ impl<'mir, 'tcx> GlobalStateInner {\n         if global_state.exposed.contains(&alloc_id) {\n             let (_size, _align, kind) = ecx.get_alloc_info(alloc_id);\n             match kind {\n-                AllocKind::LiveData | AllocKind::Function => return Some(alloc_id),\n+                AllocKind::LiveData | AllocKind::Function | AllocKind::VTable => {\n+                    return Some(alloc_id);\n+                }\n                 AllocKind::Dead => {}\n             }\n         }\n@@ -187,8 +189,8 @@ impl<'mir, 'tcx> GlobalStateInner {\n \n                 // Remember next base address.  If this allocation is zero-sized, leave a gap\n                 // of at least 1 to avoid two allocations having the same base address.\n-                // (The logic in `alloc_id_from_addr` assumes unique addresses, and function\n-                // pointers to different functions need to be distinguishable!)\n+                // (The logic in `alloc_id_from_addr` assumes unique addresses, and different\n+                // function/vtable pointers need to be distinguishable!)\n                 global_state.next_base_addr = base_addr.checked_add(max(size.bytes(), 1)).unwrap();\n                 // Given that `next_base_addr` increases in each allocation, pushing the\n                 // corresponding tuple keeps `int_to_ptr_map` sorted"}, {"sha": "40f4c9ed90c00623261041c09c899f8792ea79a6", "filename": "src/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cb9ccb28442342c7450d516c7a168abbca3e327/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb9ccb28442342c7450d516c7a168abbca3e327/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=1cb9ccb28442342c7450d516c7a168abbca3e327", "patch": "@@ -733,7 +733,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n         if cfg!(debug_assertions) {\n             // The machine promises to never call us on thread-local or extern statics.\n             let alloc_id = ptr.provenance;\n-            match ecx.tcx.get_global_alloc(alloc_id) {\n+            match ecx.tcx.try_get_global_alloc(alloc_id) {\n                 Some(GlobalAlloc::Static(def_id)) if ecx.tcx.is_thread_local_static(def_id) => {\n                     panic!(\"adjust_alloc_base_pointer called on thread-local static\")\n                 }"}, {"sha": "54ab8665ce35c706c4a355e55ae59b8dea1c2179", "filename": "src/shims/backtrace.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1cb9ccb28442342c7450d516c7a168abbca3e327/src%2Fshims%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb9ccb28442342c7450d516c7a168abbca3e327/src%2Fshims%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fbacktrace.rs?ref=1cb9ccb28442342c7450d516c7a168abbca3e327", "patch": "@@ -122,15 +122,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n \n         let ptr = this.read_pointer(ptr)?;\n-        // Take apart the pointer, we need its pieces.\n+        // Take apart the pointer, we need its pieces. The offset encodes the span.\n         let (alloc_id, offset, _prov) = this.ptr_get_alloc_id(ptr)?;\n \n-        let fn_instance =\n-            if let Some(GlobalAlloc::Function(instance)) = this.tcx.get_global_alloc(alloc_id) {\n-                instance\n-            } else {\n-                throw_ub_format!(\"expected function pointer, found {:?}\", ptr);\n-            };\n+        // This has to be an actual global fn ptr, not a dlsym function.\n+        let fn_instance = if let Some(GlobalAlloc::Function(instance)) =\n+            this.tcx.try_get_global_alloc(alloc_id)\n+        {\n+            instance\n+        } else {\n+            throw_ub_format!(\"expected static function pointer, found {:?}\", ptr);\n+        };\n \n         let lo =\n             this.tcx.sess.source_map().lookup_char_pos(BytePos(offset.bytes().try_into().unwrap()));"}, {"sha": "624b32dfd495760f806bc28fbe7a5bb99c1d9a40", "filename": "src/stacked_borrows/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cb9ccb28442342c7450d516c7a168abbca3e327/src%2Fstacked_borrows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb9ccb28442342c7450d516c7a168abbca3e327/src%2Fstacked_borrows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows%2Fmod.rs?ref=1cb9ccb28442342c7450d516c7a168abbca3e327", "patch": "@@ -799,7 +799,7 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                         stacked_borrows.history.log_protector(orig_tag, new_tag, current_span);\n                     }\n                 }\n-                AllocKind::Function | AllocKind::Dead => {\n+                AllocKind::Function | AllocKind::VTable | AllocKind::Dead => {\n                     // No stacked borrows on these allocations.\n                 }\n             }\n@@ -1143,7 +1143,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 trace!(\"Stacked Borrows tag {tag:?} exposed in {alloc_id:?}\");\n                 alloc_extra.stacked_borrows.as_ref().unwrap().borrow_mut().exposed_tags.insert(tag);\n             }\n-            AllocKind::Function | AllocKind::Dead => {\n+            AllocKind::Function | AllocKind::VTable | AllocKind::Dead => {\n                 // No stacked borrows on these allocations.\n             }\n         }"}, {"sha": "0e7c3dbcc040fb66137c21358b1f8b3a16ccaf66", "filename": "tests/fail/dyn-call-trait-mismatch.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1cb9ccb28442342c7450d516c7a168abbca3e327/tests%2Ffail%2Fdyn-call-trait-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb9ccb28442342c7450d516c7a168abbca3e327/tests%2Ffail%2Fdyn-call-trait-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdyn-call-trait-mismatch.rs?ref=1cb9ccb28442342c7450d516c7a168abbca3e327", "patch": "@@ -0,0 +1,16 @@\n+trait T1 {\n+    fn method1(self: Box<Self>);\n+}\n+trait T2 {\n+    fn method2(self: Box<Self>);\n+}\n+\n+impl T1 for i32 {\n+    fn method1(self: Box<Self>) {}\n+}\n+\n+fn main() {\n+    let r = Box::new(0) as Box<dyn T1>;\n+    let r2: Box<dyn T2> = unsafe { std::mem::transmute(r) };\n+    r2.method2(); //~ERROR: call on a pointer whose vtable does not match its type\n+}"}, {"sha": "2673a22a3df264ff67e49fe481990b717f423a1c", "filename": "tests/fail/dyn-call-trait-mismatch.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1cb9ccb28442342c7450d516c7a168abbca3e327/tests%2Ffail%2Fdyn-call-trait-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cb9ccb28442342c7450d516c7a168abbca3e327/tests%2Ffail%2Fdyn-call-trait-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdyn-call-trait-mismatch.stderr?ref=1cb9ccb28442342c7450d516c7a168abbca3e327", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: `dyn` call on a pointer whose vtable does not match its type\n+  --> $DIR/dyn-call-trait-mismatch.rs:LL:CC\n+   |\n+LL |     r2.method2();\n+   |     ^^^^^^^^^^^^ `dyn` call on a pointer whose vtable does not match its type\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+   = note: backtrace:\n+   = note: inside `main` at $DIR/dyn-call-trait-mismatch.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "f53e9a03f4bef44814352c5f38ec69fad6b02be8", "filename": "tests/fail/dyn-upcast-trait-mismatch.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/1cb9ccb28442342c7450d516c7a168abbca3e327/tests%2Ffail%2Fdyn-upcast-trait-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb9ccb28442342c7450d516c7a168abbca3e327/tests%2Ffail%2Fdyn-upcast-trait-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdyn-upcast-trait-mismatch.rs?ref=1cb9ccb28442342c7450d516c7a168abbca3e327", "patch": "@@ -0,0 +1,58 @@\n+#![feature(trait_upcasting)]\n+#![allow(incomplete_features)]\n+\n+trait Foo: PartialEq<i32> + std::fmt::Debug + Send + Sync {\n+    fn a(&self) -> i32 {\n+        10\n+    }\n+\n+    fn z(&self) -> i32 {\n+        11\n+    }\n+\n+    fn y(&self) -> i32 {\n+        12\n+    }\n+}\n+\n+trait Bar: Foo {\n+    fn b(&self) -> i32 {\n+        20\n+    }\n+\n+    fn w(&self) -> i32 {\n+        21\n+    }\n+}\n+\n+trait Baz: Bar {\n+    fn c(&self) -> i32 {\n+        30\n+    }\n+}\n+\n+impl Foo for i32 {\n+    fn a(&self) -> i32 {\n+        100\n+    }\n+}\n+\n+impl Bar for i32 {\n+    fn b(&self) -> i32 {\n+        200\n+    }\n+}\n+\n+impl Baz for i32 {\n+    fn c(&self) -> i32 {\n+        300\n+    }\n+}\n+\n+fn main() {\n+    let baz: &dyn Baz = &1;\n+    // We already fail on the implicit upcast inserted here.\n+    let baz_fake: &dyn Bar = unsafe { std::mem::transmute(baz) };\n+    //~^ERROR: upcast on a pointer whose vtable does not match its type\n+    let _err = baz_fake as &dyn Foo;\n+}"}, {"sha": "0e5e22b9b4b997873b29913d616316b75f7c423c", "filename": "tests/fail/dyn-upcast-trait-mismatch.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1cb9ccb28442342c7450d516c7a168abbca3e327/tests%2Ffail%2Fdyn-upcast-trait-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cb9ccb28442342c7450d516c7a168abbca3e327/tests%2Ffail%2Fdyn-upcast-trait-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdyn-upcast-trait-mismatch.stderr?ref=1cb9ccb28442342c7450d516c7a168abbca3e327", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: upcast on a pointer whose vtable does not match its type\n+  --> $DIR/dyn-upcast-trait-mismatch.rs:LL:CC\n+   |\n+LL |     let baz_fake: &dyn Bar = unsafe { std::mem::transmute(baz) };\n+   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^ upcast on a pointer whose vtable does not match its type\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+   = note: backtrace:\n+   = note: inside `main` at $DIR/dyn-upcast-trait-mismatch.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "ddeda599214f6f3608e77d2b0261abec399a50ae", "filename": "tests/fail/intrinsics/simd-float-to-int.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cb9ccb28442342c7450d516c7a168abbca3e327/tests%2Ffail%2Fintrinsics%2Fsimd-float-to-int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cb9ccb28442342c7450d516c7a168abbca3e327/tests%2Ffail%2Fintrinsics%2Fsimd-float-to-int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-float-to-int.stderr?ref=1cb9ccb28442342c7450d516c7a168abbca3e327", "patch": "@@ -7,7 +7,7 @@ LL | implement! { f32 }\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: backtrace:\n-   = note: inside `core::core_simd::round::<impl std::simd::Simd<f32, 2_usize>>::to_int_unchecked::<i32>` at RUSTLIB/core/src/../../portable-simd/crates/core_simd/src/round.rs:LL:CC\n+   = note: inside `core::core_simd::round::<impl std::simd::Simd<f32, 2>>::to_int_unchecked::<i32>` at RUSTLIB/core/src/../../portable-simd/crates/core_simd/src/round.rs:LL:CC\n note: inside `main` at $DIR/simd-float-to-int.rs:LL:CC\n   --> $DIR/simd-float-to-int.rs:LL:CC\n    |"}, {"sha": "a23307c05ffbc1efa28acd4fc77f30bfe7a175f9", "filename": "tests/fail/intrinsics/simd-gather.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cb9ccb28442342c7450d516c7a168abbca3e327/tests%2Ffail%2Fintrinsics%2Fsimd-gather.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cb9ccb28442342c7450d516c7a168abbca3e327/tests%2Ffail%2Fintrinsics%2Fsimd-gather.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-gather.stderr?ref=1cb9ccb28442342c7450d516c7a168abbca3e327", "patch": "@@ -7,7 +7,7 @@ LL |         unsafe { intrinsics::simd_gather(or, ptrs, enable.to_int()) }\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: backtrace:\n-   = note: inside `std::simd::Simd::<i8, 4_usize>::gather_select_unchecked` at RUSTLIB/core/src/../../portable-simd/crates/core_simd/src/vector.rs:LL:CC\n+   = note: inside `std::simd::Simd::<i8, 4>::gather_select_unchecked` at RUSTLIB/core/src/../../portable-simd/crates/core_simd/src/vector.rs:LL:CC\n note: inside `main` at $DIR/simd-gather.rs:LL:CC\n   --> $DIR/simd-gather.rs:LL:CC\n    |"}, {"sha": "ba8c8f3470601e6d77fc0b50bf544639734d1e2a", "filename": "tests/fail/intrinsics/simd-scatter.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cb9ccb28442342c7450d516c7a168abbca3e327/tests%2Ffail%2Fintrinsics%2Fsimd-scatter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cb9ccb28442342c7450d516c7a168abbca3e327/tests%2Ffail%2Fintrinsics%2Fsimd-scatter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-scatter.stderr?ref=1cb9ccb28442342c7450d516c7a168abbca3e327", "patch": "@@ -7,7 +7,7 @@ LL |             intrinsics::simd_scatter(self, ptrs, enable.to_int())\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: backtrace:\n-   = note: inside `std::simd::Simd::<i8, 4_usize>::scatter_select_unchecked` at RUSTLIB/core/src/../../portable-simd/crates/core_simd/src/vector.rs:LL:CC\n+   = note: inside `std::simd::Simd::<i8, 4>::scatter_select_unchecked` at RUSTLIB/core/src/../../portable-simd/crates/core_simd/src/vector.rs:LL:CC\n note: inside `main` at $DIR/simd-scatter.rs:LL:CC\n   --> $DIR/simd-scatter.rs:LL:CC\n    |"}, {"sha": "387253a3f9872e7c4a0a3f51dfdab9571db7f58b", "filename": "tests/fail/issue-miri-1112.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cb9ccb28442342c7450d516c7a168abbca3e327/tests%2Ffail%2Fissue-miri-1112.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb9ccb28442342c7450d516c7a168abbca3e327/tests%2Ffail%2Fissue-miri-1112.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fissue-miri-1112.rs?ref=1cb9ccb28442342c7450d516c7a168abbca3e327", "patch": "@@ -28,7 +28,7 @@ impl FunnyPointer {\n             data: data as *const _ as *const (),\n             vtable: ptr as *const _ as *const (),\n         };\n-        let obj = std::mem::transmute::<FatPointer, *mut FunnyPointer>(obj); //~ ERROR: invalid drop function pointer in vtable\n+        let obj = std::mem::transmute::<FatPointer, *mut FunnyPointer>(obj); //~ ERROR: expected a vtable pointer\n         &*obj\n     }\n }"}, {"sha": "4a2bdb0f414d44bdf8b3cc80f2c9d42b4cbf948a", "filename": "tests/fail/issue-miri-1112.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cb9ccb28442342c7450d516c7a168abbca3e327/tests%2Ffail%2Fissue-miri-1112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cb9ccb28442342c7450d516c7a168abbca3e327/tests%2Ffail%2Fissue-miri-1112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fissue-miri-1112.stderr?ref=1cb9ccb28442342c7450d516c7a168abbca3e327", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: constructing invalid value: encountered invalid drop function pointer in vtable (function has incompatible signature)\n+error: Undefined Behavior: constructing invalid value: encountered $HEX[ALLOC]<TAG>, but expected a vtable pointer\n   --> $DIR/issue-miri-1112.rs:LL:CC\n    |\n LL |         let obj = std::mem::transmute::<FatPointer, *mut FunnyPointer>(obj);\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered invalid drop function pointer in vtable (function has incompatible signature)\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered $HEX[ALLOC]<TAG>, but expected a vtable pointer\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "534f811e48abe233db9855192ea24e4bc76e2d28", "filename": "tests/fail/stacked_borrows/vtable.stderr", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9cab7979f8de065ec000a944fdf245cea2103af8/tests%2Ffail%2Fstacked_borrows%2Fvtable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cab7979f8de065ec000a944fdf245cea2103af8/tests%2Ffail%2Fstacked_borrows%2Fvtable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fvtable.stderr?ref=9cab7979f8de065ec000a944fdf245cea2103af8", "patch": "@@ -1,25 +0,0 @@\n-error: Undefined Behavior: constructing invalid value: encountered vtable pointer does not have permission to read drop function pointer\n-  --> RUSTLIB/core/src/ptr/metadata.rs:LL:CC\n-   |\n-LL |     unsafe { PtrRepr { components: PtrComponents { data_address, metadata } }.const_ptr }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered vtable pointer does not have permission to read drop function pointer\n-   |\n-   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n-   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n-   = note: inside `std::ptr::from_raw_parts::<dyn Foo>` at RUSTLIB/core/src/ptr/metadata.rs:LL:CC\n-note: inside `uwu` at $DIR/vtable.rs:LL:CC\n-  --> $DIR/vtable.rs:LL:CC\n-   |\n-LL |     core::ptr::from_raw_parts(thin, unsafe { core::mem::transmute(meta) })\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: inside `main` at $DIR/vtable.rs:LL:CC\n-  --> $DIR/vtable.rs:LL:CC\n-   |\n-LL |         let _ = uwu(ptr, core::mem::transmute(meta));\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n-\n-error: aborting due to previous error\n-"}, {"sha": "2ad972a9d4d7d6a2f5ebf44d82c5550329e6a327", "filename": "tests/fail/validity/invalid_wide_raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cb9ccb28442342c7450d516c7a168abbca3e327/tests%2Ffail%2Fvalidity%2Finvalid_wide_raw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb9ccb28442342c7450d516c7a168abbca3e327/tests%2Ffail%2Fvalidity%2Finvalid_wide_raw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Finvalid_wide_raw.rs?ref=1cb9ccb28442342c7450d516c7a168abbca3e327", "patch": "@@ -7,5 +7,5 @@ fn main() {\n         #[allow(dead_code)]\n         x: *mut dyn T,\n     }\n-    dbg!(S { x: unsafe { std::mem::transmute((0usize, 0usize)) } }); //~ ERROR: encountered dangling vtable pointer in wide pointer\n+    dbg!(S { x: unsafe { std::mem::transmute((0usize, 0usize)) } }); //~ ERROR: encountered null pointer, but expected a vtable pointer\n }"}, {"sha": "304008f65163147b2fbe3a90ef2441b15337e1dc", "filename": "tests/fail/validity/invalid_wide_raw.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cb9ccb28442342c7450d516c7a168abbca3e327/tests%2Ffail%2Fvalidity%2Finvalid_wide_raw.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cb9ccb28442342c7450d516c7a168abbca3e327/tests%2Ffail%2Fvalidity%2Finvalid_wide_raw.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Finvalid_wide_raw.stderr?ref=1cb9ccb28442342c7450d516c7a168abbca3e327", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: constructing invalid value: encountered dangling vtable pointer in wide pointer\n+error: Undefined Behavior: constructing invalid value: encountered null pointer, but expected a vtable pointer\n   --> $DIR/invalid_wide_raw.rs:LL:CC\n    |\n LL |     dbg!(S { x: unsafe { std::mem::transmute((0usize, 0usize)) } });\n-   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered dangling vtable pointer in wide pointer\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered null pointer, but expected a vtable pointer\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "e39e5fe454a2c11c97a4b76a1b9433f134338b99", "filename": "tests/pass/issues/issue-miri-2123.rs", "status": "renamed", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1cb9ccb28442342c7450d516c7a168abbca3e327/tests%2Fpass%2Fissues%2Fissue-miri-2123.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb9ccb28442342c7450d516c7a168abbca3e327/tests%2Fpass%2Fissues%2Fissue-miri-2123.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fissues%2Fissue-miri-2123.rs?ref=1cb9ccb28442342c7450d516c7a168abbca3e327", "patch": "@@ -1,19 +1,21 @@\n-//@error-pattern: vtable pointer does not have permission\n-#![feature(ptr_metadata)]\n+#![feature(ptr_metadata, layout_for_ptr)]\n+\n+use std::{mem, ptr};\n \n trait Foo {}\n \n impl Foo for u32 {}\n \n fn uwu(thin: *const (), meta: &'static ()) -> *const dyn Foo {\n-    core::ptr::from_raw_parts(thin, unsafe { core::mem::transmute(meta) })\n+    ptr::from_raw_parts(thin, unsafe { mem::transmute(meta) })\n }\n \n fn main() {\n     unsafe {\n         let orig = 1_u32;\n         let x = &orig as &dyn Foo;\n         let (ptr, meta) = (x as *const dyn Foo).to_raw_parts();\n-        let _ = uwu(ptr, core::mem::transmute(meta));\n+        let ptr = uwu(ptr, mem::transmute(meta));\n+        let _size = mem::size_of_val_raw(ptr);\n     }\n }", "previous_filename": "tests/fail/stacked_borrows/vtable.rs"}, {"sha": "a271e764d9f4aa8a1ee3f5e9272e05b12524d103", "filename": "tests/pass/pointers.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1cb9ccb28442342c7450d516c7a168abbca3e327/tests%2Fpass%2Fpointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb9ccb28442342c7450d516c7a168abbca3e327/tests%2Fpass%2Fpointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fpointers.rs?ref=1cb9ccb28442342c7450d516c7a168abbca3e327", "patch": "@@ -1,4 +1,7 @@\n-use std::mem::transmute;\n+#![feature(ptr_metadata)]\n+\n+use std::mem::{self, transmute};\n+use std::ptr;\n \n fn one_line_ref() -> i16 {\n     *&1\n@@ -71,6 +74,19 @@ fn wide_ptr_ops() {\n     assert!(!(a > b));\n }\n \n+fn metadata_vtable() {\n+    let p = &0i32 as &dyn std::fmt::Debug;\n+    let meta: ptr::DynMetadata<_> = ptr::metadata(p as *const _);\n+    assert_eq!(meta.size_of(), mem::size_of::<i32>());\n+    assert_eq!(meta.align_of(), mem::align_of::<i32>());\n+\n+    type T = [i32; 16];\n+    let p = &T::default() as &dyn std::fmt::Debug;\n+    let meta: ptr::DynMetadata<_> = ptr::metadata(p as *const _);\n+    assert_eq!(meta.size_of(), mem::size_of::<T>());\n+    assert_eq!(meta.align_of(), mem::align_of::<T>());\n+}\n+\n fn main() {\n     assert_eq!(one_line_ref(), 1);\n     assert_eq!(basic_ref(), 1);\n@@ -116,4 +132,5 @@ fn main() {\n     assert!(dangling >= 4);\n \n     wide_ptr_ops();\n+    metadata_vtable();\n }"}]}