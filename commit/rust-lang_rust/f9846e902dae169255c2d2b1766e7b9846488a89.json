{"sha": "f9846e902dae169255c2d2b1766e7b9846488a89", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5ODQ2ZTkwMmRhZTE2OTI1NWMyZDJiMTc2NmU3Yjk4NDY0ODhhODk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-05-11T21:31:06Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-05-19T17:53:06Z"}, "message": "rustc: Shorten MSVC metadata section name\n\nIt looks like section names in objects generated by `link.exe` are limited to at\nmost 8 characters in length, so shorten `.note.rustc` to just `.rustc`", "tree": {"sha": "c0e33530d0d71ce595344abbdfa8ee5a53d4e495", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0e33530d0d71ce595344abbdfa8ee5a53d4e495"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9846e902dae169255c2d2b1766e7b9846488a89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9846e902dae169255c2d2b1766e7b9846488a89", "html_url": "https://github.com/rust-lang/rust/commit/f9846e902dae169255c2d2b1766e7b9846488a89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9846e902dae169255c2d2b1766e7b9846488a89/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4ef308473f284a93d2d9f32763e09ba7424540b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4ef308473f284a93d2d9f32763e09ba7424540b", "html_url": "https://github.com/rust-lang/rust/commit/a4ef308473f284a93d2d9f32763e09ba7424540b"}], "stats": {"total": 44, "additions": 30, "deletions": 14}, "files": [{"sha": "e8dcd493074bc80926e8cf72e5c4aae4217f0406", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f9846e902dae169255c2d2b1766e7b9846488a89/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9846e902dae169255c2d2b1766e7b9846488a89/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=f9846e902dae169255c2d2b1766e7b9846488a89", "patch": "@@ -526,8 +526,7 @@ impl<'a> Context<'a> {\n \n         for (lib, kind) in m {\n             info!(\"{} reading metadata from: {}\", flavor, lib.display());\n-            let metadata = match get_metadata_section(self.target.options.is_like_osx,\n-                                                      &lib) {\n+            let metadata = match get_metadata_section(self.target, &lib) {\n                 Ok(blob) => {\n                     if self.crate_matches(blob.as_slice(), &lib) {\n                         blob\n@@ -715,17 +714,19 @@ impl ArchiveMetadata {\n }\n \n // Just a small wrapper to time how long reading metadata takes.\n-fn get_metadata_section(is_osx: bool, filename: &Path) -> Result<MetadataBlob, String> {\n+fn get_metadata_section(target: &Target, filename: &Path)\n+                        -> Result<MetadataBlob, String> {\n     let mut ret = None;\n     let dur = Duration::span(|| {\n-        ret = Some(get_metadata_section_imp(is_osx, filename));\n+        ret = Some(get_metadata_section_imp(target, filename));\n     });\n     info!(\"reading {:?} => {}ms\", filename.file_name().unwrap(),\n           dur.num_milliseconds());\n     return ret.unwrap();;\n }\n \n-fn get_metadata_section_imp(is_osx: bool, filename: &Path) -> Result<MetadataBlob, String> {\n+fn get_metadata_section_imp(target: &Target, filename: &Path)\n+                            -> Result<MetadataBlob, String> {\n     if !filename.exists() {\n         return Err(format!(\"no such file: '{}'\", filename.display()));\n     }\n@@ -769,7 +770,7 @@ fn get_metadata_section_imp(is_osx: bool, filename: &Path) -> Result<MetadataBlo\n                                              name_len as usize).to_vec();\n             let name = String::from_utf8(name).unwrap();\n             debug!(\"get_metadata_section: name {}\", name);\n-            if read_meta_section_name(is_osx) == name {\n+            if read_meta_section_name(target) == name {\n                 let cbuf = llvm::LLVMGetSectionContents(si.llsi);\n                 let csz = llvm::LLVMGetSectionSize(si.llsi) as usize;\n                 let cvbuf: *const u8 = cbuf as *const u8;\n@@ -799,26 +800,41 @@ fn get_metadata_section_imp(is_osx: bool, filename: &Path) -> Result<MetadataBlo\n     }\n }\n \n-pub fn meta_section_name(is_osx: bool) -> &'static str {\n-    if is_osx {\n+pub fn meta_section_name(target: &Target) -> &'static str {\n+    if target.options.is_like_osx {\n         \"__DATA,__note.rustc\"\n+    } else if target.options.is_like_msvc {\n+        // When using link.exe it was seen that the section name `.note.rustc`\n+        // was getting shortened to `.note.ru`, and according to the PE and COFF\n+        // specification:\n+        //\n+        // > Executable images do not use a string table and do not support\n+        // > section names longer than 8\u00a0characters\n+        //\n+        // https://msdn.microsoft.com/en-us/library/windows/hardware/gg463119.aspx\n+        //\n+        // As a result, we choose a slightly shorter name! As to why\n+        // `.note.rustc` works on MinGW, that's another good question...\n+        \".rustc\"\n     } else {\n         \".note.rustc\"\n     }\n }\n \n-pub fn read_meta_section_name(is_osx: bool) -> &'static str {\n-    if is_osx {\n+pub fn read_meta_section_name(target: &Target) -> &'static str {\n+    if target.options.is_like_osx {\n         \"__note.rustc\"\n+    } else if target.options.is_like_msvc {\n+        \".rustc\"\n     } else {\n         \".note.rustc\"\n     }\n }\n \n // A diagnostic function for dumping crate metadata to an output stream\n-pub fn list_file_metadata(is_osx: bool, path: &Path,\n+pub fn list_file_metadata(target: &Target, path: &Path,\n                           out: &mut io::Write) -> io::Result<()> {\n-    match get_metadata_section(is_osx, path) {\n+    match get_metadata_section(target, path) {\n         Ok(bytes) => decoder::list_crate_metadata(bytes.as_slice(), out),\n         Err(msg) => {\n             write!(out, \"{}\\n\", msg)"}, {"sha": "6e0d68ec3e173654752c05e03027fe66827d3a1c", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9846e902dae169255c2d2b1766e7b9846488a89/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9846e902dae169255c2d2b1766e7b9846488a89/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=f9846e902dae169255c2d2b1766e7b9846488a89", "patch": "@@ -402,7 +402,7 @@ impl RustcDefaultCalls {\n                 &Input::File(ref ifile) => {\n                     let path = &(*ifile);\n                     let mut v = Vec::new();\n-                    metadata::loader::list_file_metadata(sess.target.target.options.is_like_osx,\n+                    metadata::loader::list_file_metadata(&sess.target.target,\n                                                          path,\n                                                          &mut v).unwrap();\n                     println!(\"{}\", String::from_utf8(v).unwrap());"}, {"sha": "1bfe2fd0eec95abb12bfd68aee972b6a35dc6c6e", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9846e902dae169255c2d2b1766e7b9846488a89/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9846e902dae169255c2d2b1766e7b9846488a89/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=f9846e902dae169255c2d2b1766e7b9846488a89", "patch": "@@ -2527,7 +2527,7 @@ pub fn write_metadata(cx: &SharedCrateContext, krate: &ast::Crate) -> Vec<u8> {\n     };\n     unsafe {\n         llvm::LLVMSetInitializer(llglobal, llconst);\n-        let name = loader::meta_section_name(cx.sess().target.target.options.is_like_osx);\n+        let name = loader::meta_section_name(&cx.sess().target.target);\n         let name = CString::new(name).unwrap();\n         llvm::LLVMSetSection(llglobal, name.as_ptr())\n     }"}]}