{"sha": "570eff655208b5f7d28d2e0a587ee514b91b4a42", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3MGVmZjY1NTIwOGI1ZjdkMjhkMmUwYTU4N2VlNTE0YjkxYjRhNDI=", "commit": {"author": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-05-20T18:50:27Z"}, "committer": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-05-20T18:56:26Z"}, "message": "fix: `fill_match_arms` hangs on a tuple of large enums", "tree": {"sha": "38526138e7f4369ea3105274fc7fbcbdd7350a0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38526138e7f4369ea3105274fc7fbcbdd7350a0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/570eff655208b5f7d28d2e0a587ee514b91b4a42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/570eff655208b5f7d28d2e0a587ee514b91b4a42", "html_url": "https://github.com/rust-lang/rust/commit/570eff655208b5f7d28d2e0a587ee514b91b4a42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/570eff655208b5f7d28d2e0a587ee514b91b4a42/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63d317c71a088bc20c6eee7d9ee71a7db44afde0", "url": "https://api.github.com/repos/rust-lang/rust/commits/63d317c71a088bc20c6eee7d9ee71a7db44afde0", "html_url": "https://github.com/rust-lang/rust/commit/63d317c71a088bc20c6eee7d9ee71a7db44afde0"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "3532759bff0fb07b2f52709d2745274b8dc525cc", "filename": "crates/ide_assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/570eff655208b5f7d28d2e0a587ee514b91b4a42/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/570eff655208b5f7d28d2e0a587ee514b91b4a42/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=570eff655208b5f7d28d2e0a587ee514b91b4a42", "patch": "@@ -84,14 +84,26 @@ pub(crate) fn fill_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option<\n         };\n         missing_pats.peekable()\n     } else if let Some(enum_defs) = resolve_tuple_of_enum_def(&ctx.sema, &expr) {\n+        let mut n_arms = 1;\n+        let variants_of_enums: Vec<Vec<ExtendedVariant>> = enum_defs\n+            .into_iter()\n+            .map(|enum_def| enum_def.variants(ctx.db()))\n+            .inspect(|variants| n_arms *= variants.len())\n+            .collect();\n+\n         // When calculating the match arms for a tuple of enums, we want\n         // to create a match arm for each possible combination of enum\n         // values. The `multi_cartesian_product` method transforms\n         // Vec<Vec<EnumVariant>> into Vec<(EnumVariant, .., EnumVariant)>\n         // where each tuple represents a proposed match arm.\n-        let missing_pats = enum_defs\n+\n+        // A number of arms grows very fast on even a small tuple of large enums.\n+        // We skip the assist beyond an arbitrary threshold.\n+        if n_arms > 256 {\n+            return None;\n+        }\n+        let missing_pats = variants_of_enums\n             .into_iter()\n-            .map(|enum_def| enum_def.variants(ctx.db()))\n             .multi_cartesian_product()\n             .map(|variants| {\n                 let patterns ="}]}