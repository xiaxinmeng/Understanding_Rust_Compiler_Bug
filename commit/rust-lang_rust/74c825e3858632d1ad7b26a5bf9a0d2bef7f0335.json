{"sha": "74c825e3858632d1ad7b26a5bf9a0d2bef7f0335", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0YzgyNWUzODU4NjMyZDFhZDdiMjZhNWJmOWEwZDJiZWY3ZjAzMzU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-06T19:55:43Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-07T00:33:17Z"}, "message": "std: Add fs::homedir\n\nReturns the home directory of the user as appropriate for the platform.\n\nIssue #1359", "tree": {"sha": "ff5ec0cc3d4e5abf1d2f2ab17b2a15b22bbad29b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff5ec0cc3d4e5abf1d2f2ab17b2a15b22bbad29b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74c825e3858632d1ad7b26a5bf9a0d2bef7f0335", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74c825e3858632d1ad7b26a5bf9a0d2bef7f0335", "html_url": "https://github.com/rust-lang/rust/commit/74c825e3858632d1ad7b26a5bf9a0d2bef7f0335", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74c825e3858632d1ad7b26a5bf9a0d2bef7f0335/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f4c9315af5b02e6f9ef3df8512f1b0814417ea0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f4c9315af5b02e6f9ef3df8512f1b0814417ea0", "html_url": "https://github.com/rust-lang/rust/commit/2f4c9315af5b02e6f9ef3df8512f1b0814417ea0"}], "stats": {"total": 100, "additions": 100, "deletions": 0}, "files": [{"sha": "cf7173f09576e7561670d1e7b89c428bfd526bb3", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/74c825e3858632d1ad7b26a5bf9a0d2bef7f0335/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c825e3858632d1ad7b26a5bf9a0d2bef7f0335/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=74c825e3858632d1ad7b26a5bf9a0d2bef7f0335", "patch": "@@ -399,6 +399,54 @@ fn normalize(p: path) -> path {\n     }\n }\n \n+/*\n+Function: homedir\n+\n+Returns the path to the user's home directory, if known.\n+\n+On Unix, returns the value of the \"HOME\" environment variable if it is set and\n+not equal to the empty string.\n+\n+On Windows, returns the value of the \"HOME\" environment variable if it is set\n+and not equal to the empty string. Otherwise, returns the value of the\n+\"USERPROFILE\" environment variable if it is set and not equal to the empty\n+string.\n+\n+Otherwise, homedir returns option::none.\n+*/\n+fn homedir() -> option<path> {\n+    ret alt generic_os::getenv(\"HOME\") {\n+        some(p) {\n+    \t    if !str::is_empty(p) {\n+                some(p)\n+            } else {\n+\t        secondary()\n+\t    }\n+\t}\n+\tnone. {\n+\t    secondary()\n+\t}\n+    };\n+\n+    #[cfg(target_os = \"linux\")]\n+    #[cfg(target_os = \"macos\")]\n+    #[cfg(target_os = \"freebsd\")]\n+    fn secondary() -> option<path> {\n+        none\n+    }\n+\n+    #[cfg(target_os = \"win32\")]\n+    fn secondary() -> option<path> {\n+        option::maybe(none, generic_os::getenv(\"USERPROFILE\")) {|p|\n+            if !str::is_empty(p) {\n+                some(p)\n+\t    } else {\n+\t        none\n+\t    }\n+        }\n+    }\n+}\n+\n // Local Variables:\n // mode: rust;\n // fill-column: 78;"}, {"sha": "f0aacf7fe739f7c9f4f553022f65dca6a94aea5e", "filename": "src/test/stdtest/fs.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/74c825e3858632d1ad7b26a5bf9a0d2bef7f0335/src%2Ftest%2Fstdtest%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c825e3858632d1ad7b26a5bf9a0d2bef7f0335/src%2Ftest%2Fstdtest%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Ffs.rs?ref=74c825e3858632d1ad7b26a5bf9a0d2bef7f0335", "patch": "@@ -221,3 +221,55 @@ fn splitext_nobasename() {\n     assert base == \"oh.my/\";\n     assert ext == \"\";\n }\n+\n+#[test]\n+#[cfg(target_os = \"linux\")]\n+#[cfg(target_os = \"macos\")]\n+#[cfg(target_os = \"freebsd\")]\n+fn homedir() {\n+    import getenv = std::generic_os::getenv;\n+    import setenv = std::generic_os::setenv;\n+\n+    let oldhome = getenv(\"HOME\");\n+\n+    setenv(\"HOME\", \"/home/MountainView\");\n+    assert fs::homedir() == some(\"/home/MountainView\");\n+\n+    setenv(\"HOME\", \"\");\n+    assert fs::homedir() == none;\n+\n+    option::may(oldhome, {|s| setenv(\"HOME\", s)});\n+}\n+\n+#[test]\n+#[cfg(target_os = \"win32\")]\n+fn homedir() {\n+    import getenv = std::generic_os::getenv;\n+    import setenv = std::generic_os::setenv;\n+\n+    let oldhome = getenv(\"HOME\");\n+    let olduserprofile = getenv(\"USERPROFILE\");\n+\n+    setenv(\"HOME\", \"\");\n+    setenv(\"USERPROFILE\", \"\");\n+\n+    assert fs::homedir() == none;\n+\n+    setenv(\"HOME\", \"/home/MountainView\");\n+    assert fs::homedir() == some(\"/home/MountainView\");\n+\n+    setenv(\"HOME\", \"\");\n+\n+    setenv(\"USERPROFILE\", \"/home/MountainView\");\n+    assert fs::homedir() == some(\"/home/MountainView\");\n+\n+    setenv(\"USERPROFILE\", \"/home/MountainView\");\n+    assert fs::homedir() == some(\"/home/MountainView\");\n+\n+    setenv(\"HOME\", \"/home/MountainView\");\n+    setenv(\"USERPROFILE\", \"/home/PaloAlto\");\n+    assert fs::homedir() == some(\"/home/MountainView\");\n+\n+    option::may(oldhome, {|s| setenv(\"HOME\", s)});\n+    option::may(olduserprofile, {|s| setenv(\"USERPROFILE\", s)});\n+}"}]}