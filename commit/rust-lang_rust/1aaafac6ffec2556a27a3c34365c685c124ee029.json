{"sha": "1aaafac6ffec2556a27a3c34365c685c124ee029", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhYWFmYWM2ZmZlYzI1NTZhMjdhM2MzNDM2NWM2ODVjMTI0ZWUwMjk=", "commit": {"author": {"name": "Hugues de Valon", "email": "hugues.devalon@arm.com", "date": "2020-09-28T20:10:38Z"}, "committer": {"name": "Hugues de Valon", "email": "hugues.devalon@arm.com", "date": "2020-09-30T14:48:59Z"}, "message": "Add support for cmse_nonsecure_entry attribute\n\nThis patch adds support for the LLVM cmse_nonsecure_entry attribute.\nThis is a target-dependent attribute that only has sense for the\nthumbv8m Rust targets.\nYou can find more information about this attribute here:\nhttps://developer.arm.com/documentation/ecm0359818/latest/\n\nSigned-off-by: Hugues de Valon <hugues.devalon@arm.com>", "tree": {"sha": "77cbc602d6bae6db65f1a4083146042d52035683", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77cbc602d6bae6db65f1a4083146042d52035683"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1aaafac6ffec2556a27a3c34365c685c124ee029", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1aaafac6ffec2556a27a3c34365c685c124ee029", "html_url": "https://github.com/rust-lang/rust/commit/1aaafac6ffec2556a27a3c34365c685c124ee029", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1aaafac6ffec2556a27a3c34365c685c124ee029/comments", "author": {"login": "hug-dev", "id": 29229160, "node_id": "MDQ6VXNlcjI5MjI5MTYw", "avatar_url": "https://avatars.githubusercontent.com/u/29229160?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hug-dev", "html_url": "https://github.com/hug-dev", "followers_url": "https://api.github.com/users/hug-dev/followers", "following_url": "https://api.github.com/users/hug-dev/following{/other_user}", "gists_url": "https://api.github.com/users/hug-dev/gists{/gist_id}", "starred_url": "https://api.github.com/users/hug-dev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hug-dev/subscriptions", "organizations_url": "https://api.github.com/users/hug-dev/orgs", "repos_url": "https://api.github.com/users/hug-dev/repos", "events_url": "https://api.github.com/users/hug-dev/events{/privacy}", "received_events_url": "https://api.github.com/users/hug-dev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hug-dev", "id": 29229160, "node_id": "MDQ6VXNlcjI5MjI5MTYw", "avatar_url": "https://avatars.githubusercontent.com/u/29229160?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hug-dev", "html_url": "https://github.com/hug-dev", "followers_url": "https://api.github.com/users/hug-dev/followers", "following_url": "https://api.github.com/users/hug-dev/following{/other_user}", "gists_url": "https://api.github.com/users/hug-dev/gists{/gist_id}", "starred_url": "https://api.github.com/users/hug-dev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hug-dev/subscriptions", "organizations_url": "https://api.github.com/users/hug-dev/orgs", "repos_url": "https://api.github.com/users/hug-dev/repos", "events_url": "https://api.github.com/users/hug-dev/events{/privacy}", "received_events_url": "https://api.github.com/users/hug-dev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d255d70e7a6a84c82cc74f968f529f42dd40b8ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/d255d70e7a6a84c82cc74f968f529f42dd40b8ce", "html_url": "https://github.com/rust-lang/rust/commit/d255d70e7a6a84c82cc74f968f529f42dd40b8ce"}], "stats": {"total": 155, "additions": 154, "deletions": 1}, "files": [{"sha": "73c34818446a6427341127cb3e5d7ea3cb6e399b", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1aaafac6ffec2556a27a3c34365c685c124ee029/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aaafac6ffec2556a27a3c34365c685c124ee029/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=1aaafac6ffec2556a27a3c34365c685c124ee029", "patch": "@@ -294,6 +294,9 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n     if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::ALLOCATOR) {\n         Attribute::NoAlias.apply_llfn(llvm::AttributePlace::ReturnValue, llfn);\n     }\n+    if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::CMSE_NONSECURE_ENTRY) {\n+        llvm::AddFunctionAttrString(llfn, Function, const_cstr!(\"cmse_nonsecure_entry\"));\n+    }\n     sanitize(cx, codegen_fn_attrs.no_sanitize, llfn);\n \n     // Always annotate functions with the target-cpu they are compiled for."}, {"sha": "ed9b99188bb9032deab557d0749b396a5b85c738", "filename": "compiler/rustc_codegen_llvm/src/llvm/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1aaafac6ffec2556a27a3c34365c685c124ee029/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aaafac6ffec2556a27a3c34365c685c124ee029/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fmod.rs?ref=1aaafac6ffec2556a27a3c34365c685c124ee029", "patch": "@@ -37,6 +37,12 @@ pub fn AddFunctionAttrStringValue(llfn: &'a Value, idx: AttributePlace, attr: &C\n     }\n }\n \n+pub fn AddFunctionAttrString(llfn: &'a Value, idx: AttributePlace, attr: &CStr) {\n+    unsafe {\n+        LLVMRustAddFunctionAttrStringValue(llfn, idx.as_uint(), attr.as_ptr(), std::ptr::null())\n+    }\n+}\n+\n #[derive(Copy, Clone)]\n pub enum AttributePlace {\n     ReturnValue,"}, {"sha": "c97532967323e8e270b8d3dc0d4e14a23f7304c6", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1aaafac6ffec2556a27a3c34365c685c124ee029/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aaafac6ffec2556a27a3c34365c685c124ee029/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=1aaafac6ffec2556a27a3c34365c685c124ee029", "patch": "@@ -458,6 +458,7 @@ E0770: include_str!(\"./error_codes/E0770.md\"),\n E0771: include_str!(\"./error_codes/E0771.md\"),\n E0773: include_str!(\"./error_codes/E0773.md\"),\n E0774: include_str!(\"./error_codes/E0774.md\"),\n+E0775: include_str!(\"./error_codes/E0775.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard"}, {"sha": "f21ee73791cabcc085531047454948deb76f4b08", "filename": "compiler/rustc_error_codes/src/error_codes/E0775.md", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1aaafac6ffec2556a27a3c34365c685c124ee029/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0775.md", "raw_url": "https://github.com/rust-lang/rust/raw/1aaafac6ffec2556a27a3c34365c685c124ee029/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0775.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0775.md?ref=1aaafac6ffec2556a27a3c34365c685c124ee029", "patch": "@@ -0,0 +1,17 @@\n+`#[cmse_nonsecure_entry]` is only valid for targets with the TrustZone-M\n+extension.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0775\n+#![feature(cmse_nonsecure_entry)]\n+\n+#[cmse_nonsecure_entry]\n+fn toto() {}\n+```\n+\n+To fix this error, compile your code for a Rust target that supports the\n+TrustZone-M extension. The current possible targets are:\n+* `thumbv8m.main-none-eabi`\n+* `thumbv8m.main-none-eabihf`\n+* `thumbv8m.base-none-eabi`"}, {"sha": "348cff8d2dad2eb66816deb93f1af57773a38428", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1aaafac6ffec2556a27a3c34365c685c124ee029/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aaafac6ffec2556a27a3c34365c685c124ee029/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=1aaafac6ffec2556a27a3c34365c685c124ee029", "patch": "@@ -590,6 +590,9 @@ declare_features! (\n     /// Allows using and casting function pointers in a `const fn`.\n     (active, const_fn_fn_ptr_basics, \"1.48.0\", Some(57563), None),\n \n+    /// Allows to use the `#[cmse_nonsecure_entry]` attribute.\n+    (active, cmse_nonsecure_entry, \"1.48.0\", Some(75835), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "b7e113e601007b3d39a3096966bf0cfae158573e", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1aaafac6ffec2556a27a3c34365c685c124ee029/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aaafac6ffec2556a27a3c34365c685c124ee029/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=1aaafac6ffec2556a27a3c34365c685c124ee029", "patch": "@@ -349,6 +349,8 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         experimental!(register_tool),\n     ),\n \n+    gated!(cmse_nonsecure_entry, AssumedUsed, template!(Word), experimental!(cmse_nonsecure_entry)),\n+\n     // ==========================================================================\n     // Internal attributes: Stability, deprecation, and unsafe:\n     // =========================================================================="}, {"sha": "d71cdc4e67de4885ecd0587cf2731d859785ed16", "filename": "compiler/rustc_middle/src/middle/codegen_fn_attrs.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1aaafac6ffec2556a27a3c34365c685c124ee029/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aaafac6ffec2556a27a3c34365c685c124ee029/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs?ref=1aaafac6ffec2556a27a3c34365c685c124ee029", "patch": "@@ -79,6 +79,9 @@ bitflags! {\n         /// #[ffi_const]: applies clang's `const` attribute to a foreign function\n         /// declaration.\n         const FFI_CONST                 = 1 << 13;\n+        /// #[cmse_nonsecure_entry]: with a TrustZone-M extension, declare a\n+        /// function as an entry function from Non-Secure code.\n+        const CMSE_NONSECURE_ENTRY      = 1 << 14;\n     }\n }\n "}, {"sha": "e3ad31469b237e7a3d309623b39451a0c2046496", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1aaafac6ffec2556a27a3c34365c685c124ee029/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aaafac6ffec2556a27a3c34365c685c124ee029/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=1aaafac6ffec2556a27a3c34365c685c124ee029", "patch": "@@ -337,6 +337,7 @@ symbols! {\n         closure_to_fn_coercion,\n         cmp,\n         cmpxchg16b_target_feature,\n+        cmse_nonsecure_entry,\n         coerce_unsized,\n         cold,\n         column,"}, {"sha": "6c0d51ed7177164e6dcde8c6bea4a9c54d2f3a98", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1aaafac6ffec2556a27a3c34365c685c124ee029/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aaafac6ffec2556a27a3c34365c685c124ee029/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=1aaafac6ffec2556a27a3c34365c685c124ee029", "patch": "@@ -2543,6 +2543,12 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL;\n         } else if tcx.sess.check_name(attr, sym::used) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::USED;\n+        } else if tcx.sess.check_name(attr, sym::cmse_nonsecure_entry) {\n+            if !tcx.sess.target.target.llvm_target.contains(\"thumbv8m\") {\n+                struct_span_err!(tcx.sess, attr.span, E0775, \"`#[cmse_nonsecure_entry]` is only valid for targets with the TrustZone-M extension\")\n+                    .emit();\n+            }\n+            codegen_fn_attrs.flags |= CodegenFnAttrFlags::CMSE_NONSECURE_ENTRY;\n         } else if tcx.sess.check_name(attr, sym::thread_local) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::THREAD_LOCAL;\n         } else if tcx.sess.check_name(attr, sym::track_caller) {"}, {"sha": "9d69be3e69ba7c2863a9dc6c8af2c376355ab504", "filename": "src/doc/unstable-book/src/language-features/cmse-nonsecure-entry.md", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/1aaafac6ffec2556a27a3c34365c685c124ee029/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcmse-nonsecure-entry.md", "raw_url": "https://github.com/rust-lang/rust/raw/1aaafac6ffec2556a27a3c34365c685c124ee029/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcmse-nonsecure-entry.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcmse-nonsecure-entry.md?ref=1aaafac6ffec2556a27a3c34365c685c124ee029", "patch": "@@ -0,0 +1,75 @@\n+# `cmse_nonsecure_entry`\n+\n+The tracking issue for this feature is: [#75835]\n+\n+[#75835]: https://github.com/rust-lang/rust/issues/75835\n+\n+------------------------\n+\n+The [TrustZone-M\n+feature](https://developer.arm.com/documentation/100690/latest/) is available\n+for targets with the Armv8-M architecture profile (`thumbv8m` in their target\n+name).\n+LLVM, the Rust compiler and the linker are providing\n+[support](https://developer.arm.com/documentation/ecm0359818/latest/) for the\n+TrustZone-M feature.\n+\n+One of the things provided, with this unstable feature, is the\n+`cmse_nonsecure_entry` attribute.  This attribute marks a Secure function as an\n+entry function (see [section\n+5.4](https://developer.arm.com/documentation/ecm0359818/latest/) for details).\n+With this attribute, the compiler will do the following:\n+* add a special symbol on the function which is the `__acle_se_` prefix and the\n+  standard function name\n+* constrain the number of parameters to avoid using the Non-Secure stack\n+* before returning from the function, clear registers that might contain Secure\n+  information\n+* use the `BXNS` instruction to return\n+\n+The special symbol `__acle_se_` will be used by the linker to generate a secure\n+gateway veneer.\n+\n+<!-- NOTE(ignore) this example is specific to thumbv8m targets -->\n+\n+``` rust,ignore\n+#![feature(cmse_nonsecure_entry)]\n+\n+#[no_mangle]\n+#[cmse_nonsecure_entry]\n+pub extern \"C\" fn entry_function(input: u32) -> u32 {\n+    input + 6\n+}\n+```\n+\n+``` text\n+$ rustc --emit obj --crate-type lib --target thumbv8m.main-none-eabi function.rs\n+$ arm-none-eabi-objdump -D function.o\n+\n+00000000 <entry_function>:\n+   0:   b580            push    {r7, lr}\n+   2:   466f            mov     r7, sp\n+   4:   b082            sub     sp, #8\n+   6:   9001            str     r0, [sp, #4]\n+   8:   1d81            adds    r1, r0, #6\n+   a:   460a            mov     r2, r1\n+   c:   4281            cmp     r1, r0\n+   e:   9200            str     r2, [sp, #0]\n+  10:   d30b            bcc.n   2a <entry_function+0x2a>\n+  12:   e7ff            b.n     14 <entry_function+0x14>\n+  14:   9800            ldr     r0, [sp, #0]\n+  16:   b002            add     sp, #8\n+  18:   e8bd 4080       ldmia.w sp!, {r7, lr}\n+  1c:   4671            mov     r1, lr\n+  1e:   4672            mov     r2, lr\n+  20:   4673            mov     r3, lr\n+  22:   46f4            mov     ip, lr\n+  24:   f38e 8800       msr     CPSR_f, lr\n+  28:   4774            bxns    lr\n+  2a:   f240 0000       movw    r0, #0\n+  2e:   f2c0 0000       movt    r0, #0\n+  32:   f240 0200       movw    r2, #0\n+  36:   f2c0 0200       movt    r2, #0\n+  3a:   211c            movs    r1, #28\n+  3c:   f7ff fffe       bl      0 <_ZN4core9panicking5panic17h5c028258ca2fb3f5E>\n+  40:   defe            udf     #254    ; 0xfe\n+```"}, {"sha": "2c56ba7db75b536b0432228b4760ed79174eca30", "filename": "src/llvm-project", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm-project?ref=1aaafac6ffec2556a27a3c34365c685c124ee029", "patch": "@@ -1 +1 @@\n-Subproject commit 7075196da1aa3527f7c87943607e25f3cf24997a\n+Subproject commit 2c56ba7db75b536b0432228b4760ed79174eca30"}, {"sha": "14c334fd0102e9f98bd6a6fa1bc496b39d864853", "filename": "src/test/ui/cmse-nonsecure-entry/params-on-stack.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1aaafac6ffec2556a27a3c34365c685c124ee029/src%2Ftest%2Fui%2Fcmse-nonsecure-entry%2Fparams-on-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aaafac6ffec2556a27a3c34365c685c124ee029/src%2Ftest%2Fui%2Fcmse-nonsecure-entry%2Fparams-on-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure-entry%2Fparams-on-stack.rs?ref=1aaafac6ffec2556a27a3c34365c685c124ee029", "patch": "@@ -0,0 +1,11 @@\n+// gate-test-cmse_nonsecure_entry\n+// compile-flags: --target thumbv8m.main-none-eabi --crate-type lib\n+// only-thumbv8m.main-none-eabi\n+#![feature(cmse_nonsecure_entry)]\n+#![no_std]\n+\n+#[no_mangle]\n+#[cmse_nonsecure_entry]\n+pub extern \"C\" fn entry_function(a: u32, b: u32, c: u32, d: u32, e: u32) -> u32 {\n+    a + b + c + d + e\n+}"}, {"sha": "d9956acbe75771f03d1935fef27476e8482159d6", "filename": "src/test/ui/cmse-nonsecure-entry/params-on-stack.stderr", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1aaafac6ffec2556a27a3c34365c685c124ee029/src%2Ftest%2Fui%2Fcmse-nonsecure-entry%2Fparams-on-stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1aaafac6ffec2556a27a3c34365c685c124ee029/src%2Ftest%2Fui%2Fcmse-nonsecure-entry%2Fparams-on-stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure-entry%2Fparams-on-stack.stderr?ref=1aaafac6ffec2556a27a3c34365c685c124ee029", "patch": "@@ -0,0 +1,5 @@\n+error: <unknown>:0:0: in function entry_function i32 (i32, i32, i32, i32, i32): secure entry function requires arguments on stack\n+\n+\n+error: aborting due to previous error\n+"}, {"sha": "efb4eb09b68a80e874c927c7921509960db6fa14", "filename": "src/test/ui/cmse-nonsecure-entry/trustzone-only.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1aaafac6ffec2556a27a3c34365c685c124ee029/src%2Ftest%2Fui%2Fcmse-nonsecure-entry%2Ftrustzone-only.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aaafac6ffec2556a27a3c34365c685c124ee029/src%2Ftest%2Fui%2Fcmse-nonsecure-entry%2Ftrustzone-only.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure-entry%2Ftrustzone-only.rs?ref=1aaafac6ffec2556a27a3c34365c685c124ee029", "patch": "@@ -0,0 +1,11 @@\n+// gate-test-cmse_nonsecure_entry\n+// ignore-thumbv8m.main-none-eabi\n+#![feature(cmse_nonsecure_entry)]\n+\n+#[no_mangle]\n+#[cmse_nonsecure_entry] //~ ERROR [E0775]\n+pub extern \"C\" fn entry_function(input: u32) -> u32 {\n+    input + 6\n+}\n+\n+fn main() {}"}, {"sha": "d3e0c1e42eb42ef54522a4d0dd0462be83b4927b", "filename": "src/test/ui/cmse-nonsecure-entry/trustzone-only.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1aaafac6ffec2556a27a3c34365c685c124ee029/src%2Ftest%2Fui%2Fcmse-nonsecure-entry%2Ftrustzone-only.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1aaafac6ffec2556a27a3c34365c685c124ee029/src%2Ftest%2Fui%2Fcmse-nonsecure-entry%2Ftrustzone-only.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure-entry%2Ftrustzone-only.stderr?ref=1aaafac6ffec2556a27a3c34365c685c124ee029", "patch": "@@ -0,0 +1,9 @@\n+error[E0775]: `#[cmse_nonsecure_entry]` is only valid for targets with the TrustZone-M extension\n+  --> $DIR/trustzone-only.rs:6:1\n+   |\n+LL | #[cmse_nonsecure_entry]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0775`."}]}