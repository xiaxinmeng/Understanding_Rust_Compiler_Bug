{"sha": "c7fa52df34cfc80f31cc41d797ad847e14e8dd8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3ZmE1MmRmMzRjZmM4MGYzMWNjNDFkNzk3YWQ4NDdlMTRlOGRkOGU=", "commit": {"author": {"name": "Barosl Lee", "email": "vcs@barosl.com", "date": "2015-10-07T22:25:59Z"}, "committer": {"name": "Barosl Lee", "email": "vcs@barosl.com", "date": "2015-10-09T19:49:31Z"}, "message": "Prevent `/**/` from being parsed as a doc comment\n\nPreviously, `/**/` was incorrectly regarded as a doc comment because it\nstarts with `/**` and ends with `*/`. However, this caused an ICE\nbecause some code assumed that the length of a doc comment is at least\n5. This commit adds an additional check to `is_block_doc_comment` that\ntests the length of the input.\n\nFixes #28844.", "tree": {"sha": "9b45350600843e7dc1d506bc9a8281be9e4c730d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b45350600843e7dc1d506bc9a8281be9e4c730d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7fa52df34cfc80f31cc41d797ad847e14e8dd8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7fa52df34cfc80f31cc41d797ad847e14e8dd8e", "html_url": "https://github.com/rust-lang/rust/commit/c7fa52df34cfc80f31cc41d797ad847e14e8dd8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7fa52df34cfc80f31cc41d797ad847e14e8dd8e/comments", "author": {"login": "barosl", "id": 573768, "node_id": "MDQ6VXNlcjU3Mzc2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/573768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/barosl", "html_url": "https://github.com/barosl", "followers_url": "https://api.github.com/users/barosl/followers", "following_url": "https://api.github.com/users/barosl/following{/other_user}", "gists_url": "https://api.github.com/users/barosl/gists{/gist_id}", "starred_url": "https://api.github.com/users/barosl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/barosl/subscriptions", "organizations_url": "https://api.github.com/users/barosl/orgs", "repos_url": "https://api.github.com/users/barosl/repos", "events_url": "https://api.github.com/users/barosl/events{/privacy}", "received_events_url": "https://api.github.com/users/barosl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "barosl", "id": 573768, "node_id": "MDQ6VXNlcjU3Mzc2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/573768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/barosl", "html_url": "https://github.com/barosl", "followers_url": "https://api.github.com/users/barosl/followers", "following_url": "https://api.github.com/users/barosl/following{/other_user}", "gists_url": "https://api.github.com/users/barosl/gists{/gist_id}", "starred_url": "https://api.github.com/users/barosl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/barosl/subscriptions", "organizations_url": "https://api.github.com/users/barosl/orgs", "repos_url": "https://api.github.com/users/barosl/repos", "events_url": "https://api.github.com/users/barosl/events{/privacy}", "received_events_url": "https://api.github.com/users/barosl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3376d8a134e52e1638eff37ed3c0d602a0483d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3376d8a134e52e1638eff37ed3c0d602a0483d7", "html_url": "https://github.com/rust-lang/rust/commit/e3376d8a134e52e1638eff37ed3c0d602a0483d7"}], "stats": {"total": 22, "additions": 20, "deletions": 2}, "files": [{"sha": "490822b934e5ed314a9d68946499f9bb4f31600f", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c7fa52df34cfc80f31cc41d797ad847e14e8dd8e/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7fa52df34cfc80f31cc41d797ad847e14e8dd8e/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=c7fa52df34cfc80f31cc41d797ad847e14e8dd8e", "patch": "@@ -1385,8 +1385,9 @@ pub fn is_doc_comment(s: &str) -> bool {\n }\n \n pub fn is_block_doc_comment(s: &str) -> bool {\n-    let res = (s.starts_with(\"/**\") && *s.as_bytes().get(3).unwrap_or(&b' ') != b'*')\n-              || s.starts_with(\"/*!\");\n+    let res = ((s.starts_with(\"/**\") && *s.as_bytes().get(3).unwrap_or(&b' ') != b'*')\n+               || s.starts_with(\"/*!\"))\n+              && s.len() >= 5; // Prevent `/**/` from being parsed as a doc comment\n     debug!(\"is {:?} a doc comment? {}\", s, res);\n     res\n }"}, {"sha": "5c521a5f304d458b5624d34b742e55ea72f648bd", "filename": "src/test/compile-fail/empty-comment.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c7fa52df34cfc80f31cc41d797ad847e14e8dd8e/src%2Ftest%2Fcompile-fail%2Fempty-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7fa52df34cfc80f31cc41d797ad847e14e8dd8e/src%2Ftest%2Fcompile-fail%2Fempty-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-comment.rs?ref=c7fa52df34cfc80f31cc41d797ad847e14e8dd8e", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// `/**/` was previously regarded as a doc comment because it starts with `/**` and ends with `*/`.\n+// This could break some internal logic that assumes the length of a doc comment is at least 5,\n+// leading to an ICE.\n+\n+fn main() {\n+    println!(/**/); //~ ERROR unexpected end\n+}"}]}