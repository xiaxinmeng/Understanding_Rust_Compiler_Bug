{"sha": "4cb7ef0f94b46b5bab5ee5d6fbbb691f7879f13b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjYjdlZjBmOTRiNDZiNWJhYjVlZTVkNmZiYmI2OTFmNzg3OWYxM2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-17T06:16:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-17T06:16:00Z"}, "message": "Auto merge of #77455 - asm89:faster-spawn, r=kennytm\n\nUse posix_spawn() on unix if program is a path\n\nPreviously `Command::spawn` would fall back to the non-posix_spawn based\nimplementation if the `PATH` environment variable was possibly changed.\nOn systems with a modern (g)libc `posix_spawn()` can be significantly\nfaster. If program is a path itself the `PATH` environment variable is\nnot used for the lookup and it should be safe to use the\n`posix_spawnp()` method. [1]\n\nWe found this, because we have a cli application that effectively runs a\nlot of subprocesses. It would sometimes noticeably hang while printing\noutput. Profiling showed that the process was spending the majority of\ntime in the kernel's `copy_page_range` function while spawning\nsubprocesses. During this time the process is completely blocked from\nrunning, explaining why users were reporting the cli app hanging.\n\nThrough this we discovered that `std::process::Command` has a fast and\nslow path for process execution. The fast path is backed by\n`posix_spawnp()` and the slow path by fork/exec syscalls being called\nexplicitly. Using fork for process creation is supposed to be fast, but\nit slows down as your process uses more memory.  It's not because the\nkernel copies the actual memory from the parent, but it does need to\ncopy the references to it (see `copy_page_range` above!).  We ended up\nusing the slow path, because the command spawn implementation in falls\nback to the slow path if it suspects the PATH environment variable was\nchanged.\n\nHere is a smallish program demonstrating the slowdown before this code\nchange:\n\n```\nuse std::process::Command;\nuse std::time::Instant;\n\nfn main() {\n    let mut args = std::env::args().skip(1);\n    if let Some(size) = args.next() {\n        // Allocate some memory\n        let _xs: Vec<_> = std::iter::repeat(0)\n            .take(size.parse().expect(\"valid number\"))\n            .collect();\n\n        let mut command = Command::new(\"/bin/sh\");\n        command\n            .arg(\"-c\")\n            .arg(\"echo hello\");\n\n        if args.next().is_some() {\n            println!(\"Overriding PATH\");\n            command.env(\"PATH\", std::env::var(\"PATH\").expect(\"PATH env var\"));\n        }\n\n        let now = Instant::now();\n        let child = command\n            .spawn()\n            .expect(\"failed to execute process\");\n\n        println!(\"Spawn took: {:?}\", now.elapsed());\n\n        let output = child.wait_with_output().expect(\"failed to wait on process\");\n        println!(\"Output: {:?}\", output);\n    } else {\n        eprintln!(\"Usage: prog [size]\");\n        std::process::exit(1);\n    }\n    ()\n}\n```\n\nRunning it and passing different amounts of elements to use to allocate\nmemory shows that the time taken for `spawn()` can differ quite\nsignificantly. In latter case the `posix_spawnp()` implementation is 30x\nfaster:\n\n```\n$ cargo run --release 10000000\n...\nSpawn took: 324.275\u00b5s\nhello\n$ cargo run --release 10000000 changepath\n...\nOverriding PATH\nSpawn took: 2.346809ms\nhello\n$ cargo run --release 100000000\n...\nSpawn took: 387.842\u00b5s\nhello\n$ cargo run --release 100000000 changepath\n...\nOverriding PATH\nSpawn took: 13.434677ms\nhello\n```\n\n[1]: https://github.com/bminor/glibc/blob/5f72f9800b250410cad3abfeeb09469ef12b2438/posix/execvpe.c#L81", "tree": {"sha": "1dc8b157e539ac888b44521bb05043effc482a53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1dc8b157e539ac888b44521bb05043effc482a53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cb7ef0f94b46b5bab5ee5d6fbbb691f7879f13b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cb7ef0f94b46b5bab5ee5d6fbbb691f7879f13b", "html_url": "https://github.com/rust-lang/rust/commit/4cb7ef0f94b46b5bab5ee5d6fbbb691f7879f13b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cb7ef0f94b46b5bab5ee5d6fbbb691f7879f13b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66e37b65bfa96e58243cc2befabf8bc920eda3c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/66e37b65bfa96e58243cc2befabf8bc920eda3c0", "html_url": "https://github.com/rust-lang/rust/commit/66e37b65bfa96e58243cc2befabf8bc920eda3c0"}, {"sha": "8fe61546696b626ecf68ef838d5d82e393719e80", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fe61546696b626ecf68ef838d5d82e393719e80", "html_url": "https://github.com/rust-lang/rust/commit/8fe61546696b626ecf68ef838d5d82e393719e80"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "372e5e6a5b367eaf4e5404b4925305a8ffb033d6", "filename": "library/std/src/sys/unix/process/process_common.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4cb7ef0f94b46b5bab5ee5d6fbbb691f7879f13b/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb7ef0f94b46b5bab5ee5d6fbbb691f7879f13b/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=4cb7ef0f94b46b5bab5ee5d6fbbb691f7879f13b", "patch": "@@ -255,11 +255,17 @@ impl Command {\n         let maybe_env = self.env.capture_if_changed();\n         maybe_env.map(|env| construct_envp(env, &mut self.saw_nul))\n     }\n+\n     #[allow(dead_code)]\n     pub fn env_saw_path(&self) -> bool {\n         self.env.have_changed_path()\n     }\n \n+    #[allow(dead_code)]\n+    pub fn program_is_path(&self) -> bool {\n+        self.program.to_bytes().contains(&b'/')\n+    }\n+\n     pub fn setup_io(\n         &self,\n         default: Stdio,"}, {"sha": "b05319c89e8f2f03abc7f9e1ce18ca3b80d19390", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cb7ef0f94b46b5bab5ee5d6fbbb691f7879f13b/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb7ef0f94b46b5bab5ee5d6fbbb691f7879f13b/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=4cb7ef0f94b46b5bab5ee5d6fbbb691f7879f13b", "patch": "@@ -285,7 +285,7 @@ impl Command {\n \n         if self.get_gid().is_some()\n             || self.get_uid().is_some()\n-            || self.env_saw_path()\n+            || (self.env_saw_path() && !self.program_is_path())\n             || !self.get_closures().is_empty()\n         {\n             return Ok(None);"}]}