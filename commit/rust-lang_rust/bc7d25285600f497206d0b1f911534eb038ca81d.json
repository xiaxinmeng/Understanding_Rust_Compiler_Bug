{"sha": "bc7d25285600f497206d0b1f911534eb038ca81d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjN2QyNTI4NTYwMGY0OTcyMDZkMGIxZjkxMTUzNGViMDM4Y2E4MWQ=", "commit": {"author": {"name": "swgillespie", "email": "sean.william.g@gmail.com", "date": "2015-09-15T05:20:56Z"}, "committer": {"name": "swgillespie", "email": "sean.william.g@gmail.com", "date": "2015-09-15T05:20:56Z"}, "message": "use the constant folder to generalize the lint a little bit and clean up the code. Add additional tests for things that should not be linted", "tree": {"sha": "9abe92cdd5a8051e1e65f7d1d81aba93b30cfb22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9abe92cdd5a8051e1e65f7d1d81aba93b30cfb22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc7d25285600f497206d0b1f911534eb038ca81d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc7d25285600f497206d0b1f911534eb038ca81d", "html_url": "https://github.com/rust-lang/rust/commit/bc7d25285600f497206d0b1f911534eb038ca81d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc7d25285600f497206d0b1f911534eb038ca81d/comments", "author": {"login": "swgillespie", "id": 1871912, "node_id": "MDQ6VXNlcjE4NzE5MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1871912?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swgillespie", "html_url": "https://github.com/swgillespie", "followers_url": "https://api.github.com/users/swgillespie/followers", "following_url": "https://api.github.com/users/swgillespie/following{/other_user}", "gists_url": "https://api.github.com/users/swgillespie/gists{/gist_id}", "starred_url": "https://api.github.com/users/swgillespie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swgillespie/subscriptions", "organizations_url": "https://api.github.com/users/swgillespie/orgs", "repos_url": "https://api.github.com/users/swgillespie/repos", "events_url": "https://api.github.com/users/swgillespie/events{/privacy}", "received_events_url": "https://api.github.com/users/swgillespie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "swgillespie", "id": 1871912, "node_id": "MDQ6VXNlcjE4NzE5MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1871912?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swgillespie", "html_url": "https://github.com/swgillespie", "followers_url": "https://api.github.com/users/swgillespie/followers", "following_url": "https://api.github.com/users/swgillespie/following{/other_user}", "gists_url": "https://api.github.com/users/swgillespie/gists{/gist_id}", "starred_url": "https://api.github.com/users/swgillespie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swgillespie/subscriptions", "organizations_url": "https://api.github.com/users/swgillespie/orgs", "repos_url": "https://api.github.com/users/swgillespie/repos", "events_url": "https://api.github.com/users/swgillespie/events{/privacy}", "received_events_url": "https://api.github.com/users/swgillespie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82c524b7747d0df2e92a088708795771872ca8ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/82c524b7747d0df2e92a088708795771872ca8ff", "html_url": "https://github.com/rust-lang/rust/commit/82c524b7747d0df2e92a088708795771872ca8ff"}], "stats": {"total": 83, "additions": 56, "deletions": 27}, "files": [{"sha": "286b51ab04ecf67d4b0072b2309d175739bfea16", "filename": "src/loops.rs", "status": "modified", "additions": 19, "deletions": 25, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d25285600f497206d0b1f911534eb038ca81d/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d25285600f497206d0b1f911534eb038ca81d/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=bc7d25285600f497206d0b1f911534eb038ca81d", "patch": "@@ -3,6 +3,7 @@ use rustc_front::hir::*;\n use reexport::*;\n use rustc_front::visit::{Visitor, walk_expr};\n use rustc::middle::ty;\n+use consts::{constant_simple, Constant};\n use std::collections::HashSet;\n \n use utils::{snippet, span_lint, get_parent_expr, match_trait_method, match_type,\n@@ -72,32 +73,25 @@ impl LintPass for LoopsPass {\n                 }\n             }\n \n-            // if this for-loop is iterating over a two-sided range...\n+            // if this for loop is iterating over a two-sided range...\n             if let ExprRange(Some(ref start_expr), Some(ref stop_expr)) = arg.node {\n-                // and both sides are literals...\n-                if let ExprLit(ref start_lit) = start_expr.node {\n-                    if let ExprLit(ref stop_lit) = stop_expr.node {\n-                        // and they are both integers...\n-                        if let LitInt(start_idx, _) = start_lit.node {\n-                            if let LitInt(stop_idx, _) = stop_lit.node {\n-                                // and the start index is greater than the stop index,\n-                                // this loop will never run. This is often confusing for developers\n-                                // who think that this will iterate from the larger value to the\n-                                // smaller value.\n-                                if start_idx > stop_idx {\n-                                    span_lint(cx, REVERSE_RANGE_LOOP, expr.span, &format!(\n-                                        \"this range is empty and this for loop will never run. \\\n-                                         Consider using `({}..{}).rev()` if you are attempting to \\\n-                                         iterate over this range in reverse\", stop_idx, start_idx));\n-                                }\n-\n-                                // if they are equal, it's also problematic - this loop\n-                                // will never run.\n-                                if start_idx == stop_idx {\n-                                    span_lint(cx, REVERSE_RANGE_LOOP, expr.span,\n-                                        \"this range is empty and this for loop will never run\");\n-                                }\n-                            }\n+                // ...and both sides are compile-time constant integers...\n+                if let Some(Constant::ConstantInt(start_idx, _)) = constant_simple(start_expr) {\n+                    if let Some(Constant::ConstantInt(stop_idx, _)) = constant_simple(stop_expr) {\n+                        // ...and the start index is greater than the stop index,\n+                        // this loop will never run. This is often confusing for developers\n+                        // who think that this will iterate from the larger value to the\n+                        // smaller value.\n+                        if start_idx > stop_idx {\n+                            span_help_and_lint(cx, REVERSE_RANGE_LOOP, expr.span,\n+                                \"this range is empty so this for loop will never run\",\n+                                &format!(\"Consider using `({}..{}).rev()` if you are attempting to \\\n+                                iterate over this range in reverse\", stop_idx, start_idx));\n+                        } else if start_idx == stop_idx {\n+                            // if they are equal, it's also problematic - this loop\n+                            // will never run.\n+                            span_lint(cx, REVERSE_RANGE_LOOP, expr.span,\n+                                \"this range is empty so this for loop will never run\");\n                         }\n                     }\n                 }"}, {"sha": "882373e021673f77ec8cbd7397f02bdae5a24316", "filename": "tests/compile-fail/for_loop.rs", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d25285600f497206d0b1f911534eb038ca81d/tests%2Fcompile-fail%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d25285600f497206d0b1f911534eb038ca81d/tests%2Fcompile-fail%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffor_loop.rs?ref=bc7d25285600f497206d0b1f911534eb038ca81d", "patch": "@@ -34,18 +34,53 @@ fn main() {\n         println!(\"{}\", vec[i]);\n     }\n \n-    for i in 10..0 { //~ERROR this range is empty and this for loop will never run. Consider using `(0..10).rev()`\n+    for i in 10..0 { //~ERROR this range is empty so this for loop will never run\n         println!(\"{}\", i);\n     }\n \n-    for i in 5..5 { //~ERROR this range is empty and this for loop will never run\n+    for i in 5..5 { //~ERROR this range is empty so this for loop will never run\n         println!(\"{}\", i);\n     }\n \n     for i in 0..10 { // not an error, the start index is less than the end index\n         println!(\"{}\", i);\n     }\n \n+    for i in (10..0).rev() { // not an error, this is an established idiom for looping backwards on a range\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in (10..0).map(|x| x * 2) { // not an error, it can't be known what arbitrary methods do to a range\n+        println!(\"{}\", i);\n+    }\n+\n+    // testing that the empty range lint folds constants\n+    for i in 10..5+4 { //~ERROR this range is empty so this for loop will never run\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in (5+2)..(3-1) { //~ERROR this range is empty so this for loop will never run\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in (5+2)..(8-1) { //~ERROR this range is empty so this for loop will never run\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in (2*2)..(2*3) { // no error, 4..6 is fine\n+        println!(\"{}\", i);\n+    }\n+\n+    let x = 42;\n+    for i in x..10 { // no error, not constant-foldable\n+        println!(\"{}\", i);\n+    }\n+\n+    /*\n+    for i in (10..0).map(|x| x * 2) {\n+        println!(\"{}\", i);\n+    }*/\n+\n     for _v in vec.iter() { } //~ERROR it is more idiomatic to loop over `&vec`\n     for _v in vec.iter_mut() { } //~ERROR it is more idiomatic to loop over `&mut vec`\n "}]}