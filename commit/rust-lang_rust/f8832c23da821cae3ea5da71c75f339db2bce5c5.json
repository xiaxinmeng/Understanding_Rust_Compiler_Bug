{"sha": "f8832c23da821cae3ea5da71c75f339db2bce5c5", "node_id": "C_kwDOAAsO6NoAKGY4ODMyYzIzZGE4MjFjYWUzZWE1ZGE3MWM3NWYzMzlkYjJiY2U1YzU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-05-15T16:41:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-15T16:41:25Z"}, "message": "Rollup merge of #96947 - sunfishcode:sunfishcode/rustc-nonnull-optimization-guaranteed, r=joshtriplett\n\nAdd rustc_nonnull_optimization_guaranteed to Owned/Borrowed Fd/Socket\n\nPR #94586 added support for using\n`rustc_nonnull_optimization_guaranteed` on values where the \"null\" value\nis the all-ones bitpattern.\n\nNow that #94586 has made it to the stage0 compiler, add\n`rustc_nonnull_optimization_guaranteed` to `OwnedFd`, `BorrowedFd`,\n`OwnedSocket`, and `BorrowedSocket`, since these types all exclude\nall-ones bitpatterns.\n\nThis allows `Option<OwnedFd>`, `Option<BorrowedFd>`, `Option<OwnedSocket>`,\nand `Option<BorrowedSocket>` to be used in FFI declarations, as described\nin the [I/O safety RFC].\n\n[I/O safety RFC]: https://github.com/rust-lang/rfcs/blob/master/text/3128-io-safety.md#ownedfd-and-borrowedfdfd-1", "tree": {"sha": "6426ed6c77a5880d6a9bd3fd69b2325873ecc4e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6426ed6c77a5880d6a9bd3fd69b2325873ecc4e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8832c23da821cae3ea5da71c75f339db2bce5c5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJigS01CRBK7hj4Ov3rIwAAnpMIAFYH5yPpTxNGs+gH4f+NwYhK\nXIY2Gt9wbO3yvUkYmfETKKr2XcuoS2eiNtVXoVVyupzPcm4JDUKEgaTXTeyHggf2\nJkhthSiou/ytm4Yx0nVgEMO569XNw22tb38Hp6l4nbTtvMS495Q9mb4dMS+aNDBo\nwAkyJAeGEfKZLGRUwClqhN2c5rPwCa2iytJ0weXxgP1x3D1RcE3jwooyfbkn9eYS\nrJ2rf7+r6CfkYOFf0dRmoo9kTz5gPWcAdbC64Ww4Y7OQ7A1GhFOcXg9v6Fcua+DH\nPBuxPFjIdXyk5PZezg+1+rHWlgQILzXc49/ZxEKHLNueZa+bqtDqJRVo07uF7x0=\n=dEm6\n-----END PGP SIGNATURE-----\n", "payload": "tree 6426ed6c77a5880d6a9bd3fd69b2325873ecc4e7\nparent a170f2b3d2aa95e51040163e801123b17d38c24f\nparent 5c60951344d180f5a21ba550dae77847dcd92de0\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1652632885 +0200\ncommitter GitHub <noreply@github.com> 1652632885 +0200\n\nRollup merge of #96947 - sunfishcode:sunfishcode/rustc-nonnull-optimization-guaranteed, r=joshtriplett\n\nAdd rustc_nonnull_optimization_guaranteed to Owned/Borrowed Fd/Socket\n\nPR #94586 added support for using\n`rustc_nonnull_optimization_guaranteed` on values where the \"null\" value\nis the all-ones bitpattern.\n\nNow that #94586 has made it to the stage0 compiler, add\n`rustc_nonnull_optimization_guaranteed` to `OwnedFd`, `BorrowedFd`,\n`OwnedSocket`, and `BorrowedSocket`, since these types all exclude\nall-ones bitpatterns.\n\nThis allows `Option<OwnedFd>`, `Option<BorrowedFd>`, `Option<OwnedSocket>`,\nand `Option<BorrowedSocket>` to be used in FFI declarations, as described\nin the [I/O safety RFC].\n\n[I/O safety RFC]: https://github.com/rust-lang/rfcs/blob/master/text/3128-io-safety.md#ownedfd-and-borrowedfdfd-1\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8832c23da821cae3ea5da71c75f339db2bce5c5", "html_url": "https://github.com/rust-lang/rust/commit/f8832c23da821cae3ea5da71c75f339db2bce5c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8832c23da821cae3ea5da71c75f339db2bce5c5/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a170f2b3d2aa95e51040163e801123b17d38c24f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a170f2b3d2aa95e51040163e801123b17d38c24f", "html_url": "https://github.com/rust-lang/rust/commit/a170f2b3d2aa95e51040163e801123b17d38c24f"}, {"sha": "5c60951344d180f5a21ba550dae77847dcd92de0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c60951344d180f5a21ba550dae77847dcd92de0", "html_url": "https://github.com/rust-lang/rust/commit/5c60951344d180f5a21ba550dae77847dcd92de0"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "53433823fbd3bce4ca837cf328432682e7b2f9d9", "filename": "library/std/src/os/fd/owned.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8832c23da821cae3ea5da71c75f339db2bce5c5/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8832c23da821cae3ea5da71c75f339db2bce5c5/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs?ref=f8832c23da821cae3ea5da71c75f339db2bce5c5", "patch": "@@ -32,6 +32,7 @@ use crate::sys_common::{AsInner, FromInner, IntoInner};\n // 32-bit c_int. Below is -2, in two's complement, but that only works out\n // because c_int is 32 bits.\n #[rustc_layout_scalar_valid_range_end(0xFF_FF_FF_FE)]\n+#[rustc_nonnull_optimization_guaranteed]\n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n pub struct BorrowedFd<'fd> {\n     fd: RawFd,\n@@ -52,6 +53,7 @@ pub struct BorrowedFd<'fd> {\n // 32-bit c_int. Below is -2, in two's complement, but that only works out\n // because c_int is 32 bits.\n #[rustc_layout_scalar_valid_range_end(0xFF_FF_FF_FE)]\n+#[rustc_nonnull_optimization_guaranteed]\n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n pub struct OwnedFd {\n     fd: RawFd,"}, {"sha": "b39863644f1161e85ecb91045b8c0a10aee97c1e", "filename": "library/std/src/os/fd/tests.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f8832c23da821cae3ea5da71c75f339db2bce5c5/library%2Fstd%2Fsrc%2Fos%2Ffd%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8832c23da821cae3ea5da71c75f339db2bce5c5/library%2Fstd%2Fsrc%2Fos%2Ffd%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Ftests.rs?ref=f8832c23da821cae3ea5da71c75f339db2bce5c5", "patch": "@@ -32,3 +32,22 @@ fn test_fd() {\n     assert_eq!(stdin_as_file.as_fd().as_raw_fd(), raw_fd);\n     assert_eq!(Into::<OwnedFd>::into(stdin_as_file).into_raw_fd(), raw_fd);\n }\n+\n+#[cfg(any(unix, target_os = \"wasi\"))]\n+#[test]\n+fn test_niche_optimizations() {\n+    use crate::mem::size_of;\n+    #[cfg(unix)]\n+    use crate::os::unix::io::{BorrowedFd, FromRawFd, IntoRawFd, OwnedFd, RawFd};\n+    #[cfg(target_os = \"wasi\")]\n+    use crate::os::wasi::io::{BorrowedFd, FromRawFd, IntoRawFd, OwnedFd, RawFd};\n+\n+    assert_eq!(size_of::<Option<OwnedFd>>(), size_of::<RawFd>());\n+    assert_eq!(size_of::<Option<BorrowedFd<'static>>>(), size_of::<RawFd>());\n+    unsafe {\n+        assert_eq!(OwnedFd::from_raw_fd(RawFd::MIN).into_raw_fd(), RawFd::MIN);\n+        assert_eq!(OwnedFd::from_raw_fd(RawFd::MAX).into_raw_fd(), RawFd::MAX);\n+        assert_eq!(Some(OwnedFd::from_raw_fd(RawFd::MIN)).unwrap().into_raw_fd(), RawFd::MIN);\n+        assert_eq!(Some(OwnedFd::from_raw_fd(RawFd::MAX)).unwrap().into_raw_fd(), RawFd::MAX);\n+    }\n+}"}, {"sha": "3325688e661ef7e25c12695b327becdddbee3009", "filename": "library/std/src/os/windows/io/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8832c23da821cae3ea5da71c75f339db2bce5c5/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8832c23da821cae3ea5da71c75f339db2bce5c5/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fmod.rs?ref=f8832c23da821cae3ea5da71c75f339db2bce5c5", "patch": "@@ -54,3 +54,6 @@ pub use handle::*;\n pub use raw::*;\n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n pub use socket::*;\n+\n+#[cfg(test)]\n+mod tests;"}, {"sha": "baae92c19f206956df617ea830f033d79ef3e6a2", "filename": "library/std/src/os/windows/io/socket.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8832c23da821cae3ea5da71c75f339db2bce5c5/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8832c23da821cae3ea5da71c75f339db2bce5c5/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs?ref=f8832c23da821cae3ea5da71c75f339db2bce5c5", "patch": "@@ -34,6 +34,7 @@ use crate::sys::cvt;\n     target_pointer_width = \"64\",\n     rustc_layout_scalar_valid_range_end(0xFF_FF_FF_FF_FF_FF_FF_FE)\n )]\n+#[rustc_nonnull_optimization_guaranteed]\n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n pub struct BorrowedSocket<'socket> {\n     socket: RawSocket,\n@@ -56,6 +57,7 @@ pub struct BorrowedSocket<'socket> {\n     target_pointer_width = \"64\",\n     rustc_layout_scalar_valid_range_end(0xFF_FF_FF_FF_FF_FF_FF_FE)\n )]\n+#[rustc_nonnull_optimization_guaranteed]\n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n pub struct OwnedSocket {\n     socket: RawSocket,"}, {"sha": "41734e52e8ccee05e6db9f7e99d2f23264c2fec8", "filename": "library/std/src/os/windows/io/tests.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f8832c23da821cae3ea5da71c75f339db2bce5c5/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8832c23da821cae3ea5da71c75f339db2bce5c5/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Ftests.rs?ref=f8832c23da821cae3ea5da71c75f339db2bce5c5", "patch": "@@ -0,0 +1,21 @@\n+#[test]\n+fn test_niche_optimizations_socket() {\n+    use crate::mem::size_of;\n+    use crate::os::windows::io::{\n+        BorrowedSocket, FromRawSocket, IntoRawSocket, OwnedSocket, RawSocket,\n+    };\n+\n+    assert_eq!(size_of::<Option<OwnedSocket>>(), size_of::<RawSocket>());\n+    assert_eq!(size_of::<Option<BorrowedSocket<'static>>>(), size_of::<RawSocket>(),);\n+    unsafe {\n+        #[cfg(target_pointer_width = \"32\")]\n+        let (min, max) = (i32::MIN as u32, i32::MAX as u32);\n+        #[cfg(target_pointer_width = \"64\")]\n+        let (min, max) = (i64::MIN as u64, i64::MAX as u64);\n+\n+        assert_eq!(OwnedSocket::from_raw_socket(min).into_raw_socket(), min);\n+        assert_eq!(OwnedSocket::from_raw_socket(max).into_raw_socket(), max);\n+        assert_eq!(Some(OwnedSocket::from_raw_socket(min)).unwrap().into_raw_socket(), min);\n+        assert_eq!(Some(OwnedSocket::from_raw_socket(max)).unwrap().into_raw_socket(), max);\n+    }\n+}"}]}