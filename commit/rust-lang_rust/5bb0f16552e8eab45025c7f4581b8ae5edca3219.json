{"sha": "5bb0f16552e8eab45025c7f4581b8ae5edca3219", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViYjBmMTY1NTJlOGVhYjQ1MDI1YzdmNDU4MWI4YWU1ZWRjYTMyMTk=", "commit": {"author": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-02-09T15:53:53Z"}, "committer": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-31T15:05:42Z"}, "message": "Trigger the lint iff exposure's body is ExprKind::Block.", "tree": {"sha": "bb44d438c785462af974c124b4567621bc12c85d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb44d438c785462af974c124b4567621bc12c85d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bb0f16552e8eab45025c7f4581b8ae5edca3219", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bb0f16552e8eab45025c7f4581b8ae5edca3219", "html_url": "https://github.com/rust-lang/rust/commit/5bb0f16552e8eab45025c7f4581b8ae5edca3219", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bb0f16552e8eab45025c7f4581b8ae5edca3219/comments", "author": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54a04711edb15ad0ce5e19f833a5172f651bb4c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/54a04711edb15ad0ce5e19f833a5172f651bb4c0", "html_url": "https://github.com/rust-lang/rust/commit/54a04711edb15ad0ce5e19f833a5172f651bb4c0"}], "stats": {"total": 173, "additions": 115, "deletions": 58}, "files": [{"sha": "f3e9e2400f16c3441cad36e1bb6c422061b21af7", "filename": "clippy_lints/src/methods/excessive_for_each.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5bb0f16552e8eab45025c7f4581b8ae5edca3219/clippy_lints%2Fsrc%2Fmethods%2Fexcessive_for_each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bb0f16552e8eab45025c7f4581b8ae5edca3219/clippy_lints%2Fsrc%2Fmethods%2Fexcessive_for_each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fexcessive_for_each.rs?ref=5bb0f16552e8eab45025c7f4581b8ae5edca3219", "patch": "@@ -28,8 +28,9 @@ pub(super) fn lint(cx: &LateContext<'_>, expr: &'tcx Expr<'_>, args: &[&[Expr<'_\n         if match_trait_method(cx, expr, &paths::ITERATOR);\n         if is_target_ty(cx, cx.typeck_results().expr_ty(iter_receiver));\n         if let ExprKind::Closure(_, _, body_id, ..) = for_each_arg.kind;\n+        let body = cx.tcx.hir().body(body_id);\n+        if let ExprKind::Block(..) = body.value.kind;\n         then {\n-            let body = cx.tcx.hir().body(body_id);\n             let mut ret_span_collector = RetSpanCollector::new();\n             ret_span_collector.visit_expr(&body.value);\n "}, {"sha": "1c8e450398e168df7ea38f7c545016954c120e12", "filename": "tests/ui/excessive_for_each.rs", "status": "modified", "additions": 43, "deletions": 13, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/5bb0f16552e8eab45025c7f4581b8ae5edca3219/tests%2Fui%2Fexcessive_for_each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bb0f16552e8eab45025c7f4581b8ae5edca3219/tests%2Fui%2Fexcessive_for_each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexcessive_for_each.rs?ref=5bb0f16552e8eab45025c7f4581b8ae5edca3219", "patch": "@@ -6,45 +6,72 @@ use std::collections::*;\n fn main() {\n     // Should trigger this lint: Vec.\n     let vec: Vec<i32> = Vec::new();\n-    vec.iter().for_each(|v| println!(\"{}\", v));\n+    let mut acc = 0;\n+    vec.iter().for_each(|v| {\n+        acc += v;\n+    });\n \n     // Should trigger this lint: &Vec.\n     let vec_ref = &vec;\n-    vec_ref.iter().for_each(|v| println!(\"{}\", v));\n+    vec_ref.iter().for_each(|v| {\n+        acc += v;\n+    });\n \n     // Should trigger this lint: VecDeque.\n     let vec_deq: VecDeque<i32> = VecDeque::new();\n-    vec_deq.iter().for_each(|v| println!(\"{}\", v));\n+    vec_deq.iter().for_each(|v| {\n+        acc += v;\n+    });\n \n     // Should trigger this lint: LinkedList.\n     let list: LinkedList<i32> = LinkedList::new();\n-    list.iter().for_each(|v| println!(\"{}\", v));\n+    list.iter().for_each(|v| {\n+        acc += v;\n+    });\n \n     // Should trigger this lint: HashMap.\n     let mut hash_map: HashMap<i32, i32> = HashMap::new();\n-    hash_map.iter().for_each(|(k, v)| println!(\"{}: {}\", k, v));\n-    hash_map.iter_mut().for_each(|(k, v)| println!(\"{}: {}\", k, v));\n-    hash_map.keys().for_each(|k| println!(\"{}\", k));\n-    hash_map.values().for_each(|v| println!(\"{}\", v));\n+    hash_map.iter().for_each(|(k, v)| {\n+        acc += k + v;\n+    });\n+    hash_map.iter_mut().for_each(|(k, v)| {\n+        acc += *k + *v;\n+    });\n+    hash_map.keys().for_each(|k| {\n+        acc += k;\n+    });\n+    hash_map.values().for_each(|v| {\n+        acc += v;\n+    });\n \n     // Should trigger this lint: HashSet.\n     let hash_set: HashSet<i32> = HashSet::new();\n-    hash_set.iter().for_each(|v| println!(\"{}\", v));\n+    hash_set.iter().for_each(|v| {\n+        acc += v;\n+    });\n \n     // Should trigger this lint: BTreeSet.\n     let btree_set: BTreeSet<i32> = BTreeSet::new();\n-    btree_set.iter().for_each(|v| println!(\"{}\", v));\n+    btree_set.iter().for_each(|v| {\n+        acc += v;\n+    });\n \n     // Should trigger this lint: BinaryHeap.\n     let binary_heap: BinaryHeap<i32> = BinaryHeap::new();\n-    binary_heap.iter().for_each(|v| println!(\"{}\", v));\n+    binary_heap.iter().for_each(|v| {\n+        acc += v;\n+    });\n \n     // Should trigger this lint: Array.\n     let s = [1, 2, 3];\n-    s.iter().for_each(|v| println!(\"{}\", v));\n+    s.iter().for_each(|v| {\n+        acc += v;\n+    });\n \n     // Should trigger this lint. Slice.\n-    vec.as_slice().iter().for_each(|v| println!(\"{}\", v));\n+    vec.as_slice().iter().for_each(|v| {\n+        acc += v;\n+    });\n \n     // Should trigger this lint with notes that say \"change `return` to `continue`\".\n     vec.iter().for_each(|v| {\n@@ -83,6 +110,9 @@ fn main() {\n     // Should NOT trigger this lint in case the receiver of `iter` is a user defined type.\n     let my_collection = MyCollection { v: vec![] };\n     my_collection.iter().for_each(|v| println!(\"{}\", v));\n+\n+    // Should NOT trigger this lint in case the closure body is not a `ExprKind::Block`.\n+    vec.iter().for_each(|x| acc += x);\n }\n \n struct MyCollection {"}, {"sha": "c4b66e3a0346d3cdf8c66dfbea05cd334df31218", "filename": "tests/ui/excessive_for_each.stderr", "status": "modified", "additions": 70, "deletions": 44, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/5bb0f16552e8eab45025c7f4581b8ae5edca3219/tests%2Fui%2Fexcessive_for_each.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bb0f16552e8eab45025c7f4581b8ae5edca3219/tests%2Fui%2Fexcessive_for_each.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexcessive_for_each.stderr?ref=5bb0f16552e8eab45025c7f4581b8ae5edca3219", "patch": "@@ -1,85 +1,111 @@\n error: excessive use of `for_each`\n-  --> $DIR/excessive_for_each.rs:9:5\n+  --> $DIR/excessive_for_each.rs:10:5\n    |\n-LL |     vec.iter().for_each(|v| println!(\"{}\", v));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for v in vec.iter() { .. }`\n+LL | /     vec.iter().for_each(|v| {\n+LL | |         acc += v;\n+LL | |     });\n+   | |______^ help: try: `for v in vec.iter() { .. }`\n    |\n    = note: `-D clippy::excessive-for-each` implied by `-D warnings`\n \n error: excessive use of `for_each`\n-  --> $DIR/excessive_for_each.rs:13:5\n+  --> $DIR/excessive_for_each.rs:16:5\n    |\n-LL |     vec_ref.iter().for_each(|v| println!(\"{}\", v));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for v in vec_ref.iter() { .. }`\n+LL | /     vec_ref.iter().for_each(|v| {\n+LL | |         acc += v;\n+LL | |     });\n+   | |______^ help: try: `for v in vec_ref.iter() { .. }`\n \n error: excessive use of `for_each`\n-  --> $DIR/excessive_for_each.rs:17:5\n+  --> $DIR/excessive_for_each.rs:22:5\n    |\n-LL |     vec_deq.iter().for_each(|v| println!(\"{}\", v));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for v in vec_deq.iter() { .. }`\n+LL | /     vec_deq.iter().for_each(|v| {\n+LL | |         acc += v;\n+LL | |     });\n+   | |______^ help: try: `for v in vec_deq.iter() { .. }`\n \n error: excessive use of `for_each`\n-  --> $DIR/excessive_for_each.rs:21:5\n+  --> $DIR/excessive_for_each.rs:28:5\n    |\n-LL |     list.iter().for_each(|v| println!(\"{}\", v));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for v in list.iter() { .. }`\n+LL | /     list.iter().for_each(|v| {\n+LL | |         acc += v;\n+LL | |     });\n+   | |______^ help: try: `for v in list.iter() { .. }`\n \n error: excessive use of `for_each`\n-  --> $DIR/excessive_for_each.rs:25:5\n+  --> $DIR/excessive_for_each.rs:34:5\n    |\n-LL |     hash_map.iter().for_each(|(k, v)| println!(\"{}: {}\", k, v));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for (k, v) in hash_map.iter() { .. }`\n+LL | /     hash_map.iter().for_each(|(k, v)| {\n+LL | |         acc += k + v;\n+LL | |     });\n+   | |______^ help: try: `for (k, v) in hash_map.iter() { .. }`\n \n error: excessive use of `for_each`\n-  --> $DIR/excessive_for_each.rs:26:5\n+  --> $DIR/excessive_for_each.rs:37:5\n    |\n-LL |     hash_map.iter_mut().for_each(|(k, v)| println!(\"{}: {}\", k, v));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for (k, v) in hash_map.iter_mut() { .. }`\n+LL | /     hash_map.iter_mut().for_each(|(k, v)| {\n+LL | |         acc += *k + *v;\n+LL | |     });\n+   | |______^ help: try: `for (k, v) in hash_map.iter_mut() { .. }`\n \n error: excessive use of `for_each`\n-  --> $DIR/excessive_for_each.rs:27:5\n+  --> $DIR/excessive_for_each.rs:40:5\n    |\n-LL |     hash_map.keys().for_each(|k| println!(\"{}\", k));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for k in hash_map.keys() { .. }`\n+LL | /     hash_map.keys().for_each(|k| {\n+LL | |         acc += k;\n+LL | |     });\n+   | |______^ help: try: `for k in hash_map.keys() { .. }`\n \n error: excessive use of `for_each`\n-  --> $DIR/excessive_for_each.rs:28:5\n+  --> $DIR/excessive_for_each.rs:43:5\n    |\n-LL |     hash_map.values().for_each(|v| println!(\"{}\", v));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for v in hash_map.values() { .. }`\n+LL | /     hash_map.values().for_each(|v| {\n+LL | |         acc += v;\n+LL | |     });\n+   | |______^ help: try: `for v in hash_map.values() { .. }`\n \n error: excessive use of `for_each`\n-  --> $DIR/excessive_for_each.rs:32:5\n+  --> $DIR/excessive_for_each.rs:49:5\n    |\n-LL |     hash_set.iter().for_each(|v| println!(\"{}\", v));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for v in hash_set.iter() { .. }`\n+LL | /     hash_set.iter().for_each(|v| {\n+LL | |         acc += v;\n+LL | |     });\n+   | |______^ help: try: `for v in hash_set.iter() { .. }`\n \n error: excessive use of `for_each`\n-  --> $DIR/excessive_for_each.rs:36:5\n+  --> $DIR/excessive_for_each.rs:55:5\n    |\n-LL |     btree_set.iter().for_each(|v| println!(\"{}\", v));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for v in btree_set.iter() { .. }`\n+LL | /     btree_set.iter().for_each(|v| {\n+LL | |         acc += v;\n+LL | |     });\n+   | |______^ help: try: `for v in btree_set.iter() { .. }`\n \n error: excessive use of `for_each`\n-  --> $DIR/excessive_for_each.rs:40:5\n+  --> $DIR/excessive_for_each.rs:61:5\n    |\n-LL |     binary_heap.iter().for_each(|v| println!(\"{}\", v));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for v in binary_heap.iter() { .. }`\n+LL | /     binary_heap.iter().for_each(|v| {\n+LL | |         acc += v;\n+LL | |     });\n+   | |______^ help: try: `for v in binary_heap.iter() { .. }`\n \n error: excessive use of `for_each`\n-  --> $DIR/excessive_for_each.rs:44:5\n+  --> $DIR/excessive_for_each.rs:67:5\n    |\n-LL |     s.iter().for_each(|v| println!(\"{}\", v));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for v in s.iter() { .. }`\n+LL | /     s.iter().for_each(|v| {\n+LL | |         acc += v;\n+LL | |     });\n+   | |______^ help: try: `for v in s.iter() { .. }`\n \n error: excessive use of `for_each`\n-  --> $DIR/excessive_for_each.rs:47:5\n+  --> $DIR/excessive_for_each.rs:72:5\n    |\n-LL |     vec.as_slice().iter().for_each(|v| println!(\"{}\", v));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for v in vec.as_slice().iter() { .. }`\n+LL | /     vec.as_slice().iter().for_each(|v| {\n+LL | |         acc += v;\n+LL | |     });\n+   | |______^ help: try: `for v in vec.as_slice().iter() { .. }`\n \n error: excessive use of `for_each`\n-  --> $DIR/excessive_for_each.rs:50:5\n+  --> $DIR/excessive_for_each.rs:77:5\n    |\n LL | /     vec.iter().for_each(|v| {\n LL | |         if *v == 10 {\n@@ -91,13 +117,13 @@ LL | |     });\n    | |______^ help: try: `for v in vec.iter() { .. }`\n    |\n note: change `return` to `continue` in the loop body\n-  --> $DIR/excessive_for_each.rs:52:13\n+  --> $DIR/excessive_for_each.rs:79:13\n    |\n LL |             return;\n    |             ^^^^^^\n \n error: excessive use of `for_each`\n-  --> $DIR/excessive_for_each.rs:59:5\n+  --> $DIR/excessive_for_each.rs:86:5\n    |\n LL | /     vec.iter().for_each(|v| {\n LL | |         for i in 0..*v {\n@@ -109,12 +135,12 @@ LL | |     });\n    | |______^ help: try: `'outer: for v in vec.iter() { .. }`\n    |\n note: change `return` to `continue 'outer` in the loop body\n-  --> $DIR/excessive_for_each.rs:62:17\n+  --> $DIR/excessive_for_each.rs:89:17\n    |\n LL |                 return;\n    |                 ^^^^^^\n note: change `return` to `continue` in the loop body\n-  --> $DIR/excessive_for_each.rs:68:13\n+  --> $DIR/excessive_for_each.rs:95:13\n    |\n LL |             return;\n    |             ^^^^^^"}]}