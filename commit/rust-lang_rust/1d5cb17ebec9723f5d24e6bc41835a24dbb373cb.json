{"sha": "1d5cb17ebec9723f5d24e6bc41835a24dbb373cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkNWNiMTdlYmVjOTcyM2Y1ZDI0ZTZiYzQxODM1YTI0ZGJiMzczY2I=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2019-11-05T08:49:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-05T08:49:58Z"}, "message": "Rollup merge of #66042 - ohadravid:suggest-correct-code-when-ref-current-trait, r=estebank\n\nSuggest correct code when encountering an incorrect trait bound referencing the current trait\n\nFixes #65985 and also improves the suggestion for code like this:\n\n```\ntrait Grab {\n    type Value;\n    fn grab(&self) -> Grab::Value;\n}\n```\n\nTo suggest `<Self as Grab>::Value`.\n\nI wasn't sure which of the syntax versions is better (`<Self as ..>::` vs `Self::`), so I used the former simply because it was less change to the existing code.\n\nr? @estebank", "tree": {"sha": "740e715c2d4538817c3a8a1f2e06f64e69f38342", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/740e715c2d4538817c3a8a1f2e06f64e69f38342"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d5cb17ebec9723f5d24e6bc41835a24dbb373cb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdwTe2CRBK7hj4Ov3rIwAAdHIIAE8diXtX4hhXzRlAw6Qk6B1+\njoIqJnYfB0iWSSVHLVjNtnYeP6yKgebmJ5r4+Qn8knxib+CJW/SnHX8F4RriP5mS\nDC8kmPbdFMBt/9R3K/LtoOkzPr9pzNGNtfZ+xT89hZLJ2I3HM6XEhneqcmWbNZWu\nxLEZJNv7dFOJyNJACbNmqKPG0xgEZOxex3Al0vkE7us/0UyBArwnW+PHkgMSilSR\nibjjh/DUjpT+Gb0VOoAjWwrGZ+ktvMyboIKfLJUGKwUnDeuYHKg6X7JyRI1YZXkL\nnN2jS0g+FiKRgP6APaL/3C/hAPepDA6KTkH3nxSXRDm49ft657bljId7imX4igQ=\n=+ymI\n-----END PGP SIGNATURE-----\n", "payload": "tree 740e715c2d4538817c3a8a1f2e06f64e69f38342\nparent d32a262ab8ec6d81f443b5d73b549361221c8d4e\nparent 8c909344ed19c9f9a51f82c8e270ded09671fd8b\nauthor Pietro Albini <pietro@pietroalbini.org> 1572943798 +0100\ncommitter GitHub <noreply@github.com> 1572943798 +0100\n\nRollup merge of #66042 - ohadravid:suggest-correct-code-when-ref-current-trait, r=estebank\n\nSuggest correct code when encountering an incorrect trait bound referencing the current trait\n\nFixes #65985 and also improves the suggestion for code like this:\n\n```\ntrait Grab {\n    type Value;\n    fn grab(&self) -> Grab::Value;\n}\n```\n\nTo suggest `<Self as Grab>::Value`.\n\nI wasn't sure which of the syntax versions is better (`<Self as ..>::` vs `Self::`), so I used the former simply because it was less change to the existing code.\n\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d5cb17ebec9723f5d24e6bc41835a24dbb373cb", "html_url": "https://github.com/rust-lang/rust/commit/1d5cb17ebec9723f5d24e6bc41835a24dbb373cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d5cb17ebec9723f5d24e6bc41835a24dbb373cb/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d32a262ab8ec6d81f443b5d73b549361221c8d4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d32a262ab8ec6d81f443b5d73b549361221c8d4e", "html_url": "https://github.com/rust-lang/rust/commit/d32a262ab8ec6d81f443b5d73b549361221c8d4e"}, {"sha": "8c909344ed19c9f9a51f82c8e270ded09671fd8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c909344ed19c9f9a51f82c8e270ded09671fd8b", "html_url": "https://github.com/rust-lang/rust/commit/8c909344ed19c9f9a51f82c8e270ded09671fd8b"}], "stats": {"total": 64, "additions": 60, "deletions": 4}, "files": [{"sha": "b14121da79f596059adc7e486ad70bf0b2b42dab", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1d5cb17ebec9723f5d24e6bc41835a24dbb373cb/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d5cb17ebec9723f5d24e6bc41835a24dbb373cb/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=1d5cb17ebec9723f5d24e6bc41835a24dbb373cb", "patch": "@@ -43,6 +43,8 @@ pub struct PathSeg(pub DefId, pub usize);\n pub trait AstConv<'tcx> {\n     fn tcx<'a>(&'a self) -> TyCtxt<'tcx>;\n \n+    fn item_def_id(&self) -> Option<DefId>;\n+\n     /// Returns predicates in scope of the form `X: Foo`, where `X` is\n     /// a type parameter `X` with the given id `def_id`. This is a\n     /// subset of the full set of predicates.\n@@ -1759,17 +1761,41 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                    -> Ty<'tcx>\n     {\n         let tcx = self.tcx();\n+\n         let trait_def_id = tcx.parent(item_def_id).unwrap();\n \n+        debug!(\"qpath_to_ty: trait_def_id={:?}\", trait_def_id);\n+\n         self.prohibit_generics(slice::from_ref(item_segment));\n \n         let self_ty = if let Some(ty) = opt_self_ty {\n             ty\n         } else {\n             let path_str = tcx.def_path_str(trait_def_id);\n+\n+            let def_id = self.item_def_id();\n+\n+            debug!(\"qpath_to_ty: self.item_def_id()={:?}\", def_id);\n+\n+            let parent_def_id = def_id.and_then(|def_id| tcx.hir().as_local_hir_id(def_id))\n+                .map(|hir_id| tcx.hir().get_parent_did(hir_id));\n+\n+            debug!(\"qpath_to_ty: parent_def_id={:?}\", parent_def_id);\n+\n+            // If the trait in segment is the same as the trait defining the item,\n+            // use the `<Self as ..>` syntax in the error.\n+            let is_part_of_self_trait_constraints = def_id == Some(trait_def_id);\n+            let is_part_of_fn_in_self_trait = parent_def_id == Some(trait_def_id);\n+\n+            let type_name = if is_part_of_self_trait_constraints || is_part_of_fn_in_self_trait {\n+                \"Self\"\n+            } else {\n+                \"Type\"\n+            };\n+\n             self.report_ambiguous_associated_type(\n                 span,\n-                \"Type\",\n+                type_name,\n                 &path_str,\n                 item_segment.ident.name,\n             );"}, {"sha": "a2af29aef094bc22d9efb013af44389d06da3cd0", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d5cb17ebec9723f5d24e6bc41835a24dbb373cb/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d5cb17ebec9723f5d24e6bc41835a24dbb373cb/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=1d5cb17ebec9723f5d24e6bc41835a24dbb373cb", "patch": "@@ -2279,6 +2279,10 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n         self.tcx\n     }\n \n+    fn item_def_id(&self) -> Option<DefId> {\n+        None\n+    }\n+\n     fn get_type_parameter_bounds(&self, _: Span, def_id: DefId) -> ty::GenericPredicates<'tcx> {\n         let tcx = self.tcx;\n         let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();"}, {"sha": "7ef842cb7579c0a863559cf75a3ae3a8a1c0d95e", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d5cb17ebec9723f5d24e6bc41835a24dbb373cb/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d5cb17ebec9723f5d24e6bc41835a24dbb373cb/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=1d5cb17ebec9723f5d24e6bc41835a24dbb373cb", "patch": "@@ -182,6 +182,10 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n         self.tcx\n     }\n \n+    fn item_def_id(&self) -> Option<DefId> {\n+        Some(self.item_def_id)\n+    }\n+\n     fn get_type_parameter_bounds(&self, span: Span, def_id: DefId) -> ty::GenericPredicates<'tcx> {\n         self.tcx\n             .at(span)"}, {"sha": "51b53908f98c315195c98d9e90bfc99f05e62d17", "filename": "src/test/ui/associated-types/associated-types-in-ambiguous-context.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1d5cb17ebec9723f5d24e6bc41835a24dbb373cb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-in-ambiguous-context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d5cb17ebec9723f5d24e6bc41835a24dbb373cb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-in-ambiguous-context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-in-ambiguous-context.rs?ref=1d5cb17ebec9723f5d24e6bc41835a24dbb373cb", "patch": "@@ -10,6 +10,16 @@ trait Grab {\n     type Value;\n     fn grab(&self) -> Grab::Value;\n     //~^ ERROR ambiguous associated type\n+\n+    fn get(&self) -> Get::Value;\n+    //~^ ERROR ambiguous associated type\n+}\n+\n+trait Bar {}\n+\n+trait Foo where Foo::Assoc: Bar {\n+//~^ ERROR ambiguous associated type\n+    type Assoc;\n }\n \n type X = std::ops::Deref::Target;"}, {"sha": "77835c5f6766e6a39ece872a367bfb23ea095e2a", "filename": "src/test/ui/associated-types/associated-types-in-ambiguous-context.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1d5cb17ebec9723f5d24e6bc41835a24dbb373cb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-in-ambiguous-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d5cb17ebec9723f5d24e6bc41835a24dbb373cb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-in-ambiguous-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-in-ambiguous-context.stderr?ref=1d5cb17ebec9723f5d24e6bc41835a24dbb373cb", "patch": "@@ -5,7 +5,13 @@ LL | fn get<T:Get,U:Get>(x: T, y: U) -> Get::Value {}\n    |                                    ^^^^^^^^^^ help: use fully-qualified syntax: `<Type as Get>::Value`\n \n error[E0223]: ambiguous associated type\n-  --> $DIR/associated-types-in-ambiguous-context.rs:15:10\n+  --> $DIR/associated-types-in-ambiguous-context.rs:20:17\n+   |\n+LL | trait Foo where Foo::Assoc: Bar {\n+   |                 ^^^^^^^^^^ help: use fully-qualified syntax: `<Self as Foo>::Assoc`\n+\n+error[E0223]: ambiguous associated type\n+  --> $DIR/associated-types-in-ambiguous-context.rs:25:10\n    |\n LL | type X = std::ops::Deref::Target;\n    |          ^^^^^^^^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<Type as std::ops::Deref>::Target`\n@@ -14,8 +20,14 @@ error[E0223]: ambiguous associated type\n   --> $DIR/associated-types-in-ambiguous-context.rs:11:23\n    |\n LL |     fn grab(&self) -> Grab::Value;\n-   |                       ^^^^^^^^^^^ help: use fully-qualified syntax: `<Type as Grab>::Value`\n+   |                       ^^^^^^^^^^^ help: use fully-qualified syntax: `<Self as Grab>::Value`\n+\n+error[E0223]: ambiguous associated type\n+  --> $DIR/associated-types-in-ambiguous-context.rs:14:22\n+   |\n+LL |     fn get(&self) -> Get::Value;\n+   |                      ^^^^^^^^^^ help: use fully-qualified syntax: `<Type as Get>::Value`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0223`."}]}