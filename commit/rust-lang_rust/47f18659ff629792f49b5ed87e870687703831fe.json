{"sha": "47f18659ff629792f49b5ed87e870687703831fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3ZjE4NjU5ZmY2Mjk3OTJmNDliNWVkODdlODcwNjg3NzAzODMxZmU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-03T16:32:26Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-03T16:55:46Z"}, "message": "Update compile-fail tests to use the expected type to force the\nclosure kind, thereby detecting what happens if there are\nmismatches. Simply removing the `:` annotations caused most of these\ntests to pass or produce other errors, because the inference would\nconvert the closure into a more appropriate kind. (The ability to\noverride the inference by using the expected type is an important\nbackdoor partly for this reason.)", "tree": {"sha": "940d681438c75104e8b4fb95485a2d6f2a2e63c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/940d681438c75104e8b4fb95485a2d6f2a2e63c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47f18659ff629792f49b5ed87e870687703831fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47f18659ff629792f49b5ed87e870687703831fe", "html_url": "https://github.com/rust-lang/rust/commit/47f18659ff629792f49b5ed87e870687703831fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47f18659ff629792f49b5ed87e870687703831fe/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "498595a3dc90b7df08e90b04278b4de33c5ab3cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/498595a3dc90b7df08e90b04278b4de33c5ab3cf", "html_url": "https://github.com/rust-lang/rust/commit/498595a3dc90b7df08e90b04278b4de33c5ab3cf"}], "stats": {"total": 136, "additions": 72, "deletions": 64}, "files": [{"sha": "7033f5caef6c6a22d7e144861dfa008ade2f4815", "filename": "src/test/compile-fail/borrow-immutable-upvar-mutation.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/47f18659ff629792f49b5ed87e870687703831fe/src%2Ftest%2Fcompile-fail%2Fborrow-immutable-upvar-mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f18659ff629792f49b5ed87e870687703831fe/src%2Ftest%2Fcompile-fail%2Fborrow-immutable-upvar-mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrow-immutable-upvar-mutation.rs?ref=47f18659ff629792f49b5ed87e870687703831fe", "patch": "@@ -8,34 +8,38 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures, overloaded_calls)]\n+#![feature(unboxed_closures)]\n \n // Tests that we can't assign to or mutably borrow upvars from `Fn`\n // closures (issue #17780)\n \n fn set(x: &mut usize) { *x = 5; }\n \n+fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n+fn to_fn_mut<A,F:FnMut<A>>(f: F) -> F { f }\n+\n fn main() {\n     // By-ref captures\n     {\n         let mut x = 0us;\n-        let _f = |&:| x = 42; //~ ERROR cannot assign\n+        let _f = to_fn(|| x = 42); //~ ERROR cannot assign\n \n         let mut y = 0us;\n-        let _g = |&:| set(&mut y); //~ ERROR cannot borrow\n+        let _g = to_fn(|| set(&mut y)); //~ ERROR cannot borrow\n \n         let mut z = 0us;\n-        let _h = |&mut:| { set(&mut z); |&:| z = 42; }; //~ ERROR cannot assign\n+        let _h = to_fn_mut(|| { set(&mut z); to_fn(|| z = 42); }); //~ ERROR cannot assign\n     }\n+\n     // By-value captures\n     {\n         let mut x = 0us;\n-        let _f = move |&:| x = 42; //~ ERROR cannot assign\n+        let _f = to_fn(move || x = 42); //~ ERROR cannot assign\n \n         let mut y = 0us;\n-        let _g = move |&:| set(&mut y); //~ ERROR cannot borrow\n+        let _g = to_fn(move || set(&mut y)); //~ ERROR cannot borrow\n \n         let mut z = 0us;\n-        let _h = move |&mut:| { set(&mut z); move |&:| z = 42; }; //~ ERROR cannot assign\n+        let _h = to_fn_mut(move || { set(&mut z); to_fn(move || z = 42); }); //~ ERROR cannot assign\n     }\n }"}, {"sha": "a1708e7f497286c81a4d6007aafb13c7ea4420c0", "filename": "src/test/compile-fail/borrowck-move-by-capture.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/47f18659ff629792f49b5ed87e870687703831fe/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f18659ff629792f49b5ed87e870687703831fe/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs?ref=47f18659ff629792f49b5ed87e870687703831fe", "patch": "@@ -8,11 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n+#![feature(box_syntax,unboxed_closures)]\n+\n+fn to_fn_mut<A,F:FnMut<A>>(f: F) -> F { f }\n+fn to_fn_once<A,F:FnOnce<A>>(f: F) -> F { f }\n \n pub fn main() {\n     let bar = box 3;\n-    let _g = |&mut:| {\n-        let _h = move |:| -> isize { *bar }; //~ ERROR cannot move out of captured outer variable\n-    };\n+    let _g = to_fn_mut(|| {\n+        let _h = to_fn_once(move || -> isize { *bar }); //~ ERROR cannot move out of\n+    });\n }"}, {"sha": "738755855c0703211532b79c82ce43e92581bebc", "filename": "src/test/compile-fail/cannot-mutate-captured-non-mut-var.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47f18659ff629792f49b5ed87e870687703831fe/src%2Ftest%2Fcompile-fail%2Fcannot-mutate-captured-non-mut-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f18659ff629792f49b5ed87e870687703831fe/src%2Ftest%2Fcompile-fail%2Fcannot-mutate-captured-non-mut-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcannot-mutate-captured-non-mut-var.rs?ref=47f18659ff629792f49b5ed87e870687703831fe", "patch": "@@ -8,12 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(unboxed_closures)]\n+\n+fn to_fn_once<A,F:FnOnce<A>>(f: F) -> F { f }\n+\n fn main() {\n     let x = 1;\n-    move|:| { x = 2; };\n+    to_fn_once(move|:| { x = 2; });\n     //~^ ERROR: cannot assign to immutable captured outer variable\n \n     let s = std::old_io::stdin();\n-    move|:| { s.read_to_end(); };\n+    to_fn_once(move|:| { s.read_to_end(); });\n     //~^ ERROR: cannot borrow immutable captured outer variable\n }"}, {"sha": "df4dab2552e7de8922613d5f6a683a4a338778b3", "filename": "src/test/compile-fail/issue-11925.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47f18659ff629792f49b5ed87e870687703831fe/src%2Ftest%2Fcompile-fail%2Fissue-11925.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f18659ff629792f49b5ed87e870687703831fe/src%2Ftest%2Fcompile-fail%2Fissue-11925.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11925.rs?ref=47f18659ff629792f49b5ed87e870687703831fe", "patch": "@@ -8,12 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n+#![feature(box_syntax, unboxed_closures)]\n+\n+fn to_fn_once<A,F:FnOnce<A>>(f: F) -> F { f }\n \n fn main() {\n     let r = {\n         let x = box 42;\n-        let f = move|:| &x; //~ ERROR: `x` does not live long enough\n+        let f = to_fn_once(move|| &x); //~ ERROR: `x` does not live long enough\n         f()\n     };\n "}, {"sha": "40d446b91a5a8b659d56cb79dcbec7b202c8249d", "filename": "src/test/compile-fail/issue-12127.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/47f18659ff629792f49b5ed87e870687703831fe/src%2Ftest%2Fcompile-fail%2Fissue-12127.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f18659ff629792f49b5ed87e870687703831fe/src%2Ftest%2Fcompile-fail%2Fissue-12127.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12127.rs?ref=47f18659ff629792f49b5ed87e870687703831fe", "patch": "@@ -8,14 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n+#![feature(box_syntax, unboxed_closures)]\n \n+fn to_fn_once<A,F:FnOnce<A>>(f: F) -> F { f }\n fn do_it(x: &isize) { }\n \n fn main() {\n     let x = box 22;\n-    let f = move|:| do_it(&*x);\n-    (move|:| {\n+    let f = to_fn_once(move|| do_it(&*x));\n+    to_fn_once(move|| {\n         f();\n         f();\n         //~^ ERROR: use of moved value: `f`"}, {"sha": "4251be36ab43805591025cea7e8a01b83f6294b2", "filename": "src/test/compile-fail/moves-based-on-type-move-out-of-closure-env-issue-1965.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47f18659ff629792f49b5ed87e870687703831fe/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f18659ff629792f49b5ed87e870687703831fe/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.rs?ref=47f18659ff629792f49b5ed87e870687703831fe", "patch": "@@ -8,13 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n+#![feature(box_syntax, unboxed_closures)]\n \n use std::usize;\n \n+fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n+\n fn test(_x: Box<usize>) {}\n \n fn main() {\n     let i = box 3;\n-    let _f = |&:| test(i); //~ ERROR cannot move out\n+    let _f = to_fn(|| test(i)); //~ ERROR cannot move out\n }"}, {"sha": "2d559794919817754daa3e1c606253d58c39afd2", "filename": "src/test/compile-fail/unboxed-closer-non-implicit-copyable.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f18659ff629792f49b5ed87e870687703831fe/src%2Ftest%2Fcompile-fail%2Funboxed-closer-non-implicit-copyable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f18659ff629792f49b5ed87e870687703831fe/src%2Ftest%2Fcompile-fail%2Funboxed-closer-non-implicit-copyable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closer-non-implicit-copyable.rs?ref=47f18659ff629792f49b5ed87e870687703831fe", "patch": "@@ -10,8 +10,10 @@\n \n #![feature(unboxed_closures)]\n \n+fn to_fn_once<A,F:FnOnce<A>>(f: F) -> F { f }\n+\n fn main() {\n-    let f = move|:| ();\n+    let f = to_fn_once(move|| ());\n     f();\n     f(); //~ ERROR use of moved value\n }"}, {"sha": "224cbc2bef3245c624a949cc1e382cd92304417b", "filename": "src/test/compile-fail/unboxed-closure-illegal-move.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/47f18659ff629792f49b5ed87e870687703831fe/src%2Ftest%2Fcompile-fail%2Funboxed-closure-illegal-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f18659ff629792f49b5ed87e870687703831fe/src%2Ftest%2Fcompile-fail%2Funboxed-closure-illegal-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-illegal-move.rs?ref=47f18659ff629792f49b5ed87e870687703831fe", "patch": "@@ -15,31 +15,35 @@\n // if the upvar is captured by ref or the closure takes self by\n // reference.\n \n+fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n+fn to_fn_mut<A,F:FnMut<A>>(f: F) -> F { f }\n+fn to_fn_once<A,F:FnOnce<A>>(f: F) -> F { f }\n+\n fn main() {\n     // By-ref cases\n     {\n         let x = box 0us;\n-        let f = |&:| drop(x); //~ ERROR cannot move\n+        let f = to_fn(|| drop(x)); //~ ERROR cannot move\n     }\n     {\n         let x = box 0us;\n-        let f = |&mut:| drop(x); //~ ERROR cannot move\n+        let f = to_fn_mut(|| drop(x)); //~ ERROR cannot move\n     }\n     {\n         let x = box 0us;\n-        let f = |:| drop(x); // OK -- FnOnce\n+        let f = to_fn_once(|| drop(x)); // OK -- FnOnce\n     }\n     // By-value cases\n     {\n         let x = box 0us;\n-        let f = move |&:| drop(x); //~ ERROR cannot move\n+        let f = to_fn(move || drop(x)); //~ ERROR cannot move\n     }\n     {\n         let x = box 0us;\n-        let f = move |&mut:| drop(x); //~ ERROR cannot move\n+        let f = to_fn_mut(move || drop(x)); //~ ERROR cannot move\n     }\n     {\n         let x = box 0us;\n-        let f = move |:| drop(x); // this one is ok\n+        let f = to_fn_once(move || drop(x)); // this one is ok\n     }\n }"}, {"sha": "650bb17bb7758f9ce60d81d2dcc7ec38ff7cab7b", "filename": "src/test/compile-fail/unboxed-closures-mutate-upvar.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/47f18659ff629792f49b5ed87e870687703831fe/src%2Ftest%2Fcompile-fail%2Funboxed-closures-mutate-upvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f18659ff629792f49b5ed87e870687703831fe/src%2Ftest%2Fcompile-fail%2Funboxed-closures-mutate-upvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-mutate-upvar.rs?ref=47f18659ff629792f49b5ed87e870687703831fe", "patch": "@@ -12,51 +12,56 @@\n // as `mut` through a closure. Also test that we CAN mutate a moved copy,\n // unless this is a `Fn` closure. Issue #16749.\n \n+#![feature(unboxed_closures)]\n+\n use std::mem;\n \n+fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n+fn to_fn_mut<A,F:FnMut<A>>(f: F) -> F { f }\n+\n fn a() {\n     let n = 0u8;\n-    let mut f = |&mut:| { //~ ERROR closure cannot assign\n+    let mut f = to_fn_mut(|| { //~ ERROR closure cannot assign\n         n += 1;\n-    };\n+    });\n }\n \n fn b() {\n     let mut n = 0u8;\n-    let mut f = |&mut:| {\n+    let mut f = to_fn_mut(|| {\n         n += 1; // OK\n-    };\n+    });\n }\n \n fn c() {\n     let n = 0u8;\n-    let mut f = move |&mut:| {\n+    let mut f = to_fn_mut(move || {\n         // If we just did a straight-forward desugaring, this would\n         // compile, but we do something a bit more subtle, and hence\n         // we get an error.\n         n += 1; //~ ERROR cannot assign\n-    };\n+    });\n }\n \n fn d() {\n     let mut n = 0u8;\n-    let mut f = move |&mut:| {\n+    let mut f = to_fn_mut(move || {\n         n += 1; // OK\n-    };\n+    });\n }\n \n fn e() {\n     let n = 0u8;\n-    let mut f = move |&:| {\n+    let mut f = to_fn(move || {\n         n += 1; //~ ERROR cannot assign\n-    };\n+    });\n }\n \n fn f() {\n     let mut n = 0u8;\n-    let mut f = move |&:| {\n+    let mut f = to_fn(move || {\n         n += 1; //~ ERROR cannot assign\n-    };\n+    });\n }\n \n fn main() { }"}, {"sha": "f430e9fc7590228fba05867ea5a3e855a85f8188", "filename": "src/test/compile-fail/unboxed-closures-static-call-wrong-trait.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f18659ff629792f49b5ed87e870687703831fe/src%2Ftest%2Fcompile-fail%2Funboxed-closures-static-call-wrong-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f18659ff629792f49b5ed87e870687703831fe/src%2Ftest%2Fcompile-fail%2Funboxed-closures-static-call-wrong-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-static-call-wrong-trait.rs?ref=47f18659ff629792f49b5ed87e870687703831fe", "patch": "@@ -10,8 +10,10 @@\n \n #![feature(unboxed_closures)]\n \n+fn to_fn_mut<A,F:FnMut<A>>(f: F) -> F { f }\n+\n fn main() {\n-    let mut_ = |&mut: x| x;\n+    let mut_ = to_fn_mut(|x| x);\n     mut_.call((0, )); //~ ERROR does not implement any method in scope named `call`\n }\n "}, {"sha": "c2a2e5162ace070a12c18aa6383f7cc9078ab323", "filename": "src/test/compile-fail/unboxed-closures-vtable-mismatch.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f18659ff629792f49b5ed87e870687703831fe/src%2Ftest%2Fcompile-fail%2Funboxed-closures-vtable-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f18659ff629792f49b5ed87e870687703831fe/src%2Ftest%2Fcompile-fail%2Funboxed-closures-vtable-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-vtable-mismatch.rs?ref=47f18659ff629792f49b5ed87e870687703831fe", "patch": "@@ -12,12 +12,14 @@\n \n use std::ops::FnMut;\n \n+fn to_fn_mut<A,F:FnMut<A>>(f: F) -> F { f }\n+\n fn call_it<F:FnMut(isize,isize)->isize>(y: isize, mut f: F) -> isize {\n     f(2, y)\n }\n \n pub fn main() {\n-    let f = |&mut: x: usize, y: isize| -> isize { (x as isize) + y };\n+    let f = to_fn_mut(|x: usize, y: isize| -> isize { (x as isize) + y });\n     let z = call_it(3, f);\n     //~^ ERROR type mismatch\n     //~| ERROR type mismatch"}, {"sha": "2ada0dd22e75f4a160cdbc28aa8972a451b6cac5", "filename": "src/test/compile-fail/unboxed-closures-wrong-trait.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/498595a3dc90b7df08e90b04278b4de33c5ab3cf/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498595a3dc90b7df08e90b04278b4de33c5ab3cf/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-trait.rs?ref=498595a3dc90b7df08e90b04278b4de33c5ab3cf", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(lang_items, overloaded_calls, unboxed_closures)]\n-\n-fn c<F:Fn(isize, isize) -> isize>(f: F) -> isize {\n-    f(5, 6)\n-}\n-\n-fn main() {\n-    let z: isize = 7;\n-    assert_eq!(c(|&mut: x: isize, y| x + y + z), 10);\n-    //~^ ERROR not implemented\n-    //~| ERROR not implemented\n-}\n-"}]}