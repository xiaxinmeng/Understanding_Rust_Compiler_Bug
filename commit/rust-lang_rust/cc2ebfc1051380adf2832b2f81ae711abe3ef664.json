{"sha": "cc2ebfc1051380adf2832b2f81ae711abe3ef664", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMmViZmMxMDUxMzgwYWRmMjgzMmIyZjgxYWU3MTFhYmUzZWY2NjQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-03-02T18:05:30Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-03-06T00:47:51Z"}, "message": "set LLVM inline hint for all #[inline] methods, whether CC or local", "tree": {"sha": "dca86f564b1bae4a0c69d2d5a7b262fb1d7e462c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dca86f564b1bae4a0c69d2d5a7b262fb1d7e462c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc2ebfc1051380adf2832b2f81ae711abe3ef664", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc2ebfc1051380adf2832b2f81ae711abe3ef664", "html_url": "https://github.com/rust-lang/rust/commit/cc2ebfc1051380adf2832b2f81ae711abe3ef664", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc2ebfc1051380adf2832b2f81ae711abe3ef664/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e400733e9060acc1b5b614cb30198570e68e320c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e400733e9060acc1b5b614cb30198570e68e320c", "html_url": "https://github.com/rust-lang/rust/commit/e400733e9060acc1b5b614cb30198570e68e320c"}], "stats": {"total": 38, "additions": 26, "deletions": 12}, "files": [{"sha": "0a539759f72efbace26691a72e1edf196d0c8926", "filename": "src/rustc/front/attr.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc2ebfc1051380adf2832b2f81ae711abe3ef664/src%2Frustc%2Ffront%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc2ebfc1051380adf2832b2f81ae711abe3ef664/src%2Frustc%2Ffront%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Fattr.rs?ref=cc2ebfc1051380adf2832b2f81ae711abe3ef664", "patch": "@@ -7,6 +7,7 @@ import driver::session::session;\n export attr_meta;\n export attr_metas;\n export find_linkage_metas;\n+export should_inline;\n export find_attrs_by_name;\n export attrs_contains_name;\n export find_meta_items_by_name;\n@@ -43,6 +44,11 @@ fn find_linkage_metas(attrs: [ast::attribute]) -> [@ast::meta_item] {\n     ret metas;\n }\n \n+// True if something like #[inline] is found in the list of attrs.\n+fn should_inline(attrs: [ast::attribute]) -> bool {\n+    attr::attrs_contains_name(attrs, \"inline\")\n+}\n+\n // Search a list of attributes and return only those with a specific name\n fn find_attrs_by_name(attrs: [ast::attribute], name: ast::ident) ->\n    [ast::attribute] {"}, {"sha": "b5a10a0db486e2f85735fbe99689829a01c6ec5a", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc2ebfc1051380adf2832b2f81ae711abe3ef664/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc2ebfc1051380adf2832b2f81ae711abe3ef664/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=cc2ebfc1051380adf2832b2f81ae711abe3ef664", "patch": "@@ -29,10 +29,6 @@ type abbrev_map = map::hashmap<ty::t, tyencode::ty_abbrev>;\n \n type encode_ctxt = {ccx: crate_ctxt, type_abbrevs: abbrev_map};\n \n-fn should_inline(_path: ast_map::path, attrs: [attribute]) -> bool {\n-    attr::attrs_contains_name(attrs, \"inline\")\n-}\n-\n // Path table encoding\n fn encode_name(ebml_w: ebml::writer, name: str) {\n     ebml_w.wr_tagged_str(tag_paths_data_name, name);\n@@ -343,7 +339,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::writer, item: @item,\n         encode_type(ecx, ebml_w, node_id_to_type(tcx, item.id));\n         encode_symbol(ecx, ebml_w, item.id);\n         encode_path(ebml_w, path, ast_map::path_name(item.ident));\n-        if should_inline(path, item.attrs) {\n+        if attr::should_inline(item.attrs) {\n             astencode::encode_inlined_item(ecx, ebml_w, path, ii_item(item));\n         }\n         ebml_w.end_tag();\n@@ -446,7 +442,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::writer, item: @item,\n             encode_name(ebml_w, m.ident);\n             encode_symbol(ecx, ebml_w, m.id);\n             encode_path(ebml_w, impl_path, ast_map::path_name(m.ident));\n-            if should_inline(path, m.attrs) {\n+            if attr::should_inline(m.attrs) {\n                 astencode::encode_inlined_item(\n                     ecx, ebml_w, impl_path,\n                     ii_method(local_def(item.id), m));"}, {"sha": "08a33e348f2d3c696135700d698c1df8da1addb6", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cc2ebfc1051380adf2832b2f81ae711abe3ef664/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc2ebfc1051380adf2832b2f81ae711abe3ef664/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=cc2ebfc1051380adf2832b2f81ae711abe3ef664", "patch": "@@ -646,6 +646,19 @@ fn set_uwtable(f: ValueRef) {\n                               0u as c_uint);\n }\n \n+fn set_inline_hint(f: ValueRef) {\n+    llvm::LLVMAddFunctionAttr(f, lib::llvm::InlineHintAttribute as c_uint,\n+                              0u as c_uint);\n+}\n+\n+fn set_inline_hint_if_appr(ccx: crate_ctxt,\n+                           attrs: [ast::attribute],\n+                           id: ast::node_id) {\n+    if attr::should_inline(attrs) {\n+        set_inline_hint(ccx.item_ids.get(id));\n+    }\n+}\n+\n fn set_always_inline(f: ValueRef) {\n     llvm::LLVMAddFunctionAttr(f, lib::llvm::AlwaysInlineAttribute as c_uint,\n                               0u as c_uint);\n@@ -4696,13 +4709,17 @@ fn collect_item(ccx: crate_ctxt, abi: @mutable option<ast::native_abi>,\n         } else {\n             native::register_crust_fn(ccx, i.span, my_path, i.id);\n         }\n+\n+        set_inline_hint_if_appr(ccx, i.attrs, i.id);\n       }\n       ast::item_impl(tps, _, _, methods) {\n         let path = my_path + [path_name(int::str(i.id))];\n         for m in methods {\n             register_fn(ccx, i.span,\n                         path + [path_name(m.ident)],\n                         \"impl_method\", tps + m.tps, m.id);\n+\n+            set_inline_hint_if_appr(ccx, m.attrs, m.id);\n         }\n       }\n       ast::item_res(_, tps, _, dtor_id, ctor_id) {\n@@ -4749,12 +4766,6 @@ fn collect_inlined_items(ccx: crate_ctxt, inline_map: inline::inline_map) {\n         alt ii {\n           ast::ii_item(item) {\n             collect_item(ccx, abi, item);\n-            alt item.node {\n-              ast::item_fn(_, _, _) {\n-                set_always_inline(ccx.item_ids.get(item.id));\n-              }\n-              _ { /* fallthrough */ }\n-            }\n           }\n \n           ast::ii_method(impl_did, m) {\n@@ -4763,6 +4774,7 @@ fn collect_inlined_items(ccx: crate_ctxt, inline_map: inline::inline_map) {\n                 let mthd_ty = ty::node_id_to_type(ccx.tcx, m.id);\n                 register_fn_full(ccx, m.span, m_path, \"impl_method\",\n                                  m_bounds, m.id, mthd_ty);\n+                set_inline_hint_if_appr(ccx, m.attrs, m.id);\n             }\n           }\n         }"}]}