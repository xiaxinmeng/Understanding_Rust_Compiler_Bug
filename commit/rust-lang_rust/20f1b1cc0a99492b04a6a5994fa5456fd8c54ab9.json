{"sha": "20f1b1cc0a99492b04a6a5994fa5456fd8c54ab9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwZjFiMWNjMGE5OTQ5MmIwNGE2YTU5OTRmYTU0NTZmZDhjNTRhYjk=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-06-23T14:42:35Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-06-23T19:32:37Z"}, "message": "Greatly improve code", "tree": {"sha": "e523777b1e9fe01f003a268fc03254141dd4a8e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e523777b1e9fe01f003a268fc03254141dd4a8e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20f1b1cc0a99492b04a6a5994fa5456fd8c54ab9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20f1b1cc0a99492b04a6a5994fa5456fd8c54ab9", "html_url": "https://github.com/rust-lang/rust/commit/20f1b1cc0a99492b04a6a5994fa5456fd8c54ab9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20f1b1cc0a99492b04a6a5994fa5456fd8c54ab9/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12b6d32387c397647c9ae4b8880133033f443ab9", "url": "https://api.github.com/repos/rust-lang/rust/commits/12b6d32387c397647c9ae4b8880133033f443ab9", "html_url": "https://github.com/rust-lang/rust/commit/12b6d32387c397647c9ae4b8880133033f443ab9"}], "stats": {"total": 44, "additions": 4, "deletions": 40}, "files": [{"sha": "d1d43e9449ce13d6c9df0f86f709e44b402ed859", "filename": "src/tools/tidy/src/error_codes_check.rs", "status": "modified", "additions": 4, "deletions": 40, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/20f1b1cc0a99492b04a6a5994fa5456fd8c54ab9/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20f1b1cc0a99492b04a6a5994fa5456fd8c54ab9/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs?ref=20f1b1cc0a99492b04a6a5994fa5456fd8c54ab9", "patch": "@@ -1,7 +1,6 @@\n //! Checks that all error codes have at least one test to prevent having error\n //! codes that are silently not thrown by the compiler anymore.\n \n-use std::collections::hash_map::Entry;\n use std::collections::HashMap;\n use std::ffi::OsStr;\n use std::fs::read_to_string;\n@@ -106,19 +105,8 @@ fn extract_error_codes(\n                 )\n                 .0\n                 .to_owned();\n-            match error_codes.entry(err_code.clone()) {\n-                Entry::Occupied(mut e) => {\n-                    let mut entry = e.get_mut();\n-                    entry.has_explanation = true\n-                }\n-                Entry::Vacant(e) => {\n-                    e.insert(ErrorCodeStatus {\n-                        has_test: false,\n-                        is_used: false,\n-                        has_explanation: true,\n-                    });\n-                }\n-            }\n+            error_codes.entry(err_code.clone()).or_default().has_explanation = true;\n+\n             // Now we extract the tests from the markdown file!\n             let md_file_name = match s.split_once(\"include_str!(\\\"\") {\n                 None => continue,\n@@ -184,19 +172,7 @@ fn extract_error_codes_from_tests(f: &str, error_codes: &mut HashMap<String, Err\n                     Some((_, err_code)) => err_code,\n                 },\n             };\n-            match error_codes.entry(err_code.to_owned()) {\n-                Entry::Occupied(mut e) => {\n-                    let mut entry = e.get_mut();\n-                    entry.has_test = true\n-                }\n-                Entry::Vacant(e) => {\n-                    e.insert(ErrorCodeStatus {\n-                        has_test: true,\n-                        is_used: false,\n-                        has_explanation: false,\n-                    });\n-                }\n-            }\n+            error_codes.entry(err_code.to_owned()).or_default().has_test = true;\n         }\n     }\n }\n@@ -212,19 +188,7 @@ fn extract_error_codes_from_source(\n         }\n         for cap in regex.captures_iter(line) {\n             if let Some(error_code) = cap.get(1) {\n-                match error_codes.entry(error_code.as_str().to_owned()) {\n-                    Entry::Occupied(mut e) => {\n-                        let mut entry = e.get_mut();\n-                        entry.is_used = true\n-                    }\n-                    Entry::Vacant(e) => {\n-                        e.insert(ErrorCodeStatus {\n-                            has_test: false,\n-                            is_used: true,\n-                            has_explanation: false,\n-                        });\n-                    }\n-                }\n+                error_codes.entry(error_code.as_str().to_owned()).or_default().is_used = true;\n             }\n         }\n     }"}]}