{"sha": "b22bc276f84f0dab590e533cf420013356d2d321", "node_id": "C_kwDOAAsO6NoAKGIyMmJjMjc2Zjg0ZjBkYWI1OTBlNTMzY2Y0MjAwMTMzNTZkMmQzMjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-13T08:57:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-13T08:57:21Z"}, "message": "Auto merge of #2893 - RalfJung:rustup, r=RalfJung\n\nRustup", "tree": {"sha": "beaa06468a15fe00f6be4ad120cd4a81f9abbee2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/beaa06468a15fe00f6be4ad120cd4a81f9abbee2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b22bc276f84f0dab590e533cf420013356d2d321", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b22bc276f84f0dab590e533cf420013356d2d321", "html_url": "https://github.com/rust-lang/rust/commit/b22bc276f84f0dab590e533cf420013356d2d321", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b22bc276f84f0dab590e533cf420013356d2d321/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25c545114a1bc08b7b18b1a65266aae255ff2094", "url": "https://api.github.com/repos/rust-lang/rust/commits/25c545114a1bc08b7b18b1a65266aae255ff2094", "html_url": "https://github.com/rust-lang/rust/commit/25c545114a1bc08b7b18b1a65266aae255ff2094"}, {"sha": "74319707581d99ee6609622aa03f42136cf0c197", "url": "https://api.github.com/repos/rust-lang/rust/commits/74319707581d99ee6609622aa03f42136cf0c197", "html_url": "https://github.com/rust-lang/rust/commit/74319707581d99ee6609622aa03f42136cf0c197"}], "stats": {"total": 3500, "additions": 2334, "deletions": 1166}, "files": [{"sha": "08ee3761bac2b33141c1206a89b3ff558919ed23", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -305,7 +305,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             );\n                             this.arena.alloc(this.ty(span, hir::TyKind::Err(guar)))\n                         }\n-                        Some(ty) => this.lower_ty(ty, &ImplTraitContext::TypeAliasesOpaqueTy),\n+                        Some(ty) => this.lower_ty(\n+                            ty,\n+                            &ImplTraitContext::TypeAliasesOpaqueTy { in_assoc_ty: false },\n+                        ),\n                     },\n                 );\n                 hir::ItemKind::TyAlias(ty, generics)\n@@ -852,7 +855,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             hir::ImplItemKind::Type(ty)\n                         }\n                         Some(ty) => {\n-                            let ty = this.lower_ty(ty, &ImplTraitContext::TypeAliasesOpaqueTy);\n+                            let ty = this.lower_ty(\n+                                ty,\n+                                &ImplTraitContext::TypeAliasesOpaqueTy { in_assoc_ty: true },\n+                            );\n                             hir::ImplItemKind::Type(ty)\n                         }\n                     },"}, {"sha": "cd6614a54a4e9a30e172e19a43c4c5efaff40fa6", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -247,7 +247,7 @@ enum ImplTraitContext {\n         in_trait: bool,\n     },\n     /// Impl trait in type aliases.\n-    TypeAliasesOpaqueTy,\n+    TypeAliasesOpaqueTy { in_assoc_ty: bool },\n     /// `impl Trait` is unstably accepted in this position.\n     FeatureGated(ImplTraitPosition, Symbol),\n     /// `impl Trait` is not accepted in this position.\n@@ -1407,14 +1407,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             *in_trait,\n                             itctx,\n                         ),\n-                    ImplTraitContext::TypeAliasesOpaqueTy => self.lower_opaque_impl_trait(\n-                        span,\n-                        hir::OpaqueTyOrigin::TyAlias,\n-                        *def_node_id,\n-                        bounds,\n-                        false,\n-                        itctx,\n-                    ),\n+                    &ImplTraitContext::TypeAliasesOpaqueTy { in_assoc_ty } => self\n+                        .lower_opaque_impl_trait(\n+                            span,\n+                            hir::OpaqueTyOrigin::TyAlias { in_assoc_ty },\n+                            *def_node_id,\n+                            bounds,\n+                            false,\n+                            itctx,\n+                        ),\n                     ImplTraitContext::Universal => {\n                         let span = t.span;\n                         self.create_def(\n@@ -1534,13 +1535,16 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         // If this came from a TAIT (as opposed to a function that returns an RPIT), we only want\n         // to capture the lifetimes that appear in the bounds. So visit the bounds to find out\n         // exactly which ones those are.\n-        let lifetimes_to_remap = if origin == hir::OpaqueTyOrigin::TyAlias {\n-            // in a TAIT like `type Foo<'a> = impl Foo<'a>`, we don't keep all the lifetime parameters\n-            Vec::new()\n-        } else {\n-            // in fn return position, like the `fn test<'a>() -> impl Debug + 'a` example,\n-            // we only keep the lifetimes that appear in the `impl Debug` itself:\n-            lifetime_collector::lifetimes_in_bounds(&self.resolver, bounds)\n+        let lifetimes_to_remap = match origin {\n+            hir::OpaqueTyOrigin::TyAlias { .. } => {\n+                // in a TAIT like `type Foo<'a> = impl Foo<'a>`, we don't keep all the lifetime parameters\n+                Vec::new()\n+            }\n+            hir::OpaqueTyOrigin::AsyncFn(..) | hir::OpaqueTyOrigin::FnReturn(..) => {\n+                // in fn return position, like the `fn test<'a>() -> impl Debug + 'a` example,\n+                // we only keep the lifetimes that appear in the `impl Debug` itself:\n+                lifetime_collector::lifetimes_in_bounds(&self.resolver, bounds)\n+            }\n         };\n         debug!(?lifetimes_to_remap);\n "}, {"sha": "167f245361a2294610c9109a75c65db53e56be17", "filename": "compiler/rustc_borrowck/src/dataflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -328,7 +328,7 @@ impl<'tcx> rustc_mir_dataflow::AnalysisDomain<'tcx> for Borrows<'_, 'tcx> {\n \n     fn bottom_value(&self, _: &mir::Body<'tcx>) -> Self::Domain {\n         // bottom = nothing is reserved or activated yet;\n-        BitSet::new_empty(self.borrow_set.len() * 2)\n+        BitSet::new_empty(self.borrow_set.len())\n     }\n \n     fn initialize_start_block(&self, _: &mir::Body<'tcx>, _: &mut Self::Domain) {"}, {"sha": "309f23d92261e28b69a0f46125036e7f9434c840", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -265,7 +265,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n \n         // Only check this for TAIT. RPIT already supports `tests/ui/impl-trait/nested-return-type2.rs`\n         // on stable and we'd break that.\n-        let OpaqueTyOrigin::TyAlias = origin else {\n+        let OpaqueTyOrigin::TyAlias { .. } = origin else {\n             return definition_ty;\n         };\n         let def_id = opaque_type_key.def_id;\n@@ -360,7 +360,7 @@ fn check_opaque_type_parameter_valid(\n         // which would error here on all of the `'static` args.\n         OpaqueTyOrigin::FnReturn(..) | OpaqueTyOrigin::AsyncFn(..) => return Ok(()),\n         // Check these\n-        OpaqueTyOrigin::TyAlias => {}\n+        OpaqueTyOrigin::TyAlias { .. } => {}\n     }\n     let opaque_generics = tcx.generics_of(opaque_type_key.def_id);\n     let mut seen_params: FxIndexMap<_, Vec<_>> = FxIndexMap::default();"}, {"sha": "bd5356575ca872d759289b5e5db5a11d392b21a1", "filename": "compiler/rustc_builtin_macros/src/format_foreign.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -562,15 +562,13 @@ pub(crate) mod printf {\n         }\n \n         if let Type = state {\n-            drop(c);\n             type_ = at.slice_between(next).unwrap();\n \n             // Don't use `move_to!` here, as we *can* be at the end of the input.\n             at = next;\n         }\n \n-        drop(c);\n-        drop(next);\n+        let _ = c; // to avoid never used value\n \n         end = at;\n         let position = InnerSpan::new(start.at, end.at);"}, {"sha": "fe8c630666bb23117087b67c97a42a8d34aed247", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -321,6 +321,8 @@ declare_features! (\n     (active, c_unwind, \"1.52.0\", Some(74990), None),\n     /// Allows using C-variadics.\n     (active, c_variadic, \"1.34.0\", Some(44930), None),\n+    /// Allows the use of `#[cfg(overflow_checks)` to check if integer overflow behaviour.\n+    (active, cfg_overflow_checks, \"CURRENT_RUSTC_VERSION\", Some(111466), None),\n     /// Allows the use of `#[cfg(sanitize = \"option\")]`; set when -Zsanitizer is used.\n     (active, cfg_sanitize, \"1.41.0\", Some(39699), None),\n     /// Allows `cfg(target_abi = \"...\")`."}, {"sha": "61cfbf5c5e53f5a947b69a846403d94259ce5f1b", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -24,6 +24,7 @@ pub type GatedCfg = (Symbol, Symbol, GateFn);\n /// `cfg(...)`'s that are feature gated.\n const GATED_CFGS: &[GatedCfg] = &[\n     // (name in cfg, feature, function to check if the feature is enabled)\n+    (sym::overflow_checks, sym::cfg_overflow_checks, cfg_fn!(cfg_overflow_checks)),\n     (sym::target_abi, sym::cfg_target_abi, cfg_fn!(cfg_target_abi)),\n     (sym::target_thread_local, sym::cfg_target_thread_local, cfg_fn!(cfg_target_thread_local)),\n     ("}, {"sha": "932f0396282fd729e1d52551b851d490703be9c4", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -2662,7 +2662,10 @@ pub enum OpaqueTyOrigin {\n     /// `async fn`\n     AsyncFn(LocalDefId),\n     /// type aliases: `type Foo = impl Trait;`\n-    TyAlias,\n+    TyAlias {\n+        /// associated types in impl blocks for traits.\n+        in_assoc_ty: bool,\n+    },\n }\n \n /// The various kinds of types recognized by the compiler."}, {"sha": "78ffe59679a0359af05096de02e6f31d06da488f", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -397,7 +397,7 @@ fn check_opaque_meets_bounds<'tcx>(\n ) {\n     let defining_use_anchor = match *origin {\n         hir::OpaqueTyOrigin::FnReturn(did) | hir::OpaqueTyOrigin::AsyncFn(did) => did,\n-        hir::OpaqueTyOrigin::TyAlias => def_id,\n+        hir::OpaqueTyOrigin::TyAlias { .. } => tcx.impl_trait_parent(def_id),\n     };\n     let param_env = tcx.param_env(defining_use_anchor);\n \n@@ -455,10 +455,10 @@ fn check_opaque_meets_bounds<'tcx>(\n         // They can only be referenced as `<Opaque<T> as Trait<&'static T>>::AssocTy`.\n         // We don't have to check them here because their well-formedness follows from the WF of\n         // the projection input types in the defining- and use-sites.\n-        hir::OpaqueTyOrigin::TyAlias\n+        hir::OpaqueTyOrigin::TyAlias { .. }\n             if tcx.def_kind(tcx.parent(def_id.to_def_id())) == DefKind::OpaqueTy => {}\n         // Can have different predicates to their defining use\n-        hir::OpaqueTyOrigin::TyAlias => {\n+        hir::OpaqueTyOrigin::TyAlias { .. } => {\n             let wf_tys = ocx.assumed_wf_types(param_env, span, def_id);\n             let implied_bounds = infcx.implied_bounds_tys(param_env, def_id, wf_tys);\n             let outlives_env = OutlivesEnvironment::with_bounds(param_env, implied_bounds);"}, {"sha": "e0ba255cc069cc2e04d166f588a33478f9951af6", "filename": "compiler/rustc_hir_analysis/src/check/dropck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -6,7 +6,7 @@ use rustc_errors::{struct_span_err, ErrorGuaranteed};\n use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n use rustc_infer::infer::{RegionResolutionError, TyCtxtInferExt};\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::util::IgnoreRegions;\n+use rustc_middle::ty::util::CheckRegions;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_trait_selection::traits::{self, ObligationCtxt};\n \n@@ -81,7 +81,7 @@ fn ensure_drop_params_and_item_params_correspond<'tcx>(\n     self_type_did: DefId,\n     adt_to_impl_substs: SubstsRef<'tcx>,\n ) -> Result<(), ErrorGuaranteed> {\n-    let Err(arg) = tcx.uses_unique_generic_params(adt_to_impl_substs, IgnoreRegions::No) else {\n+    let Err(arg) = tcx.uses_unique_generic_params(adt_to_impl_substs, CheckRegions::OnlyEarlyBound) else {\n         return Ok(())\n     };\n "}, {"sha": "23beacd2a8c2cd506af8188577aca2aeee93dc98", "filename": "compiler/rustc_hir_analysis/src/coherence/orphan.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -6,7 +6,7 @@ use rustc_errors::{struct_span_err, DelayDm};\n use rustc_errors::{Diagnostic, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_middle::ty::subst::InternalSubsts;\n-use rustc_middle::ty::util::IgnoreRegions;\n+use rustc_middle::ty::util::CheckRegions;\n use rustc_middle::ty::{\n     self, AliasKind, ImplPolarity, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitableExt,\n     TypeVisitor,\n@@ -507,7 +507,7 @@ fn lint_auto_trait_impl<'tcx>(\n     // Impls which completely cover a given root type are fine as they\n     // disable auto impls entirely. So only lint if the substs\n     // are not a permutation of the identity substs.\n-    let Err(arg) = tcx.uses_unique_generic_params(substs, IgnoreRegions::Yes) else {\n+    let Err(arg) = tcx.uses_unique_generic_params(substs, CheckRegions::No) else {\n         // ok\n         return;\n     };"}, {"sha": "2f808d4ce738c55ab4321eb3e76a0369ca59b161", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1483,7 +1483,7 @@ fn generator_kind(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<hir::GeneratorK\n fn is_type_alias_impl_trait<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> bool {\n     match tcx.hir().get_by_def_id(def_id) {\n         Node::Item(hir::Item { kind: hir::ItemKind::OpaqueTy(opaque), .. }) => {\n-            matches!(opaque.origin, hir::OpaqueTyOrigin::TyAlias)\n+            matches!(opaque.origin, hir::OpaqueTyOrigin::TyAlias { .. })\n         }\n         _ => bug!(\"tried getting opaque_ty_origin for non-opaque: {:?}\", def_id),\n     }"}, {"sha": "ed60998ec8dcfebc238d4cc4d17d494564b63d93", "filename": "compiler/rustc_hir_analysis/src/collect/generics_of.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -159,7 +159,10 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Generics {\n                 }\n                 Some(fn_def_id.to_def_id())\n             }\n-            ItemKind::OpaqueTy(hir::OpaqueTy { origin: hir::OpaqueTyOrigin::TyAlias, .. }) => {\n+            ItemKind::OpaqueTy(hir::OpaqueTy {\n+                origin: hir::OpaqueTyOrigin::TyAlias { .. },\n+                ..\n+            }) => {\n                 let parent_id = tcx.hir().get_parent_item(hir_id);\n                 assert_ne!(parent_id, hir::CRATE_OWNER_ID);\n                 debug!(\"generics_of: parent of opaque ty {:?} is {:?}\", def_id, parent_id);"}, {"sha": "a33990813b8206bd8b4b619c290cf8eae30d325f", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -721,7 +721,7 @@ pub(super) fn type_param_predicates(\n                 | ItemKind::TyAlias(_, generics)\n                 | ItemKind::OpaqueTy(OpaqueTy {\n                     generics,\n-                    origin: hir::OpaqueTyOrigin::TyAlias,\n+                    origin: hir::OpaqueTyOrigin::TyAlias { .. },\n                     ..\n                 })\n                 | ItemKind::Enum(_, generics)"}, {"sha": "92ae93cf4cc5db928502269c02359419274a95a3", "filename": "compiler/rustc_hir_analysis/src/collect/resolve_bound_vars.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -526,7 +526,8 @@ impl<'a, 'tcx> Visitor<'tcx> for BoundVarContext<'a, 'tcx> {\n                 });\n             }\n             hir::ItemKind::OpaqueTy(hir::OpaqueTy {\n-                origin: hir::OpaqueTyOrigin::TyAlias, ..\n+                origin: hir::OpaqueTyOrigin::TyAlias { .. },\n+                ..\n             }) => {\n                 // Opaque types are visited when we visit the\n                 // `TyKind::OpaqueDef`, so that they have the lifetimes from\n@@ -707,7 +708,7 @@ impl<'a, 'tcx> Visitor<'tcx> for BoundVarContext<'a, 'tcx> {\n                 let opaque_ty = self.tcx.hir().item(item_id);\n                 match &opaque_ty.kind {\n                     hir::ItemKind::OpaqueTy(hir::OpaqueTy {\n-                        origin: hir::OpaqueTyOrigin::TyAlias,\n+                        origin: hir::OpaqueTyOrigin::TyAlias { .. },\n                         ..\n                     }) => {\n                         intravisit::walk_ty(self, ty);"}, {"sha": "6c7c2b9eea25877258f49e37ec359c2bbb91ea77", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -426,9 +426,10 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::EarlyBinder<Ty\n                     let substs = InternalSubsts::identity_for_item(tcx, def_id);\n                     tcx.mk_adt(def, substs)\n                 }\n-                ItemKind::OpaqueTy(OpaqueTy { origin: hir::OpaqueTyOrigin::TyAlias, .. }) => {\n-                    find_opaque_ty_constraints_for_tait(tcx, def_id)\n-                }\n+                ItemKind::OpaqueTy(OpaqueTy {\n+                    origin: hir::OpaqueTyOrigin::TyAlias { .. },\n+                    ..\n+                }) => find_opaque_ty_constraints_for_tait(tcx, def_id),\n                 // Opaque types desugared from `impl Trait`.\n                 ItemKind::OpaqueTy(OpaqueTy {\n                     origin:"}, {"sha": "421eb807a141f479d82873af941923e49d6b0c81", "filename": "compiler/rustc_infer/src/infer/error_reporting/note_and_explain.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -2,6 +2,7 @@ use super::TypeErrCtxt;\n use rustc_errors::Applicability::{MachineApplicable, MaybeIncorrect};\n use rustc_errors::{pluralize, Diagnostic, MultiSpan};\n use rustc_hir as hir;\n+use rustc_hir::def::DefKind;\n use rustc_middle::traits::ObligationCauseCode;\n use rustc_middle::ty::error::ExpectedFound;\n use rustc_middle::ty::print::Printer;\n@@ -256,6 +257,15 @@ impl<T> Trait<T> for X {\n                             );\n                         }\n                     }\n+                    (ty::Alias(ty::Opaque, alias), _) | (_, ty::Alias(ty::Opaque, alias)) if alias.def_id.is_local() && matches!(tcx.def_kind(body_owner_def_id), DefKind::AssocFn | DefKind::AssocConst) => {\n+                        if tcx.is_type_alias_impl_trait(alias.def_id) {\n+                            if !tcx.opaque_types_defined_by(body_owner_def_id.expect_local()).contains(&alias.def_id.expect_local()) {\n+                                diag.span_note(tcx.def_span(body_owner_def_id), \"\\\n+                                    this item must have the opaque type in its signature \\\n+                                    in order to be able to register hidden types\");\n+                            }\n+                        }\n+                    }\n                     (ty::FnPtr(_), ty::FnDef(def, _))\n                     if let hir::def::DefKind::Fn = tcx.def_kind(def) => {\n                         diag.note("}, {"sha": "9c139d17c183dba5455a35aca3303d8ff09b6a6f", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -828,7 +828,7 @@ where\n                 } else {\n                     match variables.probe(vid) {\n                         TypeVariableValue::Known { value: u } => {\n-                            drop(variables);\n+                            drop(inner);\n                             self.relate(u, u)\n                         }\n                         TypeVariableValue::Unknown { universe: _universe } => {"}, {"sha": "545310ad3516732385e750230be92dbf7e6ed42b", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -149,7 +149,7 @@ impl<'tcx> InferCtxt<'tcx> {\n                     // no one encounters it in practice.\n                     // It does occur however in `fn fut() -> impl Future<Output = i32> { async { 42 } }`,\n                     // where it is of no concern, so we only check for TAITs.\n-                    if let Some(OpaqueTyOrigin::TyAlias) =\n+                    if let Some(OpaqueTyOrigin::TyAlias { .. }) =\n                         b_def_id.as_local().and_then(|b_def_id| self.opaque_type_origin(b_def_id))\n                     {\n                         self.tcx.sess.emit_err(OpaqueHiddenTypeDiag {\n@@ -381,8 +381,12 @@ impl<'tcx> InferCtxt<'tcx> {\n             // Anonymous `impl Trait`\n             hir::OpaqueTyOrigin::FnReturn(parent) => parent == parent_def_id,\n             // Named `type Foo = impl Bar;`\n-            hir::OpaqueTyOrigin::TyAlias => {\n-                may_define_opaque_type(self.tcx, parent_def_id, opaque_hir_id)\n+            hir::OpaqueTyOrigin::TyAlias { in_assoc_ty } => {\n+                if in_assoc_ty {\n+                    self.tcx.opaque_types_defined_by(parent_def_id).contains(&def_id)\n+                } else {\n+                    may_define_opaque_type(self.tcx, parent_def_id, opaque_hir_id)\n+                }\n             }\n         };\n         in_definition_scope.then_some(origin)"}, {"sha": "a5639404fafd463f1f8a85a26c050a7f938069c6", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -520,3 +520,19 @@ lint_opaque_hidden_inferred_bound = opaque type `{$ty}` does not satisfy its ass\n     .specifically = this associated type bound is unsatisfied for `{$proj_ty}`\n \n lint_opaque_hidden_inferred_bound_sugg = add this bound\n+\n+lint_drop_ref = calls to `std::mem::drop` with a reference instead of an owned value does nothing\n+    .label = argument has type `{$arg_ty}`\n+    .note = use `let _ = ...` to ignore the expression or result\n+\n+lint_drop_copy = calls to `std::mem::drop` with a value that implements `Copy` does nothing\n+    .label = argument has type `{$arg_ty}`\n+    .note = use `let _ = ...` to ignore the expression or result\n+\n+lint_forget_ref = calls to `std::mem::forget` with a reference instead of an owned value does nothing\n+    .label = argument has type `{$arg_ty}`\n+    .note = use `let _ = ...` to ignore the expression or result\n+\n+lint_forget_copy = calls to `std::mem::forget` with a value that implements `Copy` does nothing\n+    .label = argument has type `{$arg_ty}`\n+    .note = use `let _ = ...` to ignore the expression or result"}, {"sha": "259abc2af11291b11cf26265a478ccd29591796c", "filename": "compiler/rustc_lint/src/drop_forget_useless.rs", "status": "added", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_lint%2Fsrc%2Fdrop_forget_useless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_lint%2Fsrc%2Fdrop_forget_useless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fdrop_forget_useless.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -0,0 +1,164 @@\n+use rustc_hir::{Arm, Expr, ExprKind, Node};\n+use rustc_span::sym;\n+\n+use crate::{\n+    lints::{DropCopyDiag, DropRefDiag, ForgetCopyDiag, ForgetRefDiag},\n+    LateContext, LateLintPass, LintContext,\n+};\n+\n+declare_lint! {\n+    /// The `drop_ref` lint checks for calls to `std::mem::drop` with a reference\n+    /// instead of an owned value.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// # fn operation_that_requires_mutex_to_be_unlocked() {} // just to make it compile\n+    /// # let mutex = std::sync::Mutex::new(1); // just to make it compile\n+    /// let mut lock_guard = mutex.lock();\n+    /// std::mem::drop(&lock_guard); // Should have been drop(lock_guard), mutex\n+    /// // still locked\n+    /// operation_that_requires_mutex_to_be_unlocked();\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Calling `drop` on a reference will only drop the\n+    /// reference itself, which is a no-op. It will not call the `drop` method (from\n+    /// the `Drop` trait implementation) on the underlying referenced value, which\n+    /// is likely what was intended.\n+    pub DROP_REF,\n+    Warn,\n+    \"calls to `std::mem::drop` with a reference instead of an owned value\"\n+}\n+\n+declare_lint! {\n+    /// The `forget_ref` lint checks for calls to `std::mem::forget` with a reference\n+    /// instead of an owned value.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// let x = Box::new(1);\n+    /// std::mem::forget(&x); // Should have been forget(x), x will still be dropped\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Calling `forget` on a reference will only forget the\n+    /// reference itself, which is a no-op. It will not forget the underlying\n+    /// referenced value, which is likely what was intended.\n+    pub FORGET_REF,\n+    Warn,\n+    \"calls to `std::mem::forget` with a reference instead of an owned value\"\n+}\n+\n+declare_lint! {\n+    /// The `drop_copy` lint checks for calls to `std::mem::drop` with a value\n+    /// that derives the Copy trait.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// let x: i32 = 42; // i32 implements Copy\n+    /// std::mem::drop(x); // A copy of x is passed to the function, leaving the\n+    ///                    // original unaffected\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Calling `std::mem::drop` [does nothing for types that\n+    /// implement Copy](https://doc.rust-lang.org/std/mem/fn.drop.html), since the\n+    /// value will be copied and moved into the function on invocation.\n+    pub DROP_COPY,\n+    Warn,\n+    \"calls to `std::mem::drop` with a value that implements Copy\"\n+}\n+\n+declare_lint! {\n+    /// The `forget_copy` lint checks for calls to `std::mem::forget` with a value\n+    /// that derives the Copy trait.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// let x: i32 = 42; // i32 implements Copy\n+    /// std::mem::forget(x); // A copy of x is passed to the function, leaving the\n+    ///                      // original unaffected\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Calling `std::mem::forget` [does nothing for types that\n+    /// implement Copy](https://doc.rust-lang.org/std/mem/fn.drop.html) since the\n+    /// value will be copied and moved into the function on invocation.\n+    ///\n+    /// An alternative, but also valid, explanation is that Copy types do not\n+    /// implement the Drop trait, which means they have no destructors. Without a\n+    /// destructor, there is nothing for `std::mem::forget` to ignore.\n+    pub FORGET_COPY,\n+    Warn,\n+    \"calls to `std::mem::forget` with a value that implements Copy\"\n+}\n+\n+declare_lint_pass!(DropForgetUseless => [DROP_REF, FORGET_REF, DROP_COPY, FORGET_COPY]);\n+\n+impl<'tcx> LateLintPass<'tcx> for DropForgetUseless {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n+        if let ExprKind::Call(path, [arg]) = expr.kind\n+            && let ExprKind::Path(ref qpath) = path.kind\n+            && let Some(def_id) = cx.qpath_res(qpath, path.hir_id).opt_def_id()\n+            && let Some(fn_name) = cx.tcx.get_diagnostic_name(def_id)\n+        {\n+            let arg_ty = cx.typeck_results().expr_ty(arg);\n+            let is_copy = arg_ty.is_copy_modulo_regions(cx.tcx, cx.param_env);\n+            let drop_is_single_call_in_arm = is_single_call_in_arm(cx, arg, expr);\n+            match fn_name {\n+                sym::mem_drop if arg_ty.is_ref() && !drop_is_single_call_in_arm => {\n+                    cx.emit_spanned_lint(DROP_REF, expr.span, DropRefDiag { arg_ty, label: arg.span });\n+                },\n+                sym::mem_forget if arg_ty.is_ref() => {\n+                    cx.emit_spanned_lint(FORGET_REF, expr.span, ForgetRefDiag { arg_ty, label: arg.span });\n+                },\n+                sym::mem_drop if is_copy && !drop_is_single_call_in_arm => {\n+                    cx.emit_spanned_lint(DROP_COPY, expr.span, DropCopyDiag { arg_ty, label: arg.span });\n+                }\n+                sym::mem_forget if is_copy => {\n+                    cx.emit_spanned_lint(FORGET_COPY, expr.span, ForgetCopyDiag { arg_ty, label: arg.span });\n+                }\n+                _ => return,\n+            };\n+        }\n+    }\n+}\n+\n+// Dropping returned value of a function, as in the following snippet is considered idiomatic, see\n+// rust-lang/rust-clippy#9482 for examples.\n+//\n+// ```\n+// match <var> {\n+//     <pat> => drop(fn_with_side_effect_and_returning_some_value()),\n+//     ..\n+// }\n+// ```\n+fn is_single_call_in_arm<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    arg: &'tcx Expr<'_>,\n+    drop_expr: &'tcx Expr<'_>,\n+) -> bool {\n+    if matches!(arg.kind, ExprKind::Call(..) | ExprKind::MethodCall(..)) {\n+        let parent_node = cx.tcx.hir().find_parent(drop_expr.hir_id);\n+        if let Some(Node::Arm(Arm { body, .. })) = &parent_node {\n+            return body.hir_id == drop_expr.hir_id;\n+        }\n+    }\n+    false\n+}"}, {"sha": "5c7016633c2d1568ae0f60cf8ea9202e1d1bb99b", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -52,6 +52,7 @@ mod array_into_iter;\n pub mod builtin;\n mod context;\n mod deref_into_dyn_supertrait;\n+mod drop_forget_useless;\n mod early;\n mod enum_intrinsics_non_enums;\n mod errors;\n@@ -96,6 +97,7 @@ use rustc_span::Span;\n use array_into_iter::ArrayIntoIter;\n use builtin::*;\n use deref_into_dyn_supertrait::*;\n+use drop_forget_useless::*;\n use enum_intrinsics_non_enums::EnumIntrinsicsNonEnums;\n use for_loops_over_fallibles::*;\n use hidden_unicode_codepoints::*;\n@@ -201,6 +203,7 @@ late_lint_methods!(\n         [\n             ForLoopsOverFallibles: ForLoopsOverFallibles,\n             DerefIntoDynSupertrait: DerefIntoDynSupertrait,\n+            DropForgetUseless: DropForgetUseless,\n             HardwiredLints: HardwiredLints,\n             ImproperCTypesDeclarations: ImproperCTypesDeclarations,\n             ImproperCTypesDefinitions: ImproperCTypesDefinitions,"}, {"sha": "8e48806b50447dd50b10c9f60c0710c39eb08ea4", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -662,6 +662,43 @@ pub struct ForLoopsOverFalliblesSuggestion<'a> {\n     pub end_span: Span,\n }\n \n+// drop_ref.rs\n+#[derive(LintDiagnostic)]\n+#[diag(lint_drop_ref)]\n+#[note]\n+pub struct DropRefDiag<'a> {\n+    pub arg_ty: Ty<'a>,\n+    #[label]\n+    pub label: Span,\n+}\n+\n+#[derive(LintDiagnostic)]\n+#[diag(lint_drop_copy)]\n+#[note]\n+pub struct DropCopyDiag<'a> {\n+    pub arg_ty: Ty<'a>,\n+    #[label]\n+    pub label: Span,\n+}\n+\n+#[derive(LintDiagnostic)]\n+#[diag(lint_forget_ref)]\n+#[note]\n+pub struct ForgetRefDiag<'a> {\n+    pub arg_ty: Ty<'a>,\n+    #[label]\n+    pub label: Span,\n+}\n+\n+#[derive(LintDiagnostic)]\n+#[diag(lint_forget_copy)]\n+#[note]\n+pub struct ForgetCopyDiag<'a> {\n+    pub arg_ty: Ty<'a>,\n+    #[label]\n+    pub label: Span,\n+}\n+\n // hidden_unicode_codepoints.rs\n #[derive(LintDiagnostic)]\n #[diag(lint_hidden_unicode_codepoints)]"}, {"sha": "7b774d6865c86083f58ef9b2ea1d12231c40fe28", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -745,6 +745,9 @@ LLVMRustOptimize(\n         if (InstrProfileOutput) {\n           Options.InstrProfileOutput = InstrProfileOutput;\n         }\n+        // cargo run tests in multhreading mode by default\n+        // so use atomics for coverage counters\n+        Options.Atomic = true;\n         MPM.addPass(InstrProfiling(Options, false));\n       }\n     );"}, {"sha": "eab32ad8e3f806ae8d53e8b53467043e8f8a2026", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 36, "deletions": 21, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -856,7 +856,12 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         ty::EarlyBinder(&*output)\n     }\n \n-    fn get_variant(self, kind: &DefKind, index: DefIndex, parent_did: DefId) -> ty::VariantDef {\n+    fn get_variant(\n+        self,\n+        kind: DefKind,\n+        index: DefIndex,\n+        parent_did: DefId,\n+    ) -> (VariantIdx, ty::VariantDef) {\n         let adt_kind = match kind {\n             DefKind::Variant => ty::AdtKind::Enum,\n             DefKind::Struct => ty::AdtKind::Struct,\n@@ -870,22 +875,25 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             if adt_kind == ty::AdtKind::Enum { Some(self.local_def_id(index)) } else { None };\n         let ctor = data.ctor.map(|(kind, index)| (kind, self.local_def_id(index)));\n \n-        ty::VariantDef::new(\n-            self.item_name(index),\n-            variant_did,\n-            ctor,\n-            data.discr,\n-            self.get_associated_item_or_field_def_ids(index)\n-                .map(|did| ty::FieldDef {\n-                    did,\n-                    name: self.item_name(did.index),\n-                    vis: self.get_visibility(did.index),\n-                })\n-                .collect(),\n-            adt_kind,\n-            parent_did,\n-            false,\n-            data.is_non_exhaustive,\n+        (\n+            data.idx,\n+            ty::VariantDef::new(\n+                self.item_name(index),\n+                variant_did,\n+                ctor,\n+                data.discr,\n+                self.get_associated_item_or_field_def_ids(index)\n+                    .map(|did| ty::FieldDef {\n+                        did,\n+                        name: self.item_name(did.index),\n+                        vis: self.get_visibility(did.index),\n+                    })\n+                    .collect(),\n+                adt_kind,\n+                parent_did,\n+                false,\n+                data.is_non_exhaustive,\n+            ),\n         )\n     }\n \n@@ -901,7 +909,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         };\n         let repr = self.root.tables.repr_options.get(self, item_id).unwrap().decode(self);\n \n-        let variants = if let ty::AdtKind::Enum = adt_kind {\n+        let mut variants: Vec<_> = if let ty::AdtKind::Enum = adt_kind {\n             self.root\n                 .tables\n                 .module_children_non_reexports\n@@ -912,15 +920,22 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                     let kind = self.def_kind(index);\n                     match kind {\n                         DefKind::Ctor(..) => None,\n-                        _ => Some(self.get_variant(&kind, index, did)),\n+                        _ => Some(self.get_variant(kind, index, did)),\n                     }\n                 })\n                 .collect()\n         } else {\n-            std::iter::once(self.get_variant(&kind, item_id, did)).collect()\n+            std::iter::once(self.get_variant(kind, item_id, did)).collect()\n         };\n \n-        tcx.mk_adt_def(did, adt_kind, variants, repr)\n+        variants.sort_by_key(|(idx, _)| *idx);\n+\n+        tcx.mk_adt_def(\n+            did,\n+            adt_kind,\n+            variants.into_iter().map(|(_, variant)| variant).collect(),\n+            repr,\n+        )\n     }\n \n     fn get_visibility(self, id: DefIndex) -> Visibility<DefId> {"}, {"sha": "36be07f6205a39e89c0bc2295167b943c20836f9", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1375,9 +1375,10 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             // Therefore, the loop over variants will encode its fields as the adt's children.\n         }\n \n-        for variant in adt_def.variants().iter() {\n+        for (idx, variant) in adt_def.variants().iter_enumerated() {\n             let data = VariantData {\n                 discr: variant.discr,\n+                idx,\n                 ctor: variant.ctor.map(|(kind, def_id)| (kind, def_id.index)),\n                 is_non_exhaustive: variant.is_field_list_non_exhaustive(),\n             };\n@@ -1641,9 +1642,10 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             }\n             hir::ItemKind::OpaqueTy(ref opaque) => {\n                 self.encode_explicit_item_bounds(def_id);\n-                self.tables\n-                    .is_type_alias_impl_trait\n-                    .set(def_id.index, matches!(opaque.origin, hir::OpaqueTyOrigin::TyAlias));\n+                self.tables.is_type_alias_impl_trait.set(\n+                    def_id.index,\n+                    matches!(opaque.origin, hir::OpaqueTyOrigin::TyAlias { .. }),\n+                );\n             }\n             hir::ItemKind::Impl(hir::Impl { defaultness, constness, .. }) => {\n                 self.tables.impl_defaultness.set_some(def_id.index, *defaultness);"}, {"sha": "1328d70021047a463fa6f69561b2da7caa3b3a50", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -31,6 +31,7 @@ use rustc_span::edition::Edition;\n use rustc_span::hygiene::{ExpnIndex, MacroKind};\n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::{self, ExpnData, ExpnHash, ExpnId, Span};\n+use rustc_target::abi::VariantIdx;\n use rustc_target::spec::{PanicStrategy, TargetTriple};\n \n use std::marker::PhantomData;\n@@ -430,6 +431,7 @@ define_tables! {\n \n #[derive(TyEncodable, TyDecodable)]\n struct VariantData {\n+    idx: VariantIdx,\n     discr: ty::VariantDiscr,\n     /// If this is unit or tuple-variant/struct, then this is the index of the ctor id.\n     ctor: Option<(CtorKind, DefIndex)>,"}, {"sha": "d7a7fdebda6e1c7da279246f8b112256434934d2", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -880,12 +880,11 @@ macro_rules! make_mir_visitor {\n             ) {\n                 let Constant {\n                     span,\n-                    user_ty,\n+                    user_ty: _, // no visit method for this\n                     literal,\n                 } = constant;\n \n                 self.visit_span($(& $mutability)? *span);\n-                drop(user_ty); // no visit method for this\n                 match literal {\n                     ConstantKind::Ty(ct) => self.visit_ty_const($(&$mutability)? *ct, location),\n                     ConstantKind::Val(_, ty) => self.visit_ty($(& $mutability)? *ty, TyContext::Location(location)),"}, {"sha": "b45f7caaabe08945346173ad5c37d81d77643b0c", "filename": "compiler/rustc_middle/src/query/erase.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_middle%2Fsrc%2Fquery%2Ferase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_middle%2Fsrc%2Fquery%2Ferase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Ferase.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -172,6 +172,10 @@ impl EraseType for ty::Binder<'_, ty::FnSig<'_>> {\n     type Result = [u8; size_of::<ty::Binder<'static, ty::FnSig<'static>>>()];\n }\n \n+impl EraseType for ty::Binder<'_, &'_ ty::List<Ty<'_>>> {\n+    type Result = [u8; size_of::<ty::Binder<'static, &'static ty::List<Ty<'static>>>>()];\n+}\n+\n impl<T0, T1> EraseType for (&'_ T0, &'_ T1) {\n     type Result = [u8; size_of::<(&'static (), &'static ())>()];\n }"}, {"sha": "5acdd68e60eac32677005de79ee75124f1efd483", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -236,6 +236,15 @@ rustc_queries! {\n         cache_on_disk_if { key.is_local() }\n     }\n \n+    query opaque_types_defined_by(\n+        key: LocalDefId\n+    ) -> &'tcx [LocalDefId] {\n+        desc {\n+            |tcx| \"computing the opaque types defined by `{}`\",\n+            tcx.def_path_str(key.to_def_id())\n+        }\n+    }\n+\n     /// Returns the list of bounds that can be used for\n     /// `SelectionCandidate::ProjectionCandidate(_)` and\n     /// `ProjectionTyCandidate::TraitDef`."}, {"sha": "2f0b07d4c71b4a5c22faaf53115b03e4b54a1695", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -281,9 +281,6 @@ pub enum ObligationCauseCode<'tcx> {\n     /// A type like `Box<Foo<'a> + 'b>` is WF only if `'b: 'a`.\n     ObjectTypeBound(Ty<'tcx>, ty::Region<'tcx>),\n \n-    /// Obligation incurred due to an object cast.\n-    ObjectCastObligation(/* Concrete type */ Ty<'tcx>, /* Object type */ Ty<'tcx>),\n-\n     /// Obligation incurred due to a coercion.\n     Coercion {\n         source: Ty<'tcx>,"}, {"sha": "b414e1200cdf850f1f858bb170d545851055b776", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -2476,6 +2476,18 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n+    /// Returns the `DefId` of the item within which the `impl Trait` is declared.\n+    /// For type-alias-impl-trait this is the `type` alias.\n+    /// For impl-trait-in-assoc-type this is the assoc type.\n+    /// For return-position-impl-trait this is the function.\n+    pub fn impl_trait_parent(self, mut def_id: LocalDefId) -> LocalDefId {\n+        // Find the surrounding item (type alias or assoc type)\n+        while let DefKind::OpaqueTy = self.def_kind(def_id) {\n+            def_id = self.local_parent(def_id);\n+        }\n+        def_id\n+    }\n+\n     pub fn impl_method_has_trait_impl_trait_tys(self, def_id: DefId) -> bool {\n         if self.def_kind(def_id) != DefKind::AssocFn {\n             return false;\n@@ -2520,7 +2532,7 @@ pub fn is_impl_trait_defn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<LocalDefId>\n                 hir::OpaqueTyOrigin::FnReturn(parent) | hir::OpaqueTyOrigin::AsyncFn(parent) => {\n                     Some(parent)\n                 }\n-                hir::OpaqueTyOrigin::TyAlias => None,\n+                hir::OpaqueTyOrigin::TyAlias { .. } => None,\n             };\n         }\n     }"}, {"sha": "a0c8d299f48ba164c000d9f4c8861f050101add2", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -32,7 +32,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     ///\n     /// This should only be used outside of type inference. For example,\n     /// it assumes that normalization will succeed.\n-    #[tracing::instrument(level = \"debug\", skip(self, param_env))]\n+    #[tracing::instrument(level = \"debug\", skip(self, param_env), ret)]\n     pub fn normalize_erasing_regions<T>(self, param_env: ty::ParamEnv<'tcx>, value: T) -> T\n     where\n         T: TypeFoldable<TyCtxt<'tcx>>,"}, {"sha": "d175cf72d672a9dcf35b51c700f7c16fb50bb033", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1265,7 +1265,7 @@ impl<'tcx> AliasTy<'tcx> {\n \n     /// Extracts the underlying trait reference and own substs from this projection.\n     /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,\n-    /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs\n+    /// then this function would return a `T: StreamingIterator` trait reference and `['a]` as the own substs\n     pub fn trait_ref_and_own_substs(\n         self,\n         tcx: TyCtxt<'tcx>,"}, {"sha": "9bab693156b3df6bf0b7345d8205b29221915dee", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -34,9 +34,14 @@ pub struct Discr<'tcx> {\n \n /// Used as an input to [`TyCtxt::uses_unique_generic_params`].\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n-pub enum IgnoreRegions {\n-    Yes,\n+pub enum CheckRegions {\n     No,\n+    /// Only permit early bound regions. This is useful for Adts which\n+    /// can never have late bound regions.\n+    OnlyEarlyBound,\n+    /// Permit both late bound and early bound regions. Use this for functions,\n+    /// which frequently have late bound regions.\n+    Bound,\n }\n \n #[derive(Copy, Clone, Debug)]\n@@ -468,21 +473,28 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn uses_unique_generic_params(\n         self,\n         substs: SubstsRef<'tcx>,\n-        ignore_regions: IgnoreRegions,\n+        ignore_regions: CheckRegions,\n     ) -> Result<(), NotUniqueParam<'tcx>> {\n         let mut seen = GrowableBitSet::default();\n+        let mut seen_late = FxHashSet::default();\n         for arg in substs {\n             match arg.unpack() {\n-                GenericArgKind::Lifetime(lt) => {\n-                    if ignore_regions == IgnoreRegions::No {\n-                        let ty::ReEarlyBound(p) = lt.kind() else {\n-                            return Err(NotUniqueParam::NotParam(lt.into()))\n-                        };\n+                GenericArgKind::Lifetime(lt) => match (ignore_regions, lt.kind()) {\n+                    (CheckRegions::Bound, ty::ReLateBound(di, reg)) => {\n+                        if !seen_late.insert((di, reg)) {\n+                            return Err(NotUniqueParam::DuplicateParam(lt.into()));\n+                        }\n+                    }\n+                    (CheckRegions::OnlyEarlyBound | CheckRegions::Bound, ty::ReEarlyBound(p)) => {\n                         if !seen.insert(p.index) {\n                             return Err(NotUniqueParam::DuplicateParam(lt.into()));\n                         }\n                     }\n-                }\n+                    (CheckRegions::OnlyEarlyBound | CheckRegions::Bound, _) => {\n+                        return Err(NotUniqueParam::NotParam(lt.into()));\n+                    }\n+                    (CheckRegions::No, _) => {}\n+                },\n                 GenericArgKind::Type(t) => match t.kind() {\n                     ty::Param(p) => {\n                         if !seen.insert(p.index) {"}, {"sha": "e2b8d3eea2d423c8e4089817cbcd929c35057ce1", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1060,6 +1060,9 @@ fn default_configuration(sess: &Session) -> CrateConfig {\n     if sess.opts.debug_assertions {\n         ret.insert((sym::debug_assertions, None));\n     }\n+    if sess.overflow_checks() {\n+        ret.insert((sym::overflow_checks, None));\n+    }\n     // JUSTIFICATION: before wrapper fn is available\n     #[allow(rustc::bad_opt_access)]\n     if sess.opts.crate_types.contains(&CrateType::ProcMacro) {\n@@ -1209,6 +1212,7 @@ impl CrateCheckConfig {\n             sym::windows,\n             sym::proc_macro,\n             sym::debug_assertions,\n+            sym::overflow_checks,\n             sym::target_thread_local,\n         ] {\n             self.expecteds.entry(name).or_insert_with(no_values);"}, {"sha": "9951d8f4fc153c47401ea4534d2b54a07fbfd2a3", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -463,6 +463,7 @@ symbols! {\n         cfg_doctest,\n         cfg_eval,\n         cfg_hide,\n+        cfg_overflow_checks,\n         cfg_panic,\n         cfg_sanitize,\n         cfg_target_abi,\n@@ -1065,6 +1066,7 @@ symbols! {\n         or_patterns,\n         other,\n         out,\n+        overflow_checks,\n         overlapping_marker_traits,\n         owned_box,\n         packed,"}, {"sha": "e60b8e78e5d574b6a41f8fd9d38f3cdbf3908556", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -882,8 +882,8 @@ impl InlineAsmClobberAbi {\n                 _ => Err(&[\"C\", \"system\", \"efiapi\"]),\n             },\n             InlineAsmArch::LoongArch64 => match name {\n-                \"C\" | \"system\" | \"efiapi\" => Ok(InlineAsmClobberAbi::LoongArch),\n-                _ => Err(&[\"C\", \"system\", \"efiapi\"]),\n+                \"C\" | \"system\" => Ok(InlineAsmClobberAbi::LoongArch),\n+                _ => Err(&[\"C\", \"system\"]),\n             },\n             _ => Err(&[]),\n         }"}, {"sha": "f5f2fe54217885091aa694fcd10ebfcf7998c61f", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -797,9 +797,17 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             err.span_label(span, explanation);\n                         }\n \n-                        if let ObligationCauseCode::ObjectCastObligation(concrete_ty, obj_ty) = obligation.cause.code().peel_derives() &&\n-                            Some(trait_ref.def_id()) == self.tcx.lang_items().sized_trait() {\n-                            self.suggest_borrowing_for_object_cast(&mut err, &root_obligation, *concrete_ty, *obj_ty);\n+                        if let ObligationCauseCode::Coercion { source, target } =\n+                            *obligation.cause.code().peel_derives()\n+                        {\n+                            if Some(trait_ref.def_id()) == self.tcx.lang_items().sized_trait() {\n+                                self.suggest_borrowing_for_object_cast(\n+                                    &mut err,\n+                                    &root_obligation,\n+                                    source,\n+                                    target,\n+                                );\n+                            }\n                         }\n \n                         let UnsatisfiedConst(unsatisfied_const) = self\n@@ -1510,7 +1518,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         | ObligationCauseCode::BindingObligation(_, _)\n                         | ObligationCauseCode::ExprItemObligation(..)\n                         | ObligationCauseCode::ExprBindingObligation(..)\n-                        | ObligationCauseCode::ObjectCastObligation(..)\n+                        | ObligationCauseCode::Coercion { .. }\n                         | ObligationCauseCode::OpaqueType\n                 );\n "}, {"sha": "49b309abcda3a939deb6f9b2f20acbfb408cea5c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1442,8 +1442,9 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         err: &mut Diagnostic,\n         obligation: &PredicateObligation<'tcx>,\n         self_ty: Ty<'tcx>,\n-        object_ty: Ty<'tcx>,\n+        target_ty: Ty<'tcx>,\n     ) {\n+        let ty::Ref(_, object_ty, hir::Mutability::Not) = target_ty.kind() else { return; };\n         let ty::Dynamic(predicates, _, ty::Dyn) = object_ty.kind() else { return; };\n         let self_ref_ty = self.tcx.mk_imm_ref(self.tcx.lifetimes.re_erased, self_ty);\n \n@@ -1458,7 +1459,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         err.span_suggestion(\n             obligation.cause.span.shrink_to_lo(),\n             format!(\n-                \"consider borrowing the value, since `&{self_ty}` can be coerced into `{object_ty}`\"\n+                \"consider borrowing the value, since `&{self_ty}` can be coerced into `{target_ty}`\"\n             ),\n             \"&\",\n             Applicability::MaybeIncorrect,\n@@ -2851,30 +2852,27 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     err.span_note(tcx.def_span(item_def_id), descr);\n                 }\n             }\n-            ObligationCauseCode::ObjectCastObligation(concrete_ty, object_ty) => {\n-                let (concrete_ty, concrete_file) =\n-                    self.tcx.short_ty_string(self.resolve_vars_if_possible(concrete_ty));\n-                let (object_ty, object_file) =\n-                    self.tcx.short_ty_string(self.resolve_vars_if_possible(object_ty));\n+            ObligationCauseCode::Coercion { source, target } => {\n+                let (source, source_file) =\n+                    self.tcx.short_ty_string(self.resolve_vars_if_possible(source));\n+                let (target, target_file) =\n+                    self.tcx.short_ty_string(self.resolve_vars_if_possible(target));\n                 err.note(with_forced_trimmed_paths!(format!(\n-                    \"required for the cast from `{concrete_ty}` to the object type `{object_ty}`\",\n+                    \"required for the cast from `{source}` to `{target}`\",\n                 )));\n-                if let Some(file) = concrete_file {\n+                if let Some(file) = source_file {\n                     err.note(format!(\n-                        \"the full name for the casted type has been written to '{}'\",\n+                        \"the full name for the source type has been written to '{}'\",\n                         file.display(),\n                     ));\n                 }\n-                if let Some(file) = object_file {\n+                if let Some(file) = target_file {\n                     err.note(format!(\n-                        \"the full name for the object type has been written to '{}'\",\n+                        \"the full name for the target type has been written to '{}'\",\n                         file.display(),\n                     ));\n                 }\n             }\n-            ObligationCauseCode::Coercion { source: _, target } => {\n-                err.note(format!(\"required by cast to type `{}`\", self.ty_to_string(target)));\n-            }\n             ObligationCauseCode::RepeatElementCopy { is_const_fn } => {\n                 err.note(\n                     \"the `Copy` trait is required because this value will be copied for each element of the array\","}, {"sha": "6a648294efd98bbba4c0d3939e5141d3e78787a2", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 12, "deletions": 24, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -29,9 +29,9 @@ use crate::traits::{\n     ImplSourceAutoImplData, ImplSourceBuiltinData, ImplSourceClosureData,\n     ImplSourceConstDestructData, ImplSourceFnPointerData, ImplSourceFutureData,\n     ImplSourceGeneratorData, ImplSourceObjectData, ImplSourceTraitAliasData,\n-    ImplSourceTraitUpcastingData, ImplSourceUserDefinedData, Normalized, ObjectCastObligation,\n-    Obligation, ObligationCause, OutputTypeParameterMismatch, PredicateObligation, Selection,\n-    SelectionError, TraitNotObjectSafe, TraitObligation, Unimplemented,\n+    ImplSourceTraitUpcastingData, ImplSourceUserDefinedData, Normalized, Obligation,\n+    ObligationCause, OutputTypeParameterMismatch, PredicateObligation, Selection, SelectionError,\n+    TraitNotObjectSafe, TraitObligation, Unimplemented,\n };\n \n use super::BuiltinImplConditions;\n@@ -905,16 +905,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     .map_err(|_| Unimplemented)?;\n                 nested.extend(obligations);\n \n-                // Register one obligation for 'a: 'b.\n-                let cause = ObligationCause::new(\n-                    obligation.cause.span,\n-                    obligation.cause.body_id,\n-                    ObjectCastObligation(source, target),\n-                );\n                 let outlives = ty::OutlivesPredicate(r_a, r_b);\n                 nested.push(Obligation::with_depth(\n                     tcx,\n-                    cause,\n+                    obligation.cause.clone(),\n                     obligation.recursion_depth + 1,\n                     obligation.param_env,\n                     obligation.predicate.rebind(outlives),\n@@ -1005,15 +999,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 nested.extend(obligations);\n \n                 // Register one obligation for 'a: 'b.\n-                let cause = ObligationCause::new(\n-                    obligation.cause.span,\n-                    obligation.cause.body_id,\n-                    ObjectCastObligation(source, target),\n-                );\n                 let outlives = ty::OutlivesPredicate(r_a, r_b);\n                 nested.push(Obligation::with_depth(\n                     tcx,\n-                    cause,\n+                    obligation.cause.clone(),\n                     obligation.recursion_depth + 1,\n                     obligation.param_env,\n                     obligation.predicate.rebind(outlives),\n@@ -1027,16 +1016,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     return Err(TraitNotObjectSafe(did));\n                 }\n \n-                let cause = ObligationCause::new(\n-                    obligation.cause.span,\n-                    obligation.cause.body_id,\n-                    ObjectCastObligation(source, target),\n-                );\n-\n                 let predicate_to_obligation = |predicate| {\n                     Obligation::with_depth(\n                         tcx,\n-                        cause.clone(),\n+                        obligation.cause.clone(),\n                         obligation.recursion_depth + 1,\n                         obligation.param_env,\n                         predicate,\n@@ -1056,7 +1039,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 );\n \n                 // We can only make objects from sized types.\n-                let tr = ty::TraitRef::from_lang_item(tcx, LangItem::Sized, cause.span, [source]);\n+                let tr = ty::TraitRef::from_lang_item(\n+                    tcx,\n+                    LangItem::Sized,\n+                    obligation.cause.span,\n+                    [source],\n+                );\n                 nested.push(predicate_to_obligation(tr.without_const().to_predicate(tcx)));\n \n                 // If the type is `Foo + 'a`, ensure that the type"}, {"sha": "b72ff5b78e4183553dc62dc505f9c0d616951aef", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -2647,14 +2647,19 @@ impl<'tcx> SelectionContext<'_, 'tcx> {\n         let predicates = predicates.instantiate_own(tcx, substs);\n         let mut obligations = Vec::with_capacity(predicates.len());\n         for (index, (predicate, span)) in predicates.into_iter().enumerate() {\n-            let cause = cause.clone().derived_cause(parent_trait_pred, |derived| {\n-                ImplDerivedObligation(Box::new(ImplDerivedObligationCause {\n-                    derived,\n-                    impl_or_alias_def_id: def_id,\n-                    impl_def_predicate_index: Some(index),\n-                    span,\n-                }))\n-            });\n+            let cause =\n+                if Some(parent_trait_pred.def_id()) == tcx.lang_items().coerce_unsized_trait() {\n+                    cause.clone()\n+                } else {\n+                    cause.clone().derived_cause(parent_trait_pred, |derived| {\n+                        ImplDerivedObligation(Box::new(ImplDerivedObligationCause {\n+                            derived,\n+                            impl_or_alias_def_id: def_id,\n+                            impl_def_predicate_index: Some(index),\n+                            span,\n+                        }))\n+                    })\n+                };\n             let predicate = normalize_with_depth_to(\n                 self,\n                 param_env,"}, {"sha": "5bc3e3c00c9af857ff1a9d8cb64f6993b9fa2b89", "filename": "compiler/rustc_ty_utils/messages.ftl", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_ty_utils%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_ty_utils%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fmessages.ftl?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -55,3 +55,11 @@ ty_utils_multiple_array_fields_simd_type = monomorphising SIMD type `{$ty}` with\n ty_utils_oversized_simd_type = monomorphising SIMD type `{$ty}` of length greater than {$max_lanes}\n \n ty_utils_non_primitive_simd_type = monomorphising SIMD type `{$ty}` with a non-primitive-scalar (integer/float/pointer) element type `{$e_ty}`\n+\n+ty_utils_impl_trait_duplicate_arg = non-defining opaque type use in defining scope\n+    .label = generic argument `{$arg}` used twice\n+    .note = for this opaque type\n+\n+ty_utils_impl_trait_not_param = non-defining opaque type use in defining scope\n+    .label = argument `{$arg}` is not a generic parameter\n+    .note = for this opaque type"}, {"sha": "553bf40ef3a48afb320ba14626dc6a519160c24c", "filename": "compiler/rustc_ty_utils/src/errors.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_ty_utils%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_ty_utils%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Ferrors.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1,7 +1,7 @@\n //! Errors emitted by ty_utils\n \n use rustc_macros::{Diagnostic, Subdiagnostic};\n-use rustc_middle::ty::Ty;\n+use rustc_middle::ty::{GenericArg, Ty};\n use rustc_span::Span;\n \n #[derive(Diagnostic)]\n@@ -100,3 +100,25 @@ pub struct NonPrimitiveSimdType<'tcx> {\n     pub ty: Ty<'tcx>,\n     pub e_ty: Ty<'tcx>,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(ty_utils_impl_trait_duplicate_arg)]\n+pub struct DuplicateArg<'tcx> {\n+    pub arg: GenericArg<'tcx>,\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    #[note]\n+    pub opaque_span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(ty_utils_impl_trait_not_param)]\n+pub struct NotParam<'tcx> {\n+    pub arg: GenericArg<'tcx>,\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    #[note]\n+    pub opaque_span: Span,\n+}"}, {"sha": "8306c5ae49360c82ea5e0e2a1196ad083652085b", "filename": "compiler/rustc_ty_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -33,6 +33,7 @@ pub mod instance;\n mod layout;\n mod layout_sanity_check;\n mod needs_drop;\n+mod opaque_types;\n pub mod representability;\n mod structural_match;\n mod ty;\n@@ -47,6 +48,7 @@ pub fn provide(providers: &mut Providers) {\n     implied_bounds::provide(providers);\n     layout::provide(providers);\n     needs_drop::provide(providers);\n+    opaque_types::provide(providers);\n     representability::provide(providers);\n     ty::provide(providers);\n     instance::provide(providers);"}, {"sha": "25ebb333bf74ac6edc9062f6fed2b966c3ef63b4", "filename": "compiler/rustc_ty_utils/src/opaque_types.rs", "status": "added", "additions": 197, "deletions": 0, "changes": 197, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_ty_utils%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/compiler%2Frustc_ty_utils%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fopaque_types.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -0,0 +1,197 @@\n+use rustc_data_structures::fx::FxHashSet;\n+use rustc_errors::ErrorGuaranteed;\n+use rustc_hir::{def::DefKind, def_id::LocalDefId};\n+use rustc_middle::ty::util::{CheckRegions, NotUniqueParam};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{TypeSuperVisitable, TypeVisitable, TypeVisitor};\n+use rustc_span::Span;\n+use rustc_type_ir::AliasKind;\n+use std::ops::ControlFlow;\n+\n+use crate::errors::{DuplicateArg, NotParam};\n+\n+struct OpaqueTypeCollector<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    opaques: Vec<LocalDefId>,\n+    /// The `DefId` of the item which we are collecting opaque types for.\n+    item: LocalDefId,\n+\n+    /// Avoid infinite recursion due to recursive declarations.\n+    seen: FxHashSet<LocalDefId>,\n+}\n+\n+impl<'tcx> OpaqueTypeCollector<'tcx> {\n+    fn collect(\n+        tcx: TyCtxt<'tcx>,\n+        item: LocalDefId,\n+        val: ty::Binder<'tcx, impl TypeVisitable<TyCtxt<'tcx>>>,\n+    ) -> Vec<LocalDefId> {\n+        let mut collector = Self { tcx, opaques: Vec::new(), item, seen: Default::default() };\n+        val.skip_binder().visit_with(&mut collector);\n+        collector.opaques\n+    }\n+\n+    fn span(&self) -> Span {\n+        self.tcx.def_span(self.item)\n+    }\n+\n+    fn parent(&self) -> Option<LocalDefId> {\n+        match self.tcx.def_kind(self.item) {\n+            DefKind::Fn => None,\n+            DefKind::AssocFn | DefKind::AssocTy | DefKind::AssocConst => {\n+                Some(self.tcx.local_parent(self.item))\n+            }\n+            other => span_bug!(\n+                self.tcx.def_span(self.item),\n+                \"unhandled item with opaque types: {other:?}\"\n+            ),\n+        }\n+    }\n+}\n+\n+impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for OpaqueTypeCollector<'tcx> {\n+    type BreakTy = ErrorGuaranteed;\n+\n+    #[instrument(skip(self), ret, level = \"trace\")]\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<ErrorGuaranteed> {\n+        match t.kind() {\n+            ty::Alias(AliasKind::Opaque, alias_ty) if alias_ty.def_id.is_local() => {\n+                if !self.seen.insert(alias_ty.def_id.expect_local()) {\n+                    return ControlFlow::Continue(());\n+                }\n+                match self.tcx.uses_unique_generic_params(alias_ty.substs, CheckRegions::Bound) {\n+                    Ok(()) => {\n+                        // FIXME: implement higher kinded lifetime bounds on nested opaque types. They are not\n+                        // supported at all, so this is sound to do, but once we want to support them, you'll\n+                        // start seeing the error below.\n+\n+                        self.opaques.push(alias_ty.def_id.expect_local());\n+\n+                        // Collect opaque types nested within the associated type bounds of this opaque type.\n+                        for (pred, _span) in self\n+                            .tcx\n+                            .explicit_item_bounds(alias_ty.def_id)\n+                            .subst_iter_copied(self.tcx, alias_ty.substs)\n+                        {\n+                            trace!(?pred);\n+                            pred.visit_with(self)?;\n+                        }\n+\n+                        ControlFlow::Continue(())\n+                    }\n+                    Err(NotUniqueParam::NotParam(arg)) => {\n+                        let err = self.tcx.sess.emit_err(NotParam {\n+                            arg,\n+                            span: self.span(),\n+                            opaque_span: self.tcx.def_span(alias_ty.def_id),\n+                        });\n+                        ControlFlow::Break(err)\n+                    }\n+                    Err(NotUniqueParam::DuplicateParam(arg)) => {\n+                        let err = self.tcx.sess.emit_err(DuplicateArg {\n+                            arg,\n+                            span: self.span(),\n+                            opaque_span: self.tcx.def_span(alias_ty.def_id),\n+                        });\n+                        ControlFlow::Break(err)\n+                    }\n+                }\n+            }\n+            ty::Alias(AliasKind::Projection, alias_ty) => {\n+                if let Some(parent) = self.parent() {\n+                    trace!(?alias_ty);\n+                    let (trait_ref, own_substs) = alias_ty.trait_ref_and_own_substs(self.tcx);\n+\n+                    trace!(?trait_ref, ?own_substs);\n+                    // This avoids having to do normalization of `Self::AssocTy` by only\n+                    // supporting the case of a method defining opaque types from assoc types\n+                    // in the same impl block.\n+                    if trait_ref.self_ty() == self.tcx.type_of(parent).subst_identity() {\n+                        for assoc in self.tcx.associated_items(parent).in_definition_order() {\n+                            trace!(?assoc);\n+                            if assoc.trait_item_def_id == Some(alias_ty.def_id) {\n+                                // We reconstruct the generic args of the associated type within the impl\n+                                // from the impl's generics and the generic args passed to the type via the\n+                                // projection.\n+                                let substs = ty::InternalSubsts::identity_for_item(\n+                                    self.tcx,\n+                                    parent.to_def_id(),\n+                                );\n+                                trace!(?substs);\n+                                let substs: Vec<_> =\n+                                    substs.iter().chain(own_substs.iter().copied()).collect();\n+                                trace!(?substs);\n+                                // Find opaque types in this associated type.\n+                                return self\n+                                    .tcx\n+                                    .type_of(assoc.def_id)\n+                                    .subst(self.tcx, &substs)\n+                                    .visit_with(self);\n+                            }\n+                        }\n+                    }\n+                }\n+                t.super_visit_with(self)\n+            }\n+            _ => t.super_visit_with(self),\n+        }\n+    }\n+}\n+\n+fn opaque_types_defined_by<'tcx>(tcx: TyCtxt<'tcx>, item: LocalDefId) -> &'tcx [LocalDefId] {\n+    let kind = tcx.def_kind(item);\n+    trace!(?kind);\n+    // FIXME(type_alias_impl_trait): This is definitely still wrong except for RPIT and impl trait in assoc types.\n+    match kind {\n+        // We're also doing this for `AssocTy` for the wf checks in `check_opaque_meets_bounds`\n+        DefKind::Fn | DefKind::AssocFn | DefKind::AssocTy | DefKind::AssocConst => {\n+            let defined_opaques = match kind {\n+                DefKind::Fn => {\n+                    OpaqueTypeCollector::collect(tcx, item, tcx.fn_sig(item).subst_identity())\n+                }\n+                DefKind::AssocFn => {\n+                    OpaqueTypeCollector::collect(tcx, item, tcx.fn_sig(item).subst_identity())\n+                }\n+                DefKind::AssocTy | DefKind::AssocConst => OpaqueTypeCollector::collect(\n+                    tcx,\n+                    item,\n+                    ty::Binder::dummy(tcx.type_of(item).subst_identity()),\n+                ),\n+                _ => unreachable!(),\n+            };\n+            tcx.arena.alloc_from_iter(defined_opaques)\n+        }\n+        DefKind::Mod\n+        | DefKind::Struct\n+        | DefKind::Union\n+        | DefKind::Enum\n+        | DefKind::Variant\n+        | DefKind::Trait\n+        | DefKind::TyAlias\n+        | DefKind::ForeignTy\n+        | DefKind::TraitAlias\n+        | DefKind::TyParam\n+        | DefKind::Const\n+        | DefKind::ConstParam\n+        | DefKind::Static(_)\n+        | DefKind::Ctor(_, _)\n+        | DefKind::Macro(_)\n+        | DefKind::ExternCrate\n+        | DefKind::Use\n+        | DefKind::ForeignMod\n+        | DefKind::AnonConst\n+        | DefKind::InlineConst\n+        | DefKind::OpaqueTy\n+        | DefKind::ImplTraitPlaceholder\n+        | DefKind::Field\n+        | DefKind::LifetimeParam\n+        | DefKind::GlobalAsm\n+        | DefKind::Impl { .. }\n+        | DefKind::Closure\n+        | DefKind::Generator => &[],\n+    }\n+}\n+\n+pub(super) fn provide(providers: &mut ty::query::Providers) {\n+    *providers = ty::query::Providers { opaque_types_defined_by, ..*providers };\n+}"}, {"sha": "01606086fca681e51b45e9eb74f8f2c5fa906466", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -766,24 +766,19 @@ impl<T: ?Sized> !Sync for *mut T {}\n ///\n /// ## Ownership and the drop check\n ///\n-/// Adding a field of type `PhantomData<T>` indicates that your\n-/// type owns data of type `T`. This in turn implies that when your\n-/// type is dropped, it may drop one or more instances of the type\n-/// `T`. This has bearing on the Rust compiler's [drop check]\n-/// analysis.\n+/// The exact interaction of `PhantomData` with drop check **may change in the future**.\n ///\n-/// If your struct does not in fact *own* the data of type `T`, it is\n-/// better to use a reference type, like `PhantomData<&'a T>`\n-/// (ideally) or `PhantomData<*const T>` (if no lifetime applies), so\n-/// as not to indicate ownership.\n+/// Currently, adding a field of type `PhantomData<T>` indicates that your type *owns* data of type\n+/// `T` in very rare circumstances. This in turn has effects on the Rust compiler's [drop check]\n+/// analysis. For the exact rules, see the [drop check] documentation.\n ///\n /// ## Layout\n ///\n /// For all `T`, the following are guaranteed:\n /// * `size_of::<PhantomData<T>>() == 0`\n /// * `align_of::<PhantomData<T>>() == 1`\n ///\n-/// [drop check]: ../../nomicon/dropck.html\n+/// [drop check]: Drop#drop-check\n #[lang = \"phantom_data\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct PhantomData<T: ?Sized>;"}, {"sha": "289305253ecc1f0f30a024136a4f739b81cce46d", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -968,6 +968,7 @@ pub const fn replace<T>(dest: &mut T, src: T) -> T {\n /// Integers and other types implementing [`Copy`] are unaffected by `drop`.\n ///\n /// ```\n+/// # #![cfg_attr(not(bootstrap), allow(drop_copy))]\n /// #[derive(Copy, Clone)]\n /// struct Foo(u8);\n ///"}, {"sha": "9ebf426be95135ad22711a64e1f7ed231f4329a3", "filename": "library/core/src/ops/drop.rs", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/library%2Fcore%2Fsrc%2Fops%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/library%2Fcore%2Fsrc%2Fops%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fdrop.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -132,6 +132,74 @@\n /// are `Copy` get implicitly duplicated by the compiler, making it very\n /// hard to predict when, and how often destructors will be executed. As such,\n /// these types cannot have destructors.\n+///\n+/// ## Drop check\n+///\n+/// Dropping interacts with the borrow checker in subtle ways: when a type `T` is being implicitly\n+/// dropped as some variable of this type goes out of scope, the borrow checker needs to ensure that\n+/// calling `T`'s destructor at this moment is safe. In particular, it also needs to be safe to\n+/// recursively drop all the fields of `T`. For example, it is crucial that code like the following\n+/// is being rejected:\n+///\n+/// ```compile_fail,E0597\n+/// use std::cell::Cell;\n+///\n+/// struct S<'a>(Cell<Option<&'a S<'a>>>, Box<i32>);\n+/// impl Drop for S<'_> {\n+///     fn drop(&mut self) {\n+///         if let Some(r) = self.0.get() {\n+///             // Print the contents of the `Box` in `r`.\n+///             println!(\"{}\", r.1);\n+///         }\n+///     }\n+/// }\n+///\n+/// fn main() {\n+///     // Set up two `S` that point to each other.\n+///     let s1 = S(Cell::new(None), Box::new(42));\n+///     let s2 = S(Cell::new(Some(&s1)), Box::new(42));\n+///     s1.0.set(Some(&s2));\n+///     // Now they both get dropped. But whichever is the 2nd one\n+///     // to be dropped will access the `Box` in the first one,\n+///     // which is a use-after-free!\n+/// }\n+/// ```\n+///\n+/// The Nomicon discusses the need for [drop check in more detail][drop check].\n+///\n+/// To reject such code, the \"drop check\" analysis determines which types and lifetimes need to\n+/// still be live when `T` gets dropped. The exact details of this analysis are not yet\n+/// stably guaranteed and **subject to change**. Currently, the analysis works as follows:\n+/// - If `T` has no drop glue, then trivially nothing is required to be live. This is the case if\n+///   neither `T` nor any of its (recursive) fields have a destructor (`impl Drop`). [`PhantomData`]\n+///   and [`ManuallyDrop`] are considered to never have a destructor, no matter their field type.\n+/// - If `T` has drop glue, then, for all types `U` that are *owned* by any field of `T`,\n+///   recursively add the types and lifetimes that need to be live when `U` gets dropped. The set of\n+///   owned types is determined by recursively traversing `T`:\n+///   - Recursively descend through `PhantomData`, `Box`, tuples, and arrays (including arrays of\n+///     length 0).\n+///   - Stop at reference and raw pointer types as well as function pointers and function items;\n+///     they do not own anything.\n+///   - Stop at non-composite types (type parameters that remain generic in the current context and\n+///     base types such as integers and `bool`); these types are owned.\n+///   - When hitting an ADT with `impl Drop`, stop there; this type is owned.\n+///   - When hitting an ADT without `impl Drop`, recursively descend to its fields. (For an `enum`,\n+///     consider all fields of all variants.)\n+/// - Furthermore, if `T` implements `Drop`, then all generic (lifetime and type) parameters of `T`\n+///   must be live.\n+///\n+/// In the above example, the last clause implies that `'a` must be live when `S<'a>` is dropped,\n+/// and hence the example is rejected. If we remove the `impl Drop`, the liveness requirement\n+/// disappears and the example is accepted.\n+///\n+/// There exists an unstable way for a type to opt-out of the last clause; this is called \"drop\n+/// check eyepatch\" or `may_dangle`. For more details on this nightly-only feature, see the\n+/// [discussion in the Nomicon][nomicon].\n+///\n+/// [`ManuallyDrop`]: crate::mem::ManuallyDrop\n+/// [`PhantomData`]: crate::marker::PhantomData\n+/// [drop check]: ../../nomicon/dropck.html\n+/// [nomicon]: ../../nomicon/phantom-data.html#an-exception-the-special-case-of-the-standard-library-and-its-unstable-may_dangle\n #[lang = \"drop\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[const_trait]"}, {"sha": "5369fe0a9a9aa124ec45e965f253aebec7fb3e30", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -90,8 +90,6 @@ impl<'a, T> Iter<'a, T> {\n         let ptr = slice.as_ptr();\n         // SAFETY: Similar to `IterMut::new`.\n         unsafe {\n-            assume(!ptr.is_null());\n-\n             let end = if T::IS_ZST { invalid(slice.len()) } else { ptr.add(slice.len()) };\n \n             Self { ptr: NonNull::new_unchecked(ptr as *mut T), end, _marker: PhantomData }\n@@ -228,8 +226,6 @@ impl<'a, T> IterMut<'a, T> {\n         // See the `next_unchecked!` and `is_empty!` macros as well as the\n         // `post_inc_start` method for more information.\n         unsafe {\n-            assume(!ptr.is_null());\n-\n             let end = if T::IS_ZST { invalid_mut(slice.len()) } else { ptr.add(slice.len()) };\n \n             Self { ptr: NonNull::new_unchecked(ptr), end, _marker: PhantomData }"}, {"sha": "5283a576d1b21a83a964592e599dc582dc06f8d9", "filename": "library/core/src/task/poll.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -116,7 +116,7 @@ impl<T> Poll<T> {\n     ///     let fut = Pin::new(&mut fut);\n     ///\n     ///     let num = fut.poll(cx).ready()?;\n-    ///     # drop(num);\n+    ///     # let _ = num; // to silence unused warning\n     ///     // ... use num\n     ///\n     ///     Poll::Ready(())"}, {"sha": "8d12625e88d0cff183aaf0b087b2ce76736139d4", "filename": "library/core/src/task/ready.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/library%2Fcore%2Fsrc%2Ftask%2Fready.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/library%2Fcore%2Fsrc%2Ftask%2Fready.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fready.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -22,7 +22,7 @@ use core::task::Poll;\n ///     let fut = Pin::new(&mut fut);\n ///\n ///     let num = ready!(fut.poll(cx));\n-///     # drop(num);\n+///     # let _ = num;\n ///     // ... use num\n ///\n ///     Poll::Ready(())\n@@ -44,7 +44,7 @@ use core::task::Poll;\n ///     Poll::Ready(t) => t,\n ///     Poll::Pending => return Poll::Pending,\n /// };\n-///     # drop(num);\n+///     # let _ = num; // to silence unused warning\n ///     # // ... use num\n ///     #\n ///     # Poll::Ready(())"}, {"sha": "6d59266b6f838dd5304c7b28c3e95dce2bb38544", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -541,7 +541,7 @@ pub fn begin_panic_handler(info: &PanicInfo<'_>) -> ! {\n             // Lazily, the first time this gets called, run the actual string formatting.\n             self.string.get_or_insert_with(|| {\n                 let mut s = String::new();\n-                drop(s.write_fmt(*inner));\n+                let _err = s.write_fmt(*inner);\n                 s\n             })\n         }"}, {"sha": "5e1d859ee99c3dff556172da35c9e7c62fb060d8", "filename": "library/std/src/sys/sgx/waitqueue/mod.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fwaitqueue%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fwaitqueue%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fwaitqueue%2Fmod.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -202,12 +202,18 @@ impl WaitQueue {\n     pub fn notify_one<T>(\n         mut guard: SpinMutexGuard<'_, WaitVariable<T>>,\n     ) -> Result<WaitGuard<'_, T>, SpinMutexGuard<'_, WaitVariable<T>>> {\n+        // SAFETY: lifetime of the pop() return value is limited to the map\n+        // closure (The closure return value is 'static). The underlying\n+        // stack frame won't be freed until after the WaitGuard created below\n+        // is dropped.\n         unsafe {\n-            if let Some(entry) = guard.queue.inner.pop() {\n+            let tcs = guard.queue.inner.pop().map(|entry| -> Tcs {\n                 let mut entry_guard = entry.lock();\n-                let tcs = entry_guard.tcs;\n                 entry_guard.wake = true;\n-                drop(entry);\n+                entry_guard.tcs\n+            });\n+\n+            if let Some(tcs) = tcs {\n                 Ok(WaitGuard { mutex_guard: Some(guard), notified_tcs: NotifiedTcs::Single(tcs) })\n             } else {\n                 Err(guard)\n@@ -223,13 +229,17 @@ impl WaitQueue {\n     pub fn notify_all<T>(\n         mut guard: SpinMutexGuard<'_, WaitVariable<T>>,\n     ) -> Result<WaitGuard<'_, T>, SpinMutexGuard<'_, WaitVariable<T>>> {\n+        // SAFETY: lifetime of the pop() return values are limited to the\n+        // while loop body. The underlying stack frames won't be freed until\n+        // after the WaitGuard created below is dropped.\n         unsafe {\n             let mut count = 0;\n             while let Some(entry) = guard.queue.inner.pop() {\n                 count += 1;\n                 let mut entry_guard = entry.lock();\n                 entry_guard.wake = true;\n             }\n+\n             if let Some(count) = NonZeroUsize::new(count) {\n                 Ok(WaitGuard { mutex_guard: Some(guard), notified_tcs: NotifiedTcs::All { count } })\n             } else {"}, {"sha": "09db5b11dbfd32be6ae3afcd0fe4eb8361ea50c0", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1210,7 +1210,7 @@ impl File {\n                 // Redox doesn't appear to support `UTIME_OMIT`.\n                 // ESP-IDF and HorizonOS do not support `futimens` at all and the behavior for those OS is therefore\n                 // the same as for Redox.\n-                drop(times);\n+                let _ = times;\n                 Err(io::const_io_error!(\n                     io::ErrorKind::Unsupported,\n                     \"setting file times not supported\","}, {"sha": "b65e2572cc5e4b656f27bb623a1774f73e8d64b1", "filename": "library/std/src/thread/tests.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/library%2Fstd%2Fsrc%2Fthread%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/library%2Fstd%2Fsrc%2Fthread%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Ftests.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -375,7 +375,9 @@ fn test_scoped_threads_nll() {\n     // this is mostly a *compilation test* for this exact function:\n     fn foo(x: &u8) {\n         thread::scope(|s| {\n-            s.spawn(|| drop(x));\n+            s.spawn(|| match x {\n+                _ => (),\n+            });\n         });\n     }\n     // let's also run it for good measure"}, {"sha": "ff13daa6db4572eda0008ded02ca9f4b806d51f6", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -455,7 +455,8 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             | hir::ItemKind::Union(..)\n             | hir::ItemKind::TyAlias(..)\n             | hir::ItemKind::OpaqueTy(hir::OpaqueTy {\n-                origin: hir::OpaqueTyOrigin::TyAlias, ..\n+                origin: hir::OpaqueTyOrigin::TyAlias { .. },\n+                ..\n             })\n             | hir::ItemKind::Static(..)\n             | hir::ItemKind::Trait(..)"}, {"sha": "04993e4928799b41b64c14a0eb35849a581519f1", "filename": "src/tools/clippy/clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -132,12 +132,8 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::doc::NEEDLESS_DOCTEST_MAIN_INFO,\n     crate::doc::UNNECESSARY_SAFETY_DOC_INFO,\n     crate::double_parens::DOUBLE_PARENS_INFO,\n-    crate::drop_forget_ref::DROP_COPY_INFO,\n     crate::drop_forget_ref::DROP_NON_DROP_INFO,\n-    crate::drop_forget_ref::DROP_REF_INFO,\n-    crate::drop_forget_ref::FORGET_COPY_INFO,\n     crate::drop_forget_ref::FORGET_NON_DROP_INFO,\n-    crate::drop_forget_ref::FORGET_REF_INFO,\n     crate::drop_forget_ref::UNDROPPED_MANUALLY_DROPS_INFO,\n     crate::duplicate_mod::DUPLICATE_MOD_INFO,\n     crate::else_if_without_else::ELSE_IF_WITHOUT_ELSE_INFO,"}, {"sha": "b2f7d026cc8b24a00cea5c932b21beae676bc919", "filename": "src/tools/clippy/clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 5, "deletions": 112, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -7,102 +7,6 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for calls to `std::mem::drop` with a reference\n-    /// instead of an owned value.\n-    ///\n-    /// ### Why is this bad?\n-    /// Calling `drop` on a reference will only drop the\n-    /// reference itself, which is a no-op. It will not call the `drop` method (from\n-    /// the `Drop` trait implementation) on the underlying referenced value, which\n-    /// is likely what was intended.\n-    ///\n-    /// ### Example\n-    /// ```ignore\n-    /// let mut lock_guard = mutex.lock();\n-    /// std::mem::drop(&lock_guard) // Should have been drop(lock_guard), mutex\n-    /// // still locked\n-    /// operation_that_requires_mutex_to_be_unlocked();\n-    /// ```\n-    #[clippy::version = \"pre 1.29.0\"]\n-    pub DROP_REF,\n-    correctness,\n-    \"calls to `std::mem::drop` with a reference instead of an owned value\"\n-}\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for calls to `std::mem::forget` with a reference\n-    /// instead of an owned value.\n-    ///\n-    /// ### Why is this bad?\n-    /// Calling `forget` on a reference will only forget the\n-    /// reference itself, which is a no-op. It will not forget the underlying\n-    /// referenced\n-    /// value, which is likely what was intended.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// let x = Box::new(1);\n-    /// std::mem::forget(&x) // Should have been forget(x), x will still be dropped\n-    /// ```\n-    #[clippy::version = \"pre 1.29.0\"]\n-    pub FORGET_REF,\n-    correctness,\n-    \"calls to `std::mem::forget` with a reference instead of an owned value\"\n-}\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for calls to `std::mem::drop` with a value\n-    /// that derives the Copy trait\n-    ///\n-    /// ### Why is this bad?\n-    /// Calling `std::mem::drop` [does nothing for types that\n-    /// implement Copy](https://doc.rust-lang.org/std/mem/fn.drop.html), since the\n-    /// value will be copied and moved into the function on invocation.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// let x: i32 = 42; // i32 implements Copy\n-    /// std::mem::drop(x) // A copy of x is passed to the function, leaving the\n-    ///                   // original unaffected\n-    /// ```\n-    #[clippy::version = \"pre 1.29.0\"]\n-    pub DROP_COPY,\n-    correctness,\n-    \"calls to `std::mem::drop` with a value that implements Copy\"\n-}\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for calls to `std::mem::forget` with a value that\n-    /// derives the Copy trait\n-    ///\n-    /// ### Why is this bad?\n-    /// Calling `std::mem::forget` [does nothing for types that\n-    /// implement Copy](https://doc.rust-lang.org/std/mem/fn.drop.html) since the\n-    /// value will be copied and moved into the function on invocation.\n-    ///\n-    /// An alternative, but also valid, explanation is that Copy types do not\n-    /// implement\n-    /// the Drop trait, which means they have no destructors. Without a destructor,\n-    /// there\n-    /// is nothing for `std::mem::forget` to ignore.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// let x: i32 = 42; // i32 implements Copy\n-    /// std::mem::forget(x) // A copy of x is passed to the function, leaving the\n-    ///                     // original unaffected\n-    /// ```\n-    #[clippy::version = \"pre 1.29.0\"]\n-    pub FORGET_COPY,\n-    correctness,\n-    \"calls to `std::mem::forget` with a value that implements Copy\"\n-}\n-\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for calls to `std::mem::drop` with a value that does not implement `Drop`.\n@@ -172,24 +76,12 @@ declare_clippy_lint! {\n     \"use of safe `std::mem::drop` function to drop a std::mem::ManuallyDrop, which will not drop the inner value\"\n }\n \n-const DROP_REF_SUMMARY: &str = \"calls to `std::mem::drop` with a reference instead of an owned value. \\\n-                                Dropping a reference does nothing\";\n-const FORGET_REF_SUMMARY: &str = \"calls to `std::mem::forget` with a reference instead of an owned value. \\\n-                                  Forgetting a reference does nothing\";\n-const DROP_COPY_SUMMARY: &str = \"calls to `std::mem::drop` with a value that implements `Copy`. \\\n-                                 Dropping a copy leaves the original intact\";\n-const FORGET_COPY_SUMMARY: &str = \"calls to `std::mem::forget` with a value that implements `Copy`. \\\n-                                   Forgetting a copy leaves the original intact\";\n const DROP_NON_DROP_SUMMARY: &str = \"call to `std::mem::drop` with a value that does not implement `Drop`. \\\n                                  Dropping such a type only extends its contained lifetimes\";\n const FORGET_NON_DROP_SUMMARY: &str = \"call to `std::mem::forget` with a value that does not implement `Drop`. \\\n                                    Forgetting such a type is the same as dropping it\";\n \n declare_lint_pass!(DropForgetRef => [\n-    DROP_REF,\n-    FORGET_REF,\n-    DROP_COPY,\n-    FORGET_COPY,\n     DROP_NON_DROP,\n     FORGET_NON_DROP,\n     UNDROPPED_MANUALLY_DROPS\n@@ -206,10 +98,11 @@ impl<'tcx> LateLintPass<'tcx> for DropForgetRef {\n             let is_copy = is_copy(cx, arg_ty);\n             let drop_is_single_call_in_arm = is_single_call_in_arm(cx, arg, expr);\n             let (lint, msg) = match fn_name {\n-                sym::mem_drop if arg_ty.is_ref() && !drop_is_single_call_in_arm => (DROP_REF, DROP_REF_SUMMARY),\n-                sym::mem_forget if arg_ty.is_ref() => (FORGET_REF, FORGET_REF_SUMMARY),\n-                sym::mem_drop if is_copy && !drop_is_single_call_in_arm => (DROP_COPY, DROP_COPY_SUMMARY),\n-                sym::mem_forget if is_copy => (FORGET_COPY, FORGET_COPY_SUMMARY),\n+                // early return for uplifted lints: drop_ref, drop_copy, forget_ref, forget_copy\n+                sym::mem_drop if arg_ty.is_ref() && !drop_is_single_call_in_arm => return,\n+                sym::mem_forget if arg_ty.is_ref() => return,\n+                sym::mem_drop if is_copy && !drop_is_single_call_in_arm => return,\n+                sym::mem_forget if is_copy => return,\n                 sym::mem_drop if is_type_lang_item(cx, arg_ty, LangItem::ManuallyDrop) => {\n                     span_lint_and_help(\n                         cx,"}, {"sha": "52e22c0c6303c22a8b010d5924ebb72124acc242", "filename": "src/tools/clippy/clippy_lints/src/renamed_lints.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -32,9 +32,13 @@ pub static RENAMED_LINTS: &[(&str, &str)] = &[\n     (\"clippy::zero_width_space\", \"clippy::invisible_characters\"),\n     (\"clippy::clone_double_ref\", \"suspicious_double_ref_op\"),\n     (\"clippy::drop_bounds\", \"drop_bounds\"),\n+    (\"clippy::drop_copy\", \"drop_copy\"),\n+    (\"clippy::drop_ref\", \"drop_ref\"),\n     (\"clippy::for_loop_over_option\", \"for_loops_over_fallibles\"),\n     (\"clippy::for_loop_over_result\", \"for_loops_over_fallibles\"),\n     (\"clippy::for_loops_over_fallibles\", \"for_loops_over_fallibles\"),\n+    (\"clippy::forget_copy\", \"forget_copy\"),\n+    (\"clippy::forget_ref\", \"forget_ref\"),\n     (\"clippy::into_iter_on_array\", \"array_into_iter\"),\n     (\"clippy::invalid_atomic_ordering\", \"invalid_atomic_ordering\"),\n     (\"clippy::invalid_ref\", \"invalid_value\"),"}, {"sha": "a7276dd59f4343d2e345a7c4ea54e6ce3d2b6172", "filename": "src/tools/clippy/tests/ui/drop_forget_copy.rs", "status": "removed", "additions": 0, "deletions": 86, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/25c545114a1bc08b7b18b1a65266aae255ff2094/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_forget_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25c545114a1bc08b7b18b1a65266aae255ff2094/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_forget_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_forget_copy.rs?ref=25c545114a1bc08b7b18b1a65266aae255ff2094", "patch": "@@ -1,86 +0,0 @@\n-#![warn(clippy::drop_copy, clippy::forget_copy)]\n-#![allow(clippy::toplevel_ref_arg, clippy::drop_ref, clippy::forget_ref, unused_mut)]\n-\n-use std::mem::{drop, forget};\n-use std::vec::Vec;\n-\n-#[derive(Copy, Clone)]\n-struct SomeStruct;\n-\n-struct AnotherStruct {\n-    x: u8,\n-    y: u8,\n-    z: Vec<u8>,\n-}\n-\n-impl Clone for AnotherStruct {\n-    fn clone(&self) -> AnotherStruct {\n-        AnotherStruct {\n-            x: self.x,\n-            y: self.y,\n-            z: self.z.clone(),\n-        }\n-    }\n-}\n-\n-fn main() {\n-    let s1 = SomeStruct {};\n-    let s2 = s1;\n-    let s3 = &s1;\n-    let mut s4 = s1;\n-    let ref s5 = s1;\n-\n-    drop(s1);\n-    drop(s2);\n-    drop(s3);\n-    drop(s4);\n-    drop(s5);\n-\n-    forget(s1);\n-    forget(s2);\n-    forget(s3);\n-    forget(s4);\n-    forget(s5);\n-\n-    let a1 = AnotherStruct {\n-        x: 255,\n-        y: 0,\n-        z: vec![1, 2, 3],\n-    };\n-    let a2 = &a1;\n-    let mut a3 = a1.clone();\n-    let ref a4 = a1;\n-    let a5 = a1.clone();\n-\n-    drop(a2);\n-    drop(a3);\n-    drop(a4);\n-    drop(a5);\n-\n-    forget(a2);\n-    let a3 = &a1;\n-    forget(a3);\n-    forget(a4);\n-    let a5 = a1.clone();\n-    forget(a5);\n-}\n-\n-#[allow(unused)]\n-#[allow(clippy::unit_cmp)]\n-fn issue9482(x: u8) {\n-    fn println_and<T>(t: T) -> T {\n-        println!(\"foo\");\n-        t\n-    }\n-\n-    match x {\n-        0 => drop(println_and(12)), // Don't lint (copy type), we only care about side-effects\n-        1 => drop(println_and(String::new())), // Don't lint (no copy type), we only care about side-effects\n-        2 => {\n-            drop(println_and(13)); // Lint, even if we only care about the side-effect, it's already in a block\n-        },\n-        3 if drop(println_and(14)) == () => (), // Lint, idiomatic use is only in body of `Arm`\n-        4 => drop(2),                           // Lint, not a fn/method call\n-        _ => (),\n-    }\n-}"}, {"sha": "90bef1c3c439f76d334e209619d160b5ac0e8ad5", "filename": "src/tools/clippy/tests/ui/drop_forget_copy.stderr", "status": "removed", "additions": 0, "deletions": 112, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/25c545114a1bc08b7b18b1a65266aae255ff2094/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_forget_copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25c545114a1bc08b7b18b1a65266aae255ff2094/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_forget_copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_forget_copy.stderr?ref=25c545114a1bc08b7b18b1a65266aae255ff2094", "patch": "@@ -1,112 +0,0 @@\n-error: calls to `std::mem::drop` with a value that implements `Copy`. Dropping a copy leaves the original intact\n-  --> $DIR/drop_forget_copy.rs:33:5\n-   |\n-LL |     drop(s1);\n-   |     ^^^^^^^^\n-   |\n-note: argument has type `SomeStruct`\n-  --> $DIR/drop_forget_copy.rs:33:10\n-   |\n-LL |     drop(s1);\n-   |          ^^\n-   = note: `-D clippy::drop-copy` implied by `-D warnings`\n-\n-error: calls to `std::mem::drop` with a value that implements `Copy`. Dropping a copy leaves the original intact\n-  --> $DIR/drop_forget_copy.rs:34:5\n-   |\n-LL |     drop(s2);\n-   |     ^^^^^^^^\n-   |\n-note: argument has type `SomeStruct`\n-  --> $DIR/drop_forget_copy.rs:34:10\n-   |\n-LL |     drop(s2);\n-   |          ^^\n-\n-error: calls to `std::mem::drop` with a value that implements `Copy`. Dropping a copy leaves the original intact\n-  --> $DIR/drop_forget_copy.rs:36:5\n-   |\n-LL |     drop(s4);\n-   |     ^^^^^^^^\n-   |\n-note: argument has type `SomeStruct`\n-  --> $DIR/drop_forget_copy.rs:36:10\n-   |\n-LL |     drop(s4);\n-   |          ^^\n-\n-error: calls to `std::mem::forget` with a value that implements `Copy`. Forgetting a copy leaves the original intact\n-  --> $DIR/drop_forget_copy.rs:39:5\n-   |\n-LL |     forget(s1);\n-   |     ^^^^^^^^^^\n-   |\n-note: argument has type `SomeStruct`\n-  --> $DIR/drop_forget_copy.rs:39:12\n-   |\n-LL |     forget(s1);\n-   |            ^^\n-   = note: `-D clippy::forget-copy` implied by `-D warnings`\n-\n-error: calls to `std::mem::forget` with a value that implements `Copy`. Forgetting a copy leaves the original intact\n-  --> $DIR/drop_forget_copy.rs:40:5\n-   |\n-LL |     forget(s2);\n-   |     ^^^^^^^^^^\n-   |\n-note: argument has type `SomeStruct`\n-  --> $DIR/drop_forget_copy.rs:40:12\n-   |\n-LL |     forget(s2);\n-   |            ^^\n-\n-error: calls to `std::mem::forget` with a value that implements `Copy`. Forgetting a copy leaves the original intact\n-  --> $DIR/drop_forget_copy.rs:42:5\n-   |\n-LL |     forget(s4);\n-   |     ^^^^^^^^^^\n-   |\n-note: argument has type `SomeStruct`\n-  --> $DIR/drop_forget_copy.rs:42:12\n-   |\n-LL |     forget(s4);\n-   |            ^^\n-\n-error: calls to `std::mem::drop` with a value that implements `Copy`. Dropping a copy leaves the original intact\n-  --> $DIR/drop_forget_copy.rs:80:13\n-   |\n-LL |             drop(println_and(13)); // Lint, even if we only care about the side-effect, it's already in a block\n-   |             ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `i32`\n-  --> $DIR/drop_forget_copy.rs:80:18\n-   |\n-LL |             drop(println_and(13)); // Lint, even if we only care about the side-effect, it's already in a block\n-   |                  ^^^^^^^^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a value that implements `Copy`. Dropping a copy leaves the original intact\n-  --> $DIR/drop_forget_copy.rs:82:14\n-   |\n-LL |         3 if drop(println_and(14)) == () => (), // Lint, idiomatic use is only in body of `Arm`\n-   |              ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `i32`\n-  --> $DIR/drop_forget_copy.rs:82:19\n-   |\n-LL |         3 if drop(println_and(14)) == () => (), // Lint, idiomatic use is only in body of `Arm`\n-   |                   ^^^^^^^^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a value that implements `Copy`. Dropping a copy leaves the original intact\n-  --> $DIR/drop_forget_copy.rs:83:14\n-   |\n-LL |         4 => drop(2),                           // Lint, not a fn/method call\n-   |              ^^^^^^^\n-   |\n-note: argument has type `i32`\n-  --> $DIR/drop_forget_copy.rs:83:19\n-   |\n-LL |         4 => drop(2),                           // Lint, not a fn/method call\n-   |                   ^\n-\n-error: aborting due to 9 previous errors\n-"}, {"sha": "293b9f6de832dc5ca5f2f3d5a1eefb67d79f3195", "filename": "src/tools/clippy/tests/ui/drop_ref.stderr", "status": "removed", "additions": 0, "deletions": 147, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/25c545114a1bc08b7b18b1a65266aae255ff2094/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25c545114a1bc08b7b18b1a65266aae255ff2094/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_ref.stderr?ref=25c545114a1bc08b7b18b1a65266aae255ff2094", "patch": "@@ -1,147 +0,0 @@\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:11:5\n-   |\n-LL |     drop(&SomeStruct);\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:11:10\n-   |\n-LL |     drop(&SomeStruct);\n-   |          ^^^^^^^^^^^\n-   = note: `-D clippy::drop-ref` implied by `-D warnings`\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:14:5\n-   |\n-LL |     drop(&owned1);\n-   |     ^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:14:10\n-   |\n-LL |     drop(&owned1);\n-   |          ^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:15:5\n-   |\n-LL |     drop(&&owned1);\n-   |     ^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&&SomeStruct`\n-  --> $DIR/drop_ref.rs:15:10\n-   |\n-LL |     drop(&&owned1);\n-   |          ^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:16:5\n-   |\n-LL |     drop(&mut owned1);\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&mut SomeStruct`\n-  --> $DIR/drop_ref.rs:16:10\n-   |\n-LL |     drop(&mut owned1);\n-   |          ^^^^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:20:5\n-   |\n-LL |     drop(reference1);\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:20:10\n-   |\n-LL |     drop(reference1);\n-   |          ^^^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:23:5\n-   |\n-LL |     drop(reference2);\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&mut SomeStruct`\n-  --> $DIR/drop_ref.rs:23:10\n-   |\n-LL |     drop(reference2);\n-   |          ^^^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:26:5\n-   |\n-LL |     drop(reference3);\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:26:10\n-   |\n-LL |     drop(reference3);\n-   |          ^^^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:31:5\n-   |\n-LL |     drop(&val);\n-   |     ^^^^^^^^^^\n-   |\n-note: argument has type `&T`\n-  --> $DIR/drop_ref.rs:31:10\n-   |\n-LL |     drop(&val);\n-   |          ^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:39:5\n-   |\n-LL |     std::mem::drop(&SomeStruct);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:39:20\n-   |\n-LL |     std::mem::drop(&SomeStruct);\n-   |                    ^^^^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:91:13\n-   |\n-LL |             drop(println_and(&13)); // Lint, even if we only care about the side-effect, it's already in a block\n-   |             ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&i32`\n-  --> $DIR/drop_ref.rs:91:18\n-   |\n-LL |             drop(println_and(&13)); // Lint, even if we only care about the side-effect, it's already in a block\n-   |                  ^^^^^^^^^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:93:14\n-   |\n-LL |         3 if drop(println_and(&14)) == () => (), // Lint, idiomatic use is only in body of `Arm`\n-   |              ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&i32`\n-  --> $DIR/drop_ref.rs:93:19\n-   |\n-LL |         3 if drop(println_and(&14)) == () => (), // Lint, idiomatic use is only in body of `Arm`\n-   |                   ^^^^^^^^^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:94:14\n-   |\n-LL |         4 => drop(&2),                           // Lint, not a fn/method call\n-   |              ^^^^^^^^\n-   |\n-note: argument has type `&i32`\n-  --> $DIR/drop_ref.rs:94:19\n-   |\n-LL |         4 => drop(&2),                           // Lint, not a fn/method call\n-   |                   ^^\n-\n-error: aborting due to 12 previous errors\n-"}, {"sha": "031b415f56ff6d643554a033f3f06ee6d72b7e78", "filename": "src/tools/clippy/tests/ui/forget_ref.rs", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/25c545114a1bc08b7b18b1a65266aae255ff2094/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fforget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25c545114a1bc08b7b18b1a65266aae255ff2094/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fforget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fforget_ref.rs?ref=25c545114a1bc08b7b18b1a65266aae255ff2094", "patch": "@@ -1,50 +0,0 @@\n-#![warn(clippy::forget_ref)]\n-#![allow(clippy::toplevel_ref_arg)]\n-#![allow(clippy::unnecessary_wraps, clippy::forget_non_drop)]\n-#![allow(clippy::borrow_deref_ref)]\n-\n-use std::mem::forget;\n-\n-struct SomeStruct;\n-\n-fn main() {\n-    forget(&SomeStruct);\n-\n-    let mut owned = SomeStruct;\n-    forget(&owned);\n-    forget(&&owned);\n-    forget(&mut owned);\n-    forget(owned); //OK\n-\n-    let reference1 = &SomeStruct;\n-    forget(&*reference1);\n-\n-    let reference2 = &mut SomeStruct;\n-    forget(reference2);\n-\n-    let ref reference3 = SomeStruct;\n-    forget(reference3);\n-}\n-\n-#[allow(dead_code)]\n-fn test_generic_fn_forget<T>(val: T) {\n-    forget(&val);\n-    forget(val); //OK\n-}\n-\n-#[allow(dead_code)]\n-fn test_similarly_named_function() {\n-    fn forget<T>(_val: T) {}\n-    forget(&SomeStruct); //OK; call to unrelated function which happens to have the same name\n-    std::mem::forget(&SomeStruct);\n-}\n-\n-#[derive(Copy, Clone)]\n-pub struct Error;\n-fn produce_half_owl_error() -> Result<(), Error> {\n-    Ok(())\n-}\n-\n-fn produce_half_owl_ok() -> Result<bool, ()> {\n-    Ok(true)\n-}"}, {"sha": "011cdefc665f886bc3b6857301f91370d4e2bba8", "filename": "src/tools/clippy/tests/ui/forget_ref.stderr", "status": "removed", "additions": 0, "deletions": 111, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/25c545114a1bc08b7b18b1a65266aae255ff2094/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fforget_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25c545114a1bc08b7b18b1a65266aae255ff2094/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fforget_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fforget_ref.stderr?ref=25c545114a1bc08b7b18b1a65266aae255ff2094", "patch": "@@ -1,111 +0,0 @@\n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:11:5\n-   |\n-LL |     forget(&SomeStruct);\n-   |     ^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:11:12\n-   |\n-LL |     forget(&SomeStruct);\n-   |            ^^^^^^^^^^^\n-   = note: `-D clippy::forget-ref` implied by `-D warnings`\n-\n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:14:5\n-   |\n-LL |     forget(&owned);\n-   |     ^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:14:12\n-   |\n-LL |     forget(&owned);\n-   |            ^^^^^^\n-\n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:15:5\n-   |\n-LL |     forget(&&owned);\n-   |     ^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&&SomeStruct`\n-  --> $DIR/forget_ref.rs:15:12\n-   |\n-LL |     forget(&&owned);\n-   |            ^^^^^^^\n-\n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:16:5\n-   |\n-LL |     forget(&mut owned);\n-   |     ^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&mut SomeStruct`\n-  --> $DIR/forget_ref.rs:16:12\n-   |\n-LL |     forget(&mut owned);\n-   |            ^^^^^^^^^^\n-\n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:20:5\n-   |\n-LL |     forget(&*reference1);\n-   |     ^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:20:12\n-   |\n-LL |     forget(&*reference1);\n-   |            ^^^^^^^^^^^^\n-\n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:23:5\n-   |\n-LL |     forget(reference2);\n-   |     ^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&mut SomeStruct`\n-  --> $DIR/forget_ref.rs:23:12\n-   |\n-LL |     forget(reference2);\n-   |            ^^^^^^^^^^\n-\n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:26:5\n-   |\n-LL |     forget(reference3);\n-   |     ^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:26:12\n-   |\n-LL |     forget(reference3);\n-   |            ^^^^^^^^^^\n-\n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:31:5\n-   |\n-LL |     forget(&val);\n-   |     ^^^^^^^^^^^^\n-   |\n-note: argument has type `&T`\n-  --> $DIR/forget_ref.rs:31:12\n-   |\n-LL |     forget(&val);\n-   |            ^^^^\n-\n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:39:5\n-   |\n-LL |     std::mem::forget(&SomeStruct);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:39:22\n-   |\n-LL |     std::mem::forget(&SomeStruct);\n-   |                      ^^^^^^^^^^^\n-\n-error: aborting due to 9 previous errors\n-"}, {"sha": "5137448a6d4babcbc7ec7c3391d885700c3d52bd", "filename": "src/tools/clippy/tests/ui/mem_forget.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmem_forget.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -5,7 +5,7 @@ use std::mem as memstuff;\n use std::mem::forget as forgetSomething;\n \n #[warn(clippy::mem_forget)]\n-#[allow(clippy::forget_copy)]\n+#[allow(forget_copy)]\n fn main() {\n     let five: i32 = 5;\n     forgetSomething(five);"}, {"sha": "f28153e56b0fe732a4354352d73a2ae9c2241655", "filename": "src/tools/clippy/tests/ui/multiple_unsafe_ops_per_block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmultiple_unsafe_ops_per_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmultiple_unsafe_ops_per_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmultiple_unsafe_ops_per_block.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -2,7 +2,7 @@\n #![allow(unused)]\n #![allow(deref_nullptr)]\n #![allow(clippy::unnecessary_operation)]\n-#![allow(clippy::drop_copy)]\n+#![allow(drop_copy)]\n #![warn(clippy::multiple_unsafe_ops_per_block)]\n \n extern crate proc_macros;"}, {"sha": "9036f89261288ffb1f35a9634ba67b3ca0007798", "filename": "src/tools/clippy/tests/ui/rename.fixed", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -29,7 +29,11 @@\n #![allow(clippy::invisible_characters)]\n #![allow(suspicious_double_ref_op)]\n #![allow(drop_bounds)]\n+#![allow(drop_copy)]\n+#![allow(drop_ref)]\n #![allow(for_loops_over_fallibles)]\n+#![allow(forget_copy)]\n+#![allow(forget_ref)]\n #![allow(array_into_iter)]\n #![allow(invalid_atomic_ordering)]\n #![allow(invalid_value)]\n@@ -71,9 +75,13 @@\n #![warn(clippy::invisible_characters)]\n #![warn(suspicious_double_ref_op)]\n #![warn(drop_bounds)]\n+#![warn(drop_copy)]\n+#![warn(drop_ref)]\n #![warn(for_loops_over_fallibles)]\n #![warn(for_loops_over_fallibles)]\n #![warn(for_loops_over_fallibles)]\n+#![warn(forget_copy)]\n+#![warn(forget_ref)]\n #![warn(array_into_iter)]\n #![warn(invalid_atomic_ordering)]\n #![warn(invalid_value)]"}, {"sha": "43cabe810f3447d7825e3d7bb6936c022ac7075b", "filename": "src/tools/clippy/tests/ui/rename.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -29,7 +29,11 @@\n #![allow(clippy::invisible_characters)]\n #![allow(suspicious_double_ref_op)]\n #![allow(drop_bounds)]\n+#![allow(drop_copy)]\n+#![allow(drop_ref)]\n #![allow(for_loops_over_fallibles)]\n+#![allow(forget_copy)]\n+#![allow(forget_ref)]\n #![allow(array_into_iter)]\n #![allow(invalid_atomic_ordering)]\n #![allow(invalid_value)]\n@@ -71,9 +75,13 @@\n #![warn(clippy::zero_width_space)]\n #![warn(clippy::clone_double_ref)]\n #![warn(clippy::drop_bounds)]\n+#![warn(clippy::drop_copy)]\n+#![warn(clippy::drop_ref)]\n #![warn(clippy::for_loop_over_option)]\n #![warn(clippy::for_loop_over_result)]\n #![warn(clippy::for_loops_over_fallibles)]\n+#![warn(clippy::forget_copy)]\n+#![warn(clippy::forget_ref)]\n #![warn(clippy::into_iter_on_array)]\n #![warn(clippy::invalid_atomic_ordering)]\n #![warn(clippy::invalid_ref)]"}, {"sha": "1ad7cf412c896db6cb34030b19cfc03dafdb94ec", "filename": "src/tools/clippy/tests/ui/rename.stderr", "status": "modified", "additions": 68, "deletions": 44, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1,262 +1,286 @@\n error: lint `clippy::almost_complete_letter_range` has been renamed to `clippy::almost_complete_range`\n-  --> $DIR/rename.rs:44:9\n+  --> $DIR/rename.rs:48:9\n    |\n LL | #![warn(clippy::almost_complete_letter_range)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::almost_complete_range`\n    |\n    = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n \n error: lint `clippy::blacklisted_name` has been renamed to `clippy::disallowed_names`\n-  --> $DIR/rename.rs:45:9\n+  --> $DIR/rename.rs:49:9\n    |\n LL | #![warn(clippy::blacklisted_name)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_names`\n \n error: lint `clippy::block_in_if_condition_expr` has been renamed to `clippy::blocks_in_if_conditions`\n-  --> $DIR/rename.rs:46:9\n+  --> $DIR/rename.rs:50:9\n    |\n LL | #![warn(clippy::block_in_if_condition_expr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n \n error: lint `clippy::block_in_if_condition_stmt` has been renamed to `clippy::blocks_in_if_conditions`\n-  --> $DIR/rename.rs:47:9\n+  --> $DIR/rename.rs:51:9\n    |\n LL | #![warn(clippy::block_in_if_condition_stmt)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n \n error: lint `clippy::box_vec` has been renamed to `clippy::box_collection`\n-  --> $DIR/rename.rs:48:9\n+  --> $DIR/rename.rs:52:9\n    |\n LL | #![warn(clippy::box_vec)]\n    |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::box_collection`\n \n error: lint `clippy::const_static_lifetime` has been renamed to `clippy::redundant_static_lifetimes`\n-  --> $DIR/rename.rs:49:9\n+  --> $DIR/rename.rs:53:9\n    |\n LL | #![warn(clippy::const_static_lifetime)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::redundant_static_lifetimes`\n \n error: lint `clippy::cyclomatic_complexity` has been renamed to `clippy::cognitive_complexity`\n-  --> $DIR/rename.rs:50:9\n+  --> $DIR/rename.rs:54:9\n    |\n LL | #![warn(clippy::cyclomatic_complexity)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::cognitive_complexity`\n \n error: lint `clippy::derive_hash_xor_eq` has been renamed to `clippy::derived_hash_with_manual_eq`\n-  --> $DIR/rename.rs:51:9\n+  --> $DIR/rename.rs:55:9\n    |\n LL | #![warn(clippy::derive_hash_xor_eq)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::derived_hash_with_manual_eq`\n \n error: lint `clippy::disallowed_method` has been renamed to `clippy::disallowed_methods`\n-  --> $DIR/rename.rs:52:9\n+  --> $DIR/rename.rs:56:9\n    |\n LL | #![warn(clippy::disallowed_method)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_methods`\n \n error: lint `clippy::disallowed_type` has been renamed to `clippy::disallowed_types`\n-  --> $DIR/rename.rs:53:9\n+  --> $DIR/rename.rs:57:9\n    |\n LL | #![warn(clippy::disallowed_type)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_types`\n \n error: lint `clippy::eval_order_dependence` has been renamed to `clippy::mixed_read_write_in_expression`\n-  --> $DIR/rename.rs:54:9\n+  --> $DIR/rename.rs:58:9\n    |\n LL | #![warn(clippy::eval_order_dependence)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::mixed_read_write_in_expression`\n \n error: lint `clippy::identity_conversion` has been renamed to `clippy::useless_conversion`\n-  --> $DIR/rename.rs:55:9\n+  --> $DIR/rename.rs:59:9\n    |\n LL | #![warn(clippy::identity_conversion)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::useless_conversion`\n \n error: lint `clippy::if_let_some_result` has been renamed to `clippy::match_result_ok`\n-  --> $DIR/rename.rs:56:9\n+  --> $DIR/rename.rs:60:9\n    |\n LL | #![warn(clippy::if_let_some_result)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::match_result_ok`\n \n error: lint `clippy::logic_bug` has been renamed to `clippy::overly_complex_bool_expr`\n-  --> $DIR/rename.rs:57:9\n+  --> $DIR/rename.rs:61:9\n    |\n LL | #![warn(clippy::logic_bug)]\n    |         ^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::overly_complex_bool_expr`\n \n error: lint `clippy::new_without_default_derive` has been renamed to `clippy::new_without_default`\n-  --> $DIR/rename.rs:58:9\n+  --> $DIR/rename.rs:62:9\n    |\n LL | #![warn(clippy::new_without_default_derive)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::new_without_default`\n \n error: lint `clippy::option_and_then_some` has been renamed to `clippy::bind_instead_of_map`\n-  --> $DIR/rename.rs:59:9\n+  --> $DIR/rename.rs:63:9\n    |\n LL | #![warn(clippy::option_and_then_some)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::bind_instead_of_map`\n \n error: lint `clippy::option_expect_used` has been renamed to `clippy::expect_used`\n-  --> $DIR/rename.rs:60:9\n+  --> $DIR/rename.rs:64:9\n    |\n LL | #![warn(clippy::option_expect_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n error: lint `clippy::option_map_unwrap_or` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:61:9\n+  --> $DIR/rename.rs:65:9\n    |\n LL | #![warn(clippy::option_map_unwrap_or)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::option_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:62:9\n+  --> $DIR/rename.rs:66:9\n    |\n LL | #![warn(clippy::option_map_unwrap_or_else)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::option_unwrap_used` has been renamed to `clippy::unwrap_used`\n-  --> $DIR/rename.rs:63:9\n+  --> $DIR/rename.rs:67:9\n    |\n LL | #![warn(clippy::option_unwrap_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n error: lint `clippy::ref_in_deref` has been renamed to `clippy::needless_borrow`\n-  --> $DIR/rename.rs:64:9\n+  --> $DIR/rename.rs:68:9\n    |\n LL | #![warn(clippy::ref_in_deref)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::needless_borrow`\n \n error: lint `clippy::result_expect_used` has been renamed to `clippy::expect_used`\n-  --> $DIR/rename.rs:65:9\n+  --> $DIR/rename.rs:69:9\n    |\n LL | #![warn(clippy::result_expect_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n error: lint `clippy::result_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:66:9\n+  --> $DIR/rename.rs:70:9\n    |\n LL | #![warn(clippy::result_map_unwrap_or_else)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::result_unwrap_used` has been renamed to `clippy::unwrap_used`\n-  --> $DIR/rename.rs:67:9\n+  --> $DIR/rename.rs:71:9\n    |\n LL | #![warn(clippy::result_unwrap_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n error: lint `clippy::single_char_push_str` has been renamed to `clippy::single_char_add_str`\n-  --> $DIR/rename.rs:68:9\n+  --> $DIR/rename.rs:72:9\n    |\n LL | #![warn(clippy::single_char_push_str)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::single_char_add_str`\n \n error: lint `clippy::stutter` has been renamed to `clippy::module_name_repetitions`\n-  --> $DIR/rename.rs:69:9\n+  --> $DIR/rename.rs:73:9\n    |\n LL | #![warn(clippy::stutter)]\n    |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::module_name_repetitions`\n \n error: lint `clippy::to_string_in_display` has been renamed to `clippy::recursive_format_impl`\n-  --> $DIR/rename.rs:70:9\n+  --> $DIR/rename.rs:74:9\n    |\n LL | #![warn(clippy::to_string_in_display)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::recursive_format_impl`\n \n error: lint `clippy::zero_width_space` has been renamed to `clippy::invisible_characters`\n-  --> $DIR/rename.rs:71:9\n+  --> $DIR/rename.rs:75:9\n    |\n LL | #![warn(clippy::zero_width_space)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::invisible_characters`\n \n error: lint `clippy::clone_double_ref` has been renamed to `suspicious_double_ref_op`\n-  --> $DIR/rename.rs:72:9\n+  --> $DIR/rename.rs:76:9\n    |\n LL | #![warn(clippy::clone_double_ref)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `suspicious_double_ref_op`\n \n error: lint `clippy::drop_bounds` has been renamed to `drop_bounds`\n-  --> $DIR/rename.rs:73:9\n+  --> $DIR/rename.rs:77:9\n    |\n LL | #![warn(clippy::drop_bounds)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `drop_bounds`\n \n+error: lint `clippy::drop_copy` has been renamed to `drop_copy`\n+  --> $DIR/rename.rs:78:9\n+   |\n+LL | #![warn(clippy::drop_copy)]\n+   |         ^^^^^^^^^^^^^^^^^ help: use the new name: `drop_copy`\n+\n+error: lint `clippy::drop_ref` has been renamed to `drop_ref`\n+  --> $DIR/rename.rs:79:9\n+   |\n+LL | #![warn(clippy::drop_ref)]\n+   |         ^^^^^^^^^^^^^^^^ help: use the new name: `drop_ref`\n+\n error: lint `clippy::for_loop_over_option` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:74:9\n+  --> $DIR/rename.rs:80:9\n    |\n LL | #![warn(clippy::for_loop_over_option)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::for_loop_over_result` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:75:9\n+  --> $DIR/rename.rs:81:9\n    |\n LL | #![warn(clippy::for_loop_over_result)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::for_loops_over_fallibles` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:76:9\n+  --> $DIR/rename.rs:82:9\n    |\n LL | #![warn(clippy::for_loops_over_fallibles)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n+error: lint `clippy::forget_copy` has been renamed to `forget_copy`\n+  --> $DIR/rename.rs:83:9\n+   |\n+LL | #![warn(clippy::forget_copy)]\n+   |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `forget_copy`\n+\n+error: lint `clippy::forget_ref` has been renamed to `forget_ref`\n+  --> $DIR/rename.rs:84:9\n+   |\n+LL | #![warn(clippy::forget_ref)]\n+   |         ^^^^^^^^^^^^^^^^^^ help: use the new name: `forget_ref`\n+\n error: lint `clippy::into_iter_on_array` has been renamed to `array_into_iter`\n-  --> $DIR/rename.rs:77:9\n+  --> $DIR/rename.rs:85:9\n    |\n LL | #![warn(clippy::into_iter_on_array)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `array_into_iter`\n \n error: lint `clippy::invalid_atomic_ordering` has been renamed to `invalid_atomic_ordering`\n-  --> $DIR/rename.rs:78:9\n+  --> $DIR/rename.rs:86:9\n    |\n LL | #![warn(clippy::invalid_atomic_ordering)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_atomic_ordering`\n \n error: lint `clippy::invalid_ref` has been renamed to `invalid_value`\n-  --> $DIR/rename.rs:79:9\n+  --> $DIR/rename.rs:87:9\n    |\n LL | #![warn(clippy::invalid_ref)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_value`\n \n error: lint `clippy::let_underscore_drop` has been renamed to `let_underscore_drop`\n-  --> $DIR/rename.rs:80:9\n+  --> $DIR/rename.rs:88:9\n    |\n LL | #![warn(clippy::let_underscore_drop)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `let_underscore_drop`\n \n error: lint `clippy::mem_discriminant_non_enum` has been renamed to `enum_intrinsics_non_enums`\n-  --> $DIR/rename.rs:81:9\n+  --> $DIR/rename.rs:89:9\n    |\n LL | #![warn(clippy::mem_discriminant_non_enum)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `enum_intrinsics_non_enums`\n \n error: lint `clippy::panic_params` has been renamed to `non_fmt_panics`\n-  --> $DIR/rename.rs:82:9\n+  --> $DIR/rename.rs:90:9\n    |\n LL | #![warn(clippy::panic_params)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `non_fmt_panics`\n \n error: lint `clippy::positional_named_format_parameters` has been renamed to `named_arguments_used_positionally`\n-  --> $DIR/rename.rs:83:9\n+  --> $DIR/rename.rs:91:9\n    |\n LL | #![warn(clippy::positional_named_format_parameters)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `named_arguments_used_positionally`\n \n error: lint `clippy::temporary_cstring_as_ptr` has been renamed to `temporary_cstring_as_ptr`\n-  --> $DIR/rename.rs:84:9\n+  --> $DIR/rename.rs:92:9\n    |\n LL | #![warn(clippy::temporary_cstring_as_ptr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `temporary_cstring_as_ptr`\n \n error: lint `clippy::unknown_clippy_lints` has been renamed to `unknown_lints`\n-  --> $DIR/rename.rs:85:9\n+  --> $DIR/rename.rs:93:9\n    |\n LL | #![warn(clippy::unknown_clippy_lints)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unknown_lints`\n \n error: lint `clippy::unused_label` has been renamed to `unused_labels`\n-  --> $DIR/rename.rs:86:9\n+  --> $DIR/rename.rs:94:9\n    |\n LL | #![warn(clippy::unused_label)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unused_labels`\n \n-error: aborting due to 43 previous errors\n+error: aborting due to 47 previous errors\n "}, {"sha": "49c0e4dc7eb101b2a5b1d8bf8329ea5d917b8c8c", "filename": "src/tools/clippy/tests/ui/unknown_clippy_lints.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funknown_clippy_lints.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funknown_clippy_lints.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funknown_clippy_lints.fixed?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -10,7 +10,7 @@\n #[warn(clippy::unnecessary_cast)]\n #[warn(clippy::useless_transmute)]\n // Shouldn't suggest rustc lint name(`dead_code`)\n-#[warn(clippy::drop_copy)]\n+#[warn(clippy::eq_op)]\n // Shouldn't suggest removed/deprecated clippy lint name(`unused_collect`)\n #[warn(clippy::unused_self)]\n // Shouldn't suggest renamed clippy lint name(`const_static_lifetime`)"}, {"sha": "584c428932fee8ead45dfc41e240fde385290519", "filename": "src/tools/clippy/tests/ui/unknown_clippy_lints.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funknown_clippy_lints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funknown_clippy_lints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funknown_clippy_lints.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -34,7 +34,7 @@ error: unknown lint: `clippy::dead_cod`\n   --> $DIR/unknown_clippy_lints.rs:13:8\n    |\n LL | #[warn(clippy::dead_cod)]\n-   |        ^^^^^^^^^^^^^^^^ help: did you mean: `clippy::drop_copy`\n+   |        ^^^^^^^^^^^^^^^^ help: did you mean: `clippy::eq_op`\n \n error: unknown lint: `clippy::unused_colle`\n   --> $DIR/unknown_clippy_lints.rs:15:8"}, {"sha": "b450f986149658c4f36d83f36e56d970ce5703ee", "filename": "src/tools/miri/rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/src%2Ftools%2Fmiri%2Frust-version", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/src%2Ftools%2Fmiri%2Frust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Frust-version?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1 +1 @@\n-0b795044c6f0854445f1f2bb6443e87848e150d1\n+69fef92ab2f287f072b66fb7b4f62c8bb4acba43"}, {"sha": "a1e949183ad4026cc12f76bf661758faccd80d73", "filename": "src/tools/miri/src/borrow_tracker/stacked_borrows/stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fstack.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -83,7 +83,7 @@ impl Stack {\n         self.borrows.truncate(write_idx);\n \n         #[cfg(not(feature = \"stack-cache\"))]\n-        drop(first_removed); // This is only needed for the stack-cache\n+        let _unused = first_removed; // This is only needed for the stack-cache\n \n         #[cfg(feature = \"stack-cache\")]\n         if let Some(first_removed) = first_removed {"}, {"sha": "bf4204c61fd726747b237fbc65581a3fdd3774f6", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_write2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write2.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1,3 +1,5 @@\n+#![allow(drop_ref)]\n+\n fn main() {\n     let target = &mut 42;\n     let target2 = target as *mut _;"}, {"sha": "8a33005837528eceb16ea84d6e754a763404fe67", "filename": "src/tools/miri/tests/fail/uninit_buffer.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1,5 +1,7 @@\n //@error-in-other-file: memory is uninitialized at [0x4..0x10]\n \n+#![allow(drop_copy)]\n+\n use std::alloc::{alloc, dealloc, Layout};\n use std::slice::from_raw_parts;\n "}, {"sha": "443f481c0874af2445f62ac245fe12e93a26594b", "filename": "src/tools/miri/tests/fail/uninit_buffer_with_provenance.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer_with_provenance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer_with_provenance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer_with_provenance.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1,6 +1,7 @@\n //@error-in-other-file: memory is uninitialized at [0x4..0x8]\n //@normalize-stderr-test: \"a[0-9]+\" -> \"ALLOC\"\n #![feature(strict_provenance)]\n+#![allow(drop_copy)]\n \n // Test printing allocations that contain single-byte provenance.\n "}, {"sha": "9f743f0b56656070cd3d60431461777c947f646b", "filename": "src/tools/miri/tests/pass/stacked-borrows/zst-field-retagging-terminates.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fstacked-borrows%2Fzst-field-retagging-terminates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fstacked-borrows%2Fzst-field-retagging-terminates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fstacked-borrows%2Fzst-field-retagging-terminates.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1,5 +1,8 @@\n //@compile-flags: -Zmiri-retag-fields\n // Checks that the test does not run forever (which relies on a fast path).\n+\n+#![allow(drop_copy)]\n+\n fn main() {\n     let array = [(); usize::MAX];\n     drop(array); // Pass the array to a function, retagging its fields"}, {"sha": "997bdaf563635a7aadbd4d2bea24e517eb15a07f", "filename": "tests/codegen/slice-iter-nonnull.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fcodegen%2Fslice-iter-nonnull.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fcodegen%2Fslice-iter-nonnull.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fslice-iter-nonnull.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -40,3 +40,38 @@ pub fn slice_iter_next_back<'a>(it: &mut std::slice::Iter<'a, u32>) -> Option<&'\n \n     it.next_back()\n }\n+\n+// The slice iterator `new` methods used to `assume` that the pointer is non-null,\n+// but passing slices already requires that, to the extent that LLVM actually\n+// removed the `call @llvm.assume` anyway.  These tests just demonstrate that the\n+// attribute is there, and confirms adding the assume back doesn't do anything.\n+\n+// CHECK-LABEL: @slice_iter_new\n+// CHECK-SAME: (ptr noalias noundef nonnull {{.+}} %slice.0, {{.+}} noundef %slice.1)\n+#[no_mangle]\n+pub fn slice_iter_new(slice: &[u32]) -> std::slice::Iter<'_, u32> {\n+    // CHECK-NOT: slice\n+    // CHECK: %[[END:.+]] = getelementptr inbounds i32{{.+}} %slice.0{{.+}} %slice.1\n+    // CHECK-NOT: slice\n+    // CHECK: insertvalue {{.+}} ptr %slice.0, 0\n+    // CHECK-NOT: slice\n+    // CHECK: insertvalue {{.+}} ptr %[[END]], 1\n+    // CHECK-NOT: slice\n+    // CHECK: }\n+    slice.iter()\n+}\n+\n+// CHECK-LABEL: @slice_iter_mut_new\n+// CHECK-SAME: (ptr noalias noundef nonnull {{.+}} %slice.0, {{.+}} noundef %slice.1)\n+#[no_mangle]\n+pub fn slice_iter_mut_new(slice: &mut [u32]) -> std::slice::IterMut<'_, u32> {\n+    // CHECK-NOT: slice\n+    // CHECK: %[[END:.+]] = getelementptr inbounds i32{{.+}} %slice.0{{.+}} %slice.1\n+    // CHECK-NOT: slice\n+    // CHECK: insertvalue {{.+}} ptr %slice.0, 0\n+    // CHECK-NOT: slice\n+    // CHECK: insertvalue {{.+}} ptr %[[END]], 1\n+    // CHECK-NOT: slice\n+    // CHECK: }\n+    slice.iter_mut()\n+}"}, {"sha": "0da7e5536ae07ee735503e819011a758132e43ae", "filename": "tests/mir-opt/pre-codegen/slice_iter.forward_loop.PreCodegen.after.mir", "status": "modified", "additions": 139, "deletions": 39, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.forward_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.forward_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.forward_loop.PreCodegen.after.mir?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -6,58 +6,120 @@ fn forward_loop(_1: &[T], _2: impl Fn(&T)) -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/slice_iter.rs:+0:60: +0:60\n     let mut _3: std::slice::Iter<'_, T>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n     let mut _4: std::slice::Iter<'_, T>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n-    let mut _5: std::slice::Iter<'_, T>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n-    let _6: ();                          // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n-    let mut _7: std::option::Option<&T>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n-    let mut _8: &mut std::slice::Iter<'_, T>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n-    let mut _9: isize;                   // in scope 0 at $DIR/slice_iter.rs:+1:5: +3:6\n-    let mut _11: &impl Fn(&T);           // in scope 0 at $DIR/slice_iter.rs:+2:9: +2:10\n-    let mut _12: (&T,);                  // in scope 0 at $DIR/slice_iter.rs:+2:9: +2:13\n+    let _5: ();                          // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n+    let mut _6: std::option::Option<&T>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n+    let mut _7: &mut std::slice::Iter<'_, T>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n+    let mut _8: isize;                   // in scope 0 at $DIR/slice_iter.rs:+1:5: +3:6\n+    let mut _10: &impl Fn(&T);           // in scope 0 at $DIR/slice_iter.rs:+2:9: +2:10\n+    let mut _11: (&T,);                  // in scope 0 at $DIR/slice_iter.rs:+2:9: +2:13\n     scope 1 {\n-        debug iter => _5;                // in scope 1 at $DIR/slice_iter.rs:+1:14: +1:26\n-        let _10: &T;                     // in scope 1 at $DIR/slice_iter.rs:+1:9: +1:10\n+        debug iter => _4;                // in scope 1 at $DIR/slice_iter.rs:+1:14: +1:26\n+        let _9: &T;                      // in scope 1 at $DIR/slice_iter.rs:+1:9: +1:10\n         scope 2 {\n-            debug x => _10;              // in scope 2 at $DIR/slice_iter.rs:+1:9: +1:10\n+            debug x => _9;               // in scope 2 at $DIR/slice_iter.rs:+1:9: +1:10\n         }\n     }\n     scope 3 (inlined core::slice::<impl [T]>::iter) { // at $DIR/slice_iter.rs:28:20: 28:26\n         debug self => _1;                // in scope 3 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        scope 4 (inlined std::slice::Iter::<'_, T>::new) { // at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+            debug slice => _1;           // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let _12: *const T;           // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _14: bool;           // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _15: usize;          // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _16: usize;          // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _17: std::ptr::NonNull<T>; // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _18: *mut T;         // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _19: *const T;       // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            scope 5 {\n+                debug ptr => _12;        // in scope 5 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                scope 6 {\n+                    let _13: *const T;   // in scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                    scope 7 {\n+                        debug end => _13; // in scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                        scope 13 (inlined NonNull::<T>::new_unchecked) { // at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                            debug ptr => _18; // in scope 13 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+                            let mut _21: *const T; // in scope 13 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+                            let mut _22: *mut T; // in scope 13 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                            scope 14 {\n+                                scope 15 (inlined NonNull::<T>::new_unchecked::runtime::<T>) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                                    debug ptr => _22; // in scope 15 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                                    scope 16 (inlined ptr::mut_ptr::<impl *mut T>::is_null) { // at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+                                        debug self => _22; // in scope 16 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                        let mut _23: *mut u8; // in scope 16 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                        scope 17 {\n+                                            scope 18 (inlined ptr::mut_ptr::<impl *mut T>::is_null::runtime_impl) { // at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                debug ptr => _23; // in scope 18 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                scope 19 (inlined ptr::mut_ptr::<impl *mut u8>::addr) { // at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                    debug self => _23; // in scope 19 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                    scope 20 {\n+                                                        scope 21 (inlined ptr::mut_ptr::<impl *mut u8>::cast::<()>) { // at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                            debug self => _23; // in scope 21 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                        }\n+                                                    }\n+                                                }\n+                                            }\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                    scope 9 (inlined invalid::<T>) { // at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                        debug addr => _15; // in scope 9 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                        scope 10 {\n+                        }\n+                    }\n+                    scope 11 (inlined ptr::const_ptr::<impl *const T>::add) { // at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                        debug self => _12; // in scope 11 at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+                        debug count => _16; // in scope 11 at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+                        scope 12 {\n+                        }\n+                    }\n+                }\n+            }\n+            scope 8 (inlined core::slice::<impl [T]>::as_ptr) { // at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                debug self => _1;        // in scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+                let mut _20: *const [T]; // in scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+            }\n+        }\n     }\n-    scope 4 (inlined <std::slice::Iter<'_, T> as IntoIterator>::into_iter) { // at $DIR/slice_iter.rs:28:14: 28:26\n-        debug self => _4;                // in scope 4 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+    scope 22 (inlined <std::slice::Iter<'_, T> as IntoIterator>::into_iter) { // at $DIR/slice_iter.rs:28:14: 28:26\n+        debug self => _3;                // in scope 22 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n     }\n \n     bb0: {\n-        StorageLive(_3);                 // scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n-        StorageLive(_4);                 // scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n-        _4 = std::slice::Iter::<'_, T>::new(_1) -> [return: bb10, unwind: bb8]; // scope 3 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-                                         // mir::Constant\n-                                         // + span: $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-                                         // + user_ty: UserType(0)\n-                                         // + literal: Const { ty: fn(&[T]) -> std::slice::Iter<'_, T> {std::slice::Iter::<'_, T>::new}, val: Value(<ZST>) }\n+        StorageLive(_12);                // scope 3 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageLive(_20);                // scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        _20 = &raw const (*_1);          // scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        _12 = move _20 as *const T (PtrToPtr); // scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageDead(_20);                // scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageLive(_13);                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_14);                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _14 = const _;                   // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        switchInt(move _14) -> [0: bb11, otherwise: bb10]; // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n     }\n \n     bb1: {\n-        StorageLive(_7);                 // scope 1 at $DIR/slice_iter.rs:+1:14: +1:26\n-        _8 = &mut _5;                    // scope 1 at $DIR/slice_iter.rs:+1:14: +1:26\n-        _7 = <std::slice::Iter<'_, T> as Iterator>::next(_8) -> [return: bb2, unwind: bb8]; // scope 1 at $DIR/slice_iter.rs:+1:14: +1:26\n+        StorageLive(_6);                 // scope 1 at $DIR/slice_iter.rs:+1:14: +1:26\n+        _7 = &mut _4;                    // scope 1 at $DIR/slice_iter.rs:+1:14: +1:26\n+        _6 = <std::slice::Iter<'_, T> as Iterator>::next(_7) -> [return: bb2, unwind: bb8]; // scope 1 at $DIR/slice_iter.rs:+1:14: +1:26\n                                          // mir::Constant\n                                          // + span: $DIR/slice_iter.rs:28:14: 28:26\n                                          // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, T>) -> Option<<std::slice::Iter<'_, T> as Iterator>::Item> {<std::slice::Iter<'_, T> as Iterator>::next}, val: Value(<ZST>) }\n     }\n \n     bb2: {\n-        _9 = discriminant(_7);           // scope 1 at $DIR/slice_iter.rs:+1:14: +1:26\n-        switchInt(move _9) -> [0: bb5, 1: bb3, otherwise: bb4]; // scope 1 at $DIR/slice_iter.rs:+1:14: +1:26\n+        _8 = discriminant(_6);           // scope 1 at $DIR/slice_iter.rs:+1:14: +1:26\n+        switchInt(move _8) -> [0: bb5, 1: bb3, otherwise: bb4]; // scope 1 at $DIR/slice_iter.rs:+1:14: +1:26\n     }\n \n     bb3: {\n-        _10 = ((_7 as Some).0: &T);      // scope 1 at $DIR/slice_iter.rs:+1:9: +1:10\n-        StorageLive(_11);                // scope 2 at $DIR/slice_iter.rs:+2:9: +2:10\n-        _11 = &_2;                       // scope 2 at $DIR/slice_iter.rs:+2:9: +2:10\n-        StorageLive(_12);                // scope 2 at $DIR/slice_iter.rs:+2:9: +2:13\n-        _12 = (_10,);                    // scope 2 at $DIR/slice_iter.rs:+2:9: +2:13\n-        _6 = <impl Fn(&T) as Fn<(&T,)>>::call(move _11, move _12) -> [return: bb6, unwind: bb8]; // scope 2 at $DIR/slice_iter.rs:+2:9: +2:13\n+        _9 = ((_6 as Some).0: &T);       // scope 1 at $DIR/slice_iter.rs:+1:9: +1:10\n+        StorageLive(_10);                // scope 2 at $DIR/slice_iter.rs:+2:9: +2:10\n+        _10 = &_2;                       // scope 2 at $DIR/slice_iter.rs:+2:9: +2:10\n+        StorageLive(_11);                // scope 2 at $DIR/slice_iter.rs:+2:9: +2:13\n+        _11 = (_9,);                     // scope 2 at $DIR/slice_iter.rs:+2:9: +2:13\n+        _5 = <impl Fn(&T) as Fn<(&T,)>>::call(move _10, move _11) -> [return: bb6, unwind: bb8]; // scope 2 at $DIR/slice_iter.rs:+2:9: +2:13\n                                          // mir::Constant\n                                          // + span: $DIR/slice_iter.rs:29:9: 29:10\n                                          // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a impl Fn(&T), (&T,)) -> <impl Fn(&T) as FnOnce<(&T,)>>::Output {<impl Fn(&T) as Fn<(&T,)>>::call}, val: Value(<ZST>) }\n@@ -68,16 +130,15 @@ fn forward_loop(_1: &[T], _2: impl Fn(&T)) -> () {\n     }\n \n     bb5: {\n-        StorageDead(_7);                 // scope 1 at $DIR/slice_iter.rs:+3:5: +3:6\n-        StorageDead(_5);                 // scope 0 at $DIR/slice_iter.rs:+3:5: +3:6\n-        StorageDead(_3);                 // scope 0 at $DIR/slice_iter.rs:+3:5: +3:6\n+        StorageDead(_6);                 // scope 1 at $DIR/slice_iter.rs:+3:5: +3:6\n+        StorageDead(_4);                 // scope 0 at $DIR/slice_iter.rs:+3:5: +3:6\n         drop(_2) -> bb7;                 // scope 0 at $DIR/slice_iter.rs:+4:1: +4:2\n     }\n \n     bb6: {\n-        StorageDead(_12);                // scope 2 at $DIR/slice_iter.rs:+2:12: +2:13\n         StorageDead(_11);                // scope 2 at $DIR/slice_iter.rs:+2:12: +2:13\n-        StorageDead(_7);                 // scope 1 at $DIR/slice_iter.rs:+3:5: +3:6\n+        StorageDead(_10);                // scope 2 at $DIR/slice_iter.rs:+2:12: +2:13\n+        StorageDead(_6);                 // scope 1 at $DIR/slice_iter.rs:+3:5: +3:6\n         goto -> bb1;                     // scope 1 at $DIR/slice_iter.rs:+1:5: +3:6\n     }\n \n@@ -94,10 +155,49 @@ fn forward_loop(_1: &[T], _2: impl Fn(&T)) -> () {\n     }\n \n     bb10: {\n-        _3 = move _4;                    // scope 4 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-        StorageDead(_4);                 // scope 0 at $DIR/slice_iter.rs:+1:25: +1:26\n-        StorageLive(_5);                 // scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n-        _5 = move _3;                    // scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n+        StorageLive(_15);                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _15 = Len((*_1));                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _13 = _15 as *const T (Transmute); // scope 10 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        StorageDead(_15);                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        goto -> bb12;                    // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+    }\n+\n+    bb11: {\n+        StorageLive(_16);                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _16 = Len((*_1));                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _13 = Offset(_12, _16);          // scope 12 at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+        StorageDead(_16);                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        goto -> bb12;                    // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+    }\n+\n+    bb12: {\n+        StorageDead(_14);                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_17);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_18);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _18 = _12 as *mut T (PtrToPtr);  // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_21);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_22);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_23);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _21 = _18 as *const T (Pointer(MutToConstPointer)); // scope 14 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+        _17 = NonNull::<T> { pointer: _21 }; // scope 14 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+        StorageDead(_23);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_22);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_21);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_18);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_19);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _19 = _13;                       // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _3 = std::slice::Iter::<'_, T> { ptr: move _17, end: move _19, _marker: const ZeroSized: PhantomData<&T> }; // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: no-location\n+                                         // + literal: Const { ty: PhantomData<&T>, val: Value(<ZST>) }\n+                                         // adt\n+                                         // + user_ty: UserType(1)\n+        StorageDead(_19);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_17);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_13);                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_12);                // scope 3 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageLive(_4);                 // scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n+        _4 = move _3;                    // scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n         goto -> bb1;                     // scope 1 at $DIR/slice_iter.rs:+1:5: +3:6\n     }\n }"}, {"sha": "45b41b54c8b6683e576eb890dea324195ece5945", "filename": "tests/mir-opt/pre-codegen/slice_iter.reverse_loop.PreCodegen.after.mir", "status": "modified", "additions": 126, "deletions": 20, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.reverse_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.reverse_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.reverse_loop.PreCodegen.after.mir?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -19,39 +19,104 @@ fn reverse_loop(_1: &[T], _2: impl Fn(&T)) -> () {\n         scope 2 {\n             debug x => _10;              // in scope 2 at $DIR/slice_iter.rs:+1:9: +1:10\n         }\n-        scope 7 (inlined <Rev<std::slice::Iter<'_, T>> as Iterator>::next) { // at $DIR/slice_iter.rs:35:14: 35:32\n-            debug self => _8;            // in scope 7 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n-            let mut _13: &mut std::slice::Iter<'_, T>; // in scope 7 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n+        scope 25 (inlined <Rev<std::slice::Iter<'_, T>> as Iterator>::next) { // at $DIR/slice_iter.rs:35:14: 35:32\n+            debug self => _8;            // in scope 25 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n+            let mut _25: &mut std::slice::Iter<'_, T>; // in scope 25 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n         }\n     }\n     scope 3 (inlined core::slice::<impl [T]>::iter) { // at $DIR/slice_iter.rs:35:20: 35:26\n         debug self => _1;                // in scope 3 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        scope 4 (inlined std::slice::Iter::<'_, T>::new) { // at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+            debug slice => _1;           // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let _13: *const T;           // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _15: bool;           // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _16: usize;          // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _17: usize;          // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _18: std::ptr::NonNull<T>; // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _19: *mut T;         // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _20: *const T;       // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            scope 5 {\n+                debug ptr => _13;        // in scope 5 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                scope 6 {\n+                    let _14: *const T;   // in scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                    scope 7 {\n+                        debug end => _14; // in scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                        scope 13 (inlined NonNull::<T>::new_unchecked) { // at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                            debug ptr => _19; // in scope 13 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+                            let mut _22: *const T; // in scope 13 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+                            let mut _23: *mut T; // in scope 13 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                            scope 14 {\n+                                scope 15 (inlined NonNull::<T>::new_unchecked::runtime::<T>) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                                    debug ptr => _23; // in scope 15 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                                    scope 16 (inlined ptr::mut_ptr::<impl *mut T>::is_null) { // at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+                                        debug self => _23; // in scope 16 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                        let mut _24: *mut u8; // in scope 16 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                        scope 17 {\n+                                            scope 18 (inlined ptr::mut_ptr::<impl *mut T>::is_null::runtime_impl) { // at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                debug ptr => _24; // in scope 18 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                scope 19 (inlined ptr::mut_ptr::<impl *mut u8>::addr) { // at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                    debug self => _24; // in scope 19 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                    scope 20 {\n+                                                        scope 21 (inlined ptr::mut_ptr::<impl *mut u8>::cast::<()>) { // at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                            debug self => _24; // in scope 21 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                        }\n+                                                    }\n+                                                }\n+                                            }\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                    scope 9 (inlined invalid::<T>) { // at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                        debug addr => _16; // in scope 9 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                        scope 10 {\n+                        }\n+                    }\n+                    scope 11 (inlined ptr::const_ptr::<impl *const T>::add) { // at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                        debug self => _13; // in scope 11 at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+                        debug count => _17; // in scope 11 at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+                        scope 12 {\n+                        }\n+                    }\n+                }\n+            }\n+            scope 8 (inlined core::slice::<impl [T]>::as_ptr) { // at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                debug self => _1;        // in scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+                let mut _21: *const [T]; // in scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+            }\n+        }\n     }\n-    scope 4 (inlined <std::slice::Iter<'_, T> as Iterator>::rev) { // at $DIR/slice_iter.rs:35:27: 35:32\n-        debug self => _4;                // in scope 4 at $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-        scope 5 (inlined Rev::<std::slice::Iter<'_, T>>::new) { // at $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-            debug iter => _4;            // in scope 5 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n+    scope 22 (inlined <std::slice::Iter<'_, T> as Iterator>::rev) { // at $DIR/slice_iter.rs:35:27: 35:32\n+        debug self => _4;                // in scope 22 at $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+        scope 23 (inlined Rev::<std::slice::Iter<'_, T>>::new) { // at $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+            debug iter => _4;            // in scope 23 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n         }\n     }\n-    scope 6 (inlined <Rev<std::slice::Iter<'_, T>> as IntoIterator>::into_iter) { // at $DIR/slice_iter.rs:35:14: 35:32\n-        debug self => _3;                // in scope 6 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+    scope 24 (inlined <Rev<std::slice::Iter<'_, T>> as IntoIterator>::into_iter) { // at $DIR/slice_iter.rs:35:14: 35:32\n+        debug self => _3;                // in scope 24 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n     }\n \n     bb0: {\n         StorageLive(_4);                 // scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n-        _4 = std::slice::Iter::<'_, T>::new(_1) -> [return: bb9, unwind: bb7]; // scope 3 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-                                         // mir::Constant\n-                                         // + span: $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-                                         // + user_ty: UserType(0)\n-                                         // + literal: Const { ty: fn(&[T]) -> std::slice::Iter<'_, T> {std::slice::Iter::<'_, T>::new}, val: Value(<ZST>) }\n+        StorageLive(_13);                // scope 3 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageLive(_21);                // scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        _21 = &raw const (*_1);          // scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        _13 = move _21 as *const T (PtrToPtr); // scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageDead(_21);                // scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageLive(_14);                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_15);                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _15 = const _;                   // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        switchInt(move _15) -> [0: bb10, otherwise: bb9]; // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n     }\n \n     bb1: {\n         StorageLive(_7);                 // scope 1 at $DIR/slice_iter.rs:+1:14: +1:32\n         _8 = &mut _5;                    // scope 1 at $DIR/slice_iter.rs:+1:14: +1:32\n-        StorageLive(_13);                // scope 7 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n-        _13 = &mut ((*_8).0: std::slice::Iter<'_, T>); // scope 7 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n-        _7 = <std::slice::Iter<'_, T> as DoubleEndedIterator>::next_back(move _13) -> [return: bb10, unwind: bb7]; // scope 7 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n+        StorageLive(_25);                // scope 25 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n+        _25 = &mut ((*_8).0: std::slice::Iter<'_, T>); // scope 25 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n+        _7 = <std::slice::Iter<'_, T> as DoubleEndedIterator>::next_back(move _25) -> [return: bb12, unwind: bb7]; // scope 25 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n                                          // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, T>) -> Option<<std::slice::Iter<'_, T> as Iterator>::Item> {<std::slice::Iter<'_, T> as DoubleEndedIterator>::next_back}, val: Value(<ZST>) }\n@@ -99,15 +164,56 @@ fn reverse_loop(_1: &[T], _2: impl Fn(&T)) -> () {\n     }\n \n     bb9: {\n-        _3 = Rev::<std::slice::Iter<'_, T>> { iter: move _4 }; // scope 5 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n+        StorageLive(_16);                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _16 = Len((*_1));                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _14 = _16 as *const T (Transmute); // scope 10 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        StorageDead(_16);                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        goto -> bb11;                    // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+    }\n+\n+    bb10: {\n+        StorageLive(_17);                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _17 = Len((*_1));                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _14 = Offset(_13, _17);          // scope 12 at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+        StorageDead(_17);                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        goto -> bb11;                    // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+    }\n+\n+    bb11: {\n+        StorageDead(_15);                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_18);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_19);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _19 = _13 as *mut T (PtrToPtr);  // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_22);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_23);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_24);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _22 = _19 as *const T (Pointer(MutToConstPointer)); // scope 14 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+        _18 = NonNull::<T> { pointer: _22 }; // scope 14 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+        StorageDead(_24);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_23);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_22);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_19);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_20);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _20 = _14;                       // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _4 = std::slice::Iter::<'_, T> { ptr: move _18, end: move _20, _marker: const ZeroSized: PhantomData<&T> }; // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: no-location\n+                                         // + literal: Const { ty: PhantomData<&T>, val: Value(<ZST>) }\n+                                         // adt\n+                                         // + user_ty: UserType(1)\n+        StorageDead(_20);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_18);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_14);                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_13);                // scope 3 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        _3 = Rev::<std::slice::Iter<'_, T>> { iter: move _4 }; // scope 23 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n         StorageDead(_4);                 // scope 0 at $DIR/slice_iter.rs:+1:31: +1:32\n         StorageLive(_5);                 // scope 0 at $DIR/slice_iter.rs:+1:14: +1:32\n         _5 = move _3;                    // scope 0 at $DIR/slice_iter.rs:+1:14: +1:32\n         goto -> bb1;                     // scope 1 at $DIR/slice_iter.rs:+1:5: +3:6\n     }\n \n-    bb10: {\n-        StorageDead(_13);                // scope 7 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n+    bb12: {\n+        StorageDead(_25);                // scope 25 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n         _9 = discriminant(_7);           // scope 1 at $DIR/slice_iter.rs:+1:14: +1:32\n         switchInt(move _9) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 1 at $DIR/slice_iter.rs:+1:14: +1:32\n     }"}, {"sha": "b3a8808df0529766ab8b3a20d6ebb0565cec7cb9", "filename": "tests/run-make/coverage-llvmir/filecheck.testprog.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Frun-make%2Fcoverage-llvmir%2Ffilecheck.testprog.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Frun-make%2Fcoverage-llvmir%2Ffilecheck.testprog.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fcoverage-llvmir%2Ffilecheck.testprog.txt?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -36,7 +36,7 @@ CHECK-SAME:   section \"llvm.metadata\"\n CHECK:        [[DEFINE_INTERNAL]] { {{.*}} } @_R{{[a-zA-Z0-9_]+}}testprog14will_be_called() unnamed_addr #{{[0-9]+}} {\n CHECK-NEXT:   start:\n CHECK-NOT:    [[DEFINE_INTERNAL]]\n-CHECK:        %pgocount = load i64, {{i64\\*|ptr}}\n+CHECK:        atomicrmw add ptr\n CHECK-SAME:   @__profc__R{{[a-zA-Z0-9_]+}}testprog14will_be_called,\n \n CHECK:        declare void @llvm.instrprof.increment({{i8\\*|ptr}}, i64, i32, i32) #[[LLVM_INSTRPROF_INCREMENT_ATTR:[0-9]+]]"}, {"sha": "7d6d26003f60efef13ad7154a62c50970f3cf56f", "filename": "tests/ui/associated-inherent-types/inference.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fassociated-inherent-types%2Finference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fassociated-inherent-types%2Finference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Finference.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -3,6 +3,7 @@\n \n #![feature(inherent_associated_types)]\n #![allow(incomplete_features)]\n+#![allow(drop_copy)]\n \n use std::convert::identity;\n "}, {"sha": "c3377eed20a524277443b32c4af0613d20dad30f", "filename": "tests/ui/associated-types/associated-types-eq-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -43,7 +43,7 @@ note: expected this to be `Bar`\n    |\n LL |     type A = usize;\n    |              ^^^^^\n-   = note: required for the cast from `isize` to the object type `dyn Foo<A = Bar>`\n+   = note: required for the cast from `&isize` to `&dyn Foo<A = Bar>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "fdec01b95e3b1114e297d877f9d5ad5c8df5002e", "filename": "tests/ui/associated-types/associated-types-overridden-binding-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -4,7 +4,7 @@ error[E0271]: expected `IntoIter<u32>` to be an iterator that yields `i32`, but\n LL |     let _: &dyn I32Iterator<Item = u32> = &vec![42].into_iter();\n    |                                           ^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found `u32`\n    |\n-   = note: required for the cast from `std::vec::IntoIter<u32>` to the object type `dyn Iterator<Item = u32, Item = i32>`\n+   = note: required for the cast from `&std::vec::IntoIter<u32>` to `&dyn Iterator<Item = u32, Item = i32>`\n \n error: aborting due to previous error\n "}, {"sha": "9c77a25c4320d3661c6d8ef5b815bd4929354c08", "filename": "tests/ui/associated-types/issue-65774-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fassociated-types%2Fissue-65774-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fassociated-types%2Fissue-65774-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fissue-65774-1.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -25,7 +25,7 @@ LL | impl<'a, T: MyDisplay> MyDisplay for &'a mut T { }\n    |             ---------  ^^^^^^^^^     ^^^^^^^^^\n    |             |\n    |             unsatisfied trait bound introduced here\n-   = note: required for the cast from `&mut T` to the object type `dyn MyDisplay`\n+   = note: required for the cast from `&&mut T` to `&dyn MyDisplay`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ca8a727f0fe21a03c9ca7e8c1e58d13bbda57977", "filename": "tests/ui/associated-types/issue-65774-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fassociated-types%2Fissue-65774-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fassociated-types%2Fissue-65774-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fissue-65774-2.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -18,7 +18,7 @@ LL |         writer.my_write(valref)\n    |                         ^^^^^^ the trait `MyDisplay` is not implemented for `T`\n    |\n    = help: the trait `MyDisplay` is implemented for `&'a mut T`\n-   = note: required for the cast from `T` to the object type `dyn MyDisplay`\n+   = note: required for the cast from `&mut T` to `&dyn MyDisplay`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bbd5a822d8df586b81f8ac8b9692bf356c6a0bd1", "filename": "tests/ui/async-await/async-block-control-flow-static-semantics.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -35,7 +35,7 @@ error[E0271]: expected `[async block@$DIR/async-block-control-flow-static-semant\n LL |     let _: &dyn Future<Output = ()> = &block;\n    |                                       ^^^^^^ expected `()`, found `u8`\n    |\n-   = note: required for the cast from `[async block@$DIR/async-block-control-flow-static-semantics.rs:23:17: 25:6]` to the object type `dyn Future<Output = ()>`\n+   = note: required for the cast from `&[async block@$DIR/async-block-control-flow-static-semantics.rs:23:17: 25:6]` to `&dyn Future<Output = ()>`\n \n error[E0308]: mismatched types\n   --> $DIR/async-block-control-flow-static-semantics.rs:12:43\n@@ -51,7 +51,7 @@ error[E0271]: expected `[async block@$DIR/async-block-control-flow-static-semant\n LL |     let _: &dyn Future<Output = ()> = &block;\n    |                                       ^^^^^^ expected `()`, found `u8`\n    |\n-   = note: required for the cast from `[async block@$DIR/async-block-control-flow-static-semantics.rs:14:17: 16:6]` to the object type `dyn Future<Output = ()>`\n+   = note: required for the cast from `&[async block@$DIR/async-block-control-flow-static-semantics.rs:14:17: 16:6]` to `&dyn Future<Output = ()>`\n \n error[E0308]: mismatched types\n   --> $DIR/async-block-control-flow-static-semantics.rs:49:44"}, {"sha": "adb7b9bf4bf8da1befe885e0442b5645cfde83e0", "filename": "tests/ui/async-await/issue-86507.drop_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fasync-await%2Fissue-86507.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fasync-await%2Fissue-86507.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-86507.drop_tracking.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -13,7 +13,7 @@ note: captured value is not `Send` because `&` references cannot be sent unless\n    |\n LL |                     let x = x;\n    |                             ^ has type `&T` which is not `Send`, because `T` is not `Sync`\n-   = note: required for the cast from `[async block@$DIR/issue-86507.rs:21:17: 23:18]` to the object type `dyn Future<Output = ()> + Send`\n+   = note: required for the cast from `Pin<Box<[async block@$DIR/issue-86507.rs:21:17: 23:18]>>` to `Pin<Box<(dyn Future<Output = ()> + Send + 'async_trait)>>`\n help: consider further restricting this bound\n    |\n LL |     fn bar<'me, 'async_trait, T: Send + std::marker::Sync>(x: &'me T)"}, {"sha": "adb7b9bf4bf8da1befe885e0442b5645cfde83e0", "filename": "tests/ui/async-await/issue-86507.drop_tracking_mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fasync-await%2Fissue-86507.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fasync-await%2Fissue-86507.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-86507.drop_tracking_mir.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -13,7 +13,7 @@ note: captured value is not `Send` because `&` references cannot be sent unless\n    |\n LL |                     let x = x;\n    |                             ^ has type `&T` which is not `Send`, because `T` is not `Sync`\n-   = note: required for the cast from `[async block@$DIR/issue-86507.rs:21:17: 23:18]` to the object type `dyn Future<Output = ()> + Send`\n+   = note: required for the cast from `Pin<Box<[async block@$DIR/issue-86507.rs:21:17: 23:18]>>` to `Pin<Box<(dyn Future<Output = ()> + Send + 'async_trait)>>`\n help: consider further restricting this bound\n    |\n LL |     fn bar<'me, 'async_trait, T: Send + std::marker::Sync>(x: &'me T)"}, {"sha": "adb7b9bf4bf8da1befe885e0442b5645cfde83e0", "filename": "tests/ui/async-await/issue-86507.no_drop_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fasync-await%2Fissue-86507.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fasync-await%2Fissue-86507.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-86507.no_drop_tracking.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -13,7 +13,7 @@ note: captured value is not `Send` because `&` references cannot be sent unless\n    |\n LL |                     let x = x;\n    |                             ^ has type `&T` which is not `Send`, because `T` is not `Sync`\n-   = note: required for the cast from `[async block@$DIR/issue-86507.rs:21:17: 23:18]` to the object type `dyn Future<Output = ()> + Send`\n+   = note: required for the cast from `Pin<Box<[async block@$DIR/issue-86507.rs:21:17: 23:18]>>` to `Pin<Box<(dyn Future<Output = ()> + Send + 'async_trait)>>`\n help: consider further restricting this bound\n    |\n LL |     fn bar<'me, 'async_trait, T: Send + std::marker::Sync>(x: &'me T)"}, {"sha": "7375cb6d3a0dd9681c9432772737b7efb989d4e2", "filename": "tests/ui/async-await/multiple-lifetimes/partial-relation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fpartial-relation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fpartial-relation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fpartial-relation.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -4,7 +4,7 @@\n async fn lotsa_lifetimes<'a, 'b, 'c>(a: &'a u32, b: &'b u32, c: &'c u32) -> (&'a u32, &'b u32)\n     where 'b: 'a\n {\n-    drop((a, c));\n+    let _ = (a, c);\n     (b, b)\n }\n "}, {"sha": "9163c8ed6fb2c0711fbc11ad002730463b8702c0", "filename": "tests/ui/borrowck/borrowck-closures-slice-patterns-ok.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fborrowck%2Fborrowck-closures-slice-patterns-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fborrowck%2Fborrowck-closures-slice-patterns-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-closures-slice-patterns-ok.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1,6 +1,7 @@\n // Check that closure captures for slice patterns are inferred correctly\n \n #![allow(unused_variables)]\n+#![allow(drop_ref)]\n \n // run-pass\n "}, {"sha": "a88b323e0bf1ec2c33e140bf5ff122141e130fc3", "filename": "tests/ui/borrowck/borrowck-field-sensitivity-rpass.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fborrowck%2Fborrowck-field-sensitivity-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fborrowck%2Fborrowck-field-sensitivity-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-field-sensitivity-rpass.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n #![allow(unused_mut)]\n #![allow(unused_variables)]\n+#![allow(drop_copy)]\n // pretty-expanded FIXME #23616\n \n struct A { a: isize, b: Box<isize> }"}, {"sha": "40c6bfeeb434b0bc12d63a7ccb825cf5fe08ef67", "filename": "tests/ui/borrowck/borrowck-use-mut-borrow-rpass.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fborrowck%2Fborrowck-use-mut-borrow-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fborrowck%2Fborrowck-use-mut-borrow-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-use-mut-borrow-rpass.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1,6 +1,8 @@\n // run-pass\n // pretty-expanded FIXME #23616\n \n+#![allow(drop_copy)]\n+\n struct A { a: isize, b: Box<isize> }\n \n fn field_copy_after_field_borrow() {"}, {"sha": "e468f6be791fe9b653d9425bdefaf9323a141021", "filename": "tests/ui/closure_context/issue-26046-fn-mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -9,7 +9,7 @@ LL |         num += 1;\n LL |     Box::new(closure)\n    |     ----------------- the requirement to implement `Fn` derives from here\n    |\n-   = note: required for the cast from `[closure@$DIR/issue-26046-fn-mut.rs:4:19: 4:21]` to the object type `dyn Fn()`\n+   = note: required for the cast from `Box<[closure@$DIR/issue-26046-fn-mut.rs:4:19: 4:21]>` to `Box<(dyn Fn() + 'static)>`\n \n error: aborting due to previous error\n "}, {"sha": "41f60327ce061d33f5b98c169b61f35b2b988a54", "filename": "tests/ui/closure_context/issue-26046-fn-once.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fclosure_context%2Fissue-26046-fn-once.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fclosure_context%2Fissue-26046-fn-once.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosure_context%2Fissue-26046-fn-once.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -9,7 +9,7 @@ LL |         vec\n LL |     Box::new(closure)\n    |     ----------------- the requirement to implement `Fn` derives from here\n    |\n-   = note: required for the cast from `[closure@$DIR/issue-26046-fn-once.rs:4:19: 4:26]` to the object type `dyn Fn() -> Vec<u8>`\n+   = note: required for the cast from `Box<[closure@$DIR/issue-26046-fn-once.rs:4:19: 4:26]>` to `Box<(dyn Fn() -> Vec<u8> + 'static)>`\n \n error: aborting due to previous error\n "}, {"sha": "bc7295a0826f15c1088450d44d22fba7e76213cb", "filename": "tests/ui/closures/2229_closure_analysis/migrations/issue-78720.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n \n #![warn(rust_2021_incompatible_closure_captures)]\n+#![allow(drop_ref, drop_copy)]\n \n fn main() {\n     if let a = \"\" {"}, {"sha": "2609e2951ec5487ba42ca5f1b4fb8e8bee87cc22", "filename": "tests/ui/closures/2229_closure_analysis/migrations/issue-78720.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1,5 +1,5 @@\n warning: irrefutable `if let` pattern\n-  --> $DIR/issue-78720.rs:6:8\n+  --> $DIR/issue-78720.rs:7:8\n    |\n LL |     if let a = \"\" {\n    |        ^^^^^^^^^^"}, {"sha": "0f15f664e757e8e86e11d69f4cb968914b1e39db", "filename": "tests/ui/closures/2229_closure_analysis/optimization/edge_case_run_pass.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Foptimization%2Fedge_case_run_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Foptimization%2Fedge_case_run_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Foptimization%2Fedge_case_run_pass.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -3,6 +3,7 @@\n \n #![allow(unused)]\n #![allow(dead_code)]\n+#![allow(drop_ref)]\n \n struct Int(i32);\n struct B<'a>(&'a i32);"}, {"sha": "a097424a02172cb2ba5597bf272ece9f000dc858", "filename": "tests/ui/closures/2229_closure_analysis/run_pass/drop_then_use_fake_reads.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdrop_then_use_fake_reads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdrop_then_use_fake_reads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdrop_then_use_fake_reads.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1,6 +1,8 @@\n // edition:2021\n // check-pass\n+\n #![feature(rustc_attrs)]\n+#![allow(drop_ref)]\n \n fn main() {\n     let mut x = 1;"}, {"sha": "b976f70acf76ac1812d81d11e311ffdb72abbc3f", "filename": "tests/ui/coercion/coerce-issue-49593-box-never-windows.nofallback.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never-windows.nofallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never-windows.nofallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never-windows.nofallback.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -4,15 +4,15 @@ error[E0277]: the trait bound `(): std::error::Error` is not satisfied\n LL |     /* *mut $0 is coerced to Box<dyn Error> here */ Box::<_ /* ! */>::new(x)\n    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::error::Error` is not implemented for `()`\n    |\n-   = note: required for the cast from `()` to the object type `dyn std::error::Error`\n+   = note: required for the cast from `Box<()>` to `Box<(dyn std::error::Error + 'static)>`\n \n error[E0277]: the trait bound `(): std::error::Error` is not satisfied\n   --> $DIR/coerce-issue-49593-box-never-windows.rs:23:49\n    |\n LL |     /* *mut $0 is coerced to *mut Error here */ raw_ptr_box::<_ /* ! */>(x)\n    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::error::Error` is not implemented for `()`\n    |\n-   = note: required for the cast from `()` to the object type `(dyn std::error::Error + 'static)`\n+   = note: required for the cast from `*mut ()` to `*mut (dyn std::error::Error + 'static)`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0d98fa93e5a4be8a541f76336ad62d0188434098", "filename": "tests/ui/coercion/coerce-issue-49593-box-never.nofallback.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.nofallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.nofallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.nofallback.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -4,15 +4,15 @@ error[E0277]: the trait bound `(): std::error::Error` is not satisfied\n LL |     /* *mut $0 is coerced to Box<dyn Error> here */ Box::<_ /* ! */>::new(x)\n    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::error::Error` is not implemented for `()`\n    |\n-   = note: required for the cast from `()` to the object type `dyn std::error::Error`\n+   = note: required for the cast from `Box<()>` to `Box<(dyn std::error::Error + 'static)>`\n \n error[E0277]: the trait bound `(): std::error::Error` is not satisfied\n   --> $DIR/coerce-issue-49593-box-never.rs:23:49\n    |\n LL |     /* *mut $0 is coerced to *mut Error here */ raw_ptr_box::<_ /* ! */>(x)\n    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::error::Error` is not implemented for `()`\n    |\n-   = note: required for the cast from `()` to the object type `(dyn std::error::Error + 'static)`\n+   = note: required for the cast from `*mut ()` to `*mut (dyn std::error::Error + 'static)`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "481d77728b9efb8bf323c690c009f9da231c84b5", "filename": "tests/ui/const-generics/defaults/trait_objects_fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -5,7 +5,7 @@ LL |     foo(&10_u32);\n    |         ^^^^^^^ the trait `Trait` is not implemented for `u32`\n    |\n    = help: the trait `Trait<2>` is implemented for `u32`\n-   = note: required for the cast from `u32` to the object type `dyn Trait`\n+   = note: required for the cast from `&u32` to `&dyn Trait`\n \n error[E0277]: the trait bound `bool: Traitor<_>` is not satisfied\n   --> $DIR/trait_objects_fail.rs:28:9\n@@ -14,7 +14,7 @@ LL |     bar(&true);\n    |         ^^^^^ the trait `Traitor<_>` is not implemented for `bool`\n    |\n    = help: the trait `Traitor<2, 3>` is implemented for `bool`\n-   = note: required for the cast from `bool` to the object type `dyn Traitor<_>`\n+   = note: required for the cast from `&bool` to `&dyn Traitor<_>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "acdd6a54cf4ecd33ba5f6a737c6b52cbc1eaf380", "filename": "tests/ui/consts/const_forget.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fconsts%2Fconst_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fconsts%2Fconst_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst_forget.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n \n+#![allow(forget_copy)]\n+\n use std::mem::forget;\n \n const _: () = forget(0i32);"}, {"sha": "b3821f467b617cdaff6f4a8c2a8340b7ac645049", "filename": "tests/ui/consts/issue-104155.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fconsts%2Fissue-104155.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fconsts%2Fissue-104155.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-104155.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1,4 +1,7 @@\n // check-pass\n+\n+#![allow(forget_copy)]\n+\n const _: () = core::mem::forget(Box::<u32>::default);\n const _: () = core::mem::forget(|| Box::<u32>::default());\n "}, {"sha": "8d1d0b4fcdf02e8dfa5e5c0577308e989c29802c", "filename": "tests/ui/crate-leading-sep.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fcrate-leading-sep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fcrate-leading-sep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrate-leading-sep.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1,6 +1,8 @@\n // run-pass\n // pretty-expanded FIXME #23616\n \n+#![allow(drop_copy)]\n+\n fn main() {\n     use ::std::mem;\n     mem::drop(2_usize);"}, {"sha": "31b18b2df984416719b6eb2663336bf606c541ed", "filename": "tests/ui/custom_test_frameworks/mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fcustom_test_frameworks%2Fmismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fcustom_test_frameworks%2Fmismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcustom_test_frameworks%2Fmismatch.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -6,7 +6,7 @@ LL | #[test]\n LL | fn wrong_kind(){}\n    | ^^^^^^^^^^^^^^^^^ the trait `Testable` is not implemented for `TestDescAndFn`\n    |\n-   = note: required for the cast from `TestDescAndFn` to the object type `dyn Testable`\n+   = note: required for the cast from `&TestDescAndFn` to `&dyn Testable`\n    = note: this error originates in the attribute macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "52f415037d350a90c08a13a50078808a38dbf17e", "filename": "tests/ui/diagnostic-width/E0271.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fdiagnostic-width%2FE0271.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fdiagnostic-width%2FE0271.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiagnostic-width%2FE0271.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -15,8 +15,8 @@ note: expected this to be `Foo`\n    |\n LL |     type Error = E;\n    |                  ^\n-   = note: required for the cast from `Result<Result<..., ...>, ...>` to the object type `dyn Future<Error = Foo>`\n-   = note: the full name for the casted type has been written to '$TEST_BUILD_DIR/diagnostic-width/E0271/E0271.long-type-hash.txt'\n+   = note: required for the cast from `Box<Result<..., ...>>` to `Box<(dyn Future<Error = Foo> + 'static)>`\n+   = note: the full name for the source type has been written to '$TEST_BUILD_DIR/diagnostic-width/E0271/E0271.long-type-hash.txt'\n \n error: aborting due to previous error\n "}, {"sha": "ff100cd941fd6158279ff447a1f103cea3882e44", "filename": "tests/ui/drop/dropck-eyepatch-manuallydrop.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fdrop%2Fdropck-eyepatch-manuallydrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fdrop%2Fdropck-eyepatch-manuallydrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop%2Fdropck-eyepatch-manuallydrop.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -0,0 +1,22 @@\n+// check-pass\n+//! This test checks that dropck knows that ManuallyDrop does not drop its field.\n+#![feature(dropck_eyepatch)]\n+\n+use std::mem::ManuallyDrop;\n+\n+struct S<T>(ManuallyDrop<T>);\n+\n+unsafe impl<#[may_dangle] T> Drop for S<T> {\n+    fn drop(&mut self) {}\n+}\n+\n+struct NonTrivialDrop<'a>(&'a str);\n+impl<'a> Drop for NonTrivialDrop<'a> {\n+    fn drop(&mut self) {}\n+}\n+\n+fn main() {\n+    let s = String::from(\"string\");\n+    let _t = S(ManuallyDrop::new(NonTrivialDrop(&s)));\n+    drop(s);\n+}"}, {"sha": "659d35db6575ae6940d185a25aaab5bd8c29d109", "filename": "tests/ui/drop/repeat-drop.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fdrop%2Frepeat-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fdrop%2Frepeat-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop%2Frepeat-drop.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1,6 +1,8 @@\n // run-pass\n // needs-unwind\n \n+#![allow(drop_ref, drop_copy)]\n+\n static mut CHECK: usize = 0;\n \n struct DropChecker(usize);"}, {"sha": "2c75518c298a9ab1b942c44c76f53c0f8b27d4ea", "filename": "tests/ui/dst/dst-bad-coerce1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fdst%2Fdst-bad-coerce1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fdst%2Fdst-bad-coerce1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fdst-bad-coerce1.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -15,7 +15,7 @@ error[E0277]: the trait bound `Foo: Bar` is not satisfied\n LL |     let f3: &Fat<dyn Bar> = f2;\n    |                             ^^ the trait `Bar` is not implemented for `Foo`\n    |\n-   = note: required for the cast from `Foo` to the object type `dyn Bar`\n+   = note: required for the cast from `&Fat<Foo>` to `&Fat<dyn Bar>`\n \n error[E0308]: mismatched types\n   --> $DIR/dst-bad-coerce1.rs:28:27\n@@ -34,7 +34,7 @@ error[E0277]: the trait bound `Foo: Bar` is not satisfied\n LL |     let f3: &(dyn Bar,) = f2;\n    |                           ^^ the trait `Bar` is not implemented for `Foo`\n    |\n-   = note: required for the cast from `Foo` to the object type `dyn Bar`\n+   = note: required for the cast from `&(Foo,)` to `&(dyn Bar,)`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "d5e464aed4ba75983aebef59e2c157ed1837d533", "filename": "tests/ui/dst/dst-object-from-unsized-type.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -6,7 +6,7 @@ LL | fn test1<T: ?Sized + Foo>(t: &T) {\n LL |     let u: &dyn Foo = t;\n    |                       ^ doesn't have a size known at compile-time\n    |\n-   = note: required for the cast from `T` to the object type `dyn Foo`\n+   = note: required for the cast from `&T` to `&dyn Foo`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn test1<T: ?Sized + Foo>(t: &T) {\n@@ -21,7 +21,7 @@ LL | fn test2<T: ?Sized + Foo>(t: &T) {\n LL |     let v: &dyn Foo = t as &dyn Foo;\n    |                       ^ doesn't have a size known at compile-time\n    |\n-   = note: required for the cast from `T` to the object type `dyn Foo`\n+   = note: required for the cast from `&T` to `&dyn Foo`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn test2<T: ?Sized + Foo>(t: &T) {\n@@ -35,7 +35,7 @@ LL |     let _: &[&dyn Foo] = &[\"hi\"];\n    |                            ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n-   = note: required for the cast from `str` to the object type `dyn Foo`\n+   = note: required for the cast from `&'static str` to `&dyn Foo`\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n   --> $DIR/dst-object-from-unsized-type.rs:23:23\n@@ -44,7 +44,7 @@ LL |     let _: &dyn Foo = x as &dyn Foo;\n    |                       ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[u8]`\n-   = note: required for the cast from `[u8]` to the object type `dyn Foo`\n+   = note: required for the cast from `&[u8]` to `&dyn Foo`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "a2cc10a4b22c073936f2fb12169d57801397a06f", "filename": "tests/ui/enum-discriminant/auxiliary/discr-foreign-dep.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fenum-discriminant%2Fauxiliary%2Fdiscr-foreign-dep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fenum-discriminant%2Fauxiliary%2Fdiscr-foreign-dep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum-discriminant%2Fauxiliary%2Fdiscr-foreign-dep.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -0,0 +1,7 @@\n+#[derive(Default)]\n+pub enum Foo {\n+    A(u32),\n+    #[default]\n+    B,\n+    C(u32),\n+}"}, {"sha": "e7123b3445230273b03c3253f9c31c7735d048a1", "filename": "tests/ui/enum-discriminant/discr-foreign.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fenum-discriminant%2Fdiscr-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fenum-discriminant%2Fdiscr-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum-discriminant%2Fdiscr-foreign.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -0,0 +1,11 @@\n+// aux-build:discr-foreign-dep.rs\n+// build-pass\n+\n+extern crate discr_foreign_dep;\n+\n+fn main() {\n+    match Default::default() {\n+        discr_foreign_dep::Foo::A(_) => {}\n+        _ => {}\n+    }\n+}"}, {"sha": "0bc4feed329d36edf1a0cba9dd710ffb9c3ef846", "filename": "tests/ui/explicit/explicit-call-to-supertrait-dtor.fixed", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.fixed?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1,4 +1,7 @@\n // run-rustfix\n+\n+#![allow(drop_ref)]\n+\n struct Foo {\n     x: isize\n }"}, {"sha": "26ae6698d669dfaefb6e8a9d12ee846f377a0356", "filename": "tests/ui/explicit/explicit-call-to-supertrait-dtor.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1,4 +1,7 @@\n // run-rustfix\n+\n+#![allow(drop_ref)]\n+\n struct Foo {\n     x: isize\n }"}, {"sha": "c70671173491e7b589067dc52f6b5a653cbde6e8", "filename": "tests/ui/explicit/explicit-call-to-supertrait-dtor.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1,5 +1,5 @@\n error[E0040]: explicit use of destructor method\n-  --> $DIR/explicit-call-to-supertrait-dtor.rs:19:14\n+  --> $DIR/explicit-call-to-supertrait-dtor.rs:22:14\n    |\n LL |         self.drop();\n    |         -----^^^^--"}, {"sha": "cb265aa7f25b8b82372d7497dfd7f832bd68c1bb", "filename": "tests/ui/feature-gates/feature-gate-cfg_overflow_checks.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ffeature-gates%2Ffeature-gate-cfg_overflow_checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ffeature-gates%2Ffeature-gate-cfg_overflow_checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-cfg_overflow_checks.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -0,0 +1,6 @@\n+#![crate_type = \"lib\"]\n+\n+#[cfg(overflow_checks)] //~ ERROR `cfg(overflow_checks)` is experimental\n+pub fn cast(v: i64)->u32{\n+    todo!()\n+}"}, {"sha": "79aba7945f6abd66987967f5c69ae8364e1719b9", "filename": "tests/ui/feature-gates/feature-gate-cfg_overflow_checks.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ffeature-gates%2Ffeature-gate-cfg_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ffeature-gates%2Ffeature-gate-cfg_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-cfg_overflow_checks.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: `cfg(overflow_checks)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg_overflow_checks.rs:3:7\n+   |\n+LL | #[cfg(overflow_checks)]\n+   |       ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #111466 <https://github.com/rust-lang/rust/issues/111466> for more information\n+   = help: add `#![feature(cfg_overflow_checks)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "303700c7ab4f584b5a8ccc45e30f6e7ac995efc9", "filename": "tests/ui/feature-gates/feature-gate-dispatch-from-dyn-missing-impl.stderr", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ffeature-gates%2Ffeature-gate-dispatch-from-dyn-missing-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ffeature-gates%2Ffeature-gate-dispatch-from-dyn-missing-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-dispatch-from-dyn-missing-impl.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -31,14 +31,7 @@ LL | trait Trait {\n    |       ----- this trait cannot be made into an object...\n LL |     fn ptr(self: Ptr<Self>);\n    |                  ^^^^^^^^^ ...because method `ptr`'s `self` parameter cannot be dispatched on\n-note: required for `Ptr<{integer}>` to implement `CoerceUnsized<Ptr<dyn Trait>>`\n-  --> $DIR/feature-gate-dispatch-from-dyn-missing-impl.rs:20:40\n-   |\n-LL | impl<T: Unsize<U> + ?Sized, U: ?Sized> CoerceUnsized<Ptr<U>> for Ptr<T> {}\n-   |         ---------                      ^^^^^^^^^^^^^^^^^^^^^     ^^^^^^\n-   |         |\n-   |         unsatisfied trait bound introduced here\n-   = note: required by cast to type `Ptr<dyn Trait>`\n+   = note: required for the cast from `Ptr<{integer}>` to `Ptr<dyn Trait>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "dce94c9eab27588696793927d037032ecf0c52d4", "filename": "tests/ui/feature-gates/feature-gate-unsafe_pin_internals.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ffeature-gates%2Ffeature-gate-unsafe_pin_internals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ffeature-gates%2Ffeature-gate-unsafe_pin_internals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-unsafe_pin_internals.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -13,5 +13,4 @@ fn non_unsafe_pin_new_unchecked<T>(pointer: &mut T) -> Pin<&mut T> {\n fn main() {\n     let mut self_referential = PhantomPinned;\n     let _: Pin<&mut PhantomPinned> = non_unsafe_pin_new_unchecked(&mut self_referential);\n-    core::mem::forget(self_referential); // move and disable drop glue!\n }"}, {"sha": "cb46953dac3c8c9ab176eec03c278b805d7b07a6", "filename": "tests/ui/generator/drop-env.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fgenerator%2Fdrop-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fgenerator%2Fdrop-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fdrop-env.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -4,6 +4,7 @@\n //[nomiropt]compile-flags: -Z mir-opt-level=0\n \n #![feature(generators, generator_trait)]\n+#![allow(drop_copy)]\n \n use std::ops::Generator;\n use std::pin::Pin;"}, {"sha": "f7b8e198cc4bfbf798fc5e1cd8e282aef29f4a50", "filename": "tests/ui/generator/issue-57017.no_drop_tracking.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fgenerator%2Fissue-57017.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fgenerator%2Fissue-57017.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-57017.no_drop_tracking.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1,5 +1,5 @@\n error: generator cannot be sent between threads safely\n-  --> $DIR/issue-57017.rs:31:25\n+  --> $DIR/issue-57017.rs:32:25\n    |\n LL |               assert_send(g);\n    |                           ^ generator is not `Send`\n@@ -15,7 +15,7 @@ LL | |     );\n    |\n    = help: the trait `Sync` is not implemented for `copy::unsync::Client`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/issue-57017.rs:29:28\n+  --> $DIR/issue-57017.rs:30:28\n    |\n LL |               let g = move || match drop(&$name::unsync::Client::default()) {\n    |                                          --------------------------------- has type `&copy::unsync::Client` which is not `Send`\n@@ -33,14 +33,14 @@ LL | |         }\n LL | |     );\n    | |_____- in this macro invocation\n note: required by a bound in `assert_send`\n-  --> $DIR/issue-57017.rs:51:19\n+  --> $DIR/issue-57017.rs:52:19\n    |\n LL | fn assert_send<T: Send>(_thing: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n    = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/issue-57017.rs:43:25\n+  --> $DIR/issue-57017.rs:44:25\n    |\n LL |               assert_send(g);\n    |                           ^ generator is not `Send`\n@@ -54,9 +54,9 @@ LL | |         }\n LL | |     );\n    | |_____- in this macro invocation\n    |\n-   = help: within `[generator@$DIR/issue-57017.rs:40:21: 40:28]`, the trait `Send` is not implemented for `copy::unsend::Client`\n+   = help: within `[generator@$DIR/issue-57017.rs:41:21: 41:28]`, the trait `Send` is not implemented for `copy::unsend::Client`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/issue-57017.rs:41:28\n+  --> $DIR/issue-57017.rs:42:28\n    |\n LL |               let g = move || match drop($name::unsend::Client::default()) {\n    |                                          -------------------------------- has type `copy::unsend::Client` which is not `Send`\n@@ -74,14 +74,14 @@ LL | |         }\n LL | |     );\n    | |_____- in this macro invocation\n note: required by a bound in `assert_send`\n-  --> $DIR/issue-57017.rs:51:19\n+  --> $DIR/issue-57017.rs:52:19\n    |\n LL | fn assert_send<T: Send>(_thing: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n    = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/issue-57017.rs:31:25\n+  --> $DIR/issue-57017.rs:32:25\n    |\n LL |               assert_send(g);\n    |                           ^ generator is not `Send`\n@@ -97,7 +97,7 @@ LL | |     );\n    |\n    = help: the trait `Sync` is not implemented for `derived_drop::unsync::Client`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/issue-57017.rs:29:28\n+  --> $DIR/issue-57017.rs:30:28\n    |\n LL |               let g = move || match drop(&$name::unsync::Client::default()) {\n    |                                          --------------------------------- has type `&derived_drop::unsync::Client` which is not `Send`\n@@ -115,14 +115,14 @@ LL | |         }\n LL | |     );\n    | |_____- in this macro invocation\n note: required by a bound in `assert_send`\n-  --> $DIR/issue-57017.rs:51:19\n+  --> $DIR/issue-57017.rs:52:19\n    |\n LL | fn assert_send<T: Send>(_thing: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n    = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/issue-57017.rs:43:25\n+  --> $DIR/issue-57017.rs:44:25\n    |\n LL |               assert_send(g);\n    |                           ^ generator is not `Send`\n@@ -136,9 +136,9 @@ LL | |         }\n LL | |     );\n    | |_____- in this macro invocation\n    |\n-   = help: within `[generator@$DIR/issue-57017.rs:40:21: 40:28]`, the trait `Send` is not implemented for `derived_drop::unsend::Client`\n+   = help: within `[generator@$DIR/issue-57017.rs:41:21: 41:28]`, the trait `Send` is not implemented for `derived_drop::unsend::Client`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/issue-57017.rs:41:28\n+  --> $DIR/issue-57017.rs:42:28\n    |\n LL |               let g = move || match drop($name::unsend::Client::default()) {\n    |                                          -------------------------------- has type `derived_drop::unsend::Client` which is not `Send`\n@@ -156,14 +156,14 @@ LL | |         }\n LL | |     );\n    | |_____- in this macro invocation\n note: required by a bound in `assert_send`\n-  --> $DIR/issue-57017.rs:51:19\n+  --> $DIR/issue-57017.rs:52:19\n    |\n LL | fn assert_send<T: Send>(_thing: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n    = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/issue-57017.rs:31:25\n+  --> $DIR/issue-57017.rs:32:25\n    |\n LL |               assert_send(g);\n    |                           ^ generator is not `Send`\n@@ -179,7 +179,7 @@ LL | |     );\n    |\n    = help: the trait `Sync` is not implemented for `significant_drop::unsync::Client`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/issue-57017.rs:29:28\n+  --> $DIR/issue-57017.rs:30:28\n    |\n LL |               let g = move || match drop(&$name::unsync::Client::default()) {\n    |                                          --------------------------------- has type `&significant_drop::unsync::Client` which is not `Send`\n@@ -197,14 +197,14 @@ LL | |         }\n LL | |     );\n    | |_____- in this macro invocation\n note: required by a bound in `assert_send`\n-  --> $DIR/issue-57017.rs:51:19\n+  --> $DIR/issue-57017.rs:52:19\n    |\n LL | fn assert_send<T: Send>(_thing: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n    = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/issue-57017.rs:43:25\n+  --> $DIR/issue-57017.rs:44:25\n    |\n LL |               assert_send(g);\n    |                           ^ generator is not `Send`\n@@ -218,9 +218,9 @@ LL | |         }\n LL | |     );\n    | |_____- in this macro invocation\n    |\n-   = help: within `[generator@$DIR/issue-57017.rs:40:21: 40:28]`, the trait `Send` is not implemented for `significant_drop::unsend::Client`\n+   = help: within `[generator@$DIR/issue-57017.rs:41:21: 41:28]`, the trait `Send` is not implemented for `significant_drop::unsend::Client`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/issue-57017.rs:41:28\n+  --> $DIR/issue-57017.rs:42:28\n    |\n LL |               let g = move || match drop($name::unsend::Client::default()) {\n    |                                          -------------------------------- has type `significant_drop::unsend::Client` which is not `Send`\n@@ -238,7 +238,7 @@ LL | |         }\n LL | |     );\n    | |_____- in this macro invocation\n note: required by a bound in `assert_send`\n-  --> $DIR/issue-57017.rs:51:19\n+  --> $DIR/issue-57017.rs:52:19\n    |\n LL | fn assert_send<T: Send>(_thing: T) {}\n    |                   ^^^^ required by this bound in `assert_send`"}, {"sha": "918d233bf4ee6436de8fb60304290379bebbe9a1", "filename": "tests/ui/generator/issue-57017.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fgenerator%2Fissue-57017.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fgenerator%2Fissue-57017.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-57017.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -5,6 +5,7 @@\n // [drop_tracking_mir] build-pass\n \n #![feature(generators, negative_impls)]\n+#![allow(drop_ref, drop_copy)]\n \n macro_rules! type_combinations {\n     ("}, {"sha": "adba800e25aeb98687e892904c9edd8d90afdcbf", "filename": "tests/ui/generator/non-static-is-unpin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fgenerator%2Fnon-static-is-unpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fgenerator%2Fnon-static-is-unpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fnon-static-is-unpin.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -3,6 +3,7 @@\n // run-pass\n \n #![feature(generators, generator_trait)]\n+#![allow(drop_copy)]\n \n use std::marker::{PhantomPinned, Unpin};\n "}, {"sha": "19618f8d0aa551187f6e08ae0b9ccaf0f71b577e", "filename": "tests/ui/generator/resume-arg-size.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fgenerator%2Fresume-arg-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fgenerator%2Fresume-arg-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fresume-arg-size.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1,4 +1,5 @@\n #![feature(generators)]\n+#![allow(drop_copy)]\n \n // run-pass\n "}, {"sha": "370329b9f8373598c08a5e1f4ca48c1e6028a9b2", "filename": "tests/ui/generic-associated-types/issue-76535.base.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fgeneric-associated-types%2Fissue-76535.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fgeneric-associated-types%2Fissue-76535.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-76535.base.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -43,8 +43,7 @@ LL | pub trait SuperTrait {\n LL |     type SubType<'a>: SubTrait where Self: 'a;\n    |          ^^^^^^^ ...because it contains the generic associated type `SubType`\n    = help: consider moving `SubType` to another trait\n-   = note: required for `Box<SuperStruct>` to implement `CoerceUnsized<Box<dyn SuperTrait<SubType = SubStruct<'_>>>>`\n-   = note: required by cast to type `Box<dyn SuperTrait<SubType = SubStruct<'_>>>`\n+   = note: required for the cast from `Box<SuperStruct>` to `Box<dyn SuperTrait<SubType = SubStruct<'_>>>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "ad704f5e9f01cc9c4a34555bcb1cccabf189800e", "filename": "tests/ui/generic-associated-types/issue-79422.base.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fgeneric-associated-types%2Fissue-79422.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fgeneric-associated-types%2Fissue-79422.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-79422.base.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -43,8 +43,7 @@ LL | trait MapLike<K, V> {\n LL |     type VRefCont<'a>: RefCont<'a, V> where Self: 'a;\n    |          ^^^^^^^^ ...because it contains the generic associated type `VRefCont`\n    = help: consider moving `VRefCont` to another trait\n-   = note: required for `Box<BTreeMap<u8, u8>>` to implement `CoerceUnsized<Box<dyn MapLike<u8, u8, VRefCont = (dyn RefCont<'_, u8> + 'static)>>>`\n-   = note: required by cast to type `Box<dyn MapLike<u8, u8, VRefCont = (dyn RefCont<'_, u8> + 'static)>>`\n+   = note: required for the cast from `Box<BTreeMap<u8, u8>>` to `Box<dyn MapLike<u8, u8, VRefCont = (dyn RefCont<'_, u8> + 'static)>>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "14492266cdaf3065b87482f2c458ceba73a4ad35", "filename": "tests/ui/generic-associated-types/issue-79422.extended.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fgeneric-associated-types%2Fissue-79422.extended.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fgeneric-associated-types%2Fissue-79422.extended.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-79422.extended.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -27,7 +27,7 @@ LL |     type VRefCont<'a> = &'a V where Self: 'a;\n    |                         ^^^^^\n    = note: expected trait object `(dyn RefCont<'_, u8> + 'static)`\n                  found reference `&u8`\n-   = note: required for the cast from `BTreeMap<u8, u8>` to the object type `dyn MapLike<u8, u8, VRefCont = (dyn RefCont<'_, u8> + 'static)>`\n+   = note: required for the cast from `Box<BTreeMap<u8, u8>>` to `Box<dyn MapLike<u8, u8, VRefCont = (dyn RefCont<'_, u8> + 'static)>>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7de906e7ef3f3e663615c94f0eebfd4416ee23d0", "filename": "tests/ui/generic-associated-types/issue-88595.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fgeneric-associated-types%2Fissue-88595.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fgeneric-associated-types%2Fissue-88595.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-88595.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -19,4 +19,5 @@ impl<'a> A<'a> for C {\n     type B<'b> = impl Clone;\n \n     fn a(&'a self) -> Self::B<'a> {} //~ ERROR: non-defining opaque type use in defining scope\n+    //~^ ERROR: mismatched types\n }"}, {"sha": "d6caed854599325d773e546918471bf918e0ee1a", "filename": "tests/ui/generic-associated-types/issue-88595.stderr", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fgeneric-associated-types%2Fissue-88595.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fgeneric-associated-types%2Fissue-88595.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-88595.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1,16 +1,34 @@\n error: non-defining opaque type use in defining scope\n-  --> $DIR/issue-88595.rs:21:35\n+  --> $DIR/issue-88595.rs:21:5\n    |\n LL |     fn a(&'a self) -> Self::B<'a> {}\n-   |                                   ^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ generic argument `'a` used twice\n    |\n-note: lifetime used multiple times\n-  --> $DIR/issue-88595.rs:18:6\n+note: for this opaque type\n+  --> $DIR/issue-88595.rs:19:18\n    |\n-LL | impl<'a> A<'a> for C {\n-   |      ^^\n LL |     type B<'b> = impl Clone;\n-   |            ^^\n+   |                  ^^^^^^^^^^\n \n-error: aborting due to previous error\n+error[E0308]: mismatched types\n+  --> $DIR/issue-88595.rs:21:23\n+   |\n+LL |     type B<'b> = impl Clone;\n+   |                  ---------- the expected opaque type\n+LL |\n+LL |     fn a(&'a self) -> Self::B<'a> {}\n+   |        -              ^^^^^^^^^^^ expected opaque type, found `()`\n+   |        |\n+   |        implicitly returns `()` as its body has no tail or `return` expression\n+   |\n+   = note: expected opaque type `<C as A<'a>>::B<'a>`\n+                found unit type `()`\n+note: this item must have the opaque type in its signature in order to be able to register hidden types\n+  --> $DIR/issue-88595.rs:21:5\n+   |\n+LL |     fn a(&'a self) -> Self::B<'a> {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "214267372bf87aa739a2ddf1eb23a45401a5fffd", "filename": "tests/ui/hygiene/stdlib-prelude-from-opaque-late.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fhygiene%2Fstdlib-prelude-from-opaque-late.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fhygiene%2Fstdlib-prelude-from-opaque-late.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Fstdlib-prelude-from-opaque-late.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1,6 +1,7 @@\n // check-pass\n \n #![feature(decl_macro)]\n+#![allow(drop_copy)]\n \n macro mac() {\n     mod m {"}, {"sha": "8783682dec47d31fe96d3ee1ec163889fa5cfa20", "filename": "tests/ui/illegal-ufcs-drop.fixed", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fillegal-ufcs-drop.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fillegal-ufcs-drop.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fillegal-ufcs-drop.fixed?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1,4 +1,7 @@\n // run-rustfix\n+\n+#![allow(drop_ref)]\n+\n struct Foo;\n \n impl Drop for Foo {"}, {"sha": "29774306ec6f513ffed8715aa96782bd61f3c4e6", "filename": "tests/ui/illegal-ufcs-drop.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fillegal-ufcs-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fillegal-ufcs-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fillegal-ufcs-drop.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1,4 +1,7 @@\n // run-rustfix\n+\n+#![allow(drop_ref)]\n+\n struct Foo;\n \n impl Drop for Foo {"}, {"sha": "7a5c0612c07eb425290fdc1ea65c90af0bbc309e", "filename": "tests/ui/illegal-ufcs-drop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fillegal-ufcs-drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fillegal-ufcs-drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fillegal-ufcs-drop.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1,5 +1,5 @@\n error[E0040]: explicit use of destructor method\n-  --> $DIR/illegal-ufcs-drop.rs:9:5\n+  --> $DIR/illegal-ufcs-drop.rs:12:5\n    |\n LL |     Drop::drop(&mut Foo)\n    |     ^^^^^^^^^^"}, {"sha": "c395b4195a05fcbfcac2b2366134239cb42caf6f", "filename": "tests/ui/impl-trait/in-assoc-type-unconstrained.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fimpl-trait%2Fin-assoc-type-unconstrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fimpl-trait%2Fin-assoc-type-unconstrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-assoc-type-unconstrained.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -0,0 +1,27 @@\n+#![feature(impl_trait_in_assoc_type)]\n+\n+mod compare_ty {\n+    trait Trait {\n+        type Ty: IntoIterator<Item = ()>;\n+    }\n+    impl Trait for () {\n+        type Ty = Option<impl Sized>;\n+        //~^ ERROR: unconstrained opaque type\n+        //~| ERROR: type mismatch resolving `<Option<<() as Trait>::Ty::{opaque#0}> as IntoIterator>::Item == ()`\n+    }\n+}\n+\n+mod compare_method {\n+    trait Trait {\n+        type Ty;\n+        fn method() -> Self::Ty;\n+    }\n+    impl Trait for () {\n+        type Ty = impl Sized;\n+        //~^ ERROR: unconstrained opaque type\n+        fn method() -> () {}\n+        //~^ ERROR: method `method` has an incompatible type for trait\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "1097cd0f452a870b542c43fbcb91c52708641eaf", "filename": "tests/ui/impl-trait/in-assoc-type-unconstrained.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fimpl-trait%2Fin-assoc-type-unconstrained.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fimpl-trait%2Fin-assoc-type-unconstrained.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-assoc-type-unconstrained.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -0,0 +1,59 @@\n+error[E0271]: type mismatch resolving `<Option<<() as Trait>::Ty::{opaque#0}> as IntoIterator>::Item == ()`\n+  --> $DIR/in-assoc-type-unconstrained.rs:8:19\n+   |\n+LL |         type Ty = Option<impl Sized>;\n+   |                   ^^^^^^^^^^^^^^^^^^ expected `()`, found opaque type\n+   |\n+   = note: expected unit type `()`\n+            found opaque type `<() as compare_ty::Trait>::Ty::{opaque#0}`\n+note: required by a bound in `compare_ty::Trait::Ty`\n+  --> $DIR/in-assoc-type-unconstrained.rs:5:31\n+   |\n+LL |         type Ty: IntoIterator<Item = ()>;\n+   |                               ^^^^^^^^^ required by this bound in `Trait::Ty`\n+\n+error: unconstrained opaque type\n+  --> $DIR/in-assoc-type-unconstrained.rs:8:26\n+   |\n+LL |         type Ty = Option<impl Sized>;\n+   |                          ^^^^^^^^^^\n+   |\n+   = note: `Ty` must be used in combination with a concrete type within the same impl\n+\n+error[E0053]: method `method` has an incompatible type for trait\n+  --> $DIR/in-assoc-type-unconstrained.rs:22:24\n+   |\n+LL |         type Ty = impl Sized;\n+   |                   ---------- the expected opaque type\n+LL |\n+LL |         fn method() -> () {}\n+   |                        ^^\n+   |                        |\n+   |                        expected opaque type, found `()`\n+   |                        help: change the output type to match the trait: `<() as compare_method::Trait>::Ty`\n+   |\n+note: type in trait\n+  --> $DIR/in-assoc-type-unconstrained.rs:17:24\n+   |\n+LL |         fn method() -> Self::Ty;\n+   |                        ^^^^^^^^\n+   = note: expected signature `fn() -> <() as compare_method::Trait>::Ty`\n+              found signature `fn()`\n+note: this item must have the opaque type in its signature in order to be able to register hidden types\n+  --> $DIR/in-assoc-type-unconstrained.rs:22:9\n+   |\n+LL |         fn method() -> () {}\n+   |         ^^^^^^^^^^^^^^^^^\n+\n+error: unconstrained opaque type\n+  --> $DIR/in-assoc-type-unconstrained.rs:20:19\n+   |\n+LL |         type Ty = impl Sized;\n+   |                   ^^^^^^^^^^\n+   |\n+   = note: `Ty` must be used in combination with a concrete type within the same impl\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0053, E0271.\n+For more information about an error, try `rustc --explain E0053`."}, {"sha": "36c54bdd6de346f83056f3b7bc2de8134cc587fb", "filename": "tests/ui/impl-trait/in-assoc-type.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fimpl-trait%2Fin-assoc-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fimpl-trait%2Fin-assoc-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-assoc-type.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -0,0 +1,21 @@\n+#![feature(impl_trait_in_assoc_type)]\n+\n+trait Foo<T> {\n+    type Bar;\n+    fn foo(&self) -> <Self as Foo<()>>::Bar\n+    where\n+        Self: Foo<()>;\n+}\n+\n+impl Foo<()> for () {\n+    type Bar = impl std::fmt::Debug;\n+    fn foo(&self) -> Self::Bar {}\n+}\n+\n+impl Foo<i32> for () {\n+    type Bar = u32;\n+    fn foo(&self) -> <Self as Foo<()>>::Bar {}\n+    //~^ ERROR: mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "f0a272dc2d5d1e267d2e55353aef81148908fb1e", "filename": "tests/ui/impl-trait/in-assoc-type.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fimpl-trait%2Fin-assoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fimpl-trait%2Fin-assoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-assoc-type.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -0,0 +1,22 @@\n+error[E0308]: mismatched types\n+  --> $DIR/in-assoc-type.rs:17:22\n+   |\n+LL |     type Bar = impl std::fmt::Debug;\n+   |                -------------------- the expected opaque type\n+...\n+LL |     fn foo(&self) -> <Self as Foo<()>>::Bar {}\n+   |        ---           ^^^^^^^^^^^^^^^^^^^^^^ expected opaque type, found `()`\n+   |        |\n+   |        implicitly returns `()` as its body has no tail or `return` expression\n+   |\n+   = note: expected opaque type `<() as Foo<()>>::Bar`\n+                found unit type `()`\n+note: this item must have the opaque type in its signature in order to be able to register hidden types\n+  --> $DIR/in-assoc-type.rs:17:5\n+   |\n+LL |     fn foo(&self) -> <Self as Foo<()>>::Bar {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "2c340a02319b2be1512222b67a82d43fadceab23", "filename": "tests/ui/impl-trait/in-trait/object-safety.current.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.current.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -42,8 +42,7 @@ LL | trait Foo {\n LL |     fn baz(&self) -> impl Debug;\n    |                      ^^^^^^^^^^ ...because method `baz` references an `impl Trait` type in its return type\n    = help: consider moving `baz` to another trait\n-   = note: required for `Box<u32>` to implement `CoerceUnsized<Box<dyn Foo>>`\n-   = note: required by cast to type `Box<dyn Foo>`\n+   = note: required for the cast from `Box<u32>` to `Box<dyn Foo>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "2c340a02319b2be1512222b67a82d43fadceab23", "filename": "tests/ui/impl-trait/in-trait/object-safety.next.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.next.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -42,8 +42,7 @@ LL | trait Foo {\n LL |     fn baz(&self) -> impl Debug;\n    |                      ^^^^^^^^^^ ...because method `baz` references an `impl Trait` type in its return type\n    = help: consider moving `baz` to another trait\n-   = note: required for `Box<u32>` to implement `CoerceUnsized<Box<dyn Foo>>`\n-   = note: required by cast to type `Box<dyn Foo>`\n+   = note: required for the cast from `Box<u32>` to `Box<dyn Foo>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "fe62a8f32888b3a5212d7709ede9574ca332c473", "filename": "tests/ui/impl-trait/recursive-type-alias-impl-trait-declaration-too-subtle.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -43,6 +43,11 @@ LL |         fn eq(&self, _other: &(Bar, i32)) -> bool {\n    |\n    = note: expected signature `fn(&b::Bar, &(b::Foo, i32)) -> _`\n               found signature `fn(&b::Bar, &(b::Bar, i32)) -> _`\n+note: this item must have the opaque type in its signature in order to be able to register hidden types\n+  --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle.rs:24:9\n+   |\n+LL |         fn eq(&self, _other: &(Bar, i32)) -> bool {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "df61aabf00a74bef1abc6f2666667f95a1b9096a", "filename": "tests/ui/issues/issue-14366.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fissues%2Fissue-14366.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fissues%2Fissue-14366.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-14366.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -5,8 +5,8 @@ LL |     let _x = \"test\" as &dyn (::std::any::Any);\n    |              ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n-   = note: required for the cast from `str` to the object type `dyn Any`\n-help: consider borrowing the value, since `&str` can be coerced into `dyn Any`\n+   = note: required for the cast from `&'static str` to `&(dyn Any + 'static)`\n+help: consider borrowing the value, since `&&'static str` can be coerced into `&(dyn Any + 'static)`\n    |\n LL |     let _x = &\"test\" as &dyn (::std::any::Any);\n    |              +"}, {"sha": "9833e559cbcdbcd64e336e0ead1616e8297cae31", "filename": "tests/ui/issues/issue-22034.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fissues%2Fissue-22034.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fissues%2Fissue-22034.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-22034.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -6,7 +6,7 @@ LL |         &mut *(ptr as *mut dyn Fn())\n    |\n    = help: the trait `Fn<()>` is not implemented for `()`\n    = note: wrap the `()` in a closure with no arguments: `|| { /* code */ }`\n-   = note: required for the cast from `()` to the object type `dyn Fn()`\n+   = note: required for the cast from `*mut ()` to `*mut dyn Fn()`\n \n error: aborting due to previous error\n "}, {"sha": "63222d25c0171450695f546ec189e5bb47ae56f6", "filename": "tests/ui/issues/issue-22872.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fissues%2Fissue-22872.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fissues%2Fissue-22872.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-22872.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -13,7 +13,7 @@ LL | impl<'b, P> Wrap<'b> for Wrapper<P>\n LL | where P: Process<'b>,\n LL |       <P as Process<'b>>::Item: Iterator {\n    |                                 -------- unsatisfied trait bound introduced here\n-   = note: required for the cast from `Wrapper<P>` to the object type `dyn for<'b> Wrap<'b>`\n+   = note: required for the cast from `Box<Wrapper<P>>` to `Box<dyn for<'b> Wrap<'b>>`\n help: consider further restricting the associated type\n    |\n LL | fn push_process<P>(process: P) where P: Process<'static>, <P as Process<'_>>::Item: Iterator {"}, {"sha": "53c1940491f844292b092e963ae3bfe9e14ca67a", "filename": "tests/ui/kindck/kindck-impl-type-params.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -11,7 +11,7 @@ LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |         ----                   ^^^^^^^^^^^     ^^^^\n    |         |\n    |         unsatisfied trait bound introduced here\n-   = note: required for the cast from `S<T>` to the object type `dyn Gettable<T>`\n+   = note: required for the cast from `&S<T>` to `&dyn Gettable<T>`\n help: consider restricting type parameter `T`\n    |\n LL | fn f<T: std::marker::Send>(val: T) {\n@@ -30,7 +30,7 @@ LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                ----            ^^^^^^^^^^^     ^^^^\n    |                |\n    |                unsatisfied trait bound introduced here\n-   = note: required for the cast from `S<T>` to the object type `dyn Gettable<T>`\n+   = note: required for the cast from `&S<T>` to `&dyn Gettable<T>`\n help: consider restricting type parameter `T`\n    |\n LL | fn f<T: std::marker::Copy>(val: T) {\n@@ -49,7 +49,7 @@ LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |         ----                   ^^^^^^^^^^^     ^^^^\n    |         |\n    |         unsatisfied trait bound introduced here\n-   = note: required for the cast from `S<T>` to the object type `dyn Gettable<T>`\n+   = note: required for the cast from `&S<T>` to `&dyn Gettable<T>`\n help: consider restricting type parameter `T`\n    |\n LL | fn g<T: std::marker::Send>(val: T) {\n@@ -68,7 +68,7 @@ LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                ----            ^^^^^^^^^^^     ^^^^\n    |                |\n    |                unsatisfied trait bound introduced here\n-   = note: required for the cast from `S<T>` to the object type `dyn Gettable<T>`\n+   = note: required for the cast from `&S<T>` to `&dyn Gettable<T>`\n help: consider restricting type parameter `T`\n    |\n LL | fn g<T: std::marker::Copy>(val: T) {\n@@ -88,7 +88,7 @@ LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                ----            ^^^^^^^^^^^     ^^^^\n    |                |\n    |                unsatisfied trait bound introduced here\n-   = note: required for the cast from `S<String>` to the object type `dyn Gettable<String>`\n+   = note: required for the cast from `Box<S<String>>` to `Box<dyn Gettable<String>>`\n \n error[E0277]: the trait bound `Foo: Copy` is not satisfied\n   --> $DIR/kindck-impl-type-params.rs:43:37\n@@ -104,7 +104,7 @@ LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                ----            ^^^^^^^^^^^     ^^^^\n    |                |\n    |                unsatisfied trait bound introduced here\n-   = note: required for the cast from `S<Foo>` to the object type `dyn Gettable<Foo>`\n+   = note: required for the cast from `Box<S<Foo>>` to `Box<dyn Gettable<Foo>>`\n help: consider annotating `Foo` with `#[derive(Copy)]`\n    |\n LL +     #[derive(Copy)]"}, {"sha": "29495176556409e58c780ddf93cc54f6611d8836", "filename": "tests/ui/kindck/kindck-inherited-copy-bound.curr.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -46,8 +46,7 @@ LL | trait Foo : Copy {\n    |       ---   ^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required for `&Box<{integer}>` to implement `CoerceUnsized<&dyn Foo>`\n-   = note: required by cast to type `&dyn Foo`\n+   = note: required for the cast from `&Box<{integer}>` to `&dyn Foo`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "3e164ebf51439649462bfbcd9906cfad9f422c00", "filename": "tests/ui/kindck/kindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -32,8 +32,7 @@ LL | trait Foo : Copy {\n    |       ---   ^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required for `&Box<i32>` to implement `CoerceUnsized<&dyn Foo>`\n-   = note: required by cast to type `&dyn Foo`\n+   = note: required for the cast from `&Box<i32>` to `&dyn Foo`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0adcd34505f0b93a95029852e91a846d1331cac2", "filename": "tests/ui/lint/drop_copy.rs", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Flint%2Fdrop_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Flint%2Fdrop_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdrop_copy.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -0,0 +1,79 @@\n+// check-pass\n+\n+#![warn(drop_copy)]\n+\n+use std::mem::drop;\n+use std::vec::Vec;\n+\n+#[derive(Copy, Clone)]\n+struct SomeStruct;\n+\n+struct AnotherStruct {\n+    x: u8,\n+    y: u8,\n+    z: Vec<u8>,\n+}\n+\n+impl Clone for AnotherStruct {\n+    fn clone(&self) -> AnotherStruct {\n+        AnotherStruct {\n+            x: self.x,\n+            y: self.y,\n+            z: self.z.clone(),\n+        }\n+    }\n+}\n+\n+fn main() {\n+    let s1 = SomeStruct {};\n+    let s2 = s1;\n+    let s3 = &s1;\n+    let mut s4 = s1;\n+    let ref s5 = s1;\n+\n+    drop(s1); //~ WARN calls to `std::mem::drop`\n+    drop(s2); //~ WARN calls to `std::mem::drop`\n+    drop(s3); //~ WARN calls to `std::mem::drop`\n+    drop(s4); //~ WARN calls to `std::mem::drop`\n+    drop(s5); //~ WARN calls to `std::mem::drop`\n+\n+    let a1 = AnotherStruct {\n+        x: 255,\n+        y: 0,\n+        z: vec![1, 2, 3],\n+    };\n+    let a2 = &a1;\n+    let mut a3 = a1.clone();\n+    let ref a4 = a1;\n+    let a5 = a1.clone();\n+\n+    drop(a2); //~ WARN calls to `std::mem::drop`\n+    drop(a3);\n+    drop(a4); //~ WARN calls to `std::mem::drop`\n+    drop(a5);\n+}\n+\n+#[allow(unused)]\n+#[allow(clippy::unit_cmp)]\n+fn issue9482(x: u8) {\n+    fn println_and<T>(t: T) -> T {\n+        println!(\"foo\");\n+        t\n+    }\n+\n+    match x {\n+        // Don't lint (copy type), we only care about side-effects\n+        0 => drop(println_and(12)),\n+        // Don't lint (no copy type), we only care about side-effects\n+        1 => drop(println_and(String::new())),\n+        2 => {\n+            // Lint, even if we only care about the side-effect, it's already in a block\n+            drop(println_and(13)); //~ WARN calls to `std::mem::drop`\n+        },\n+         // Lint, idiomatic use is only in body of `Arm`\n+        3 if drop(println_and(14)) == () => (), //~ WARN calls to `std::mem::drop`\n+        // Lint, not a fn/method call\n+        4 => drop(2),//~ WARN calls to `std::mem::drop`\n+        _ => (),\n+    }\n+}"}, {"sha": "db8e89ad295b96f73ceaeb823b754931d19ae965", "filename": "tests/ui/lint/drop_copy.stderr", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Flint%2Fdrop_copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Flint%2Fdrop_copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdrop_copy.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -0,0 +1,108 @@\n+warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n+  --> $DIR/drop_copy.rs:34:5\n+   |\n+LL |     drop(s1);\n+   |     ^^^^^--^\n+   |          |\n+   |          argument has type `SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+note: the lint level is defined here\n+  --> $DIR/drop_copy.rs:3:9\n+   |\n+LL | #![warn(drop_copy)]\n+   |         ^^^^^^^^^\n+\n+warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n+  --> $DIR/drop_copy.rs:35:5\n+   |\n+LL |     drop(s2);\n+   |     ^^^^^--^\n+   |          |\n+   |          argument has type `SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n+  --> $DIR/drop_copy.rs:36:5\n+   |\n+LL |     drop(s3);\n+   |     ^^^^^--^\n+   |          |\n+   |          argument has type `&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+   = note: `#[warn(drop_ref)]` on by default\n+\n+warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n+  --> $DIR/drop_copy.rs:37:5\n+   |\n+LL |     drop(s4);\n+   |     ^^^^^--^\n+   |          |\n+   |          argument has type `SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n+  --> $DIR/drop_copy.rs:38:5\n+   |\n+LL |     drop(s5);\n+   |     ^^^^^--^\n+   |          |\n+   |          argument has type `&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n+  --> $DIR/drop_copy.rs:50:5\n+   |\n+LL |     drop(a2);\n+   |     ^^^^^--^\n+   |          |\n+   |          argument has type `&AnotherStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n+  --> $DIR/drop_copy.rs:52:5\n+   |\n+LL |     drop(a4);\n+   |     ^^^^^--^\n+   |          |\n+   |          argument has type `&AnotherStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n+  --> $DIR/drop_copy.rs:71:13\n+   |\n+LL |             drop(println_and(13));\n+   |             ^^^^^---------------^\n+   |                  |\n+   |                  argument has type `i32`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n+  --> $DIR/drop_copy.rs:74:14\n+   |\n+LL |         3 if drop(println_and(14)) == () => (),\n+   |              ^^^^^---------------^\n+   |                   |\n+   |                   argument has type `i32`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n+  --> $DIR/drop_copy.rs:76:14\n+   |\n+LL |         4 => drop(2),\n+   |              ^^^^^-^\n+   |                   |\n+   |                   argument has type `i32`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: 10 warnings emitted\n+"}, {"sha": "db4f7569f6fa3ac64a68ce3b1f0fa056afba42db", "filename": "tests/ui/lint/drop_ref.rs", "status": "renamed", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Flint%2Fdrop_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Flint%2Fdrop_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdrop_ref.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1,42 +1,39 @@\n-#![warn(clippy::drop_ref)]\n-#![allow(clippy::toplevel_ref_arg)]\n-#![allow(clippy::map_err_ignore)]\n-#![allow(clippy::unnecessary_wraps, clippy::drop_non_drop)]\n+// check-pass\n \n-use std::mem::drop;\n+#![warn(drop_ref)]\n \n struct SomeStruct;\n \n fn main() {\n-    drop(&SomeStruct);\n+    drop(&SomeStruct); //~ WARN calls to `std::mem::drop`\n \n     let mut owned1 = SomeStruct;\n-    drop(&owned1);\n-    drop(&&owned1);\n-    drop(&mut owned1);\n-    drop(owned1); //OK\n+    drop(&owned1); //~ WARN calls to `std::mem::drop`\n+    drop(&&owned1); //~ WARN calls to `std::mem::drop`\n+    drop(&mut owned1); //~ WARN calls to `std::mem::drop`\n+    drop(owned1);\n \n     let reference1 = &SomeStruct;\n-    drop(reference1);\n+    drop(reference1); //~ WARN calls to `std::mem::drop`\n \n     let reference2 = &mut SomeStruct;\n-    drop(reference2);\n+    drop(reference2); //~ WARN calls to `std::mem::drop`\n \n     let ref reference3 = SomeStruct;\n-    drop(reference3);\n+    drop(reference3); //~ WARN calls to `std::mem::drop`\n }\n \n #[allow(dead_code)]\n fn test_generic_fn_drop<T>(val: T) {\n-    drop(&val);\n-    drop(val); //OK\n+    drop(&val); //~ WARN calls to `std::mem::drop`\n+    drop(val);\n }\n \n #[allow(dead_code)]\n fn test_similarly_named_function() {\n     fn drop<T>(_val: T) {}\n     drop(&SomeStruct); //OK; call to unrelated function which happens to have the same name\n-    std::mem::drop(&SomeStruct);\n+    std::mem::drop(&SomeStruct); //~ WARN calls to `std::mem::drop`\n }\n \n #[derive(Copy, Clone)]\n@@ -77,21 +74,26 @@ fn test_owl_result_2() -> Result<u8, ()> {\n #[allow(clippy::unit_cmp)]\n fn issue10122(x: u8) {\n     // This is a function which returns a reference and has a side-effect, which means\n-    // that calling drop() on the function is considered an idiomatic way of achieving the side-effect\n-    // in a match arm.\n+    // that calling drop() on the function is considered an idiomatic way of achieving\n+    // the side-effect in a match arm.\n     fn println_and<T>(t: &T) -> &T {\n         println!(\"foo\");\n         t\n     }\n \n     match x {\n-        0 => drop(println_and(&12)), // Don't lint (copy type), we only care about side-effects\n-        1 => drop(println_and(&String::new())), // Don't lint (no copy type), we only care about side-effects\n+        // Don't lint (copy type), we only care about side-effects\n+        0 => drop(println_and(&12)),\n+        // Don't lint (no copy type), we only care about side-effects\n+        1 => drop(println_and(&String::new())),\n         2 => {\n-            drop(println_and(&13)); // Lint, even if we only care about the side-effect, it's already in a block\n+            // Lint, even if we only care about the side-effect, it's already in a block\n+            drop(println_and(&13)); //~ WARN calls to `std::mem::drop`\n         },\n-        3 if drop(println_and(&14)) == () => (), // Lint, idiomatic use is only in body of `Arm`\n-        4 => drop(&2),                           // Lint, not a fn/method call\n+        // Lint, idiomatic use is only in body of `Arm`\n+        3 if drop(println_and(&14)) == () => (), //~ WARN calls to `std::mem::drop`\n+         // Lint, not a fn/method call\n+        4 => drop(&2), //~ WARN calls to `std::mem::drop`\n         _ => (),\n     }\n }", "previous_filename": "src/tools/clippy/tests/ui/drop_ref.rs"}, {"sha": "04c988fe99da479a0d7fceb99a3d9baed06e2804", "filename": "tests/ui/lint/drop_ref.stderr", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Flint%2Fdrop_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Flint%2Fdrop_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdrop_ref.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -0,0 +1,127 @@\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n+  --> $DIR/drop_ref.rs:8:5\n+   |\n+LL |     drop(&SomeStruct);\n+   |     ^^^^^-----------^\n+   |          |\n+   |          argument has type `&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+note: the lint level is defined here\n+  --> $DIR/drop_ref.rs:3:9\n+   |\n+LL | #![warn(drop_ref)]\n+   |         ^^^^^^^^\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n+  --> $DIR/drop_ref.rs:11:5\n+   |\n+LL |     drop(&owned1);\n+   |     ^^^^^-------^\n+   |          |\n+   |          argument has type `&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n+  --> $DIR/drop_ref.rs:12:5\n+   |\n+LL |     drop(&&owned1);\n+   |     ^^^^^--------^\n+   |          |\n+   |          argument has type `&&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n+  --> $DIR/drop_ref.rs:13:5\n+   |\n+LL |     drop(&mut owned1);\n+   |     ^^^^^-----------^\n+   |          |\n+   |          argument has type `&mut SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n+  --> $DIR/drop_ref.rs:17:5\n+   |\n+LL |     drop(reference1);\n+   |     ^^^^^----------^\n+   |          |\n+   |          argument has type `&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n+  --> $DIR/drop_ref.rs:20:5\n+   |\n+LL |     drop(reference2);\n+   |     ^^^^^----------^\n+   |          |\n+   |          argument has type `&mut SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n+  --> $DIR/drop_ref.rs:23:5\n+   |\n+LL |     drop(reference3);\n+   |     ^^^^^----------^\n+   |          |\n+   |          argument has type `&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n+  --> $DIR/drop_ref.rs:28:5\n+   |\n+LL |     drop(&val);\n+   |     ^^^^^----^\n+   |          |\n+   |          argument has type `&T`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n+  --> $DIR/drop_ref.rs:36:5\n+   |\n+LL |     std::mem::drop(&SomeStruct);\n+   |     ^^^^^^^^^^^^^^^-----------^\n+   |                    |\n+   |                    argument has type `&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n+  --> $DIR/drop_ref.rs:91:13\n+   |\n+LL |             drop(println_and(&13));\n+   |             ^^^^^----------------^\n+   |                  |\n+   |                  argument has type `&i32`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n+  --> $DIR/drop_ref.rs:94:14\n+   |\n+LL |         3 if drop(println_and(&14)) == () => (),\n+   |              ^^^^^----------------^\n+   |                   |\n+   |                   argument has type `&i32`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n+  --> $DIR/drop_ref.rs:96:14\n+   |\n+LL |         4 => drop(&2),\n+   |              ^^^^^--^\n+   |                   |\n+   |                   argument has type `&i32`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: 12 warnings emitted\n+"}, {"sha": "a6b17b76971f27c8a8f49c4e7c11751a2c609e52", "filename": "tests/ui/lint/forget_copy.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Flint%2Fforget_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Flint%2Fforget_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fforget_copy.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -0,0 +1,56 @@\n+// check-pass\n+\n+#![warn(forget_copy)]\n+\n+use std::mem::forget;\n+use std::vec::Vec;\n+\n+#[derive(Copy, Clone)]\n+struct SomeStruct;\n+\n+struct AnotherStruct {\n+    x: u8,\n+    y: u8,\n+    z: Vec<u8>,\n+}\n+\n+impl Clone for AnotherStruct {\n+    fn clone(&self) -> AnotherStruct {\n+        AnotherStruct {\n+            x: self.x,\n+            y: self.y,\n+            z: self.z.clone(),\n+        }\n+    }\n+}\n+\n+fn main() {\n+    let s1 = SomeStruct {};\n+    let s2 = s1;\n+    let s3 = &s1;\n+    let mut s4 = s1;\n+    let ref s5 = s1;\n+\n+    forget(s1); //~ WARN calls to `std::mem::forget`\n+    forget(s2); //~ WARN calls to `std::mem::forget`\n+    forget(s3); //~ WARN calls to `std::mem::forget`\n+    forget(s4); //~ WARN calls to `std::mem::forget`\n+    forget(s5); //~ WARN calls to `std::mem::forget`\n+\n+    let a1 = AnotherStruct {\n+        x: 255,\n+        y: 0,\n+        z: vec![1, 2, 3],\n+    };\n+    let a2 = &a1;\n+    let mut a3 = a1.clone();\n+    let ref a4 = a1;\n+    let a5 = a1.clone();\n+\n+    forget(a2); //~ WARN calls to `std::mem::forget`\n+    let a3 = &a1;\n+    forget(a3); //~ WARN calls to `std::mem::forget`\n+    forget(a4); //~ WARN calls to `std::mem::forget`\n+    let a5 = a1.clone();\n+    forget(a5);\n+}"}, {"sha": "37bc8a8854ee7334a52e48fe53dda22b54058431", "filename": "tests/ui/lint/forget_copy.stderr", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Flint%2Fforget_copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Flint%2Fforget_copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fforget_copy.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -0,0 +1,88 @@\n+warning: calls to `std::mem::forget` with a value that implements `Copy` does nothing\n+  --> $DIR/forget_copy.rs:34:5\n+   |\n+LL |     forget(s1);\n+   |     ^^^^^^^--^\n+   |            |\n+   |            argument has type `SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+note: the lint level is defined here\n+  --> $DIR/forget_copy.rs:3:9\n+   |\n+LL | #![warn(forget_copy)]\n+   |         ^^^^^^^^^^^\n+\n+warning: calls to `std::mem::forget` with a value that implements `Copy` does nothing\n+  --> $DIR/forget_copy.rs:35:5\n+   |\n+LL |     forget(s2);\n+   |     ^^^^^^^--^\n+   |            |\n+   |            argument has type `SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n+  --> $DIR/forget_copy.rs:36:5\n+   |\n+LL |     forget(s3);\n+   |     ^^^^^^^--^\n+   |            |\n+   |            argument has type `&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+   = note: `#[warn(forget_ref)]` on by default\n+\n+warning: calls to `std::mem::forget` with a value that implements `Copy` does nothing\n+  --> $DIR/forget_copy.rs:37:5\n+   |\n+LL |     forget(s4);\n+   |     ^^^^^^^--^\n+   |            |\n+   |            argument has type `SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n+  --> $DIR/forget_copy.rs:38:5\n+   |\n+LL |     forget(s5);\n+   |     ^^^^^^^--^\n+   |            |\n+   |            argument has type `&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n+  --> $DIR/forget_copy.rs:50:5\n+   |\n+LL |     forget(a2);\n+   |     ^^^^^^^--^\n+   |            |\n+   |            argument has type `&AnotherStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n+  --> $DIR/forget_copy.rs:52:5\n+   |\n+LL |     forget(a3);\n+   |     ^^^^^^^--^\n+   |            |\n+   |            argument has type `&AnotherStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n+  --> $DIR/forget_copy.rs:53:5\n+   |\n+LL |     forget(a4);\n+   |     ^^^^^^^--^\n+   |            |\n+   |            argument has type `&AnotherStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: 8 warnings emitted\n+"}, {"sha": "13f6d4be3d153b029c56648b09f3a115e439368e", "filename": "tests/ui/lint/forget_ref.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Flint%2Fforget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Flint%2Fforget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fforget_ref.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -0,0 +1,39 @@\n+// check-pass\n+\n+#![warn(forget_ref)]\n+\n+use std::mem::forget;\n+\n+struct SomeStruct;\n+\n+fn main() {\n+    forget(&SomeStruct); //~ WARN calls to `std::mem::forget`\n+\n+    let mut owned = SomeStruct;\n+    forget(&owned); //~ WARN calls to `std::mem::forget`\n+    forget(&&owned); //~ WARN calls to `std::mem::forget`\n+    forget(&mut owned); //~ WARN calls to `std::mem::forget`\n+    forget(owned);\n+\n+    let reference1 = &SomeStruct;\n+    forget(&*reference1); //~ WARN calls to `std::mem::forget`\n+\n+    let reference2 = &mut SomeStruct;\n+    forget(reference2); //~ WARN calls to `std::mem::forget`\n+\n+    let ref reference3 = SomeStruct;\n+    forget(reference3); //~ WARN calls to `std::mem::forget`\n+}\n+\n+#[allow(dead_code)]\n+fn test_generic_fn_forget<T>(val: T) {\n+    forget(&val); //~ WARN calls to `std::mem::forget`\n+    forget(val);\n+}\n+\n+#[allow(dead_code)]\n+fn test_similarly_named_function() {\n+    fn forget<T>(_val: T) {}\n+    forget(&SomeStruct); //OK; call to unrelated function which happens to have the same name\n+    std::mem::forget(&SomeStruct); //~ WARN calls to `std::mem::forget`\n+}"}, {"sha": "63fc779198007c0138baffa410d2083f41c98dd7", "filename": "tests/ui/lint/forget_ref.stderr", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Flint%2Fforget_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Flint%2Fforget_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fforget_ref.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -0,0 +1,97 @@\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n+  --> $DIR/forget_ref.rs:10:5\n+   |\n+LL |     forget(&SomeStruct);\n+   |     ^^^^^^^-----------^\n+   |            |\n+   |            argument has type `&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+note: the lint level is defined here\n+  --> $DIR/forget_ref.rs:3:9\n+   |\n+LL | #![warn(forget_ref)]\n+   |         ^^^^^^^^^^\n+\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n+  --> $DIR/forget_ref.rs:13:5\n+   |\n+LL |     forget(&owned);\n+   |     ^^^^^^^------^\n+   |            |\n+   |            argument has type `&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n+  --> $DIR/forget_ref.rs:14:5\n+   |\n+LL |     forget(&&owned);\n+   |     ^^^^^^^-------^\n+   |            |\n+   |            argument has type `&&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n+  --> $DIR/forget_ref.rs:15:5\n+   |\n+LL |     forget(&mut owned);\n+   |     ^^^^^^^----------^\n+   |            |\n+   |            argument has type `&mut SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n+  --> $DIR/forget_ref.rs:19:5\n+   |\n+LL |     forget(&*reference1);\n+   |     ^^^^^^^------------^\n+   |            |\n+   |            argument has type `&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n+  --> $DIR/forget_ref.rs:22:5\n+   |\n+LL |     forget(reference2);\n+   |     ^^^^^^^----------^\n+   |            |\n+   |            argument has type `&mut SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n+  --> $DIR/forget_ref.rs:25:5\n+   |\n+LL |     forget(reference3);\n+   |     ^^^^^^^----------^\n+   |            |\n+   |            argument has type `&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n+  --> $DIR/forget_ref.rs:30:5\n+   |\n+LL |     forget(&val);\n+   |     ^^^^^^^----^\n+   |            |\n+   |            argument has type `&T`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n+  --> $DIR/forget_ref.rs:38:5\n+   |\n+LL |     std::mem::forget(&SomeStruct);\n+   |     ^^^^^^^^^^^^^^^^^-----------^\n+   |                      |\n+   |                      argument has type `&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: 9 warnings emitted\n+"}, {"sha": "8ef6ab1b6ff4500cfa57a598c20c350a3db373ab", "filename": "tests/ui/liveness/liveness-unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fliveness%2Fliveness-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fliveness%2Fliveness-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fliveness%2Fliveness-unused.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1,7 +1,7 @@\n #![warn(unused)]\n #![deny(unused_variables)]\n #![deny(unused_assignments)]\n-#![allow(dead_code, non_camel_case_types, trivial_numeric_casts)]\n+#![allow(dead_code, non_camel_case_types, trivial_numeric_casts, drop_copy)]\n \n use std::ops::AddAssign;\n "}, {"sha": "c50dfdf0116a253f1c2e88b7b69a386179404953", "filename": "tests/ui/macros/parse-complex-macro-invoc-op.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fmacros%2Fparse-complex-macro-invoc-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fmacros%2Fparse-complex-macro-invoc-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fparse-complex-macro-invoc-op.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -4,6 +4,7 @@\n #![allow(unused_assignments)]\n #![allow(unused_variables)]\n #![allow(stable_features)]\n+#![allow(drop_copy)]\n \n // Test parsing binary operators after macro invocations.\n "}, {"sha": "6b9ac3c5852368b759366737eb5ad5b2276a919e", "filename": "tests/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -220,11 +220,7 @@ LL |     let _ = fat_v as *const dyn Foo;\n    |             ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[u8]`\n-   = note: required for the cast from `[u8]` to the object type `dyn Foo`\n-help: consider borrowing the value, since `&[u8]` can be coerced into `dyn Foo`\n-   |\n-LL |     let _ = &fat_v as *const dyn Foo;\n-   |             +\n+   = note: required for the cast from `*const [u8]` to `*const dyn Foo`\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/cast-rfc0401.rs:62:13\n@@ -233,11 +229,7 @@ LL |     let _ = a as *const dyn Foo;\n    |             ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n-   = note: required for the cast from `str` to the object type `dyn Foo`\n-help: consider borrowing the value, since `&str` can be coerced into `dyn Foo`\n-   |\n-LL |     let _ = &a as *const dyn Foo;\n-   |             +\n+   = note: required for the cast from `*const str` to `*const dyn Foo`\n \n error[E0606]: casting `&{float}` as `f32` is invalid\n   --> $DIR/cast-rfc0401.rs:71:30"}, {"sha": "5b6f0235123321c621675ff8e689aea242ebfcc1", "filename": "tests/ui/never_type/fallback-closure-wrap.fallback.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fnever_type%2Ffallback-closure-wrap.fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fnever_type%2Ffallback-closure-wrap.fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_type%2Ffallback-closure-wrap.fallback.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -10,7 +10,7 @@ LL | |     }) as Box<dyn FnMut()>);\n    |\n    = note: expected unit type `()`\n                    found type `!`\n-   = note: required for the cast from `[closure@$DIR/fallback-closure-wrap.rs:18:40: 18:47]` to the object type `dyn FnMut()`\n+   = note: required for the cast from `Box<[closure@$DIR/fallback-closure-wrap.rs:18:40: 18:47]>` to `Box<dyn FnMut()>`\n \n error: aborting due to previous error\n "}, {"sha": "e95a992d7804cc5ed0288f682ac5834360ceae60", "filename": "tests/ui/never_type/never-assign-dead-code.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fnever_type%2Fnever-assign-dead-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fnever_type%2Fnever-assign-dead-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_type%2Fnever-assign-dead-code.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -3,6 +3,7 @@\n // check-pass\n \n #![feature(never_type)]\n+#![allow(drop_copy)]\n #![warn(unused)]\n \n fn main() {"}, {"sha": "5660bde5c279bac4d6637e6481266c7f47c2faf5", "filename": "tests/ui/never_type/never-assign-dead-code.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fnever_type%2Fnever-assign-dead-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fnever_type%2Fnever-assign-dead-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_type%2Fnever-assign-dead-code.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1,28 +1,28 @@\n warning: unreachable statement\n-  --> $DIR/never-assign-dead-code.rs:10:5\n+  --> $DIR/never-assign-dead-code.rs:11:5\n    |\n LL |     let x: ! = panic!(\"aah\");\n    |                ------------- any code following this expression is unreachable\n LL |     drop(x);\n    |     ^^^^^^^^ unreachable statement\n    |\n note: the lint level is defined here\n-  --> $DIR/never-assign-dead-code.rs:6:9\n+  --> $DIR/never-assign-dead-code.rs:7:9\n    |\n LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: `#[warn(unreachable_code)]` implied by `#[warn(unused)]`\n \n warning: unreachable call\n-  --> $DIR/never-assign-dead-code.rs:10:5\n+  --> $DIR/never-assign-dead-code.rs:11:5\n    |\n LL |     drop(x);\n    |     ^^^^ - any code following this expression is unreachable\n    |     |\n    |     unreachable call\n \n warning: unused variable: `x`\n-  --> $DIR/never-assign-dead-code.rs:9:9\n+  --> $DIR/never-assign-dead-code.rs:10:9\n    |\n LL |     let x: ! = panic!(\"aah\");\n    |         ^ help: if this is intentional, prefix it with an underscore: `_x`"}, {"sha": "73ceaeeb875726cadd4834232314d8d9aabe2ee9", "filename": "tests/ui/nll/relate_tys/hr-fn-aba-as-aaa.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aba-as-aaa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aba-as-aaa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aba-as-aaa.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -5,6 +5,8 @@\n // check-pass\n // compile-flags:-Zno-leak-check\n \n+#![allow(drop_copy)]\n+\n fn make_it() -> for<'a, 'b> fn(&'a u32, &'b u32) -> &'a u32 {\n     panic!()\n }"}, {"sha": "bff9058a507b1c08f7c73dda9c2434e56838e563", "filename": "tests/ui/nll/ty-outlives/projection-body.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fnll%2Fty-outlives%2Fprojection-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fnll%2Fty-outlives%2Fprojection-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fty-outlives%2Fprojection-body.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -3,6 +3,8 @@\n //\n // check-pass\n \n+#![allow(drop_ref)]\n+\n trait MyTrait<'a> {\n     type Output;\n }"}, {"sha": "318be2a6401bc8be9cca96bc477efc7dc6099153", "filename": "tests/ui/numbers-arithmetic/overflow-attribute-works-1.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fnumbers-arithmetic%2Foverflow-attribute-works-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fnumbers-arithmetic%2Foverflow-attribute-works-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnumbers-arithmetic%2Foverflow-attribute-works-1.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -0,0 +1,19 @@\n+// run-pass\n+// compile-flags: -C overflow_checks=true\n+\n+#![feature(cfg_overflow_checks)]\n+\n+fn main() {\n+    assert!(cfg!(overflow_checks));\n+    assert!(compiles_differently());\n+}\n+\n+#[cfg(overflow_checks)]\n+fn compiles_differently()->bool {\n+    true\n+}\n+\n+#[cfg(not(overflow_checks))]\n+fn compiles_differently()->bool {\n+    false\n+}"}, {"sha": "0367d980a64c5ea33a8bdba6cd86ad0e11f17f92", "filename": "tests/ui/numbers-arithmetic/overflow-attribute-works-2.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fnumbers-arithmetic%2Foverflow-attribute-works-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fnumbers-arithmetic%2Foverflow-attribute-works-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnumbers-arithmetic%2Foverflow-attribute-works-2.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -0,0 +1,19 @@\n+// run-pass\n+// compile-flags: -C overflow_checks=false\n+\n+#![feature(cfg_overflow_checks)]\n+\n+fn main() {\n+    assert!(!cfg!(overflow_checks));\n+    assert!(!compiles_differently());\n+}\n+\n+#[cfg(overflow_checks)]\n+fn compiles_differently()->bool {\n+    true\n+}\n+\n+#[cfg(not(overflow_checks))]\n+fn compiles_differently()->bool {\n+    false\n+}"}, {"sha": "183245b232231e0eef76402f2765a7d48c24976e", "filename": "tests/ui/object-safety/issue-19538.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fobject-safety%2Fissue-19538.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fobject-safety%2Fissue-19538.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fobject-safety%2Fissue-19538.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -29,8 +29,7 @@ LL |     fn foo<T>(&self, val: T);\n LL | trait Bar: Foo { }\n    |       --- this trait cannot be made into an object...\n    = help: consider moving `foo` to another trait\n-   = note: required for `&mut Thing` to implement `CoerceUnsized<&mut dyn Bar>`\n-   = note: required by cast to type `&mut dyn Bar`\n+   = note: required for the cast from `&mut Thing` to `&mut dyn Bar`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "db3e0885a85a871a76170277f0fd9f3b50691543", "filename": "tests/ui/object-safety/object-safety-associated-consts.object_safe_for_dispatch.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.object_safe_for_dispatch.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -12,8 +12,7 @@ LL | trait Bar {\n LL |     const X: usize;\n    |           ^ ...because it contains this associated `const`\n    = help: consider moving `X` to another trait\n-   = note: required for `&T` to implement `CoerceUnsized<&dyn Bar>`\n-   = note: required by cast to type `&dyn Bar`\n+   = note: required for the cast from `&T` to `&dyn Bar`\n \n error: aborting due to previous error\n "}, {"sha": "b200b64a1f077c0f677ce9397094cb7728f54f6f", "filename": "tests/ui/object-safety/object-safety-generics.object_safe_for_dispatch.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fobject-safety%2Fobject-safety-generics.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fobject-safety%2Fobject-safety-generics.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fobject-safety%2Fobject-safety-generics.object_safe_for_dispatch.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -12,8 +12,7 @@ LL | trait Bar {\n LL |     fn bar<T>(&self, t: T);\n    |        ^^^ ...because method `bar` has generic type parameters\n    = help: consider moving `bar` to another trait\n-   = note: required for `&T` to implement `CoerceUnsized<&dyn Bar>`\n-   = note: required by cast to type `&dyn Bar`\n+   = note: required for the cast from `&T` to `&dyn Bar`\n \n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-generics.rs:26:5\n@@ -29,8 +28,7 @@ LL | trait Bar {\n LL |     fn bar<T>(&self, t: T);\n    |        ^^^ ...because method `bar` has generic type parameters\n    = help: consider moving `bar` to another trait\n-   = note: required for `&T` to implement `CoerceUnsized<&dyn Bar>`\n-   = note: required by cast to type `&dyn Bar`\n+   = note: required for the cast from `&T` to `&dyn Bar`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "414614d8d0bf0c23a972a19090fa85cb20b72a23", "filename": "tests/ui/object-safety/object-safety-mentions-Self.object_safe_for_dispatch.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.object_safe_for_dispatch.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -12,8 +12,7 @@ LL | trait Bar {\n LL |     fn bar(&self, x: &Self);\n    |                      ^^^^^ ...because method `bar` references the `Self` type in this parameter\n    = help: consider moving `bar` to another trait\n-   = note: required for `&T` to implement `CoerceUnsized<&dyn Bar>`\n-   = note: required by cast to type `&dyn Bar`\n+   = note: required for the cast from `&T` to `&dyn Bar`\n \n error[E0038]: the trait `Baz` cannot be made into an object\n   --> $DIR/object-safety-mentions-Self.rs:30:5\n@@ -29,8 +28,7 @@ LL | trait Baz {\n LL |     fn baz(&self) -> Self;\n    |                      ^^^^ ...because method `baz` references the `Self` type in its return type\n    = help: consider moving `baz` to another trait\n-   = note: required for `&T` to implement `CoerceUnsized<&dyn Baz>`\n-   = note: required by cast to type `&dyn Baz`\n+   = note: required for the cast from `&T` to `&dyn Baz`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "befcef952a850fb088ebf252b7593f746f429e3b", "filename": "tests/ui/object-safety/object-safety-no-static.object_safe_for_dispatch.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fobject-safety%2Fobject-safety-no-static.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fobject-safety%2Fobject-safety-no-static.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fobject-safety%2Fobject-safety-no-static.object_safe_for_dispatch.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -11,8 +11,7 @@ LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n LL |     fn foo() {}\n    |        ^^^ ...because associated function `foo` has no `self` parameter\n-   = note: required for `Box<Bar>` to implement `CoerceUnsized<Box<dyn Foo>>`\n-   = note: required by cast to type `Box<dyn Foo>`\n+   = note: required for the cast from `Box<Bar>` to `Box<dyn Foo>`\n help: consider turning `foo` into a method by giving it a `&self` argument\n    |\n LL |     fn foo(&self) {}"}, {"sha": "90e5c59dd027c17ff47112a1a9a9ce7323e53512", "filename": "tests/ui/object-safety/object-safety-sized-2.object_safe_for_dispatch.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fobject-safety%2Fobject-safety-sized-2.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fobject-safety%2Fobject-safety-sized-2.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fobject-safety%2Fobject-safety-sized-2.object_safe_for_dispatch.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -11,8 +11,7 @@ LL | trait Bar\n    |       --- this trait cannot be made into an object...\n LL |     where Self : Sized\n    |                  ^^^^^ ...because it requires `Self: Sized`\n-   = note: required for `&T` to implement `CoerceUnsized<&dyn Bar>`\n-   = note: required by cast to type `&dyn Bar`\n+   = note: required for the cast from `&T` to `&dyn Bar`\n \n error: aborting due to previous error\n "}, {"sha": "a6c22b8747e50a16de60ffda7956a067dcc85844", "filename": "tests/ui/object-safety/object-safety-sized.object_safe_for_dispatch.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fobject-safety%2Fobject-safety-sized.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fobject-safety%2Fobject-safety-sized.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fobject-safety%2Fobject-safety-sized.object_safe_for_dispatch.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -11,8 +11,7 @@ LL | trait Bar : Sized {\n    |       ---   ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required for `&T` to implement `CoerceUnsized<&dyn Bar>`\n-   = note: required by cast to type `&dyn Bar`\n+   = note: required for the cast from `&T` to `&dyn Bar`\n \n error: aborting due to previous error\n "}, {"sha": "c138d99d303280d835635f208bcc84b0a5035fb4", "filename": "tests/ui/or-patterns/or-patterns-default-binding-modes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2For-patterns%2For-patterns-default-binding-modes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2For-patterns%2For-patterns-default-binding-modes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For-patterns%2For-patterns-default-binding-modes.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -3,6 +3,8 @@\n // check-pass\n \n #![allow(irrefutable_let_patterns)]\n+#![allow(drop_copy)]\n+#![allow(drop_ref)]\n \n fn main() {\n     // A regression test for a mistake we made at one point:"}, {"sha": "965204bf240e38b96df6e5adbd29c32c705d7b86", "filename": "tests/ui/pattern/bindings-after-at/borrowck-pat-at-and-box-pass.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -2,6 +2,9 @@\n \n // Test `@` patterns combined with `box` patterns.\n \n+#![allow(drop_ref)]\n+#![allow(drop_copy)]\n+\n #![feature(box_patterns)]\n \n #[derive(Copy, Clone)]"}, {"sha": "3eb5d2cbf5466dadb5e0fa9a0af1413fe2049cd7", "filename": "tests/ui/pattern/bindings-after-at/borrowck-pat-by-copy-bindings-in-at.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -2,6 +2,8 @@\n \n // Test `Copy` bindings in the rhs of `@` patterns.\n \n+#![allow(drop_copy)]\n+\n #[derive(Copy, Clone)]\n struct C;\n "}, {"sha": "0550238549ef3fd2ee55ad1e2deb1cc4496f3cd2", "filename": "tests/ui/pattern/move-ref-patterns/borrowck-move-ref-pattern-pass.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern-pass.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n \n+#![allow(drop_ref)]\n+\n fn main() {}\n \n struct U;"}, {"sha": "788975d960aa932f1a9c6e34a11763119d334224", "filename": "tests/ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures-pass.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n \n+#![allow(drop_ref)]\n+\n fn main() {\n     struct U;\n     fn accept_fn_once(_: impl FnOnce()) {}"}, {"sha": "c73268dc46a72c28e1e2c037cbc98a486b908fa7", "filename": "tests/ui/print_type_sizes/async.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fprint_type_sizes%2Fasync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fprint_type_sizes%2Fasync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_type_sizes%2Fasync.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -3,6 +3,8 @@\n // build-pass\n // ignore-pass\n \n+#![allow(drop_copy)]\n+\n async fn wait() {}\n \n pub async fn test(arg: [u8; 8192]) {"}, {"sha": "873def9031aaa863914304112d7ebb33cf4f2bcb", "filename": "tests/ui/print_type_sizes/async.stdout", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fprint_type_sizes%2Fasync.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fprint_type_sizes%2Fasync.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_type_sizes%2Fasync.stdout?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1,4 +1,4 @@\n-print-type-size type: `[async fn body@$DIR/async.rs:8:36: 11:2]`: 16386 bytes, alignment: 1 bytes\n+print-type-size type: `[async fn body@$DIR/async.rs:10:36: 13:2]`: 16386 bytes, alignment: 1 bytes\n print-type-size     discriminant: 1 bytes\n print-type-size     variant `Unresumed`: 8192 bytes\n print-type-size         upvar `.arg`: 8192 bytes\n@@ -16,14 +16,14 @@ print-type-size type: `std::mem::MaybeUninit<[u8; 8192]>`: 8192 bytes, alignment\n print-type-size     variant `MaybeUninit`: 8192 bytes\n print-type-size         field `.uninit`: 0 bytes\n print-type-size         field `.value`: 8192 bytes\n-print-type-size type: `[async fn body@$DIR/async.rs:6:17: 6:19]`: 1 bytes, alignment: 1 bytes\n+print-type-size type: `[async fn body@$DIR/async.rs:8:17: 8:19]`: 1 bytes, alignment: 1 bytes\n print-type-size     discriminant: 1 bytes\n print-type-size     variant `Unresumed`: 0 bytes\n print-type-size     variant `Returned`: 0 bytes\n print-type-size     variant `Panicked`: 0 bytes\n-print-type-size type: `std::mem::ManuallyDrop<[async fn body@$DIR/async.rs:6:17: 6:19]>`: 1 bytes, alignment: 1 bytes\n+print-type-size type: `std::mem::ManuallyDrop<[async fn body@$DIR/async.rs:8:17: 8:19]>`: 1 bytes, alignment: 1 bytes\n print-type-size     field `.value`: 1 bytes\n-print-type-size type: `std::mem::MaybeUninit<[async fn body@$DIR/async.rs:6:17: 6:19]>`: 1 bytes, alignment: 1 bytes\n+print-type-size type: `std::mem::MaybeUninit<[async fn body@$DIR/async.rs:8:17: 8:19]>`: 1 bytes, alignment: 1 bytes\n print-type-size     variant `MaybeUninit`: 1 bytes\n print-type-size         field `.uninit`: 0 bytes\n print-type-size         field `.value`: 1 bytes"}, {"sha": "a77a03f0a8ae43a67ce80f266b39be081a19a14e", "filename": "tests/ui/print_type_sizes/generator_discr_placement.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -6,6 +6,7 @@\n \n // Avoid emitting panic handlers, like the rest of these tests...\n #![feature(generators)]\n+#![allow(drop_copy)]\n \n pub fn foo() {\n     let a = || {"}, {"sha": "fe0022cf5f4c9863fddef8081684819562bd808b", "filename": "tests/ui/print_type_sizes/generator_discr_placement.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.stdout?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1,4 +1,4 @@\n-print-type-size type: `[generator@$DIR/generator_discr_placement.rs:11:13: 11:15]`: 8 bytes, alignment: 4 bytes\n+print-type-size type: `[generator@$DIR/generator_discr_placement.rs:12:13: 12:15]`: 8 bytes, alignment: 4 bytes\n print-type-size     discriminant: 1 bytes\n print-type-size     variant `Unresumed`: 0 bytes\n print-type-size     variant `Suspend0`: 7 bytes"}, {"sha": "5ae5ebb450e84332bf012ddcb400d4312d20c8d3", "filename": "tests/ui/regions/type-param-outlives-reempty-issue-74429-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fregions%2Ftype-param-outlives-reempty-issue-74429-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fregions%2Ftype-param-outlives-reempty-issue-74429-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregions%2Ftype-param-outlives-reempty-issue-74429-2.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -55,11 +55,11 @@ where\n }\n \n pub fn x<T: Copy>(a: Array<T>) {\n-    // drop just avoids a must_use warning\n-    drop((0..1).filter(|_| true));\n+    // _ just avoids a must_use warning\n+    let _ = (0..1).filter(|_| true);\n     let y = a.index_axis();\n     a.axis_iter().for_each(|_| {\n-        drop(y);\n+        let _ = y;\n     });\n }\n "}, {"sha": "af2bb09805ac6ccd50d6d362d78dfe48f66823e6", "filename": "tests/ui/regions/type-param-outlives-reempty-issue-74429.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fregions%2Ftype-param-outlives-reempty-issue-74429.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fregions%2Ftype-param-outlives-reempty-issue-74429.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregions%2Ftype-param-outlives-reempty-issue-74429.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -3,6 +3,8 @@\n \n // check-pass\n \n+#![allow(drop_copy)]\n+\n use std::marker::PhantomData;\n \n fn apply<T, F: FnOnce(T)>(_: T, _: F) {}"}, {"sha": "8f45b989f136381be65713d69d90dc27a0237513", "filename": "tests/ui/rfc-2008-non-exhaustive/borrowck-exhaustive.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-exhaustive.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -3,6 +3,8 @@\n \n // check-pass\n \n+#![allow(drop_ref)]\n+\n // aux-build:monovariants.rs\n extern crate monovariants;\n "}, {"sha": "4c1562790d5f474dc9b2034d9ff5c8598399a8ff", "filename": "tests/ui/rfc-2361-dbg-macro/dbg-macro-expected-behavior.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -4,6 +4,8 @@\n // Tests ensuring that `dbg!(expr)` has the expected run-time behavior.\n // as well as some compile time properties we expect.\n \n+#![allow(drop_copy)]\n+\n #[derive(Copy, Clone, Debug)]\n struct Unit;\n "}, {"sha": "a20a6062c13b6ff011bd1702c57a843bdf5c10cf", "filename": "tests/ui/rfc-2361-dbg-macro/dbg-macro-expected-behavior.run.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.run.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1,28 +1,28 @@\n-[$DIR/dbg-macro-expected-behavior.rs:20] Unit = Unit\n-[$DIR/dbg-macro-expected-behavior.rs:21] a = Unit\n-[$DIR/dbg-macro-expected-behavior.rs:27] Point { x: 42, y: 24 } = Point {\n+[$DIR/dbg-macro-expected-behavior.rs:22] Unit = Unit\n+[$DIR/dbg-macro-expected-behavior.rs:23] a = Unit\n+[$DIR/dbg-macro-expected-behavior.rs:29] Point { x: 42, y: 24 } = Point {\n     x: 42,\n     y: 24,\n }\n-[$DIR/dbg-macro-expected-behavior.rs:28] b = Point {\n+[$DIR/dbg-macro-expected-behavior.rs:30] b = Point {\n     x: 42,\n     y: 24,\n }\n-[$DIR/dbg-macro-expected-behavior.rs:36]\n-[$DIR/dbg-macro-expected-behavior.rs:40] &a = NoCopy(\n+[$DIR/dbg-macro-expected-behavior.rs:38]\n+[$DIR/dbg-macro-expected-behavior.rs:42] &a = NoCopy(\n     1337,\n )\n-[$DIR/dbg-macro-expected-behavior.rs:40] dbg!(& a) = NoCopy(\n+[$DIR/dbg-macro-expected-behavior.rs:42] dbg!(& a) = NoCopy(\n     1337,\n )\n-[$DIR/dbg-macro-expected-behavior.rs:45] f(&42) = 42\n+[$DIR/dbg-macro-expected-behavior.rs:47] f(&42) = 42\n before\n-[$DIR/dbg-macro-expected-behavior.rs:50] { foo += 1; eprintln!(\"before\"); 7331 } = 7331\n-[$DIR/dbg-macro-expected-behavior.rs:58] (\"Yeah\",) = (\n+[$DIR/dbg-macro-expected-behavior.rs:52] { foo += 1; eprintln!(\"before\"); 7331 } = 7331\n+[$DIR/dbg-macro-expected-behavior.rs:60] (\"Yeah\",) = (\n     \"Yeah\",\n )\n-[$DIR/dbg-macro-expected-behavior.rs:61] 1 = 1\n-[$DIR/dbg-macro-expected-behavior.rs:61] 2 = 2\n-[$DIR/dbg-macro-expected-behavior.rs:65] 1u8 = 1\n-[$DIR/dbg-macro-expected-behavior.rs:65] 2u32 = 2\n-[$DIR/dbg-macro-expected-behavior.rs:65] \"Yeah\" = \"Yeah\"\n+[$DIR/dbg-macro-expected-behavior.rs:63] 1 = 1\n+[$DIR/dbg-macro-expected-behavior.rs:63] 2 = 2\n+[$DIR/dbg-macro-expected-behavior.rs:67] 1u8 = 1\n+[$DIR/dbg-macro-expected-behavior.rs:67] 2u32 = 2\n+[$DIR/dbg-macro-expected-behavior.rs:67] \"Yeah\" = \"Yeah\""}, {"sha": "4ed4d610025fae05bc9c0af062d6f56ad6f004da", "filename": "tests/ui/rust-2018/remove-extern-crate.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Frust-2018%2Fremove-extern-crate.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Frust-2018%2Fremove-extern-crate.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Fremove-extern-crate.fixed?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -5,6 +5,7 @@\n // compile-flags:--extern remove_extern_crate\n \n #![warn(rust_2018_idioms)]\n+#![allow(drop_copy)]\n \n  //~ WARNING unused extern crate\n // Shouldn't suggest changing to `use`, as `another_name`"}, {"sha": "5dafdb2b7b7742ce6db03c3fdce88d1e7f3a1952", "filename": "tests/ui/rust-2018/remove-extern-crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Frust-2018%2Fremove-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Frust-2018%2Fremove-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Fremove-extern-crate.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -5,6 +5,7 @@\n // compile-flags:--extern remove_extern_crate\n \n #![warn(rust_2018_idioms)]\n+#![allow(drop_copy)]\n \n extern crate core; //~ WARNING unused extern crate\n // Shouldn't suggest changing to `use`, as `another_name`"}, {"sha": "f752cac8ed63064a4ae9929823c9f5c664468d28", "filename": "tests/ui/rust-2018/remove-extern-crate.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Frust-2018%2Fremove-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Frust-2018%2Fremove-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Fremove-extern-crate.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1,5 +1,5 @@\n warning: unused extern crate\n-  --> $DIR/remove-extern-crate.rs:9:1\n+  --> $DIR/remove-extern-crate.rs:10:1\n    |\n LL | extern crate core;\n    | ^^^^^^^^^^^^^^^^^^ help: remove it\n@@ -12,7 +12,7 @@ LL | #![warn(rust_2018_idioms)]\n    = note: `#[warn(unused_extern_crates)]` implied by `#[warn(rust_2018_idioms)]`\n \n warning: `extern crate` is not idiomatic in the new edition\n-  --> $DIR/remove-extern-crate.rs:33:5\n+  --> $DIR/remove-extern-crate.rs:34:5\n    |\n LL |     extern crate core;\n    |     ^^^^^^^^^^^^^^^^^^\n@@ -23,7 +23,7 @@ LL |     use core;\n    |     ~~~\n \n warning: `extern crate` is not idiomatic in the new edition\n-  --> $DIR/remove-extern-crate.rs:43:5\n+  --> $DIR/remove-extern-crate.rs:44:5\n    |\n LL |     pub extern crate core;\n    |     ^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "13591f5b63516dc245497b77ca50153f226f2b43", "filename": "tests/ui/self/arbitrary-self-types-not-object-safe.curr.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.curr.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -31,8 +31,7 @@ LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n LL |     fn foo(self: &Rc<Self>) -> usize;\n    |                  ^^^^^^^^^ ...because method `foo`'s `self` parameter cannot be dispatched on\n-   = note: required for `Rc<usize>` to implement `CoerceUnsized<Rc<dyn Foo>>`\n-   = note: required by cast to type `Rc<dyn Foo>`\n+   = note: required for the cast from `Rc<usize>` to `Rc<dyn Foo>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "593f705353a5ca55fbe5a9e2253e0e8cd727b62f", "filename": "tests/ui/self/arbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -14,8 +14,7 @@ LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n LL |     fn foo(self: &Rc<Self>) -> usize;\n    |                  ^^^^^^^^^ ...because method `foo`'s `self` parameter cannot be dispatched on\n-   = note: required for `Rc<usize>` to implement `CoerceUnsized<Rc<dyn Foo>>`\n-   = note: required by cast to type `Rc<dyn Foo>`\n+   = note: required for the cast from `Rc<usize>` to `Rc<dyn Foo>`\n \n error: aborting due to previous error\n "}, {"sha": "f59bcf0b8033902518a1f093a5e1d1c89e16d140", "filename": "tests/ui/statics/issue-91050-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fstatics%2Fissue-91050-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fstatics%2Fissue-91050-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstatics%2Fissue-91050-1.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -12,6 +12,8 @@\n //\n // In regular builds, the bad cast was UB, like \"Invalid LLVMRustVisibility value!\"\n \n+#![allow(drop_copy)]\n+\n pub mod before {\n     #[no_mangle]\n     pub static GLOBAL1: [u8; 1] = [1];"}, {"sha": "bffcb1af487e9d42acf456ec90609bf900238e6f", "filename": "tests/ui/suggestions/derive-macro-missing-bounds.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fsuggestions%2Fderive-macro-missing-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fsuggestions%2Fderive-macro-missing-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fderive-macro-missing-bounds.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -36,7 +36,7 @@ LL |     impl<T: Debug + Trait> Debug for Inner<T> {\n    |                     unsatisfied trait bound introduced here\n    = note: 1 redundant requirement hidden\n    = note: required for `&c::Inner<T>` to implement `Debug`\n-   = note: required for the cast from `&c::Inner<T>` to the object type `dyn Debug`\n+   = note: required for the cast from `&&c::Inner<T>` to `&dyn Debug`\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider restricting type parameter `T`\n    |\n@@ -58,7 +58,7 @@ LL |     impl<T> Debug for Inner<T> where T: Debug, T: Trait {\n    |             ^^^^^     ^^^^^^^^                    ----- unsatisfied trait bound introduced here\n    = note: 1 redundant requirement hidden\n    = note: required for `&d::Inner<T>` to implement `Debug`\n-   = note: required for the cast from `&d::Inner<T>` to the object type `dyn Debug`\n+   = note: required for the cast from `&&d::Inner<T>` to `&dyn Debug`\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider restricting type parameter `T`\n    |\n@@ -80,7 +80,7 @@ LL |     impl<T> Debug for Inner<T> where T: Debug + Trait {\n    |             ^^^^^     ^^^^^^^^                  ----- unsatisfied trait bound introduced here\n    = note: 1 redundant requirement hidden\n    = note: required for `&e::Inner<T>` to implement `Debug`\n-   = note: required for the cast from `&e::Inner<T>` to the object type `dyn Debug`\n+   = note: required for the cast from `&&e::Inner<T>` to `&dyn Debug`\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider restricting type parameter `T`\n    |\n@@ -102,7 +102,7 @@ LL |     impl<T: Debug> Debug for Inner<T> where T: Trait {\n    |                    ^^^^^     ^^^^^^^^          ----- unsatisfied trait bound introduced here\n    = note: 1 redundant requirement hidden\n    = note: required for `&f::Inner<T>` to implement `Debug`\n-   = note: required for the cast from `&f::Inner<T>` to the object type `dyn Debug`\n+   = note: required for the cast from `&&f::Inner<T>` to `&dyn Debug`\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider restricting type parameter `T`\n    |"}, {"sha": "120fc538307a7ac85b7b0a27e5a03766db900610", "filename": "tests/ui/suggestions/suggest-borrow-to-dyn-object.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/25c545114a1bc08b7b18b1a65266aae255ff2094/tests%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25c545114a1bc08b7b18b1a65266aae255ff2094/tests%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.rs?ref=25c545114a1bc08b7b18b1a65266aae255ff2094", "patch": "@@ -1,16 +0,0 @@\n-use std::ffi::{OsStr, OsString};\n-use std::path::Path;\n-\n-fn check(p: &dyn AsRef<Path>) {\n-    let m = std::fs::metadata(&p);\n-    println!(\"{:?}\", &m);\n-}\n-\n-fn main() {\n-    let s: OsString = \".\".into();\n-    let s: &OsStr = &s;\n-    check(s);\n-    //~^ ERROR the size for values of type `[u8]` cannot be known at compilation time\n-    //~| HELP within `OsStr`, the trait `Sized` is not implemented for `[u8]`\n-    //~| HELP consider borrowing the value, since `&OsStr` can be coerced into `dyn AsRef<Path>`\n-}"}, {"sha": "365c1016eb3dcb3ed5d28e541f70e06add3330e1", "filename": "tests/ui/suggestions/suggest-borrow-to-dyn-object.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/25c545114a1bc08b7b18b1a65266aae255ff2094/tests%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25c545114a1bc08b7b18b1a65266aae255ff2094/tests%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.stderr?ref=25c545114a1bc08b7b18b1a65266aae255ff2094", "patch": "@@ -1,18 +0,0 @@\n-error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n-  --> $DIR/suggest-borrow-to-dyn-object.rs:12:11\n-   |\n-LL |     check(s);\n-   |           ^ doesn't have a size known at compile-time\n-   |\n-   = help: within `OsStr`, the trait `Sized` is not implemented for `[u8]`\n-note: required because it appears within the type `OsStr`\n-  --> $SRC_DIR/std/src/ffi/os_str.rs:LL:COL\n-   = note: required for the cast from `OsStr` to the object type `dyn AsRef<Path>`\n-help: consider borrowing the value, since `&OsStr` can be coerced into `dyn AsRef<Path>`\n-   |\n-LL |     check(&s);\n-   |           +\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "e7e8a796796b3c03cde2988ad8deb659f4e6a34e", "filename": "tests/ui/traits/coercion-generic-bad.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftraits%2Fcoercion-generic-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftraits%2Fcoercion-generic-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fcoercion-generic-bad.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -5,7 +5,7 @@ LL |     let s: Box<dyn Trait<isize>> = Box::new(Struct { person: \"Fred\" });\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait<isize>` is not implemented for `Struct`\n    |\n    = help: the trait `Trait<&'static str>` is implemented for `Struct`\n-   = note: required for the cast from `Struct` to the object type `dyn Trait<isize>`\n+   = note: required for the cast from `Box<Struct>` to `Box<dyn Trait<isize>>`\n \n error: aborting due to previous error\n "}, {"sha": "558303c2e40bc90e2585dcdc79abd882cfc90dd2", "filename": "tests/ui/traits/copy-guessing.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftraits%2Fcopy-guessing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftraits%2Fcopy-guessing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fcopy-guessing.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1,5 +1,8 @@\n // run-pass\n+\n #![allow(dead_code)]\n+#![allow(drop_copy)]\n+\n // \"guessing\" in trait selection can affect `copy_or_move`. Check that this\n // is correctly handled. I am not sure what is the \"correct\" behaviour,\n // but we should at least not ICE."}, {"sha": "256ce992eefc49c8eea35719e0e2168eb893a846", "filename": "tests/ui/traits/impl-evaluation-order.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftraits%2Fimpl-evaluation-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftraits%2Fimpl-evaluation-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fimpl-evaluation-order.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -6,6 +6,8 @@\n \n // check-pass\n \n+#![allow(drop_copy)]\n+\n trait A {\n     type B;\n }"}, {"sha": "30e3c9da1a03e1ce9909746b8f99c32840bcfcbb", "filename": "tests/ui/traits/issue-20692.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftraits%2Fissue-20692.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftraits%2Fissue-20692.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-20692.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -27,8 +27,7 @@ LL | trait Array: Sized + Copy {}\n    |       |      |\n    |       |      ...because it requires `Self: Sized`\n    |       this trait cannot be made into an object...\n-   = note: required for `&T` to implement `CoerceUnsized<&dyn Array>`\n-   = note: required by cast to type `&dyn Array`\n+   = note: required for the cast from `&T` to `&dyn Array`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d532760243067a98f7e600cc0ee0ac8722c0316d", "filename": "tests/ui/traits/issue-38604.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftraits%2Fissue-38604.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftraits%2Fissue-38604.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-38604.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -25,8 +25,7 @@ LL | trait Foo where u32: Q<Self> {\n    |       ---            ^^^^^^^ ...because it uses `Self` as a type parameter\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required for `Box<()>` to implement `CoerceUnsized<Box<dyn Foo>>`\n-   = note: required by cast to type `Box<dyn Foo>`\n+   = note: required for the cast from `Box<()>` to `Box<dyn Foo>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1c0e8bcf1851237ea7864985b686fc863b54fda0", "filename": "tests/ui/traits/issue-7013.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftraits%2Fissue-7013.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftraits%2Fissue-7013.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-7013.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -12,7 +12,7 @@ note: required because it appears within the type `B`\n    |\n LL | struct B {\n    |        ^\n-   = note: required for the cast from `B` to the object type `dyn Foo + Send`\n+   = note: required for the cast from `Box<B>` to `Box<dyn Foo + Send>`\n \n error: aborting due to previous error\n "}, {"sha": "4315056f2065f6db7352da93dfd272ece36ae5dd", "filename": "tests/ui/traits/map-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftraits%2Fmap-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftraits%2Fmap-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fmap-types.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -5,7 +5,7 @@ LL |     let y: Box<dyn Map<usize, isize>> = Box::new(x);\n    |                                         ^^^^^^^^^^^ the trait `Map<usize, isize>` is not implemented for `Box<dyn Map<isize, isize>>`\n    |\n    = help: the trait `Map<K, V>` is implemented for `HashMap<K, V>`\n-   = note: required for the cast from `Box<dyn Map<isize, isize>>` to the object type `dyn Map<usize, isize>`\n+   = note: required for the cast from `Box<Box<dyn Map<isize, isize>>>` to `Box<dyn Map<usize, isize>>`\n \n error: aborting due to previous error\n "}, {"sha": "4aefdd6bb073579e1495c8955246a221ec9ed6e9", "filename": "tests/ui/traits/new-solver/auto-with-drop_tracking_mir.fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.fail.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `impl Future<Output = ()>` cannot be sent between threads safely\n-  --> $DIR/auto-with-drop_tracking_mir.rs:24:13\n+  --> $DIR/auto-with-drop_tracking_mir.rs:25:13\n    |\n LL |     is_send(foo());\n    |     ------- ^^^^^ `impl Future<Output = ()>` cannot be sent between threads safely\n@@ -8,7 +8,7 @@ LL |     is_send(foo());\n    |\n    = help: the trait `Send` is not implemented for `impl Future<Output = ()>`\n note: required by a bound in `is_send`\n-  --> $DIR/auto-with-drop_tracking_mir.rs:23:24\n+  --> $DIR/auto-with-drop_tracking_mir.rs:24:24\n    |\n LL |     fn is_send(_: impl Send) {}\n    |                        ^^^^ required by this bound in `is_send`"}, {"sha": "f115e1433182cad6088b4635ea98551ced874aa0", "filename": "tests/ui/traits/new-solver/auto-with-drop_tracking_mir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -14,6 +14,7 @@ async fn foo() {\n     #[cfg(fail)]\n     let x = &NotSync;\n     bar().await;\n+    #[allow(drop_ref)]\n     drop(x);\n }\n "}, {"sha": "c6c11a1a1de182e6eefe20a21ddec36e8c45c30a", "filename": "tests/ui/traits/new-solver/temporary-ambiguity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftraits%2Fnew-solver%2Ftemporary-ambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftraits%2Fnew-solver%2Ftemporary-ambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Ftemporary-ambiguity.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -18,5 +18,5 @@ fn main() {\n     let w = Wrapper(x);\n     needs_foo(w);\n     x = 1;\n-    drop(x);\n+    let _ = x;\n }"}, {"sha": "d56519223f4da1b1653395e45b6ee9738b5dedb5", "filename": "tests/ui/traits/non_lifetime_binders/supertrait-object-safety.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fsupertrait-object-safety.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fsupertrait-object-safety.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fsupertrait-object-safety.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -20,8 +20,7 @@ LL | trait Foo: for<T> Bar<T> {}\n    |       ---  ^^^^^^^^^^^^^ ...because where clause cannot reference non-lifetime `for<...>` variables\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required for `&()` to implement `CoerceUnsized<&dyn Foo>`\n-   = note: required by cast to type `&dyn Foo`\n+   = note: required for the cast from `&()` to `&dyn Foo`\n \n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/supertrait-object-safety.rs:19:12"}, {"sha": "a51b6975938121a79095b13868bd678d536715da", "filename": "tests/ui/traits/object/safety.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftraits%2Fobject%2Fsafety.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftraits%2Fobject%2Fsafety.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fobject%2Fsafety.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -11,8 +11,7 @@ LL | trait Tr {\n    |       -- this trait cannot be made into an object...\n LL |     fn foo();\n    |        ^^^ ...because associated function `foo` has no `self` parameter\n-   = note: required for `&St` to implement `CoerceUnsized<&dyn Tr>`\n-   = note: required by cast to type `&dyn Tr`\n+   = note: required for the cast from `&St` to `&dyn Tr`\n help: consider turning `foo` into a method by giving it a `&self` argument\n    |\n LL |     fn foo(&self);"}, {"sha": "74a0fc42708e3bd336f8574ada371f418b1f8649", "filename": "tests/ui/traits/test-2.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftraits%2Ftest-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftraits%2Ftest-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Ftest-2.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -76,8 +76,7 @@ LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n    |       this trait cannot be made into an object...\n    = help: consider moving `dup` to another trait\n    = help: consider moving `blah` to another trait\n-   = note: required for `Box<{integer}>` to implement `CoerceUnsized<Box<dyn bar>>`\n-   = note: required by cast to type `Box<dyn bar>`\n+   = note: required for the cast from `Box<{integer}>` to `Box<dyn bar>`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "82b4e9bd72aecef30e68490b4f0a4b1fbd5fee87", "filename": "tests/ui/traits/trait-upcasting/type-checking-test-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-1.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -15,7 +15,7 @@ error[E0277]: the trait bound `&dyn Foo: Bar<_>` is not satisfied\n LL |     let _ = x as &dyn Bar<_>; // Ambiguous\n    |             ^ the trait `Bar<_>` is not implemented for `&dyn Foo`\n    |\n-   = note: required for the cast from `&dyn Foo` to the object type `dyn Bar<_>`\n+   = note: required for the cast from `&&dyn Foo` to `&dyn Bar<_>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "856303ef4dd4cd556d6750756af421eb8fa4b7c2", "filename": "tests/ui/traits/trait-upcasting/type-checking-test-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-2.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -15,7 +15,7 @@ error[E0277]: the trait bound `&dyn Foo<i32>: Bar<u32>` is not satisfied\n LL |     let _ = x as &dyn Bar<u32>; // Error\n    |             ^ the trait `Bar<u32>` is not implemented for `&dyn Foo<i32>`\n    |\n-   = note: required for the cast from `&dyn Foo<i32>` to the object type `dyn Bar<u32>`\n+   = note: required for the cast from `&&dyn Foo<i32>` to `&dyn Bar<u32>`\n \n error[E0605]: non-primitive cast: `&dyn Foo<u32>` as `&dyn Bar<_>`\n   --> $DIR/type-checking-test-2.rs:25:13\n@@ -34,7 +34,7 @@ error[E0277]: the trait bound `&dyn Foo<u32>: Bar<_>` is not satisfied\n LL |     let a = x as &dyn Bar<_>; // Ambiguous\n    |             ^ the trait `Bar<_>` is not implemented for `&dyn Foo<u32>`\n    |\n-   = note: required for the cast from `&dyn Foo<u32>` to the object type `dyn Bar<_>`\n+   = note: required for the cast from `&&dyn Foo<u32>` to `&dyn Bar<_>`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "6ed7667115a0db8b3fe86b86ee42f8c14a2e6329", "filename": "tests/ui/trivial-bounds/trivial-bounds-inconsistent-copy.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1,6 +1,8 @@\n // check-pass\n // Check tautalogically false `Copy` bounds\n+\n #![feature(trivial_bounds)]\n+#![allow(drop_ref, drop_copy)]\n \n fn copy_string(t: String) -> String where String: Copy { //~ WARNING trivial_bounds\n     is_copy(&t);"}, {"sha": "deeb352a2a851f5fa1d13cb9629fcd9042319a94", "filename": "tests/ui/trivial-bounds/trivial-bounds-inconsistent-copy.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -1,25 +1,25 @@\n warning: trait bound String: Copy does not depend on any type or lifetime parameters\n-  --> $DIR/trivial-bounds-inconsistent-copy.rs:5:51\n+  --> $DIR/trivial-bounds-inconsistent-copy.rs:7:51\n    |\n LL | fn copy_string(t: String) -> String where String: Copy {\n    |                                                   ^^^^\n    |\n    = note: `#[warn(trivial_bounds)]` on by default\n \n warning: trait bound String: Copy does not depend on any type or lifetime parameters\n-  --> $DIR/trivial-bounds-inconsistent-copy.rs:12:56\n+  --> $DIR/trivial-bounds-inconsistent-copy.rs:14:56\n    |\n LL | fn copy_out_string(t: &String) -> String where String: Copy {\n    |                                                        ^^^^\n \n warning: trait bound String: Copy does not depend on any type or lifetime parameters\n-  --> $DIR/trivial-bounds-inconsistent-copy.rs:16:55\n+  --> $DIR/trivial-bounds-inconsistent-copy.rs:18:55\n    |\n LL | fn copy_string_with_param<T>(x: String) where String: Copy {\n    |                                                       ^^^^\n \n warning: trait bound for<'b> &'b mut i32: Copy does not depend on any type or lifetime parameters\n-  --> $DIR/trivial-bounds-inconsistent-copy.rs:22:76\n+  --> $DIR/trivial-bounds-inconsistent-copy.rs:24:76\n    |\n LL | fn copy_mut<'a>(t: &&'a mut i32) -> &'a mut i32 where for<'b> &'b mut i32: Copy {\n    |                                                                            ^^^^"}, {"sha": "58eaa9c2c42635a4227808b3ec1ce6918e928d50", "filename": "tests/ui/type-alias-impl-trait/associated-type-impl-trait-lifetime.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-impl-trait-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-impl-trait-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-impl-trait-lifetime.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -5,15 +5,16 @@\n trait Trait {\n     type Opaque1;\n     type Opaque2;\n-    fn constrain(self);\n+    fn constrain(self) -> (Self::Opaque1, Self::Opaque2);\n }\n \n impl<'a> Trait for &'a () {\n     type Opaque1 = impl Sized;\n     type Opaque2 = impl Sized + 'a;\n-    fn constrain(self) {\n-        let _: Self::Opaque1 = ();\n-        let _: Self::Opaque2 = self;\n+    fn constrain(self) -> (Self::Opaque1, Self::Opaque2) {\n+        let a: Self::Opaque1 = ();\n+        let b: Self::Opaque2 = self;\n+        (a, b)\n     }\n }\n "}, {"sha": "93c52126d69b00b0d4d866f405fb99709b97e31b", "filename": "tests/ui/type-alias-impl-trait/invalid_impl_trait_in_assoc_ty.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftype-alias-impl-trait%2Finvalid_impl_trait_in_assoc_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftype-alias-impl-trait%2Finvalid_impl_trait_in_assoc_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Finvalid_impl_trait_in_assoc_ty.rs?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -0,0 +1,16 @@\n+#![feature(impl_trait_in_assoc_type)]\n+\n+trait Foo {\n+    type Foo;\n+    fn bar();\n+}\n+\n+impl Foo for () {\n+    type Foo = impl std::fmt::Debug;\n+    fn bar() {\n+        let x: Self::Foo = ();\n+        //~^ ERROR: mismatched types\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "2beed73cb85c3b346246835f5ec4a6100dcb6af6", "filename": "tests/ui/type-alias-impl-trait/invalid_impl_trait_in_assoc_ty.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftype-alias-impl-trait%2Finvalid_impl_trait_in_assoc_ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftype-alias-impl-trait%2Finvalid_impl_trait_in_assoc_ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Finvalid_impl_trait_in_assoc_ty.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -0,0 +1,22 @@\n+error[E0308]: mismatched types\n+  --> $DIR/invalid_impl_trait_in_assoc_ty.rs:11:28\n+   |\n+LL |     type Foo = impl std::fmt::Debug;\n+   |                -------------------- the expected opaque type\n+LL |     fn bar() {\n+LL |         let x: Self::Foo = ();\n+   |                ---------   ^^ expected opaque type, found `()`\n+   |                |\n+   |                expected due to this\n+   |\n+   = note: expected opaque type `<() as Foo>::Foo`\n+                found unit type `()`\n+note: this item must have the opaque type in its signature in order to be able to register hidden types\n+  --> $DIR/invalid_impl_trait_in_assoc_ty.rs:10:5\n+   |\n+LL |     fn bar() {\n+   |     ^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "af758d8099f88c37f3d56029e66c7480b5502f21", "filename": "tests/ui/type-alias-impl-trait/issue-98604.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -4,7 +4,7 @@ error[E0271]: expected `test` to be a fn item that returns `Pin<Box<dyn Future<O\n LL |     Box::new(test) as AsyncFnPtr;\n    |     ^^^^^^^^^^^^^^ expected `Pin<Box<dyn Future<Output = ()>>>`, found future\n    |\n-   = note: required for the cast from `fn() -> impl Future<Output = ()> {test}` to the object type `dyn Fn() -> Pin<Box<(dyn Future<Output = ()> + 'static)>>`\n+   = note: required for the cast from `Box<fn() -> impl Future<Output = ()> {test}>` to `Box<(dyn Fn() -> Pin<Box<(dyn Future<Output = ()> + 'static)>> + 'static)>`\n \n error: aborting due to previous error\n "}, {"sha": "9b651008371f2f340d1fb8f1d2c832df51ff11b6", "filename": "tests/ui/type-alias-impl-trait/issue-98608.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-98608.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-98608.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-98608.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -9,7 +9,7 @@ LL |     let b: Box<dyn Fn() -> Box<u8>> = Box::new(hi);\n    |\n    = note:   expected struct `Box<u8>`\n            found opaque type `impl Sized`\n-   = note: required for the cast from `fn() -> impl Sized {hi}` to the object type `dyn Fn() -> Box<u8>`\n+   = note: required for the cast from `Box<fn() -> impl Sized {hi}>` to `Box<dyn Fn() -> Box<u8>>`\n \n error: aborting due to previous error\n "}, {"sha": "67078bcfe89ad2c2947d45d83b7677582d26ee6e", "filename": "tests/ui/type/issue-58355.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftype%2Fissue-58355.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Ftype%2Fissue-58355.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Fissue-58355.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -6,7 +6,7 @@ LL |     x = Some(Box::new(callback));\n    |\n    = help: within `fn() -> dyn ToString`, the trait `Sized` is not implemented for `dyn ToString`\n    = note: required because it appears within the type `fn() -> dyn ToString`\n-   = note: required for the cast from `fn() -> dyn ToString` to the object type `dyn Fn() -> (dyn ToString + 'static)`\n+   = note: required for the cast from `Box<fn() -> dyn ToString>` to `Box<dyn Fn() -> (dyn ToString + 'static)>`\n \n error: aborting due to previous error\n "}, {"sha": "0de3dbbb55725b80b1dfe47d843ff41dd8164177", "filename": "tests/ui/unsized/unsized-fn-param.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Funsized%2Funsized-fn-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Funsized%2Funsized-fn-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized%2Funsized-fn-param.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -5,8 +5,8 @@ LL |     foo11(\"bar\", &\"baz\");\n    |           ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n-   = note: required for the cast from `str` to the object type `dyn AsRef<Path>`\n-help: consider borrowing the value, since `&str` can be coerced into `dyn AsRef<Path>`\n+   = note: required for the cast from `&'static str` to `&dyn AsRef<Path>`\n+help: consider borrowing the value, since `&&'static str` can be coerced into `&dyn AsRef<Path>`\n    |\n LL |     foo11(&\"bar\", &\"baz\");\n    |           +\n@@ -18,8 +18,8 @@ LL |     foo12(&\"bar\", \"baz\");\n    |                   ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n-   = note: required for the cast from `str` to the object type `dyn AsRef<Path>`\n-help: consider borrowing the value, since `&str` can be coerced into `dyn AsRef<Path>`\n+   = note: required for the cast from `&'static str` to `&dyn AsRef<Path>`\n+help: consider borrowing the value, since `&&'static str` can be coerced into `&dyn AsRef<Path>`\n    |\n LL |     foo12(&\"bar\", &\"baz\");\n    |                   +\n@@ -31,8 +31,8 @@ LL |     foo21(\"bar\", &\"baz\");\n    |           ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n-   = note: required for the cast from `str` to the object type `dyn AsRef<str>`\n-help: consider borrowing the value, since `&str` can be coerced into `dyn AsRef<str>`\n+   = note: required for the cast from `&'static str` to `&dyn AsRef<str>`\n+help: consider borrowing the value, since `&&'static str` can be coerced into `&dyn AsRef<str>`\n    |\n LL |     foo21(&\"bar\", &\"baz\");\n    |           +\n@@ -44,8 +44,8 @@ LL |     foo22(&\"bar\", \"baz\");\n    |                   ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n-   = note: required for the cast from `str` to the object type `dyn AsRef<str>`\n-help: consider borrowing the value, since `&str` can be coerced into `dyn AsRef<str>`\n+   = note: required for the cast from `&'static str` to `&dyn AsRef<str>`\n+help: consider borrowing the value, since `&&'static str` can be coerced into `&dyn AsRef<str>`\n    |\n LL |     foo22(&\"bar\", &\"baz\");\n    |                   +"}, {"sha": "40a25c7df6babb9982837f8f415ce2c3eb21f451", "filename": "tests/ui/wf/wf-convert-unsafe-trait-obj-box.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj-box.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -11,8 +11,7 @@ LL | trait Trait: Sized {}\n    |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required for `Box<S>` to implement `CoerceUnsized<Box<dyn Trait>>`\n-   = note: required by cast to type `Box<dyn Trait>`\n+   = note: required for the cast from `Box<S>` to `Box<dyn Trait>`\n \n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj-box.rs:17:15\n@@ -27,8 +26,7 @@ LL | trait Trait: Sized {}\n    |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required for `Box<S>` to implement `CoerceUnsized<Box<dyn Trait>>`\n-   = note: required by cast to type `Box<(dyn Trait + 'static)>`\n+   = note: required for the cast from `Box<S>` to `Box<(dyn Trait + 'static)>`\n \n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj-box.rs:15:5\n@@ -43,8 +41,7 @@ LL | trait Trait: Sized {}\n    |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required for `Box<S>` to implement `CoerceUnsized<Box<dyn Trait>>`\n-   = note: required by cast to type `Box<dyn Trait>`\n+   = note: required for the cast from `Box<S>` to `Box<dyn Trait>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "e2c71df2feb400934706b040d0aa54fc157e4a58", "filename": "tests/ui/wf/wf-convert-unsafe-trait-obj.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -11,8 +11,7 @@ LL | trait Trait: Sized {}\n    |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required for `&S` to implement `CoerceUnsized<&dyn Trait>`\n-   = note: required by cast to type `&dyn Trait`\n+   = note: required for the cast from `&S` to `&dyn Trait`\n \n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj.rs:17:17\n@@ -27,8 +26,7 @@ LL | trait Trait: Sized {}\n    |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required for `&S` to implement `CoerceUnsized<&dyn Trait>`\n-   = note: required by cast to type `&dyn Trait`\n+   = note: required for the cast from `&S` to `&dyn Trait`\n \n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj.rs:15:5\n@@ -43,8 +41,7 @@ LL | trait Trait: Sized {}\n    |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required for `&S` to implement `CoerceUnsized<&dyn Trait>`\n-   = note: required by cast to type `&dyn Trait`\n+   = note: required for the cast from `&S` to `&dyn Trait`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "66504e440600eb16154a78bb78d577034d54374d", "filename": "tests/ui/wf/wf-unsafe-trait-obj-match.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b22bc276f84f0dab590e533cf420013356d2d321/tests%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr?ref=b22bc276f84f0dab590e533cf420013356d2d321", "patch": "@@ -25,8 +25,7 @@ LL | trait Trait: Sized {}\n    |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required for `&S` to implement `CoerceUnsized<&dyn Trait>`\n-   = note: required by cast to type `&dyn Trait`\n+   = note: required for the cast from `&S` to `&dyn Trait`\n \n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-unsafe-trait-obj-match.rs:25:25\n@@ -45,8 +44,7 @@ LL | trait Trait: Sized {}\n    |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required for `&R` to implement `CoerceUnsized<&dyn Trait>`\n-   = note: required by cast to type `&dyn Trait`\n+   = note: required for the cast from `&R` to `&dyn Trait`\n \n error: aborting due to 3 previous errors\n "}]}