{"sha": "6eab94a459a16a4da0c6e18583bf70ee8c42cb1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlYWI5NGE0NTlhMTZhNGRhMGM2ZTE4NTgzYmY3MGVlOGM0MmNiMWY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-08T22:12:57Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-11T17:41:43Z"}, "message": "fix from to/from f32/f64 changes", "tree": {"sha": "32cbf629d5906779950919368a70f16ae35a602f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32cbf629d5906779950919368a70f16ae35a602f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6eab94a459a16a4da0c6e18583bf70ee8c42cb1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6eab94a459a16a4da0c6e18583bf70ee8c42cb1f", "html_url": "https://github.com/rust-lang/rust/commit/6eab94a459a16a4da0c6e18583bf70ee8c42cb1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6eab94a459a16a4da0c6e18583bf70ee8c42cb1f/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48897d07607532f102f26413a06c560853f134a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/48897d07607532f102f26413a06c560853f134a4", "html_url": "https://github.com/rust-lang/rust/commit/48897d07607532f102f26413a06c560853f134a4"}], "stats": {"total": 44, "additions": 26, "deletions": 18}, "files": [{"sha": "3d2c523bf705a2cb7758f23bd0981b609574fac2", "filename": "src/fn_call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6eab94a459a16a4da0c6e18583bf70ee8c42cb1f/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eab94a459a16a4da0c6e18583bf70ee8c42cb1f/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=6eab94a459a16a4da0c6e18583bf70ee8c42cb1f", "patch": "@@ -758,7 +758,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n                 this.machine.last_error = err;\n             }\n             \"GetLastError\" => {\n-                this.write_scalar(Scalar::from_uint(this.machine.last_error, Size::from_bits(32)), dest)?;\n+                this.write_scalar(Scalar::from_u32(this.machine.last_error), dest)?;\n             }\n \n             \"AddVectoredExceptionHandler\" => {\n@@ -854,7 +854,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n                 };\n                 // If there was no error, write back how much was written.\n                 if let Some(n) = written {\n-                    this.write_scalar(Scalar::from_uint(n, Size::from_bits(32)), written_place.into())?;\n+                    this.write_scalar(Scalar::from_u32(n), written_place.into())?;\n                 }\n                 // Return whether this was a success.\n                 this.write_scalar("}, {"sha": "faaa15d3ba965aa13592a604272fdb92447f49da", "filename": "src/intrinsic.rs", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6eab94a459a16a4da0c6e18583bf70ee8c42cb1f/src%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eab94a459a16a4da0c6e18583bf70ee8c42cb1f/src%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic.rs?ref=6eab94a459a16a4da0c6e18583bf70ee8c42cb1f", "patch": "@@ -186,7 +186,8 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n \n             \"sinf32\" | \"fabsf32\" | \"cosf32\" | \"sqrtf32\" | \"expf32\" | \"exp2f32\" | \"logf32\" |\n             \"log10f32\" | \"log2f32\" | \"floorf32\" | \"ceilf32\" | \"truncf32\" => {\n-                let f = this.read_scalar(args[0])?.to_f32()?;\n+                // FIXME: Using host floats.\n+                let f = f32::from_bits(this.read_scalar(args[0])?.to_u32()?);\n                 let f = match intrinsic_name.get() {\n                     \"sinf32\" => f.sin(),\n                     \"fabsf32\" => f.abs(),\n@@ -202,12 +203,13 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                     \"truncf32\" => f.trunc(),\n                     _ => bug!(),\n                 };\n-                this.write_scalar(Scalar::from_f32(f), dest)?;\n+                this.write_scalar(Scalar::from_u32(f.to_bits()), dest)?;\n             }\n \n             \"sinf64\" | \"fabsf64\" | \"cosf64\" | \"sqrtf64\" | \"expf64\" | \"exp2f64\" | \"logf64\" |\n             \"log10f64\" | \"log2f64\" | \"floorf64\" | \"ceilf64\" | \"truncf64\" => {\n-                let f = this.read_scalar(args[0])?.to_f64()?;\n+                // FIXME: Using host floats.\n+                let f = f64::from_bits(this.read_scalar(args[0])?.to_u64()?);\n                 let f = match intrinsic_name.get() {\n                     \"sinf64\" => f.sin(),\n                     \"fabsf64\" => f.abs(),\n@@ -223,7 +225,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                     \"truncf64\" => f.trunc(),\n                     _ => bug!(),\n                 };\n-                this.write_scalar(Scalar::from_f64(f), dest)?;\n+                this.write_scalar(Scalar::from_u64(f.to_bits()), dest)?;\n             }\n \n             \"fadd_fast\" | \"fsub_fast\" | \"fmul_fast\" | \"fdiv_fast\" | \"frem_fast\" => {\n@@ -320,19 +322,21 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n             }\n \n             \"powf32\" => {\n-                let f = this.read_scalar(args[0])?.to_f32()?;\n-                let f2 = this.read_scalar(args[1])?.to_f32()?;\n+                // FIXME: Using host floats.\n+                let f = f32::from_bits(this.read_scalar(args[0])?.to_u32()?);\n+                let f2 = f32::from_bits(this.read_scalar(args[1])?.to_u32()?);\n                 this.write_scalar(\n-                    Scalar::from_f32(f.powf(f2)),\n+                    Scalar::from_u32(f.powf(f2).to_bits()),\n                     dest,\n                 )?;\n             }\n \n             \"powf64\" => {\n-                let f = this.read_scalar(args[0])?.to_f64()?;\n-                let f2 = this.read_scalar(args[1])?.to_f64()?;\n+                // FIXME: Using host floats.\n+                let f = f64::from_bits(this.read_scalar(args[0])?.to_u64()?);\n+                let f2 = f64::from_bits(this.read_scalar(args[1])?.to_u64()?);\n                 this.write_scalar(\n-                    Scalar::from_f64(f.powf(f2)),\n+                    Scalar::from_u64(f.powf(f2).to_bits()),\n                     dest,\n                 )?;\n             }\n@@ -341,8 +345,9 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                 let a = this.read_scalar(args[0])?.to_f32()?;\n                 let b = this.read_scalar(args[1])?.to_f32()?;\n                 let c = this.read_scalar(args[2])?.to_f32()?;\n+                let res = (a*b).value + c;\n                 this.write_scalar(\n-                    Scalar::from_f32(a * b + c),\n+                    Scalar::from_f32(res.value),\n                     dest,\n                 )?;\n             }\n@@ -351,26 +356,29 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                 let a = this.read_scalar(args[0])?.to_f64()?;\n                 let b = this.read_scalar(args[1])?.to_f64()?;\n                 let c = this.read_scalar(args[2])?.to_f64()?;\n+                let res = (a*b).value + c;\n                 this.write_scalar(\n-                    Scalar::from_f64(a * b + c),\n+                    Scalar::from_f64(res.value),\n                     dest,\n                 )?;\n             }\n \n             \"powif32\" => {\n-                let f = this.read_scalar(args[0])?.to_f32()?;\n+                // FIXME: Using host floats.\n+                let f = f32::from_bits(this.read_scalar(args[0])?.to_u32()?);\n                 let i = this.read_scalar(args[1])?.to_i32()?;\n                 this.write_scalar(\n-                    Scalar::from_f32(f.powi(i)),\n+                    Scalar::from_u32(f.powi(i).to_bits()),\n                     dest,\n                 )?;\n             }\n \n             \"powif64\" => {\n-                let f = this.read_scalar(args[0])?.to_f64()?;\n+                // FIXME: Using host floats.\n+                let f = f64::from_bits(this.read_scalar(args[0])?.to_u64()?);\n                 let i = this.read_scalar(args[1])?.to_i32()?;\n                 this.write_scalar(\n-                    Scalar::from_f64(f.powi(i)),\n+                    Scalar::from_u64(f.powi(i).to_bits()),\n                     dest,\n                 )?;\n             }"}]}