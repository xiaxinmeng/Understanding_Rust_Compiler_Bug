{"sha": "f2587703ccde4076168f91da0733476488161eb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyNTg3NzAzY2NkZTQwNzYxNjhmOTFkYTA3MzM0NzY0ODgxNjFlYjE=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-27T09:39:33Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-03-01T18:10:14Z"}, "message": "enable rust-lang/rust#58754", "tree": {"sha": "45a4e8b5f54bae5575fdc702ae3f75787690f443", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45a4e8b5f54bae5575fdc702ae3f75787690f443"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2587703ccde4076168f91da0733476488161eb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2587703ccde4076168f91da0733476488161eb1", "html_url": "https://github.com/rust-lang/rust/commit/f2587703ccde4076168f91da0733476488161eb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2587703ccde4076168f91da0733476488161eb1/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dfabdf11c6cdaffd7c6e6552a6ead8d52c49b10", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dfabdf11c6cdaffd7c6e6552a6ead8d52c49b10", "html_url": "https://github.com/rust-lang/rust/commit/8dfabdf11c6cdaffd7c6e6552a6ead8d52c49b10"}], "stats": {"total": 63, "additions": 31, "deletions": 32}, "files": [{"sha": "1a9089b55d77f000d45b54166d491b7101057450", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f2587703ccde4076168f91da0733476488161eb1/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2587703ccde4076168f91da0733476488161eb1/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=f2587703ccde4076168f91da0733476488161eb1", "patch": "@@ -150,8 +150,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n             }\n         }\n \n-        let nodeid = cx.tcx.hir().hir_to_node_id(hir_id);\n-        self.check_raw_ptr(cx, unsafety, decl, body, nodeid);\n+        self.check_raw_ptr(cx, unsafety, decl, body, hir_id);\n         self.check_line_number(cx, span, body);\n     }\n \n@@ -164,7 +163,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n \n             if let hir::TraitMethod::Provided(eid) = *eid {\n                 let body = cx.tcx.hir().body(eid);\n-                self.check_raw_ptr(cx, sig.header.unsafety, &sig.decl, body, item.id);\n+                self.check_raw_ptr(cx, sig.header.unsafety, &sig.decl, body, item.hir_id);\n             }\n         }\n     }\n@@ -255,10 +254,11 @@ impl<'a, 'tcx> Functions {\n         unsafety: hir::Unsafety,\n         decl: &'tcx hir::FnDecl,\n         body: &'tcx hir::Body,\n-        nodeid: ast::NodeId,\n+        hir_id: hir::HirId,\n     ) {\n         let expr = &body.value;\n-        if unsafety == hir::Unsafety::Normal && cx.access_levels.is_exported(nodeid) {\n+        let node_id = cx.tcx.hir().hir_to_node_id(hir_id);\n+        if unsafety == hir::Unsafety::Normal && cx.access_levels.is_exported(node_id) {\n             let raw_ptrs = iter_input_pats(decl, body)\n                 .zip(decl.inputs.iter())\n                 .filter_map(|(arg, ty)| raw_ptr_arg(arg, ty))"}, {"sha": "deaf054aec7dd5189606e8d2005b8848da8a5374", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f2587703ccde4076168f91da0733476488161eb1/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2587703ccde4076168f91da0733476488161eb1/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=f2587703ccde4076168f91da0733476488161eb1", "patch": "@@ -907,17 +907,18 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             return;\n         }\n         let name = implitem.ident.name;\n-        let parent = cx.tcx.hir().get_parent(implitem.id);\n-        let item = cx.tcx.hir().expect_item(parent);\n-        let def_id = cx.tcx.hir().local_def_id(item.id);\n+        let parent = cx.tcx.hir().get_parent_item(implitem.hir_id);\n+        let item = cx.tcx.hir().expect_item_by_hir_id(parent);\n+        let def_id = cx.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n         let ty = cx.tcx.type_of(def_id);\n         if_chain! {\n             if let hir::ImplItemKind::Method(ref sig, id) = implitem.node;\n             if let Some(first_arg_ty) = sig.decl.inputs.get(0);\n             if let Some(first_arg) = iter_input_pats(&sig.decl, cx.tcx.hir().body(id)).next();\n             if let hir::ItemKind::Impl(_, _, _, _, None, ref self_ty, _) = item.node;\n             then {\n-                if cx.access_levels.is_exported(implitem.id) {\n+                let node_id = cx.tcx.hir().hir_to_node_id(implitem.hir_id);\n+                if cx.access_levels.is_exported(node_id) {\n                 // check missing trait implementations\n                     for &(method_name, n_args, self_kind, out_type, trait_name) in &TRAIT_METHODS {\n                         if name == method_name &&\n@@ -964,7 +965,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         }\n \n         if let hir::ImplItemKind::Method(_, _) = implitem.node {\n-            let ret_ty = return_ty(cx, implitem.id);\n+            let ret_ty = return_ty(cx, implitem.hir_id);\n \n             // walk the return type and check for Self (this does not check associated types)\n             for inner_type in ret_ty.walk() {"}, {"sha": "e9efac1cd349153b792367c010f30710fbc235d4", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2587703ccde4076168f91da0733476488161eb1/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2587703ccde4076168f91da0733476488161eb1/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=f2587703ccde4076168f91da0733476488161eb1", "patch": "@@ -162,7 +162,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, impl_item: &'tcx hir::ImplItem) {\n         // If the method is an impl for a trait, don't doc.\n-        let def_id = cx.tcx.hir().local_def_id(impl_item.id);\n+        let def_id = cx.tcx.hir().local_def_id_from_hir_id(impl_item.hir_id);\n         match cx.tcx.associated_item(def_id).container {\n             ty::TraitContainer(_) => return,\n             ty::ImplContainer(cid) => {"}, {"sha": "40370506fd924090ece89b420e8c73c9dda4792f", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f2587703ccde4076168f91da0733476488161eb1/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2587703ccde4076168f91da0733476488161eb1/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=f2587703ccde4076168f91da0733476488161eb1", "patch": "@@ -146,7 +146,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingInline {\n         }\n \n         // If the item being implemented is not exported, then we don't need #[inline]\n-        if !cx.access_levels.is_exported(impl_item.id) {\n+        let node_id = cx.tcx.hir().hir_to_node_id(impl_item.hir_id);\n+        if !cx.access_levels.is_exported(node_id) {\n             return;\n         }\n \n@@ -155,7 +156,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingInline {\n             hir::ImplItemKind::Const(..) | hir::ImplItemKind::Type(_) | hir::ImplItemKind::Existential(_) => return,\n         };\n \n-        let def_id = cx.tcx.hir().local_def_id(impl_item.id);\n+        let def_id = cx.tcx.hir().local_def_id_from_hir_id(impl_item.hir_id);\n         let trait_def_id = match cx.tcx.associated_item(def_id).container {\n             TraitContainer(cid) => Some(cid),\n             ImplContainer(cid) => cx.tcx.impl_trait_ref(cid).map(|t| t.def_id),"}, {"sha": "fe992d3cf22c0f5b46c90b5de126d3c012c2b2c0", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2587703ccde4076168f91da0733476488161eb1/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2587703ccde4076168f91da0733476488161eb1/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=f2587703ccde4076168f91da0733476488161eb1", "patch": "@@ -133,7 +133,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                             let self_did = cx.tcx.hir().local_def_id_from_hir_id(cx.tcx.hir().get_parent_item(id));\n                             let self_ty = cx.tcx.type_of(self_did);\n                             if_chain! {\n-                                if same_tys(cx, self_ty, return_ty(cx, node_id));\n+                                if same_tys(cx, self_ty, return_ty(cx, id));\n                                 if let Some(default_trait_id) = get_trait_def_id(cx, &paths::DEFAULT_TRAIT);\n                                 then {\n                                     if self.impling_types.is_none() {"}, {"sha": "34a4a7eb2f72db4a5f79a0590aa81e7435abab75", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2587703ccde4076168f91da0733476488161eb1/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2587703ccde4076168f91da0733476488161eb1/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=f2587703ccde4076168f91da0733476488161eb1", "patch": "@@ -177,8 +177,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonCopyConst {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, impl_item: &'tcx ImplItem) {\n         if let ImplItemKind::Const(hir_ty, ..) = &impl_item.node {\n-            let item_node_id = cx.tcx.hir().get_parent_node(impl_item.id);\n-            let item = cx.tcx.hir().expect_item(item_node_id);\n+            let item_hir_id = cx.tcx.hir().get_parent_node_by_hir_id(impl_item.hir_id);\n+            let item = cx.tcx.hir().expect_item_by_hir_id(item_hir_id);\n             // ensure the impl is an inherent impl.\n             if let ItemKind::Impl(_, _, _, _, None, _, _) = item.node {\n                 let ty = hir_ty_to_ty(cx.tcx, hir_ty);"}, {"sha": "e930aae1040bd5e3d36d5c6e525521cfa97a6464", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f2587703ccde4076168f91da0733476488161eb1/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2587703ccde4076168f91da0733476488161eb1/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=f2587703ccde4076168f91da0733476488161eb1", "patch": "@@ -10,7 +10,6 @@ use rustc::ty;\n use rustc::{declare_tool_lint, lint_array};\n use rustc_errors::Applicability;\n use std::borrow::Cow;\n-use syntax::ast::NodeId;\n use syntax::source_map::Span;\n use syntax_pos::MultiSpan;\n \n@@ -111,18 +110,19 @@ impl LintPass for PointerPass {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PointerPass {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n         if let ItemKind::Fn(ref decl, _, _, body_id) = item.node {\n-            check_fn(cx, decl, item.id, Some(body_id));\n+            check_fn(cx, decl, item.hir_id, Some(body_id));\n         }\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx ImplItem) {\n         if let ImplItemKind::Method(ref sig, body_id) = item.node {\n-            if let Some(Node::Item(it)) = cx.tcx.hir().find(cx.tcx.hir().get_parent(item.id)) {\n+            let parent_item = cx.tcx.hir().get_parent_item(item.hir_id);\n+            if let Some(Node::Item(it)) = cx.tcx.hir().find_by_hir_id(parent_item) {\n                 if let ItemKind::Impl(_, _, _, _, Some(_), _, _) = it.node {\n                     return; // ignore trait impls\n                 }\n             }\n-            check_fn(cx, &sig.decl, item.id, Some(body_id));\n+            check_fn(cx, &sig.decl, item.hir_id, Some(body_id));\n         }\n     }\n \n@@ -133,7 +133,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PointerPass {\n             } else {\n                 None\n             };\n-            check_fn(cx, &sig.decl, item.id, body_id);\n+            check_fn(cx, &sig.decl, item.hir_id, body_id);\n         }\n     }\n \n@@ -152,8 +152,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PointerPass {\n }\n \n #[allow(clippy::too_many_lines)]\n-fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl, fn_id: NodeId, opt_body_id: Option<BodyId>) {\n-    let fn_def_id = cx.tcx.hir().local_def_id(fn_id);\n+fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl, fn_id: HirId, opt_body_id: Option<BodyId>) {\n+    let fn_def_id = cx.tcx.hir().local_def_id_from_hir_id(fn_id);\n     let sig = cx.tcx.fn_sig(fn_def_id);\n     let fn_ty = sig.skip_binder();\n "}, {"sha": "9d394a15bd5e27e93a0558ecf9b0d6fadb45a783", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2587703ccde4076168f91da0733476488161eb1/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2587703ccde4076168f91da0733476488161eb1/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=f2587703ccde4076168f91da0733476488161eb1", "patch": "@@ -137,7 +137,7 @@ fn check_trait_method_impl_decl<'a, 'tcx: 'a>(\n     let trait_method_sig = cx.tcx.fn_sig(trait_method.def_id);\n     let trait_method_sig = cx.tcx.erase_late_bound_regions(&trait_method_sig);\n \n-    let impl_method_def_id = cx.tcx.hir().local_def_id(impl_item.id);\n+    let impl_method_def_id = cx.tcx.hir().local_def_id_from_hir_id(impl_item.hir_id);\n     let impl_method_sig = cx.tcx.fn_sig(impl_method_def_id);\n     let impl_method_sig = cx.tcx.erase_late_bound_regions(&impl_method_sig);\n "}, {"sha": "6d04ce70bc434abbcb1936bb04af3c6fdc9e5ddb", "filename": "clippy_lints/src/utils/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2587703ccde4076168f91da0733476488161eb1/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2587703ccde4076168f91da0733476488161eb1/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs?ref=f2587703ccde4076168f91da0733476488161eb1", "patch": "@@ -135,8 +135,7 @@ pub fn span_lint_and_then<'a, 'tcx: 'a, T: LintContext<'tcx>, F>(\n }\n \n pub fn span_lint_node(cx: &LateContext<'_, '_>, lint: &'static Lint, node: HirId, sp: Span, msg: &str) {\n-    let node_id = cx.tcx.hir().hir_to_node_id(node);\n-    DiagnosticWrapper(cx.tcx.struct_span_lint_node(lint, node_id, sp, msg)).docs_link(lint);\n+    DiagnosticWrapper(cx.tcx.struct_span_lint_hir(lint, node, sp, msg)).docs_link(lint);\n }\n \n pub fn span_lint_node_and_then(\n@@ -147,8 +146,7 @@ pub fn span_lint_node_and_then(\n     msg: &str,\n     f: impl FnOnce(&mut DiagnosticBuilder<'_>),\n ) {\n-    let node_id = cx.tcx.hir().hir_to_node_id(node);\n-    let mut db = DiagnosticWrapper(cx.tcx.struct_span_lint_node(lint, node_id, sp, msg));\n+    let mut db = DiagnosticWrapper(cx.tcx.struct_span_lint_hir(lint, node, sp, msg));\n     f(&mut db.0);\n     db.docs_link(lint);\n }"}, {"sha": "70ba0592caa314884f6e031a0702ea6a14748df3", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f2587703ccde4076168f91da0733476488161eb1/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2587703ccde4076168f91da0733476488161eb1/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=f2587703ccde4076168f91da0733476488161eb1", "patch": "@@ -702,8 +702,8 @@ pub fn is_direct_expn_of(span: Span, name: &str) -> Option<Span> {\n }\n \n /// Convenience function to get the return type of a function\n-pub fn return_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, fn_item: NodeId) -> Ty<'tcx> {\n-    let fn_def_id = cx.tcx.hir().local_def_id(fn_item);\n+pub fn return_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, fn_item: hir::HirId) -> Ty<'tcx> {\n+    let fn_def_id = cx.tcx.hir().local_def_id_from_hir_id(fn_item);\n     let ret_ty = cx.tcx.fn_sig(fn_def_id).output();\n     cx.tcx.erase_late_bound_regions(&ret_ty)\n }\n@@ -878,8 +878,7 @@ pub fn is_try(expr: &Expr) -> Option<&Expr> {\n ///\n /// Useful for skipping long running code when it's unnecessary\n pub fn is_allowed(cx: &LateContext<'_, '_>, lint: &'static Lint, id: HirId) -> bool {\n-    let node_id = cx.tcx.hir().hir_to_node_id(id);\n-    cx.tcx.lint_level_at_node(lint, node_id).0 == Level::Allow\n+    cx.tcx.lint_level_at_node(lint, id).0 == Level::Allow\n }\n \n pub fn get_arg_name(pat: &Pat) -> Option<ast::Name> {"}]}