{"sha": "1b1ca6d5465ef4de12b1adf25cd4598f261c660d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiMWNhNmQ1NDY1ZWY0ZGUxMmIxYWRmMjVjZDQ1OThmMjYxYzY2MGQ=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-04-25T06:19:34Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-05-10T23:58:17Z"}, "message": "add back jemalloc to the tree\n\nThis adds a `std::rt::heap` module with a nice allocator API. It's a\nstep towards fixing #13094 and is a starting point for working on a\ngeneric allocator trait.\n\nThe revision used for the jemalloc submodule is the stable 3.6.0 release.\n\nCloses #11807", "tree": {"sha": "29c49a2ad0b6fdb69610019f84a5fa70ca62319e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29c49a2ad0b6fdb69610019f84a5fa70ca62319e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b1ca6d5465ef4de12b1adf25cd4598f261c660d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b1ca6d5465ef4de12b1adf25cd4598f261c660d", "html_url": "https://github.com/rust-lang/rust/commit/1b1ca6d5465ef4de12b1adf25cd4598f261c660d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b1ca6d5465ef4de12b1adf25cd4598f261c660d/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11571cd9c1cde63c3b46ca65e608b84647785ac8", "url": "https://api.github.com/repos/rust-lang/rust/commits/11571cd9c1cde63c3b46ca65e608b84647785ac8", "html_url": "https://github.com/rust-lang/rust/commit/11571cd9c1cde63c3b46ca65e608b84647785ac8"}], "stats": {"total": 165, "additions": 158, "deletions": 7}, "files": [{"sha": "37dbb30c82a8f444aef99ce953007560a47db7b7", "filename": ".gitmodules", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1b1ca6d5465ef4de12b1adf25cd4598f261c660d/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/1b1ca6d5465ef4de12b1adf25cd4598f261c660d/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=1b1ca6d5465ef4de12b1adf25cd4598f261c660d", "patch": "@@ -15,3 +15,6 @@\n [submodule \"src/rt/hoedown\"]\n \tpath = src/rt/hoedown\n \turl = https://github.com/rust-lang/hoedown.git\n+[submodule \"src/jemalloc\"]\n+\tpath = src/jemalloc\n+\turl = https://github.com/rust-lang/jemalloc.git"}, {"sha": "3ab71f762f236e6c7baa7010af3de0b184a68a72", "filename": "configure", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b1ca6d5465ef4de12b1adf25cd4598f261c660d/configure", "raw_url": "https://github.com/rust-lang/rust/raw/1b1ca6d5465ef4de12b1adf25cd4598f261c660d/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=1b1ca6d5465ef4de12b1adf25cd4598f261c660d", "patch": "@@ -782,6 +782,7 @@ do\n   for s in 0 1 2 3\n   do\n     make_dir $t/rt/stage$s\n+    make_dir $t/rt/jemalloc\n     make_dir $t/rt/libuv\n     make_dir $t/rt/libuv/src/ares\n     make_dir $t/rt/libuv/src/eio"}, {"sha": "0437e08de28b6b4f3eba83fcbbc07f0ae8a48d2a", "filename": "mk/crates.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b1ca6d5465ef4de12b1adf25cd4598f261c660d/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/1b1ca6d5465ef4de12b1adf25cd4598f261c660d/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=1b1ca6d5465ef4de12b1adf25cd4598f261c660d", "patch": "@@ -57,7 +57,7 @@ CRATES := $(TARGET_CRATES) $(HOST_CRATES)\n TOOLS := compiletest rustdoc rustc\n \n DEPS_core :=\n-DEPS_std := core libc native:rustrt native:compiler-rt native:backtrace\n+DEPS_std := core libc native:rustrt native:compiler-rt native:backtrace native:jemalloc\n DEPS_green := std rand native:context_switch\n DEPS_rustuv := std native:uv native:uv_support\n DEPS_native := std"}, {"sha": "e4a548dd7bf0ac2b5a83b0356c2275bf87a2ed14", "filename": "mk/rt.mk", "status": "modified", "additions": 48, "deletions": 4, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/1b1ca6d5465ef4de12b1adf25cd4598f261c660d/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/1b1ca6d5465ef4de12b1adf25cd4598f261c660d/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=1b1ca6d5465ef4de12b1adf25cd4598f261c660d", "patch": "@@ -122,10 +122,13 @@ $(foreach lib,$(NATIVE_LIBS),\t\t\t\t\t    \\\n ################################################################################\n # Building third-party targets with external build systems\n #\n-# The only current member of this section is libuv, but long ago this used to\n-# also be occupied by jemalloc. This location is meant for dependencies which\n-# have external build systems. It is still assumed that the output of each of\n-# these steps is a static library in the correct location.\n+# This location is meant for dependencies which have external build systems. It\n+# is still assumed that the output of each of these steps is a static library\n+# in the correct location.\n+################################################################################\n+\n+################################################################################\n+# libuv\n ################################################################################\n \n define DEF_LIBUV_ARCH_VAR\n@@ -154,13 +157,19 @@ define DEF_THIRD_PARTY_TARGETS\n \n ifeq ($$(CFG_WINDOWSY_$(1)), 1)\n   LIBUV_OSTYPE_$(1) := win\n+  # This isn't necessarily a desired option, but it's harmless and works around\n+  # what appears to be a mingw-w64 bug.\n+  #\n+  # https://sourceforge.net/p/mingw-w64/bugs/395/\n+  JEMALLOC_ARGS_$(1) := --enable-lazy-lock\n else ifeq ($(OSTYPE_$(1)), apple-darwin)\n   LIBUV_OSTYPE_$(1) := mac\n else ifeq ($(OSTYPE_$(1)), unknown-freebsd)\n   LIBUV_OSTYPE_$(1) := freebsd\n else ifeq ($(OSTYPE_$(1)), linux-androideabi)\n   LIBUV_OSTYPE_$(1) := android\n   LIBUV_ARGS_$(1) := PLATFORM=android host=android OS=linux\n+  JEMALLOC_ARGS_$(1) := --disable-tls\n else\n   LIBUV_OSTYPE_$(1) := linux\n endif\n@@ -220,6 +229,41 @@ $$(LIBUV_DIR_$(1))/Release/libuv.a: $$(LIBUV_DEPS) $$(LIBUV_MAKEFILE_$(1)) \\\n \n endif\n \n+################################################################################\n+# jemalloc\n+################################################################################\n+\n+ifdef CFG_ENABLE_FAST_MAKE\n+JEMALLOC_DEPS := $(S)/.gitmodules\n+else\n+JEMALLOC_DEPS := $(wildcard \\\n+\t\t   $(S)src/jemalloc/* \\\n+\t\t   $(S)src/jemalloc/*/* \\\n+\t\t   $(S)src/jemalloc/*/*/* \\\n+\t\t   $(S)src/jemalloc/*/*/*/*)\n+endif\n+\n+JEMALLOC_NAME_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),jemalloc)\n+ifeq ($$(CFG_WINDOWSY_$(1)),1)\n+  JEMALLOC_REAL_NAME_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),jemalloc_s)\n+else\n+  JEMALLOC_REAL_NAME_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),jemalloc_pic)\n+endif\n+JEMALLOC_LIB_$(1) := $$(RT_OUTPUT_DIR_$(1))/$$(JEMALLOC_NAME_$(1))\n+JEMALLOC_BUILD_DIR_$(1) := $$(RT_OUTPUT_DIR_$(1))/jemalloc\n+\n+$$(JEMALLOC_LIB_$(1)): $$(JEMALLOC_DEPS) $$(MKFILE_DEPS)\n+\t@$$(call E, make: jemalloc)\n+\tcd \"$$(JEMALLOC_BUILD_DIR_$(1))\"; \"$(S)src/jemalloc/configure\" \\\n+\t\t$$(JEMALLOC_ARGS_$(1)) --enable-cc-silence --with-jemalloc-prefix=je_ \\\n+\t\t--disable-experimental --build=$(CFG_BUILD) --host=$(1) \\\n+\t\tCC=\"$$(CC_$(1))\" \\\n+\t\tAR=\"$$(AR_$(1))\" \\\n+\t\tRANLIB=\"$$(AR_$(1)) s\" \\\n+\t\tEXTRA_CFLAGS=\"$$(CFG_GCCISH_CFLAGS)\"\n+\t$$(Q)$$(MAKE) -C \"$$(JEMALLOC_BUILD_DIR_$(1))\" build_lib_static\n+\t$$(Q)cp $$(JEMALLOC_BUILD_DIR_$(1))/lib/$$(JEMALLOC_REAL_NAME_$(1)) $$(JEMALLOC_LIB_$(1))\n+\n ################################################################################\n # compiler-rt\n ################################################################################"}, {"sha": "71d56d11a7346c21c62d911aa52e6b4bade9d7a6", "filename": "mk/tests.mk", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b1ca6d5465ef4de12b1adf25cd4598f261c660d/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/1b1ca6d5465ef4de12b1adf25cd4598f261c660d/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=1b1ca6d5465ef4de12b1adf25cd4598f261c660d", "patch": "@@ -240,6 +240,7 @@ ALL_HS := $(filter-out $(S)src/rt/vg/valgrind.h \\\n tidy:\n \t\t@$(call E, check: formatting)\n \t\t$(Q)find $(S)src -name '*.r[sc]' \\\n+\t\t| grep '^$(S)src/jemalloc' -v \\\n \t\t| grep '^$(S)src/libuv' -v \\\n \t\t| grep '^$(S)src/llvm' -v \\\n \t\t| grep '^$(S)src/gyp' -v \\\n@@ -264,8 +265,9 @@ tidy:\n \t\t$(Q)find $(S)src -type f -perm +111 \\\n \t\t    -not -name '*.rs' -and -not -name '*.py' \\\n \t\t    -and -not -name '*.sh' \\\n-\t\t| grep '^$(S)src/llvm' -v \\\n+\t\t| grep '^$(S)src/jemalloc' -v \\\n \t\t| grep '^$(S)src/libuv' -v \\\n+\t\t| grep '^$(S)src/llvm' -v \\\n \t\t| grep '^$(S)src/rt/hoedown' -v \\\n \t\t| grep '^$(S)src/gyp' -v \\\n \t\t| grep '^$(S)src/etc' -v \\"}, {"sha": "6a96910f2eaea6d2c705bb12379b23576b30d7d5", "filename": "src/jemalloc", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fjemalloc?ref=1b1ca6d5465ef4de12b1adf25cd4598f261c660d", "patch": "@@ -0,0 +1 @@\n+Subproject commit 6a96910f2eaea6d2c705bb12379b23576b30d7d5"}, {"sha": "b4b44fbf5c784cf71c18ede2cb5e295073effa82", "filename": "src/libstd/rt/heap.rs", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/1b1ca6d5465ef4de12b1adf25cd4598f261c660d/src%2Flibstd%2Frt%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b1ca6d5465ef4de12b1adf25cd4598f261c660d/src%2Flibstd%2Frt%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fheap.rs?ref=1b1ca6d5465ef4de12b1adf25cd4598f261c660d", "patch": "@@ -0,0 +1,97 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use intrinsics::{abort, cttz32};\n+use libc::{c_int, c_void, size_t};\n+use ptr::RawPtr;\n+\n+#[link(name = \"jemalloc\", kind = \"static\")]\n+extern {\n+    fn je_mallocx(size: size_t, flags: c_int) -> *mut c_void;\n+    fn je_rallocx(ptr: *mut c_void, size: size_t, flags: c_int) -> *mut c_void;\n+    fn je_xallocx(ptr: *mut c_void, size: size_t, extra: size_t, flags: c_int) -> size_t;\n+    fn je_dallocx(ptr: *mut c_void, flags: c_int);\n+    fn je_nallocx(size: size_t, flags: c_int) -> size_t;\n+}\n+\n+// -lpthread needs to occur after -ljemalloc, the earlier argument isn't enough\n+#[cfg(not(windows))]\n+#[link(name = \"pthread\")]\n+extern {}\n+\n+// MALLOCX_ALIGN(a) macro\n+#[inline(always)]\n+fn mallocx_align(a: uint) -> c_int { unsafe { cttz32(a as u32) as c_int } }\n+\n+/// Return a pointer to `size` bytes of memory.\n+///\n+/// Behavior is undefined if the requested size is 0 or the alignment is not a power of 2. The\n+/// alignment must be no larger than the largest supported page size on the platform.\n+#[inline]\n+pub unsafe fn allocate(size: uint, align: uint) -> *mut u8 {\n+    let ptr = je_mallocx(size as size_t, mallocx_align(align)) as *mut u8;\n+    if ptr.is_null() {\n+        abort()\n+    }\n+    ptr\n+}\n+\n+/// Extend or shrink the allocation referenced by `ptr` to `size` bytes of memory.\n+///\n+/// Behavior is undefined if the requested size is 0 or the alignment is not a power of 2. The\n+/// alignment must be no larger than the largest supported page size on the platform.\n+///\n+/// The `old_size` and `align` parameters are the parameters that were used to create the\n+/// allocation referenced by `ptr`. The `old_size` parameter may also be the value returned by\n+/// `usable_size` for the requested size.\n+#[inline]\n+#[allow(unused_variable)] // for the parameter names in the documentation\n+pub unsafe fn reallocate(ptr: *mut u8, size: uint, align: uint, old_size: uint) -> *mut u8 {\n+    let ptr = je_rallocx(ptr as *mut c_void, size as size_t, mallocx_align(align)) as *mut u8;\n+    if ptr.is_null() {\n+        abort()\n+    }\n+    ptr\n+}\n+\n+/// Extend or shrink the allocation referenced by `ptr` to `size` bytes of memory in-place.\n+///\n+/// Return true if successful, otherwise false if the allocation was not altered.\n+///\n+/// Behavior is undefined if the requested size is 0 or the alignment is not a power of 2. The\n+/// alignment must be no larger than the largest supported page size on the platform.\n+///\n+/// The `old_size` and `align` parameters are the parameters that were used to\n+/// create the allocation referenced by `ptr`. The `old_size` parameter may be\n+/// any value in range_inclusive(requested_size, usable_size).\n+#[inline]\n+#[allow(unused_variable)] // for the parameter names in the documentation\n+pub unsafe fn reallocate_inplace(ptr: *mut u8, size: uint, align: uint, old_size: uint) -> bool {\n+    je_xallocx(ptr as *mut c_void, size as size_t, 0, mallocx_align(align)) == size as size_t\n+}\n+\n+/// Deallocate the memory referenced by `ptr`.\n+///\n+/// The `ptr` parameter must not be null.\n+///\n+/// The `size` and `align` parameters are the parameters that were used to create the\n+/// allocation referenced by `ptr`. The `size` parameter may also be the value returned by\n+/// `usable_size` for the requested size.\n+#[inline]\n+#[allow(unused_variable)] // for the parameter names in the documentation\n+pub unsafe fn deallocate(ptr: *mut u8, size: uint, align: uint) {\n+    je_dallocx(ptr as *mut c_void, mallocx_align(align))\n+}\n+\n+/// Return the usable size of an allocation created with the specified the `size` and `align`.\n+#[inline]\n+pub fn usable_size(size: uint, align: uint) -> uint {\n+    unsafe { je_nallocx(size as size_t, mallocx_align(align)) as uint }\n+}"}, {"sha": "904921cfa18313039ba341fc560260d750f6f1e2", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1b1ca6d5465ef4de12b1adf25cd4598f261c660d/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b1ca6d5465ef4de12b1adf25cd4598f261c660d/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=1b1ca6d5465ef4de12b1adf25cd4598f261c660d", "patch": "@@ -89,7 +89,10 @@ mod macros;\n // The global (exchange) heap.\n pub mod global_heap;\n \n-// Implementations of language-critical runtime features like @.\n+/// The low-level memory allocation API.\n+pub mod heap;\n+\n+/// Implementations of language-critical runtime features like @.\n pub mod task;\n \n // The EventLoop and internal synchronous I/O interface."}]}