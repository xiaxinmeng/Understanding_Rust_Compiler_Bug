{"sha": "684497648ae22a69df80d410de643385c2cc86d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NDQ5NzY0OGFlMjJhNjlkZjgwZDQxMGRlNjQzMzg1YzJjYzg2ZDQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-07-25T18:22:46Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-07-25T19:36:51Z"}, "message": "review comments: add FIXME comments and formatting", "tree": {"sha": "6152caa927a031bd4aa6506bbb21ff7bbcd72d58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6152caa927a031bd4aa6506bbb21ff7bbcd72d58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/684497648ae22a69df80d410de643385c2cc86d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/684497648ae22a69df80d410de643385c2cc86d4", "html_url": "https://github.com/rust-lang/rust/commit/684497648ae22a69df80d410de643385c2cc86d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/684497648ae22a69df80d410de643385c2cc86d4/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70c817aee3aa204122b64cdfc2db05fa182da1c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/70c817aee3aa204122b64cdfc2db05fa182da1c5", "html_url": "https://github.com/rust-lang/rust/commit/70c817aee3aa204122b64cdfc2db05fa182da1c5"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "52f65e1b474754b5927eb12c59136fefd4bf03f8", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/684497648ae22a69df80d410de643385c2cc86d4/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/684497648ae22a69df80d410de643385c2cc86d4/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=684497648ae22a69df80d410de643385c2cc86d4", "patch": "@@ -389,11 +389,18 @@ impl<'a> StringReader<'a> {\n                                                           self.pos,\n                                                           \"unknown start of token\",\n                                                           c);\n-                if let Some(t) = unicode_chars::check_for_substitution(self, start, c, &mut err) {\n-                    err.emit();\n-                    return Ok(t);\n+                // FIXME: the lexer could be used to turn the ASCII version of unicode homoglyphs,\n+                // instead of keeping a table in `check_for_substitution`into the token. Ideally,\n+                // this should be inside `rustc_lexer`. However, we should first remove compound\n+                // tokens like `<<` from `rustc_lexer`, and then add fancier error recovery to it,\n+                // as there will be less overall work to do this way.\n+                return match unicode_chars::check_for_substitution(self, start, c, &mut err) {\n+                    Some(token) => {\n+                        err.emit();\n+                        Ok(token)\n+                    }\n+                    None => Err(err),\n                 }\n-                return Err(err)\n             }\n         };\n         Ok(kind)"}, {"sha": "eaa736c6a351741a71ee29675592695bbb92dc67", "filename": "src/libsyntax/parse/lexer/unicode_chars.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/684497648ae22a69df80d410de643385c2cc86d4/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/684497648ae22a69df80d410de643385c2cc86d4/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs?ref=684497648ae22a69df80d410de643385c2cc86d4", "patch": "@@ -3,7 +3,7 @@\n \n use super::StringReader;\n use errors::{Applicability, DiagnosticBuilder};\n-use syntax_pos::{BytePos, Pos, Span, NO_EXPANSION};\n+use syntax_pos::{BytePos, Pos, Span, NO_EXPANSION, symbol::kw};\n use crate::parse::token;\n \n #[rustfmt::skip] // for line breaks\n@@ -298,18 +298,20 @@ const UNICODE_ARRAY: &[(char, &str, char)] = &[\n     ('\uff1e', \"Fullwidth Greater-Than Sign\", '>'),\n ];\n \n+// FIXME: the lexer could be used to turn the ASCII version of unicode homoglyphs, instead of\n+// keeping the substitution token in this table. Ideally, this should be inside `rustc_lexer`.\n+// However, we should first remove compound tokens like `<<` from `rustc_lexer`, and then add\n+// fancier error recovery to it, as there will be less overall work to do this way.\n const ASCII_ARRAY: &[(char, &str, Option<token::TokenKind>)] = &[\n     (' ', \"Space\", Some(token::Whitespace)),\n-    ('_', \"Underscore\", None),\n+    ('_', \"Underscore\", Some(token::Ident(kw::Underscore, false))),\n     ('-', \"Minus/Hyphen\", Some(token::BinOp(token::Minus))),\n     (',', \"Comma\", Some(token::Comma)),\n     (';', \"Semicolon\", Some(token::Semi)),\n     (':', \"Colon\", Some(token::Colon)),\n     ('!', \"Exclamation Mark\", Some(token::Not)),\n     ('?', \"Question Mark\", Some(token::Question)),\n     ('.', \"Period\", Some(token::Dot)),\n-    ('\\'', \"Single Quote\", None),  // Literals are already lexed by this point, so we can't recover\n-    ('\"', \"Quotation Mark\", None), // gracefully just by spitting the correct token out.\n     ('(', \"Left Parenthesis\", Some(token::OpenDelim(token::Paren))),\n     (')', \"Right Parenthesis\", Some(token::CloseDelim(token::Paren))),\n     ('[', \"Left Square Bracket\", Some(token::OpenDelim(token::Bracket))),\n@@ -324,6 +326,10 @@ const ASCII_ARRAY: &[(char, &str, Option<token::TokenKind>)] = &[\n     ('<', \"Less-Than Sign\", Some(token::Lt)),\n     ('=', \"Equals Sign\", Some(token::Eq)),\n     ('>', \"Greater-Than Sign\", Some(token::Gt)),\n+    // FIXME: Literals are already lexed by this point, so we can't recover gracefully just by\n+    // spitting the correct token out.\n+    ('\\'', \"Single Quote\", None),\n+    ('\"', \"Quotation Mark\", None),\n ];\n \n crate fn check_for_substitution<'a>("}]}