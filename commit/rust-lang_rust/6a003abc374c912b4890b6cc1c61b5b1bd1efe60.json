{"sha": "6a003abc374c912b4890b6cc1c61b5b1bd1efe60", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhMDAzYWJjMzc0YzkxMmI0ODkwYjZjYzFjNjFiNWIxYmQxZWZlNjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-26T18:30:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-26T18:30:42Z"}, "message": "Auto merge of #25593 - nham:E0210_E0326, r=alexcrichton\n\nChanges:\r\n\r\n - adds explanations for E0185, E0186, E0202, E0326\r\n - fixes the explanation for E0053. The previous description was too narrow; there are other error cases.\r\n - changes the error message for E0202 to be specific for associated types, since it seems inherent associated constants are implemented.\r\n\r\nPart of #24407", "tree": {"sha": "94dd71a7b678fe6445b5c953ae09dccfcb68b35d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94dd71a7b678fe6445b5c953ae09dccfcb68b35d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a003abc374c912b4890b6cc1c61b5b1bd1efe60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a003abc374c912b4890b6cc1c61b5b1bd1efe60", "html_url": "https://github.com/rust-lang/rust/commit/6a003abc374c912b4890b6cc1c61b5b1bd1efe60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a003abc374c912b4890b6cc1c61b5b1bd1efe60/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ea80faae8466ba7fcebf8e330a9038ff3917db4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ea80faae8466ba7fcebf8e330a9038ff3917db4", "html_url": "https://github.com/rust-lang/rust/commit/0ea80faae8466ba7fcebf8e330a9038ff3917db4"}, {"sha": "cc9d1de69251bae8b46133301fdeb0f13b8c4d51", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc9d1de69251bae8b46133301fdeb0f13b8c4d51", "html_url": "https://github.com/rust-lang/rust/commit/cc9d1de69251bae8b46133301fdeb0f13b8c4d51"}], "stats": {"total": 112, "additions": 82, "deletions": 30}, "files": [{"sha": "22223bc3814566351cb642f2f1c1c48637ee36cb", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a003abc374c912b4890b6cc1c61b5b1bd1efe60/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a003abc374c912b4890b6cc1c61b5b1bd1efe60/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=6a003abc374c912b4890b6cc1c61b5b1bd1efe60", "patch": "@@ -876,7 +876,7 @@ fn convert_item(ccx: &CrateCtxt, it: &ast::Item) {\n                 if let ast::TypeImplItem(ref ty) = impl_item.node {\n                     if opt_trait_ref.is_none() {\n                         span_err!(tcx.sess, impl_item.span, E0202,\n-                                  \"associated items are not allowed in inherent impls\");\n+                                  \"associated types are not allowed in inherent impls\");\n                     }\n \n                     as_refsociated_type(ccx, ImplContainer(local_def(it.id)),"}, {"sha": "f13fc9ce9b40197c3b1f781c322ecdf3e6e1dc9e", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 80, "deletions": 28, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/6a003abc374c912b4890b6cc1c61b5b1bd1efe60/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a003abc374c912b4890b6cc1c61b5b1bd1efe60/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=6a003abc374c912b4890b6cc1c61b5b1bd1efe60", "patch": "@@ -223,40 +223,27 @@ impl Foo for Bar {\n \"##,\n \n E0053: r##\"\n-For any given method of a trait, the mutabilities of the parameters must match\n-between the trait definition and the implementation.\n+The parameters of any trait method must match between a trait implementation\n+and the trait definition.\n \n-Here's an example where the mutability of the `self` parameter is wrong:\n+Here are a couple examples of this error:\n \n ```\n-trait Foo { fn foo(&self); }\n-\n-struct Bar;\n-\n-impl Foo for Bar {\n-    // error, the signature should be `fn foo(&self)` instead\n-    fn foo(&mut self) { }\n+trait Foo {\n+    fn foo(x: u16);\n+    fn bar(&self);\n }\n \n-fn main() {}\n-```\n-\n-Here's another example, this time for a non-`self` parameter:\n-\n-```\n-trait Foo { fn foo(x: &mut bool) -> bool; }\n-\n struct Bar;\n \n impl Foo for Bar {\n-    // error, the type of `x` should be `&mut bool` instead\n-    fn foo(x: &bool) -> bool { *x }\n-}\n+    // error, expected u16, found i16\n+    fn foo(x: i16) { }\n \n-fn main() {}\n+    // error, values differ in mutability\n+    fn foo(&mut self) { }\n+}\n ```\n-\n-\n \"##,\n \n E0054: r##\"\n@@ -678,6 +665,48 @@ it has been disabled for now.\n [iss20126]: https://github.com/rust-lang/rust/issues/20126\n \"##,\n \n+E0185: r##\"\n+An associated function for a trait was defined to be static, but an\n+implementation of the trait declared the same function to be a method (i.e. to\n+take a `self` parameter).\n+\n+Here's an example of this error:\n+\n+```\n+trait Foo {\n+    fn foo();\n+}\n+\n+struct Bar;\n+\n+impl Foo for Bar {\n+    // error, method `foo` has a `&self` declaration in the impl, but not in\n+    // the trait\n+    fn foo(&self) {}\n+}\n+\"##,\n+\n+E0186: r##\"\n+An associated function for a trait was defined to be a method (i.e. to take a\n+`self` parameter), but an implementation of the trait declared the same function\n+to be static.\n+\n+Here's an example of this error:\n+\n+```\n+trait Foo {\n+    fn foo(&self);\n+}\n+\n+struct Bar;\n+\n+impl Foo for Bar {\n+    // error, method `foo` has a `&self` declaration in the trait, but not in\n+    // the impl\n+    fn foo() {}\n+}\n+\"##,\n+\n E0197: r##\"\n Inherent implementations (one that do not implement a trait but provide\n methods associated with a type) are always safe because they are not\n@@ -766,6 +795,14 @@ impl Foo {\n ```\n \"##,\n \n+E0202: r##\"\n+Inherent associated types were part of [RFC 195] but are not yet implemented.\n+See [the tracking issue][iss8995] for the status of this implementation.\n+\n+[RFC 195]: https://github.com/rust-lang/rfcs/pull/195\n+[iss8995]: https://github.com/rust-lang/rust/issues/8995\n+\"##,\n+\n E0204: r##\"\n An attempt to implement the `Copy` trait for a struct failed because one of the\n fields does not implement `Copy`. To fix this, you must implement `Copy` for the\n@@ -906,6 +943,25 @@ for types as needed by the compiler, and it is currently disallowed to\n explicitly implement it for a type.\n \"##,\n \n+E0326: r##\"\n+The types of any associated constants in a trait implementation must match the\n+types in the trait definition. This error indicates that there was a mismatch.\n+\n+Here's an example of this error:\n+\n+```\n+trait Foo {\n+    const BAR: bool;\n+}\n+\n+struct Bar;\n+\n+impl Foo for Bar {\n+    const BAR: u32 = 5; // error, expected bool, found u32\n+}\n+```\n+\"##,\n+\n E0368: r##\"\n This error indicates that a binary assignment operator like `+=` or `^=` was\n applied to the wrong types.\n@@ -1037,8 +1093,6 @@ register_diagnostics! {\n     E0174, // explicit use of unboxed closure methods are experimental\n     E0182,\n     E0183,\n-    E0185,\n-    E0186,\n     E0187, // can't infer the kind of the closure\n     E0188, // can not cast a immutable reference to a mutable pointer\n     E0189, // deprecated: can only cast a boxed pointer to a boxed object\n@@ -1050,7 +1104,6 @@ register_diagnostics! {\n     E0194,\n     E0195, // lifetime parameters or bounds on method do not match the trait declaration\n     E0196, // cannot determine a type for this closure\n-    E0202, // associated items are not allowed in inherent impls\n     E0203, // type parameter has more than one relaxed default bound,\n            // and only one is supported\n     E0207, // type parameter is not constrained by the impl trait, self type, or predicate\n@@ -1100,7 +1153,6 @@ register_diagnostics! {\n     E0323, // implemented an associated const when another trait item expected\n     E0324, // implemented a method when another trait item expected\n     E0325, // implemented an associated type when another trait item expected\n-    E0326, // associated const implemented with different type from trait\n     E0327, // referred to method instead of constant in match pattern\n     E0328, // cannot implement Unsize explicitly\n     E0329, // associated const depends on type parameter or Self."}, {"sha": "7eab831258f2ecfdbdbc61d7670b3373d2cd83b7", "filename": "src/test/compile-fail/assoc-inherent.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a003abc374c912b4890b6cc1c61b5b1bd1efe60/src%2Ftest%2Fcompile-fail%2Fassoc-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a003abc374c912b4890b6cc1c61b5b1bd1efe60/src%2Ftest%2Fcompile-fail%2Fassoc-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassoc-inherent.rs?ref=6a003abc374c912b4890b6cc1c61b5b1bd1efe60", "patch": "@@ -13,7 +13,7 @@\n struct Foo;\n \n impl Foo {\n-    type Bar = isize; //~ERROR associated items are not allowed in inherent impls\n+    type Bar = isize; //~ERROR associated types are not allowed in inherent impls\n }\n \n fn main() {}"}]}