{"sha": "0e8be599cd04a8566224c63eeb07f5fa04605702", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlOGJlNTk5Y2QwNGE4NTY2MjI0YzYzZWViMDdmNWZhMDQ2MDU3MDI=", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-05-03T11:32:17Z"}, "committer": {"name": "Thibaud Genty", "email": "thibaud.genty@cosmian.com", "date": "2020-05-14T14:01:07Z"}, "message": "Merge `option_expect_used` and `result_expect_used` lints into `expect_used` lint", "tree": {"sha": "e698720c2c403e46021857975601faea8aac2501", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e698720c2c403e46021857975601faea8aac2501"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e8be599cd04a8566224c63eeb07f5fa04605702", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e8be599cd04a8566224c63eeb07f5fa04605702", "html_url": "https://github.com/rust-lang/rust/commit/0e8be599cd04a8566224c63eeb07f5fa04605702", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e8be599cd04a8566224c63eeb07f5fa04605702/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcf61666bd903c0d13c081cf222b423e45cd854e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcf61666bd903c0d13c081cf222b423e45cd854e", "html_url": "https://github.com/rust-lang/rust/commit/bcf61666bd903c0d13c081cf222b423e45cd854e"}], "stats": {"total": 98, "additions": 35, "deletions": 63}, "files": [{"sha": "4eeb71fa5c58de7f47533f475b2f7c38a45be221", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e8be599cd04a8566224c63eeb07f5fa04605702/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/0e8be599cd04a8566224c63eeb07f5fa04605702/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=0e8be599cd04a8566224c63eeb07f5fa04605702", "patch": "@@ -1337,6 +1337,7 @@ Released 2018-09-13\n [`excessive_precision`]: https://rust-lang.github.io/rust-clippy/master/index.html#excessive_precision\n [`exit`]: https://rust-lang.github.io/rust-clippy/master/index.html#exit\n [`expect_fun_call`]: https://rust-lang.github.io/rust-clippy/master/index.html#expect_fun_call\n+[`expect_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#expect_used\n [`expl_impl_clone_on_copy`]: https://rust-lang.github.io/rust-clippy/master/index.html#expl_impl_clone_on_copy\n [`explicit_counter_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#explicit_counter_loop\n [`explicit_deref_methods`]: https://rust-lang.github.io/rust-clippy/master/index.html#explicit_deref_methods\n@@ -1497,7 +1498,6 @@ Released 2018-09-13\n [`option_and_then_some`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_and_then_some\n [`option_as_ref_deref`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_as_ref_deref\n [`option_env_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_env_unwrap\n-[`option_expect_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_expect_used\n [`option_map_or_none`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_map_or_none\n [`option_map_unit_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_map_unit_fn\n [`option_option`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_option\n@@ -1537,7 +1537,6 @@ Released 2018-09-13\n [`regex_macro`]: https://rust-lang.github.io/rust-clippy/master/index.html#regex_macro\n [`replace_consts`]: https://rust-lang.github.io/rust-clippy/master/index.html#replace_consts\n [`rest_pat_in_fully_bound_structs`]: https://rust-lang.github.io/rust-clippy/master/index.html#rest_pat_in_fully_bound_structs\n-[`result_expect_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_expect_used\n [`result_map_or_into_option`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_or_into_option\n [`result_map_unit_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_unit_fn\n [`result_unwrap_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_unwrap_used"}, {"sha": "eaef1f543d38a96292277588ed87e712888c5b99", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e8be599cd04a8566224c63eeb07f5fa04605702/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e8be599cd04a8566224c63eeb07f5fa04605702/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=0e8be599cd04a8566224c63eeb07f5fa04605702", "patch": "@@ -657,6 +657,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &methods::CLONE_ON_COPY,\n         &methods::CLONE_ON_REF_PTR,\n         &methods::EXPECT_FUN_CALL,\n+        &methods::EXPECT_USED,\n         &methods::FILETYPE_IS_FILE,\n         &methods::FILTER_MAP,\n         &methods::FILTER_MAP_NEXT,\n@@ -678,10 +679,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &methods::OK_EXPECT,\n         &methods::OPTION_AND_THEN_SOME,\n         &methods::OPTION_AS_REF_DEREF,\n-        &methods::OPTION_EXPECT_USED,\n         &methods::OPTION_MAP_OR_NONE,\n         &methods::OR_FUN_CALL,\n-        &methods::RESULT_EXPECT_USED,\n         &methods::RESULT_MAP_OR_INTO_OPTION,\n         &methods::SEARCH_IS_SOME,\n         &methods::SHOULD_IMPLEMENT_TRAIT,\n@@ -1086,10 +1085,9 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&matches::WILDCARD_ENUM_MATCH_ARM),\n         LintId::of(&mem_forget::MEM_FORGET),\n         LintId::of(&methods::CLONE_ON_REF_PTR),\n+        LintId::of(&methods::EXPECT_USED),\n         LintId::of(&methods::FILETYPE_IS_FILE),\n         LintId::of(&methods::GET_UNWRAP),\n-        LintId::of(&methods::OPTION_EXPECT_USED),\n-        LintId::of(&methods::RESULT_EXPECT_USED),\n         LintId::of(&methods::UNWRAP_USED),\n         LintId::of(&methods::WRONG_PUB_SELF_CONVENTION),\n         LintId::of(&misc::FLOAT_CMP_CONST),"}, {"sha": "2e75de019b642f02582850d178cf029a5ee14717", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 23, "deletions": 40, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/0e8be599cd04a8566224c63eeb07f5fa04605702/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e8be599cd04a8566224c63eeb07f5fa04605702/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=0e8be599cd04a8566224c63eeb07f5fa04605702", "patch": "@@ -78,61 +78,45 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `.expect()` calls on `Option`s.\n+    /// **What it does:** Checks for `.expect()` calls on `Option`s and `Result`s.\n     ///\n-    /// **Why is this bad?** Usually it is better to handle the `None` case. Still,\n-    ///  for a lot of quick-and-dirty code, `expect` is a good choice, which is why\n-    ///  this lint is `Allow` by default.\n+    /// **Why is this bad?** Usually it is better to handle the `None` or `Err` case.\n+    /// Still, for a lot of quick-and-dirty code, `expect` is a good choice, which is why\n+    /// this lint is `Allow` by default.\n     ///\n-    /// **Known problems:** None.\n+    /// `result.expect()` will let the thread panic on `Err`\n+    /// values. Normally, you want to implement more sophisticated error handling,\n+    /// and propagate errors upwards with `?` operator.\n     ///\n-    /// **Example:**\n+    /// **Known problems:** None.\n     ///\n-    /// Using expect on an `Option`:\n+    /// **Examples:**\n+    /// ```rust,ignore\n+    /// # let opt = Some(1);\n     ///\n-    /// ```rust\n-    /// let opt = Some(1);\n+    /// // Bad\n     /// opt.expect(\"one\");\n-    /// ```\n-    ///\n-    /// Better:\n     ///\n-    /// ```rust,ignore\n+    /// // Good\n     /// let opt = Some(1);\n     /// opt?;\n     /// ```\n-    pub OPTION_EXPECT_USED,\n-    restriction,\n-    \"using `Option.expect()`, which might be better handled\"\n-}\n-\n-declare_clippy_lint! {\n-    /// **What it does:** Checks for `.expect()` calls on `Result`s.\n-    ///\n-    /// **Why is this bad?** `result.expect()` will let the thread panic on `Err`\n-    /// values. Normally, you want to implement more sophisticated error handling,\n-    /// and propagate errors upwards with `?` operator.\n-    ///\n-    /// **Known problems:** None.\n     ///\n-    /// **Example:**\n-    /// Using expect on an `Result`:\n+    /// // or\n     ///\n     /// ```rust\n-    /// let res: Result<usize, ()> = Ok(1);\n-    /// res.expect(\"one\");\n-    /// ```\n+    /// # let res: Result<usize, ()> = Ok(1);\n     ///\n-    /// Better:\n+    /// // Bad\n+    /// res.expect(\"one\");\n     ///\n-    /// ```rust\n-    /// let res: Result<usize, ()> = Ok(1);\n+    /// // Good\n     /// res?;\n     /// # Ok::<(), ()>(())\n     /// ```\n-    pub RESULT_EXPECT_USED,\n+    pub EXPECT_USED,\n     restriction,\n-    \"using `Result.expect()`, which might be better handled\"\n+    \"using `.expect()` on `Result` or `Option`, which might be better handled\"\n }\n \n declare_clippy_lint! {\n@@ -1251,8 +1235,7 @@ declare_clippy_lint! {\n \n declare_lint_pass!(Methods => [\n     UNWRAP_USED,\n-    OPTION_EXPECT_USED,\n-    RESULT_EXPECT_USED,\n+    EXPECT_USED,\n     SHOULD_IMPLEMENT_TRAIT,\n     WRONG_SELF_CONVENTION,\n     WRONG_PUB_SELF_CONVENTION,\n@@ -2407,9 +2390,9 @@ fn lint_expect(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, expect_args: &[hi\n     let obj_ty = walk_ptrs_ty(cx.tables.expr_ty(&expect_args[0]));\n \n     let mess = if is_type_diagnostic_item(cx, obj_ty, sym!(option_type)) {\n-        Some((OPTION_EXPECT_USED, \"an Option\", \"None\"))\n+        Some((EXPECT_USED, \"an Option\", \"None\"))\n     } else if is_type_diagnostic_item(cx, obj_ty, sym!(result_type)) {\n-        Some((RESULT_EXPECT_USED, \"a Result\", \"Err\"))\n+        Some((EXPECT_USED, \"a Result\", \"Err\"))\n     } else {\n         None\n     };"}, {"sha": "4e79ce96bb5da8e042a1a97bf17c3fd29a34f1df", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0e8be599cd04a8566224c63eeb07f5fa04605702/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e8be599cd04a8566224c63eeb07f5fa04605702/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=0e8be599cd04a8566224c63eeb07f5fa04605702", "patch": "@@ -514,6 +514,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"methods\",\n     },\n+    Lint {\n+        name: \"expect_used\",\n+        group: \"restriction\",\n+        desc: \"using `.expect()` on `Result` or `Option`, which might be better handled\",\n+        deprecation: None,\n+        module: \"methods\",\n+    },\n     Lint {\n         name: \"expl_impl_clone_on_copy\",\n         group: \"pedantic\",\n@@ -1599,13 +1606,6 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"option_env_unwrap\",\n     },\n-    Lint {\n-        name: \"option_expect_used\",\n-        group: \"restriction\",\n-        desc: \"using `Option.expect()`, which might be better handled\",\n-        deprecation: None,\n-        module: \"methods\",\n-    },\n     Lint {\n         name: \"option_map_or_none\",\n         group: \"style\",\n@@ -1865,13 +1865,6 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"matches\",\n     },\n-    Lint {\n-        name: \"result_expect_used\",\n-        group: \"restriction\",\n-        desc: \"using `Result.expect()`, which might be better handled\",\n-        deprecation: None,\n-        module: \"methods\",\n-    },\n     Lint {\n         name: \"result_map_or_into_option\",\n         group: \"style\","}, {"sha": "1073acf6f0cd66b51c33588bfa7296e1a9364a57", "filename": "tests/ui/expect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e8be599cd04a8566224c63eeb07f5fa04605702/tests%2Fui%2Fexpect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e8be599cd04a8566224c63eeb07f5fa04605702/tests%2Fui%2Fexpect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect.rs?ref=0e8be599cd04a8566224c63eeb07f5fa04605702", "patch": "@@ -1,4 +1,4 @@\n-#![warn(clippy::option_expect_used, clippy::result_expect_used)]\n+#![warn(clippy::expect_used)]\n \n fn expect_option() {\n     let opt = Some(0);"}, {"sha": "9d3fc7df15cc7a9de6f73efca2de52e3f4a93a3c", "filename": "tests/ui/expect.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e8be599cd04a8566224c63eeb07f5fa04605702/tests%2Fui%2Fexpect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e8be599cd04a8566224c63eeb07f5fa04605702/tests%2Fui%2Fexpect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect.stderr?ref=0e8be599cd04a8566224c63eeb07f5fa04605702", "patch": "@@ -4,7 +4,7 @@ error: used `expect()` on `an Option` value\n LL |     let _ = opt.expect(\"\");\n    |             ^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::option-expect-used` implied by `-D warnings`\n+   = note: `-D clippy::expect-used` implied by `-D warnings`\n    = help: if this value is an `None`, it will panic\n \n error: used `expect()` on `a Result` value\n@@ -13,7 +13,6 @@ error: used `expect()` on `a Result` value\n LL |     let _ = res.expect(\"\");\n    |             ^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::result-expect-used` implied by `-D warnings`\n    = help: if this value is an `Err`, it will panic\n \n error: aborting due to 2 previous errors"}]}