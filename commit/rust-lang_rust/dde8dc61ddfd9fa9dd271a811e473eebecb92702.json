{"sha": "dde8dc61ddfd9fa9dd271a811e473eebecb92702", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkZThkYzYxZGRmZDlmYTlkZDI3MWE4MTFlNDczZWViZWNiOTI3MDI=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-03-26T02:11:30Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-05-25T05:52:10Z"}, "message": "Improve efficiency.", "tree": {"sha": "643d77d715c44df097e4a3455a35dcf7f1960641", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/643d77d715c44df097e4a3455a35dcf7f1960641"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dde8dc61ddfd9fa9dd271a811e473eebecb92702", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dde8dc61ddfd9fa9dd271a811e473eebecb92702", "html_url": "https://github.com/rust-lang/rust/commit/dde8dc61ddfd9fa9dd271a811e473eebecb92702", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dde8dc61ddfd9fa9dd271a811e473eebecb92702/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210", "html_url": "https://github.com/rust-lang/rust/commit/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210"}], "stats": {"total": 69, "additions": 50, "deletions": 19}, "files": [{"sha": "4a7fe05df8ac7f4afb94a1012bf684b579ef9dcb", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dde8dc61ddfd9fa9dd271a811e473eebecb92702/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dde8dc61ddfd9fa9dd271a811e473eebecb92702/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=dde8dc61ddfd9fa9dd271a811e473eebecb92702", "patch": "@@ -518,7 +518,9 @@ impl Definitions {\n         assert_eq!(index.as_array_index(),\n                    self.def_index_to_node[address_space.index()].len());\n         self.def_index_to_node[address_space.index()].push(node_id);\n-        self.expansions.insert(index, expansion);\n+        if expansion.is_modern() {\n+            self.expansions.insert(index, expansion);\n+        }\n \n         debug!(\"create_def_with_parent: def_index_to_node[{:?} <-> {:?}\", index, node_id);\n         self.node_to_def_index.insert(node_id, index);\n@@ -536,7 +538,7 @@ impl Definitions {\n     }\n \n     pub fn expansion(&self, index: DefIndex) -> Mark {\n-        self.expansions[&index]\n+        self.expansions.get(&index).cloned().unwrap_or(Mark::root())\n     }\n \n     pub fn macro_def_scope(&self, mark: Mark) -> DefId {"}, {"sha": "0bfe04dd25dca8b194d389cbc7c5387a2884cf0d", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dde8dc61ddfd9fa9dd271a811e473eebecb92702/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dde8dc61ddfd9fa9dd271a811e473eebecb92702/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=dde8dc61ddfd9fa9dd271a811e473eebecb92702", "patch": "@@ -130,7 +130,7 @@ impl_stable_hash_for!(enum ::syntax::ast::FloatTy { F32, F64 });\n impl_stable_hash_for!(enum ::syntax::ast::Unsafety { Unsafe, Normal });\n impl_stable_hash_for!(enum ::syntax::ast::Constness { Const, NotConst });\n impl_stable_hash_for!(enum ::syntax::ast::Defaultness { Default, Final });\n-impl_stable_hash_for!(struct ::syntax::ast::Lifetime { id, span, name });\n+impl_stable_hash_for!(struct ::syntax::ast::Lifetime { id, span, ident });\n impl_stable_hash_for!(enum ::syntax::ast::StrStyle { Cooked, Raw(pounds) });\n impl_stable_hash_for!(enum ::syntax::ast::AttrStyle { Outer, Inner });\n "}, {"sha": "f2ccc3f051e9289eb3f3a14567b06ecf6415eb63", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dde8dc61ddfd9fa9dd271a811e473eebecb92702/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dde8dc61ddfd9fa9dd271a811e473eebecb92702/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=dde8dc61ddfd9fa9dd271a811e473eebecb92702", "patch": "@@ -85,6 +85,10 @@ impl Mark {\n         })\n     }\n \n+    pub fn is_modern(self) -> bool {\n+        HygieneData::with(|data| data.marks[self.0 as usize].modern)\n+    }\n+\n     pub fn set_modern(self) {\n         HygieneData::with(|data| data.marks[self.0 as usize].modern = true)\n     }\n@@ -106,7 +110,7 @@ struct HygieneData {\n     marks: Vec<MarkData>,\n     syntax_contexts: Vec<SyntaxContextData>,\n     markings: HashMap<(SyntaxContext, Mark), SyntaxContext>,\n-    idents: HashMap<Symbol, Ident>,\n+    gensym_to_ctxt: HashMap<Symbol, SyntaxContext>,\n }\n \n impl HygieneData {\n@@ -115,7 +119,7 @@ impl HygieneData {\n             marks: vec![MarkData::default()],\n             syntax_contexts: vec![SyntaxContextData::default()],\n             markings: HashMap::new(),\n-            idents: HashMap::new(),\n+            gensym_to_ctxt: HashMap::new(),\n         }\n     }\n \n@@ -354,15 +358,18 @@ impl Decodable for SyntaxContext {\n impl Symbol {\n     pub fn from_ident(ident: Ident) -> Symbol {\n         HygieneData::with(|data| {\n-            let symbol = Symbol::gensym(&ident.name.as_str());\n-            data.idents.insert(symbol, ident);\n-            symbol\n+            let gensym = ident.name.gensymed();\n+            data.gensym_to_ctxt.insert(gensym, ident.ctxt);\n+            gensym\n         })\n     }\n \n     pub fn to_ident(self) -> Ident {\n         HygieneData::with(|data| {\n-            data.idents.get(&self).cloned().unwrap_or(Ident::with_empty_ctxt(self))\n+            match data.gensym_to_ctxt.get(&self) {\n+                Some(&ctxt) => Ident { name: self.interned(), ctxt: ctxt },\n+                None => Ident::with_empty_ctxt(self),\n+            }\n         })\n     }\n }"}, {"sha": "17de8129f997b360cdc8f366e7d98a9dd43b95e1", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 32, "deletions": 10, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/dde8dc61ddfd9fa9dd271a811e473eebecb92702/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dde8dc61ddfd9fa9dd271a811e473eebecb92702/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=dde8dc61ddfd9fa9dd271a811e473eebecb92702", "patch": "@@ -77,11 +77,19 @@ impl Symbol {\n         with_interner(|interner| interner.intern(string))\n     }\n \n+    pub fn interned(self) -> Self {\n+        with_interner(|interner| interner.interned(self))\n+    }\n+\n     /// gensym's a new usize, using the current interner.\n     pub fn gensym(string: &str) -> Self {\n         with_interner(|interner| interner.gensym(string))\n     }\n \n+    pub fn gensymed(self) -> Self {\n+        with_interner(|interner| interner.gensymed(self))\n+    }\n+\n     pub fn as_str(self) -> InternedString {\n         with_interner(|interner| unsafe {\n             InternedString {\n@@ -129,6 +137,7 @@ impl<T: ::std::ops::Deref<Target=str>> PartialEq<T> for Symbol {\n pub struct Interner {\n     names: HashMap<Box<str>, Symbol>,\n     strings: Vec<Box<str>>,\n+    gensyms: Vec<Symbol>,\n }\n \n impl Interner {\n@@ -156,15 +165,29 @@ impl Interner {\n         name\n     }\n \n+    pub fn interned(&self, symbol: Symbol) -> Symbol {\n+        if (symbol.0 as usize) < self.strings.len() {\n+            symbol\n+        } else {\n+            self.interned(self.gensyms[(!0 - symbol.0) as usize])\n+        }\n+    }\n+\n     fn gensym(&mut self, string: &str) -> Symbol {\n-        let gensym = Symbol(self.strings.len() as u32);\n-        // leave out of `names` to avoid colliding\n-        self.strings.push(string.to_string().into_boxed_str());\n-        gensym\n+        let symbol = self.intern(string);\n+        self.gensymed(symbol)\n     }\n \n-    pub fn get(&self, name: Symbol) -> &str {\n-        &self.strings[name.0 as usize]\n+    fn gensymed(&mut self, symbol: Symbol) -> Symbol {\n+        self.gensyms.push(symbol);\n+        Symbol(!0 - self.gensyms.len() as u32 + 1)\n+    }\n+\n+    pub fn get(&self, symbol: Symbol) -> &str {\n+        match self.strings.get(symbol.0 as usize) {\n+            Some(ref string) => string,\n+            None => self.get(self.gensyms[(!0 - symbol.0) as usize]),\n+        }\n     }\n }\n \n@@ -379,11 +402,10 @@ mod tests {\n         assert_eq!(i.intern(\"cat\"), Symbol(1));\n         // dog is still at zero\n         assert_eq!(i.intern(\"dog\"), Symbol(0));\n-        // gensym gets 3\n-        assert_eq!(i.gensym(\"zebra\"), Symbol(2));\n+        assert_eq!(i.gensym(\"zebra\"), Symbol(4294967295));\n         // gensym of same string gets new number :\n-        assert_eq!(i.gensym(\"zebra\"), Symbol(3));\n+        assert_eq!(i.gensym(\"zebra\"), Symbol(4294967294));\n         // gensym of *existing* string gets new number:\n-        assert_eq!(i.gensym(\"dog\"), Symbol(4));\n+        assert_eq!(i.gensym(\"dog\"), Symbol(4294967293));\n     }\n }"}]}