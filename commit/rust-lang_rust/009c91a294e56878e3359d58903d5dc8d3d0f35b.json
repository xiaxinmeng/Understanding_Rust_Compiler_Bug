{"sha": "009c91a294e56878e3359d58903d5dc8d3d0f35b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwOWM5MWEyOTRlNTY4NzhlMzM1OWQ1ODkwM2Q1ZGM4ZDNkMGYzNWI=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2019-01-30T20:04:56Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2019-02-28T22:01:27Z"}, "message": "add option to calculate documentation coverage", "tree": {"sha": "446acae44eb11e6bd4f39821b192392579b9675e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/446acae44eb11e6bd4f39821b192392579b9675e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/009c91a294e56878e3359d58903d5dc8d3d0f35b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/009c91a294e56878e3359d58903d5dc8d3d0f35b", "html_url": "https://github.com/rust-lang/rust/commit/009c91a294e56878e3359d58903d5dc8d3d0f35b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/009c91a294e56878e3359d58903d5dc8d3d0f35b/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1999a2288123173b2e487865c9a04386173025f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1999a2288123173b2e487865c9a04386173025f7", "html_url": "https://github.com/rust-lang/rust/commit/1999a2288123173b2e487865c9a04386173025f7"}], "stats": {"total": 171, "additions": 167, "deletions": 4}, "files": [{"sha": "cb741d1bf99ffd4ee538b90425429b1e4473c9ba", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/009c91a294e56878e3359d58903d5dc8d3d0f35b/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/009c91a294e56878e3359d58903d5dc8d3d0f35b/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=009c91a294e56878e3359d58903d5dc8d3d0f35b", "patch": "@@ -428,3 +428,24 @@ $ rustdoc src/lib.rs --test -Z unstable-options --persist-doctests target/rustdo\n This flag allows you to keep doctest executables around after they're compiled or run.\n Usually, rustdoc will immediately discard a compiled doctest after it's been tested, but\n with this option, you can keep those binaries around for farther testing.\n+\n+### `--show-coverage`: calculate the percentage of items with documentation\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs -Z unstable-options --show-coverage\n+```\n+\n+If you want to determine how many items in your crate are documented, pass this flag to rustdoc.\n+When it receives this flag, it will count the public items in your crate that have documentation,\n+and print out the counts and a percentage instead of generating docs.\n+\n+Some methodology notes about what rustdoc counts in this metric:\n+\n+* Rustdoc will only count items from your crate (i.e. items re-exported from other crates don't\n+  count).\n+* Since trait implementations can inherit documentation from their trait, it will count trait impl\n+  blocks separately, and show totals both with and without trait impls included.\n+* Inherent impl blocks are not counted, even though their doc comments are displayed, because the\n+  common pattern in Rust code is to write all inherent methods into the same impl block."}, {"sha": "d7c6b197164dcf13ea4b2db2b91c9ccf7bdcc3d3", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/009c91a294e56878e3359d58903d5dc8d3d0f35b/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009c91a294e56878e3359d58903d5dc8d3d0f35b/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=009c91a294e56878e3359d58903d5dc8d3d0f35b", "patch": "@@ -85,6 +85,9 @@ pub struct Options {\n     /// Whether to display warnings during doc generation or while gathering doctests. By default,\n     /// all non-rustdoc-specific lints are allowed when generating docs.\n     pub display_warnings: bool,\n+    /// Whether to run the `calculate-doc-coverage` pass, which counts the number of public items\n+    /// with and without documentation.\n+    pub show_coverage: bool,\n \n     // Options that alter generated documentation pages\n \n@@ -128,6 +131,7 @@ impl fmt::Debug for Options {\n             .field(\"default_passes\", &self.default_passes)\n             .field(\"manual_passes\", &self.manual_passes)\n             .field(\"display_warnings\", &self.display_warnings)\n+            .field(\"show_coverage\", &self.show_coverage)\n             .field(\"crate_version\", &self.crate_version)\n             .field(\"render_options\", &self.render_options)\n             .finish()\n@@ -224,6 +228,10 @@ impl Options {\n             for &name in passes::DEFAULT_PRIVATE_PASSES {\n                 println!(\"{:>20}\", name);\n             }\n+            println!(\"\\nPasses run with `--show-coverage`:\");\n+            for &name in passes::DEFAULT_COVERAGE_PASSES {\n+                println!(\"{:>20}\", name);\n+            }\n             return Err(0);\n         }\n \n@@ -415,12 +423,15 @@ impl Options {\n \n         let default_passes = if matches.opt_present(\"no-defaults\") {\n             passes::DefaultPassOption::None\n+        } else if matches.opt_present(\"show-coverage\") {\n+            passes::DefaultPassOption::Coverage\n         } else if matches.opt_present(\"document-private-items\") {\n             passes::DefaultPassOption::Private\n         } else {\n             passes::DefaultPassOption::Default\n         };\n         let manual_passes = matches.opt_strs(\"passes\");\n+        let show_coverage = matches.opt_present(\"show-coverage\");\n \n         let crate_name = matches.opt_str(\"crate-name\");\n         let playground_url = matches.opt_str(\"playground-url\");\n@@ -463,6 +474,7 @@ impl Options {\n             default_passes,\n             manual_passes,\n             display_warnings,\n+            show_coverage,\n             crate_version,\n             persist_doctests,\n             render_options: RenderOptions {"}, {"sha": "76c3bca7c14c8481bff16951c885d626031c9f1c", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/009c91a294e56878e3359d58903d5dc8d3d0f35b/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009c91a294e56878e3359d58903d5dc8d3d0f35b/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=009c91a294e56878e3359d58903d5dc8d3d0f35b", "patch": "@@ -605,10 +605,13 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n \n             info!(\"Executing passes\");\n \n-            for pass in &passes {\n-                match passes::find_pass(pass).map(|p| p.pass) {\n-                    Some(pass) => krate = pass(krate, &ctxt),\n-                    None => error!(\"unknown pass {}, skipping\", *pass),\n+            for pass_name in &passes {\n+                match passes::find_pass(pass_name).map(|p| p.pass) {\n+                    Some(pass) => {\n+                        debug!(\"running pass {}\", pass_name);\n+                        krate = pass(krate, &ctxt);\n+                    }\n+                    None => error!(\"unknown pass {}, skipping\", *pass_name),\n                 }\n             }\n "}, {"sha": "625e3d05c2997ec26b630ab3dd4e2a78ae7e8c4f", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/009c91a294e56878e3359d58903d5dc8d3d0f35b/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009c91a294e56878e3359d58903d5dc8d3d0f35b/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=009c91a294e56878e3359d58903d5dc8d3d0f35b", "patch": "@@ -347,6 +347,11 @@ fn opts() -> Vec<RustcOptGroup> {\n                       \"generate-redirect-pages\",\n                       \"Generate extra pages to support legacy URLs and tool links\")\n         }),\n+        unstable(\"show-coverage\", |o| {\n+            o.optflag(\"\",\n+                      \"show-coverage\",\n+                      \"calculate percentage of public items with documentation\")\n+        }),\n     ]\n }\n \n@@ -391,7 +396,14 @@ fn main_args(args: &[String]) -> isize {\n     let diag_opts = (options.error_format,\n                      options.debugging_options.treat_err_as_bug,\n                      options.debugging_options.ui_testing);\n+    let show_coverage = options.show_coverage;\n     rust_input(options, move |out| {\n+        if show_coverage {\n+            // if we ran coverage, bail early, we don't need to also generate docs at this point\n+            // (also we didn't load in any of the useful passes)\n+            return rustc_driver::EXIT_SUCCESS;\n+        }\n+\n         let Output { krate, passes, renderinfo, renderopts } = out;\n         info!(\"going to format\");\n         let (error_format, treat_err_as_bug, ui_testing) = diag_opts;"}, {"sha": "b812415d6775f0aaa1b2a9d78dd02afa62e67b34", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/009c91a294e56878e3359d58903d5dc8d3d0f35b/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009c91a294e56878e3359d58903d5dc8d3d0f35b/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=009c91a294e56878e3359d58903d5dc8d3d0f35b", "patch": "@@ -0,0 +1,101 @@\n+use crate::clean;\n+use crate::core::DocContext;\n+use crate::fold::{self, DocFolder};\n+use crate::passes::Pass;\n+\n+use syntax::attr;\n+\n+pub const CALCULATE_DOC_COVERAGE: Pass = Pass {\n+    name: \"calculate-doc-coverage\",\n+    pass: calculate_doc_coverage,\n+    description: \"counts the number of items with and without documentation\",\n+};\n+\n+fn calculate_doc_coverage(krate: clean::Crate, _: &DocContext<'_, '_, '_>) -> clean::Crate {\n+    let mut calc = CoverageCalculator::default();\n+    let krate = calc.fold_crate(krate);\n+\n+    let total_minus_traits = calc.total - calc.total_trait_impls;\n+    let docs_minus_traits = calc.with_docs - calc.trait_impls_with_docs;\n+\n+    print!(\"Rustdoc found {}/{} items with documentation\", calc.with_docs, calc.total);\n+    println!(\" ({}/{} not counting trait impls)\", docs_minus_traits, total_minus_traits);\n+\n+    if calc.total > 0 {\n+        let percentage = (calc.with_docs as f64 * 100.0) / calc.total as f64;\n+        let percentage_minus_traits =\n+            (docs_minus_traits as f64 * 100.0) / total_minus_traits as f64;\n+        println!(\"    Score: {:.1}% ({:.1}% not counting trait impls)\",\n+                 percentage, percentage_minus_traits);\n+    }\n+\n+    krate\n+}\n+\n+#[derive(Default)]\n+struct CoverageCalculator {\n+    total: usize,\n+    with_docs: usize,\n+    total_trait_impls: usize,\n+    trait_impls_with_docs: usize,\n+}\n+\n+impl fold::DocFolder for CoverageCalculator {\n+    fn fold_item(&mut self, i: clean::Item) -> Option<clean::Item> {\n+        match i.inner {\n+            clean::StrippedItem(..) => {}\n+            clean::ImplItem(ref impl_)\n+                if attr::contains_name(&i.attrs.other_attrs, \"automatically_derived\")\n+                    || impl_.synthetic || impl_.blanket_impl.is_some() =>\n+            {\n+                // skip counting anything inside these impl blocks\n+                // FIXME(misdreavus): need to also find items that came out of a derive macro\n+                return Some(i);\n+            }\n+            // non-local items are skipped because they can be out of the users control, especially\n+            // in the case of trait impls, which rustdoc eagerly inlines\n+            _ => if i.def_id.is_local() {\n+                let has_docs = !i.attrs.doc_strings.is_empty();\n+\n+                if let clean::ImplItem(ref i) = i.inner {\n+                    if let Some(ref tr) = i.trait_ {\n+                        debug!(\"counting impl {:#} for {:#}\", tr, i.for_);\n+\n+                        self.total += 1;\n+                        if has_docs {\n+                            self.with_docs += 1;\n+                        }\n+\n+                        // trait impls inherit their docs from the trait definition, so documenting\n+                        // them can be considered optional\n+\n+                        self.total_trait_impls += 1;\n+                        if has_docs {\n+                            self.trait_impls_with_docs += 1;\n+                        }\n+\n+                        for it in &i.items {\n+                            self.total_trait_impls += 1;\n+                            if !it.attrs.doc_strings.is_empty() {\n+                                self.trait_impls_with_docs += 1;\n+                            }\n+                        }\n+                    } else {\n+                        // inherent impls *can* be documented, and those docs show up, but in most\n+                        // cases it doesn't make sense, as all methods on a type are in one single\n+                        // impl block\n+                        debug!(\"not counting impl {:#}\", i.for_);\n+                    }\n+                } else {\n+                    debug!(\"counting {} {:?}\", i.type_(), i.name);\n+                    self.total += 1;\n+                    if has_docs {\n+                        self.with_docs += 1;\n+                    }\n+                }\n+            }\n+        }\n+\n+        self.fold_item_recur(i)\n+    }\n+}"}, {"sha": "bda63ae18fd7bfd700bfa429d5b69bc7c404619d", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/009c91a294e56878e3359d58903d5dc8d3d0f35b/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009c91a294e56878e3359d58903d5dc8d3d0f35b/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=009c91a294e56878e3359d58903d5dc8d3d0f35b", "patch": "@@ -45,6 +45,9 @@ pub use self::collect_trait_impls::COLLECT_TRAIT_IMPLS;\n mod check_code_block_syntax;\n pub use self::check_code_block_syntax::CHECK_CODE_BLOCK_SYNTAX;\n \n+mod calculate_doc_coverage;\n+pub use self::calculate_doc_coverage::CALCULATE_DOC_COVERAGE;\n+\n /// A single pass over the cleaned documentation.\n ///\n /// Runs in the compiler context, so it has access to types and traits and the like.\n@@ -67,6 +70,7 @@ pub const PASSES: &'static [Pass] = &[\n     COLLECT_INTRA_DOC_LINKS,\n     CHECK_CODE_BLOCK_SYNTAX,\n     COLLECT_TRAIT_IMPLS,\n+    CALCULATE_DOC_COVERAGE,\n ];\n \n /// The list of passes run by default.\n@@ -94,12 +98,21 @@ pub const DEFAULT_PRIVATE_PASSES: &[&str] = &[\n     \"propagate-doc-cfg\",\n ];\n \n+/// The list of default passes run when `--doc-coverage` is passed to rustdoc.\n+pub const DEFAULT_COVERAGE_PASSES: &'static [&'static str] = &[\n+    \"collect-trait-impls\",\n+    \"strip-hidden\",\n+    \"strip-private\",\n+    \"calculate-doc-coverage\",\n+];\n+\n /// A shorthand way to refer to which set of passes to use, based on the presence of\n /// `--no-defaults` or `--document-private-items`.\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum DefaultPassOption {\n     Default,\n     Private,\n+    Coverage,\n     None,\n }\n \n@@ -108,6 +121,7 @@ pub fn defaults(default_set: DefaultPassOption) -> &'static [&'static str] {\n     match default_set {\n         DefaultPassOption::Default => DEFAULT_PASSES,\n         DefaultPassOption::Private => DEFAULT_PRIVATE_PASSES,\n+        DefaultPassOption::Coverage => DEFAULT_COVERAGE_PASSES,\n         DefaultPassOption::None => &[],\n     }\n }"}]}