{"sha": "bdccbcf41bd881806d5370b8c7fe05e90143a076", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkY2NiY2Y0MWJkODgxODA2ZDUzNzBiOGM3ZmUwNWU5MDE0M2EwNzY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-23T20:39:51Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-23T20:39:51Z"}, "message": "parse `dyn (Foo)` as a trait object", "tree": {"sha": "efd12e9f0ab336f7b542c17cdaa12c0225321446", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efd12e9f0ab336f7b542c17cdaa12c0225321446"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdccbcf41bd881806d5370b8c7fe05e90143a076", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdccbcf41bd881806d5370b8c7fe05e90143a076", "html_url": "https://github.com/rust-lang/rust/commit/bdccbcf41bd881806d5370b8c7fe05e90143a076", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdccbcf41bd881806d5370b8c7fe05e90143a076/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "063deba92e44809125a433ca6e6c1ad0993313bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/063deba92e44809125a433ca6e6c1ad0993313bf", "html_url": "https://github.com/rust-lang/rust/commit/063deba92e44809125a433ca6e6c1ad0993313bf"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "f798855d0e0f82259de3a328f52a3c03a7b82ba2", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bdccbcf41bd881806d5370b8c7fe05e90143a076/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdccbcf41bd881806d5370b8c7fe05e90143a076/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=bdccbcf41bd881806d5370b8c7fe05e90143a076", "patch": "@@ -405,11 +405,14 @@ impl TokenType {\n     }\n }\n \n-// Returns true if `IDENT t` can start a type - `IDENT::a::b`, `IDENT<u8, u8>`,\n-// `IDENT<<u8 as Trait>::AssocTy>`, `IDENT(u8, u8) -> u8`.\n-fn can_continue_type_after_ident(t: &token::Token) -> bool {\n+/// Returns true if `IDENT t` can start a type - `IDENT::a::b`, `IDENT<u8, u8>`,\n+/// `IDENT<<u8 as Trait>::AssocTy>`.\n+///\n+/// Types can also be of the form `IDENT(u8, u8) -> u8`, however this assumes\n+/// that IDENT is not the ident of a fn trait\n+fn can_continue_type_after_non_fn_ident(t: &token::Token) -> bool {\n     t == &token::ModSep || t == &token::Lt ||\n-    t == &token::BinOp(token::Shl) || t == &token::OpenDelim(token::Paren)\n+    t == &token::BinOp(token::Shl)\n }\n \n /// Information about the path to a module.\n@@ -1619,7 +1622,8 @@ impl<'a> Parser<'a> {\n             impl_dyn_multi = bounds.len() > 1 || self.prev_token_kind == PrevTokenKind::Plus;\n             TyKind::ImplTrait(bounds)\n         } else if self.check_keyword(keywords::Dyn) &&\n-                  self.look_ahead(1, |t| t.can_begin_bound() && !can_continue_type_after_ident(t)) {\n+                  self.look_ahead(1, |t| t.can_begin_bound() &&\n+                                         !can_continue_type_after_non_fn_ident(t)) {\n             self.bump(); // `dyn`\n             // Always parse bounds greedily for better error recovery.\n             let bounds = self.parse_ty_param_bounds()?;"}]}