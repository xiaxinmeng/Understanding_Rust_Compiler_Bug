{"sha": "50c6a315ab2bef493b618742989744fb370a32ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwYzZhMzE1YWIyYmVmNDkzYjYxODc0Mjk4OTc0NGZiMzcwYTMyY2E=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-21T16:02:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-21T16:02:07Z"}, "message": "Merge #3671\n\n3671: Add identity expansion checking in ill-form expansion  r=flodiebold a=edwin0cheng\n\nThis PR try to add more checking code in error case in macro expansion. The bug in #3642 is introduced by  #3580 , which allow ill-form macro expansion in *all* kind of macro expansions. \r\n\r\nIn general we should separate hypothetical macro expansion and the actual macro expansion call. However, currently the `Semantic`  workflow we are using only support single macro expansion type, we might want to review it and make it works in both ways. (Maybe add a field in `MacroCallLoc` for differentiation) \r\n\r\nFix #3642\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "fc4ee3a02310c55167d62d4bd95931d161178155", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc4ee3a02310c55167d62d4bd95931d161178155"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50c6a315ab2bef493b618742989744fb370a32ca", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJedjp/CRBK7hj4Ov3rIwAAdHIIAGEqa3olSZ5rigc0l5dhQ3YK\ncD02xTBDxXMjPq2H5Jg6qvi98nB7NbjU8NuPrtAoCMVV5T/wKRTW8zJL9ptf3nF6\nmKuG/EWG82+xG9OvPtyrdUlTI+v/aVxoSQjyOBvO/y3GMv1HqzO37RdOTSMVvMvy\njGgLvdyF6GfMbb4Qj/vaxeRxqvaHl3QAemRiy2Pkd7w4EKwVgfKyTiwziE9+MMA1\nb813ZFhqnyB8miOpJO0nBAvnF6X76lkiAmRLX2K0CK0X3DEbBTy/h3fgNFQ4dxn0\ntm9dvHbF1CCQWWUTxWC68ap1iXB+SDSEIglVGp6Jz7OgN77tVzhyqrm8xP6OYtE=\n=F09y\n-----END PGP SIGNATURE-----\n", "payload": "tree fc4ee3a02310c55167d62d4bd95931d161178155\nparent 5e827bd948ea206328b126345ab8e909978b3b9b\nparent 9ff50d7e839c635632021d47e2dd3982916e4738\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1584806527 +0000\ncommitter GitHub <noreply@github.com> 1584806527 +0000\n\nMerge #3671\n\n3671: Add identity expansion checking in ill-form expansion  r=flodiebold a=edwin0cheng\n\nThis PR try to add more checking code in error case in macro expansion. The bug in #3642 is introduced by  #3580 , which allow ill-form macro expansion in *all* kind of macro expansions. \r\n\r\nIn general we should separate hypothetical macro expansion and the actual macro expansion call. However, currently the `Semantic`  workflow we are using only support single macro expansion type, we might want to review it and make it works in both ways. (Maybe add a field in `MacroCallLoc` for differentiation) \r\n\r\nFix #3642\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50c6a315ab2bef493b618742989744fb370a32ca", "html_url": "https://github.com/rust-lang/rust/commit/50c6a315ab2bef493b618742989744fb370a32ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50c6a315ab2bef493b618742989744fb370a32ca/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e827bd948ea206328b126345ab8e909978b3b9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e827bd948ea206328b126345ab8e909978b3b9b", "html_url": "https://github.com/rust-lang/rust/commit/5e827bd948ea206328b126345ab8e909978b3b9b"}, {"sha": "9ff50d7e839c635632021d47e2dd3982916e4738", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ff50d7e839c635632021d47e2dd3982916e4738", "html_url": "https://github.com/rust-lang/rust/commit/9ff50d7e839c635632021d47e2dd3982916e4738"}], "stats": {"total": 59, "additions": 56, "deletions": 3}, "files": [{"sha": "5a696542f647892f1601d69f3bd29cd9bfc18bca", "filename": "crates/ra_hir_expand/src/db.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/50c6a315ab2bef493b618742989744fb370a32ca/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50c6a315ab2bef493b618742989744fb370a32ca/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs?ref=50c6a315ab2bef493b618742989744fb370a32ca", "patch": "@@ -6,7 +6,7 @@ use mbe::{ExpandResult, MacroRules};\n use ra_db::{salsa, SourceDatabase};\n use ra_parser::FragmentKind;\n use ra_prof::profile;\n-use ra_syntax::{AstNode, Parse, SyntaxKind::*, SyntaxNode};\n+use ra_syntax::{algo::diff, AstNode, Parse, SyntaxKind::*, SyntaxNode};\n \n use crate::{\n     ast_id_map::AstIdMap, BuiltinDeriveExpander, BuiltinFnLikeExpander, EagerCallLoc, EagerMacroId,\n@@ -238,7 +238,7 @@ pub fn parse_macro_with_arg(\n     } else {\n         db.macro_expand(macro_call_id)\n     };\n-    if let Some(err) = err {\n+    if let Some(err) = &err {\n         // Note:\n         // The final goal we would like to make all parse_macro success,\n         // such that the following log will not call anyway.\n@@ -272,7 +272,25 @@ pub fn parse_macro_with_arg(\n     let fragment_kind = to_fragment_kind(db, macro_call_id);\n \n     let (parse, rev_token_map) = mbe::token_tree_to_syntax_node(&tt, fragment_kind).ok()?;\n-    Some((parse, Arc::new(rev_token_map)))\n+\n+    if err.is_none() {\n+        Some((parse, Arc::new(rev_token_map)))\n+    } else {\n+        // FIXME:\n+        // In future, we should propagate the actual error with recovery information\n+        // instead of ignore the error here.\n+\n+        // Safe check for recurisve identity macro\n+        let node = parse.syntax_node();\n+        let file: HirFileId = macro_file.into();\n+        let call_node = file.call_node(db)?;\n+\n+        if !diff(&node, &call_node.value).is_empty() {\n+            Some((parse, Arc::new(rev_token_map)))\n+        } else {\n+            None\n+        }\n+    }\n }\n \n /// Given a `MacroCallId`, return what `FragmentKind` it belongs to."}, {"sha": "a02e3ee0514a8fcbb8d9f795b164f55e042b9a00", "filename": "crates/ra_hir_ty/src/tests/regression.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/50c6a315ab2bef493b618742989744fb370a32ca/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50c6a315ab2bef493b618742989744fb370a32ca/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=50c6a315ab2bef493b618742989744fb370a32ca", "patch": "@@ -453,3 +453,34 @@ pub mod str {\n     // should be Option<char>, but currently not because of Chalk ambiguity problem\n     assert_eq!(\"(Option<{unknown}>, Option<{unknown}>)\", super::type_at_pos(&db, pos));\n }\n+\n+#[test]\n+fn issue_3642_bad_macro_stackover() {\n+    let (db, pos) = TestDB::with_position(\n+        r#\"\n+//- /main.rs\n+#[macro_export]\n+macro_rules! match_ast {\n+    (match $node:ident { $($tt:tt)* }) => { match_ast!(match ($node) { $($tt)* }) };\n+\n+    (match ($node:expr) {\n+        $( ast::$ast:ident($it:ident) => $res:expr, )*\n+        _ => $catch_all:expr $(,)?\n+    }) => {{\n+        $( if let Some($it) = ast::$ast::cast($node.clone()) { $res } else )*\n+        { $catch_all }\n+    }};\n+}\n+\n+fn main() {\n+    let anchor<|> = match_ast! {\n+        match parent {\n+            as => {},\n+            _ => return None\n+        }\n+    };\n+}\"#,\n+    );\n+\n+    assert_eq!(\"()\", super::type_at_pos(&db, pos));\n+}"}, {"sha": "ffdbdc7671333a27909f96d343889391ac1c752d", "filename": "crates/ra_syntax/src/algo.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50c6a315ab2bef493b618742989744fb370a32ca/crates%2Fra_syntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50c6a315ab2bef493b618742989744fb370a32ca/crates%2Fra_syntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Falgo.rs?ref=50c6a315ab2bef493b618742989744fb370a32ca", "patch": "@@ -95,6 +95,10 @@ impl TreeDiff {\n             builder.replace(from.text_range(), to.to_string())\n         }\n     }\n+\n+    pub fn is_empty(&self) -> bool {\n+        self.replacements.is_empty()\n+    }\n }\n \n /// Finds minimal the diff, which, applied to `from`, will result in `to`."}]}