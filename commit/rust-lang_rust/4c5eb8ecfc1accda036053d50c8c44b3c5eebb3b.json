{"sha": "4c5eb8ecfc1accda036053d50c8c44b3c5eebb3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjNWViOGVjZmMxYWNjZGEwMzYwNTNkNTBjOGM0NGIzYzVlZWJiM2I=", "commit": {"author": {"name": "Janusz Marcinkiewicz", "email": "virrages@gmail.com", "date": "2019-05-30T20:41:09Z"}, "committer": {"name": "Janusz Marcinkiewicz", "email": "virrages@gmail.com", "date": "2019-05-30T20:44:39Z"}, "message": "Explicitly suggest 'type_ascription' feature", "tree": {"sha": "8bd78eb155df147eebe65a92691592002f955e13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bd78eb155df147eebe65a92691592002f955e13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c5eb8ecfc1accda036053d50c8c44b3c5eebb3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c5eb8ecfc1accda036053d50c8c44b3c5eebb3b", "html_url": "https://github.com/rust-lang/rust/commit/4c5eb8ecfc1accda036053d50c8c44b3c5eebb3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c5eb8ecfc1accda036053d50c8c44b3c5eebb3b/comments", "author": {"login": "VirrageS", "id": 3855799, "node_id": "MDQ6VXNlcjM4NTU3OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3855799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VirrageS", "html_url": "https://github.com/VirrageS", "followers_url": "https://api.github.com/users/VirrageS/followers", "following_url": "https://api.github.com/users/VirrageS/following{/other_user}", "gists_url": "https://api.github.com/users/VirrageS/gists{/gist_id}", "starred_url": "https://api.github.com/users/VirrageS/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VirrageS/subscriptions", "organizations_url": "https://api.github.com/users/VirrageS/orgs", "repos_url": "https://api.github.com/users/VirrageS/repos", "events_url": "https://api.github.com/users/VirrageS/events{/privacy}", "received_events_url": "https://api.github.com/users/VirrageS/received_events", "type": "User", "site_admin": false}, "committer": {"login": "VirrageS", "id": 3855799, "node_id": "MDQ6VXNlcjM4NTU3OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3855799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VirrageS", "html_url": "https://github.com/VirrageS", "followers_url": "https://api.github.com/users/VirrageS/followers", "following_url": "https://api.github.com/users/VirrageS/following{/other_user}", "gists_url": "https://api.github.com/users/VirrageS/gists{/gist_id}", "starred_url": "https://api.github.com/users/VirrageS/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VirrageS/subscriptions", "organizations_url": "https://api.github.com/users/VirrageS/orgs", "repos_url": "https://api.github.com/users/VirrageS/repos", "events_url": "https://api.github.com/users/VirrageS/events{/privacy}", "received_events_url": "https://api.github.com/users/VirrageS/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "html_url": "https://github.com/rust-lang/rust/commit/aee7012fab26d5e307a2fe767e4e7c847c5a45ee"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "2e4d4c091398ea5770080490b260312ca6c8c186", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c5eb8ecfc1accda036053d50c8c44b3c5eebb3b/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c5eb8ecfc1accda036053d50c8c44b3c5eebb3b/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=4c5eb8ecfc1accda036053d50c8c44b3c5eebb3b", "patch": "@@ -858,8 +858,8 @@ impl<'a> Parser<'a> {\n                     Applicability::MaybeIncorrect,\n                 );\n             } else {\n-                err.note(\"type ascription is a nightly-only feature that lets \\\n-                          you annotate an expression with a type: `<expr>: <type>`\")\n+                err.note(\"#![feature(type_ascription)] lets you annotate an \\\n+                          expression with a type: `<expr>: <type>`\")\n                     .span_note(\n                         lhs_span,\n                         \"this expression expects an ascribed type after the colon\","}, {"sha": "cf36953546549c10e1d64d3f7c91d16c84062986", "filename": "src/test/ui/issues/issue-22644.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c5eb8ecfc1accda036053d50c8c44b3c5eebb3b/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c5eb8ecfc1accda036053d50c8c44b3c5eebb3b/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr?ref=4c5eb8ecfc1accda036053d50c8c44b3c5eebb3b", "patch": "@@ -89,7 +89,7 @@ error: expected type, found `4`\n LL |     println!(\"{}\", a: &mut 4);\n    |                            ^ expecting a type here because of type ascription\n    |\n-   = note: type ascription is a nightly-only feature that lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: #![feature(type_ascription)] lets you annotate an expression with a type: `<expr>: <type>`\n note: this expression expects an ascribed type after the colon\n   --> $DIR/issue-22644.rs:34:20\n    |"}, {"sha": "01f395377701751b7d82e155c205c5154d52954f", "filename": "src/test/ui/issues/issue-34255-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c5eb8ecfc1accda036053d50c8c44b3c5eebb3b/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c5eb8ecfc1accda036053d50c8c44b3c5eebb3b/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.stderr?ref=4c5eb8ecfc1accda036053d50c8c44b3c5eebb3b", "patch": "@@ -4,7 +4,7 @@ error: expected type, found `42`\n LL |     Test::Drill(field: 42);\n    |                        ^^ expecting a type here because of type ascription\n    |\n-   = note: type ascription is a nightly-only feature that lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: #![feature(type_ascription)] lets you annotate an expression with a type: `<expr>: <type>`\n note: this expression expects an ascribed type after the colon\n   --> $DIR/issue-34255-1.rs:8:17\n    |"}, {"sha": "8ae8018c2ff25f41d8018b21593eb9b1c35440b3", "filename": "src/test/ui/lifetime_starts_expressions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c5eb8ecfc1accda036053d50c8c44b3c5eebb3b/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c5eb8ecfc1accda036053d50c8c44b3c5eebb3b/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr?ref=4c5eb8ecfc1accda036053d50c8c44b3c5eebb3b", "patch": "@@ -14,7 +14,7 @@ error: expected type, found keyword `loop`\n LL |     loop { break 'label: loop { break 'label 42; }; }\n    |                          ^^^^ expecting a type here because of type ascription\n    |\n-   = note: type ascription is a nightly-only feature that lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: #![feature(type_ascription)] lets you annotate an expression with a type: `<expr>: <type>`\n note: this expression expects an ascribed type after the colon\n   --> $DIR/lifetime_starts_expressions.rs:6:12\n    |"}, {"sha": "150d74f07428d97cf519db0d0457604c84e89713", "filename": "src/test/ui/parser/recover-from-bad-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c5eb8ecfc1accda036053d50c8c44b3c5eebb3b/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c5eb8ecfc1accda036053d50c8c44b3c5eebb3b/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr?ref=4c5eb8ecfc1accda036053d50c8c44b3c5eebb3b", "patch": "@@ -4,7 +4,7 @@ error: expected type, found `3`\n LL |     let x = Enum::Foo(a: 3, b: 4);\n    |                          ^ expecting a type here because of type ascription\n    |\n-   = note: type ascription is a nightly-only feature that lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: #![feature(type_ascription)] lets you annotate an expression with a type: `<expr>: <type>`\n note: this expression expects an ascribed type after the colon\n   --> $DIR/recover-from-bad-variant.rs:7:23\n    |"}, {"sha": "4929922c83fe6c0338d333e31f76149e547e3ad0", "filename": "src/test/ui/type/type-ascription-instead-of-statement-end.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c5eb8ecfc1accda036053d50c8c44b3c5eebb3b/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-statement-end.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c5eb8ecfc1accda036053d50c8c44b3c5eebb3b/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-statement-end.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-statement-end.stderr?ref=4c5eb8ecfc1accda036053d50c8c44b3c5eebb3b", "patch": "@@ -12,7 +12,7 @@ error: expected type, found `0`\n LL |     println!(\"test\"): 0;\n    |                       ^ expecting a type here because of type ascription\n    |\n-   = note: type ascription is a nightly-only feature that lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: #![feature(type_ascription)] lets you annotate an expression with a type: `<expr>: <type>`\n note: this expression expects an ascribed type after the colon\n   --> $DIR/type-ascription-instead-of-statement-end.rs:9:5\n    |"}]}