{"sha": "bc57bd8c7e3e28f8bed4fced3973bfe04949918f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNTdiZDhjN2UzZTI4ZjhiZWQ0ZmNlZDM5NzNiZmUwNDk0OTkxOGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-11T20:01:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-11T20:01:31Z"}, "message": "Auto merge of #76499 - guswynn:priv_des, r=petrochenkov\n\nGive better diagnostic when using a private tuple struct constructor\n\nFixes #75907\n\nSome notes:\n1. This required some deep changes, including removing a Copy impl for PatKind. If some tests fail, I would still appreciate review on the overall approach\n2. this only works with basic patterns (no wildcards for example), and fails if there is any problems getting the visibility of the fields (i am not sure what the failure that can happen in resolve_visibility_speculative, but we check the length of our fields in both cases against each other, so if anything goes wrong, we fall back to the worse error. This could be extended to more patterns\n3. this does not yet deal with #75906, but I believe it will be similar\n4. let me know if you want more tests\n5. doesn't yet at the suggestion that `@yoshuawuyts` suggested at the end of their issue, but that could be added relatively easily (i believe)", "tree": {"sha": "372467744979f76c18d225ac97010656bd524875", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/372467744979f76c18d225ac97010656bd524875"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc57bd8c7e3e28f8bed4fced3973bfe04949918f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc57bd8c7e3e28f8bed4fced3973bfe04949918f", "html_url": "https://github.com/rust-lang/rust/commit/bc57bd8c7e3e28f8bed4fced3973bfe04949918f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc57bd8c7e3e28f8bed4fced3973bfe04949918f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "141bb23be863f8bfe25ccac102c6e7b96b61d417", "url": "https://api.github.com/repos/rust-lang/rust/commits/141bb23be863f8bfe25ccac102c6e7b96b61d417", "html_url": "https://github.com/rust-lang/rust/commit/141bb23be863f8bfe25ccac102c6e7b96b61d417"}, {"sha": "c63f634a4b0550a398d5bf08f8b036edaf67c48d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c63f634a4b0550a398d5bf08f8b036edaf67c48d", "html_url": "https://github.com/rust-lang/rust/commit/c63f634a4b0550a398d5bf08f8b036edaf67c48d"}], "stats": {"total": 181, "additions": 152, "deletions": 29}, "files": [{"sha": "565313902a42ee1c89eea8c126573085947ef006", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bc57bd8c7e3e28f8bed4fced3973bfe04949918f/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc57bd8c7e3e28f8bed4fced3973bfe04949918f/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=bc57bd8c7e3e28f8bed4fced3973bfe04949918f", "patch": "@@ -796,23 +796,26 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                         vis\n                     };\n \n+                    let mut ret_fields = Vec::with_capacity(vdata.fields().len());\n+\n                     for field in vdata.fields() {\n                         // NOTE: The field may be an expansion placeholder, but expansion sets\n                         // correct visibilities for unnamed field placeholders specifically, so the\n                         // constructor visibility should still be determined correctly.\n-                        if let Ok(field_vis) = self.resolve_visibility_speculative(&field.vis, true)\n-                        {\n-                            if ctor_vis.is_at_least(field_vis, &*self.r) {\n-                                ctor_vis = field_vis;\n-                            }\n+                        let field_vis = self\n+                            .resolve_visibility_speculative(&field.vis, true)\n+                            .unwrap_or(ty::Visibility::Public);\n+                        if ctor_vis.is_at_least(field_vis, &*self.r) {\n+                            ctor_vis = field_vis;\n                         }\n+                        ret_fields.push(field_vis);\n                     }\n                     let ctor_res = Res::Def(\n                         DefKind::Ctor(CtorOf::Struct, CtorKind::from_ast(vdata)),\n                         self.r.local_def_id(ctor_node_id).to_def_id(),\n                     );\n                     self.r.define(parent, ident, ValueNS, (ctor_res, ctor_vis, sp, expansion));\n-                    self.r.struct_constructors.insert(def_id, (ctor_res, ctor_vis));\n+                    self.r.struct_constructors.insert(def_id, (ctor_res, ctor_vis, ret_fields));\n                 }\n             }\n \n@@ -964,7 +967,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             Res::Def(DefKind::Ctor(CtorOf::Struct, ..), def_id) => {\n                 let parent = cstore.def_key(def_id).parent;\n                 if let Some(struct_def_id) = parent.map(|index| DefId { index, ..def_id }) {\n-                    self.r.struct_constructors.insert(struct_def_id, (res, vis));\n+                    self.r.struct_constructors.insert(struct_def_id, (res, vis, vec![]));\n                 }\n             }\n             _ => {}"}, {"sha": "07f36c7b7ad36bef645c3a77cb9afc373dedbcf9", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bc57bd8c7e3e28f8bed4fced3973bfe04949918f/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc57bd8c7e3e28f8bed4fced3973bfe04949918f/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=bc57bd8c7e3e28f8bed4fced3973bfe04949918f", "patch": "@@ -188,7 +188,7 @@ crate enum PathSource<'a> {\n     // Paths in struct expressions and patterns `Path { .. }`.\n     Struct,\n     // Paths in tuple struct patterns `Path(..)`.\n-    TupleStruct(Span),\n+    TupleStruct(Span, &'a [Span]),\n     // `m::A::B` in `<T as m::A>::B::C`.\n     TraitItem(Namespace),\n }\n@@ -197,7 +197,7 @@ impl<'a> PathSource<'a> {\n     fn namespace(self) -> Namespace {\n         match self {\n             PathSource::Type | PathSource::Trait(_) | PathSource::Struct => TypeNS,\n-            PathSource::Expr(..) | PathSource::Pat | PathSource::TupleStruct(_) => ValueNS,\n+            PathSource::Expr(..) | PathSource::Pat | PathSource::TupleStruct(..) => ValueNS,\n             PathSource::TraitItem(ns) => ns,\n         }\n     }\n@@ -208,7 +208,7 @@ impl<'a> PathSource<'a> {\n             | PathSource::Expr(..)\n             | PathSource::Pat\n             | PathSource::Struct\n-            | PathSource::TupleStruct(_) => true,\n+            | PathSource::TupleStruct(..) => true,\n             PathSource::Trait(_) | PathSource::TraitItem(..) => false,\n         }\n     }\n@@ -219,7 +219,7 @@ impl<'a> PathSource<'a> {\n             PathSource::Trait(_) => \"trait\",\n             PathSource::Pat => \"unit struct, unit variant or constant\",\n             PathSource::Struct => \"struct, variant or union type\",\n-            PathSource::TupleStruct(_) => \"tuple struct or tuple variant\",\n+            PathSource::TupleStruct(..) => \"tuple struct or tuple variant\",\n             PathSource::TraitItem(ns) => match ns {\n                 TypeNS => \"associated type\",\n                 ValueNS => \"method or associated constant\",\n@@ -305,7 +305,7 @@ impl<'a> PathSource<'a> {\n                 | Res::SelfCtor(..) => true,\n                 _ => false,\n             },\n-            PathSource::TupleStruct(_) => match res {\n+            PathSource::TupleStruct(..) => match res {\n                 Res::Def(DefKind::Ctor(_, CtorKind::Fn), _) | Res::SelfCtor(..) => true,\n                 _ => false,\n             },\n@@ -340,8 +340,8 @@ impl<'a> PathSource<'a> {\n             (PathSource::Struct, false) => error_code!(E0422),\n             (PathSource::Expr(..), true) => error_code!(E0423),\n             (PathSource::Expr(..), false) => error_code!(E0425),\n-            (PathSource::Pat | PathSource::TupleStruct(_), true) => error_code!(E0532),\n-            (PathSource::Pat | PathSource::TupleStruct(_), false) => error_code!(E0531),\n+            (PathSource::Pat | PathSource::TupleStruct(..), true) => error_code!(E0532),\n+            (PathSource::Pat | PathSource::TupleStruct(..), false) => error_code!(E0531),\n             (PathSource::TraitItem(..), true) => error_code!(E0575),\n             (PathSource::TraitItem(..), false) => error_code!(E0576),\n         }\n@@ -411,7 +411,7 @@ struct LateResolutionVisitor<'a, 'b, 'ast> {\n }\n \n /// Walks the whole crate in DFS order, visiting each item, resolving names as it goes.\n-impl<'a, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n+impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n     fn visit_item(&mut self, item: &'ast Item) {\n         let prev = replace(&mut self.diagnostic_metadata.current_item, Some(item));\n         // Always report errors in items we just entered.\n@@ -659,7 +659,7 @@ impl<'a, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n     }\n }\n \n-impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n+impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n     fn new(resolver: &'b mut Resolver<'a>) -> LateResolutionVisitor<'a, 'b, 'ast> {\n         // During late resolution we only track the module component of the parent scope,\n         // although it may be useful to track other components as well for diagnostics.\n@@ -1539,8 +1539,16 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                         .unwrap_or_else(|| self.fresh_binding(ident, pat.id, pat_src, bindings));\n                     self.r.record_partial_res(pat.id, PartialRes::new(res));\n                 }\n-                PatKind::TupleStruct(ref path, ..) => {\n-                    self.smart_resolve_path(pat.id, None, path, PathSource::TupleStruct(pat.span));\n+                PatKind::TupleStruct(ref path, ref sub_patterns) => {\n+                    self.smart_resolve_path(\n+                        pat.id,\n+                        None,\n+                        path,\n+                        PathSource::TupleStruct(\n+                            pat.span,\n+                            self.r.arenas.alloc_pattern_spans(sub_patterns.iter().map(|p| p.span)),\n+                        ),\n+                    );\n                 }\n                 PatKind::Path(ref qself, ref path) => {\n                     self.smart_resolve_path(pat.id, qself.as_ref(), path, PathSource::Pat);"}, {"sha": "9b5650c260c220949b45b32ff0a5f3ebf9b657c6", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 45, "deletions": 10, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/bc57bd8c7e3e28f8bed4fced3973bfe04949918f/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc57bd8c7e3e28f8bed4fced3973bfe04949918f/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=bc57bd8c7e3e28f8bed4fced3973bfe04949918f", "patch": "@@ -90,7 +90,7 @@ fn import_candidate_to_enum_paths(suggestion: &ImportSuggestion) -> (String, Str\n     (variant_path_string, enum_path_string)\n }\n \n-impl<'a> LateResolutionVisitor<'a, '_, '_> {\n+impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n     fn def_span(&self, def_id: DefId) -> Option<Span> {\n         match def_id.krate {\n             LOCAL_CRATE => self.r.opt_span(def_id),\n@@ -623,12 +623,12 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                         );\n                     }\n                 }\n-                PathSource::Expr(_) | PathSource::TupleStruct(_) | PathSource::Pat => {\n+                PathSource::Expr(_) | PathSource::TupleStruct(..) | PathSource::Pat => {\n                     let span = match &source {\n                         PathSource::Expr(Some(Expr {\n                             span, kind: ExprKind::Call(_, _), ..\n                         }))\n-                        | PathSource::TupleStruct(span) => {\n+                        | PathSource::TupleStruct(span, _) => {\n                             // We want the main underline to cover the suggested code as well for\n                             // cleaner output.\n                             err.set_span(*span);\n@@ -640,7 +640,7 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                         err.span_label(span, &format!(\"`{}` defined here\", path_str));\n                     }\n                     let (tail, descr, applicability) = match source {\n-                        PathSource::Pat | PathSource::TupleStruct(_) => {\n+                        PathSource::Pat | PathSource::TupleStruct(..) => {\n                             (\"\", \"pattern\", Applicability::MachineApplicable)\n                         }\n                         _ => (\": val\", \"literal\", Applicability::HasPlaceholders),\n@@ -705,7 +705,7 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n             }\n             (\n                 Res::Def(DefKind::Enum, def_id),\n-                PathSource::TupleStruct(_) | PathSource::Expr(..),\n+                PathSource::TupleStruct(..) | PathSource::Expr(..),\n             ) => {\n                 if self\n                     .diagnostic_metadata\n@@ -745,15 +745,50 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                 }\n             }\n             (Res::Def(DefKind::Struct, def_id), _) if ns == ValueNS => {\n-                if let Some((ctor_def, ctor_vis)) = self.r.struct_constructors.get(&def_id).cloned()\n+                if let Some((ctor_def, ctor_vis, fields)) =\n+                    self.r.struct_constructors.get(&def_id).cloned()\n                 {\n                     let accessible_ctor =\n                         self.r.is_accessible_from(ctor_vis, self.parent_scope.module);\n                     if is_expected(ctor_def) && !accessible_ctor {\n-                        err.span_label(\n-                            span,\n-                            \"constructor is not visible here due to private fields\".to_string(),\n-                        );\n+                        let mut better_diag = false;\n+                        if let PathSource::TupleStruct(_, pattern_spans) = source {\n+                            if pattern_spans.len() > 0 && fields.len() == pattern_spans.len() {\n+                                let non_visible_spans: Vec<Span> = fields\n+                                    .iter()\n+                                    .zip(pattern_spans.iter())\n+                                    .filter_map(|(vis, span)| {\n+                                        match self\n+                                            .r\n+                                            .is_accessible_from(*vis, self.parent_scope.module)\n+                                        {\n+                                            true => None,\n+                                            false => Some(*span),\n+                                        }\n+                                    })\n+                                    .collect();\n+                                // Extra check to be sure\n+                                if non_visible_spans.len() > 0 {\n+                                    let mut m: rustc_span::MultiSpan =\n+                                        non_visible_spans.clone().into();\n+                                    non_visible_spans.into_iter().for_each(|s| {\n+                                        m.push_span_label(s, \"private field\".to_string())\n+                                    });\n+                                    err.span_note(\n+                                        m,\n+                                        \"constructor is not visible here due to private fields\",\n+                                    );\n+                                    better_diag = true;\n+                                }\n+                            }\n+                        }\n+\n+                        if !better_diag {\n+                            err.span_label(\n+                                span,\n+                                \"constructor is not visible here due to private fields\".to_string(),\n+                            );\n+                        }\n                     }\n                 } else {\n                     bad_struct_syntax_suggestion(def_id);"}, {"sha": "0f5b9b518163f899d5fd5c0540fcface5b0d4915", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bc57bd8c7e3e28f8bed4fced3973bfe04949918f/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc57bd8c7e3e28f8bed4fced3973bfe04949918f/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=bc57bd8c7e3e28f8bed4fced3973bfe04949918f", "patch": "@@ -1005,7 +1005,8 @@ pub struct Resolver<'a> {\n \n     /// Table for mapping struct IDs into struct constructor IDs,\n     /// it's not used during normal resolution, only for better error reporting.\n-    struct_constructors: DefIdMap<(Res, ty::Visibility)>,\n+    /// Also includes of list of each fields visibility\n+    struct_constructors: DefIdMap<(Res, ty::Visibility, Vec<ty::Visibility>)>,\n \n     /// Features enabled for this crate.\n     active_features: FxHashSet<Symbol>,\n@@ -1042,6 +1043,7 @@ pub struct ResolverArenas<'a> {\n     name_resolutions: TypedArena<RefCell<NameResolution<'a>>>,\n     macro_rules_bindings: TypedArena<MacroRulesBinding<'a>>,\n     ast_paths: TypedArena<ast::Path>,\n+    pattern_spans: TypedArena<Span>,\n }\n \n impl<'a> ResolverArenas<'a> {\n@@ -1073,6 +1075,9 @@ impl<'a> ResolverArenas<'a> {\n     fn alloc_ast_paths(&'a self, paths: &[ast::Path]) -> &'a [ast::Path] {\n         self.ast_paths.alloc_from_iter(paths.iter().cloned())\n     }\n+    fn alloc_pattern_spans(&'a self, spans: impl Iterator<Item = Span>) -> &'a [Span] {\n+        self.pattern_spans.alloc_from_iter(spans)\n+    }\n }\n \n impl<'a> AsMut<Resolver<'a>> for Resolver<'a> {"}, {"sha": "0b70452a24d7177777498105eefcc171fe83dafe", "filename": "src/test/ui/issues/auxiliary/issue-75907.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bc57bd8c7e3e28f8bed4fced3973bfe04949918f/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-75907.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc57bd8c7e3e28f8bed4fced3973bfe04949918f/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-75907.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-75907.rs?ref=bc57bd8c7e3e28f8bed4fced3973bfe04949918f", "patch": "@@ -0,0 +1,5 @@\n+pub struct Bar(pub u8, u8, u8);\n+\n+pub fn make_bar() -> Bar {\n+    Bar(1, 12, 10)\n+}"}, {"sha": "8c155d9be3565b569b9addb9d87b094257d7961e", "filename": "src/test/ui/issues/issue-75907.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bc57bd8c7e3e28f8bed4fced3973bfe04949918f/src%2Ftest%2Fui%2Fissues%2Fissue-75907.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc57bd8c7e3e28f8bed4fced3973bfe04949918f/src%2Ftest%2Fui%2Fissues%2Fissue-75907.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-75907.rs?ref=bc57bd8c7e3e28f8bed4fced3973bfe04949918f", "patch": "@@ -0,0 +1,18 @@\n+// Test for for diagnostic improvement issue #75907\n+\n+mod foo {\n+    pub(crate) struct Foo(u8);\n+    pub(crate) struct Bar(pub u8, u8, Foo);\n+\n+    pub(crate) fn make_bar() -> Bar {\n+        Bar(1, 12, Foo(10))\n+    }\n+}\n+\n+use foo::{make_bar, Bar, Foo};\n+\n+fn main() {\n+    let Bar(x, y, Foo(z)) = make_bar();\n+    //~^ ERROR expected tuple struct\n+    //~| ERROR expected tuple struct\n+}"}, {"sha": "65b9a51e01dee09c64b95d96ea5dd0492cc4e01c", "filename": "src/test/ui/issues/issue-75907.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bc57bd8c7e3e28f8bed4fced3973bfe04949918f/src%2Ftest%2Fui%2Fissues%2Fissue-75907.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc57bd8c7e3e28f8bed4fced3973bfe04949918f/src%2Ftest%2Fui%2Fissues%2Fissue-75907.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-75907.stderr?ref=bc57bd8c7e3e28f8bed4fced3973bfe04949918f", "patch": "@@ -0,0 +1,29 @@\n+error[E0532]: expected tuple struct or tuple variant, found struct `Bar`\n+  --> $DIR/issue-75907.rs:15:9\n+   |\n+LL |     let Bar(x, y, Foo(z)) = make_bar();\n+   |         ^^^\n+   |\n+note: constructor is not visible here due to private fields\n+  --> $DIR/issue-75907.rs:15:16\n+   |\n+LL |     let Bar(x, y, Foo(z)) = make_bar();\n+   |                ^  ^^^^^^ private field\n+   |                |\n+   |                private field\n+\n+error[E0532]: expected tuple struct or tuple variant, found struct `Foo`\n+  --> $DIR/issue-75907.rs:15:19\n+   |\n+LL |     let Bar(x, y, Foo(z)) = make_bar();\n+   |                   ^^^\n+   |\n+note: constructor is not visible here due to private fields\n+  --> $DIR/issue-75907.rs:15:23\n+   |\n+LL |     let Bar(x, y, Foo(z)) = make_bar();\n+   |                       ^ private field\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0532`."}, {"sha": "fdd3bc6d7244ef3e1079a90c6696a562e4d9f535", "filename": "src/test/ui/issues/issue-75907_b.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bc57bd8c7e3e28f8bed4fced3973bfe04949918f/src%2Ftest%2Fui%2Fissues%2Fissue-75907_b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc57bd8c7e3e28f8bed4fced3973bfe04949918f/src%2Ftest%2Fui%2Fissues%2Fissue-75907_b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-75907_b.rs?ref=bc57bd8c7e3e28f8bed4fced3973bfe04949918f", "patch": "@@ -0,0 +1,11 @@\n+// Test for for diagnostic improvement issue #75907, extern crate\n+// aux-build:issue-75907.rs\n+\n+extern crate issue_75907 as a;\n+\n+use a::{make_bar, Bar};\n+\n+fn main() {\n+    let Bar(x, y, z) = make_bar();\n+    //~^ ERROR expected tuple struct\n+}"}, {"sha": "cdd21de6c33e4d8598d3195777343bc54ee2d144", "filename": "src/test/ui/issues/issue-75907_b.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bc57bd8c7e3e28f8bed4fced3973bfe04949918f/src%2Ftest%2Fui%2Fissues%2Fissue-75907_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc57bd8c7e3e28f8bed4fced3973bfe04949918f/src%2Ftest%2Fui%2Fissues%2Fissue-75907_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-75907_b.stderr?ref=bc57bd8c7e3e28f8bed4fced3973bfe04949918f", "patch": "@@ -0,0 +1,9 @@\n+error[E0532]: expected tuple struct or tuple variant, found struct `Bar`\n+  --> $DIR/issue-75907_b.rs:9:9\n+   |\n+LL |     let Bar(x, y, z) = make_bar();\n+   |         ^^^ constructor is not visible here due to private fields\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0532`."}]}