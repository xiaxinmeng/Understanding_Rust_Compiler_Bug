{"sha": "2b7572092c9953cd82d99768732e624bd6da56e9", "node_id": "C_kwDOAAsO6NoAKDJiNzU3MjA5MmM5OTUzY2Q4MmQ5OTc2ODczMmU2MjRiZDZkYTU2ZTk", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2022-01-09T21:41:04Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2022-01-09T21:41:04Z"}, "message": "Clean up lang_items::extract\n\nNoted in https://github.com/rust-lang/rust/pull/87739#pullrequestreview-740497194,\nlang_items::extract no longer needs to take a closure.", "tree": {"sha": "a8120f7ada64a5221020e595396a8de5c611d73a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8120f7ada64a5221020e595396a8de5c611d73a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b7572092c9953cd82d99768732e624bd6da56e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b7572092c9953cd82d99768732e624bd6da56e9", "html_url": "https://github.com/rust-lang/rust/commit/2b7572092c9953cd82d99768732e624bd6da56e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b7572092c9953cd82d99768732e624bd6da56e9/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7bb8e3677ba4277914e85a3060e5d69151aed44", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7bb8e3677ba4277914e85a3060e5d69151aed44", "html_url": "https://github.com/rust-lang/rust/commit/f7bb8e3677ba4277914e85a3060e5d69151aed44"}], "stats": {"total": 36, "additions": 9, "deletions": 27}, "files": [{"sha": "def0c1d06871b252dfa98327686fd05c78e56e7f", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2b7572092c9953cd82d99768732e624bd6da56e9/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b7572092c9953cd82d99768732e624bd6da56e9/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=2b7572092c9953cd82d99768732e624bd6da56e9", "patch": "@@ -151,20 +151,12 @@ impl<CTX> HashStable<CTX> for LangItem {\n /// Extracts the first `lang = \"$name\"` out of a list of attributes.\n /// The attributes `#[panic_handler]` and `#[alloc_error_handler]`\n /// are also extracted out when found.\n-///\n-/// About the `check_name` argument: passing in a `Session` would be simpler,\n-/// because then we could call `Session::check_name` directly. But we want to\n-/// avoid the need for `rustc_hir` to depend on `rustc_session`, so we\n-/// use a closure instead.\n-pub fn extract<'a, F>(check_name: F, attrs: &'a [ast::Attribute]) -> Option<(Symbol, Span)>\n-where\n-    F: Fn(&'a ast::Attribute, Symbol) -> bool,\n-{\n+pub fn extract(attrs: &[ast::Attribute]) -> Option<(Symbol, Span)> {\n     attrs.iter().find_map(|attr| {\n         Some(match attr {\n-            _ if check_name(attr, sym::lang) => (attr.value_str()?, attr.span),\n-            _ if check_name(attr, sym::panic_handler) => (sym::panic_impl, attr.span),\n-            _ if check_name(attr, sym::alloc_error_handler) => (sym::oom, attr.span),\n+            _ if attr.has_name(sym::lang) => (attr.value_str()?, attr.span),\n+            _ if attr.has_name(sym::panic_handler) => (sym::panic_impl, attr.span),\n+            _ if attr.has_name(sym::alloc_error_handler) => (sym::oom, attr.span),\n             _ => return None,\n         })\n     })"}, {"sha": "78748209d1a5bd55a0cd559a597451a5fa77c9e9", "filename": "compiler/rustc_hir/src/weak_lang_items.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2b7572092c9953cd82d99768732e624bd6da56e9/compiler%2Frustc_hir%2Fsrc%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b7572092c9953cd82d99768732e624bd6da56e9/compiler%2Frustc_hir%2Fsrc%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fweak_lang_items.rs?ref=2b7572092c9953cd82d99768732e624bd6da56e9", "patch": "@@ -18,13 +18,9 @@ pub static WEAK_ITEMS_REFS: SyncLazy<StableMap<Symbol, LangItem>> = SyncLazy::ne\n     map\n });\n \n-/// The `check_name` argument avoids the need for `rustc_hir` to depend on\n-/// `rustc_session`.\n-pub fn link_name<'a, F>(check_name: F, attrs: &'a [ast::Attribute]) -> Option<Symbol>\n-where\n-    F: Fn(&'a ast::Attribute, Symbol) -> bool\n+pub fn link_name(attrs: &[ast::Attribute]) -> Option<Symbol>\n {\n-    lang_items::extract(check_name, attrs).and_then(|(name, _)| {\n+    lang_items::extract(attrs).and_then(|(name, _)| {\n         $(if name == sym::$name {\n             Some(sym::$sym)\n         } else)* {"}, {"sha": "0c934ecc91376b121e4b7f648280c51cbbcc1b69", "filename": "compiler/rustc_passes/src/lang_items.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b7572092c9953cd82d99768732e624bd6da56e9/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b7572092c9953cd82d99768732e624bd6da56e9/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs?ref=2b7572092c9953cd82d99768732e624bd6da56e9", "patch": "@@ -10,7 +10,6 @@\n use crate::check_attr::target_from_impl_item;\n use crate::weak_lang_items;\n \n-use rustc_ast::Attribute;\n use rustc_errors::{pluralize, struct_span_err};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n@@ -57,8 +56,7 @@ impl<'tcx> LanguageItemCollector<'tcx> {\n \n     fn check_for_lang(&mut self, actual_target: Target, hir_id: HirId) {\n         let attrs = self.tcx.hir().attrs(hir_id);\n-        let check_name = |attr: &Attribute, sym| attr.has_name(sym);\n-        if let Some((value, span)) = extract(check_name, &attrs) {\n+        if let Some((value, span)) = extract(&attrs) {\n             match ITEM_REFS.get(&value).cloned() {\n                 // Known lang item with attribute on correct target.\n                 Some((item_index, expected_target)) if actual_target == expected_target => {"}, {"sha": "21514d19f6aac2223b94e2f2927a23a1ac0137aa", "filename": "compiler/rustc_passes/src/weak_lang_items.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b7572092c9953cd82d99768732e624bd6da56e9/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b7572092c9953cd82d99768732e624bd6da56e9/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs?ref=2b7572092c9953cd82d99768732e624bd6da56e9", "patch": "@@ -1,6 +1,5 @@\n //! Validity checking for weak lang items\n \n-use rustc_ast::Attribute;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n@@ -103,9 +102,8 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> {\n     }\n \n     fn visit_foreign_item(&mut self, i: &hir::ForeignItem<'_>) {\n-        let check_name = |attr: &Attribute, sym| attr.has_name(sym);\n         let attrs = self.tcx.hir().attrs(i.hir_id());\n-        if let Some((lang_item, _)) = lang_items::extract(check_name, attrs) {\n+        if let Some((lang_item, _)) = lang_items::extract(attrs) {\n             self.register(lang_item, i.span);\n         }\n         intravisit::walk_foreign_item(self, i)"}, {"sha": "ccf8d1d9cea10164f9946e83290225833ff1702d", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b7572092c9953cd82d99768732e624bd6da56e9/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b7572092c9953cd82d99768732e624bd6da56e9/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=2b7572092c9953cd82d99768732e624bd6da56e9", "patch": "@@ -21,7 +21,6 @@ use crate::constrained_generic_params as cgp;\n use crate::errors;\n use crate::middle::resolve_lifetime as rl;\n use rustc_ast as ast;\n-use rustc_ast::Attribute;\n use rustc_ast::{MetaItemKind, NestedMetaItem};\n use rustc_attr::{list_contains_name, InlineAttr, InstructionSetAttr, OptimizeAttr};\n use rustc_data_structures::captures::Captures;\n@@ -3120,8 +3119,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n     if tcx.is_weak_lang_item(id) {\n         codegen_fn_attrs.flags |= CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL;\n     }\n-    let check_name = |attr: &Attribute, sym| attr.has_name(sym);\n-    if let Some(name) = weak_lang_items::link_name(check_name, attrs) {\n+    if let Some(name) = weak_lang_items::link_name(attrs) {\n         codegen_fn_attrs.export_name = Some(name);\n         codegen_fn_attrs.link_name = Some(name);\n     }"}]}