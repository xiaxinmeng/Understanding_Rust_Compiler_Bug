{"sha": "692a931887b23cf11ddf69191ea8d6d509a7bd10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5MmE5MzE4ODdiMjNjZjExZGRmNjkxOTFlYThkNmQ1MDlhN2JkMTA=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-03-15T18:49:10Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-03-22T21:11:02Z"}, "message": "UserAssertTy can handle inference variables.\n\nThis commit modifies the UserAssertTy statement to take a canonicalized\ntype rather than a regular type so that we can handle the case where the\nuser provided type contains a inference variable.", "tree": {"sha": "0b249a80e66fec5b05e232caba6159b49042533c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b249a80e66fec5b05e232caba6159b49042533c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/692a931887b23cf11ddf69191ea8d6d509a7bd10", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlq0G+YACgkQAXYLT59T\n8VS+NA//TgvX4Lgnvpy8S2phYP9HoaPlU6vu84G18gh02Nk1hLdf4FSNutsd/EAT\n+dRglhqykICpUP/aCKbSSr4ojsnwK5XHpGnXIMkTYD4sQLzMJ5LKtV1GaNA3MYgN\nDsg72R01YqPvEROYCagA+GG9Ll0qlsjm3JzbHChlAaJynmmTUGD/LEQZX7gRVAos\nsMM0j83XjbruIsfxMdCxwfpc1rpMmpNhK6pndYyeGqi+YmrijNexTOnLubA9rcZG\nxXMNY0HRnyowtuUGq+GwRZXrOiUsx1XvK1SIhcMfCyB2nKluJFkadezp7VCQtz78\n8g+pcPVUNkA4cKK7/rwuZJDZHFMKI8tZ1XpKv2yON7cG4mBibFLRss9FHh4QME4C\nopo6/f+d9JNLYRPlbkWuo3BBWfu1hbrAtQGkow2JvtadBB/sl+52+aSogtj09NyZ\nlVAL+dzPusgvF1cw0ZTKu62I1GqXT0UCAOI9rXLPo4CpoEyM8lYNbjzE+6AfrBQM\nx3x8Dac8QgHzLKQMi7YPSKVdE/Gj0HrqKhnbd5Ms6RvVkHSAOIj1bIO1fIriHTqE\nqHBpaJFuX7ouMgFNSDJ0XIHoAZdBqzqHAATsZEWdhyv7+O+JexO03jsX7GTVKS9G\n7DuLLjk53fkVR+P3OLvrzbUQrK/2w37cEXOLiZPz4AxfAlkkwdk=\n=x+px\n-----END PGP SIGNATURE-----", "payload": "tree 0b249a80e66fec5b05e232caba6159b49042533c\nparent 5d2a60c57e00c8ced93240c5ed1039f3ddb37397\nauthor David Wood <david@davidtw.co> 1521139750 +0000\ncommitter David Wood <david@davidtw.co> 1521753062 +0000\n\nUserAssertTy can handle inference variables.\n\nThis commit modifies the UserAssertTy statement to take a canonicalized\ntype rather than a regular type so that we can handle the case where the\nuser provided type contains a inference variable.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/692a931887b23cf11ddf69191ea8d6d509a7bd10", "html_url": "https://github.com/rust-lang/rust/commit/692a931887b23cf11ddf69191ea8d6d509a7bd10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/692a931887b23cf11ddf69191ea8d6d509a7bd10/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d2a60c57e00c8ced93240c5ed1039f3ddb37397", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d2a60c57e00c8ced93240c5ed1039f3ddb37397", "html_url": "https://github.com/rust-lang/rust/commit/5d2a60c57e00c8ced93240c5ed1039f3ddb37397"}], "stats": {"total": 184, "additions": 146, "deletions": 38}, "files": [{"sha": "c73f171806e42510e766cc4f347143b4effe9f8a", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/692a931887b23cf11ddf69191ea8d6d509a7bd10/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692a931887b23cf11ddf69191ea8d6d509a7bd10/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=692a931887b23cf11ddf69191ea8d6d509a7bd10", "patch": "@@ -277,8 +277,8 @@ for mir::StatementKind<'gcx> {\n                 op.hash_stable(hcx, hasher);\n                 places.hash_stable(hcx, hasher);\n             }\n-            mir::StatementKind::UserAssertTy(ref ty, ref local) => {\n-                ty.hash_stable(hcx, hasher);\n+            mir::StatementKind::UserAssertTy(ref c_ty, ref local) => {\n+                c_ty.hash_stable(hcx, hasher);\n                 local.hash_stable(hcx, hasher);\n             }\n             mir::StatementKind::Nop => {}"}, {"sha": "debddd708ea22bd3e0f69979739b0aaa5df3c608", "filename": "src/librustc/infer/canonical.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/692a931887b23cf11ddf69191ea8d6d509a7bd10/src%2Flibrustc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692a931887b23cf11ddf69191ea8d6d509a7bd10/src%2Flibrustc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical.rs?ref=692a931887b23cf11ddf69191ea8d6d509a7bd10", "patch": "@@ -33,6 +33,7 @@\n \n use infer::{InferCtxt, InferOk, InferResult, RegionVariableOrigin, TypeVariableOrigin};\n use rustc_data_structures::indexed_vec::Idx;\n+use serialize::UseSpecializedDecodable;\n use std::fmt::Debug;\n use std::ops::Index;\n use syntax::codemap::Span;\n@@ -49,14 +50,16 @@ use rustc_data_structures::fx::FxHashMap;\n /// A \"canonicalized\" type `V` is one where all free inference\n /// variables have been rewriten to \"canonical vars\". These are\n /// numbered starting from 0 in order of first appearance.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcDecodable, RustcEncodable)]\n pub struct Canonical<'gcx, V> {\n     pub variables: CanonicalVarInfos<'gcx>,\n     pub value: V,\n }\n \n pub type CanonicalVarInfos<'gcx> = &'gcx Slice<CanonicalVarInfo>;\n \n+impl<'gcx> UseSpecializedDecodable for CanonicalVarInfos<'gcx> { }\n+\n /// A set of values corresponding to the canonical variables from some\n /// `Canonical`. You can give these values to\n /// `canonical_value.substitute` to substitute them into the canonical\n@@ -69,7 +72,7 @@ pub type CanonicalVarInfos<'gcx> = &'gcx Slice<CanonicalVarInfo>;\n /// You can also use `infcx.fresh_inference_vars_for_canonical_vars`\n /// to get back a `CanonicalVarValues` containing fresh inference\n /// variables.\n-#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, RustcDecodable, RustcEncodable)]\n pub struct CanonicalVarValues<'tcx> {\n     pub var_values: IndexVec<CanonicalVar, Kind<'tcx>>,\n }\n@@ -78,15 +81,15 @@ pub struct CanonicalVarValues<'tcx> {\n /// canonical value. This is sufficient information for code to create\n /// a copy of the canonical value in some other inference context,\n /// with fresh inference variables replacing the canonical values.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcDecodable, RustcEncodable)]\n pub struct CanonicalVarInfo {\n     pub kind: CanonicalVarKind,\n }\n \n /// Describes the \"kind\" of the canonical variable. This is a \"kind\"\n /// in the type-theory sense of the term -- i.e., a \"meta\" type system\n /// that analyzes type-like values.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcDecodable, RustcEncodable)]\n pub enum CanonicalVarKind {\n     /// Some kind of type inference variable.\n     Ty(CanonicalTyVarKind),\n@@ -100,7 +103,7 @@ pub enum CanonicalVarKind {\n /// 22.) can only be instantiated with integral/float types (e.g.,\n /// usize or f32). In order to faithfully reproduce a type, we need to\n /// know what set of types a given type variable can be unified with.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcDecodable, RustcEncodable)]\n pub enum CanonicalTyVarKind {\n     /// General type variable `?T` that can be unified with arbitrary types.\n     General,\n@@ -855,11 +858,14 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for CanonicalVarValuesSubst<'cx, 'g\n }\n \n CloneTypeFoldableAndLiftImpls! {\n+    ::infer::canonical::Certainty,\n+    ::infer::canonical::CanonicalVarInfo,\n+    ::infer::canonical::CanonicalVarKind,\n+}\n+\n+CloneTypeFoldableImpls! {\n     for <'tcx> {\n-        ::infer::canonical::Certainty,\n-        ::infer::canonical::CanonicalVarInfo,\n         ::infer::canonical::CanonicalVarInfos<'tcx>,\n-        ::infer::canonical::CanonicalVarKind,\n     }\n }\n \n@@ -870,6 +876,13 @@ BraceStructTypeFoldableImpl! {\n     } where C: TypeFoldable<'tcx>\n }\n \n+BraceStructLiftImpl! {\n+    impl<'a, 'tcx, T> Lift<'tcx> for Canonical<'a, T> {\n+        type Lifted = Canonical<'tcx, T::Lifted>;\n+        variables, value\n+    } where T: Lift<'tcx>\n+}\n+\n impl<'tcx> CanonicalVarValues<'tcx> {\n     fn iter<'a>(&'a self) -> impl Iterator<Item = Kind<'tcx>> + 'a {\n         self.var_values.iter().cloned()"}, {"sha": "9229724f0941dcff625038c591ea20b74a6c29d8", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/692a931887b23cf11ddf69191ea8d6d509a7bd10/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692a931887b23cf11ddf69191ea8d6d509a7bd10/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=692a931887b23cf11ddf69191ea8d6d509a7bd10", "patch": "@@ -27,7 +27,7 @@ use hir::def_id::DefId;\n use mir::visit::MirVisitable;\n use mir::interpret::{Value, PrimVal};\n use ty::subst::{Subst, Substs};\n-use ty::{self, AdtDef, ClosureSubsts, Region, Ty, TyCtxt, GeneratorInterior};\n+use ty::{self, AdtDef, CanonicalTy, ClosureSubsts, Region, Ty, TyCtxt, GeneratorInterior};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use ty::TypeAndMut;\n use util::ppaux;\n@@ -1260,7 +1260,7 @@ pub enum StatementKind<'tcx> {\n     ///\n     /// Here we would insert a `UserAssertTy<(T, U)>(y)` instruction to check that the type of `y`\n     /// is the right thing.\n-    UserAssertTy(Ty<'tcx>, Local),\n+    UserAssertTy(CanonicalTy<'tcx>, Local),\n \n     /// No-op. Useful for deleting instructions without affecting statement indices.\n     Nop,\n@@ -1333,7 +1333,8 @@ impl<'tcx> Debug for Statement<'tcx> {\n             InlineAsm { ref asm, ref outputs, ref inputs } => {\n                 write!(fmt, \"asm!({:?} : {:?} : {:?})\", asm, outputs, inputs)\n             },\n-            UserAssertTy(ref ty, ref local) => write!(fmt, \"UserAssertTy({:?}, {:?})\", ty, local),\n+            UserAssertTy(ref c_ty, ref local) => write!(fmt, \"UserAssertTy({:?}, {:?})\",\n+                                                        c_ty, local),\n             Nop => write!(fmt, \"nop\"),\n         }\n     }"}, {"sha": "a3fdb6f73abb0e97f13c49244a33f39fa16ff7d3", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/692a931887b23cf11ddf69191ea8d6d509a7bd10/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692a931887b23cf11ddf69191ea8d6d509a7bd10/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=692a931887b23cf11ddf69191ea8d6d509a7bd10", "patch": "@@ -10,7 +10,7 @@\n \n use hir::def_id::DefId;\n use ty::subst::Substs;\n-use ty::{ClosureSubsts, Region, Ty, GeneratorInterior};\n+use ty::{CanonicalTy, ClosureSubsts, Region, Ty, GeneratorInterior};\n use mir::*;\n use syntax_pos::Span;\n \n@@ -145,10 +145,10 @@ macro_rules! make_mir_visitor {\n             }\n \n             fn visit_user_assert_ty(&mut self,\n-                                    ty: & $($mutability)* Ty<'tcx>,\n+                                    c_ty: & $($mutability)* CanonicalTy<'tcx>,\n                                     local: & $($mutability)* Local,\n                                     location: Location) {\n-                self.super_user_assert_ty(ty, local, location);\n+                self.super_user_assert_ty(c_ty, local, location);\n             }\n \n             fn visit_place(&mut self,\n@@ -383,9 +383,9 @@ macro_rules! make_mir_visitor {\n                             self.visit_operand(input, location);\n                         }\n                     }\n-                    StatementKind::UserAssertTy(ref $($mutability)* ty,\n+                    StatementKind::UserAssertTy(ref $($mutability)* c_ty,\n                                                 ref $($mutability)* local) => {\n-                        self.visit_user_assert_ty(ty, local, location);\n+                        self.visit_user_assert_ty(c_ty, local, location);\n                     }\n                     StatementKind::Nop => {}\n                 }\n@@ -631,10 +631,9 @@ macro_rules! make_mir_visitor {\n             }\n \n             fn super_user_assert_ty(&mut self,\n-                                    ty: & $($mutability)* Ty<'tcx>,\n+                                    _c_ty: & $($mutability)* CanonicalTy<'tcx>,\n                                     local: & $($mutability)* Local,\n                                     location: Location) {\n-                self.visit_ty(ty, TyContext::Location(location));\n                 self.visit_local(local, PlaceContext::Validate, location);\n             }\n "}, {"sha": "573d2771322967665da41afb5af8ea54a95d8064", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/692a931887b23cf11ddf69191ea8d6d509a7bd10/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692a931887b23cf11ddf69191ea8d6d509a7bd10/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=692a931887b23cf11ddf69191ea8d6d509a7bd10", "patch": "@@ -48,6 +48,7 @@ use ty::layout::{LayoutDetails, TargetDataLayout};\n use ty::maps;\n use ty::steal::Steal;\n use ty::BindingMode;\n+use ty::CanonicalTy;\n use util::nodemap::{NodeMap, DefIdSet, ItemLocalMap};\n use util::nodemap::{FxHashMap, FxHashSet};\n use rustc_data_structures::accumulate_vec::AccumulateVec;\n@@ -344,6 +345,9 @@ pub struct TypeckTables<'tcx> {\n     /// method calls, including those of overloaded operators.\n     type_dependent_defs: ItemLocalMap<Def>,\n \n+    /// Stores the canonicalized types provided by the user.\n+    user_provided_tys: ItemLocalMap<CanonicalTy<'tcx>>,\n+\n     /// Stores the types for various nodes in the AST.  Note that this table\n     /// is not guaranteed to be populated until after typeck.  See\n     /// typeck::check::fn_ctxt for details.\n@@ -420,6 +424,7 @@ impl<'tcx> TypeckTables<'tcx> {\n         TypeckTables {\n             local_id_root,\n             type_dependent_defs: ItemLocalMap(),\n+            user_provided_tys: ItemLocalMap(),\n             node_types: ItemLocalMap(),\n             node_substs: ItemLocalMap(),\n             adjustments: ItemLocalMap(),\n@@ -461,6 +466,20 @@ impl<'tcx> TypeckTables<'tcx> {\n         }\n     }\n \n+    pub fn user_provided_tys(&self) -> LocalTableInContext<CanonicalTy<'tcx>> {\n+        LocalTableInContext {\n+            local_id_root: self.local_id_root,\n+            data: &self.user_provided_tys\n+        }\n+    }\n+\n+    pub fn user_provided_tys_mut(&mut self) -> LocalTableInContextMut<CanonicalTy<'tcx>> {\n+        LocalTableInContextMut {\n+            local_id_root: self.local_id_root,\n+            data: &mut self.user_provided_tys\n+        }\n+    }\n+\n     pub fn node_types(&self) -> LocalTableInContext<Ty<'tcx>> {\n         LocalTableInContext {\n             local_id_root: self.local_id_root,\n@@ -685,6 +704,7 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for TypeckTables<'gcx> {\n         let ty::TypeckTables {\n             local_id_root,\n             ref type_dependent_defs,\n+            ref user_provided_tys,\n             ref node_types,\n             ref node_substs,\n             ref adjustments,\n@@ -704,6 +724,7 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for TypeckTables<'gcx> {\n \n         hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n             type_dependent_defs.hash_stable(hcx, hasher);\n+            user_provided_tys.hash_stable(hcx, hasher);\n             node_types.hash_stable(hcx, hasher);\n             node_substs.hash_stable(hcx, hasher);\n             adjustments.hash_stable(hcx, hasher);\n@@ -1635,6 +1656,24 @@ impl<'a, 'tcx> Lift<'tcx> for &'a Slice<Predicate<'a>> {\n     }\n }\n \n+impl<'a, 'tcx> Lift<'tcx> for &'a Slice<CanonicalVarInfo> {\n+    type Lifted = &'tcx Slice<CanonicalVarInfo>;\n+    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+        if self.len() == 0 {\n+            return Some(Slice::empty());\n+        }\n+        if tcx.interners.arena.in_arena(*self as *const _) {\n+            return Some(unsafe { mem::transmute(*self) });\n+        }\n+        // Also try in the global tcx if we're not that.\n+        if !tcx.is_global() {\n+            self.lift_to_tcx(tcx.global_tcx())\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n pub mod tls {\n     use super::{CtxtInterners, GlobalCtxt, TyCtxt};\n "}, {"sha": "68bc244971138d683c8b46d366d0ded30324edd6", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/692a931887b23cf11ddf69191ea8d6d509a7bd10/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692a931887b23cf11ddf69191ea8d6d509a7bd10/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=692a931887b23cf11ddf69191ea8d6d509a7bd10", "patch": "@@ -21,6 +21,7 @@ use hir::map::DefPathData;\n use hir::svh::Svh;\n use ich::Fingerprint;\n use ich::StableHashingContext;\n+use infer::canonical::{Canonical, Canonicalize};\n use middle::const_val::ConstVal;\n use middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem, FnOnceTraitLangItem};\n use middle::privacy::AccessLevels;\n@@ -554,6 +555,17 @@ pub type Ty<'tcx> = &'tcx TyS<'tcx>;\n impl<'tcx> serialize::UseSpecializedEncodable for Ty<'tcx> {}\n impl<'tcx> serialize::UseSpecializedDecodable for Ty<'tcx> {}\n \n+pub type CanonicalTy<'gcx> = Canonical<'gcx, Ty<'gcx>>;\n+\n+impl <'gcx: 'tcx, 'tcx> Canonicalize<'gcx, 'tcx> for Ty<'tcx> {\n+    type Canonicalized = CanonicalTy<'gcx>;\n+\n+    fn intern(_gcx: TyCtxt<'_, 'gcx, 'gcx>,\n+              value: Canonical<'gcx, Self::Lifted>) -> Self::Canonicalized {\n+        value\n+    }\n+}\n+\n /// A wrapper for slices with the additional invariant\n /// that the slice is interned and no other slice with\n /// the same contents can exist in the same context."}, {"sha": "afaedecdf0abe307400847586aebaf1c0a98a838", "filename": "src/librustc_mir/borrow_check/nll/constraint_generation.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/692a931887b23cf11ddf69191ea8d6d509a7bd10/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692a931887b23cf11ddf69191ea8d6d509a7bd10/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs?ref=692a931887b23cf11ddf69191ea8d6d509a7bd10", "patch": "@@ -15,7 +15,7 @@ use rustc::mir::Place::Projection;\n use rustc::mir::{Local, PlaceProjection, ProjectionElem};\n use rustc::mir::visit::TyContext;\n use rustc::infer::InferCtxt;\n-use rustc::ty::{self, ClosureSubsts, Ty};\n+use rustc::ty::{self, CanonicalTy, ClosureSubsts};\n use rustc::ty::subst::Substs;\n use rustc::ty::fold::TypeFoldable;\n \n@@ -107,7 +107,8 @@ impl<'cg, 'cx, 'gcx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'gcx\n         self.super_rvalue(rvalue, location);\n     }\n \n-    fn visit_user_assert_ty(&mut self, _ty: &Ty<'tcx>, _local: &Local, _location: Location) { }\n+    fn visit_user_assert_ty(&mut self, _c_ty: &CanonicalTy<'tcx>,\n+                            _local: &Local, _location: Location) { }\n }\n \n impl<'cx, 'cg, 'gcx, 'tcx> ConstraintGeneration<'cx, 'cg, 'gcx, 'tcx> {"}, {"sha": "04c206b5c0c40b4d0f82891e6b7ce11672d5c04b", "filename": "src/librustc_mir/borrow_check/nll/renumber.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/692a931887b23cf11ddf69191ea8d6d509a7bd10/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692a931887b23cf11ddf69191ea8d6d509a7bd10/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs?ref=692a931887b23cf11ddf69191ea8d6d509a7bd10", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use rustc::ty::subst::Substs;\n-use rustc::ty::{self, ClosureSubsts, GeneratorInterior, Ty, TypeFoldable};\n+use rustc::ty::{self, CanonicalTy, ClosureSubsts, GeneratorInterior, Ty, TypeFoldable};\n use rustc::mir::{BasicBlock, Local, Location, Mir, Statement, StatementKind};\n use rustc::mir::visit::{MutVisitor, TyContext};\n use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n@@ -118,7 +118,7 @@ impl<'a, 'gcx, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'gcx, 'tcx> {\n         debug!(\"visit_closure_substs: substs={:?}\", substs);\n     }\n \n-    fn visit_user_assert_ty(&mut self, _ty: &mut Ty<'tcx>, _local: &mut Local,\n+    fn visit_user_assert_ty(&mut self, _c_ty: &mut CanonicalTy<'tcx>, _local: &mut Local,\n                             _location: Location) {\n         // User-assert-ty statements represent types that the user added explicitly.\n         // We don't want to erase the regions from these types: rather, we want to"}, {"sha": "80a439b183058d1c12b2cff3f2ba497be454558f", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/692a931887b23cf11ddf69191ea8d6d509a7bd10/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692a931887b23cf11ddf69191ea8d6d509a7bd10/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=692a931887b23cf11ddf69191ea8d6d509a7bd10", "patch": "@@ -761,12 +761,12 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     );\n                 };\n             }\n-            StatementKind::UserAssertTy(ref ty, ref local) => {\n+            StatementKind::UserAssertTy(ref c_ty, ref local) => {\n                 let local_ty = mir.local_decls()[*local].ty;\n+                let (ty, _) = self.infcx.instantiate_canonical_with_fresh_inference_vars(\n+                    stmt.source_info.span, c_ty);\n                 debug!(\"check_stmt: user_assert_ty ty={:?} local_ty={:?}\", ty, local_ty);\n-                if let Err(terr) =\n-                    self.eq_types(ty, local_ty, location.at_self())\n-                {\n+                if let Err(terr) = self.eq_types(ty, local_ty, location.at_self()) {\n                     span_mirbug!(\n                         self,\n                         stmt,"}, {"sha": "b9a6616fd076c7fceec90fb39dce8fe08a4eefab", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/692a931887b23cf11ddf69191ea8d6d509a7bd10/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692a931887b23cf11ddf69191ea8d6d509a7bd10/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=692a931887b23cf11ddf69191ea8d6d509a7bd10", "patch": "@@ -145,18 +145,24 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         end_block.unit()\n     }\n \n-    pub fn user_assert_ty(&mut self, block: BasicBlock, ty: Ty<'tcx>, var: NodeId, span: Span) {\n+    pub fn user_assert_ty(&mut self, block: BasicBlock, hir_id: hir::HirId,\n+                          var: NodeId, span: Span) {\n         let local_id = self.var_indices[&var];\n         let source_info = self.source_info(span);\n-        self.cfg.push(block, Statement {\n-            source_info,\n-            kind: StatementKind::UserAssertTy(ty, local_id),\n-        });\n+\n+        debug!(\"user_assert_ty: local_id={:?}\", hir_id.local_id);\n+        if let Some(c_ty) = self.hir.tables.user_provided_tys().get(hir_id) {\n+            debug!(\"user_assert_ty: c_ty={:?}\", c_ty);\n+            self.cfg.push(block, Statement {\n+                source_info,\n+                kind: StatementKind::UserAssertTy(*c_ty, local_id),\n+            });\n+        }\n     }\n \n     pub fn expr_into_pattern(&mut self,\n                              mut block: BasicBlock,\n-                             ty: Option<Ty<'tcx>>,\n+                             ty: Option<hir::HirId>,\n                              irrefutable_pat: Pattern<'tcx>,\n                              initializer: ExprRef<'tcx>)\n                              -> BlockAnd<()> {"}, {"sha": "14aa307f0ae1f1a24652a4b6a60cb3cf44da2edc", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/692a931887b23cf11ddf69191ea8d6d509a7bd10/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692a931887b23cf11ddf69191ea8d6d509a7bd10/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=692a931887b23cf11ddf69191ea8d6d509a7bd10", "patch": "@@ -76,7 +76,7 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                             first_statement_index: region::FirstStatementIndex::new(index),\n                         });\n \n-                        let ty = local.ty.clone().map(|ty| cx.tables().node_id_to_type(ty.hir_id));\n+                        let ty = local.ty.clone().map(|ty| ty.hir_id);\n                         let pattern = cx.pattern_from_hir(&local.pat);\n                         result.push(StmtRef::Mirror(Box::new(Stmt {\n                             kind: StmtKind::Let {"}, {"sha": "fe82b8158f76dbed8188e15843443d9259b32bde", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/692a931887b23cf11ddf69191ea8d6d509a7bd10/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692a931887b23cf11ddf69191ea8d6d509a7bd10/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=692a931887b23cf11ddf69191ea8d6d509a7bd10", "patch": "@@ -97,7 +97,7 @@ pub enum StmtKind<'tcx> {\n         pattern: Pattern<'tcx>,\n \n         /// let pat: <TY> = init ...\n-        ty: Option<Ty<'tcx>>,\n+        ty: Option<hir::HirId>,\n \n         /// let pat: ty = <INIT> ...\n         initializer: Option<ExprRef<'tcx>>,"}, {"sha": "e2f6c965c18e91973576d4cec56b8e4ddac9b1e7", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/692a931887b23cf11ddf69191ea8d6d509a7bd10/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692a931887b23cf11ddf69191ea8d6d509a7bd10/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=692a931887b23cf11ddf69191ea8d6d509a7bd10", "patch": "@@ -960,10 +960,19 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for GatherLocalsVisitor<'a, 'gcx, 'tcx> {\n     // Add explicitly-declared locals.\n     fn visit_local(&mut self, local: &'gcx hir::Local) {\n         let o_ty = match local.ty {\n-            Some(ref ty) => Some(self.fcx.to_ty(&ty)),\n-            None => None\n+            Some(ref ty) => {\n+                let o_ty = self.fcx.to_ty(&ty);\n+\n+                let (c_ty, _orig_values) = self.fcx.inh.infcx.canonicalize_query(&o_ty);\n+                debug!(\"visit_local: ty.hir_id={:?} o_ty={:?} c_ty={:?}\", ty.hir_id, o_ty, c_ty);\n+                self.fcx.tables.borrow_mut().user_provided_tys_mut().insert(ty.hir_id, c_ty);\n+\n+                Some(o_ty)\n+            },\n+            None => None,\n         };\n         self.assign(local.span, local.id, o_ty);\n+\n         debug!(\"Local variable {:?} is assigned type {}\",\n                local.pat,\n                self.fcx.ty_to_string("}, {"sha": "bbd04e0b19ae194a3e9365bf2df24d1437aa88dd", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/692a931887b23cf11ddf69191ea8d6d509a7bd10/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692a931887b23cf11ddf69191ea8d6d509a7bd10/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=692a931887b23cf11ddf69191ea8d6d509a7bd10", "patch": "@@ -46,6 +46,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         wbcx.visit_anon_types();\n         wbcx.visit_cast_types();\n         wbcx.visit_free_region_map();\n+        wbcx.visit_user_provided_tys();\n \n         let used_trait_imports = mem::replace(\n             &mut self.tables.borrow_mut().used_trait_imports,\n@@ -341,6 +342,33 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n         self.tables.free_region_map = free_region_map;\n     }\n \n+    fn visit_user_provided_tys(&mut self) {\n+        let fcx_tables = self.fcx.tables.borrow();\n+        debug_assert_eq!(fcx_tables.local_id_root, self.tables.local_id_root);\n+        let common_local_id_root = fcx_tables.local_id_root.unwrap();\n+\n+        for (&local_id, c_ty) in fcx_tables.user_provided_tys().iter() {\n+            let hir_id = hir::HirId {\n+                owner: common_local_id_root.index,\n+                local_id,\n+            };\n+\n+            let c_ty = if let Some(c_ty) = self.tcx().lift_to_global(c_ty) {\n+                c_ty\n+            } else {\n+                span_bug!(\n+                    hir_id.to_span(&self.fcx.tcx),\n+                    \"writeback: `{:?}` missing from the global type context\",\n+                    c_ty\n+                );\n+            };\n+\n+            self.tables\n+                .user_provided_tys_mut()\n+                .insert(hir_id, c_ty.clone());\n+        }\n+    }\n+\n     fn visit_anon_types(&mut self) {\n         let gcx = self.tcx().global_tcx();\n         for (&def_id, anon_defn) in self.fcx.anon_types.borrow().iter() {"}]}