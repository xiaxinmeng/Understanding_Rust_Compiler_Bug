{"sha": "91dd9c46de11b9abeb391d5b19707c5e7ddfef98", "node_id": "C_kwDOAAsO6NoAKDkxZGQ5YzQ2ZGUxMWI5YWJlYjM5MWQ1YjE5NzA3YzVlN2RkZmVmOTg", "commit": {"author": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-09-12T09:31:11Z"}, "committer": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-11-20T08:40:11Z"}, "message": "Handle other projection kinds", "tree": {"sha": "fc9a436a8d71d293995be063b79dd3857617cf13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc9a436a8d71d293995be063b79dd3857617cf13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91dd9c46de11b9abeb391d5b19707c5e7ddfef98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91dd9c46de11b9abeb391d5b19707c5e7ddfef98", "html_url": "https://github.com/rust-lang/rust/commit/91dd9c46de11b9abeb391d5b19707c5e7ddfef98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91dd9c46de11b9abeb391d5b19707c5e7ddfef98/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97783a8cb9b154b17abbf0084fe8a16d490cf801", "url": "https://api.github.com/repos/rust-lang/rust/commits/97783a8cb9b154b17abbf0084fe8a16d490cf801", "html_url": "https://github.com/rust-lang/rust/commit/97783a8cb9b154b17abbf0084fe8a16d490cf801"}], "stats": {"total": 245, "additions": 231, "deletions": 14}, "files": [{"sha": "d09baf50e49726e0c7e59350824556383056af44", "filename": "clippy_lints/src/methods/search_is_some.rs", "status": "modified", "additions": 68, "deletions": 12, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/91dd9c46de11b9abeb391d5b19707c5e7ddfef98/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91dd9c46de11b9abeb391d5b19707c5e7ddfef98/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs?ref=91dd9c46de11b9abeb391d5b19707c5e7ddfef98", "patch": "@@ -220,7 +220,7 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n             let ident_str = map.name(id).to_string();\n             let span = map.span(cmt.hir_id);\n             let start_span = Span::new(self.next_pos, span.lo(), span.ctxt());\n-            let start_snip = snippet_with_applicability(self.cx, start_span, \"..\", &mut self.applicability);\n+            let mut start_snip = snippet_with_applicability(self.cx, start_span, \"..\", &mut self.applicability);\n \n             if cmt.place.projections.is_empty() {\n                 // handle item without any projection, that needs an explicit borrowing\n@@ -255,19 +255,75 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n                 // handle item projections by removing one explicit deref\n                 // i.e.: suggest `*x` instead of `**x`\n                 let mut replacement_str = ident_str;\n-                let last_deref = cmt\n-                    .place\n-                    .projections\n-                    .iter()\n-                    .rposition(|proj| proj.kind == ProjectionKind::Deref);\n \n-                if let Some(pos) = last_deref {\n-                    let mut projections = cmt.place.projections.clone();\n-                    projections.truncate(pos);\n+                // handle index projection first\n+                let index_handled = cmt.place.projections.iter().any(|proj| match proj.kind {\n+                    // Index projection like `|x| foo[x]`\n+                    // the index is dropped so we can't get it to build the suggestion,\n+                    // so the span is set-up again to get more code, using `span.hi()` (i.e.: `foo[x]`)\n+                    // instead of `span.lo()` (i.e.: `foo`)\n+                    ProjectionKind::Index => {\n+                        let start_span = Span::new(self.next_pos, span.hi(), span.ctxt());\n+                        start_snip = snippet_with_applicability(self.cx, start_span, \"..\", &mut self.applicability);\n+                        replacement_str.clear();\n+                        true\n+                    },\n+                    _ => false,\n+                });\n+\n+                // looking for projections other that need to be handled differently\n+                let other_projections_handled = cmt.place.projections.iter().enumerate().any(|(i, proj)| {\n+                    match proj.kind {\n+                        // Field projection like `|v| v.foo`\n+                        ProjectionKind::Field(idx, variant) => match cmt.place.ty_before_projection(i).kind() {\n+                            ty::Adt(def, ..) => {\n+                                replacement_str = format!(\n+                                    \"{}.{}\",\n+                                    replacement_str,\n+                                    def.variants[variant].fields[idx as usize].ident.name.as_str()\n+                                );\n+                                true\n+                            },\n+                            ty::Tuple(_) => {\n+                                replacement_str = format!(\"{}.{}\", replacement_str, idx);\n+                                true\n+                            },\n+                            _ => false,\n+                        },\n+                        ProjectionKind::Index => false, /* handled previously */\n+                        // note: unable to capture `Subslice` kind in tests\n+                        ProjectionKind::Subslice => false,\n+                        ProjectionKind::Deref => {\n+                            // explicit deref for arrays should be avoided in the suggestion\n+                            // i.e.: `|sub| *sub[1..4].len() == 3` is not expected\n+                            match cmt.place.ty_before_projection(i).kind() {\n+                                // dereferencing an array (i.e.: `|sub| sub[1..4].len() == 3`)\n+                                ty::Ref(_, inner, _) => match inner.kind() {\n+                                    ty::Ref(_, innermost, _) if innermost.is_array() => true,\n+                                    _ => false,\n+                                },\n+                                _ => false,\n+                            }\n+                        },\n+                    }\n+                });\n \n-                    for item in projections {\n-                        if item.kind == ProjectionKind::Deref {\n-                            replacement_str = format!(\"*{}\", replacement_str);\n+                // handle `ProjectionKind::Deref` if no special case detected\n+                if !index_handled && !other_projections_handled {\n+                    let last_deref = cmt\n+                        .place\n+                        .projections\n+                        .iter()\n+                        .rposition(|proj| proj.kind == ProjectionKind::Deref);\n+\n+                    if let Some(pos) = last_deref {\n+                        let mut projections = cmt.place.projections.clone();\n+                        projections.truncate(pos);\n+\n+                        for item in projections {\n+                            if item.kind == ProjectionKind::Deref {\n+                                replacement_str = format!(\"*{}\", replacement_str);\n+                            }\n                         }\n                     }\n                 }"}, {"sha": "222731fd212a6d1b98172629912796eef4447a34", "filename": "tests/ui/search_is_some_fixable_none.fixed", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/91dd9c46de11b9abeb391d5b19707c5e7ddfef98/tests%2Fui%2Fsearch_is_some_fixable_none.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/91dd9c46de11b9abeb391d5b19707c5e7ddfef98/tests%2Fui%2Fsearch_is_some_fixable_none.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_none.fixed?ref=91dd9c46de11b9abeb391d5b19707c5e7ddfef98", "patch": "@@ -73,4 +73,28 @@ mod issue7392 {\n             .map(|c| c.clone())\n             .collect::<Vec<_>>();\n     }\n+\n+    fn field_projection() {\n+        struct Foo {\n+            foo: i32,\n+            bar: u32,\n+        }\n+        let vfoo = vec![Foo { foo: 1, bar: 2 }];\n+        let _ = !vfoo.iter().any(|v| v.foo == 1 && v.bar == 2);\n+\n+        let vfoo = vec![(42, Foo { foo: 1, bar: 2 })];\n+        let _ = !vfoo\n+            .iter().any(|(i, v)| *i == 42 && v.foo == 1 && v.bar == 2);\n+    }\n+\n+    fn index_projection() {\n+        let vfoo = vec![[0, 1, 2, 3]];\n+        let _ = !vfoo.iter().any(|a| a[0] == 42);\n+    }\n+\n+    #[allow(clippy::match_like_matches_macro)]\n+    fn slice_projection() {\n+        let vfoo = vec![[0, 1, 2, 3, 0, 1, 2, 3]];\n+        let _ = !vfoo.iter().any(|sub| sub[1..4].len() == 3);\n+    }\n }"}, {"sha": "43ac1a076678625e5e930d6abeecc00ec1253b40", "filename": "tests/ui/search_is_some_fixable_none.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/91dd9c46de11b9abeb391d5b19707c5e7ddfef98/tests%2Fui%2Fsearch_is_some_fixable_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91dd9c46de11b9abeb391d5b19707c5e7ddfef98/tests%2Fui%2Fsearch_is_some_fixable_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_none.rs?ref=91dd9c46de11b9abeb391d5b19707c5e7ddfef98", "patch": "@@ -75,4 +75,30 @@ mod issue7392 {\n             .map(|c| c.clone())\n             .collect::<Vec<_>>();\n     }\n+\n+    fn field_projection() {\n+        struct Foo {\n+            foo: i32,\n+            bar: u32,\n+        }\n+        let vfoo = vec![Foo { foo: 1, bar: 2 }];\n+        let _ = vfoo.iter().find(|v| v.foo == 1 && v.bar == 2).is_none();\n+\n+        let vfoo = vec![(42, Foo { foo: 1, bar: 2 })];\n+        let _ = vfoo\n+            .iter()\n+            .find(|(i, v)| *i == 42 && v.foo == 1 && v.bar == 2)\n+            .is_none();\n+    }\n+\n+    fn index_projection() {\n+        let vfoo = vec![[0, 1, 2, 3]];\n+        let _ = vfoo.iter().find(|a| a[0] == 42).is_none();\n+    }\n+\n+    #[allow(clippy::match_like_matches_macro)]\n+    fn slice_projection() {\n+        let vfoo = vec![[0, 1, 2, 3, 0, 1, 2, 3]];\n+        let _ = vfoo.iter().find(|sub| sub[1..4].len() == 3).is_none();\n+    }\n }"}, {"sha": "fa344046aeba9b8baa70d58d683b7948756d1422", "filename": "tests/ui/search_is_some_fixable_none.stderr", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/91dd9c46de11b9abeb391d5b19707c5e7ddfef98/tests%2Fui%2Fsearch_is_some_fixable_none.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91dd9c46de11b9abeb391d5b19707c5e7ddfef98/tests%2Fui%2Fsearch_is_some_fixable_none.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_none.stderr?ref=91dd9c46de11b9abeb391d5b19707c5e7ddfef98", "patch": "@@ -135,5 +135,39 @@ error: called `is_none()` after searching an `Iterator` with `find`\n LL |             .filter(|(c, _)| filter_hand.iter().find(|cc| c == *cc).is_none())\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!filter_hand.iter().any(|cc| c == cc)`\n \n-error: aborting due to 22 previous errors\n+error: called `is_none()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_none.rs:85:17\n+   |\n+LL |         let _ = vfoo.iter().find(|v| v.foo == 1 && v.bar == 2).is_none();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!vfoo.iter().any(|v| v.foo == 1 && v.bar == 2)`\n+\n+error: called `is_none()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_none.rs:88:17\n+   |\n+LL |           let _ = vfoo\n+   |  _________________^\n+LL | |             .iter()\n+LL | |             .find(|(i, v)| *i == 42 && v.foo == 1 && v.bar == 2)\n+LL | |             .is_none();\n+   | |______________________^\n+   |\n+help: use `!_.any()` instead\n+   |\n+LL ~         let _ = !vfoo\n+LL ~             .iter().any(|(i, v)| *i == 42 && v.foo == 1 && v.bar == 2);\n+   |\n+\n+error: called `is_none()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_none.rs:96:17\n+   |\n+LL |         let _ = vfoo.iter().find(|a| a[0] == 42).is_none();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!vfoo.iter().any(|a| a[0] == 42)`\n+\n+error: called `is_none()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_none.rs:102:17\n+   |\n+LL |         let _ = vfoo.iter().find(|sub| sub[1..4].len() == 3).is_none();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!vfoo.iter().any(|sub| sub[1..4].len() == 3)`\n+\n+error: aborting due to 26 previous errors\n "}, {"sha": "ae9478a42e9f719a2b1cd5faf72330200fa510d3", "filename": "tests/ui/search_is_some_fixable_some.fixed", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/91dd9c46de11b9abeb391d5b19707c5e7ddfef98/tests%2Fui%2Fsearch_is_some_fixable_some.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/91dd9c46de11b9abeb391d5b19707c5e7ddfef98/tests%2Fui%2Fsearch_is_some_fixable_some.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_some.fixed?ref=91dd9c46de11b9abeb391d5b19707c5e7ddfef98", "patch": "@@ -73,4 +73,29 @@ mod issue7392 {\n             .map(|c| c.clone())\n             .collect::<Vec<_>>();\n     }\n+\n+    fn field_projection() {\n+        struct Foo {\n+            foo: i32,\n+            bar: u32,\n+        }\n+        let vfoo = vec![Foo { foo: 1, bar: 2 }];\n+        let _ = vfoo.iter().any(|v| v.foo == 1 && v.bar == 2);\n+\n+        let vfoo = vec![(42, Foo { foo: 1, bar: 2 })];\n+        let _ = vfoo\n+            .iter()\n+            .any(|(i, v)| *i == 42 && v.foo == 1 && v.bar == 2);\n+    }\n+\n+    fn index_projection() {\n+        let vfoo = vec![[0, 1, 2, 3]];\n+        let _ = vfoo.iter().any(|a| a[0] == 42);\n+    }\n+\n+    #[allow(clippy::match_like_matches_macro)]\n+    fn slice_projection() {\n+        let vfoo = vec![[0, 1, 2, 3, 0, 1, 2, 3]];\n+        let _ = vfoo.iter().any(|sub| sub[1..4].len() == 3);\n+    }\n }"}, {"sha": "98c3e7c1a685bd25e8ef7e8bf79522a565ac6888", "filename": "tests/ui/search_is_some_fixable_some.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/91dd9c46de11b9abeb391d5b19707c5e7ddfef98/tests%2Fui%2Fsearch_is_some_fixable_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91dd9c46de11b9abeb391d5b19707c5e7ddfef98/tests%2Fui%2Fsearch_is_some_fixable_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_some.rs?ref=91dd9c46de11b9abeb391d5b19707c5e7ddfef98", "patch": "@@ -74,4 +74,30 @@ mod issue7392 {\n             .map(|c| c.clone())\n             .collect::<Vec<_>>();\n     }\n+\n+    fn field_projection() {\n+        struct Foo {\n+            foo: i32,\n+            bar: u32,\n+        }\n+        let vfoo = vec![Foo { foo: 1, bar: 2 }];\n+        let _ = vfoo.iter().find(|v| v.foo == 1 && v.bar == 2).is_some();\n+\n+        let vfoo = vec![(42, Foo { foo: 1, bar: 2 })];\n+        let _ = vfoo\n+            .iter()\n+            .find(|(i, v)| *i == 42 && v.foo == 1 && v.bar == 2)\n+            .is_some();\n+    }\n+\n+    fn index_projection() {\n+        let vfoo = vec![[0, 1, 2, 3]];\n+        let _ = vfoo.iter().find(|a| a[0] == 42).is_some();\n+    }\n+\n+    #[allow(clippy::match_like_matches_macro)]\n+    fn slice_projection() {\n+        let vfoo = vec![[0, 1, 2, 3, 0, 1, 2, 3]];\n+        let _ = vfoo.iter().find(|sub| sub[1..4].len() == 3).is_some();\n+    }\n }"}, {"sha": "4161b5eec0a70af6450d05003f4e8b530af251ea", "filename": "tests/ui/search_is_some_fixable_some.stderr", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/91dd9c46de11b9abeb391d5b19707c5e7ddfef98/tests%2Fui%2Fsearch_is_some_fixable_some.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91dd9c46de11b9abeb391d5b19707c5e7ddfef98/tests%2Fui%2Fsearch_is_some_fixable_some.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_some.stderr?ref=91dd9c46de11b9abeb391d5b19707c5e7ddfef98", "patch": "@@ -134,5 +134,31 @@ error: called `is_some()` after searching an `Iterator` with `find`\n LL |             .filter(|(c, _)| filter_hand.iter().find(|cc| c == *cc).is_some())\n    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|cc| c == cc)`\n \n-error: aborting due to 22 previous errors\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_some.rs:84:29\n+   |\n+LL |         let _ = vfoo.iter().find(|v| v.foo == 1 && v.bar == 2).is_some();\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|v| v.foo == 1 && v.bar == 2)`\n+\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_some.rs:89:14\n+   |\n+LL |               .find(|(i, v)| *i == 42 && v.foo == 1 && v.bar == 2)\n+   |  ______________^\n+LL | |             .is_some();\n+   | |______________________^ help: use `any()` instead: `any(|(i, v)| *i == 42 && v.foo == 1 && v.bar == 2)`\n+\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_some.rs:95:29\n+   |\n+LL |         let _ = vfoo.iter().find(|a| a[0] == 42).is_some();\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|a| a[0] == 42)`\n+\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_some.rs:101:29\n+   |\n+LL |         let _ = vfoo.iter().find(|sub| sub[1..4].len() == 3).is_some();\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|sub| sub[1..4].len() == 3)`\n+\n+error: aborting due to 26 previous errors\n "}]}