{"sha": "cc328f6374263f0c4aa9f37b9965e25b25b0515f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMzI4ZjYzNzQyNjNmMGM0YWE5ZjM3Yjk5NjVlMjViMjViMDUxNWY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-23T09:18:50Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-23T09:20:04Z"}, "message": "test passing invalid refs around", "tree": {"sha": "dd3275b59bd2b54918b651503c23005547091942", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd3275b59bd2b54918b651503c23005547091942"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc328f6374263f0c4aa9f37b9965e25b25b0515f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc328f6374263f0c4aa9f37b9965e25b25b0515f", "html_url": "https://github.com/rust-lang/rust/commit/cc328f6374263f0c4aa9f37b9965e25b25b0515f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc328f6374263f0c4aa9f37b9965e25b25b0515f/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cd73e534f3ecc96286c626376a05c1adb48ca64", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cd73e534f3ecc96286c626376a05c1adb48ca64", "html_url": "https://github.com/rust-lang/rust/commit/8cd73e534f3ecc96286c626376a05c1adb48ca64"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "e52b84a907e9d2175a2c7056e3959b809d8bd089", "filename": "tests/compile-fail/stacked_borrows/load_invalid_mut.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cc328f6374263f0c4aa9f37b9965e25b25b0515f/tests%2Fcompile-fail%2Fstacked_borrows%2Fload_invalid_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc328f6374263f0c4aa9f37b9965e25b25b0515f/tests%2Fcompile-fail%2Fstacked_borrows%2Fload_invalid_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fload_invalid_mut.rs?ref=cc328f6374263f0c4aa9f37b9965e25b25b0515f", "patch": "@@ -0,0 +1,9 @@\n+// Make sure that we cannot load from memory a `&mut` that got already invalidated.\n+fn main() {\n+    let x = &mut 42;\n+    let xraw = x as *mut _;\n+    let xref = unsafe { &mut *xraw };\n+    let xref_in_mem = Box::new(xref);\n+    let _val = *x; // invalidate xraw\n+    let _val = *xref_in_mem; //~ ERROR Mut reference with non-reactivatable tag Mut(Uniq\n+}"}, {"sha": "f3de3f0c4ac3797e02896558c8a682df614c4da8", "filename": "tests/compile-fail/stacked_borrows/pass_invalid_mut.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cc328f6374263f0c4aa9f37b9965e25b25b0515f/tests%2Fcompile-fail%2Fstacked_borrows%2Fpass_invalid_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc328f6374263f0c4aa9f37b9965e25b25b0515f/tests%2Fcompile-fail%2Fstacked_borrows%2Fpass_invalid_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fpass_invalid_mut.rs?ref=cc328f6374263f0c4aa9f37b9965e25b25b0515f", "patch": "@@ -0,0 +1,10 @@\n+// Make sure that we cannot pass by argument a `&mut` that got already invalidated.\n+fn foo(_: &mut i32) {}\n+\n+fn main() {\n+    let x = &mut 42;\n+    let xraw = x as *mut _;\n+    let xref = unsafe { &mut *xraw };\n+    let _val = *x; // invalidate xraw\n+    foo(xref); //~ ERROR Mut reference with non-reactivatable tag Mut(Uniq\n+}"}, {"sha": "6a4123d325b410cca4cfc5143f9bfe80fdc95656", "filename": "tests/compile-fail/stacked_borrows/return_invalid_mut.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cc328f6374263f0c4aa9f37b9965e25b25b0515f/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc328f6374263f0c4aa9f37b9965e25b25b0515f/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_mut.rs?ref=cc328f6374263f0c4aa9f37b9965e25b25b0515f", "patch": "@@ -0,0 +1,11 @@\n+// Make sure that we cannot return a `&mut` that got already invalidated.\n+fn foo(x: &mut (i32, i32)) -> &mut i32 {\n+    let xraw = x as *mut (i32, i32);\n+    let ret = unsafe { &mut (*xraw).1 };\n+    let _val = *x; // invalidate xraw and its children\n+    ret //~ ERROR Mut reference with non-reactivatable tag Mut(Uniq\n+}\n+\n+fn main() {\n+    foo(&mut (1, 2));\n+}"}]}