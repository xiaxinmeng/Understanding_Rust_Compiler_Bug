{"sha": "f285876b435e29e309659197790b82ad880650a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyODU4NzZiNDM1ZTI5ZTMwOTY1OTE5Nzc5MGI4MmFkODgwNjUwYTA=", "commit": {"author": {"name": "Kyle Simpson", "email": "kyleandrew.simpson@gmail.com", "date": "2018-08-10T09:32:52Z"}, "committer": {"name": "Kyle Simpson", "email": "kyleandrew.simpson@gmail.com", "date": "2018-08-10T09:32:52Z"}, "message": "Logging for rustc_privacy.", "tree": {"sha": "c765ff33d570e6aa94f39de1aa317e84fe8fe203", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c765ff33d570e6aa94f39de1aa317e84fe8fe203"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f285876b435e29e309659197790b82ad880650a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f285876b435e29e309659197790b82ad880650a0", "html_url": "https://github.com/rust-lang/rust/commit/f285876b435e29e309659197790b82ad880650a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f285876b435e29e309659197790b82ad880650a0/comments", "author": {"login": "FelixMcFelix", "id": 6815381, "node_id": "MDQ6VXNlcjY4MTUzODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6815381?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FelixMcFelix", "html_url": "https://github.com/FelixMcFelix", "followers_url": "https://api.github.com/users/FelixMcFelix/followers", "following_url": "https://api.github.com/users/FelixMcFelix/following{/other_user}", "gists_url": "https://api.github.com/users/FelixMcFelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/FelixMcFelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FelixMcFelix/subscriptions", "organizations_url": "https://api.github.com/users/FelixMcFelix/orgs", "repos_url": "https://api.github.com/users/FelixMcFelix/repos", "events_url": "https://api.github.com/users/FelixMcFelix/events{/privacy}", "received_events_url": "https://api.github.com/users/FelixMcFelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FelixMcFelix", "id": 6815381, "node_id": "MDQ6VXNlcjY4MTUzODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6815381?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FelixMcFelix", "html_url": "https://github.com/FelixMcFelix", "followers_url": "https://api.github.com/users/FelixMcFelix/followers", "following_url": "https://api.github.com/users/FelixMcFelix/following{/other_user}", "gists_url": "https://api.github.com/users/FelixMcFelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/FelixMcFelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FelixMcFelix/subscriptions", "organizations_url": "https://api.github.com/users/FelixMcFelix/orgs", "repos_url": "https://api.github.com/users/FelixMcFelix/repos", "events_url": "https://api.github.com/users/FelixMcFelix/events{/privacy}", "received_events_url": "https://api.github.com/users/FelixMcFelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0603a731f40015849e82d4f00c90899bb01898ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/0603a731f40015849e82d4f00c90899bb01898ec", "html_url": "https://github.com/rust-lang/rust/commit/0603a731f40015849e82d4f00c90899bb01898ec"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "b7af9ec809e5448a0cd4bead8b3f49fd0e6cf7a0", "filename": "src/librustc_privacy/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f285876b435e29e309659197790b82ad880650a0/src%2Flibrustc_privacy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f285876b435e29e309659197790b82ad880650a0/src%2Flibrustc_privacy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2FCargo.toml?ref=f285876b435e29e309659197790b82ad880650a0", "patch": "@@ -9,6 +9,7 @@ path = \"lib.rs\"\n crate-type = [\"dylib\"]\n \n [dependencies]\n+log = { version = \"0.4\", features = [\"release_max_level_info\", \"std\"] }\n rustc = { path = \"../librustc\" }\n rustc_typeck = { path = \"../librustc_typeck\" }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "d2b6d0bb967cf939970794b7d53d70754d3e0636", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f285876b435e29e309659197790b82ad880650a0/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f285876b435e29e309659197790b82ad880650a0/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=f285876b435e29e309659197790b82ad880650a0", "patch": "@@ -18,6 +18,7 @@\n \n #![recursion_limit=\"256\"]\n \n+#[macro_use] extern crate log;\n #[macro_use] extern crate rustc;\n #[macro_use] extern crate syntax;\n extern crate rustc_typeck;\n@@ -147,6 +148,7 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n+        debug!(\"Walked item {:?}\", item);\n         let inherited_item_level = match item.node {\n             // Impls inherit level from their types and traits\n             hir::ItemKind::Impl(..) => {\n@@ -164,13 +166,18 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n             hir::ItemKind::Trait(..) | hir::ItemKind::TraitAlias(..) |\n             hir::ItemKind::Existential(..) |\n             hir::ItemKind::Ty(..) | hir::ItemKind::Union(..) | hir::ItemKind::Use(..) => {\n+                if let hir::ItemKind::Fn(ref _decl, ref _header, ref _generics, ref _body) = item.node {\n+                    debug!(\"Walked function\");\n+                }\n                 if item.vis.node.is_pub() { self.prev_level } else { None }\n             }\n         };\n \n         // Update level of the item itself\n         let item_level = self.update(item.id, inherited_item_level);\n \n+        debug!(\"believed to be: {:?}\", item_level);\n+\n         // Update levels of nested things\n         match item.node {\n             hir::ItemKind::Enum(ref def, _) => {\n@@ -1737,6 +1744,8 @@ fn privacy_access_levels<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n     visitor.update(ast::CRATE_NODE_ID, Some(AccessLevel::Public));\n \n+    debug!(\"access levels after embargo: {:?}\", &visitor.access_levels);\n+\n     {\n         let mut visitor = ObsoleteVisiblePrivateTypesVisitor {\n             tcx,\n@@ -1766,6 +1775,8 @@ fn privacy_access_levels<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         krate.visit_all_item_likes(&mut DeepVisitor::new(&mut visitor));\n     }\n \n+    debug!(\"final access levels: {:?}\", &visitor.access_levels);\n+\n     Lrc::new(visitor.access_levels)\n }\n "}]}