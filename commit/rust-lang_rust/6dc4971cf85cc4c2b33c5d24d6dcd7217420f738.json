{"sha": "6dc4971cf85cc4c2b33c5d24d6dcd7217420f738", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkYzQ5NzFjZjg1Y2M0YzJiMzNjNWQyNGQ2ZGNkNzIxNzQyMGY3Mzg=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-05-15T12:27:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-15T12:27:01Z"}, "message": "Rollup merge of #50691 - ollie27:rustdoc_pub_restricted, r=QuietMisdreavus\n\nrustdoc: Add support for pub(restricted)\n\nThis is useful when using `--document-private-items`.\n\nr? @QuietMisdreavus", "tree": {"sha": "25250201f568831066cd9c480d92eb6e0a4849a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25250201f568831066cd9c480d92eb6e0a4849a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6dc4971cf85cc4c2b33c5d24d6dcd7217420f738", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa+tIVCRBK7hj4Ov3rIwAAdHIIAEMo4b1O2pzDu3Sehzb4KgVq\n+4d9N5LVQijb+m6ay3O44bwq2uiQqxGDSnQxL/eRatUCCH+KSV3WRz2q8RWF0qee\nRzRY40r/EExogwa8o0JKfgJIpM1nAknR30qS7Mn0fpX9/0y31t0E4q+oDqflpYq8\nQSzAx0P6E059E2aaYEWPepGtM5Nx80+clFWMHPypNibDUdvZPPdVvaFrj3UIOhaV\nF6U+lavUTWFoTLH596iA3Ljh1XAC7/6nXRe01fezeQkfV4HOdXX6On0M35AxVFAv\nIjp2l8zE76wkG7iANAkZcxZmoMvrMaHhlr3iq3yqaDT5IX8AAoHnPj/ju18snA0=\n=Hn6u\n-----END PGP SIGNATURE-----\n", "payload": "tree 25250201f568831066cd9c480d92eb6e0a4849a1\nparent eb83606b86c5fbc753a1788590f65222ace4ddb6\nparent 3daded02facb956919c304ac46af7d69145ab8d2\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1526387221 +0200\ncommitter GitHub <noreply@github.com> 1526387221 +0200\n\nRollup merge of #50691 - ollie27:rustdoc_pub_restricted, r=QuietMisdreavus\n\nrustdoc: Add support for pub(restricted)\n\nThis is useful when using `--document-private-items`.\n\nr? @QuietMisdreavus\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6dc4971cf85cc4c2b33c5d24d6dcd7217420f738", "html_url": "https://github.com/rust-lang/rust/commit/6dc4971cf85cc4c2b33c5d24d6dcd7217420f738", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6dc4971cf85cc4c2b33c5d24d6dcd7217420f738/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb83606b86c5fbc753a1788590f65222ace4ddb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb83606b86c5fbc753a1788590f65222ace4ddb6", "html_url": "https://github.com/rust-lang/rust/commit/eb83606b86c5fbc753a1788590f65222ace4ddb6"}, {"sha": "3daded02facb956919c304ac46af7d69145ab8d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3daded02facb956919c304ac46af7d69145ab8d2", "html_url": "https://github.com/rust-lang/rust/commit/3daded02facb956919c304ac46af7d69145ab8d2"}], "stats": {"total": 76, "additions": 71, "deletions": 5}, "files": [{"sha": "386e6ca5c773c733bef4562c5af532a837dd9619", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6dc4971cf85cc4c2b33c5d24d6dcd7217420f738/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dc4971cf85cc4c2b33c5d24d6dcd7217420f738/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6dc4971cf85cc4c2b33c5d24d6dcd7217420f738", "patch": "@@ -17,7 +17,7 @@ pub use self::ItemEnum::*;\n pub use self::TyParamBound::*;\n pub use self::SelfTy::*;\n pub use self::FunctionRetTy::*;\n-pub use self::Visibility::*;\n+pub use self::Visibility::{Public, Inherited};\n \n use syntax;\n use rustc_target::spec::abi::Abi;\n@@ -2973,11 +2973,22 @@ impl<'tcx> Clean<Item> for ty::FieldDef {\n pub enum Visibility {\n     Public,\n     Inherited,\n+    Crate,\n+    Restricted(DefId, Path),\n }\n \n impl Clean<Option<Visibility>> for hir::Visibility {\n-    fn clean(&self, _: &DocContext) -> Option<Visibility> {\n-        Some(if *self == hir::Visibility::Public { Public } else { Inherited })\n+    fn clean(&self, cx: &DocContext) -> Option<Visibility> {\n+        Some(match *self {\n+            hir::Visibility::Public => Visibility::Public,\n+            hir::Visibility::Inherited => Visibility::Inherited,\n+            hir::Visibility::Crate => Visibility::Crate,\n+            hir::Visibility::Restricted { ref path, .. } => {\n+                let path = path.clean(cx);\n+                let did = register_def(cx, path.def);\n+                Visibility::Restricted(did, path)\n+            }\n+        })\n     }\n }\n "}, {"sha": "2db57c97dd4667b33c6fd9bcf9acbfe2c518d4de", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6dc4971cf85cc4c2b33c5d24d6dcd7217420f738/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dc4971cf85cc4c2b33c5d24d6dcd7217420f738/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=6dc4971cf85cc4c2b33c5d24d6dcd7217420f738", "patch": "@@ -927,8 +927,19 @@ impl<'a> fmt::Display for Method<'a> {\n impl<'a> fmt::Display for VisSpace<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self.get() {\n-            Some(clean::Public) => write!(f, \"pub \"),\n-            Some(clean::Inherited) | None => Ok(())\n+            Some(clean::Public) => f.write_str(\"pub \"),\n+            Some(clean::Inherited) | None => Ok(()),\n+            Some(clean::Visibility::Crate) => write!(f, \"pub(crate) \"),\n+            Some(clean::Visibility::Restricted(did, ref path)) => {\n+                f.write_str(\"pub(\")?;\n+                if path.segments.len() != 1\n+                    || (path.segments[0].name != \"self\" && path.segments[0].name != \"super\")\n+                {\n+                    f.write_str(\"in \")?;\n+                }\n+                resolved_path(f, did, path, true, false)?;\n+                f.write_str(\") \")\n+            }\n         }\n     }\n }"}, {"sha": "cc8f628cad44bc435f5ee46af58ab939adec8ec6", "filename": "src/test/rustdoc/pub-restricted.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6dc4971cf85cc4c2b33c5d24d6dcd7217420f738/src%2Ftest%2Frustdoc%2Fpub-restricted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dc4971cf85cc4c2b33c5d24d6dcd7217420f738/src%2Ftest%2Frustdoc%2Fpub-restricted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fpub-restricted.rs?ref=6dc4971cf85cc4c2b33c5d24d6dcd7217420f738", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+\n+// compile-flags: --document-private-items\n+\n+#![feature(crate_visibility_modifier)]\n+\n+#![crate_name = \"foo\"]\n+\n+// @has 'foo/struct.FooPublic.html' '//pre' 'pub struct FooPublic'\n+pub struct FooPublic;\n+// @has 'foo/struct.FooJustCrate.html' '//pre' 'pub(crate) struct FooJustCrate'\n+crate struct FooJustCrate;\n+// @has 'foo/struct.FooPubCrate.html' '//pre' 'pub(crate) struct FooPubCrate'\n+pub(crate) struct FooPubCrate;\n+// @has 'foo/struct.FooSelf.html' '//pre' 'pub(self) struct FooSelf'\n+pub(self) struct FooSelf;\n+// @has 'foo/struct.FooInSelf.html' '//pre' 'pub(self) struct FooInSelf'\n+pub(in self) struct FooInSelf;\n+mod a {\n+    // @has 'foo/a/struct.FooSuper.html' '//pre' 'pub(super) struct FooSuper'\n+    pub(super) struct FooSuper;\n+    // @has 'foo/a/struct.FooInSuper.html' '//pre' 'pub(super) struct FooInSuper'\n+    pub(in super) struct FooInSuper;\n+    // @has 'foo/a/struct.FooInA.html' '//pre' 'pub(in a) struct FooInA'\n+    pub(in a) struct FooInA;\n+    mod b {\n+        // @has 'foo/a/b/struct.FooInSelfSuperB.html' '//pre' 'pub(in self::super::b) struct FooInSelfSuperB'\n+        pub(in self::super::b) struct FooInSelfSuperB;\n+        // @has 'foo/a/b/struct.FooInSuperSuper.html' '//pre' 'pub(in super::super) struct FooInSuperSuper'\n+        pub(in super::super) struct FooInSuperSuper;\n+        // @has 'foo/a/b/struct.FooInAB.html' '//pre' 'pub(in a::b) struct FooInAB'\n+        pub(in a::b) struct FooInAB;\n+    }\n+}"}]}