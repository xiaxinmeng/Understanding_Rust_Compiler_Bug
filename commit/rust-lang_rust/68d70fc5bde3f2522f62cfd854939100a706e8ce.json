{"sha": "68d70fc5bde3f2522f62cfd854939100a706e8ce", "node_id": "C_kwDOAAsO6NoAKDY4ZDcwZmM1YmRlM2YyNTIyZjYyY2ZkODU0OTM5MTAwYTcwNmU4Y2U", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-06-27T16:46:16Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-04T12:35:20Z"}, "message": "only use `FnCtxt` for regionck inside of bodies", "tree": {"sha": "38479ab98cf1c4cd3d47207d90c99c3dbbd15e51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38479ab98cf1c4cd3d47207d90c99c3dbbd15e51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68d70fc5bde3f2522f62cfd854939100a706e8ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68d70fc5bde3f2522f62cfd854939100a706e8ce", "html_url": "https://github.com/rust-lang/rust/commit/68d70fc5bde3f2522f62cfd854939100a706e8ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68d70fc5bde3f2522f62cfd854939100a706e8ce/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edd45f9d412b8dadd70d2fd6b85c78aefa240a97", "url": "https://api.github.com/repos/rust-lang/rust/commits/edd45f9d412b8dadd70d2fd6b85c78aefa240a97", "html_url": "https://github.com/rust-lang/rust/commit/edd45f9d412b8dadd70d2fd6b85c78aefa240a97"}], "stats": {"total": 108, "additions": 54, "deletions": 54}, "files": [{"sha": "15882a471a47729ed2841f77ecc105c1a61b5712", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/68d70fc5bde3f2522f62cfd854939100a706e8ce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d70fc5bde3f2522f62cfd854939100a706e8ce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=68d70fc5bde3f2522f62cfd854939100a706e8ce", "patch": "@@ -69,6 +69,7 @@ use crate::traits::{ObligationCause, ObligationCauseCode};\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, Region, Ty, TyCtxt, TypeFoldable};\n \n+use crate::infer::outlives::env::OutlivesEnvironment;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::undo_log::UndoLogs;\n use rustc_hir as hir;\n@@ -177,6 +178,18 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n             }\n         }\n     }\n+\n+    pub fn check_region_obligations_and_report_errors(\n+        &self,\n+        outlives_env: &OutlivesEnvironment<'tcx>,\n+    ) {\n+        self.process_registered_region_obligations(\n+            outlives_env.region_bound_pairs_map(),\n+            outlives_env.param_env,\n+        );\n+\n+        self.resolve_regions_and_report_errors(outlives_env)\n+    }\n }\n \n /// The `TypeOutlives` struct has the job of \"lowering\" a `T: 'a`"}, {"sha": "fab4bb0d934bcbcc98b3b79d80b326325a440512", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68d70fc5bde3f2522f62cfd854939100a706e8ce/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d70fc5bde3f2522f62cfd854939100a706e8ce/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=68d70fc5bde3f2522f62cfd854939100a706e8ce", "patch": "@@ -13,6 +13,7 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{ItemKind, Node, PathSegment};\n+use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::{RegionVariableOrigin, TyCtxtInferExt};\n use rustc_infer::traits::Obligation;\n@@ -736,10 +737,9 @@ fn check_opaque_meets_bounds<'tcx>(\n             hir::OpaqueTyOrigin::FnReturn(..) | hir::OpaqueTyOrigin::AsyncFn(..) => {}\n             // Can have different predicates to their defining use\n             hir::OpaqueTyOrigin::TyAlias => {\n-                // Finally, resolve all regions. This catches wily misuses of\n-                // lifetime parameters.\n-                let fcx = FnCtxt::new(&inh, param_env, hir_id);\n-                fcx.regionck_item(hir_id, span, FxHashSet::default());\n+                let mut outlives_environment = OutlivesEnvironment::new(param_env);\n+                outlives_environment.save_implied_bounds(hir_id);\n+                infcx.check_region_obligations_and_report_errors(&outlives_environment);\n             }\n         }\n "}, {"sha": "e233c026a39b25de02e816006bb3ea87cd1919e9", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/68d70fc5bde3f2522f62cfd854939100a706e8ce/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d70fc5bde3f2522f62cfd854939100a706e8ce/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=68d70fc5bde3f2522f62cfd854939100a706e8ce", "patch": "@@ -1,10 +1,12 @@\n+use crate::check::regionck::OutlivesEnvironmentExt;\n use crate::errors::LifetimesOrBoundsMismatchOnTrait;\n use rustc_data_structures::stable_set::FxHashSet;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticId, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::intravisit;\n use rustc_hir::{GenericParamKind, ImplItemKind, TraitItemKind};\n+use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n use rustc_infer::infer::{self, InferOk, TyCtxtInferExt};\n use rustc_infer::traits::util;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n@@ -78,10 +80,11 @@ fn compare_predicate_entailment<'tcx>(\n     let trait_to_impl_substs = impl_trait_ref.substs;\n \n     // This node-id should be used for the `body_id` field on each\n-    // `ObligationCause` (and the `FnCtxt`). This is what\n-    // `regionck_item` expects.\n+    // `ObligationCause` (and the `FnCtxt`).\n+    //\n+    // FIXME(@lcnr): remove that after removing `cause.body_id` from\n+    // obligations.\n     let impl_m_hir_id = tcx.hir().local_def_id_to_hir_id(impl_m.def_id.expect_local());\n-\n     // We sometimes modify the span further down.\n     let mut cause = ObligationCause::new(\n         impl_m_span,\n@@ -398,8 +401,10 @@ fn compare_predicate_entailment<'tcx>(\n \n         // Finally, resolve all regions. This catches wily misuses of\n         // lifetime parameters.\n-        let fcx = FnCtxt::new(&inh, param_env, impl_m_hir_id);\n-        fcx.regionck_item(impl_m_hir_id, impl_m_span, wf_tys);\n+        let mut outlives_environment = OutlivesEnvironment::new(param_env);\n+        outlives_environment.add_implied_bounds(infcx, wf_tys, impl_m_hir_id);\n+        outlives_environment.save_implied_bounds(impl_m_hir_id);\n+        infcx.check_region_obligations_and_report_errors(&outlives_environment);\n \n         Ok(())\n     })\n@@ -1154,8 +1159,9 @@ pub(crate) fn compare_const_impl<'tcx>(\n             return;\n         }\n \n-        let fcx = FnCtxt::new(&inh, param_env, impl_c_hir_id);\n-        fcx.regionck_item(impl_c_hir_id, impl_c_span, FxHashSet::default());\n+        let mut outlives_environment = OutlivesEnvironment::new(param_env);\n+        outlives_environment.save_implied_bounds(impl_c_hir_id);\n+        infcx.resolve_regions_and_report_errors(&outlives_environment);\n     });\n }\n \n@@ -1273,8 +1279,9 @@ fn compare_type_predicate_entailment<'tcx>(\n \n         // Finally, resolve all regions. This catches wily misuses of\n         // lifetime parameters.\n-        let fcx = FnCtxt::new(&inh, param_env, impl_ty_hir_id);\n-        fcx.regionck_item(impl_ty_hir_id, impl_ty_span, FxHashSet::default());\n+        let mut outlives_environment = OutlivesEnvironment::new(param_env);\n+        outlives_environment.save_implied_bounds(impl_ty_hir_id);\n+        infcx.check_region_obligations_and_report_errors(&outlives_environment);\n \n         Ok(())\n     })\n@@ -1498,12 +1505,17 @@ pub fn check_type_bounds<'tcx>(\n \n         // Finally, resolve all regions. This catches wily misuses of\n         // lifetime parameters.\n+        //\n+        // FIXME: Remove that `FnCtxt`.\n         let fcx = FnCtxt::new(&inh, param_env, impl_ty_hir_id);\n         let implied_bounds = match impl_ty.container {\n             ty::TraitContainer(_) => FxHashSet::default(),\n             ty::ImplContainer(def_id) => fcx.impl_implied_bounds(def_id, impl_ty_span),\n         };\n-        fcx.regionck_item(impl_ty_hir_id, impl_ty_span, implied_bounds);\n+        let mut outlives_environment = OutlivesEnvironment::new(param_env);\n+        outlives_environment.add_implied_bounds(infcx, implied_bounds, impl_ty_hir_id);\n+        outlives_environment.save_implied_bounds(impl_ty_hir_id);\n+        infcx.check_region_obligations_and_report_errors(&outlives_environment);\n \n         Ok(())\n     })"}, {"sha": "b812085734dc694fa9dd9b3f6b93212e42a5a16d", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68d70fc5bde3f2522f62cfd854939100a706e8ce/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d70fc5bde3f2522f62cfd854939100a706e8ce/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=68d70fc5bde3f2522f62cfd854939100a706e8ce", "patch": "@@ -491,7 +491,7 @@ fn typeck_with_fallback<'tcx>(\n         fcx.check_asms();\n \n         if fn_sig.is_some() {\n-            fcx.regionck_fn(id, body, span, wf_tys);\n+            fcx.regionck_fn(id, body, wf_tys);\n         } else {\n             fcx.regionck_body(body);\n         }"}, {"sha": "bf30ba2278c7443052fc5d0abba9af768d52488b", "filename": "compiler/rustc_typeck/src/check/regionck.rs", "status": "modified", "additions": 6, "deletions": 31, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/68d70fc5bde3f2522f62cfd854939100a706e8ce/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d70fc5bde3f2522f62cfd854939100a706e8ce/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs?ref=68d70fc5bde3f2522f62cfd854939100a706e8ce", "patch": "@@ -108,7 +108,6 @@ pub(crate) trait OutlivesEnvironmentExt<'tcx> {\n         infcx: &InferCtxt<'_, 'tcx>,\n         fn_sig_tys: FxHashSet<Ty<'tcx>>,\n         body_id: hir::HirId,\n-        span: Span,\n     );\n }\n \n@@ -135,11 +134,10 @@ impl<'tcx> OutlivesEnvironmentExt<'tcx> for OutlivesEnvironment<'tcx> {\n         infcx: &InferCtxt<'a, 'tcx>,\n         fn_sig_tys: FxHashSet<Ty<'tcx>>,\n         body_id: hir::HirId,\n-        span: Span,\n     ) {\n         for ty in fn_sig_tys {\n             let ty = infcx.resolve_vars_if_possible(ty);\n-            let implied_bounds = infcx.implied_outlives_bounds(self.param_env, body_id, ty, span);\n+            let implied_bounds = infcx.implied_outlives_bounds(self.param_env, body_id, ty);\n             self.add_outlives_bounds(Some(infcx), implied_bounds)\n         }\n     }\n@@ -166,18 +164,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         rcx.fcx.skip_region_resolution();\n     }\n \n-    /// Region checking during the WF phase for items. `wf_tys` are the\n-    /// types from which we should derive implied bounds, if any.\n-    #[instrument(level = \"debug\", skip(self))]\n-    pub fn regionck_item(&self, item_id: hir::HirId, span: Span, wf_tys: FxHashSet<Ty<'tcx>>) {\n-        let body_owner = self.tcx.hir().local_def_id(item_id);\n-        let mut rcx = RegionCtxt::new(self, body_owner, self.param_env);\n-        rcx.outlives_environment.add_implied_bounds(self, wf_tys, item_id, span);\n-        rcx.outlives_environment.save_implied_bounds(rcx.body_id());\n-        rcx.visit_region_obligations(item_id);\n-        rcx.resolve_regions_and_report_errors();\n-    }\n-\n     /// Region check a function body. Not invoked on closures, but\n     /// only on the \"root\" fn item (in which closures may be\n     /// embedded). Walks the function body and adds various add'l\n@@ -190,19 +176,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         fn_id: hir::HirId,\n         body: &'tcx hir::Body<'tcx>,\n-        span: Span,\n         wf_tys: FxHashSet<Ty<'tcx>>,\n     ) {\n         debug!(\"regionck_fn(id={})\", fn_id);\n         let body_owner = self.tcx.hir().body_owner_def_id(body.id());\n         let mut rcx = RegionCtxt::new(self, body_owner, self.param_env);\n         // We need to add the implied bounds from the function signature\n-        rcx.outlives_environment.add_implied_bounds(self, wf_tys, fn_id, span);\n+        rcx.outlives_environment.add_implied_bounds(self, wf_tys, fn_id);\n         rcx.outlives_environment.save_implied_bounds(fn_id);\n \n         if !self.errors_reported_since_creation() {\n             // regionck assumes typeck succeeded\n-            rcx.visit_fn_body(fn_id, body, self.tcx.hir().span(fn_id));\n+            rcx.visit_fn_body(fn_id, body);\n         }\n \n         // Checked by NLL\n@@ -294,7 +279,6 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n         &mut self,\n         id: hir::HirId, // the id of the fn itself\n         body: &'tcx hir::Body<'tcx>,\n-        span: Span,\n     ) {\n         // When we enter a function, we can derive\n         debug!(\"visit_fn_body(id={:?})\", id);\n@@ -313,7 +297,7 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n         let fn_sig_tys: FxHashSet<_> =\n             fn_sig.inputs().iter().cloned().chain(Some(fn_sig.output())).collect();\n \n-        self.outlives_environment.add_implied_bounds(self.fcx, fn_sig_tys, body_id.hir_id, span);\n+        self.outlives_environment.add_implied_bounds(self.fcx, fn_sig_tys, body_id.hir_id);\n         self.outlives_environment.save_implied_bounds(body_id.hir_id);\n         self.link_fn_params(body.params);\n         self.visit_body(body);\n@@ -349,15 +333,6 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n         self.select_all_obligations_or_error();\n     }\n \n-    fn resolve_regions_and_report_errors(&self) {\n-        self.infcx.process_registered_region_obligations(\n-            self.outlives_environment.region_bound_pairs_map(),\n-            self.param_env,\n-        );\n-\n-        self.fcx.resolve_regions_and_report_errors(&self.outlives_environment);\n-    }\n-\n     fn constrain_bindings_in_pat(&mut self, pat: &hir::Pat<'_>) {\n         debug!(\"regionck::visit_pat(pat={:?})\", pat);\n         pat.each_binding(|_, hir_id, span, _| {\n@@ -382,7 +357,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RegionCtxt<'a, 'tcx> {\n         fk: intravisit::FnKind<'tcx>,\n         _: &'tcx hir::FnDecl<'tcx>,\n         body_id: hir::BodyId,\n-        span: Span,\n+        _span: Span,\n         hir_id: hir::HirId,\n     ) {\n         assert!(\n@@ -396,7 +371,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RegionCtxt<'a, 'tcx> {\n         let env_snapshot = self.outlives_environment.push_snapshot_pre_typeck_child();\n \n         let body = self.tcx.hir().body(body_id);\n-        self.visit_fn_body(hir_id, body, span);\n+        self.visit_fn_body(hir_id, body);\n \n         // Restore state from previous function.\n         self.outlives_environment.pop_snapshot_post_typeck_child(env_snapshot);"}, {"sha": "9240d9e06b9c35265d361869c597dae23d675c4b", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68d70fc5bde3f2522f62cfd854939100a706e8ce/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d70fc5bde3f2522f62cfd854939100a706e8ce/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=68d70fc5bde3f2522f62cfd854939100a706e8ce", "patch": "@@ -62,7 +62,11 @@ impl<'tcx> CheckWfFcxBuilder<'tcx> {\n             }\n             let wf_tys = f(&fcx);\n             fcx.select_all_obligations_or_error();\n-            fcx.regionck_item(id, span, wf_tys);\n+\n+            let mut outlives_environment = OutlivesEnvironment::new(param_env);\n+            outlives_environment.add_implied_bounds(&fcx.infcx, wf_tys, id);\n+            outlives_environment.save_implied_bounds(id);\n+            fcx.infcx.check_region_obligations_and_report_errors(&outlives_environment);\n         });\n     }\n }\n@@ -655,7 +659,7 @@ fn resolve_regions_with_wf_tys<'tcx>(\n     // call individually.\n     tcx.infer_ctxt().enter(|infcx| {\n         let mut outlives_environment = OutlivesEnvironment::new(param_env);\n-        outlives_environment.add_implied_bounds(&infcx, wf_tys.clone(), id, DUMMY_SP);\n+        outlives_environment.add_implied_bounds(&infcx, wf_tys.clone(), id);\n         outlives_environment.save_implied_bounds(id);\n         let region_bound_pairs = outlives_environment.region_bound_pairs_map().get(&id).unwrap();\n "}, {"sha": "70b8bcd02208ddd92c91beda2e14cd9fbf90d43b", "filename": "compiler/rustc_typeck/src/outlives/outlives_bounds.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68d70fc5bde3f2522f62cfd854939100a706e8ce/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Foutlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d70fc5bde3f2522f62cfd854939100a706e8ce/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Foutlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Foutlives_bounds.rs?ref=68d70fc5bde3f2522f62cfd854939100a706e8ce", "patch": "@@ -1,6 +1,5 @@\n use rustc_hir as hir;\n use rustc_middle::ty::{self, Ty};\n-use rustc_span::source_map::Span;\n use rustc_trait_selection::infer::InferCtxt;\n use rustc_trait_selection::traits::query::type_op::{self, TypeOp, TypeOpOutput};\n use rustc_trait_selection::traits::query::NoSolution;\n@@ -14,7 +13,6 @@ pub trait InferCtxtExt<'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n         body_id: hir::HirId,\n         ty: Ty<'tcx>,\n-        span: Span,\n     ) -> Vec<OutlivesBound<'tcx>>;\n }\n \n@@ -38,16 +36,14 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n     ///   Note that this may cause outlives obligations to be injected\n     ///   into the inference context with this body-id.\n     /// - `ty`, the type that we are supposed to assume is WF.\n-    /// - `span`, a span to use when normalizing, hopefully not important,\n-    ///   might be useful if a `bug!` occurs.\n-    #[instrument(level = \"debug\", skip(self, param_env, body_id, span))]\n+    #[instrument(level = \"debug\", skip(self, param_env, body_id))]\n     fn implied_outlives_bounds(\n         &self,\n         param_env: ty::ParamEnv<'tcx>,\n         body_id: hir::HirId,\n         ty: Ty<'tcx>,\n-        span: Span,\n     ) -> Vec<OutlivesBound<'tcx>> {\n+        let span = self.tcx.hir().span(body_id);\n         let result = param_env\n             .and(type_op::implied_outlives_bounds::ImpliedOutlivesBounds { ty })\n             .fully_perform(self);"}]}