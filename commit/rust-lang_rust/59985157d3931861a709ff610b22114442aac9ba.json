{"sha": "59985157d3931861a709ff610b22114442aac9ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5OTg1MTU3ZDM5MzE4NjFhNzA5ZmY2MTBiMjIxMTQ0NDJhYWM5YmE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-04-30T11:48:16Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-04-30T11:55:04Z"}, "message": "SharedReadOnly reborrows are never weak", "tree": {"sha": "ee6c74a9ff09ad88ecc9703da95844a8c51a3e35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee6c74a9ff09ad88ecc9703da95844a8c51a3e35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59985157d3931861a709ff610b22114442aac9ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59985157d3931861a709ff610b22114442aac9ba", "html_url": "https://github.com/rust-lang/rust/commit/59985157d3931861a709ff610b22114442aac9ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59985157d3931861a709ff610b22114442aac9ba/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "048ce3cb1cb1e7ef6f95f5850f298ab2fe5fde94", "url": "https://api.github.com/repos/rust-lang/rust/commits/048ce3cb1cb1e7ef6f95f5850f298ab2fe5fde94", "html_url": "https://github.com/rust-lang/rust/commit/048ce3cb1cb1e7ef6f95f5850f298ab2fe5fde94"}], "stats": {"total": 5, "additions": 4, "deletions": 1}, "files": [{"sha": "c2e4c72fb73dc526e10db34395eab0f2cd493340", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/59985157d3931861a709ff610b22114442aac9ba/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59985157d3931861a709ff610b22114442aac9ba/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=59985157d3931861a709ff610b22114442aac9ba", "patch": "@@ -400,6 +400,9 @@ impl<'tcx> Stack {\n         // Either way, we ensure that we insert the new item in a way that between\n         // `derived_from` and the new one, there are only items *compatible with* `derived_from`.\n         let new_idx = if weak {\n+            // A weak ShareadReadOnly reborrow might be added below other items, violating the\n+            // invariant that only SharedReadOnly can sit on top of SharedReadOnly.\n+            assert!(new.perm != Permission::SharedReadOnly, \"Weak ShareadReadOnly reborrows don't work\");\n             // A very liberal reborrow because the new pointer does not expect any kind of aliasing guarantee.\n             // Just insert new permission as child of old permission, and maintain everything else.\n             // This inserts \"as far down as possible\", which is good because it makes this pointer as\n@@ -581,8 +584,8 @@ trait EvalContextPrivExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                 // We need a frozen-sensitive reborrow.\n                 return this.visit_freeze_sensitive(place, size, |cur_ptr, size, frozen| {\n                     // We are only ever `SharedReadOnly` inside the frozen bits.\n-                    let weak = !frozen || kind != RefKind::Shared; // `RefKind::Raw` is always weak, as is `SharedReadWrite`.\n                     let perm = if frozen { Permission::SharedReadOnly } else { Permission::SharedReadWrite };\n+                    let weak = perm == Permission::SharedReadWrite;\n                     let item = Item { perm, tag: new_tag, protector };\n                     alloc.extra.for_each(cur_ptr, size, |stack, global| {\n                         stack.reborrow(cur_ptr.tag, force_weak || weak, item, global)"}]}