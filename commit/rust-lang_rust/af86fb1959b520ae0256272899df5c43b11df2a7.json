{"sha": "af86fb1959b520ae0256272899df5c43b11df2a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmODZmYjE5NTliNTIwYWUwMjU2MjcyODk5ZGY1YzQzYjExZGYyYTc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-08-08T07:36:24Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-08-19T17:50:42Z"}, "message": "distinguish object-lifetime-default elision from other elision\n\nObject-lifetime-default elision is distinct from other forms of\nelision; it always refers to some enclosing lifetime *present in the\nsurrounding type* (e.g., `&dyn Bar` expands to `&'a (dyn Bar + 'a)`.\nIf there is no enclosing lifetime, then it expands to `'static`.\n\nTherefore, in an `impl Trait<Item = dyn Bar>` setting, we don't expand\nto create a lifetime parameter for the `dyn Bar + 'X` bound.  It will\njust be resolved to `'static`.\n\nAnnoyingly, the responsibility for this resolution is spread across\nmultiple bits of code right now (`middle::resolve_lifetimes`,\n`lowering`). The lowering code knows that the default is for an object\nlifetime, but it doesn't know what the correct result would be.\nProbably this should be fixed, but what we do now is a surgical fix:\nwe have it generate a different result for elided lifetimes in a\nobject context, and then we can ignore those results when figuring out\nthe lifetimes that are captured in the opaque type.", "tree": {"sha": "c1a076002aabb33c37bc366694a4dc940addce24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1a076002aabb33c37bc366694a4dc940addce24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af86fb1959b520ae0256272899df5c43b11df2a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af86fb1959b520ae0256272899df5c43b11df2a7", "html_url": "https://github.com/rust-lang/rust/commit/af86fb1959b520ae0256272899df5c43b11df2a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af86fb1959b520ae0256272899df5c43b11df2a7/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b51df1def0e621fd5fd6cb777511d64d490c0363", "url": "https://api.github.com/repos/rust-lang/rust/commits/b51df1def0e621fd5fd6cb777511d64d490c0363", "html_url": "https://github.com/rust-lang/rust/commit/b51df1def0e621fd5fd6cb777511d64d490c0363"}], "stats": {"total": 173, "additions": 163, "deletions": 10}, "files": [{"sha": "fa274f831b7950267332d6440b6c8cc86567ce96", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af86fb1959b520ae0256272899df5c43b11df2a7/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af86fb1959b520ae0256272899df5c43b11df2a7/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=af86fb1959b520ae0256272899df5c43b11df2a7", "patch": "@@ -433,6 +433,7 @@ pub fn walk_lifetime<'v, V: Visitor<'v>>(visitor: &mut V, lifetime: &'v Lifetime\n         LifetimeName::Static |\n         LifetimeName::Error |\n         LifetimeName::Implicit |\n+        LifetimeName::ImplicitObjectLifetimeDefault |\n         LifetimeName::Underscore => {}\n     }\n }"}, {"sha": "e04e45e5fbc92c7bbb19a54cdf39d84a1042f107", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/af86fb1959b520ae0256272899df5c43b11df2a7/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af86fb1959b520ae0256272899df5c43b11df2a7/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=af86fb1959b520ae0256272899df5c43b11df2a7", "patch": "@@ -1560,6 +1560,11 @@ impl<'a> LoweringContext<'a> {\n                         }\n                     }\n                     hir::LifetimeName::Param(_) => lifetime.name,\n+\n+                    // Refers to some other lifetime that is \"in\n+                    // scope\" within the type.\n+                    hir::LifetimeName::ImplicitObjectLifetimeDefault => return,\n+\n                     hir::LifetimeName::Error | hir::LifetimeName::Static => return,\n                 };\n \n@@ -2550,6 +2555,12 @@ impl<'a> LoweringContext<'a> {\n                     hir::LifetimeName::Implicit\n                         | hir::LifetimeName::Underscore\n                         | hir::LifetimeName::Static => hir::ParamName::Plain(lt.name.ident()),\n+                    hir::LifetimeName::ImplicitObjectLifetimeDefault => {\n+                        span_bug!(\n+                            param.ident.span,\n+                            \"object-lifetime-default should not occur here\",\n+                        );\n+                    }\n                     hir::LifetimeName::Error => ParamName::Error,\n                 };\n \n@@ -3293,7 +3304,13 @@ impl<'a> LoweringContext<'a> {\n             AnonymousLifetimeMode::PassThrough => {}\n         }\n \n-        self.new_implicit_lifetime(span)\n+        let r = hir::Lifetime {\n+            hir_id: self.next_id(),\n+            span,\n+            name: hir::LifetimeName::ImplicitObjectLifetimeDefault,\n+        };\n+        debug!(\"elided_dyn_bound: r={:?}\", r);\n+        r\n     }\n \n     fn new_implicit_lifetime(&mut self, span: Span) -> hir::Lifetime {"}, {"sha": "983048188527fd12f9e34aeaaa9050982ac88cc0", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/af86fb1959b520ae0256272899df5c43b11df2a7/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af86fb1959b520ae0256272899df5c43b11df2a7/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=af86fb1959b520ae0256272899df5c43b11df2a7", "patch": "@@ -221,6 +221,19 @@ pub enum LifetimeName {\n     /// User wrote nothing (e.g., the lifetime in `&u32`).\n     Implicit,\n \n+    /// Implicit lifetime in a context like `dyn Foo`. This is\n+    /// distinguished from implicit lifetimes elsewhere because the\n+    /// lifetime that they default to must appear elsewhere within the\n+    /// enclosing type.  This means that, in an `impl Trait` context, we\n+    /// don't have to create a parameter for them. That is, `impl\n+    /// Trait<Item = &u32>` expands to an opaque type like `type\n+    /// Foo<'a> = impl Trait<Item = &'a u32>`, but `impl Trait<item =\n+    /// dyn Bar>` expands to `type Foo = impl Trait<Item = dyn Bar +\n+    /// 'static>`. The latter uses `ImplicitObjectLifetimeDefault` so\n+    /// that surrounding code knows not to create a lifetime\n+    /// parameter.\n+    ImplicitObjectLifetimeDefault,\n+\n     /// Indicates an error during lowering (usually `'_` in wrong place)\n     /// that was already reported.\n     Error,\n@@ -235,7 +248,9 @@ pub enum LifetimeName {\n impl LifetimeName {\n     pub fn ident(&self) -> Ident {\n         match *self {\n-            LifetimeName::Implicit | LifetimeName::Error => Ident::invalid(),\n+            LifetimeName::ImplicitObjectLifetimeDefault\n+                | LifetimeName::Implicit\n+                | LifetimeName::Error => Ident::invalid(),\n             LifetimeName::Underscore => Ident::with_dummy_span(kw::UnderscoreLifetime),\n             LifetimeName::Static => Ident::with_dummy_span(kw::StaticLifetime),\n             LifetimeName::Param(param_name) => param_name.ident(),\n@@ -244,7 +259,9 @@ impl LifetimeName {\n \n     pub fn is_elided(&self) -> bool {\n         match self {\n-            LifetimeName::Implicit | LifetimeName::Underscore => true,\n+            LifetimeName::ImplicitObjectLifetimeDefault\n+            | LifetimeName::Implicit\n+            | LifetimeName::Underscore => true,\n \n             // It might seem surprising that `Fresh(_)` counts as\n             // *not* elided -- but this is because, as far as the code"}, {"sha": "3b604bef78ee26e528410a15f4b3b41d9c942700", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/af86fb1959b520ae0256272899df5c43b11df2a7/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af86fb1959b520ae0256272899df5c43b11df2a7/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=af86fb1959b520ae0256272899df5c43b11df2a7", "patch": "@@ -5,6 +5,8 @@\n //! used between functions, and they operate in a purely top-down\n //! way. Therefore, we break lifetime name resolution into a separate pass.\n \n+// ignore-tidy-filelength\n+\n use crate::hir::def::{Res, DefKind};\n use crate::hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n use crate::hir::map::Map;\n@@ -591,6 +593,14 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 }\n                 match lifetime.name {\n                     LifetimeName::Implicit => {\n+                        // For types like `dyn Foo`, we should\n+                        // generate a special form of elided.\n+                        span_bug!(\n+                            ty.span,\n+                            \"object-lifetime-default expected, not implict\",\n+                        );\n+                    }\n+                    LifetimeName::ImplicitObjectLifetimeDefault => {\n                         // If the user does not write *anything*, we\n                         // use the object lifetime defaulting\n                         // rules. So e.g., `Box<dyn Debug>` becomes\n@@ -2643,6 +2653,13 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                         hir::LifetimeName::Param(_) | hir::LifetimeName::Implicit => {\n                             self.resolve_lifetime_ref(lt);\n                         }\n+                        hir::LifetimeName::ImplicitObjectLifetimeDefault => {\n+                            self.tcx.sess.delay_span_bug(\n+                                lt.span,\n+                                \"lowering generated `ImplicitObjectLifetimeDefault` \\\n+                                 outside of an object type\",\n+                            )\n+                        }\n                         hir::LifetimeName::Error => {\n                             // No need to do anything, error already reported.\n                         }"}, {"sha": "ca68b9e31b6b91337e4fa2b555d7c53f0de24f12", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/af86fb1959b520ae0256272899df5c43b11df2a7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af86fb1959b520ae0256272899df5c43b11df2a7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=af86fb1959b520ae0256272899df5c43b11df2a7", "patch": "@@ -578,7 +578,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 })\n             }\n \n-            hir::LifetimeName::Implicit => {\n+            hir::LifetimeName::ImplicitObjectLifetimeDefault\n+            | hir::LifetimeName::Implicit => {\n                 // In this case, the user left off the lifetime; so\n                 // they wrote something like:\n                 //"}, {"sha": "5955d9751afbbf3afe57767893c046c1eaa2a590", "filename": "src/test/ui/async-await/issues/issue-62517-1.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/af86fb1959b520ae0256272899df5c43b11df2a7/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62517-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af86fb1959b520ae0256272899df5c43b11df2a7/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62517-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62517-1.rs?ref=af86fb1959b520ae0256272899df5c43b11df2a7", "patch": "@@ -0,0 +1,23 @@\n+// Regression test for #62517. We used to ICE when you had an `async\n+// fn` with an `impl Trait` return that mentioned a `dyn Bar` with no\n+// explicit lifetime bound.\n+//\n+// edition:2018\n+// check-pass\n+\n+#![feature(async_await)]\n+\n+trait FirstTrait {}\n+trait SecondTrait {\n+    type Item: ?Sized;\n+}\n+\n+async fn foo(x: &str) -> impl SecondTrait<Item = dyn FirstTrait> {\n+}\n+\n+\n+impl<T> SecondTrait for T {\n+    type Item = dyn FirstTrait;\n+}\n+\n+fn main() { }"}, {"sha": "72dae58e51641d6521569ea1a83ef1c09abe6224", "filename": "src/test/ui/async-await/issues/issue-62517-2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/af86fb1959b520ae0256272899df5c43b11df2a7/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62517-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af86fb1959b520ae0256272899df5c43b11df2a7/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62517-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62517-2.rs?ref=af86fb1959b520ae0256272899df5c43b11df2a7", "patch": "@@ -0,0 +1,16 @@\n+// Regression test for #62517. We used to ICE when you had an `async\n+// fn` with an `impl Trait` return that mentioned a `dyn Bar` with no\n+// explicit lifetime bound.\n+//\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+trait Object {}\n+\n+trait Alpha<Param> {}\n+\n+async fn foo<'a>(_: &'a ()) -> impl Alpha<dyn Object> {}\n+//~^ ERROR not satisfied\n+\n+fn main() { }"}, {"sha": "4f9b3047bfe18a7ceca7b9d54d2ed7a099d7a374", "filename": "src/test/ui/async-await/issues/issue-62517-2.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/af86fb1959b520ae0256272899df5c43b11df2a7/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62517-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af86fb1959b520ae0256272899df5c43b11df2a7/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62517-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62517-2.stderr?ref=af86fb1959b520ae0256272899df5c43b11df2a7", "patch": "@@ -0,0 +1,11 @@\n+error[E0277]: the trait bound `(): Alpha<(dyn Object + 'static)>` is not satisfied\n+  --> $DIR/issue-62517-2.rs:13:32\n+   |\n+LL | async fn foo<'a>(_: &'a ()) -> impl Alpha<dyn Object> {}\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^ the trait `Alpha<(dyn Object + 'static)>` is not implemented for `()`\n+   |\n+   = note: the return type of a function must have a statically known size\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "3b7141573847f6fe39c554ef505553b6f824d488", "filename": "src/test/ui/impl-trait/dyn-trait-elided-two-inputs-assoc.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/af86fb1959b520ae0256272899df5c43b11df2a7/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-elided-two-inputs-assoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af86fb1959b520ae0256272899df5c43b11df2a7/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-elided-two-inputs-assoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-elided-two-inputs-assoc.rs?ref=af86fb1959b520ae0256272899df5c43b11df2a7", "patch": "@@ -0,0 +1,16 @@\n+// Test that we don't get an error with `dyn Bar` in an impl Trait\n+// when there are multiple inputs.  The `dyn Bar` should default to `+\n+// 'static`. This used to erroneously generate an error (cc #62517).\n+//\n+// check-pass\n+\n+trait Foo { type Item: ?Sized; }\n+trait Bar { }\n+\n+impl<T> Foo for T {\n+    type Item = dyn Bar;\n+}\n+\n+fn foo(x: &str, y: &str) -> impl Foo<Item = dyn Bar> { () }\n+\n+fn main() { }"}, {"sha": "e8da52aad0eac01b8a9ddfb16875dcdb3d3b77e3", "filename": "src/test/ui/impl-trait/dyn-trait-elided-two-inputs-param.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/af86fb1959b520ae0256272899df5c43b11df2a7/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-elided-two-inputs-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af86fb1959b520ae0256272899df5c43b11df2a7/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-elided-two-inputs-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-elided-two-inputs-param.rs?ref=af86fb1959b520ae0256272899df5c43b11df2a7", "patch": "@@ -0,0 +1,11 @@\n+// Test that we don't get an error with `dyn Object` in an impl Trait\n+// when there are multiple inputs.  The `dyn Object` should default to `+\n+// 'static`. This used to erroneously generate an error (cc #62517).\n+//\n+// check-pass\n+\n+trait Alpha<Item: ?Sized> {}\n+trait Object {}\n+impl<T> Alpha<dyn Object> for T {}\n+fn alpha(x: &str, y: &str) -> impl Alpha<dyn Object> { () }\n+fn main() { }"}, {"sha": "8d34c1b6c2af7a90bcddd6ba5c29384fd7193e6a", "filename": "src/test/ui/impl-trait/dyn-trait-elided-two-inputs-ref-param.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/af86fb1959b520ae0256272899df5c43b11df2a7/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-elided-two-inputs-ref-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af86fb1959b520ae0256272899df5c43b11df2a7/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-elided-two-inputs-ref-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-elided-two-inputs-ref-param.rs?ref=af86fb1959b520ae0256272899df5c43b11df2a7", "patch": "@@ -0,0 +1,23 @@\n+// Test that `impl Alpha<dyn Object>` resets the object-lifetime\n+// default to `'static`.\n+//\n+// check-pass\n+\n+trait Alpha<Item: ?Sized> {\n+    fn item(&self) -> Box<Item> {\n+        panic!()\n+    }\n+}\n+\n+trait Object {}\n+impl<T> Alpha<dyn Object> for T {}\n+fn alpha(x: &str, y: &str) -> impl Alpha<dyn Object> { () }\n+fn is_static<T>(_: T) where T: 'static { }\n+\n+fn bar(x: &str) -> &impl Alpha<dyn Object> { &() }\n+\n+fn main() {\n+    let s = format!(\"foo\");\n+    let r = bar(&s);\n+    is_static(r.item());\n+}"}, {"sha": "ea0d0ccbc553270c9fc290f10065a3080571377d", "filename": "src/test/ui/lifetimes/lifetime-elision-return-type-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af86fb1959b520ae0256272899df5c43b11df2a7/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af86fb1959b520ae0256272899df5c43b11df2a7/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.rs?ref=af86fb1959b520ae0256272899df5c43b11df2a7", "patch": "@@ -6,7 +6,7 @@ trait Future {\n use std::error::Error;\n \n fn foo() -> impl Future<Item=(), Error=Box<dyn Error>> {\n-//~^ ERROR missing lifetime\n+//~^ ERROR not satisfied\n     Ok(())\n }\n "}, {"sha": "228582d0001daafdf6bca1198a862316cc9e1da0", "filename": "src/test/ui/lifetimes/lifetime-elision-return-type-trait.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/af86fb1959b520ae0256272899df5c43b11df2a7/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af86fb1959b520ae0256272899df5c43b11df2a7/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.stderr?ref=af86fb1959b520ae0256272899df5c43b11df2a7", "patch": "@@ -1,11 +1,11 @@\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/lifetime-elision-return-type-trait.rs:8:44\n+error[E0277]: the trait bound `std::result::Result<(), _>: Future` is not satisfied\n+  --> $DIR/lifetime-elision-return-type-trait.rs:8:13\n    |\n LL | fn foo() -> impl Future<Item=(), Error=Box<dyn Error>> {\n-   |                                            ^^^^^^^^^ help: consider giving it a 'static lifetime: `dyn Error + 'static`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Future` is not implemented for `std::result::Result<(), _>`\n    |\n-   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+   = note: the return type of a function must have a statically known size\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0106`.\n+For more information about this error, try `rustc --explain E0277`."}]}