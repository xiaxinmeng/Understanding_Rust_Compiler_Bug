{"sha": "38fc6be325f57e6e149bc2b60985870d48280018", "node_id": "C_kwDOAAsO6NoAKDM4ZmM2YmUzMjVmNTdlNmUxNDliYzJiNjA5ODU4NzBkNDgyODAwMTg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-06-16T19:53:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-16T19:53:22Z"}, "message": "Rollup merge of #112662 - Vanille-N:symbol_unique, r=RalfJung\n\n`#[lang_item]` for `core::ptr::Unique`\n\nTree Borrows is about to introduce experimental special handling of `core::ptr::Unique` in Miri to give it a semantics.\nAs of now there does not seem to be a clean way (i.e. other than `&format!(\"{adt:?}\") == \"std::ptr::Unique\"`) to check if an `AdtDef` represents a `Unique`.\n\nr? `@RalfJung`\n\nDraft: making a lang item", "tree": {"sha": "98d25201d17e038df5ac49bf46a47da086689eeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98d25201d17e038df5ac49bf46a47da086689eeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38fc6be325f57e6e149bc2b60985870d48280018", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkjL2yCRBK7hj4Ov3rIwAAo7kIAKFUx9+ZIgSSVVy48b5PtMwA\nwqJoZzbpCmcu0gMifhCrGxHB4JgYpQcQ6y+BvSxXKRXiUIKZ/QarU47E+iZQ6h4I\nhRcPXxlwS3cfLu8PChDX16w1AQD+mfxbG8ETbuJTh8QJVjQk0MCQ3ArUTuSn8qVn\ngtdK4W54i9Da1At7aovu7Z94REhsAz90YlWWBEh4wdBn6JSgg2YNdrGRbo/XC97w\nLRxt333n0b3l/l/wxCBTV5+bIm2tjpAVXESK9zeHXT5MvrTNQuJ2/I6J57OSj5/q\nYCExqMT0hTp3dsZpLPj0a1eN6LTQMOEquTmbuAstHabiLa3+ZGdUAcHmd7roBv8=\n=yC47\n-----END PGP SIGNATURE-----\n", "payload": "tree 98d25201d17e038df5ac49bf46a47da086689eeb\nparent 3eb8c2ae10cb47a99e7f9baed9158cedc783536f\nparent dc3e91c6c2e3d5ae2287fd8332ecb6b7b7cee743\nauthor Michael Goulet <michael@errs.io> 1686945202 -0700\ncommitter GitHub <noreply@github.com> 1686945202 -0700\n\nRollup merge of #112662 - Vanille-N:symbol_unique, r=RalfJung\n\n`#[lang_item]` for `core::ptr::Unique`\n\nTree Borrows is about to introduce experimental special handling of `core::ptr::Unique` in Miri to give it a semantics.\nAs of now there does not seem to be a clean way (i.e. other than `&format!(\"{adt:?}\") == \"std::ptr::Unique\"`) to check if an `AdtDef` represents a `Unique`.\n\nr? `@RalfJung`\n\nDraft: making a lang item\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38fc6be325f57e6e149bc2b60985870d48280018", "html_url": "https://github.com/rust-lang/rust/commit/38fc6be325f57e6e149bc2b60985870d48280018", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38fc6be325f57e6e149bc2b60985870d48280018/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3eb8c2ae10cb47a99e7f9baed9158cedc783536f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3eb8c2ae10cb47a99e7f9baed9158cedc783536f", "html_url": "https://github.com/rust-lang/rust/commit/3eb8c2ae10cb47a99e7f9baed9158cedc783536f"}, {"sha": "dc3e91c6c2e3d5ae2287fd8332ecb6b7b7cee743", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc3e91c6c2e3d5ae2287fd8332ecb6b7b7cee743", "html_url": "https://github.com/rust-lang/rust/commit/dc3e91c6c2e3d5ae2287fd8332ecb6b7b7cee743"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "4e23a28b37166dad6f1a629747f2f1c70af4244a", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38fc6be325f57e6e149bc2b60985870d48280018/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38fc6be325f57e6e149bc2b60985870d48280018/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=38fc6be325f57e6e149bc2b60985870d48280018", "patch": "@@ -260,6 +260,8 @@ language_item_table! {\n     EhCatchTypeinfo,         sym::eh_catch_typeinfo,   eh_catch_typeinfo,          Target::Static,         GenericRequirement::None;\n \n     OwnedBox,                sym::owned_box,           owned_box,                  Target::Struct,         GenericRequirement::Minimum(1);\n+    // Experimental language item for Miri\n+    PtrUnique,               sym::ptr_unique,          ptr_unique,                 Target::Struct,         GenericRequirement::Exact(1);\n \n     PhantomData,             sym::phantom_data,        phantom_data,               Target::Struct,         GenericRequirement::Exact(1);\n "}, {"sha": "19d986a3152b47d1df572614973a124862cee91f", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38fc6be325f57e6e149bc2b60985870d48280018/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38fc6be325f57e6e149bc2b60985870d48280018/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=38fc6be325f57e6e149bc2b60985870d48280018", "patch": "@@ -1156,6 +1156,7 @@ symbols! {\n         ptr_null_mut,\n         ptr_offset_from,\n         ptr_offset_from_unsigned,\n+        ptr_unique,\n         pub_macro_rules,\n         pub_restricted,\n         public,"}, {"sha": "ff7e91d3ec3056e2bb9639411d814c13f4ee4ba8", "filename": "library/core/src/ptr/unique.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38fc6be325f57e6e149bc2b60985870d48280018/library%2Fcore%2Fsrc%2Fptr%2Funique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38fc6be325f57e6e149bc2b60985870d48280018/library%2Fcore%2Fsrc%2Fptr%2Funique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Funique.rs?ref=38fc6be325f57e6e149bc2b60985870d48280018", "patch": "@@ -32,6 +32,8 @@ use crate::ptr::NonNull;\n )]\n #[doc(hidden)]\n #[repr(transparent)]\n+// Lang item used experimentally by Miri to define the semantics of `Unique`.\n+#[cfg_attr(not(bootstrap), lang = \"ptr_unique\")]\n pub struct Unique<T: ?Sized> {\n     pointer: NonNull<T>,\n     // NOTE: this marker has no consequences for variance, but is necessary"}]}