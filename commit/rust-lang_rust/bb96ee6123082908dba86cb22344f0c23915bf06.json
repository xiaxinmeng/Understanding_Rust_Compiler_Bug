{"sha": "bb96ee6123082908dba86cb22344f0c23915bf06", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiOTZlZTYxMjMwODI5MDhkYmE4NmNiMjIzNDRmMGMyMzkxNWJmMDY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-30T03:57:18Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-30T23:03:25Z"}, "message": "syntax: Prepare for Total{Eq,Ord} => {Eq,Ord}\n\nThis commit adds the groundwork for the renaming of the Total{Eq,Ord} traits.\nAfter this commit hits a snapshot, the traits can be renamed.", "tree": {"sha": "4e5cb402fc334bc776f7e6b0c3b3d7e4bb2a4291", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e5cb402fc334bc776f7e6b0c3b3d7e4bb2a4291"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb96ee6123082908dba86cb22344f0c23915bf06", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb96ee6123082908dba86cb22344f0c23915bf06", "html_url": "https://github.com/rust-lang/rust/commit/bb96ee6123082908dba86cb22344f0c23915bf06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb96ee6123082908dba86cb22344f0c23915bf06/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "748bc3ca49de8ab0b890726120c40567094e43fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/748bc3ca49de8ab0b890726120c40567094e43fc", "html_url": "https://github.com/rust-lang/rust/commit/748bc3ca49de8ab0b890726120c40567094e43fc"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "80bc4f31a130e1436ee78c6e0c73c3e157c359ae", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb96ee6123082908dba86cb22344f0c23915bf06/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb96ee6123082908dba86cb22344f0c23915bf06/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=bb96ee6123082908dba86cb22344f0c23915bf06", "patch": "@@ -37,6 +37,9 @@\n //! assert!(SketchyNum {num: 25} != SketchyNum {num: 57});\n //! ```\n \n+pub use Eq = self::TotalEq;\n+pub use Ord = self::TotalOrd;\n+\n /// Trait for values that can be compared for equality and inequality.\n ///\n /// This trait allows partial equality, where types can be unordered instead of"}, {"sha": "4438b6ec980cd6432ca6d91010aefa3822b58e33", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb96ee6123082908dba86cb22344f0c23915bf06/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb96ee6123082908dba86cb22344f0c23915bf06/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=bb96ee6123082908dba86cb22344f0c23915bf06", "patch": "@@ -2083,7 +2083,8 @@ pub struct RangeStep<A> {\n \n /// Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.\n #[inline]\n-pub fn range_step<A: CheckedAdd + PartialOrd + Clone + Zero>(start: A, stop: A, step: A) -> RangeStep<A> {\n+pub fn range_step<A: CheckedAdd + PartialOrd +\n+                  Clone + Zero>(start: A, stop: A, step: A) -> RangeStep<A> {\n     let rev = step < Zero::zero();\n     RangeStep{state: start, stop: stop, step: step, rev: rev}\n }"}, {"sha": "6cffd15487d435ee0bfba4a40535bfc1aacf76fd", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb96ee6123082908dba86cb22344f0c23915bf06/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb96ee6123082908dba86cb22344f0c23915bf06/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=bb96ee6123082908dba86cb22344f0c23915bf06", "patch": "@@ -1650,7 +1650,7 @@ fn check_missing_doc_item(cx: &Context, it: &ast::Item) {\n                             desc);\n }\n \n-#[deriving(Eq)]\n+#[deriving(PartialEq)]\n enum MethodContext {\n     TraitDefaultImpl,\n     TraitImpl,"}, {"sha": "a8124493acbceef69a468173c162784f6587d994", "filename": "src/libsyntax/ext/deriving/cmp/totaleq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb96ee6123082908dba86cb22344f0c23915bf06/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb96ee6123082908dba86cb22344f0c23915bf06/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs?ref=bb96ee6123082908dba86cb22344f0c23915bf06", "patch": "@@ -28,7 +28,7 @@ pub fn expand_deriving_totaleq(cx: &mut ExtCtxt,\n             let block = cx.block(span, stmts, None);\n             cx.expr_block(block)\n         },\n-                       |cx, sp, _, _| cx.span_bug(sp, \"non matching enums in deriving(TotalEq)?\"),\n+                       |cx, sp, _, _| cx.span_bug(sp, \"non matching enums in deriving(Eq)?\"),\n                        cx,\n                        span,\n                        substr)\n@@ -42,7 +42,7 @@ pub fn expand_deriving_totaleq(cx: &mut ExtCtxt,\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n-        path: Path::new(vec!(\"std\", \"cmp\", \"TotalEq\")),\n+        path: Path::new(vec!(\"std\", \"cmp\", \"Eq\")),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         methods: vec!("}, {"sha": "c4611a552f5d0aceba9b11ed4f870a6777ecca3f", "filename": "src/libsyntax/ext/deriving/cmp/totalord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb96ee6123082908dba86cb22344f0c23915bf06/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb96ee6123082908dba86cb22344f0c23915bf06/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs?ref=bb96ee6123082908dba86cb22344f0c23915bf06", "patch": "@@ -28,7 +28,7 @@ pub fn expand_deriving_totalord(cx: &mut ExtCtxt,\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n-        path: Path::new(vec!(\"std\", \"cmp\", \"TotalOrd\")),\n+        path: Path::new(vec!(\"std\", \"cmp\", \"Ord\")),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         methods: vec!(\n@@ -117,7 +117,7 @@ pub fn cs_cmp(cx: &mut ExtCtxt, span: Span,\n                     let order = ordering_const(cx, span, self_var.cmp(&other_var));\n                     cx.expr_path(order)\n                 }\n-                _ => cx.span_bug(span, \"not exactly 2 arguments in `deriving(TotalOrd)`\")\n+                _ => cx.span_bug(span, \"not exactly 2 arguments in `deriving(Ord)`\")\n             }\n         },\n         cx, span, substr)"}, {"sha": "1d8081e2ae3c2a5be3f7974b32fe43080d500fac", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb96ee6123082908dba86cb22344f0c23915bf06/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb96ee6123082908dba86cb22344f0c23915bf06/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=bb96ee6123082908dba86cb22344f0c23915bf06", "patch": "@@ -77,10 +77,11 @@ pub fn expand_meta_deriving(cx: &mut ExtCtxt,\n                             \"Encodable\" => expand!(encodable::expand_deriving_encodable),\n                             \"Decodable\" => expand!(decodable::expand_deriving_decodable),\n \n+                            // NOTE: after a stage0 snap this needs treatment\n                             \"PartialEq\" => expand!(eq::expand_deriving_eq),\n-                            \"TotalEq\" => expand!(totaleq::expand_deriving_totaleq),\n+                            \"Eq\" | \"TotalEq\" => expand!(totaleq::expand_deriving_totaleq),\n                             \"PartialOrd\" => expand!(ord::expand_deriving_ord),\n-                            \"TotalOrd\" => expand!(totalord::expand_deriving_totalord),\n+                            \"Ord\" | \"TotalOrd\" => expand!(totalord::expand_deriving_totalord),\n \n                             \"Rand\" => expand!(rand::expand_deriving_rand),\n "}]}