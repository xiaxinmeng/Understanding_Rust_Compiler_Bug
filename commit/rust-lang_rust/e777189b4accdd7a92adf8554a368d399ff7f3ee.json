{"sha": "e777189b4accdd7a92adf8554a368d399ff7f3ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3NzcxODliNGFjY2RkN2E5MmFkZjg1NTRhMzY4ZDM5OWZmN2YzZWU=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-08-07T13:06:10Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-08-11T10:11:38Z"}, "message": "Use ItemLocalId as key for TypeckTables::pat_binding_modes.", "tree": {"sha": "1715374707f5b8186437caa223f104c60a930131", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1715374707f5b8186437caa223f104c60a930131"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e777189b4accdd7a92adf8554a368d399ff7f3ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e777189b4accdd7a92adf8554a368d399ff7f3ee", "html_url": "https://github.com/rust-lang/rust/commit/e777189b4accdd7a92adf8554a368d399ff7f3ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e777189b4accdd7a92adf8554a368d399ff7f3ee/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f2423eede51cc622420356988777db2473a0be2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f2423eede51cc622420356988777db2473a0be2", "html_url": "https://github.com/rust-lang/rust/commit/7f2423eede51cc622420356988777db2473a0be2"}], "stats": {"total": 82, "additions": 62, "deletions": 20}, "files": [{"sha": "21d797d1e9a7e2397a66f6c7fa16d21dcdcafd33", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e777189b4accdd7a92adf8554a368d399ff7f3ee/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e777189b4accdd7a92adf8554a368d399ff7f3ee/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=e777189b4accdd7a92adf8554a368d399ff7f3ee", "patch": "@@ -642,7 +642,7 @@ for ty::TypeckTables<'gcx> {\n             ich::hash_stable_itemlocalmap(hcx, hasher, node_types);\n             ich::hash_stable_itemlocalmap(hcx, hasher, node_substs);\n             ich::hash_stable_itemlocalmap(hcx, hasher, adjustments);\n-            ich::hash_stable_nodemap(hcx, hasher, pat_binding_modes);\n+            ich::hash_stable_itemlocalmap(hcx, hasher, pat_binding_modes);\n             ich::hash_stable_hashmap(hcx, hasher, upvar_capture_map, |hcx, up_var_id| {\n                 let ty::UpvarId {\n                     var_id,"}, {"sha": "a11511c2434af7e0a6cb6b906939a368bae53138", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e777189b4accdd7a92adf8554a368d399ff7f3ee/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e777189b4accdd7a92adf8554a368d399ff7f3ee/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=e777189b4accdd7a92adf8554a368d399ff7f3ee", "patch": "@@ -797,7 +797,8 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                pat);\n         return_if_err!(self.mc.cat_pattern(cmt_discr, pat, |cmt_pat, pat| {\n             if let PatKind::Binding(..) = pat.node {\n-                let bm = *self.mc.tables.pat_binding_modes.get(&pat.id)\n+                self.mc.tables.validate_hir_id(pat.hir_id);\n+                let bm = *self.mc.tables.pat_binding_modes.get(&pat.hir_id.local_id)\n                                                           .expect(\"missing binding mode\");\n                 match bm {\n                     ty::BindByReference(..) =>\n@@ -823,7 +824,9 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n         return_if_err!(mc.cat_pattern(cmt_discr.clone(), pat, |cmt_pat, pat| {\n             if let PatKind::Binding(_, def_id, ..) = pat.node {\n                 debug!(\"binding cmt_pat={:?} pat={:?} match_mode={:?}\", cmt_pat, pat, match_mode);\n-                let bm = *mc.tables.pat_binding_modes.get(&pat.id).expect(\"missing binding mode\");\n+                mc.tables.validate_hir_id(pat.hir_id);\n+                let bm = *mc.tables.pat_binding_modes.get(&pat.hir_id.local_id)\n+                                                     .expect(\"missing binding mode\");\n \n                 // pat_ty: the type of the binding being produced.\n                 let pat_ty = return_if_err!(mc.node_ty(pat.hir_id));"}, {"sha": "faa91d0fa3a9dde6b88ade04dba774768021df0f", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e777189b4accdd7a92adf8554a368d399ff7f3ee/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e777189b4accdd7a92adf8554a368d399ff7f3ee/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=e777189b4accdd7a92adf8554a368d399ff7f3ee", "patch": "@@ -334,7 +334,11 @@ impl MutabilityCategory {\n         let ret = match tcx.hir.get(id) {\n             hir_map::NodeLocal(p) => match p.node {\n                 PatKind::Binding(..) => {\n-                    let bm = *tables.pat_binding_modes.get(&p.id).expect(\"missing binding mode\");\n+\n+                    tables.validate_hir_id(p.hir_id);\n+                    let bm = *tables.pat_binding_modes\n+                                    .get(&p.hir_id.local_id)\n+                                    .expect(\"missing binding mode\");\n                     if bm == ty::BindByValue(hir::MutMutable) {\n                         McDeclared\n                     } else {\n@@ -481,7 +485,12 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n         // fundamental fix to this conflated use of the node id.\n         let ret_ty = match pat.node {\n             PatKind::Binding(..) => {\n-                let bm = *self.tables.pat_binding_modes.get(&pat.id).expect(\"missing binding mode\");\n+                self.tables.validate_hir_id(pat.hir_id);\n+                let bm = *self.tables\n+                              .pat_binding_modes\n+                              .get(&pat.hir_id.local_id)\n+                              .expect(\"missing binding mode\");\n+\n                 if let ty::BindByReference(_) = bm {\n                     // a bind-by-ref means that the base_ty will be the type of the ident itself,\n                     // but what we want here is the type of the underlying value being borrowed."}, {"sha": "d4ff1590e8aadb87010fcaef6506dd495d4ae777", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e777189b4accdd7a92adf8554a368d399ff7f3ee/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e777189b4accdd7a92adf8554a368d399ff7f3ee/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=e777189b4accdd7a92adf8554a368d399ff7f3ee", "patch": "@@ -230,7 +230,7 @@ pub struct TypeckTables<'tcx> {\n     pub adjustments: ItemLocalMap<Vec<ty::adjustment::Adjustment<'tcx>>>,\n \n     // Stores the actual binding mode for all instances of hir::BindingAnnotation.\n-    pub pat_binding_modes: NodeMap<BindingMode>,\n+    pub pat_binding_modes: ItemLocalMap<BindingMode>,\n \n     /// Borrows\n     pub upvar_capture_map: ty::UpvarCaptureMap<'tcx>,\n@@ -281,7 +281,7 @@ impl<'tcx> TypeckTables<'tcx> {\n             node_types: ItemLocalMap(),\n             node_substs: ItemLocalMap(),\n             adjustments: ItemLocalMap(),\n-            pat_binding_modes: NodeMap(),\n+            pat_binding_modes: ItemLocalMap(),\n             upvar_capture_map: FxHashMap(),\n             closure_tys: NodeMap(),\n             closure_kinds: NodeMap(),"}, {"sha": "4b26aa95759d72e9c68c62fd88c45f1bdf10da9a", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e777189b4accdd7a92adf8554a368d399ff7f3ee/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e777189b4accdd7a92adf8554a368d399ff7f3ee/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=e777189b4accdd7a92adf8554a368d399ff7f3ee", "patch": "@@ -899,8 +899,13 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n         };\n \n         match pat.node {\n-            hir::PatKind::Binding(..) =>\n-                *self.tables.pat_binding_modes.get(&pat.id).expect(\"missing binding mode\"),\n+            hir::PatKind::Binding(..) => {\n+                self.tables.validate_hir_id(pat.hir_id);\n+                *self.tables\n+                     .pat_binding_modes\n+                     .get(&pat.hir_id.local_id)\n+                     .expect(\"missing binding mode\")\n+            }\n             _ => bug!(\"local is not a binding: {:?}\", pat)\n         }\n     }"}, {"sha": "a990670f08bf59513781e6f1efd292ea450de97b", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e777189b4accdd7a92adf8554a368d399ff7f3ee/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e777189b4accdd7a92adf8554a368d399ff7f3ee/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=e777189b4accdd7a92adf8554a368d399ff7f3ee", "patch": "@@ -269,7 +269,12 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n fn check_for_bindings_named_the_same_as_variants(cx: &MatchVisitor, pat: &Pat) {\n     pat.walk(|p| {\n         if let PatKind::Binding(_, _, name, None) = p.node {\n-            let bm = *cx.tables.pat_binding_modes.get(&p.id).expect(\"missing binding mode\");\n+            cx.tables.validate_hir_id(p.hir_id);\n+            let bm = *cx.tables\n+                        .pat_binding_modes\n+                        .get(&p.hir_id.local_id)\n+                        .expect(\"missing binding mode\");\n+\n             if bm != ty::BindByValue(hir::MutImmutable) {\n                 // Nothing to check.\n                 return true;\n@@ -458,7 +463,12 @@ fn check_legality_of_move_bindings(cx: &MatchVisitor,\n     let mut by_ref_span = None;\n     for pat in pats {\n         pat.each_binding(|_, id, span, _path| {\n-            let bm = *cx.tables.pat_binding_modes.get(&id).expect(\"missing binding mode\");\n+            let hir_id = cx.tcx.hir.node_to_hir_id(id);\n+            cx.tables.validate_hir_id(hir_id);\n+            let bm = *cx.tables\n+                        .pat_binding_modes\n+                        .get(&hir_id.local_id)\n+                        .expect(\"missing binding mode\");\n             if let ty::BindByReference(..) = bm {\n                 by_ref_span = Some(span);\n             }\n@@ -491,7 +501,11 @@ fn check_legality_of_move_bindings(cx: &MatchVisitor,\n     for pat in pats {\n         pat.walk(|p| {\n             if let PatKind::Binding(_, _, _, ref sub) = p.node {\n-                let bm = *cx.tables.pat_binding_modes.get(&p.id).expect(\"missing binding mode\");\n+                cx.tables.validate_hir_id(p.hir_id);\n+                let bm = *cx.tables\n+                            .pat_binding_modes\n+                            .get(&p.hir_id.local_id)\n+                            .expect(\"missing binding mode\");\n                 match bm {\n                     ty::BindByValue(..) => {\n                         let pat_ty = cx.tables.node_id_to_type(p.hir_id);"}, {"sha": "924193786c1fbca289399a1e8cde61b02054d721", "filename": "src/librustc_const_eval/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e777189b4accdd7a92adf8554a368d399ff7f3ee/src%2Flibrustc_const_eval%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e777189b4accdd7a92adf8554a368d399ff7f3ee/src%2Flibrustc_const_eval%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fpattern.rs?ref=e777189b4accdd7a92adf8554a368d399ff7f3ee", "patch": "@@ -381,7 +381,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                     ty::TyRef(r, _) => Some(r),\n                     _ => None,\n                 };\n-                let bm = *self.tables.pat_binding_modes.get(&pat.id)\n+                let bm = *self.tables.pat_binding_modes.get(&pat.hir_id.local_id)\n                                                        .expect(\"missing binding mode\");\n                 let (mutability, mode) = match bm {\n                     ty::BindByValue(hir::MutMutable) =>"}, {"sha": "f8f91e6c29d3cd32b59c775b7cf3cd52ab5e9bd3", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e777189b4accdd7a92adf8554a368d399ff7f3ee/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e777189b4accdd7a92adf8554a368d399ff7f3ee/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=e777189b4accdd7a92adf8554a368d399ff7f3ee", "patch": "@@ -45,7 +45,9 @@ impl UnusedMut {\n         let mut mutables = FxHashMap();\n         for p in pats {\n             p.each_binding(|_, id, span, path1| {\n-                let bm = match cx.tables.pat_binding_modes.get(&id) {\n+                let hir_id = cx.tcx.hir.node_to_hir_id(id);\n+                cx.tables.validate_hir_id(hir_id);\n+                let bm = match cx.tables.pat_binding_modes.get(&hir_id.local_id) {\n                     Some(&bm) => bm,\n                     None => span_bug!(span, \"missing binding mode\"),\n                 };"}, {"sha": "3a616dadc42f0fa26fb09abe2bdf2e1b6d84c68b", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e777189b4accdd7a92adf8554a368d399ff7f3ee/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e777189b4accdd7a92adf8554a368d399ff7f3ee/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=e777189b4accdd7a92adf8554a368d399ff7f3ee", "patch": "@@ -118,8 +118,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // identical to what could be scraped from the HIR, but this will change with\n                 // default binding modes (#42640).\n                 let bm = ty::BindingMode::convert(ba);\n-                self.inh.tables.borrow_mut().pat_binding_modes.insert(pat.id, bm);\n-\n+                {\n+                    let mut inh_tables = self.inh.tables.borrow_mut();\n+                    inh_tables.validate_hir_id(pat.hir_id);\n+                    inh_tables.pat_binding_modes.insert(pat.hir_id.local_id, bm);\n+                }\n                 let typ = self.local_ty(pat.span, pat.id);\n                 match bm {\n                     ty::BindByReference(mutbl) => {"}, {"sha": "3113f4a569f2df5d9cd4a857abeae6e403a77d0f", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e777189b4accdd7a92adf8554a368d399ff7f3ee/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e777189b4accdd7a92adf8554a368d399ff7f3ee/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=e777189b4accdd7a92adf8554a368d399ff7f3ee", "patch": "@@ -1205,7 +1205,8 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n                 match sub_pat.node {\n                     // `ref x` pattern\n                     PatKind::Binding(..) => {\n-                        let bm = *mc.tables.pat_binding_modes.get(&sub_pat.id)\n+                        mc.tables.validate_hir_id(sub_pat.hir_id);\n+                        let bm = *mc.tables.pat_binding_modes.get(&sub_pat.hir_id.local_id)\n                                                              .expect(\"missing binding mode\");\n                         if let ty::BindByReference(mutbl) = bm {\n                             self.link_region_from_node_type(sub_pat.span, sub_pat.hir_id,"}, {"sha": "b689da6e3867c75dc9e3125655d38ee83e42fab2", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e777189b4accdd7a92adf8554a368d399ff7f3ee/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e777189b4accdd7a92adf8554a368d399ff7f3ee/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=e777189b4accdd7a92adf8554a368d399ff7f3ee", "patch": "@@ -186,9 +186,14 @@ impl<'cx, 'gcx, 'tcx> Visitor<'gcx> for WritebackCx<'cx, 'gcx, 'tcx> {\n     fn visit_pat(&mut self, p: &'gcx hir::Pat) {\n         match p.node {\n             hir::PatKind::Binding(..) => {\n-                let bm = *self.fcx.tables.borrow().pat_binding_modes.get(&p.id)\n-                                                                    .expect(\"missing binding mode\");\n-                self.tables.pat_binding_modes.insert(p.id, bm);\n+                let bm = {\n+                    let fcx_tables = self.fcx.tables.borrow();\n+                    fcx_tables.validate_hir_id(p.hir_id);\n+                    *fcx_tables.pat_binding_modes.get(&p.hir_id.local_id)\n+                                                 .expect(\"missing binding mode\")\n+                };\n+                self.tables.validate_hir_id(p.hir_id);\n+                self.tables.pat_binding_modes.insert(p.hir_id.local_id, bm);\n             }\n             _ => {}\n         };"}]}