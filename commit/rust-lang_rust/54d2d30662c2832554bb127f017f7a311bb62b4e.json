{"sha": "54d2d30662c2832554bb127f017f7a311bb62b4e", "node_id": "C_kwDOAAsO6NoAKDU0ZDJkMzA2NjJjMjgzMjU1NGJiMTI3ZjAxN2Y3YTMxMWJiNjJiNGU", "commit": {"author": {"name": "Rob Pilling", "email": "robpilling@gmail.com", "date": "2021-12-05T21:41:33Z"}, "committer": {"name": "Rob Pilling", "email": "robpilling@gmail.com", "date": "2022-01-25T22:51:19Z"}, "message": "Compare tuple element & arg types before suggesting a tuple", "tree": {"sha": "a19c767d98cfa7d68e24b72bc678365f00b32472", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a19c767d98cfa7d68e24b72bc678365f00b32472"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54d2d30662c2832554bb127f017f7a311bb62b4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54d2d30662c2832554bb127f017f7a311bb62b4e", "html_url": "https://github.com/rust-lang/rust/commit/54d2d30662c2832554bb127f017f7a311bb62b4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54d2d30662c2832554bb127f017f7a311bb62b4e/comments", "author": {"login": "bobrippling", "id": 205673, "node_id": "MDQ6VXNlcjIwNTY3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/205673?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobrippling", "html_url": "https://github.com/bobrippling", "followers_url": "https://api.github.com/users/bobrippling/followers", "following_url": "https://api.github.com/users/bobrippling/following{/other_user}", "gists_url": "https://api.github.com/users/bobrippling/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobrippling/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobrippling/subscriptions", "organizations_url": "https://api.github.com/users/bobrippling/orgs", "repos_url": "https://api.github.com/users/bobrippling/repos", "events_url": "https://api.github.com/users/bobrippling/events{/privacy}", "received_events_url": "https://api.github.com/users/bobrippling/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bobrippling", "id": 205673, "node_id": "MDQ6VXNlcjIwNTY3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/205673?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobrippling", "html_url": "https://github.com/bobrippling", "followers_url": "https://api.github.com/users/bobrippling/followers", "following_url": "https://api.github.com/users/bobrippling/following{/other_user}", "gists_url": "https://api.github.com/users/bobrippling/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobrippling/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobrippling/subscriptions", "organizations_url": "https://api.github.com/users/bobrippling/orgs", "repos_url": "https://api.github.com/users/bobrippling/repos", "events_url": "https://api.github.com/users/bobrippling/events{/privacy}", "received_events_url": "https://api.github.com/users/bobrippling/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80059f99424c64d10f073ab5c502856d46b1c26d", "url": "https://api.github.com/repos/rust-lang/rust/commits/80059f99424c64d10f073ab5c502856d46b1c26d", "html_url": "https://github.com/rust-lang/rust/commit/80059f99424c64d10f073ab5c502856d46b1c26d"}], "stats": {"total": 111, "additions": 79, "deletions": 32}, "files": [{"sha": "a94e6b480d643c9daca2272584cee65df993c37f", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 31, "deletions": 22, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/54d2d30662c2832554bb127f017f7a311bb62b4e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d2d30662c2832554bb127f017f7a311bb62b4e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=54d2d30662c2832554bb127f017f7a311bb62b4e", "patch": "@@ -18,7 +18,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::{ExprKind, Node, QPath};\n use rustc_middle::ty::adjustment::AllowTwoPhase;\n use rustc_middle::ty::fold::TypeFoldable;\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::{self, ParamEnv, Ty};\n use rustc_session::Session;\n use rustc_span::symbol::Ident;\n use rustc_span::{self, MultiSpan, Span};\n@@ -188,33 +188,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             };\n \n             // are we passing elements of a tuple without the tuple parentheses?\n-            let chosen_arg_tys = if expected_input_tys.is_empty() {\n-                // In most cases we can use expected_arg_tys, but some callers won't have the type\n+            let expected_input_tys = if expected_input_tys.is_empty() {\n+                // In most cases we can use expected_input_tys, but some callers won't have the type\n                 // information, in which case we fall back to the types from the input expressions.\n                 formal_input_tys\n             } else {\n                 &*expected_input_tys\n             };\n \n-            let sugg_tuple_wrap_args = chosen_arg_tys\n-                .get(0)\n-                .cloned()\n-                .map(|arg_ty| self.resolve_vars_if_possible(arg_ty))\n-                .and_then(|arg_ty| match arg_ty.kind() {\n-                    ty::Tuple(tup_elems) => Some(tup_elems),\n-                    _ => None,\n-                })\n-                .and_then(|tup_elems| {\n-                    if tup_elems.len() == supplied_arg_count && chosen_arg_tys.len() == 1 {\n-                        match provided_args {\n-                            [] => None,\n-                            [single] => Some(FnArgsAsTuple::Single(single)),\n-                            [first, .., last] => Some(FnArgsAsTuple::Multi { first, last }),\n-                        }\n-                    } else {\n-                        None\n-                    }\n-                });\n+            let sugg_tuple_wrap_args = self.suggested_tuple_wrap(expected_input_tys, provided_args);\n \n             error = Some((\n                 expected_arg_count,\n@@ -518,6 +500,33 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn suggested_tuple_wrap(\n+        &self,\n+        expected_input_tys: &[Ty<'tcx>],\n+        provided_args: &'tcx [hir::Expr<'tcx>],\n+    ) -> Option<FnArgsAsTuple<'_>> {\n+        let [expected_arg_type] = &expected_input_tys[..] else { return None };\n+\n+        let ty::Tuple(expected_elems) = self.resolve_vars_if_possible(*expected_arg_type).kind()\n+            else { return None };\n+\n+        let expected_types: Vec<_> = expected_elems.iter().map(|k| k.expect_ty()).collect();\n+        let supplied_types: Vec<_> = provided_args.iter().map(|arg| self.check_expr(arg)).collect();\n+\n+        let all_match = iter::zip(expected_types, supplied_types)\n+            .all(|(expected, supplied)| self.can_eq(ParamEnv::empty(), expected, supplied).is_ok());\n+\n+        if all_match {\n+            match provided_args {\n+                [] => None,\n+                [single] => Some(FnArgsAsTuple::Single(single)),\n+                [first, .., last] => Some(FnArgsAsTuple::Multi { first, last }),\n+            }\n+        } else {\n+            None\n+        }\n+    }\n+\n     // AST fragment checking\n     pub(in super::super) fn check_lit(\n         &self,"}, {"sha": "c4e9c68e219e68a7d7abcc300833a69d93046e27", "filename": "src/test/ui/suggestions/args-instead-of-tuple-errors.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/54d2d30662c2832554bb127f017f7a311bb62b4e/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d2d30662c2832554bb127f017f7a311bb62b4e/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.rs?ref=54d2d30662c2832554bb127f017f7a311bb62b4e", "patch": "@@ -0,0 +1,13 @@\n+// Ensure we don't suggest tuple-wrapping when we'd end up with a type error\n+\n+fn main() {\n+    // we shouldn't suggest to fix these - `2` isn't a `bool`\n+\n+    let _: Option<(i32, bool)> = Some(1, 2);\n+    //~^ ERROR this enum variant takes 1 argument but 2 arguments were supplied\n+    int_bool(1, 2);\n+    //~^ ERROR this function takes 1 argument but 2 arguments were supplied\n+}\n+\n+fn int_bool(_: (i32, bool)) {\n+}"}, {"sha": "c53c8bbdcc9df2ac8b2ff3f8cfc0f948671ee9f7", "filename": "src/test/ui/suggestions/args-instead-of-tuple-errors.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/54d2d30662c2832554bb127f017f7a311bb62b4e/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54d2d30662c2832554bb127f017f7a311bb62b4e/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr?ref=54d2d30662c2832554bb127f017f7a311bb62b4e", "patch": "@@ -0,0 +1,25 @@\n+error[E0061]: this enum variant takes 1 argument but 2 arguments were supplied\n+  --> $DIR/args-instead-of-tuple-errors.rs:6:34\n+   |\n+LL |     let _: Option<(i32, bool)> = Some(1, 2);\n+   |                                  ^^^^ -  - supplied 2 arguments\n+   |                                  |\n+   |                                  expected 1 argument\n+\n+error[E0061]: this function takes 1 argument but 2 arguments were supplied\n+  --> $DIR/args-instead-of-tuple-errors.rs:8:5\n+   |\n+LL |     int_bool(1, 2);\n+   |     ^^^^^^^^ -  - supplied 2 arguments\n+   |     |\n+   |     expected 1 argument\n+   |\n+note: function defined here\n+  --> $DIR/args-instead-of-tuple-errors.rs:12:4\n+   |\n+LL | fn int_bool(_: (i32, bool)) {\n+   |    ^^^^^^^^ --------------\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0061`."}, {"sha": "095be95f185861cca65ef4c426ee38264758cf77", "filename": "src/test/ui/suggestions/args-instead-of-tuple.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54d2d30662c2832554bb127f017f7a311bb62b4e/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/54d2d30662c2832554bb127f017f7a311bb62b4e/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.fixed?ref=54d2d30662c2832554bb127f017f7a311bb62b4e", "patch": "@@ -11,8 +11,8 @@ fn main() {\n     let _: Option<()> = Some(());\n     //~^ ERROR this enum variant takes 1 argument but 0 arguments were supplied\n \n-    f((1, 2)); //~ ERROR this function takes 1 argument\n+    two_ints((1, 2)); //~ ERROR this function takes 1 argument\n }\n \n-fn f(_: (i32, i32)) {\n+fn two_ints(_: (i32, i32)) {\n }"}, {"sha": "3466a46df848eca7e2a67d7163e82d71a7fc9bf7", "filename": "src/test/ui/suggestions/args-instead-of-tuple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54d2d30662c2832554bb127f017f7a311bb62b4e/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d2d30662c2832554bb127f017f7a311bb62b4e/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.rs?ref=54d2d30662c2832554bb127f017f7a311bb62b4e", "patch": "@@ -11,8 +11,8 @@ fn main() {\n     let _: Option<()> = Some();\n     //~^ ERROR this enum variant takes 1 argument but 0 arguments were supplied\n \n-    f(1, 2); //~ ERROR this function takes 1 argument\n+    two_ints(1, 2); //~ ERROR this function takes 1 argument\n }\n \n-fn f(_: (i32, i32)) {\n+fn two_ints(_: (i32, i32)) {\n }"}, {"sha": "1bf7e7a8d171baa45687139e9ab4ccb6fbe96ff3", "filename": "src/test/ui/suggestions/args-instead-of-tuple.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/54d2d30662c2832554bb127f017f7a311bb62b4e/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54d2d30662c2832554bb127f017f7a311bb62b4e/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.stderr?ref=54d2d30662c2832554bb127f017f7a311bb62b4e", "patch": "@@ -34,18 +34,18 @@ LL |     let _: Option<()> = Some(());\n error[E0061]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/args-instead-of-tuple.rs:14:5\n    |\n-LL |     f(1, 2);\n-   |     ^ -  - supplied 2 arguments\n+LL |     two_ints(1, 2);\n+   |     ^^^^^^^^ -  - supplied 2 arguments\n    |\n note: function defined here\n   --> $DIR/args-instead-of-tuple.rs:17:4\n    |\n-LL | fn f(_: (i32, i32)) {\n-   |    ^ -------------\n+LL | fn two_ints(_: (i32, i32)) {\n+   |    ^^^^^^^^ -------------\n help: use parentheses to construct a tuple\n    |\n-LL |     f((1, 2));\n-   |       +    +\n+LL |     two_ints((1, 2));\n+   |              +    +\n \n error: aborting due to 4 previous errors\n "}]}