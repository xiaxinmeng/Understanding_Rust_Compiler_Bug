{"sha": "7a2779a4624db2b9ef1f114a9a9acf9ca5c29d0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMjc3OWE0NjI0ZGIyYjllZjFmMTE0YTlhOWFjZjljYTVjMjlkMGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-01T09:10:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-01T09:10:23Z"}, "message": "Auto merge of #57210 - estebank:str-err, r=zackmdavis\n\nTweak unicode escape diagnostics", "tree": {"sha": "d77fec6ca827b9ac39c572ec2d546c5938aa5564", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d77fec6ca827b9ac39c572ec2d546c5938aa5564"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a2779a4624db2b9ef1f114a9a9acf9ca5c29d0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a2779a4624db2b9ef1f114a9a9acf9ca5c29d0c", "html_url": "https://github.com/rust-lang/rust/commit/7a2779a4624db2b9ef1f114a9a9acf9ca5c29d0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a2779a4624db2b9ef1f114a9a9acf9ca5c29d0c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0432798fdb4437119b3704cd891b412ba30e5c83", "url": "https://api.github.com/repos/rust-lang/rust/commits/0432798fdb4437119b3704cd891b412ba30e5c83", "html_url": "https://github.com/rust-lang/rust/commit/0432798fdb4437119b3704cd891b412ba30e5c83"}, {"sha": "30961c958da9181a623ea215ed1fd62006f73a85", "url": "https://api.github.com/repos/rust-lang/rust/commits/30961c958da9181a623ea215ed1fd62006f73a85", "html_url": "https://github.com/rust-lang/rust/commit/30961c958da9181a623ea215ed1fd62006f73a85"}], "stats": {"total": 159, "additions": 148, "deletions": 11}, "files": [{"sha": "ecb34e43c590cad2412415d4cb1638a19f88ebad", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7a2779a4624db2b9ef1f114a9a9acf9ca5c29d0c/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2779a4624db2b9ef1f114a9a9acf9ca5c29d0c/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=7a2779a4624db2b9ef1f114a9a9acf9ca5c29d0c", "patch": "@@ -945,12 +945,36 @@ impl<'a> StringReader<'a> {\n                                     self.scan_unicode_escape(delim) && !ascii_only\n                                 } else {\n                                     let span = self.mk_sp(start, self.pos);\n-                                    self.sess.span_diagnostic\n-                                        .struct_span_err(span, \"incorrect unicode escape sequence\")\n-                                        .span_help(span,\n-                                                   \"format of unicode escape sequences is \\\n-                                                    `\\\\u{\u2026}`\")\n-                                        .emit();\n+                                    let mut suggestion = \"\\\\u{\".to_owned();\n+                                    let mut err = self.sess.span_diagnostic.struct_span_err(\n+                                        span,\n+                                        \"incorrect unicode escape sequence\",\n+                                    );\n+                                    let mut i = 0;\n+                                    while let (Some(ch), true) = (self.ch, i < 6) {\n+                                        if ch.is_digit(16) {\n+                                            suggestion.push(ch);\n+                                            self.bump();\n+                                            i += 1;\n+                                        } else {\n+                                            break;\n+                                        }\n+                                    }\n+                                    if i != 0 {\n+                                        suggestion.push('}');\n+                                        err.span_suggestion_with_applicability(\n+                                            self.mk_sp(start, self.pos),\n+                                            \"format of unicode escape sequences uses braces\",\n+                                            suggestion,\n+                                            Applicability::MaybeIncorrect,\n+                                        );\n+                                    } else {\n+                                        err.span_help(\n+                                            span,\n+                                            \"format of unicode escape sequences is `\\\\u{...}`\",\n+                                        );\n+                                    }\n+                                    err.emit();\n                                     false\n                                 };\n                                 if ascii_only {"}, {"sha": "c11f27f3ed589447874c58df12fb9ea22c3e72bb", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/7a2779a4624db2b9ef1f114a9a9acf9ca5c29d0c/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2779a4624db2b9ef1f114a9a9acf9ca5c29d0c/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=7a2779a4624db2b9ef1f114a9a9acf9ca5c29d0c", "patch": "@@ -808,12 +808,57 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n                 }\n                 ('\\\\', Some((next_pos, 'n'))) |\n                 ('\\\\', Some((next_pos, 't'))) |\n+                ('\\\\', Some((next_pos, '0'))) |\n                 ('\\\\', Some((next_pos, '\\\\'))) |\n                 ('\\\\', Some((next_pos, '\\''))) |\n                 ('\\\\', Some((next_pos, '\\\"'))) => {\n                     skips.push(*next_pos);\n                     let _ = s.next();\n                 }\n+                ('\\\\', Some((_, 'x'))) if !is_raw => {\n+                    for _ in 0..3 {  // consume `\\xAB` literal\n+                        if let Some((pos, _)) = s.next() {\n+                            skips.push(pos);\n+                        } else {\n+                            break;\n+                        }\n+                    }\n+                }\n+                ('\\\\', Some((_, 'u'))) if !is_raw => {\n+                    if let Some((pos, _)) = s.next() {\n+                        skips.push(pos);\n+                    }\n+                    if let Some((next_pos, next_c)) = s.next() {\n+                        if next_c == '{' {\n+                            skips.push(next_pos);\n+                            let mut i = 0;  // consume up to 6 hexanumeric chars + closing `}`\n+                            while let (Some((next_pos, c)), true) = (s.next(), i < 7) {\n+                                if c.is_digit(16) {\n+                                    skips.push(next_pos);\n+                                } else if c == '}' {\n+                                    skips.push(next_pos);\n+                                    break;\n+                                } else {\n+                                    break;\n+                                }\n+                                i += 1;\n+                            }\n+                        } else if next_c.is_digit(16) {\n+                            skips.push(next_pos);\n+                            // We suggest adding `{` and `}` when appropriate, accept it here as if\n+                            // it were correct\n+                            let mut i = 0;  // consume up to 6 hexanumeric chars\n+                            while let (Some((next_pos, c)), _) = (s.next(), i < 6) {\n+                                if c.is_digit(16) {\n+                                    skips.push(next_pos);\n+                                } else {\n+                                    break;\n+                                }\n+                                i += 1;\n+                            }\n+                        }\n+                    }\n+                }\n                 _ if eat_ws => {  // `take_while(|c| c.is_whitespace())`\n                     eat_ws = false;\n                 }"}, {"sha": "5c25ae502ff6d8f06d95c2456d84889978a7acd4", "filename": "src/test/ui/fmt/format-string-error-2.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7a2779a4624db2b9ef1f114a9a9acf9ca5c29d0c/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2779a4624db2b9ef1f114a9a9acf9ca5c29d0c/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.rs?ref=7a2779a4624db2b9ef1f114a9a9acf9ca5c29d0c", "patch": "@@ -69,4 +69,19 @@ raw  { \\n\n     //~^^ ERROR invalid format string\n     println!(\"\\t{}\");\n     //~^ ERROR 1 positional argument in format string\n+\n+    // note: `\\x7B` is `{`\n+    println!(\"\\x7B}\\u{8} {\", 1);\n+    //~^ ERROR invalid format string: expected `'}'` but string was terminated\n+\n+    println!(\"\\x7B}\\u8 {\", 1);\n+    //~^ ERROR incorrect unicode escape sequence\n+    //~| ERROR argument never used\n+\n+    // note: raw strings don't escape `\\xFF` and `\\u{FF}` sequences\n+    println!(r#\"\\x7B}\\u{8} {\"#, 1);\n+    //~^ ERROR invalid format string: unmatched `}` found\n+\n+    println!(r#\"\\x7B}\\u8 {\"#, 1);\n+    //~^ ERROR invalid format string: unmatched `}` found\n }"}, {"sha": "baab8529940c5ebe79e42d2dbde61dcf3a0c859d", "filename": "src/test/ui/fmt/format-string-error-2.stderr", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7a2779a4624db2b9ef1f114a9a9acf9ca5c29d0c/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a2779a4624db2b9ef1f114a9a9acf9ca5c29d0c/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.stderr?ref=7a2779a4624db2b9ef1f114a9a9acf9ca5c29d0c", "patch": "@@ -1,3 +1,11 @@\n+error: incorrect unicode escape sequence\n+  --> $DIR/format-string-error-2.rs:77:20\n+   |\n+LL |     println!(\"/x7B}/u8 {\", 1);\n+   |                    ^^-\n+   |                    |\n+   |                    help: format of unicode escape sequences uses braces: `/u{8}`\n+\n error: invalid format string: expected `'}'`, found `'a'`\n   --> $DIR/format-string-error-2.rs:5:5\n    |\n@@ -139,5 +147,39 @@ error: 1 positional argument in format string, but no arguments were given\n LL |     println!(\"/t{}\");\n    |                 ^^\n \n-error: aborting due to 14 previous errors\n+error: invalid format string: expected `'}'` but string was terminated\n+  --> $DIR/format-string-error-2.rs:74:27\n+   |\n+LL |     println!(\"/x7B}/u{8} {\", 1);\n+   |                          -^ expected `'}'` in format string\n+   |                          |\n+   |                          because of this opening brace\n+   |\n+   = note: if you intended to print `{`, you can escape it using `{{`\n+\n+error: argument never used\n+  --> $DIR/format-string-error-2.rs:77:28\n+   |\n+LL |     println!(\"/x7B}/u8 {\", 1);\n+   |              ------------  ^ argument never used\n+   |              |\n+   |              formatting specifier missing\n+\n+error: invalid format string: unmatched `}` found\n+  --> $DIR/format-string-error-2.rs:82:21\n+   |\n+LL |     println!(r#\"/x7B}/u{8} {\"#, 1);\n+   |                     ^ unmatched `}` in format string\n+   |\n+   = note: if you intended to print `}`, you can escape it using `}}`\n+\n+error: invalid format string: unmatched `}` found\n+  --> $DIR/format-string-error-2.rs:85:21\n+   |\n+LL |     println!(r#\"/x7B}/u8 {\"#, 1);\n+   |                     ^ unmatched `}` in format string\n+   |\n+   = note: if you intended to print `}`, you can escape it using `}}`\n+\n+error: aborting due to 19 previous errors\n "}, {"sha": "f8a2f1cc7e6c9d2e6035f529dc831b875f5a1ef6", "filename": "src/test/ui/parser/issue-23620-invalid-escapes.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a2779a4624db2b9ef1f114a9a9acf9ca5c29d0c/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2779a4624db2b9ef1f114a9a9acf9ca5c29d0c/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.rs?ref=7a2779a4624db2b9ef1f114a9a9acf9ca5c29d0c", "patch": "@@ -35,4 +35,7 @@ fn main() {\n     //~^ ERROR invalid character in numeric character escape:\n     //~^^ ERROR form of character escape may only be used with characters in the range [\\x00-\\x7f]\n     //~^^^ ERROR incorrect unicode escape sequence\n+\n+    let _ = \"\\u8f\";\n+    //~^ ERROR incorrect unicode escape sequence\n }"}, {"sha": "f6e476ab0cd1d12e62a49f169013cafa8587af85", "filename": "src/test/ui/parser/issue-23620-invalid-escapes.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7a2779a4624db2b9ef1f114a9a9acf9ca5c29d0c/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a2779a4624db2b9ef1f114a9a9acf9ca5c29d0c/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.stderr?ref=7a2779a4624db2b9ef1f114a9a9acf9ca5c29d0c", "patch": "@@ -16,7 +16,7 @@ error: incorrect unicode escape sequence\n LL |     let _ = b'/u';\n    |               ^^\n    |\n-help: format of unicode escape sequences is `/u{\u2026}`\n+help: format of unicode escape sequences is `/u{...}`\n   --> $DIR/issue-23620-invalid-escapes.rs:10:15\n    |\n LL |     let _ = b'/u';\n@@ -82,7 +82,7 @@ error: incorrect unicode escape sequence\n LL |     let _ = b\"/u{a4a4} /xf /u\";\n    |                            ^^\n    |\n-help: format of unicode escape sequences is `/u{\u2026}`\n+help: format of unicode escape sequences is `/u{...}`\n   --> $DIR/issue-23620-invalid-escapes.rs:28:28\n    |\n LL |     let _ = b\"/u{a4a4} /xf /u\";\n@@ -112,11 +112,19 @@ error: incorrect unicode escape sequence\n LL |     let _ = \"/xf /u\";\n    |                  ^^\n    |\n-help: format of unicode escape sequences is `/u{\u2026}`\n+help: format of unicode escape sequences is `/u{...}`\n   --> $DIR/issue-23620-invalid-escapes.rs:34:18\n    |\n LL |     let _ = \"/xf /u\";\n    |                  ^^\n \n-error: aborting due to 17 previous errors\n+error: incorrect unicode escape sequence\n+  --> $DIR/issue-23620-invalid-escapes.rs:39:14\n+   |\n+LL |     let _ = \"/u8f\";\n+   |              ^^--\n+   |              |\n+   |              help: format of unicode escape sequences uses braces: `/u{8f}`\n+\n+error: aborting due to 18 previous errors\n "}]}