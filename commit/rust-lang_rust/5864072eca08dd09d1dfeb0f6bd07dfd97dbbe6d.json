{"sha": "5864072eca08dd09d1dfeb0f6bd07dfd97dbbe6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NjQwNzJlY2EwOGRkMDlkMWRmZWIwZjZiZDA3ZGZkOTdkYmJlNmQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-01T08:19:49Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-01T08:19:49Z"}, "message": "Run rustfmt", "tree": {"sha": "44cc62c023847c8167d4b979d56c98f5cc8eaca6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44cc62c023847c8167d4b979d56c98f5cc8eaca6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5864072eca08dd09d1dfeb0f6bd07dfd97dbbe6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5864072eca08dd09d1dfeb0f6bd07dfd97dbbe6d", "html_url": "https://github.com/rust-lang/rust/commit/5864072eca08dd09d1dfeb0f6bd07dfd97dbbe6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5864072eca08dd09d1dfeb0f6bd07dfd97dbbe6d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "deed00a0a4dae7d643f6aadce46acb8264ee206b", "url": "https://api.github.com/repos/rust-lang/rust/commits/deed00a0a4dae7d643f6aadce46acb8264ee206b", "html_url": "https://github.com/rust-lang/rust/commit/deed00a0a4dae7d643f6aadce46acb8264ee206b"}], "stats": {"total": 53, "additions": 23, "deletions": 30}, "files": [{"sha": "2ad26cbc36e2ed2df9f89043cf3d9f27e07023e3", "filename": "clippy_lints/src/literal_digit_grouping.rs", "status": "modified", "additions": 18, "deletions": 27, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5864072eca08dd09d1dfeb0f6bd07dfd97dbbe6d/clippy_lints%2Fsrc%2Fliteral_digit_grouping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5864072eca08dd09d1dfeb0f6bd07dfd97dbbe6d/clippy_lints%2Fsrc%2Fliteral_digit_grouping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_digit_grouping.rs?ref=5864072eca08dd09d1dfeb0f6bd07dfd97dbbe6d", "patch": "@@ -146,8 +146,7 @@ impl<'a> DigitInfo<'a> {\n         let group_size = self.radix.suggest_grouping();\n         if self.digits.contains('.') {\n             let mut parts = self.digits.split('.');\n-            let int_part_hint = parts\n-                .next()\n+            let int_part_hint = parts.next()\n                 .unwrap()\n                 .chars()\n                 .rev()\n@@ -158,8 +157,7 @@ impl<'a> DigitInfo<'a> {\n                 .rev()\n                 .collect::<Vec<String>>()\n                 .join(\"_\");\n-            let frac_part_hint = parts\n-                .next()\n+            let frac_part_hint = parts.next()\n                 .unwrap()\n                 .chars()\n                 .filter(|&c| c != '_')\n@@ -196,31 +194,25 @@ impl WarningType {\n     pub fn display(&self, grouping_hint: &str, cx: &EarlyContext, span: &syntax_pos::Span) {\n         match *self {\n             WarningType::UnreadableLiteral => {\n-                span_help_and_lint(\n-                    cx,\n-                    UNREADABLE_LITERAL,\n-                    *span,\n-                    \"long literal lacking separators\",\n-                    &format!(\"consider: {}\", grouping_hint),\n-                )\n+                span_help_and_lint(cx,\n+                                   UNREADABLE_LITERAL,\n+                                   *span,\n+                                   \"long literal lacking separators\",\n+                                   &format!(\"consider: {}\", grouping_hint))\n             },\n             WarningType::LargeDigitGroups => {\n-                span_help_and_lint(\n-                    cx,\n-                    LARGE_DIGIT_GROUPS,\n-                    *span,\n-                    \"digit groups should be smaller\",\n-                    &format!(\"consider: {}\", grouping_hint),\n-                )\n+                span_help_and_lint(cx,\n+                                   LARGE_DIGIT_GROUPS,\n+                                   *span,\n+                                   \"digit groups should be smaller\",\n+                                   &format!(\"consider: {}\", grouping_hint))\n             },\n             WarningType::InconsistentDigitGrouping => {\n-                span_help_and_lint(\n-                    cx,\n-                    INCONSISTENT_DIGIT_GROUPING,\n-                    *span,\n-                    \"digits grouped inconsistently by underscores\",\n-                    &format!(\"consider: {}\", grouping_hint),\n-                )\n+                span_help_and_lint(cx,\n+                                   INCONSISTENT_DIGIT_GROUPING,\n+                                   *span,\n+                                   \"digits grouped inconsistently by underscores\",\n+                                   &format!(\"consider: {}\", grouping_hint))\n             },\n         };\n     }\n@@ -317,8 +309,7 @@ impl LiteralDigitGrouping {\n     /// size on success or `WarningType` when emitting a warning.\n     fn do_lint(digits: &str) -> Result<usize, WarningType> {\n         // Grab underscore indices with respect to the units digit.\n-        let underscore_positions: Vec<usize> = digits\n-            .chars()\n+        let underscore_positions: Vec<usize> = digits.chars()\n             .rev()\n             .enumerate()\n             .filter_map(|(idx, digit)| if digit == '_' { Some(idx) } else { None })"}, {"sha": "1804e04d17f2eda20902d832e9b97d33f651e95b", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5864072eca08dd09d1dfeb0f6bd07dfd97dbbe6d/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5864072eca08dd09d1dfeb0f6bd07dfd97dbbe6d/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=5864072eca08dd09d1dfeb0f6bd07dfd97dbbe6d", "patch": "@@ -226,13 +226,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         }\n         for arg in iter_input_pats(decl, body) {\n             match arg.pat.node {\n-                PatKind::Binding(BindingAnnotation::Ref, _, _, _) | PatKind::Binding(BindingAnnotation::RefMut, _, _, _) => {\n+                PatKind::Binding(BindingAnnotation::Ref, _, _, _) |\n+                PatKind::Binding(BindingAnnotation::RefMut, _, _, _) => {\n                     span_lint(cx,\n                               TOPLEVEL_REF_ARG,\n                               arg.pat.span,\n-                              \"`ref` directly on a function argument is ignored. Consider using a reference type instead.\");\n+                              \"`ref` directly on a function argument is ignored. Consider using a reference type \\\n+                               instead.\");\n                 },\n-                _ => {}\n+                _ => {},\n             }\n         }\n     }"}]}