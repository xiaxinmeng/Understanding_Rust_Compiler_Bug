{"sha": "924a9b5cb6af821ef8d763f2c7188bf9869066cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyNGE5YjVjYjZhZjgyMWVmOGQ3NjNmMmM3MTg4YmY5ODY5MDY2Y2Y=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-05-29T23:15:12Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-05-29T23:46:25Z"}, "message": "Allow longer custom comment", "tree": {"sha": "b009a0858fa5584a20f4171a42a9f8afab772c5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b009a0858fa5584a20f4171a42a9f8afab772c5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/924a9b5cb6af821ef8d763f2c7188bf9869066cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/924a9b5cb6af821ef8d763f2c7188bf9869066cf", "html_url": "https://github.com/rust-lang/rust/commit/924a9b5cb6af821ef8d763f2c7188bf9869066cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/924a9b5cb6af821ef8d763f2c7188bf9869066cf/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b79094262f9737b3fd0379fdd2cb0fc6e23008ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/b79094262f9737b3fd0379fdd2cb0fc6e23008ad", "html_url": "https://github.com/rust-lang/rust/commit/b79094262f9737b3fd0379fdd2cb0fc6e23008ad"}], "stats": {"total": 126, "additions": 77, "deletions": 49}, "files": [{"sha": "ac4ec17bbbbc7f1bf0509c8a8634a613de02ba06", "filename": "src/comment.rs", "status": "modified", "additions": 43, "deletions": 48, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/924a9b5cb6af821ef8d763f2c7188bf9869066cf/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924a9b5cb6af821ef8d763f2c7188bf9869066cf/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=924a9b5cb6af821ef8d763f2c7188bf9869066cf", "patch": "@@ -33,91 +33,81 @@ fn is_custom_comment(comment: &str) -> bool {\n }\n \n #[derive(PartialEq, Eq)]\n-pub enum CommentStyle {\n+pub enum CommentStyle<'a> {\n     DoubleSlash,\n     TripleSlash,\n     Doc,\n     SingleBullet,\n     DoubleBullet,\n     Exclamation,\n-    Custom,\n+    Custom(&'a str),\n }\n \n-impl CommentStyle {\n-    pub fn opener<'a>(&self, orig: &'a str) -> &'a str {\n+fn custom_opener(s: &str) -> &str {\n+    s.lines().next().map_or(\"\", |first_line| {\n+        first_line\n+            .find(' ')\n+            .map_or(first_line, |space_index| &first_line[0..space_index + 1])\n+    })\n+}\n+\n+impl<'a> CommentStyle<'a> {\n+    pub fn opener(&self) -> &'a str {\n         match *self {\n             CommentStyle::DoubleSlash => \"// \",\n             CommentStyle::TripleSlash => \"/// \",\n             CommentStyle::Doc => \"//! \",\n             CommentStyle::SingleBullet => \"/* \",\n             CommentStyle::DoubleBullet => \"/** \",\n             CommentStyle::Exclamation => \"/*! \",\n-            CommentStyle::Custom => {\n-                if orig.chars().nth(3) == Some(' ') {\n-                    &orig[0..4]\n-                } else {\n-                    &orig[0..3]\n-                }\n-            }\n+            CommentStyle::Custom(opener) => opener,\n         }\n     }\n \n-    pub fn closer<'a>(&self) -> &'a str {\n+    pub fn closer(&self) -> &'a str {\n         match *self {\n             CommentStyle::DoubleSlash |\n             CommentStyle::TripleSlash |\n-            CommentStyle::Custom |\n+            CommentStyle::Custom(..) |\n             CommentStyle::Doc => \"\",\n             CommentStyle::DoubleBullet => \" **/\",\n             CommentStyle::SingleBullet |\n             CommentStyle::Exclamation => \" */\",\n         }\n     }\n \n-    pub fn line_start<'a>(&self, orig: &'a str) -> &'a str {\n+    pub fn line_start(&self) -> &'a str {\n         match *self {\n             CommentStyle::DoubleSlash => \"// \",\n             CommentStyle::TripleSlash => \"/// \",\n             CommentStyle::Doc => \"//! \",\n             CommentStyle::SingleBullet |\n             CommentStyle::Exclamation => \" * \",\n             CommentStyle::DoubleBullet => \" ** \",\n-            CommentStyle::Custom => {\n-                if orig.chars().nth(3) == Some(' ') {\n-                    &orig[0..4]\n-                } else {\n-                    &orig[0..3]\n-                }\n-            }\n+            CommentStyle::Custom(opener) => opener,\n         }\n     }\n \n-    pub fn to_str_tuplet<'a>(&self, orig: &'a str) -> (&'a str, &'a str, &'a str) {\n-        (self.opener(orig), self.closer(), self.line_start(orig))\n+    pub fn to_str_tuplet(&self) -> (&'a str, &'a str, &'a str) {\n+        (self.opener(), self.closer(), self.line_start())\n     }\n \n-    pub fn line_with_same_comment_style<'a>(&self,\n-                                            line: &str,\n-                                            orig: &'a str,\n-                                            normalize_comments: bool)\n-                                            -> bool {\n+    pub fn line_with_same_comment_style(&self, line: &str, normalize_comments: bool) -> bool {\n         match *self {\n             CommentStyle::DoubleSlash |\n             CommentStyle::TripleSlash |\n-            CommentStyle::Custom |\n             CommentStyle::Doc => {\n-                line.trim_left()\n-                    .starts_with(self.line_start(orig).trim_left()) ||\n+                line.trim_left().starts_with(self.line_start().trim_left()) ||\n                 comment_style(line, normalize_comments) == *self\n             }\n             CommentStyle::DoubleBullet |\n             CommentStyle::SingleBullet |\n             CommentStyle::Exclamation => {\n                 line.trim_left().starts_with(self.closer().trim_left()) ||\n-                line.trim_left()\n-                    .starts_with(self.line_start(orig).trim_left()) ||\n+                line.trim_left().starts_with(self.line_start().trim_left()) ||\n                 comment_style(line, normalize_comments) == *self\n             }\n+            CommentStyle::Custom(opener) => line.trim_left().starts_with(opener.trim_right()),\n         }\n     }\n }\n@@ -130,19 +120,22 @@ fn comment_style(orig: &str, normalize_comments: bool) -> CommentStyle {\n             CommentStyle::Exclamation\n         } else if orig.starts_with(\"/*\") {\n             CommentStyle::SingleBullet\n-        } else if orig.starts_with(\"///\") {\n+        } else if orig.starts_with(\"///\") && orig.chars().nth(3).map_or(true, |c| c != '/') {\n             CommentStyle::TripleSlash\n         } else if orig.starts_with(\"//!\") {\n             CommentStyle::Doc\n+        } else if is_custom_comment(orig) {\n+            CommentStyle::Custom(custom_opener(orig))\n         } else {\n             CommentStyle::DoubleSlash\n         }\n-    } else if orig.starts_with(\"///\") || (orig.starts_with(\"/**\") && !orig.starts_with(\"/**/\")) {\n+    } else if (orig.starts_with(\"///\") && orig.chars().nth(3).map_or(true, |c| c != '/')) ||\n+              (orig.starts_with(\"/**\") && !orig.starts_with(\"/**/\")) {\n         CommentStyle::TripleSlash\n     } else if orig.starts_with(\"//!\") || orig.starts_with(\"/*!\") {\n         CommentStyle::Doc\n     } else if is_custom_comment(orig) {\n-        CommentStyle::Custom\n+        CommentStyle::Custom(custom_opener(orig))\n     } else {\n         CommentStyle::DoubleSlash\n     }\n@@ -177,15 +170,16 @@ fn identify_comment(orig: &str,\n                     -> Option<String> {\n     let style = comment_style(orig, false);\n     let first_group = orig.lines()\n-        .take_while(|l| style.line_with_same_comment_style(l, orig, false))\n+        .take_while(|l| style.line_with_same_comment_style(l, false))\n         .collect::<Vec<_>>()\n         .join(\"\\n\");\n     let rest = orig.lines()\n         .skip(first_group.lines().count())\n         .collect::<Vec<_>>()\n         .join(\"\\n\");\n \n-    let first_group_str = try_opt!(rewrite_comment_inner(&first_group, block_style, shape, config));\n+    let first_group_str =\n+        try_opt!(rewrite_comment_inner(&first_group, block_style, style, shape, config));\n     if rest.is_empty() {\n         Some(first_group_str)\n     } else {\n@@ -202,13 +196,14 @@ fn identify_comment(orig: &str,\n \n fn rewrite_comment_inner(orig: &str,\n                          block_style: bool,\n+                         style: CommentStyle,\n                          shape: Shape,\n                          config: &Config)\n                          -> Option<String> {\n     let (opener, closer, line_start) = if block_style {\n-        CommentStyle::SingleBullet.to_str_tuplet(\"\")\n+        CommentStyle::SingleBullet.to_str_tuplet()\n     } else {\n-        comment_style(orig, config.normalize_comments()).to_str_tuplet(orig)\n+        comment_style(orig, config.normalize_comments()).to_str_tuplet()\n     };\n \n     let max_chars = shape\n@@ -238,7 +233,7 @@ fn rewrite_comment_inner(orig: &str,\n \n             line\n         })\n-        .map(left_trim_comment_line)\n+        .map(|s| left_trim_comment_line(s, &style))\n         .map(|line| if orig.starts_with(\"/*\") && line_breaks == 0 {\n                  line.trim_left()\n              } else {\n@@ -261,7 +256,7 @@ fn rewrite_comment_inner(orig: &str,\n             let rewrite = rewrite_string(line, &fmt).unwrap_or(line.to_owned());\n             result.push_str(&rewrite);\n         } else {\n-            if line.is_empty() {\n+            if line.is_empty() && result.ends_with(' ') {\n                 // Remove space if this is an empty comment or a doc comment.\n                 result.pop();\n             }\n@@ -270,7 +265,7 @@ fn rewrite_comment_inner(orig: &str,\n     }\n \n     result.push_str(closer);\n-    if result == opener {\n+    if result == opener && result.ends_with(' ') {\n         // Trailing space.\n         result.pop();\n     }\n@@ -302,15 +297,15 @@ fn light_rewrite_comment(orig: &str, offset: Indent, config: &Config) -> Option<\n \n /// Trims comment characters and possibly a single space from the left of a string.\n /// Does not trim all whitespace.\n-fn left_trim_comment_line(line: &str) -> &str {\n+fn left_trim_comment_line<'a>(line: &'a str, style: &CommentStyle) -> &'a str {\n     if line.starts_with(\"//! \") || line.starts_with(\"/// \") || line.starts_with(\"/*! \") ||\n        line.starts_with(\"/** \") {\n         &line[4..]\n-    } else if is_custom_comment(line) {\n-        if line.len() > 3 && line.chars().nth(3) == Some(' ') {\n-            &line[4..]\n+    } else if let &CommentStyle::Custom(opener) = style {\n+        if line.starts_with(opener) {\n+            &line[opener.len()..]\n         } else {\n-            &line[3..]\n+            &line[opener.trim_right().len()..]\n         }\n     } else if line.starts_with(\"/* \") || line.starts_with(\"// \") || line.starts_with(\"//!\") ||\n               line.starts_with(\"///\") ||"}, {"sha": "2835d8b2578564de09d1e9bf536d5c2949b4fdfb", "filename": "tests/source/comment5.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/924a9b5cb6af821ef8d763f2c7188bf9869066cf/tests%2Fsource%2Fcomment5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924a9b5cb6af821ef8d763f2c7188bf9869066cf/tests%2Fsource%2Fcomment5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fcomment5.rs?ref=924a9b5cb6af821ef8d763f2c7188bf9869066cf", "patch": "@@ -5,4 +5,10 @@\n //@ Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec adiam lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam\n //@\n //@foo\n-fn test() {}\n\\ No newline at end of file\n+fn test() {}\n+\n+//@@@ another special comment\n+//@@@ Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec adiam lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam\n+//@@@\n+//@@@foo\n+fn bar() {}"}, {"sha": "488962ed9362d52c6060d589620fa8ad48a6811a", "filename": "tests/source/configs-normalize_comments-false.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/924a9b5cb6af821ef8d763f2c7188bf9869066cf/tests%2Fsource%2Fconfigs-normalize_comments-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924a9b5cb6af821ef8d763f2c7188bf9869066cf/tests%2Fsource%2Fconfigs-normalize_comments-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-normalize_comments-false.rs?ref=924a9b5cb6af821ef8d763f2c7188bf9869066cf", "patch": "@@ -6,3 +6,8 @@ fn dolor() -> usize {}\n \n /* sit amet: */\n fn adipiscing() -> usize {}\n+\n+// #652\n+////////////////////////////////////////////////////////////////////////////////\n+// Basic slice extension methods\n+////////////////////////////////////////////////////////////////////////////////"}, {"sha": "c74a9808e61db4bc19313e116c55c4a520b365d8", "filename": "tests/source/configs-normalize_comments-true.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/924a9b5cb6af821ef8d763f2c7188bf9869066cf/tests%2Fsource%2Fconfigs-normalize_comments-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924a9b5cb6af821ef8d763f2c7188bf9869066cf/tests%2Fsource%2Fconfigs-normalize_comments-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-normalize_comments-true.rs?ref=924a9b5cb6af821ef8d763f2c7188bf9869066cf", "patch": "@@ -6,3 +6,8 @@ fn dolor() -> usize {}\n \n /* sit amet: */\n fn adipiscing() -> usize {}\n+\n+// #652\n+////////////////////////////////////////////////////////////////////////////////\n+// Basic slice extension methods\n+////////////////////////////////////////////////////////////////////////////////"}, {"sha": "c52f9b3897741c4634cb02430982dd59ecae6838", "filename": "tests/target/comment5.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/924a9b5cb6af821ef8d763f2c7188bf9869066cf/tests%2Ftarget%2Fcomment5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924a9b5cb6af821ef8d763f2c7188bf9869066cf/tests%2Ftarget%2Fcomment5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fcomment5.rs?ref=924a9b5cb6af821ef8d763f2c7188bf9869066cf", "patch": "@@ -7,3 +7,10 @@\n //@\n //@ foo\n fn test() {}\n+\n+//@@@ another special comment\n+//@@@ Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec adiam\n+//@@@ lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam\n+//@@@\n+//@@@ foo\n+fn bar() {}"}, {"sha": "488962ed9362d52c6060d589620fa8ad48a6811a", "filename": "tests/target/configs-normalize_comments-false.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/924a9b5cb6af821ef8d763f2c7188bf9869066cf/tests%2Ftarget%2Fconfigs-normalize_comments-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924a9b5cb6af821ef8d763f2c7188bf9869066cf/tests%2Ftarget%2Fconfigs-normalize_comments-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-normalize_comments-false.rs?ref=924a9b5cb6af821ef8d763f2c7188bf9869066cf", "patch": "@@ -6,3 +6,8 @@ fn dolor() -> usize {}\n \n /* sit amet: */\n fn adipiscing() -> usize {}\n+\n+// #652\n+////////////////////////////////////////////////////////////////////////////////\n+// Basic slice extension methods\n+////////////////////////////////////////////////////////////////////////////////"}, {"sha": "0bdbe08ab4fde03f6338ebdd794b17f8e0e908c8", "filename": "tests/target/configs-normalize_comments-true.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/924a9b5cb6af821ef8d763f2c7188bf9869066cf/tests%2Ftarget%2Fconfigs-normalize_comments-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924a9b5cb6af821ef8d763f2c7188bf9869066cf/tests%2Ftarget%2Fconfigs-normalize_comments-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-normalize_comments-true.rs?ref=924a9b5cb6af821ef8d763f2c7188bf9869066cf", "patch": "@@ -6,3 +6,8 @@ fn dolor() -> usize {}\n \n // sit amet:\n fn adipiscing() -> usize {}\n+\n+// #652\n+////////////////////////////////////////////////////////////////////////////////\n+// Basic slice extension methods\n+////////////////////////////////////////////////////////////////////////////////"}]}