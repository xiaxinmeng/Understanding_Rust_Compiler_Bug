{"sha": "00e199c974bd304695e6436fcb6b60bca5c8d6f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwZTE5OWM5NzRiZDMwNDY5NWU2NDM2ZmNiNmI2MGJjYTVjOGQ2ZjQ=", "commit": {"author": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2020-03-31T06:28:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-31T06:28:01Z"}, "message": "backport new syntax to rustfmt 1.x (#4105)\n\n* feat: support raw reference operator\r\n\r\n* feat: support const opt-out syntax\r\n\r\n* feat: support half open range syntax", "tree": {"sha": "fa40b9a2cef7aeec52fb1947e0cee98f39580ec6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa40b9a2cef7aeec52fb1947e0cee98f39580ec6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00e199c974bd304695e6436fcb6b60bca5c8d6f4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeguLxCRBK7hj4Ov3rIwAAdHIIAHZUg0vmMoug1CokxwgvaCoS\nFnZtgO1Bmt/CFd22HLFkKNItz0rgAs5idJ3IFzTl4nrLLs42IBf+eAc/xoTIulwJ\nsQJxBx29CQl0BKwG4txB/Lk4FvP/jaY6KG2mH6ge12/AscdoPRJ0Cp2vBhieww91\n8mL1g8chPOR8BkO2UVlOiR8RTjnnLHHK57pmHbT/lgGxcTNhI536LdLQVOi8pHOL\nFK/y0qd6Bdvx7CEMAH7GWIkIgAyB6yt6Xx1g4fT40NQ4Qb9qqd4ObwhgCOQYlf0F\nJfsLqRT+aH/0xVHN4chLtO7C6Fw2FrWzuTnD5x3dX0Qe2qJ0VnwOqCnCsncnvBw=\n=ZYIz\n-----END PGP SIGNATURE-----\n", "payload": "tree fa40b9a2cef7aeec52fb1947e0cee98f39580ec6\nparent 5ca3d023ff6c970e7dcd6cee3c83672dff14dc15\nauthor Caleb Cartwright <calebcartwright@users.noreply.github.com> 1585636081 -0500\ncommitter GitHub <noreply@github.com> 1585636081 +0900\n\nbackport new syntax to rustfmt 1.x (#4105)\n\n* feat: support raw reference operator\r\n\r\n* feat: support const opt-out syntax\r\n\r\n* feat: support half open range syntax"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00e199c974bd304695e6436fcb6b60bca5c8d6f4", "html_url": "https://github.com/rust-lang/rust/commit/00e199c974bd304695e6436fcb6b60bca5c8d6f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00e199c974bd304695e6436fcb6b60bca5c8d6f4/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ca3d023ff6c970e7dcd6cee3c83672dff14dc15", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ca3d023ff6c970e7dcd6cee3c83672dff14dc15", "html_url": "https://github.com/rust-lang/rust/commit/5ca3d023ff6c970e7dcd6cee3c83672dff14dc15"}], "stats": {"total": 191, "additions": 165, "deletions": 26}, "files": [{"sha": "ed10a54c2a3b8ce220a1bc285026a8524198aaf4", "filename": "src/expr.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/00e199c974bd304695e6436fcb6b60bca5c8d6f4/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e199c974bd304695e6436fcb6b60bca5c8d6f4/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=00e199c974bd304695e6436fcb6b60bca5c8d6f4", "patch": "@@ -1988,14 +1988,16 @@ pub(crate) fn prefer_next_line(\n \n fn rewrite_expr_addrof(\n     context: &RewriteContext<'_>,\n-    _borrow_kind: ast::BorrowKind,\n+    borrow_kind: ast::BorrowKind,\n     mutability: ast::Mutability,\n     expr: &ast::Expr,\n     shape: Shape,\n ) -> Option<String> {\n-    let operator_str = match mutability {\n-        ast::Mutability::Not => \"&\",\n-        ast::Mutability::Mut => \"&mut \",\n+    let operator_str = match (mutability, borrow_kind) {\n+        (ast::Mutability::Not, ast::BorrowKind::Ref) => \"&\",\n+        (ast::Mutability::Not, ast::BorrowKind::Raw) => \"&raw const \",\n+        (ast::Mutability::Mut, ast::BorrowKind::Ref) => \"&mut \",\n+        (ast::Mutability::Mut, ast::BorrowKind::Raw) => \"&raw mut \",\n     };\n     rewrite_unary_prefix(context, operator_str, expr, shape)\n }"}, {"sha": "5847bd08d801775a4756b652e87bc3a0654b8c12", "filename": "src/patterns.rs", "status": "modified", "additions": 37, "deletions": 21, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/00e199c974bd304695e6436fcb6b60bca5c8d6f4/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e199c974bd304695e6436fcb6b60bca5c8d6f4/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=00e199c974bd304695e6436fcb6b60bca5c8d6f4", "patch": "@@ -55,6 +55,17 @@ fn is_short_pattern_inner(pat: &ast::Pat) -> bool {\n     }\n }\n \n+struct RangeOperand<'a>(&'a Option<ptr::P<ast::Expr>>);\n+\n+impl<'a> Rewrite for RangeOperand<'a> {\n+    fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n+        match &self.0 {\n+            None => Some(\"\".to_owned()),\n+            Some(ref exp) => exp.rewrite(context, shape),\n+        }\n+    }\n+}\n+\n impl Rewrite for Pat {\n     fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n         match self.kind {\n@@ -179,29 +190,34 @@ impl Rewrite for Pat {\n                     None\n                 }\n             }\n-            PatKind::Range(ref lhs, ref rhs, ref end_kind) => match (lhs, rhs) {\n-                (Some(lhs), Some(rhs)) => {\n-                    let infix = match end_kind.node {\n-                        RangeEnd::Included(RangeSyntax::DotDotDot) => \"...\",\n-                        RangeEnd::Included(RangeSyntax::DotDotEq) => \"..=\",\n-                        RangeEnd::Excluded => \"..\",\n+            PatKind::Range(ref lhs, ref rhs, ref end_kind) => {\n+                let infix = match end_kind.node {\n+                    RangeEnd::Included(RangeSyntax::DotDotDot) => \"...\",\n+                    RangeEnd::Included(RangeSyntax::DotDotEq) => \"..=\",\n+                    RangeEnd::Excluded => \"..\",\n+                };\n+                let infix = if context.config.spaces_around_ranges() {\n+                    let lhs_spacing = match lhs {\n+                        None => \"\",\n+                        Some(_) => \" \",\n                     };\n-                    let infix = if context.config.spaces_around_ranges() {\n-                        format!(\" {} \", infix)\n-                    } else {\n-                        infix.to_owned()\n+                    let rhs_spacing = match rhs {\n+                        None => \"\",\n+                        Some(_) => \" \",\n                     };\n-                    rewrite_pair(\n-                        &**lhs,\n-                        &**rhs,\n-                        PairParts::infix(&infix),\n-                        context,\n-                        shape,\n-                        SeparatorPlace::Front,\n-                    )\n-                }\n-                (_, _) => unimplemented!(),\n-            },\n+                    format!(\"{}{}{}\", lhs_spacing, infix, rhs_spacing)\n+                } else {\n+                    infix.to_owned()\n+                };\n+                rewrite_pair(\n+                    &RangeOperand(lhs),\n+                    &RangeOperand(rhs),\n+                    PairParts::infix(&infix),\n+                    context,\n+                    shape,\n+                    SeparatorPlace::Front,\n+                )\n+            }\n             PatKind::Ref(ref pat, mutability) => {\n                 let prefix = format!(\"&{}\", format_mutability(mutability));\n                 rewrite_unary_prefix(context, &prefix, &**pat, shape)"}, {"sha": "96e331779c4eb7cca0e256579280c86c3c5adb2a", "filename": "src/types.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/00e199c974bd304695e6436fcb6b60bca5c8d6f4/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e199c974bd304695e6436fcb6b60bca5c8d6f4/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=00e199c974bd304695e6436fcb6b60bca5c8d6f4", "patch": "@@ -527,7 +527,12 @@ impl Rewrite for ast::GenericBound {\n                     ast::TraitBoundModifier::Maybe => poly_trait_ref\n                         .rewrite(context, shape.offset_left(1)?)\n                         .map(|s| format!(\"?{}\", s)),\n-                    _ => unimplemented!(),\n+                    ast::TraitBoundModifier::MaybeConst => poly_trait_ref\n+                        .rewrite(context, shape.offset_left(7)?)\n+                        .map(|s| format!(\"?const {}\", s)),\n+                    ast::TraitBoundModifier::MaybeConstMaybe => poly_trait_ref\n+                        .rewrite(context, shape.offset_left(8)?)\n+                        .map(|s| format!(\"?const ?{}\", s)),\n                 };\n                 rewrite.map(|s| if has_paren { format!(\"({})\", s) } else { s })\n             }"}, {"sha": "1878c68a5a0c4c3b1630fce5ae52e11b96e14778", "filename": "tests/source/configs/spaces_around_ranges/false.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/00e199c974bd304695e6436fcb6b60bca5c8d6f4/tests%2Fsource%2Fconfigs%2Fspaces_around_ranges%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e199c974bd304695e6436fcb6b60bca5c8d6f4/tests%2Fsource%2Fconfigs%2Fspaces_around_ranges%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Fspaces_around_ranges%2Ffalse.rs?ref=00e199c974bd304695e6436fcb6b60bca5c8d6f4", "patch": "@@ -20,3 +20,15 @@ fn main() {\n         _ => bar,\n     }\n }\n+\n+fn half_open() {\n+    match [5 .. 4, 99 .. 105, 43 .. 44] {\n+        [_, 99 .., _] => {}\n+        [_, .. 105, _] => {}\n+        _ => {}\n+    };\n+\n+    if let ..=   5 = 0 {}\n+    if let .. 5 = 0 {}\n+    if let 5 .. = 0 {}\n+}"}, {"sha": "0eadfb2851579ba855ec504b520071e8d2573b7d", "filename": "tests/source/configs/spaces_around_ranges/true.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/00e199c974bd304695e6436fcb6b60bca5c8d6f4/tests%2Fsource%2Fconfigs%2Fspaces_around_ranges%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e199c974bd304695e6436fcb6b60bca5c8d6f4/tests%2Fsource%2Fconfigs%2Fspaces_around_ranges%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Fspaces_around_ranges%2Ftrue.rs?ref=00e199c974bd304695e6436fcb6b60bca5c8d6f4", "patch": "@@ -20,3 +20,15 @@ fn main() {\n         _ => bar,\n     }\n }\n+\n+fn half_open() {\n+    match [5..4, 99..105, 43..44] {\n+        [_, 99.., _] => {}\n+        [_, ..105, _] => {}\n+        _ => {}\n+    };\n+\n+    if let ..=5 = 0 {}\n+    if let ..5 = 0 {}\n+    if let 5.. = 0 {}\n+}"}, {"sha": "8a6e6f1aa2bcd48952f5b25adccea244f10774ab", "filename": "tests/source/expr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00e199c974bd304695e6436fcb6b60bca5c8d6f4/tests%2Fsource%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e199c974bd304695e6436fcb6b60bca5c8d6f4/tests%2Fsource%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr.rs?ref=00e199c974bd304695e6436fcb6b60bca5c8d6f4", "patch": "@@ -218,6 +218,10 @@ fn returns() {\n fn addrof() {\n     &    mut(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa+bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb);\n     &    (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa+bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb);\n+\n+    // raw reference operator\n+    & raw   const  a;\n+    & raw   mut    b;\n }\n \n fn casts() {"}, {"sha": "eb4600e5bce94194451c2e4bdf79cdc967fd342d", "filename": "tests/source/type.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/00e199c974bd304695e6436fcb6b60bca5c8d6f4/tests%2Fsource%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e199c974bd304695e6436fcb6b60bca5c8d6f4/tests%2Fsource%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ftype.rs?ref=00e199c974bd304695e6436fcb6b60bca5c8d6f4", "patch": "@@ -139,3 +139,30 @@ fn foo(a: SomeLongComplexType, b: SomeOtherLongComplexType) -> Box<Future<Item =\n }\n \n type MyFn = fn(a: SomeLongComplexType, b: SomeOtherLongComplexType,) -> Box<Future<Item = AnotherLongType, Error = ALongErrorType>>;\n+\n+// Const opt-out\n+\n+trait T: ?   const  Super {}\n+\n+const fn maybe_const<S: ?   const    T>() -> i32 { <S as T>::CONST }\n+\n+struct S<T:?  const   ?  Sized>(std::marker::PhantomData<T>);\n+\n+impl ?    const T {}\n+\n+fn trait_object() -> &'static dyn ?  const T { &S }\n+\n+fn i(_: impl IntoIterator<Item = Box<dyn ?    const    T>>) {}\n+\n+fn apit(_: impl ?const T) {}\n+\n+fn rpit() -> impl ?  const T { S }\n+\n+pub struct Foo<T: Trait>(T);\n+impl<T:   ?  const Trait> Foo<T> {\n+    fn new(t: T) -> Self {\n+        // not calling methods on `t`, so we opt out of requiring\n+        // `<T as Trait>` to have const methods via `?const`\n+        Self(t)\n+    }\n+}"}, {"sha": "72b1be4804c644254259abbd6454a2767e2110db", "filename": "tests/target/configs/spaces_around_ranges/false.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/00e199c974bd304695e6436fcb6b60bca5c8d6f4/tests%2Ftarget%2Fconfigs%2Fspaces_around_ranges%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e199c974bd304695e6436fcb6b60bca5c8d6f4/tests%2Ftarget%2Fconfigs%2Fspaces_around_ranges%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Fspaces_around_ranges%2Ffalse.rs?ref=00e199c974bd304695e6436fcb6b60bca5c8d6f4", "patch": "@@ -20,3 +20,15 @@ fn main() {\n         _ => bar,\n     }\n }\n+\n+fn half_open() {\n+    match [5..4, 99..105, 43..44] {\n+        [_, 99.., _] => {}\n+        [_, ..105, _] => {}\n+        _ => {}\n+    };\n+\n+    if let ..=5 = 0 {}\n+    if let ..5 = 0 {}\n+    if let 5.. = 0 {}\n+}"}, {"sha": "c56fdbb02b6815bb572b51e3b3b0df3cf9ef48ca", "filename": "tests/target/configs/spaces_around_ranges/true.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/00e199c974bd304695e6436fcb6b60bca5c8d6f4/tests%2Ftarget%2Fconfigs%2Fspaces_around_ranges%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e199c974bd304695e6436fcb6b60bca5c8d6f4/tests%2Ftarget%2Fconfigs%2Fspaces_around_ranges%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Fspaces_around_ranges%2Ftrue.rs?ref=00e199c974bd304695e6436fcb6b60bca5c8d6f4", "patch": "@@ -20,3 +20,15 @@ fn main() {\n         _ => bar,\n     }\n }\n+\n+fn half_open() {\n+    match [5 .. 4, 99 .. 105, 43 .. 44] {\n+        [_, 99 .., _] => {}\n+        [_, .. 105, _] => {}\n+        _ => {}\n+    };\n+\n+    if let ..= 5 = 0 {}\n+    if let .. 5 = 0 {}\n+    if let 5 .. = 0 {}\n+}"}, {"sha": "5d9e972066cebdfd3f6f163194f19fdc512a4f80", "filename": "tests/target/expr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00e199c974bd304695e6436fcb6b60bca5c8d6f4/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e199c974bd304695e6436fcb6b60bca5c8d6f4/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=00e199c974bd304695e6436fcb6b60bca5c8d6f4", "patch": "@@ -253,6 +253,10 @@ fn addrof() {\n         + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb);\n     &(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n         + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb);\n+\n+    // raw reference operator\n+    &raw const a;\n+    &raw mut b;\n }\n \n fn casts() {"}, {"sha": "20e97440e7cfcc2134f08c183ec45b57b9ceeee6", "filename": "tests/target/type.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/00e199c974bd304695e6436fcb6b60bca5c8d6f4/tests%2Ftarget%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e199c974bd304695e6436fcb6b60bca5c8d6f4/tests%2Ftarget%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftype.rs?ref=00e199c974bd304695e6436fcb6b60bca5c8d6f4", "patch": "@@ -144,3 +144,36 @@ type MyFn = fn(\n     a: SomeLongComplexType,\n     b: SomeOtherLongComplexType,\n ) -> Box<Future<Item = AnotherLongType, Error = ALongErrorType>>;\n+\n+// Const opt-out\n+\n+trait T: ?const Super {}\n+\n+const fn maybe_const<S: ?const T>() -> i32 {\n+    <S as T>::CONST\n+}\n+\n+struct S<T: ?const ?Sized>(std::marker::PhantomData<T>);\n+\n+impl ?const T {}\n+\n+fn trait_object() -> &'static dyn ?const T {\n+    &S\n+}\n+\n+fn i(_: impl IntoIterator<Item = Box<dyn ?const T>>) {}\n+\n+fn apit(_: impl ?const T) {}\n+\n+fn rpit() -> impl ?const T {\n+    S\n+}\n+\n+pub struct Foo<T: Trait>(T);\n+impl<T: ?const Trait> Foo<T> {\n+    fn new(t: T) -> Self {\n+        // not calling methods on `t`, so we opt out of requiring\n+        // `<T as Trait>` to have const methods via `?const`\n+        Self(t)\n+    }\n+}"}]}