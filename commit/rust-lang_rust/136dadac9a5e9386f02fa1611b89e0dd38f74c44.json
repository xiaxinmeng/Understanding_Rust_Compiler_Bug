{"sha": "136dadac9a5e9386f02fa1611b89e0dd38f74c44", "node_id": "C_kwDOAAsO6NoAKDEzNmRhZGFjOWE1ZTkzODZmMDJmYTE2MTFiODllMGRkMzhmNzRjNDQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-02-02T14:14:43Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-02-03T14:52:03Z"}, "message": "Add completion module tailored towards visibility modifiers", "tree": {"sha": "98953eda098d9818211563b2b46b032d706a54e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98953eda098d9818211563b2b46b032d706a54e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/136dadac9a5e9386f02fa1611b89e0dd38f74c44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/136dadac9a5e9386f02fa1611b89e0dd38f74c44", "html_url": "https://github.com/rust-lang/rust/commit/136dadac9a5e9386f02fa1611b89e0dd38f74c44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/136dadac9a5e9386f02fa1611b89e0dd38f74c44/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "661d721e20c5f7ba868cd5b259f2df7b0248c568", "url": "https://api.github.com/repos/rust-lang/rust/commits/661d721e20c5f7ba868cd5b259f2df7b0248c568", "html_url": "https://github.com/rust-lang/rust/commit/661d721e20c5f7ba868cd5b259f2df7b0248c568"}], "stats": {"total": 114, "additions": 76, "deletions": 38}, "files": [{"sha": "be056a9b63b288905e270f3d85349cbfdb37d059", "filename": "crates/ide_completion/src/completions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/136dadac9a5e9386f02fa1611b89e0dd38f74c44/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/136dadac9a5e9386f02fa1611b89e0dd38f74c44/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions.rs?ref=136dadac9a5e9386f02fa1611b89e0dd38f74c44", "patch": "@@ -8,14 +8,15 @@ pub(crate) mod format_string;\n pub(crate) mod keyword;\n pub(crate) mod lifetime;\n pub(crate) mod mod_;\n-pub(crate) mod use_;\n pub(crate) mod pattern;\n pub(crate) mod postfix;\n pub(crate) mod qualified_path;\n pub(crate) mod record;\n pub(crate) mod snippet;\n pub(crate) mod trait_impl;\n pub(crate) mod unqualified_path;\n+pub(crate) mod use_;\n+pub(crate) mod vis;\n \n use std::iter;\n "}, {"sha": "7403e02458637e30b92423ede69043668d6de104", "filename": "crates/ide_completion/src/completions/keyword.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/136dadac9a5e9386f02fa1611b89e0dd38f74c44/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/136dadac9a5e9386f02fa1611b89e0dd38f74c44/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=136dadac9a5e9386f02fa1611b89e0dd38f74c44", "patch": "@@ -34,11 +34,7 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n     let has_block_expr_parent = ctx.has_block_expr_parent();\n     let expects_item = ctx.expects_item();\n \n-    if let Some(PathKind::Vis { has_in_token }) = ctx.path_kind() {\n-        if !has_in_token {\n-            cov_mark::hit!(kw_completion_in);\n-            add_keyword(\"in\", \"in\");\n-        }\n+    if let Some(PathKind::Vis { .. }) = ctx.path_kind() {\n         return;\n     }\n     if ctx.has_impl_or_trait_prev_sibling() {"}, {"sha": "3ddbd5e2a2af4e709539711bba18b9ce51a21099", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/136dadac9a5e9386f02fa1611b89e0dd38f74c44/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/136dadac9a5e9386f02fa1611b89e0dd38f74c44/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=136dadac9a5e9386f02fa1611b89e0dd38f74c44", "patch": "@@ -62,26 +62,7 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n     }\n \n     match kind {\n-        // Complete next child module that comes after the qualified module which is still our parent\n-        Some(PathKind::Vis { .. }) => {\n-            if let hir::PathResolution::Def(hir::ModuleDef::Module(module)) = resolution {\n-                if let Some(current_module) = ctx.module {\n-                    let next_towards_current = current_module\n-                        .path_to_root(ctx.db)\n-                        .into_iter()\n-                        .take_while(|it| it != module)\n-                        .next();\n-                    if let Some(next) = next_towards_current {\n-                        if let Some(name) = next.name(ctx.db) {\n-                            cov_mark::hit!(visibility_qualified);\n-                            acc.add_resolution(ctx, name, ScopeDef::ModuleDef(next.into()));\n-                        }\n-                    }\n-                }\n-            }\n-            return;\n-        }\n-        Some(PathKind::Attr { .. } | PathKind::Use) => {\n+        Some(PathKind::Attr { .. } | PathKind::Vis { .. } | PathKind::Use) => {\n             return;\n         }\n         Some(PathKind::Pat) => (),"}, {"sha": "b7f6d8d883fb67ecb819334dbdd3c8faf66cf81a", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/136dadac9a5e9386f02fa1611b89e0dd38f74c44/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/136dadac9a5e9386f02fa1611b89e0dd38f74c44/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=136dadac9a5e9386f02fa1611b89e0dd38f74c44", "patch": "@@ -15,15 +15,15 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n     if ctx.is_path_disallowed() || ctx.has_impl_or_trait_prev_sibling() {\n         return;\n     }\n-    let kind = match ctx.path_context {\n-        Some(PathCompletionContext { is_trivial_path: true, kind, .. }) => kind,\n+    match ctx.path_context {\n+        Some(PathCompletionContext {\n+            kind: Some(PathKind::Vis { .. } | PathKind::Attr { .. } | PathKind::Use { .. }),\n+            ..\n+        }) => return,\n+        Some(PathCompletionContext { is_trivial_path: true, .. }) => (),\n         _ => return,\n-    };\n-\n-    match kind {\n-        Some(PathKind::Vis { .. } | PathKind::Attr { .. } | PathKind::Use { .. }) => return,\n-        _ => (),\n     }\n+\n     [\"self\", \"super\", \"crate\"].into_iter().for_each(|kw| acc.add_keyword(ctx, kw));\n \n     match &ctx.completion_location {"}, {"sha": "222f95258e6ee1c81141a9ab388bca5218bb4ab4", "filename": "crates/ide_completion/src/completions/use_.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/136dadac9a5e9386f02fa1611b89e0dd38f74c44/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fuse_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/136dadac9a5e9386f02fa1611b89e0dd38f74c44/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fuse_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fuse_.rs?ref=136dadac9a5e9386f02fa1611b89e0dd38f74c44", "patch": "@@ -1,8 +1,4 @@\n //! Completion for use trees\n-//!\n-//! This module uses a bit of static metadata to provide completions\n-//! for built-in attributes.\n-//! Non-built-in attribute (excluding derives attributes) completions are done in [`super::unqualified_path`].\n \n use std::iter;\n "}, {"sha": "0ac1393b53f49bdad1b3d79742d4945d181c1969", "filename": "crates/ide_completion/src/completions/vis.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/136dadac9a5e9386f02fa1611b89e0dd38f74c44/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fvis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/136dadac9a5e9386f02fa1611b89e0dd38f74c44/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fvis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fvis.rs?ref=136dadac9a5e9386f02fa1611b89e0dd38f74c44", "patch": "@@ -0,0 +1,56 @@\n+//! Completion for visibility specifiers.\n+\n+use std::iter;\n+\n+use hir::ScopeDef;\n+\n+use crate::{\n+    context::{CompletionContext, PathCompletionContext, PathKind},\n+    Completions,\n+};\n+\n+pub(crate) fn complete_vis(acc: &mut Completions, ctx: &CompletionContext) {\n+    let (is_trivial_path, qualifier, has_in_token) = match ctx.path_context {\n+        Some(PathCompletionContext {\n+            kind: Some(PathKind::Vis { has_in_token }),\n+            is_trivial_path,\n+            ref qualifier,\n+            ..\n+        }) => (is_trivial_path, qualifier, has_in_token),\n+        _ => return,\n+    };\n+\n+    match qualifier {\n+        Some((path, qualifier)) => {\n+            if let Some(hir::PathResolution::Def(hir::ModuleDef::Module(module))) = qualifier {\n+                if let Some(current_module) = ctx.module {\n+                    let next_towards_current = current_module\n+                        .path_to_root(ctx.db)\n+                        .into_iter()\n+                        .take_while(|it| it != module)\n+                        .next();\n+                    if let Some(next) = next_towards_current {\n+                        if let Some(name) = next.name(ctx.db) {\n+                            cov_mark::hit!(visibility_qualified);\n+                            acc.add_resolution(ctx, name, ScopeDef::ModuleDef(next.into()));\n+                        }\n+                    }\n+                }\n+            }\n+\n+            let is_super_chain = iter::successors(Some(path.clone()), |p| p.qualifier())\n+                .all(|p| p.segment().and_then(|s| s.super_token()).is_some());\n+            if is_super_chain {\n+                acc.add_keyword(ctx, \"super::\");\n+            }\n+        }\n+        None if is_trivial_path => {\n+            if !has_in_token {\n+                cov_mark::hit!(kw_completion_in);\n+                acc.add_keyword(ctx, \"in\");\n+            }\n+            [\"self\", \"super\", \"crate\"].into_iter().for_each(|kw| acc.add_keyword(ctx, kw));\n+        }\n+        _ => {}\n+    }\n+}"}, {"sha": "f0cd125973a2fbdef71042e331c9209cd13d235d", "filename": "crates/ide_completion/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/136dadac9a5e9386f02fa1611b89e0dd38f74c44/crates%2Fide_completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/136dadac9a5e9386f02fa1611b89e0dd38f74c44/crates%2Fide_completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Flib.rs?ref=136dadac9a5e9386f02fa1611b89e0dd38f74c44", "patch": "@@ -154,6 +154,7 @@ pub fn completions(\n     completions::attribute::complete_known_attribute_input(&mut acc, &ctx);\n     completions::attribute::complete_attribute(&mut acc, &ctx);\n     completions::use_::complete_use_tree(&mut acc, &ctx);\n+    completions::vis::complete_vis(&mut acc, &ctx);\n     completions::fn_param::complete_fn_param(&mut acc, &ctx);\n     completions::keyword::complete_expr_keyword(&mut acc, &ctx);\n     completions::snippet::complete_expr_snippet(&mut acc, &ctx);"}, {"sha": "2fd16235dc6a7ea57593243a3088b1ec3dcbb8f8", "filename": "crates/ide_completion/src/tests/visibility.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/136dadac9a5e9386f02fa1611b89e0dd38f74c44/crates%2Fide_completion%2Fsrc%2Ftests%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/136dadac9a5e9386f02fa1611b89e0dd38f74c44/crates%2Fide_completion%2Fsrc%2Ftests%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fvisibility.rs?ref=136dadac9a5e9386f02fa1611b89e0dd38f74c44", "patch": "@@ -17,6 +17,9 @@ pub($0)\n \"#,\n         expect![[r#\"\n             kw in\n+            kw self\n+            kw super\n+            kw crate\n         \"#]],\n     );\n }\n@@ -27,7 +30,11 @@ fn after_in_kw() {\n         r#\"\n pub(in $0)\n \"#,\n-        expect![[r#\"\"#]],\n+        expect![[r#\"\n+            kw self\n+            kw super\n+            kw crate\n+        \"#]],\n     );\n }\n "}]}