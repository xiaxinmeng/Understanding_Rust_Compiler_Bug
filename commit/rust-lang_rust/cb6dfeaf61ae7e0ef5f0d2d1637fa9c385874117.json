{"sha": "cb6dfeaf61ae7e0ef5f0d2d1637fa9c385874117", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNmRmZWFmNjFhZTdlMGVmNWYwZDJkMTYzN2ZhOWMzODU4NzQxMTc=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-02T08:54:13Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-02T19:53:10Z"}, "message": "Suggest `?Sized` on type parameters", "tree": {"sha": "1d255fb537b8df33436121cc8ad538a8e8ae0fb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d255fb537b8df33436121cc8ad538a8e8ae0fb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb6dfeaf61ae7e0ef5f0d2d1637fa9c385874117", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb6dfeaf61ae7e0ef5f0d2d1637fa9c385874117", "html_url": "https://github.com/rust-lang/rust/commit/cb6dfeaf61ae7e0ef5f0d2d1637fa9c385874117", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb6dfeaf61ae7e0ef5f0d2d1637fa9c385874117/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "542130bde94decf458cdeec2a6d61314fb1f427a", "url": "https://api.github.com/repos/rust-lang/rust/commits/542130bde94decf458cdeec2a6d61314fb1f427a", "html_url": "https://github.com/rust-lang/rust/commit/542130bde94decf458cdeec2a6d61314fb1f427a"}], "stats": {"total": 66, "additions": 60, "deletions": 6}, "files": [{"sha": "0b627f9d15e0a2aaa86aa22dfe576b1bb359a88f", "filename": "src/librustc/traits/error_reporting/mod.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/cb6dfeaf61ae7e0ef5f0d2d1637fa9c385874117/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6dfeaf61ae7e0ef5f0d2d1637fa9c385874117/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=cb6dfeaf61ae7e0ef5f0d2d1637fa9c385874117", "patch": "@@ -1340,6 +1340,44 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 &obligation.cause.code,\n                 &mut vec![],\n             );\n+            self.suggest_unsized_bound_if_applicable(err, obligation);\n+        }\n+    }\n+\n+    fn suggest_unsized_bound_if_applicable(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        obligation: &PredicateObligation<'tcx>,\n+    ) {\n+        if let (\n+            ty::Predicate::Trait(pred, _),\n+            ObligationCauseCode::BindingObligation(item_def_id, span),\n+        ) = (&obligation.predicate, &obligation.cause.code)\n+        {\n+            if let (Some(generics), true) = (\n+                self.tcx.hir().get_if_local(*item_def_id).as_ref().and_then(|n| n.generics()),\n+                Some(pred.def_id()) == self.tcx.lang_items().sized_trait(),\n+            ) {\n+                for param in generics.params {\n+                    if param.span == *span\n+                        && !param.bounds.iter().any(|bound| {\n+                            bound.trait_def_id() == self.tcx.lang_items().sized_trait()\n+                        })\n+                    {\n+                        let (span, separator) = match param.bounds {\n+                            [] => (span.shrink_to_hi(), \":\"),\n+                            [.., bound] => (bound.span().shrink_to_hi(), \" + \"),\n+                        };\n+                        err.span_suggestion(\n+                            span,\n+                            \"consider relaxing the implicit `Sized` restriction\",\n+                            format!(\"{} ?Sized\", separator),\n+                            Applicability::MachineApplicable,\n+                        );\n+                        return;\n+                    }\n+                }\n+            }\n         }\n     }\n "}, {"sha": "0c9165fd9585d4d84d497d8d589eaac8b02b313c", "filename": "src/test/ui/extern/extern-types-unsized.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb6dfeaf61ae7e0ef5f0d2d1637fa9c385874117/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb6dfeaf61ae7e0ef5f0d2d1637fa9c385874117/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr?ref=cb6dfeaf61ae7e0ef5f0d2d1637fa9c385874117", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the size for values of type `A` cannot be known at compilation tim\n   --> $DIR/extern-types-unsized.rs:22:20\n    |\n LL | fn assert_sized<T>() { }\n-   |    ------------ - required by this bound in `assert_sized`\n+   |    ------------ -- help: consider relaxing the implicit `Sized` restriction: `: ?Sized`\n+   |                 |\n+   |                 required by this bound in `assert_sized`\n ...\n LL |     assert_sized::<A>();\n    |                    ^ doesn't have a size known at compile-time"}, {"sha": "a9ec6b9c02fe8e4987a839c1e0549a441fdc467d", "filename": "src/test/ui/str/str-mut-idx.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb6dfeaf61ae7e0ef5f0d2d1637fa9c385874117/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb6dfeaf61ae7e0ef5f0d2d1637fa9c385874117/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr?ref=cb6dfeaf61ae7e0ef5f0d2d1637fa9c385874117", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the size for values of type `str` cannot be known at compilation t\n   --> $DIR/str-mut-idx.rs:4:15\n    |\n LL | fn bot<T>() -> T { loop {} }\n-   |    --- - required by this bound in `bot`\n+   |    --- -- help: consider relaxing the implicit `Sized` restriction: `: ?Sized`\n+   |        |\n+   |        required by this bound in `bot`\n ...\n LL |     s[1..2] = bot();\n    |               ^^^ doesn't have a size known at compile-time"}, {"sha": "0c37828229e343347fecc7ca65a5553f42e97882", "filename": "src/test/ui/unsized3.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cb6dfeaf61ae7e0ef5f0d2d1637fa9c385874117/src%2Ftest%2Fui%2Funsized3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb6dfeaf61ae7e0ef5f0d2d1637fa9c385874117/src%2Ftest%2Fui%2Funsized3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized3.stderr?ref=cb6dfeaf61ae7e0ef5f0d2d1637fa9c385874117", "patch": "@@ -1,8 +1,6 @@\n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized3.rs:7:13\n    |\n-LL | fn f1<X: ?Sized>(x: &X) {\n-   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n LL |     f2::<X>(x);\n    |             ^ doesn't have a size known at compile-time\n ...\n@@ -11,12 +9,18 @@ LL | fn f2<X>(x: &X) {\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+help: consider further restricting this bound\n+   |\n+LL | fn f1<X: std::marker::Sized +  ?Sized>(x: &X) {\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL | fn f2<X: ?Sized>(x: &X) {\n+   |        ^^^^^^^^\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized3.rs:18:13\n    |\n-LL | fn f3<X: ?Sized + T>(x: &X) {\n-   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n LL |     f4::<X>(x);\n    |             ^ doesn't have a size known at compile-time\n ...\n@@ -25,6 +29,14 @@ LL | fn f4<X: T>(x: &X) {\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+help: consider further restricting this bound\n+   |\n+LL | fn f3<X: std::marker::Sized +  ?Sized + T>(x: &X) {\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL | fn f4<X: T +  ?Sized>(x: &X) {\n+   |            ^^^^^^^^^\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized3.rs:33:8"}]}