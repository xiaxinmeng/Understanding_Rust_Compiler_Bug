{"sha": "2ab1084ed44284e4f1d44c2a5b4e982a5539d37d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhYjEwODRlZDQ0Mjg0ZTRmMWQ0NGMyYTViNGU5ODJhNTUzOWQzN2Q=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-07-12T18:27:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-12T18:27:45Z"}, "message": "Add simple profile filter rust script (#1065)", "tree": {"sha": "58f0af0b0e9b3a87cc559382bdc6333a7efcfabe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58f0af0b0e9b3a87cc559382bdc6333a7efcfabe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ab1084ed44284e4f1d44c2a5b4e982a5539d37d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfC1YhCRBK7hj4Ov3rIwAAdHIIAGvBFhRz46R/5yBDcfzRyLio\nhtzZ/6xyzM4Z+Q6Rem397GYbD/Q21jjvdn1sg5iVq8MaaAHS1qgDGTpGL883rBoe\nsdK+1Gk8ETN9UYncEqVe9MDg2keTBTzZS79Ud/Lit3aClCoIKdXL97cd5Qw9/xyS\nsmZgBtYC6IzUKNMU/O96xI1/Ru7ndmg3Gp7fdnzOrYyeBqBkz0Td+T1/8DEuB18j\njccnQX6sLU0CuoVsQ/0EfNzlYiwuUonp3z6zHDcFURjzu1DFX7AHBqWt7vg89ZE2\njuru5ip/10K+MTXHSSgVxKvoVSgSpqyOlsb9ErZPofxM0GhGhWSE9t7h5/ECv94=\n=KKG5\n-----END PGP SIGNATURE-----\n", "payload": "tree 58f0af0b0e9b3a87cc559382bdc6333a7efcfabe\nparent 190e36a5f8ba49140df2bd9abf0cadd06ea89822\nauthor bjorn3 <bjorn3@users.noreply.github.com> 1594578465 +0200\ncommitter GitHub <noreply@github.com> 1594578465 +0200\n\nAdd simple profile filter rust script (#1065)\n\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ab1084ed44284e4f1d44c2a5b4e982a5539d37d", "html_url": "https://github.com/rust-lang/rust/commit/2ab1084ed44284e4f1d44c2a5b4e982a5539d37d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ab1084ed44284e4f1d44c2a5b4e982a5539d37d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "190e36a5f8ba49140df2bd9abf0cadd06ea89822", "url": "https://api.github.com/repos/rust-lang/rust/commits/190e36a5f8ba49140df2bd9abf0cadd06ea89822", "html_url": "https://github.com/rust-lang/rust/commit/190e36a5f8ba49140df2bd9abf0cadd06ea89822"}], "stats": {"total": 124, "additions": 124, "deletions": 0}, "files": [{"sha": "82bf53934b847a297f0c94431c0efa266b783eb3", "filename": "filter_profile.rs", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/2ab1084ed44284e4f1d44c2a5b4e982a5539d37d/filter_profile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ab1084ed44284e4f1d44c2a5b4e982a5539d37d/filter_profile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/filter_profile.rs?ref=2ab1084ed44284e4f1d44c2a5b4e982a5539d37d", "patch": "@@ -0,0 +1,124 @@\n+#!/bin/bash\n+#![forbid(unsafe_code)]/* This line is ignored by bash\n+# This block is ignored by rustc\n+CHANNEL=\"release\"\n+source ./config.sh\n+CG_CLIF_JIT=1 PROFILE=$1 OUTPUT=$2 exec $RUSTC $0 --crate-type bin -Cprefer-dynamic\n+#*/\n+\n+//! This program filters away uninteresting samples and trims uninteresting frames for stackcollapse\n+//! profiles.\n+//!\n+//! Usage: ./filter_profile.rs <profile in stackcollapse format> <output file>\n+//!\n+//! This file is specially crafted to be both a valid bash script and valid rust source file. If\n+//! executed as bash script this will run the rust source using cg_clif in JIT mode.\n+\n+use std::io::Write;\n+\n+fn main() -> Result<(), Box<dyn std::error::Error>> {\n+    let profile_name = std::env::var(\"PROFILE\").unwrap();\n+    let output_name = std::env::var(\"OUTPUT\").unwrap();\n+    if profile_name.is_empty() || output_name.is_empty() {\n+        println!(\"Usage: ./filter_profile.rs <profile in stackcollapse format> <output file>\");\n+        std::process::exit(1);\n+    }\n+    let profile = std::fs::read_to_string(profile_name)\n+        .map_err(|err| format!(\"Failed to read profile {}\", err))?;\n+    let mut output = std::fs::OpenOptions::new()\n+        .create(true)\n+        .write(true)\n+        .truncate(true)\n+        .open(output_name)?;\n+\n+    for line in profile.lines() {\n+        let mut stack = &line[..line.rfind(\" \").unwrap()];\n+        let count = &line[line.rfind(\" \").unwrap() + 1..];\n+\n+        // Filter away uninteresting samples\n+        if !stack.contains(\"rustc_codegen_cranelift\") {\n+            continue;\n+        }\n+\n+        if stack.contains(\"rustc_mir::monomorphize::partitioning::collect_and_partition_mono_items\")\n+            || stack.contains(\"rustc_incremental::assert_dep_graph::assert_dep_graph\")\n+            || stack.contains(\"rustc_symbol_mangling::test::report_symbol_names\")\n+        {\n+            continue;\n+        }\n+\n+        // Trim start\n+        if let Some(index) = stack.find(\"rustc_interface::passes::configure_and_expand\") {\n+            stack = &stack[index..];\n+        } else if let Some(index) = stack.find(\"rustc_interface::passes::analysis\") {\n+            stack = &stack[index..];\n+        } else if let Some(index) = stack.find(\"rustc_interface::passes::start_codegen\") {\n+            stack = &stack[index..];\n+        } else if let Some(index) = stack.find(\"rustc_interface::queries::Linker::link\") {\n+            stack = &stack[index..];\n+        }\n+\n+        if let Some(index) = stack.find(\"rustc_codegen_cranelift::driver::aot::module_codegen\") {\n+            stack = &stack[index..];\n+        }\n+\n+        // Trim end\n+        const MALLOC: &str = \"malloc\";\n+        if let Some(index) = stack.find(MALLOC) {\n+            stack = &stack[..index + MALLOC.len()];\n+        }\n+\n+        const FREE: &str = \"free\";\n+        if let Some(index) = stack.find(FREE) {\n+            stack = &stack[..index + FREE.len()];\n+        }\n+\n+        const TYPECK_ITEM_BODIES: &str = \"rustc_typeck::check::typeck_item_bodies\";\n+        if let Some(index) = stack.find(TYPECK_ITEM_BODIES) {\n+            stack = &stack[..index + TYPECK_ITEM_BODIES.len()];\n+        }\n+\n+        const COLLECT_AND_PARTITION_MONO_ITEMS: &str =\n+            \"rustc_mir::monomorphize::partitioning::collect_and_partition_mono_items\";\n+        if let Some(index) = stack.find(COLLECT_AND_PARTITION_MONO_ITEMS) {\n+            stack = &stack[..index + COLLECT_AND_PARTITION_MONO_ITEMS.len()];\n+        }\n+\n+        const ASSERT_DEP_GRAPH: &str = \"rustc_incremental::assert_dep_graph::assert_dep_graph\";\n+        if let Some(index) = stack.find(ASSERT_DEP_GRAPH) {\n+            stack = &stack[..index + ASSERT_DEP_GRAPH.len()];\n+        }\n+\n+        const REPORT_SYMBOL_NAMES: &str = \"rustc_symbol_mangling::test::report_symbol_names\";\n+        if let Some(index) = stack.find(REPORT_SYMBOL_NAMES) {\n+            stack = &stack[..index + REPORT_SYMBOL_NAMES.len()];\n+        }\n+\n+        const ENCODE_METADATA: &str = \"rustc_middle::ty::context::TyCtxt::encode_metadata\";\n+        if let Some(index) = stack.find(ENCODE_METADATA) {\n+            stack = &stack[..index + ENCODE_METADATA.len()];\n+        }\n+\n+        const SUBST_AND_NORMALIZE_ERASING_REGIONS: &str = \"rustc_middle::ty::normalize_erasing_regions::<impl rustc_middle::ty::context::TyCtxt>::subst_and_normalize_erasing_regions\";\n+        if let Some(index) = stack.find(SUBST_AND_NORMALIZE_ERASING_REGIONS) {\n+            stack = &stack[..index + SUBST_AND_NORMALIZE_ERASING_REGIONS.len()];\n+        }\n+\n+        const NORMALIZE_ERASING_LATE_BOUND_REGIONS: &str = \"rustc_middle::ty::normalize_erasing_regions::<impl rustc_middle::ty::context::TyCtxt>::normalize_erasing_late_bound_regions\";\n+        if let Some(index) = stack.find(NORMALIZE_ERASING_LATE_BOUND_REGIONS) {\n+            stack = &stack[..index + NORMALIZE_ERASING_LATE_BOUND_REGIONS.len()];\n+        }\n+\n+        const INST_BUILD: &str = \"<cranelift_frontend::frontend::FuncInstBuilder as cranelift_codegen::ir::builder::InstBuilderBase>::build\";\n+        if let Some(index) = stack.find(INST_BUILD) {\n+            stack = &stack[..index + INST_BUILD.len()];\n+        }\n+\n+        output.write_all(stack.as_bytes())?;\n+        output.write_all(&*b\" \")?;\n+        output.write_all(count.as_bytes())?;\n+        output.write_all(&*b\"\\n\")?;\n+    }\n+\n+    Ok(())\n+}"}]}