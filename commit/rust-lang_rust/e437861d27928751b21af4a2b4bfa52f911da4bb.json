{"sha": "e437861d27928751b21af4a2b4bfa52f911da4bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0Mzc4NjFkMjc5Mjg3NTFiMjFhZjRhMmI0YmZhNTJmOTExZGE0YmI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-22T11:20:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-22T11:20:23Z"}, "message": "Rollup merge of #57537 - sinkuu:fmt_perf, r=alexcrichton\n\nSmall perf improvement for fmt\n\nAdded benchmark is based on #10761", "tree": {"sha": "8266f6d84f352e79f8880923af89a861c4f54c57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8266f6d84f352e79f8880923af89a861c4f54c57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e437861d27928751b21af4a2b4bfa52f911da4bb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcRvx4CRBK7hj4Ov3rIwAAdHIIAA60w06CaFgBaGLISR0KjuDb\nKpIXpfO5T4wIR8iv9mkzizcEDU+Wfgt4a95qDLrQKafqCjXncV2j2uslSZYHq79L\nlxbQAUOfCQQTfvBhQOApYIyiGKBtKgnlS/o/y4Gf9LZSx9y5+74575nMxFVNzGy4\nMwO67A66aU88nrZcYbHVzEQQ6F6vEIc47mzaHvDBIfjDKy01crkIt8QbHHHyfbop\nVqPWhEGvoolv3I5pKW/05+w2/zBjnT9GTtIj85T3kphpEqf+f0qLm8bFwUAouZ2+\naIY+Tga6od31JNUq5wdBhEZ/AkjXFB9+jSTDuJLHqmcd3bfBtp4zSAYUP/AVTus=\n=+eED\n-----END PGP SIGNATURE-----\n", "payload": "tree 8266f6d84f352e79f8880923af89a861c4f54c57\nparent 70015373b4980fbfa10130de4b0ce041f5b5da8b\nparent 038d8372244ab088ea186e10704e2bfc4e83f477\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1548156023 +0100\ncommitter GitHub <noreply@github.com> 1548156023 +0100\n\nRollup merge of #57537 - sinkuu:fmt_perf, r=alexcrichton\n\nSmall perf improvement for fmt\n\nAdded benchmark is based on #10761\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e437861d27928751b21af4a2b4bfa52f911da4bb", "html_url": "https://github.com/rust-lang/rust/commit/e437861d27928751b21af4a2b4bfa52f911da4bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e437861d27928751b21af4a2b4bfa52f911da4bb/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70015373b4980fbfa10130de4b0ce041f5b5da8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/70015373b4980fbfa10130de4b0ce041f5b5da8b", "html_url": "https://github.com/rust-lang/rust/commit/70015373b4980fbfa10130de4b0ce041f5b5da8b"}, {"sha": "038d8372244ab088ea186e10704e2bfc4e83f477", "url": "https://api.github.com/repos/rust-lang/rust/commits/038d8372244ab088ea186e10704e2bfc4e83f477", "html_url": "https://github.com/rust-lang/rust/commit/038d8372244ab088ea186e10704e2bfc4e83f477"}], "stats": {"total": 135, "additions": 130, "deletions": 5}, "files": [{"sha": "92f10c760c6d2cc63fefb8e37d79f9ff1ce59774", "filename": "src/libcore/benches/fmt.rs", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/e437861d27928751b21af4a2b4bfa52f911da4bb/src%2Flibcore%2Fbenches%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e437861d27928751b21af4a2b4bfa52f911da4bb/src%2Flibcore%2Fbenches%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Ffmt.rs?ref=e437861d27928751b21af4a2b4bfa52f911da4bb", "patch": "@@ -0,0 +1,110 @@\n+use std::io::{self, Write as IoWrite};\n+use std::fmt::{self, Write as FmtWrite};\n+use test::Bencher;\n+\n+#[bench]\n+fn write_vec_value(bh: &mut Bencher) {\n+    bh.iter(|| {\n+        let mut mem = Vec::new();\n+        for _ in 0..1000 {\n+            mem.write_all(\"abc\".as_bytes()).unwrap();\n+        }\n+    });\n+}\n+\n+#[bench]\n+fn write_vec_ref(bh: &mut Bencher) {\n+    bh.iter(|| {\n+        let mut mem = Vec::new();\n+        let wr = &mut mem as &mut dyn io::Write;\n+        for _ in 0..1000 {\n+            wr.write_all(\"abc\".as_bytes()).unwrap();\n+        }\n+    });\n+}\n+\n+#[bench]\n+fn write_vec_macro1(bh: &mut Bencher) {\n+    bh.iter(|| {\n+        let mut mem = Vec::new();\n+        let wr = &mut mem as &mut dyn io::Write;\n+        for _ in 0..1000 {\n+            write!(wr, \"abc\").unwrap();\n+        }\n+    });\n+}\n+\n+#[bench]\n+fn write_vec_macro2(bh: &mut Bencher) {\n+    bh.iter(|| {\n+        let mut mem = Vec::new();\n+        let wr = &mut mem as &mut dyn io::Write;\n+        for _ in 0..1000 {\n+            write!(wr, \"{}\", \"abc\").unwrap();\n+        }\n+    });\n+}\n+\n+#[bench]\n+fn write_vec_macro_debug(bh: &mut Bencher) {\n+    bh.iter(|| {\n+        let mut mem = Vec::new();\n+        let wr = &mut mem as &mut dyn io::Write;\n+        for _ in 0..1000 {\n+            write!(wr, \"{:?}\", \"\u2603\").unwrap();\n+        }\n+    });\n+}\n+\n+#[bench]\n+fn write_str_value(bh: &mut Bencher) {\n+    bh.iter(|| {\n+        let mut mem = String::new();\n+        for _ in 0..1000 {\n+            mem.write_str(\"abc\").unwrap();\n+        }\n+    });\n+}\n+\n+#[bench]\n+fn write_str_ref(bh: &mut Bencher) {\n+    bh.iter(|| {\n+        let mut mem = String::new();\n+        let wr = &mut mem as &mut dyn fmt::Write;\n+        for _ in 0..1000 {\n+            wr.write_str(\"abc\").unwrap();\n+        }\n+    });\n+}\n+\n+#[bench]\n+fn write_str_macro1(bh: &mut Bencher) {\n+    bh.iter(|| {\n+        let mut mem = String::new();\n+        for _ in 0..1000 {\n+            write!(mem, \"abc\").unwrap();\n+        }\n+    });\n+}\n+\n+#[bench]\n+fn write_str_macro2(bh: &mut Bencher) {\n+    bh.iter(|| {\n+        let mut mem = String::new();\n+        let wr = &mut mem as &mut dyn fmt::Write;\n+        for _ in 0..1000 {\n+            write!(wr, \"{}\", \"abc\").unwrap();\n+        }\n+    });\n+}\n+\n+#[bench]\n+fn write_str_macro_debug(bh: &mut Bencher) {\n+    bh.iter(|| {\n+        let mut mem = String::new();\n+        let wr = &mut mem as &mut dyn fmt::Write;\n+        for _ in 0..1000 {\n+            write!(wr, \"{:?}\", \"\u2603\").unwrap();\n+        }\n+    });\n+}"}, {"sha": "48572af611a5b79a2a8dcdf660289c0c304a28e5", "filename": "src/libcore/benches/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e437861d27928751b21af4a2b4bfa52f911da4bb/src%2Flibcore%2Fbenches%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e437861d27928751b21af4a2b4bfa52f911da4bb/src%2Flibcore%2Fbenches%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Flib.rs?ref=e437861d27928751b21af4a2b4bfa52f911da4bb", "patch": "@@ -11,3 +11,4 @@ mod iter;\n mod num;\n mod ops;\n mod slice;\n+mod fmt;"}, {"sha": "935579f4943b60f12b5e79b795edb0301ecd54f4", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e437861d27928751b21af4a2b4bfa52f911da4bb/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e437861d27928751b21af4a2b4bfa52f911da4bb/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=e437861d27928751b21af4a2b4bfa52f911da4bb", "patch": "@@ -1006,28 +1006,30 @@ pub fn write(output: &mut dyn Write, args: Arguments) -> Result {\n         curarg: args.args.iter(),\n     };\n \n-    let mut pieces = args.pieces.iter();\n+    let mut idx = 0;\n \n     match args.fmt {\n         None => {\n             // We can use default formatting parameters for all arguments.\n-            for (arg, piece) in args.args.iter().zip(pieces.by_ref()) {\n+            for (arg, piece) in args.args.iter().zip(args.pieces.iter()) {\n                 formatter.buf.write_str(*piece)?;\n                 (arg.formatter)(arg.value, &mut formatter)?;\n+                idx += 1;\n             }\n         }\n         Some(fmt) => {\n             // Every spec has a corresponding argument that is preceded by\n             // a string piece.\n-            for (arg, piece) in fmt.iter().zip(pieces.by_ref()) {\n+            for (arg, piece) in fmt.iter().zip(args.pieces.iter()) {\n                 formatter.buf.write_str(*piece)?;\n                 formatter.run(arg)?;\n+                idx += 1;\n             }\n         }\n     }\n \n     // There can be only one trailing string piece left.\n-    if let Some(piece) = pieces.next() {\n+    if let Some(piece) = args.pieces.get(idx) {\n         formatter.buf.write_str(*piece)?;\n     }\n "}, {"sha": "da440cdd72f8065d7266a09d8feaff3959dfdb15", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e437861d27928751b21af4a2b4bfa52f911da4bb/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e437861d27928751b21af4a2b4bfa52f911da4bb/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=e437861d27928751b21af4a2b4bfa52f911da4bb", "patch": "@@ -72,6 +72,15 @@ pub enum Position<'a> {\n     ArgumentNamed(&'a str),\n }\n \n+impl Position<'_> {\n+    pub fn index(&self) -> Option<usize> {\n+        match self {\n+            ArgumentIs(i) | ArgumentImplicitlyIs(i) => Some(*i),\n+            _ => None,\n+        }\n+    }\n+}\n+\n /// Enum of alignments which are supported.\n #[derive(Copy, Clone, PartialEq)]\n pub enum Alignment {"}, {"sha": "215df4224c5f1ec7516ece1931eabbfea94d120c", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e437861d27928751b21af4a2b4bfa52f911da4bb/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e437861d27928751b21af4a2b4bfa52f911da4bb/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=e437861d27928751b21af4a2b4bfa52f911da4bb", "patch": "@@ -493,7 +493,10 @@ impl<'a, 'b> Context<'a, 'b> {\n \n                 let fill = arg.format.fill.unwrap_or(' ');\n \n-                if *arg != simple_arg || fill != ' ' {\n+                let pos_simple =\n+                    arg.position.index() == simple_arg.position.index();\n+\n+                if !pos_simple || arg.format != simple_arg.format || fill != ' ' {\n                     self.all_pieces_simple = false;\n                 }\n "}]}