{"sha": "47cfeba4675906dceb92e0a6b2846146ff888581", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3Y2ZlYmE0Njc1OTA2ZGNlYjkyZTBhNmIyODQ2MTQ2ZmY4ODg1ODE=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-09T13:44:21Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-09T13:44:21Z"}, "message": "Add cases for iface values to rust_shape.h\n\nThey appear to log okay now, but I can't promise much beyond that.\n\n@pcwalton If you feel like taking a look, I'd be grateful. Interfaces are\nboxes containing a (tydesc, dict, value_of_any_type) tuple, where the leading\ntydesc describes the whole tuple.\n\nIssue #1437", "tree": {"sha": "e27ae3a6474f09b5ab1029d1a3df29ac6121a165", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e27ae3a6474f09b5ab1029d1a3df29ac6121a165"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47cfeba4675906dceb92e0a6b2846146ff888581", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47cfeba4675906dceb92e0a6b2846146ff888581", "html_url": "https://github.com/rust-lang/rust/commit/47cfeba4675906dceb92e0a6b2846146ff888581", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47cfeba4675906dceb92e0a6b2846146ff888581/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fa749167680a2d4de9fa07cbb2c8336deb7d42f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fa749167680a2d4de9fa07cbb2c8336deb7d42f", "html_url": "https://github.com/rust-lang/rust/commit/9fa749167680a2d4de9fa07cbb2c8336deb7d42f"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "41be4c43d8b0530999b4aeac411f018b191ebc75", "filename": "src/rt/rust_shape.h", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/47cfeba4675906dceb92e0a6b2846146ff888581/src%2Frt%2Frust_shape.h", "raw_url": "https://github.com/rust-lang/rust/raw/47cfeba4675906dceb92e0a6b2846146ff888581/src%2Frt%2Frust_shape.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.h?ref=47cfeba4675906dceb92e0a6b2846146ff888581", "patch": "@@ -51,6 +51,7 @@ const uint8_t SHAPE_OBJ = 19u;\n const uint8_t SHAPE_RES = 20u;\n const uint8_t SHAPE_VAR = 21u;\n const uint8_t SHAPE_UNIQ = 22u;\n+const uint8_t SHAPE_IFACE = 24u;\n \n #ifdef _LP64\n const uint8_t SHAPE_PTR = SHAPE_U64;\n@@ -382,6 +383,7 @@ ctxt<T>::walk() {\n     case SHAPE_RES:     walk_res();             break;\n     case SHAPE_VAR:     walk_var();             break;\n     case SHAPE_UNIQ:    walk_uniq();            break;\n+    case SHAPE_IFACE:   WALK_SIMPLE(walk_iface); break;\n     default:            abort();\n     }\n }\n@@ -566,6 +568,7 @@ class print : public ctxt<print> {\n \n     void walk_fn()  { DPRINT(\"fn\"); }\n     void walk_obj() { DPRINT(\"obj\"); }\n+    void walk_iface() { DPRINT(\"iface\"); }\n     void walk_closure();\n \n     template<typename T>\n@@ -611,6 +614,7 @@ class size_of : public ctxt<size_of> {\n     void walk_box()     { sa.set(sizeof(void *),   sizeof(void *)); }\n     void walk_fn()      { sa.set(sizeof(void *)*2, sizeof(void *)); }\n     void walk_obj()     { sa.set(sizeof(void *)*2, sizeof(void *)); }\n+    void walk_iface()   { sa.set(sizeof(void *),   sizeof(void *)); }\n     void walk_closure();\n \n     void walk_vec(bool is_pod, uint16_t sp_size) {\n@@ -819,6 +823,7 @@ class data : public ctxt< data<T,U> > {\n     void walk_uniq_contents();\n     void walk_fn_contents(ptr &dp);\n     void walk_obj_contents(ptr &dp);\n+    void walk_iface_value(ptr &dp);\n     void walk_variant(tag_info &tinfo, tag_variant_t variant);\n \n     static std::pair<uint8_t *,uint8_t *> get_vec_data_range(ptr dp);\n@@ -863,6 +868,8 @@ class data : public ctxt< data<T,U> > {\n         dp = next_dp;\n     }\n \n+    void walk_iface() { DATA_SIMPLE(void *, walk_iface()); }\n+\n     void walk_res(const rust_fn *dtor, unsigned n_params,\n                   const type_param *params, const uint8_t *end_sp) {\n         typename U::template data<uintptr_t>::t live = bump_dp<uintptr_t>(dp);\n@@ -989,6 +996,20 @@ data<T,U>::walk_obj_contents(ptr &dp) {\n     sub.walk();\n }\n \n+template<typename T,typename U>\n+void\n+data<T,U>::walk_iface_value(ptr &dp) {\n+    uint8_t *box_ptr = bump_dp<uint8_t *>(dp);\n+    if (!box_ptr) return;\n+    uint8_t *body_ptr = box_ptr + sizeof(void*);\n+    type_desc *valtydesc =\n+        *reinterpret_cast<type_desc **>(body_ptr);\n+    ptr value_dp(body_ptr + sizeof(void*) * 2);\n+    T sub(*static_cast<T *>(this), valtydesc->shape + 2, NULL, NULL,\n+          value_dp);\n+    sub.align = true;\n+    sub.walk();\n+}\n \n // Polymorphic logging, for convenience\n \n@@ -1073,6 +1094,13 @@ class log : public data<log,ptr> {\n         data<log,ptr>::walk_obj_contents(dp);\n     }\n \n+    void walk_iface() {\n+        out << prefix << \"iface(\";\n+        prefix = \"\";\n+        data<log,ptr>::walk_iface_value(dp);\n+        out << prefix << \")\";\n+    }\n+\n     void walk_subcontext(log &sub) { sub.walk(); }\n \n     void walk_box_contents(log &sub, ptr &ref_count_dp) {"}]}